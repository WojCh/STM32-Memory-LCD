
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001365c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00026290  08013810  08013810  00023810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08039aa0  08039aa0  000504f0  2**0
                  CONTENTS
  4 .ARM          00000008  08039aa0  08039aa0  00049aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08039aa8  08039aa8  000504f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08039aa8  08039aa8  00049aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08039aac  08039aac  00049aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f0  20000000  08039ab0  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000504f0  2**0
                  CONTENTS
 10 .bss          00003574  200004f0  200004f0  000504f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003a64  20003a64  000504f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000504f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a3a  00000000  00000000  00050520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000580a  00000000  00000000  00070f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  00076768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016e0  00000000  00000000  00078080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a437  00000000  00000000  00079760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025bbf  00000000  00000000  000a3b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6cb5  00000000  00000000  000c9756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b040b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008468  00000000  00000000  001b045c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  001b88c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001b8990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200004f0 	.word	0x200004f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080137f4 	.word	0x080137f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200004f4 	.word	0x200004f4
 80001ec:	080137f4 	.word	0x080137f4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c90:	f000 b974 	b.w	8000f7c <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9d08      	ldr	r5, [sp, #32]
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	468e      	mov	lr, r1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d14d      	bne.n	8000d56 <__udivmoddi4+0xaa>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	d969      	bls.n	8000d94 <__udivmoddi4+0xe8>
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	b152      	cbz	r2, 8000cdc <__udivmoddi4+0x30>
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	f1c2 0120 	rsb	r1, r2, #32
 8000cce:	fa20 f101 	lsr.w	r1, r0, r1
 8000cd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cda:	4094      	lsls	r4, r2
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	0c21      	lsrs	r1, r4, #16
 8000ce2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce6:	fa1f f78c 	uxth.w	r7, ip
 8000cea:	fb08 e316 	mls	r3, r8, r6, lr
 8000cee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cf2:	fb06 f107 	mul.w	r1, r6, r7
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x64>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d02:	f080 811f 	bcs.w	8000f44 <__udivmoddi4+0x298>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 811c 	bls.w	8000f44 <__udivmoddi4+0x298>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d18:	fb08 3310 	mls	r3, r8, r0, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb00 f707 	mul.w	r7, r0, r7
 8000d24:	42a7      	cmp	r7, r4
 8000d26:	d90a      	bls.n	8000d3e <__udivmoddi4+0x92>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d30:	f080 810a 	bcs.w	8000f48 <__udivmoddi4+0x29c>
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	f240 8107 	bls.w	8000f48 <__udivmoddi4+0x29c>
 8000d3a:	4464      	add	r4, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	1be4      	subs	r4, r4, r7
 8000d44:	2600      	movs	r6, #0
 8000d46:	b11d      	cbz	r5, 8000d50 <__udivmoddi4+0xa4>
 8000d48:	40d4      	lsrs	r4, r2
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0xc2>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80ef 	beq.w	8000f3e <__udivmoddi4+0x292>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x160>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xd4>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80f9 	bhi.w	8000f72 <__udivmoddi4+0x2c6>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0303 	sbc.w	r3, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	469e      	mov	lr, r3
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e0      	beq.n	8000d50 <__udivmoddi4+0xa4>
 8000d8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d92:	e7dd      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000d94:	b902      	cbnz	r2, 8000d98 <__udivmoddi4+0xec>
 8000d96:	deff      	udf	#255	; 0xff
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	f040 8092 	bne.w	8000ec6 <__udivmoddi4+0x21a>
 8000da2:	eba1 010c 	sub.w	r1, r1, ip
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f fe8c 	uxth.w	lr, ip
 8000dae:	2601      	movs	r6, #1
 8000db0:	0c20      	lsrs	r0, r4, #16
 8000db2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbe:	fb0e f003 	mul.w	r0, lr, r3
 8000dc2:	4288      	cmp	r0, r1
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x12c>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x12a>
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	f200 80cb 	bhi.w	8000f6c <__udivmoddi4+0x2c0>
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	1a09      	subs	r1, r1, r0
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de0:	fb07 1110 	mls	r1, r7, r0, r1
 8000de4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x156>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x154>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	f200 80bb 	bhi.w	8000f76 <__udivmoddi4+0x2ca>
 8000e00:	4608      	mov	r0, r1
 8000e02:	eba4 040e 	sub.w	r4, r4, lr
 8000e06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e0a:	e79c      	b.n	8000d46 <__udivmoddi4+0x9a>
 8000e0c:	f1c6 0720 	rsb	r7, r6, #32
 8000e10:	40b3      	lsls	r3, r6
 8000e12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	40f9      	lsrs	r1, r7
 8000e26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e32:	0c20      	lsrs	r0, r4, #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fb09 1118 	mls	r1, r9, r8, r1
 8000e3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e40:	fb08 f00e 	mul.w	r0, r8, lr
 8000e44:	4288      	cmp	r0, r1
 8000e46:	fa02 f206 	lsl.w	r2, r2, r6
 8000e4a:	d90b      	bls.n	8000e64 <__udivmoddi4+0x1b8>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e54:	f080 8088 	bcs.w	8000f68 <__udivmoddi4+0x2bc>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f240 8085 	bls.w	8000f68 <__udivmoddi4+0x2bc>
 8000e5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	458e      	cmp	lr, r1
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x1e2>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e84:	d26c      	bcs.n	8000f60 <__udivmoddi4+0x2b4>
 8000e86:	458e      	cmp	lr, r1
 8000e88:	d96a      	bls.n	8000f60 <__udivmoddi4+0x2b4>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4461      	add	r1, ip
 8000e8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e92:	fba0 9402 	umull	r9, r4, r0, r2
 8000e96:	eba1 010e 	sub.w	r1, r1, lr
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	46c8      	mov	r8, r9
 8000e9e:	46a6      	mov	lr, r4
 8000ea0:	d356      	bcc.n	8000f50 <__udivmoddi4+0x2a4>
 8000ea2:	d053      	beq.n	8000f4c <__udivmoddi4+0x2a0>
 8000ea4:	b15d      	cbz	r5, 8000ebe <__udivmoddi4+0x212>
 8000ea6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000eae:	fa01 f707 	lsl.w	r7, r1, r7
 8000eb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb6:	40f1      	lsrs	r1, r6
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	e9c5 7100 	strd	r7, r1, [r5]
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	f1c2 0320 	rsb	r3, r2, #32
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	4301      	orrs	r1, r0
 8000ed8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee8:	0c0b      	lsrs	r3, r1, #16
 8000eea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eee:	fb00 f60e 	mul.w	r6, r0, lr
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x260>
 8000efa:	eb1c 0303 	adds.w	r3, ip, r3
 8000efe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f02:	d22f      	bcs.n	8000f64 <__udivmoddi4+0x2b8>
 8000f04:	429e      	cmp	r6, r3
 8000f06:	d92d      	bls.n	8000f64 <__udivmoddi4+0x2b8>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	1b9b      	subs	r3, r3, r6
 8000f0e:	b289      	uxth	r1, r1
 8000f10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f14:	fb07 3316 	mls	r3, r7, r6, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x28a>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f2c:	d216      	bcs.n	8000f5c <__udivmoddi4+0x2b0>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d914      	bls.n	8000f5c <__udivmoddi4+0x2b0>
 8000f32:	3e02      	subs	r6, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f3c:	e738      	b.n	8000db0 <__udivmoddi4+0x104>
 8000f3e:	462e      	mov	r6, r5
 8000f40:	4628      	mov	r0, r5
 8000f42:	e705      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000f44:	4606      	mov	r6, r0
 8000f46:	e6e3      	b.n	8000d10 <__udivmoddi4+0x64>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6f8      	b.n	8000d3e <__udivmoddi4+0x92>
 8000f4c:	454b      	cmp	r3, r9
 8000f4e:	d2a9      	bcs.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f50:	ebb9 0802 	subs.w	r8, r9, r2
 8000f54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f58:	3801      	subs	r0, #1
 8000f5a:	e7a3      	b.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f5c:	4646      	mov	r6, r8
 8000f5e:	e7ea      	b.n	8000f36 <__udivmoddi4+0x28a>
 8000f60:	4620      	mov	r0, r4
 8000f62:	e794      	b.n	8000e8e <__udivmoddi4+0x1e2>
 8000f64:	4640      	mov	r0, r8
 8000f66:	e7d1      	b.n	8000f0c <__udivmoddi4+0x260>
 8000f68:	46d0      	mov	r8, sl
 8000f6a:	e77b      	b.n	8000e64 <__udivmoddi4+0x1b8>
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	e732      	b.n	8000dd8 <__udivmoddi4+0x12c>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e709      	b.n	8000d8a <__udivmoddi4+0xde>
 8000f76:	4464      	add	r4, ip
 8000f78:	3802      	subs	r0, #2
 8000f7a:	e742      	b.n	8000e02 <__udivmoddi4+0x156>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8000f8e:	2332      	movs	r3, #50	; 0x32
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	22d0      	movs	r2, #208	; 0xd0
 8000f9e:	21ef      	movs	r1, #239	; 0xef
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <read_chip_id+0x3c>)
 8000fa2:	f006 fe07 	bl	8007bb4 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	2b55      	cmp	r3, #85	; 0x55
 8000faa:	d001      	beq.n	8000fb0 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000063c 	.word	0x2000063c

08000fc0 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8000fcc:	2300      	movs	r3, #0
 8000fce:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d81a      	bhi.n	800100c <set_oss+0x4c>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <set_oss+0x1c>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	08000ff5 	.word	0x08000ff5
 8000fe4:	08000ffd 	.word	0x08000ffd
 8000fe8:	08001005 	.word	0x08001005
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	705a      	strb	r2, [r3, #1]
			break;
 8000ff2:	e00f      	b.n	8001014 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	705a      	strb	r2, [r3, #1]
			break;
 8000ffa:	e00b      	b.n	8001014 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	220e      	movs	r2, #14
 8001000:	705a      	strb	r2, [r3, #1]
			break;
 8001002:	e007      	b.n	8001014 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	221a      	movs	r2, #26
 8001008:	705a      	strb	r2, [r3, #1]
			break;
 800100a:	e003      	b.n	8001014 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2208      	movs	r2, #8
 8001010:	705a      	strb	r2, [r3, #1]
			break;
 8001012:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	78fa      	ldrb	r2, [r7, #3]
 8001018:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	70fb      	strb	r3, [r7, #3]
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001024:	2332      	movs	r3, #50	; 0x32
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2302      	movs	r3, #2
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	22f4      	movs	r2, #244	; 0xf4
 8001036:	21ee      	movs	r1, #238	; 0xee
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <set_oss+0x88>)
 800103a:	f006 fcc1 	bl	80079c0 <HAL_I2C_Mem_Write>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000063c 	.word	0x2000063c

0800104c <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af04      	add	r7, sp, #16
 8001052:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800107a:	2332      	movs	r3, #50	; 0x32
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2316      	movs	r3, #22
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	22aa      	movs	r2, #170	; 0xaa
 800108c:	21ef      	movs	r1, #239	; 0xef
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <read_calib_data+0xe0>)
 8001090:	f006 fd90 	bl	8007bb4 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800109a:	e03c      	b.n	8001116 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800109c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	3328      	adds	r3, #40	; 0x28
 80010a4:	443b      	add	r3, r7
 80010a6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b219      	sxth	r1, r3
 80010ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010b2:	3328      	adds	r3, #40	; 0x28
 80010b4:	443b      	add	r3, r7
 80010b6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	4403      	add	r3, r0
 80010c6:	430a      	orrs	r2, r1
 80010c8:	b212      	sxth	r2, r2
 80010ca:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80010cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf0c      	ite	eq
 80010de:	2301      	moveq	r3, #1
 80010e0:	2300      	movne	r3, #0
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	440b      	add	r3, r1
 80010ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 8001106:	2302      	movs	r3, #2
 8001108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800110c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001110:	3301      	adds	r3, #1
 8001112:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001116:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800111a:	2b0b      	cmp	r3, #11
 800111c:	d9be      	bls.n	800109c <read_calib_data+0x50>
		}
	}

	return ret_val;
 800111e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001122:	4618      	mov	r0, r3
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000063c 	.word	0x2000063c

08001130 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2204      	movs	r2, #4
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00b f87c 	bl	800c23c <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001144:	687c      	ldr	r4, [r7, #4]
 8001146:	f7ff ff1b 	bl	8000f80 <read_chip_id>
 800114a:	4603      	mov	r3, r0
 800114c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	687c      	ldr	r4, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff79 	bl	800104c <read_calib_data>
 800115a:	4603      	mov	r3, r0
 800115c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3340      	adds	r3, #64	; 0x40
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff2a 	bl	8000fc0 <set_oss>
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800117a:	232e      	movs	r3, #46	; 0x2e
 800117c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800117e:	2332      	movs	r3, #50	; 0x32
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	22f4      	movs	r2, #244	; 0xf4
 800118e:	21ee      	movs	r1, #238	; 0xee
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <get_ut+0x50>)
 8001192:	f006 fc15 	bl	80079c0 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001196:	2005      	movs	r0, #5
 8001198:	f005 feea 	bl	8006f70 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800119c:	2332      	movs	r3, #50	; 0x32
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2302      	movs	r3, #2
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	22f6      	movs	r2, #246	; 0xf6
 80011ac:	21ef      	movs	r1, #239	; 0xef
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <get_ut+0x50>)
 80011b0:	f006 fd00 	bl	8007bb4 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80011b4:	793b      	ldrb	r3, [r7, #4]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	797a      	ldrb	r2, [r7, #5]
 80011ba:	4313      	orrs	r3, r2
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000063c 	.word	0x2000063c

080011c8 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 2a90 	vmov	r2, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	895b      	ldrh	r3, [r3, #10]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	8912      	ldrh	r2, [r2, #8]
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	13db      	asrs	r3, r3, #15
 80011fc:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001204:	02da      	lsls	r2, r3, #11
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800120c:	4619      	mov	r1, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	440b      	add	r3, r1
 8001212:	fb92 f3f3 	sdiv	r3, r2, r3
 8001216:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	441a      	add	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001226:	3308      	adds	r3, #8
 8001228:	111b      	asrs	r3, r3, #4
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001280 <get_temp+0xb8>
 8001236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123a:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800123e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001242:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001284 <get_temp+0xbc>
 8001246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	d908      	bls.n	8001262 <get_temp+0x9a>
 8001250:	edd7 7a03 	vldr	s15, [r7, #12]
 8001254:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001288 <get_temp+0xc0>
 8001258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	db03      	blt.n	800126a <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2203      	movs	r2, #3
 8001266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	ee07 3a90 	vmov	s15, r3
}
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	3dcccccd 	.word	0x3dcccccd
 8001284:	c2200000 	.word	0xc2200000
 8001288:	42aa0000 	.word	0x42aa0000

0800128c <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <get_up+0x7c>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	813b      	strh	r3, [r7, #8]
 800129a:	2300      	movs	r3, #0
 800129c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 80012a2:	2334      	movs	r3, #52	; 0x34
 80012a4:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80012a6:	2332      	movs	r3, #50	; 0x32
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	22f4      	movs	r2, #244	; 0xf4
 80012b8:	21ee      	movs	r1, #238	; 0xee
 80012ba:	4814      	ldr	r0, [pc, #80]	; (800130c <get_up+0x80>)
 80012bc:	f006 fb80 	bl	80079c0 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 fe54 	bl	8006f70 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80012c8:	2332      	movs	r3, #50	; 0x32
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2303      	movs	r3, #3
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	22f6      	movs	r2, #246	; 0xf6
 80012da:	21ef      	movs	r1, #239	; 0xef
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <get_up+0x80>)
 80012de:	f006 fc69 	bl	8007bb4 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80012e2:	7a3b      	ldrb	r3, [r7, #8]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	7a7b      	ldrb	r3, [r7, #9]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	4413      	add	r3, r2
 80012ec:	7aba      	ldrb	r2, [r7, #10]
 80012ee:	441a      	add	r2, r3
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	f1c3 0308 	rsb	r3, r3, #8
 80012f6:	fa42 f303 	asr.w	r3, r2, r3
 80012fa:	60fb      	str	r3, [r7, #12]
	return up;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	08013810 	.word	0x08013810
 800130c:	2000063c 	.word	0x2000063c

08001310 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001310:	b084      	sub	sp, #16
 8001312:	b480      	push	{r7}
 8001314:	b089      	sub	sp, #36	; 0x24
 8001316:	af00      	add	r7, sp, #0
 8001318:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800131c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800132e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001330:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001334:	461a      	mov	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	fb03 f303 	mul.w	r3, r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	da01      	bge.n	8001344 <get_pressure+0x34>
 8001340:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001344:	131b      	asrs	r3, r3, #12
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	da01      	bge.n	8001352 <get_pressure+0x42>
 800134e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001352:	12db      	asrs	r3, r3, #11
 8001354:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001356:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800135a:	461a      	mov	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	da01      	bge.n	800136a <get_pressure+0x5a>
 8001366:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800136a:	12db      	asrs	r3, r3, #11
 800136c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001376:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800137a:	009a      	lsls	r2, r3, #2
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4413      	add	r3, r2
 8001380:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001384:	4093      	lsls	r3, r2
 8001386:	3302      	adds	r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	da00      	bge.n	800138e <get_pressure+0x7e>
 800138c:	3303      	adds	r3, #3
 800138e:	109b      	asrs	r3, r3, #2
 8001390:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001392:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001396:	461a      	mov	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da02      	bge.n	80013a8 <get_pressure+0x98>
 80013a2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80013a6:	331f      	adds	r3, #31
 80013a8:	135b      	asrs	r3, r3, #13
 80013aa:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80013ac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80013b0:	461a      	mov	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fb03 f303 	mul.w	r3, r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da01      	bge.n	80013c0 <get_pressure+0xb0>
 80013bc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80013c0:	131b      	asrs	r3, r3, #12
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da02      	bge.n	80013d0 <get_pressure+0xc0>
 80013ca:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80013ce:	33ff      	adds	r3, #255	; 0xff
 80013d0:	141b      	asrs	r3, r3, #16
 80013d2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	3302      	adds	r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da00      	bge.n	80013e2 <get_pressure+0xd2>
 80013e0:	3303      	adds	r3, #3
 80013e2:	109b      	asrs	r3, r3, #2
 80013e4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80013e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	0bdb      	lsrs	r3, r3, #15
 80013f6:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80013f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001404:	4611      	mov	r1, r2
 8001406:	f24c 3250 	movw	r2, #50000	; 0xc350
 800140a:	410a      	asrs	r2, r1
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db06      	blt.n	8001426 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	005a      	lsls	r2, r3, #1
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	e005      	b.n	8001432 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b00      	cmp	r3, #0
 8001436:	da00      	bge.n	800143a <get_pressure+0x12a>
 8001438:	33ff      	adds	r3, #255	; 0xff
 800143a:	121b      	asrs	r3, r3, #8
 800143c:	461a      	mov	r2, r3
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2b00      	cmp	r3, #0
 8001442:	da00      	bge.n	8001446 <get_pressure+0x136>
 8001444:	33ff      	adds	r3, #255	; 0xff
 8001446:	121b      	asrs	r3, r3, #8
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f640 32de 	movw	r2, #3038	; 0xbde
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	da02      	bge.n	8001462 <get_pressure+0x152>
 800145c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001460:	33ff      	adds	r3, #255	; 0xff
 8001462:	141b      	asrs	r3, r3, #16
 8001464:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <get_pressure+0x198>)
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	da02      	bge.n	8001478 <get_pressure+0x168>
 8001472:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001476:	33ff      	adds	r3, #255	; 0xff
 8001478:	141b      	asrs	r3, r3, #16
 800147a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001486:	2b00      	cmp	r3, #0
 8001488:	da00      	bge.n	800148c <get_pressure+0x17c>
 800148a:	330f      	adds	r3, #15
 800148c:	111b      	asrs	r3, r3, #4
 800148e:	461a      	mov	r2, r3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	61fb      	str	r3, [r7, #28]

	return p;
 8001496:	69fb      	ldr	r3, [r7, #28]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	b004      	add	sp, #16
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	ffffe343 	.word	0xffffe343
 80014ac:	00000000 	.word	0x00000000

080014b0 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <get_altitude+0xb8>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014d4:	ee16 0a90 	vmov	r0, s13
 80014d8:	f7ff f850 	bl	800057c <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001558 <get_altitude+0xa8>
 80014e4:	ec43 2b10 	vmov	d0, r2, r3
 80014e8:	f00f fe12 	bl	8011110 <pow>
 80014ec:	ec53 2b10 	vmov	r2, r3, d0
 80014f0:	f04f 0000 	mov.w	r0, #0
 80014f4:	491d      	ldr	r1, [pc, #116]	; (800156c <get_altitude+0xbc>)
 80014f6:	f7fe fee1 	bl	80002bc <__aeabi_dsub>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a317      	add	r3, pc, #92	; (adr r3, 8001560 <get_altitude+0xb0>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f890 	bl	800062c <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb62 	bl	8000bdc <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 800151c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001520:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001570 <get_altitude+0xc0>
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d908      	bls.n	8001540 <get_altitude+0x90>
 800152e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001532:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001574 <get_altitude+0xc4>
 8001536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	db03      	blt.n	8001548 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2205      	movs	r2, #5
 8001544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	ee07 3a90 	vmov	s15, r3
}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	ccd9456c 	.word	0xccd9456c
 800155c:	3fc85b95 	.word	0x3fc85b95
 8001560:	00000000 	.word	0x00000000
 8001564:	40e5a540 	.word	0x40e5a540
 8001568:	20000000 	.word	0x20000000
 800156c:	3ff00000 	.word	0x3ff00000
 8001570:	c3fa0000 	.word	0xc3fa0000
 8001574:	460ca000 	.word	0x460ca000

08001578 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffe4 	bl	8000558 <__aeabi_i2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <get_slp+0x80>)
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80015fc <get_slp+0x84>
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	ee17 0a90 	vmov	r0, s15
 80015ae:	f7fe ffe5 	bl	800057c <__aeabi_f2d>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80015f0 <get_slp+0x78>
 80015ba:	ec43 2b10 	vmov	d0, r2, r3
 80015be:	f00f fda7 	bl	8011110 <pow>
 80015c2:	ec53 2b10 	vmov	r2, r3, d0
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7ff f959 	bl	8000880 <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fb01 	bl	8000bdc <__aeabi_d2f>
 80015da:	4603      	mov	r3, r0
 80015dc:	60fb      	str	r3, [r7, #12]

	return slp;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	ee07 3a90 	vmov	s15, r3
}
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdb0      	pop	{r4, r5, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	b851eb85 	.word	0xb851eb85
 80015f4:	4015051e 	.word	0x4015051e
 80015f8:	20000004 	.word	0x20000004
 80015fc:	472d2a00 	.word	0x472d2a00

08001600 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b095      	sub	sp, #84	; 0x54
 8001604:	af0e      	add	r7, sp, #56	; 0x38
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 800160a:	f7ff fdb3 	bl	8001174 <get_ut>
 800160e:	ee07 0a90 	vmov	s15, r0
 8001612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f7ff fdd3 	bl	80011c8 <get_temp>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001630:	f7ff fe2c 	bl	800128c <get_up>
 8001634:	4602      	mov	r2, r0
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 800163a:	683e      	ldr	r6, [r7, #0]
 800163c:	466d      	mov	r5, sp
 800163e:	f106 0410 	add.w	r4, r6, #16
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	602b      	str	r3, [r5, #0]
 8001652:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001656:	f7ff fe5b 	bl	8001310 <get_pressure>
 800165a:	4602      	mov	r2, r0
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f7ff ff89 	bl	8001578 <get_slp>
 8001666:	eef0 7a40 	vmov.f32	s15, s0
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f7ff ff1d 	bl	80014b0 <get_altitude>
 8001676:	eef0 7a40 	vmov.f32	s15, s0
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	617b      	str	r3, [r7, #20]
	return result;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	461c      	mov	r4, r3
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016b0 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80016bc:	e083      	b.n	80017c6 <initButtons+0x116>
		btns[i]->pin = pins[i];
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	440b      	add	r3, r1
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4944      	ldr	r1, [pc, #272]	; (80017dc <initButtons+0x12c>)
 80016cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80016d0:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	440b      	add	r3, r1
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4940      	ldr	r1, [pc, #256]	; (80017e0 <initButtons+0x130>)
 80016e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016e4:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	7993      	ldrb	r3, [r2, #6]
 80016f2:	f36f 0300 	bfc	r3, #0, #1
 80016f6:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	7993      	ldrb	r3, [r2, #6]
 8001704:	f36f 0341 	bfc	r3, #1, #1
 8001708:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2200      	movs	r2, #0
 8001716:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	3301      	adds	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	f67f af78 	bls.w	80016be <initButtons+0xe>
	}
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000020 	.word	0x20000020
 80017e0:	20000008 	.word	0x20000008

080017e4 <resetButtonHandlers>:

void resetButtonHandlers(void){
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 80017ee:	e020      	b.n	8001832 <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <resetButtonHandlers+0x64>)
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <resetButtonHandlers+0x64>)
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <resetButtonHandlers+0x64>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <resetButtonHandlers+0x64>)
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <resetButtonHandlers+0x64>)
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
		i++;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3301      	adds	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d9db      	bls.n	80017f0 <resetButtonHandlers+0xc>
	}
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000002c 	.word	0x2000002c

0800184c <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	889b      	ldrh	r3, [r3, #4]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f005 fefa 	bl	8007658 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf0c      	ite	eq
 800186a:	2301      	moveq	r3, #1
 800186c:	2300      	movne	r3, #0
 800186e:	b2db      	uxtb	r3, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <scanButton>:

void scanButton(Button* btn){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	799b      	ldrb	r3, [r3, #6]
 8001884:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	b2d9      	uxtb	r1, r3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	7993      	ldrb	r3, [r2, #6]
 8001898:	f361 0300 	bfi	r3, r1, #0, #1
 800189c:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffd4 	bl	800184c <readButton>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 80018a8:	7bbb      	ldrb	r3, [r7, #14]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	b2d9      	uxtb	r1, r3
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	7993      	ldrb	r3, [r2, #6]
 80018b4:	f361 0341 	bfi	r3, r1, #1, #1
 80018b8:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 80018ba:	7bba      	ldrb	r2, [r7, #14]
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d150      	bne.n	8001964 <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d146      	bne.n	8001956 <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7a9b      	ldrb	r3, [r3, #10]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2000      	movs	r0, #0
 80018e2:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7a9b      	ldrb	r3, [r3, #10]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <scanButton+0x15c>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d32d      	bcc.n	800194e <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7b5b      	ldrb	r3, [r3, #13]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d110      	bne.n	800191c <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2000      	movs	r0, #0
 8001908:	4798      	blx	r3
					}
					btn->longSingleOn++;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7a5b      	ldrb	r3, [r3, #9]
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7a9b      	ldrb	r3, [r3, #10]
 8001920:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <scanButton+0x15c>)
 8001922:	8852      	ldrh	r2, [r2, #2]
 8001924:	fb93 f1f2 	sdiv	r1, r3, r2
 8001928:	fb01 f202 	mul.w	r2, r1, r2
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2000      	movs	r0, #0
 8001940:	4798      	blx	r3
					}
					btn->longContinuous++;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7adb      	ldrb	r3, [r3, #11]
 8001946:	3301      	adds	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8001954:	e03a      	b.n	80019cc <scanButton+0x154>
			btn->shortSingleHandled = 0;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	735a      	strb	r2, [r3, #13]
}
 8001962:	e033      	b.n	80019cc <scanButton+0x154>
		if(currStatus == 1){
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d11b      	bne.n	80019a2 <scanButton+0x12a>
			btn->shortContinuous = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7b1b      	ldrb	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d126      	bne.n	80019cc <scanButton+0x154>
				if(btn->onSinglePressHandler != NULL){
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <scanButton+0x116>
					btn->onSinglePressHandler(NULL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2000      	movs	r0, #0
 800198c:	4798      	blx	r3
				btn->shortSingleOn++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	79db      	ldrb	r3, [r3, #7]
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	731a      	strb	r2, [r3, #12]
}
 80019a0:	e014      	b.n	80019cc <scanButton+0x154>
			if(btn->releaseHandled == 0){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b9b      	ldrb	r3, [r3, #14]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d110      	bne.n	80019cc <scanButton+0x154>
				if(btn->onReleaseHandler != NULL){
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <scanButton+0x142>
					btn->onReleaseHandler(NULL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	2000      	movs	r0, #0
 80019b8:	4798      	blx	r3
				btn->shortSingleOff++;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7a1b      	ldrb	r3, [r3, #8]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	739a      	strb	r2, [r3, #14]
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000044 	.word	0x20000044

080019d8 <scanButtons>:

void scanButtons(Button* btns[6]){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019e4:	e00a      	b.n	80019fc <scanButtons+0x24>
		scanButton(btns[i]);
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff41 	bl	8001878 <scanButton>
		i++;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	3301      	adds	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d9f1      	bls.n	80019e6 <scanButtons+0xe>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <initTimer>:
 *  Created on: Apr 11, 2022
 *      Author: wojch
 */
#include "customTimer.h"

void initTimer(void){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim11);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <initTimer+0x10>)
 8001a12:	f008 fab1 	bl	8009f78 <HAL_TIM_Base_Init>
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20003910 	.word	0x20003910

08001a20 <startClock>:
void timerFunction(void){
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//	stopMeasure();
}

void startClock(void){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <startClock+0x10>)
 8001a26:	f008 faf7 	bl	800a018 <HAL_TIM_Base_Start_IT>
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20003910 	.word	0x20003910

08001a34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	4b60      	ldr	r3, [pc, #384]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a5f      	ldr	r2, [pc, #380]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	61bb      	str	r3, [r7, #24]
 8001a64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b52      	ldr	r3, [pc, #328]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a51      	ldr	r2, [pc, #324]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a4a      	ldr	r2, [pc, #296]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b48      	ldr	r3, [pc, #288]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a43      	ldr	r2, [pc, #268]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001ac4:	f043 0310 	orr.w	r3, r3, #16
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a3c      	ldr	r2, [pc, #240]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a35      	ldr	r2, [pc, #212]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <MX_GPIO_Init+0x19c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2140      	movs	r1, #64	; 0x40
 8001b12:	4830      	ldr	r0, [pc, #192]	; (8001bd4 <MX_GPIO_Init+0x1a0>)
 8001b14:	f005 fdb8 	bl	8007688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b1e:	482e      	ldr	r0, [pc, #184]	; (8001bd8 <MX_GPIO_Init+0x1a4>)
 8001b20:	f005 fdb2 	bl	8007688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2140      	movs	r1, #64	; 0x40
 8001b28:	482c      	ldr	r0, [pc, #176]	; (8001bdc <MX_GPIO_Init+0x1a8>)
 8001b2a:	f005 fdad 	bl	8007688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001b2e:	2340      	movs	r3, #64	; 0x40
 8001b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4823      	ldr	r0, [pc, #140]	; (8001bd4 <MX_GPIO_Init+0x1a0>)
 8001b46:	f005 fbdb 	bl	8007300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b4a:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	481d      	ldr	r0, [pc, #116]	; (8001bd8 <MX_GPIO_Init+0x1a4>)
 8001b64:	f005 fbcc 	bl	8007300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8001b68:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b6c:	61fb      	str	r3, [r7, #28]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b6e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4818      	ldr	r0, [pc, #96]	; (8001be0 <MX_GPIO_Init+0x1ac>)
 8001b80:	f005 fbbe 	bl	8007300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b84:	2340      	movs	r3, #64	; 0x40
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4810      	ldr	r0, [pc, #64]	; (8001bdc <MX_GPIO_Init+0x1a8>)
 8001b9c:	f005 fbb0 	bl	8007300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480a      	ldr	r0, [pc, #40]	; (8001bdc <MX_GPIO_Init+0x1a8>)
 8001bb4:	f005 fba4 	bl	8007300 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2028      	movs	r0, #40	; 0x28
 8001bbe:	f005 fad6 	bl	800716e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bc2:	2028      	movs	r0, #40	; 0x28
 8001bc4:	f005 faef 	bl	80071a6 <HAL_NVIC_EnableIRQ>

}
 8001bc8:	bf00      	nop
 8001bca:	3730      	adds	r7, #48	; 0x30
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40021000 	.word	0x40021000

08001be4 <getDataFromUart>:
//};

//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};
char gpsBuffer[600] = {0};

void getDataFromUart(gpsDevice_t* gps){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive(&huart6, &gps->buffer, 600, 1000);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	1d19      	adds	r1, r3, #4
 8001bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <getDataFromUart+0x24>)
 8001bfa:	f009 fa98 	bl	800b12e <HAL_UART_Receive>
//	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2000399c 	.word	0x2000399c

08001c0c <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c18:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c1c:	6018      	str	r0, [r3, #0]
 8001c1e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c22:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001c26:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 8001c28:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c2c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c30:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8001c34:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, 600);
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	3304      	adds	r3, #4
 8001c42:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f00c f9fd 	bl	800e048 <strncpy>
	gpsModule.getData = &getDataFromUart;
 8001c4e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c52:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c56:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <initGps+0x84>)
 8001c58:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	return(gpsModule);
 8001c5c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c60:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c6a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 7318 	mov.w	r3, #608	; 0x260
 8001c76:	461a      	mov	r2, r3
 8001c78:	f00a fad2 	bl	800c220 <memcpy>
}
 8001c7c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c80:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	08001be5 	.word	0x08001be5

08001c94 <hexCharToInt>:
	}


}

int hexCharToInt(char* value){
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	int msb = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
	if((*value >= 48) &(*value <= 57)){
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b2f      	cmp	r3, #47	; 0x2f
 8001ca6:	bf8c      	ite	hi
 8001ca8:	2301      	movhi	r3, #1
 8001caa:	2300      	movls	r3, #0
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b39      	cmp	r3, #57	; 0x39
 8001cb4:	bf94      	ite	ls
 8001cb6:	2301      	movls	r3, #1
 8001cb8:	2300      	movhi	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d004      	beq.n	8001cce <hexCharToInt+0x3a>
		msb = *value - 48;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	3b30      	subs	r3, #48	; 0x30
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e003      	b.n	8001cd6 <hexCharToInt+0x42>
	} else {
		msb = *value - 48 - 7;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3b37      	subs	r3, #55	; 0x37
 8001cd4:	617b      	str	r3, [r7, #20]
	}
	int lsb = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
	if((*(value+1) >= 48) &(*(value+1) <= 57)){
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b2f      	cmp	r3, #47	; 0x2f
 8001ce2:	bf8c      	ite	hi
 8001ce4:	2301      	movhi	r3, #1
 8001ce6:	2300      	movls	r3, #0
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3301      	adds	r3, #1
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b39      	cmp	r3, #57	; 0x39
 8001cf2:	bf94      	ite	ls
 8001cf4:	2301      	movls	r3, #1
 8001cf6:	2300      	movhi	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <hexCharToInt+0x7a>
		lsb = *(value+1) - 48;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3301      	adds	r3, #1
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	3b30      	subs	r3, #48	; 0x30
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	e004      	b.n	8001d18 <hexCharToInt+0x84>
	} else {
		lsb = *(value+1) - 48 - 7;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3301      	adds	r3, #1
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	3b37      	subs	r3, #55	; 0x37
 8001d16:	613b      	str	r3, [r7, #16]
	}
	int result = lsb | (msb << 4);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
	return(result)
 8001d22:	68fb      	ldr	r3, [r7, #12]
;}
 8001d24:	4618      	mov	r0, r3
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <readSentence>:


void readSentence(char* buffer, gpsSentence* sentence){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0a4      	sub	sp, #144	; 0x90
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]

//	char code[] = "BDGSV";
	char code[] = "GNZDA";
 8001d3a:	4a7e      	ldr	r2, [pc, #504]	; (8001f34 <readSentence+0x204>)
 8001d3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d44:	6018      	str	r0, [r3, #0]
 8001d46:	3304      	adds	r3, #4
 8001d48:	8019      	strh	r1, [r3, #0]
//	char code[] = "GPGSV";
//	char code[] = "GNGSA";
//	char code[] = "GPTXT";
//	char code[] = "GNGGA";
	char term[] = ",";
 8001d4a:	232c      	movs	r3, #44	; 0x2c
 8001d4c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

	char* pos = strstr(buffer, code);
 8001d50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d54:	4619      	mov	r1, r3
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f00c f989 	bl	800e06e <strstr>
 8001d5c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	if(pos != NULL){
 8001d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80e1 	beq.w	8001f2c <readSentence+0x1fc>
		char* end = strchr(pos, 13); // carriage return
 8001d6a:	210d      	movs	r1, #13
 8001d6c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001d70:	f00b fc23 	bl	800d5ba <strchr>
 8001d74:	67f8      	str	r0, [r7, #124]	; 0x7c
		uint8_t strl = end - pos;
 8001d76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

		char myStr[84] = {0};
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	2250      	movs	r2, #80	; 0x50
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f00a fa54 	bl	800c23c <memset>
		strncpy(myStr, pos, 83);
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2253      	movs	r2, #83	; 0x53
 8001d9a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f00c f952 	bl	800e048 <strncpy>

		// Checksum control
		char chksum = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		uint8_t j = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		char tcode = 'b';
 8001db0:	2362      	movs	r3, #98	; 0x62
 8001db2:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		while((myStr[j] != '*') & (myStr[j] != NULL)){
 8001db6:	e028      	b.n	8001e0a <readSentence+0xda>
				tcode = 'c';
 8001db8:	2363      	movs	r3, #99	; 0x63
 8001dba:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			if(j < 84){
 8001dbe:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001dc2:	2b53      	cmp	r3, #83	; 0x53
 8001dc4:	d83c      	bhi.n	8001e40 <readSentence+0x110>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dcc:	485a      	ldr	r0, [pc, #360]	; (8001f38 <readSentence+0x208>)
 8001dce:	f005 fc5b 	bl	8007688 <HAL_GPIO_WritePin>
				chksum ^= myStr[j];
 8001dd2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001dd6:	3390      	adds	r3, #144	; 0x90
 8001dd8:	443b      	add	r3, r7
 8001dda:	f813 2c84 	ldrb.w	r2, [r3, #-132]
 8001dde:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001de2:	4053      	eors	r3, r2
 8001de4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dee:	4852      	ldr	r0, [pc, #328]	; (8001f38 <readSentence+0x208>)
 8001df0:	f005 fc4a 	bl	8007688 <HAL_GPIO_WritePin>
				tcode = 'd';
 8001df4:	2364      	movs	r3, #100	; 0x64
 8001df6:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
				j++;
 8001dfa:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
				tcode = 'e';
 8001e04:	2365      	movs	r3, #101	; 0x65
 8001e06:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		while((myStr[j] != '*') & (myStr[j] != NULL)){
 8001e0a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001e0e:	3390      	adds	r3, #144	; 0x90
 8001e10:	443b      	add	r3, r7
 8001e12:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001e16:	2b2a      	cmp	r3, #42	; 0x2a
 8001e18:	bf14      	ite	ne
 8001e1a:	2301      	movne	r3, #1
 8001e1c:	2300      	moveq	r3, #0
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001e24:	3390      	adds	r3, #144	; 0x90
 8001e26:	443b      	add	r3, r7
 8001e28:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf14      	ite	ne
 8001e30:	2301      	movne	r3, #1
 8001e32:	2300      	moveq	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	4013      	ands	r3, r2
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1bc      	bne.n	8001db8 <readSentence+0x88>
 8001e3e:	e000      	b.n	8001e42 <readSentence+0x112>
			} else {
				break;
 8001e40:	bf00      	nop
			}

		}
		tcode = 'f';
 8001e42:	2366      	movs	r3, #102	; 0x66
 8001e44:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		char* chkPos = strchr(pos, '*')+1;
 8001e48:	212a      	movs	r1, #42	; 0x2a
 8001e4a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001e4e:	f00b fbb4 	bl	800d5ba <strchr>
 8001e52:	4603      	mov	r3, r0
 8001e54:	3301      	adds	r3, #1
 8001e56:	677b      	str	r3, [r7, #116]	; 0x74
		char readChkSum = hexCharToInt(chkPos);
 8001e58:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001e5a:	f7ff ff1b 	bl	8001c94 <hexCharToInt>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		if(readChkSum == chksum){
 8001e64:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8001e68:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d159      	bne.n	8001f24 <readSentence+0x1f4>
			sentence->valid = '+';
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	222b      	movs	r2, #43	; 0x2b
 8001e74:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb
			int wordLen = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
			char* position = myStr;
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			int i = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			while((*position != 10) & (i < 24)){
 8001e8a:	e028      	b.n	8001ede <readSentence+0x1ae>
				sscanf(position, "%[^,\r*]", sentence->words[i]);
 8001e8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3306      	adds	r3, #6
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4926      	ldr	r1, [pc, #152]	; (8001f3c <readSentence+0x20c>)
 8001ea2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001ea6:	f00b fb17 	bl	800d4d8 <siscanf>
				wordLen = strlen(sentence->words[i]);
 8001eaa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	3306      	adds	r3, #6
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe f997 	bl	80001f0 <strlen>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
				position = position + wordLen + 1;
 8001ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001ece:	4413      	add	r3, r2
 8001ed0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				i++;
 8001ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			while((*position != 10) & (i < 24)){
 8001ede:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b0a      	cmp	r3, #10
 8001ee6:	bf14      	ite	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	2300      	moveq	r3, #0
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ef2:	2b17      	cmp	r3, #23
 8001ef4:	bfd4      	ite	le
 8001ef6:	2301      	movle	r3, #1
 8001ef8:	2300      	movgt	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	4013      	ands	r3, r2
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1c3      	bne.n	8001e8c <readSentence+0x15c>
			}
			sentence->wordNum = i-1;
 8001f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
			strncpy(&sentence->msgId, sentence->words[0], 5);
 8001f14:	6838      	ldr	r0, [r7, #0]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	3306      	adds	r3, #6
 8001f1a:	2205      	movs	r2, #5
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f00c f893 	bl	800e048 <strncpy>
		} else {
			sentence->valid = 'x';
		}
	}
}
 8001f22:	e003      	b.n	8001f2c <readSentence+0x1fc>
			sentence->valid = 'x';
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2278      	movs	r2, #120	; 0x78
 8001f28:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb
}
 8001f2c:	bf00      	nop
 8001f2e:	3790      	adds	r7, #144	; 0x90
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	0801381c 	.word	0x0801381c
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	08013824 	.word	0x08013824

08001f40 <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
	if(position>0){
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <prevPos+0x2c>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <prevPos+0x1a>
		position--;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <prevPos+0x2c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <prevPos+0x2c>)
 8001f56:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8001f58:	e002      	b.n	8001f60 <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <prevPos+0x2c>)
 8001f5c:	2205      	movs	r2, #5
 8001f5e:	701a      	strb	r2, [r3, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000638 	.word	0x20000638

08001f70 <nextPos>:

void nextPos(void){
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <nextPos+0x2c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d806      	bhi.n	8001f8a <nextPos+0x1a>
		position++;
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <nextPos+0x2c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <nextPos+0x2c>)
 8001f86:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8001f88:	e002      	b.n	8001f90 <nextPos+0x20>
		position=0;
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <nextPos+0x2c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000638 	.word	0x20000638

08001fa0 <nextScreen>:

void nextScreen(void){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	nextPos();
 8001fa4:	f7ff ffe4 	bl	8001f70 <nextPos>
	applySelectedScreen();
 8001fa8:	f000 f82c 	bl	8002004 <applySelectedScreen>
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <prevScreen>:
void prevScreen(void){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	prevPos();
 8001fb4:	f7ff ffc4 	bl	8001f40 <prevPos>
	applySelectedScreen();
 8001fb8:	f000 f824 	bl	8002004 <applySelectedScreen>
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <resetPos>:
void resetPos(void){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	position=0;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <resetPos+0x14>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8001fca:	f000 f81b 	bl	8002004 <applySelectedScreen>
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000638 	.word	0x20000638

08001fd8 <guiApplyView>:

void guiApplyView(struct Module *module){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <guiApplyView+0x24>)
 8001fe6:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <guiApplyView+0x28>)
 8001fee:	6013      	str	r3, [r2, #0]
	selectScreen();
 8001ff0:	f000 f830 	bl	8002054 <selectScreen>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2000013c 	.word	0x2000013c
 8002000:	20000138 	.word	0x20000138

08002004 <applySelectedScreen>:

void applySelectedScreen(void){
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <applySelectedScreen+0x40>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <applySelectedScreen+0x44>)
 8002010:	460b      	mov	r3, r1
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	3320      	adds	r3, #32
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a0b      	ldr	r2, [pc, #44]	; (800204c <applySelectedScreen+0x48>)
 8002020:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <applySelectedScreen+0x40>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	4619      	mov	r1, r3
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <applySelectedScreen+0x44>)
 800202a:	460b      	mov	r3, r1
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	3324      	adds	r3, #36	; 0x24
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a05      	ldr	r2, [pc, #20]	; (8002050 <applySelectedScreen+0x4c>)
 800203a:	6013      	str	r3, [r2, #0]
	selectScreen();
 800203c:	f000 f80a 	bl	8002054 <selectScreen>
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000638 	.word	0x20000638
 8002048:	20000048 	.word	0x20000048
 800204c:	2000013c 	.word	0x2000013c
 8002050:	20000138 	.word	0x20000138

08002054 <selectScreen>:

void selectScreen(void){
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8002058:	f7ff fbc4 	bl	80017e4 <resetButtonHandlers>
	isModuleSet = 0;
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <selectScreen+0x1c>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <selectScreen+0x20>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a04      	ldr	r2, [pc, #16]	; (8002078 <selectScreen+0x24>)
 8002068:	6013      	str	r3, [r2, #0]
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000639 	.word	0x20000639
 8002074:	20000138 	.word	0x20000138
 8002078:	20000140 	.word	0x20000140

0800207c <showGui>:
// function to display alert message over current gui
void showAlert(){

}

void showGui(void){
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <showGui+0x30>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <showGui+0x18>
		moduleSetupPtr();
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <showGui+0x34>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4798      	blx	r3
		isModuleSet = 1;
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <showGui+0x30>)
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <showGui+0x38>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <showGui+0x26>
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <showGui+0x38>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4798      	blx	r3
	lcdRefresh();
 80020a2:	f000 ff41 	bl	8002f28 <lcdRefresh>
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000639 	.word	0x20000639
 80020b0:	2000013c 	.word	0x2000013c
 80020b4:	20000140 	.word	0x20000140

080020b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <MX_I2C1_Init+0x74>)
 80020be:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <MX_I2C1_Init+0x78>)
 80020c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <MX_I2C1_Init+0x74>)
 80020c4:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <MX_I2C1_Init+0x7c>)
 80020c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <MX_I2C1_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <MX_I2C1_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <MX_I2C1_Init+0x74>)
 80020d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <MX_I2C1_Init+0x74>)
 80020de:	2200      	movs	r2, #0
 80020e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <MX_I2C1_Init+0x74>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <MX_I2C1_Init+0x74>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <MX_I2C1_Init+0x74>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f4:	480d      	ldr	r0, [pc, #52]	; (800212c <MX_I2C1_Init+0x74>)
 80020f6:	f005 fb1f 	bl	8007738 <HAL_I2C_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002100:	f001 f922 	bl	8003348 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002104:	2100      	movs	r1, #0
 8002106:	4809      	ldr	r0, [pc, #36]	; (800212c <MX_I2C1_Init+0x74>)
 8002108:	f006 fad5 	bl	80086b6 <HAL_I2CEx_ConfigAnalogFilter>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002112:	f001 f919 	bl	8003348 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002116:	2100      	movs	r1, #0
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <MX_I2C1_Init+0x74>)
 800211a:	f006 fb08 	bl	800872e <HAL_I2CEx_ConfigDigitalFilter>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002124:	f001 f910 	bl	8003348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	2000063c 	.word	0x2000063c
 8002130:	40005400 	.word	0x40005400
 8002134:	000186a0 	.word	0x000186a0

08002138 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_I2C_MspInit+0x84>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d12c      	bne.n	80021b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_I2C_MspInit+0x88>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <HAL_I2C_MspInit+0x88>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_I2C_MspInit+0x88>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002176:	f44f 7340 	mov.w	r3, #768	; 0x300
 800217a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800217c:	2312      	movs	r3, #18
 800217e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002184:	2303      	movs	r3, #3
 8002186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002188:	2304      	movs	r3, #4
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <HAL_I2C_MspInit+0x8c>)
 8002194:	f005 f8b4 	bl	8007300 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_I2C_MspInit+0x88>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_I2C_MspInit+0x88>)
 80021a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021a6:	6413      	str	r3, [r2, #64]	; 0x40
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_I2C_MspInit+0x88>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40005400 	.word	0x40005400
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020400 	.word	0x40020400

080021c8 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 80021d2:	2307      	movs	r3, #7
 80021d4:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 80021e2:	e010      	b.n	8002206 <reverse_uint8+0x3e>
		result = result << 1;
 80021e4:	7bbb      	ldrb	r3, [r7, #14]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	085b      	lsrs	r3, r3, #1
 80021ee:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 80021f8:	7bba      	ldrb	r2, [r7, #14]
 80021fa:	7b7b      	ldrb	r3, [r7, #13]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	73bb      	strb	r3, [r7, #14]
		times--;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	3b01      	subs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1eb      	bne.n	80021e4 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 800220c:	7bbb      	ldrb	r3, [r7, #14]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
	updateSetting(0);
 8002222:	2000      	movs	r0, #0
 8002224:	f000 f824 	bl	8002270 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002228:	2300      	movs	r3, #0
 800222a:	71fb      	strb	r3, [r7, #7]
 800222c:	e014      	b.n	8002258 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 800222e:	2300      	movs	r3, #0
 8002230:	80bb      	strh	r3, [r7, #4]
 8002232:	e00b      	b.n	800224c <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2232      	movs	r2, #50	; 0x32
 8002238:	fb03 f202 	mul.w	r2, r3, r2
 800223c:	88bb      	ldrh	r3, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <lcdClearBuffer+0x50>)
 8002242:	21ff      	movs	r1, #255	; 0xff
 8002244:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002246:	88bb      	ldrh	r3, [r7, #4]
 8002248:	3301      	adds	r3, #1
 800224a:	80bb      	strh	r3, [r7, #4]
 800224c:	88bb      	ldrh	r3, [r7, #4]
 800224e:	2b31      	cmp	r3, #49	; 0x31
 8002250:	d9f0      	bls.n	8002234 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	3301      	adds	r3, #1
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2bef      	cmp	r3, #239	; 0xef
 800225c:	d9e7      	bls.n	800222e <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 800225e:	2001      	movs	r0, #1
 8002260:	f000 f806 	bl	8002270 <updateSetting>
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000694 	.word	0x20000694

08002270 <updateSetting>:

void updateSetting(uint8_t state){
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <updateSetting+0x1c>)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	7013      	strb	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	20000144 	.word	0x20000144

08002290 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	4603      	mov	r3, r0
 800229a:	80fb      	strh	r3, [r7, #6]
 800229c:	460b      	mov	r3, r1
 800229e:	717b      	strb	r3, [r7, #5]
 80022a0:	4613      	mov	r3, r2
 80022a2:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	795b      	ldrb	r3, [r3, #5]
 80022a8:	793a      	ldrb	r2, [r7, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d304      	bcc.n	80022b8 <lcdPutChar+0x28>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	799b      	ldrb	r3, [r3, #6]
 80022b2:	793a      	ldrb	r2, [r7, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d902      	bls.n	80022be <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	79db      	ldrb	r3, [r3, #7]
 80022bc:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	08db      	lsrs	r3, r3, #3
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	885b      	ldrh	r3, [r3, #2]
 80022d4:	461a      	mov	r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	785b      	ldrb	r3, [r3, #1]
 80022da:	fb92 f3f3 	sdiv	r3, r2, r3
 80022de:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 80022e0:	2300      	movs	r3, #0
 80022e2:	75fb      	strb	r3, [r7, #23]
 80022e4:	e09b      	b.n	800241e <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 80022e6:	797a      	ldrb	r2, [r7, #5]
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	4413      	add	r3, r2
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	0092      	lsls	r2, r2, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	0091      	lsls	r1, r2, #2
 80022f8:	461a      	mov	r2, r3
 80022fa:	460b      	mov	r3, r1
 80022fc:	4413      	add	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4413      	add	r3, r2
 8002308:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 800230a:	793b      	ldrb	r3, [r7, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	7952      	ldrb	r2, [r2, #5]
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	8852      	ldrh	r2, [r2, #2]
 8002316:	fb03 f202 	mul.w	r2, r3, r2
 800231a:	7dfb      	ldrb	r3, [r7, #23]
 800231c:	7cb9      	ldrb	r1, [r7, #18]
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	3308      	adds	r3, #8
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	7d3b      	ldrb	r3, [r7, #20]
 8002334:	fa42 f303 	asr.w	r3, r2, r3
 8002338:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 800233a:	8a3b      	ldrh	r3, [r7, #16]
 800233c:	4a3e      	ldr	r2, [pc, #248]	; (8002438 <lcdPutChar+0x1a8>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	b25a      	sxtb	r2, r3
 8002342:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002346:	43db      	mvns	r3, r3
 8002348:	b25b      	sxtb	r3, r3
 800234a:	4013      	ands	r3, r2
 800234c:	b25a      	sxtb	r2, r3
 800234e:	8a3b      	ldrh	r3, [r7, #16]
 8002350:	b2d1      	uxtb	r1, r2
 8002352:	4a39      	ldr	r2, [pc, #228]	; (8002438 <lcdPutChar+0x1a8>)
 8002354:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	3308      	adds	r3, #8
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b25a      	sxtb	r2, r3
 8002362:	7d3b      	ldrb	r3, [r7, #20]
 8002364:	f1c3 0308 	rsb	r3, r3, #8
 8002368:	21ff      	movs	r1, #255	; 0xff
 800236a:	fa41 f303 	asr.w	r3, r1, r3
 800236e:	b25b      	sxtb	r3, r3
 8002370:	4013      	ands	r3, r2
 8002372:	b25b      	sxtb	r3, r3
 8002374:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002376:	2301      	movs	r3, #1
 8002378:	757b      	strb	r3, [r7, #21]
 800237a:	e029      	b.n	80023d0 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 800237c:	7d7a      	ldrb	r2, [r7, #21]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4413      	add	r3, r2
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	4413      	add	r3, r2
 8002386:	7a1b      	ldrb	r3, [r3, #8]
 8002388:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 800238a:	8a3a      	ldrh	r2, [r7, #16]
 800238c:	7d7b      	ldrb	r3, [r7, #21]
 800238e:	4413      	add	r3, r2
 8002390:	4a29      	ldr	r2, [pc, #164]	; (8002438 <lcdPutChar+0x1a8>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	b25a      	sxtb	r2, r3
 8002396:	7db9      	ldrb	r1, [r7, #22]
 8002398:	7d3b      	ldrb	r3, [r7, #20]
 800239a:	f1c3 0308 	rsb	r3, r3, #8
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	b259      	sxtb	r1, r3
 80023a4:	7af8      	ldrb	r0, [r7, #11]
 80023a6:	7d3b      	ldrb	r3, [r7, #20]
 80023a8:	fa40 f303 	asr.w	r3, r0, r3
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	430b      	orrs	r3, r1
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	b25b      	sxtb	r3, r3
 80023b6:	4013      	ands	r3, r2
 80023b8:	b259      	sxtb	r1, r3
 80023ba:	8a3a      	ldrh	r2, [r7, #16]
 80023bc:	7d7b      	ldrb	r3, [r7, #21]
 80023be:	4413      	add	r3, r2
 80023c0:	b2c9      	uxtb	r1, r1
 80023c2:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <lcdPutChar+0x1a8>)
 80023c4:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 80023c6:	7afb      	ldrb	r3, [r7, #11]
 80023c8:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80023ca:	7d7b      	ldrb	r3, [r7, #21]
 80023cc:	3301      	adds	r3, #1
 80023ce:	757b      	strb	r3, [r7, #21]
 80023d0:	7d7a      	ldrb	r2, [r7, #21]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	3307      	adds	r3, #7
 80023d8:	10db      	asrs	r3, r3, #3
 80023da:	429a      	cmp	r2, r3
 80023dc:	dbce      	blt.n	800237c <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 80023de:	8a3a      	ldrh	r2, [r7, #16]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	3307      	adds	r3, #7
 80023e6:	10db      	asrs	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	4a13      	ldr	r2, [pc, #76]	; (8002438 <lcdPutChar+0x1a8>)
 80023ec:	5cd3      	ldrb	r3, [r2, r3]
 80023ee:	b25a      	sxtb	r2, r3
 80023f0:	7db9      	ldrb	r1, [r7, #22]
 80023f2:	7d3b      	ldrb	r3, [r7, #20]
 80023f4:	f1c3 0308 	rsb	r3, r3, #8
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	b25b      	sxtb	r3, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	b25b      	sxtb	r3, r3
 8002402:	4013      	ands	r3, r2
 8002404:	b259      	sxtb	r1, r3
 8002406:	8a3a      	ldrh	r2, [r7, #16]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	3307      	adds	r3, #7
 800240e:	10db      	asrs	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	b2c9      	uxtb	r1, r1
 8002414:	4a08      	ldr	r2, [pc, #32]	; (8002438 <lcdPutChar+0x1a8>)
 8002416:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	3301      	adds	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	785b      	ldrb	r3, [r3, #1]
 8002422:	7dfa      	ldrb	r2, [r7, #23]
 8002424:	429a      	cmp	r2, r3
 8002426:	f4ff af5e 	bcc.w	80022e6 <lcdPutChar+0x56>
	}
}
 800242a:	bf00      	nop
 800242c:	bf00      	nop
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	20000694 	.word	0x20000694

0800243c <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60ba      	str	r2, [r7, #8]
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	4603      	mov	r3, r0
 8002448:	81fb      	strh	r3, [r7, #14]
 800244a:	460b      	mov	r3, r1
 800244c:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
 8002452:	e015      	b.n	8002480 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b29a      	uxth	r2, r3
 800245a:	7dfb      	ldrb	r3, [r7, #23]
 800245c:	b29b      	uxth	r3, r3
 800245e:	fb12 f303 	smulbb	r3, r2, r3
 8002462:	b29a      	uxth	r2, r3
 8002464:	89fb      	ldrh	r3, [r7, #14]
 8002466:	4413      	add	r3, r2
 8002468:	b298      	uxth	r0, r3
 800246a:	7dfb      	ldrb	r3, [r7, #23]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	4413      	add	r3, r2
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	7b79      	ldrb	r1, [r7, #13]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f7ff ff0b 	bl	8002290 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 800247a:	7dfb      	ldrb	r3, [r7, #23]
 800247c:	3301      	adds	r3, #1
 800247e:	75fb      	strb	r3, [r7, #23]
 8002480:	7dfc      	ldrb	r4, [r7, #23]
 8002482:	68b8      	ldr	r0, [r7, #8]
 8002484:	f7fd feb4 	bl	80001f0 <strlen>
 8002488:	4603      	mov	r3, r0
 800248a:	429c      	cmp	r4, r3
 800248c:	d3e2      	bcc.n	8002454 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 800248e:	bf00      	nop
 8002490:	bf00      	nop
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	bd90      	pop	{r4, r7, pc}

08002498 <lcdVLine>:
void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 8002498:	b490      	push	{r4, r7}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	4604      	mov	r4, r0
 80024a0:	4608      	mov	r0, r1
 80024a2:	4611      	mov	r1, r2
 80024a4:	461a      	mov	r2, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	80fb      	strh	r3, [r7, #6]
 80024aa:	4603      	mov	r3, r0
 80024ac:	80bb      	strh	r3, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	70fb      	strb	r3, [r7, #3]
 80024b2:	4613      	mov	r3, r2
 80024b4:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	08db      	lsrs	r3, r3, #3
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	733b      	strb	r3, [r7, #12]
	for(uint8_t y = y1; y <= y2; y++){
 80024c8:	88bb      	ldrh	r3, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	e04e      	b.n	800256c <lcdVLine+0xd4>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	2232      	movs	r2, #50	; 0x32
 80024d2:	fb03 f202 	mul.w	r2, r3, r2
 80024d6:	7b7b      	ldrb	r3, [r7, #13]
 80024d8:	4413      	add	r3, r2
 80024da:	4a29      	ldr	r2, [pc, #164]	; (8002580 <lcdVLine+0xe8>)
 80024dc:	5cd3      	ldrb	r3, [r2, r3]
 80024de:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 80024e0:	78bb      	ldrb	r3, [r7, #2]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d01e      	beq.n	8002524 <lcdVLine+0x8c>
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	dc27      	bgt.n	800253a <lcdVLine+0xa2>
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <lcdVLine+0x5c>
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d00b      	beq.n	800250a <lcdVLine+0x72>
 80024f2:	e022      	b.n	800253a <lcdVLine+0xa2>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 80024f4:	7b3b      	ldrb	r3, [r7, #12]
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	fa42 f303 	asr.w	r3, r2, r3
 80024fc:	b25a      	sxtb	r2, r3
 80024fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002502:	4313      	orrs	r3, r2
 8002504:	b25b      	sxtb	r3, r3
 8002506:	73bb      	strb	r3, [r7, #14]
				break;
 8002508:	e024      	b.n	8002554 <lcdVLine+0xbc>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 800250a:	7b3b      	ldrb	r3, [r7, #12]
 800250c:	2280      	movs	r2, #128	; 0x80
 800250e:	fa42 f303 	asr.w	r3, r2, r3
 8002512:	b25b      	sxtb	r3, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	b25a      	sxtb	r2, r3
 8002518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800251c:	4013      	ands	r3, r2
 800251e:	b25b      	sxtb	r3, r3
 8002520:	73bb      	strb	r3, [r7, #14]
				break;
 8002522:	e017      	b.n	8002554 <lcdVLine+0xbc>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8002524:	7b3b      	ldrb	r3, [r7, #12]
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	fa42 f303 	asr.w	r3, r2, r3
 800252c:	b25a      	sxtb	r2, r3
 800252e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002532:	4053      	eors	r3, r2
 8002534:	b25b      	sxtb	r3, r3
 8002536:	73bb      	strb	r3, [r7, #14]
				break;
 8002538:	e00c      	b.n	8002554 <lcdVLine+0xbc>
			default:
				content &= ~(0b10000000 >> offset);
 800253a:	7b3b      	ldrb	r3, [r7, #12]
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	fa42 f303 	asr.w	r3, r2, r3
 8002542:	b25b      	sxtb	r3, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	b25a      	sxtb	r2, r3
 8002548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800254c:	4013      	ands	r3, r2
 800254e:	b25b      	sxtb	r3, r3
 8002550:	73bb      	strb	r3, [r7, #14]
				break;
 8002552:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2232      	movs	r2, #50	; 0x32
 8002558:	fb03 f202 	mul.w	r2, r3, r2
 800255c:	7b7b      	ldrb	r3, [r7, #13]
 800255e:	4413      	add	r3, r2
 8002560:	4907      	ldr	r1, [pc, #28]	; (8002580 <lcdVLine+0xe8>)
 8002562:	7bba      	ldrb	r2, [r7, #14]
 8002564:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	3301      	adds	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	429a      	cmp	r2, r3
 8002572:	d9ac      	bls.n	80024ce <lcdVLine+0x36>
	}
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bc90      	pop	{r4, r7}
 800257e:	4770      	bx	lr
 8002580:	20000694 	.word	0x20000694

08002584 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 8002584:	b490      	push	{r4, r7}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	4604      	mov	r4, r0
 800258c:	4608      	mov	r0, r1
 800258e:	4611      	mov	r1, r2
 8002590:	461a      	mov	r2, r3
 8002592:	4623      	mov	r3, r4
 8002594:	80fb      	strh	r3, [r7, #6]
 8002596:	4603      	mov	r3, r0
 8002598:	80bb      	strh	r3, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	70fb      	strb	r3, [r7, #3]
 800259e:	4613      	mov	r3, r2
 80025a0:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 80025a2:	23ff      	movs	r3, #255	; 0xff
 80025a4:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 80025a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025aa:	2b14      	cmp	r3, #20
 80025ac:	f200 8208 	bhi.w	80029c0 <lcdHLine2+0x43c>
 80025b0:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <lcdHLine2+0x34>)
 80025b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b6:	bf00      	nop
 80025b8:	0800260d 	.word	0x0800260d
 80025bc:	08002613 	.word	0x08002613
 80025c0:	08002619 	.word	0x08002619
 80025c4:	0800261f 	.word	0x0800261f
 80025c8:	08002637 	.word	0x08002637
 80025cc:	0800264f 	.word	0x0800264f
 80025d0:	08002667 	.word	0x08002667
 80025d4:	080026b1 	.word	0x080026b1
 80025d8:	080026f5 	.word	0x080026f5
 80025dc:	08002739 	.word	0x08002739
 80025e0:	08002777 	.word	0x08002777
 80025e4:	0800279d 	.word	0x0800279d
 80025e8:	080027c7 	.word	0x080027c7
 80025ec:	080027fd 	.word	0x080027fd
 80025f0:	08002815 	.word	0x08002815
 80025f4:	0800283b 	.word	0x0800283b
 80025f8:	08002871 	.word	0x08002871
 80025fc:	080028a7 	.word	0x080028a7
 8002600:	080028e9 	.word	0x080028e9
 8002604:	08002943 	.word	0x08002943
 8002608:	0800297f 	.word	0x0800297f
		case 0:	// clear
			pattern = 0x00;
 800260c:	2300      	movs	r3, #0
 800260e:	75fb      	strb	r3, [r7, #23]
			break;
 8002610:	e1ea      	b.n	80029e8 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 8002612:	23ff      	movs	r3, #255	; 0xff
 8002614:	75fb      	strb	r3, [r7, #23]
			break;
 8002616:	e1e7      	b.n	80029e8 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8002618:	2355      	movs	r3, #85	; 0x55
 800261a:	75fb      	strb	r3, [r7, #23]
			break;
 800261c:	e1e4      	b.n	80029e8 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <lcdHLine2+0xac>
 800262a:	2300      	movs	r3, #0
 800262c:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 800262e:	e1db      	b.n	80029e8 <lcdHLine2+0x464>
			else pattern = 0xFF;
 8002630:	23ff      	movs	r3, #255	; 0xff
 8002632:	75fb      	strb	r3, [r7, #23]
			break;
 8002634:	e1d8      	b.n	80029e8 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <lcdHLine2+0xc4>
 8002642:	23aa      	movs	r3, #170	; 0xaa
 8002644:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 8002646:	e1cf      	b.n	80029e8 <lcdHLine2+0x464>
			else pattern = 0x55;
 8002648:	2355      	movs	r3, #85	; 0x55
 800264a:	75fb      	strb	r3, [r7, #23]
			break;
 800264c:	e1cc      	b.n	80029e8 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <lcdHLine2+0xdc>
 800265a:	2388      	movs	r3, #136	; 0x88
 800265c:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 800265e:	e1c3      	b.n	80029e8 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 8002660:	2322      	movs	r3, #34	; 0x22
 8002662:	75fb      	strb	r3, [r7, #23]
			break;
 8002664:	e1c0      	b.n	80029e8 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d102      	bne.n	8002678 <lcdHLine2+0xf4>
 8002672:	2388      	movs	r3, #136	; 0x88
 8002674:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8002676:	e1a6      	b.n	80029c6 <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d102      	bne.n	800268a <lcdHLine2+0x106>
 8002684:	2344      	movs	r3, #68	; 0x44
 8002686:	75fb      	strb	r3, [r7, #23]
			break;
 8002688:	e19d      	b.n	80029c6 <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d102      	bne.n	800269c <lcdHLine2+0x118>
 8002696:	2322      	movs	r3, #34	; 0x22
 8002698:	75fb      	strb	r3, [r7, #23]
			break;
 800269a:	e194      	b.n	80029c6 <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	f040 818e 	bne.w	80029c6 <lcdHLine2+0x442>
 80026aa:	2311      	movs	r3, #17
 80026ac:	75fb      	strb	r3, [r7, #23]
			break;
 80026ae:	e18a      	b.n	80029c6 <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <lcdHLine2+0x144>
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d102      	bne.n	80026ce <lcdHLine2+0x14a>
 80026c8:	23aa      	movs	r3, #170	; 0xaa
 80026ca:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 80026cc:	e17d      	b.n	80029ca <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d102      	bne.n	80026e0 <lcdHLine2+0x15c>
 80026da:	2322      	movs	r3, #34	; 0x22
 80026dc:	75fb      	strb	r3, [r7, #23]
			break;
 80026de:	e174      	b.n	80029ca <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	f040 816e 	bne.w	80029ca <lcdHLine2+0x446>
 80026ee:	2388      	movs	r3, #136	; 0x88
 80026f0:	75fb      	strb	r3, [r7, #23]
			break;
 80026f2:	e16a      	b.n	80029ca <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d005      	beq.n	800270c <lcdHLine2+0x188>
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b03      	cmp	r3, #3
 800270a:	d102      	bne.n	8002712 <lcdHLine2+0x18e>
 800270c:	2355      	movs	r3, #85	; 0x55
 800270e:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 8002710:	e15d      	b.n	80029ce <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <lcdHLine2+0x1a0>
 800271e:	2388      	movs	r3, #136	; 0x88
 8002720:	75fb      	strb	r3, [r7, #23]
			break;
 8002722:	e154      	b.n	80029ce <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	f040 814e 	bne.w	80029ce <lcdHLine2+0x44a>
 8002732:	2322      	movs	r3, #34	; 0x22
 8002734:	75fb      	strb	r3, [r7, #23]
			break;
 8002736:	e14a      	b.n	80029ce <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <lcdHLine2+0x1cc>
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d102      	bne.n	8002756 <lcdHLine2+0x1d2>
 8002750:	23cc      	movs	r3, #204	; 0xcc
 8002752:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 8002754:	e13d      	b.n	80029d2 <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d006      	beq.n	8002770 <lcdHLine2+0x1ec>
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b03      	cmp	r3, #3
 800276c:	f040 8131 	bne.w	80029d2 <lcdHLine2+0x44e>
 8002770:	2333      	movs	r3, #51	; 0x33
 8002772:	75fb      	strb	r3, [r7, #23]
			break;
 8002774:	e12d      	b.n	80029d2 <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <lcdHLine2+0x204>
 8002782:	2355      	movs	r3, #85	; 0x55
 8002784:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 8002786:	e126      	b.n	80029d6 <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 8120 	beq.w	80029d6 <lcdHLine2+0x452>
 8002796:	23ff      	movs	r3, #255	; 0xff
 8002798:	75fb      	strb	r3, [r7, #23]
			break;
 800279a:	e11c      	b.n	80029d6 <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <lcdHLine2+0x22a>
 80027a8:	23cc      	movs	r3, #204	; 0xcc
 80027aa:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 80027ac:	e11c      	b.n	80029e8 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d102      	bne.n	80027c0 <lcdHLine2+0x23c>
 80027ba:	2344      	movs	r3, #68	; 0x44
 80027bc:	75fb      	strb	r3, [r7, #23]
			break;
 80027be:	e113      	b.n	80029e8 <lcdHLine2+0x464>
			else pattern = 0x00;
 80027c0:	2300      	movs	r3, #0
 80027c2:	75fb      	strb	r3, [r7, #23]
			break;
 80027c4:	e110      	b.n	80029e8 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <lcdHLine2+0x254>
 80027d2:	23ee      	movs	r3, #238	; 0xee
 80027d4:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 80027d6:	e107      	b.n	80029e8 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d005      	beq.n	80027f0 <lcdHLine2+0x26c>
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d102      	bne.n	80027f6 <lcdHLine2+0x272>
 80027f0:	2322      	movs	r3, #34	; 0x22
 80027f2:	75fb      	strb	r3, [r7, #23]
			break;
 80027f4:	e0f8      	b.n	80029e8 <lcdHLine2+0x464>
			else pattern = 0x00;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
			break;
 80027fa:	e0f5      	b.n	80029e8 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <lcdHLine2+0x28a>
 8002808:	23ff      	movs	r3, #255	; 0xff
 800280a:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 800280c:	e0ec      	b.n	80029e8 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 800280e:	2388      	movs	r3, #136	; 0x88
 8002810:	75fb      	strb	r3, [r7, #23]
			break;
 8002812:	e0e9      	b.n	80029e8 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <lcdHLine2+0x2a2>
 8002820:	23aa      	movs	r3, #170	; 0xaa
 8002822:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 8002824:	e0d9      	b.n	80029da <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80d3 	beq.w	80029da <lcdHLine2+0x456>
 8002834:	2300      	movs	r3, #0
 8002836:	75fb      	strb	r3, [r7, #23]
			break;
 8002838:	e0cf      	b.n	80029da <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <lcdHLine2+0x2ce>
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d102      	bne.n	8002858 <lcdHLine2+0x2d4>
 8002852:	23aa      	movs	r3, #170	; 0xaa
 8002854:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8002856:	e0c7      	b.n	80029e8 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <lcdHLine2+0x2e6>
 8002864:	2344      	movs	r3, #68	; 0x44
 8002866:	75fb      	strb	r3, [r7, #23]
			break;
 8002868:	e0be      	b.n	80029e8 <lcdHLine2+0x464>
			else pattern = 0x00;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]
			break;
 800286e:	e0bb      	b.n	80029e8 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <lcdHLine2+0x304>
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d102      	bne.n	800288e <lcdHLine2+0x30a>
 8002888:	23ee      	movs	r3, #238	; 0xee
 800288a:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 800288c:	e0ac      	b.n	80029e8 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d102      	bne.n	80028a0 <lcdHLine2+0x31c>
 800289a:	23aa      	movs	r3, #170	; 0xaa
 800289c:	75fb      	strb	r3, [r7, #23]
			break;
 800289e:	e0a3      	b.n	80029e8 <lcdHLine2+0x464>
			else pattern = 0x00;
 80028a0:	2300      	movs	r3, #0
 80028a2:	75fb      	strb	r3, [r7, #23]
			break;
 80028a4:	e0a0      	b.n	80029e8 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <lcdHLine2+0x33a>
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d102      	bne.n	80028c4 <lcdHLine2+0x340>
 80028be:	2344      	movs	r3, #68	; 0x44
 80028c0:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80028c2:	e08c      	b.n	80029de <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d102      	bne.n	80028d6 <lcdHLine2+0x352>
 80028d0:	23aa      	movs	r3, #170	; 0xaa
 80028d2:	75fb      	strb	r3, [r7, #23]
			break;
 80028d4:	e083      	b.n	80029de <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d17d      	bne.n	80029de <lcdHLine2+0x45a>
 80028e2:	2311      	movs	r3, #17
 80028e4:	75fb      	strb	r3, [r7, #23]
			break;
 80028e6:	e07a      	b.n	80029de <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	4baf      	ldr	r3, [pc, #700]	; (8002ba8 <lcdHLine2+0x624>)
 80028ec:	fba3 1302 	umull	r1, r3, r3, r2
 80028f0:	0859      	lsrs	r1, r3, #1
 80028f2:	460b      	mov	r3, r1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	440b      	add	r3, r1
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <lcdHLine2+0x382>
 8002900:	2355      	movs	r3, #85	; 0x55
 8002902:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 8002904:	e06d      	b.n	80029e2 <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	4ba7      	ldr	r3, [pc, #668]	; (8002ba8 <lcdHLine2+0x624>)
 800290a:	fba3 1302 	umull	r1, r3, r3, r2
 800290e:	0859      	lsrs	r1, r3, #1
 8002910:	460b      	mov	r3, r1
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	440b      	add	r3, r1
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d102      	bne.n	8002924 <lcdHLine2+0x3a0>
 800291e:	23aa      	movs	r3, #170	; 0xaa
 8002920:	75fb      	strb	r3, [r7, #23]
			break;
 8002922:	e05e      	b.n	80029e2 <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	4ba0      	ldr	r3, [pc, #640]	; (8002ba8 <lcdHLine2+0x624>)
 8002928:	fba3 1302 	umull	r1, r3, r3, r2
 800292c:	0859      	lsrs	r1, r3, #1
 800292e:	460b      	mov	r3, r1
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	440b      	add	r3, r1
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d152      	bne.n	80029e2 <lcdHLine2+0x45e>
 800293c:	2300      	movs	r3, #0
 800293e:	75fb      	strb	r3, [r7, #23]
			break;
 8002940:	e04f      	b.n	80029e2 <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <lcdHLine2+0x3d0>
 800294e:	2322      	movs	r3, #34	; 0x22
 8002950:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 8002952:	e049      	b.n	80029e8 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d102      	bne.n	8002966 <lcdHLine2+0x3e2>
 8002960:	2355      	movs	r3, #85	; 0x55
 8002962:	75fb      	strb	r3, [r7, #23]
			break;
 8002964:	e040      	b.n	80029e8 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d102      	bne.n	8002978 <lcdHLine2+0x3f4>
 8002972:	2388      	movs	r3, #136	; 0x88
 8002974:	75fb      	strb	r3, [r7, #23]
			break;
 8002976:	e037      	b.n	80029e8 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002978:	2300      	movs	r3, #0
 800297a:	75fb      	strb	r3, [r7, #23]
			break;
 800297c:	e034      	b.n	80029e8 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d005      	beq.n	8002996 <lcdHLine2+0x412>
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b03      	cmp	r3, #3
 8002994:	d102      	bne.n	800299c <lcdHLine2+0x418>
 8002996:	2388      	movs	r3, #136	; 0x88
 8002998:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 800299a:	e024      	b.n	80029e6 <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <lcdHLine2+0x42a>
 80029a8:	2377      	movs	r3, #119	; 0x77
 80029aa:	75fb      	strb	r3, [r7, #23]
			break;
 80029ac:	e01b      	b.n	80029e6 <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d115      	bne.n	80029e6 <lcdHLine2+0x462>
 80029ba:	23aa      	movs	r3, #170	; 0xaa
 80029bc:	75fb      	strb	r3, [r7, #23]
			break;
 80029be:	e012      	b.n	80029e6 <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 80029c0:	2300      	movs	r3, #0
 80029c2:	75fb      	strb	r3, [r7, #23]
			break;
 80029c4:	e010      	b.n	80029e8 <lcdHLine2+0x464>
			break;
 80029c6:	bf00      	nop
 80029c8:	e00e      	b.n	80029e8 <lcdHLine2+0x464>
			break;
 80029ca:	bf00      	nop
 80029cc:	e00c      	b.n	80029e8 <lcdHLine2+0x464>
			break;
 80029ce:	bf00      	nop
 80029d0:	e00a      	b.n	80029e8 <lcdHLine2+0x464>
			break;
 80029d2:	bf00      	nop
 80029d4:	e008      	b.n	80029e8 <lcdHLine2+0x464>
			break;
 80029d6:	bf00      	nop
 80029d8:	e006      	b.n	80029e8 <lcdHLine2+0x464>
			break;
 80029da:	bf00      	nop
 80029dc:	e004      	b.n	80029e8 <lcdHLine2+0x464>
			break;
 80029de:	bf00      	nop
 80029e0:	e002      	b.n	80029e8 <lcdHLine2+0x464>
			break;
 80029e2:	bf00      	nop
 80029e4:	e000      	b.n	80029e8 <lcdHLine2+0x464>
			break;
 80029e6:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	08db      	lsrs	r3, r3, #3
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 80029fa:	88bb      	ldrh	r3, [r7, #4]
 80029fc:	08db      	lsrs	r3, r3, #3
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 8002a02:	88bb      	ldrh	r3, [r7, #4]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	2232      	movs	r2, #50	; 0x32
 8002a10:	fb03 f202 	mul.w	r2, r3, r2
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a64      	ldr	r2, [pc, #400]	; (8002bac <lcdHLine2+0x628>)
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
 8002a1c:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	2232      	movs	r2, #50	; 0x32
 8002a22:	fb03 f202 	mul.w	r2, r3, r2
 8002a26:	7b7b      	ldrb	r3, [r7, #13]
 8002a28:	4413      	add	r3, r2
 8002a2a:	4a60      	ldr	r2, [pc, #384]	; (8002bac <lcdHLine2+0x628>)
 8002a2c:	5cd3      	ldrb	r3, [r2, r3]
 8002a2e:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 8002a30:	23ff      	movs	r3, #255	; 0xff
 8002a32:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 8002a34:	7bbb      	ldrb	r3, [r7, #14]
 8002a36:	f1c3 0208 	rsb	r2, r3, #8
 8002a3a:	88b9      	ldrh	r1, [r7, #4]
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	1acb      	subs	r3, r1, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	429a      	cmp	r2, r3
 8002a44:	dd11      	ble.n	8002a6a <lcdHLine2+0x4e6>
 8002a46:	88ba      	ldrh	r2, [r7, #4]
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	22ff      	movs	r2, #255	; 0xff
 8002a50:	fa42 f303 	asr.w	r3, r2, r3
 8002a54:	43da      	mvns	r2, r3
 8002a56:	7bbb      	ldrb	r3, [r7, #14]
 8002a58:	fa42 f303 	asr.w	r3, r2, r3
 8002a5c:	b25a      	sxtb	r2, r3
 8002a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a62:	4013      	ands	r3, r2
 8002a64:	b25b      	sxtb	r3, r3
 8002a66:	753b      	strb	r3, [r7, #20]
 8002a68:	e001      	b.n	8002a6e <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
 8002a6c:	753b      	strb	r3, [r7, #20]
		switch(mode){
 8002a6e:	78bb      	ldrb	r3, [r7, #2]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	f200 8130 	bhi.w	8002cd6 <lcdHLine2+0x752>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <lcdHLine2+0x4f8>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002a8d 	.word	0x08002a8d
 8002a80:	08002b11 	.word	0x08002b11
 8002a84:	08002bb1 	.word	0x08002bb1
 8002a88:	08002c35 	.word	0x08002c35
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 8002a8c:	7bbb      	ldrb	r3, [r7, #14]
 8002a8e:	22ff      	movs	r2, #255	; 0xff
 8002a90:	fa42 f303 	asr.w	r3, r2, r3
 8002a94:	b25a      	sxtb	r2, r3
 8002a96:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	b25a      	sxtb	r2, r3
 8002a9e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b25b      	sxtb	r3, r3
 8002aa6:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 8002aa8:	7b3b      	ldrb	r3, [r7, #12]
 8002aaa:	f1c3 0307 	rsb	r3, r3, #7
 8002aae:	22ff      	movs	r2, #255	; 0xff
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	b25a      	sxtb	r2, r3
 8002ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aba:	4013      	ands	r3, r2
 8002abc:	b25a      	sxtb	r2, r3
 8002abe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	b25b      	sxtb	r3, r3
 8002ac6:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002ac8:	2301      	movs	r3, #1
 8002aca:	74fb      	strb	r3, [r7, #19]
 8002acc:	e019      	b.n	8002b02 <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	2232      	movs	r2, #50	; 0x32
 8002ad2:	fb03 f202 	mul.w	r2, r3, r2
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	441a      	add	r2, r3
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	4413      	add	r3, r2
 8002ade:	4a33      	ldr	r2, [pc, #204]	; (8002bac <lcdHLine2+0x628>)
 8002ae0:	5cd1      	ldrb	r1, [r2, r3]
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	2232      	movs	r2, #50	; 0x32
 8002ae6:	fb03 f202 	mul.w	r2, r3, r2
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	441a      	add	r2, r3
 8002aee:	7cfb      	ldrb	r3, [r7, #19]
 8002af0:	4413      	add	r3, r2
 8002af2:	7dfa      	ldrb	r2, [r7, #23]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	b2d1      	uxtb	r1, r2
 8002af8:	4a2c      	ldr	r2, [pc, #176]	; (8002bac <lcdHLine2+0x628>)
 8002afa:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	3301      	adds	r3, #1
 8002b00:	74fb      	strb	r3, [r7, #19]
 8002b02:	7cfa      	ldrb	r2, [r7, #19]
 8002b04:	7b79      	ldrb	r1, [r7, #13]
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	1acb      	subs	r3, r1, r3
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	dbdf      	blt.n	8002ace <lcdHLine2+0x54a>
			}
			break;
 8002b0e:	e0e2      	b.n	8002cd6 <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 8002b10:	7bbb      	ldrb	r3, [r7, #14]
 8002b12:	22ff      	movs	r2, #255	; 0xff
 8002b14:	fa42 f303 	asr.w	r3, r2, r3
 8002b18:	b25a      	sxtb	r2, r3
 8002b1a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	b25a      	sxtb	r2, r3
 8002b26:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	b25b      	sxtb	r3, r3
 8002b2e:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 8002b30:	7b3b      	ldrb	r3, [r7, #12]
 8002b32:	f1c3 0307 	rsb	r3, r3, #7
 8002b36:	22ff      	movs	r2, #255	; 0xff
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	b25a      	sxtb	r2, r3
 8002b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b42:	4013      	ands	r3, r2
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	b25a      	sxtb	r2, r3
 8002b4a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002b54:	2301      	movs	r3, #1
 8002b56:	74bb      	strb	r3, [r7, #18]
 8002b58:	e01e      	b.n	8002b98 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	2232      	movs	r2, #50	; 0x32
 8002b5e:	fb03 f202 	mul.w	r2, r3, r2
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	441a      	add	r2, r3
 8002b66:	7cbb      	ldrb	r3, [r7, #18]
 8002b68:	4413      	add	r3, r2
 8002b6a:	4a10      	ldr	r2, [pc, #64]	; (8002bac <lcdHLine2+0x628>)
 8002b6c:	5cd3      	ldrb	r3, [r2, r3]
 8002b6e:	b25a      	sxtb	r2, r3
 8002b70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	b25b      	sxtb	r3, r3
 8002b78:	4013      	ands	r3, r2
 8002b7a:	b259      	sxtb	r1, r3
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	2232      	movs	r2, #50	; 0x32
 8002b80:	fb03 f202 	mul.w	r2, r3, r2
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	441a      	add	r2, r3
 8002b88:	7cbb      	ldrb	r3, [r7, #18]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	b2c9      	uxtb	r1, r1
 8002b8e:	4a07      	ldr	r2, [pc, #28]	; (8002bac <lcdHLine2+0x628>)
 8002b90:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002b92:	7cbb      	ldrb	r3, [r7, #18]
 8002b94:	3301      	adds	r3, #1
 8002b96:	74bb      	strb	r3, [r7, #18]
 8002b98:	7cba      	ldrb	r2, [r7, #18]
 8002b9a:	7b79      	ldrb	r1, [r7, #13]
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	1acb      	subs	r3, r1, r3
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dbda      	blt.n	8002b5a <lcdHLine2+0x5d6>
			}
			break;
 8002ba4:	e097      	b.n	8002cd6 <lcdHLine2+0x752>
 8002ba6:	bf00      	nop
 8002ba8:	aaaaaaab 	.word	0xaaaaaaab
 8002bac:	20000694 	.word	0x20000694
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 8002bb0:	7bbb      	ldrb	r3, [r7, #14]
 8002bb2:	22ff      	movs	r2, #255	; 0xff
 8002bb4:	fa42 f303 	asr.w	r3, r2, r3
 8002bb8:	b25a      	sxtb	r2, r3
 8002bba:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	b25a      	sxtb	r2, r3
 8002bc2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002bc6:	4053      	eors	r3, r2
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8002bcc:	7b3b      	ldrb	r3, [r7, #12]
 8002bce:	f1c3 0307 	rsb	r3, r3, #7
 8002bd2:	22ff      	movs	r2, #255	; 0xff
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	b25a      	sxtb	r2, r3
 8002bda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bde:	4013      	ands	r3, r2
 8002be0:	b25a      	sxtb	r2, r3
 8002be2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002be6:	4053      	eors	r3, r2
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002bec:	2301      	movs	r3, #1
 8002bee:	747b      	strb	r3, [r7, #17]
 8002bf0:	e019      	b.n	8002c26 <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	2232      	movs	r2, #50	; 0x32
 8002bf6:	fb03 f202 	mul.w	r2, r3, r2
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	441a      	add	r2, r3
 8002bfe:	7c7b      	ldrb	r3, [r7, #17]
 8002c00:	4413      	add	r3, r2
 8002c02:	4a42      	ldr	r2, [pc, #264]	; (8002d0c <lcdHLine2+0x788>)
 8002c04:	5cd1      	ldrb	r1, [r2, r3]
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	2232      	movs	r2, #50	; 0x32
 8002c0a:	fb03 f202 	mul.w	r2, r3, r2
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	441a      	add	r2, r3
 8002c12:	7c7b      	ldrb	r3, [r7, #17]
 8002c14:	4413      	add	r3, r2
 8002c16:	7dfa      	ldrb	r2, [r7, #23]
 8002c18:	404a      	eors	r2, r1
 8002c1a:	b2d1      	uxtb	r1, r2
 8002c1c:	4a3b      	ldr	r2, [pc, #236]	; (8002d0c <lcdHLine2+0x788>)
 8002c1e:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002c20:	7c7b      	ldrb	r3, [r7, #17]
 8002c22:	3301      	adds	r3, #1
 8002c24:	747b      	strb	r3, [r7, #17]
 8002c26:	7c7a      	ldrb	r2, [r7, #17]
 8002c28:	7b79      	ldrb	r1, [r7, #13]
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	1acb      	subs	r3, r1, r3
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	dbdf      	blt.n	8002bf2 <lcdHLine2+0x66e>
			}
			break;
 8002c32:	e050      	b.n	8002cd6 <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 8002c34:	7bbb      	ldrb	r3, [r7, #14]
 8002c36:	22ff      	movs	r2, #255	; 0xff
 8002c38:	fa42 f303 	asr.w	r3, r2, r3
 8002c3c:	b25a      	sxtb	r2, r3
 8002c3e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002c42:	4013      	ands	r3, r2
 8002c44:	b25a      	sxtb	r2, r3
 8002c46:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	b259      	sxtb	r1, r3
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	f1c3 0308 	rsb	r3, r3, #8
 8002c54:	20ff      	movs	r0, #255	; 0xff
 8002c56:	fa00 f303 	lsl.w	r3, r0, r3
 8002c5a:	b25b      	sxtb	r3, r3
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	4313      	orrs	r3, r2
 8002c62:	b25b      	sxtb	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 8002c6a:	7b3b      	ldrb	r3, [r7, #12]
 8002c6c:	f1c3 0307 	rsb	r3, r3, #7
 8002c70:	22ff      	movs	r2, #255	; 0xff
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	b25a      	sxtb	r2, r3
 8002c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	b25a      	sxtb	r2, r3
 8002c80:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	b259      	sxtb	r1, r3
 8002c88:	7b3b      	ldrb	r3, [r7, #12]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	20ff      	movs	r0, #255	; 0xff
 8002c8e:	fa40 f303 	asr.w	r3, r0, r3
 8002c92:	b25b      	sxtb	r3, r3
 8002c94:	400b      	ands	r3, r1
 8002c96:	b25b      	sxtb	r3, r3
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	b25b      	sxtb	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	743b      	strb	r3, [r7, #16]
 8002ca6:	e00f      	b.n	8002cc8 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	2232      	movs	r2, #50	; 0x32
 8002cac:	fb03 f202 	mul.w	r2, r3, r2
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	441a      	add	r2, r3
 8002cb4:	7c3b      	ldrb	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	7dfa      	ldrb	r2, [r7, #23]
 8002cba:	43d2      	mvns	r2, r2
 8002cbc:	b2d1      	uxtb	r1, r2
 8002cbe:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <lcdHLine2+0x788>)
 8002cc0:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002cc2:	7c3b      	ldrb	r3, [r7, #16]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	743b      	strb	r3, [r7, #16]
 8002cc8:	7c3a      	ldrb	r2, [r7, #16]
 8002cca:	7b79      	ldrb	r1, [r7, #13]
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	1acb      	subs	r3, r1, r3
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	dbe9      	blt.n	8002ca8 <lcdHLine2+0x724>
			}
			break;
 8002cd4:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	2232      	movs	r2, #50	; 0x32
 8002cda:	fb03 f202 	mul.w	r2, r3, r2
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	490a      	ldr	r1, [pc, #40]	; (8002d0c <lcdHLine2+0x788>)
 8002ce4:	7dba      	ldrb	r2, [r7, #22]
 8002ce6:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8002ce8:	7b7a      	ldrb	r2, [r7, #13]
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d908      	bls.n	8002d02 <lcdHLine2+0x77e>
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	2232      	movs	r2, #50	; 0x32
 8002cf4:	fb03 f202 	mul.w	r2, r3, r2
 8002cf8:	7b7b      	ldrb	r3, [r7, #13]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <lcdHLine2+0x788>)
 8002cfe:	7d7a      	ldrb	r2, [r7, #21]
 8002d00:	54ca      	strb	r2, [r1, r3]
}
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc90      	pop	{r4, r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	20000694 	.word	0x20000694

08002d10 <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8002d10:	b490      	push	{r4, r7}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4604      	mov	r4, r0
 8002d18:	4608      	mov	r0, r1
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4623      	mov	r3, r4
 8002d20:	80fb      	strh	r3, [r7, #6]
 8002d22:	4603      	mov	r3, r0
 8002d24:	80bb      	strh	r3, [r7, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	70fb      	strb	r3, [r7, #3]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 8002d40:	88bb      	ldrh	r3, [r7, #4]
 8002d42:	08db      	lsrs	r3, r3, #3
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 8002d48:	88bb      	ldrh	r3, [r7, #4]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	2232      	movs	r2, #50	; 0x32
 8002d56:	fb03 f202 	mul.w	r2, r3, r2
 8002d5a:	7c7b      	ldrb	r3, [r7, #17]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a71      	ldr	r2, [pc, #452]	; (8002f24 <lcdHLine+0x214>)
 8002d60:	5cd3      	ldrb	r3, [r2, r3]
 8002d62:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	2232      	movs	r2, #50	; 0x32
 8002d68:	fb03 f202 	mul.w	r2, r3, r2
 8002d6c:	7c7b      	ldrb	r3, [r7, #17]
 8002d6e:	441a      	add	r2, r3
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	4413      	add	r3, r2
 8002d74:	4a6b      	ldr	r2, [pc, #428]	; (8002f24 <lcdHLine+0x214>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 8002d7a:	23ff      	movs	r3, #255	; 0xff
 8002d7c:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 8002d7e:	7c3b      	ldrb	r3, [r7, #16]
 8002d80:	f1c3 0208 	rsb	r2, r3, #8
 8002d84:	88b9      	ldrh	r1, [r7, #4]
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	1acb      	subs	r3, r1, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	dd09      	ble.n	8002da4 <lcdHLine+0x94>
 8002d90:	88ba      	ldrh	r2, [r7, #4]
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	22ff      	movs	r2, #255	; 0xff
 8002d9a:	fa42 f303 	asr.w	r3, r2, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	757b      	strb	r3, [r7, #21]
	switch(mode){
 8002da4:	78bb      	ldrb	r3, [r7, #2]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d067      	beq.n	8002e7a <lcdHLine+0x16a>
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	f300 809e 	bgt.w	8002eec <lcdHLine+0x1dc>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <lcdHLine+0xaa>
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d02e      	beq.n	8002e16 <lcdHLine+0x106>
 8002db8:	e098      	b.n	8002eec <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 8002dba:	7d7a      	ldrb	r2, [r7, #21]
 8002dbc:	7c3b      	ldrb	r3, [r7, #16]
 8002dbe:	fa42 f303 	asr.w	r3, r2, r3
 8002dc2:	b25a      	sxtb	r2, r3
 8002dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8002dce:	7bbb      	ldrb	r3, [r7, #14]
 8002dd0:	f1c3 0307 	rsb	r3, r3, #7
 8002dd4:	22ff      	movs	r2, #255	; 0xff
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	b25a      	sxtb	r2, r3
 8002ddc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002de6:	2301      	movs	r3, #1
 8002de8:	753b      	strb	r3, [r7, #20]
 8002dea:	e00d      	b.n	8002e08 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	2232      	movs	r2, #50	; 0x32
 8002df0:	fb03 f202 	mul.w	r2, r3, r2
 8002df4:	7c7b      	ldrb	r3, [r7, #17]
 8002df6:	441a      	add	r2, r3
 8002df8:	7d3b      	ldrb	r3, [r7, #20]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4a49      	ldr	r2, [pc, #292]	; (8002f24 <lcdHLine+0x214>)
 8002dfe:	21ff      	movs	r1, #255	; 0xff
 8002e00:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002e02:	7d3b      	ldrb	r3, [r7, #20]
 8002e04:	3301      	adds	r3, #1
 8002e06:	753b      	strb	r3, [r7, #20]
 8002e08:	7d3a      	ldrb	r2, [r7, #20]
 8002e0a:	7bf9      	ldrb	r1, [r7, #15]
 8002e0c:	7c7b      	ldrb	r3, [r7, #17]
 8002e0e:	1acb      	subs	r3, r1, r3
 8002e10:	429a      	cmp	r2, r3
 8002e12:	dbeb      	blt.n	8002dec <lcdHLine+0xdc>
		}
		break;
 8002e14:	e06a      	b.n	8002eec <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 8002e16:	7d7a      	ldrb	r2, [r7, #21]
 8002e18:	7c3b      	ldrb	r3, [r7, #16]
 8002e1a:	fa42 f303 	asr.w	r3, r2, r3
 8002e1e:	b25b      	sxtb	r3, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	b25a      	sxtb	r2, r3
 8002e24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b25b      	sxtb	r3, r3
 8002e2c:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 8002e2e:	7bbb      	ldrb	r3, [r7, #14]
 8002e30:	f1c3 0307 	rsb	r3, r3, #7
 8002e34:	22ff      	movs	r2, #255	; 0xff
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	b25b      	sxtb	r3, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	b25a      	sxtb	r2, r3
 8002e40:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002e44:	4013      	ands	r3, r2
 8002e46:	b25b      	sxtb	r3, r3
 8002e48:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	74fb      	strb	r3, [r7, #19]
 8002e4e:	e00d      	b.n	8002e6c <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	2232      	movs	r2, #50	; 0x32
 8002e54:	fb03 f202 	mul.w	r2, r3, r2
 8002e58:	7c7b      	ldrb	r3, [r7, #17]
 8002e5a:	441a      	add	r2, r3
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	4413      	add	r3, r2
 8002e60:	4a30      	ldr	r2, [pc, #192]	; (8002f24 <lcdHLine+0x214>)
 8002e62:	2100      	movs	r1, #0
 8002e64:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002e66:	7cfb      	ldrb	r3, [r7, #19]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	74fb      	strb	r3, [r7, #19]
 8002e6c:	7cfa      	ldrb	r2, [r7, #19]
 8002e6e:	7bf9      	ldrb	r1, [r7, #15]
 8002e70:	7c7b      	ldrb	r3, [r7, #17]
 8002e72:	1acb      	subs	r3, r1, r3
 8002e74:	429a      	cmp	r2, r3
 8002e76:	dbeb      	blt.n	8002e50 <lcdHLine+0x140>
		}
		break;
 8002e78:	e038      	b.n	8002eec <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 8002e7a:	7d7a      	ldrb	r2, [r7, #21]
 8002e7c:	7c3b      	ldrb	r3, [r7, #16]
 8002e7e:	fa42 f303 	asr.w	r3, r2, r3
 8002e82:	b25a      	sxtb	r2, r3
 8002e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e88:	4053      	eors	r3, r2
 8002e8a:	b25b      	sxtb	r3, r3
 8002e8c:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 8002e8e:	7bbb      	ldrb	r3, [r7, #14]
 8002e90:	f1c3 0307 	rsb	r3, r3, #7
 8002e94:	22ff      	movs	r2, #255	; 0xff
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	b25a      	sxtb	r2, r3
 8002e9c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002ea0:	4053      	eors	r3, r2
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	74bb      	strb	r3, [r7, #18]
 8002eaa:	e018      	b.n	8002ede <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	2232      	movs	r2, #50	; 0x32
 8002eb0:	fb03 f202 	mul.w	r2, r3, r2
 8002eb4:	7c7b      	ldrb	r3, [r7, #17]
 8002eb6:	441a      	add	r2, r3
 8002eb8:	7cbb      	ldrb	r3, [r7, #18]
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <lcdHLine+0x214>)
 8002ebe:	5cd2      	ldrb	r2, [r2, r3]
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	2132      	movs	r1, #50	; 0x32
 8002ec4:	fb03 f101 	mul.w	r1, r3, r1
 8002ec8:	7c7b      	ldrb	r3, [r7, #17]
 8002eca:	4419      	add	r1, r3
 8002ecc:	7cbb      	ldrb	r3, [r7, #18]
 8002ece:	440b      	add	r3, r1
 8002ed0:	43d2      	mvns	r2, r2
 8002ed2:	b2d1      	uxtb	r1, r2
 8002ed4:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <lcdHLine+0x214>)
 8002ed6:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002ed8:	7cbb      	ldrb	r3, [r7, #18]
 8002eda:	3301      	adds	r3, #1
 8002edc:	74bb      	strb	r3, [r7, #18]
 8002ede:	7cba      	ldrb	r2, [r7, #18]
 8002ee0:	7bf9      	ldrb	r1, [r7, #15]
 8002ee2:	7c7b      	ldrb	r3, [r7, #17]
 8002ee4:	1acb      	subs	r3, r1, r3
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	dbe0      	blt.n	8002eac <lcdHLine+0x19c>
		}
		break;
 8002eea:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	2232      	movs	r2, #50	; 0x32
 8002ef0:	fb03 f202 	mul.w	r2, r3, r2
 8002ef4:	7c7b      	ldrb	r3, [r7, #17]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	490a      	ldr	r1, [pc, #40]	; (8002f24 <lcdHLine+0x214>)
 8002efa:	7dfa      	ldrb	r2, [r7, #23]
 8002efc:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	7c7b      	ldrb	r3, [r7, #17]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d908      	bls.n	8002f18 <lcdHLine+0x208>
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	2232      	movs	r2, #50	; 0x32
 8002f0a:	fb03 f202 	mul.w	r2, r3, r2
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	4413      	add	r3, r2
 8002f12:	4904      	ldr	r1, [pc, #16]	; (8002f24 <lcdHLine+0x214>)
 8002f14:	7dba      	ldrb	r2, [r7, #22]
 8002f16:	54ca      	strb	r2, [r1, r3]
}
 8002f18:	bf00      	nop
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc90      	pop	{r4, r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000694 	.word	0x20000694

08002f28 <lcdRefresh>:

void lcdRefresh(void){
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <lcdRefresh+0x7c>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d032      	beq.n	8002f9c <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8002f36:	2201      	movs	r2, #1
 8002f38:	2140      	movs	r1, #64	; 0x40
 8002f3a:	481b      	ldr	r0, [pc, #108]	; (8002fa8 <lcdRefresh+0x80>)
 8002f3c:	f004 fba4 	bl	8007688 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8002f40:	2301      	movs	r3, #1
 8002f42:	71fb      	strb	r3, [r7, #7]
 8002f44:	e01c      	b.n	8002f80 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff f93d 	bl	80021c8 <reverse_uint8>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	4b16      	ldr	r3, [pc, #88]	; (8002fac <lcdRefresh+0x84>)
 8002f54:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8002f56:	2396      	movs	r3, #150	; 0x96
 8002f58:	2202      	movs	r2, #2
 8002f5a:	4914      	ldr	r1, [pc, #80]	; (8002fac <lcdRefresh+0x84>)
 8002f5c:	4814      	ldr	r0, [pc, #80]	; (8002fb0 <lcdRefresh+0x88>)
 8002f5e:	f006 fe04 	bl	8009b6a <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	2232      	movs	r2, #50	; 0x32
 8002f68:	fb02 f303 	mul.w	r3, r2, r3
 8002f6c:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <lcdRefresh+0x8c>)
 8002f6e:	1899      	adds	r1, r3, r2
 8002f70:	2396      	movs	r3, #150	; 0x96
 8002f72:	2232      	movs	r2, #50	; 0x32
 8002f74:	480e      	ldr	r0, [pc, #56]	; (8002fb0 <lcdRefresh+0x88>)
 8002f76:	f006 fdf8 	bl	8009b6a <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	71fb      	strb	r3, [r7, #7]
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	2bf1      	cmp	r3, #241	; 0xf1
 8002f84:	d9df      	bls.n	8002f46 <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8002f86:	2396      	movs	r3, #150	; 0x96
 8002f88:	2202      	movs	r2, #2
 8002f8a:	490b      	ldr	r1, [pc, #44]	; (8002fb8 <lcdRefresh+0x90>)
 8002f8c:	4808      	ldr	r0, [pc, #32]	; (8002fb0 <lcdRefresh+0x88>)
 8002f8e:	f006 fdec 	bl	8009b6a <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8002f92:	2200      	movs	r2, #0
 8002f94:	2140      	movs	r1, #64	; 0x40
 8002f96:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <lcdRefresh+0x80>)
 8002f98:	f004 fb76 	bl	8007688 <HAL_GPIO_WritePin>
	}
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000144 	.word	0x20000144
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	20000148 	.word	0x20000148
 8002fb0:	20003824 	.word	0x20003824
 8002fb4:	20000694 	.word	0x20000694
 8002fb8:	20000690 	.word	0x20000690

08002fbc <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4623      	mov	r3, r4
 8002fcc:	80fb      	strh	r3, [r7, #6]
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80bb      	strh	r3, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	70fb      	strb	r3, [r7, #3]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	e009      	b.n	8002ff4 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8002fe0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	88b9      	ldrh	r1, [r7, #4]
 8002fe8:	88f8      	ldrh	r0, [r7, #6]
 8002fea:	f7ff fe91 	bl	8002d10 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	78bb      	ldrb	r3, [r7, #2]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d9f1      	bls.n	8002fe0 <lcdRect+0x24>
	}
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	bd90      	pop	{r4, r7, pc}

08003006 <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8003006:	b590      	push	{r4, r7, lr}
 8003008:	b087      	sub	sp, #28
 800300a:	af02      	add	r7, sp, #8
 800300c:	4604      	mov	r4, r0
 800300e:	4608      	mov	r0, r1
 8003010:	4611      	mov	r1, r2
 8003012:	461a      	mov	r2, r3
 8003014:	4623      	mov	r3, r4
 8003016:	80fb      	strh	r3, [r7, #6]
 8003018:	4603      	mov	r3, r0
 800301a:	80bb      	strh	r3, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
 8003020:	4613      	mov	r3, r2
 8003022:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	88bb      	ldrh	r3, [r7, #4]
 8003028:	429a      	cmp	r2, r3
 800302a:	d046      	beq.n	80030ba <lcdRect2+0xb4>
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	78bb      	ldrb	r3, [r7, #2]
 8003030:	429a      	cmp	r2, r3
 8003032:	d042      	beq.n	80030ba <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	e00d      	b.n	8003056 <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 800303a:	f897 4020 	ldrb.w	r4, [r7, #32]
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	88b9      	ldrh	r1, [r7, #4]
 8003042:	88f8      	ldrh	r0, [r7, #6]
 8003044:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	4623      	mov	r3, r4
 800304c:	f7ff fa9a 	bl	8002584 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	3301      	adds	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	78bb      	ldrb	r3, [r7, #2]
 800305a:	429a      	cmp	r2, r3
 800305c:	d9ed      	bls.n	800303a <lcdRect2+0x34>
		}
		if(outline){
 800305e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003062:	2b00      	cmp	r3, #0
 8003064:	d029      	beq.n	80030ba <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8003066:	f897 3020 	ldrb.w	r3, [r7, #32]
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	88b9      	ldrh	r1, [r7, #4]
 800306e:	88f8      	ldrh	r0, [r7, #6]
 8003070:	2401      	movs	r4, #1
 8003072:	9400      	str	r4, [sp, #0]
 8003074:	f7ff fa86 	bl	8002584 <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8003078:	f897 3020 	ldrb.w	r3, [r7, #32]
 800307c:	78ba      	ldrb	r2, [r7, #2]
 800307e:	88b9      	ldrh	r1, [r7, #4]
 8003080:	88f8      	ldrh	r0, [r7, #6]
 8003082:	2401      	movs	r4, #1
 8003084:	9400      	str	r4, [sp, #0]
 8003086:	f7ff fa7d 	bl	8002584 <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	b29b      	uxth	r3, r3
 800308e:	3301      	adds	r3, #1
 8003090:	b299      	uxth	r1, r3
 8003092:	78bb      	ldrb	r3, [r7, #2]
 8003094:	3b01      	subs	r3, #1
 8003096:	b2da      	uxtb	r2, r3
 8003098:	f897 3020 	ldrb.w	r3, [r7, #32]
 800309c:	88f8      	ldrh	r0, [r7, #6]
 800309e:	f7ff f9fb 	bl	8002498 <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3301      	adds	r3, #1
 80030a8:	b299      	uxth	r1, r3
 80030aa:	78bb      	ldrb	r3, [r7, #2]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030b4:	88b8      	ldrh	r0, [r7, #4]
 80030b6:	f7ff f9ef 	bl	8002498 <lcdVLine>
		}
	}
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
	...

080030c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030cc:	f003 fede 	bl	8006e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030d0:	f000 f898 	bl	8003204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030d4:	f7fe fcae 	bl	8001a34 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80030d8:	f000 fcd2 	bl	8003a80 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80030dc:	f000 f99c 	bl	8003418 <MX_SPI1_Init>
  MX_TIM1_Init();
 80030e0:	f000 fb3e 	bl	8003760 <MX_TIM1_Init>
  MX_TIM10_Init();
 80030e4:	f000 fbde 	bl	80038a4 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 80030e8:	f000 fcf4 	bl	8003ad4 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 80030ec:	f7fe ffe4 	bl	80020b8 <MX_I2C1_Init>
  MX_TIM11_Init();
 80030f0:	f000 fbfc 	bl	80038ec <MX_TIM11_Init>
  MX_RTC_Init();
 80030f4:	f000 f936 	bl	8003364 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart6, &znak, 1);

  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 80030f8:	4835      	ldr	r0, [pc, #212]	; (80031d0 <main+0x10c>)
 80030fa:	f006 ff3d 	bl	8009f78 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80030fe:	4834      	ldr	r0, [pc, #208]	; (80031d0 <main+0x10c>)
 8003100:	f006 ff8a 	bl	800a018 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003104:	2100      	movs	r1, #0
 8003106:	4832      	ldr	r0, [pc, #200]	; (80031d0 <main+0x10c>)
 8003108:	f007 f850 	bl	800a1ac <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 800310c:	4831      	ldr	r0, [pc, #196]	; (80031d4 <main+0x110>)
 800310e:	f006 ff83 	bl	800a018 <HAL_TIM_Base_Start_IT>

  gpsDev = initGps(&huart6);
 8003112:	4c31      	ldr	r4, [pc, #196]	; (80031d8 <main+0x114>)
 8003114:	463b      	mov	r3, r7
 8003116:	4931      	ldr	r1, [pc, #196]	; (80031dc <main+0x118>)
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe fd77 	bl	8001c0c <initGps>
 800311e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003122:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003126:	4620      	mov	r0, r4
 8003128:	4619      	mov	r1, r3
 800312a:	f44f 7318 	mov.w	r3, #608	; 0x260
 800312e:	461a      	mov	r2, r3
 8003130:	f009 f876 	bl	800c220 <memcpy>

//  bmp_t bmp180module;
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8003134:	482a      	ldr	r0, [pc, #168]	; (80031e0 <main+0x11c>)
 8003136:	f7fd fffb 	bl	8001130 <bmp_init>

  initButtons(btnsPtrs);
 800313a:	482a      	ldr	r0, [pc, #168]	; (80031e4 <main+0x120>)
 800313c:	f7fe fab8 	bl	80016b0 <initButtons>

  initTimer();
 8003140:	f7fe fc64 	bl	8001a0c <initTimer>
//  setTimeout(1);
  startClock();
 8003144:	f7fe fc6c 	bl	8001a20 <startClock>

  init_ring_buffer(&baroRing, 399);
 8003148:	f240 118f 	movw	r1, #399	; 0x18f
 800314c:	4826      	ldr	r0, [pc, #152]	; (80031e8 <main+0x124>)
 800314e:	f003 fd59 	bl	8006c04 <init_ring_buffer>
  init_ring_buffer(&tempRing, 399);
 8003152:	f240 118f 	movw	r1, #399	; 0x18f
 8003156:	4825      	ldr	r0, [pc, #148]	; (80031ec <main+0x128>)
 8003158:	f003 fd54 	bl	8006c04 <init_ring_buffer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 800315c:	f7ff f85e 	bl	800221c <lcdClearBuffer>
  lcdRefresh();
 8003160:	f7ff fee2 	bl	8002f28 <lcdRefresh>
  while (1)
  {
	  // functions executed along with the menu
		bmpData = getBmpData(&bmp180module);
 8003164:	4c22      	ldr	r4, [pc, #136]	; (80031f0 <main+0x12c>)
 8003166:	463b      	mov	r3, r7
 8003168:	491d      	ldr	r1, [pc, #116]	; (80031e0 <main+0x11c>)
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fa48 	bl	8001600 <getBmpData>
 8003170:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003174:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003178:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800317a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		// option to be moved into ring buffer lib - overwriting values
//		if(baroRing.num_entries>=baroRing.size)remove_ring_buffer(&baroRing);
//		add_ring_buffer(&baroRing, (int)bmpData.temperature);
		add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 800317e:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <main+0x12c>)
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800318c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003190:	ee17 1a90 	vmov	r1, s15
 8003194:	4815      	ldr	r0, [pc, #84]	; (80031ec <main+0x128>)
 8003196:	f003 fd68 	bl	8006c6a <add_ovw_ring_buffer>
		add_ovw_ring_buffer(&baroRing, (int)(bmpData.pressure/10));
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <main+0x12c>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4a15      	ldr	r2, [pc, #84]	; (80031f4 <main+0x130>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	4619      	mov	r1, r3
 80031a8:	480f      	ldr	r0, [pc, #60]	; (80031e8 <main+0x124>)
 80031aa:	f003 fd5e 	bl	8006c6a <add_ovw_ring_buffer>
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80031ae:	2200      	movs	r2, #0
 80031b0:	4911      	ldr	r1, [pc, #68]	; (80031f8 <main+0x134>)
 80031b2:	4812      	ldr	r0, [pc, #72]	; (80031fc <main+0x138>)
 80031b4:	f006 fa62 	bl	800967c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80031b8:	2200      	movs	r2, #0
 80031ba:	4911      	ldr	r1, [pc, #68]	; (8003200 <main+0x13c>)
 80031bc:	480f      	ldr	r0, [pc, #60]	; (80031fc <main+0x138>)
 80031be:	f006 fb3f 	bl	8009840 <HAL_RTC_GetDate>
//		gpsDev.getData(&gpsDev);
	  lcdClearBuffer();
 80031c2:	f7ff f82b 	bl	800221c <lcdClearBuffer>

	  // functions executed through GUI
	  showGui();
 80031c6:	f7fe ff59 	bl	800207c <showGui>

	  lcdRefresh();
 80031ca:	f7ff fead 	bl	8002f28 <lcdRefresh>
  {
 80031ce:	e7c9      	b.n	8003164 <main+0xa0>
 80031d0:	20003880 	.word	0x20003880
 80031d4:	200038c8 	.word	0x200038c8
 80031d8:	200035a4 	.word	0x200035a4
 80031dc:	2000399c 	.word	0x2000399c
 80031e0:	2000050c 	.word	0x2000050c
 80031e4:	2000002c 	.word	0x2000002c
 80031e8:	2000358c 	.word	0x2000358c
 80031ec:	20003598 	.word	0x20003598
 80031f0:	20000550 	.word	0x20000550
 80031f4:	cccccccd 	.word	0xcccccccd
 80031f8:	20003574 	.word	0x20003574
 80031fc:	20003804 	.word	0x20003804
 8003200:	20003588 	.word	0x20003588

08003204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b094      	sub	sp, #80	; 0x50
 8003208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800320a:	f107 0320 	add.w	r3, r7, #32
 800320e:	2230      	movs	r2, #48	; 0x30
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f009 f812 	bl	800c23c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <SystemClock_Config+0xd0>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <SystemClock_Config+0xd0>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003236:	6413      	str	r3, [r2, #64]	; 0x40
 8003238:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <SystemClock_Config+0xd0>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003244:	2300      	movs	r3, #0
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <SystemClock_Config+0xd4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <SystemClock_Config+0xd4>)
 800324e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <SystemClock_Config+0xd4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003260:	2305      	movs	r3, #5
 8003262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003264:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800326a:	2301      	movs	r3, #1
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800326e:	2302      	movs	r3, #2
 8003270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003278:	2304      	movs	r3, #4
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800327c:	23a8      	movs	r3, #168	; 0xa8
 800327e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003280:	2302      	movs	r3, #2
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003284:	2307      	movs	r3, #7
 8003286:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003288:	f107 0320 	add.w	r3, r7, #32
 800328c:	4618      	mov	r0, r3
 800328e:	f005 fa8d 	bl	80087ac <HAL_RCC_OscConfig>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003298:	f000 f856 	bl	8003348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800329c:	230f      	movs	r3, #15
 800329e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032a0:	2302      	movs	r3, #2
 80032a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80032ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80032b4:	f107 030c 	add.w	r3, r7, #12
 80032b8:	2105      	movs	r1, #5
 80032ba:	4618      	mov	r0, r3
 80032bc:	f005 fcee 	bl	8008c9c <HAL_RCC_ClockConfig>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80032c6:	f000 f83f 	bl	8003348 <Error_Handler>
  }
}
 80032ca:	bf00      	nop
 80032cc:	3750      	adds	r7, #80	; 0x50
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40007000 	.word	0x40007000

080032dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM10){
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10c      	bne.n	8003308 <HAL_TIM_PeriodElapsedCallback+0x2c>
		if(stwS.state){
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80032f0:	78db      	ldrb	r3, [r3, #3]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_TIM_PeriodElapsedCallback+0x2c>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80032fc:	2101      	movs	r1, #1
 80032fe:	480a      	ldr	r0, [pc, #40]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003300:	f004 f9db 	bl	80076ba <HAL_GPIO_TogglePin>
			stwTick();
 8003304:	f000 f9d8 	bl	80036b8 <stwTick>
		}
	}
	if(htim->Instance == TIM11){
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a07      	ldr	r2, [pc, #28]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d102      	bne.n	8003318 <HAL_TIM_PeriodElapsedCallback+0x3c>
		scanButtons(btnsPtrs);
 8003312:	4807      	ldr	r0, [pc, #28]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003314:	f7fe fb60 	bl	80019d8 <scanButtons>
	}
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40014400 	.word	0x40014400
 8003324:	2000387c 	.word	0x2000387c
 8003328:	40020400 	.word	0x40020400
 800332c:	40014800 	.word	0x40014800
 8003330:	2000002c 	.word	0x2000002c

08003334 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){

	}
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800334c:	b672      	cpsid	i
}
 800334e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003350:	2201      	movs	r2, #1
 8003352:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003356:	4802      	ldr	r0, [pc, #8]	; (8003360 <Error_Handler+0x18>)
 8003358:	f004 f996 	bl	8007688 <HAL_GPIO_WritePin>
  while (1)
 800335c:	e7fe      	b.n	800335c <Error_Handler+0x14>
 800335e:	bf00      	nop
 8003360:	40020400 	.word	0x40020400

08003364 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800336a:	1d3b      	adds	r3, r7, #4
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003378:	2300      	movs	r3, #0
 800337a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <MX_RTC_Init+0x58>)
 800337e:	4a10      	ldr	r2, [pc, #64]	; (80033c0 <MX_RTC_Init+0x5c>)
 8003380:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <MX_RTC_Init+0x58>)
 8003384:	2200      	movs	r2, #0
 8003386:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <MX_RTC_Init+0x58>)
 800338a:	227f      	movs	r2, #127	; 0x7f
 800338c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <MX_RTC_Init+0x58>)
 8003390:	22ff      	movs	r2, #255	; 0xff
 8003392:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <MX_RTC_Init+0x58>)
 8003396:	2200      	movs	r2, #0
 8003398:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <MX_RTC_Init+0x58>)
 800339c:	2200      	movs	r2, #0
 800339e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <MX_RTC_Init+0x58>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80033a6:	4805      	ldr	r0, [pc, #20]	; (80033bc <MX_RTC_Init+0x58>)
 80033a8:	f006 f858 	bl	800945c <HAL_RTC_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80033b2:	f7ff ffc9 	bl	8003348 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20003804 	.word	0x20003804
 80033c0:	40002800 	.word	0x40002800

080033c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08e      	sub	sp, #56	; 0x38
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	2230      	movs	r2, #48	; 0x30
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f008 ff31 	bl	800c23c <memset>
  if(rtcHandle->Instance==RTC)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a0c      	ldr	r2, [pc, #48]	; (8003410 <HAL_RTC_MspInit+0x4c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d111      	bne.n	8003408 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033e4:	2320      	movs	r3, #32
 80033e6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80033e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ec:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033ee:	f107 0308 	add.w	r3, r7, #8
 80033f2:	4618      	mov	r0, r3
 80033f4:	f005 fe72 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80033fe:	f7ff ffa3 	bl	8003348 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003402:	4b04      	ldr	r3, [pc, #16]	; (8003414 <HAL_RTC_MspInit+0x50>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003408:	bf00      	nop
 800340a:	3738      	adds	r7, #56	; 0x38
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40002800 	.word	0x40002800
 8003414:	42470e3c 	.word	0x42470e3c

08003418 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800341c:	4b17      	ldr	r3, [pc, #92]	; (800347c <MX_SPI1_Init+0x64>)
 800341e:	4a18      	ldr	r2, [pc, #96]	; (8003480 <MX_SPI1_Init+0x68>)
 8003420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <MX_SPI1_Init+0x64>)
 8003424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <MX_SPI1_Init+0x64>)
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <MX_SPI1_Init+0x64>)
 8003432:	2200      	movs	r2, #0
 8003434:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <MX_SPI1_Init+0x64>)
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <MX_SPI1_Init+0x64>)
 800343e:	2200      	movs	r2, #0
 8003440:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <MX_SPI1_Init+0x64>)
 8003444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003448:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800344a:	4b0c      	ldr	r3, [pc, #48]	; (800347c <MX_SPI1_Init+0x64>)
 800344c:	2220      	movs	r2, #32
 800344e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <MX_SPI1_Init+0x64>)
 8003452:	2200      	movs	r2, #0
 8003454:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003456:	4b09      	ldr	r3, [pc, #36]	; (800347c <MX_SPI1_Init+0x64>)
 8003458:	2200      	movs	r2, #0
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800345c:	4b07      	ldr	r3, [pc, #28]	; (800347c <MX_SPI1_Init+0x64>)
 800345e:	2200      	movs	r2, #0
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <MX_SPI1_Init+0x64>)
 8003464:	220a      	movs	r2, #10
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003468:	4804      	ldr	r0, [pc, #16]	; (800347c <MX_SPI1_Init+0x64>)
 800346a:	f006 faf5 	bl	8009a58 <HAL_SPI_Init>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003474:	f7ff ff68 	bl	8003348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003478:	bf00      	nop
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20003824 	.word	0x20003824
 8003480:	40013000 	.word	0x40013000

08003484 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a19      	ldr	r2, [pc, #100]	; (8003508 <HAL_SPI_MspInit+0x84>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d12b      	bne.n	80034fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	4b18      	ldr	r3, [pc, #96]	; (800350c <HAL_SPI_MspInit+0x88>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	4a17      	ldr	r2, [pc, #92]	; (800350c <HAL_SPI_MspInit+0x88>)
 80034b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034b4:	6453      	str	r3, [r2, #68]	; 0x44
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_SPI_MspInit+0x88>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_SPI_MspInit+0x88>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	4a10      	ldr	r2, [pc, #64]	; (800350c <HAL_SPI_MspInit+0x88>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	6313      	str	r3, [r2, #48]	; 0x30
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_SPI_MspInit+0x88>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80034de:	23a0      	movs	r3, #160	; 0xa0
 80034e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ea:	2303      	movs	r3, #3
 80034ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034ee:	2305      	movs	r3, #5
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	4619      	mov	r1, r3
 80034f8:	4805      	ldr	r0, [pc, #20]	; (8003510 <HAL_SPI_MspInit+0x8c>)
 80034fa:	f003 ff01 	bl	8007300 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80034fe:	bf00      	nop
 8003500:	3728      	adds	r7, #40	; 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40013000 	.word	0x40013000
 800350c:	40023800 	.word	0x40023800
 8003510:	40020000 	.word	0x40020000

08003514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_MspInit+0x4c>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	4a0f      	ldr	r2, [pc, #60]	; (8003560 <HAL_MspInit+0x4c>)
 8003524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003528:	6453      	str	r3, [r2, #68]	; 0x44
 800352a:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <HAL_MspInit+0x4c>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_MspInit+0x4c>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a08      	ldr	r2, [pc, #32]	; (8003560 <HAL_MspInit+0x4c>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_MspInit+0x4c>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800

08003564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003568:	e7fe      	b.n	8003568 <NMI_Handler+0x4>

0800356a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 800356e:	f7ff feeb 	bl	8003348 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003572:	e7fe      	b.n	8003572 <HardFault_Handler+0x8>

08003574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <MemManage_Handler+0x4>

0800357a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800357e:	e7fe      	b.n	800357e <BusFault_Handler+0x4>

08003580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003584:	e7fe      	b.n	8003584 <UsageFault_Handler+0x4>

08003586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035b4:	f003 fcbc 	bl	8006f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}

080035bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035c0:	4803      	ldr	r0, [pc, #12]	; (80035d0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80035c2:	f006 febb 	bl	800a33c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80035c6:	4803      	ldr	r0, [pc, #12]	; (80035d4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80035c8:	f006 feb8 	bl	800a33c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80035cc:	bf00      	nop
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20003880 	.word	0x20003880
 80035d4:	200038c8 	.word	0x200038c8

080035d8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035dc:	4803      	ldr	r0, [pc, #12]	; (80035ec <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80035de:	f006 fead 	bl	800a33c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80035e2:	4803      	ldr	r0, [pc, #12]	; (80035f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80035e4:	f006 feaa 	bl	800a33c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20003880 	.word	0x20003880
 80035f0:	20003910 	.word	0x20003910

080035f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 80035f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80035fc:	f004 f878 	bl	80076f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 8003600:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003604:	f004 f874 	bl	80076f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003608:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800360c:	f004 f870 	bl	80076f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 8003610:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003614:	f004 f86c 	bl	80076f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8003618:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800361c:	f004 f868 	bl	80076f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8003620:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003624:	f004 f864 	bl	80076f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003628:	bf00      	nop
 800362a:	bd80      	pop	{r7, pc}

0800362c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003630:	4802      	ldr	r0, [pc, #8]	; (800363c <USART6_IRQHandler+0x10>)
 8003632:	f007 fe1f 	bl	800b274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	2000399c 	.word	0x2000399c

08003640 <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 8003644:	2228      	movs	r2, #40	; 0x28
 8003646:	2100      	movs	r1, #0
 8003648:	4804      	ldr	r0, [pc, #16]	; (800365c <clearTable+0x1c>)
 800364a:	f008 fdf7 	bl	800c23c <memset>
	stwT.position = 0;
 800364e:	4b03      	ldr	r3, [pc, #12]	; (800365c <clearTable+0x1c>)
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	2000014c 	.word	0x2000014c

08003660 <addItem>:
void addItem(stw_struct stwS){
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800366e:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <addItem+0x38>)
 8003670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003674:	461a      	mov	r2, r3
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <addItem+0x38>)
 8003678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <addItem+0x38>)
 800367e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003682:	3301      	adds	r3, #1
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4b04      	ldr	r3, [pc, #16]	; (8003698 <addItem+0x38>)
 8003688:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	2000014c 	.word	0x2000014c

0800369c <stwStart>:

void stwStart(void){
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_ENABLED;
 80036a0:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <stwStart+0x18>)
 80036a2:	78d3      	ldrb	r3, [r2, #3]
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	70d3      	strb	r3, [r2, #3]
}
 80036aa:	bf00      	nop
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	2000387c 	.word	0x2000387c

080036b8 <stwTick>:
void stwTick(void){
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
	stwS.cnt++;
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <stwTick+0x28>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80036ca:	4905      	ldr	r1, [pc, #20]	; (80036e0 <stwTick+0x28>)
 80036cc:	680b      	ldr	r3, [r1, #0]
 80036ce:	f362 0317 	bfi	r3, r2, #0, #24
 80036d2:	600b      	str	r3, [r1, #0]
}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	2000387c 	.word	0x2000387c

080036e4 <stwStop>:
void stwStop(void){
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 80036e8:	4a04      	ldr	r2, [pc, #16]	; (80036fc <stwStop+0x18>)
 80036ea:	78d3      	ldrb	r3, [r2, #3]
 80036ec:	f36f 0300 	bfc	r3, #0, #1
 80036f0:	70d3      	strb	r3, [r2, #3]
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	2000387c 	.word	0x2000387c

08003700 <stwClear>:
void stwClear(void){
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
	stwS.cnt = 0;
 8003704:	4a04      	ldr	r2, [pc, #16]	; (8003718 <stwClear+0x18>)
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	f36f 0317 	bfc	r3, #0, #24
 800370c:	6013      	str	r3, [r2, #0]
}
 800370e:	bf00      	nop
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	2000387c 	.word	0x2000387c

0800371c <stwSave>:
void stwSave(void){
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <stwSave+0x18>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	4a04      	ldr	r2, [pc, #16]	; (8003738 <stwSave+0x1c>)
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	f3c2 0217 	ubfx	r2, r2, #0, #24
 800372c:	4610      	mov	r0, r2
 800372e:	4798      	blx	r3
}
 8003730:	bf00      	nop
 8003732:	bd80      	pop	{r7, pc}
 8003734:	2000014c 	.word	0x2000014c
 8003738:	2000387c 	.word	0x2000387c

0800373c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <SystemInit+0x20>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	4a05      	ldr	r2, [pc, #20]	; (800375c <SystemInit+0x20>)
 8003748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800374c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b096      	sub	sp, #88	; 0x58
 8003764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003766:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003774:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800377e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	609a      	str	r2, [r3, #8]
 800378a:	60da      	str	r2, [r3, #12]
 800378c:	611a      	str	r2, [r3, #16]
 800378e:	615a      	str	r2, [r3, #20]
 8003790:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	2220      	movs	r2, #32
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f008 fd4f 	bl	800c23c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800379e:	4b3f      	ldr	r3, [pc, #252]	; (800389c <MX_TIM1_Init+0x13c>)
 80037a0:	4a3f      	ldr	r2, [pc, #252]	; (80038a0 <MX_TIM1_Init+0x140>)
 80037a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 80037a4:	4b3d      	ldr	r3, [pc, #244]	; (800389c <MX_TIM1_Init+0x13c>)
 80037a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80037aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ac:	4b3b      	ldr	r3, [pc, #236]	; (800389c <MX_TIM1_Init+0x13c>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 80037b2:	4b3a      	ldr	r3, [pc, #232]	; (800389c <MX_TIM1_Init+0x13c>)
 80037b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ba:	4b38      	ldr	r3, [pc, #224]	; (800389c <MX_TIM1_Init+0x13c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <MX_TIM1_Init+0x13c>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037c6:	4b35      	ldr	r3, [pc, #212]	; (800389c <MX_TIM1_Init+0x13c>)
 80037c8:	2280      	movs	r2, #128	; 0x80
 80037ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80037cc:	4833      	ldr	r0, [pc, #204]	; (800389c <MX_TIM1_Init+0x13c>)
 80037ce:	f006 fbd3 	bl	8009f78 <HAL_TIM_Base_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80037d8:	f7ff fdb6 	bl	8003348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80037e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037e6:	4619      	mov	r1, r3
 80037e8:	482c      	ldr	r0, [pc, #176]	; (800389c <MX_TIM1_Init+0x13c>)
 80037ea:	f006 ff71 	bl	800a6d0 <HAL_TIM_ConfigClockSource>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80037f4:	f7ff fda8 	bl	8003348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037f8:	4828      	ldr	r0, [pc, #160]	; (800389c <MX_TIM1_Init+0x13c>)
 80037fa:	f006 fc7d 	bl	800a0f8 <HAL_TIM_PWM_Init>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003804:	f7ff fda0 	bl	8003348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003808:	2300      	movs	r3, #0
 800380a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800380c:	2300      	movs	r3, #0
 800380e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003810:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003814:	4619      	mov	r1, r3
 8003816:	4821      	ldr	r0, [pc, #132]	; (800389c <MX_TIM1_Init+0x13c>)
 8003818:	f007 fb5a 	bl	800aed0 <HAL_TIMEx_MasterConfigSynchronization>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003822:	f7ff fd91 	bl	8003348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003826:	2360      	movs	r3, #96	; 0x60
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 800382a:	2302      	movs	r3, #2
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800382e:	2300      	movs	r3, #0
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003832:	2300      	movs	r3, #0
 8003834:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003836:	2300      	movs	r3, #0
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003846:	2200      	movs	r2, #0
 8003848:	4619      	mov	r1, r3
 800384a:	4814      	ldr	r0, [pc, #80]	; (800389c <MX_TIM1_Init+0x13c>)
 800384c:	f006 fe7e 	bl	800a54c <HAL_TIM_PWM_ConfigChannel>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8003856:	f7ff fd77 	bl	8003348 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800386e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003872:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003874:	2300      	movs	r3, #0
 8003876:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003878:	1d3b      	adds	r3, r7, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4807      	ldr	r0, [pc, #28]	; (800389c <MX_TIM1_Init+0x13c>)
 800387e:	f007 fba3 	bl	800afc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003888:	f7ff fd5e 	bl	8003348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800388c:	4803      	ldr	r0, [pc, #12]	; (800389c <MX_TIM1_Init+0x13c>)
 800388e:	f000 f8bd 	bl	8003a0c <HAL_TIM_MspPostInit>

}
 8003892:	bf00      	nop
 8003894:	3758      	adds	r7, #88	; 0x58
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20003880 	.word	0x20003880
 80038a0:	40010000 	.word	0x40010000

080038a4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80038a8:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <MX_TIM10_Init+0x40>)
 80038aa:	4a0f      	ldr	r2, [pc, #60]	; (80038e8 <MX_TIM10_Init+0x44>)
 80038ac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 80038ae:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <MX_TIM10_Init+0x40>)
 80038b0:	f244 129f 	movw	r2, #16799	; 0x419f
 80038b4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <MX_TIM10_Init+0x40>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <MX_TIM10_Init+0x40>)
 80038be:	2263      	movs	r2, #99	; 0x63
 80038c0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <MX_TIM10_Init+0x40>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <MX_TIM10_Init+0x40>)
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80038ce:	4805      	ldr	r0, [pc, #20]	; (80038e4 <MX_TIM10_Init+0x40>)
 80038d0:	f006 fb52 	bl	8009f78 <HAL_TIM_Base_Init>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80038da:	f7ff fd35 	bl	8003348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200038c8 	.word	0x200038c8
 80038e8:	40014400 	.word	0x40014400

080038ec <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <MX_TIM11_Init+0x40>)
 80038f2:	4a0f      	ldr	r2, [pc, #60]	; (8003930 <MX_TIM11_Init+0x44>)
 80038f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 80038f6:	4b0d      	ldr	r3, [pc, #52]	; (800392c <MX_TIM11_Init+0x40>)
 80038f8:	f244 129f 	movw	r2, #16799	; 0x419f
 80038fc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <MX_TIM11_Init+0x40>)
 8003900:	2200      	movs	r2, #0
 8003902:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 499;
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <MX_TIM11_Init+0x40>)
 8003906:	f240 12f3 	movw	r2, #499	; 0x1f3
 800390a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800390c:	4b07      	ldr	r3, [pc, #28]	; (800392c <MX_TIM11_Init+0x40>)
 800390e:	2200      	movs	r2, #0
 8003910:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <MX_TIM11_Init+0x40>)
 8003914:	2280      	movs	r2, #128	; 0x80
 8003916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003918:	4804      	ldr	r0, [pc, #16]	; (800392c <MX_TIM11_Init+0x40>)
 800391a:	f006 fb2d 	bl	8009f78 <HAL_TIM_Base_Init>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8003924:	f7ff fd10 	bl	8003348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20003910 	.word	0x20003910
 8003930:	40014800 	.word	0x40014800

08003934 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a2e      	ldr	r2, [pc, #184]	; (80039fc <HAL_TIM_Base_MspInit+0xc8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d11e      	bne.n	8003984 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <HAL_TIM_Base_MspInit+0xcc>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <HAL_TIM_Base_MspInit+0xcc>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6453      	str	r3, [r2, #68]	; 0x44
 8003956:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <HAL_TIM_Base_MspInit+0xcc>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003962:	2200      	movs	r2, #0
 8003964:	2100      	movs	r1, #0
 8003966:	2019      	movs	r0, #25
 8003968:	f003 fc01 	bl	800716e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800396c:	2019      	movs	r0, #25
 800396e:	f003 fc1a 	bl	80071a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003972:	2200      	movs	r2, #0
 8003974:	2100      	movs	r1, #0
 8003976:	201a      	movs	r0, #26
 8003978:	f003 fbf9 	bl	800716e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800397c:	201a      	movs	r0, #26
 800397e:	f003 fc12 	bl	80071a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003982:	e036      	b.n	80039f2 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM10)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1e      	ldr	r2, [pc, #120]	; (8003a04 <HAL_TIM_Base_MspInit+0xd0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d116      	bne.n	80039bc <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_TIM_Base_MspInit+0xcc>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	4a1a      	ldr	r2, [pc, #104]	; (8003a00 <HAL_TIM_Base_MspInit+0xcc>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	6453      	str	r3, [r2, #68]	; 0x44
 800399e:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <HAL_TIM_Base_MspInit+0xcc>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80039aa:	2200      	movs	r2, #0
 80039ac:	2100      	movs	r1, #0
 80039ae:	2019      	movs	r0, #25
 80039b0:	f003 fbdd 	bl	800716e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80039b4:	2019      	movs	r0, #25
 80039b6:	f003 fbf6 	bl	80071a6 <HAL_NVIC_EnableIRQ>
}
 80039ba:	e01a      	b.n	80039f2 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <HAL_TIM_Base_MspInit+0xd4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d115      	bne.n	80039f2 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <HAL_TIM_Base_MspInit+0xcc>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <HAL_TIM_Base_MspInit+0xcc>)
 80039d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d4:	6453      	str	r3, [r2, #68]	; 0x44
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_TIM_Base_MspInit+0xcc>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2100      	movs	r1, #0
 80039e6:	201a      	movs	r0, #26
 80039e8:	f003 fbc1 	bl	800716e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80039ec:	201a      	movs	r0, #26
 80039ee:	f003 fbda 	bl	80071a6 <HAL_NVIC_EnableIRQ>
}
 80039f2:	bf00      	nop
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800

08003a0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <HAL_TIM_MspPostInit+0x68>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d11e      	bne.n	8003a6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_TIM_MspPostInit+0x6c>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a10      	ldr	r2, [pc, #64]	; (8003a78 <HAL_TIM_MspPostInit+0x6c>)
 8003a38:	f043 0310 	orr.w	r3, r3, #16
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <HAL_TIM_MspPostInit+0x6c>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a50:	2302      	movs	r3, #2
 8003a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	4619      	mov	r1, r3
 8003a66:	4805      	ldr	r0, [pc, #20]	; (8003a7c <HAL_TIM_MspPostInit+0x70>)
 8003a68:	f003 fc4a 	bl	8007300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a6c:	bf00      	nop
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40010000 	.word	0x40010000
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40021000 	.word	0x40021000

08003a80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a84:	4b11      	ldr	r3, [pc, #68]	; (8003acc <MX_USART3_UART_Init+0x4c>)
 8003a86:	4a12      	ldr	r2, [pc, #72]	; (8003ad0 <MX_USART3_UART_Init+0x50>)
 8003a88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <MX_USART3_UART_Init+0x4c>)
 8003a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a92:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <MX_USART3_UART_Init+0x4c>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a98:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <MX_USART3_UART_Init+0x4c>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <MX_USART3_UART_Init+0x4c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <MX_USART3_UART_Init+0x4c>)
 8003aa6:	220c      	movs	r2, #12
 8003aa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <MX_USART3_UART_Init+0x4c>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <MX_USART3_UART_Init+0x4c>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ab6:	4805      	ldr	r0, [pc, #20]	; (8003acc <MX_USART3_UART_Init+0x4c>)
 8003ab8:	f007 faec 	bl	800b094 <HAL_UART_Init>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003ac2:	f7ff fc41 	bl	8003348 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20003958 	.word	0x20003958
 8003ad0:	40004800 	.word	0x40004800

08003ad4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003ad8:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <MX_USART6_UART_Init+0x4c>)
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <MX_USART6_UART_Init+0x50>)
 8003adc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <MX_USART6_UART_Init+0x4c>)
 8003ae0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ae4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <MX_USART6_UART_Init+0x4c>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <MX_USART6_UART_Init+0x4c>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <MX_USART6_UART_Init+0x4c>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <MX_USART6_UART_Init+0x4c>)
 8003afa:	2204      	movs	r2, #4
 8003afc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afe:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <MX_USART6_UART_Init+0x4c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <MX_USART6_UART_Init+0x4c>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003b0a:	4805      	ldr	r0, [pc, #20]	; (8003b20 <MX_USART6_UART_Init+0x4c>)
 8003b0c:	f007 fac2 	bl	800b094 <HAL_UART_Init>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003b16:	f7ff fc17 	bl	8003348 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2000399c 	.word	0x2000399c
 8003b24:	40011400 	.word	0x40011400

08003b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08c      	sub	sp, #48	; 0x30
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a36      	ldr	r2, [pc, #216]	; (8003c20 <HAL_UART_MspInit+0xf8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d12d      	bne.n	8003ba6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	4b35      	ldr	r3, [pc, #212]	; (8003c24 <HAL_UART_MspInit+0xfc>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	4a34      	ldr	r2, [pc, #208]	; (8003c24 <HAL_UART_MspInit+0xfc>)
 8003b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b58:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5a:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <HAL_UART_MspInit+0xfc>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	4b2e      	ldr	r3, [pc, #184]	; (8003c24 <HAL_UART_MspInit+0xfc>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a2d      	ldr	r2, [pc, #180]	; (8003c24 <HAL_UART_MspInit+0xfc>)
 8003b70:	f043 0308 	orr.w	r3, r3, #8
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_UART_MspInit+0xfc>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003b82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b90:	2303      	movs	r3, #3
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b94:	2307      	movs	r3, #7
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b98:	f107 031c 	add.w	r3, r7, #28
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4822      	ldr	r0, [pc, #136]	; (8003c28 <HAL_UART_MspInit+0x100>)
 8003ba0:	f003 fbae 	bl	8007300 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003ba4:	e038      	b.n	8003c18 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <HAL_UART_MspInit+0x104>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d133      	bne.n	8003c18 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_UART_MspInit+0xfc>)
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <HAL_UART_MspInit+0xfc>)
 8003bba:	f043 0320 	orr.w	r3, r3, #32
 8003bbe:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc0:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <HAL_UART_MspInit+0xfc>)
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <HAL_UART_MspInit+0xfc>)
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <HAL_UART_MspInit+0xfc>)
 8003bd6:	f043 0304 	orr.w	r3, r3, #4
 8003bda:	6313      	str	r3, [r2, #48]	; 0x30
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_UART_MspInit+0xfc>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003be8:	23c0      	movs	r3, #192	; 0xc0
 8003bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bec:	2302      	movs	r3, #2
 8003bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	4619      	mov	r1, r3
 8003c02:	480b      	ldr	r0, [pc, #44]	; (8003c30 <HAL_UART_MspInit+0x108>)
 8003c04:	f003 fb7c 	bl	8007300 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	2047      	movs	r0, #71	; 0x47
 8003c0e:	f003 faae 	bl	800716e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003c12:	2047      	movs	r0, #71	; 0x47
 8003c14:	f003 fac7 	bl	80071a6 <HAL_NVIC_EnableIRQ>
}
 8003c18:	bf00      	nop
 8003c1a:	3730      	adds	r7, #48	; 0x30
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40004800 	.word	0x40004800
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40020c00 	.word	0x40020c00
 8003c2c:	40011400 	.word	0x40011400
 8003c30:	40020800 	.word	0x40020800

08003c34 <setDefaultClbcks>:
#include "fonts/font_zekton12bold.h"

// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <setDefaultClbcks+0x34>)
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <setDefaultClbcks+0x38>)
 8003c3c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <setDefaultClbcks+0x3c>)
 8003c40:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <setDefaultClbcks+0x40>)
 8003c42:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <setDefaultClbcks+0x44>)
 8003c46:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <setDefaultClbcks+0x48>)
 8003c48:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <setDefaultClbcks+0x4c>)
 8003c4c:	4a0d      	ldr	r2, [pc, #52]	; (8003c84 <setDefaultClbcks+0x50>)
 8003c4e:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <setDefaultClbcks+0x54>)
 8003c52:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <setDefaultClbcks+0x58>)
 8003c54:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = NULL;
 8003c56:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <setDefaultClbcks+0x5c>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	611a      	str	r2, [r3, #16]
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000560 	.word	0x20000560
 8003c6c:	08001fa1 	.word	0x08001fa1
 8003c70:	200005a8 	.word	0x200005a8
 8003c74:	08001fb1 	.word	0x08001fb1
 8003c78:	20000584 	.word	0x20000584
 8003c7c:	08003ffd 	.word	0x08003ffd
 8003c80:	20000614 	.word	0x20000614
 8003c84:	08004041 	.word	0x08004041
 8003c88:	200005cc 	.word	0x200005cc
 8003c8c:	0800408d 	.word	0x0800408d
 8003c90:	200005f0 	.word	0x200005f0

08003c94 <baroSetup>:

// function executed once on module load
void baroSetup(void){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8003c98:	f7ff ffcc 	bl	8003c34 <setDefaultClbcks>
}
 8003c9c:	bf00      	nop
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <baroMain>:

// main function
void baroMain(void){
 8003ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca4:	b0b0      	sub	sp, #192	; 0xc0
 8003ca6:	af04      	add	r7, sp, #16
	char str1[50] = {0};
 8003ca8:	2300      	movs	r3, #0
 8003caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003cb0:	222e      	movs	r2, #46	; 0x2e
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f008 fac1 	bl	800c23c <memset>
	char str3[50] = {0};
 8003cba:	2300      	movs	r3, #0
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cc2:	222e      	movs	r2, #46	; 0x2e
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f008 fab8 	bl	800c23c <memset>
	char str4[50] = {0};
 8003ccc:	2300      	movs	r3, #0
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	f107 0308 	add.w	r3, r7, #8
 8003cd4:	222e      	movs	r2, #46	; 0x2e
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f008 faaf 	bl	800c23c <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 8003cde:	4bb7      	ldr	r3, [pc, #732]	; (8003fbc <baroMain+0x31c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fc4a 	bl	800057c <__aeabi_f2d>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003cf0:	49b3      	ldr	r1, [pc, #716]	; (8003fc0 <baroMain+0x320>)
 8003cf2:	f009 fbd1 	bl	800d498 <siprintf>
	lcdPutStr(10, 14, str1, font_12_zekton);
 8003cf6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003cfa:	4bb2      	ldr	r3, [pc, #712]	; (8003fc4 <baroMain+0x324>)
 8003cfc:	210e      	movs	r1, #14
 8003cfe:	200a      	movs	r0, #10
 8003d00:	f7fe fb9c 	bl	800243c <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 8003d04:	4bad      	ldr	r3, [pc, #692]	; (8003fbc <baroMain+0x31c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d10:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8003fc8 <baroMain+0x328>
 8003d14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d18:	ee16 0a90 	vmov	r0, s13
 8003d1c:	f7fc fc2e 	bl	800057c <__aeabi_f2d>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003d28:	49a8      	ldr	r1, [pc, #672]	; (8003fcc <baroMain+0x32c>)
 8003d2a:	f009 fbb5 	bl	800d498 <siprintf>
	lcdPutStr(10, 30, str1, font_12_zekton);
 8003d2e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003d32:	4ba4      	ldr	r3, [pc, #656]	; (8003fc4 <baroMain+0x324>)
 8003d34:	211e      	movs	r1, #30
 8003d36:	200a      	movs	r0, #10
 8003d38:	f7fe fb80 	bl	800243c <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8003d3c:	4ba4      	ldr	r3, [pc, #656]	; (8003fd0 <baroMain+0x330>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d123      	bne.n	8003d8c <baroMain+0xec>
		sprintf(&str4, "Fixed altitude mode");
 8003d44:	1d3b      	adds	r3, r7, #4
 8003d46:	49a3      	ldr	r1, [pc, #652]	; (8003fd4 <baroMain+0x334>)
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f009 fba5 	bl	800d498 <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 8003d4e:	4b9b      	ldr	r3, [pc, #620]	; (8003fbc <baroMain+0x31c>)
 8003d50:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d54:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8003fc8 <baroMain+0x328>
 8003d58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d5c:	ee16 0a90 	vmov	r0, s13
 8003d60:	f7fc fc0c 	bl	800057c <__aeabi_f2d>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003d6c:	499a      	ldr	r1, [pc, #616]	; (8003fd8 <baroMain+0x338>)
 8003d6e:	f009 fb93 	bl	800d498 <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 8003d72:	4b9a      	ldr	r3, [pc, #616]	; (8003fdc <baroMain+0x33c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fc00 	bl	800057c <__aeabi_f2d>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003d84:	4996      	ldr	r1, [pc, #600]	; (8003fe0 <baroMain+0x340>)
 8003d86:	f009 fb87 	bl	800d498 <siprintf>
 8003d8a:	e022      	b.n	8003dd2 <baroMain+0x132>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	4995      	ldr	r1, [pc, #596]	; (8003fe4 <baroMain+0x344>)
 8003d90:	4618      	mov	r0, r3
 8003d92:	f009 fb81 	bl	800d498 <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 8003d96:	4b89      	ldr	r3, [pc, #548]	; (8003fbc <baroMain+0x31c>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc fbee 	bl	800057c <__aeabi_f2d>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003da8:	498f      	ldr	r1, [pc, #572]	; (8003fe8 <baroMain+0x348>)
 8003daa:	f009 fb75 	bl	800d498 <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8003dae:	4b8f      	ldr	r3, [pc, #572]	; (8003fec <baroMain+0x34c>)
 8003db0:	edd3 7a00 	vldr	s15, [r3]
 8003db4:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8003fc8 <baroMain+0x328>
 8003db8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003dbc:	ee16 0a90 	vmov	r0, s13
 8003dc0:	f7fc fbdc 	bl	800057c <__aeabi_f2d>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003dcc:	4988      	ldr	r1, [pc, #544]	; (8003ff0 <baroMain+0x350>)
 8003dce:	f009 fb63 	bl	800d498 <siprintf>
	}
	lcdPutStr(10, 50, str4, font_12_zekton);
 8003dd2:	1d3a      	adds	r2, r7, #4
 8003dd4:	4b7b      	ldr	r3, [pc, #492]	; (8003fc4 <baroMain+0x324>)
 8003dd6:	2132      	movs	r1, #50	; 0x32
 8003dd8:	200a      	movs	r0, #10
 8003dda:	f7fe fb2f 	bl	800243c <lcdPutStr>
	lcdPutStr(10, 66, str1, font_12_zekton);
 8003dde:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003de2:	4b78      	ldr	r3, [pc, #480]	; (8003fc4 <baroMain+0x324>)
 8003de4:	2142      	movs	r1, #66	; 0x42
 8003de6:	200a      	movs	r0, #10
 8003de8:	f7fe fb28 	bl	800243c <lcdPutStr>
	lcdPutStr(10, 82, str3, font_12_zekton);
 8003dec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003df0:	4b74      	ldr	r3, [pc, #464]	; (8003fc4 <baroMain+0x324>)
 8003df2:	2152      	movs	r1, #82	; 0x52
 8003df4:	200a      	movs	r0, #10
 8003df6:	f7fe fb21 	bl	800243c <lcdPutStr>
	uint16_t minBaro = 10000;
 8003dfa:	f242 7310 	movw	r3, #10000	; 0x2710
 8003dfe:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
	uint16_t maxBaro = 10050;
 8003e02:	f242 7342 	movw	r3, #10050	; 0x2742
 8003e06:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	uint16_t minTemp = 200;
 8003e0a:	23c8      	movs	r3, #200	; 0xc8
 8003e0c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
	uint16_t maxTemp = 325;
 8003e10:	f240 1345 	movw	r3, #325	; 0x145
 8003e14:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	uint16_t minX = 10;
 8003e18:	230a      	movs	r3, #10
 8003e1a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint16_t maxX = 390;
 8003e1e:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8003e22:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	uint8_t maxHeight = 230;
 8003e26:	23e6      	movs	r3, #230	; 0xe6
 8003e28:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	uint8_t minHeight = 100;
 8003e2c:	2364      	movs	r3, #100	; 0x64
 8003e2e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
	for(uint16_t i=0; i<baroRing.num_entries; i++){
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8003e38:	e0b3      	b.n	8003fa2 <baroMain+0x302>
//		lcdRect2(400/baroRing.size*i, 400/baroRing.size*i+1, maxHeight-(maxHeight-minHeight)*(baroRing.values[i]-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
		lcdRect2(400/tempRing.size*i, 400/tempRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
 8003e3a:	4b6e      	ldr	r3, [pc, #440]	; (8003ff4 <baroMain+0x354>)
 8003e3c:	895b      	ldrh	r3, [r3, #10]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003e44:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e48:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8003e4c:	fb02 f603 	mul.w	r6, r2, r3
 8003e50:	4b68      	ldr	r3, [pc, #416]	; (8003ff4 <baroMain+0x354>)
 8003e52:	895b      	ldrh	r3, [r3, #10]
 8003e54:	461a      	mov	r2, r3
 8003e56:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003e5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e5e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	f103 0801 	add.w	r8, r3, #1
 8003e6a:	f897 40a1 	ldrb.w	r4, [r7, #161]	; 0xa1
 8003e6e:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 8003e72:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8003e76:	1ad5      	subs	r5, r2, r3
 8003e78:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	485d      	ldr	r0, [pc, #372]	; (8003ff4 <baroMain+0x354>)
 8003e80:	f002 ff41 	bl	8006d06 <read_nth_ring_buffer>
 8003e84:	4602      	mov	r2, r0
 8003e86:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	fb03 f205 	mul.w	r2, r3, r5
 8003e90:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003e94:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003e98:	1acb      	subs	r3, r1, r3
 8003e9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e9e:	1ae2      	subs	r2, r4, r3
 8003ea0:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	9102      	str	r1, [sp, #8]
 8003ea8:	210e      	movs	r1, #14
 8003eaa:	9101      	str	r1, [sp, #4]
 8003eac:	2101      	movs	r1, #1
 8003eae:	9100      	str	r1, [sp, #0]
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f7ff f8a7 	bl	8003006 <lcdRect2>
		lcdRect2(400/baroRing.size*i, 400/baroRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&baroRing, i)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
 8003eb8:	4b4f      	ldr	r3, [pc, #316]	; (8003ff8 <baroMain+0x358>)
 8003eba:	895b      	ldrh	r3, [r3, #10]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003ec2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ec6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8003eca:	fb02 f603 	mul.w	r6, r2, r3
 8003ece:	4b4a      	ldr	r3, [pc, #296]	; (8003ff8 <baroMain+0x358>)
 8003ed0:	895b      	ldrh	r3, [r3, #10]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003ed8:	fb93 f3f2 	sdiv	r3, r3, r2
 8003edc:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
 8003ee4:	f103 0801 	add.w	r8, r3, #1
 8003ee8:	f897 40a1 	ldrb.w	r4, [r7, #161]	; 0xa1
 8003eec:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 8003ef0:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8003ef4:	1ad5      	subs	r5, r2, r3
 8003ef6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003efa:	4619      	mov	r1, r3
 8003efc:	483e      	ldr	r0, [pc, #248]	; (8003ff8 <baroMain+0x358>)
 8003efe:	f002 ff02 	bl	8006d06 <read_nth_ring_buffer>
 8003f02:	4602      	mov	r2, r0
 8003f04:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	fb03 f205 	mul.w	r2, r3, r5
 8003f0e:	f8b7 10aa 	ldrh.w	r1, [r7, #170]	; 0xaa
 8003f12:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8003f16:	1acb      	subs	r3, r1, r3
 8003f18:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f1c:	1ae2      	subs	r2, r4, r3
 8003f1e:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8003f22:	2100      	movs	r1, #0
 8003f24:	9102      	str	r1, [sp, #8]
 8003f26:	2102      	movs	r1, #2
 8003f28:	9101      	str	r1, [sp, #4]
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	9100      	str	r1, [sp, #0]
 8003f2e:	4641      	mov	r1, r8
 8003f30:	4630      	mov	r0, r6
 8003f32:	f7ff f868 	bl	8003006 <lcdRect2>

		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(maxTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8003f36:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f240 118f 	movw	r1, #399	; 0x18f
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7fe fb1d 	bl	8002584 <lcdHLine2>
		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(minTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8003f4a:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 8003f4e:	2302      	movs	r3, #2
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	2301      	movs	r3, #1
 8003f54:	f240 118f 	movw	r1, #399	; 0x18f
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f7fe fb13 	bl	8002584 <lcdHLine2>
		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(300-minTemp)/(maxTemp-minTemp), 1, 2);
 8003f5e:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 8003f62:	f897 10a1 	ldrb.w	r1, [r7, #161]	; 0xa1
 8003f66:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8003f6a:	1acb      	subs	r3, r1, r3
 8003f6c:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 8003f70:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8003f74:	fb03 f101 	mul.w	r1, r3, r1
 8003f78:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	; 0xa6
 8003f7c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003f80:	1ac3      	subs	r3, r0, r3
 8003f82:	fb91 f3f3 	sdiv	r3, r1, r3
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	2302      	movs	r3, #2
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f240 118f 	movw	r1, #399	; 0x18f
 8003f92:	2000      	movs	r0, #0
 8003f94:	f7fe faf6 	bl	8002584 <lcdHLine2>
	for(uint16_t i=0; i<baroRing.num_entries; i++){
 8003f98:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <baroMain+0x358>)
 8003fa4:	891b      	ldrh	r3, [r3, #8]
 8003fa6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8003faa:	429a      	cmp	r2, r3
 8003fac:	f4ff af45 	bcc.w	8003e3a <baroMain+0x19a>
	}
//	lcdVLine(baroRing.tail, minHeight, maxHeight, 1);
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	37b0      	adds	r7, #176	; 0xb0
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fbc:	20000550 	.word	0x20000550
 8003fc0:	080138f4 	.word	0x080138f4
 8003fc4:	080140fc 	.word	0x080140fc
 8003fc8:	42c80000 	.word	0x42c80000
 8003fcc:	0801390c 	.word	0x0801390c
 8003fd0:	200039e0 	.word	0x200039e0
 8003fd4:	08013928 	.word	0x08013928
 8003fd8:	0801393c 	.word	0x0801393c
 8003fdc:	20000004 	.word	0x20000004
 8003fe0:	08013960 	.word	0x08013960
 8003fe4:	08013980 	.word	0x08013980
 8003fe8:	08013994 	.word	0x08013994
 8003fec:	20000000 	.word	0x20000000
 8003ff0:	080139b4 	.word	0x080139b4
 8003ff4:	20003598 	.word	0x20003598
 8003ff8:	2000358c 	.word	0x2000358c

08003ffc <changeBaroMode>:

void changeBaroMode(void){
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <changeBaroMode+0x34>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d107      	bne.n	8004018 <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <changeBaroMode+0x38>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <changeBaroMode+0x3c>)
 800400e:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 8004010:	4b07      	ldr	r3, [pc, #28]	; (8004030 <changeBaroMode+0x34>)
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = BARO_MODE_FIXED_ALTITUDE;
	}
}
 8004016:	e006      	b.n	8004026 <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <changeBaroMode+0x38>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a07      	ldr	r2, [pc, #28]	; (800403c <changeBaroMode+0x40>)
 800401e:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <changeBaroMode+0x34>)
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
}
 8004026:	bf00      	nop
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	200039e0 	.word	0x200039e0
 8004034:	20000550 	.word	0x20000550
 8004038:	20000000 	.word	0x20000000
 800403c:	20000004 	.word	0x20000004

08004040 <addBaro>:
void addBaro(void){
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8004044:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <addBaro+0x40>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <addBaro+0x22>
			fixedAltitude += 1;
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <addBaro+0x44>)
 800404e:	edd3 7a00 	vldr	s15, [r3]
 8004052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004056:	ee77 7a87 	vadd.f32	s15, s15, s14
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <addBaro+0x44>)
 800405c:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 8004060:	e009      	b.n	8004076 <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <addBaro+0x48>)
 8004064:	edd3 7a00 	vldr	s15, [r3]
 8004068:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800406c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <addBaro+0x48>)
 8004072:	edc3 7a00 	vstr	s15, [r3]
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	200039e0 	.word	0x200039e0
 8004084:	20000004 	.word	0x20000004
 8004088:	20000000 	.word	0x20000000

0800408c <remBaro>:
void remBaro(void){
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8004090:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <remBaro+0x40>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <remBaro+0x22>
			fixedAltitude -= 1;
 8004098:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <remBaro+0x44>)
 800409a:	edd3 7a00 	vldr	s15, [r3]
 800409e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <remBaro+0x44>)
 80040a8:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 80040ac:	e009      	b.n	80040c2 <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <remBaro+0x48>)
 80040b0:	edd3 7a00 	vldr	s15, [r3]
 80040b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80040b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <remBaro+0x48>)
 80040be:	edc3 7a00 	vstr	s15, [r3]
}
 80040c2:	bf00      	nop
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	200039e0 	.word	0x200039e0
 80040d0:	20000004 	.word	0x20000004
 80040d4:	20000000 	.word	0x20000000

080040d8 <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 80040e0:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <setupCntxMenu+0x1c>)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6013      	str	r3, [r2, #0]
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	200039e4 	.word	0x200039e4

080040f8 <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
	hideCntxMenu();
 80040fc:	f000 f87e 	bl	80041fc <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <cntxSelect+0x1c>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	4b04      	ldr	r3, [pc, #16]	; (8004118 <cntxSelect+0x20>)
 8004108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	4798      	blx	r3
}
 8004110:	bf00      	nop
 8004112:	bd80      	pop	{r7, pc}
 8004114:	200039e2 	.word	0x200039e2
 8004118:	200001dc 	.word	0x200001dc

0800411c <nextItem>:

void nextItem(void){
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <nextItem+0x34>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <nextItem+0x38>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	3b01      	subs	r3, #1
 800412c:	429a      	cmp	r2, r3
 800412e:	da06      	bge.n	800413e <nextItem+0x22>
		cntxPosition++;
 8004130:	4b07      	ldr	r3, [pc, #28]	; (8004150 <nextItem+0x34>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	3301      	adds	r3, #1
 8004136:	b2da      	uxtb	r2, r3
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <nextItem+0x34>)
 800413a:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 800413c:	e002      	b.n	8004144 <nextItem+0x28>
		cntxPosition = 0;
 800413e:	4b04      	ldr	r3, [pc, #16]	; (8004150 <nextItem+0x34>)
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]
}
 8004144:	bf00      	nop
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	200039e2 	.word	0x200039e2
 8004154:	20000184 	.word	0x20000184

08004158 <prevItem>:
void prevItem(void){
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <prevItem+0x30>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d006      	beq.n	8004172 <prevItem+0x1a>
		cntxPosition--;
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <prevItem+0x30>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	3b01      	subs	r3, #1
 800416a:	b2da      	uxtb	r2, r3
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <prevItem+0x30>)
 800416e:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 8004170:	e005      	b.n	800417e <prevItem+0x26>
		cntxPosition = actionsNum-1;
 8004172:	4b06      	ldr	r3, [pc, #24]	; (800418c <prevItem+0x34>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	3b01      	subs	r3, #1
 8004178:	b2da      	uxtb	r2, r3
 800417a:	4b03      	ldr	r3, [pc, #12]	; (8004188 <prevItem+0x30>)
 800417c:	701a      	strb	r2, [r3, #0]
}
 800417e:	bf00      	nop
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	200039e2 	.word	0x200039e2
 800418c:	20000184 	.word	0x20000184

08004190 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 8004194:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <setDefaultClbcks+0x34>)
 8004196:	4a0c      	ldr	r2, [pc, #48]	; (80041c8 <setDefaultClbcks+0x38>)
 8004198:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 800419a:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <setDefaultClbcks+0x3c>)
 800419c:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <setDefaultClbcks+0x40>)
 800419e:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 80041a0:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <setDefaultClbcks+0x3c>)
 80041a2:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <setDefaultClbcks+0x40>)
 80041a4:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <setDefaultClbcks+0x44>)
 80041a8:	4a0b      	ldr	r2, [pc, #44]	; (80041d8 <setDefaultClbcks+0x48>)
 80041aa:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <setDefaultClbcks+0x4c>)
 80041ae:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <setDefaultClbcks+0x50>)
 80041b0:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <setDefaultClbcks+0x4c>)
 80041b4:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <setDefaultClbcks+0x50>)
 80041b6:	61da      	str	r2, [r3, #28]
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000614 	.word	0x20000614
 80041c8:	080041fd 	.word	0x080041fd
 80041cc:	200005a8 	.word	0x200005a8
 80041d0:	08004159 	.word	0x08004159
 80041d4:	20000584 	.word	0x20000584
 80041d8:	080040f9 	.word	0x080040f9
 80041dc:	20000560 	.word	0x20000560
 80041e0:	0800411d 	.word	0x0800411d

080041e4 <showCntxMenu>:

void showCntxMenu(void){
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 80041e8:	f7ff ffd2 	bl	8004190 <setDefaultClbcks>
	isCntxOpen = 1;
 80041ec:	4b02      	ldr	r3, [pc, #8]	; (80041f8 <showCntxMenu+0x14>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	701a      	strb	r2, [r3, #0]
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200039e1 	.word	0x200039e1

080041fc <hideCntxMenu>:
void hideCntxMenu(void){
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 8004200:	f7fd faf0 	bl	80017e4 <resetButtonHandlers>
	(*prevClbcks)();
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <hideCntxMenu+0x18>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4798      	blx	r3
	isCntxOpen = 0;
 800420a:	4b03      	ldr	r3, [pc, #12]	; (8004218 <hideCntxMenu+0x1c>)
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
}
 8004210:	bf00      	nop
 8004212:	bd80      	pop	{r7, pc}
 8004214:	200039e4 	.word	0x200039e4
 8004218:	200039e1 	.word	0x200039e1

0800421c <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 8004222:	4b35      	ldr	r3, [pc, #212]	; (80042f8 <enableCntxMenu+0xdc>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d062      	beq.n	80042f0 <enableCntxMenu+0xd4>
//		clear rect
		lcdRect(0, 200, 5, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 0);
 800422a:	230e      	movs	r3, #14
 800422c:	461a      	mov	r2, r3
 800422e:	4b33      	ldr	r3, [pc, #204]	; (80042fc <enableCntxMenu+0xe0>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	330a      	adds	r3, #10
 8004238:	2200      	movs	r2, #0
 800423a:	9200      	str	r2, [sp, #0]
 800423c:	2205      	movs	r2, #5
 800423e:	21c8      	movs	r1, #200	; 0xc8
 8004240:	2000      	movs	r0, #0
 8004242:	f7fe febb 	bl	8002fbc <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 8004246:	2301      	movs	r3, #1
 8004248:	2206      	movs	r2, #6
 800424a:	21c8      	movs	r1, #200	; 0xc8
 800424c:	2000      	movs	r0, #0
 800424e:	f7fe fd5f 	bl	8002d10 <lcdHLine>
		lcdHLine(0, 200, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 1);
 8004252:	230e      	movs	r3, #14
 8004254:	461a      	mov	r2, r3
 8004256:	4b29      	ldr	r3, [pc, #164]	; (80042fc <enableCntxMenu+0xe0>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	f103 020a 	add.w	r2, r3, #10
 8004262:	2301      	movs	r3, #1
 8004264:	21c8      	movs	r1, #200	; 0xc8
 8004266:	2000      	movs	r0, #0
 8004268:	f7fe fd52 	bl	8002d10 <lcdHLine>
//		create list
		char item[30] = {0};
 800426c:	2300      	movs	r3, #0
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	1d3b      	adds	r3, r7, #4
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	605a      	str	r2, [r3, #4]
 8004278:	609a      	str	r2, [r3, #8]
 800427a:	60da      	str	r2, [r3, #12]
 800427c:	611a      	str	r2, [r3, #16]
 800427e:	615a      	str	r2, [r3, #20]
 8004280:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 8004282:	2300      	movs	r3, #0
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e018      	b.n	80042ba <enableCntxMenu+0x9e>
			sprintf(&item, ContextActions[i]->name);
 8004288:	7ffb      	ldrb	r3, [r7, #31]
 800428a:	4a1d      	ldr	r2, [pc, #116]	; (8004300 <enableCntxMenu+0xe4>)
 800428c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004290:	461a      	mov	r2, r3
 8004292:	463b      	mov	r3, r7
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f009 f8fe 	bl	800d498 <siprintf>
			lcdPutStr(5, 10+(*font_12_zekton.font_Height)*i, item, font_12_zekton);
 800429c:	220e      	movs	r2, #14
 800429e:	7ffb      	ldrb	r3, [r7, #31]
 80042a0:	fb13 f302 	smulbb	r3, r3, r2
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	330a      	adds	r3, #10
 80042a8:	b2d9      	uxtb	r1, r3
 80042aa:	463a      	mov	r2, r7
 80042ac:	4b15      	ldr	r3, [pc, #84]	; (8004304 <enableCntxMenu+0xe8>)
 80042ae:	2005      	movs	r0, #5
 80042b0:	f7fe f8c4 	bl	800243c <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 80042b4:	7ffb      	ldrb	r3, [r7, #31]
 80042b6:	3301      	adds	r3, #1
 80042b8:	77fb      	strb	r3, [r7, #31]
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <enableCntxMenu+0xe0>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	7ffa      	ldrb	r2, [r7, #31]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d3e1      	bcc.n	8004288 <enableCntxMenu+0x6c>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*font_12_zekton.font_Height)*cntxPosition, 8+(*font_12_zekton.font_Height)*(cntxPosition+1), 2);
 80042c4:	230e      	movs	r3, #14
 80042c6:	461a      	mov	r2, r3
 80042c8:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <enableCntxMenu+0xec>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	fb02 f303 	mul.w	r3, r2, r3
 80042d0:	f103 0208 	add.w	r2, r3, #8
 80042d4:	230e      	movs	r3, #14
 80042d6:	4619      	mov	r1, r3
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <enableCntxMenu+0xec>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	3308      	adds	r3, #8
 80042e4:	2102      	movs	r1, #2
 80042e6:	9100      	str	r1, [sp, #0]
 80042e8:	21c8      	movs	r1, #200	; 0xc8
 80042ea:	2000      	movs	r0, #0
 80042ec:	f7fe fe66 	bl	8002fbc <lcdRect>

	}
}
 80042f0:	bf00      	nop
 80042f2:	3720      	adds	r7, #32
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	200039e1 	.word	0x200039e1
 80042fc:	20000184 	.word	0x20000184
 8004300:	200001dc 	.word	0x200001dc
 8004304:	08014b84 	.word	0x08014b84
 8004308:	200039e2 	.word	0x200039e2

0800430c <readGps>:
#include <fonts/font_calibri13.h>

extern gpsDevice_t gpsDev;


void readGps(void){
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
	gpsDev.getData(&gpsDev);
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <readGps+0x14>)
 8004312:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8004316:	4802      	ldr	r0, [pc, #8]	; (8004320 <readGps+0x14>)
 8004318:	4798      	blx	r3
}
 800431a:	bf00      	nop
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	200035a4 	.word	0x200035a4

08004324 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <setDefaultClbcks+0x20>)
 800432a:	4a07      	ldr	r2, [pc, #28]	; (8004348 <setDefaultClbcks+0x24>)
 800432c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <setDefaultClbcks+0x28>)
 8004330:	4a07      	ldr	r2, [pc, #28]	; (8004350 <setDefaultClbcks+0x2c>)
 8004332:	611a      	str	r2, [r3, #16]
	btn_BB.onSinglePressHandler = &readGps;
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <setDefaultClbcks+0x30>)
 8004336:	4a08      	ldr	r2, [pc, #32]	; (8004358 <setDefaultClbcks+0x34>)
 8004338:	611a      	str	r2, [r3, #16]
}
 800433a:	bf00      	nop
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	20000560 	.word	0x20000560
 8004348:	08001fa1 	.word	0x08001fa1
 800434c:	200005a8 	.word	0x200005a8
 8004350:	08001fb1 	.word	0x08001fb1
 8004354:	20000584 	.word	0x20000584
 8004358:	0800430d 	.word	0x0800430d

0800435c <gpsSetup>:

void gpsSetup(void){
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8004360:	f7ff ffe0 	bl	8004324 <setDefaultClbcks>

}
 8004364:	bf00      	nop
 8004366:	bd80      	pop	{r7, pc}

08004368 <gpsMain>:

void gpsMain(void){
 8004368:	b580      	push	{r7, lr}
 800436a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800436e:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8004370:	2300      	movs	r3, #0
 8004372:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8004376:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	609a      	str	r2, [r3, #8]
 8004382:	60da      	str	r2, [r3, #12]
 8004384:	611a      	str	r2, [r3, #16]
 8004386:	615a      	str	r2, [r3, #20]
 8004388:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr, "GPS will be shown");
 800438a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438e:	495a      	ldr	r1, [pc, #360]	; (80044f8 <gpsMain+0x190>)
 8004390:	4618      	mov	r0, r3
 8004392:	f009 f881 	bl	800d498 <siprintf>
	lcdPutStr(0, 0, tempStr, font_13_calibri);
 8004396:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800439a:	4b58      	ldr	r3, [pc, #352]	; (80044fc <gpsMain+0x194>)
 800439c:	2100      	movs	r1, #0
 800439e:	2000      	movs	r0, #0
 80043a0:	f7fe f84c 	bl	800243c <lcdPutStr>

	gpsSentence gpsData;
	readSentence(&gpsDev.buffer, &gpsData);
 80043a4:	1d3b      	adds	r3, r7, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4855      	ldr	r0, [pc, #340]	; (8004500 <gpsMain+0x198>)
 80043aa:	f7fd fcc1 	bl	8001d30 <readSentence>
	sprintf(&tempStr, "%s", gpsData.words[0]);
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	1d9a      	adds	r2, r3, #6
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	4953      	ldr	r1, [pc, #332]	; (8004504 <gpsMain+0x19c>)
 80043b8:	4618      	mov	r0, r3
 80043ba:	f009 f86d 	bl	800d498 <siprintf>
	lcdPutStr(0,30, tempStr, font_13_calibri);
 80043be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043c2:	4b4e      	ldr	r3, [pc, #312]	; (80044fc <gpsMain+0x194>)
 80043c4:	211e      	movs	r1, #30
 80043c6:	2000      	movs	r0, #0
 80043c8:	f7fe f838 	bl	800243c <lcdPutStr>
	sprintf(&tempStr, "%s", gpsData.words[1]);
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	f103 021a 	add.w	r2, r3, #26
 80043d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d6:	494b      	ldr	r1, [pc, #300]	; (8004504 <gpsMain+0x19c>)
 80043d8:	4618      	mov	r0, r3
 80043da:	f009 f85d 	bl	800d498 <siprintf>
	lcdPutStr(0,50, tempStr, font_13_calibri);
 80043de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043e2:	4b46      	ldr	r3, [pc, #280]	; (80044fc <gpsMain+0x194>)
 80043e4:	2132      	movs	r1, #50	; 0x32
 80043e6:	2000      	movs	r0, #0
 80043e8:	f7fe f828 	bl	800243c <lcdPutStr>
	sprintf(&tempStr, "%s", gpsData.words[2]);
 80043ec:	1d3b      	adds	r3, r7, #4
 80043ee:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 80043f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f6:	4943      	ldr	r1, [pc, #268]	; (8004504 <gpsMain+0x19c>)
 80043f8:	4618      	mov	r0, r3
 80043fa:	f009 f84d 	bl	800d498 <siprintf>
	lcdPutStr(0,70, tempStr, font_13_calibri);
 80043fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004402:	4b3e      	ldr	r3, [pc, #248]	; (80044fc <gpsMain+0x194>)
 8004404:	2146      	movs	r1, #70	; 0x46
 8004406:	2000      	movs	r0, #0
 8004408:	f7fe f818 	bl	800243c <lcdPutStr>
	sprintf(&tempStr, "%s", gpsData.words[3]);
 800440c:	1d3b      	adds	r3, r7, #4
 800440e:	f103 0242 	add.w	r2, r3, #66	; 0x42
 8004412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004416:	493b      	ldr	r1, [pc, #236]	; (8004504 <gpsMain+0x19c>)
 8004418:	4618      	mov	r0, r3
 800441a:	f009 f83d 	bl	800d498 <siprintf>
	lcdPutStr(0,90, tempStr, font_13_calibri);
 800441e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004422:	4b36      	ldr	r3, [pc, #216]	; (80044fc <gpsMain+0x194>)
 8004424:	215a      	movs	r1, #90	; 0x5a
 8004426:	2000      	movs	r0, #0
 8004428:	f7fe f808 	bl	800243c <lcdPutStr>
	sprintf(&tempStr, "%s", gpsData.words[4]);
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	f103 0256 	add.w	r2, r3, #86	; 0x56
 8004432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004436:	4933      	ldr	r1, [pc, #204]	; (8004504 <gpsMain+0x19c>)
 8004438:	4618      	mov	r0, r3
 800443a:	f009 f82d 	bl	800d498 <siprintf>
	lcdPutStr(0,110, tempStr, font_13_calibri);
 800443e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004442:	4b2e      	ldr	r3, [pc, #184]	; (80044fc <gpsMain+0x194>)
 8004444:	216e      	movs	r1, #110	; 0x6e
 8004446:	2000      	movs	r0, #0
 8004448:	f7fd fff8 	bl	800243c <lcdPutStr>
	sprintf(&tempStr, "%s", gpsData.words[5]);
 800444c:	1d3b      	adds	r3, r7, #4
 800444e:	f103 026a 	add.w	r2, r3, #106	; 0x6a
 8004452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004456:	492b      	ldr	r1, [pc, #172]	; (8004504 <gpsMain+0x19c>)
 8004458:	4618      	mov	r0, r3
 800445a:	f009 f81d 	bl	800d498 <siprintf>
	lcdPutStr(0,130, tempStr, font_13_calibri);
 800445e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004462:	4b26      	ldr	r3, [pc, #152]	; (80044fc <gpsMain+0x194>)
 8004464:	2182      	movs	r1, #130	; 0x82
 8004466:	2000      	movs	r0, #0
 8004468:	f7fd ffe8 	bl	800243c <lcdPutStr>
	sprintf(&tempStr, "%s", gpsData.words[6]);
 800446c:	1d3b      	adds	r3, r7, #4
 800446e:	f103 027e 	add.w	r2, r3, #126	; 0x7e
 8004472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004476:	4923      	ldr	r1, [pc, #140]	; (8004504 <gpsMain+0x19c>)
 8004478:	4618      	mov	r0, r3
 800447a:	f009 f80d 	bl	800d498 <siprintf>
	lcdPutStr(0,150, tempStr, font_13_calibri);
 800447e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004482:	4b1e      	ldr	r3, [pc, #120]	; (80044fc <gpsMain+0x194>)
 8004484:	2196      	movs	r1, #150	; 0x96
 8004486:	2000      	movs	r0, #0
 8004488:	f7fd ffd8 	bl	800243c <lcdPutStr>
	sprintf(&tempStr, "%s", gpsData.words[7]);
 800448c:	1d3b      	adds	r3, r7, #4
 800448e:	f103 0292 	add.w	r2, r3, #146	; 0x92
 8004492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004496:	491b      	ldr	r1, [pc, #108]	; (8004504 <gpsMain+0x19c>)
 8004498:	4618      	mov	r0, r3
 800449a:	f008 fffd 	bl	800d498 <siprintf>
	lcdPutStr(0,170, tempStr, font_13_calibri);
 800449e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044a2:	4b16      	ldr	r3, [pc, #88]	; (80044fc <gpsMain+0x194>)
 80044a4:	21aa      	movs	r1, #170	; 0xaa
 80044a6:	2000      	movs	r0, #0
 80044a8:	f7fd ffc8 	bl	800243c <lcdPutStr>
	sprintf(&tempStr, "%s", gpsData.words[8]);
 80044ac:	1d3b      	adds	r3, r7, #4
 80044ae:	f103 02a6 	add.w	r2, r3, #166	; 0xa6
 80044b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b6:	4913      	ldr	r1, [pc, #76]	; (8004504 <gpsMain+0x19c>)
 80044b8:	4618      	mov	r0, r3
 80044ba:	f008 ffed 	bl	800d498 <siprintf>
	lcdPutStr(0,190, tempStr, font_13_calibri);
 80044be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044c2:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <gpsMain+0x194>)
 80044c4:	21be      	movs	r1, #190	; 0xbe
 80044c6:	2000      	movs	r0, #0
 80044c8:	f7fd ffb8 	bl	800243c <lcdPutStr>
	sprintf(&tempStr, "%s", gpsData.words[9]);
 80044cc:	1d3b      	adds	r3, r7, #4
 80044ce:	f103 02ba 	add.w	r2, r3, #186	; 0xba
 80044d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d6:	490b      	ldr	r1, [pc, #44]	; (8004504 <gpsMain+0x19c>)
 80044d8:	4618      	mov	r0, r3
 80044da:	f008 ffdd 	bl	800d498 <siprintf>
	lcdPutStr(0,210, tempStr, font_13_calibri);
 80044de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044e2:	4b06      	ldr	r3, [pc, #24]	; (80044fc <gpsMain+0x194>)
 80044e4:	21d2      	movs	r1, #210	; 0xd2
 80044e6:	2000      	movs	r0, #0
 80044e8:	f7fd ffa8 	bl	800243c <lcdPutStr>
//	sprintf(&tempStr, "%s", gpsDev.buffer);



}
 80044ec:	bf00      	nop
 80044ee:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	08013a8c 	.word	0x08013a8c
 80044fc:	0801560c 	.word	0x0801560c
 8004500:	200035a8 	.word	0x200035a8
 8004504:	08013aa0 	.word	0x08013aa0

08004508 <setDefaultClbcks>:
	testTime.tm_mday--;
	mktime(&testTime);

}

static void setDefaultClbcks(void){
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <setDefaultClbcks+0x1c>)
 800450e:	4a06      	ldr	r2, [pc, #24]	; (8004528 <setDefaultClbcks+0x20>)
 8004510:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <setDefaultClbcks+0x24>)
 8004514:	4a06      	ldr	r2, [pc, #24]	; (8004530 <setDefaultClbcks+0x28>)
 8004516:	611a      	str	r2, [r3, #16]
//	btn_B1.onContinuousShortPressHandler = &addDay;
//	btn_B3.onContinuousShortPressHandler = &remDay;
}
 8004518:	bf00      	nop
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000560 	.word	0x20000560
 8004528:	08001fa1 	.word	0x08001fa1
 800452c:	200005a8 	.word	0x200005a8
 8004530:	08001fb1 	.word	0x08001fb1

08004534 <localSetup>:
void localSetup(void){
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8004538:	f7ff ffe6 	bl	8004508 <setDefaultClbcks>
	testTime.tm_hour = RtcTime.Hours;
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <localSetup+0x50>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	4b11      	ldr	r3, [pc, #68]	; (8004588 <localSetup+0x54>)
 8004544:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <localSetup+0x50>)
 8004548:	785b      	ldrb	r3, [r3, #1]
 800454a:	461a      	mov	r2, r3
 800454c:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <localSetup+0x54>)
 800454e:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <localSetup+0x50>)
 8004552:	789b      	ldrb	r3, [r3, #2]
 8004554:	461a      	mov	r2, r3
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <localSetup+0x54>)
 8004558:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 800455a:	4b0c      	ldr	r3, [pc, #48]	; (800458c <localSetup+0x58>)
 800455c:	789b      	ldrb	r3, [r3, #2]
 800455e:	461a      	mov	r2, r3
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <localSetup+0x54>)
 8004562:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8004564:	4b09      	ldr	r3, [pc, #36]	; (800458c <localSetup+0x58>)
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	3b01      	subs	r3, #1
 800456a:	4a07      	ldr	r2, [pc, #28]	; (8004588 <localSetup+0x54>)
 800456c:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <localSetup+0x58>)
 8004570:	78db      	ldrb	r3, [r3, #3]
 8004572:	3364      	adds	r3, #100	; 0x64
 8004574:	4a04      	ldr	r2, [pc, #16]	; (8004588 <localSetup+0x54>)
 8004576:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 8004578:	4803      	ldr	r0, [pc, #12]	; (8004588 <localSetup+0x54>)
 800457a:	f007 ff3f 	bl	800c3fc <mktime>
}
 800457e:	bf00      	nop
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20003574 	.word	0x20003574
 8004588:	200039e8 	.word	0x200039e8
 800458c:	20003588 	.word	0x20003588

08004590 <localMain>:


void localMain(void){
 8004590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004594:	b0c2      	sub	sp, #264	; 0x108
 8004596:	af00      	add	r7, sp, #0
	testTime.tm_hour = RtcTime.Hours;
 8004598:	4bdd      	ldr	r3, [pc, #884]	; (8004910 <localMain+0x380>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	4bdd      	ldr	r3, [pc, #884]	; (8004914 <localMain+0x384>)
 80045a0:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 80045a2:	4bdb      	ldr	r3, [pc, #876]	; (8004910 <localMain+0x380>)
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	461a      	mov	r2, r3
 80045a8:	4bda      	ldr	r3, [pc, #872]	; (8004914 <localMain+0x384>)
 80045aa:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 80045ac:	4bd8      	ldr	r3, [pc, #864]	; (8004910 <localMain+0x380>)
 80045ae:	789b      	ldrb	r3, [r3, #2]
 80045b0:	461a      	mov	r2, r3
 80045b2:	4bd8      	ldr	r3, [pc, #864]	; (8004914 <localMain+0x384>)
 80045b4:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 80045b6:	4bd8      	ldr	r3, [pc, #864]	; (8004918 <localMain+0x388>)
 80045b8:	789b      	ldrb	r3, [r3, #2]
 80045ba:	461a      	mov	r2, r3
 80045bc:	4bd5      	ldr	r3, [pc, #852]	; (8004914 <localMain+0x384>)
 80045be:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 80045c0:	4bd5      	ldr	r3, [pc, #852]	; (8004918 <localMain+0x388>)
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	4ad3      	ldr	r2, [pc, #844]	; (8004914 <localMain+0x384>)
 80045c8:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 80045ca:	4bd3      	ldr	r3, [pc, #844]	; (8004918 <localMain+0x388>)
 80045cc:	78db      	ldrb	r3, [r3, #3]
 80045ce:	3364      	adds	r3, #100	; 0x64
 80045d0:	4ad0      	ldr	r2, [pc, #832]	; (8004914 <localMain+0x384>)
 80045d2:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 80045d4:	48cf      	ldr	r0, [pc, #828]	; (8004914 <localMain+0x384>)
 80045d6:	f007 ff11 	bl	800c3fc <mktime>

	char textBuffer[50] = {0};
 80045da:	2300      	movs	r3, #0
 80045dc:	657b      	str	r3, [r7, #84]	; 0x54
 80045de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80045e2:	222e      	movs	r2, #46	; 0x2e
 80045e4:	2100      	movs	r1, #0
 80045e6:	4618      	mov	r0, r3
 80045e8:	f007 fe28 	bl	800c23c <memset>
	char textBuffer2[50] = {0};
 80045ec:	2300      	movs	r3, #0
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045f4:	222e      	movs	r2, #46	; 0x2e
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f007 fe1f 	bl	800c23c <memset>
	uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 80045fe:	4bc5      	ldr	r3, [pc, #788]	; (8004914 <localMain+0x384>)
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	1d9a      	adds	r2, r3, #6
 8004604:	4bc5      	ldr	r3, [pc, #788]	; (800491c <localMain+0x38c>)
 8004606:	fb83 1302 	smull	r1, r3, r3, r2
 800460a:	4413      	add	r3, r2
 800460c:	1099      	asrs	r1, r3, #2
 800460e:	17d3      	asrs	r3, r2, #31
 8004610:	1ac9      	subs	r1, r1, r3
 8004612:	460b      	mov	r3, r1
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	1a5b      	subs	r3, r3, r1
 8004618:	1ad1      	subs	r1, r2, r3
 800461a:	b2cb      	uxtb	r3, r1
 800461c:	3301      	adds	r3, #1
 800461e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 8004622:	4bbc      	ldr	r3, [pc, #752]	; (8004914 <localMain+0x384>)
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f103 0208 	add.w	r2, r3, #8
 800462a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	4aba      	ldr	r2, [pc, #744]	; (800491c <localMain+0x38c>)
 8004632:	fb82 1203 	smull	r1, r2, r2, r3
 8004636:	441a      	add	r2, r3
 8004638:	1092      	asrs	r2, r2, #2
 800463a:	17db      	asrs	r3, r3, #31
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
	sprintf(&textBuffer, "week %d day %d", weekOfTheYear, testTime.tm_yday+1);
 8004642:	f897 20fe 	ldrb.w	r2, [r7, #254]	; 0xfe
 8004646:	4bb3      	ldr	r3, [pc, #716]	; (8004914 <localMain+0x384>)
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	3301      	adds	r3, #1
 800464c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004650:	49b3      	ldr	r1, [pc, #716]	; (8004920 <localMain+0x390>)
 8004652:	f008 ff21 	bl	800d498 <siprintf>
	lcdPutStr(10, 10, textBuffer, font_12_zekton);
 8004656:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800465a:	4bb2      	ldr	r3, [pc, #712]	; (8004924 <localMain+0x394>)
 800465c:	210a      	movs	r1, #10
 800465e:	200a      	movs	r0, #10
 8004660:	f7fd feec 	bl	800243c <lcdPutStr>

	sprintf(&textBuffer, asctime(&testTime));
 8004664:	48ab      	ldr	r0, [pc, #684]	; (8004914 <localMain+0x384>)
 8004666:	f007 fd2f 	bl	800c0c8 <asctime>
 800466a:	4602      	mov	r2, r0
 800466c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f008 ff10 	bl	800d498 <siprintf>
	lcdPutStr(170, 10, textBuffer, smallestFont);
 8004678:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800467c:	4baa      	ldr	r3, [pc, #680]	; (8004928 <localMain+0x398>)
 800467e:	210a      	movs	r1, #10
 8004680:	20aa      	movs	r0, #170	; 0xaa
 8004682:	f7fd fedb 	bl	800243c <lcdPutStr>
	strftime(&textBuffer, 40, "%Z day:%j week:%U", &testTime);
 8004686:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800468a:	4ba2      	ldr	r3, [pc, #648]	; (8004914 <localMain+0x384>)
 800468c:	4aa7      	ldr	r2, [pc, #668]	; (800492c <localMain+0x39c>)
 800468e:	2128      	movs	r1, #40	; 0x28
 8004690:	f009 fcd8 	bl	800e044 <strftime>
	lcdPutStr(170, 22, textBuffer, smallestFont);
 8004694:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004698:	4ba3      	ldr	r3, [pc, #652]	; (8004928 <localMain+0x398>)
 800469a:	2116      	movs	r1, #22
 800469c:	20aa      	movs	r0, #170	; 0xaa
 800469e:	f7fd fecd 	bl	800243c <lcdPutStr>

	uint8_t hhour = testTime.tm_hour;
 80046a2:	4b9c      	ldr	r3, [pc, #624]	; (8004914 <localMain+0x384>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	uint8_t mmin = testTime.tm_min;
 80046aa:	4b9a      	ldr	r3, [pc, #616]	; (8004914 <localMain+0x384>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t ssec = testTime.tm_sec;
 80046b2:	4b98      	ldr	r3, [pc, #608]	; (8004914 <localMain+0x384>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	int timezone = 2;		// [h] east+ west-
 80046ba:	2302      	movs	r3, #2
 80046bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int dayOfTheYear = testTime.tm_yday+1;
 80046c0:	4b94      	ldr	r3, [pc, #592]	; (8004914 <localMain+0x384>)
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	3301      	adds	r3, #1
 80046c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	// fractional year = gamma [rad]
	float fyear = (2*M_PI/365)*(dayOfTheYear-1+(hhour-timezone-12)/24);
 80046ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80046ce:	1e5a      	subs	r2, r3, #1
 80046d0:	f897 10fd 	ldrb.w	r1, [r7, #253]	; 0xfd
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	1acb      	subs	r3, r1, r3
 80046da:	3b0c      	subs	r3, #12
 80046dc:	4994      	ldr	r1, [pc, #592]	; (8004930 <localMain+0x3a0>)
 80046de:	fb81 0103 	smull	r0, r1, r1, r3
 80046e2:	1089      	asrs	r1, r1, #2
 80046e4:	17db      	asrs	r3, r3, #31
 80046e6:	1acb      	subs	r3, r1, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fb ff34 	bl	8000558 <__aeabi_i2d>
 80046f0:	a371      	add	r3, pc, #452	; (adr r3, 80048b8 <localMain+0x328>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f7fb ff99 	bl	800062c <__aeabi_dmul>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	f7fc fa6b 	bl	8000bdc <__aeabi_d2f>
 8004706:	4603      	mov	r3, r0
 8004708:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// equation of time [min]
	float eqtime = 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 800470c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8004710:	f7fb ff34 	bl	800057c <__aeabi_f2d>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	ec43 2b10 	vmov	d0, r2, r3
 800471c:	f00c fbe4 	bl	8010ee8 <cos>
 8004720:	ec51 0b10 	vmov	r0, r1, d0
 8004724:	a366      	add	r3, pc, #408	; (adr r3, 80048c0 <localMain+0x330>)
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f7fb ff7f 	bl	800062c <__aeabi_dmul>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	a364      	add	r3, pc, #400	; (adr r3, 80048c8 <localMain+0x338>)
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f7fb fdc0 	bl	80002c0 <__adddf3>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4690      	mov	r8, r2
 8004746:	4699      	mov	r9, r3
 8004748:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800474c:	f7fb ff16 	bl	800057c <__aeabi_f2d>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	ec43 2b10 	vmov	d0, r2, r3
 8004758:	f00c fc1a 	bl	8010f90 <sin>
 800475c:	ec51 0b10 	vmov	r0, r1, d0
 8004760:	a35b      	add	r3, pc, #364	; (adr r3, 80048d0 <localMain+0x340>)
 8004762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004766:	f7fb ff61 	bl	800062c <__aeabi_dmul>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4640      	mov	r0, r8
 8004770:	4649      	mov	r1, r9
 8004772:	f7fb fda3 	bl	80002bc <__aeabi_dsub>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4690      	mov	r8, r2
 800477c:	4699      	mov	r9, r3
 800477e:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004782:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004786:	ee17 0a90 	vmov	r0, s15
 800478a:	f7fb fef7 	bl	800057c <__aeabi_f2d>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	ec43 2b10 	vmov	d0, r2, r3
 8004796:	f00c fba7 	bl	8010ee8 <cos>
 800479a:	ec51 0b10 	vmov	r0, r1, d0
 800479e:	a34e      	add	r3, pc, #312	; (adr r3, 80048d8 <localMain+0x348>)
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f7fb ff42 	bl	800062c <__aeabi_dmul>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4640      	mov	r0, r8
 80047ae:	4649      	mov	r1, r9
 80047b0:	f7fb fd84 	bl	80002bc <__aeabi_dsub>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4690      	mov	r8, r2
 80047ba:	4699      	mov	r9, r3
 80047bc:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80047c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80047c4:	ee17 0a90 	vmov	r0, s15
 80047c8:	f7fb fed8 	bl	800057c <__aeabi_f2d>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	ec43 2b10 	vmov	d0, r2, r3
 80047d4:	f00c fbdc 	bl	8010f90 <sin>
 80047d8:	ec51 0b10 	vmov	r0, r1, d0
 80047dc:	a340      	add	r3, pc, #256	; (adr r3, 80048e0 <localMain+0x350>)
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f7fb ff23 	bl	800062c <__aeabi_dmul>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4640      	mov	r0, r8
 80047ec:	4649      	mov	r1, r9
 80047ee:	f7fb fd65 	bl	80002bc <__aeabi_dsub>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4610      	mov	r0, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	a33b      	add	r3, pc, #236	; (adr r3, 80048e8 <localMain+0x358>)
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f7fb ff14 	bl	800062c <__aeabi_dmul>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4610      	mov	r0, r2
 800480a:	4619      	mov	r1, r3
 800480c:	f7fc f9e6 	bl	8000bdc <__aeabi_d2f>
 8004810:	4603      	mov	r3, r0
 8004812:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	// solar declination angle [rad]
	float decl = 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 8004816:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800481a:	f7fb feaf 	bl	800057c <__aeabi_f2d>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	ec43 2b10 	vmov	d0, r2, r3
 8004826:	f00c fb5f 	bl	8010ee8 <cos>
 800482a:	ec51 0b10 	vmov	r0, r1, d0
 800482e:	a330      	add	r3, pc, #192	; (adr r3, 80048f0 <localMain+0x360>)
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	f7fb fefa 	bl	800062c <__aeabi_dmul>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	a12e      	add	r1, pc, #184	; (adr r1, 80048f8 <localMain+0x368>)
 800483e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004842:	f7fb fd3b 	bl	80002bc <__aeabi_dsub>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4690      	mov	r8, r2
 800484c:	4699      	mov	r9, r3
 800484e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8004852:	f7fb fe93 	bl	800057c <__aeabi_f2d>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	ec43 2b10 	vmov	d0, r2, r3
 800485e:	f00c fb97 	bl	8010f90 <sin>
 8004862:	ec51 0b10 	vmov	r0, r1, d0
 8004866:	a326      	add	r3, pc, #152	; (adr r3, 8004900 <localMain+0x370>)
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	f7fb fede 	bl	800062c <__aeabi_dmul>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4640      	mov	r0, r8
 8004876:	4649      	mov	r1, r9
 8004878:	f7fb fd22 	bl	80002c0 <__adddf3>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4690      	mov	r8, r2
 8004882:	4699      	mov	r9, r3
 8004884:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004888:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800488c:	ee17 0a90 	vmov	r0, s15
 8004890:	f7fb fe74 	bl	800057c <__aeabi_f2d>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	ec43 2b10 	vmov	d0, r2, r3
 800489c:	f00c fb24 	bl	8010ee8 <cos>
 80048a0:	ec51 0b10 	vmov	r0, r1, d0
 80048a4:	a318      	add	r3, pc, #96	; (adr r3, 8004908 <localMain+0x378>)
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f7fb febf 	bl	800062c <__aeabi_dmul>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	e03f      	b.n	8004934 <localMain+0x3a4>
 80048b4:	f3af 8000 	nop.w
 80048b8:	d4b3ac9a 	.word	0xd4b3ac9a
 80048bc:	3f91a099 	.word	0x3f91a099
 80048c0:	ba2be059 	.word	0xba2be059
 80048c4:	3f5e9af5 	.word	0x3f5e9af5
 80048c8:	30553261 	.word	0x30553261
 80048cc:	3f13a92a 	.word	0x3f13a92a
 80048d0:	83e8576d 	.word	0x83e8576d
 80048d4:	3fa06c65 	.word	0x3fa06c65
 80048d8:	183f91e6 	.word	0x183f91e6
 80048dc:	3f8dee78 	.word	0x3f8dee78
 80048e0:	fe260b2d 	.word	0xfe260b2d
 80048e4:	3fa4ea28 	.word	0x3fa4ea28
 80048e8:	8f5c28f6 	.word	0x8f5c28f6
 80048ec:	406ca5c2 	.word	0x406ca5c2
 80048f0:	8051c9f7 	.word	0x8051c9f7
 80048f4:	3fd99828 	.word	0x3fd99828
 80048f8:	7c0f4517 	.word	0x7c0f4517
 80048fc:	3f7c560c 	.word	0x3f7c560c
 8004900:	dd50a88f 	.word	0xdd50a88f
 8004904:	3fb1fc5c 	.word	0x3fb1fc5c
 8004908:	cfc829d0 	.word	0xcfc829d0
 800490c:	3f7bae46 	.word	0x3f7bae46
 8004910:	20003574 	.word	0x20003574
 8004914:	200039e8 	.word	0x200039e8
 8004918:	20003588 	.word	0x20003588
 800491c:	92492493 	.word	0x92492493
 8004920:	08013b60 	.word	0x08013b60
 8004924:	08016668 	.word	0x08016668
 8004928:	080170f0 	.word	0x080170f0
 800492c:	08013b70 	.word	0x08013b70
 8004930:	2aaaaaab 	.word	0x2aaaaaab
 8004934:	4640      	mov	r0, r8
 8004936:	4649      	mov	r1, r9
 8004938:	f7fb fcc0 	bl	80002bc <__aeabi_dsub>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4690      	mov	r8, r2
 8004942:	4699      	mov	r9, r3
 8004944:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004948:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800494c:	ee17 0a90 	vmov	r0, s15
 8004950:	f7fb fe14 	bl	800057c <__aeabi_f2d>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	ec43 2b10 	vmov	d0, r2, r3
 800495c:	f00c fb18 	bl	8010f90 <sin>
 8004960:	ec51 0b10 	vmov	r0, r1, d0
 8004964:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	f7fb fe5e 	bl	800062c <__aeabi_dmul>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4640      	mov	r0, r8
 8004976:	4649      	mov	r1, r9
 8004978:	f7fb fca2 	bl	80002c0 <__adddf3>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4690      	mov	r8, r2
 8004982:	4699      	mov	r9, r3
 8004984:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004988:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800498c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004990:	ee17 0a90 	vmov	r0, s15
 8004994:	f7fb fdf2 	bl	800057c <__aeabi_f2d>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	ec43 2b10 	vmov	d0, r2, r3
 80049a0:	f00c faa2 	bl	8010ee8 <cos>
 80049a4:	ec51 0b10 	vmov	r0, r1, d0
 80049a8:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f7fb fe3c 	bl	800062c <__aeabi_dmul>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4640      	mov	r0, r8
 80049ba:	4649      	mov	r1, r9
 80049bc:	f7fb fc7e 	bl	80002bc <__aeabi_dsub>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4690      	mov	r8, r2
 80049c6:	4699      	mov	r9, r3
 80049c8:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80049cc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80049d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049d4:	ee17 0a90 	vmov	r0, s15
 80049d8:	f7fb fdd0 	bl	800057c <__aeabi_f2d>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	ec43 2b10 	vmov	d0, r2, r3
 80049e4:	f00c fad4 	bl	8010f90 <sin>
 80049e8:	ec51 0b10 	vmov	r0, r1, d0
 80049ec:	f20f 4300 	addw	r3, pc, #1024	; 0x400
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	f7fb fe1a 	bl	800062c <__aeabi_dmul>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4640      	mov	r0, r8
 80049fe:	4649      	mov	r1, r9
 8004a00:	f7fb fc5e 	bl	80002c0 <__adddf3>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f7fc f8e6 	bl	8000bdc <__aeabi_d2f>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4


	double longitude = 17; 	// [deg]
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	4be9      	ldr	r3, [pc, #932]	; (8004dc0 <localMain+0x830>)
 8004a1c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	double latitude = 51;	// [deg]
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	4be7      	ldr	r3, [pc, #924]	; (8004dc4 <localMain+0x834>)
 8004a26:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	float time_off = eqtime+4*longitude-60*timezone; // time offset [min]
 8004a2a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004a2e:	f7fb fda5 	bl	800057c <__aeabi_f2d>
 8004a32:	4680      	mov	r8, r0
 8004a34:	4689      	mov	r9, r1
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	4be3      	ldr	r3, [pc, #908]	; (8004dc8 <localMain+0x838>)
 8004a3c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004a40:	f7fb fdf4 	bl	800062c <__aeabi_dmul>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4640      	mov	r0, r8
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	f7fb fc38 	bl	80002c0 <__adddf3>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4690      	mov	r8, r2
 8004a56:	4699      	mov	r9, r3
 8004a58:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fb fd77 	bl	8000558 <__aeabi_i2d>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4640      	mov	r0, r8
 8004a70:	4649      	mov	r1, r9
 8004a72:	f7fb fc23 	bl	80002bc <__aeabi_dsub>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	f7fc f8ad 	bl	8000bdc <__aeabi_d2f>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float tst = hhour*60+mmin+(float)ssec/60+time_off; // true solar time [min]
 8004a88:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	461a      	mov	r2, r3
 8004a96:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004a9a:	4413      	add	r3, r2
 8004a9c:	ee07 3a90 	vmov	s15, r3
 8004aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004aa4:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab0:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 8004dcc <localMain+0x83c>
 8004ab4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004abc:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8004ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ac4:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 8004ac8:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8004acc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004ad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ad4:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8004dd0 <localMain+0x840>
 8004ad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004adc:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 8004ae0:	a3b5      	add	r3, pc, #724	; (adr r3, 8004db8 <localMain+0x828>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004aea:	f7fb fd9f 	bl	800062c <__aeabi_dmul>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4610      	mov	r0, r2
 8004af4:	4619      	mov	r1, r3
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	4bb6      	ldr	r3, [pc, #728]	; (8004dd4 <localMain+0x844>)
 8004afc:	f7fb fec0 	bl	8000880 <__aeabi_ddiv>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	ec43 2b17 	vmov	d7, r2, r3
 8004b08:	eeb0 0a47 	vmov.f32	s0, s14
 8004b0c:	eef0 0a67 	vmov.f32	s1, s15
 8004b10:	f00c fa3e 	bl	8010f90 <sin>
 8004b14:	ec59 8b10 	vmov	r8, r9, d0
 8004b18:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004b1c:	f7fb fd2e 	bl	800057c <__aeabi_f2d>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	ec43 2b10 	vmov	d0, r2, r3
 8004b28:	f00c fa32 	bl	8010f90 <sin>
 8004b2c:	ec53 2b10 	vmov	r2, r3, d0
 8004b30:	4640      	mov	r0, r8
 8004b32:	4649      	mov	r1, r9
 8004b34:	f7fb fd7a 	bl	800062c <__aeabi_dmul>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4690      	mov	r8, r2
 8004b3e:	4699      	mov	r9, r3
 8004b40:	a39d      	add	r3, pc, #628	; (adr r3, 8004db8 <localMain+0x828>)
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004b4a:	f7fb fd6f 	bl	800062c <__aeabi_dmul>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4610      	mov	r0, r2
 8004b54:	4619      	mov	r1, r3
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	4b9e      	ldr	r3, [pc, #632]	; (8004dd4 <localMain+0x844>)
 8004b5c:	f7fb fe90 	bl	8000880 <__aeabi_ddiv>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	ec43 2b17 	vmov	d7, r2, r3
 8004b68:	eeb0 0a47 	vmov.f32	s0, s14
 8004b6c:	eef0 0a67 	vmov.f32	s1, s15
 8004b70:	f00c f9ba 	bl	8010ee8 <cos>
 8004b74:	ec5b ab10 	vmov	sl, fp, d0
 8004b78:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004b7c:	f7fb fcfe 	bl	800057c <__aeabi_f2d>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	ec43 2b10 	vmov	d0, r2, r3
 8004b88:	f00c f9ae 	bl	8010ee8 <cos>
 8004b8c:	ec53 2b10 	vmov	r2, r3, d0
 8004b90:	4650      	mov	r0, sl
 8004b92:	4659      	mov	r1, fp
 8004b94:	f7fb fd4a 	bl	800062c <__aeabi_dmul>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4692      	mov	sl, r2
 8004b9e:	469b      	mov	fp, r3
 8004ba0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8004ba4:	f7fb fcea 	bl	800057c <__aeabi_f2d>
 8004ba8:	a383      	add	r3, pc, #524	; (adr r3, 8004db8 <localMain+0x828>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb fd3d 	bl	800062c <__aeabi_dmul>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	4b85      	ldr	r3, [pc, #532]	; (8004dd4 <localMain+0x844>)
 8004bc0:	f7fb fe5e 	bl	8000880 <__aeabi_ddiv>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	ec43 2b17 	vmov	d7, r2, r3
 8004bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8004bd0:	eef0 0a67 	vmov.f32	s1, s15
 8004bd4:	f00c f988 	bl	8010ee8 <cos>
 8004bd8:	ec53 2b10 	vmov	r2, r3, d0
 8004bdc:	4650      	mov	r0, sl
 8004bde:	4659      	mov	r1, fp
 8004be0:	f7fb fd24 	bl	800062c <__aeabi_dmul>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4640      	mov	r0, r8
 8004bea:	4649      	mov	r1, r9
 8004bec:	f7fb fb68 	bl	80002c0 <__adddf3>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f7fb fff0 	bl	8000bdc <__aeabi_d2f>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float phi = acos(cosphi);
 8004c02:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004c06:	f7fb fcb9 	bl	800057c <__aeabi_f2d>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	ec43 2b10 	vmov	d0, r2, r3
 8004c12:	f00c fa49 	bl	80110a8 <acos>
 8004c16:	ec53 2b10 	vmov	r2, r3, d0
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f7fb ffdd 	bl	8000bdc <__aeabi_d2f>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float sinphi = sqrt(1-cosphi*cosphi);
 8004c28:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004c2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004c30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c38:	ee17 0a90 	vmov	r0, s15
 8004c3c:	f7fb fc9e 	bl	800057c <__aeabi_f2d>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	ec43 2b10 	vmov	d0, r2, r3
 8004c48:	f00c fad2 	bl	80111f0 <sqrt>
 8004c4c:	ec53 2b10 	vmov	r2, r3, d0
 8004c50:	4610      	mov	r0, r2
 8004c52:	4619      	mov	r1, r3
 8004c54:	f7fb ffc2 	bl	8000bdc <__aeabi_d2f>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 8004c5e:	a356      	add	r3, pc, #344	; (adr r3, 8004db8 <localMain+0x828>)
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004c68:	f7fb fce0 	bl	800062c <__aeabi_dmul>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4610      	mov	r0, r2
 8004c72:	4619      	mov	r1, r3
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	4b56      	ldr	r3, [pc, #344]	; (8004dd4 <localMain+0x844>)
 8004c7a:	f7fb fe01 	bl	8000880 <__aeabi_ddiv>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	ec43 2b17 	vmov	d7, r2, r3
 8004c86:	eeb0 0a47 	vmov.f32	s0, s14
 8004c8a:	eef0 0a67 	vmov.f32	s1, s15
 8004c8e:	f00c f97f 	bl	8010f90 <sin>
 8004c92:	ec59 8b10 	vmov	r8, r9, d0
 8004c96:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004c9a:	f7fb fc6f 	bl	800057c <__aeabi_f2d>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	f7fb fcc1 	bl	800062c <__aeabi_dmul>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4690      	mov	r8, r2
 8004cb0:	4699      	mov	r9, r3
 8004cb2:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004cb6:	f7fb fc61 	bl	800057c <__aeabi_f2d>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	ec43 2b10 	vmov	d0, r2, r3
 8004cc2:	f00c f965 	bl	8010f90 <sin>
 8004cc6:	ec53 2b10 	vmov	r2, r3, d0
 8004cca:	4640      	mov	r0, r8
 8004ccc:	4649      	mov	r1, r9
 8004cce:	f7fb faf5 	bl	80002bc <__aeabi_dsub>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4614      	mov	r4, r2
 8004cd8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004cdc:	a336      	add	r3, pc, #216	; (adr r3, 8004db8 <localMain+0x828>)
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004ce6:	f7fb fca1 	bl	800062c <__aeabi_dmul>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	4b37      	ldr	r3, [pc, #220]	; (8004dd4 <localMain+0x844>)
 8004cf8:	f7fb fdc2 	bl	8000880 <__aeabi_ddiv>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	ec43 2b17 	vmov	d7, r2, r3
 8004d04:	eeb0 0a47 	vmov.f32	s0, s14
 8004d08:	eef0 0a67 	vmov.f32	s1, s15
 8004d0c:	f00c f8ec 	bl	8010ee8 <cos>
 8004d10:	ec59 8b10 	vmov	r8, r9, d0
 8004d14:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004d18:	f7fb fc30 	bl	800057c <__aeabi_f2d>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4640      	mov	r0, r8
 8004d22:	4649      	mov	r1, r9
 8004d24:	f7fb fc82 	bl	800062c <__aeabi_dmul>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	4629      	mov	r1, r5
 8004d30:	f7fb fda6 	bl	8000880 <__aeabi_ddiv>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	ec43 2b17 	vmov	d7, r2, r3
 8004d3c:	eeb0 0a47 	vmov.f32	s0, s14
 8004d40:	eef0 0a67 	vmov.f32	s1, s15
 8004d44:	f00c f9b0 	bl	80110a8 <acos>
 8004d48:	ec53 2b10 	vmov	r2, r3, d0
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f7fb ff44 	bl	8000bdc <__aeabi_d2f>
 8004d54:	4603      	mov	r3, r0
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef1 7a67 	vneg.f32	s15, s15
 8004d5e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

	// setting for sunrise/sunset zenith angle [rad]
	double twilightType[] = {0.833, 6, 12, 18}; // twilight, civil, nautical, astronomical
 8004d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d6a:	4a1b      	ldr	r2, [pc, #108]	; (8004dd8 <localMain+0x848>)
 8004d6c:	461c      	mov	r4, r3
 8004d6e:	4615      	mov	r5, r2
 8004d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double zenith = (90+twilightType[0])*M_PI/180;
 8004d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <localMain+0x84c>)
 8004d8e:	f7fb fa97 	bl	80002c0 <__adddf3>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	a307      	add	r3, pc, #28	; (adr r3, 8004db8 <localMain+0x828>)
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	f7fb fc44 	bl	800062c <__aeabi_dmul>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4610      	mov	r0, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <localMain+0x844>)
 8004db2:	f7fb fd65 	bl	8000880 <__aeabi_ddiv>
 8004db6:	e01f      	b.n	8004df8 <localMain+0x868>
 8004db8:	54442d18 	.word	0x54442d18
 8004dbc:	400921fb 	.word	0x400921fb
 8004dc0:	40310000 	.word	0x40310000
 8004dc4:	40498000 	.word	0x40498000
 8004dc8:	40100000 	.word	0x40100000
 8004dcc:	42700000 	.word	0x42700000
 8004dd0:	43340000 	.word	0x43340000
 8004dd4:	40668000 	.word	0x40668000
 8004dd8:	08013c48 	.word	0x08013c48
 8004ddc:	40568000 	.word	0x40568000
 8004de0:	ab324852 	.word	0xab324852
 8004de4:	3f4db877 	.word	0x3f4db877
 8004de8:	d9839475 	.word	0xd9839475
 8004dec:	3f661804 	.word	0x3f661804
 8004df0:	e646f156 	.word	0xe646f156
 8004df4:	3f583f91 	.word	0x3f583f91
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8004e00:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 8004e04:	f00c f870 	bl	8010ee8 <cos>
 8004e08:	ec55 4b10 	vmov	r4, r5, d0
 8004e0c:	a3f0      	add	r3, pc, #960	; (adr r3, 80051d0 <localMain+0xc40>)
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004e16:	f7fb fc09 	bl	800062c <__aeabi_dmul>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4610      	mov	r0, r2
 8004e20:	4619      	mov	r1, r3
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	4bec      	ldr	r3, [pc, #944]	; (80051d8 <localMain+0xc48>)
 8004e28:	f7fb fd2a 	bl	8000880 <__aeabi_ddiv>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	ec43 2b17 	vmov	d7, r2, r3
 8004e34:	eeb0 0a47 	vmov.f32	s0, s14
 8004e38:	eef0 0a67 	vmov.f32	s1, s15
 8004e3c:	f00c f854 	bl	8010ee8 <cos>
 8004e40:	ec59 8b10 	vmov	r8, r9, d0
 8004e44:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004e48:	f7fb fb98 	bl	800057c <__aeabi_f2d>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	ec43 2b10 	vmov	d0, r2, r3
 8004e54:	f00c f848 	bl	8010ee8 <cos>
 8004e58:	ec53 2b10 	vmov	r2, r3, d0
 8004e5c:	4640      	mov	r0, r8
 8004e5e:	4649      	mov	r1, r9
 8004e60:	f7fb fbe4 	bl	800062c <__aeabi_dmul>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	f7fb fd08 	bl	8000880 <__aeabi_ddiv>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4614      	mov	r4, r2
 8004e76:	461d      	mov	r5, r3
 8004e78:	a3d5      	add	r3, pc, #852	; (adr r3, 80051d0 <localMain+0xc40>)
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004e82:	f7fb fbd3 	bl	800062c <__aeabi_dmul>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	4bd1      	ldr	r3, [pc, #836]	; (80051d8 <localMain+0xc48>)
 8004e94:	f7fb fcf4 	bl	8000880 <__aeabi_ddiv>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	ec43 2b17 	vmov	d7, r2, r3
 8004ea0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ea4:	eef0 0a67 	vmov.f32	s1, s15
 8004ea8:	f00c f8ca 	bl	8011040 <tan>
 8004eac:	ec59 8b10 	vmov	r8, r9, d0
 8004eb0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004eb4:	f7fb fb62 	bl	800057c <__aeabi_f2d>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	ec43 2b10 	vmov	d0, r2, r3
 8004ec0:	f00c f8be 	bl	8011040 <tan>
 8004ec4:	ec53 2b10 	vmov	r2, r3, d0
 8004ec8:	4640      	mov	r0, r8
 8004eca:	4649      	mov	r1, r9
 8004ecc:	f7fb fbae 	bl	800062c <__aeabi_dmul>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	f7fb f9f0 	bl	80002bc <__aeabi_dsub>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	ec43 2b17 	vmov	d7, r2, r3
 8004ee4:	eeb0 0a47 	vmov.f32	s0, s14
 8004ee8:	eef0 0a67 	vmov.f32	s1, s15
 8004eec:	f00c f8dc 	bl	80110a8 <acos>
 8004ef0:	ec53 2b10 	vmov	r2, r3, d0
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f7fb fe70 	bl	8000bdc <__aeabi_d2f>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//sunrise/sunset/noon times [min]
	int sunrise = 720-4*(longitude+cha*180/M_PI)-eqtime+60*timezone;
 8004f02:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004f06:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80051dc <localMain+0xc4c>
 8004f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f0e:	ee17 0a90 	vmov	r0, s15
 8004f12:	f7fb fb33 	bl	800057c <__aeabi_f2d>
 8004f16:	a3ae      	add	r3, pc, #696	; (adr r3, 80051d0 <localMain+0xc40>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f7fb fcb0 	bl	8000880 <__aeabi_ddiv>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8004f2c:	f7fb f9c8 	bl	80002c0 <__adddf3>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4610      	mov	r0, r2
 8004f36:	4619      	mov	r1, r3
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	4ba8      	ldr	r3, [pc, #672]	; (80051e0 <localMain+0xc50>)
 8004f3e:	f7fb fb75 	bl	800062c <__aeabi_dmul>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	f04f 0000 	mov.w	r0, #0
 8004f4a:	49a6      	ldr	r1, [pc, #664]	; (80051e4 <localMain+0xc54>)
 8004f4c:	f7fb f9b6 	bl	80002bc <__aeabi_dsub>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4614      	mov	r4, r2
 8004f56:	461d      	mov	r5, r3
 8004f58:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004f5c:	f7fb fb0e 	bl	800057c <__aeabi_f2d>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4620      	mov	r0, r4
 8004f66:	4629      	mov	r1, r5
 8004f68:	f7fb f9a8 	bl	80002bc <__aeabi_dsub>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4614      	mov	r4, r2
 8004f72:	461d      	mov	r5, r3
 8004f74:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004f78:	4613      	mov	r3, r2
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fb fae9 	bl	8000558 <__aeabi_i2d>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	f7fb f997 	bl	80002c0 <__adddf3>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4610      	mov	r0, r2
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f7fb fdf7 	bl	8000b8c <__aeabi_d2iz>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int sunset = 720-4*(longitude-cha*180/M_PI)-eqtime+60*timezone;
 8004fa4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004fa8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80051dc <localMain+0xc4c>
 8004fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fb0:	ee17 0a90 	vmov	r0, s15
 8004fb4:	f7fb fae2 	bl	800057c <__aeabi_f2d>
 8004fb8:	a385      	add	r3, pc, #532	; (adr r3, 80051d0 <localMain+0xc40>)
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f7fb fc5f 	bl	8000880 <__aeabi_ddiv>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004fca:	f7fb f977 	bl	80002bc <__aeabi_dsub>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	4b81      	ldr	r3, [pc, #516]	; (80051e0 <localMain+0xc50>)
 8004fdc:	f7fb fb26 	bl	800062c <__aeabi_dmul>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	f04f 0000 	mov.w	r0, #0
 8004fe8:	497e      	ldr	r1, [pc, #504]	; (80051e4 <localMain+0xc54>)
 8004fea:	f7fb f967 	bl	80002bc <__aeabi_dsub>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4614      	mov	r4, r2
 8004ff4:	461d      	mov	r5, r3
 8004ff6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004ffa:	f7fb fabf 	bl	800057c <__aeabi_f2d>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4620      	mov	r0, r4
 8005004:	4629      	mov	r1, r5
 8005006:	f7fb f959 	bl	80002bc <__aeabi_dsub>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4614      	mov	r4, r2
 8005010:	461d      	mov	r5, r3
 8005012:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005016:	4613      	mov	r3, r2
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4618      	mov	r0, r3
 8005020:	f7fb fa9a 	bl	8000558 <__aeabi_i2d>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4620      	mov	r0, r4
 800502a:	4629      	mov	r1, r5
 800502c:	f7fb f948 	bl	80002c0 <__adddf3>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4610      	mov	r0, r2
 8005036:	4619      	mov	r1, r3
 8005038:	f7fb fda8 	bl	8000b8c <__aeabi_d2iz>
 800503c:	4603      	mov	r3, r0
 800503e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	int noon = 720-4*longitude-eqtime+60*timezone;
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	4b66      	ldr	r3, [pc, #408]	; (80051e0 <localMain+0xc50>)
 8005048:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800504c:	f7fb faee 	bl	800062c <__aeabi_dmul>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	f04f 0000 	mov.w	r0, #0
 8005058:	4962      	ldr	r1, [pc, #392]	; (80051e4 <localMain+0xc54>)
 800505a:	f7fb f92f 	bl	80002bc <__aeabi_dsub>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4614      	mov	r4, r2
 8005064:	461d      	mov	r5, r3
 8005066:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800506a:	f7fb fa87 	bl	800057c <__aeabi_f2d>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4620      	mov	r0, r4
 8005074:	4629      	mov	r1, r5
 8005076:	f7fb f921 	bl	80002bc <__aeabi_dsub>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4614      	mov	r4, r2
 8005080:	461d      	mov	r5, r3
 8005082:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005086:	4613      	mov	r3, r2
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4618      	mov	r0, r3
 8005090:	f7fb fa62 	bl	8000558 <__aeabi_i2d>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4620      	mov	r0, r4
 800509a:	4629      	mov	r1, r5
 800509c:	f7fb f910 	bl	80002c0 <__adddf3>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	f7fb fd70 	bl	8000b8c <__aeabi_d2iz>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
//	sprintf(&textBuffer, "sa:%f cha:%f", sa, cha);
//	lcdPutStr(0, 210, textBuffer, smallestFont);

	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	sprintf(&textBuffer, "Sunrise: %02d:%02d", sunrise/60, sunrise%60);
 80050b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050b6:	4a4c      	ldr	r2, [pc, #304]	; (80051e8 <localMain+0xc58>)
 80050b8:	fb82 1203 	smull	r1, r2, r2, r3
 80050bc:	441a      	add	r2, r3
 80050be:	1152      	asrs	r2, r2, #5
 80050c0:	17db      	asrs	r3, r3, #31
 80050c2:	1ad4      	subs	r4, r2, r3
 80050c4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80050c8:	4b47      	ldr	r3, [pc, #284]	; (80051e8 <localMain+0xc58>)
 80050ca:	fb83 1302 	smull	r1, r3, r3, r2
 80050ce:	4413      	add	r3, r2
 80050d0:	1159      	asrs	r1, r3, #5
 80050d2:	17d3      	asrs	r3, r2, #31
 80050d4:	1ac9      	subs	r1, r1, r3
 80050d6:	460b      	mov	r3, r1
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	1a5b      	subs	r3, r3, r1
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	1ad1      	subs	r1, r2, r3
 80050e0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80050e4:	460b      	mov	r3, r1
 80050e6:	4622      	mov	r2, r4
 80050e8:	4940      	ldr	r1, [pc, #256]	; (80051ec <localMain+0xc5c>)
 80050ea:	f008 f9d5 	bl	800d498 <siprintf>
	lcdPutStr(10, 28, textBuffer, font_12_zekton_bold);
 80050ee:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80050f2:	4b3f      	ldr	r3, [pc, #252]	; (80051f0 <localMain+0xc60>)
 80050f4:	211c      	movs	r1, #28
 80050f6:	200a      	movs	r0, #10
 80050f8:	f7fd f9a0 	bl	800243c <lcdPutStr>
	sprintf(&textBuffer, "Noon: %02d:%02d", noon/60, noon%60);
 80050fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005100:	4a39      	ldr	r2, [pc, #228]	; (80051e8 <localMain+0xc58>)
 8005102:	fb82 1203 	smull	r1, r2, r2, r3
 8005106:	441a      	add	r2, r3
 8005108:	1152      	asrs	r2, r2, #5
 800510a:	17db      	asrs	r3, r3, #31
 800510c:	1ad4      	subs	r4, r2, r3
 800510e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005112:	4b35      	ldr	r3, [pc, #212]	; (80051e8 <localMain+0xc58>)
 8005114:	fb83 1302 	smull	r1, r3, r3, r2
 8005118:	4413      	add	r3, r2
 800511a:	1159      	asrs	r1, r3, #5
 800511c:	17d3      	asrs	r3, r2, #31
 800511e:	1ac9      	subs	r1, r1, r3
 8005120:	460b      	mov	r3, r1
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	1a5b      	subs	r3, r3, r1
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	1ad1      	subs	r1, r2, r3
 800512a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800512e:	460b      	mov	r3, r1
 8005130:	4622      	mov	r2, r4
 8005132:	4930      	ldr	r1, [pc, #192]	; (80051f4 <localMain+0xc64>)
 8005134:	f008 f9b0 	bl	800d498 <siprintf>
	lcdPutStr(10, 44, textBuffer, font_12_zekton_bold);
 8005138:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800513c:	4b2c      	ldr	r3, [pc, #176]	; (80051f0 <localMain+0xc60>)
 800513e:	212c      	movs	r1, #44	; 0x2c
 8005140:	200a      	movs	r0, #10
 8005142:	f7fd f97b 	bl	800243c <lcdPutStr>
	sprintf(&textBuffer, "Sunset: %02d:%02d", sunset/60, sunset%60);
 8005146:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800514a:	4a27      	ldr	r2, [pc, #156]	; (80051e8 <localMain+0xc58>)
 800514c:	fb82 1203 	smull	r1, r2, r2, r3
 8005150:	441a      	add	r2, r3
 8005152:	1152      	asrs	r2, r2, #5
 8005154:	17db      	asrs	r3, r3, #31
 8005156:	1ad4      	subs	r4, r2, r3
 8005158:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800515c:	4b22      	ldr	r3, [pc, #136]	; (80051e8 <localMain+0xc58>)
 800515e:	fb83 1302 	smull	r1, r3, r3, r2
 8005162:	4413      	add	r3, r2
 8005164:	1159      	asrs	r1, r3, #5
 8005166:	17d3      	asrs	r3, r2, #31
 8005168:	1ac9      	subs	r1, r1, r3
 800516a:	460b      	mov	r3, r1
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	1a5b      	subs	r3, r3, r1
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	1ad1      	subs	r1, r2, r3
 8005174:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005178:	460b      	mov	r3, r1
 800517a:	4622      	mov	r2, r4
 800517c:	491e      	ldr	r1, [pc, #120]	; (80051f8 <localMain+0xc68>)
 800517e:	f008 f98b 	bl	800d498 <siprintf>
	lcdPutStr(10, 60, textBuffer, font_12_zekton_bold);
 8005182:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005186:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <localMain+0xc60>)
 8005188:	213c      	movs	r1, #60	; 0x3c
 800518a:	200a      	movs	r0, #10
 800518c:	f7fd f956 	bl	800243c <lcdPutStr>

	sprintf(&textBuffer, "solar elevation angle: %02.3f deg", 90-phi*180/M_PI);
 8005190:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005194:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80051dc <localMain+0xc4c>
 8005198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800519c:	ee17 0a90 	vmov	r0, s15
 80051a0:	f7fb f9ec 	bl	800057c <__aeabi_f2d>
 80051a4:	a30a      	add	r3, pc, #40	; (adr r3, 80051d0 <localMain+0xc40>)
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f7fb fb69 	bl	8000880 <__aeabi_ddiv>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	f04f 0000 	mov.w	r0, #0
 80051b6:	4911      	ldr	r1, [pc, #68]	; (80051fc <localMain+0xc6c>)
 80051b8:	f7fb f880 	bl	80002bc <__aeabi_dsub>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80051c4:	490e      	ldr	r1, [pc, #56]	; (8005200 <localMain+0xc70>)
 80051c6:	f008 f967 	bl	800d498 <siprintf>
 80051ca:	e01b      	b.n	8005204 <localMain+0xc74>
 80051cc:	f3af 8000 	nop.w
 80051d0:	54442d18 	.word	0x54442d18
 80051d4:	400921fb 	.word	0x400921fb
 80051d8:	40668000 	.word	0x40668000
 80051dc:	43340000 	.word	0x43340000
 80051e0:	40100000 	.word	0x40100000
 80051e4:	40868000 	.word	0x40868000
 80051e8:	88888889 	.word	0x88888889
 80051ec:	08013b84 	.word	0x08013b84
 80051f0:	0801756c 	.word	0x0801756c
 80051f4:	08013b98 	.word	0x08013b98
 80051f8:	08013ba8 	.word	0x08013ba8
 80051fc:	40568000 	.word	0x40568000
 8005200:	08013bbc 	.word	0x08013bbc
	lcdPutStr(10, 80, textBuffer, font_12_zekton_bold);
 8005204:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005208:	4b13      	ldr	r3, [pc, #76]	; (8005258 <localMain+0xcc8>)
 800520a:	2150      	movs	r1, #80	; 0x50
 800520c:	200a      	movs	r0, #10
 800520e:	f7fd f915 	bl	800243c <lcdPutStr>

	double saDeg;
	if(cha<0) saDeg = -sa*180/M_PI;
 8005212:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005216:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521e:	d51f      	bpl.n	8005260 <localMain+0xcd0>
 8005220:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005224:	eef1 7a67 	vneg.f32	s15, s15
 8005228:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800525c <localMain+0xccc>
 800522c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005230:	ee17 0a90 	vmov	r0, s15
 8005234:	f7fb f9a2 	bl	800057c <__aeabi_f2d>
 8005238:	a305      	add	r3, pc, #20	; (adr r3, 8005250 <localMain+0xcc0>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f7fb fb1f 	bl	8000880 <__aeabi_ddiv>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 800524a:	e025      	b.n	8005298 <localMain+0xd08>
 800524c:	f3af 8000 	nop.w
 8005250:	54442d18 	.word	0x54442d18
 8005254:	400921fb 	.word	0x400921fb
 8005258:	0801756c 	.word	0x0801756c
 800525c:	43340000 	.word	0x43340000
	else saDeg = 360+sa*180/M_PI;
 8005260:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005264:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 800525c <localMain+0xccc>
 8005268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800526c:	ee17 0a90 	vmov	r0, s15
 8005270:	f7fb f984 	bl	800057c <__aeabi_f2d>
 8005274:	a3db      	add	r3, pc, #876	; (adr r3, 80055e4 <localMain+0x1054>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f7fb fb01 	bl	8000880 <__aeabi_ddiv>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4610      	mov	r0, r2
 8005284:	4619      	mov	r1, r3
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	4bcb      	ldr	r3, [pc, #812]	; (80055b8 <localMain+0x1028>)
 800528c:	f7fb f818 	bl	80002c0 <__adddf3>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", saDeg);
 8005298:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800529c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80052a0:	49c6      	ldr	r1, [pc, #792]	; (80055bc <localMain+0x102c>)
 80052a2:	f008 f8f9 	bl	800d498 <siprintf>
//	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", fmod(360+sa*180/M_PI, 360));
	lcdPutStr(10, 96, textBuffer, font_12_zekton_bold);
 80052a6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80052aa:	4bc5      	ldr	r3, [pc, #788]	; (80055c0 <localMain+0x1030>)
 80052ac:	2160      	movs	r1, #96	; 0x60
 80052ae:	200a      	movs	r0, #10
 80052b0:	f7fd f8c4 	bl	800243c <lcdPutStr>

	double perc = (hhour*60+mmin+(double)ssec/60-sunrise)*100/(sunset-sunrise);
 80052b4:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 80052b8:	4613      	mov	r3, r2
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	461a      	mov	r2, r3
 80052c2:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80052c6:	4413      	add	r3, r2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fb f945 	bl	8000558 <__aeabi_i2d>
 80052ce:	4604      	mov	r4, r0
 80052d0:	460d      	mov	r5, r1
 80052d2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fb f92e 	bl	8000538 <__aeabi_ui2d>
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	4bb8      	ldr	r3, [pc, #736]	; (80055c4 <localMain+0x1034>)
 80052e2:	f7fb facd 	bl	8000880 <__aeabi_ddiv>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4620      	mov	r0, r4
 80052ec:	4629      	mov	r1, r5
 80052ee:	f7fa ffe7 	bl	80002c0 <__adddf3>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4614      	mov	r4, r2
 80052f8:	461d      	mov	r5, r3
 80052fa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80052fe:	f7fb f92b 	bl	8000558 <__aeabi_i2d>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4620      	mov	r0, r4
 8005308:	4629      	mov	r1, r5
 800530a:	f7fa ffd7 	bl	80002bc <__aeabi_dsub>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	4bab      	ldr	r3, [pc, #684]	; (80055c8 <localMain+0x1038>)
 800531c:	f7fb f986 	bl	800062c <__aeabi_dmul>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4614      	mov	r4, r2
 8005326:	461d      	mov	r5, r3
 8005328:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800532c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	4618      	mov	r0, r3
 8005334:	f7fb f910 	bl	8000558 <__aeabi_i2d>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4620      	mov	r0, r4
 800533e:	4629      	mov	r1, r5
 8005340:	f7fb fa9e 	bl	8000880 <__aeabi_ddiv>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	sprintf(&textBuffer, "percentage daylight: %2.3f%%", perc);
 800534c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005350:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005354:	499d      	ldr	r1, [pc, #628]	; (80055cc <localMain+0x103c>)
 8005356:	f008 f89f 	bl	800d498 <siprintf>
	lcdPutStr(10, 116, textBuffer, font_12_zekton_bold);
 800535a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800535e:	4b98      	ldr	r3, [pc, #608]	; (80055c0 <localMain+0x1030>)
 8005360:	2174      	movs	r1, #116	; 0x74
 8005362:	200a      	movs	r0, #10
 8005364:	f7fd f86a 	bl	800243c <lcdPutStr>
	sprintf(&textBuffer, "day length: %02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 8005368:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800536c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	4a97      	ldr	r2, [pc, #604]	; (80055d0 <localMain+0x1040>)
 8005374:	fb82 1203 	smull	r1, r2, r2, r3
 8005378:	441a      	add	r2, r3
 800537a:	1152      	asrs	r2, r2, #5
 800537c:	17db      	asrs	r3, r3, #31
 800537e:	1ad4      	subs	r4, r2, r3
 8005380:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005388:	1ad2      	subs	r2, r2, r3
 800538a:	4b91      	ldr	r3, [pc, #580]	; (80055d0 <localMain+0x1040>)
 800538c:	fb83 1302 	smull	r1, r3, r3, r2
 8005390:	4413      	add	r3, r2
 8005392:	1159      	asrs	r1, r3, #5
 8005394:	17d3      	asrs	r3, r2, #31
 8005396:	1ac9      	subs	r1, r1, r3
 8005398:	460b      	mov	r3, r1
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	1a5b      	subs	r3, r3, r1
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	1ad1      	subs	r1, r2, r3
 80053a2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80053a6:	460b      	mov	r3, r1
 80053a8:	4622      	mov	r2, r4
 80053aa:	498a      	ldr	r1, [pc, #552]	; (80055d4 <localMain+0x1044>)
 80053ac:	f008 f874 	bl	800d498 <siprintf>
	lcdPutStr(10, 132, textBuffer, font_12_zekton_bold);
 80053b0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80053b4:	4b82      	ldr	r3, [pc, #520]	; (80055c0 <localMain+0x1030>)
 80053b6:	2184      	movs	r1, #132	; 0x84
 80053b8:	200a      	movs	r0, #10
 80053ba:	f7fd f83f 	bl	800243c <lcdPutStr>

	uint16_t scaleXrise = 10+380*sunrise/(24*60-0);
 80053be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053c2:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80053c6:	fb02 f303 	mul.w	r3, r2, r3
 80053ca:	4a83      	ldr	r2, [pc, #524]	; (80055d8 <localMain+0x1048>)
 80053cc:	fb82 1203 	smull	r1, r2, r2, r3
 80053d0:	441a      	add	r2, r3
 80053d2:	1292      	asrs	r2, r2, #10
 80053d4:	17db      	asrs	r3, r3, #31
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	b29b      	uxth	r3, r3
 80053da:	330a      	adds	r3, #10
 80053dc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t scaleXset = 10+380*sunset/(24*60-0);
 80053e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053e4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
 80053ec:	4a7a      	ldr	r2, [pc, #488]	; (80055d8 <localMain+0x1048>)
 80053ee:	fb82 1203 	smull	r1, r2, r2, r3
 80053f2:	441a      	add	r2, r3
 80053f4:	1292      	asrs	r2, r2, #10
 80053f6:	17db      	asrs	r3, r3, #31
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	330a      	adds	r3, #10
 80053fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t scaleXnoon = 10+380*noon/(24*60-0);
 8005402:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005406:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	4a72      	ldr	r2, [pc, #456]	; (80055d8 <localMain+0x1048>)
 8005410:	fb82 1203 	smull	r1, r2, r2, r3
 8005414:	441a      	add	r2, r3
 8005416:	1292      	asrs	r2, r2, #10
 8005418:	17db      	asrs	r3, r3, #31
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	b29b      	uxth	r3, r3
 800541e:	330a      	adds	r3, #10
 8005420:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t scaleXnow = 10+380*(hhour*60+mmin)/(24*60-0);
 8005424:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005428:	4613      	mov	r3, r2
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	461a      	mov	r2, r3
 8005432:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005436:	4413      	add	r3, r2
 8005438:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800543c:	fb02 f303 	mul.w	r3, r2, r3
 8005440:	4a65      	ldr	r2, [pc, #404]	; (80055d8 <localMain+0x1048>)
 8005442:	fb82 1203 	smull	r1, r2, r2, r3
 8005446:	441a      	add	r2, r3
 8005448:	1292      	asrs	r2, r2, #10
 800544a:	17db      	asrs	r3, r3, #31
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	b29b      	uxth	r3, r3
 8005450:	330a      	adds	r3, #10
 8005452:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	lcdHLine(10,399-10,165,1);
 8005456:	2301      	movs	r3, #1
 8005458:	22a5      	movs	r2, #165	; 0xa5
 800545a:	f240 1185 	movw	r1, #389	; 0x185
 800545e:	200a      	movs	r0, #10
 8005460:	f7fd fc56 	bl	8002d10 <lcdHLine>
	lcdVLine(10, 163, 167, 1);
 8005464:	2301      	movs	r3, #1
 8005466:	22a7      	movs	r2, #167	; 0xa7
 8005468:	21a3      	movs	r1, #163	; 0xa3
 800546a:	200a      	movs	r0, #10
 800546c:	f7fd f814 	bl	8002498 <lcdVLine>
	lcdVLine(399-10, 163, 167, 1);
 8005470:	2301      	movs	r3, #1
 8005472:	22a7      	movs	r2, #167	; 0xa7
 8005474:	21a3      	movs	r1, #163	; 0xa3
 8005476:	f240 1085 	movw	r0, #389	; 0x185
 800547a:	f7fd f80d 	bl	8002498 <lcdVLine>
	lcdVLine(scaleXrise, 160, 170, 2);
 800547e:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 8005482:	2302      	movs	r3, #2
 8005484:	22aa      	movs	r2, #170	; 0xaa
 8005486:	21a0      	movs	r1, #160	; 0xa0
 8005488:	f7fd f806 	bl	8002498 <lcdVLine>
	lcdVLine(scaleXset, 160, 170, 2);
 800548c:	f8b7 008c 	ldrh.w	r0, [r7, #140]	; 0x8c
 8005490:	2302      	movs	r3, #2
 8005492:	22aa      	movs	r2, #170	; 0xaa
 8005494:	21a0      	movs	r1, #160	; 0xa0
 8005496:	f7fc ffff 	bl	8002498 <lcdVLine>
	lcdVLine(scaleXnoon, 160, 170, 2);
 800549a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800549e:	2302      	movs	r3, #2
 80054a0:	22aa      	movs	r2, #170	; 0xaa
 80054a2:	21a0      	movs	r1, #160	; 0xa0
 80054a4:	f7fc fff8 	bl	8002498 <lcdVLine>
	lcdVLine(scaleXnow, 155, 175, 2);
 80054a8:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 80054ac:	2302      	movs	r3, #2
 80054ae:	22af      	movs	r2, #175	; 0xaf
 80054b0:	219b      	movs	r1, #155	; 0x9b
 80054b2:	f7fc fff1 	bl	8002498 <lcdVLine>

	sprintf(&textBuffer, "%02d:%02d", sunrise/60, sunrise%60);
 80054b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054ba:	4a45      	ldr	r2, [pc, #276]	; (80055d0 <localMain+0x1040>)
 80054bc:	fb82 1203 	smull	r1, r2, r2, r3
 80054c0:	441a      	add	r2, r3
 80054c2:	1152      	asrs	r2, r2, #5
 80054c4:	17db      	asrs	r3, r3, #31
 80054c6:	1ad4      	subs	r4, r2, r3
 80054c8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80054cc:	4b40      	ldr	r3, [pc, #256]	; (80055d0 <localMain+0x1040>)
 80054ce:	fb83 1302 	smull	r1, r3, r3, r2
 80054d2:	4413      	add	r3, r2
 80054d4:	1159      	asrs	r1, r3, #5
 80054d6:	17d3      	asrs	r3, r2, #31
 80054d8:	1ac9      	subs	r1, r1, r3
 80054da:	460b      	mov	r3, r1
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	1a5b      	subs	r3, r3, r1
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	1ad1      	subs	r1, r2, r3
 80054e4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80054e8:	460b      	mov	r3, r1
 80054ea:	4622      	mov	r2, r4
 80054ec:	493b      	ldr	r1, [pc, #236]	; (80055dc <localMain+0x104c>)
 80054ee:	f007 ffd3 	bl	800d498 <siprintf>
	lcdPutStr(scaleXrise-19, 170, textBuffer, smallestFont);
 80054f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80054f6:	3b13      	subs	r3, #19
 80054f8:	b298      	uxth	r0, r3
 80054fa:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80054fe:	4b38      	ldr	r3, [pc, #224]	; (80055e0 <localMain+0x1050>)
 8005500:	21aa      	movs	r1, #170	; 0xaa
 8005502:	f7fc ff9b 	bl	800243c <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", sunset/60, sunset%60);
 8005506:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800550a:	4a31      	ldr	r2, [pc, #196]	; (80055d0 <localMain+0x1040>)
 800550c:	fb82 1203 	smull	r1, r2, r2, r3
 8005510:	441a      	add	r2, r3
 8005512:	1152      	asrs	r2, r2, #5
 8005514:	17db      	asrs	r3, r3, #31
 8005516:	1ad4      	subs	r4, r2, r3
 8005518:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800551c:	4b2c      	ldr	r3, [pc, #176]	; (80055d0 <localMain+0x1040>)
 800551e:	fb83 1302 	smull	r1, r3, r3, r2
 8005522:	4413      	add	r3, r2
 8005524:	1159      	asrs	r1, r3, #5
 8005526:	17d3      	asrs	r3, r2, #31
 8005528:	1ac9      	subs	r1, r1, r3
 800552a:	460b      	mov	r3, r1
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	1a5b      	subs	r3, r3, r1
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	1ad1      	subs	r1, r2, r3
 8005534:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005538:	460b      	mov	r3, r1
 800553a:	4622      	mov	r2, r4
 800553c:	4927      	ldr	r1, [pc, #156]	; (80055dc <localMain+0x104c>)
 800553e:	f007 ffab 	bl	800d498 <siprintf>
	lcdPutStr(scaleXset-19, 170, textBuffer, smallestFont);
 8005542:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005546:	3b13      	subs	r3, #19
 8005548:	b298      	uxth	r0, r3
 800554a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800554e:	4b24      	ldr	r3, [pc, #144]	; (80055e0 <localMain+0x1050>)
 8005550:	21aa      	movs	r1, #170	; 0xaa
 8005552:	f7fc ff73 	bl	800243c <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", noon/60, noon%60);
 8005556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800555a:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <localMain+0x1040>)
 800555c:	fb82 1203 	smull	r1, r2, r2, r3
 8005560:	441a      	add	r2, r3
 8005562:	1152      	asrs	r2, r2, #5
 8005564:	17db      	asrs	r3, r3, #31
 8005566:	1ad4      	subs	r4, r2, r3
 8005568:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800556c:	4b18      	ldr	r3, [pc, #96]	; (80055d0 <localMain+0x1040>)
 800556e:	fb83 1302 	smull	r1, r3, r3, r2
 8005572:	4413      	add	r3, r2
 8005574:	1159      	asrs	r1, r3, #5
 8005576:	17d3      	asrs	r3, r2, #31
 8005578:	1ac9      	subs	r1, r1, r3
 800557a:	460b      	mov	r3, r1
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	1a5b      	subs	r3, r3, r1
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	1ad1      	subs	r1, r2, r3
 8005584:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005588:	460b      	mov	r3, r1
 800558a:	4622      	mov	r2, r4
 800558c:	4913      	ldr	r1, [pc, #76]	; (80055dc <localMain+0x104c>)
 800558e:	f007 ff83 	bl	800d498 <siprintf>
	lcdPutStr(scaleXnoon-19, 170, textBuffer, smallestFont);
 8005592:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005596:	3b13      	subs	r3, #19
 8005598:	b298      	uxth	r0, r3
 800559a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800559e:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <localMain+0x1050>)
 80055a0:	21aa      	movs	r1, #170	; 0xaa
 80055a2:	f7fc ff4b 	bl	800243c <lcdPutStr>
}
 80055a6:	bf00      	nop
 80055a8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80055ac:	46bd      	mov	sp, r7
 80055ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b2:	bf00      	nop
 80055b4:	f3af 8000 	nop.w
 80055b8:	40768000 	.word	0x40768000
 80055bc:	08013be0 	.word	0x08013be0
 80055c0:	0801756c 	.word	0x0801756c
 80055c4:	404e0000 	.word	0x404e0000
 80055c8:	40590000 	.word	0x40590000
 80055cc:	08013c00 	.word	0x08013c00
 80055d0:	88888889 	.word	0x88888889
 80055d4:	08013c20 	.word	0x08013c20
 80055d8:	b60b60b7 	.word	0xb60b60b7
 80055dc:	08013c3c 	.word	0x08013c3c
 80055e0:	080170f0 	.word	0x080170f0
 80055e4:	54442d18 	.word	0x54442d18
 80055e8:	400921fb 	.word	0x400921fb

080055ec <prevPage>:
//#include "fonts/zekton24.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
	if(currentPage>0){
 80055f0:	4b0a      	ldr	r3, [pc, #40]	; (800561c <prevPage+0x30>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d006      	beq.n	8005606 <prevPage+0x1a>
		currentPage--;
 80055f8:	4b08      	ldr	r3, [pc, #32]	; (800561c <prevPage+0x30>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <prevPage+0x30>)
 8005602:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 8005604:	e005      	b.n	8005612 <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <prevPage+0x34>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	3b01      	subs	r3, #1
 800560c:	b2da      	uxtb	r2, r3
 800560e:	4b03      	ldr	r3, [pc, #12]	; (800561c <prevPage+0x30>)
 8005610:	701a      	strb	r2, [r3, #0]
}
 8005612:	bf00      	nop
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20003a0c 	.word	0x20003a0c
 8005620:	20000185 	.word	0x20000185

08005624 <nextPage>:
void nextPage(void){
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <nextPage+0x34>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <nextPage+0x38>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	3b01      	subs	r3, #1
 8005634:	429a      	cmp	r2, r3
 8005636:	da06      	bge.n	8005646 <nextPage+0x22>
		currentPage++;
 8005638:	4b07      	ldr	r3, [pc, #28]	; (8005658 <nextPage+0x34>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	3301      	adds	r3, #1
 800563e:	b2da      	uxtb	r2, r3
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <nextPage+0x34>)
 8005642:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 8005644:	e002      	b.n	800564c <nextPage+0x28>
		currentPage=0;
 8005646:	4b04      	ldr	r3, [pc, #16]	; (8005658 <nextPage+0x34>)
 8005648:	2200      	movs	r2, #0
 800564a:	701a      	strb	r2, [r3, #0]
}
 800564c:	bf00      	nop
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	20003a0c 	.word	0x20003a0c
 800565c:	20000185 	.word	0x20000185

08005660 <showPage1>:

void showPage1(void){
 8005660:	b580      	push	{r7, lr}
 8005662:	b092      	sub	sp, #72	; 0x48
 8005664:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 8005666:	2300      	movs	r3, #0
 8005668:	623b      	str	r3, [r7, #32]
 800566a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	605a      	str	r2, [r3, #4]
 8005674:	609a      	str	r2, [r3, #8]
 8005676:	60da      	str	r2, [r3, #12]
 8005678:	611a      	str	r2, [r3, #16]
 800567a:	615a      	str	r2, [r3, #20]
 800567c:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 800567e:	2300      	movs	r3, #0
 8005680:	603b      	str	r3, [r7, #0]
 8005682:	1d3b      	adds	r3, r7, #4
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	605a      	str	r2, [r3, #4]
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	60da      	str	r2, [r3, #12]
 800568e:	611a      	str	r2, [r3, #16]
 8005690:	615a      	str	r2, [r3, #20]
 8005692:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8005694:	4b17      	ldr	r3, [pc, #92]	; (80056f4 <showPage1+0x94>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	461a      	mov	r2, r3
 800569a:	4b16      	ldr	r3, [pc, #88]	; (80056f4 <showPage1+0x94>)
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	4619      	mov	r1, r3
 80056a0:	4b14      	ldr	r3, [pc, #80]	; (80056f4 <showPage1+0x94>)
 80056a2:	789b      	ldrb	r3, [r3, #2]
 80056a4:	4638      	mov	r0, r7
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	460b      	mov	r3, r1
 80056aa:	4913      	ldr	r1, [pc, #76]	; (80056f8 <showPage1+0x98>)
 80056ac:	f007 fef4 	bl	800d498 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 80056b0:	463a      	mov	r2, r7
 80056b2:	4b12      	ldr	r3, [pc, #72]	; (80056fc <showPage1+0x9c>)
 80056b4:	210b      	movs	r1, #11
 80056b6:	200e      	movs	r0, #14
 80056b8:	f7fc fec0 	bl	800243c <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 80056bc:	2301      	movs	r3, #1
 80056be:	2227      	movs	r2, #39	; 0x27
 80056c0:	2106      	movs	r1, #6
 80056c2:	2001      	movs	r0, #1
 80056c4:	f7fc fee8 	bl	8002498 <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 80056c8:	2301      	movs	r3, #1
 80056ca:	2228      	movs	r2, #40	; 0x28
 80056cc:	2105      	movs	r1, #5
 80056ce:	2002      	movs	r0, #2
 80056d0:	f7fc fee2 	bl	8002498 <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 80056d4:	2301      	movs	r3, #1
 80056d6:	2228      	movs	r2, #40	; 0x28
 80056d8:	2105      	movs	r1, #5
 80056da:	2003      	movs	r0, #3
 80056dc:	f7fc fedc 	bl	8002498 <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 80056e0:	2301      	movs	r3, #1
 80056e2:	2227      	movs	r2, #39	; 0x27
 80056e4:	2106      	movs	r1, #6
 80056e6:	2004      	movs	r0, #4
 80056e8:	f7fc fed6 	bl	8002498 <lcdVLine>
}
 80056ec:	bf00      	nop
 80056ee:	3740      	adds	r7, #64	; 0x40
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20003574 	.word	0x20003574
 80056f8:	08013d20 	.word	0x08013d20
 80056fc:	0801caec 	.word	0x0801caec

08005700 <showPage2>:
void showPage2(void){
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8005706:	2300      	movs	r3, #0
 8005708:	603b      	str	r3, [r7, #0]
 800570a:	1d3b      	adds	r3, r7, #4
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	611a      	str	r2, [r3, #16]
 8005718:	615a      	str	r2, [r3, #20]
 800571a:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 800571c:	463b      	mov	r3, r7
 800571e:	4913      	ldr	r1, [pc, #76]	; (800576c <showPage2+0x6c>)
 8005720:	4618      	mov	r0, r3
 8005722:	f007 feb9 	bl	800d498 <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 8005726:	463a      	mov	r2, r7
 8005728:	4b11      	ldr	r3, [pc, #68]	; (8005770 <showPage2+0x70>)
 800572a:	2132      	movs	r1, #50	; 0x32
 800572c:	200e      	movs	r0, #14
 800572e:	f7fc fe85 	bl	800243c <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 8005732:	2301      	movs	r3, #1
 8005734:	224e      	movs	r2, #78	; 0x4e
 8005736:	212d      	movs	r1, #45	; 0x2d
 8005738:	2001      	movs	r0, #1
 800573a:	f7fc fead 	bl	8002498 <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 800573e:	2301      	movs	r3, #1
 8005740:	224f      	movs	r2, #79	; 0x4f
 8005742:	212c      	movs	r1, #44	; 0x2c
 8005744:	2002      	movs	r0, #2
 8005746:	f7fc fea7 	bl	8002498 <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 800574a:	2301      	movs	r3, #1
 800574c:	224f      	movs	r2, #79	; 0x4f
 800574e:	212c      	movs	r1, #44	; 0x2c
 8005750:	2003      	movs	r0, #3
 8005752:	f7fc fea1 	bl	8002498 <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 8005756:	2301      	movs	r3, #1
 8005758:	224e      	movs	r2, #78	; 0x4e
 800575a:	212d      	movs	r1, #45	; 0x2d
 800575c:	2004      	movs	r0, #4
 800575e:	f7fc fe9b 	bl	8002498 <lcdVLine>
}
 8005762:	bf00      	nop
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	08013d30 	.word	0x08013d30
 8005770:	0801caec 	.word	0x0801caec

08005774 <showPage3>:
void showPage3(void){
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800577a:	2300      	movs	r3, #0
 800577c:	603b      	str	r3, [r7, #0]
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	609a      	str	r2, [r3, #8]
 8005788:	60da      	str	r2, [r3, #12]
 800578a:	611a      	str	r2, [r3, #16]
 800578c:	615a      	str	r2, [r3, #20]
 800578e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 8005790:	463b      	mov	r3, r7
 8005792:	4913      	ldr	r1, [pc, #76]	; (80057e0 <showPage3+0x6c>)
 8005794:	4618      	mov	r0, r3
 8005796:	f007 fe7f 	bl	800d498 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 800579a:	463a      	mov	r2, r7
 800579c:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <showPage3+0x70>)
 800579e:	2100      	movs	r1, #0
 80057a0:	2000      	movs	r0, #0
 80057a2:	f7fc fe4b 	bl	800243c <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 80057a6:	2301      	movs	r3, #1
 80057a8:	2275      	movs	r2, #117	; 0x75
 80057aa:	2154      	movs	r1, #84	; 0x54
 80057ac:	2001      	movs	r0, #1
 80057ae:	f7fc fe73 	bl	8002498 <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 80057b2:	2301      	movs	r3, #1
 80057b4:	2276      	movs	r2, #118	; 0x76
 80057b6:	2153      	movs	r1, #83	; 0x53
 80057b8:	2002      	movs	r0, #2
 80057ba:	f7fc fe6d 	bl	8002498 <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 80057be:	2301      	movs	r3, #1
 80057c0:	2276      	movs	r2, #118	; 0x76
 80057c2:	2153      	movs	r1, #83	; 0x53
 80057c4:	2003      	movs	r0, #3
 80057c6:	f7fc fe67 	bl	8002498 <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 80057ca:	2301      	movs	r3, #1
 80057cc:	2275      	movs	r2, #117	; 0x75
 80057ce:	2154      	movs	r1, #84	; 0x54
 80057d0:	2004      	movs	r0, #4
 80057d2:	f7fc fe61 	bl	8002498 <lcdVLine>
}
 80057d6:	bf00      	nop
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	08013d34 	.word	0x08013d34
 80057e4:	0801caec 	.word	0x0801caec

080057e8 <showPage4>:
void showPage4(void){
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80057ee:	2300      	movs	r3, #0
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	605a      	str	r2, [r3, #4]
 80057fa:	609a      	str	r2, [r3, #8]
 80057fc:	60da      	str	r2, [r3, #12]
 80057fe:	611a      	str	r2, [r3, #16]
 8005800:	615a      	str	r2, [r3, #20]
 8005802:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 8005804:	463b      	mov	r3, r7
 8005806:	4913      	ldr	r1, [pc, #76]	; (8005854 <showPage4+0x6c>)
 8005808:	4618      	mov	r0, r3
 800580a:	f007 fe45 	bl	800d498 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 800580e:	463a      	mov	r2, r7
 8005810:	4b11      	ldr	r3, [pc, #68]	; (8005858 <showPage4+0x70>)
 8005812:	2100      	movs	r1, #0
 8005814:	2000      	movs	r0, #0
 8005816:	f7fc fe11 	bl	800243c <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 800581a:	2301      	movs	r3, #1
 800581c:	229c      	movs	r2, #156	; 0x9c
 800581e:	217b      	movs	r1, #123	; 0x7b
 8005820:	2001      	movs	r0, #1
 8005822:	f7fc fe39 	bl	8002498 <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 8005826:	2301      	movs	r3, #1
 8005828:	229d      	movs	r2, #157	; 0x9d
 800582a:	217a      	movs	r1, #122	; 0x7a
 800582c:	2002      	movs	r0, #2
 800582e:	f7fc fe33 	bl	8002498 <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 8005832:	2301      	movs	r3, #1
 8005834:	229d      	movs	r2, #157	; 0x9d
 8005836:	217a      	movs	r1, #122	; 0x7a
 8005838:	2003      	movs	r0, #3
 800583a:	f7fc fe2d 	bl	8002498 <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 800583e:	2301      	movs	r3, #1
 8005840:	229c      	movs	r2, #156	; 0x9c
 8005842:	217b      	movs	r1, #123	; 0x7b
 8005844:	2004      	movs	r0, #4
 8005846:	f7fc fe27 	bl	8002498 <lcdVLine>
}
 800584a:	bf00      	nop
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	08013d40 	.word	0x08013d40
 8005858:	0801caec 	.word	0x0801caec

0800585c <showPage5>:
void showPage5(void){
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8005862:	2300      	movs	r3, #0
 8005864:	603b      	str	r3, [r7, #0]
 8005866:	1d3b      	adds	r3, r7, #4
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	605a      	str	r2, [r3, #4]
 800586e:	609a      	str	r2, [r3, #8]
 8005870:	60da      	str	r2, [r3, #12]
 8005872:	611a      	str	r2, [r3, #16]
 8005874:	615a      	str	r2, [r3, #20]
 8005876:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 8005878:	463b      	mov	r3, r7
 800587a:	4925      	ldr	r1, [pc, #148]	; (8005910 <showPage5+0xb4>)
 800587c:	4618      	mov	r0, r3
 800587e:	f007 fe0b 	bl	800d498 <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 8005882:	463a      	mov	r2, r7
 8005884:	4b23      	ldr	r3, [pc, #140]	; (8005914 <showPage5+0xb8>)
 8005886:	2100      	movs	r1, #0
 8005888:	200a      	movs	r0, #10
 800588a:	f7fc fdd7 	bl	800243c <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 800588e:	463a      	mov	r2, r7
 8005890:	4b21      	ldr	r3, [pc, #132]	; (8005918 <showPage5+0xbc>)
 8005892:	210f      	movs	r1, #15
 8005894:	200a      	movs	r0, #10
 8005896:	f7fc fdd1 	bl	800243c <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 800589a:	463a      	mov	r2, r7
 800589c:	4b1f      	ldr	r3, [pc, #124]	; (800591c <showPage5+0xc0>)
 800589e:	2132      	movs	r1, #50	; 0x32
 80058a0:	200a      	movs	r0, #10
 80058a2:	f7fc fdcb 	bl	800243c <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 80058a6:	463a      	mov	r2, r7
 80058a8:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <showPage5+0xc4>)
 80058aa:	213c      	movs	r1, #60	; 0x3c
 80058ac:	200a      	movs	r0, #10
 80058ae:	f7fc fdc5 	bl	800243c <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 80058b2:	463a      	mov	r2, r7
 80058b4:	4b1b      	ldr	r3, [pc, #108]	; (8005924 <showPage5+0xc8>)
 80058b6:	215a      	movs	r1, #90	; 0x5a
 80058b8:	200a      	movs	r0, #10
 80058ba:	f7fc fdbf 	bl	800243c <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 80058be:	463a      	mov	r2, r7
 80058c0:	4b19      	ldr	r3, [pc, #100]	; (8005928 <showPage5+0xcc>)
 80058c2:	2178      	movs	r1, #120	; 0x78
 80058c4:	200a      	movs	r0, #10
 80058c6:	f7fc fdb9 	bl	800243c <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 80058ca:	463a      	mov	r2, r7
 80058cc:	4b17      	ldr	r3, [pc, #92]	; (800592c <showPage5+0xd0>)
 80058ce:	2196      	movs	r1, #150	; 0x96
 80058d0:	200a      	movs	r0, #10
 80058d2:	f7fc fdb3 	bl	800243c <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 80058d6:	2301      	movs	r3, #1
 80058d8:	22c3      	movs	r2, #195	; 0xc3
 80058da:	21a2      	movs	r1, #162	; 0xa2
 80058dc:	2001      	movs	r0, #1
 80058de:	f7fc fddb 	bl	8002498 <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 80058e2:	2301      	movs	r3, #1
 80058e4:	22c4      	movs	r2, #196	; 0xc4
 80058e6:	21a1      	movs	r1, #161	; 0xa1
 80058e8:	2002      	movs	r0, #2
 80058ea:	f7fc fdd5 	bl	8002498 <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 80058ee:	2301      	movs	r3, #1
 80058f0:	22c4      	movs	r2, #196	; 0xc4
 80058f2:	21a1      	movs	r1, #161	; 0xa1
 80058f4:	2003      	movs	r0, #3
 80058f6:	f7fc fdcf 	bl	8002498 <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 80058fa:	2301      	movs	r3, #1
 80058fc:	22c3      	movs	r2, #195	; 0xc3
 80058fe:	21a2      	movs	r1, #162	; 0xa2
 8005900:	2004      	movs	r0, #4
 8005902:	f7fc fdc9 	bl	8002498 <lcdVLine>
}
 8005906:	bf00      	nop
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	08013d4c 	.word	0x08013d4c
 8005914:	0801a9dc 	.word	0x0801a9dc
 8005918:	0801b524 	.word	0x0801b524
 800591c:	08017ff4 	.word	0x08017ff4
 8005920:	08018470 	.word	0x08018470
 8005924:	080194cc 	.word	0x080194cc
 8005928:	08019f54 	.word	0x08019f54
 800592c:	0801caec 	.word	0x0801caec

08005930 <showPage6>:
void showPage6(void){
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8005936:	2301      	movs	r3, #1
 8005938:	22ea      	movs	r2, #234	; 0xea
 800593a:	21c9      	movs	r1, #201	; 0xc9
 800593c:	2001      	movs	r0, #1
 800593e:	f7fc fdab 	bl	8002498 <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8005942:	2301      	movs	r3, #1
 8005944:	22eb      	movs	r2, #235	; 0xeb
 8005946:	21c8      	movs	r1, #200	; 0xc8
 8005948:	2002      	movs	r0, #2
 800594a:	f7fc fda5 	bl	8002498 <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 800594e:	2301      	movs	r3, #1
 8005950:	22eb      	movs	r2, #235	; 0xeb
 8005952:	21c8      	movs	r1, #200	; 0xc8
 8005954:	2003      	movs	r0, #3
 8005956:	f7fc fd9f 	bl	8002498 <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 800595a:	2301      	movs	r3, #1
 800595c:	22ea      	movs	r2, #234	; 0xea
 800595e:	21c9      	movs	r1, #201	; 0xc9
 8005960:	2004      	movs	r0, #4
 8005962:	f7fc fd99 	bl	8002498 <lcdVLine>
		lcdRect(0,399,25,80,1);
 8005966:	2301      	movs	r3, #1
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	2350      	movs	r3, #80	; 0x50
 800596c:	2219      	movs	r2, #25
 800596e:	f240 118f 	movw	r1, #399	; 0x18f
 8005972:	2000      	movs	r0, #0
 8005974:	f7fd fb22 	bl	8002fbc <lcdRect>
		lcdRect(0,399,120,180,1);
 8005978:	2301      	movs	r3, #1
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	23b4      	movs	r3, #180	; 0xb4
 800597e:	2278      	movs	r2, #120	; 0x78
 8005980:	f240 118f 	movw	r1, #399	; 0x18f
 8005984:	2000      	movs	r0, #0
 8005986:	f7fd fb19 	bl	8002fbc <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 800598a:	2301      	movs	r3, #1
 800598c:	9302      	str	r3, [sp, #8]
 800598e:	2300      	movs	r3, #0
 8005990:	9301      	str	r3, [sp, #4]
 8005992:	2303      	movs	r3, #3
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	2332      	movs	r3, #50	; 0x32
 8005998:	220a      	movs	r2, #10
 800599a:	2132      	movs	r1, #50	; 0x32
 800599c:	200a      	movs	r0, #10
 800599e:	f7fd fb32 	bl	8003006 <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 80059a2:	2301      	movs	r3, #1
 80059a4:	9302      	str	r3, [sp, #8]
 80059a6:	2301      	movs	r3, #1
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	2303      	movs	r3, #3
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	2332      	movs	r3, #50	; 0x32
 80059b0:	220a      	movs	r2, #10
 80059b2:	2164      	movs	r1, #100	; 0x64
 80059b4:	203c      	movs	r0, #60	; 0x3c
 80059b6:	f7fd fb26 	bl	8003006 <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 80059ba:	2301      	movs	r3, #1
 80059bc:	9302      	str	r3, [sp, #8]
 80059be:	2302      	movs	r3, #2
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	2303      	movs	r3, #3
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	2332      	movs	r3, #50	; 0x32
 80059c8:	220a      	movs	r2, #10
 80059ca:	2196      	movs	r1, #150	; 0x96
 80059cc:	206e      	movs	r0, #110	; 0x6e
 80059ce:	f7fd fb1a 	bl	8003006 <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 80059d2:	2301      	movs	r3, #1
 80059d4:	9302      	str	r3, [sp, #8]
 80059d6:	2303      	movs	r3, #3
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	2303      	movs	r3, #3
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	2332      	movs	r3, #50	; 0x32
 80059e0:	220a      	movs	r2, #10
 80059e2:	21c8      	movs	r1, #200	; 0xc8
 80059e4:	20a0      	movs	r0, #160	; 0xa0
 80059e6:	f7fd fb0e 	bl	8003006 <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 80059ea:	2301      	movs	r3, #1
 80059ec:	9302      	str	r3, [sp, #8]
 80059ee:	2304      	movs	r3, #4
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	2303      	movs	r3, #3
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	2332      	movs	r3, #50	; 0x32
 80059f8:	220a      	movs	r2, #10
 80059fa:	21fa      	movs	r1, #250	; 0xfa
 80059fc:	20d2      	movs	r0, #210	; 0xd2
 80059fe:	f7fd fb02 	bl	8003006 <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 8005a02:	2301      	movs	r3, #1
 8005a04:	9302      	str	r3, [sp, #8]
 8005a06:	2305      	movs	r3, #5
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	2332      	movs	r3, #50	; 0x32
 8005a10:	220a      	movs	r2, #10
 8005a12:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005a16:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005a1a:	f7fd faf4 	bl	8003006 <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 8005a1e:	2301      	movs	r3, #1
 8005a20:	9302      	str	r3, [sp, #8]
 8005a22:	2306      	movs	r3, #6
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	2303      	movs	r3, #3
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	2332      	movs	r3, #50	; 0x32
 8005a2c:	220a      	movs	r2, #10
 8005a2e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005a32:	f44f 709b 	mov.w	r0, #310	; 0x136
 8005a36:	f7fd fae6 	bl	8003006 <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	9302      	str	r3, [sp, #8]
 8005a3e:	2307      	movs	r3, #7
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	2303      	movs	r3, #3
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	2364      	movs	r3, #100	; 0x64
 8005a48:	223c      	movs	r2, #60	; 0x3c
 8005a4a:	2132      	movs	r1, #50	; 0x32
 8005a4c:	200a      	movs	r0, #10
 8005a4e:	f7fd fada 	bl	8003006 <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 8005a52:	2301      	movs	r3, #1
 8005a54:	9302      	str	r3, [sp, #8]
 8005a56:	2308      	movs	r3, #8
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	2364      	movs	r3, #100	; 0x64
 8005a60:	223c      	movs	r2, #60	; 0x3c
 8005a62:	2164      	movs	r1, #100	; 0x64
 8005a64:	203c      	movs	r0, #60	; 0x3c
 8005a66:	f7fd face 	bl	8003006 <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	9302      	str	r3, [sp, #8]
 8005a6e:	2309      	movs	r3, #9
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	2303      	movs	r3, #3
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	2364      	movs	r3, #100	; 0x64
 8005a78:	223c      	movs	r2, #60	; 0x3c
 8005a7a:	2196      	movs	r1, #150	; 0x96
 8005a7c:	206e      	movs	r0, #110	; 0x6e
 8005a7e:	f7fd fac2 	bl	8003006 <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 8005a82:	2301      	movs	r3, #1
 8005a84:	9302      	str	r3, [sp, #8]
 8005a86:	230a      	movs	r3, #10
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	2364      	movs	r3, #100	; 0x64
 8005a90:	223c      	movs	r2, #60	; 0x3c
 8005a92:	21c8      	movs	r1, #200	; 0xc8
 8005a94:	20a0      	movs	r0, #160	; 0xa0
 8005a96:	f7fd fab6 	bl	8003006 <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	9302      	str	r3, [sp, #8]
 8005a9e:	230b      	movs	r3, #11
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	2364      	movs	r3, #100	; 0x64
 8005aa8:	223c      	movs	r2, #60	; 0x3c
 8005aaa:	21fa      	movs	r1, #250	; 0xfa
 8005aac:	20d2      	movs	r0, #210	; 0xd2
 8005aae:	f7fd faaa 	bl	8003006 <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	9302      	str	r3, [sp, #8]
 8005ab6:	230c      	movs	r3, #12
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	2303      	movs	r3, #3
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	2364      	movs	r3, #100	; 0x64
 8005ac0:	223c      	movs	r2, #60	; 0x3c
 8005ac2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005ac6:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005aca:	f7fd fa9c 	bl	8003006 <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 8005ace:	2301      	movs	r3, #1
 8005ad0:	9302      	str	r3, [sp, #8]
 8005ad2:	230d      	movs	r3, #13
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	2364      	movs	r3, #100	; 0x64
 8005adc:	223c      	movs	r2, #60	; 0x3c
 8005ade:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005ae2:	f44f 709b 	mov.w	r0, #310	; 0x136
 8005ae6:	f7fd fa8e 	bl	8003006 <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 8005aea:	2301      	movs	r3, #1
 8005aec:	9302      	str	r3, [sp, #8]
 8005aee:	230e      	movs	r3, #14
 8005af0:	9301      	str	r3, [sp, #4]
 8005af2:	2303      	movs	r3, #3
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	2396      	movs	r3, #150	; 0x96
 8005af8:	226e      	movs	r2, #110	; 0x6e
 8005afa:	2132      	movs	r1, #50	; 0x32
 8005afc:	200a      	movs	r0, #10
 8005afe:	f7fd fa82 	bl	8003006 <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 8005b02:	2301      	movs	r3, #1
 8005b04:	9302      	str	r3, [sp, #8]
 8005b06:	230f      	movs	r3, #15
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	2396      	movs	r3, #150	; 0x96
 8005b10:	226e      	movs	r2, #110	; 0x6e
 8005b12:	2164      	movs	r1, #100	; 0x64
 8005b14:	203c      	movs	r0, #60	; 0x3c
 8005b16:	f7fd fa76 	bl	8003006 <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	9302      	str	r3, [sp, #8]
 8005b1e:	2310      	movs	r3, #16
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	2303      	movs	r3, #3
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	2396      	movs	r3, #150	; 0x96
 8005b28:	226e      	movs	r2, #110	; 0x6e
 8005b2a:	2196      	movs	r1, #150	; 0x96
 8005b2c:	206e      	movs	r0, #110	; 0x6e
 8005b2e:	f7fd fa6a 	bl	8003006 <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 8005b32:	2301      	movs	r3, #1
 8005b34:	9302      	str	r3, [sp, #8]
 8005b36:	2311      	movs	r3, #17
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	2396      	movs	r3, #150	; 0x96
 8005b40:	226e      	movs	r2, #110	; 0x6e
 8005b42:	21c8      	movs	r1, #200	; 0xc8
 8005b44:	20a0      	movs	r0, #160	; 0xa0
 8005b46:	f7fd fa5e 	bl	8003006 <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	9302      	str	r3, [sp, #8]
 8005b4e:	2312      	movs	r3, #18
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	2303      	movs	r3, #3
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	2396      	movs	r3, #150	; 0x96
 8005b58:	226e      	movs	r2, #110	; 0x6e
 8005b5a:	21fa      	movs	r1, #250	; 0xfa
 8005b5c:	20d2      	movs	r0, #210	; 0xd2
 8005b5e:	f7fd fa52 	bl	8003006 <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 8005b62:	2301      	movs	r3, #1
 8005b64:	9302      	str	r3, [sp, #8]
 8005b66:	2313      	movs	r3, #19
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	2396      	movs	r3, #150	; 0x96
 8005b70:	226e      	movs	r2, #110	; 0x6e
 8005b72:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005b76:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005b7a:	f7fd fa44 	bl	8003006 <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 8005b7e:	2301      	movs	r3, #1
 8005b80:	9302      	str	r3, [sp, #8]
 8005b82:	2314      	movs	r3, #20
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	2303      	movs	r3, #3
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	2396      	movs	r3, #150	; 0x96
 8005b8c:	226e      	movs	r2, #110	; 0x6e
 8005b8e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005b92:	f44f 709b 	mov.w	r0, #310	; 0x136
 8005b96:	f7fd fa36 	bl	8003006 <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 8005b9a:	2304      	movs	r3, #4
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	23c8      	movs	r3, #200	; 0xc8
 8005ba4:	22a0      	movs	r2, #160	; 0xa0
 8005ba6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005baa:	200a      	movs	r0, #10
 8005bac:	f7fd fa2b 	bl	8003006 <lcdRect2>
}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <showPage>:

void showPage(uint8_t pageNum){
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	2b05      	cmp	r3, #5
 8005bc6:	d821      	bhi.n	8005c0c <showPage+0x54>
 8005bc8:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <showPage+0x18>)
 8005bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bce:	bf00      	nop
 8005bd0:	08005be9 	.word	0x08005be9
 8005bd4:	08005bef 	.word	0x08005bef
 8005bd8:	08005bf5 	.word	0x08005bf5
 8005bdc:	08005bfb 	.word	0x08005bfb
 8005be0:	08005c01 	.word	0x08005c01
 8005be4:	08005c07 	.word	0x08005c07
	case 0:
		showPage1();
 8005be8:	f7ff fd3a 	bl	8005660 <showPage1>
		break;
 8005bec:	e00e      	b.n	8005c0c <showPage+0x54>
	case 1:
		showPage2();
 8005bee:	f7ff fd87 	bl	8005700 <showPage2>
		break;
 8005bf2:	e00b      	b.n	8005c0c <showPage+0x54>
	case 2:
		showPage3();
 8005bf4:	f7ff fdbe 	bl	8005774 <showPage3>
		break;
 8005bf8:	e008      	b.n	8005c0c <showPage+0x54>
	case 3:
		showPage4();
 8005bfa:	f7ff fdf5 	bl	80057e8 <showPage4>
		break;
 8005bfe:	e005      	b.n	8005c0c <showPage+0x54>
	case 4:
		showPage5();
 8005c00:	f7ff fe2c 	bl	800585c <showPage5>
		break;
 8005c04:	e002      	b.n	8005c0c <showPage+0x54>
	case 5:
		showPage6();
 8005c06:	f7ff fe93 	bl	8005930 <showPage6>
		break;
 8005c0a:	bf00      	nop
	}
}
 8005c0c:	bf00      	nop
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8005c18:	4b08      	ldr	r3, [pc, #32]	; (8005c3c <setDefaultClbcks+0x28>)
 8005c1a:	4a09      	ldr	r2, [pc, #36]	; (8005c40 <setDefaultClbcks+0x2c>)
 8005c1c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005c1e:	4b09      	ldr	r3, [pc, #36]	; (8005c44 <setDefaultClbcks+0x30>)
 8005c20:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <setDefaultClbcks+0x34>)
 8005c22:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 8005c24:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <setDefaultClbcks+0x38>)
 8005c26:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <setDefaultClbcks+0x3c>)
 8005c28:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8005c2a:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <setDefaultClbcks+0x40>)
 8005c2c:	4a0a      	ldr	r2, [pc, #40]	; (8005c58 <setDefaultClbcks+0x44>)
 8005c2e:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 8005c30:	bf00      	nop
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20000560 	.word	0x20000560
 8005c40:	08001fa1 	.word	0x08001fa1
 8005c44:	200005a8 	.word	0x200005a8
 8005c48:	08001fb1 	.word	0x08001fb1
 8005c4c:	20000614 	.word	0x20000614
 8005c50:	080055ed 	.word	0x080055ed
 8005c54:	200005cc 	.word	0x200005cc
 8005c58:	08005625 	.word	0x08005625

08005c5c <settingsSetup>:


void settingsSetup(void){
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005c60:	f7ff ffd8 	bl	8005c14 <setDefaultClbcks>
}
 8005c64:	bf00      	nop
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <settingsMain>:

void settingsMain(void){
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8005c6e:	2300      	movs	r3, #0
 8005c70:	603b      	str	r3, [r7, #0]
 8005c72:	1d3b      	adds	r3, r7, #4
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	60da      	str	r2, [r3, #12]
 8005c7e:	611a      	str	r2, [r3, #16]
 8005c80:	615a      	str	r2, [r3, #20]
 8005c82:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8005c84:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <settingsMain+0x30>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff ff95 	bl	8005bb8 <showPage>

}
 8005c8e:	bf00      	nop
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20003a0c 	.word	0x20003a0c

08005c9c <startStopwatch>:

#include <fonts/zekton45.h>
#include "stopwatchModule.h"
#include <fonts/font_zekton12.h>

void startStopwatch(){
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
	stwStart();
 8005ca0:	f7fd fcfc 	bl	800369c <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8005ca4:	4b03      	ldr	r3, [pc, #12]	; (8005cb4 <startStopwatch+0x18>)
 8005ca6:	4a04      	ldr	r2, [pc, #16]	; (8005cb8 <startStopwatch+0x1c>)
 8005ca8:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 8005caa:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <startStopwatch+0x20>)
 8005cac:	4a04      	ldr	r2, [pc, #16]	; (8005cc0 <startStopwatch+0x24>)
 8005cae:	611a      	str	r2, [r3, #16]
}
 8005cb0:	bf00      	nop
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	20000584 	.word	0x20000584
 8005cb8:	08005cc5 	.word	0x08005cc5
 8005cbc:	200005f0 	.word	0x200005f0
 8005cc0:	08005d05 	.word	0x08005d05

08005cc4 <stopStopwatch>:
void stopStopwatch(){
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
	stwStop();
 8005cc8:	f7fd fd0c 	bl	80036e4 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8005ccc:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <stopStopwatch+0x18>)
 8005cce:	4a04      	ldr	r2, [pc, #16]	; (8005ce0 <stopStopwatch+0x1c>)
 8005cd0:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8005cd2:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <stopStopwatch+0x20>)
 8005cd4:	4a04      	ldr	r2, [pc, #16]	; (8005ce8 <stopStopwatch+0x24>)
 8005cd6:	611a      	str	r2, [r3, #16]
}
 8005cd8:	bf00      	nop
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000584 	.word	0x20000584
 8005ce0:	08005c9d 	.word	0x08005c9d
 8005ce4:	200005f0 	.word	0x200005f0
 8005ce8:	08005ced 	.word	0x08005ced

08005cec <resetStopwatch>:
void resetStopwatch(){
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
	stwClear();
 8005cf0:	f7fd fd06 	bl	8003700 <stwClear>
	stwT.clear();
 8005cf4:	4b02      	ldr	r3, [pc, #8]	; (8005d00 <resetStopwatch+0x14>)
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	4798      	blx	r3
}
 8005cfa:	bf00      	nop
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	2000014c 	.word	0x2000014c

08005d04 <saveStopwatch>:
void saveStopwatch(){
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
	stwSave();
 8005d08:	f7fd fd08 	bl	800371c <stwSave>
}
 8005d0c:	bf00      	nop
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
//	btn_B3.onSingleLongPressHandler = &returnToMenu;
	btn_B3.onSinglePressHandler = &resetPos;
 8005d14:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <setDefaultClbcks+0x48>)
 8005d16:	4a11      	ldr	r2, [pc, #68]	; (8005d5c <setDefaultClbcks+0x4c>)
 8005d18:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8005d1a:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <setDefaultClbcks+0x50>)
 8005d1c:	4a11      	ldr	r2, [pc, #68]	; (8005d64 <setDefaultClbcks+0x54>)
 8005d1e:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005d20:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <setDefaultClbcks+0x58>)
 8005d22:	4a12      	ldr	r2, [pc, #72]	; (8005d6c <setDefaultClbcks+0x5c>)
 8005d24:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <setDefaultClbcks+0x60>)
 8005d28:	78db      	ldrb	r3, [r3, #3]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d006      	beq.n	8005d42 <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8005d34:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <setDefaultClbcks+0x64>)
 8005d36:	4a10      	ldr	r2, [pc, #64]	; (8005d78 <setDefaultClbcks+0x68>)
 8005d38:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8005d3a:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <setDefaultClbcks+0x6c>)
 8005d3c:	4a10      	ldr	r2, [pc, #64]	; (8005d80 <setDefaultClbcks+0x70>)
 8005d3e:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8005d40:	e005      	b.n	8005d4e <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8005d42:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <setDefaultClbcks+0x64>)
 8005d44:	4a0f      	ldr	r2, [pc, #60]	; (8005d84 <setDefaultClbcks+0x74>)
 8005d46:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <setDefaultClbcks+0x6c>)
 8005d4a:	4a0f      	ldr	r2, [pc, #60]	; (8005d88 <setDefaultClbcks+0x78>)
 8005d4c:	611a      	str	r2, [r3, #16]
}
 8005d4e:	bf00      	nop
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	20000614 	.word	0x20000614
 8005d5c:	08001fc1 	.word	0x08001fc1
 8005d60:	20000560 	.word	0x20000560
 8005d64:	08001fa1 	.word	0x08001fa1
 8005d68:	200005a8 	.word	0x200005a8
 8005d6c:	08001fb1 	.word	0x08001fb1
 8005d70:	2000387c 	.word	0x2000387c
 8005d74:	20000584 	.word	0x20000584
 8005d78:	08005cc5 	.word	0x08005cc5
 8005d7c:	200005f0 	.word	0x200005f0
 8005d80:	08005d05 	.word	0x08005d05
 8005d84:	08005c9d 	.word	0x08005c9d
 8005d88:	08005ced 	.word	0x08005ced

08005d8c <convertTicks>:

struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	099b      	lsrs	r3, r3, #6
 8005d98:	4a22      	ldr	r2, [pc, #136]	; (8005e24 <convertTicks+0x98>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	0993      	lsrs	r3, r2, #6
 8005da8:	491e      	ldr	r1, [pc, #120]	; (8005e24 <convertTicks+0x98>)
 8005daa:	fba1 1303 	umull	r1, r3, r1, r3
 8005dae:	089b      	lsrs	r3, r3, #2
 8005db0:	491d      	ldr	r1, [pc, #116]	; (8005e28 <convertTicks+0x9c>)
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <convertTicks+0xa0>)
 8005dba:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbe:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <convertTicks+0xa0>)
 8005dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dcc:	09db      	lsrs	r3, r3, #7
 8005dce:	f241 7170 	movw	r1, #6000	; 0x1770
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	4a15      	ldr	r2, [pc, #84]	; (8005e30 <convertTicks+0xa4>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	72bb      	strb	r3, [r7, #10]
		ticks%100
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	4b12      	ldr	r3, [pc, #72]	; (8005e30 <convertTicks+0xa4>)
 8005de8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	2164      	movs	r1, #100	; 0x64
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	7b3a      	ldrb	r2, [r7, #12]
 8005e02:	f362 0307 	bfi	r3, r2, #0, #8
 8005e06:	7b7a      	ldrb	r2, [r7, #13]
 8005e08:	f362 230f 	bfi	r3, r2, #8, #8
 8005e0c:	7bba      	ldrb	r2, [r7, #14]
 8005e0e:	f362 4317 	bfi	r3, r2, #16, #8
 8005e12:	7bfa      	ldrb	r2, [r7, #15]
 8005e14:	f362 631f 	bfi	r3, r2, #24, #8
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	002e9a77 	.word	0x002e9a77
 8005e28:	00057e40 	.word	0x00057e40
 8005e2c:	057619f1 	.word	0x057619f1
 8005e30:	51eb851f 	.word	0x51eb851f

08005e34 <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 8005e3e:	793b      	ldrb	r3, [r7, #4]
 8005e40:	4619      	mov	r1, r3
 8005e42:	797b      	ldrb	r3, [r7, #5]
 8005e44:	4618      	mov	r0, r3
 8005e46:	79bb      	ldrb	r3, [r7, #6]
 8005e48:	79fa      	ldrb	r2, [r7, #7]
 8005e4a:	9201      	str	r2, [sp, #4]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	4603      	mov	r3, r0
 8005e50:	460a      	mov	r2, r1
 8005e52:	4904      	ldr	r1, [pc, #16]	; (8005e64 <stwString+0x30>)
 8005e54:	6838      	ldr	r0, [r7, #0]
 8005e56:	f007 fb1f 	bl	800d498 <siprintf>
	return str;
 8005e5a:	683b      	ldr	r3, [r7, #0]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	08013e14 	.word	0x08013e14

08005e68 <updateStopwatch>:
void updateStopwatch(void){
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
	stw_val.hours = stwS.cnt/(100*60*60);
 8005e6c:	4b2a      	ldr	r3, [pc, #168]	; (8005f18 <updateStopwatch+0xb0>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005e74:	4a29      	ldr	r2, [pc, #164]	; (8005f1c <updateStopwatch+0xb4>)
 8005e76:	fb82 1203 	smull	r1, r2, r2, r3
 8005e7a:	1452      	asrs	r2, r2, #17
 8005e7c:	17db      	asrs	r3, r3, #31
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	4b27      	ldr	r3, [pc, #156]	; (8005f20 <updateStopwatch+0xb8>)
 8005e84:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
 8005e86:	4b24      	ldr	r3, [pc, #144]	; (8005f18 <updateStopwatch+0xb0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4b22      	ldr	r3, [pc, #136]	; (8005f1c <updateStopwatch+0xb4>)
 8005e92:	fb83 1302 	smull	r1, r3, r3, r2
 8005e96:	1459      	asrs	r1, r3, #17
 8005e98:	17d3      	asrs	r3, r2, #31
 8005e9a:	1acb      	subs	r3, r1, r3
 8005e9c:	4921      	ldr	r1, [pc, #132]	; (8005f24 <updateStopwatch+0xbc>)
 8005e9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	4a20      	ldr	r2, [pc, #128]	; (8005f28 <updateStopwatch+0xc0>)
 8005ea6:	fb82 1203 	smull	r1, r2, r2, r3
 8005eaa:	11d2      	asrs	r2, r2, #7
 8005eac:	17db      	asrs	r3, r3, #31
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <updateStopwatch+0xb8>)
 8005eb4:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%(60*100)/(100);
 8005eb6:	4b18      	ldr	r3, [pc, #96]	; (8005f18 <updateStopwatch+0xb0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <updateStopwatch+0xc0>)
 8005ec2:	fb83 1302 	smull	r1, r3, r3, r2
 8005ec6:	11d9      	asrs	r1, r3, #7
 8005ec8:	17d3      	asrs	r3, r2, #31
 8005eca:	1acb      	subs	r3, r1, r3
 8005ecc:	f241 7170 	movw	r1, #6000	; 0x1770
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <updateStopwatch+0xc4>)
 8005ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8005edc:	1152      	asrs	r2, r2, #5
 8005ede:	17db      	asrs	r3, r3, #31
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	4b0e      	ldr	r3, [pc, #56]	; (8005f20 <updateStopwatch+0xb8>)
 8005ee6:	709a      	strb	r2, [r3, #2]
	stw_val.csec = stwS.cnt%100;
 8005ee8:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <updateStopwatch+0xb0>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <updateStopwatch+0xc4>)
 8005ef4:	fb83 1302 	smull	r1, r3, r3, r2
 8005ef8:	1159      	asrs	r1, r3, #5
 8005efa:	17d3      	asrs	r3, r2, #31
 8005efc:	1acb      	subs	r3, r1, r3
 8005efe:	2164      	movs	r1, #100	; 0x64
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <updateStopwatch+0xb8>)
 8005f0a:	70da      	strb	r2, [r3, #3]
}
 8005f0c:	bf00      	nop
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	2000387c 	.word	0x2000387c
 8005f1c:	5d34edef 	.word	0x5d34edef
 8005f20:	20003a10 	.word	0x20003a10
 8005f24:	00057e40 	.word	0x00057e40
 8005f28:	057619f1 	.word	0x057619f1
 8005f2c:	51eb851f 	.word	0x51eb851f

08005f30 <stwSetup>:

void stwSetup(void){
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005f34:	f7ff feec 	bl	8005d10 <setDefaultClbcks>
}
 8005f38:	bf00      	nop
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 8005f3c:	b590      	push	{r4, r7, lr}
 8005f3e:	b091      	sub	sp, #68	; 0x44
 8005f40:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 8005f42:	2300      	movs	r3, #0
 8005f44:	623b      	str	r3, [r7, #32]
 8005f46:	2300      	movs	r3, #0
 8005f48:	84bb      	strh	r3, [r7, #36]	; 0x24
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8005f4a:	4b7c      	ldr	r3, [pc, #496]	; (800613c <stwMain+0x200>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4b7a      	ldr	r3, [pc, #488]	; (800613c <stwMain+0x200>)
 8005f52:	785b      	ldrb	r3, [r3, #1]
 8005f54:	f107 0020 	add.w	r0, r7, #32
 8005f58:	4979      	ldr	r1, [pc, #484]	; (8006140 <stwMain+0x204>)
 8005f5a:	f007 fa9d 	bl	800d498 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 8005f5e:	2314      	movs	r3, #20
 8005f60:	b29c      	uxth	r4, r3
 8005f62:	f107 0320 	add.w	r3, r7, #32
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fa f942 	bl	80001f0 <strlen>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	fb14 f303 	smulbb	r3, r4, r3
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8005f7a:	b298      	uxth	r0, r3
 8005f7c:	f107 0220 	add.w	r2, r7, #32
 8005f80:	4b70      	ldr	r3, [pc, #448]	; (8006144 <stwMain+0x208>)
 8005f82:	210a      	movs	r1, #10
 8005f84:	f7fc fa5a 	bl	800243c <lcdPutStr>

	updateStopwatch();
 8005f88:	f7ff ff6e 	bl	8005e68 <updateStopwatch>
	char tempStr2[30] = {0};
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	1d3b      	adds	r3, r7, #4
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	605a      	str	r2, [r3, #4]
 8005f98:	609a      	str	r2, [r3, #8]
 8005f9a:	60da      	str	r2, [r3, #12]
 8005f9c:	611a      	str	r2, [r3, #16]
 8005f9e:	615a      	str	r2, [r3, #20]
 8005fa0:	831a      	strh	r2, [r3, #24]
	if(stw_val.hours != 0){
 8005fa2:	4b69      	ldr	r3, [pc, #420]	; (8006148 <stwMain+0x20c>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <stwMain+0x7e>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 8005faa:	4b67      	ldr	r3, [pc, #412]	; (8006148 <stwMain+0x20c>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	463b      	mov	r3, r7
 8005fb2:	4966      	ldr	r1, [pc, #408]	; (800614c <stwMain+0x210>)
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f007 fa6f 	bl	800d498 <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 8005fba:	463a      	mov	r2, r7
 8005fbc:	4b61      	ldr	r3, [pc, #388]	; (8006144 <stwMain+0x208>)
 8005fbe:	215f      	movs	r1, #95	; 0x5f
 8005fc0:	2014      	movs	r0, #20
 8005fc2:	f7fc fa3b 	bl	800243c <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 8005fc6:	4b60      	ldr	r3, [pc, #384]	; (8006148 <stwMain+0x20c>)
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4b5e      	ldr	r3, [pc, #376]	; (8006148 <stwMain+0x20c>)
 8005fce:	789b      	ldrb	r3, [r3, #2]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4b5d      	ldr	r3, [pc, #372]	; (8006148 <stwMain+0x20c>)
 8005fd4:	78db      	ldrb	r3, [r3, #3]
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	495c      	ldr	r1, [pc, #368]	; (8006150 <stwMain+0x214>)
 8005fde:	f007 fa5b 	bl	800d498 <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 8005fe2:	2322      	movs	r3, #34	; 0x22
 8005fe4:	b29c      	uxth	r4, r3
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fa f901 	bl	80001f0 <strlen>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	fb14 f303 	smulbb	r3, r4, r3
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8005ffc:	b298      	uxth	r0, r3
 8005ffe:	463a      	mov	r2, r7
 8006000:	4b54      	ldr	r3, [pc, #336]	; (8006154 <stwMain+0x218>)
 8006002:	214c      	movs	r1, #76	; 0x4c
 8006004:	f7fc fa1a 	bl	800243c <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8006008:	2300      	movs	r3, #0
 800600a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800600e:	e08b      	b.n	8006128 <stwMain+0x1ec>
//		sprintf(&tempStr2, "%d. %d\"", i, stwT.stwArray[i]%(60*100)/100);
//		sprintf(&tempStr2, "%d. %s", i, stwString(convertTicks(stwT.stwArray[i])));
		if(stwT.stwArray[i] != 0){
 8006010:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006014:	4a50      	ldr	r2, [pc, #320]	; (8006158 <stwMain+0x21c>)
 8006016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d07f      	beq.n	800611e <stwMain+0x1e2>
			sprintf(&tempStr2, "Lap %d:", i+1);
 800601e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	463b      	mov	r3, r7
 8006026:	494d      	ldr	r1, [pc, #308]	; (800615c <stwMain+0x220>)
 8006028:	4618      	mov	r0, r3
 800602a:	f007 fa35 	bl	800d498 <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, font_12_zekton);
 800602e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	b2db      	uxtb	r3, r3
 8006036:	3b7e      	subs	r3, #126	; 0x7e
 8006038:	b2d9      	uxtb	r1, r3
 800603a:	463a      	mov	r2, r7
 800603c:	4b48      	ldr	r3, [pc, #288]	; (8006160 <stwMain+0x224>)
 800603e:	2000      	movs	r0, #0
 8006040:	f7fc f9fc 	bl	800243c <lcdPutStr>
			if(i>0){
 8006044:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006048:	2b00      	cmp	r3, #0
 800604a:	d022      	beq.n	8006092 <stwMain+0x156>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), font_12_zekton);
 800604c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	b2db      	uxtb	r3, r3
 8006054:	3b7e      	subs	r3, #126	; 0x7e
 8006056:	b2dc      	uxtb	r4, r3
 8006058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800605c:	4a3e      	ldr	r2, [pc, #248]	; (8006158 <stwMain+0x21c>)
 800605e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006062:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006066:	3b01      	subs	r3, #1
 8006068:	493b      	ldr	r1, [pc, #236]	; (8006158 <stwMain+0x21c>)
 800606a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff fe8b 	bl	8005d8c <convertTicks>
 8006076:	4603      	mov	r3, r0
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
 800607a:	463b      	mov	r3, r7
 800607c:	4619      	mov	r1, r3
 800607e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006080:	f7ff fed8 	bl	8005e34 <stwString>
 8006084:	4602      	mov	r2, r0
 8006086:	4b36      	ldr	r3, [pc, #216]	; (8006160 <stwMain+0x224>)
 8006088:	4621      	mov	r1, r4
 800608a:	2037      	movs	r0, #55	; 0x37
 800608c:	f7fc f9d6 	bl	800243c <lcdPutStr>
 8006090:	e01a      	b.n	80060c8 <stwMain+0x18c>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8006092:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	b2db      	uxtb	r3, r3
 800609a:	3b7e      	subs	r3, #126	; 0x7e
 800609c:	b2dc      	uxtb	r4, r3
 800609e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060a2:	4a2d      	ldr	r2, [pc, #180]	; (8006158 <stwMain+0x21c>)
 80060a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff fe6f 	bl	8005d8c <convertTicks>
 80060ae:	4603      	mov	r3, r0
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060b2:	463b      	mov	r3, r7
 80060b4:	4619      	mov	r1, r3
 80060b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060b8:	f7ff febc 	bl	8005e34 <stwString>
 80060bc:	4602      	mov	r2, r0
 80060be:	4b28      	ldr	r3, [pc, #160]	; (8006160 <stwMain+0x224>)
 80060c0:	4621      	mov	r1, r4
 80060c2:	2037      	movs	r0, #55	; 0x37
 80060c4:	f7fc f9ba 	bl	800243c <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 80060c8:	463b      	mov	r3, r7
 80060ca:	4926      	ldr	r1, [pc, #152]	; (8006164 <stwMain+0x228>)
 80060cc:	4618      	mov	r0, r3
 80060ce:	f007 f9e3 	bl	800d498 <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, font_12_zekton);
 80060d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	3b7e      	subs	r3, #126	; 0x7e
 80060dc:	b2d9      	uxtb	r1, r3
 80060de:	463a      	mov	r2, r7
 80060e0:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <stwMain+0x224>)
 80060e2:	20a5      	movs	r0, #165	; 0xa5
 80060e4:	f7fc f9aa 	bl	800243c <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 80060e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	3b7e      	subs	r3, #126	; 0x7e
 80060f2:	b2dc      	uxtb	r4, r3
 80060f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060f8:	4a17      	ldr	r2, [pc, #92]	; (8006158 <stwMain+0x21c>)
 80060fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff fe44 	bl	8005d8c <convertTicks>
 8006104:	4603      	mov	r3, r0
 8006106:	633b      	str	r3, [r7, #48]	; 0x30
 8006108:	463b      	mov	r3, r7
 800610a:	4619      	mov	r1, r3
 800610c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800610e:	f7ff fe91 	bl	8005e34 <stwString>
 8006112:	4602      	mov	r2, r0
 8006114:	4b12      	ldr	r3, [pc, #72]	; (8006160 <stwMain+0x224>)
 8006116:	4621      	mov	r1, r4
 8006118:	20e1      	movs	r0, #225	; 0xe1
 800611a:	f7fc f98f 	bl	800243c <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 800611e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006122:	3301      	adds	r3, #1
 8006124:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006128:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800612c:	2b06      	cmp	r3, #6
 800612e:	f67f af6f 	bls.w	8006010 <stwMain+0xd4>

//	sprintf(&tempStr2, "%d", stwS.cnt);
//	lcdPutStr(0, 130, tempStr2, zecton45font);
//	sprintf(&tempStr2, "%d", stwS.state);
//	lcdPutStr(0, 184, tempStr2, zecton45font);
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	373c      	adds	r7, #60	; 0x3c
 8006138:	46bd      	mov	sp, r7
 800613a:	bd90      	pop	{r4, r7, pc}
 800613c:	20003574 	.word	0x20003574
 8006140:	08013e28 	.word	0x08013e28
 8006144:	0801f3dc 	.word	0x0801f3dc
 8006148:	20003a10 	.word	0x20003a10
 800614c:	08013e34 	.word	0x08013e34
 8006150:	08013e3c 	.word	0x08013e3c
 8006154:	08021244 	.word	0x08021244
 8006158:	2000014c 	.word	0x2000014c
 800615c:	08013e4c 	.word	0x08013e4c
 8006160:	0801e954 	.word	0x0801e954
 8006164:	08013e54 	.word	0x08013e54

08006168 <setDefaultClbcks>:
#include "fonts/font_zekton12.h"
#include "fonts/zekton24.h"
#include "fonts/zekton84.h"
#include <fonts/zekton45.h>

static void setDefaultClbcks(void){
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <setDefaultClbcks+0x20>)
 800616e:	4a07      	ldr	r2, [pc, #28]	; (800618c <setDefaultClbcks+0x24>)
 8006170:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8006172:	4b07      	ldr	r3, [pc, #28]	; (8006190 <setDefaultClbcks+0x28>)
 8006174:	4a07      	ldr	r2, [pc, #28]	; (8006194 <setDefaultClbcks+0x2c>)
 8006176:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006178:	4b07      	ldr	r3, [pc, #28]	; (8006198 <setDefaultClbcks+0x30>)
 800617a:	4a08      	ldr	r2, [pc, #32]	; (800619c <setDefaultClbcks+0x34>)
 800617c:	611a      	str	r2, [r3, #16]
}
 800617e:	bf00      	nop
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	200005f0 	.word	0x200005f0
 800618c:	080041e5 	.word	0x080041e5
 8006190:	20000560 	.word	0x20000560
 8006194:	08001fa1 	.word	0x08001fa1
 8006198:	200005a8 	.word	0x200005a8
 800619c:	08001fb1 	.word	0x08001fb1

080061a0 <setTimeAction>:

static void setTimeAction(void){
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 80061a4:	4802      	ldr	r0, [pc, #8]	; (80061b0 <setTimeAction+0x10>)
 80061a6:	f7fb ff17 	bl	8001fd8 <guiApplyView>
}
 80061aa:	bf00      	nop
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	2000028c 	.word	0x2000028c

080061b4 <setDateAction>:
static void setDateAction(void){
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 80061b8:	4802      	ldr	r0, [pc, #8]	; (80061c4 <setDateAction+0x10>)
 80061ba:	f7fb ff0d 	bl	8001fd8 <guiApplyView>
}
 80061be:	bf00      	nop
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20000258 	.word	0x20000258

080061c8 <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80061cc:	f7ff ffcc 	bl	8006168 <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 80061d0:	4802      	ldr	r0, [pc, #8]	; (80061dc <faceSetup+0x14>)
 80061d2:	f7fd ff81 	bl	80040d8 <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 80061d6:	bf00      	nop
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	08006169 	.word	0x08006169

080061e0 <faceMain>:

void faceMain(void){
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b0b1      	sub	sp, #196	; 0xc4
 80061e4:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	605a      	str	r2, [r3, #4]
 80061f6:	609a      	str	r2, [r3, #8]
 80061f8:	60da      	str	r2, [r3, #12]
 80061fa:	611a      	str	r2, [r3, #16]
 80061fc:	615a      	str	r2, [r3, #20]
 80061fe:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 8006200:	4b83      	ldr	r3, [pc, #524]	; (8006410 <faceMain+0x230>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f7fa f9b9 	bl	800057c <__aeabi_f2d>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8006212:	4980      	ldr	r1, [pc, #512]	; (8006414 <faceMain+0x234>)
 8006214:	f007 f940 	bl	800d498 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8006218:	2314      	movs	r3, #20
 800621a:	b29c      	uxth	r4, r3
 800621c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006220:	4618      	mov	r0, r3
 8006222:	f7f9 ffe5 	bl	80001f0 <strlen>
 8006226:	4603      	mov	r3, r0
 8006228:	f1c3 030d 	rsb	r3, r3, #13
 800622c:	b29b      	uxth	r3, r3
 800622e:	fb14 f303 	smulbb	r3, r4, r3
 8006232:	b29b      	uxth	r3, r3
 8006234:	3323      	adds	r3, #35	; 0x23
 8006236:	b298      	uxth	r0, r3
 8006238:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800623c:	4b76      	ldr	r3, [pc, #472]	; (8006418 <faceMain+0x238>)
 800623e:	210e      	movs	r1, #14
 8006240:	f7fc f8fc 	bl	800243c <lcdPutStr>
	char baroStr[30] = {0};
 8006244:	2300      	movs	r3, #0
 8006246:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800624a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	605a      	str	r2, [r3, #4]
 8006254:	609a      	str	r2, [r3, #8]
 8006256:	60da      	str	r2, [r3, #12]
 8006258:	611a      	str	r2, [r3, #16]
 800625a:	615a      	str	r2, [r3, #20]
 800625c:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 800625e:	4b6c      	ldr	r3, [pc, #432]	; (8006410 <faceMain+0x230>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800641c <faceMain+0x23c>
 800626e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006272:	ee16 0a90 	vmov	r0, s13
 8006276:	f7fa f981 	bl	800057c <__aeabi_f2d>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8006282:	4967      	ldr	r1, [pc, #412]	; (8006420 <faceMain+0x240>)
 8006284:	f007 f908 	bl	800d498 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 8006288:	2314      	movs	r3, #20
 800628a:	b29c      	uxth	r4, r3
 800628c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006290:	4618      	mov	r0, r3
 8006292:	f7f9 ffad 	bl	80001f0 <strlen>
 8006296:	4603      	mov	r3, r0
 8006298:	f1c3 030d 	rsb	r3, r3, #13
 800629c:	b29b      	uxth	r3, r3
 800629e:	fb14 f303 	smulbb	r3, r4, r3
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3323      	adds	r3, #35	; 0x23
 80062a6:	b298      	uxth	r0, r3
 80062a8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80062ac:	4b5a      	ldr	r3, [pc, #360]	; (8006418 <faceMain+0x238>)
 80062ae:	212a      	movs	r1, #42	; 0x2a
 80062b0:	f7fc f8c4 	bl	800243c <lcdPutStr>

	char fracStr[30] = {0};
 80062b4:	2300      	movs	r3, #0
 80062b6:	663b      	str	r3, [r7, #96]	; 0x60
 80062b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	605a      	str	r2, [r3, #4]
 80062c2:	609a      	str	r2, [r3, #8]
 80062c4:	60da      	str	r2, [r3, #12]
 80062c6:	611a      	str	r2, [r3, #16]
 80062c8:	615a      	str	r2, [r3, #20]
 80062ca:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 80062cc:	2300      	movs	r3, #0
 80062ce:	643b      	str	r3, [r7, #64]	; 0x40
 80062d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	605a      	str	r2, [r3, #4]
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	60da      	str	r2, [r3, #12]
 80062de:	611a      	str	r2, [r3, #16]
 80062e0:	615a      	str	r2, [r3, #20]
 80062e2:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 80062e4:	2300      	movs	r3, #0
 80062e6:	623b      	str	r3, [r7, #32]
 80062e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	605a      	str	r2, [r3, #4]
 80062f2:	609a      	str	r2, [r3, #8]
 80062f4:	60da      	str	r2, [r3, #12]
 80062f6:	611a      	str	r2, [r3, #16]
 80062f8:	615a      	str	r2, [r3, #20]
 80062fa:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 80062fc:	4b49      	ldr	r3, [pc, #292]	; (8006424 <faceMain+0x244>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	461a      	mov	r2, r3
 8006302:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006306:	4948      	ldr	r1, [pc, #288]	; (8006428 <faceMain+0x248>)
 8006308:	4618      	mov	r0, r3
 800630a:	f007 f8c5 	bl	800d498 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 800630e:	4b45      	ldr	r3, [pc, #276]	; (8006424 <faceMain+0x244>)
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	461a      	mov	r2, r3
 8006314:	f107 0320 	add.w	r3, r7, #32
 8006318:	4943      	ldr	r1, [pc, #268]	; (8006428 <faceMain+0x248>)
 800631a:	4618      	mov	r0, r3
 800631c:	f007 f8bc 	bl	800d498 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 8006320:	4b40      	ldr	r3, [pc, #256]	; (8006424 <faceMain+0x244>)
 8006322:	789b      	ldrb	r3, [r3, #2]
 8006324:	461a      	mov	r2, r3
 8006326:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800632a:	493f      	ldr	r1, [pc, #252]	; (8006428 <faceMain+0x248>)
 800632c:	4618      	mov	r0, r3
 800632e:	f007 f8b3 	bl	800d498 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 8006332:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006336:	4b3d      	ldr	r3, [pc, #244]	; (800642c <faceMain+0x24c>)
 8006338:	214c      	movs	r1, #76	; 0x4c
 800633a:	2014      	movs	r0, #20
 800633c:	f7fc f87e 	bl	800243c <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 8006340:	f107 0220 	add.w	r2, r7, #32
 8006344:	4b39      	ldr	r3, [pc, #228]	; (800642c <faceMain+0x24c>)
 8006346:	214c      	movs	r1, #76	; 0x4c
 8006348:	20aa      	movs	r0, #170	; 0xaa
 800634a:	f7fc f877 	bl	800243c <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 800634e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006352:	4b37      	ldr	r3, [pc, #220]	; (8006430 <faceMain+0x250>)
 8006354:	214c      	movs	r1, #76	; 0x4c
 8006356:	f240 103b 	movw	r0, #315	; 0x13b
 800635a:	f7fc f86f 	bl	800243c <lcdPutStr>

	char buffString[30] = {0};
 800635e:	2300      	movs	r3, #0
 8006360:	603b      	str	r3, [r7, #0]
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	2200      	movs	r2, #0
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	609a      	str	r2, [r3, #8]
 800636c:	60da      	str	r2, [r3, #12]
 800636e:	611a      	str	r2, [r3, #16]
 8006370:	615a      	str	r2, [r3, #20]
 8006372:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8006374:	463b      	mov	r3, r7
 8006376:	492f      	ldr	r1, [pc, #188]	; (8006434 <faceMain+0x254>)
 8006378:	4618      	mov	r0, r3
 800637a:	f007 f88d 	bl	800d498 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 800637e:	4b2e      	ldr	r3, [pc, #184]	; (8006438 <faceMain+0x258>)
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	461a      	mov	r2, r3
 8006384:	4b2d      	ldr	r3, [pc, #180]	; (800643c <faceMain+0x25c>)
 8006386:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800638a:	4b2b      	ldr	r3, [pc, #172]	; (8006438 <faceMain+0x258>)
 800638c:	78db      	ldrb	r3, [r3, #3]
 800638e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006392:	4638      	mov	r0, r7
 8006394:	492a      	ldr	r1, [pc, #168]	; (8006440 <faceMain+0x260>)
 8006396:	f007 f87f 	bl	800d498 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 800639a:	2314      	movs	r3, #20
 800639c:	b29c      	uxth	r4, r3
 800639e:	463b      	mov	r3, r7
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7f9 ff25 	bl	80001f0 <strlen>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f1c3 030d 	rsb	r3, r3, #13
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	fb14 f303 	smulbb	r3, r4, r3
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3323      	adds	r3, #35	; 0x23
 80063b6:	b298      	uxth	r0, r3
 80063b8:	463a      	mov	r2, r7
 80063ba:	4b17      	ldr	r3, [pc, #92]	; (8006418 <faceMain+0x238>)
 80063bc:	21ae      	movs	r1, #174	; 0xae
 80063be:	f7fc f83d 	bl	800243c <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 80063c2:	4b1d      	ldr	r3, [pc, #116]	; (8006438 <faceMain+0x258>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <faceMain+0x264>)
 80063ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063ce:	4b1a      	ldr	r3, [pc, #104]	; (8006438 <faceMain+0x258>)
 80063d0:	789b      	ldrb	r3, [r3, #2]
 80063d2:	4638      	mov	r0, r7
 80063d4:	491a      	ldr	r1, [pc, #104]	; (8006440 <faceMain+0x260>)
 80063d6:	f007 f85f 	bl	800d498 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 80063da:	2314      	movs	r3, #20
 80063dc:	b29c      	uxth	r4, r3
 80063de:	463b      	mov	r3, r7
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7f9 ff05 	bl	80001f0 <strlen>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f1c3 030d 	rsb	r3, r3, #13
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	fb14 f303 	smulbb	r3, r4, r3
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3323      	adds	r3, #35	; 0x23
 80063f6:	b298      	uxth	r0, r3
 80063f8:	463a      	mov	r2, r7
 80063fa:	4b07      	ldr	r3, [pc, #28]	; (8006418 <faceMain+0x238>)
 80063fc:	21ca      	movs	r1, #202	; 0xca
 80063fe:	f7fc f81d 	bl	800243c <lcdPutStr>

	enableCntxMenu();
 8006402:	f7fd ff0b 	bl	800421c <enableCntxMenu>
}
 8006406:	bf00      	nop
 8006408:	37c4      	adds	r7, #196	; 0xc4
 800640a:	46bd      	mov	sp, r7
 800640c:	bd90      	pop	{r4, r7, pc}
 800640e:	bf00      	nop
 8006410:	20000550 	.word	0x20000550
 8006414:	08013f14 	.word	0x08013f14
 8006418:	0802688c 	.word	0x0802688c
 800641c:	42c80000 	.word	0x42c80000
 8006420:	08013f1c 	.word	0x08013f1c
 8006424:	20003574 	.word	0x20003574
 8006428:	08013f28 	.word	0x08013f28
 800642c:	080286f4 	.word	0x080286f4
 8006430:	0802a5ec 	.word	0x0802a5ec
 8006434:	08013f30 	.word	0x08013f30
 8006438:	20003588 	.word	0x20003588
 800643c:	200001a8 	.word	0x200001a8
 8006440:	08013f40 	.word	0x08013f40
 8006444:	20000188 	.word	0x20000188

08006448 <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <setDefaultClbcks+0x34>)
 800644e:	4a0c      	ldr	r2, [pc, #48]	; (8006480 <setDefaultClbcks+0x38>)
 8006450:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 8006452:	4b0c      	ldr	r3, [pc, #48]	; (8006484 <setDefaultClbcks+0x3c>)
 8006454:	4a0c      	ldr	r2, [pc, #48]	; (8006488 <setDefaultClbcks+0x40>)
 8006456:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8006458:	4b0c      	ldr	r3, [pc, #48]	; (800648c <setDefaultClbcks+0x44>)
 800645a:	4a0d      	ldr	r2, [pc, #52]	; (8006490 <setDefaultClbcks+0x48>)
 800645c:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 800645e:	4b0d      	ldr	r3, [pc, #52]	; (8006494 <setDefaultClbcks+0x4c>)
 8006460:	4a0d      	ldr	r2, [pc, #52]	; (8006498 <setDefaultClbcks+0x50>)
 8006462:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8006464:	4b0d      	ldr	r3, [pc, #52]	; (800649c <setDefaultClbcks+0x54>)
 8006466:	4a0e      	ldr	r2, [pc, #56]	; (80064a0 <setDefaultClbcks+0x58>)
 8006468:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 800646a:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <setDefaultClbcks+0x5c>)
 800646c:	4a0e      	ldr	r2, [pc, #56]	; (80064a8 <setDefaultClbcks+0x60>)
 800646e:	611a      	str	r2, [r3, #16]
}
 8006470:	bf00      	nop
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	20000614 	.word	0x20000614
 8006480:	080067b9 	.word	0x080067b9
 8006484:	200005f0 	.word	0x200005f0
 8006488:	08006679 	.word	0x08006679
 800648c:	200005cc 	.word	0x200005cc
 8006490:	080067c5 	.word	0x080067c5
 8006494:	20000560 	.word	0x20000560
 8006498:	08006731 	.word	0x08006731
 800649c:	20000584 	.word	0x20000584
 80064a0:	08006649 	.word	0x08006649
 80064a4:	200005a8 	.word	0x200005a8
 80064a8:	080066a9 	.word	0x080066a9

080064ac <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80064b0:	f7ff ffca 	bl	8006448 <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 80064b4:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <dateInputSetup+0x24>)
 80064b6:	789a      	ldrb	r2, [r3, #2]
 80064b8:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <dateInputSetup+0x28>)
 80064ba:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 80064bc:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <dateInputSetup+0x24>)
 80064be:	785a      	ldrb	r2, [r3, #1]
 80064c0:	4b04      	ldr	r3, [pc, #16]	; (80064d4 <dateInputSetup+0x28>)
 80064c2:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 80064c4:	4b02      	ldr	r3, [pc, #8]	; (80064d0 <dateInputSetup+0x24>)
 80064c6:	78da      	ldrb	r2, [r3, #3]
 80064c8:	4b02      	ldr	r3, [pc, #8]	; (80064d4 <dateInputSetup+0x28>)
 80064ca:	709a      	strb	r2, [r3, #2]
}
 80064cc:	bf00      	nop
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20003588 	.word	0x20003588
 80064d4:	20003a18 	.word	0x20003a18

080064d8 <dateInputMain>:

void dateInputMain(void){
 80064d8:	b590      	push	{r4, r7, lr}
 80064da:	b089      	sub	sp, #36	; 0x24
 80064dc:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 80064de:	2300      	movs	r3, #0
 80064e0:	603b      	str	r3, [r7, #0]
 80064e2:	1d3b      	adds	r3, r7, #4
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	605a      	str	r2, [r3, #4]
 80064ea:	609a      	str	r2, [r3, #8]
 80064ec:	60da      	str	r2, [r3, #12]
 80064ee:	611a      	str	r2, [r3, #16]
 80064f0:	615a      	str	r2, [r3, #20]
 80064f2:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 80064f4:	463b      	mov	r3, r7
 80064f6:	494a      	ldr	r1, [pc, #296]	; (8006620 <dateInputMain+0x148>)
 80064f8:	4618      	mov	r0, r3
 80064fa:	f006 ffcd 	bl	800d498 <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 80064fe:	4b49      	ldr	r3, [pc, #292]	; (8006624 <dateInputMain+0x14c>)
 8006500:	785b      	ldrb	r3, [r3, #1]
 8006502:	461a      	mov	r2, r3
 8006504:	4b48      	ldr	r3, [pc, #288]	; (8006628 <dateInputMain+0x150>)
 8006506:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800650a:	4b46      	ldr	r3, [pc, #280]	; (8006624 <dateInputMain+0x14c>)
 800650c:	789b      	ldrb	r3, [r3, #2]
 800650e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006512:	4638      	mov	r0, r7
 8006514:	4945      	ldr	r1, [pc, #276]	; (800662c <dateInputMain+0x154>)
 8006516:	f006 ffbf 	bl	800d498 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 800651a:	2314      	movs	r3, #20
 800651c:	b29c      	uxth	r4, r3
 800651e:	463b      	mov	r3, r7
 8006520:	4618      	mov	r0, r3
 8006522:	f7f9 fe65 	bl	80001f0 <strlen>
 8006526:	4603      	mov	r3, r0
 8006528:	f1c3 030d 	rsb	r3, r3, #13
 800652c:	b29b      	uxth	r3, r3
 800652e:	fb14 f303 	smulbb	r3, r4, r3
 8006532:	b29b      	uxth	r3, r3
 8006534:	3323      	adds	r3, #35	; 0x23
 8006536:	b298      	uxth	r0, r3
 8006538:	463a      	mov	r2, r7
 800653a:	4b3d      	ldr	r3, [pc, #244]	; (8006630 <dateInputMain+0x158>)
 800653c:	21ae      	movs	r1, #174	; 0xae
 800653e:	f7fb ff7d 	bl	800243c <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 8006542:	4b38      	ldr	r3, [pc, #224]	; (8006624 <dateInputMain+0x14c>)
 8006544:	7818      	ldrb	r0, [r3, #0]
 8006546:	4b37      	ldr	r3, [pc, #220]	; (8006624 <dateInputMain+0x14c>)
 8006548:	7859      	ldrb	r1, [r3, #1]
 800654a:	4b36      	ldr	r3, [pc, #216]	; (8006624 <dateInputMain+0x14c>)
 800654c:	789b      	ldrb	r3, [r3, #2]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006554:	b29b      	uxth	r3, r3
 8006556:	461a      	mov	r2, r3
 8006558:	f000 fbf6 	bl	8006d48 <zellerCongruence>
 800655c:	4603      	mov	r3, r0
 800655e:	461a      	mov	r2, r3
 8006560:	4b34      	ldr	r3, [pc, #208]	; (8006634 <dateInputMain+0x15c>)
 8006562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006566:	4b2f      	ldr	r3, [pc, #188]	; (8006624 <dateInputMain+0x14c>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	4638      	mov	r0, r7
 800656c:	492f      	ldr	r1, [pc, #188]	; (800662c <dateInputMain+0x154>)
 800656e:	f006 ff93 	bl	800d498 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8006572:	2314      	movs	r3, #20
 8006574:	b29c      	uxth	r4, r3
 8006576:	463b      	mov	r3, r7
 8006578:	4618      	mov	r0, r3
 800657a:	f7f9 fe39 	bl	80001f0 <strlen>
 800657e:	4603      	mov	r3, r0
 8006580:	f1c3 030d 	rsb	r3, r3, #13
 8006584:	b29b      	uxth	r3, r3
 8006586:	fb14 f303 	smulbb	r3, r4, r3
 800658a:	b29b      	uxth	r3, r3
 800658c:	3323      	adds	r3, #35	; 0x23
 800658e:	b298      	uxth	r0, r3
 8006590:	463a      	mov	r2, r7
 8006592:	4b27      	ldr	r3, [pc, #156]	; (8006630 <dateInputMain+0x158>)
 8006594:	21ca      	movs	r1, #202	; 0xca
 8006596:	f7fb ff51 	bl	800243c <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 800659a:	4b27      	ldr	r3, [pc, #156]	; (8006638 <dateInputMain+0x160>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	4b26      	ldr	r3, [pc, #152]	; (800663c <dateInputMain+0x164>)
 80065a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80065a6:	4618      	mov	r0, r3
 80065a8:	4b23      	ldr	r3, [pc, #140]	; (8006638 <dateInputMain+0x160>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	4b23      	ldr	r3, [pc, #140]	; (800663c <dateInputMain+0x164>)
 80065b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80065b4:	461a      	mov	r2, r3
 80065b6:	4b20      	ldr	r3, [pc, #128]	; (8006638 <dateInputMain+0x160>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	4619      	mov	r1, r3
 80065bc:	4b20      	ldr	r3, [pc, #128]	; (8006640 <dateInputMain+0x168>)
 80065be:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80065c2:	18d1      	adds	r1, r2, r3
 80065c4:	4b1c      	ldr	r3, [pc, #112]	; (8006638 <dateInputMain+0x160>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	4b1e      	ldr	r3, [pc, #120]	; (8006644 <dateInputMain+0x16c>)
 80065cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80065d0:	461a      	mov	r2, r3
 80065d2:	2301      	movs	r3, #1
 80065d4:	f7fc fb9c 	bl	8002d10 <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 80065d8:	4b17      	ldr	r3, [pc, #92]	; (8006638 <dateInputMain+0x160>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	4b17      	ldr	r3, [pc, #92]	; (800663c <dateInputMain+0x164>)
 80065e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80065e4:	4618      	mov	r0, r3
 80065e6:	4b14      	ldr	r3, [pc, #80]	; (8006638 <dateInputMain+0x160>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <dateInputMain+0x164>)
 80065ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80065f2:	461a      	mov	r2, r3
 80065f4:	4b10      	ldr	r3, [pc, #64]	; (8006638 <dateInputMain+0x160>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	4619      	mov	r1, r3
 80065fa:	4b11      	ldr	r3, [pc, #68]	; (8006640 <dateInputMain+0x168>)
 80065fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006600:	18d1      	adds	r1, r2, r3
 8006602:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <dateInputMain+0x160>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	4b0e      	ldr	r3, [pc, #56]	; (8006644 <dateInputMain+0x16c>)
 800660a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	2301      	movs	r3, #1
 8006612:	f7fc fb7d 	bl	8002d10 <lcdHLine>
}
 8006616:	bf00      	nop
 8006618:	3724      	adds	r7, #36	; 0x24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd90      	pop	{r4, r7, pc}
 800661e:	bf00      	nop
 8006620:	08014000 	.word	0x08014000
 8006624:	20003a18 	.word	0x20003a18
 8006628:	2000020c 	.word	0x2000020c
 800662c:	08014010 	.word	0x08014010
 8006630:	0802fcc4 	.word	0x0802fcc4
 8006634:	200001ec 	.word	0x200001ec
 8006638:	20003a14 	.word	0x20003a14
 800663c:	20000240 	.word	0x20000240
 8006640:	20000250 	.word	0x20000250
 8006644:	20000248 	.word	0x20000248

08006648 <cursorNext>:

static void cursorNext(void){
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 800664c:	4b09      	ldr	r3, [pc, #36]	; (8006674 <cursorNext+0x2c>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d806      	bhi.n	8006662 <cursorNext+0x1a>
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <cursorNext+0x2c>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	3301      	adds	r3, #1
 800665a:	b2da      	uxtb	r2, r3
 800665c:	4b05      	ldr	r3, [pc, #20]	; (8006674 <cursorNext+0x2c>)
 800665e:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 8006660:	e002      	b.n	8006668 <cursorNext+0x20>
	else curPosition = 0;
 8006662:	4b04      	ldr	r3, [pc, #16]	; (8006674 <cursorNext+0x2c>)
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]
}
 8006668:	bf00      	nop
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20003a14 	.word	0x20003a14

08006678 <cursorPrev>:
static void cursorPrev(void){
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 800667c:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <cursorPrev+0x2c>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d006      	beq.n	8006692 <cursorPrev+0x1a>
 8006684:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <cursorPrev+0x2c>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	3b01      	subs	r3, #1
 800668a:	b2da      	uxtb	r2, r3
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <cursorPrev+0x2c>)
 800668e:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 8006690:	e002      	b.n	8006698 <cursorPrev+0x20>
	else curPosition = 2;
 8006692:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <cursorPrev+0x2c>)
 8006694:	2202      	movs	r2, #2
 8006696:	701a      	strb	r2, [r3, #0]
}
 8006698:	bf00      	nop
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	20003a14 	.word	0x20003a14

080066a8 <increment>:
static void increment(void){
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
	switch(curPosition){
 80066ac:	4b1e      	ldr	r3, [pc, #120]	; (8006728 <increment+0x80>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d024      	beq.n	80066fe <increment+0x56>
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	dc31      	bgt.n	800671c <increment+0x74>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <increment+0x1a>
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d00f      	beq.n	80066e0 <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 80066c0:	e02c      	b.n	800671c <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 80066c2:	4b1a      	ldr	r3, [pc, #104]	; (800672c <increment+0x84>)
 80066c4:	785b      	ldrb	r3, [r3, #1]
 80066c6:	2b0b      	cmp	r3, #11
 80066c8:	d806      	bhi.n	80066d8 <increment+0x30>
 80066ca:	4b18      	ldr	r3, [pc, #96]	; (800672c <increment+0x84>)
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	3301      	adds	r3, #1
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	4b16      	ldr	r3, [pc, #88]	; (800672c <increment+0x84>)
 80066d4:	705a      	strb	r2, [r3, #1]
			break;
 80066d6:	e021      	b.n	800671c <increment+0x74>
			else valDatePos[1] = 1;
 80066d8:	4b14      	ldr	r3, [pc, #80]	; (800672c <increment+0x84>)
 80066da:	2201      	movs	r2, #1
 80066dc:	705a      	strb	r2, [r3, #1]
			break;
 80066de:	e01d      	b.n	800671c <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 80066e0:	4b12      	ldr	r3, [pc, #72]	; (800672c <increment+0x84>)
 80066e2:	789b      	ldrb	r3, [r3, #2]
 80066e4:	2b63      	cmp	r3, #99	; 0x63
 80066e6:	d806      	bhi.n	80066f6 <increment+0x4e>
 80066e8:	4b10      	ldr	r3, [pc, #64]	; (800672c <increment+0x84>)
 80066ea:	789b      	ldrb	r3, [r3, #2]
 80066ec:	3301      	adds	r3, #1
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	4b0e      	ldr	r3, [pc, #56]	; (800672c <increment+0x84>)
 80066f2:	709a      	strb	r2, [r3, #2]
			break;
 80066f4:	e012      	b.n	800671c <increment+0x74>
			else valDatePos[2] = 0;
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <increment+0x84>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	709a      	strb	r2, [r3, #2]
			break;
 80066fc:	e00e      	b.n	800671c <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 80066fe:	4b0b      	ldr	r3, [pc, #44]	; (800672c <increment+0x84>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b1e      	cmp	r3, #30
 8006704:	d806      	bhi.n	8006714 <increment+0x6c>
 8006706:	4b09      	ldr	r3, [pc, #36]	; (800672c <increment+0x84>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	3301      	adds	r3, #1
 800670c:	b2da      	uxtb	r2, r3
 800670e:	4b07      	ldr	r3, [pc, #28]	; (800672c <increment+0x84>)
 8006710:	701a      	strb	r2, [r3, #0]
			break;
 8006712:	e002      	b.n	800671a <increment+0x72>
			else valDatePos[0] = 1;
 8006714:	4b05      	ldr	r3, [pc, #20]	; (800672c <increment+0x84>)
 8006716:	2201      	movs	r2, #1
 8006718:	701a      	strb	r2, [r3, #0]
			break;
 800671a:	bf00      	nop
}
 800671c:	bf00      	nop
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20003a14 	.word	0x20003a14
 800672c:	20003a18 	.word	0x20003a18

08006730 <decrement>:
static void decrement(void){
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
	switch(curPosition){
 8006734:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <decrement+0x80>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d024      	beq.n	8006786 <decrement+0x56>
 800673c:	2b02      	cmp	r3, #2
 800673e:	dc31      	bgt.n	80067a4 <decrement+0x74>
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <decrement+0x1a>
 8006744:	2b01      	cmp	r3, #1
 8006746:	d00f      	beq.n	8006768 <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 8006748:	e02c      	b.n	80067a4 <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 800674a:	4b1a      	ldr	r3, [pc, #104]	; (80067b4 <decrement+0x84>)
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d006      	beq.n	8006760 <decrement+0x30>
 8006752:	4b18      	ldr	r3, [pc, #96]	; (80067b4 <decrement+0x84>)
 8006754:	785b      	ldrb	r3, [r3, #1]
 8006756:	3b01      	subs	r3, #1
 8006758:	b2da      	uxtb	r2, r3
 800675a:	4b16      	ldr	r3, [pc, #88]	; (80067b4 <decrement+0x84>)
 800675c:	705a      	strb	r2, [r3, #1]
				break;
 800675e:	e021      	b.n	80067a4 <decrement+0x74>
				else valDatePos[1] = 12;
 8006760:	4b14      	ldr	r3, [pc, #80]	; (80067b4 <decrement+0x84>)
 8006762:	220c      	movs	r2, #12
 8006764:	705a      	strb	r2, [r3, #1]
				break;
 8006766:	e01d      	b.n	80067a4 <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 8006768:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <decrement+0x84>)
 800676a:	789b      	ldrb	r3, [r3, #2]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d006      	beq.n	800677e <decrement+0x4e>
 8006770:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <decrement+0x84>)
 8006772:	789b      	ldrb	r3, [r3, #2]
 8006774:	3b01      	subs	r3, #1
 8006776:	b2da      	uxtb	r2, r3
 8006778:	4b0e      	ldr	r3, [pc, #56]	; (80067b4 <decrement+0x84>)
 800677a:	709a      	strb	r2, [r3, #2]
				break;
 800677c:	e012      	b.n	80067a4 <decrement+0x74>
				else valDatePos[2] = 100;
 800677e:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <decrement+0x84>)
 8006780:	2264      	movs	r2, #100	; 0x64
 8006782:	709a      	strb	r2, [r3, #2]
				break;
 8006784:	e00e      	b.n	80067a4 <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 8006786:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <decrement+0x84>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d906      	bls.n	800679c <decrement+0x6c>
 800678e:	4b09      	ldr	r3, [pc, #36]	; (80067b4 <decrement+0x84>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	3b01      	subs	r3, #1
 8006794:	b2da      	uxtb	r2, r3
 8006796:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <decrement+0x84>)
 8006798:	701a      	strb	r2, [r3, #0]
				break;
 800679a:	e002      	b.n	80067a2 <decrement+0x72>
				else valDatePos[0] = 31;
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <decrement+0x84>)
 800679e:	221f      	movs	r2, #31
 80067a0:	701a      	strb	r2, [r3, #0]
				break;
 80067a2:	bf00      	nop
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20003a14 	.word	0x20003a14
 80067b4:	20003a18 	.word	0x20003a18

080067b8 <exit>:
static void exit(void){
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
	applySelectedScreen();
 80067bc:	f7fb fc22 	bl	8002004 <applySelectedScreen>
}
 80067c0:	bf00      	nop
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <accept>:
static void accept(void){
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 80067c8:	4b15      	ldr	r3, [pc, #84]	; (8006820 <accept+0x5c>)
 80067ca:	785a      	ldrb	r2, [r3, #1]
 80067cc:	4b15      	ldr	r3, [pc, #84]	; (8006824 <accept+0x60>)
 80067ce:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 80067d0:	4b13      	ldr	r3, [pc, #76]	; (8006820 <accept+0x5c>)
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	4b13      	ldr	r3, [pc, #76]	; (8006824 <accept+0x60>)
 80067d6:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 80067d8:	4b11      	ldr	r3, [pc, #68]	; (8006820 <accept+0x5c>)
 80067da:	789a      	ldrb	r2, [r3, #2]
 80067dc:	4b11      	ldr	r3, [pc, #68]	; (8006824 <accept+0x60>)
 80067de:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 80067e0:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <accept+0x5c>)
 80067e2:	7818      	ldrb	r0, [r3, #0]
 80067e4:	4b0e      	ldr	r3, [pc, #56]	; (8006820 <accept+0x5c>)
 80067e6:	7859      	ldrb	r1, [r3, #1]
 80067e8:	4b0d      	ldr	r3, [pc, #52]	; (8006820 <accept+0x5c>)
 80067ea:	789b      	ldrb	r3, [r3, #2]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	f000 faa7 	bl	8006d48 <zellerCongruence>
 80067fa:	4603      	mov	r3, r0
 80067fc:	461a      	mov	r2, r3
 80067fe:	4b09      	ldr	r3, [pc, #36]	; (8006824 <accept+0x60>)
 8006800:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 8006802:	2200      	movs	r2, #0
 8006804:	4907      	ldr	r1, [pc, #28]	; (8006824 <accept+0x60>)
 8006806:	4808      	ldr	r0, [pc, #32]	; (8006828 <accept+0x64>)
 8006808:	f002 ff96 	bl	8009738 <HAL_RTC_SetDate>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <accept+0x52>
	{
	Error_Handler();
 8006812:	f7fc fd99 	bl	8003348 <Error_Handler>
	}
	exit();
 8006816:	f7ff ffcf 	bl	80067b8 <exit>
}
 800681a:	bf00      	nop
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20003a18 	.word	0x20003a18
 8006824:	20003588 	.word	0x20003588
 8006828:	20003804 	.word	0x20003804

0800682c <setDefaultClbcks>:
#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 8006830:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <setDefaultClbcks+0x34>)
 8006832:	4a0c      	ldr	r2, [pc, #48]	; (8006864 <setDefaultClbcks+0x38>)
 8006834:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 8006836:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <setDefaultClbcks+0x3c>)
 8006838:	4a0c      	ldr	r2, [pc, #48]	; (800686c <setDefaultClbcks+0x40>)
 800683a:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 800683c:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <setDefaultClbcks+0x44>)
 800683e:	4a0d      	ldr	r2, [pc, #52]	; (8006874 <setDefaultClbcks+0x48>)
 8006840:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <setDefaultClbcks+0x4c>)
 8006844:	4a0d      	ldr	r2, [pc, #52]	; (800687c <setDefaultClbcks+0x50>)
 8006846:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8006848:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <setDefaultClbcks+0x54>)
 800684a:	4a0e      	ldr	r2, [pc, #56]	; (8006884 <setDefaultClbcks+0x58>)
 800684c:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 800684e:	4b0e      	ldr	r3, [pc, #56]	; (8006888 <setDefaultClbcks+0x5c>)
 8006850:	4a0e      	ldr	r2, [pc, #56]	; (800688c <setDefaultClbcks+0x60>)
 8006852:	611a      	str	r2, [r3, #16]
}
 8006854:	bf00      	nop
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	20000614 	.word	0x20000614
 8006864:	08006bb1 	.word	0x08006bb1
 8006868:	200005f0 	.word	0x200005f0
 800686c:	080069f5 	.word	0x080069f5
 8006870:	200005cc 	.word	0x200005cc
 8006874:	08006bbd 	.word	0x08006bbd
 8006878:	20000560 	.word	0x20000560
 800687c:	08006ae1 	.word	0x08006ae1
 8006880:	20000584 	.word	0x20000584
 8006884:	080069c5 	.word	0x080069c5
 8006888:	200005a8 	.word	0x200005a8
 800688c:	08006a25 	.word	0x08006a25

08006890 <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006894:	f7ff ffca 	bl	800682c <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 8006898:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <timeInputSetup+0x24>)
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <timeInputSetup+0x28>)
 800689e:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 80068a0:	4b04      	ldr	r3, [pc, #16]	; (80068b4 <timeInputSetup+0x24>)
 80068a2:	785a      	ldrb	r2, [r3, #1]
 80068a4:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <timeInputSetup+0x28>)
 80068a6:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 80068a8:	4b02      	ldr	r3, [pc, #8]	; (80068b4 <timeInputSetup+0x24>)
 80068aa:	789a      	ldrb	r2, [r3, #2]
 80068ac:	4b02      	ldr	r3, [pc, #8]	; (80068b8 <timeInputSetup+0x28>)
 80068ae:	709a      	strb	r2, [r3, #2]
}
 80068b0:	bf00      	nop
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20003574 	.word	0x20003574
 80068b8:	20003a1c 	.word	0x20003a1c

080068bc <timeInputMain>:

void timeInputMain(void){
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 80068c2:	2300      	movs	r3, #0
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	1d3b      	adds	r3, r7, #4
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	605a      	str	r2, [r3, #4]
 80068ce:	609a      	str	r2, [r3, #8]
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	611a      	str	r2, [r3, #16]
 80068d4:	615a      	str	r2, [r3, #20]
 80068d6:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 80068d8:	4b33      	ldr	r3, [pc, #204]	; (80069a8 <timeInputMain+0xec>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	463b      	mov	r3, r7
 80068e0:	4932      	ldr	r1, [pc, #200]	; (80069ac <timeInputMain+0xf0>)
 80068e2:	4618      	mov	r0, r3
 80068e4:	f006 fdd8 	bl	800d498 <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 80068e8:	463a      	mov	r2, r7
 80068ea:	4b31      	ldr	r3, [pc, #196]	; (80069b0 <timeInputMain+0xf4>)
 80068ec:	214c      	movs	r1, #76	; 0x4c
 80068ee:	2014      	movs	r0, #20
 80068f0:	f7fb fda4 	bl	800243c <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 80068f4:	4b2c      	ldr	r3, [pc, #176]	; (80069a8 <timeInputMain+0xec>)
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	461a      	mov	r2, r3
 80068fa:	463b      	mov	r3, r7
 80068fc:	492b      	ldr	r1, [pc, #172]	; (80069ac <timeInputMain+0xf0>)
 80068fe:	4618      	mov	r0, r3
 8006900:	f006 fdca 	bl	800d498 <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 8006904:	463a      	mov	r2, r7
 8006906:	4b2a      	ldr	r3, [pc, #168]	; (80069b0 <timeInputMain+0xf4>)
 8006908:	214c      	movs	r1, #76	; 0x4c
 800690a:	20aa      	movs	r0, #170	; 0xaa
 800690c:	f7fb fd96 	bl	800243c <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 8006910:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <timeInputMain+0xf8>)
 8006912:	789b      	ldrb	r3, [r3, #2]
 8006914:	461a      	mov	r2, r3
 8006916:	463b      	mov	r3, r7
 8006918:	4924      	ldr	r1, [pc, #144]	; (80069ac <timeInputMain+0xf0>)
 800691a:	4618      	mov	r0, r3
 800691c:	f006 fdbc 	bl	800d498 <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 8006920:	463a      	mov	r2, r7
 8006922:	4b25      	ldr	r3, [pc, #148]	; (80069b8 <timeInputMain+0xfc>)
 8006924:	214c      	movs	r1, #76	; 0x4c
 8006926:	f240 103b 	movw	r0, #315	; 0x13b
 800692a:	f7fb fd87 	bl	800243c <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 800692e:	4b23      	ldr	r3, [pc, #140]	; (80069bc <timeInputMain+0x100>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	4b22      	ldr	r3, [pc, #136]	; (80069c0 <timeInputMain+0x104>)
 8006936:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800693a:	4618      	mov	r0, r3
 800693c:	4b1f      	ldr	r3, [pc, #124]	; (80069bc <timeInputMain+0x100>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	4b1f      	ldr	r3, [pc, #124]	; (80069c0 <timeInputMain+0x104>)
 8006944:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006948:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800694c:	2301      	movs	r3, #1
 800694e:	22af      	movs	r2, #175	; 0xaf
 8006950:	f7fc f9de 	bl	8002d10 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 8006954:	4b19      	ldr	r3, [pc, #100]	; (80069bc <timeInputMain+0x100>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	4b19      	ldr	r3, [pc, #100]	; (80069c0 <timeInputMain+0x104>)
 800695c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006960:	4618      	mov	r0, r3
 8006962:	4b16      	ldr	r3, [pc, #88]	; (80069bc <timeInputMain+0x100>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <timeInputMain+0x104>)
 800696a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800696e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006972:	2301      	movs	r3, #1
 8006974:	22b0      	movs	r2, #176	; 0xb0
 8006976:	f7fc f9cb 	bl	8002d10 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 800697a:	4b10      	ldr	r3, [pc, #64]	; (80069bc <timeInputMain+0x100>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <timeInputMain+0x104>)
 8006982:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006986:	4618      	mov	r0, r3
 8006988:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <timeInputMain+0x100>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <timeInputMain+0x104>)
 8006990:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006994:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006998:	2301      	movs	r3, #1
 800699a:	22b1      	movs	r2, #177	; 0xb1
 800699c:	f7fc f9b8 	bl	8002d10 <lcdHLine>
}
 80069a0:	bf00      	nop
 80069a2:	3720      	adds	r7, #32
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20003a1c 	.word	0x20003a1c
 80069ac:	080140d0 	.word	0x080140d0
 80069b0:	08031b2c 	.word	0x08031b2c
 80069b4:	20003574 	.word	0x20003574
 80069b8:	08033a24 	.word	0x08033a24
 80069bc:	20003a1b 	.word	0x20003a1b
 80069c0:	20000280 	.word	0x20000280

080069c4 <cursorNext>:

static void cursorNext(void){
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 80069c8:	4b09      	ldr	r3, [pc, #36]	; (80069f0 <cursorNext+0x2c>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d806      	bhi.n	80069de <cursorNext+0x1a>
 80069d0:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <cursorNext+0x2c>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	3301      	adds	r3, #1
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <cursorNext+0x2c>)
 80069da:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 80069dc:	e002      	b.n	80069e4 <cursorNext+0x20>
	else curPosition = 0;
 80069de:	4b04      	ldr	r3, [pc, #16]	; (80069f0 <cursorNext+0x2c>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	701a      	strb	r2, [r3, #0]
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20003a1b 	.word	0x20003a1b

080069f4 <cursorPrev>:
static void cursorPrev(void){
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <cursorPrev+0x2c>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d006      	beq.n	8006a0e <cursorPrev+0x1a>
 8006a00:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <cursorPrev+0x2c>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <cursorPrev+0x2c>)
 8006a0a:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 8006a0c:	e002      	b.n	8006a14 <cursorPrev+0x20>
	else curPosition = 4;
 8006a0e:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <cursorPrev+0x2c>)
 8006a10:	2204      	movs	r2, #4
 8006a12:	701a      	strb	r2, [r3, #0]
}
 8006a14:	bf00      	nop
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	20003a1b 	.word	0x20003a1b

08006a24 <increment>:
static void increment(void){
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
	switch(curPosition){
 8006a28:	4b2b      	ldr	r3, [pc, #172]	; (8006ad8 <increment+0xb4>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d84d      	bhi.n	8006acc <increment+0xa8>
 8006a30:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <increment+0x14>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006a4d 	.word	0x08006a4d
 8006a3c:	08006a6b 	.word	0x08006a6b
 8006a40:	08006a89 	.word	0x08006a89
 8006a44:	08006aa7 	.word	0x08006aa7
 8006a48:	08006ac5 	.word	0x08006ac5
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 8006a4c:	4b23      	ldr	r3, [pc, #140]	; (8006adc <increment+0xb8>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	2b0c      	cmp	r3, #12
 8006a52:	d806      	bhi.n	8006a62 <increment+0x3e>
 8006a54:	4b21      	ldr	r3, [pc, #132]	; (8006adc <increment+0xb8>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	330a      	adds	r3, #10
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	4b1f      	ldr	r3, [pc, #124]	; (8006adc <increment+0xb8>)
 8006a5e:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 8006a60:	e034      	b.n	8006acc <increment+0xa8>
			else valTimePos[0] = 20;
 8006a62:	4b1e      	ldr	r3, [pc, #120]	; (8006adc <increment+0xb8>)
 8006a64:	2214      	movs	r2, #20
 8006a66:	701a      	strb	r2, [r3, #0]
			break;
 8006a68:	e030      	b.n	8006acc <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 8006a6a:	4b1c      	ldr	r3, [pc, #112]	; (8006adc <increment+0xb8>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b17      	cmp	r3, #23
 8006a70:	d806      	bhi.n	8006a80 <increment+0x5c>
 8006a72:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <increment+0xb8>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	3301      	adds	r3, #1
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	4b18      	ldr	r3, [pc, #96]	; (8006adc <increment+0xb8>)
 8006a7c:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 8006a7e:	e025      	b.n	8006acc <increment+0xa8>
			else valTimePos[0] = 0;
 8006a80:	4b16      	ldr	r3, [pc, #88]	; (8006adc <increment+0xb8>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
			break;
 8006a86:	e021      	b.n	8006acc <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 8006a88:	4b14      	ldr	r3, [pc, #80]	; (8006adc <increment+0xb8>)
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	2b30      	cmp	r3, #48	; 0x30
 8006a8e:	d806      	bhi.n	8006a9e <increment+0x7a>
 8006a90:	4b12      	ldr	r3, [pc, #72]	; (8006adc <increment+0xb8>)
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	330a      	adds	r3, #10
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	4b10      	ldr	r3, [pc, #64]	; (8006adc <increment+0xb8>)
 8006a9a:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 8006a9c:	e016      	b.n	8006acc <increment+0xa8>
			else valTimePos[1] = 0;
 8006a9e:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <increment+0xb8>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	705a      	strb	r2, [r3, #1]
			break;
 8006aa4:	e012      	b.n	8006acc <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <increment+0xb8>)
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	2b3a      	cmp	r3, #58	; 0x3a
 8006aac:	d806      	bhi.n	8006abc <increment+0x98>
 8006aae:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <increment+0xb8>)
 8006ab0:	785b      	ldrb	r3, [r3, #1]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	4b09      	ldr	r3, [pc, #36]	; (8006adc <increment+0xb8>)
 8006ab8:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 8006aba:	e007      	b.n	8006acc <increment+0xa8>
			else valTimePos[1] = 0;
 8006abc:	4b07      	ldr	r3, [pc, #28]	; (8006adc <increment+0xb8>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	705a      	strb	r2, [r3, #1]
			break;
 8006ac2:	e003      	b.n	8006acc <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <increment+0xb8>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	709a      	strb	r2, [r3, #2]
			break;
 8006aca:	bf00      	nop
	}
}
 8006acc:	bf00      	nop
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	20003a1b 	.word	0x20003a1b
 8006adc:	20003a1c 	.word	0x20003a1c

08006ae0 <decrement>:
static void decrement(void){
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
	switch(curPosition){
 8006ae4:	4b2e      	ldr	r3, [pc, #184]	; (8006ba0 <decrement+0xc0>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d857      	bhi.n	8006b9c <decrement+0xbc>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <decrement+0x14>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b09 	.word	0x08006b09
 8006af8:	08006b27 	.word	0x08006b27
 8006afc:	08006b45 	.word	0x08006b45
 8006b00:	08006b63 	.word	0x08006b63
 8006b04:	08006b81 	.word	0x08006b81
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 8006b08:	4b26      	ldr	r3, [pc, #152]	; (8006ba4 <decrement+0xc4>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b09      	cmp	r3, #9
 8006b0e:	d906      	bls.n	8006b1e <decrement+0x3e>
 8006b10:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <decrement+0xc4>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	3b0a      	subs	r3, #10
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	4b22      	ldr	r3, [pc, #136]	; (8006ba4 <decrement+0xc4>)
 8006b1a:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 8006b1c:	e03e      	b.n	8006b9c <decrement+0xbc>
				else valTimePos[0] = 0;
 8006b1e:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <decrement+0xc4>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	701a      	strb	r2, [r3, #0]
				break;
 8006b24:	e03a      	b.n	8006b9c <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 8006b26:	4b1f      	ldr	r3, [pc, #124]	; (8006ba4 <decrement+0xc4>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d006      	beq.n	8006b3c <decrement+0x5c>
 8006b2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <decrement+0xc4>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <decrement+0xc4>)
 8006b38:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 8006b3a:	e02f      	b.n	8006b9c <decrement+0xbc>
				else valTimePos[0] = 23;
 8006b3c:	4b19      	ldr	r3, [pc, #100]	; (8006ba4 <decrement+0xc4>)
 8006b3e:	2217      	movs	r2, #23
 8006b40:	701a      	strb	r2, [r3, #0]
				break;
 8006b42:	e02b      	b.n	8006b9c <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 8006b44:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <decrement+0xc4>)
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	2b09      	cmp	r3, #9
 8006b4a:	d906      	bls.n	8006b5a <decrement+0x7a>
 8006b4c:	4b15      	ldr	r3, [pc, #84]	; (8006ba4 <decrement+0xc4>)
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	3b0a      	subs	r3, #10
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	4b13      	ldr	r3, [pc, #76]	; (8006ba4 <decrement+0xc4>)
 8006b56:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 8006b58:	e020      	b.n	8006b9c <decrement+0xbc>
				else valTimePos[1] = 0;
 8006b5a:	4b12      	ldr	r3, [pc, #72]	; (8006ba4 <decrement+0xc4>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	705a      	strb	r2, [r3, #1]
				break;
 8006b60:	e01c      	b.n	8006b9c <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 8006b62:	4b10      	ldr	r3, [pc, #64]	; (8006ba4 <decrement+0xc4>)
 8006b64:	785b      	ldrb	r3, [r3, #1]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d006      	beq.n	8006b78 <decrement+0x98>
 8006b6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ba4 <decrement+0xc4>)
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	4b0c      	ldr	r3, [pc, #48]	; (8006ba4 <decrement+0xc4>)
 8006b74:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 8006b76:	e011      	b.n	8006b9c <decrement+0xbc>
				else valTimePos[1] = 59;
 8006b78:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <decrement+0xc4>)
 8006b7a:	223b      	movs	r2, #59	; 0x3b
 8006b7c:	705a      	strb	r2, [r3, #1]
				break;
 8006b7e:	e00d      	b.n	8006b9c <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 8006b80:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <decrement+0xc8>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8006b86:	2200      	movs	r2, #0
 8006b88:	4907      	ldr	r1, [pc, #28]	; (8006ba8 <decrement+0xc8>)
 8006b8a:	4808      	ldr	r0, [pc, #32]	; (8006bac <decrement+0xcc>)
 8006b8c:	f002 fcdc 	bl	8009548 <HAL_RTC_SetTime>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <decrement+0xba>
					{
						Error_Handler();
 8006b96:	f7fc fbd7 	bl	8003348 <Error_Handler>
					}
				break;
 8006b9a:	bf00      	nop
		}
}
 8006b9c:	bf00      	nop
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20003a1b 	.word	0x20003a1b
 8006ba4:	20003a1c 	.word	0x20003a1c
 8006ba8:	20003574 	.word	0x20003574
 8006bac:	20003804 	.word	0x20003804

08006bb0 <exit>:
static void exit(void){
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
	applySelectedScreen();
 8006bb4:	f7fb fa26 	bl	8002004 <applySelectedScreen>
}
 8006bb8:	bf00      	nop
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <accept>:
static void accept(void){
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 8006bc0:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <accept+0x3c>)
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	4b0d      	ldr	r3, [pc, #52]	; (8006bfc <accept+0x40>)
 8006bc6:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 8006bc8:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <accept+0x3c>)
 8006bca:	785a      	ldrb	r2, [r3, #1]
 8006bcc:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <accept+0x40>)
 8006bce:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <accept+0x40>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006bd6:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <accept+0x40>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	4907      	ldr	r1, [pc, #28]	; (8006bfc <accept+0x40>)
 8006be0:	4807      	ldr	r0, [pc, #28]	; (8006c00 <accept+0x44>)
 8006be2:	f002 fcb1 	bl	8009548 <HAL_RTC_SetTime>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <accept+0x34>
	{
	Error_Handler();
 8006bec:	f7fc fbac 	bl	8003348 <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exit();
 8006bf0:	f7ff ffde 	bl	8006bb0 <exit>
}
 8006bf4:	bf00      	nop
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20003a1c 	.word	0x20003a1c
 8006bfc:	20003574 	.word	0x20003574
 8006c00:	20003804 	.word	0x20003804

08006c04 <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	887a      	ldrh	r2, [r7, #2]
 8006c14:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	895b      	ldrh	r3, [r3, #10]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f005 faef 	bl	800c200 <malloc>
 8006c22:	4603      	mov	r3, r0
 8006c24:	461a      	mov	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	80da      	strh	r2, [r3, #6]
}
 8006c3c:	bf00      	nop
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	891a      	ldrh	r2, [r3, #8]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	895b      	ldrh	r3, [r3, #10]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	bf0c      	ite	eq
 8006c58:	2301      	moveq	r3, #1
 8006c5a:	2300      	movne	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff ffe5 	bl	8006c44 <ring_buffer_full>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d022      	beq.n	8006cc6 <add_ovw_ring_buffer+0x5c>
		b->values[b->tail] = value;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	88db      	ldrh	r3, [r3, #6]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	88db      	ldrh	r3, [r3, #6]
 8006c94:	3301      	adds	r3, #1
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	8952      	ldrh	r2, [r2, #10]
 8006c9a:	fb93 f1f2 	sdiv	r1, r3, r2
 8006c9e:	fb01 f202 	mul.w	r2, r1, r2
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	889b      	ldrh	r3, [r3, #4]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	8952      	ldrh	r2, [r2, #10]
 8006cb4:	fb93 f1f2 	sdiv	r1, r3, r2
 8006cb8:	fb01 f202 	mul.w	r2, r1, r2
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	809a      	strh	r2, [r3, #4]
		b->values[b->tail] = value;
		b->num_entries++;
		b->tail = (b->tail + 1) % b->size;
		return 1;
	}
}
 8006cc4:	e01b      	b.n	8006cfe <add_ovw_ring_buffer+0x94>
		b->values[b->tail] = value;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	88db      	ldrh	r3, [r3, #6]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	891b      	ldrh	r3, [r3, #8]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	88db      	ldrh	r3, [r3, #6]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	8952      	ldrh	r2, [r2, #10]
 8006cec:	fb93 f1f2 	sdiv	r1, r3, r2
 8006cf0:	fb01 f202 	mul.w	r2, r1, r2
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	80da      	strh	r2, [r3, #6]
		return 1;
 8006cfc:	2301      	movs	r3, #1
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <read_nth_ring_buffer>:
int read_nth_ring_buffer(RingBuffer_t* b, uint16_t position){
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	807b      	strh	r3, [r7, #2]
	position += b->head;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	889a      	ldrh	r2, [r3, #4]
 8006d16:	887b      	ldrh	r3, [r7, #2]
 8006d18:	4413      	add	r3, r2
 8006d1a:	807b      	strh	r3, [r7, #2]
	position = position % b->size;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	895a      	ldrh	r2, [r3, #10]
 8006d20:	887b      	ldrh	r3, [r7, #2]
 8006d22:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d26:	fb01 f202 	mul.w	r2, r1, r2
 8006d2a:	1a9b      	subs	r3, r3, r2
 8006d2c:	807b      	strh	r3, [r7, #2]
	return(b->values[position]);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	887b      	ldrh	r3, [r7, #2]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	681b      	ldr	r3, [r3, #0]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
	...

08006d48 <zellerCongruence>:
 *      Author: wojch
 */

#include "timeUtils.h"

uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
 8006d52:	460b      	mov	r3, r1
 8006d54:	71bb      	strb	r3, [r7, #6]
 8006d56:	4613      	mov	r3, r2
 8006d58:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 8006d5a:	79bb      	ldrb	r3, [r7, #6]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d104      	bne.n	8006d6a <zellerCongruence+0x22>
	        month = 13;
 8006d60:	230d      	movs	r3, #13
 8006d62:	71bb      	strb	r3, [r7, #6]
	        year--;
 8006d64:	88bb      	ldrh	r3, [r7, #4]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 8006d6a:	79bb      	ldrb	r3, [r7, #6]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d104      	bne.n	8006d7a <zellerCongruence+0x32>
	        month = 14;
 8006d70:	230e      	movs	r3, #14
 8006d72:	71bb      	strb	r3, [r7, #6]
	        year--;
 8006d74:	88bb      	ldrh	r3, [r7, #4]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 8006d7e:	79bb      	ldrb	r3, [r7, #6]
 8006d80:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 8006d82:	88bb      	ldrh	r3, [r7, #4]
 8006d84:	4a29      	ldr	r2, [pc, #164]	; (8006e2c <zellerCongruence+0xe4>)
 8006d86:	fba2 1203 	umull	r1, r2, r2, r3
 8006d8a:	0952      	lsrs	r2, r2, #5
 8006d8c:	2164      	movs	r1, #100	; 0x64
 8006d8e:	fb01 f202 	mul.w	r2, r1, r2
 8006d92:	1a9b      	subs	r3, r3, r2
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 8006d98:	88bb      	ldrh	r3, [r7, #4]
 8006d9a:	4a24      	ldr	r2, [pc, #144]	; (8006e2c <zellerCongruence+0xe4>)
 8006d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8006da6:	7bf9      	ldrb	r1, [r7, #15]
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	4613      	mov	r3, r2
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	4a1e      	ldr	r2, [pc, #120]	; (8006e30 <zellerCongruence+0xe8>)
 8006db8:	fb82 0203 	smull	r0, r2, r2, r3
 8006dbc:	1052      	asrs	r2, r2, #1
 8006dbe:	17db      	asrs	r3, r3, #31
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	18ca      	adds	r2, r1, r3
 8006dc4:	7b7b      	ldrb	r3, [r7, #13]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	7b7a      	ldrb	r2, [r7, #13]
 8006dca:	0892      	lsrs	r2, r2, #2
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 8006dd0:	7b3a      	ldrb	r2, [r7, #12]
 8006dd2:	0892      	lsrs	r2, r2, #2
 8006dd4:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8006dd6:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 8006dd8:	7b3a      	ldrb	r2, [r7, #12]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8006de0:	440b      	add	r3, r1
 8006de2:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	4b13      	ldr	r3, [pc, #76]	; (8006e34 <zellerCongruence+0xec>)
 8006de8:	fb83 1302 	smull	r1, r3, r3, r2
 8006dec:	4413      	add	r3, r2
 8006dee:	1099      	asrs	r1, r3, #2
 8006df0:	17d3      	asrs	r3, r2, #31
 8006df2:	1ac9      	subs	r1, r1, r3
 8006df4:	460b      	mov	r3, r1
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	1a5b      	subs	r3, r3, r1
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	1d5a      	adds	r2, r3, #5
 8006e02:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <zellerCongruence+0xec>)
 8006e04:	fb83 1302 	smull	r1, r3, r3, r2
 8006e08:	4413      	add	r3, r2
 8006e0a:	1099      	asrs	r1, r3, #2
 8006e0c:	17d3      	asrs	r3, r2, #31
 8006e0e:	1ac9      	subs	r1, r1, r3
 8006e10:	460b      	mov	r3, r1
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	1a5b      	subs	r3, r3, r1
 8006e16:	1ad1      	subs	r1, r2, r3
 8006e18:	b2cb      	uxtb	r3, r1
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	b2db      	uxtb	r3, r3
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	51eb851f 	.word	0x51eb851f
 8006e30:	66666667 	.word	0x66666667
 8006e34:	92492493 	.word	0x92492493

08006e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e70 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006e3c:	480d      	ldr	r0, [pc, #52]	; (8006e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006e3e:	490e      	ldr	r1, [pc, #56]	; (8006e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006e40:	4a0e      	ldr	r2, [pc, #56]	; (8006e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e44:	e002      	b.n	8006e4c <LoopCopyDataInit>

08006e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e4a:	3304      	adds	r3, #4

08006e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e50:	d3f9      	bcc.n	8006e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e52:	4a0b      	ldr	r2, [pc, #44]	; (8006e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006e54:	4c0b      	ldr	r4, [pc, #44]	; (8006e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e58:	e001      	b.n	8006e5e <LoopFillZerobss>

08006e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e5c:	3204      	adds	r2, #4

08006e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e60:	d3fb      	bcc.n	8006e5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006e62:	f7fc fc6b 	bl	800373c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e66:	f005 f9a7 	bl	800c1b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e6a:	f7fc f92b 	bl	80030c4 <main>
  bx  lr    
 8006e6e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006e70:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e78:	200004f0 	.word	0x200004f0
  ldr r2, =_sidata
 8006e7c:	08039ab0 	.word	0x08039ab0
  ldr r2, =_sbss
 8006e80:	200004f0 	.word	0x200004f0
  ldr r4, =_ebss
 8006e84:	20003a64 	.word	0x20003a64

08006e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e88:	e7fe      	b.n	8006e88 <ADC_IRQHandler>
	...

08006e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e90:	4b0e      	ldr	r3, [pc, #56]	; (8006ecc <HAL_Init+0x40>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a0d      	ldr	r2, [pc, #52]	; (8006ecc <HAL_Init+0x40>)
 8006e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <HAL_Init+0x40>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <HAL_Init+0x40>)
 8006ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ea8:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <HAL_Init+0x40>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a07      	ldr	r2, [pc, #28]	; (8006ecc <HAL_Init+0x40>)
 8006eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006eb4:	2003      	movs	r0, #3
 8006eb6:	f000 f94f 	bl	8007158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006eba:	2000      	movs	r0, #0
 8006ebc:	f000 f808 	bl	8006ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ec0:	f7fc fb28 	bl	8003514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	40023c00 	.word	0x40023c00

08006ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ed8:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <HAL_InitTick+0x54>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <HAL_InitTick+0x58>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 f967 	bl	80071c2 <HAL_SYSTICK_Config>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e00e      	b.n	8006f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b0f      	cmp	r3, #15
 8006f02:	d80a      	bhi.n	8006f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f04:	2200      	movs	r2, #0
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0c:	f000 f92f 	bl	800716e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f10:	4a06      	ldr	r2, [pc, #24]	; (8006f2c <HAL_InitTick+0x5c>)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	e000      	b.n	8006f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000180 	.word	0x20000180
 8006f28:	200002b8 	.word	0x200002b8
 8006f2c:	200002b4 	.word	0x200002b4

08006f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f34:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <HAL_IncTick+0x20>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4b06      	ldr	r3, [pc, #24]	; (8006f54 <HAL_IncTick+0x24>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4413      	add	r3, r2
 8006f40:	4a04      	ldr	r2, [pc, #16]	; (8006f54 <HAL_IncTick+0x24>)
 8006f42:	6013      	str	r3, [r2, #0]
}
 8006f44:	bf00      	nop
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	200002b8 	.word	0x200002b8
 8006f54:	20003a20 	.word	0x20003a20

08006f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8006f5c:	4b03      	ldr	r3, [pc, #12]	; (8006f6c <HAL_GetTick+0x14>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20003a20 	.word	0x20003a20

08006f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f78:	f7ff ffee 	bl	8006f58 <HAL_GetTick>
 8006f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f88:	d005      	beq.n	8006f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f8a:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <HAL_Delay+0x44>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f96:	bf00      	nop
 8006f98:	f7ff ffde 	bl	8006f58 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d8f7      	bhi.n	8006f98 <HAL_Delay+0x28>
  {
  }
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200002b8 	.word	0x200002b8

08006fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fc8:	4b0c      	ldr	r3, [pc, #48]	; (8006ffc <__NVIC_SetPriorityGrouping+0x44>)
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fea:	4a04      	ldr	r2, [pc, #16]	; (8006ffc <__NVIC_SetPriorityGrouping+0x44>)
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	60d3      	str	r3, [r2, #12]
}
 8006ff0:	bf00      	nop
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	e000ed00 	.word	0xe000ed00

08007000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007004:	4b04      	ldr	r3, [pc, #16]	; (8007018 <__NVIC_GetPriorityGrouping+0x18>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	0a1b      	lsrs	r3, r3, #8
 800700a:	f003 0307 	and.w	r3, r3, #7
}
 800700e:	4618      	mov	r0, r3
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	e000ed00 	.word	0xe000ed00

0800701c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800702a:	2b00      	cmp	r3, #0
 800702c:	db0b      	blt.n	8007046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	f003 021f 	and.w	r2, r3, #31
 8007034:	4907      	ldr	r1, [pc, #28]	; (8007054 <__NVIC_EnableIRQ+0x38>)
 8007036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	2001      	movs	r0, #1
 800703e:	fa00 f202 	lsl.w	r2, r0, r2
 8007042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	e000e100 	.word	0xe000e100

08007058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	6039      	str	r1, [r7, #0]
 8007062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007068:	2b00      	cmp	r3, #0
 800706a:	db0a      	blt.n	8007082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	b2da      	uxtb	r2, r3
 8007070:	490c      	ldr	r1, [pc, #48]	; (80070a4 <__NVIC_SetPriority+0x4c>)
 8007072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007076:	0112      	lsls	r2, r2, #4
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	440b      	add	r3, r1
 800707c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007080:	e00a      	b.n	8007098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	b2da      	uxtb	r2, r3
 8007086:	4908      	ldr	r1, [pc, #32]	; (80070a8 <__NVIC_SetPriority+0x50>)
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	3b04      	subs	r3, #4
 8007090:	0112      	lsls	r2, r2, #4
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	440b      	add	r3, r1
 8007096:	761a      	strb	r2, [r3, #24]
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	e000e100 	.word	0xe000e100
 80070a8:	e000ed00 	.word	0xe000ed00

080070ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b089      	sub	sp, #36	; 0x24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f1c3 0307 	rsb	r3, r3, #7
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	bf28      	it	cs
 80070ca:	2304      	movcs	r3, #4
 80070cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	3304      	adds	r3, #4
 80070d2:	2b06      	cmp	r3, #6
 80070d4:	d902      	bls.n	80070dc <NVIC_EncodePriority+0x30>
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	3b03      	subs	r3, #3
 80070da:	e000      	b.n	80070de <NVIC_EncodePriority+0x32>
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070e0:	f04f 32ff 	mov.w	r2, #4294967295
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	43da      	mvns	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	401a      	ands	r2, r3
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070f4:	f04f 31ff 	mov.w	r1, #4294967295
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	fa01 f303 	lsl.w	r3, r1, r3
 80070fe:	43d9      	mvns	r1, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007104:	4313      	orrs	r3, r2
         );
}
 8007106:	4618      	mov	r0, r3
 8007108:	3724      	adds	r7, #36	; 0x24
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3b01      	subs	r3, #1
 8007120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007124:	d301      	bcc.n	800712a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007126:	2301      	movs	r3, #1
 8007128:	e00f      	b.n	800714a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800712a:	4a0a      	ldr	r2, [pc, #40]	; (8007154 <SysTick_Config+0x40>)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3b01      	subs	r3, #1
 8007130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007132:	210f      	movs	r1, #15
 8007134:	f04f 30ff 	mov.w	r0, #4294967295
 8007138:	f7ff ff8e 	bl	8007058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <SysTick_Config+0x40>)
 800713e:	2200      	movs	r2, #0
 8007140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007142:	4b04      	ldr	r3, [pc, #16]	; (8007154 <SysTick_Config+0x40>)
 8007144:	2207      	movs	r2, #7
 8007146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	e000e010 	.word	0xe000e010

08007158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff ff29 	bl	8006fb8 <__NVIC_SetPriorityGrouping>
}
 8007166:	bf00      	nop
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800716e:	b580      	push	{r7, lr}
 8007170:	b086      	sub	sp, #24
 8007172:	af00      	add	r7, sp, #0
 8007174:	4603      	mov	r3, r0
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	607a      	str	r2, [r7, #4]
 800717a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007180:	f7ff ff3e 	bl	8007000 <__NVIC_GetPriorityGrouping>
 8007184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	6978      	ldr	r0, [r7, #20]
 800718c:	f7ff ff8e 	bl	80070ac <NVIC_EncodePriority>
 8007190:	4602      	mov	r2, r0
 8007192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007196:	4611      	mov	r1, r2
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff ff5d 	bl	8007058 <__NVIC_SetPriority>
}
 800719e:	bf00      	nop
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	4603      	mov	r3, r0
 80071ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff ff31 	bl	800701c <__NVIC_EnableIRQ>
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff ffa2 	bl	8007114 <SysTick_Config>
 80071d0:	4603      	mov	r3, r0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80071e8:	f7ff feb6 	bl	8006f58 <HAL_GetTick>
 80071ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d008      	beq.n	800720c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2280      	movs	r2, #128	; 0x80
 80071fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e052      	b.n	80072b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0216 	bic.w	r2, r2, #22
 800721a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695a      	ldr	r2, [r3, #20]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800722a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d103      	bne.n	800723c <HAL_DMA_Abort+0x62>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007238:	2b00      	cmp	r3, #0
 800723a:	d007      	beq.n	800724c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0208 	bic.w	r2, r2, #8
 800724a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0201 	bic.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800725c:	e013      	b.n	8007286 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800725e:	f7ff fe7b 	bl	8006f58 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b05      	cmp	r3, #5
 800726a:	d90c      	bls.n	8007286 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2203      	movs	r2, #3
 8007276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e015      	b.n	80072b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e4      	bne.n	800725e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007298:	223f      	movs	r2, #63	; 0x3f
 800729a:	409a      	lsls	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d004      	beq.n	80072d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2280      	movs	r2, #128	; 0x80
 80072d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e00c      	b.n	80072f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2205      	movs	r2, #5
 80072dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0201 	bic.w	r2, r2, #1
 80072ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
	...

08007300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007300:	b480      	push	{r7}
 8007302:	b089      	sub	sp, #36	; 0x24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800730e:	2300      	movs	r3, #0
 8007310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007312:	2300      	movs	r3, #0
 8007314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007316:	2300      	movs	r3, #0
 8007318:	61fb      	str	r3, [r7, #28]
 800731a:	e177      	b.n	800760c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800731c:	2201      	movs	r2, #1
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	fa02 f303 	lsl.w	r3, r2, r3
 8007324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4013      	ands	r3, r2
 800732e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	429a      	cmp	r2, r3
 8007336:	f040 8166 	bne.w	8007606 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	2b01      	cmp	r3, #1
 8007344:	d005      	beq.n	8007352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800734e:	2b02      	cmp	r3, #2
 8007350:	d130      	bne.n	80073b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	2203      	movs	r2, #3
 800735e:	fa02 f303 	lsl.w	r3, r2, r3
 8007362:	43db      	mvns	r3, r3
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	4013      	ands	r3, r2
 8007368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	005b      	lsls	r3, r3, #1
 8007372:	fa02 f303 	lsl.w	r3, r2, r3
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	4313      	orrs	r3, r2
 800737a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007388:	2201      	movs	r2, #1
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	43db      	mvns	r3, r3
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	4013      	ands	r3, r2
 8007396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	091b      	lsrs	r3, r3, #4
 800739e:	f003 0201 	and.w	r2, r3, #1
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	fa02 f303 	lsl.w	r3, r2, r3
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d017      	beq.n	80073f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	2203      	movs	r2, #3
 80073cc:	fa02 f303 	lsl.w	r3, r2, r3
 80073d0:	43db      	mvns	r3, r3
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	4013      	ands	r3, r2
 80073d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	fa02 f303 	lsl.w	r3, r2, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d123      	bne.n	8007444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	08da      	lsrs	r2, r3, #3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3208      	adds	r2, #8
 8007404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	220f      	movs	r2, #15
 8007414:	fa02 f303 	lsl.w	r3, r2, r3
 8007418:	43db      	mvns	r3, r3
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	4013      	ands	r3, r2
 800741e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	fa02 f303 	lsl.w	r3, r2, r3
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	4313      	orrs	r3, r2
 8007434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	08da      	lsrs	r2, r3, #3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3208      	adds	r2, #8
 800743e:	69b9      	ldr	r1, [r7, #24]
 8007440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	2203      	movs	r2, #3
 8007450:	fa02 f303 	lsl.w	r3, r2, r3
 8007454:	43db      	mvns	r3, r3
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	4013      	ands	r3, r2
 800745a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f003 0203 	and.w	r2, r3, #3
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	fa02 f303 	lsl.w	r3, r2, r3
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	4313      	orrs	r3, r2
 8007470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 80c0 	beq.w	8007606 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	4b66      	ldr	r3, [pc, #408]	; (8007624 <HAL_GPIO_Init+0x324>)
 800748c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748e:	4a65      	ldr	r2, [pc, #404]	; (8007624 <HAL_GPIO_Init+0x324>)
 8007490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007494:	6453      	str	r3, [r2, #68]	; 0x44
 8007496:	4b63      	ldr	r3, [pc, #396]	; (8007624 <HAL_GPIO_Init+0x324>)
 8007498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074a2:	4a61      	ldr	r2, [pc, #388]	; (8007628 <HAL_GPIO_Init+0x328>)
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	089b      	lsrs	r3, r3, #2
 80074a8:	3302      	adds	r3, #2
 80074aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	220f      	movs	r2, #15
 80074ba:	fa02 f303 	lsl.w	r3, r2, r3
 80074be:	43db      	mvns	r3, r3
 80074c0:	69ba      	ldr	r2, [r7, #24]
 80074c2:	4013      	ands	r3, r2
 80074c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a58      	ldr	r2, [pc, #352]	; (800762c <HAL_GPIO_Init+0x32c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d037      	beq.n	800753e <HAL_GPIO_Init+0x23e>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a57      	ldr	r2, [pc, #348]	; (8007630 <HAL_GPIO_Init+0x330>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d031      	beq.n	800753a <HAL_GPIO_Init+0x23a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a56      	ldr	r2, [pc, #344]	; (8007634 <HAL_GPIO_Init+0x334>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d02b      	beq.n	8007536 <HAL_GPIO_Init+0x236>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a55      	ldr	r2, [pc, #340]	; (8007638 <HAL_GPIO_Init+0x338>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d025      	beq.n	8007532 <HAL_GPIO_Init+0x232>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a54      	ldr	r2, [pc, #336]	; (800763c <HAL_GPIO_Init+0x33c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d01f      	beq.n	800752e <HAL_GPIO_Init+0x22e>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a53      	ldr	r2, [pc, #332]	; (8007640 <HAL_GPIO_Init+0x340>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d019      	beq.n	800752a <HAL_GPIO_Init+0x22a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a52      	ldr	r2, [pc, #328]	; (8007644 <HAL_GPIO_Init+0x344>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d013      	beq.n	8007526 <HAL_GPIO_Init+0x226>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a51      	ldr	r2, [pc, #324]	; (8007648 <HAL_GPIO_Init+0x348>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00d      	beq.n	8007522 <HAL_GPIO_Init+0x222>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a50      	ldr	r2, [pc, #320]	; (800764c <HAL_GPIO_Init+0x34c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d007      	beq.n	800751e <HAL_GPIO_Init+0x21e>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a4f      	ldr	r2, [pc, #316]	; (8007650 <HAL_GPIO_Init+0x350>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d101      	bne.n	800751a <HAL_GPIO_Init+0x21a>
 8007516:	2309      	movs	r3, #9
 8007518:	e012      	b.n	8007540 <HAL_GPIO_Init+0x240>
 800751a:	230a      	movs	r3, #10
 800751c:	e010      	b.n	8007540 <HAL_GPIO_Init+0x240>
 800751e:	2308      	movs	r3, #8
 8007520:	e00e      	b.n	8007540 <HAL_GPIO_Init+0x240>
 8007522:	2307      	movs	r3, #7
 8007524:	e00c      	b.n	8007540 <HAL_GPIO_Init+0x240>
 8007526:	2306      	movs	r3, #6
 8007528:	e00a      	b.n	8007540 <HAL_GPIO_Init+0x240>
 800752a:	2305      	movs	r3, #5
 800752c:	e008      	b.n	8007540 <HAL_GPIO_Init+0x240>
 800752e:	2304      	movs	r3, #4
 8007530:	e006      	b.n	8007540 <HAL_GPIO_Init+0x240>
 8007532:	2303      	movs	r3, #3
 8007534:	e004      	b.n	8007540 <HAL_GPIO_Init+0x240>
 8007536:	2302      	movs	r3, #2
 8007538:	e002      	b.n	8007540 <HAL_GPIO_Init+0x240>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <HAL_GPIO_Init+0x240>
 800753e:	2300      	movs	r3, #0
 8007540:	69fa      	ldr	r2, [r7, #28]
 8007542:	f002 0203 	and.w	r2, r2, #3
 8007546:	0092      	lsls	r2, r2, #2
 8007548:	4093      	lsls	r3, r2
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	4313      	orrs	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007550:	4935      	ldr	r1, [pc, #212]	; (8007628 <HAL_GPIO_Init+0x328>)
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	089b      	lsrs	r3, r3, #2
 8007556:	3302      	adds	r3, #2
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800755e:	4b3d      	ldr	r3, [pc, #244]	; (8007654 <HAL_GPIO_Init+0x354>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	43db      	mvns	r3, r3
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	4013      	ands	r3, r2
 800756c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007582:	4a34      	ldr	r2, [pc, #208]	; (8007654 <HAL_GPIO_Init+0x354>)
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007588:	4b32      	ldr	r3, [pc, #200]	; (8007654 <HAL_GPIO_Init+0x354>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	43db      	mvns	r3, r3
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	4013      	ands	r3, r2
 8007596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80075ac:	4a29      	ldr	r2, [pc, #164]	; (8007654 <HAL_GPIO_Init+0x354>)
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80075b2:	4b28      	ldr	r3, [pc, #160]	; (8007654 <HAL_GPIO_Init+0x354>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	43db      	mvns	r3, r3
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	4013      	ands	r3, r2
 80075c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80075d6:	4a1f      	ldr	r2, [pc, #124]	; (8007654 <HAL_GPIO_Init+0x354>)
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80075dc:	4b1d      	ldr	r3, [pc, #116]	; (8007654 <HAL_GPIO_Init+0x354>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	43db      	mvns	r3, r3
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	4013      	ands	r3, r2
 80075ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007600:	4a14      	ldr	r2, [pc, #80]	; (8007654 <HAL_GPIO_Init+0x354>)
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	3301      	adds	r3, #1
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	2b0f      	cmp	r3, #15
 8007610:	f67f ae84 	bls.w	800731c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	3724      	adds	r7, #36	; 0x24
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	40023800 	.word	0x40023800
 8007628:	40013800 	.word	0x40013800
 800762c:	40020000 	.word	0x40020000
 8007630:	40020400 	.word	0x40020400
 8007634:	40020800 	.word	0x40020800
 8007638:	40020c00 	.word	0x40020c00
 800763c:	40021000 	.word	0x40021000
 8007640:	40021400 	.word	0x40021400
 8007644:	40021800 	.word	0x40021800
 8007648:	40021c00 	.word	0x40021c00
 800764c:	40022000 	.word	0x40022000
 8007650:	40022400 	.word	0x40022400
 8007654:	40013c00 	.word	0x40013c00

08007658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	887b      	ldrh	r3, [r7, #2]
 800766a:	4013      	ands	r3, r2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007670:	2301      	movs	r3, #1
 8007672:	73fb      	strb	r3, [r7, #15]
 8007674:	e001      	b.n	800767a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800767a:	7bfb      	ldrb	r3, [r7, #15]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	807b      	strh	r3, [r7, #2]
 8007694:	4613      	mov	r3, r2
 8007696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007698:	787b      	ldrb	r3, [r7, #1]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800769e:	887a      	ldrh	r2, [r7, #2]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80076a4:	e003      	b.n	80076ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80076a6:	887b      	ldrh	r3, [r7, #2]
 80076a8:	041a      	lsls	r2, r3, #16
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	619a      	str	r2, [r3, #24]
}
 80076ae:	bf00      	nop
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80076cc:	887a      	ldrh	r2, [r7, #2]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4013      	ands	r3, r2
 80076d2:	041a      	lsls	r2, r3, #16
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	43d9      	mvns	r1, r3
 80076d8:	887b      	ldrh	r3, [r7, #2]
 80076da:	400b      	ands	r3, r1
 80076dc:	431a      	orrs	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	619a      	str	r2, [r3, #24]
}
 80076e2:	bf00      	nop
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
	...

080076f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	4603      	mov	r3, r0
 80076f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80076fa:	4b08      	ldr	r3, [pc, #32]	; (800771c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80076fc:	695a      	ldr	r2, [r3, #20]
 80076fe:	88fb      	ldrh	r3, [r7, #6]
 8007700:	4013      	ands	r3, r2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d006      	beq.n	8007714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007706:	4a05      	ldr	r2, [pc, #20]	; (800771c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007708:	88fb      	ldrh	r3, [r7, #6]
 800770a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800770c:	88fb      	ldrh	r3, [r7, #6]
 800770e:	4618      	mov	r0, r3
 8007710:	f000 f806 	bl	8007720 <HAL_GPIO_EXTI_Callback>
  }
}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	40013c00 	.word	0x40013c00

08007720 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
	...

08007738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e12b      	b.n	80079a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d106      	bne.n	8007764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fa fcea 	bl	8002138 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2224      	movs	r2, #36	; 0x24
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0201 	bic.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800778a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800779a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800779c:	f001 fc76 	bl	800908c <HAL_RCC_GetPCLK1Freq>
 80077a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	4a81      	ldr	r2, [pc, #516]	; (80079ac <HAL_I2C_Init+0x274>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d807      	bhi.n	80077bc <HAL_I2C_Init+0x84>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4a80      	ldr	r2, [pc, #512]	; (80079b0 <HAL_I2C_Init+0x278>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	bf94      	ite	ls
 80077b4:	2301      	movls	r3, #1
 80077b6:	2300      	movhi	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	e006      	b.n	80077ca <HAL_I2C_Init+0x92>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4a7d      	ldr	r2, [pc, #500]	; (80079b4 <HAL_I2C_Init+0x27c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	bf94      	ite	ls
 80077c4:	2301      	movls	r3, #1
 80077c6:	2300      	movhi	r3, #0
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e0e7      	b.n	80079a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4a78      	ldr	r2, [pc, #480]	; (80079b8 <HAL_I2C_Init+0x280>)
 80077d6:	fba2 2303 	umull	r2, r3, r2, r3
 80077da:	0c9b      	lsrs	r3, r3, #18
 80077dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	4a6a      	ldr	r2, [pc, #424]	; (80079ac <HAL_I2C_Init+0x274>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d802      	bhi.n	800780c <HAL_I2C_Init+0xd4>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	3301      	adds	r3, #1
 800780a:	e009      	b.n	8007820 <HAL_I2C_Init+0xe8>
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007812:	fb02 f303 	mul.w	r3, r2, r3
 8007816:	4a69      	ldr	r2, [pc, #420]	; (80079bc <HAL_I2C_Init+0x284>)
 8007818:	fba2 2303 	umull	r2, r3, r2, r3
 800781c:	099b      	lsrs	r3, r3, #6
 800781e:	3301      	adds	r3, #1
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	430b      	orrs	r3, r1
 8007826:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007832:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	495c      	ldr	r1, [pc, #368]	; (80079ac <HAL_I2C_Init+0x274>)
 800783c:	428b      	cmp	r3, r1
 800783e:	d819      	bhi.n	8007874 <HAL_I2C_Init+0x13c>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	1e59      	subs	r1, r3, #1
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	fbb1 f3f3 	udiv	r3, r1, r3
 800784e:	1c59      	adds	r1, r3, #1
 8007850:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007854:	400b      	ands	r3, r1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <HAL_I2C_Init+0x138>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	1e59      	subs	r1, r3, #1
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	fbb1 f3f3 	udiv	r3, r1, r3
 8007868:	3301      	adds	r3, #1
 800786a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800786e:	e051      	b.n	8007914 <HAL_I2C_Init+0x1dc>
 8007870:	2304      	movs	r3, #4
 8007872:	e04f      	b.n	8007914 <HAL_I2C_Init+0x1dc>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d111      	bne.n	80078a0 <HAL_I2C_Init+0x168>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	1e58      	subs	r0, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6859      	ldr	r1, [r3, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	440b      	add	r3, r1
 800788a:	fbb0 f3f3 	udiv	r3, r0, r3
 800788e:	3301      	adds	r3, #1
 8007890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007894:	2b00      	cmp	r3, #0
 8007896:	bf0c      	ite	eq
 8007898:	2301      	moveq	r3, #1
 800789a:	2300      	movne	r3, #0
 800789c:	b2db      	uxtb	r3, r3
 800789e:	e012      	b.n	80078c6 <HAL_I2C_Init+0x18e>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	1e58      	subs	r0, r3, #1
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6859      	ldr	r1, [r3, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	440b      	add	r3, r1
 80078ae:	0099      	lsls	r1, r3, #2
 80078b0:	440b      	add	r3, r1
 80078b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80078b6:	3301      	adds	r3, #1
 80078b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078bc:	2b00      	cmp	r3, #0
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_I2C_Init+0x196>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e022      	b.n	8007914 <HAL_I2C_Init+0x1dc>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10e      	bne.n	80078f4 <HAL_I2C_Init+0x1bc>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	1e58      	subs	r0, r3, #1
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6859      	ldr	r1, [r3, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	440b      	add	r3, r1
 80078e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80078e8:	3301      	adds	r3, #1
 80078ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078f2:	e00f      	b.n	8007914 <HAL_I2C_Init+0x1dc>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	1e58      	subs	r0, r3, #1
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6859      	ldr	r1, [r3, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	440b      	add	r3, r1
 8007902:	0099      	lsls	r1, r3, #2
 8007904:	440b      	add	r3, r1
 8007906:	fbb0 f3f3 	udiv	r3, r0, r3
 800790a:	3301      	adds	r3, #1
 800790c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007914:	6879      	ldr	r1, [r7, #4]
 8007916:	6809      	ldr	r1, [r1, #0]
 8007918:	4313      	orrs	r3, r2
 800791a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	69da      	ldr	r2, [r3, #28]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	431a      	orrs	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007942:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6911      	ldr	r1, [r2, #16]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	68d2      	ldr	r2, [r2, #12]
 800794e:	4311      	orrs	r1, r2
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6812      	ldr	r2, [r2, #0]
 8007954:	430b      	orrs	r3, r1
 8007956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695a      	ldr	r2, [r3, #20]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2220      	movs	r2, #32
 800798e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	000186a0 	.word	0x000186a0
 80079b0:	001e847f 	.word	0x001e847f
 80079b4:	003d08ff 	.word	0x003d08ff
 80079b8:	431bde83 	.word	0x431bde83
 80079bc:	10624dd3 	.word	0x10624dd3

080079c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	4608      	mov	r0, r1
 80079ca:	4611      	mov	r1, r2
 80079cc:	461a      	mov	r2, r3
 80079ce:	4603      	mov	r3, r0
 80079d0:	817b      	strh	r3, [r7, #10]
 80079d2:	460b      	mov	r3, r1
 80079d4:	813b      	strh	r3, [r7, #8]
 80079d6:	4613      	mov	r3, r2
 80079d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079da:	f7ff fabd 	bl	8006f58 <HAL_GetTick>
 80079de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	f040 80d9 	bne.w	8007ba0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	2319      	movs	r3, #25
 80079f4:	2201      	movs	r2, #1
 80079f6:	496d      	ldr	r1, [pc, #436]	; (8007bac <HAL_I2C_Mem_Write+0x1ec>)
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 fc7f 	bl	80082fc <I2C_WaitOnFlagUntilTimeout>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007a04:	2302      	movs	r3, #2
 8007a06:	e0cc      	b.n	8007ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d101      	bne.n	8007a16 <HAL_I2C_Mem_Write+0x56>
 8007a12:	2302      	movs	r3, #2
 8007a14:	e0c5      	b.n	8007ba2 <HAL_I2C_Mem_Write+0x1e2>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d007      	beq.n	8007a3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 0201 	orr.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2221      	movs	r2, #33	; 0x21
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2240      	movs	r2, #64	; 0x40
 8007a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6a3a      	ldr	r2, [r7, #32]
 8007a66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4a4d      	ldr	r2, [pc, #308]	; (8007bb0 <HAL_I2C_Mem_Write+0x1f0>)
 8007a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a7e:	88f8      	ldrh	r0, [r7, #6]
 8007a80:	893a      	ldrh	r2, [r7, #8]
 8007a82:	8979      	ldrh	r1, [r7, #10]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fab6 	bl	8008000 <I2C_RequestMemoryWrite>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d052      	beq.n	8007b40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e081      	b.n	8007ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 fd00 	bl	80084a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00d      	beq.n	8007aca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d107      	bne.n	8007ac6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ac4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e06b      	b.n	8007ba2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	781a      	ldrb	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	3b01      	subs	r3, #1
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d11b      	bne.n	8007b40 <HAL_I2C_Mem_Write+0x180>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d017      	beq.n	8007b40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	781a      	ldrb	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1aa      	bne.n	8007a9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 fcec 	bl	800852a <I2C_WaitOnBTFFlagUntilTimeout>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00d      	beq.n	8007b74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5c:	2b04      	cmp	r3, #4
 8007b5e:	d107      	bne.n	8007b70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e016      	b.n	8007ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2220      	movs	r2, #32
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	e000      	b.n	8007ba2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007ba0:	2302      	movs	r3, #2
  }
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3718      	adds	r7, #24
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	00100002 	.word	0x00100002
 8007bb0:	ffff0000 	.word	0xffff0000

08007bb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08c      	sub	sp, #48	; 0x30
 8007bb8:	af02      	add	r7, sp, #8
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	817b      	strh	r3, [r7, #10]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	813b      	strh	r3, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007bce:	f7ff f9c3 	bl	8006f58 <HAL_GetTick>
 8007bd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b20      	cmp	r3, #32
 8007bde:	f040 8208 	bne.w	8007ff2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	2319      	movs	r3, #25
 8007be8:	2201      	movs	r2, #1
 8007bea:	497b      	ldr	r1, [pc, #492]	; (8007dd8 <HAL_I2C_Mem_Read+0x224>)
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fb85 	bl	80082fc <I2C_WaitOnFlagUntilTimeout>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	e1fb      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d101      	bne.n	8007c0a <HAL_I2C_Mem_Read+0x56>
 8007c06:	2302      	movs	r3, #2
 8007c08:	e1f4      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x440>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d007      	beq.n	8007c30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f042 0201 	orr.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2222      	movs	r2, #34	; 0x22
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2240      	movs	r2, #64	; 0x40
 8007c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007c60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4a5b      	ldr	r2, [pc, #364]	; (8007ddc <HAL_I2C_Mem_Read+0x228>)
 8007c70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c72:	88f8      	ldrh	r0, [r7, #6]
 8007c74:	893a      	ldrh	r2, [r7, #8]
 8007c76:	8979      	ldrh	r1, [r7, #10]
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	4603      	mov	r3, r0
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 fa52 	bl	800812c <I2C_RequestMemoryRead>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e1b0      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d113      	bne.n	8007cc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	623b      	str	r3, [r7, #32]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	623b      	str	r3, [r7, #32]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	623b      	str	r3, [r7, #32]
 8007cae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	e184      	b.n	8007fcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d11b      	bne.n	8007d02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	61fb      	str	r3, [r7, #28]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	e164      	b.n	8007fcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d11b      	bne.n	8007d42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	61bb      	str	r3, [r7, #24]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	61bb      	str	r3, [r7, #24]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	e144      	b.n	8007fcc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d42:	2300      	movs	r3, #0
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	617b      	str	r3, [r7, #20]
 8007d56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007d58:	e138      	b.n	8007fcc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	f200 80f1 	bhi.w	8007f46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d123      	bne.n	8007db4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fc1b 	bl	80085ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e139      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691a      	ldr	r2, [r3, #16]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	3b01      	subs	r3, #1
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007db2:	e10b      	b.n	8007fcc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d14e      	bne.n	8007e5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4906      	ldr	r1, [pc, #24]	; (8007de0 <HAL_I2C_Mem_Read+0x22c>)
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 fa98 	bl	80082fc <I2C_WaitOnFlagUntilTimeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d008      	beq.n	8007de4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e10e      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x440>
 8007dd6:	bf00      	nop
 8007dd8:	00100002 	.word	0x00100002
 8007ddc:	ffff0000 	.word	0xffff0000
 8007de0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	691a      	ldr	r2, [r3, #16]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	b2d2      	uxtb	r2, r2
 8007e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e42:	3b01      	subs	r3, #1
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	3b01      	subs	r3, #1
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e58:	e0b8      	b.n	8007fcc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	2200      	movs	r2, #0
 8007e62:	4966      	ldr	r1, [pc, #408]	; (8007ffc <HAL_I2C_Mem_Read+0x448>)
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 fa49 	bl	80082fc <I2C_WaitOnFlagUntilTimeout>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e0bf      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	691a      	ldr	r2, [r3, #16]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	b2d2      	uxtb	r2, r2
 8007e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	494f      	ldr	r1, [pc, #316]	; (8007ffc <HAL_I2C_Mem_Read+0x448>)
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 fa1b 	bl	80082fc <I2C_WaitOnFlagUntilTimeout>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e091      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	691a      	ldr	r2, [r3, #16]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	b2d2      	uxtb	r2, r2
 8007eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	b2d2      	uxtb	r2, r2
 8007f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f44:	e042      	b.n	8007fcc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fb2e 	bl	80085ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e04c      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	691a      	ldr	r2, [r3, #16]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	b2d2      	uxtb	r2, r2
 8007f66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f76:	3b01      	subs	r3, #1
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	f003 0304 	and.w	r3, r3, #4
 8007f96:	2b04      	cmp	r3, #4
 8007f98:	d118      	bne.n	8007fcc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	b2d2      	uxtb	r2, r2
 8007fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f47f aec2 	bne.w	8007d5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e000      	b.n	8007ff4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007ff2:	2302      	movs	r3, #2
  }
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3728      	adds	r7, #40	; 0x28
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	00010004 	.word	0x00010004

08008000 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	4608      	mov	r0, r1
 800800a:	4611      	mov	r1, r2
 800800c:	461a      	mov	r2, r3
 800800e:	4603      	mov	r3, r0
 8008010:	817b      	strh	r3, [r7, #10]
 8008012:	460b      	mov	r3, r1
 8008014:	813b      	strh	r3, [r7, #8]
 8008016:	4613      	mov	r3, r2
 8008018:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008028:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	2200      	movs	r2, #0
 8008032:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 f960 	bl	80082fc <I2C_WaitOnFlagUntilTimeout>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00d      	beq.n	800805e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008050:	d103      	bne.n	800805a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008058:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e05f      	b.n	800811e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800805e:	897b      	ldrh	r3, [r7, #10]
 8008060:	b2db      	uxtb	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800806c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	6a3a      	ldr	r2, [r7, #32]
 8008072:	492d      	ldr	r1, [pc, #180]	; (8008128 <I2C_RequestMemoryWrite+0x128>)
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 f998 	bl	80083aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e04c      	b.n	800811e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800809a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800809c:	6a39      	ldr	r1, [r7, #32]
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 fa02 	bl	80084a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00d      	beq.n	80080c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d107      	bne.n	80080c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e02b      	b.n	800811e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080c6:	88fb      	ldrh	r3, [r7, #6]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d105      	bne.n	80080d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080cc:	893b      	ldrh	r3, [r7, #8]
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	611a      	str	r2, [r3, #16]
 80080d6:	e021      	b.n	800811c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80080d8:	893b      	ldrh	r3, [r7, #8]
 80080da:	0a1b      	lsrs	r3, r3, #8
 80080dc:	b29b      	uxth	r3, r3
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e8:	6a39      	ldr	r1, [r7, #32]
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 f9dc 	bl	80084a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00d      	beq.n	8008112 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	d107      	bne.n	800810e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800810c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e005      	b.n	800811e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008112:	893b      	ldrh	r3, [r7, #8]
 8008114:	b2da      	uxtb	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	00010002 	.word	0x00010002

0800812c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	4608      	mov	r0, r1
 8008136:	4611      	mov	r1, r2
 8008138:	461a      	mov	r2, r3
 800813a:	4603      	mov	r3, r0
 800813c:	817b      	strh	r3, [r7, #10]
 800813e:	460b      	mov	r3, r1
 8008140:	813b      	strh	r3, [r7, #8]
 8008142:	4613      	mov	r3, r2
 8008144:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008154:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008164:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	2200      	movs	r2, #0
 800816e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 f8c2 	bl	80082fc <I2C_WaitOnFlagUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00d      	beq.n	800819a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800818c:	d103      	bne.n	8008196 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008194:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e0aa      	b.n	80082f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800819a:	897b      	ldrh	r3, [r7, #10]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80081a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	6a3a      	ldr	r2, [r7, #32]
 80081ae:	4952      	ldr	r1, [pc, #328]	; (80082f8 <I2C_RequestMemoryRead+0x1cc>)
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 f8fa 	bl	80083aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e097      	b.n	80082f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081c0:	2300      	movs	r3, #0
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d8:	6a39      	ldr	r1, [r7, #32]
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 f964 	bl	80084a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00d      	beq.n	8008202 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d107      	bne.n	80081fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e076      	b.n	80082f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008202:	88fb      	ldrh	r3, [r7, #6]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d105      	bne.n	8008214 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008208:	893b      	ldrh	r3, [r7, #8]
 800820a:	b2da      	uxtb	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	611a      	str	r2, [r3, #16]
 8008212:	e021      	b.n	8008258 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008214:	893b      	ldrh	r3, [r7, #8]
 8008216:	0a1b      	lsrs	r3, r3, #8
 8008218:	b29b      	uxth	r3, r3
 800821a:	b2da      	uxtb	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008224:	6a39      	ldr	r1, [r7, #32]
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 f93e 	bl	80084a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00d      	beq.n	800824e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008236:	2b04      	cmp	r3, #4
 8008238:	d107      	bne.n	800824a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008248:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e050      	b.n	80082f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800824e:	893b      	ldrh	r3, [r7, #8]
 8008250:	b2da      	uxtb	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825a:	6a39      	ldr	r1, [r7, #32]
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f000 f923 	bl	80084a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00d      	beq.n	8008284 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826c:	2b04      	cmp	r3, #4
 800826e:	d107      	bne.n	8008280 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800827e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e035      	b.n	80082f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008292:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	2200      	movs	r2, #0
 800829c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 f82b 	bl	80082fc <I2C_WaitOnFlagUntilTimeout>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00d      	beq.n	80082c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ba:	d103      	bne.n	80082c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e013      	b.n	80082f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80082c8:	897b      	ldrh	r3, [r7, #10]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	f043 0301 	orr.w	r3, r3, #1
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	6a3a      	ldr	r2, [r7, #32]
 80082dc:	4906      	ldr	r1, [pc, #24]	; (80082f8 <I2C_RequestMemoryRead+0x1cc>)
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 f863 	bl	80083aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	00010002 	.word	0x00010002

080082fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	4613      	mov	r3, r2
 800830a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800830c:	e025      	b.n	800835a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008314:	d021      	beq.n	800835a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008316:	f7fe fe1f 	bl	8006f58 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	429a      	cmp	r2, r3
 8008324:	d302      	bcc.n	800832c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d116      	bne.n	800835a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2220      	movs	r2, #32
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	f043 0220 	orr.w	r2, r3, #32
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e023      	b.n	80083a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	0c1b      	lsrs	r3, r3, #16
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b01      	cmp	r3, #1
 8008362:	d10d      	bne.n	8008380 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	43da      	mvns	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4013      	ands	r3, r2
 8008370:	b29b      	uxth	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	bf0c      	ite	eq
 8008376:	2301      	moveq	r3, #1
 8008378:	2300      	movne	r3, #0
 800837a:	b2db      	uxtb	r3, r3
 800837c:	461a      	mov	r2, r3
 800837e:	e00c      	b.n	800839a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	43da      	mvns	r2, r3
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	4013      	ands	r3, r2
 800838c:	b29b      	uxth	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	bf0c      	ite	eq
 8008392:	2301      	moveq	r3, #1
 8008394:	2300      	movne	r3, #0
 8008396:	b2db      	uxtb	r3, r3
 8008398:	461a      	mov	r2, r3
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	429a      	cmp	r2, r3
 800839e:	d0b6      	beq.n	800830e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
 80083b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083b8:	e051      	b.n	800845e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c8:	d123      	bne.n	8008412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	f043 0204 	orr.w	r2, r3, #4
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e046      	b.n	80084a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008418:	d021      	beq.n	800845e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800841a:	f7fe fd9d 	bl	8006f58 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	429a      	cmp	r2, r3
 8008428:	d302      	bcc.n	8008430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d116      	bne.n	800845e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2220      	movs	r2, #32
 800843a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844a:	f043 0220 	orr.w	r2, r3, #32
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e020      	b.n	80084a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	0c1b      	lsrs	r3, r3, #16
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b01      	cmp	r3, #1
 8008466:	d10c      	bne.n	8008482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	43da      	mvns	r2, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4013      	ands	r3, r2
 8008474:	b29b      	uxth	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	bf14      	ite	ne
 800847a:	2301      	movne	r3, #1
 800847c:	2300      	moveq	r3, #0
 800847e:	b2db      	uxtb	r3, r3
 8008480:	e00b      	b.n	800849a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	43da      	mvns	r2, r3
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	4013      	ands	r3, r2
 800848e:	b29b      	uxth	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	bf14      	ite	ne
 8008494:	2301      	movne	r3, #1
 8008496:	2300      	moveq	r3, #0
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d18d      	bne.n	80083ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084b4:	e02d      	b.n	8008512 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 f8ce 	bl	8008658 <I2C_IsAcknowledgeFailed>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e02d      	b.n	8008522 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d021      	beq.n	8008512 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ce:	f7fe fd43 	bl	8006f58 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d302      	bcc.n	80084e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d116      	bne.n	8008512 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2220      	movs	r2, #32
 80084ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	f043 0220 	orr.w	r2, r3, #32
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e007      	b.n	8008522 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851c:	2b80      	cmp	r3, #128	; 0x80
 800851e:	d1ca      	bne.n	80084b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008536:	e02d      	b.n	8008594 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 f88d 	bl	8008658 <I2C_IsAcknowledgeFailed>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e02d      	b.n	80085a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	d021      	beq.n	8008594 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008550:	f7fe fd02 	bl	8006f58 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	429a      	cmp	r2, r3
 800855e:	d302      	bcc.n	8008566 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d116      	bne.n	8008594 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2220      	movs	r2, #32
 8008570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008580:	f043 0220 	orr.w	r2, r3, #32
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e007      	b.n	80085a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	f003 0304 	and.w	r3, r3, #4
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d1ca      	bne.n	8008538 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085b8:	e042      	b.n	8008640 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	f003 0310 	and.w	r3, r3, #16
 80085c4:	2b10      	cmp	r3, #16
 80085c6:	d119      	bne.n	80085fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f06f 0210 	mvn.w	r2, #16
 80085d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2220      	movs	r2, #32
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e029      	b.n	8008650 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085fc:	f7fe fcac 	bl	8006f58 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	429a      	cmp	r2, r3
 800860a:	d302      	bcc.n	8008612 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d116      	bne.n	8008640 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2220      	movs	r2, #32
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862c:	f043 0220 	orr.w	r2, r3, #32
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e007      	b.n	8008650 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864a:	2b40      	cmp	r3, #64	; 0x40
 800864c:	d1b5      	bne.n	80085ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800866a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800866e:	d11b      	bne.n	80086a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008678:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	f043 0204 	orr.w	r2, r3, #4
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e000      	b.n	80086aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d129      	bne.n	8008720 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2224      	movs	r2, #36	; 0x24
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0201 	bic.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0210 	bic.w	r2, r2, #16
 80086f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f042 0201 	orr.w	r2, r2, #1
 8008712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2220      	movs	r2, #32
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	e000      	b.n	8008722 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008720:	2302      	movs	r3, #2
  }
}
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800872e:	b480      	push	{r7}
 8008730:	b085      	sub	sp, #20
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b20      	cmp	r3, #32
 8008746:	d12a      	bne.n	800879e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2224      	movs	r2, #36	; 0x24
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0201 	bic.w	r2, r2, #1
 800875e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008768:	89fb      	ldrh	r3, [r7, #14]
 800876a:	f023 030f 	bic.w	r3, r3, #15
 800876e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	b29a      	uxth	r2, r3
 8008774:	89fb      	ldrh	r3, [r7, #14]
 8008776:	4313      	orrs	r3, r2
 8008778:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	89fa      	ldrh	r2, [r7, #14]
 8008780:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f042 0201 	orr.w	r2, r2, #1
 8008790:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2220      	movs	r2, #32
 8008796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	e000      	b.n	80087a0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800879e:	2302      	movs	r3, #2
  }
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e267      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d075      	beq.n	80088b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087ca:	4b88      	ldr	r3, [pc, #544]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 030c 	and.w	r3, r3, #12
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	d00c      	beq.n	80087f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087d6:	4b85      	ldr	r3, [pc, #532]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d112      	bne.n	8008808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087e2:	4b82      	ldr	r3, [pc, #520]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087ee:	d10b      	bne.n	8008808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087f0:	4b7e      	ldr	r3, [pc, #504]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d05b      	beq.n	80088b4 <HAL_RCC_OscConfig+0x108>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d157      	bne.n	80088b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e242      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008810:	d106      	bne.n	8008820 <HAL_RCC_OscConfig+0x74>
 8008812:	4b76      	ldr	r3, [pc, #472]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a75      	ldr	r2, [pc, #468]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 8008818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800881c:	6013      	str	r3, [r2, #0]
 800881e:	e01d      	b.n	800885c <HAL_RCC_OscConfig+0xb0>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008828:	d10c      	bne.n	8008844 <HAL_RCC_OscConfig+0x98>
 800882a:	4b70      	ldr	r3, [pc, #448]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a6f      	ldr	r2, [pc, #444]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 8008830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	4b6d      	ldr	r3, [pc, #436]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a6c      	ldr	r2, [pc, #432]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 800883c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	e00b      	b.n	800885c <HAL_RCC_OscConfig+0xb0>
 8008844:	4b69      	ldr	r3, [pc, #420]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a68      	ldr	r2, [pc, #416]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 800884a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	4b66      	ldr	r3, [pc, #408]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a65      	ldr	r2, [pc, #404]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 8008856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800885a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d013      	beq.n	800888c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008864:	f7fe fb78 	bl	8006f58 <HAL_GetTick>
 8008868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800886a:	e008      	b.n	800887e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800886c:	f7fe fb74 	bl	8006f58 <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	2b64      	cmp	r3, #100	; 0x64
 8008878:	d901      	bls.n	800887e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e207      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800887e:	4b5b      	ldr	r3, [pc, #364]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0f0      	beq.n	800886c <HAL_RCC_OscConfig+0xc0>
 800888a:	e014      	b.n	80088b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800888c:	f7fe fb64 	bl	8006f58 <HAL_GetTick>
 8008890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008894:	f7fe fb60 	bl	8006f58 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b64      	cmp	r3, #100	; 0x64
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e1f3      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088a6:	4b51      	ldr	r3, [pc, #324]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1f0      	bne.n	8008894 <HAL_RCC_OscConfig+0xe8>
 80088b2:	e000      	b.n	80088b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d063      	beq.n	800898a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088c2:	4b4a      	ldr	r3, [pc, #296]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f003 030c 	and.w	r3, r3, #12
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00b      	beq.n	80088e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088ce:	4b47      	ldr	r3, [pc, #284]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088d6:	2b08      	cmp	r3, #8
 80088d8:	d11c      	bne.n	8008914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088da:	4b44      	ldr	r3, [pc, #272]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d116      	bne.n	8008914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088e6:	4b41      	ldr	r3, [pc, #260]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d005      	beq.n	80088fe <HAL_RCC_OscConfig+0x152>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d001      	beq.n	80088fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e1c7      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088fe:	4b3b      	ldr	r3, [pc, #236]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	00db      	lsls	r3, r3, #3
 800890c:	4937      	ldr	r1, [pc, #220]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 800890e:	4313      	orrs	r3, r2
 8008910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008912:	e03a      	b.n	800898a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d020      	beq.n	800895e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800891c:	4b34      	ldr	r3, [pc, #208]	; (80089f0 <HAL_RCC_OscConfig+0x244>)
 800891e:	2201      	movs	r2, #1
 8008920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008922:	f7fe fb19 	bl	8006f58 <HAL_GetTick>
 8008926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008928:	e008      	b.n	800893c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800892a:	f7fe fb15 	bl	8006f58 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d901      	bls.n	800893c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e1a8      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800893c:	4b2b      	ldr	r3, [pc, #172]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0f0      	beq.n	800892a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008948:	4b28      	ldr	r3, [pc, #160]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	4925      	ldr	r1, [pc, #148]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 8008958:	4313      	orrs	r3, r2
 800895a:	600b      	str	r3, [r1, #0]
 800895c:	e015      	b.n	800898a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800895e:	4b24      	ldr	r3, [pc, #144]	; (80089f0 <HAL_RCC_OscConfig+0x244>)
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008964:	f7fe faf8 	bl	8006f58 <HAL_GetTick>
 8008968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800896a:	e008      	b.n	800897e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800896c:	f7fe faf4 	bl	8006f58 <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b02      	cmp	r3, #2
 8008978:	d901      	bls.n	800897e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e187      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800897e:	4b1b      	ldr	r3, [pc, #108]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0302 	and.w	r3, r3, #2
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1f0      	bne.n	800896c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d036      	beq.n	8008a04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d016      	beq.n	80089cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800899e:	4b15      	ldr	r3, [pc, #84]	; (80089f4 <HAL_RCC_OscConfig+0x248>)
 80089a0:	2201      	movs	r2, #1
 80089a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089a4:	f7fe fad8 	bl	8006f58 <HAL_GetTick>
 80089a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089aa:	e008      	b.n	80089be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089ac:	f7fe fad4 	bl	8006f58 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d901      	bls.n	80089be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e167      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089be:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <HAL_RCC_OscConfig+0x240>)
 80089c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d0f0      	beq.n	80089ac <HAL_RCC_OscConfig+0x200>
 80089ca:	e01b      	b.n	8008a04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089cc:	4b09      	ldr	r3, [pc, #36]	; (80089f4 <HAL_RCC_OscConfig+0x248>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089d2:	f7fe fac1 	bl	8006f58 <HAL_GetTick>
 80089d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089d8:	e00e      	b.n	80089f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089da:	f7fe fabd 	bl	8006f58 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	d907      	bls.n	80089f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e150      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
 80089ec:	40023800 	.word	0x40023800
 80089f0:	42470000 	.word	0x42470000
 80089f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089f8:	4b88      	ldr	r3, [pc, #544]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 80089fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1ea      	bne.n	80089da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 8097 	beq.w	8008b40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a12:	2300      	movs	r3, #0
 8008a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a16:	4b81      	ldr	r3, [pc, #516]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10f      	bne.n	8008a42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a22:	2300      	movs	r3, #0
 8008a24:	60bb      	str	r3, [r7, #8]
 8008a26:	4b7d      	ldr	r3, [pc, #500]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	4a7c      	ldr	r2, [pc, #496]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a30:	6413      	str	r3, [r2, #64]	; 0x40
 8008a32:	4b7a      	ldr	r3, [pc, #488]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a3a:	60bb      	str	r3, [r7, #8]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a42:	4b77      	ldr	r3, [pc, #476]	; (8008c20 <HAL_RCC_OscConfig+0x474>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d118      	bne.n	8008a80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a4e:	4b74      	ldr	r3, [pc, #464]	; (8008c20 <HAL_RCC_OscConfig+0x474>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a73      	ldr	r2, [pc, #460]	; (8008c20 <HAL_RCC_OscConfig+0x474>)
 8008a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a5a:	f7fe fa7d 	bl	8006f58 <HAL_GetTick>
 8008a5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a60:	e008      	b.n	8008a74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a62:	f7fe fa79 	bl	8006f58 <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d901      	bls.n	8008a74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e10c      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a74:	4b6a      	ldr	r3, [pc, #424]	; (8008c20 <HAL_RCC_OscConfig+0x474>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d0f0      	beq.n	8008a62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d106      	bne.n	8008a96 <HAL_RCC_OscConfig+0x2ea>
 8008a88:	4b64      	ldr	r3, [pc, #400]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a8c:	4a63      	ldr	r2, [pc, #396]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008a8e:	f043 0301 	orr.w	r3, r3, #1
 8008a92:	6713      	str	r3, [r2, #112]	; 0x70
 8008a94:	e01c      	b.n	8008ad0 <HAL_RCC_OscConfig+0x324>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	2b05      	cmp	r3, #5
 8008a9c:	d10c      	bne.n	8008ab8 <HAL_RCC_OscConfig+0x30c>
 8008a9e:	4b5f      	ldr	r3, [pc, #380]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa2:	4a5e      	ldr	r2, [pc, #376]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008aa4:	f043 0304 	orr.w	r3, r3, #4
 8008aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8008aaa:	4b5c      	ldr	r3, [pc, #368]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aae:	4a5b      	ldr	r2, [pc, #364]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008ab0:	f043 0301 	orr.w	r3, r3, #1
 8008ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ab6:	e00b      	b.n	8008ad0 <HAL_RCC_OscConfig+0x324>
 8008ab8:	4b58      	ldr	r3, [pc, #352]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008abc:	4a57      	ldr	r2, [pc, #348]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008abe:	f023 0301 	bic.w	r3, r3, #1
 8008ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ac4:	4b55      	ldr	r3, [pc, #340]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac8:	4a54      	ldr	r2, [pc, #336]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008aca:	f023 0304 	bic.w	r3, r3, #4
 8008ace:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d015      	beq.n	8008b04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad8:	f7fe fa3e 	bl	8006f58 <HAL_GetTick>
 8008adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ade:	e00a      	b.n	8008af6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ae0:	f7fe fa3a 	bl	8006f58 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e0cb      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008af6:	4b49      	ldr	r3, [pc, #292]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0ee      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x334>
 8008b02:	e014      	b.n	8008b2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b04:	f7fe fa28 	bl	8006f58 <HAL_GetTick>
 8008b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b0a:	e00a      	b.n	8008b22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b0c:	f7fe fa24 	bl	8006f58 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d901      	bls.n	8008b22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e0b5      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b22:	4b3e      	ldr	r3, [pc, #248]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1ee      	bne.n	8008b0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d105      	bne.n	8008b40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b34:	4b39      	ldr	r3, [pc, #228]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b38:	4a38      	ldr	r2, [pc, #224]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 80a1 	beq.w	8008c8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b4a:	4b34      	ldr	r3, [pc, #208]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 030c 	and.w	r3, r3, #12
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	d05c      	beq.n	8008c10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d141      	bne.n	8008be2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b5e:	4b31      	ldr	r3, [pc, #196]	; (8008c24 <HAL_RCC_OscConfig+0x478>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b64:	f7fe f9f8 	bl	8006f58 <HAL_GetTick>
 8008b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b6c:	f7fe f9f4 	bl	8006f58 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e087      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b7e:	4b27      	ldr	r3, [pc, #156]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1f0      	bne.n	8008b6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69da      	ldr	r2, [r3, #28]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	431a      	orrs	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	019b      	lsls	r3, r3, #6
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba0:	085b      	lsrs	r3, r3, #1
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	041b      	lsls	r3, r3, #16
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	061b      	lsls	r3, r3, #24
 8008bae:	491b      	ldr	r1, [pc, #108]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bb4:	4b1b      	ldr	r3, [pc, #108]	; (8008c24 <HAL_RCC_OscConfig+0x478>)
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bba:	f7fe f9cd 	bl	8006f58 <HAL_GetTick>
 8008bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bc0:	e008      	b.n	8008bd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bc2:	f7fe f9c9 	bl	8006f58 <HAL_GetTick>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d901      	bls.n	8008bd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e05c      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bd4:	4b11      	ldr	r3, [pc, #68]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d0f0      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x416>
 8008be0:	e054      	b.n	8008c8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008be2:	4b10      	ldr	r3, [pc, #64]	; (8008c24 <HAL_RCC_OscConfig+0x478>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008be8:	f7fe f9b6 	bl	8006f58 <HAL_GetTick>
 8008bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bee:	e008      	b.n	8008c02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bf0:	f7fe f9b2 	bl	8006f58 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d901      	bls.n	8008c02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	e045      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c02:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <HAL_RCC_OscConfig+0x470>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1f0      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x444>
 8008c0e:	e03d      	b.n	8008c8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d107      	bne.n	8008c28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e038      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	40007000 	.word	0x40007000
 8008c24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c28:	4b1b      	ldr	r3, [pc, #108]	; (8008c98 <HAL_RCC_OscConfig+0x4ec>)
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d028      	beq.n	8008c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d121      	bne.n	8008c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d11a      	bne.n	8008c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c58:	4013      	ands	r3, r2
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d111      	bne.n	8008c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6e:	085b      	lsrs	r3, r3, #1
 8008c70:	3b01      	subs	r3, #1
 8008c72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d107      	bne.n	8008c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d001      	beq.n	8008c8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e000      	b.n	8008c8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	40023800 	.word	0x40023800

08008c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e0cc      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cb0:	4b68      	ldr	r3, [pc, #416]	; (8008e54 <HAL_RCC_ClockConfig+0x1b8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 030f 	and.w	r3, r3, #15
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d90c      	bls.n	8008cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cbe:	4b65      	ldr	r3, [pc, #404]	; (8008e54 <HAL_RCC_ClockConfig+0x1b8>)
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	b2d2      	uxtb	r2, r2
 8008cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cc6:	4b63      	ldr	r3, [pc, #396]	; (8008e54 <HAL_RCC_ClockConfig+0x1b8>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 030f 	and.w	r3, r3, #15
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d001      	beq.n	8008cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e0b8      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0302 	and.w	r3, r3, #2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d020      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0304 	and.w	r3, r3, #4
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cf0:	4b59      	ldr	r3, [pc, #356]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	4a58      	ldr	r2, [pc, #352]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0308 	and.w	r3, r3, #8
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d005      	beq.n	8008d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d08:	4b53      	ldr	r3, [pc, #332]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	4a52      	ldr	r2, [pc, #328]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d14:	4b50      	ldr	r3, [pc, #320]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	494d      	ldr	r1, [pc, #308]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d044      	beq.n	8008dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d107      	bne.n	8008d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d3a:	4b47      	ldr	r3, [pc, #284]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d119      	bne.n	8008d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e07f      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d003      	beq.n	8008d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d107      	bne.n	8008d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d5a:	4b3f      	ldr	r3, [pc, #252]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d109      	bne.n	8008d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e06f      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d6a:	4b3b      	ldr	r3, [pc, #236]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e067      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d7a:	4b37      	ldr	r3, [pc, #220]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f023 0203 	bic.w	r2, r3, #3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	4934      	ldr	r1, [pc, #208]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d8c:	f7fe f8e4 	bl	8006f58 <HAL_GetTick>
 8008d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d92:	e00a      	b.n	8008daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d94:	f7fe f8e0 	bl	8006f58 <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e04f      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008daa:	4b2b      	ldr	r3, [pc, #172]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f003 020c 	and.w	r2, r3, #12
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d1eb      	bne.n	8008d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008dbc:	4b25      	ldr	r3, [pc, #148]	; (8008e54 <HAL_RCC_ClockConfig+0x1b8>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 030f 	and.w	r3, r3, #15
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d20c      	bcs.n	8008de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dca:	4b22      	ldr	r3, [pc, #136]	; (8008e54 <HAL_RCC_ClockConfig+0x1b8>)
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	b2d2      	uxtb	r2, r2
 8008dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dd2:	4b20      	ldr	r3, [pc, #128]	; (8008e54 <HAL_RCC_ClockConfig+0x1b8>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 030f 	and.w	r3, r3, #15
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d001      	beq.n	8008de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e032      	b.n	8008e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d008      	beq.n	8008e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008df0:	4b19      	ldr	r3, [pc, #100]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	4916      	ldr	r1, [pc, #88]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0308 	and.w	r3, r3, #8
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e0e:	4b12      	ldr	r3, [pc, #72]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	490e      	ldr	r1, [pc, #56]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e22:	f000 f821 	bl	8008e68 <HAL_RCC_GetSysClockFreq>
 8008e26:	4602      	mov	r2, r0
 8008e28:	4b0b      	ldr	r3, [pc, #44]	; (8008e58 <HAL_RCC_ClockConfig+0x1bc>)
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	091b      	lsrs	r3, r3, #4
 8008e2e:	f003 030f 	and.w	r3, r3, #15
 8008e32:	490a      	ldr	r1, [pc, #40]	; (8008e5c <HAL_RCC_ClockConfig+0x1c0>)
 8008e34:	5ccb      	ldrb	r3, [r1, r3]
 8008e36:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3a:	4a09      	ldr	r2, [pc, #36]	; (8008e60 <HAL_RCC_ClockConfig+0x1c4>)
 8008e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e3e:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <HAL_RCC_ClockConfig+0x1c8>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fe f844 	bl	8006ed0 <HAL_InitTick>

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	40023c00 	.word	0x40023c00
 8008e58:	40023800 	.word	0x40023800
 8008e5c:	080140e4 	.word	0x080140e4
 8008e60:	20000180 	.word	0x20000180
 8008e64:	200002b4 	.word	0x200002b4

08008e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e6c:	b094      	sub	sp, #80	; 0x50
 8008e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	647b      	str	r3, [r7, #68]	; 0x44
 8008e74:	2300      	movs	r3, #0
 8008e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e78:	2300      	movs	r3, #0
 8008e7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e80:	4b79      	ldr	r3, [pc, #484]	; (8009068 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f003 030c 	and.w	r3, r3, #12
 8008e88:	2b08      	cmp	r3, #8
 8008e8a:	d00d      	beq.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	f200 80e1 	bhi.w	8009054 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <HAL_RCC_GetSysClockFreq+0x34>
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d003      	beq.n	8008ea2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008e9a:	e0db      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e9c:	4b73      	ldr	r3, [pc, #460]	; (800906c <HAL_RCC_GetSysClockFreq+0x204>)
 8008e9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008ea0:	e0db      	b.n	800905a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ea2:	4b73      	ldr	r3, [pc, #460]	; (8009070 <HAL_RCC_GetSysClockFreq+0x208>)
 8008ea4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ea6:	e0d8      	b.n	800905a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ea8:	4b6f      	ldr	r3, [pc, #444]	; (8009068 <HAL_RCC_GetSysClockFreq+0x200>)
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008eb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008eb2:	4b6d      	ldr	r3, [pc, #436]	; (8009068 <HAL_RCC_GetSysClockFreq+0x200>)
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d063      	beq.n	8008f86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ebe:	4b6a      	ldr	r3, [pc, #424]	; (8009068 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	099b      	lsrs	r3, r3, #6
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ec8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ed6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008eda:	4622      	mov	r2, r4
 8008edc:	462b      	mov	r3, r5
 8008ede:	f04f 0000 	mov.w	r0, #0
 8008ee2:	f04f 0100 	mov.w	r1, #0
 8008ee6:	0159      	lsls	r1, r3, #5
 8008ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008eec:	0150      	lsls	r0, r2, #5
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	1a51      	subs	r1, r2, r1
 8008ef6:	6139      	str	r1, [r7, #16]
 8008ef8:	4629      	mov	r1, r5
 8008efa:	eb63 0301 	sbc.w	r3, r3, r1
 8008efe:	617b      	str	r3, [r7, #20]
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	f04f 0300 	mov.w	r3, #0
 8008f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f0c:	4659      	mov	r1, fp
 8008f0e:	018b      	lsls	r3, r1, #6
 8008f10:	4651      	mov	r1, sl
 8008f12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008f16:	4651      	mov	r1, sl
 8008f18:	018a      	lsls	r2, r1, #6
 8008f1a:	4651      	mov	r1, sl
 8008f1c:	ebb2 0801 	subs.w	r8, r2, r1
 8008f20:	4659      	mov	r1, fp
 8008f22:	eb63 0901 	sbc.w	r9, r3, r1
 8008f26:	f04f 0200 	mov.w	r2, #0
 8008f2a:	f04f 0300 	mov.w	r3, #0
 8008f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f3a:	4690      	mov	r8, r2
 8008f3c:	4699      	mov	r9, r3
 8008f3e:	4623      	mov	r3, r4
 8008f40:	eb18 0303 	adds.w	r3, r8, r3
 8008f44:	60bb      	str	r3, [r7, #8]
 8008f46:	462b      	mov	r3, r5
 8008f48:	eb49 0303 	adc.w	r3, r9, r3
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	f04f 0200 	mov.w	r2, #0
 8008f52:	f04f 0300 	mov.w	r3, #0
 8008f56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	024b      	lsls	r3, r1, #9
 8008f5e:	4621      	mov	r1, r4
 8008f60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008f64:	4621      	mov	r1, r4
 8008f66:	024a      	lsls	r2, r1, #9
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f6e:	2200      	movs	r2, #0
 8008f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f78:	f7f7 fe80 	bl	8000c7c <__aeabi_uldivmod>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4613      	mov	r3, r2
 8008f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f84:	e058      	b.n	8009038 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f86:	4b38      	ldr	r3, [pc, #224]	; (8009068 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	099b      	lsrs	r3, r3, #6
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	4618      	mov	r0, r3
 8008f90:	4611      	mov	r1, r2
 8008f92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008f96:	623b      	str	r3, [r7, #32]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	464b      	mov	r3, r9
 8008fa4:	f04f 0000 	mov.w	r0, #0
 8008fa8:	f04f 0100 	mov.w	r1, #0
 8008fac:	0159      	lsls	r1, r3, #5
 8008fae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fb2:	0150      	lsls	r0, r2, #5
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4641      	mov	r1, r8
 8008fba:	ebb2 0a01 	subs.w	sl, r2, r1
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008fc4:	f04f 0200 	mov.w	r2, #0
 8008fc8:	f04f 0300 	mov.w	r3, #0
 8008fcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008fd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008fd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008fd8:	ebb2 040a 	subs.w	r4, r2, sl
 8008fdc:	eb63 050b 	sbc.w	r5, r3, fp
 8008fe0:	f04f 0200 	mov.w	r2, #0
 8008fe4:	f04f 0300 	mov.w	r3, #0
 8008fe8:	00eb      	lsls	r3, r5, #3
 8008fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fee:	00e2      	lsls	r2, r4, #3
 8008ff0:	4614      	mov	r4, r2
 8008ff2:	461d      	mov	r5, r3
 8008ff4:	4643      	mov	r3, r8
 8008ff6:	18e3      	adds	r3, r4, r3
 8008ff8:	603b      	str	r3, [r7, #0]
 8008ffa:	464b      	mov	r3, r9
 8008ffc:	eb45 0303 	adc.w	r3, r5, r3
 8009000:	607b      	str	r3, [r7, #4]
 8009002:	f04f 0200 	mov.w	r2, #0
 8009006:	f04f 0300 	mov.w	r3, #0
 800900a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800900e:	4629      	mov	r1, r5
 8009010:	028b      	lsls	r3, r1, #10
 8009012:	4621      	mov	r1, r4
 8009014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009018:	4621      	mov	r1, r4
 800901a:	028a      	lsls	r2, r1, #10
 800901c:	4610      	mov	r0, r2
 800901e:	4619      	mov	r1, r3
 8009020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009022:	2200      	movs	r2, #0
 8009024:	61bb      	str	r3, [r7, #24]
 8009026:	61fa      	str	r2, [r7, #28]
 8009028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800902c:	f7f7 fe26 	bl	8000c7c <__aeabi_uldivmod>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4613      	mov	r3, r2
 8009036:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009038:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <HAL_RCC_GetSysClockFreq+0x200>)
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	0c1b      	lsrs	r3, r3, #16
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	3301      	adds	r3, #1
 8009044:	005b      	lsls	r3, r3, #1
 8009046:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009048:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800904a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800904c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009050:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009052:	e002      	b.n	800905a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009054:	4b05      	ldr	r3, [pc, #20]	; (800906c <HAL_RCC_GetSysClockFreq+0x204>)
 8009056:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800905a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800905c:	4618      	mov	r0, r3
 800905e:	3750      	adds	r7, #80	; 0x50
 8009060:	46bd      	mov	sp, r7
 8009062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009066:	bf00      	nop
 8009068:	40023800 	.word	0x40023800
 800906c:	00f42400 	.word	0x00f42400
 8009070:	007a1200 	.word	0x007a1200

08009074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009074:	b480      	push	{r7}
 8009076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009078:	4b03      	ldr	r3, [pc, #12]	; (8009088 <HAL_RCC_GetHCLKFreq+0x14>)
 800907a:	681b      	ldr	r3, [r3, #0]
}
 800907c:	4618      	mov	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	20000180 	.word	0x20000180

0800908c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009090:	f7ff fff0 	bl	8009074 <HAL_RCC_GetHCLKFreq>
 8009094:	4602      	mov	r2, r0
 8009096:	4b05      	ldr	r3, [pc, #20]	; (80090ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	0a9b      	lsrs	r3, r3, #10
 800909c:	f003 0307 	and.w	r3, r3, #7
 80090a0:	4903      	ldr	r1, [pc, #12]	; (80090b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090a2:	5ccb      	ldrb	r3, [r1, r3]
 80090a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	40023800 	.word	0x40023800
 80090b0:	080140f4 	.word	0x080140f4

080090b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80090b8:	f7ff ffdc 	bl	8009074 <HAL_RCC_GetHCLKFreq>
 80090bc:	4602      	mov	r2, r0
 80090be:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	0b5b      	lsrs	r3, r3, #13
 80090c4:	f003 0307 	and.w	r3, r3, #7
 80090c8:	4903      	ldr	r1, [pc, #12]	; (80090d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090ca:	5ccb      	ldrb	r3, [r1, r3]
 80090cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	40023800 	.word	0x40023800
 80090d8:	080140f4 	.word	0x080140f4

080090dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0301 	and.w	r3, r3, #1
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009100:	2b00      	cmp	r3, #0
 8009102:	d105      	bne.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800910c:	2b00      	cmp	r3, #0
 800910e:	d075      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009110:	4b91      	ldr	r3, [pc, #580]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009112:	2200      	movs	r2, #0
 8009114:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009116:	f7fd ff1f 	bl	8006f58 <HAL_GetTick>
 800911a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800911c:	e008      	b.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800911e:	f7fd ff1b 	bl	8006f58 <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	2b02      	cmp	r3, #2
 800912a:	d901      	bls.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e189      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009130:	4b8a      	ldr	r3, [pc, #552]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1f0      	bne.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	d009      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	019a      	lsls	r2, r3, #6
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	071b      	lsls	r3, r3, #28
 8009154:	4981      	ldr	r1, [pc, #516]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009156:	4313      	orrs	r3, r2
 8009158:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	2b00      	cmp	r3, #0
 8009166:	d01f      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009168:	4b7c      	ldr	r3, [pc, #496]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800916a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800916e:	0f1b      	lsrs	r3, r3, #28
 8009170:	f003 0307 	and.w	r3, r3, #7
 8009174:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	019a      	lsls	r2, r3, #6
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	061b      	lsls	r3, r3, #24
 8009182:	431a      	orrs	r2, r3
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	071b      	lsls	r3, r3, #28
 8009188:	4974      	ldr	r1, [pc, #464]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800918a:	4313      	orrs	r3, r2
 800918c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009190:	4b72      	ldr	r3, [pc, #456]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009196:	f023 021f 	bic.w	r2, r3, #31
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	3b01      	subs	r3, #1
 80091a0:	496e      	ldr	r1, [pc, #440]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00d      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	019a      	lsls	r2, r3, #6
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	061b      	lsls	r3, r3, #24
 80091c0:	431a      	orrs	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	071b      	lsls	r3, r3, #28
 80091c8:	4964      	ldr	r1, [pc, #400]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091ca:	4313      	orrs	r3, r2
 80091cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80091d0:	4b61      	ldr	r3, [pc, #388]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80091d2:	2201      	movs	r2, #1
 80091d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80091d6:	f7fd febf 	bl	8006f58 <HAL_GetTick>
 80091da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091dc:	e008      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80091de:	f7fd febb 	bl	8006f58 <HAL_GetTick>
 80091e2:	4602      	mov	r2, r0
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d901      	bls.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e129      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091f0:	4b5a      	ldr	r3, [pc, #360]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0f0      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	d105      	bne.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009210:	2b00      	cmp	r3, #0
 8009212:	d079      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009214:	4b52      	ldr	r3, [pc, #328]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800921a:	f7fd fe9d 	bl	8006f58 <HAL_GetTick>
 800921e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009220:	e008      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009222:	f7fd fe99 	bl	8006f58 <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b02      	cmp	r3, #2
 800922e:	d901      	bls.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e107      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009234:	4b49      	ldr	r3, [pc, #292]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800923c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009240:	d0ef      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	2b00      	cmp	r3, #0
 800924c:	d020      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800924e:	4b43      	ldr	r3, [pc, #268]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009254:	0f1b      	lsrs	r3, r3, #28
 8009256:	f003 0307 	and.w	r3, r3, #7
 800925a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	019a      	lsls	r2, r3, #6
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	061b      	lsls	r3, r3, #24
 8009268:	431a      	orrs	r2, r3
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	071b      	lsls	r3, r3, #28
 800926e:	493b      	ldr	r1, [pc, #236]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009270:	4313      	orrs	r3, r2
 8009272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009276:	4b39      	ldr	r3, [pc, #228]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800927c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	3b01      	subs	r3, #1
 8009286:	021b      	lsls	r3, r3, #8
 8009288:	4934      	ldr	r1, [pc, #208]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800928a:	4313      	orrs	r3, r2
 800928c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0308 	and.w	r3, r3, #8
 8009298:	2b00      	cmp	r3, #0
 800929a:	d01e      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800929c:	4b2f      	ldr	r3, [pc, #188]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800929e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a2:	0e1b      	lsrs	r3, r3, #24
 80092a4:	f003 030f 	and.w	r3, r3, #15
 80092a8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	019a      	lsls	r2, r3, #6
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	061b      	lsls	r3, r3, #24
 80092b4:	431a      	orrs	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	071b      	lsls	r3, r3, #28
 80092bc:	4927      	ldr	r1, [pc, #156]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80092c4:	4b25      	ldr	r3, [pc, #148]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	4922      	ldr	r1, [pc, #136]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80092da:	4b21      	ldr	r3, [pc, #132]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80092dc:	2201      	movs	r2, #1
 80092de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80092e0:	f7fd fe3a 	bl	8006f58 <HAL_GetTick>
 80092e4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80092e6:	e008      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80092e8:	f7fd fe36 	bl	8006f58 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d901      	bls.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e0a4      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80092fa:	4b18      	ldr	r3, [pc, #96]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009306:	d1ef      	bne.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0320 	and.w	r3, r3, #32
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 808b 	beq.w	800942c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009316:	2300      	movs	r3, #0
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	4b10      	ldr	r3, [pc, #64]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800931c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931e:	4a0f      	ldr	r2, [pc, #60]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009324:	6413      	str	r3, [r2, #64]	; 0x40
 8009326:	4b0d      	ldr	r3, [pc, #52]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009332:	4b0c      	ldr	r3, [pc, #48]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a0b      	ldr	r2, [pc, #44]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800933c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800933e:	f7fd fe0b 	bl	8006f58 <HAL_GetTick>
 8009342:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009344:	e010      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009346:	f7fd fe07 	bl	8006f58 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	2b02      	cmp	r3, #2
 8009352:	d909      	bls.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e075      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009358:	42470068 	.word	0x42470068
 800935c:	40023800 	.word	0x40023800
 8009360:	42470070 	.word	0x42470070
 8009364:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009368:	4b38      	ldr	r3, [pc, #224]	; (800944c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0e8      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009374:	4b36      	ldr	r3, [pc, #216]	; (8009450 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800937c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d02f      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	429a      	cmp	r2, r3
 8009390:	d028      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009392:	4b2f      	ldr	r3, [pc, #188]	; (8009450 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800939a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800939c:	4b2d      	ldr	r3, [pc, #180]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800939e:	2201      	movs	r2, #1
 80093a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80093a2:	4b2c      	ldr	r3, [pc, #176]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80093a8:	4a29      	ldr	r2, [pc, #164]	; (8009450 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80093ae:	4b28      	ldr	r3, [pc, #160]	; (8009450 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80093b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d114      	bne.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80093ba:	f7fd fdcd 	bl	8006f58 <HAL_GetTick>
 80093be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093c0:	e00a      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093c2:	f7fd fdc9 	bl	8006f58 <HAL_GetTick>
 80093c6:	4602      	mov	r2, r0
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d901      	bls.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e035      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093d8:	4b1d      	ldr	r3, [pc, #116]	; (8009450 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80093da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093dc:	f003 0302 	and.w	r3, r3, #2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0ee      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093f0:	d10d      	bne.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x332>
 80093f2:	4b17      	ldr	r3, [pc, #92]	; (8009450 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009406:	4912      	ldr	r1, [pc, #72]	; (8009450 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009408:	4313      	orrs	r3, r2
 800940a:	608b      	str	r3, [r1, #8]
 800940c:	e005      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800940e:	4b10      	ldr	r3, [pc, #64]	; (8009450 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	4a0f      	ldr	r2, [pc, #60]	; (8009450 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009414:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009418:	6093      	str	r3, [r2, #8]
 800941a:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800941c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009426:	490a      	ldr	r1, [pc, #40]	; (8009450 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009428:	4313      	orrs	r3, r2
 800942a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0310 	and.w	r3, r3, #16
 8009434:	2b00      	cmp	r3, #0
 8009436:	d004      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800943e:	4b06      	ldr	r3, [pc, #24]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8009440:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	40007000 	.word	0x40007000
 8009450:	40023800 	.word	0x40023800
 8009454:	42470e40 	.word	0x42470e40
 8009458:	424711e0 	.word	0x424711e0

0800945c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e066      	b.n	8009540 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	7f5b      	ldrb	r3, [r3, #29]
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	d105      	bne.n	8009488 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7f9 ff9e 	bl	80033c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2202      	movs	r2, #2
 800948c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	22ca      	movs	r2, #202	; 0xca
 8009494:	625a      	str	r2, [r3, #36]	; 0x24
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2253      	movs	r2, #83	; 0x53
 800949c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fa45 	bl	800992e <RTC_EnterInitMode>
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d12c      	bne.n	8009508 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	6812      	ldr	r2, [r2, #0]
 80094b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80094bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094c0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6899      	ldr	r1, [r3, #8]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	431a      	orrs	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	68d2      	ldr	r2, [r2, #12]
 80094e8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6919      	ldr	r1, [r3, #16]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	041a      	lsls	r2, r3, #16
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fa4c 	bl	800999c <RTC_ExitInitMode>
 8009504:	4603      	mov	r3, r0
 8009506:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d113      	bne.n	8009536 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800951c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	699a      	ldr	r2, [r3, #24]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	430a      	orrs	r2, r1
 800952e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	22ff      	movs	r2, #255	; 0xff
 800953c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009548:	b590      	push	{r4, r7, lr}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	7f1b      	ldrb	r3, [r3, #28]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d101      	bne.n	8009564 <HAL_RTC_SetTime+0x1c>
 8009560:	2302      	movs	r3, #2
 8009562:	e087      	b.n	8009674 <HAL_RTC_SetTime+0x12c>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2201      	movs	r2, #1
 8009568:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2202      	movs	r2, #2
 800956e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d126      	bne.n	80095c4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009580:	2b00      	cmp	r3, #0
 8009582:	d102      	bne.n	800958a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2200      	movs	r2, #0
 8009588:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	4618      	mov	r0, r3
 8009590:	f000 fa29 	bl	80099e6 <RTC_ByteToBcd2>
 8009594:	4603      	mov	r3, r0
 8009596:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fa22 	bl	80099e6 <RTC_ByteToBcd2>
 80095a2:	4603      	mov	r3, r0
 80095a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80095a6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	789b      	ldrb	r3, [r3, #2]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 fa1a 	bl	80099e6 <RTC_ByteToBcd2>
 80095b2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80095b4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	78db      	ldrb	r3, [r3, #3]
 80095bc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80095be:	4313      	orrs	r3, r2
 80095c0:	617b      	str	r3, [r7, #20]
 80095c2:	e018      	b.n	80095f6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d102      	bne.n	80095d8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2200      	movs	r2, #0
 80095d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	785b      	ldrb	r3, [r3, #1]
 80095e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80095e4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80095ea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	78db      	ldrb	r3, [r3, #3]
 80095f0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80095f2:	4313      	orrs	r3, r2
 80095f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	22ca      	movs	r2, #202	; 0xca
 80095fc:	625a      	str	r2, [r3, #36]	; 0x24
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2253      	movs	r2, #83	; 0x53
 8009604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f000 f991 	bl	800992e <RTC_EnterInitMode>
 800960c:	4603      	mov	r3, r0
 800960e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009610:	7cfb      	ldrb	r3, [r7, #19]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d120      	bne.n	8009658 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009620:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009624:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689a      	ldr	r2, [r3, #8]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009634:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6899      	ldr	r1, [r3, #8]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	68da      	ldr	r2, [r3, #12]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	431a      	orrs	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 f9a4 	bl	800999c <RTC_ExitInitMode>
 8009654:	4603      	mov	r3, r0
 8009656:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009658:	7cfb      	ldrb	r3, [r7, #19]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d102      	bne.n	8009664 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	22ff      	movs	r2, #255	; 0xff
 800966a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	771a      	strb	r2, [r3, #28]

  return status;
 8009672:	7cfb      	ldrb	r3, [r7, #19]
}
 8009674:	4618      	mov	r0, r3
 8009676:	371c      	adds	r7, #28
 8009678:	46bd      	mov	sp, r7
 800967a:	bd90      	pop	{r4, r7, pc}

0800967c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009688:	2300      	movs	r3, #0
 800968a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80096ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80096b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	0c1b      	lsrs	r3, r3, #16
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	0a1b      	lsrs	r3, r3, #8
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	0d9b      	lsrs	r3, r3, #22
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	f003 0301 	and.w	r3, r3, #1
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d11a      	bne.n	800972e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 f98f 	bl	8009a20 <RTC_Bcd2ToByte>
 8009702:	4603      	mov	r3, r0
 8009704:	461a      	mov	r2, r3
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	785b      	ldrb	r3, [r3, #1]
 800970e:	4618      	mov	r0, r3
 8009710:	f000 f986 	bl	8009a20 <RTC_Bcd2ToByte>
 8009714:	4603      	mov	r3, r0
 8009716:	461a      	mov	r2, r3
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	789b      	ldrb	r3, [r3, #2]
 8009720:	4618      	mov	r0, r3
 8009722:	f000 f97d 	bl	8009a20 <RTC_Bcd2ToByte>
 8009726:	4603      	mov	r3, r0
 8009728:	461a      	mov	r2, r3
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009738:	b590      	push	{r4, r7, lr}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	7f1b      	ldrb	r3, [r3, #28]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d101      	bne.n	8009754 <HAL_RTC_SetDate+0x1c>
 8009750:	2302      	movs	r3, #2
 8009752:	e071      	b.n	8009838 <HAL_RTC_SetDate+0x100>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2201      	movs	r2, #1
 8009758:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2202      	movs	r2, #2
 800975e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10e      	bne.n	8009784 <HAL_RTC_SetDate+0x4c>
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	785b      	ldrb	r3, [r3, #1]
 800976a:	f003 0310 	and.w	r3, r3, #16
 800976e:	2b00      	cmp	r3, #0
 8009770:	d008      	beq.n	8009784 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	785b      	ldrb	r3, [r3, #1]
 8009776:	f023 0310 	bic.w	r3, r3, #16
 800977a:	b2db      	uxtb	r3, r3
 800977c:	330a      	adds	r3, #10
 800977e:	b2da      	uxtb	r2, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d11c      	bne.n	80097c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	78db      	ldrb	r3, [r3, #3]
 800978e:	4618      	mov	r0, r3
 8009790:	f000 f929 	bl	80099e6 <RTC_ByteToBcd2>
 8009794:	4603      	mov	r3, r0
 8009796:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	785b      	ldrb	r3, [r3, #1]
 800979c:	4618      	mov	r0, r3
 800979e:	f000 f922 	bl	80099e6 <RTC_ByteToBcd2>
 80097a2:	4603      	mov	r3, r0
 80097a4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80097a6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	789b      	ldrb	r3, [r3, #2]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 f91a 	bl	80099e6 <RTC_ByteToBcd2>
 80097b2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80097b4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80097be:	4313      	orrs	r3, r2
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	e00e      	b.n	80097e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	78db      	ldrb	r3, [r3, #3]
 80097c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	785b      	ldrb	r3, [r3, #1]
 80097ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80097d0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80097d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80097de:	4313      	orrs	r3, r2
 80097e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	22ca      	movs	r2, #202	; 0xca
 80097e8:	625a      	str	r2, [r3, #36]	; 0x24
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2253      	movs	r2, #83	; 0x53
 80097f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 f89b 	bl	800992e <RTC_EnterInitMode>
 80097f8:	4603      	mov	r3, r0
 80097fa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80097fc:	7cfb      	ldrb	r3, [r7, #19]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10c      	bne.n	800981c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800980c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009810:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 f8c2 	bl	800999c <RTC_ExitInitMode>
 8009818:	4603      	mov	r3, r0
 800981a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800981c:	7cfb      	ldrb	r3, [r7, #19]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d102      	bne.n	8009828 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2201      	movs	r2, #1
 8009826:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	22ff      	movs	r2, #255	; 0xff
 800982e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	771a      	strb	r2, [r3, #28]

  return status;
 8009836:	7cfb      	ldrb	r3, [r7, #19]
}
 8009838:	4618      	mov	r0, r3
 800983a:	371c      	adds	r7, #28
 800983c:	46bd      	mov	sp, r7
 800983e:	bd90      	pop	{r4, r7, pc}

08009840 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800985a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800985e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	0c1b      	lsrs	r3, r3, #16
 8009864:	b2da      	uxtb	r2, r3
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	0a1b      	lsrs	r3, r3, #8
 800986e:	b2db      	uxtb	r3, r3
 8009870:	f003 031f 	and.w	r3, r3, #31
 8009874:	b2da      	uxtb	r2, r3
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	b2db      	uxtb	r3, r3
 800987e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009882:	b2da      	uxtb	r2, r3
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	0b5b      	lsrs	r3, r3, #13
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	b2da      	uxtb	r2, r3
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d11a      	bne.n	80098d4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	78db      	ldrb	r3, [r3, #3]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 f8bc 	bl	8009a20 <RTC_Bcd2ToByte>
 80098a8:	4603      	mov	r3, r0
 80098aa:	461a      	mov	r2, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	785b      	ldrb	r3, [r3, #1]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 f8b3 	bl	8009a20 <RTC_Bcd2ToByte>
 80098ba:	4603      	mov	r3, r0
 80098bc:	461a      	mov	r2, r3
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	789b      	ldrb	r3, [r3, #2]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 f8aa 	bl	8009a20 <RTC_Bcd2ToByte>
 80098cc:	4603      	mov	r3, r0
 80098ce:	461a      	mov	r2, r3
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b084      	sub	sp, #16
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80098e6:	2300      	movs	r3, #0
 80098e8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68da      	ldr	r2, [r3, #12]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80098f8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80098fa:	f7fd fb2d 	bl	8006f58 <HAL_GetTick>
 80098fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009900:	e009      	b.n	8009916 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009902:	f7fd fb29 	bl	8006f58 <HAL_GetTick>
 8009906:	4602      	mov	r2, r0
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009910:	d901      	bls.n	8009916 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e007      	b.n	8009926 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f003 0320 	and.w	r3, r3, #32
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0ee      	beq.n	8009902 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009948:	2b00      	cmp	r3, #0
 800994a:	d122      	bne.n	8009992 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68da      	ldr	r2, [r3, #12]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800995a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800995c:	f7fd fafc 	bl	8006f58 <HAL_GetTick>
 8009960:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009962:	e00c      	b.n	800997e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009964:	f7fd faf8 	bl	8006f58 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009972:	d904      	bls.n	800997e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2204      	movs	r2, #4
 8009978:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009988:	2b00      	cmp	r3, #0
 800998a:	d102      	bne.n	8009992 <RTC_EnterInitMode+0x64>
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d1e8      	bne.n	8009964 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009992:	7bfb      	ldrb	r3, [r7, #15]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68da      	ldr	r2, [r3, #12]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099b6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f003 0320 	and.w	r3, r3, #32
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10a      	bne.n	80099dc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7ff ff89 	bl	80098de <HAL_RTC_WaitForSynchro>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d004      	beq.n	80099dc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2204      	movs	r2, #4
 80099d6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b085      	sub	sp, #20
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	4603      	mov	r3, r0
 80099ee:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80099f4:	e005      	b.n	8009a02 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	3301      	adds	r3, #1
 80099fa:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	3b0a      	subs	r3, #10
 8009a00:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	2b09      	cmp	r3, #9
 8009a06:	d8f6      	bhi.n	80099f6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	011b      	lsls	r3, r3, #4
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	79fb      	ldrb	r3, [r7, #7]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	b2db      	uxtb	r3, r3
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	091b      	lsrs	r3, r3, #4
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	461a      	mov	r2, r3
 8009a36:	0092      	lsls	r2, r2, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	005b      	lsls	r3, r3, #1
 8009a3c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	f003 030f 	and.w	r3, r3, #15
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	4413      	add	r3, r2
 8009a4a:	b2db      	uxtb	r3, r3
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d101      	bne.n	8009a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e07b      	b.n	8009b62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d108      	bne.n	8009a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a7a:	d009      	beq.n	8009a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	61da      	str	r2, [r3, #28]
 8009a82:	e005      	b.n	8009a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f7f9 fcea 	bl	8003484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ac6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009ad8:	431a      	orrs	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	431a      	orrs	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	431a      	orrs	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b00:	431a      	orrs	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	69db      	ldr	r3, [r3, #28]
 8009b06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b0a:	431a      	orrs	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b14:	ea42 0103 	orr.w	r1, r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	430a      	orrs	r2, r1
 8009b26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	0c1b      	lsrs	r3, r3, #16
 8009b2e:	f003 0104 	and.w	r1, r3, #4
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b36:	f003 0210 	and.w	r2, r3, #16
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69da      	ldr	r2, [r3, #28]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b088      	sub	sp, #32
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	60b9      	str	r1, [r7, #8]
 8009b74:	603b      	str	r3, [r7, #0]
 8009b76:	4613      	mov	r3, r2
 8009b78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <HAL_SPI_Transmit+0x22>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e126      	b.n	8009dda <HAL_SPI_Transmit+0x270>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b94:	f7fd f9e0 	bl	8006f58 <HAL_GetTick>
 8009b98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009b9a:	88fb      	ldrh	r3, [r7, #6]
 8009b9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d002      	beq.n	8009bb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009baa:	2302      	movs	r3, #2
 8009bac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009bae:	e10b      	b.n	8009dc8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d002      	beq.n	8009bbc <HAL_SPI_Transmit+0x52>
 8009bb6:	88fb      	ldrh	r3, [r7, #6]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d102      	bne.n	8009bc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009bc0:	e102      	b.n	8009dc8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2203      	movs	r2, #3
 8009bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	88fa      	ldrh	r2, [r7, #6]
 8009bda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	88fa      	ldrh	r2, [r7, #6]
 8009be0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c08:	d10f      	bne.n	8009c2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c34:	2b40      	cmp	r3, #64	; 0x40
 8009c36:	d007      	beq.n	8009c48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c50:	d14b      	bne.n	8009cea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d002      	beq.n	8009c60 <HAL_SPI_Transmit+0xf6>
 8009c5a:	8afb      	ldrh	r3, [r7, #22]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d13e      	bne.n	8009cde <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c64:	881a      	ldrh	r2, [r3, #0]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c70:	1c9a      	adds	r2, r3, #2
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c84:	e02b      	b.n	8009cde <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	f003 0302 	and.w	r3, r3, #2
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d112      	bne.n	8009cba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c98:	881a      	ldrh	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca4:	1c9a      	adds	r2, r3, #2
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8009cb8:	e011      	b.n	8009cde <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cba:	f7fd f94d 	bl	8006f58 <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d803      	bhi.n	8009cd2 <HAL_SPI_Transmit+0x168>
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd0:	d102      	bne.n	8009cd8 <HAL_SPI_Transmit+0x16e>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d102      	bne.n	8009cde <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009cdc:	e074      	b.n	8009dc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1ce      	bne.n	8009c86 <HAL_SPI_Transmit+0x11c>
 8009ce8:	e04c      	b.n	8009d84 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d002      	beq.n	8009cf8 <HAL_SPI_Transmit+0x18e>
 8009cf2:	8afb      	ldrh	r3, [r7, #22]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d140      	bne.n	8009d7a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	330c      	adds	r3, #12
 8009d02:	7812      	ldrb	r2, [r2, #0]
 8009d04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	3b01      	subs	r3, #1
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009d1e:	e02c      	b.n	8009d7a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d113      	bne.n	8009d56 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	330c      	adds	r3, #12
 8009d38:	7812      	ldrb	r2, [r2, #0]
 8009d3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d40:	1c5a      	adds	r2, r3, #1
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d54:	e011      	b.n	8009d7a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d56:	f7fd f8ff 	bl	8006f58 <HAL_GetTick>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d803      	bhi.n	8009d6e <HAL_SPI_Transmit+0x204>
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6c:	d102      	bne.n	8009d74 <HAL_SPI_Transmit+0x20a>
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009d74:	2303      	movs	r3, #3
 8009d76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d78:	e026      	b.n	8009dc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1cd      	bne.n	8009d20 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d84:	69ba      	ldr	r2, [r7, #24]
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f8b3 	bl	8009ef4 <SPI_EndRxTxTransaction>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2220      	movs	r2, #32
 8009d98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10a      	bne.n	8009db8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009da2:	2300      	movs	r3, #0
 8009da4:	613b      	str	r3, [r7, #16]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	613b      	str	r3, [r7, #16]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	613b      	str	r3, [r7, #16]
 8009db6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	77fb      	strb	r3, [r7, #31]
 8009dc4:	e000      	b.n	8009dc8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009dc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009dd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3720      	adds	r7, #32
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
	...

08009de4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b088      	sub	sp, #32
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	4613      	mov	r3, r2
 8009df2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009df4:	f7fd f8b0 	bl	8006f58 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	4413      	add	r3, r2
 8009e02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e04:	f7fd f8a8 	bl	8006f58 <HAL_GetTick>
 8009e08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e0a:	4b39      	ldr	r3, [pc, #228]	; (8009ef0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	015b      	lsls	r3, r3, #5
 8009e10:	0d1b      	lsrs	r3, r3, #20
 8009e12:	69fa      	ldr	r2, [r7, #28]
 8009e14:	fb02 f303 	mul.w	r3, r2, r3
 8009e18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e1a:	e054      	b.n	8009ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e22:	d050      	beq.n	8009ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e24:	f7fd f898 	bl	8006f58 <HAL_GetTick>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d902      	bls.n	8009e3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d13d      	bne.n	8009eb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e52:	d111      	bne.n	8009e78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e5c:	d004      	beq.n	8009e68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e66:	d107      	bne.n	8009e78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e80:	d10f      	bne.n	8009ea2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e017      	b.n	8009ee6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689a      	ldr	r2, [r3, #8]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	4013      	ands	r3, r2
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	bf0c      	ite	eq
 8009ed6:	2301      	moveq	r3, #1
 8009ed8:	2300      	movne	r3, #0
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	461a      	mov	r2, r3
 8009ede:	79fb      	ldrb	r3, [r7, #7]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d19b      	bne.n	8009e1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3720      	adds	r7, #32
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000180 	.word	0x20000180

08009ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009f00:	4b1b      	ldr	r3, [pc, #108]	; (8009f70 <SPI_EndRxTxTransaction+0x7c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a1b      	ldr	r2, [pc, #108]	; (8009f74 <SPI_EndRxTxTransaction+0x80>)
 8009f06:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0a:	0d5b      	lsrs	r3, r3, #21
 8009f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f10:	fb02 f303 	mul.w	r3, r2, r3
 8009f14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f1e:	d112      	bne.n	8009f46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2200      	movs	r2, #0
 8009f28:	2180      	movs	r1, #128	; 0x80
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f7ff ff5a 	bl	8009de4 <SPI_WaitFlagStateUntilTimeout>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d016      	beq.n	8009f64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3a:	f043 0220 	orr.w	r2, r3, #32
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e00f      	b.n	8009f66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00a      	beq.n	8009f62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f5c:	2b80      	cmp	r3, #128	; 0x80
 8009f5e:	d0f2      	beq.n	8009f46 <SPI_EndRxTxTransaction+0x52>
 8009f60:	e000      	b.n	8009f64 <SPI_EndRxTxTransaction+0x70>
        break;
 8009f62:	bf00      	nop
  }

  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	20000180 	.word	0x20000180
 8009f74:	165e9f81 	.word	0x165e9f81

08009f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e041      	b.n	800a00e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d106      	bne.n	8009fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7f9 fcc8 	bl	8003934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	f000 fc7a 	bl	800a8b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d001      	beq.n	800a030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e04e      	b.n	800a0ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68da      	ldr	r2, [r3, #12]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f042 0201 	orr.w	r2, r2, #1
 800a046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a23      	ldr	r2, [pc, #140]	; (800a0dc <HAL_TIM_Base_Start_IT+0xc4>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d022      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a05a:	d01d      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a1f      	ldr	r2, [pc, #124]	; (800a0e0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d018      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a1e      	ldr	r2, [pc, #120]	; (800a0e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d013      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a1c      	ldr	r2, [pc, #112]	; (800a0e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d00e      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a1b      	ldr	r2, [pc, #108]	; (800a0ec <HAL_TIM_Base_Start_IT+0xd4>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d009      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a19      	ldr	r2, [pc, #100]	; (800a0f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d004      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a18      	ldr	r2, [pc, #96]	; (800a0f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d111      	bne.n	800a0bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f003 0307 	and.w	r3, r3, #7
 800a0a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b06      	cmp	r3, #6
 800a0a8:	d010      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f042 0201 	orr.w	r2, r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ba:	e007      	b.n	800a0cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0201 	orr.w	r2, r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	40010000 	.word	0x40010000
 800a0e0:	40000400 	.word	0x40000400
 800a0e4:	40000800 	.word	0x40000800
 800a0e8:	40000c00 	.word	0x40000c00
 800a0ec:	40010400 	.word	0x40010400
 800a0f0:	40014000 	.word	0x40014000
 800a0f4:	40001800 	.word	0x40001800

0800a0f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e041      	b.n	800a18e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d106      	bne.n	800a124 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f839 	bl	800a196 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2202      	movs	r2, #2
 800a128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3304      	adds	r3, #4
 800a134:	4619      	mov	r1, r3
 800a136:	4610      	mov	r0, r2
 800a138:	f000 fbba 	bl	800a8b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a196:	b480      	push	{r7}
 800a198:	b083      	sub	sp, #12
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a19e:	bf00      	nop
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
	...

0800a1ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d109      	bne.n	800a1d0 <HAL_TIM_PWM_Start+0x24>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	bf14      	ite	ne
 800a1c8:	2301      	movne	r3, #1
 800a1ca:	2300      	moveq	r3, #0
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	e022      	b.n	800a216 <HAL_TIM_PWM_Start+0x6a>
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b04      	cmp	r3, #4
 800a1d4:	d109      	bne.n	800a1ea <HAL_TIM_PWM_Start+0x3e>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	bf14      	ite	ne
 800a1e2:	2301      	movne	r3, #1
 800a1e4:	2300      	moveq	r3, #0
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	e015      	b.n	800a216 <HAL_TIM_PWM_Start+0x6a>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b08      	cmp	r3, #8
 800a1ee:	d109      	bne.n	800a204 <HAL_TIM_PWM_Start+0x58>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	bf14      	ite	ne
 800a1fc:	2301      	movne	r3, #1
 800a1fe:	2300      	moveq	r3, #0
 800a200:	b2db      	uxtb	r3, r3
 800a202:	e008      	b.n	800a216 <HAL_TIM_PWM_Start+0x6a>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	bf14      	ite	ne
 800a210:	2301      	movne	r3, #1
 800a212:	2300      	moveq	r3, #0
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e07c      	b.n	800a318 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d104      	bne.n	800a22e <HAL_TIM_PWM_Start+0x82>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2202      	movs	r2, #2
 800a228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a22c:	e013      	b.n	800a256 <HAL_TIM_PWM_Start+0xaa>
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b04      	cmp	r3, #4
 800a232:	d104      	bne.n	800a23e <HAL_TIM_PWM_Start+0x92>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a23c:	e00b      	b.n	800a256 <HAL_TIM_PWM_Start+0xaa>
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b08      	cmp	r3, #8
 800a242:	d104      	bne.n	800a24e <HAL_TIM_PWM_Start+0xa2>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a24c:	e003      	b.n	800a256 <HAL_TIM_PWM_Start+0xaa>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2202      	movs	r2, #2
 800a252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2201      	movs	r2, #1
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 fe10 	bl	800ae84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a2d      	ldr	r2, [pc, #180]	; (800a320 <HAL_TIM_PWM_Start+0x174>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d004      	beq.n	800a278 <HAL_TIM_PWM_Start+0xcc>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a2c      	ldr	r2, [pc, #176]	; (800a324 <HAL_TIM_PWM_Start+0x178>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d101      	bne.n	800a27c <HAL_TIM_PWM_Start+0xd0>
 800a278:	2301      	movs	r3, #1
 800a27a:	e000      	b.n	800a27e <HAL_TIM_PWM_Start+0xd2>
 800a27c:	2300      	movs	r3, #0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d007      	beq.n	800a292 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a22      	ldr	r2, [pc, #136]	; (800a320 <HAL_TIM_PWM_Start+0x174>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d022      	beq.n	800a2e2 <HAL_TIM_PWM_Start+0x136>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a4:	d01d      	beq.n	800a2e2 <HAL_TIM_PWM_Start+0x136>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a1f      	ldr	r2, [pc, #124]	; (800a328 <HAL_TIM_PWM_Start+0x17c>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d018      	beq.n	800a2e2 <HAL_TIM_PWM_Start+0x136>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a1d      	ldr	r2, [pc, #116]	; (800a32c <HAL_TIM_PWM_Start+0x180>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d013      	beq.n	800a2e2 <HAL_TIM_PWM_Start+0x136>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a1c      	ldr	r2, [pc, #112]	; (800a330 <HAL_TIM_PWM_Start+0x184>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d00e      	beq.n	800a2e2 <HAL_TIM_PWM_Start+0x136>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a16      	ldr	r2, [pc, #88]	; (800a324 <HAL_TIM_PWM_Start+0x178>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d009      	beq.n	800a2e2 <HAL_TIM_PWM_Start+0x136>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a18      	ldr	r2, [pc, #96]	; (800a334 <HAL_TIM_PWM_Start+0x188>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d004      	beq.n	800a2e2 <HAL_TIM_PWM_Start+0x136>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a16      	ldr	r2, [pc, #88]	; (800a338 <HAL_TIM_PWM_Start+0x18c>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d111      	bne.n	800a306 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	f003 0307 	and.w	r3, r3, #7
 800a2ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b06      	cmp	r3, #6
 800a2f2:	d010      	beq.n	800a316 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f042 0201 	orr.w	r2, r2, #1
 800a302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a304:	e007      	b.n	800a316 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f042 0201 	orr.w	r2, r2, #1
 800a314:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	40010000 	.word	0x40010000
 800a324:	40010400 	.word	0x40010400
 800a328:	40000400 	.word	0x40000400
 800a32c:	40000800 	.word	0x40000800
 800a330:	40000c00 	.word	0x40000c00
 800a334:	40014000 	.word	0x40014000
 800a338:	40001800 	.word	0x40001800

0800a33c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	f003 0302 	and.w	r3, r3, #2
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d122      	bne.n	800a398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d11b      	bne.n	800a398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f06f 0202 	mvn.w	r2, #2
 800a368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	f003 0303 	and.w	r3, r3, #3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fa77 	bl	800a872 <HAL_TIM_IC_CaptureCallback>
 800a384:	e005      	b.n	800a392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fa69 	bl	800a85e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fa7a 	bl	800a886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	f003 0304 	and.w	r3, r3, #4
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d122      	bne.n	800a3ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d11b      	bne.n	800a3ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f06f 0204 	mvn.w	r2, #4
 800a3bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fa4d 	bl	800a872 <HAL_TIM_IC_CaptureCallback>
 800a3d8:	e005      	b.n	800a3e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fa3f 	bl	800a85e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fa50 	bl	800a886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	f003 0308 	and.w	r3, r3, #8
 800a3f6:	2b08      	cmp	r3, #8
 800a3f8:	d122      	bne.n	800a440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	f003 0308 	and.w	r3, r3, #8
 800a404:	2b08      	cmp	r3, #8
 800a406:	d11b      	bne.n	800a440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f06f 0208 	mvn.w	r2, #8
 800a410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2204      	movs	r2, #4
 800a416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	f003 0303 	and.w	r3, r3, #3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fa23 	bl	800a872 <HAL_TIM_IC_CaptureCallback>
 800a42c:	e005      	b.n	800a43a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fa15 	bl	800a85e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fa26 	bl	800a886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	f003 0310 	and.w	r3, r3, #16
 800a44a:	2b10      	cmp	r3, #16
 800a44c:	d122      	bne.n	800a494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f003 0310 	and.w	r3, r3, #16
 800a458:	2b10      	cmp	r3, #16
 800a45a:	d11b      	bne.n	800a494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f06f 0210 	mvn.w	r2, #16
 800a464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2208      	movs	r2, #8
 800a46a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f9f9 	bl	800a872 <HAL_TIM_IC_CaptureCallback>
 800a480:	e005      	b.n	800a48e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f9eb 	bl	800a85e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f9fc 	bl	800a886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d10e      	bne.n	800a4c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d107      	bne.n	800a4c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f06f 0201 	mvn.w	r2, #1
 800a4b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7f8 ff0e 	bl	80032dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ca:	2b80      	cmp	r3, #128	; 0x80
 800a4cc:	d10e      	bne.n	800a4ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d8:	2b80      	cmp	r3, #128	; 0x80
 800a4da:	d107      	bne.n	800a4ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fdca 	bl	800b080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f6:	2b40      	cmp	r3, #64	; 0x40
 800a4f8:	d10e      	bne.n	800a518 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a504:	2b40      	cmp	r3, #64	; 0x40
 800a506:	d107      	bne.n	800a518 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f9c1 	bl	800a89a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	f003 0320 	and.w	r3, r3, #32
 800a522:	2b20      	cmp	r3, #32
 800a524:	d10e      	bne.n	800a544 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	f003 0320 	and.w	r3, r3, #32
 800a530:	2b20      	cmp	r3, #32
 800a532:	d107      	bne.n	800a544 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f06f 0220 	mvn.w	r2, #32
 800a53c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fd94 	bl	800b06c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a558:	2300      	movs	r3, #0
 800a55a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a562:	2b01      	cmp	r3, #1
 800a564:	d101      	bne.n	800a56a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a566:	2302      	movs	r3, #2
 800a568:	e0ae      	b.n	800a6c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b0c      	cmp	r3, #12
 800a576:	f200 809f 	bhi.w	800a6b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a57a:	a201      	add	r2, pc, #4	; (adr r2, 800a580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a580:	0800a5b5 	.word	0x0800a5b5
 800a584:	0800a6b9 	.word	0x0800a6b9
 800a588:	0800a6b9 	.word	0x0800a6b9
 800a58c:	0800a6b9 	.word	0x0800a6b9
 800a590:	0800a5f5 	.word	0x0800a5f5
 800a594:	0800a6b9 	.word	0x0800a6b9
 800a598:	0800a6b9 	.word	0x0800a6b9
 800a59c:	0800a6b9 	.word	0x0800a6b9
 800a5a0:	0800a637 	.word	0x0800a637
 800a5a4:	0800a6b9 	.word	0x0800a6b9
 800a5a8:	0800a6b9 	.word	0x0800a6b9
 800a5ac:	0800a6b9 	.word	0x0800a6b9
 800a5b0:	0800a677 	.word	0x0800a677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68b9      	ldr	r1, [r7, #8]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 fa18 	bl	800a9f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	699a      	ldr	r2, [r3, #24]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f042 0208 	orr.w	r2, r2, #8
 800a5ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	699a      	ldr	r2, [r3, #24]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f022 0204 	bic.w	r2, r2, #4
 800a5de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6999      	ldr	r1, [r3, #24]
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	691a      	ldr	r2, [r3, #16]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	619a      	str	r2, [r3, #24]
      break;
 800a5f2:	e064      	b.n	800a6be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68b9      	ldr	r1, [r7, #8]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 fa68 	bl	800aad0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	699a      	ldr	r2, [r3, #24]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a60e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	699a      	ldr	r2, [r3, #24]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a61e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6999      	ldr	r1, [r3, #24]
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	021a      	lsls	r2, r3, #8
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	430a      	orrs	r2, r1
 800a632:	619a      	str	r2, [r3, #24]
      break;
 800a634:	e043      	b.n	800a6be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68b9      	ldr	r1, [r7, #8]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 fabd 	bl	800abbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	69da      	ldr	r2, [r3, #28]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f042 0208 	orr.w	r2, r2, #8
 800a650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	69da      	ldr	r2, [r3, #28]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f022 0204 	bic.w	r2, r2, #4
 800a660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	69d9      	ldr	r1, [r3, #28]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	691a      	ldr	r2, [r3, #16]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	430a      	orrs	r2, r1
 800a672:	61da      	str	r2, [r3, #28]
      break;
 800a674:	e023      	b.n	800a6be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68b9      	ldr	r1, [r7, #8]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 fb11 	bl	800aca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	69da      	ldr	r2, [r3, #28]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	69da      	ldr	r2, [r3, #28]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	69d9      	ldr	r1, [r3, #28]
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	021a      	lsls	r2, r3, #8
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	61da      	str	r2, [r3, #28]
      break;
 800a6b6:	e002      	b.n	800a6be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a6bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d101      	bne.n	800a6ec <HAL_TIM_ConfigClockSource+0x1c>
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	e0b4      	b.n	800a856 <HAL_TIM_ConfigClockSource+0x186>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a70a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a724:	d03e      	beq.n	800a7a4 <HAL_TIM_ConfigClockSource+0xd4>
 800a726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a72a:	f200 8087 	bhi.w	800a83c <HAL_TIM_ConfigClockSource+0x16c>
 800a72e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a732:	f000 8086 	beq.w	800a842 <HAL_TIM_ConfigClockSource+0x172>
 800a736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a73a:	d87f      	bhi.n	800a83c <HAL_TIM_ConfigClockSource+0x16c>
 800a73c:	2b70      	cmp	r3, #112	; 0x70
 800a73e:	d01a      	beq.n	800a776 <HAL_TIM_ConfigClockSource+0xa6>
 800a740:	2b70      	cmp	r3, #112	; 0x70
 800a742:	d87b      	bhi.n	800a83c <HAL_TIM_ConfigClockSource+0x16c>
 800a744:	2b60      	cmp	r3, #96	; 0x60
 800a746:	d050      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x11a>
 800a748:	2b60      	cmp	r3, #96	; 0x60
 800a74a:	d877      	bhi.n	800a83c <HAL_TIM_ConfigClockSource+0x16c>
 800a74c:	2b50      	cmp	r3, #80	; 0x50
 800a74e:	d03c      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0xfa>
 800a750:	2b50      	cmp	r3, #80	; 0x50
 800a752:	d873      	bhi.n	800a83c <HAL_TIM_ConfigClockSource+0x16c>
 800a754:	2b40      	cmp	r3, #64	; 0x40
 800a756:	d058      	beq.n	800a80a <HAL_TIM_ConfigClockSource+0x13a>
 800a758:	2b40      	cmp	r3, #64	; 0x40
 800a75a:	d86f      	bhi.n	800a83c <HAL_TIM_ConfigClockSource+0x16c>
 800a75c:	2b30      	cmp	r3, #48	; 0x30
 800a75e:	d064      	beq.n	800a82a <HAL_TIM_ConfigClockSource+0x15a>
 800a760:	2b30      	cmp	r3, #48	; 0x30
 800a762:	d86b      	bhi.n	800a83c <HAL_TIM_ConfigClockSource+0x16c>
 800a764:	2b20      	cmp	r3, #32
 800a766:	d060      	beq.n	800a82a <HAL_TIM_ConfigClockSource+0x15a>
 800a768:	2b20      	cmp	r3, #32
 800a76a:	d867      	bhi.n	800a83c <HAL_TIM_ConfigClockSource+0x16c>
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d05c      	beq.n	800a82a <HAL_TIM_ConfigClockSource+0x15a>
 800a770:	2b10      	cmp	r3, #16
 800a772:	d05a      	beq.n	800a82a <HAL_TIM_ConfigClockSource+0x15a>
 800a774:	e062      	b.n	800a83c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	6899      	ldr	r1, [r3, #8]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	685a      	ldr	r2, [r3, #4]
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	f000 fb5d 	bl	800ae44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	609a      	str	r2, [r3, #8]
      break;
 800a7a2:	e04f      	b.n	800a844 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6818      	ldr	r0, [r3, #0]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	6899      	ldr	r1, [r3, #8]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	f000 fb46 	bl	800ae44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	689a      	ldr	r2, [r3, #8]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7c6:	609a      	str	r2, [r3, #8]
      break;
 800a7c8:	e03c      	b.n	800a844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6818      	ldr	r0, [r3, #0]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	6859      	ldr	r1, [r3, #4]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f000 faba 	bl	800ad50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2150      	movs	r1, #80	; 0x50
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 fb13 	bl	800ae0e <TIM_ITRx_SetConfig>
      break;
 800a7e8:	e02c      	b.n	800a844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	6859      	ldr	r1, [r3, #4]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	f000 fad9 	bl	800adae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2160      	movs	r1, #96	; 0x60
 800a802:	4618      	mov	r0, r3
 800a804:	f000 fb03 	bl	800ae0e <TIM_ITRx_SetConfig>
      break;
 800a808:	e01c      	b.n	800a844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6818      	ldr	r0, [r3, #0]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	6859      	ldr	r1, [r3, #4]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	461a      	mov	r2, r3
 800a818:	f000 fa9a 	bl	800ad50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2140      	movs	r1, #64	; 0x40
 800a822:	4618      	mov	r0, r3
 800a824:	f000 faf3 	bl	800ae0e <TIM_ITRx_SetConfig>
      break;
 800a828:	e00c      	b.n	800a844 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4619      	mov	r1, r3
 800a834:	4610      	mov	r0, r2
 800a836:	f000 faea 	bl	800ae0e <TIM_ITRx_SetConfig>
      break;
 800a83a:	e003      	b.n	800a844 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	73fb      	strb	r3, [r7, #15]
      break;
 800a840:	e000      	b.n	800a844 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a854:	7bfb      	ldrb	r3, [r7, #15]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a85e:	b480      	push	{r7}
 800a860:	b083      	sub	sp, #12
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a866:	bf00      	nop
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a872:	b480      	push	{r7}
 800a874:	b083      	sub	sp, #12
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a87a:	bf00      	nop
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a886:	b480      	push	{r7}
 800a888:	b083      	sub	sp, #12
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a88e:	bf00      	nop
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b083      	sub	sp, #12
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8a2:	bf00      	nop
 800a8a4:	370c      	adds	r7, #12
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
	...

0800a8b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a40      	ldr	r2, [pc, #256]	; (800a9c4 <TIM_Base_SetConfig+0x114>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d013      	beq.n	800a8f0 <TIM_Base_SetConfig+0x40>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ce:	d00f      	beq.n	800a8f0 <TIM_Base_SetConfig+0x40>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a3d      	ldr	r2, [pc, #244]	; (800a9c8 <TIM_Base_SetConfig+0x118>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d00b      	beq.n	800a8f0 <TIM_Base_SetConfig+0x40>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a3c      	ldr	r2, [pc, #240]	; (800a9cc <TIM_Base_SetConfig+0x11c>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d007      	beq.n	800a8f0 <TIM_Base_SetConfig+0x40>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a3b      	ldr	r2, [pc, #236]	; (800a9d0 <TIM_Base_SetConfig+0x120>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d003      	beq.n	800a8f0 <TIM_Base_SetConfig+0x40>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a3a      	ldr	r2, [pc, #232]	; (800a9d4 <TIM_Base_SetConfig+0x124>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d108      	bne.n	800a902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a2f      	ldr	r2, [pc, #188]	; (800a9c4 <TIM_Base_SetConfig+0x114>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d02b      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a910:	d027      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a2c      	ldr	r2, [pc, #176]	; (800a9c8 <TIM_Base_SetConfig+0x118>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d023      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a2b      	ldr	r2, [pc, #172]	; (800a9cc <TIM_Base_SetConfig+0x11c>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d01f      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a2a      	ldr	r2, [pc, #168]	; (800a9d0 <TIM_Base_SetConfig+0x120>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d01b      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a29      	ldr	r2, [pc, #164]	; (800a9d4 <TIM_Base_SetConfig+0x124>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d017      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a28      	ldr	r2, [pc, #160]	; (800a9d8 <TIM_Base_SetConfig+0x128>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d013      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a27      	ldr	r2, [pc, #156]	; (800a9dc <TIM_Base_SetConfig+0x12c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d00f      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a26      	ldr	r2, [pc, #152]	; (800a9e0 <TIM_Base_SetConfig+0x130>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d00b      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a25      	ldr	r2, [pc, #148]	; (800a9e4 <TIM_Base_SetConfig+0x134>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d007      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a24      	ldr	r2, [pc, #144]	; (800a9e8 <TIM_Base_SetConfig+0x138>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d003      	beq.n	800a962 <TIM_Base_SetConfig+0xb2>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a23      	ldr	r2, [pc, #140]	; (800a9ec <TIM_Base_SetConfig+0x13c>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d108      	bne.n	800a974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	4313      	orrs	r3, r2
 800a972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	4313      	orrs	r3, r2
 800a980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	689a      	ldr	r2, [r3, #8]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a0a      	ldr	r2, [pc, #40]	; (800a9c4 <TIM_Base_SetConfig+0x114>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d003      	beq.n	800a9a8 <TIM_Base_SetConfig+0xf8>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a0c      	ldr	r2, [pc, #48]	; (800a9d4 <TIM_Base_SetConfig+0x124>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d103      	bne.n	800a9b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	691a      	ldr	r2, [r3, #16]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	615a      	str	r2, [r3, #20]
}
 800a9b6:	bf00      	nop
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	40010000 	.word	0x40010000
 800a9c8:	40000400 	.word	0x40000400
 800a9cc:	40000800 	.word	0x40000800
 800a9d0:	40000c00 	.word	0x40000c00
 800a9d4:	40010400 	.word	0x40010400
 800a9d8:	40014000 	.word	0x40014000
 800a9dc:	40014400 	.word	0x40014400
 800a9e0:	40014800 	.word	0x40014800
 800a9e4:	40001800 	.word	0x40001800
 800a9e8:	40001c00 	.word	0x40001c00
 800a9ec:	40002000 	.word	0x40002000

0800a9f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b087      	sub	sp, #28
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	f023 0201 	bic.w	r2, r3, #1
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f023 0303 	bic.w	r3, r3, #3
 800aa26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f023 0302 	bic.w	r3, r3, #2
 800aa38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a20      	ldr	r2, [pc, #128]	; (800aac8 <TIM_OC1_SetConfig+0xd8>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d003      	beq.n	800aa54 <TIM_OC1_SetConfig+0x64>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a1f      	ldr	r2, [pc, #124]	; (800aacc <TIM_OC1_SetConfig+0xdc>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d10c      	bne.n	800aa6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f023 0308 	bic.w	r3, r3, #8
 800aa5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f023 0304 	bic.w	r3, r3, #4
 800aa6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a15      	ldr	r2, [pc, #84]	; (800aac8 <TIM_OC1_SetConfig+0xd8>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d003      	beq.n	800aa7e <TIM_OC1_SetConfig+0x8e>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a14      	ldr	r2, [pc, #80]	; (800aacc <TIM_OC1_SetConfig+0xdc>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d111      	bne.n	800aaa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	699b      	ldr	r3, [r3, #24]
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	621a      	str	r2, [r3, #32]
}
 800aabc:	bf00      	nop
 800aabe:	371c      	adds	r7, #28
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	40010000 	.word	0x40010000
 800aacc:	40010400 	.word	0x40010400

0800aad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	f023 0210 	bic.w	r2, r3, #16
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aafe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	021b      	lsls	r3, r3, #8
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	f023 0320 	bic.w	r3, r3, #32
 800ab1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	011b      	lsls	r3, r3, #4
 800ab22:	697a      	ldr	r2, [r7, #20]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a22      	ldr	r2, [pc, #136]	; (800abb4 <TIM_OC2_SetConfig+0xe4>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d003      	beq.n	800ab38 <TIM_OC2_SetConfig+0x68>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a21      	ldr	r2, [pc, #132]	; (800abb8 <TIM_OC2_SetConfig+0xe8>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d10d      	bne.n	800ab54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	011b      	lsls	r3, r3, #4
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a17      	ldr	r2, [pc, #92]	; (800abb4 <TIM_OC2_SetConfig+0xe4>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d003      	beq.n	800ab64 <TIM_OC2_SetConfig+0x94>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a16      	ldr	r2, [pc, #88]	; (800abb8 <TIM_OC2_SetConfig+0xe8>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d113      	bne.n	800ab8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	695b      	ldr	r3, [r3, #20]
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	693a      	ldr	r2, [r7, #16]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	693a      	ldr	r2, [r7, #16]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	697a      	ldr	r2, [r7, #20]
 800aba4:	621a      	str	r2, [r3, #32]
}
 800aba6:	bf00      	nop
 800aba8:	371c      	adds	r7, #28
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	40010000 	.word	0x40010000
 800abb8:	40010400 	.word	0x40010400

0800abbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	69db      	ldr	r3, [r3, #28]
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f023 0303 	bic.w	r3, r3, #3
 800abf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	021b      	lsls	r3, r3, #8
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a21      	ldr	r2, [pc, #132]	; (800ac9c <TIM_OC3_SetConfig+0xe0>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d003      	beq.n	800ac22 <TIM_OC3_SetConfig+0x66>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a20      	ldr	r2, [pc, #128]	; (800aca0 <TIM_OC3_SetConfig+0xe4>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d10d      	bne.n	800ac3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	021b      	lsls	r3, r3, #8
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a16      	ldr	r2, [pc, #88]	; (800ac9c <TIM_OC3_SetConfig+0xe0>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d003      	beq.n	800ac4e <TIM_OC3_SetConfig+0x92>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a15      	ldr	r2, [pc, #84]	; (800aca0 <TIM_OC3_SetConfig+0xe4>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d113      	bne.n	800ac76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	011b      	lsls	r3, r3, #4
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	011b      	lsls	r3, r3, #4
 800ac70:	693a      	ldr	r2, [r7, #16]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	621a      	str	r2, [r3, #32]
}
 800ac90:	bf00      	nop
 800ac92:	371c      	adds	r7, #28
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	40010000 	.word	0x40010000
 800aca0:	40010400 	.word	0x40010400

0800aca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6a1b      	ldr	r3, [r3, #32]
 800acbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	021b      	lsls	r3, r3, #8
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	031b      	lsls	r3, r3, #12
 800acf6:	693a      	ldr	r2, [r7, #16]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a12      	ldr	r2, [pc, #72]	; (800ad48 <TIM_OC4_SetConfig+0xa4>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d003      	beq.n	800ad0c <TIM_OC4_SetConfig+0x68>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a11      	ldr	r2, [pc, #68]	; (800ad4c <TIM_OC4_SetConfig+0xa8>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d109      	bne.n	800ad20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	019b      	lsls	r3, r3, #6
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	693a      	ldr	r2, [r7, #16]
 800ad38:	621a      	str	r2, [r3, #32]
}
 800ad3a:	bf00      	nop
 800ad3c:	371c      	adds	r7, #28
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	40010000 	.word	0x40010000
 800ad4c:	40010400 	.word	0x40010400

0800ad50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b087      	sub	sp, #28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6a1b      	ldr	r3, [r3, #32]
 800ad60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	f023 0201 	bic.w	r2, r3, #1
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	011b      	lsls	r3, r3, #4
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f023 030a 	bic.w	r3, r3, #10
 800ad8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	621a      	str	r2, [r3, #32]
}
 800ada2:	bf00      	nop
 800ada4:	371c      	adds	r7, #28
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adae:	b480      	push	{r7}
 800adb0:	b087      	sub	sp, #28
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f023 0210 	bic.w	r2, r3, #16
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6a1b      	ldr	r3, [r3, #32]
 800add0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800add8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	031b      	lsls	r3, r3, #12
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	011b      	lsls	r3, r3, #4
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	621a      	str	r2, [r3, #32]
}
 800ae02:	bf00      	nop
 800ae04:	371c      	adds	r7, #28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b085      	sub	sp, #20
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
 800ae16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	f043 0307 	orr.w	r3, r3, #7
 800ae30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	609a      	str	r2, [r3, #8]
}
 800ae38:	bf00      	nop
 800ae3a:	3714      	adds	r7, #20
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b087      	sub	sp, #28
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	021a      	lsls	r2, r3, #8
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	431a      	orrs	r2, r3
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	697a      	ldr	r2, [r7, #20]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	609a      	str	r2, [r3, #8]
}
 800ae78:	bf00      	nop
 800ae7a:	371c      	adds	r7, #28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b087      	sub	sp, #28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	f003 031f 	and.w	r3, r3, #31
 800ae96:	2201      	movs	r2, #1
 800ae98:	fa02 f303 	lsl.w	r3, r2, r3
 800ae9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6a1a      	ldr	r2, [r3, #32]
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	43db      	mvns	r3, r3
 800aea6:	401a      	ands	r2, r3
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6a1a      	ldr	r2, [r3, #32]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	f003 031f 	and.w	r3, r3, #31
 800aeb6:	6879      	ldr	r1, [r7, #4]
 800aeb8:	fa01 f303 	lsl.w	r3, r1, r3
 800aebc:	431a      	orrs	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	621a      	str	r2, [r3, #32]
}
 800aec2:	bf00      	nop
 800aec4:	371c      	adds	r7, #28
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
	...

0800aed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aee4:	2302      	movs	r3, #2
 800aee6:	e05a      	b.n	800af9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2202      	movs	r2, #2
 800aef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	4313      	orrs	r3, r2
 800af18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a21      	ldr	r2, [pc, #132]	; (800afac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d022      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af34:	d01d      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a1d      	ldr	r2, [pc, #116]	; (800afb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d018      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a1b      	ldr	r2, [pc, #108]	; (800afb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d013      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a1a      	ldr	r2, [pc, #104]	; (800afb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d00e      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a18      	ldr	r2, [pc, #96]	; (800afbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d009      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a17      	ldr	r2, [pc, #92]	; (800afc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d004      	beq.n	800af72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a15      	ldr	r2, [pc, #84]	; (800afc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d10c      	bne.n	800af8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	4313      	orrs	r3, r2
 800af82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af9c:	2300      	movs	r3, #0
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	40010000 	.word	0x40010000
 800afb0:	40000400 	.word	0x40000400
 800afb4:	40000800 	.word	0x40000800
 800afb8:	40000c00 	.word	0x40000c00
 800afbc:	40010400 	.word	0x40010400
 800afc0:	40014000 	.word	0x40014000
 800afc4:	40001800 	.word	0x40001800

0800afc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800afd2:	2300      	movs	r3, #0
 800afd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d101      	bne.n	800afe4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800afe0:	2302      	movs	r3, #2
 800afe2:	e03d      	b.n	800b060 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	4313      	orrs	r3, r2
 800b006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	4313      	orrs	r3, r2
 800b014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4313      	orrs	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	4313      	orrs	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	695b      	ldr	r3, [r3, #20]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	69db      	ldr	r3, [r3, #28]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e03f      	b.n	800b126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d106      	bne.n	800b0c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7f8 fd34 	bl	8003b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2224      	movs	r2, #36	; 0x24
 800b0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68da      	ldr	r2, [r3, #12]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b0d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fd81 	bl	800bbe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	691a      	ldr	r2, [r3, #16]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	695a      	ldr	r2, [r3, #20]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68da      	ldr	r2, [r3, #12]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b10c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2220      	movs	r2, #32
 800b118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2220      	movs	r2, #32
 800b120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b08a      	sub	sp, #40	; 0x28
 800b132:	af02      	add	r7, sp, #8
 800b134:	60f8      	str	r0, [r7, #12]
 800b136:	60b9      	str	r1, [r7, #8]
 800b138:	603b      	str	r3, [r7, #0]
 800b13a:	4613      	mov	r3, r2
 800b13c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b13e:	2300      	movs	r3, #0
 800b140:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b20      	cmp	r3, #32
 800b14c:	f040 808c 	bne.w	800b268 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d002      	beq.n	800b15c <HAL_UART_Receive+0x2e>
 800b156:	88fb      	ldrh	r3, [r7, #6]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d101      	bne.n	800b160 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e084      	b.n	800b26a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_UART_Receive+0x40>
 800b16a:	2302      	movs	r3, #2
 800b16c:	e07d      	b.n	800b26a <HAL_UART_Receive+0x13c>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2222      	movs	r2, #34	; 0x22
 800b180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b18a:	f7fb fee5 	bl	8006f58 <HAL_GetTick>
 800b18e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	88fa      	ldrh	r2, [r7, #6]
 800b194:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	88fa      	ldrh	r2, [r7, #6]
 800b19a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1a4:	d108      	bne.n	800b1b8 <HAL_UART_Receive+0x8a>
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d104      	bne.n	800b1b8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	61bb      	str	r3, [r7, #24]
 800b1b6:	e003      	b.n	800b1c0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800b1c8:	e043      	b.n	800b252 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2120      	movs	r1, #32
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f000 fafb 	bl	800b7d0 <UART_WaitOnFlagUntilTimeout>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e042      	b.n	800b26a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10c      	bne.n	800b204 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	3302      	adds	r3, #2
 800b200:	61bb      	str	r3, [r7, #24]
 800b202:	e01f      	b.n	800b244 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b20c:	d007      	beq.n	800b21e <HAL_UART_Receive+0xf0>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d10a      	bne.n	800b22c <HAL_UART_Receive+0xfe>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d106      	bne.n	800b22c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	b2da      	uxtb	r2, r3
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	701a      	strb	r2, [r3, #0]
 800b22a:	e008      	b.n	800b23e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b238:	b2da      	uxtb	r2, r3
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	3301      	adds	r3, #1
 800b242:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b248:	b29b      	uxth	r3, r3
 800b24a:	3b01      	subs	r3, #1
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b256:	b29b      	uxth	r3, r3
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1b6      	bne.n	800b1ca <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2220      	movs	r2, #32
 800b260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800b264:	2300      	movs	r3, #0
 800b266:	e000      	b.n	800b26a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800b268:	2302      	movs	r3, #2
  }
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3720      	adds	r7, #32
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b0ba      	sub	sp, #232	; 0xe8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	695b      	ldr	r3, [r3, #20]
 800b296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b29a:	2300      	movs	r3, #0
 800b29c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2aa:	f003 030f 	and.w	r3, r3, #15
 800b2ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b2b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10f      	bne.n	800b2da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2be:	f003 0320 	and.w	r3, r3, #32
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d009      	beq.n	800b2da <HAL_UART_IRQHandler+0x66>
 800b2c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2ca:	f003 0320 	and.w	r3, r3, #32
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d003      	beq.n	800b2da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fbc9 	bl	800ba6a <UART_Receive_IT>
      return;
 800b2d8:	e256      	b.n	800b788 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b2da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f000 80de 	beq.w	800b4a0 <HAL_UART_IRQHandler+0x22c>
 800b2e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2e8:	f003 0301 	and.w	r3, r3, #1
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d106      	bne.n	800b2fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b2f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 80d1 	beq.w	800b4a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b302:	f003 0301 	and.w	r3, r3, #1
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00b      	beq.n	800b322 <HAL_UART_IRQHandler+0xae>
 800b30a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b30e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b312:	2b00      	cmp	r3, #0
 800b314:	d005      	beq.n	800b322 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31a:	f043 0201 	orr.w	r2, r3, #1
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b326:	f003 0304 	and.w	r3, r3, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00b      	beq.n	800b346 <HAL_UART_IRQHandler+0xd2>
 800b32e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b332:	f003 0301 	and.w	r3, r3, #1
 800b336:	2b00      	cmp	r3, #0
 800b338:	d005      	beq.n	800b346 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33e:	f043 0202 	orr.w	r2, r3, #2
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b34a:	f003 0302 	and.w	r3, r3, #2
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00b      	beq.n	800b36a <HAL_UART_IRQHandler+0xf6>
 800b352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b356:	f003 0301 	and.w	r3, r3, #1
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d005      	beq.n	800b36a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b362:	f043 0204 	orr.w	r2, r3, #4
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b36a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b36e:	f003 0308 	and.w	r3, r3, #8
 800b372:	2b00      	cmp	r3, #0
 800b374:	d011      	beq.n	800b39a <HAL_UART_IRQHandler+0x126>
 800b376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b37a:	f003 0320 	and.w	r3, r3, #32
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d105      	bne.n	800b38e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b386:	f003 0301 	and.w	r3, r3, #1
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d005      	beq.n	800b39a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b392:	f043 0208 	orr.w	r2, r3, #8
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f000 81ed 	beq.w	800b77e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b3a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3a8:	f003 0320 	and.w	r3, r3, #32
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d008      	beq.n	800b3c2 <HAL_UART_IRQHandler+0x14e>
 800b3b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3b4:	f003 0320 	and.w	r3, r3, #32
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fb54 	bl	800ba6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	695b      	ldr	r3, [r3, #20]
 800b3c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3cc:	2b40      	cmp	r3, #64	; 0x40
 800b3ce:	bf0c      	ite	eq
 800b3d0:	2301      	moveq	r3, #1
 800b3d2:	2300      	movne	r3, #0
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3de:	f003 0308 	and.w	r3, r3, #8
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d103      	bne.n	800b3ee <HAL_UART_IRQHandler+0x17a>
 800b3e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d04f      	beq.n	800b48e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa5c 	bl	800b8ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3fe:	2b40      	cmp	r3, #64	; 0x40
 800b400:	d141      	bne.n	800b486 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3314      	adds	r3, #20
 800b408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b410:	e853 3f00 	ldrex	r3, [r3]
 800b414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b41c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3314      	adds	r3, #20
 800b42a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b42e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b43a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b43e:	e841 2300 	strex	r3, r2, [r1]
 800b442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1d9      	bne.n	800b402 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b452:	2b00      	cmp	r3, #0
 800b454:	d013      	beq.n	800b47e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45a:	4a7d      	ldr	r2, [pc, #500]	; (800b650 <HAL_UART_IRQHandler+0x3dc>)
 800b45c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b462:	4618      	mov	r0, r3
 800b464:	f7fb ff29 	bl	80072ba <HAL_DMA_Abort_IT>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d016      	beq.n	800b49c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b478:	4610      	mov	r0, r2
 800b47a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b47c:	e00e      	b.n	800b49c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f990 	bl	800b7a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b484:	e00a      	b.n	800b49c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f98c 	bl	800b7a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b48c:	e006      	b.n	800b49c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f988 	bl	800b7a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b49a:	e170      	b.n	800b77e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b49c:	bf00      	nop
    return;
 800b49e:	e16e      	b.n	800b77e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	f040 814a 	bne.w	800b73e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b4aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4ae:	f003 0310 	and.w	r3, r3, #16
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f000 8143 	beq.w	800b73e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b4b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4bc:	f003 0310 	and.w	r3, r3, #16
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f000 813c 	beq.w	800b73e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	60bb      	str	r3, [r7, #8]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	60bb      	str	r3, [r7, #8]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	60bb      	str	r3, [r7, #8]
 800b4da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	695b      	ldr	r3, [r3, #20]
 800b4e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4e6:	2b40      	cmp	r3, #64	; 0x40
 800b4e8:	f040 80b4 	bne.w	800b654 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f000 8140 	beq.w	800b782 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b50a:	429a      	cmp	r2, r3
 800b50c:	f080 8139 	bcs.w	800b782 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b516:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b522:	f000 8088 	beq.w	800b636 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	330c      	adds	r3, #12
 800b52c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b534:	e853 3f00 	ldrex	r3, [r3]
 800b538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b53c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	330c      	adds	r3, #12
 800b54e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b552:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b55e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b562:	e841 2300 	strex	r3, r2, [r1]
 800b566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b56a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1d9      	bne.n	800b526 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	3314      	adds	r3, #20
 800b578:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b57c:	e853 3f00 	ldrex	r3, [r3]
 800b580:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b584:	f023 0301 	bic.w	r3, r3, #1
 800b588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3314      	adds	r3, #20
 800b592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b596:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b59a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b59e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b5a2:	e841 2300 	strex	r3, r2, [r1]
 800b5a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b5a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1e1      	bne.n	800b572 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3314      	adds	r3, #20
 800b5b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5b8:	e853 3f00 	ldrex	r3, [r3]
 800b5bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b5be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3314      	adds	r3, #20
 800b5ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b5d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b5d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b5d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b5da:	e841 2300 	strex	r3, r2, [r1]
 800b5de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b5e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d1e3      	bne.n	800b5ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2220      	movs	r2, #32
 800b5ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	330c      	adds	r3, #12
 800b5fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fe:	e853 3f00 	ldrex	r3, [r3]
 800b602:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b606:	f023 0310 	bic.w	r3, r3, #16
 800b60a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	330c      	adds	r3, #12
 800b614:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b618:	65ba      	str	r2, [r7, #88]	; 0x58
 800b61a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b61e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b620:	e841 2300 	strex	r3, r2, [r1]
 800b624:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1e3      	bne.n	800b5f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b630:	4618      	mov	r0, r3
 800b632:	f7fb fdd2 	bl	80071da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b63e:	b29b      	uxth	r3, r3
 800b640:	1ad3      	subs	r3, r2, r3
 800b642:	b29b      	uxth	r3, r3
 800b644:	4619      	mov	r1, r3
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f8b6 	bl	800b7b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b64c:	e099      	b.n	800b782 <HAL_UART_IRQHandler+0x50e>
 800b64e:	bf00      	nop
 800b650:	0800b973 	.word	0x0800b973
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b668:	b29b      	uxth	r3, r3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f000 808b 	beq.w	800b786 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b674:	2b00      	cmp	r3, #0
 800b676:	f000 8086 	beq.w	800b786 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	330c      	adds	r3, #12
 800b680:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b684:	e853 3f00 	ldrex	r3, [r3]
 800b688:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b690:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	330c      	adds	r3, #12
 800b69a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b69e:	647a      	str	r2, [r7, #68]	; 0x44
 800b6a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b6a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6a6:	e841 2300 	strex	r3, r2, [r1]
 800b6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1e3      	bne.n	800b67a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	3314      	adds	r3, #20
 800b6b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6bc:	e853 3f00 	ldrex	r3, [r3]
 800b6c0:	623b      	str	r3, [r7, #32]
   return(result);
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	f023 0301 	bic.w	r3, r3, #1
 800b6c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	3314      	adds	r3, #20
 800b6d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b6d6:	633a      	str	r2, [r7, #48]	; 0x30
 800b6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6de:	e841 2300 	strex	r3, r2, [r1]
 800b6e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1e3      	bne.n	800b6b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2220      	movs	r2, #32
 800b6ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	330c      	adds	r3, #12
 800b6fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	e853 3f00 	ldrex	r3, [r3]
 800b706:	60fb      	str	r3, [r7, #12]
   return(result);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f023 0310 	bic.w	r3, r3, #16
 800b70e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	330c      	adds	r3, #12
 800b718:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b71c:	61fa      	str	r2, [r7, #28]
 800b71e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b720:	69b9      	ldr	r1, [r7, #24]
 800b722:	69fa      	ldr	r2, [r7, #28]
 800b724:	e841 2300 	strex	r3, r2, [r1]
 800b728:	617b      	str	r3, [r7, #20]
   return(result);
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1e3      	bne.n	800b6f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f83e 	bl	800b7b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b73c:	e023      	b.n	800b786 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b73e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b746:	2b00      	cmp	r3, #0
 800b748:	d009      	beq.n	800b75e <HAL_UART_IRQHandler+0x4ea>
 800b74a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b752:	2b00      	cmp	r3, #0
 800b754:	d003      	beq.n	800b75e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f91f 	bl	800b99a <UART_Transmit_IT>
    return;
 800b75c:	e014      	b.n	800b788 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00e      	beq.n	800b788 <HAL_UART_IRQHandler+0x514>
 800b76a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b772:	2b00      	cmp	r3, #0
 800b774:	d008      	beq.n	800b788 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f95f 	bl	800ba3a <UART_EndTransmit_IT>
    return;
 800b77c:	e004      	b.n	800b788 <HAL_UART_IRQHandler+0x514>
    return;
 800b77e:	bf00      	nop
 800b780:	e002      	b.n	800b788 <HAL_UART_IRQHandler+0x514>
      return;
 800b782:	bf00      	nop
 800b784:	e000      	b.n	800b788 <HAL_UART_IRQHandler+0x514>
      return;
 800b786:	bf00      	nop
  }
}
 800b788:	37e8      	adds	r7, #232	; 0xe8
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop

0800b790 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b798:	bf00      	nop
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b090      	sub	sp, #64	; 0x40
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	603b      	str	r3, [r7, #0]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7e0:	e050      	b.n	800b884 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e8:	d04c      	beq.n	800b884 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b7ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d007      	beq.n	800b800 <UART_WaitOnFlagUntilTimeout+0x30>
 800b7f0:	f7fb fbb2 	bl	8006f58 <HAL_GetTick>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d241      	bcs.n	800b884 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	330c      	adds	r3, #12
 800b806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80a:	e853 3f00 	ldrex	r3, [r3]
 800b80e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b816:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	330c      	adds	r3, #12
 800b81e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b820:	637a      	str	r2, [r7, #52]	; 0x34
 800b822:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b828:	e841 2300 	strex	r3, r2, [r1]
 800b82c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1e5      	bne.n	800b800 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3314      	adds	r3, #20
 800b83a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	e853 3f00 	ldrex	r3, [r3]
 800b842:	613b      	str	r3, [r7, #16]
   return(result);
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	f023 0301 	bic.w	r3, r3, #1
 800b84a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	3314      	adds	r3, #20
 800b852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b854:	623a      	str	r2, [r7, #32]
 800b856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b858:	69f9      	ldr	r1, [r7, #28]
 800b85a:	6a3a      	ldr	r2, [r7, #32]
 800b85c:	e841 2300 	strex	r3, r2, [r1]
 800b860:	61bb      	str	r3, [r7, #24]
   return(result);
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1e5      	bne.n	800b834 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2220      	movs	r2, #32
 800b86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2220      	movs	r2, #32
 800b874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	e00f      	b.n	800b8a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	4013      	ands	r3, r2
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	429a      	cmp	r2, r3
 800b892:	bf0c      	ite	eq
 800b894:	2301      	moveq	r3, #1
 800b896:	2300      	movne	r3, #0
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	461a      	mov	r2, r3
 800b89c:	79fb      	ldrb	r3, [r7, #7]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d09f      	beq.n	800b7e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3740      	adds	r7, #64	; 0x40
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b095      	sub	sp, #84	; 0x54
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	330c      	adds	r3, #12
 800b8ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8be:	e853 3f00 	ldrex	r3, [r3]
 800b8c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b8ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	330c      	adds	r3, #12
 800b8d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8d4:	643a      	str	r2, [r7, #64]	; 0x40
 800b8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b8da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8dc:	e841 2300 	strex	r3, r2, [r1]
 800b8e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1e5      	bne.n	800b8b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	3314      	adds	r3, #20
 800b8ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	e853 3f00 	ldrex	r3, [r3]
 800b8f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	f023 0301 	bic.w	r3, r3, #1
 800b8fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3314      	adds	r3, #20
 800b906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b908:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b90a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b90e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b910:	e841 2300 	strex	r3, r2, [r1]
 800b914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1e5      	bne.n	800b8e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b920:	2b01      	cmp	r3, #1
 800b922:	d119      	bne.n	800b958 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	330c      	adds	r3, #12
 800b92a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	e853 3f00 	ldrex	r3, [r3]
 800b932:	60bb      	str	r3, [r7, #8]
   return(result);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	f023 0310 	bic.w	r3, r3, #16
 800b93a:	647b      	str	r3, [r7, #68]	; 0x44
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	330c      	adds	r3, #12
 800b942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b944:	61ba      	str	r2, [r7, #24]
 800b946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b948:	6979      	ldr	r1, [r7, #20]
 800b94a:	69ba      	ldr	r2, [r7, #24]
 800b94c:	e841 2300 	strex	r3, r2, [r1]
 800b950:	613b      	str	r3, [r7, #16]
   return(result);
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1e5      	bne.n	800b924 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2220      	movs	r2, #32
 800b95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b966:	bf00      	nop
 800b968:	3754      	adds	r7, #84	; 0x54
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b084      	sub	sp, #16
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2200      	movs	r2, #0
 800b984:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f7ff ff09 	bl	800b7a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b992:	bf00      	nop
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b085      	sub	sp, #20
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b21      	cmp	r3, #33	; 0x21
 800b9ac:	d13e      	bne.n	800ba2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b6:	d114      	bne.n	800b9e2 <UART_Transmit_IT+0x48>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d110      	bne.n	800b9e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6a1b      	ldr	r3, [r3, #32]
 800b9c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	881b      	ldrh	r3, [r3, #0]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	1c9a      	adds	r2, r3, #2
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	621a      	str	r2, [r3, #32]
 800b9e0:	e008      	b.n	800b9f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	1c59      	adds	r1, r3, #1
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	6211      	str	r1, [r2, #32]
 800b9ec:	781a      	ldrb	r2, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	4619      	mov	r1, r3
 800ba02:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10f      	bne.n	800ba28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68da      	ldr	r2, [r3, #12]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	68da      	ldr	r2, [r3, #12]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e000      	b.n	800ba2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba2c:	2302      	movs	r3, #2
  }
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68da      	ldr	r2, [r3, #12]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2220      	movs	r2, #32
 800ba56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7ff fe98 	bl	800b790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b08c      	sub	sp, #48	; 0x30
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	2b22      	cmp	r3, #34	; 0x22
 800ba7c:	f040 80ab 	bne.w	800bbd6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba88:	d117      	bne.n	800baba <UART_Receive_IT+0x50>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d113      	bne.n	800baba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ba92:	2300      	movs	r3, #0
 800ba94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab2:	1c9a      	adds	r2, r3, #2
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	629a      	str	r2, [r3, #40]	; 0x28
 800bab8:	e026      	b.n	800bb08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800babe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bac0:	2300      	movs	r3, #0
 800bac2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bacc:	d007      	beq.n	800bade <UART_Receive_IT+0x74>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d10a      	bne.n	800baec <UART_Receive_IT+0x82>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d106      	bne.n	800baec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	b2da      	uxtb	r2, r3
 800bae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae8:	701a      	strb	r2, [r3, #0]
 800baea:	e008      	b.n	800bafe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baf8:	b2da      	uxtb	r2, r3
 800bafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb02:	1c5a      	adds	r2, r3, #1
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	4619      	mov	r1, r3
 800bb16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d15a      	bne.n	800bbd2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68da      	ldr	r2, [r3, #12]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f022 0220 	bic.w	r2, r2, #32
 800bb2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68da      	ldr	r2, [r3, #12]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	695a      	ldr	r2, [r3, #20]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f022 0201 	bic.w	r2, r2, #1
 800bb4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2220      	movs	r2, #32
 800bb50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d135      	bne.n	800bbc8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	330c      	adds	r3, #12
 800bb68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	e853 3f00 	ldrex	r3, [r3]
 800bb70:	613b      	str	r3, [r7, #16]
   return(result);
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f023 0310 	bic.w	r3, r3, #16
 800bb78:	627b      	str	r3, [r7, #36]	; 0x24
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	330c      	adds	r3, #12
 800bb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb82:	623a      	str	r2, [r7, #32]
 800bb84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb86:	69f9      	ldr	r1, [r7, #28]
 800bb88:	6a3a      	ldr	r2, [r7, #32]
 800bb8a:	e841 2300 	strex	r3, r2, [r1]
 800bb8e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1e5      	bne.n	800bb62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 0310 	and.w	r3, r3, #16
 800bba0:	2b10      	cmp	r3, #16
 800bba2:	d10a      	bne.n	800bbba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bba4:	2300      	movs	r3, #0
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	60fb      	str	r3, [r7, #12]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	60fb      	str	r3, [r7, #12]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f7ff fdf9 	bl	800b7b8 <HAL_UARTEx_RxEventCallback>
 800bbc6:	e002      	b.n	800bbce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7f7 fbb3 	bl	8003334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	e002      	b.n	800bbd8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	e000      	b.n	800bbd8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bbd6:	2302      	movs	r3, #2
  }
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3730      	adds	r7, #48	; 0x30
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbe4:	b0c0      	sub	sp, #256	; 0x100
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bbf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbfc:	68d9      	ldr	r1, [r3, #12]
 800bbfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	ea40 0301 	orr.w	r3, r0, r1
 800bc08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bc0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc0e:	689a      	ldr	r2, [r3, #8]
 800bc10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc14:	691b      	ldr	r3, [r3, #16]
 800bc16:	431a      	orrs	r2, r3
 800bc18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	431a      	orrs	r2, r3
 800bc20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc24:	69db      	ldr	r3, [r3, #28]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bc2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bc38:	f021 010c 	bic.w	r1, r1, #12
 800bc3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc46:	430b      	orrs	r3, r1
 800bc48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bc56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc5a:	6999      	ldr	r1, [r3, #24]
 800bc5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	ea40 0301 	orr.w	r3, r0, r1
 800bc66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bc68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	4b8f      	ldr	r3, [pc, #572]	; (800beac <UART_SetConfig+0x2cc>)
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d005      	beq.n	800bc80 <UART_SetConfig+0xa0>
 800bc74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	4b8d      	ldr	r3, [pc, #564]	; (800beb0 <UART_SetConfig+0x2d0>)
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d104      	bne.n	800bc8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bc80:	f7fd fa18 	bl	80090b4 <HAL_RCC_GetPCLK2Freq>
 800bc84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bc88:	e003      	b.n	800bc92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc8a:	f7fd f9ff 	bl	800908c <HAL_RCC_GetPCLK1Freq>
 800bc8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc96:	69db      	ldr	r3, [r3, #28]
 800bc98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc9c:	f040 810c 	bne.w	800beb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bca4:	2200      	movs	r2, #0
 800bca6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bcaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bcae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bcb2:	4622      	mov	r2, r4
 800bcb4:	462b      	mov	r3, r5
 800bcb6:	1891      	adds	r1, r2, r2
 800bcb8:	65b9      	str	r1, [r7, #88]	; 0x58
 800bcba:	415b      	adcs	r3, r3
 800bcbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	eb12 0801 	adds.w	r8, r2, r1
 800bcc8:	4629      	mov	r1, r5
 800bcca:	eb43 0901 	adc.w	r9, r3, r1
 800bcce:	f04f 0200 	mov.w	r2, #0
 800bcd2:	f04f 0300 	mov.w	r3, #0
 800bcd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bcda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bcde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bce2:	4690      	mov	r8, r2
 800bce4:	4699      	mov	r9, r3
 800bce6:	4623      	mov	r3, r4
 800bce8:	eb18 0303 	adds.w	r3, r8, r3
 800bcec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bcf0:	462b      	mov	r3, r5
 800bcf2:	eb49 0303 	adc.w	r3, r9, r3
 800bcf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bcfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bd0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bd0e:	460b      	mov	r3, r1
 800bd10:	18db      	adds	r3, r3, r3
 800bd12:	653b      	str	r3, [r7, #80]	; 0x50
 800bd14:	4613      	mov	r3, r2
 800bd16:	eb42 0303 	adc.w	r3, r2, r3
 800bd1a:	657b      	str	r3, [r7, #84]	; 0x54
 800bd1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bd20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bd24:	f7f4 ffaa 	bl	8000c7c <__aeabi_uldivmod>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	4b61      	ldr	r3, [pc, #388]	; (800beb4 <UART_SetConfig+0x2d4>)
 800bd2e:	fba3 2302 	umull	r2, r3, r3, r2
 800bd32:	095b      	lsrs	r3, r3, #5
 800bd34:	011c      	lsls	r4, r3, #4
 800bd36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bd44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bd48:	4642      	mov	r2, r8
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	1891      	adds	r1, r2, r2
 800bd4e:	64b9      	str	r1, [r7, #72]	; 0x48
 800bd50:	415b      	adcs	r3, r3
 800bd52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bd58:	4641      	mov	r1, r8
 800bd5a:	eb12 0a01 	adds.w	sl, r2, r1
 800bd5e:	4649      	mov	r1, r9
 800bd60:	eb43 0b01 	adc.w	fp, r3, r1
 800bd64:	f04f 0200 	mov.w	r2, #0
 800bd68:	f04f 0300 	mov.w	r3, #0
 800bd6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bd70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bd74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd78:	4692      	mov	sl, r2
 800bd7a:	469b      	mov	fp, r3
 800bd7c:	4643      	mov	r3, r8
 800bd7e:	eb1a 0303 	adds.w	r3, sl, r3
 800bd82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd86:	464b      	mov	r3, r9
 800bd88:	eb4b 0303 	adc.w	r3, fp, r3
 800bd8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bd90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bda0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bda4:	460b      	mov	r3, r1
 800bda6:	18db      	adds	r3, r3, r3
 800bda8:	643b      	str	r3, [r7, #64]	; 0x40
 800bdaa:	4613      	mov	r3, r2
 800bdac:	eb42 0303 	adc.w	r3, r2, r3
 800bdb0:	647b      	str	r3, [r7, #68]	; 0x44
 800bdb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bdb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bdba:	f7f4 ff5f 	bl	8000c7c <__aeabi_uldivmod>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	4611      	mov	r1, r2
 800bdc4:	4b3b      	ldr	r3, [pc, #236]	; (800beb4 <UART_SetConfig+0x2d4>)
 800bdc6:	fba3 2301 	umull	r2, r3, r3, r1
 800bdca:	095b      	lsrs	r3, r3, #5
 800bdcc:	2264      	movs	r2, #100	; 0x64
 800bdce:	fb02 f303 	mul.w	r3, r2, r3
 800bdd2:	1acb      	subs	r3, r1, r3
 800bdd4:	00db      	lsls	r3, r3, #3
 800bdd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bdda:	4b36      	ldr	r3, [pc, #216]	; (800beb4 <UART_SetConfig+0x2d4>)
 800bddc:	fba3 2302 	umull	r2, r3, r3, r2
 800bde0:	095b      	lsrs	r3, r3, #5
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bde8:	441c      	add	r4, r3
 800bdea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bdf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bdfc:	4642      	mov	r2, r8
 800bdfe:	464b      	mov	r3, r9
 800be00:	1891      	adds	r1, r2, r2
 800be02:	63b9      	str	r1, [r7, #56]	; 0x38
 800be04:	415b      	adcs	r3, r3
 800be06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800be0c:	4641      	mov	r1, r8
 800be0e:	1851      	adds	r1, r2, r1
 800be10:	6339      	str	r1, [r7, #48]	; 0x30
 800be12:	4649      	mov	r1, r9
 800be14:	414b      	adcs	r3, r1
 800be16:	637b      	str	r3, [r7, #52]	; 0x34
 800be18:	f04f 0200 	mov.w	r2, #0
 800be1c:	f04f 0300 	mov.w	r3, #0
 800be20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800be24:	4659      	mov	r1, fp
 800be26:	00cb      	lsls	r3, r1, #3
 800be28:	4651      	mov	r1, sl
 800be2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be2e:	4651      	mov	r1, sl
 800be30:	00ca      	lsls	r2, r1, #3
 800be32:	4610      	mov	r0, r2
 800be34:	4619      	mov	r1, r3
 800be36:	4603      	mov	r3, r0
 800be38:	4642      	mov	r2, r8
 800be3a:	189b      	adds	r3, r3, r2
 800be3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be40:	464b      	mov	r3, r9
 800be42:	460a      	mov	r2, r1
 800be44:	eb42 0303 	adc.w	r3, r2, r3
 800be48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800be58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800be5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800be60:	460b      	mov	r3, r1
 800be62:	18db      	adds	r3, r3, r3
 800be64:	62bb      	str	r3, [r7, #40]	; 0x28
 800be66:	4613      	mov	r3, r2
 800be68:	eb42 0303 	adc.w	r3, r2, r3
 800be6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800be72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800be76:	f7f4 ff01 	bl	8000c7c <__aeabi_uldivmod>
 800be7a:	4602      	mov	r2, r0
 800be7c:	460b      	mov	r3, r1
 800be7e:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <UART_SetConfig+0x2d4>)
 800be80:	fba3 1302 	umull	r1, r3, r3, r2
 800be84:	095b      	lsrs	r3, r3, #5
 800be86:	2164      	movs	r1, #100	; 0x64
 800be88:	fb01 f303 	mul.w	r3, r1, r3
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	00db      	lsls	r3, r3, #3
 800be90:	3332      	adds	r3, #50	; 0x32
 800be92:	4a08      	ldr	r2, [pc, #32]	; (800beb4 <UART_SetConfig+0x2d4>)
 800be94:	fba2 2303 	umull	r2, r3, r2, r3
 800be98:	095b      	lsrs	r3, r3, #5
 800be9a:	f003 0207 	and.w	r2, r3, #7
 800be9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4422      	add	r2, r4
 800bea6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bea8:	e105      	b.n	800c0b6 <UART_SetConfig+0x4d6>
 800beaa:	bf00      	nop
 800beac:	40011000 	.word	0x40011000
 800beb0:	40011400 	.word	0x40011400
 800beb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800beb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bebc:	2200      	movs	r2, #0
 800bebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bec2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bec6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800beca:	4642      	mov	r2, r8
 800becc:	464b      	mov	r3, r9
 800bece:	1891      	adds	r1, r2, r2
 800bed0:	6239      	str	r1, [r7, #32]
 800bed2:	415b      	adcs	r3, r3
 800bed4:	627b      	str	r3, [r7, #36]	; 0x24
 800bed6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800beda:	4641      	mov	r1, r8
 800bedc:	1854      	adds	r4, r2, r1
 800bede:	4649      	mov	r1, r9
 800bee0:	eb43 0501 	adc.w	r5, r3, r1
 800bee4:	f04f 0200 	mov.w	r2, #0
 800bee8:	f04f 0300 	mov.w	r3, #0
 800beec:	00eb      	lsls	r3, r5, #3
 800beee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bef2:	00e2      	lsls	r2, r4, #3
 800bef4:	4614      	mov	r4, r2
 800bef6:	461d      	mov	r5, r3
 800bef8:	4643      	mov	r3, r8
 800befa:	18e3      	adds	r3, r4, r3
 800befc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf00:	464b      	mov	r3, r9
 800bf02:	eb45 0303 	adc.w	r3, r5, r3
 800bf06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bf0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bf1a:	f04f 0200 	mov.w	r2, #0
 800bf1e:	f04f 0300 	mov.w	r3, #0
 800bf22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bf26:	4629      	mov	r1, r5
 800bf28:	008b      	lsls	r3, r1, #2
 800bf2a:	4621      	mov	r1, r4
 800bf2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf30:	4621      	mov	r1, r4
 800bf32:	008a      	lsls	r2, r1, #2
 800bf34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bf38:	f7f4 fea0 	bl	8000c7c <__aeabi_uldivmod>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4b60      	ldr	r3, [pc, #384]	; (800c0c4 <UART_SetConfig+0x4e4>)
 800bf42:	fba3 2302 	umull	r2, r3, r3, r2
 800bf46:	095b      	lsrs	r3, r3, #5
 800bf48:	011c      	lsls	r4, r3, #4
 800bf4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bf58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bf5c:	4642      	mov	r2, r8
 800bf5e:	464b      	mov	r3, r9
 800bf60:	1891      	adds	r1, r2, r2
 800bf62:	61b9      	str	r1, [r7, #24]
 800bf64:	415b      	adcs	r3, r3
 800bf66:	61fb      	str	r3, [r7, #28]
 800bf68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bf6c:	4641      	mov	r1, r8
 800bf6e:	1851      	adds	r1, r2, r1
 800bf70:	6139      	str	r1, [r7, #16]
 800bf72:	4649      	mov	r1, r9
 800bf74:	414b      	adcs	r3, r1
 800bf76:	617b      	str	r3, [r7, #20]
 800bf78:	f04f 0200 	mov.w	r2, #0
 800bf7c:	f04f 0300 	mov.w	r3, #0
 800bf80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bf84:	4659      	mov	r1, fp
 800bf86:	00cb      	lsls	r3, r1, #3
 800bf88:	4651      	mov	r1, sl
 800bf8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf8e:	4651      	mov	r1, sl
 800bf90:	00ca      	lsls	r2, r1, #3
 800bf92:	4610      	mov	r0, r2
 800bf94:	4619      	mov	r1, r3
 800bf96:	4603      	mov	r3, r0
 800bf98:	4642      	mov	r2, r8
 800bf9a:	189b      	adds	r3, r3, r2
 800bf9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bfa0:	464b      	mov	r3, r9
 800bfa2:	460a      	mov	r2, r1
 800bfa4:	eb42 0303 	adc.w	r3, r2, r3
 800bfa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bfac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bfb8:	f04f 0200 	mov.w	r2, #0
 800bfbc:	f04f 0300 	mov.w	r3, #0
 800bfc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bfc4:	4649      	mov	r1, r9
 800bfc6:	008b      	lsls	r3, r1, #2
 800bfc8:	4641      	mov	r1, r8
 800bfca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfce:	4641      	mov	r1, r8
 800bfd0:	008a      	lsls	r2, r1, #2
 800bfd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bfd6:	f7f4 fe51 	bl	8000c7c <__aeabi_uldivmod>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	4b39      	ldr	r3, [pc, #228]	; (800c0c4 <UART_SetConfig+0x4e4>)
 800bfe0:	fba3 1302 	umull	r1, r3, r3, r2
 800bfe4:	095b      	lsrs	r3, r3, #5
 800bfe6:	2164      	movs	r1, #100	; 0x64
 800bfe8:	fb01 f303 	mul.w	r3, r1, r3
 800bfec:	1ad3      	subs	r3, r2, r3
 800bfee:	011b      	lsls	r3, r3, #4
 800bff0:	3332      	adds	r3, #50	; 0x32
 800bff2:	4a34      	ldr	r2, [pc, #208]	; (800c0c4 <UART_SetConfig+0x4e4>)
 800bff4:	fba2 2303 	umull	r2, r3, r2, r3
 800bff8:	095b      	lsrs	r3, r3, #5
 800bffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bffe:	441c      	add	r4, r3
 800c000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c004:	2200      	movs	r2, #0
 800c006:	673b      	str	r3, [r7, #112]	; 0x70
 800c008:	677a      	str	r2, [r7, #116]	; 0x74
 800c00a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c00e:	4642      	mov	r2, r8
 800c010:	464b      	mov	r3, r9
 800c012:	1891      	adds	r1, r2, r2
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	415b      	adcs	r3, r3
 800c018:	60fb      	str	r3, [r7, #12]
 800c01a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c01e:	4641      	mov	r1, r8
 800c020:	1851      	adds	r1, r2, r1
 800c022:	6039      	str	r1, [r7, #0]
 800c024:	4649      	mov	r1, r9
 800c026:	414b      	adcs	r3, r1
 800c028:	607b      	str	r3, [r7, #4]
 800c02a:	f04f 0200 	mov.w	r2, #0
 800c02e:	f04f 0300 	mov.w	r3, #0
 800c032:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c036:	4659      	mov	r1, fp
 800c038:	00cb      	lsls	r3, r1, #3
 800c03a:	4651      	mov	r1, sl
 800c03c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c040:	4651      	mov	r1, sl
 800c042:	00ca      	lsls	r2, r1, #3
 800c044:	4610      	mov	r0, r2
 800c046:	4619      	mov	r1, r3
 800c048:	4603      	mov	r3, r0
 800c04a:	4642      	mov	r2, r8
 800c04c:	189b      	adds	r3, r3, r2
 800c04e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c050:	464b      	mov	r3, r9
 800c052:	460a      	mov	r2, r1
 800c054:	eb42 0303 	adc.w	r3, r2, r3
 800c058:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c05a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	663b      	str	r3, [r7, #96]	; 0x60
 800c064:	667a      	str	r2, [r7, #100]	; 0x64
 800c066:	f04f 0200 	mov.w	r2, #0
 800c06a:	f04f 0300 	mov.w	r3, #0
 800c06e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c072:	4649      	mov	r1, r9
 800c074:	008b      	lsls	r3, r1, #2
 800c076:	4641      	mov	r1, r8
 800c078:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c07c:	4641      	mov	r1, r8
 800c07e:	008a      	lsls	r2, r1, #2
 800c080:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c084:	f7f4 fdfa 	bl	8000c7c <__aeabi_uldivmod>
 800c088:	4602      	mov	r2, r0
 800c08a:	460b      	mov	r3, r1
 800c08c:	4b0d      	ldr	r3, [pc, #52]	; (800c0c4 <UART_SetConfig+0x4e4>)
 800c08e:	fba3 1302 	umull	r1, r3, r3, r2
 800c092:	095b      	lsrs	r3, r3, #5
 800c094:	2164      	movs	r1, #100	; 0x64
 800c096:	fb01 f303 	mul.w	r3, r1, r3
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	011b      	lsls	r3, r3, #4
 800c09e:	3332      	adds	r3, #50	; 0x32
 800c0a0:	4a08      	ldr	r2, [pc, #32]	; (800c0c4 <UART_SetConfig+0x4e4>)
 800c0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0a6:	095b      	lsrs	r3, r3, #5
 800c0a8:	f003 020f 	and.w	r2, r3, #15
 800c0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4422      	add	r2, r4
 800c0b4:	609a      	str	r2, [r3, #8]
}
 800c0b6:	bf00      	nop
 800c0b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0c2:	bf00      	nop
 800c0c4:	51eb851f 	.word	0x51eb851f

0800c0c8 <asctime>:
 800c0c8:	4b0d      	ldr	r3, [pc, #52]	; (800c100 <asctime+0x38>)
 800c0ca:	b570      	push	{r4, r5, r6, lr}
 800c0cc:	681d      	ldr	r5, [r3, #0]
 800c0ce:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	b976      	cbnz	r6, 800c0f2 <asctime+0x2a>
 800c0d4:	201a      	movs	r0, #26
 800c0d6:	f000 f893 	bl	800c200 <malloc>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	6428      	str	r0, [r5, #64]	; 0x40
 800c0de:	b920      	cbnz	r0, 800c0ea <asctime+0x22>
 800c0e0:	4b08      	ldr	r3, [pc, #32]	; (800c104 <asctime+0x3c>)
 800c0e2:	4809      	ldr	r0, [pc, #36]	; (800c108 <asctime+0x40>)
 800c0e4:	2137      	movs	r1, #55	; 0x37
 800c0e6:	f000 f837 	bl	800c158 <__assert_func>
 800c0ea:	221a      	movs	r2, #26
 800c0ec:	4631      	mov	r1, r6
 800c0ee:	f000 f8a5 	bl	800c23c <memset>
 800c0f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0fa:	f000 b807 	b.w	800c10c <asctime_r>
 800c0fe:	bf00      	nop
 800c100:	200002bc 	.word	0x200002bc
 800c104:	0803906c 	.word	0x0803906c
 800c108:	08039083 	.word	0x08039083

0800c10c <asctime_r>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	460c      	mov	r4, r1
 800c110:	6941      	ldr	r1, [r0, #20]
 800c112:	6903      	ldr	r3, [r0, #16]
 800c114:	6982      	ldr	r2, [r0, #24]
 800c116:	b086      	sub	sp, #24
 800c118:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800c11c:	9104      	str	r1, [sp, #16]
 800c11e:	6801      	ldr	r1, [r0, #0]
 800c120:	9103      	str	r1, [sp, #12]
 800c122:	6841      	ldr	r1, [r0, #4]
 800c124:	9102      	str	r1, [sp, #8]
 800c126:	6881      	ldr	r1, [r0, #8]
 800c128:	9101      	str	r1, [sp, #4]
 800c12a:	68c1      	ldr	r1, [r0, #12]
 800c12c:	9100      	str	r1, [sp, #0]
 800c12e:	4907      	ldr	r1, [pc, #28]	; (800c14c <asctime_r+0x40>)
 800c130:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c134:	440b      	add	r3, r1
 800c136:	4906      	ldr	r1, [pc, #24]	; (800c150 <asctime_r+0x44>)
 800c138:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c13c:	440a      	add	r2, r1
 800c13e:	4620      	mov	r0, r4
 800c140:	4904      	ldr	r1, [pc, #16]	; (800c154 <asctime_r+0x48>)
 800c142:	f001 f9a9 	bl	800d498 <siprintf>
 800c146:	4620      	mov	r0, r4
 800c148:	b006      	add	sp, #24
 800c14a:	bd10      	pop	{r4, pc}
 800c14c:	08039114 	.word	0x08039114
 800c150:	080390ff 	.word	0x080390ff
 800c154:	080390df 	.word	0x080390df

0800c158 <__assert_func>:
 800c158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c15a:	4614      	mov	r4, r2
 800c15c:	461a      	mov	r2, r3
 800c15e:	4b09      	ldr	r3, [pc, #36]	; (800c184 <__assert_func+0x2c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4605      	mov	r5, r0
 800c164:	68d8      	ldr	r0, [r3, #12]
 800c166:	b14c      	cbz	r4, 800c17c <__assert_func+0x24>
 800c168:	4b07      	ldr	r3, [pc, #28]	; (800c188 <__assert_func+0x30>)
 800c16a:	9100      	str	r1, [sp, #0]
 800c16c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c170:	4906      	ldr	r1, [pc, #24]	; (800c18c <__assert_func+0x34>)
 800c172:	462b      	mov	r3, r5
 800c174:	f000 f80e 	bl	800c194 <fiprintf>
 800c178:	f002 fb1c 	bl	800e7b4 <abort>
 800c17c:	4b04      	ldr	r3, [pc, #16]	; (800c190 <__assert_func+0x38>)
 800c17e:	461c      	mov	r4, r3
 800c180:	e7f3      	b.n	800c16a <__assert_func+0x12>
 800c182:	bf00      	nop
 800c184:	200002bc 	.word	0x200002bc
 800c188:	08039138 	.word	0x08039138
 800c18c:	08039145 	.word	0x08039145
 800c190:	080390fe 	.word	0x080390fe

0800c194 <fiprintf>:
 800c194:	b40e      	push	{r1, r2, r3}
 800c196:	b503      	push	{r0, r1, lr}
 800c198:	4601      	mov	r1, r0
 800c19a:	ab03      	add	r3, sp, #12
 800c19c:	4805      	ldr	r0, [pc, #20]	; (800c1b4 <fiprintf+0x20>)
 800c19e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1a2:	6800      	ldr	r0, [r0, #0]
 800c1a4:	9301      	str	r3, [sp, #4]
 800c1a6:	f000 fbcd 	bl	800c944 <_vfiprintf_r>
 800c1aa:	b002      	add	sp, #8
 800c1ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1b0:	b003      	add	sp, #12
 800c1b2:	4770      	bx	lr
 800c1b4:	200002bc 	.word	0x200002bc

0800c1b8 <__libc_init_array>:
 800c1b8:	b570      	push	{r4, r5, r6, lr}
 800c1ba:	4d0d      	ldr	r5, [pc, #52]	; (800c1f0 <__libc_init_array+0x38>)
 800c1bc:	4c0d      	ldr	r4, [pc, #52]	; (800c1f4 <__libc_init_array+0x3c>)
 800c1be:	1b64      	subs	r4, r4, r5
 800c1c0:	10a4      	asrs	r4, r4, #2
 800c1c2:	2600      	movs	r6, #0
 800c1c4:	42a6      	cmp	r6, r4
 800c1c6:	d109      	bne.n	800c1dc <__libc_init_array+0x24>
 800c1c8:	4d0b      	ldr	r5, [pc, #44]	; (800c1f8 <__libc_init_array+0x40>)
 800c1ca:	4c0c      	ldr	r4, [pc, #48]	; (800c1fc <__libc_init_array+0x44>)
 800c1cc:	f007 fb12 	bl	80137f4 <_init>
 800c1d0:	1b64      	subs	r4, r4, r5
 800c1d2:	10a4      	asrs	r4, r4, #2
 800c1d4:	2600      	movs	r6, #0
 800c1d6:	42a6      	cmp	r6, r4
 800c1d8:	d105      	bne.n	800c1e6 <__libc_init_array+0x2e>
 800c1da:	bd70      	pop	{r4, r5, r6, pc}
 800c1dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e0:	4798      	blx	r3
 800c1e2:	3601      	adds	r6, #1
 800c1e4:	e7ee      	b.n	800c1c4 <__libc_init_array+0xc>
 800c1e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ea:	4798      	blx	r3
 800c1ec:	3601      	adds	r6, #1
 800c1ee:	e7f2      	b.n	800c1d6 <__libc_init_array+0x1e>
 800c1f0:	08039aa8 	.word	0x08039aa8
 800c1f4:	08039aa8 	.word	0x08039aa8
 800c1f8:	08039aa8 	.word	0x08039aa8
 800c1fc:	08039aac 	.word	0x08039aac

0800c200 <malloc>:
 800c200:	4b02      	ldr	r3, [pc, #8]	; (800c20c <malloc+0xc>)
 800c202:	4601      	mov	r1, r0
 800c204:	6818      	ldr	r0, [r3, #0]
 800c206:	f000 baff 	b.w	800c808 <_malloc_r>
 800c20a:	bf00      	nop
 800c20c:	200002bc 	.word	0x200002bc

0800c210 <free>:
 800c210:	4b02      	ldr	r3, [pc, #8]	; (800c21c <free+0xc>)
 800c212:	4601      	mov	r1, r0
 800c214:	6818      	ldr	r0, [r3, #0]
 800c216:	f000 ba8b 	b.w	800c730 <_free_r>
 800c21a:	bf00      	nop
 800c21c:	200002bc 	.word	0x200002bc

0800c220 <memcpy>:
 800c220:	440a      	add	r2, r1
 800c222:	4291      	cmp	r1, r2
 800c224:	f100 33ff 	add.w	r3, r0, #4294967295
 800c228:	d100      	bne.n	800c22c <memcpy+0xc>
 800c22a:	4770      	bx	lr
 800c22c:	b510      	push	{r4, lr}
 800c22e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c232:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c236:	4291      	cmp	r1, r2
 800c238:	d1f9      	bne.n	800c22e <memcpy+0xe>
 800c23a:	bd10      	pop	{r4, pc}

0800c23c <memset>:
 800c23c:	4402      	add	r2, r0
 800c23e:	4603      	mov	r3, r0
 800c240:	4293      	cmp	r3, r2
 800c242:	d100      	bne.n	800c246 <memset+0xa>
 800c244:	4770      	bx	lr
 800c246:	f803 1b01 	strb.w	r1, [r3], #1
 800c24a:	e7f9      	b.n	800c240 <memset+0x4>

0800c24c <validate_structure>:
 800c24c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c24e:	6801      	ldr	r1, [r0, #0]
 800c250:	293b      	cmp	r1, #59	; 0x3b
 800c252:	4604      	mov	r4, r0
 800c254:	d911      	bls.n	800c27a <validate_structure+0x2e>
 800c256:	223c      	movs	r2, #60	; 0x3c
 800c258:	4668      	mov	r0, sp
 800c25a:	f002 fac7 	bl	800e7ec <div>
 800c25e:	9a01      	ldr	r2, [sp, #4]
 800c260:	6863      	ldr	r3, [r4, #4]
 800c262:	9900      	ldr	r1, [sp, #0]
 800c264:	2a00      	cmp	r2, #0
 800c266:	440b      	add	r3, r1
 800c268:	6063      	str	r3, [r4, #4]
 800c26a:	bfbb      	ittet	lt
 800c26c:	323c      	addlt	r2, #60	; 0x3c
 800c26e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c272:	6022      	strge	r2, [r4, #0]
 800c274:	6022      	strlt	r2, [r4, #0]
 800c276:	bfb8      	it	lt
 800c278:	6063      	strlt	r3, [r4, #4]
 800c27a:	6861      	ldr	r1, [r4, #4]
 800c27c:	293b      	cmp	r1, #59	; 0x3b
 800c27e:	d911      	bls.n	800c2a4 <validate_structure+0x58>
 800c280:	223c      	movs	r2, #60	; 0x3c
 800c282:	4668      	mov	r0, sp
 800c284:	f002 fab2 	bl	800e7ec <div>
 800c288:	9a01      	ldr	r2, [sp, #4]
 800c28a:	68a3      	ldr	r3, [r4, #8]
 800c28c:	9900      	ldr	r1, [sp, #0]
 800c28e:	2a00      	cmp	r2, #0
 800c290:	440b      	add	r3, r1
 800c292:	60a3      	str	r3, [r4, #8]
 800c294:	bfbb      	ittet	lt
 800c296:	323c      	addlt	r2, #60	; 0x3c
 800c298:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c29c:	6062      	strge	r2, [r4, #4]
 800c29e:	6062      	strlt	r2, [r4, #4]
 800c2a0:	bfb8      	it	lt
 800c2a2:	60a3      	strlt	r3, [r4, #8]
 800c2a4:	68a1      	ldr	r1, [r4, #8]
 800c2a6:	2917      	cmp	r1, #23
 800c2a8:	d911      	bls.n	800c2ce <validate_structure+0x82>
 800c2aa:	2218      	movs	r2, #24
 800c2ac:	4668      	mov	r0, sp
 800c2ae:	f002 fa9d 	bl	800e7ec <div>
 800c2b2:	9a01      	ldr	r2, [sp, #4]
 800c2b4:	68e3      	ldr	r3, [r4, #12]
 800c2b6:	9900      	ldr	r1, [sp, #0]
 800c2b8:	2a00      	cmp	r2, #0
 800c2ba:	440b      	add	r3, r1
 800c2bc:	60e3      	str	r3, [r4, #12]
 800c2be:	bfbb      	ittet	lt
 800c2c0:	3218      	addlt	r2, #24
 800c2c2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c2c6:	60a2      	strge	r2, [r4, #8]
 800c2c8:	60a2      	strlt	r2, [r4, #8]
 800c2ca:	bfb8      	it	lt
 800c2cc:	60e3      	strlt	r3, [r4, #12]
 800c2ce:	6921      	ldr	r1, [r4, #16]
 800c2d0:	290b      	cmp	r1, #11
 800c2d2:	d911      	bls.n	800c2f8 <validate_structure+0xac>
 800c2d4:	220c      	movs	r2, #12
 800c2d6:	4668      	mov	r0, sp
 800c2d8:	f002 fa88 	bl	800e7ec <div>
 800c2dc:	9a01      	ldr	r2, [sp, #4]
 800c2de:	6963      	ldr	r3, [r4, #20]
 800c2e0:	9900      	ldr	r1, [sp, #0]
 800c2e2:	2a00      	cmp	r2, #0
 800c2e4:	440b      	add	r3, r1
 800c2e6:	6163      	str	r3, [r4, #20]
 800c2e8:	bfbb      	ittet	lt
 800c2ea:	320c      	addlt	r2, #12
 800c2ec:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c2f0:	6122      	strge	r2, [r4, #16]
 800c2f2:	6122      	strlt	r2, [r4, #16]
 800c2f4:	bfb8      	it	lt
 800c2f6:	6163      	strlt	r3, [r4, #20]
 800c2f8:	6963      	ldr	r3, [r4, #20]
 800c2fa:	0798      	lsls	r0, r3, #30
 800c2fc:	d120      	bne.n	800c340 <validate_structure+0xf4>
 800c2fe:	2164      	movs	r1, #100	; 0x64
 800c300:	fb93 f2f1 	sdiv	r2, r3, r1
 800c304:	fb01 3212 	mls	r2, r1, r2, r3
 800c308:	b9e2      	cbnz	r2, 800c344 <validate_structure+0xf8>
 800c30a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800c30e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c312:	fb93 f1f2 	sdiv	r1, r3, r2
 800c316:	fb02 3311 	mls	r3, r2, r1, r3
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	bf14      	ite	ne
 800c31e:	231c      	movne	r3, #28
 800c320:	231d      	moveq	r3, #29
 800c322:	68e2      	ldr	r2, [r4, #12]
 800c324:	2a00      	cmp	r2, #0
 800c326:	dc0f      	bgt.n	800c348 <validate_structure+0xfc>
 800c328:	4f33      	ldr	r7, [pc, #204]	; (800c3f8 <validate_structure+0x1ac>)
 800c32a:	260b      	movs	r6, #11
 800c32c:	2064      	movs	r0, #100	; 0x64
 800c32e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c332:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c336:	f1bc 0f00 	cmp.w	ip, #0
 800c33a:	dd31      	ble.n	800c3a0 <validate_structure+0x154>
 800c33c:	b003      	add	sp, #12
 800c33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c340:	231c      	movs	r3, #28
 800c342:	e7ee      	b.n	800c322 <validate_structure+0xd6>
 800c344:	231d      	movs	r3, #29
 800c346:	e7ec      	b.n	800c322 <validate_structure+0xd6>
 800c348:	4e2b      	ldr	r6, [pc, #172]	; (800c3f8 <validate_structure+0x1ac>)
 800c34a:	2700      	movs	r7, #0
 800c34c:	2064      	movs	r0, #100	; 0x64
 800c34e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c352:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c356:	2a01      	cmp	r2, #1
 800c358:	bf14      	ite	ne
 800c35a:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800c35e:	469c      	moveq	ip, r3
 800c360:	4561      	cmp	r1, ip
 800c362:	ddeb      	ble.n	800c33c <validate_structure+0xf0>
 800c364:	3201      	adds	r2, #1
 800c366:	eba1 010c 	sub.w	r1, r1, ip
 800c36a:	2a0c      	cmp	r2, #12
 800c36c:	60e1      	str	r1, [r4, #12]
 800c36e:	6122      	str	r2, [r4, #16]
 800c370:	d1ef      	bne.n	800c352 <validate_structure+0x106>
 800c372:	6963      	ldr	r3, [r4, #20]
 800c374:	1c5a      	adds	r2, r3, #1
 800c376:	0791      	lsls	r1, r2, #30
 800c378:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800c37c:	d137      	bne.n	800c3ee <validate_structure+0x1a2>
 800c37e:	fb92 f1f0 	sdiv	r1, r2, r0
 800c382:	fb00 2211 	mls	r2, r0, r1, r2
 800c386:	2a00      	cmp	r2, #0
 800c388:	d133      	bne.n	800c3f2 <validate_structure+0x1a6>
 800c38a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800c38e:	fb93 f2f5 	sdiv	r2, r3, r5
 800c392:	fb05 3312 	mls	r3, r5, r2, r3
 800c396:	2b00      	cmp	r3, #0
 800c398:	bf14      	ite	ne
 800c39a:	231c      	movne	r3, #28
 800c39c:	231d      	moveq	r3, #29
 800c39e:	e7d8      	b.n	800c352 <validate_structure+0x106>
 800c3a0:	6921      	ldr	r1, [r4, #16]
 800c3a2:	3901      	subs	r1, #1
 800c3a4:	6121      	str	r1, [r4, #16]
 800c3a6:	3101      	adds	r1, #1
 800c3a8:	d114      	bne.n	800c3d4 <validate_structure+0x188>
 800c3aa:	6963      	ldr	r3, [r4, #20]
 800c3ac:	1e5a      	subs	r2, r3, #1
 800c3ae:	0791      	lsls	r1, r2, #30
 800c3b0:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800c3b4:	d117      	bne.n	800c3e6 <validate_structure+0x19a>
 800c3b6:	fb92 f1f0 	sdiv	r1, r2, r0
 800c3ba:	fb00 2211 	mls	r2, r0, r1, r2
 800c3be:	b9a2      	cbnz	r2, 800c3ea <validate_structure+0x19e>
 800c3c0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c3c4:	fb93 f2f5 	sdiv	r2, r3, r5
 800c3c8:	fb05 3312 	mls	r3, r5, r2, r3
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	bf14      	ite	ne
 800c3d0:	231c      	movne	r3, #28
 800c3d2:	231d      	moveq	r3, #29
 800c3d4:	6922      	ldr	r2, [r4, #16]
 800c3d6:	2a01      	cmp	r2, #1
 800c3d8:	bf14      	ite	ne
 800c3da:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800c3de:	461a      	moveq	r2, r3
 800c3e0:	4462      	add	r2, ip
 800c3e2:	60e2      	str	r2, [r4, #12]
 800c3e4:	e7a5      	b.n	800c332 <validate_structure+0xe6>
 800c3e6:	231c      	movs	r3, #28
 800c3e8:	e7f4      	b.n	800c3d4 <validate_structure+0x188>
 800c3ea:	231d      	movs	r3, #29
 800c3ec:	e7f2      	b.n	800c3d4 <validate_structure+0x188>
 800c3ee:	231c      	movs	r3, #28
 800c3f0:	e7af      	b.n	800c352 <validate_structure+0x106>
 800c3f2:	231d      	movs	r3, #29
 800c3f4:	e7ad      	b.n	800c352 <validate_structure+0x106>
 800c3f6:	bf00      	nop
 800c3f8:	08039178 	.word	0x08039178

0800c3fc <mktime>:
 800c3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c400:	b085      	sub	sp, #20
 800c402:	4607      	mov	r7, r0
 800c404:	f003 fa7e 	bl	800f904 <__gettzinfo>
 800c408:	4681      	mov	r9, r0
 800c40a:	4638      	mov	r0, r7
 800c40c:	f7ff ff1e 	bl	800c24c <validate_structure>
 800c410:	e9d7 4000 	ldrd	r4, r0, [r7]
 800c414:	233c      	movs	r3, #60	; 0x3c
 800c416:	fb03 4400 	mla	r4, r3, r0, r4
 800c41a:	68b8      	ldr	r0, [r7, #8]
 800c41c:	4abc      	ldr	r2, [pc, #752]	; (800c710 <mktime+0x314>)
 800c41e:	697e      	ldr	r6, [r7, #20]
 800c420:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c424:	fb03 4400 	mla	r4, r3, r0, r4
 800c428:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800c42c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c430:	3d01      	subs	r5, #1
 800c432:	2b01      	cmp	r3, #1
 800c434:	4415      	add	r5, r2
 800c436:	dd11      	ble.n	800c45c <mktime+0x60>
 800c438:	07b1      	lsls	r1, r6, #30
 800c43a:	d10f      	bne.n	800c45c <mktime+0x60>
 800c43c:	2264      	movs	r2, #100	; 0x64
 800c43e:	fb96 f3f2 	sdiv	r3, r6, r2
 800c442:	fb02 6313 	mls	r3, r2, r3, r6
 800c446:	b943      	cbnz	r3, 800c45a <mktime+0x5e>
 800c448:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c44c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c450:	fb93 f1f2 	sdiv	r1, r3, r2
 800c454:	fb02 3311 	mls	r3, r2, r1, r3
 800c458:	b903      	cbnz	r3, 800c45c <mktime+0x60>
 800c45a:	3501      	adds	r5, #1
 800c45c:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800c460:	3310      	adds	r3, #16
 800c462:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c466:	4293      	cmp	r3, r2
 800c468:	61fd      	str	r5, [r7, #28]
 800c46a:	f200 815d 	bhi.w	800c728 <mktime+0x32c>
 800c46e:	2e46      	cmp	r6, #70	; 0x46
 800c470:	dd71      	ble.n	800c556 <mktime+0x15a>
 800c472:	2346      	movs	r3, #70	; 0x46
 800c474:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c478:	2164      	movs	r1, #100	; 0x64
 800c47a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c47e:	079a      	lsls	r2, r3, #30
 800c480:	d163      	bne.n	800c54a <mktime+0x14e>
 800c482:	fb93 f2f1 	sdiv	r2, r3, r1
 800c486:	fb01 3212 	mls	r2, r1, r2, r3
 800c48a:	2a00      	cmp	r2, #0
 800c48c:	d160      	bne.n	800c550 <mktime+0x154>
 800c48e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c492:	fb92 fef0 	sdiv	lr, r2, r0
 800c496:	fb00 221e 	mls	r2, r0, lr, r2
 800c49a:	2a00      	cmp	r2, #0
 800c49c:	bf14      	ite	ne
 800c49e:	4662      	movne	r2, ip
 800c4a0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	429e      	cmp	r6, r3
 800c4a8:	4415      	add	r5, r2
 800c4aa:	d1e8      	bne.n	800c47e <mktime+0x82>
 800c4ac:	4b99      	ldr	r3, [pc, #612]	; (800c714 <mktime+0x318>)
 800c4ae:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c4b2:	fbc5 4803 	smlal	r4, r8, r5, r3
 800c4b6:	f001 ff19 	bl	800e2ec <__tz_lock>
 800c4ba:	f001 ff23 	bl	800e304 <_tzset_unlocked>
 800c4be:	4b96      	ldr	r3, [pc, #600]	; (800c718 <mktime+0x31c>)
 800c4c0:	f8d3 b000 	ldr.w	fp, [r3]
 800c4c4:	f1bb 0f00 	cmp.w	fp, #0
 800c4c8:	d039      	beq.n	800c53e <mktime+0x142>
 800c4ca:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800c4ce:	6978      	ldr	r0, [r7, #20]
 800c4d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c4d4:	f1bb 0f01 	cmp.w	fp, #1
 800c4d8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800c4dc:	46da      	mov	sl, fp
 800c4de:	bfa8      	it	ge
 800c4e0:	f04f 0a01 	movge.w	sl, #1
 800c4e4:	4283      	cmp	r3, r0
 800c4e6:	d178      	bne.n	800c5da <mktime+0x1de>
 800c4e8:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800c4ec:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c4f0:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800c4f4:	1a5b      	subs	r3, r3, r1
 800c4f6:	9302      	str	r3, [sp, #8]
 800c4f8:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800c4fc:	9303      	str	r3, [sp, #12]
 800c4fe:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800c502:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c506:	9301      	str	r3, [sp, #4]
 800c508:	ebb3 0c02 	subs.w	ip, r3, r2
 800c50c:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800c510:	4564      	cmp	r4, ip
 800c512:	eb78 0300 	sbcs.w	r3, r8, r0
 800c516:	da66      	bge.n	800c5e6 <mktime+0x1ea>
 800c518:	f8d9 3000 	ldr.w	r3, [r9]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d06f      	beq.n	800c600 <mktime+0x204>
 800c520:	9b02      	ldr	r3, [sp, #8]
 800c522:	429c      	cmp	r4, r3
 800c524:	9b03      	ldr	r3, [sp, #12]
 800c526:	eb78 0303 	sbcs.w	r3, r8, r3
 800c52a:	db03      	blt.n	800c534 <mktime+0x138>
 800c52c:	4564      	cmp	r4, ip
 800c52e:	eb78 0300 	sbcs.w	r3, r8, r0
 800c532:	db6b      	blt.n	800c60c <mktime+0x210>
 800c534:	f1bb 0f00 	cmp.w	fp, #0
 800c538:	f04f 0b00 	mov.w	fp, #0
 800c53c:	da6b      	bge.n	800c616 <mktime+0x21a>
 800c53e:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800c542:	190c      	adds	r4, r1, r4
 800c544:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c548:	e0a9      	b.n	800c69e <mktime+0x2a2>
 800c54a:	f240 126d 	movw	r2, #365	; 0x16d
 800c54e:	e7a9      	b.n	800c4a4 <mktime+0xa8>
 800c550:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c554:	e7a6      	b.n	800c4a4 <mktime+0xa8>
 800c556:	d0a9      	beq.n	800c4ac <mktime+0xb0>
 800c558:	2345      	movs	r3, #69	; 0x45
 800c55a:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c55e:	2164      	movs	r1, #100	; 0x64
 800c560:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c564:	e012      	b.n	800c58c <mktime+0x190>
 800c566:	bb62      	cbnz	r2, 800c5c2 <mktime+0x1c6>
 800c568:	fb93 f2f1 	sdiv	r2, r3, r1
 800c56c:	fb01 3212 	mls	r2, r1, r2, r3
 800c570:	bb52      	cbnz	r2, 800c5c8 <mktime+0x1cc>
 800c572:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c576:	fb92 fef0 	sdiv	lr, r2, r0
 800c57a:	fb00 221e 	mls	r2, r0, lr, r2
 800c57e:	2a00      	cmp	r2, #0
 800c580:	bf14      	ite	ne
 800c582:	4662      	movne	r2, ip
 800c584:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c588:	1aad      	subs	r5, r5, r2
 800c58a:	3b01      	subs	r3, #1
 800c58c:	429e      	cmp	r6, r3
 800c58e:	f003 0203 	and.w	r2, r3, #3
 800c592:	dbe8      	blt.n	800c566 <mktime+0x16a>
 800c594:	b9da      	cbnz	r2, 800c5ce <mktime+0x1d2>
 800c596:	2264      	movs	r2, #100	; 0x64
 800c598:	fb96 f3f2 	sdiv	r3, r6, r2
 800c59c:	fb02 6313 	mls	r3, r2, r3, r6
 800c5a0:	b9c3      	cbnz	r3, 800c5d4 <mktime+0x1d8>
 800c5a2:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c5a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c5aa:	fb93 f1f2 	sdiv	r1, r3, r2
 800c5ae:	fb02 3311 	mls	r3, r2, r1, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f240 136d 	movw	r3, #365	; 0x16d
 800c5b8:	bf08      	it	eq
 800c5ba:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c5be:	1aed      	subs	r5, r5, r3
 800c5c0:	e774      	b.n	800c4ac <mktime+0xb0>
 800c5c2:	f240 126d 	movw	r2, #365	; 0x16d
 800c5c6:	e7df      	b.n	800c588 <mktime+0x18c>
 800c5c8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c5cc:	e7dc      	b.n	800c588 <mktime+0x18c>
 800c5ce:	f240 136d 	movw	r3, #365	; 0x16d
 800c5d2:	e7f4      	b.n	800c5be <mktime+0x1c2>
 800c5d4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c5d8:	e7f1      	b.n	800c5be <mktime+0x1c2>
 800c5da:	f001 fddd 	bl	800e198 <__tzcalc_limits>
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	d182      	bne.n	800c4e8 <mktime+0xec>
 800c5e2:	46d3      	mov	fp, sl
 800c5e4:	e050      	b.n	800c688 <mktime+0x28c>
 800c5e6:	9b01      	ldr	r3, [sp, #4]
 800c5e8:	1a5b      	subs	r3, r3, r1
 800c5ea:	9301      	str	r3, [sp, #4]
 800c5ec:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800c5f0:	eb6e 0e03 	sbc.w	lr, lr, r3
 800c5f4:	9b01      	ldr	r3, [sp, #4]
 800c5f6:	429c      	cmp	r4, r3
 800c5f8:	eb78 030e 	sbcs.w	r3, r8, lr
 800c5fc:	dbf1      	blt.n	800c5e2 <mktime+0x1e6>
 800c5fe:	e78b      	b.n	800c518 <mktime+0x11c>
 800c600:	9b02      	ldr	r3, [sp, #8]
 800c602:	429c      	cmp	r4, r3
 800c604:	9b03      	ldr	r3, [sp, #12]
 800c606:	eb78 0303 	sbcs.w	r3, r8, r3
 800c60a:	db8f      	blt.n	800c52c <mktime+0x130>
 800c60c:	f1bb 0f00 	cmp.w	fp, #0
 800c610:	db3e      	blt.n	800c690 <mktime+0x294>
 800c612:	f04f 0b01 	mov.w	fp, #1
 800c616:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c61a:	f1ba 0f01 	cmp.w	sl, #1
 800c61e:	d133      	bne.n	800c688 <mktime+0x28c>
 800c620:	f1bb 0f00 	cmp.w	fp, #0
 800c624:	d04e      	beq.n	800c6c4 <mktime+0x2c8>
 800c626:	1a52      	subs	r2, r2, r1
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c62e:	4413      	add	r3, r2
 800c630:	1914      	adds	r4, r2, r4
 800c632:	603b      	str	r3, [r7, #0]
 800c634:	4638      	mov	r0, r7
 800c636:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800c63a:	f7ff fe07 	bl	800c24c <validate_structure>
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	ebb2 020a 	subs.w	r2, r2, sl
 800c644:	d020      	beq.n	800c688 <mktime+0x28c>
 800c646:	2a01      	cmp	r2, #1
 800c648:	dc3e      	bgt.n	800c6c8 <mktime+0x2cc>
 800c64a:	1c90      	adds	r0, r2, #2
 800c64c:	bfd8      	it	le
 800c64e:	2201      	movle	r2, #1
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	18d3      	adds	r3, r2, r3
 800c654:	4415      	add	r5, r2
 800c656:	d540      	bpl.n	800c6da <mktime+0x2de>
 800c658:	1e73      	subs	r3, r6, #1
 800c65a:	0799      	lsls	r1, r3, #30
 800c65c:	d137      	bne.n	800c6ce <mktime+0x2d2>
 800c65e:	2264      	movs	r2, #100	; 0x64
 800c660:	fb93 f1f2 	sdiv	r1, r3, r2
 800c664:	fb02 3311 	mls	r3, r2, r1, r3
 800c668:	bba3      	cbnz	r3, 800c6d4 <mktime+0x2d8>
 800c66a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c66e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c672:	fb96 f2f3 	sdiv	r2, r6, r3
 800c676:	fb03 6612 	mls	r6, r3, r2, r6
 800c67a:	2e00      	cmp	r6, #0
 800c67c:	f240 136d 	movw	r3, #365	; 0x16d
 800c680:	bf18      	it	ne
 800c682:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c686:	61fb      	str	r3, [r7, #28]
 800c688:	f1bb 0f01 	cmp.w	fp, #1
 800c68c:	f47f af57 	bne.w	800c53e <mktime+0x142>
 800c690:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c694:	190c      	adds	r4, r1, r4
 800c696:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c69a:	f04f 0b01 	mov.w	fp, #1
 800c69e:	f001 fe2b 	bl	800e2f8 <__tz_unlock>
 800c6a2:	3504      	adds	r5, #4
 800c6a4:	2307      	movs	r3, #7
 800c6a6:	fb95 f3f3 	sdiv	r3, r5, r3
 800c6aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c6ae:	1aed      	subs	r5, r5, r3
 800c6b0:	bf48      	it	mi
 800c6b2:	3507      	addmi	r5, #7
 800c6b4:	f8c7 b020 	str.w	fp, [r7, #32]
 800c6b8:	61bd      	str	r5, [r7, #24]
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	4641      	mov	r1, r8
 800c6be:	b005      	add	sp, #20
 800c6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c4:	1a8a      	subs	r2, r1, r2
 800c6c6:	e7af      	b.n	800c628 <mktime+0x22c>
 800c6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6cc:	e7c0      	b.n	800c650 <mktime+0x254>
 800c6ce:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c6d2:	e7d8      	b.n	800c686 <mktime+0x28a>
 800c6d4:	f240 136d 	movw	r3, #365	; 0x16d
 800c6d8:	e7d5      	b.n	800c686 <mktime+0x28a>
 800c6da:	07b2      	lsls	r2, r6, #30
 800c6dc:	d11e      	bne.n	800c71c <mktime+0x320>
 800c6de:	2164      	movs	r1, #100	; 0x64
 800c6e0:	fb96 f2f1 	sdiv	r2, r6, r1
 800c6e4:	fb01 6212 	mls	r2, r1, r2, r6
 800c6e8:	b9da      	cbnz	r2, 800c722 <mktime+0x326>
 800c6ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c6ee:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800c6f2:	fb96 f1f2 	sdiv	r1, r6, r2
 800c6f6:	fb02 6611 	mls	r6, r2, r1, r6
 800c6fa:	2e00      	cmp	r6, #0
 800c6fc:	f240 126d 	movw	r2, #365	; 0x16d
 800c700:	bf08      	it	eq
 800c702:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c706:	4293      	cmp	r3, r2
 800c708:	bfa8      	it	ge
 800c70a:	1a9b      	subge	r3, r3, r2
 800c70c:	e7bb      	b.n	800c686 <mktime+0x28a>
 800c70e:	bf00      	nop
 800c710:	080391a8 	.word	0x080391a8
 800c714:	00015180 	.word	0x00015180
 800c718:	20003a48 	.word	0x20003a48
 800c71c:	f240 126d 	movw	r2, #365	; 0x16d
 800c720:	e7f1      	b.n	800c706 <mktime+0x30a>
 800c722:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c726:	e7ee      	b.n	800c706 <mktime+0x30a>
 800c728:	f04f 34ff 	mov.w	r4, #4294967295
 800c72c:	46a0      	mov	r8, r4
 800c72e:	e7c4      	b.n	800c6ba <mktime+0x2be>

0800c730 <_free_r>:
 800c730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c732:	2900      	cmp	r1, #0
 800c734:	d044      	beq.n	800c7c0 <_free_r+0x90>
 800c736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c73a:	9001      	str	r0, [sp, #4]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f1a1 0404 	sub.w	r4, r1, #4
 800c742:	bfb8      	it	lt
 800c744:	18e4      	addlt	r4, r4, r3
 800c746:	f003 f981 	bl	800fa4c <__malloc_lock>
 800c74a:	4a1e      	ldr	r2, [pc, #120]	; (800c7c4 <_free_r+0x94>)
 800c74c:	9801      	ldr	r0, [sp, #4]
 800c74e:	6813      	ldr	r3, [r2, #0]
 800c750:	b933      	cbnz	r3, 800c760 <_free_r+0x30>
 800c752:	6063      	str	r3, [r4, #4]
 800c754:	6014      	str	r4, [r2, #0]
 800c756:	b003      	add	sp, #12
 800c758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c75c:	f003 b97c 	b.w	800fa58 <__malloc_unlock>
 800c760:	42a3      	cmp	r3, r4
 800c762:	d908      	bls.n	800c776 <_free_r+0x46>
 800c764:	6825      	ldr	r5, [r4, #0]
 800c766:	1961      	adds	r1, r4, r5
 800c768:	428b      	cmp	r3, r1
 800c76a:	bf01      	itttt	eq
 800c76c:	6819      	ldreq	r1, [r3, #0]
 800c76e:	685b      	ldreq	r3, [r3, #4]
 800c770:	1949      	addeq	r1, r1, r5
 800c772:	6021      	streq	r1, [r4, #0]
 800c774:	e7ed      	b.n	800c752 <_free_r+0x22>
 800c776:	461a      	mov	r2, r3
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	b10b      	cbz	r3, 800c780 <_free_r+0x50>
 800c77c:	42a3      	cmp	r3, r4
 800c77e:	d9fa      	bls.n	800c776 <_free_r+0x46>
 800c780:	6811      	ldr	r1, [r2, #0]
 800c782:	1855      	adds	r5, r2, r1
 800c784:	42a5      	cmp	r5, r4
 800c786:	d10b      	bne.n	800c7a0 <_free_r+0x70>
 800c788:	6824      	ldr	r4, [r4, #0]
 800c78a:	4421      	add	r1, r4
 800c78c:	1854      	adds	r4, r2, r1
 800c78e:	42a3      	cmp	r3, r4
 800c790:	6011      	str	r1, [r2, #0]
 800c792:	d1e0      	bne.n	800c756 <_free_r+0x26>
 800c794:	681c      	ldr	r4, [r3, #0]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	6053      	str	r3, [r2, #4]
 800c79a:	4421      	add	r1, r4
 800c79c:	6011      	str	r1, [r2, #0]
 800c79e:	e7da      	b.n	800c756 <_free_r+0x26>
 800c7a0:	d902      	bls.n	800c7a8 <_free_r+0x78>
 800c7a2:	230c      	movs	r3, #12
 800c7a4:	6003      	str	r3, [r0, #0]
 800c7a6:	e7d6      	b.n	800c756 <_free_r+0x26>
 800c7a8:	6825      	ldr	r5, [r4, #0]
 800c7aa:	1961      	adds	r1, r4, r5
 800c7ac:	428b      	cmp	r3, r1
 800c7ae:	bf04      	itt	eq
 800c7b0:	6819      	ldreq	r1, [r3, #0]
 800c7b2:	685b      	ldreq	r3, [r3, #4]
 800c7b4:	6063      	str	r3, [r4, #4]
 800c7b6:	bf04      	itt	eq
 800c7b8:	1949      	addeq	r1, r1, r5
 800c7ba:	6021      	streq	r1, [r4, #0]
 800c7bc:	6054      	str	r4, [r2, #4]
 800c7be:	e7ca      	b.n	800c756 <_free_r+0x26>
 800c7c0:	b003      	add	sp, #12
 800c7c2:	bd30      	pop	{r4, r5, pc}
 800c7c4:	20003a24 	.word	0x20003a24

0800c7c8 <sbrk_aligned>:
 800c7c8:	b570      	push	{r4, r5, r6, lr}
 800c7ca:	4e0e      	ldr	r6, [pc, #56]	; (800c804 <sbrk_aligned+0x3c>)
 800c7cc:	460c      	mov	r4, r1
 800c7ce:	6831      	ldr	r1, [r6, #0]
 800c7d0:	4605      	mov	r5, r0
 800c7d2:	b911      	cbnz	r1, 800c7da <sbrk_aligned+0x12>
 800c7d4:	f000 fe50 	bl	800d478 <_sbrk_r>
 800c7d8:	6030      	str	r0, [r6, #0]
 800c7da:	4621      	mov	r1, r4
 800c7dc:	4628      	mov	r0, r5
 800c7de:	f000 fe4b 	bl	800d478 <_sbrk_r>
 800c7e2:	1c43      	adds	r3, r0, #1
 800c7e4:	d00a      	beq.n	800c7fc <sbrk_aligned+0x34>
 800c7e6:	1cc4      	adds	r4, r0, #3
 800c7e8:	f024 0403 	bic.w	r4, r4, #3
 800c7ec:	42a0      	cmp	r0, r4
 800c7ee:	d007      	beq.n	800c800 <sbrk_aligned+0x38>
 800c7f0:	1a21      	subs	r1, r4, r0
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	f000 fe40 	bl	800d478 <_sbrk_r>
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	d101      	bne.n	800c800 <sbrk_aligned+0x38>
 800c7fc:	f04f 34ff 	mov.w	r4, #4294967295
 800c800:	4620      	mov	r0, r4
 800c802:	bd70      	pop	{r4, r5, r6, pc}
 800c804:	20003a28 	.word	0x20003a28

0800c808 <_malloc_r>:
 800c808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c80c:	1ccd      	adds	r5, r1, #3
 800c80e:	f025 0503 	bic.w	r5, r5, #3
 800c812:	3508      	adds	r5, #8
 800c814:	2d0c      	cmp	r5, #12
 800c816:	bf38      	it	cc
 800c818:	250c      	movcc	r5, #12
 800c81a:	2d00      	cmp	r5, #0
 800c81c:	4607      	mov	r7, r0
 800c81e:	db01      	blt.n	800c824 <_malloc_r+0x1c>
 800c820:	42a9      	cmp	r1, r5
 800c822:	d905      	bls.n	800c830 <_malloc_r+0x28>
 800c824:	230c      	movs	r3, #12
 800c826:	603b      	str	r3, [r7, #0]
 800c828:	2600      	movs	r6, #0
 800c82a:	4630      	mov	r0, r6
 800c82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c830:	4e2e      	ldr	r6, [pc, #184]	; (800c8ec <_malloc_r+0xe4>)
 800c832:	f003 f90b 	bl	800fa4c <__malloc_lock>
 800c836:	6833      	ldr	r3, [r6, #0]
 800c838:	461c      	mov	r4, r3
 800c83a:	bb34      	cbnz	r4, 800c88a <_malloc_r+0x82>
 800c83c:	4629      	mov	r1, r5
 800c83e:	4638      	mov	r0, r7
 800c840:	f7ff ffc2 	bl	800c7c8 <sbrk_aligned>
 800c844:	1c43      	adds	r3, r0, #1
 800c846:	4604      	mov	r4, r0
 800c848:	d14d      	bne.n	800c8e6 <_malloc_r+0xde>
 800c84a:	6834      	ldr	r4, [r6, #0]
 800c84c:	4626      	mov	r6, r4
 800c84e:	2e00      	cmp	r6, #0
 800c850:	d140      	bne.n	800c8d4 <_malloc_r+0xcc>
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	4631      	mov	r1, r6
 800c856:	4638      	mov	r0, r7
 800c858:	eb04 0803 	add.w	r8, r4, r3
 800c85c:	f000 fe0c 	bl	800d478 <_sbrk_r>
 800c860:	4580      	cmp	r8, r0
 800c862:	d13a      	bne.n	800c8da <_malloc_r+0xd2>
 800c864:	6821      	ldr	r1, [r4, #0]
 800c866:	3503      	adds	r5, #3
 800c868:	1a6d      	subs	r5, r5, r1
 800c86a:	f025 0503 	bic.w	r5, r5, #3
 800c86e:	3508      	adds	r5, #8
 800c870:	2d0c      	cmp	r5, #12
 800c872:	bf38      	it	cc
 800c874:	250c      	movcc	r5, #12
 800c876:	4629      	mov	r1, r5
 800c878:	4638      	mov	r0, r7
 800c87a:	f7ff ffa5 	bl	800c7c8 <sbrk_aligned>
 800c87e:	3001      	adds	r0, #1
 800c880:	d02b      	beq.n	800c8da <_malloc_r+0xd2>
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	442b      	add	r3, r5
 800c886:	6023      	str	r3, [r4, #0]
 800c888:	e00e      	b.n	800c8a8 <_malloc_r+0xa0>
 800c88a:	6822      	ldr	r2, [r4, #0]
 800c88c:	1b52      	subs	r2, r2, r5
 800c88e:	d41e      	bmi.n	800c8ce <_malloc_r+0xc6>
 800c890:	2a0b      	cmp	r2, #11
 800c892:	d916      	bls.n	800c8c2 <_malloc_r+0xba>
 800c894:	1961      	adds	r1, r4, r5
 800c896:	42a3      	cmp	r3, r4
 800c898:	6025      	str	r5, [r4, #0]
 800c89a:	bf18      	it	ne
 800c89c:	6059      	strne	r1, [r3, #4]
 800c89e:	6863      	ldr	r3, [r4, #4]
 800c8a0:	bf08      	it	eq
 800c8a2:	6031      	streq	r1, [r6, #0]
 800c8a4:	5162      	str	r2, [r4, r5]
 800c8a6:	604b      	str	r3, [r1, #4]
 800c8a8:	4638      	mov	r0, r7
 800c8aa:	f104 060b 	add.w	r6, r4, #11
 800c8ae:	f003 f8d3 	bl	800fa58 <__malloc_unlock>
 800c8b2:	f026 0607 	bic.w	r6, r6, #7
 800c8b6:	1d23      	adds	r3, r4, #4
 800c8b8:	1af2      	subs	r2, r6, r3
 800c8ba:	d0b6      	beq.n	800c82a <_malloc_r+0x22>
 800c8bc:	1b9b      	subs	r3, r3, r6
 800c8be:	50a3      	str	r3, [r4, r2]
 800c8c0:	e7b3      	b.n	800c82a <_malloc_r+0x22>
 800c8c2:	6862      	ldr	r2, [r4, #4]
 800c8c4:	42a3      	cmp	r3, r4
 800c8c6:	bf0c      	ite	eq
 800c8c8:	6032      	streq	r2, [r6, #0]
 800c8ca:	605a      	strne	r2, [r3, #4]
 800c8cc:	e7ec      	b.n	800c8a8 <_malloc_r+0xa0>
 800c8ce:	4623      	mov	r3, r4
 800c8d0:	6864      	ldr	r4, [r4, #4]
 800c8d2:	e7b2      	b.n	800c83a <_malloc_r+0x32>
 800c8d4:	4634      	mov	r4, r6
 800c8d6:	6876      	ldr	r6, [r6, #4]
 800c8d8:	e7b9      	b.n	800c84e <_malloc_r+0x46>
 800c8da:	230c      	movs	r3, #12
 800c8dc:	603b      	str	r3, [r7, #0]
 800c8de:	4638      	mov	r0, r7
 800c8e0:	f003 f8ba 	bl	800fa58 <__malloc_unlock>
 800c8e4:	e7a1      	b.n	800c82a <_malloc_r+0x22>
 800c8e6:	6025      	str	r5, [r4, #0]
 800c8e8:	e7de      	b.n	800c8a8 <_malloc_r+0xa0>
 800c8ea:	bf00      	nop
 800c8ec:	20003a24 	.word	0x20003a24

0800c8f0 <__sfputc_r>:
 800c8f0:	6893      	ldr	r3, [r2, #8]
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	b410      	push	{r4}
 800c8f8:	6093      	str	r3, [r2, #8]
 800c8fa:	da08      	bge.n	800c90e <__sfputc_r+0x1e>
 800c8fc:	6994      	ldr	r4, [r2, #24]
 800c8fe:	42a3      	cmp	r3, r4
 800c900:	db01      	blt.n	800c906 <__sfputc_r+0x16>
 800c902:	290a      	cmp	r1, #10
 800c904:	d103      	bne.n	800c90e <__sfputc_r+0x1e>
 800c906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c90a:	f001 be81 	b.w	800e610 <__swbuf_r>
 800c90e:	6813      	ldr	r3, [r2, #0]
 800c910:	1c58      	adds	r0, r3, #1
 800c912:	6010      	str	r0, [r2, #0]
 800c914:	7019      	strb	r1, [r3, #0]
 800c916:	4608      	mov	r0, r1
 800c918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c91c:	4770      	bx	lr

0800c91e <__sfputs_r>:
 800c91e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c920:	4606      	mov	r6, r0
 800c922:	460f      	mov	r7, r1
 800c924:	4614      	mov	r4, r2
 800c926:	18d5      	adds	r5, r2, r3
 800c928:	42ac      	cmp	r4, r5
 800c92a:	d101      	bne.n	800c930 <__sfputs_r+0x12>
 800c92c:	2000      	movs	r0, #0
 800c92e:	e007      	b.n	800c940 <__sfputs_r+0x22>
 800c930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c934:	463a      	mov	r2, r7
 800c936:	4630      	mov	r0, r6
 800c938:	f7ff ffda 	bl	800c8f0 <__sfputc_r>
 800c93c:	1c43      	adds	r3, r0, #1
 800c93e:	d1f3      	bne.n	800c928 <__sfputs_r+0xa>
 800c940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c944 <_vfiprintf_r>:
 800c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	460d      	mov	r5, r1
 800c94a:	b09d      	sub	sp, #116	; 0x74
 800c94c:	4614      	mov	r4, r2
 800c94e:	4698      	mov	r8, r3
 800c950:	4606      	mov	r6, r0
 800c952:	b118      	cbz	r0, 800c95c <_vfiprintf_r+0x18>
 800c954:	6983      	ldr	r3, [r0, #24]
 800c956:	b90b      	cbnz	r3, 800c95c <_vfiprintf_r+0x18>
 800c958:	f002 fef2 	bl	800f740 <__sinit>
 800c95c:	4b89      	ldr	r3, [pc, #548]	; (800cb84 <_vfiprintf_r+0x240>)
 800c95e:	429d      	cmp	r5, r3
 800c960:	d11b      	bne.n	800c99a <_vfiprintf_r+0x56>
 800c962:	6875      	ldr	r5, [r6, #4]
 800c964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c966:	07d9      	lsls	r1, r3, #31
 800c968:	d405      	bmi.n	800c976 <_vfiprintf_r+0x32>
 800c96a:	89ab      	ldrh	r3, [r5, #12]
 800c96c:	059a      	lsls	r2, r3, #22
 800c96e:	d402      	bmi.n	800c976 <_vfiprintf_r+0x32>
 800c970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c972:	f002 ffd5 	bl	800f920 <__retarget_lock_acquire_recursive>
 800c976:	89ab      	ldrh	r3, [r5, #12]
 800c978:	071b      	lsls	r3, r3, #28
 800c97a:	d501      	bpl.n	800c980 <_vfiprintf_r+0x3c>
 800c97c:	692b      	ldr	r3, [r5, #16]
 800c97e:	b9eb      	cbnz	r3, 800c9bc <_vfiprintf_r+0x78>
 800c980:	4629      	mov	r1, r5
 800c982:	4630      	mov	r0, r6
 800c984:	f001 fea8 	bl	800e6d8 <__swsetup_r>
 800c988:	b1c0      	cbz	r0, 800c9bc <_vfiprintf_r+0x78>
 800c98a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c98c:	07dc      	lsls	r4, r3, #31
 800c98e:	d50e      	bpl.n	800c9ae <_vfiprintf_r+0x6a>
 800c990:	f04f 30ff 	mov.w	r0, #4294967295
 800c994:	b01d      	add	sp, #116	; 0x74
 800c996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99a:	4b7b      	ldr	r3, [pc, #492]	; (800cb88 <_vfiprintf_r+0x244>)
 800c99c:	429d      	cmp	r5, r3
 800c99e:	d101      	bne.n	800c9a4 <_vfiprintf_r+0x60>
 800c9a0:	68b5      	ldr	r5, [r6, #8]
 800c9a2:	e7df      	b.n	800c964 <_vfiprintf_r+0x20>
 800c9a4:	4b79      	ldr	r3, [pc, #484]	; (800cb8c <_vfiprintf_r+0x248>)
 800c9a6:	429d      	cmp	r5, r3
 800c9a8:	bf08      	it	eq
 800c9aa:	68f5      	ldreq	r5, [r6, #12]
 800c9ac:	e7da      	b.n	800c964 <_vfiprintf_r+0x20>
 800c9ae:	89ab      	ldrh	r3, [r5, #12]
 800c9b0:	0598      	lsls	r0, r3, #22
 800c9b2:	d4ed      	bmi.n	800c990 <_vfiprintf_r+0x4c>
 800c9b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9b6:	f002 ffb5 	bl	800f924 <__retarget_lock_release_recursive>
 800c9ba:	e7e9      	b.n	800c990 <_vfiprintf_r+0x4c>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	9309      	str	r3, [sp, #36]	; 0x24
 800c9c0:	2320      	movs	r3, #32
 800c9c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9ca:	2330      	movs	r3, #48	; 0x30
 800c9cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cb90 <_vfiprintf_r+0x24c>
 800c9d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9d4:	f04f 0901 	mov.w	r9, #1
 800c9d8:	4623      	mov	r3, r4
 800c9da:	469a      	mov	sl, r3
 800c9dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9e0:	b10a      	cbz	r2, 800c9e6 <_vfiprintf_r+0xa2>
 800c9e2:	2a25      	cmp	r2, #37	; 0x25
 800c9e4:	d1f9      	bne.n	800c9da <_vfiprintf_r+0x96>
 800c9e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c9ea:	d00b      	beq.n	800ca04 <_vfiprintf_r+0xc0>
 800c9ec:	465b      	mov	r3, fp
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f7ff ff93 	bl	800c91e <__sfputs_r>
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	f000 80aa 	beq.w	800cb52 <_vfiprintf_r+0x20e>
 800c9fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca00:	445a      	add	r2, fp
 800ca02:	9209      	str	r2, [sp, #36]	; 0x24
 800ca04:	f89a 3000 	ldrb.w	r3, [sl]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f000 80a2 	beq.w	800cb52 <_vfiprintf_r+0x20e>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f04f 32ff 	mov.w	r2, #4294967295
 800ca14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca18:	f10a 0a01 	add.w	sl, sl, #1
 800ca1c:	9304      	str	r3, [sp, #16]
 800ca1e:	9307      	str	r3, [sp, #28]
 800ca20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca24:	931a      	str	r3, [sp, #104]	; 0x68
 800ca26:	4654      	mov	r4, sl
 800ca28:	2205      	movs	r2, #5
 800ca2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2e:	4858      	ldr	r0, [pc, #352]	; (800cb90 <_vfiprintf_r+0x24c>)
 800ca30:	f7f3 fbe6 	bl	8000200 <memchr>
 800ca34:	9a04      	ldr	r2, [sp, #16]
 800ca36:	b9d8      	cbnz	r0, 800ca70 <_vfiprintf_r+0x12c>
 800ca38:	06d1      	lsls	r1, r2, #27
 800ca3a:	bf44      	itt	mi
 800ca3c:	2320      	movmi	r3, #32
 800ca3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca42:	0713      	lsls	r3, r2, #28
 800ca44:	bf44      	itt	mi
 800ca46:	232b      	movmi	r3, #43	; 0x2b
 800ca48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca50:	2b2a      	cmp	r3, #42	; 0x2a
 800ca52:	d015      	beq.n	800ca80 <_vfiprintf_r+0x13c>
 800ca54:	9a07      	ldr	r2, [sp, #28]
 800ca56:	4654      	mov	r4, sl
 800ca58:	2000      	movs	r0, #0
 800ca5a:	f04f 0c0a 	mov.w	ip, #10
 800ca5e:	4621      	mov	r1, r4
 800ca60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca64:	3b30      	subs	r3, #48	; 0x30
 800ca66:	2b09      	cmp	r3, #9
 800ca68:	d94e      	bls.n	800cb08 <_vfiprintf_r+0x1c4>
 800ca6a:	b1b0      	cbz	r0, 800ca9a <_vfiprintf_r+0x156>
 800ca6c:	9207      	str	r2, [sp, #28]
 800ca6e:	e014      	b.n	800ca9a <_vfiprintf_r+0x156>
 800ca70:	eba0 0308 	sub.w	r3, r0, r8
 800ca74:	fa09 f303 	lsl.w	r3, r9, r3
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	9304      	str	r3, [sp, #16]
 800ca7c:	46a2      	mov	sl, r4
 800ca7e:	e7d2      	b.n	800ca26 <_vfiprintf_r+0xe2>
 800ca80:	9b03      	ldr	r3, [sp, #12]
 800ca82:	1d19      	adds	r1, r3, #4
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	9103      	str	r1, [sp, #12]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	bfbb      	ittet	lt
 800ca8c:	425b      	neglt	r3, r3
 800ca8e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca92:	9307      	strge	r3, [sp, #28]
 800ca94:	9307      	strlt	r3, [sp, #28]
 800ca96:	bfb8      	it	lt
 800ca98:	9204      	strlt	r2, [sp, #16]
 800ca9a:	7823      	ldrb	r3, [r4, #0]
 800ca9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ca9e:	d10c      	bne.n	800caba <_vfiprintf_r+0x176>
 800caa0:	7863      	ldrb	r3, [r4, #1]
 800caa2:	2b2a      	cmp	r3, #42	; 0x2a
 800caa4:	d135      	bne.n	800cb12 <_vfiprintf_r+0x1ce>
 800caa6:	9b03      	ldr	r3, [sp, #12]
 800caa8:	1d1a      	adds	r2, r3, #4
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	9203      	str	r2, [sp, #12]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	bfb8      	it	lt
 800cab2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cab6:	3402      	adds	r4, #2
 800cab8:	9305      	str	r3, [sp, #20]
 800caba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cba0 <_vfiprintf_r+0x25c>
 800cabe:	7821      	ldrb	r1, [r4, #0]
 800cac0:	2203      	movs	r2, #3
 800cac2:	4650      	mov	r0, sl
 800cac4:	f7f3 fb9c 	bl	8000200 <memchr>
 800cac8:	b140      	cbz	r0, 800cadc <_vfiprintf_r+0x198>
 800caca:	2340      	movs	r3, #64	; 0x40
 800cacc:	eba0 000a 	sub.w	r0, r0, sl
 800cad0:	fa03 f000 	lsl.w	r0, r3, r0
 800cad4:	9b04      	ldr	r3, [sp, #16]
 800cad6:	4303      	orrs	r3, r0
 800cad8:	3401      	adds	r4, #1
 800cada:	9304      	str	r3, [sp, #16]
 800cadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cae0:	482c      	ldr	r0, [pc, #176]	; (800cb94 <_vfiprintf_r+0x250>)
 800cae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cae6:	2206      	movs	r2, #6
 800cae8:	f7f3 fb8a 	bl	8000200 <memchr>
 800caec:	2800      	cmp	r0, #0
 800caee:	d03f      	beq.n	800cb70 <_vfiprintf_r+0x22c>
 800caf0:	4b29      	ldr	r3, [pc, #164]	; (800cb98 <_vfiprintf_r+0x254>)
 800caf2:	bb1b      	cbnz	r3, 800cb3c <_vfiprintf_r+0x1f8>
 800caf4:	9b03      	ldr	r3, [sp, #12]
 800caf6:	3307      	adds	r3, #7
 800caf8:	f023 0307 	bic.w	r3, r3, #7
 800cafc:	3308      	adds	r3, #8
 800cafe:	9303      	str	r3, [sp, #12]
 800cb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb02:	443b      	add	r3, r7
 800cb04:	9309      	str	r3, [sp, #36]	; 0x24
 800cb06:	e767      	b.n	800c9d8 <_vfiprintf_r+0x94>
 800cb08:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb0c:	460c      	mov	r4, r1
 800cb0e:	2001      	movs	r0, #1
 800cb10:	e7a5      	b.n	800ca5e <_vfiprintf_r+0x11a>
 800cb12:	2300      	movs	r3, #0
 800cb14:	3401      	adds	r4, #1
 800cb16:	9305      	str	r3, [sp, #20]
 800cb18:	4619      	mov	r1, r3
 800cb1a:	f04f 0c0a 	mov.w	ip, #10
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb24:	3a30      	subs	r2, #48	; 0x30
 800cb26:	2a09      	cmp	r2, #9
 800cb28:	d903      	bls.n	800cb32 <_vfiprintf_r+0x1ee>
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d0c5      	beq.n	800caba <_vfiprintf_r+0x176>
 800cb2e:	9105      	str	r1, [sp, #20]
 800cb30:	e7c3      	b.n	800caba <_vfiprintf_r+0x176>
 800cb32:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb36:	4604      	mov	r4, r0
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e7f0      	b.n	800cb1e <_vfiprintf_r+0x1da>
 800cb3c:	ab03      	add	r3, sp, #12
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	462a      	mov	r2, r5
 800cb42:	4b16      	ldr	r3, [pc, #88]	; (800cb9c <_vfiprintf_r+0x258>)
 800cb44:	a904      	add	r1, sp, #16
 800cb46:	4630      	mov	r0, r6
 800cb48:	f000 f8cc 	bl	800cce4 <_printf_float>
 800cb4c:	4607      	mov	r7, r0
 800cb4e:	1c78      	adds	r0, r7, #1
 800cb50:	d1d6      	bne.n	800cb00 <_vfiprintf_r+0x1bc>
 800cb52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb54:	07d9      	lsls	r1, r3, #31
 800cb56:	d405      	bmi.n	800cb64 <_vfiprintf_r+0x220>
 800cb58:	89ab      	ldrh	r3, [r5, #12]
 800cb5a:	059a      	lsls	r2, r3, #22
 800cb5c:	d402      	bmi.n	800cb64 <_vfiprintf_r+0x220>
 800cb5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb60:	f002 fee0 	bl	800f924 <__retarget_lock_release_recursive>
 800cb64:	89ab      	ldrh	r3, [r5, #12]
 800cb66:	065b      	lsls	r3, r3, #25
 800cb68:	f53f af12 	bmi.w	800c990 <_vfiprintf_r+0x4c>
 800cb6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb6e:	e711      	b.n	800c994 <_vfiprintf_r+0x50>
 800cb70:	ab03      	add	r3, sp, #12
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	462a      	mov	r2, r5
 800cb76:	4b09      	ldr	r3, [pc, #36]	; (800cb9c <_vfiprintf_r+0x258>)
 800cb78:	a904      	add	r1, sp, #16
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	f000 fb56 	bl	800d22c <_printf_i>
 800cb80:	e7e4      	b.n	800cb4c <_vfiprintf_r+0x208>
 800cb82:	bf00      	nop
 800cb84:	08039674 	.word	0x08039674
 800cb88:	08039694 	.word	0x08039694
 800cb8c:	08039654 	.word	0x08039654
 800cb90:	080391d8 	.word	0x080391d8
 800cb94:	080391e2 	.word	0x080391e2
 800cb98:	0800cce5 	.word	0x0800cce5
 800cb9c:	0800c91f 	.word	0x0800c91f
 800cba0:	080391de 	.word	0x080391de

0800cba4 <__cvt>:
 800cba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cba8:	ec55 4b10 	vmov	r4, r5, d0
 800cbac:	2d00      	cmp	r5, #0
 800cbae:	460e      	mov	r6, r1
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	462b      	mov	r3, r5
 800cbb4:	bfbb      	ittet	lt
 800cbb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cbba:	461d      	movlt	r5, r3
 800cbbc:	2300      	movge	r3, #0
 800cbbe:	232d      	movlt	r3, #45	; 0x2d
 800cbc0:	700b      	strb	r3, [r1, #0]
 800cbc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cbc8:	4691      	mov	r9, r2
 800cbca:	f023 0820 	bic.w	r8, r3, #32
 800cbce:	bfbc      	itt	lt
 800cbd0:	4622      	movlt	r2, r4
 800cbd2:	4614      	movlt	r4, r2
 800cbd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cbd8:	d005      	beq.n	800cbe6 <__cvt+0x42>
 800cbda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cbde:	d100      	bne.n	800cbe2 <__cvt+0x3e>
 800cbe0:	3601      	adds	r6, #1
 800cbe2:	2102      	movs	r1, #2
 800cbe4:	e000      	b.n	800cbe8 <__cvt+0x44>
 800cbe6:	2103      	movs	r1, #3
 800cbe8:	ab03      	add	r3, sp, #12
 800cbea:	9301      	str	r3, [sp, #4]
 800cbec:	ab02      	add	r3, sp, #8
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	ec45 4b10 	vmov	d0, r4, r5
 800cbf4:	4653      	mov	r3, sl
 800cbf6:	4632      	mov	r2, r6
 800cbf8:	f001 fe9a 	bl	800e930 <_dtoa_r>
 800cbfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cc00:	4607      	mov	r7, r0
 800cc02:	d102      	bne.n	800cc0a <__cvt+0x66>
 800cc04:	f019 0f01 	tst.w	r9, #1
 800cc08:	d022      	beq.n	800cc50 <__cvt+0xac>
 800cc0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cc0e:	eb07 0906 	add.w	r9, r7, r6
 800cc12:	d110      	bne.n	800cc36 <__cvt+0x92>
 800cc14:	783b      	ldrb	r3, [r7, #0]
 800cc16:	2b30      	cmp	r3, #48	; 0x30
 800cc18:	d10a      	bne.n	800cc30 <__cvt+0x8c>
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	4620      	mov	r0, r4
 800cc20:	4629      	mov	r1, r5
 800cc22:	f7f3 ff6b 	bl	8000afc <__aeabi_dcmpeq>
 800cc26:	b918      	cbnz	r0, 800cc30 <__cvt+0x8c>
 800cc28:	f1c6 0601 	rsb	r6, r6, #1
 800cc2c:	f8ca 6000 	str.w	r6, [sl]
 800cc30:	f8da 3000 	ldr.w	r3, [sl]
 800cc34:	4499      	add	r9, r3
 800cc36:	2200      	movs	r2, #0
 800cc38:	2300      	movs	r3, #0
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	f7f3 ff5d 	bl	8000afc <__aeabi_dcmpeq>
 800cc42:	b108      	cbz	r0, 800cc48 <__cvt+0xa4>
 800cc44:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc48:	2230      	movs	r2, #48	; 0x30
 800cc4a:	9b03      	ldr	r3, [sp, #12]
 800cc4c:	454b      	cmp	r3, r9
 800cc4e:	d307      	bcc.n	800cc60 <__cvt+0xbc>
 800cc50:	9b03      	ldr	r3, [sp, #12]
 800cc52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc54:	1bdb      	subs	r3, r3, r7
 800cc56:	4638      	mov	r0, r7
 800cc58:	6013      	str	r3, [r2, #0]
 800cc5a:	b004      	add	sp, #16
 800cc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc60:	1c59      	adds	r1, r3, #1
 800cc62:	9103      	str	r1, [sp, #12]
 800cc64:	701a      	strb	r2, [r3, #0]
 800cc66:	e7f0      	b.n	800cc4a <__cvt+0xa6>

0800cc68 <__exponent>:
 800cc68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2900      	cmp	r1, #0
 800cc6e:	bfb8      	it	lt
 800cc70:	4249      	neglt	r1, r1
 800cc72:	f803 2b02 	strb.w	r2, [r3], #2
 800cc76:	bfb4      	ite	lt
 800cc78:	222d      	movlt	r2, #45	; 0x2d
 800cc7a:	222b      	movge	r2, #43	; 0x2b
 800cc7c:	2909      	cmp	r1, #9
 800cc7e:	7042      	strb	r2, [r0, #1]
 800cc80:	dd2a      	ble.n	800ccd8 <__exponent+0x70>
 800cc82:	f10d 0407 	add.w	r4, sp, #7
 800cc86:	46a4      	mov	ip, r4
 800cc88:	270a      	movs	r7, #10
 800cc8a:	46a6      	mov	lr, r4
 800cc8c:	460a      	mov	r2, r1
 800cc8e:	fb91 f6f7 	sdiv	r6, r1, r7
 800cc92:	fb07 1516 	mls	r5, r7, r6, r1
 800cc96:	3530      	adds	r5, #48	; 0x30
 800cc98:	2a63      	cmp	r2, #99	; 0x63
 800cc9a:	f104 34ff 	add.w	r4, r4, #4294967295
 800cc9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cca2:	4631      	mov	r1, r6
 800cca4:	dcf1      	bgt.n	800cc8a <__exponent+0x22>
 800cca6:	3130      	adds	r1, #48	; 0x30
 800cca8:	f1ae 0502 	sub.w	r5, lr, #2
 800ccac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ccb0:	1c44      	adds	r4, r0, #1
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	4561      	cmp	r1, ip
 800ccb6:	d30a      	bcc.n	800ccce <__exponent+0x66>
 800ccb8:	f10d 0209 	add.w	r2, sp, #9
 800ccbc:	eba2 020e 	sub.w	r2, r2, lr
 800ccc0:	4565      	cmp	r5, ip
 800ccc2:	bf88      	it	hi
 800ccc4:	2200      	movhi	r2, #0
 800ccc6:	4413      	add	r3, r2
 800ccc8:	1a18      	subs	r0, r3, r0
 800ccca:	b003      	add	sp, #12
 800cccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ccd6:	e7ed      	b.n	800ccb4 <__exponent+0x4c>
 800ccd8:	2330      	movs	r3, #48	; 0x30
 800ccda:	3130      	adds	r1, #48	; 0x30
 800ccdc:	7083      	strb	r3, [r0, #2]
 800ccde:	70c1      	strb	r1, [r0, #3]
 800cce0:	1d03      	adds	r3, r0, #4
 800cce2:	e7f1      	b.n	800ccc8 <__exponent+0x60>

0800cce4 <_printf_float>:
 800cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce8:	ed2d 8b02 	vpush	{d8}
 800ccec:	b08d      	sub	sp, #52	; 0x34
 800ccee:	460c      	mov	r4, r1
 800ccf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ccf4:	4616      	mov	r6, r2
 800ccf6:	461f      	mov	r7, r3
 800ccf8:	4605      	mov	r5, r0
 800ccfa:	f002 fe0b 	bl	800f914 <_localeconv_r>
 800ccfe:	f8d0 a000 	ldr.w	sl, [r0]
 800cd02:	4650      	mov	r0, sl
 800cd04:	f7f3 fa74 	bl	80001f0 <strlen>
 800cd08:	2300      	movs	r3, #0
 800cd0a:	930a      	str	r3, [sp, #40]	; 0x28
 800cd0c:	6823      	ldr	r3, [r4, #0]
 800cd0e:	9305      	str	r3, [sp, #20]
 800cd10:	f8d8 3000 	ldr.w	r3, [r8]
 800cd14:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cd18:	3307      	adds	r3, #7
 800cd1a:	f023 0307 	bic.w	r3, r3, #7
 800cd1e:	f103 0208 	add.w	r2, r3, #8
 800cd22:	f8c8 2000 	str.w	r2, [r8]
 800cd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cd2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cd32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd36:	9307      	str	r3, [sp, #28]
 800cd38:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd3c:	ee08 0a10 	vmov	s16, r0
 800cd40:	4b9f      	ldr	r3, [pc, #636]	; (800cfc0 <_printf_float+0x2dc>)
 800cd42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd46:	f04f 32ff 	mov.w	r2, #4294967295
 800cd4a:	f7f3 ff09 	bl	8000b60 <__aeabi_dcmpun>
 800cd4e:	bb88      	cbnz	r0, 800cdb4 <_printf_float+0xd0>
 800cd50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd54:	4b9a      	ldr	r3, [pc, #616]	; (800cfc0 <_printf_float+0x2dc>)
 800cd56:	f04f 32ff 	mov.w	r2, #4294967295
 800cd5a:	f7f3 fee3 	bl	8000b24 <__aeabi_dcmple>
 800cd5e:	bb48      	cbnz	r0, 800cdb4 <_printf_float+0xd0>
 800cd60:	2200      	movs	r2, #0
 800cd62:	2300      	movs	r3, #0
 800cd64:	4640      	mov	r0, r8
 800cd66:	4649      	mov	r1, r9
 800cd68:	f7f3 fed2 	bl	8000b10 <__aeabi_dcmplt>
 800cd6c:	b110      	cbz	r0, 800cd74 <_printf_float+0x90>
 800cd6e:	232d      	movs	r3, #45	; 0x2d
 800cd70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd74:	4b93      	ldr	r3, [pc, #588]	; (800cfc4 <_printf_float+0x2e0>)
 800cd76:	4894      	ldr	r0, [pc, #592]	; (800cfc8 <_printf_float+0x2e4>)
 800cd78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cd7c:	bf94      	ite	ls
 800cd7e:	4698      	movls	r8, r3
 800cd80:	4680      	movhi	r8, r0
 800cd82:	2303      	movs	r3, #3
 800cd84:	6123      	str	r3, [r4, #16]
 800cd86:	9b05      	ldr	r3, [sp, #20]
 800cd88:	f023 0204 	bic.w	r2, r3, #4
 800cd8c:	6022      	str	r2, [r4, #0]
 800cd8e:	f04f 0900 	mov.w	r9, #0
 800cd92:	9700      	str	r7, [sp, #0]
 800cd94:	4633      	mov	r3, r6
 800cd96:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd98:	4621      	mov	r1, r4
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	f000 f9d8 	bl	800d150 <_printf_common>
 800cda0:	3001      	adds	r0, #1
 800cda2:	f040 8090 	bne.w	800cec6 <_printf_float+0x1e2>
 800cda6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdaa:	b00d      	add	sp, #52	; 0x34
 800cdac:	ecbd 8b02 	vpop	{d8}
 800cdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb4:	4642      	mov	r2, r8
 800cdb6:	464b      	mov	r3, r9
 800cdb8:	4640      	mov	r0, r8
 800cdba:	4649      	mov	r1, r9
 800cdbc:	f7f3 fed0 	bl	8000b60 <__aeabi_dcmpun>
 800cdc0:	b140      	cbz	r0, 800cdd4 <_printf_float+0xf0>
 800cdc2:	464b      	mov	r3, r9
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	bfbc      	itt	lt
 800cdc8:	232d      	movlt	r3, #45	; 0x2d
 800cdca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cdce:	487f      	ldr	r0, [pc, #508]	; (800cfcc <_printf_float+0x2e8>)
 800cdd0:	4b7f      	ldr	r3, [pc, #508]	; (800cfd0 <_printf_float+0x2ec>)
 800cdd2:	e7d1      	b.n	800cd78 <_printf_float+0x94>
 800cdd4:	6863      	ldr	r3, [r4, #4]
 800cdd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cdda:	9206      	str	r2, [sp, #24]
 800cddc:	1c5a      	adds	r2, r3, #1
 800cdde:	d13f      	bne.n	800ce60 <_printf_float+0x17c>
 800cde0:	2306      	movs	r3, #6
 800cde2:	6063      	str	r3, [r4, #4]
 800cde4:	9b05      	ldr	r3, [sp, #20]
 800cde6:	6861      	ldr	r1, [r4, #4]
 800cde8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cdec:	2300      	movs	r3, #0
 800cdee:	9303      	str	r3, [sp, #12]
 800cdf0:	ab0a      	add	r3, sp, #40	; 0x28
 800cdf2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cdf6:	ab09      	add	r3, sp, #36	; 0x24
 800cdf8:	ec49 8b10 	vmov	d0, r8, r9
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	6022      	str	r2, [r4, #0]
 800ce00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ce04:	4628      	mov	r0, r5
 800ce06:	f7ff fecd 	bl	800cba4 <__cvt>
 800ce0a:	9b06      	ldr	r3, [sp, #24]
 800ce0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce0e:	2b47      	cmp	r3, #71	; 0x47
 800ce10:	4680      	mov	r8, r0
 800ce12:	d108      	bne.n	800ce26 <_printf_float+0x142>
 800ce14:	1cc8      	adds	r0, r1, #3
 800ce16:	db02      	blt.n	800ce1e <_printf_float+0x13a>
 800ce18:	6863      	ldr	r3, [r4, #4]
 800ce1a:	4299      	cmp	r1, r3
 800ce1c:	dd41      	ble.n	800cea2 <_printf_float+0x1be>
 800ce1e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ce22:	fa5f fb8b 	uxtb.w	fp, fp
 800ce26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce2a:	d820      	bhi.n	800ce6e <_printf_float+0x18a>
 800ce2c:	3901      	subs	r1, #1
 800ce2e:	465a      	mov	r2, fp
 800ce30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce34:	9109      	str	r1, [sp, #36]	; 0x24
 800ce36:	f7ff ff17 	bl	800cc68 <__exponent>
 800ce3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce3c:	1813      	adds	r3, r2, r0
 800ce3e:	2a01      	cmp	r2, #1
 800ce40:	4681      	mov	r9, r0
 800ce42:	6123      	str	r3, [r4, #16]
 800ce44:	dc02      	bgt.n	800ce4c <_printf_float+0x168>
 800ce46:	6822      	ldr	r2, [r4, #0]
 800ce48:	07d2      	lsls	r2, r2, #31
 800ce4a:	d501      	bpl.n	800ce50 <_printf_float+0x16c>
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	6123      	str	r3, [r4, #16]
 800ce50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d09c      	beq.n	800cd92 <_printf_float+0xae>
 800ce58:	232d      	movs	r3, #45	; 0x2d
 800ce5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce5e:	e798      	b.n	800cd92 <_printf_float+0xae>
 800ce60:	9a06      	ldr	r2, [sp, #24]
 800ce62:	2a47      	cmp	r2, #71	; 0x47
 800ce64:	d1be      	bne.n	800cde4 <_printf_float+0x100>
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1bc      	bne.n	800cde4 <_printf_float+0x100>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e7b9      	b.n	800cde2 <_printf_float+0xfe>
 800ce6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ce72:	d118      	bne.n	800cea6 <_printf_float+0x1c2>
 800ce74:	2900      	cmp	r1, #0
 800ce76:	6863      	ldr	r3, [r4, #4]
 800ce78:	dd0b      	ble.n	800ce92 <_printf_float+0x1ae>
 800ce7a:	6121      	str	r1, [r4, #16]
 800ce7c:	b913      	cbnz	r3, 800ce84 <_printf_float+0x1a0>
 800ce7e:	6822      	ldr	r2, [r4, #0]
 800ce80:	07d0      	lsls	r0, r2, #31
 800ce82:	d502      	bpl.n	800ce8a <_printf_float+0x1a6>
 800ce84:	3301      	adds	r3, #1
 800ce86:	440b      	add	r3, r1
 800ce88:	6123      	str	r3, [r4, #16]
 800ce8a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ce8c:	f04f 0900 	mov.w	r9, #0
 800ce90:	e7de      	b.n	800ce50 <_printf_float+0x16c>
 800ce92:	b913      	cbnz	r3, 800ce9a <_printf_float+0x1b6>
 800ce94:	6822      	ldr	r2, [r4, #0]
 800ce96:	07d2      	lsls	r2, r2, #31
 800ce98:	d501      	bpl.n	800ce9e <_printf_float+0x1ba>
 800ce9a:	3302      	adds	r3, #2
 800ce9c:	e7f4      	b.n	800ce88 <_printf_float+0x1a4>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e7f2      	b.n	800ce88 <_printf_float+0x1a4>
 800cea2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cea8:	4299      	cmp	r1, r3
 800ceaa:	db05      	blt.n	800ceb8 <_printf_float+0x1d4>
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	6121      	str	r1, [r4, #16]
 800ceb0:	07d8      	lsls	r0, r3, #31
 800ceb2:	d5ea      	bpl.n	800ce8a <_printf_float+0x1a6>
 800ceb4:	1c4b      	adds	r3, r1, #1
 800ceb6:	e7e7      	b.n	800ce88 <_printf_float+0x1a4>
 800ceb8:	2900      	cmp	r1, #0
 800ceba:	bfd4      	ite	le
 800cebc:	f1c1 0202 	rsble	r2, r1, #2
 800cec0:	2201      	movgt	r2, #1
 800cec2:	4413      	add	r3, r2
 800cec4:	e7e0      	b.n	800ce88 <_printf_float+0x1a4>
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	055a      	lsls	r2, r3, #21
 800ceca:	d407      	bmi.n	800cedc <_printf_float+0x1f8>
 800cecc:	6923      	ldr	r3, [r4, #16]
 800cece:	4642      	mov	r2, r8
 800ced0:	4631      	mov	r1, r6
 800ced2:	4628      	mov	r0, r5
 800ced4:	47b8      	blx	r7
 800ced6:	3001      	adds	r0, #1
 800ced8:	d12c      	bne.n	800cf34 <_printf_float+0x250>
 800ceda:	e764      	b.n	800cda6 <_printf_float+0xc2>
 800cedc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cee0:	f240 80e0 	bls.w	800d0a4 <_printf_float+0x3c0>
 800cee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cee8:	2200      	movs	r2, #0
 800ceea:	2300      	movs	r3, #0
 800ceec:	f7f3 fe06 	bl	8000afc <__aeabi_dcmpeq>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d034      	beq.n	800cf5e <_printf_float+0x27a>
 800cef4:	4a37      	ldr	r2, [pc, #220]	; (800cfd4 <_printf_float+0x2f0>)
 800cef6:	2301      	movs	r3, #1
 800cef8:	4631      	mov	r1, r6
 800cefa:	4628      	mov	r0, r5
 800cefc:	47b8      	blx	r7
 800cefe:	3001      	adds	r0, #1
 800cf00:	f43f af51 	beq.w	800cda6 <_printf_float+0xc2>
 800cf04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	db02      	blt.n	800cf12 <_printf_float+0x22e>
 800cf0c:	6823      	ldr	r3, [r4, #0]
 800cf0e:	07d8      	lsls	r0, r3, #31
 800cf10:	d510      	bpl.n	800cf34 <_printf_float+0x250>
 800cf12:	ee18 3a10 	vmov	r3, s16
 800cf16:	4652      	mov	r2, sl
 800cf18:	4631      	mov	r1, r6
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	47b8      	blx	r7
 800cf1e:	3001      	adds	r0, #1
 800cf20:	f43f af41 	beq.w	800cda6 <_printf_float+0xc2>
 800cf24:	f04f 0800 	mov.w	r8, #0
 800cf28:	f104 091a 	add.w	r9, r4, #26
 800cf2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	4543      	cmp	r3, r8
 800cf32:	dc09      	bgt.n	800cf48 <_printf_float+0x264>
 800cf34:	6823      	ldr	r3, [r4, #0]
 800cf36:	079b      	lsls	r3, r3, #30
 800cf38:	f100 8105 	bmi.w	800d146 <_printf_float+0x462>
 800cf3c:	68e0      	ldr	r0, [r4, #12]
 800cf3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf40:	4298      	cmp	r0, r3
 800cf42:	bfb8      	it	lt
 800cf44:	4618      	movlt	r0, r3
 800cf46:	e730      	b.n	800cdaa <_printf_float+0xc6>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	464a      	mov	r2, r9
 800cf4c:	4631      	mov	r1, r6
 800cf4e:	4628      	mov	r0, r5
 800cf50:	47b8      	blx	r7
 800cf52:	3001      	adds	r0, #1
 800cf54:	f43f af27 	beq.w	800cda6 <_printf_float+0xc2>
 800cf58:	f108 0801 	add.w	r8, r8, #1
 800cf5c:	e7e6      	b.n	800cf2c <_printf_float+0x248>
 800cf5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	dc39      	bgt.n	800cfd8 <_printf_float+0x2f4>
 800cf64:	4a1b      	ldr	r2, [pc, #108]	; (800cfd4 <_printf_float+0x2f0>)
 800cf66:	2301      	movs	r3, #1
 800cf68:	4631      	mov	r1, r6
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	47b8      	blx	r7
 800cf6e:	3001      	adds	r0, #1
 800cf70:	f43f af19 	beq.w	800cda6 <_printf_float+0xc2>
 800cf74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	d102      	bne.n	800cf82 <_printf_float+0x29e>
 800cf7c:	6823      	ldr	r3, [r4, #0]
 800cf7e:	07d9      	lsls	r1, r3, #31
 800cf80:	d5d8      	bpl.n	800cf34 <_printf_float+0x250>
 800cf82:	ee18 3a10 	vmov	r3, s16
 800cf86:	4652      	mov	r2, sl
 800cf88:	4631      	mov	r1, r6
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	47b8      	blx	r7
 800cf8e:	3001      	adds	r0, #1
 800cf90:	f43f af09 	beq.w	800cda6 <_printf_float+0xc2>
 800cf94:	f04f 0900 	mov.w	r9, #0
 800cf98:	f104 0a1a 	add.w	sl, r4, #26
 800cf9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf9e:	425b      	negs	r3, r3
 800cfa0:	454b      	cmp	r3, r9
 800cfa2:	dc01      	bgt.n	800cfa8 <_printf_float+0x2c4>
 800cfa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfa6:	e792      	b.n	800cece <_printf_float+0x1ea>
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	4652      	mov	r2, sl
 800cfac:	4631      	mov	r1, r6
 800cfae:	4628      	mov	r0, r5
 800cfb0:	47b8      	blx	r7
 800cfb2:	3001      	adds	r0, #1
 800cfb4:	f43f aef7 	beq.w	800cda6 <_printf_float+0xc2>
 800cfb8:	f109 0901 	add.w	r9, r9, #1
 800cfbc:	e7ee      	b.n	800cf9c <_printf_float+0x2b8>
 800cfbe:	bf00      	nop
 800cfc0:	7fefffff 	.word	0x7fefffff
 800cfc4:	080391e9 	.word	0x080391e9
 800cfc8:	080391ed 	.word	0x080391ed
 800cfcc:	080391f5 	.word	0x080391f5
 800cfd0:	080391f1 	.word	0x080391f1
 800cfd4:	08039870 	.word	0x08039870
 800cfd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	bfa8      	it	ge
 800cfe0:	461a      	movge	r2, r3
 800cfe2:	2a00      	cmp	r2, #0
 800cfe4:	4691      	mov	r9, r2
 800cfe6:	dc37      	bgt.n	800d058 <_printf_float+0x374>
 800cfe8:	f04f 0b00 	mov.w	fp, #0
 800cfec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cff0:	f104 021a 	add.w	r2, r4, #26
 800cff4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cff6:	9305      	str	r3, [sp, #20]
 800cff8:	eba3 0309 	sub.w	r3, r3, r9
 800cffc:	455b      	cmp	r3, fp
 800cffe:	dc33      	bgt.n	800d068 <_printf_float+0x384>
 800d000:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d004:	429a      	cmp	r2, r3
 800d006:	db3b      	blt.n	800d080 <_printf_float+0x39c>
 800d008:	6823      	ldr	r3, [r4, #0]
 800d00a:	07da      	lsls	r2, r3, #31
 800d00c:	d438      	bmi.n	800d080 <_printf_float+0x39c>
 800d00e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d010:	9a05      	ldr	r2, [sp, #20]
 800d012:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d014:	1a9a      	subs	r2, r3, r2
 800d016:	eba3 0901 	sub.w	r9, r3, r1
 800d01a:	4591      	cmp	r9, r2
 800d01c:	bfa8      	it	ge
 800d01e:	4691      	movge	r9, r2
 800d020:	f1b9 0f00 	cmp.w	r9, #0
 800d024:	dc35      	bgt.n	800d092 <_printf_float+0x3ae>
 800d026:	f04f 0800 	mov.w	r8, #0
 800d02a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d02e:	f104 0a1a 	add.w	sl, r4, #26
 800d032:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d036:	1a9b      	subs	r3, r3, r2
 800d038:	eba3 0309 	sub.w	r3, r3, r9
 800d03c:	4543      	cmp	r3, r8
 800d03e:	f77f af79 	ble.w	800cf34 <_printf_float+0x250>
 800d042:	2301      	movs	r3, #1
 800d044:	4652      	mov	r2, sl
 800d046:	4631      	mov	r1, r6
 800d048:	4628      	mov	r0, r5
 800d04a:	47b8      	blx	r7
 800d04c:	3001      	adds	r0, #1
 800d04e:	f43f aeaa 	beq.w	800cda6 <_printf_float+0xc2>
 800d052:	f108 0801 	add.w	r8, r8, #1
 800d056:	e7ec      	b.n	800d032 <_printf_float+0x34e>
 800d058:	4613      	mov	r3, r2
 800d05a:	4631      	mov	r1, r6
 800d05c:	4642      	mov	r2, r8
 800d05e:	4628      	mov	r0, r5
 800d060:	47b8      	blx	r7
 800d062:	3001      	adds	r0, #1
 800d064:	d1c0      	bne.n	800cfe8 <_printf_float+0x304>
 800d066:	e69e      	b.n	800cda6 <_printf_float+0xc2>
 800d068:	2301      	movs	r3, #1
 800d06a:	4631      	mov	r1, r6
 800d06c:	4628      	mov	r0, r5
 800d06e:	9205      	str	r2, [sp, #20]
 800d070:	47b8      	blx	r7
 800d072:	3001      	adds	r0, #1
 800d074:	f43f ae97 	beq.w	800cda6 <_printf_float+0xc2>
 800d078:	9a05      	ldr	r2, [sp, #20]
 800d07a:	f10b 0b01 	add.w	fp, fp, #1
 800d07e:	e7b9      	b.n	800cff4 <_printf_float+0x310>
 800d080:	ee18 3a10 	vmov	r3, s16
 800d084:	4652      	mov	r2, sl
 800d086:	4631      	mov	r1, r6
 800d088:	4628      	mov	r0, r5
 800d08a:	47b8      	blx	r7
 800d08c:	3001      	adds	r0, #1
 800d08e:	d1be      	bne.n	800d00e <_printf_float+0x32a>
 800d090:	e689      	b.n	800cda6 <_printf_float+0xc2>
 800d092:	9a05      	ldr	r2, [sp, #20]
 800d094:	464b      	mov	r3, r9
 800d096:	4442      	add	r2, r8
 800d098:	4631      	mov	r1, r6
 800d09a:	4628      	mov	r0, r5
 800d09c:	47b8      	blx	r7
 800d09e:	3001      	adds	r0, #1
 800d0a0:	d1c1      	bne.n	800d026 <_printf_float+0x342>
 800d0a2:	e680      	b.n	800cda6 <_printf_float+0xc2>
 800d0a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0a6:	2a01      	cmp	r2, #1
 800d0a8:	dc01      	bgt.n	800d0ae <_printf_float+0x3ca>
 800d0aa:	07db      	lsls	r3, r3, #31
 800d0ac:	d538      	bpl.n	800d120 <_printf_float+0x43c>
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	4642      	mov	r2, r8
 800d0b2:	4631      	mov	r1, r6
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	47b8      	blx	r7
 800d0b8:	3001      	adds	r0, #1
 800d0ba:	f43f ae74 	beq.w	800cda6 <_printf_float+0xc2>
 800d0be:	ee18 3a10 	vmov	r3, s16
 800d0c2:	4652      	mov	r2, sl
 800d0c4:	4631      	mov	r1, r6
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	47b8      	blx	r7
 800d0ca:	3001      	adds	r0, #1
 800d0cc:	f43f ae6b 	beq.w	800cda6 <_printf_float+0xc2>
 800d0d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f7f3 fd10 	bl	8000afc <__aeabi_dcmpeq>
 800d0dc:	b9d8      	cbnz	r0, 800d116 <_printf_float+0x432>
 800d0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0e0:	f108 0201 	add.w	r2, r8, #1
 800d0e4:	3b01      	subs	r3, #1
 800d0e6:	4631      	mov	r1, r6
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	47b8      	blx	r7
 800d0ec:	3001      	adds	r0, #1
 800d0ee:	d10e      	bne.n	800d10e <_printf_float+0x42a>
 800d0f0:	e659      	b.n	800cda6 <_printf_float+0xc2>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	4652      	mov	r2, sl
 800d0f6:	4631      	mov	r1, r6
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	47b8      	blx	r7
 800d0fc:	3001      	adds	r0, #1
 800d0fe:	f43f ae52 	beq.w	800cda6 <_printf_float+0xc2>
 800d102:	f108 0801 	add.w	r8, r8, #1
 800d106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d108:	3b01      	subs	r3, #1
 800d10a:	4543      	cmp	r3, r8
 800d10c:	dcf1      	bgt.n	800d0f2 <_printf_float+0x40e>
 800d10e:	464b      	mov	r3, r9
 800d110:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d114:	e6dc      	b.n	800ced0 <_printf_float+0x1ec>
 800d116:	f04f 0800 	mov.w	r8, #0
 800d11a:	f104 0a1a 	add.w	sl, r4, #26
 800d11e:	e7f2      	b.n	800d106 <_printf_float+0x422>
 800d120:	2301      	movs	r3, #1
 800d122:	4642      	mov	r2, r8
 800d124:	e7df      	b.n	800d0e6 <_printf_float+0x402>
 800d126:	2301      	movs	r3, #1
 800d128:	464a      	mov	r2, r9
 800d12a:	4631      	mov	r1, r6
 800d12c:	4628      	mov	r0, r5
 800d12e:	47b8      	blx	r7
 800d130:	3001      	adds	r0, #1
 800d132:	f43f ae38 	beq.w	800cda6 <_printf_float+0xc2>
 800d136:	f108 0801 	add.w	r8, r8, #1
 800d13a:	68e3      	ldr	r3, [r4, #12]
 800d13c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d13e:	1a5b      	subs	r3, r3, r1
 800d140:	4543      	cmp	r3, r8
 800d142:	dcf0      	bgt.n	800d126 <_printf_float+0x442>
 800d144:	e6fa      	b.n	800cf3c <_printf_float+0x258>
 800d146:	f04f 0800 	mov.w	r8, #0
 800d14a:	f104 0919 	add.w	r9, r4, #25
 800d14e:	e7f4      	b.n	800d13a <_printf_float+0x456>

0800d150 <_printf_common>:
 800d150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d154:	4616      	mov	r6, r2
 800d156:	4699      	mov	r9, r3
 800d158:	688a      	ldr	r2, [r1, #8]
 800d15a:	690b      	ldr	r3, [r1, #16]
 800d15c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d160:	4293      	cmp	r3, r2
 800d162:	bfb8      	it	lt
 800d164:	4613      	movlt	r3, r2
 800d166:	6033      	str	r3, [r6, #0]
 800d168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d16c:	4607      	mov	r7, r0
 800d16e:	460c      	mov	r4, r1
 800d170:	b10a      	cbz	r2, 800d176 <_printf_common+0x26>
 800d172:	3301      	adds	r3, #1
 800d174:	6033      	str	r3, [r6, #0]
 800d176:	6823      	ldr	r3, [r4, #0]
 800d178:	0699      	lsls	r1, r3, #26
 800d17a:	bf42      	ittt	mi
 800d17c:	6833      	ldrmi	r3, [r6, #0]
 800d17e:	3302      	addmi	r3, #2
 800d180:	6033      	strmi	r3, [r6, #0]
 800d182:	6825      	ldr	r5, [r4, #0]
 800d184:	f015 0506 	ands.w	r5, r5, #6
 800d188:	d106      	bne.n	800d198 <_printf_common+0x48>
 800d18a:	f104 0a19 	add.w	sl, r4, #25
 800d18e:	68e3      	ldr	r3, [r4, #12]
 800d190:	6832      	ldr	r2, [r6, #0]
 800d192:	1a9b      	subs	r3, r3, r2
 800d194:	42ab      	cmp	r3, r5
 800d196:	dc26      	bgt.n	800d1e6 <_printf_common+0x96>
 800d198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d19c:	1e13      	subs	r3, r2, #0
 800d19e:	6822      	ldr	r2, [r4, #0]
 800d1a0:	bf18      	it	ne
 800d1a2:	2301      	movne	r3, #1
 800d1a4:	0692      	lsls	r2, r2, #26
 800d1a6:	d42b      	bmi.n	800d200 <_printf_common+0xb0>
 800d1a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1ac:	4649      	mov	r1, r9
 800d1ae:	4638      	mov	r0, r7
 800d1b0:	47c0      	blx	r8
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	d01e      	beq.n	800d1f4 <_printf_common+0xa4>
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	68e5      	ldr	r5, [r4, #12]
 800d1ba:	6832      	ldr	r2, [r6, #0]
 800d1bc:	f003 0306 	and.w	r3, r3, #6
 800d1c0:	2b04      	cmp	r3, #4
 800d1c2:	bf08      	it	eq
 800d1c4:	1aad      	subeq	r5, r5, r2
 800d1c6:	68a3      	ldr	r3, [r4, #8]
 800d1c8:	6922      	ldr	r2, [r4, #16]
 800d1ca:	bf0c      	ite	eq
 800d1cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1d0:	2500      	movne	r5, #0
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	bfc4      	itt	gt
 800d1d6:	1a9b      	subgt	r3, r3, r2
 800d1d8:	18ed      	addgt	r5, r5, r3
 800d1da:	2600      	movs	r6, #0
 800d1dc:	341a      	adds	r4, #26
 800d1de:	42b5      	cmp	r5, r6
 800d1e0:	d11a      	bne.n	800d218 <_printf_common+0xc8>
 800d1e2:	2000      	movs	r0, #0
 800d1e4:	e008      	b.n	800d1f8 <_printf_common+0xa8>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	4652      	mov	r2, sl
 800d1ea:	4649      	mov	r1, r9
 800d1ec:	4638      	mov	r0, r7
 800d1ee:	47c0      	blx	r8
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	d103      	bne.n	800d1fc <_printf_common+0xac>
 800d1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1fc:	3501      	adds	r5, #1
 800d1fe:	e7c6      	b.n	800d18e <_printf_common+0x3e>
 800d200:	18e1      	adds	r1, r4, r3
 800d202:	1c5a      	adds	r2, r3, #1
 800d204:	2030      	movs	r0, #48	; 0x30
 800d206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d20a:	4422      	add	r2, r4
 800d20c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d214:	3302      	adds	r3, #2
 800d216:	e7c7      	b.n	800d1a8 <_printf_common+0x58>
 800d218:	2301      	movs	r3, #1
 800d21a:	4622      	mov	r2, r4
 800d21c:	4649      	mov	r1, r9
 800d21e:	4638      	mov	r0, r7
 800d220:	47c0      	blx	r8
 800d222:	3001      	adds	r0, #1
 800d224:	d0e6      	beq.n	800d1f4 <_printf_common+0xa4>
 800d226:	3601      	adds	r6, #1
 800d228:	e7d9      	b.n	800d1de <_printf_common+0x8e>
	...

0800d22c <_printf_i>:
 800d22c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d230:	7e0f      	ldrb	r7, [r1, #24]
 800d232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d234:	2f78      	cmp	r7, #120	; 0x78
 800d236:	4691      	mov	r9, r2
 800d238:	4680      	mov	r8, r0
 800d23a:	460c      	mov	r4, r1
 800d23c:	469a      	mov	sl, r3
 800d23e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d242:	d807      	bhi.n	800d254 <_printf_i+0x28>
 800d244:	2f62      	cmp	r7, #98	; 0x62
 800d246:	d80a      	bhi.n	800d25e <_printf_i+0x32>
 800d248:	2f00      	cmp	r7, #0
 800d24a:	f000 80d8 	beq.w	800d3fe <_printf_i+0x1d2>
 800d24e:	2f58      	cmp	r7, #88	; 0x58
 800d250:	f000 80a3 	beq.w	800d39a <_printf_i+0x16e>
 800d254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d25c:	e03a      	b.n	800d2d4 <_printf_i+0xa8>
 800d25e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d262:	2b15      	cmp	r3, #21
 800d264:	d8f6      	bhi.n	800d254 <_printf_i+0x28>
 800d266:	a101      	add	r1, pc, #4	; (adr r1, 800d26c <_printf_i+0x40>)
 800d268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d26c:	0800d2c5 	.word	0x0800d2c5
 800d270:	0800d2d9 	.word	0x0800d2d9
 800d274:	0800d255 	.word	0x0800d255
 800d278:	0800d255 	.word	0x0800d255
 800d27c:	0800d255 	.word	0x0800d255
 800d280:	0800d255 	.word	0x0800d255
 800d284:	0800d2d9 	.word	0x0800d2d9
 800d288:	0800d255 	.word	0x0800d255
 800d28c:	0800d255 	.word	0x0800d255
 800d290:	0800d255 	.word	0x0800d255
 800d294:	0800d255 	.word	0x0800d255
 800d298:	0800d3e5 	.word	0x0800d3e5
 800d29c:	0800d309 	.word	0x0800d309
 800d2a0:	0800d3c7 	.word	0x0800d3c7
 800d2a4:	0800d255 	.word	0x0800d255
 800d2a8:	0800d255 	.word	0x0800d255
 800d2ac:	0800d407 	.word	0x0800d407
 800d2b0:	0800d255 	.word	0x0800d255
 800d2b4:	0800d309 	.word	0x0800d309
 800d2b8:	0800d255 	.word	0x0800d255
 800d2bc:	0800d255 	.word	0x0800d255
 800d2c0:	0800d3cf 	.word	0x0800d3cf
 800d2c4:	682b      	ldr	r3, [r5, #0]
 800d2c6:	1d1a      	adds	r2, r3, #4
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	602a      	str	r2, [r5, #0]
 800d2cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e0a3      	b.n	800d420 <_printf_i+0x1f4>
 800d2d8:	6820      	ldr	r0, [r4, #0]
 800d2da:	6829      	ldr	r1, [r5, #0]
 800d2dc:	0606      	lsls	r6, r0, #24
 800d2de:	f101 0304 	add.w	r3, r1, #4
 800d2e2:	d50a      	bpl.n	800d2fa <_printf_i+0xce>
 800d2e4:	680e      	ldr	r6, [r1, #0]
 800d2e6:	602b      	str	r3, [r5, #0]
 800d2e8:	2e00      	cmp	r6, #0
 800d2ea:	da03      	bge.n	800d2f4 <_printf_i+0xc8>
 800d2ec:	232d      	movs	r3, #45	; 0x2d
 800d2ee:	4276      	negs	r6, r6
 800d2f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2f4:	485e      	ldr	r0, [pc, #376]	; (800d470 <_printf_i+0x244>)
 800d2f6:	230a      	movs	r3, #10
 800d2f8:	e019      	b.n	800d32e <_printf_i+0x102>
 800d2fa:	680e      	ldr	r6, [r1, #0]
 800d2fc:	602b      	str	r3, [r5, #0]
 800d2fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d302:	bf18      	it	ne
 800d304:	b236      	sxthne	r6, r6
 800d306:	e7ef      	b.n	800d2e8 <_printf_i+0xbc>
 800d308:	682b      	ldr	r3, [r5, #0]
 800d30a:	6820      	ldr	r0, [r4, #0]
 800d30c:	1d19      	adds	r1, r3, #4
 800d30e:	6029      	str	r1, [r5, #0]
 800d310:	0601      	lsls	r1, r0, #24
 800d312:	d501      	bpl.n	800d318 <_printf_i+0xec>
 800d314:	681e      	ldr	r6, [r3, #0]
 800d316:	e002      	b.n	800d31e <_printf_i+0xf2>
 800d318:	0646      	lsls	r6, r0, #25
 800d31a:	d5fb      	bpl.n	800d314 <_printf_i+0xe8>
 800d31c:	881e      	ldrh	r6, [r3, #0]
 800d31e:	4854      	ldr	r0, [pc, #336]	; (800d470 <_printf_i+0x244>)
 800d320:	2f6f      	cmp	r7, #111	; 0x6f
 800d322:	bf0c      	ite	eq
 800d324:	2308      	moveq	r3, #8
 800d326:	230a      	movne	r3, #10
 800d328:	2100      	movs	r1, #0
 800d32a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d32e:	6865      	ldr	r5, [r4, #4]
 800d330:	60a5      	str	r5, [r4, #8]
 800d332:	2d00      	cmp	r5, #0
 800d334:	bfa2      	ittt	ge
 800d336:	6821      	ldrge	r1, [r4, #0]
 800d338:	f021 0104 	bicge.w	r1, r1, #4
 800d33c:	6021      	strge	r1, [r4, #0]
 800d33e:	b90e      	cbnz	r6, 800d344 <_printf_i+0x118>
 800d340:	2d00      	cmp	r5, #0
 800d342:	d04d      	beq.n	800d3e0 <_printf_i+0x1b4>
 800d344:	4615      	mov	r5, r2
 800d346:	fbb6 f1f3 	udiv	r1, r6, r3
 800d34a:	fb03 6711 	mls	r7, r3, r1, r6
 800d34e:	5dc7      	ldrb	r7, [r0, r7]
 800d350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d354:	4637      	mov	r7, r6
 800d356:	42bb      	cmp	r3, r7
 800d358:	460e      	mov	r6, r1
 800d35a:	d9f4      	bls.n	800d346 <_printf_i+0x11a>
 800d35c:	2b08      	cmp	r3, #8
 800d35e:	d10b      	bne.n	800d378 <_printf_i+0x14c>
 800d360:	6823      	ldr	r3, [r4, #0]
 800d362:	07de      	lsls	r6, r3, #31
 800d364:	d508      	bpl.n	800d378 <_printf_i+0x14c>
 800d366:	6923      	ldr	r3, [r4, #16]
 800d368:	6861      	ldr	r1, [r4, #4]
 800d36a:	4299      	cmp	r1, r3
 800d36c:	bfde      	ittt	le
 800d36e:	2330      	movle	r3, #48	; 0x30
 800d370:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d374:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d378:	1b52      	subs	r2, r2, r5
 800d37a:	6122      	str	r2, [r4, #16]
 800d37c:	f8cd a000 	str.w	sl, [sp]
 800d380:	464b      	mov	r3, r9
 800d382:	aa03      	add	r2, sp, #12
 800d384:	4621      	mov	r1, r4
 800d386:	4640      	mov	r0, r8
 800d388:	f7ff fee2 	bl	800d150 <_printf_common>
 800d38c:	3001      	adds	r0, #1
 800d38e:	d14c      	bne.n	800d42a <_printf_i+0x1fe>
 800d390:	f04f 30ff 	mov.w	r0, #4294967295
 800d394:	b004      	add	sp, #16
 800d396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d39a:	4835      	ldr	r0, [pc, #212]	; (800d470 <_printf_i+0x244>)
 800d39c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d3a0:	6829      	ldr	r1, [r5, #0]
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d3a8:	6029      	str	r1, [r5, #0]
 800d3aa:	061d      	lsls	r5, r3, #24
 800d3ac:	d514      	bpl.n	800d3d8 <_printf_i+0x1ac>
 800d3ae:	07df      	lsls	r7, r3, #31
 800d3b0:	bf44      	itt	mi
 800d3b2:	f043 0320 	orrmi.w	r3, r3, #32
 800d3b6:	6023      	strmi	r3, [r4, #0]
 800d3b8:	b91e      	cbnz	r6, 800d3c2 <_printf_i+0x196>
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	f023 0320 	bic.w	r3, r3, #32
 800d3c0:	6023      	str	r3, [r4, #0]
 800d3c2:	2310      	movs	r3, #16
 800d3c4:	e7b0      	b.n	800d328 <_printf_i+0xfc>
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	f043 0320 	orr.w	r3, r3, #32
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	2378      	movs	r3, #120	; 0x78
 800d3d0:	4828      	ldr	r0, [pc, #160]	; (800d474 <_printf_i+0x248>)
 800d3d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d3d6:	e7e3      	b.n	800d3a0 <_printf_i+0x174>
 800d3d8:	0659      	lsls	r1, r3, #25
 800d3da:	bf48      	it	mi
 800d3dc:	b2b6      	uxthmi	r6, r6
 800d3de:	e7e6      	b.n	800d3ae <_printf_i+0x182>
 800d3e0:	4615      	mov	r5, r2
 800d3e2:	e7bb      	b.n	800d35c <_printf_i+0x130>
 800d3e4:	682b      	ldr	r3, [r5, #0]
 800d3e6:	6826      	ldr	r6, [r4, #0]
 800d3e8:	6961      	ldr	r1, [r4, #20]
 800d3ea:	1d18      	adds	r0, r3, #4
 800d3ec:	6028      	str	r0, [r5, #0]
 800d3ee:	0635      	lsls	r5, r6, #24
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	d501      	bpl.n	800d3f8 <_printf_i+0x1cc>
 800d3f4:	6019      	str	r1, [r3, #0]
 800d3f6:	e002      	b.n	800d3fe <_printf_i+0x1d2>
 800d3f8:	0670      	lsls	r0, r6, #25
 800d3fa:	d5fb      	bpl.n	800d3f4 <_printf_i+0x1c8>
 800d3fc:	8019      	strh	r1, [r3, #0]
 800d3fe:	2300      	movs	r3, #0
 800d400:	6123      	str	r3, [r4, #16]
 800d402:	4615      	mov	r5, r2
 800d404:	e7ba      	b.n	800d37c <_printf_i+0x150>
 800d406:	682b      	ldr	r3, [r5, #0]
 800d408:	1d1a      	adds	r2, r3, #4
 800d40a:	602a      	str	r2, [r5, #0]
 800d40c:	681d      	ldr	r5, [r3, #0]
 800d40e:	6862      	ldr	r2, [r4, #4]
 800d410:	2100      	movs	r1, #0
 800d412:	4628      	mov	r0, r5
 800d414:	f7f2 fef4 	bl	8000200 <memchr>
 800d418:	b108      	cbz	r0, 800d41e <_printf_i+0x1f2>
 800d41a:	1b40      	subs	r0, r0, r5
 800d41c:	6060      	str	r0, [r4, #4]
 800d41e:	6863      	ldr	r3, [r4, #4]
 800d420:	6123      	str	r3, [r4, #16]
 800d422:	2300      	movs	r3, #0
 800d424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d428:	e7a8      	b.n	800d37c <_printf_i+0x150>
 800d42a:	6923      	ldr	r3, [r4, #16]
 800d42c:	462a      	mov	r2, r5
 800d42e:	4649      	mov	r1, r9
 800d430:	4640      	mov	r0, r8
 800d432:	47d0      	blx	sl
 800d434:	3001      	adds	r0, #1
 800d436:	d0ab      	beq.n	800d390 <_printf_i+0x164>
 800d438:	6823      	ldr	r3, [r4, #0]
 800d43a:	079b      	lsls	r3, r3, #30
 800d43c:	d413      	bmi.n	800d466 <_printf_i+0x23a>
 800d43e:	68e0      	ldr	r0, [r4, #12]
 800d440:	9b03      	ldr	r3, [sp, #12]
 800d442:	4298      	cmp	r0, r3
 800d444:	bfb8      	it	lt
 800d446:	4618      	movlt	r0, r3
 800d448:	e7a4      	b.n	800d394 <_printf_i+0x168>
 800d44a:	2301      	movs	r3, #1
 800d44c:	4632      	mov	r2, r6
 800d44e:	4649      	mov	r1, r9
 800d450:	4640      	mov	r0, r8
 800d452:	47d0      	blx	sl
 800d454:	3001      	adds	r0, #1
 800d456:	d09b      	beq.n	800d390 <_printf_i+0x164>
 800d458:	3501      	adds	r5, #1
 800d45a:	68e3      	ldr	r3, [r4, #12]
 800d45c:	9903      	ldr	r1, [sp, #12]
 800d45e:	1a5b      	subs	r3, r3, r1
 800d460:	42ab      	cmp	r3, r5
 800d462:	dcf2      	bgt.n	800d44a <_printf_i+0x21e>
 800d464:	e7eb      	b.n	800d43e <_printf_i+0x212>
 800d466:	2500      	movs	r5, #0
 800d468:	f104 0619 	add.w	r6, r4, #25
 800d46c:	e7f5      	b.n	800d45a <_printf_i+0x22e>
 800d46e:	bf00      	nop
 800d470:	080391f9 	.word	0x080391f9
 800d474:	0803920a 	.word	0x0803920a

0800d478 <_sbrk_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4d06      	ldr	r5, [pc, #24]	; (800d494 <_sbrk_r+0x1c>)
 800d47c:	2300      	movs	r3, #0
 800d47e:	4604      	mov	r4, r0
 800d480:	4608      	mov	r0, r1
 800d482:	602b      	str	r3, [r5, #0]
 800d484:	f006 f99e 	bl	80137c4 <_sbrk>
 800d488:	1c43      	adds	r3, r0, #1
 800d48a:	d102      	bne.n	800d492 <_sbrk_r+0x1a>
 800d48c:	682b      	ldr	r3, [r5, #0]
 800d48e:	b103      	cbz	r3, 800d492 <_sbrk_r+0x1a>
 800d490:	6023      	str	r3, [r4, #0]
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	20003a58 	.word	0x20003a58

0800d498 <siprintf>:
 800d498:	b40e      	push	{r1, r2, r3}
 800d49a:	b500      	push	{lr}
 800d49c:	b09c      	sub	sp, #112	; 0x70
 800d49e:	ab1d      	add	r3, sp, #116	; 0x74
 800d4a0:	9002      	str	r0, [sp, #8]
 800d4a2:	9006      	str	r0, [sp, #24]
 800d4a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d4a8:	4809      	ldr	r0, [pc, #36]	; (800d4d0 <siprintf+0x38>)
 800d4aa:	9107      	str	r1, [sp, #28]
 800d4ac:	9104      	str	r1, [sp, #16]
 800d4ae:	4909      	ldr	r1, [pc, #36]	; (800d4d4 <siprintf+0x3c>)
 800d4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4b4:	9105      	str	r1, [sp, #20]
 800d4b6:	6800      	ldr	r0, [r0, #0]
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	a902      	add	r1, sp, #8
 800d4bc:	f002 fef6 	bl	80102ac <_svfiprintf_r>
 800d4c0:	9b02      	ldr	r3, [sp, #8]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	701a      	strb	r2, [r3, #0]
 800d4c6:	b01c      	add	sp, #112	; 0x70
 800d4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4cc:	b003      	add	sp, #12
 800d4ce:	4770      	bx	lr
 800d4d0:	200002bc 	.word	0x200002bc
 800d4d4:	ffff0208 	.word	0xffff0208

0800d4d8 <siscanf>:
 800d4d8:	b40e      	push	{r1, r2, r3}
 800d4da:	b510      	push	{r4, lr}
 800d4dc:	b09f      	sub	sp, #124	; 0x7c
 800d4de:	ac21      	add	r4, sp, #132	; 0x84
 800d4e0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d4e4:	f854 2b04 	ldr.w	r2, [r4], #4
 800d4e8:	9201      	str	r2, [sp, #4]
 800d4ea:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d4ee:	9004      	str	r0, [sp, #16]
 800d4f0:	9008      	str	r0, [sp, #32]
 800d4f2:	f7f2 fe7d 	bl	80001f0 <strlen>
 800d4f6:	4b0c      	ldr	r3, [pc, #48]	; (800d528 <siscanf+0x50>)
 800d4f8:	9005      	str	r0, [sp, #20]
 800d4fa:	9009      	str	r0, [sp, #36]	; 0x24
 800d4fc:	930d      	str	r3, [sp, #52]	; 0x34
 800d4fe:	480b      	ldr	r0, [pc, #44]	; (800d52c <siscanf+0x54>)
 800d500:	9a01      	ldr	r2, [sp, #4]
 800d502:	6800      	ldr	r0, [r0, #0]
 800d504:	9403      	str	r4, [sp, #12]
 800d506:	2300      	movs	r3, #0
 800d508:	9311      	str	r3, [sp, #68]	; 0x44
 800d50a:	9316      	str	r3, [sp, #88]	; 0x58
 800d50c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d510:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d514:	a904      	add	r1, sp, #16
 800d516:	4623      	mov	r3, r4
 800d518:	f003 f822 	bl	8010560 <__ssvfiscanf_r>
 800d51c:	b01f      	add	sp, #124	; 0x7c
 800d51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d522:	b003      	add	sp, #12
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	0800d553 	.word	0x0800d553
 800d52c:	200002bc 	.word	0x200002bc

0800d530 <__sread>:
 800d530:	b510      	push	{r4, lr}
 800d532:	460c      	mov	r4, r1
 800d534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d538:	f003 fadc 	bl	8010af4 <_read_r>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	bfab      	itete	ge
 800d540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d542:	89a3      	ldrhlt	r3, [r4, #12]
 800d544:	181b      	addge	r3, r3, r0
 800d546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d54a:	bfac      	ite	ge
 800d54c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d54e:	81a3      	strhlt	r3, [r4, #12]
 800d550:	bd10      	pop	{r4, pc}

0800d552 <__seofread>:
 800d552:	2000      	movs	r0, #0
 800d554:	4770      	bx	lr

0800d556 <__swrite>:
 800d556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d55a:	461f      	mov	r7, r3
 800d55c:	898b      	ldrh	r3, [r1, #12]
 800d55e:	05db      	lsls	r3, r3, #23
 800d560:	4605      	mov	r5, r0
 800d562:	460c      	mov	r4, r1
 800d564:	4616      	mov	r6, r2
 800d566:	d505      	bpl.n	800d574 <__swrite+0x1e>
 800d568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d56c:	2302      	movs	r3, #2
 800d56e:	2200      	movs	r2, #0
 800d570:	f002 f9da 	bl	800f928 <_lseek_r>
 800d574:	89a3      	ldrh	r3, [r4, #12]
 800d576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d57a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d57e:	81a3      	strh	r3, [r4, #12]
 800d580:	4632      	mov	r2, r6
 800d582:	463b      	mov	r3, r7
 800d584:	4628      	mov	r0, r5
 800d586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d58a:	f001 b893 	b.w	800e6b4 <_write_r>

0800d58e <__sseek>:
 800d58e:	b510      	push	{r4, lr}
 800d590:	460c      	mov	r4, r1
 800d592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d596:	f002 f9c7 	bl	800f928 <_lseek_r>
 800d59a:	1c43      	adds	r3, r0, #1
 800d59c:	89a3      	ldrh	r3, [r4, #12]
 800d59e:	bf15      	itete	ne
 800d5a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5aa:	81a3      	strheq	r3, [r4, #12]
 800d5ac:	bf18      	it	ne
 800d5ae:	81a3      	strhne	r3, [r4, #12]
 800d5b0:	bd10      	pop	{r4, pc}

0800d5b2 <__sclose>:
 800d5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5b6:	f001 b909 	b.w	800e7cc <_close_r>

0800d5ba <strchr>:
 800d5ba:	b2c9      	uxtb	r1, r1
 800d5bc:	4603      	mov	r3, r0
 800d5be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5c2:	b11a      	cbz	r2, 800d5cc <strchr+0x12>
 800d5c4:	428a      	cmp	r2, r1
 800d5c6:	d1f9      	bne.n	800d5bc <strchr+0x2>
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	4770      	bx	lr
 800d5cc:	2900      	cmp	r1, #0
 800d5ce:	bf18      	it	ne
 800d5d0:	2300      	movne	r3, #0
 800d5d2:	e7f9      	b.n	800d5c8 <strchr+0xe>

0800d5d4 <iso_year_adjust>:
 800d5d4:	6942      	ldr	r2, [r0, #20]
 800d5d6:	2a00      	cmp	r2, #0
 800d5d8:	f240 736c 	movw	r3, #1900	; 0x76c
 800d5dc:	bfa8      	it	ge
 800d5de:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800d5e2:	4413      	add	r3, r2
 800d5e4:	0792      	lsls	r2, r2, #30
 800d5e6:	d105      	bne.n	800d5f4 <iso_year_adjust+0x20>
 800d5e8:	2164      	movs	r1, #100	; 0x64
 800d5ea:	fb93 f2f1 	sdiv	r2, r3, r1
 800d5ee:	fb01 3212 	mls	r2, r1, r2, r3
 800d5f2:	b9da      	cbnz	r2, 800d62c <iso_year_adjust+0x58>
 800d5f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d5f8:	fb93 f1f2 	sdiv	r1, r3, r2
 800d5fc:	fb02 3311 	mls	r3, r2, r1, r3
 800d600:	fab3 f383 	clz	r3, r3
 800d604:	095b      	lsrs	r3, r3, #5
 800d606:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800d60a:	0040      	lsls	r0, r0, #1
 800d60c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800d610:	4418      	add	r0, r3
 800d612:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800d616:	4298      	cmp	r0, r3
 800d618:	d03a      	beq.n	800d690 <iso_year_adjust+0xbc>
 800d61a:	dc21      	bgt.n	800d660 <iso_year_adjust+0x8c>
 800d61c:	2801      	cmp	r0, #1
 800d61e:	dc1a      	bgt.n	800d656 <iso_year_adjust+0x82>
 800d620:	2800      	cmp	r0, #0
 800d622:	bfb4      	ite	lt
 800d624:	2000      	movlt	r0, #0
 800d626:	f04f 30ff 	movge.w	r0, #4294967295
 800d62a:	4770      	bx	lr
 800d62c:	2301      	movs	r3, #1
 800d62e:	e7ea      	b.n	800d606 <iso_year_adjust+0x32>
 800d630:	2817      	cmp	r0, #23
 800d632:	d813      	bhi.n	800d65c <iso_year_adjust+0x88>
 800d634:	e8df f000 	tbb	[pc, r0]
 800d638:	0c0c0c0c 	.word	0x0c0c0c0c
 800d63c:	0c0c1212 	.word	0x0c0c1212
 800d640:	12121212 	.word	0x12121212
 800d644:	12121212 	.word	0x12121212
 800d648:	0c0c1212 	.word	0x0c0c1212
 800d64c:	0c0c1212 	.word	0x0c0c1212
 800d650:	f04f 30ff 	mov.w	r0, #4294967295
 800d654:	4770      	bx	lr
 800d656:	380a      	subs	r0, #10
 800d658:	2817      	cmp	r0, #23
 800d65a:	d9e9      	bls.n	800d630 <iso_year_adjust+0x5c>
 800d65c:	2000      	movs	r0, #0
 800d65e:	4770      	bx	lr
 800d660:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800d664:	4298      	cmp	r0, r3
 800d666:	dc06      	bgt.n	800d676 <iso_year_adjust+0xa2>
 800d668:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800d66c:	4298      	cmp	r0, r3
 800d66e:	bfd4      	ite	le
 800d670:	2000      	movle	r0, #0
 800d672:	2001      	movgt	r0, #1
 800d674:	4770      	bx	lr
 800d676:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800d67a:	3802      	subs	r0, #2
 800d67c:	2815      	cmp	r0, #21
 800d67e:	d8ed      	bhi.n	800d65c <iso_year_adjust+0x88>
 800d680:	2301      	movs	r3, #1
 800d682:	4083      	lsls	r3, r0
 800d684:	4803      	ldr	r0, [pc, #12]	; (800d694 <iso_year_adjust+0xc0>)
 800d686:	4018      	ands	r0, r3
 800d688:	3800      	subs	r0, #0
 800d68a:	bf18      	it	ne
 800d68c:	2001      	movne	r0, #1
 800d68e:	4770      	bx	lr
 800d690:	2001      	movs	r0, #1
 800d692:	4770      	bx	lr
 800d694:	002a001f 	.word	0x002a001f

0800d698 <__strftime.isra.0>:
 800d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	b08f      	sub	sp, #60	; 0x3c
 800d69e:	461e      	mov	r6, r3
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	4607      	mov	r7, r0
 800d6a4:	460d      	mov	r5, r1
 800d6a6:	9302      	str	r3, [sp, #8]
 800d6a8:	461c      	mov	r4, r3
 800d6aa:	7813      	ldrb	r3, [r2, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f000 84ba 	beq.w	800e026 <__strftime.isra.0+0x98e>
 800d6b2:	2b25      	cmp	r3, #37	; 0x25
 800d6b4:	d11f      	bne.n	800d6f6 <__strftime.isra.0+0x5e>
 800d6b6:	f892 b001 	ldrb.w	fp, [r2, #1]
 800d6ba:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800d6be:	d024      	beq.n	800d70a <__strftime.isra.0+0x72>
 800d6c0:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800d6c4:	d021      	beq.n	800d70a <__strftime.isra.0+0x72>
 800d6c6:	f102 0801 	add.w	r8, r2, #1
 800d6ca:	f04f 0b00 	mov.w	fp, #0
 800d6ce:	f898 2000 	ldrb.w	r2, [r8]
 800d6d2:	3a31      	subs	r2, #49	; 0x31
 800d6d4:	2a08      	cmp	r2, #8
 800d6d6:	d81b      	bhi.n	800d710 <__strftime.isra.0+0x78>
 800d6d8:	4640      	mov	r0, r8
 800d6da:	220a      	movs	r2, #10
 800d6dc:	a906      	add	r1, sp, #24
 800d6de:	f000 fd51 	bl	800e184 <strtoul>
 800d6e2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d6e6:	4681      	mov	r9, r0
 800d6e8:	f898 2000 	ldrb.w	r2, [r8]
 800d6ec:	2a45      	cmp	r2, #69	; 0x45
 800d6ee:	d112      	bne.n	800d716 <__strftime.isra.0+0x7e>
 800d6f0:	f108 0801 	add.w	r8, r8, #1
 800d6f4:	e011      	b.n	800d71a <__strftime.isra.0+0x82>
 800d6f6:	1e69      	subs	r1, r5, #1
 800d6f8:	42a1      	cmp	r1, r4
 800d6fa:	d802      	bhi.n	800d702 <__strftime.isra.0+0x6a>
 800d6fc:	2400      	movs	r4, #0
 800d6fe:	f000 bc95 	b.w	800e02c <__strftime.isra.0+0x994>
 800d702:	553b      	strb	r3, [r7, r4]
 800d704:	3201      	adds	r2, #1
 800d706:	3401      	adds	r4, #1
 800d708:	e7cf      	b.n	800d6aa <__strftime.isra.0+0x12>
 800d70a:	f102 0802 	add.w	r8, r2, #2
 800d70e:	e7de      	b.n	800d6ce <__strftime.isra.0+0x36>
 800d710:	f04f 0900 	mov.w	r9, #0
 800d714:	e7e8      	b.n	800d6e8 <__strftime.isra.0+0x50>
 800d716:	2a4f      	cmp	r2, #79	; 0x4f
 800d718:	d0ea      	beq.n	800d6f0 <__strftime.isra.0+0x58>
 800d71a:	f898 0000 	ldrb.w	r0, [r8]
 800d71e:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800d722:	2a55      	cmp	r2, #85	; 0x55
 800d724:	d8ea      	bhi.n	800d6fc <__strftime.isra.0+0x64>
 800d726:	a301      	add	r3, pc, #4	; (adr r3, 800d72c <__strftime.isra.0+0x94>)
 800d728:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800d72c:	0800e01b 	.word	0x0800e01b
 800d730:	0800d6fd 	.word	0x0800d6fd
 800d734:	0800d6fd 	.word	0x0800d6fd
 800d738:	0800d6fd 	.word	0x0800d6fd
 800d73c:	0800d6fd 	.word	0x0800d6fd
 800d740:	0800d6fd 	.word	0x0800d6fd
 800d744:	0800d6fd 	.word	0x0800d6fd
 800d748:	0800d6fd 	.word	0x0800d6fd
 800d74c:	0800d6fd 	.word	0x0800d6fd
 800d750:	0800d6fd 	.word	0x0800d6fd
 800d754:	0800d6fd 	.word	0x0800d6fd
 800d758:	0800d6fd 	.word	0x0800d6fd
 800d75c:	0800d6fd 	.word	0x0800d6fd
 800d760:	0800d6fd 	.word	0x0800d6fd
 800d764:	0800d6fd 	.word	0x0800d6fd
 800d768:	0800d6fd 	.word	0x0800d6fd
 800d76c:	0800d6fd 	.word	0x0800d6fd
 800d770:	0800d6fd 	.word	0x0800d6fd
 800d774:	0800d6fd 	.word	0x0800d6fd
 800d778:	0800d6fd 	.word	0x0800d6fd
 800d77c:	0800d6fd 	.word	0x0800d6fd
 800d780:	0800d6fd 	.word	0x0800d6fd
 800d784:	0800d6fd 	.word	0x0800d6fd
 800d788:	0800d6fd 	.word	0x0800d6fd
 800d78c:	0800d6fd 	.word	0x0800d6fd
 800d790:	0800d6fd 	.word	0x0800d6fd
 800d794:	0800d6fd 	.word	0x0800d6fd
 800d798:	0800d6fd 	.word	0x0800d6fd
 800d79c:	0800d8c1 	.word	0x0800d8c1
 800d7a0:	0800d919 	.word	0x0800d919
 800d7a4:	0800d987 	.word	0x0800d987
 800d7a8:	0800da25 	.word	0x0800da25
 800d7ac:	0800d6fd 	.word	0x0800d6fd
 800d7b0:	0800da71 	.word	0x0800da71
 800d7b4:	0800db5d 	.word	0x0800db5d
 800d7b8:	0800dc37 	.word	0x0800dc37
 800d7bc:	0800dc45 	.word	0x0800dc45
 800d7c0:	0800d6fd 	.word	0x0800d6fd
 800d7c4:	0800d6fd 	.word	0x0800d6fd
 800d7c8:	0800d6fd 	.word	0x0800d6fd
 800d7cc:	0800dc75 	.word	0x0800dc75
 800d7d0:	0800d6fd 	.word	0x0800d6fd
 800d7d4:	0800d6fd 	.word	0x0800d6fd
 800d7d8:	0800dc89 	.word	0x0800dc89
 800d7dc:	0800d6fd 	.word	0x0800d6fd
 800d7e0:	0800dcdb 	.word	0x0800dcdb
 800d7e4:	0800ddef 	.word	0x0800ddef
 800d7e8:	0800ddff 	.word	0x0800ddff
 800d7ec:	0800de27 	.word	0x0800de27
 800d7f0:	0800de61 	.word	0x0800de61
 800d7f4:	0800ded5 	.word	0x0800ded5
 800d7f8:	0800d97f 	.word	0x0800d97f
 800d7fc:	0800df01 	.word	0x0800df01
 800d800:	0800dfc9 	.word	0x0800dfc9
 800d804:	0800d6fd 	.word	0x0800d6fd
 800d808:	0800d6fd 	.word	0x0800d6fd
 800d80c:	0800d6fd 	.word	0x0800d6fd
 800d810:	0800d6fd 	.word	0x0800d6fd
 800d814:	0800d6fd 	.word	0x0800d6fd
 800d818:	0800d6fd 	.word	0x0800d6fd
 800d81c:	0800d885 	.word	0x0800d885
 800d820:	0800d8ef 	.word	0x0800d8ef
 800d824:	0800d945 	.word	0x0800d945
 800d828:	0800da01 	.word	0x0800da01
 800d82c:	0800da01 	.word	0x0800da01
 800d830:	0800d6fd 	.word	0x0800d6fd
 800d834:	0800dac3 	.word	0x0800dac3
 800d838:	0800d8ef 	.word	0x0800d8ef
 800d83c:	0800d6fd 	.word	0x0800d6fd
 800d840:	0800dc67 	.word	0x0800dc67
 800d844:	0800dc37 	.word	0x0800dc37
 800d848:	0800dc45 	.word	0x0800dc45
 800d84c:	0800dc6f 	.word	0x0800dc6f
 800d850:	0800dc79 	.word	0x0800dc79
 800d854:	0800d6fd 	.word	0x0800d6fd
 800d858:	0800dc89 	.word	0x0800dc89
 800d85c:	0800d6fd 	.word	0x0800d6fd
 800d860:	0800d96f 	.word	0x0800d96f
 800d864:	0800dced 	.word	0x0800dced
 800d868:	0800ddf3 	.word	0x0800ddf3
 800d86c:	0800de0d 	.word	0x0800de0d
 800d870:	0800d6fd 	.word	0x0800d6fd
 800d874:	0800dec7 	.word	0x0800dec7
 800d878:	0800d977 	.word	0x0800d977
 800d87c:	0800dee5 	.word	0x0800dee5
 800d880:	0800df53 	.word	0x0800df53
 800d884:	69b3      	ldr	r3, [r6, #24]
 800d886:	4aa9      	ldr	r2, [pc, #676]	; (800db2c <__strftime.isra.0+0x494>)
 800d888:	3318      	adds	r3, #24
 800d88a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800d88e:	4648      	mov	r0, r9
 800d890:	f7f2 fcae 	bl	80001f0 <strlen>
 800d894:	f109 39ff 	add.w	r9, r9, #4294967295
 800d898:	4420      	add	r0, r4
 800d89a:	1e6b      	subs	r3, r5, #1
 800d89c:	42a0      	cmp	r0, r4
 800d89e:	d107      	bne.n	800d8b0 <__strftime.isra.0+0x218>
 800d8a0:	f898 3000 	ldrb.w	r3, [r8]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f000 83be 	beq.w	800e026 <__strftime.isra.0+0x98e>
 800d8aa:	f108 0201 	add.w	r2, r8, #1
 800d8ae:	e6fc      	b.n	800d6aa <__strftime.isra.0+0x12>
 800d8b0:	42a3      	cmp	r3, r4
 800d8b2:	f67f af23 	bls.w	800d6fc <__strftime.isra.0+0x64>
 800d8b6:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d8ba:	553a      	strb	r2, [r7, r4]
 800d8bc:	3401      	adds	r4, #1
 800d8be:	e7ed      	b.n	800d89c <__strftime.isra.0+0x204>
 800d8c0:	69b2      	ldr	r2, [r6, #24]
 800d8c2:	4b9a      	ldr	r3, [pc, #616]	; (800db2c <__strftime.isra.0+0x494>)
 800d8c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d8c8:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800d8cc:	4648      	mov	r0, r9
 800d8ce:	f7f2 fc8f 	bl	80001f0 <strlen>
 800d8d2:	f109 39ff 	add.w	r9, r9, #4294967295
 800d8d6:	4420      	add	r0, r4
 800d8d8:	1e6b      	subs	r3, r5, #1
 800d8da:	42a0      	cmp	r0, r4
 800d8dc:	d0e0      	beq.n	800d8a0 <__strftime.isra.0+0x208>
 800d8de:	42a3      	cmp	r3, r4
 800d8e0:	f67f af0c 	bls.w	800d6fc <__strftime.isra.0+0x64>
 800d8e4:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d8e8:	553a      	strb	r2, [r7, r4]
 800d8ea:	3401      	adds	r4, #1
 800d8ec:	e7f5      	b.n	800d8da <__strftime.isra.0+0x242>
 800d8ee:	4b8f      	ldr	r3, [pc, #572]	; (800db2c <__strftime.isra.0+0x494>)
 800d8f0:	6932      	ldr	r2, [r6, #16]
 800d8f2:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800d8f6:	4648      	mov	r0, r9
 800d8f8:	f7f2 fc7a 	bl	80001f0 <strlen>
 800d8fc:	f109 39ff 	add.w	r9, r9, #4294967295
 800d900:	4420      	add	r0, r4
 800d902:	1e6b      	subs	r3, r5, #1
 800d904:	42a0      	cmp	r0, r4
 800d906:	d0cb      	beq.n	800d8a0 <__strftime.isra.0+0x208>
 800d908:	42a3      	cmp	r3, r4
 800d90a:	f67f aef7 	bls.w	800d6fc <__strftime.isra.0+0x64>
 800d90e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d912:	553a      	strb	r2, [r7, r4]
 800d914:	3401      	adds	r4, #1
 800d916:	e7f5      	b.n	800d904 <__strftime.isra.0+0x26c>
 800d918:	6933      	ldr	r3, [r6, #16]
 800d91a:	4a84      	ldr	r2, [pc, #528]	; (800db2c <__strftime.isra.0+0x494>)
 800d91c:	330c      	adds	r3, #12
 800d91e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800d922:	4648      	mov	r0, r9
 800d924:	f7f2 fc64 	bl	80001f0 <strlen>
 800d928:	f109 39ff 	add.w	r9, r9, #4294967295
 800d92c:	4420      	add	r0, r4
 800d92e:	1e6b      	subs	r3, r5, #1
 800d930:	42a0      	cmp	r0, r4
 800d932:	d0b5      	beq.n	800d8a0 <__strftime.isra.0+0x208>
 800d934:	42a3      	cmp	r3, r4
 800d936:	f67f aee1 	bls.w	800d6fc <__strftime.isra.0+0x64>
 800d93a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d93e:	553a      	strb	r2, [r7, r4]
 800d940:	3401      	adds	r4, #1
 800d942:	e7f5      	b.n	800d930 <__strftime.isra.0+0x298>
 800d944:	4b79      	ldr	r3, [pc, #484]	; (800db2c <__strftime.isra.0+0x494>)
 800d946:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800d94a:	4648      	mov	r0, r9
 800d94c:	f7f2 fc50 	bl	80001f0 <strlen>
 800d950:	f899 3000 	ldrb.w	r3, [r9]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d0a3      	beq.n	800d8a0 <__strftime.isra.0+0x208>
 800d958:	4633      	mov	r3, r6
 800d95a:	464a      	mov	r2, r9
 800d95c:	1b29      	subs	r1, r5, r4
 800d95e:	1938      	adds	r0, r7, r4
 800d960:	f7ff fe9a 	bl	800d698 <__strftime.isra.0>
 800d964:	2800      	cmp	r0, #0
 800d966:	f77f aec9 	ble.w	800d6fc <__strftime.isra.0+0x64>
 800d96a:	4404      	add	r4, r0
 800d96c:	e798      	b.n	800d8a0 <__strftime.isra.0+0x208>
 800d96e:	4b6f      	ldr	r3, [pc, #444]	; (800db2c <__strftime.isra.0+0x494>)
 800d970:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 800d974:	e7e9      	b.n	800d94a <__strftime.isra.0+0x2b2>
 800d976:	4b6d      	ldr	r3, [pc, #436]	; (800db2c <__strftime.isra.0+0x494>)
 800d978:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800d97c:	e7e5      	b.n	800d94a <__strftime.isra.0+0x2b2>
 800d97e:	4b6b      	ldr	r3, [pc, #428]	; (800db2c <__strftime.isra.0+0x494>)
 800d980:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800d984:	e7e1      	b.n	800d94a <__strftime.isra.0+0x2b2>
 800d986:	496a      	ldr	r1, [pc, #424]	; (800db30 <__strftime.isra.0+0x498>)
 800d988:	f8d6 a014 	ldr.w	sl, [r6, #20]
 800d98c:	458a      	cmp	sl, r1
 800d98e:	bfac      	ite	ge
 800d990:	2100      	movge	r1, #0
 800d992:	2101      	movlt	r1, #1
 800d994:	f1ba 0f00 	cmp.w	sl, #0
 800d998:	db11      	blt.n	800d9be <__strftime.isra.0+0x326>
 800d99a:	2064      	movs	r0, #100	; 0x64
 800d99c:	fb9a f0f0 	sdiv	r0, sl, r0
 800d9a0:	3013      	adds	r0, #19
 800d9a2:	f1bb 0f00 	cmp.w	fp, #0
 800d9a6:	d014      	beq.n	800d9d2 <__strftime.isra.0+0x33a>
 800d9a8:	2863      	cmp	r0, #99	; 0x63
 800d9aa:	dd27      	ble.n	800d9fc <__strftime.isra.0+0x364>
 800d9ac:	4b61      	ldr	r3, [pc, #388]	; (800db34 <__strftime.isra.0+0x49c>)
 800d9ae:	4a62      	ldr	r2, [pc, #392]	; (800db38 <__strftime.isra.0+0x4a0>)
 800d9b0:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800d9b4:	bf18      	it	ne
 800d9b6:	461a      	movne	r2, r3
 800d9b8:	f8df c198 	ldr.w	ip, [pc, #408]	; 800db54 <__strftime.isra.0+0x4bc>
 800d9bc:	e00c      	b.n	800d9d8 <__strftime.isra.0+0x340>
 800d9be:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800d9c2:	9103      	str	r1, [sp, #12]
 800d9c4:	f000 fefd 	bl	800e7c2 <abs>
 800d9c8:	2264      	movs	r2, #100	; 0x64
 800d9ca:	9903      	ldr	r1, [sp, #12]
 800d9cc:	fb90 f0f2 	sdiv	r0, r0, r2
 800d9d0:	e7e7      	b.n	800d9a2 <__strftime.isra.0+0x30a>
 800d9d2:	4a58      	ldr	r2, [pc, #352]	; (800db34 <__strftime.isra.0+0x49c>)
 800d9d4:	f8df c180 	ldr.w	ip, [pc, #384]	; 800db58 <__strftime.isra.0+0x4c0>
 800d9d8:	4b58      	ldr	r3, [pc, #352]	; (800db3c <__strftime.isra.0+0x4a4>)
 800d9da:	9001      	str	r0, [sp, #4]
 800d9dc:	f1b9 0f02 	cmp.w	r9, #2
 800d9e0:	bf2c      	ite	cs
 800d9e2:	ebc1 0109 	rsbcs	r1, r1, r9
 800d9e6:	f1c1 0102 	rsbcc	r1, r1, #2
 800d9ea:	9100      	str	r1, [sp, #0]
 800d9ec:	4950      	ldr	r1, [pc, #320]	; (800db30 <__strftime.isra.0+0x498>)
 800d9ee:	458a      	cmp	sl, r1
 800d9f0:	bfa8      	it	ge
 800d9f2:	4613      	movge	r3, r2
 800d9f4:	4662      	mov	r2, ip
 800d9f6:	1b29      	subs	r1, r5, r4
 800d9f8:	1938      	adds	r0, r7, r4
 800d9fa:	e028      	b.n	800da4e <__strftime.isra.0+0x3b6>
 800d9fc:	4a4d      	ldr	r2, [pc, #308]	; (800db34 <__strftime.isra.0+0x49c>)
 800d9fe:	e7db      	b.n	800d9b8 <__strftime.isra.0+0x320>
 800da00:	494f      	ldr	r1, [pc, #316]	; (800db40 <__strftime.isra.0+0x4a8>)
 800da02:	4a50      	ldr	r2, [pc, #320]	; (800db44 <__strftime.isra.0+0x4ac>)
 800da04:	68f3      	ldr	r3, [r6, #12]
 800da06:	2864      	cmp	r0, #100	; 0x64
 800da08:	bf08      	it	eq
 800da0a:	460a      	moveq	r2, r1
 800da0c:	1b29      	subs	r1, r5, r4
 800da0e:	1938      	adds	r0, r7, r4
 800da10:	f003 f8fe 	bl	8010c10 <sniprintf>
 800da14:	2800      	cmp	r0, #0
 800da16:	f6ff ae71 	blt.w	800d6fc <__strftime.isra.0+0x64>
 800da1a:	4404      	add	r4, r0
 800da1c:	42a5      	cmp	r5, r4
 800da1e:	f63f af3f 	bhi.w	800d8a0 <__strftime.isra.0+0x208>
 800da22:	e66b      	b.n	800d6fc <__strftime.isra.0+0x64>
 800da24:	6970      	ldr	r0, [r6, #20]
 800da26:	6933      	ldr	r3, [r6, #16]
 800da28:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800da2c:	2800      	cmp	r0, #0
 800da2e:	eb07 0904 	add.w	r9, r7, r4
 800da32:	eba5 0104 	sub.w	r1, r5, r4
 800da36:	f103 0301 	add.w	r3, r3, #1
 800da3a:	db0b      	blt.n	800da54 <__strftime.isra.0+0x3bc>
 800da3c:	2264      	movs	r2, #100	; 0x64
 800da3e:	fb90 fcf2 	sdiv	ip, r0, r2
 800da42:	fb02 001c 	mls	r0, r2, ip, r0
 800da46:	4a40      	ldr	r2, [pc, #256]	; (800db48 <__strftime.isra.0+0x4b0>)
 800da48:	e9cd a000 	strd	sl, r0, [sp]
 800da4c:	4648      	mov	r0, r9
 800da4e:	f003 f8df 	bl	8010c10 <sniprintf>
 800da52:	e7df      	b.n	800da14 <__strftime.isra.0+0x37c>
 800da54:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800da58:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800da5c:	f000 feb1 	bl	800e7c2 <abs>
 800da60:	2264      	movs	r2, #100	; 0x64
 800da62:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 800da66:	fb90 fcf2 	sdiv	ip, r0, r2
 800da6a:	fb0c 0012 	mls	r0, ip, r2, r0
 800da6e:	e7ea      	b.n	800da46 <__strftime.isra.0+0x3ae>
 800da70:	2225      	movs	r2, #37	; 0x25
 800da72:	f88d 2018 	strb.w	r2, [sp, #24]
 800da76:	f1bb 0f00 	cmp.w	fp, #0
 800da7a:	d011      	beq.n	800daa0 <__strftime.isra.0+0x408>
 800da7c:	f1b9 0f06 	cmp.w	r9, #6
 800da80:	bf38      	it	cc
 800da82:	f04f 0906 	movcc.w	r9, #6
 800da86:	f1b9 0306 	subs.w	r3, r9, #6
 800da8a:	f88d b019 	strb.w	fp, [sp, #25]
 800da8e:	d10c      	bne.n	800daaa <__strftime.isra.0+0x412>
 800da90:	f10d 001a 	add.w	r0, sp, #26
 800da94:	492d      	ldr	r1, [pc, #180]	; (800db4c <__strftime.isra.0+0x4b4>)
 800da96:	f003 f8ef 	bl	8010c78 <strcpy>
 800da9a:	4633      	mov	r3, r6
 800da9c:	aa06      	add	r2, sp, #24
 800da9e:	e75d      	b.n	800d95c <__strftime.isra.0+0x2c4>
 800daa0:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 800daa4:	f04f 090a 	mov.w	r9, #10
 800daa8:	e7ed      	b.n	800da86 <__strftime.isra.0+0x3ee>
 800daaa:	4a29      	ldr	r2, [pc, #164]	; (800db50 <__strftime.isra.0+0x4b8>)
 800daac:	211e      	movs	r1, #30
 800daae:	f10d 001a 	add.w	r0, sp, #26
 800dab2:	f003 f8ad 	bl	8010c10 <sniprintf>
 800dab6:	2800      	cmp	r0, #0
 800dab8:	ddea      	ble.n	800da90 <__strftime.isra.0+0x3f8>
 800daba:	f10d 031a 	add.w	r3, sp, #26
 800dabe:	4418      	add	r0, r3
 800dac0:	e7e8      	b.n	800da94 <__strftime.isra.0+0x3fc>
 800dac2:	4630      	mov	r0, r6
 800dac4:	f7ff fd86 	bl	800d5d4 <iso_year_adjust>
 800dac8:	4681      	mov	r9, r0
 800daca:	6970      	ldr	r0, [r6, #20]
 800dacc:	2800      	cmp	r0, #0
 800dace:	db11      	blt.n	800daf4 <__strftime.isra.0+0x45c>
 800dad0:	2364      	movs	r3, #100	; 0x64
 800dad2:	fb90 f2f3 	sdiv	r2, r0, r3
 800dad6:	fb03 0012 	mls	r0, r3, r2, r0
 800dada:	2264      	movs	r2, #100	; 0x64
 800dadc:	4481      	add	r9, r0
 800dade:	fb99 f3f2 	sdiv	r3, r9, r2
 800dae2:	fb02 9913 	mls	r9, r2, r3, r9
 800dae6:	4491      	add	r9, r2
 800dae8:	fbb9 f3f2 	udiv	r3, r9, r2
 800daec:	fb02 9313 	mls	r3, r2, r3, r9
 800daf0:	4a13      	ldr	r2, [pc, #76]	; (800db40 <__strftime.isra.0+0x4a8>)
 800daf2:	e78b      	b.n	800da0c <__strftime.isra.0+0x374>
 800daf4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800daf8:	f000 fe63 	bl	800e7c2 <abs>
 800dafc:	2364      	movs	r3, #100	; 0x64
 800dafe:	f1b9 0f00 	cmp.w	r9, #0
 800db02:	fb90 f2f3 	sdiv	r2, r0, r3
 800db06:	fb02 0013 	mls	r0, r2, r3, r0
 800db0a:	da07      	bge.n	800db1c <__strftime.isra.0+0x484>
 800db0c:	6972      	ldr	r2, [r6, #20]
 800db0e:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800db12:	429a      	cmp	r2, r3
 800db14:	bfb8      	it	lt
 800db16:	f04f 0901 	movlt.w	r9, #1
 800db1a:	e7de      	b.n	800dada <__strftime.isra.0+0x442>
 800db1c:	d0dd      	beq.n	800dada <__strftime.isra.0+0x442>
 800db1e:	6972      	ldr	r2, [r6, #20]
 800db20:	4b03      	ldr	r3, [pc, #12]	; (800db30 <__strftime.isra.0+0x498>)
 800db22:	429a      	cmp	r2, r3
 800db24:	bfb8      	it	lt
 800db26:	f04f 39ff 	movlt.w	r9, #4294967295
 800db2a:	e7d6      	b.n	800dada <__strftime.isra.0+0x442>
 800db2c:	080393a0 	.word	0x080393a0
 800db30:	fffff894 	.word	0xfffff894
 800db34:	080390fe 	.word	0x080390fe
 800db38:	0803922a 	.word	0x0803922a
 800db3c:	0803986d 	.word	0x0803986d
 800db40:	0803923a 	.word	0x0803923a
 800db44:	0803922c 	.word	0x0803922c
 800db48:	08039230 	.word	0x08039230
 800db4c:	08039243 	.word	0x08039243
 800db50:	0803923f 	.word	0x0803923f
 800db54:	08039222 	.word	0x08039222
 800db58:	0803921b 	.word	0x0803921b
 800db5c:	6971      	ldr	r1, [r6, #20]
 800db5e:	4ab6      	ldr	r2, [pc, #728]	; (800de38 <__strftime.isra.0+0x7a0>)
 800db60:	4291      	cmp	r1, r2
 800db62:	bfac      	ite	ge
 800db64:	2300      	movge	r3, #0
 800db66:	2301      	movlt	r3, #1
 800db68:	4630      	mov	r0, r6
 800db6a:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800db6e:	f7ff fd31 	bl	800d5d4 <iso_year_adjust>
 800db72:	9904      	ldr	r1, [sp, #16]
 800db74:	2900      	cmp	r1, #0
 800db76:	4682      	mov	sl, r0
 800db78:	db2c      	blt.n	800dbd4 <__strftime.isra.0+0x53c>
 800db7a:	2264      	movs	r2, #100	; 0x64
 800db7c:	fb91 f2f2 	sdiv	r2, r1, r2
 800db80:	3213      	adds	r2, #19
 800db82:	6970      	ldr	r0, [r6, #20]
 800db84:	2800      	cmp	r0, #0
 800db86:	db30      	blt.n	800dbea <__strftime.isra.0+0x552>
 800db88:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800db8c:	fb90 fefc 	sdiv	lr, r0, ip
 800db90:	fb0c 001e 	mls	r0, ip, lr, r0
 800db94:	f1ba 0f00 	cmp.w	sl, #0
 800db98:	da36      	bge.n	800dc08 <__strftime.isra.0+0x570>
 800db9a:	6971      	ldr	r1, [r6, #20]
 800db9c:	4ba7      	ldr	r3, [pc, #668]	; (800de3c <__strftime.isra.0+0x7a4>)
 800db9e:	4299      	cmp	r1, r3
 800dba0:	db3d      	blt.n	800dc1e <__strftime.isra.0+0x586>
 800dba2:	4482      	add	sl, r0
 800dba4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dba8:	d13e      	bne.n	800dc28 <__strftime.isra.0+0x590>
 800dbaa:	3a01      	subs	r2, #1
 800dbac:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800dbb0:	9b03      	ldr	r3, [sp, #12]
 800dbb2:	2064      	movs	r0, #100	; 0x64
 800dbb4:	fb00 aa02 	mla	sl, r0, r2, sl
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	f000 81ad 	beq.w	800df18 <__strftime.isra.0+0x880>
 800dbbe:	222d      	movs	r2, #45	; 0x2d
 800dbc0:	f88d 2018 	strb.w	r2, [sp, #24]
 800dbc4:	f1b9 0f00 	cmp.w	r9, #0
 800dbc8:	d001      	beq.n	800dbce <__strftime.isra.0+0x536>
 800dbca:	f109 39ff 	add.w	r9, r9, #4294967295
 800dbce:	f10d 0219 	add.w	r2, sp, #25
 800dbd2:	e1ac      	b.n	800df2e <__strftime.isra.0+0x896>
 800dbd4:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800dbd8:	9104      	str	r1, [sp, #16]
 800dbda:	f000 fdf2 	bl	800e7c2 <abs>
 800dbde:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800dbe2:	9904      	ldr	r1, [sp, #16]
 800dbe4:	fb90 f2fc 	sdiv	r2, r0, ip
 800dbe8:	e7cb      	b.n	800db82 <__strftime.isra.0+0x4ea>
 800dbea:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800dbee:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800dbf2:	f000 fde6 	bl	800e7c2 <abs>
 800dbf6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800dbfa:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800dbfe:	fb90 fefc 	sdiv	lr, r0, ip
 800dc02:	fb0e 001c 	mls	r0, lr, ip, r0
 800dc06:	e7c5      	b.n	800db94 <__strftime.isra.0+0x4fc>
 800dc08:	d0cb      	beq.n	800dba2 <__strftime.isra.0+0x50a>
 800dc0a:	4b8b      	ldr	r3, [pc, #556]	; (800de38 <__strftime.isra.0+0x7a0>)
 800dc0c:	4299      	cmp	r1, r3
 800dc0e:	bfb4      	ite	lt
 800dc10:	2301      	movlt	r3, #1
 800dc12:	2300      	movge	r3, #0
 800dc14:	9303      	str	r3, [sp, #12]
 800dc16:	bfb8      	it	lt
 800dc18:	f04f 3aff 	movlt.w	sl, #4294967295
 800dc1c:	e7c1      	b.n	800dba2 <__strftime.isra.0+0x50a>
 800dc1e:	f04f 0a01 	mov.w	sl, #1
 800dc22:	f8cd a00c 	str.w	sl, [sp, #12]
 800dc26:	e7bc      	b.n	800dba2 <__strftime.isra.0+0x50a>
 800dc28:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800dc2c:	bf04      	itt	eq
 800dc2e:	3201      	addeq	r2, #1
 800dc30:	f04f 0a00 	moveq.w	sl, #0
 800dc34:	e7bc      	b.n	800dbb0 <__strftime.isra.0+0x518>
 800dc36:	4982      	ldr	r1, [pc, #520]	; (800de40 <__strftime.isra.0+0x7a8>)
 800dc38:	4a82      	ldr	r2, [pc, #520]	; (800de44 <__strftime.isra.0+0x7ac>)
 800dc3a:	68b3      	ldr	r3, [r6, #8]
 800dc3c:	286b      	cmp	r0, #107	; 0x6b
 800dc3e:	bf08      	it	eq
 800dc40:	460a      	moveq	r2, r1
 800dc42:	e6e3      	b.n	800da0c <__strftime.isra.0+0x374>
 800dc44:	68b3      	ldr	r3, [r6, #8]
 800dc46:	b163      	cbz	r3, 800dc62 <__strftime.isra.0+0x5ca>
 800dc48:	2b0c      	cmp	r3, #12
 800dc4a:	d004      	beq.n	800dc56 <__strftime.isra.0+0x5be>
 800dc4c:	210c      	movs	r1, #12
 800dc4e:	fb93 f2f1 	sdiv	r2, r3, r1
 800dc52:	fb01 3312 	mls	r3, r1, r2, r3
 800dc56:	497b      	ldr	r1, [pc, #492]	; (800de44 <__strftime.isra.0+0x7ac>)
 800dc58:	4a79      	ldr	r2, [pc, #484]	; (800de40 <__strftime.isra.0+0x7a8>)
 800dc5a:	2849      	cmp	r0, #73	; 0x49
 800dc5c:	bf08      	it	eq
 800dc5e:	460a      	moveq	r2, r1
 800dc60:	e6d4      	b.n	800da0c <__strftime.isra.0+0x374>
 800dc62:	230c      	movs	r3, #12
 800dc64:	e7f7      	b.n	800dc56 <__strftime.isra.0+0x5be>
 800dc66:	69f3      	ldr	r3, [r6, #28]
 800dc68:	4a77      	ldr	r2, [pc, #476]	; (800de48 <__strftime.isra.0+0x7b0>)
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	e6ce      	b.n	800da0c <__strftime.isra.0+0x374>
 800dc6e:	6933      	ldr	r3, [r6, #16]
 800dc70:	3301      	adds	r3, #1
 800dc72:	e73d      	b.n	800daf0 <__strftime.isra.0+0x458>
 800dc74:	6873      	ldr	r3, [r6, #4]
 800dc76:	e73b      	b.n	800daf0 <__strftime.isra.0+0x458>
 800dc78:	1e6b      	subs	r3, r5, #1
 800dc7a:	429c      	cmp	r4, r3
 800dc7c:	f4bf ad3e 	bcs.w	800d6fc <__strftime.isra.0+0x64>
 800dc80:	230a      	movs	r3, #10
 800dc82:	553b      	strb	r3, [r7, r4]
 800dc84:	3401      	adds	r4, #1
 800dc86:	e60b      	b.n	800d8a0 <__strftime.isra.0+0x208>
 800dc88:	68b3      	ldr	r3, [r6, #8]
 800dc8a:	2b0b      	cmp	r3, #11
 800dc8c:	4b6f      	ldr	r3, [pc, #444]	; (800de4c <__strftime.isra.0+0x7b4>)
 800dc8e:	bfd4      	ite	le
 800dc90:	2200      	movle	r2, #0
 800dc92:	2201      	movgt	r2, #1
 800dc94:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800dc98:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 800dc9c:	4648      	mov	r0, r9
 800dc9e:	f7f2 faa7 	bl	80001f0 <strlen>
 800dca2:	f109 32ff 	add.w	r2, r9, #4294967295
 800dca6:	4420      	add	r0, r4
 800dca8:	f105 3cff 	add.w	ip, r5, #4294967295
 800dcac:	42a0      	cmp	r0, r4
 800dcae:	f43f adf7 	beq.w	800d8a0 <__strftime.isra.0+0x208>
 800dcb2:	45a4      	cmp	ip, r4
 800dcb4:	f67f ad22 	bls.w	800d6fc <__strftime.isra.0+0x64>
 800dcb8:	f898 1000 	ldrb.w	r1, [r8]
 800dcbc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800dcc0:	2950      	cmp	r1, #80	; 0x50
 800dcc2:	d107      	bne.n	800dcd4 <__strftime.isra.0+0x63c>
 800dcc4:	4962      	ldr	r1, [pc, #392]	; (800de50 <__strftime.isra.0+0x7b8>)
 800dcc6:	5cc9      	ldrb	r1, [r1, r3]
 800dcc8:	f001 0103 	and.w	r1, r1, #3
 800dccc:	2901      	cmp	r1, #1
 800dcce:	bf08      	it	eq
 800dcd0:	3320      	addeq	r3, #32
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	553b      	strb	r3, [r7, r4]
 800dcd6:	3401      	adds	r4, #1
 800dcd8:	e7e8      	b.n	800dcac <__strftime.isra.0+0x614>
 800dcda:	6873      	ldr	r3, [r6, #4]
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	4a5d      	ldr	r2, [pc, #372]	; (800de54 <__strftime.isra.0+0x7bc>)
 800dce0:	68b3      	ldr	r3, [r6, #8]
 800dce2:	1b29      	subs	r1, r5, r4
 800dce4:	1938      	adds	r0, r7, r4
 800dce6:	f002 ff93 	bl	8010c10 <sniprintf>
 800dcea:	e693      	b.n	800da14 <__strftime.isra.0+0x37c>
 800dcec:	6a33      	ldr	r3, [r6, #32]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	db7a      	blt.n	800dde8 <__strftime.isra.0+0x750>
 800dcf2:	f000 fafb 	bl	800e2ec <__tz_lock>
 800dcf6:	9b02      	ldr	r3, [sp, #8]
 800dcf8:	b90b      	cbnz	r3, 800dcfe <__strftime.isra.0+0x666>
 800dcfa:	f000 fb03 	bl	800e304 <_tzset_unlocked>
 800dcfe:	f001 fe01 	bl	800f904 <__gettzinfo>
 800dd02:	6a33      	ldr	r3, [r6, #32]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	bfd4      	ite	le
 800dd08:	2200      	movle	r2, #0
 800dd0a:	2201      	movgt	r2, #1
 800dd0c:	2328      	movs	r3, #40	; 0x28
 800dd0e:	fb02 3303 	mla	r3, r2, r3, r3
 800dd12:	58c3      	ldr	r3, [r0, r3]
 800dd14:	f1c3 0900 	rsb	r9, r3, #0
 800dd18:	f000 faee 	bl	800e2f8 <__tz_unlock>
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	9302      	str	r3, [sp, #8]
 800dd20:	6972      	ldr	r2, [r6, #20]
 800dd22:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800dd26:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800dd2a:	f16c 0c00 	sbc.w	ip, ip, #0
 800dd2e:	f1bc 0f00 	cmp.w	ip, #0
 800dd32:	eba5 0104 	sub.w	r1, r5, r4
 800dd36:	eb07 0004 	add.w	r0, r7, r4
 800dd3a:	da02      	bge.n	800dd42 <__strftime.isra.0+0x6aa>
 800dd3c:	3303      	adds	r3, #3
 800dd3e:	f14c 0c00 	adc.w	ip, ip, #0
 800dd42:	089b      	lsrs	r3, r3, #2
 800dd44:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800dd48:	f102 3aff 	add.w	sl, r2, #4294967295
 800dd4c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800dd50:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800dd54:	fb9a fefe 	sdiv	lr, sl, lr
 800dd58:	ebb3 030e 	subs.w	r3, r3, lr
 800dd5c:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800dd60:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800dd64:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800dd68:	fb9a fefe 	sdiv	lr, sl, lr
 800dd6c:	eb13 030e 	adds.w	r3, r3, lr
 800dd70:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800dd74:	3a46      	subs	r2, #70	; 0x46
 800dd76:	f240 1c6d 	movw	ip, #365	; 0x16d
 800dd7a:	fb0c f202 	mul.w	r2, ip, r2
 800dd7e:	189b      	adds	r3, r3, r2
 800dd80:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800dd84:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800dd88:	f04f 0c18 	mov.w	ip, #24
 800dd8c:	eb13 030e 	adds.w	r3, r3, lr
 800dd90:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800dd94:	fba3 3e0c 	umull	r3, lr, r3, ip
 800dd98:	fb0c e202 	mla	r2, ip, r2, lr
 800dd9c:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800dda0:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800dda4:	eb13 030e 	adds.w	r3, r3, lr
 800dda8:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800ddac:	fba3 320c 	umull	r3, r2, r3, ip
 800ddb0:	fb0c 220e 	mla	r2, ip, lr, r2
 800ddb4:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800ddb8:	eb13 030e 	adds.w	r3, r3, lr
 800ddbc:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800ddc0:	fba3 3e0c 	umull	r3, lr, r3, ip
 800ddc4:	fb0c e202 	mla	r2, ip, r2, lr
 800ddc8:	f8d6 e000 	ldr.w	lr, [r6]
 800ddcc:	eb13 030e 	adds.w	r3, r3, lr
 800ddd0:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800ddd4:	ebb3 0309 	subs.w	r3, r3, r9
 800ddd8:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800dddc:	e9cd 3200 	strd	r3, r2, [sp]
 800dde0:	4a1d      	ldr	r2, [pc, #116]	; (800de58 <__strftime.isra.0+0x7c0>)
 800dde2:	f002 ff15 	bl	8010c10 <sniprintf>
 800dde6:	e615      	b.n	800da14 <__strftime.isra.0+0x37c>
 800dde8:	f04f 0900 	mov.w	r9, #0
 800ddec:	e798      	b.n	800dd20 <__strftime.isra.0+0x688>
 800ddee:	6833      	ldr	r3, [r6, #0]
 800ddf0:	e67e      	b.n	800daf0 <__strftime.isra.0+0x458>
 800ddf2:	1e6b      	subs	r3, r5, #1
 800ddf4:	429c      	cmp	r4, r3
 800ddf6:	f4bf ac81 	bcs.w	800d6fc <__strftime.isra.0+0x64>
 800ddfa:	2309      	movs	r3, #9
 800ddfc:	e741      	b.n	800dc82 <__strftime.isra.0+0x5ea>
 800ddfe:	6833      	ldr	r3, [r6, #0]
 800de00:	9301      	str	r3, [sp, #4]
 800de02:	6873      	ldr	r3, [r6, #4]
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	4a15      	ldr	r2, [pc, #84]	; (800de5c <__strftime.isra.0+0x7c4>)
 800de08:	68b3      	ldr	r3, [r6, #8]
 800de0a:	e5f4      	b.n	800d9f6 <__strftime.isra.0+0x35e>
 800de0c:	1e6b      	subs	r3, r5, #1
 800de0e:	429c      	cmp	r4, r3
 800de10:	f4bf ac74 	bcs.w	800d6fc <__strftime.isra.0+0x64>
 800de14:	69b3      	ldr	r3, [r6, #24]
 800de16:	1c62      	adds	r2, r4, #1
 800de18:	b91b      	cbnz	r3, 800de22 <__strftime.isra.0+0x78a>
 800de1a:	2337      	movs	r3, #55	; 0x37
 800de1c:	553b      	strb	r3, [r7, r4]
 800de1e:	4614      	mov	r4, r2
 800de20:	e53e      	b.n	800d8a0 <__strftime.isra.0+0x208>
 800de22:	3330      	adds	r3, #48	; 0x30
 800de24:	e7fa      	b.n	800de1c <__strftime.isra.0+0x784>
 800de26:	69f3      	ldr	r3, [r6, #28]
 800de28:	69b2      	ldr	r2, [r6, #24]
 800de2a:	3307      	adds	r3, #7
 800de2c:	1a9b      	subs	r3, r3, r2
 800de2e:	2207      	movs	r2, #7
 800de30:	fb93 f3f2 	sdiv	r3, r3, r2
 800de34:	e65c      	b.n	800daf0 <__strftime.isra.0+0x458>
 800de36:	bf00      	nop
 800de38:	fffff894 	.word	0xfffff894
 800de3c:	fffff895 	.word	0xfffff895
 800de40:	0803922c 	.word	0x0803922c
 800de44:	0803923a 	.word	0x0803923a
 800de48:	0803924f 	.word	0x0803924f
 800de4c:	080393a0 	.word	0x080393a0
 800de50:	080394d9 	.word	0x080394d9
 800de54:	0803925e 	.word	0x0803925e
 800de58:	08039254 	.word	0x08039254
 800de5c:	08039259 	.word	0x08039259
 800de60:	4630      	mov	r0, r6
 800de62:	f7ff fbb7 	bl	800d5d4 <iso_year_adjust>
 800de66:	69b2      	ldr	r2, [r6, #24]
 800de68:	b132      	cbz	r2, 800de78 <__strftime.isra.0+0x7e0>
 800de6a:	3a01      	subs	r2, #1
 800de6c:	2800      	cmp	r0, #0
 800de6e:	dc28      	bgt.n	800dec2 <__strftime.isra.0+0x82a>
 800de70:	69f3      	ldr	r3, [r6, #28]
 800de72:	d103      	bne.n	800de7c <__strftime.isra.0+0x7e4>
 800de74:	330a      	adds	r3, #10
 800de76:	e7d9      	b.n	800de2c <__strftime.isra.0+0x794>
 800de78:	2206      	movs	r2, #6
 800de7a:	e7f7      	b.n	800de6c <__strftime.isra.0+0x7d4>
 800de7c:	6971      	ldr	r1, [r6, #20]
 800de7e:	2900      	cmp	r1, #0
 800de80:	eba2 0203 	sub.w	r2, r2, r3
 800de84:	f240 736b 	movw	r3, #1899	; 0x76b
 800de88:	bfa8      	it	ge
 800de8a:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800de8e:	440b      	add	r3, r1
 800de90:	0799      	lsls	r1, r3, #30
 800de92:	d105      	bne.n	800dea0 <__strftime.isra.0+0x808>
 800de94:	2064      	movs	r0, #100	; 0x64
 800de96:	fb93 f1f0 	sdiv	r1, r3, r0
 800de9a:	fb00 3111 	mls	r1, r0, r1, r3
 800de9e:	b971      	cbnz	r1, 800debe <__strftime.isra.0+0x826>
 800dea0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800dea4:	fb93 f0f1 	sdiv	r0, r3, r1
 800dea8:	fb01 3310 	mls	r3, r1, r0, r3
 800deac:	fab3 f383 	clz	r3, r3
 800deb0:	095b      	lsrs	r3, r3, #5
 800deb2:	1ad3      	subs	r3, r2, r3
 800deb4:	2b05      	cmp	r3, #5
 800deb6:	bfb4      	ite	lt
 800deb8:	2335      	movlt	r3, #53	; 0x35
 800deba:	2334      	movge	r3, #52	; 0x34
 800debc:	e618      	b.n	800daf0 <__strftime.isra.0+0x458>
 800debe:	2301      	movs	r3, #1
 800dec0:	e7f7      	b.n	800deb2 <__strftime.isra.0+0x81a>
 800dec2:	2301      	movs	r3, #1
 800dec4:	e614      	b.n	800daf0 <__strftime.isra.0+0x458>
 800dec6:	1e6b      	subs	r3, r5, #1
 800dec8:	429c      	cmp	r4, r3
 800deca:	f4bf ac17 	bcs.w	800d6fc <__strftime.isra.0+0x64>
 800dece:	69b3      	ldr	r3, [r6, #24]
 800ded0:	3330      	adds	r3, #48	; 0x30
 800ded2:	e6d6      	b.n	800dc82 <__strftime.isra.0+0x5ea>
 800ded4:	69b2      	ldr	r2, [r6, #24]
 800ded6:	b11a      	cbz	r2, 800dee0 <__strftime.isra.0+0x848>
 800ded8:	3a01      	subs	r2, #1
 800deda:	69f3      	ldr	r3, [r6, #28]
 800dedc:	3307      	adds	r3, #7
 800dede:	e7a5      	b.n	800de2c <__strftime.isra.0+0x794>
 800dee0:	2206      	movs	r2, #6
 800dee2:	e7fa      	b.n	800deda <__strftime.isra.0+0x842>
 800dee4:	6970      	ldr	r0, [r6, #20]
 800dee6:	2800      	cmp	r0, #0
 800dee8:	db05      	blt.n	800def6 <__strftime.isra.0+0x85e>
 800deea:	2364      	movs	r3, #100	; 0x64
 800deec:	fb90 f2f3 	sdiv	r2, r0, r3
 800def0:	fb02 0313 	mls	r3, r2, r3, r0
 800def4:	e5fc      	b.n	800daf0 <__strftime.isra.0+0x458>
 800def6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800defa:	f000 fc62 	bl	800e7c2 <abs>
 800defe:	e7f4      	b.n	800deea <__strftime.isra.0+0x852>
 800df00:	6972      	ldr	r2, [r6, #20]
 800df02:	494c      	ldr	r1, [pc, #304]	; (800e034 <__strftime.isra.0+0x99c>)
 800df04:	428a      	cmp	r2, r1
 800df06:	da05      	bge.n	800df14 <__strftime.isra.0+0x87c>
 800df08:	202d      	movs	r0, #45	; 0x2d
 800df0a:	f88d 0018 	strb.w	r0, [sp, #24]
 800df0e:	eba1 0a02 	sub.w	sl, r1, r2
 800df12:	e657      	b.n	800dbc4 <__strftime.isra.0+0x52c>
 800df14:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800df18:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800df1c:	d106      	bne.n	800df2c <__strftime.isra.0+0x894>
 800df1e:	f242 720f 	movw	r2, #9999	; 0x270f
 800df22:	4592      	cmp	sl, r2
 800df24:	d902      	bls.n	800df2c <__strftime.isra.0+0x894>
 800df26:	f88d b018 	strb.w	fp, [sp, #24]
 800df2a:	e64b      	b.n	800dbc4 <__strftime.isra.0+0x52c>
 800df2c:	aa06      	add	r2, sp, #24
 800df2e:	2125      	movs	r1, #37	; 0x25
 800df30:	7011      	strb	r1, [r2, #0]
 800df32:	f1bb 0f00 	cmp.w	fp, #0
 800df36:	d108      	bne.n	800df4a <__strftime.isra.0+0x8b2>
 800df38:	1c50      	adds	r0, r2, #1
 800df3a:	493f      	ldr	r1, [pc, #252]	; (800e038 <__strftime.isra.0+0x9a0>)
 800df3c:	f002 fe9c 	bl	8010c78 <strcpy>
 800df40:	f8cd a000 	str.w	sl, [sp]
 800df44:	464b      	mov	r3, r9
 800df46:	aa06      	add	r2, sp, #24
 800df48:	e6cb      	b.n	800dce2 <__strftime.isra.0+0x64a>
 800df4a:	2330      	movs	r3, #48	; 0x30
 800df4c:	1c90      	adds	r0, r2, #2
 800df4e:	7053      	strb	r3, [r2, #1]
 800df50:	e7f3      	b.n	800df3a <__strftime.isra.0+0x8a2>
 800df52:	6a33      	ldr	r3, [r6, #32]
 800df54:	2b00      	cmp	r3, #0
 800df56:	f6ff aca3 	blt.w	800d8a0 <__strftime.isra.0+0x208>
 800df5a:	f000 f9c7 	bl	800e2ec <__tz_lock>
 800df5e:	9b02      	ldr	r3, [sp, #8]
 800df60:	b90b      	cbnz	r3, 800df66 <__strftime.isra.0+0x8ce>
 800df62:	f000 f9cf 	bl	800e304 <_tzset_unlocked>
 800df66:	f001 fccd 	bl	800f904 <__gettzinfo>
 800df6a:	6a33      	ldr	r3, [r6, #32]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	bfd4      	ite	le
 800df70:	2200      	movle	r2, #0
 800df72:	2201      	movgt	r2, #1
 800df74:	2328      	movs	r3, #40	; 0x28
 800df76:	fb02 3303 	mla	r3, r2, r3, r3
 800df7a:	eb07 0a04 	add.w	sl, r7, r4
 800df7e:	58c3      	ldr	r3, [r0, r3]
 800df80:	f1c3 0900 	rsb	r9, r3, #0
 800df84:	f000 f9b8 	bl	800e2f8 <__tz_unlock>
 800df88:	233c      	movs	r3, #60	; 0x3c
 800df8a:	fb99 f0f3 	sdiv	r0, r9, r3
 800df8e:	f001 fcbd 	bl	800f90c <labs>
 800df92:	233c      	movs	r3, #60	; 0x3c
 800df94:	eba5 0b04 	sub.w	fp, r5, r4
 800df98:	fb90 f2f3 	sdiv	r2, r0, r3
 800df9c:	fb02 0013 	mls	r0, r2, r3, r0
 800dfa0:	9000      	str	r0, [sp, #0]
 800dfa2:	4a26      	ldr	r2, [pc, #152]	; (800e03c <__strftime.isra.0+0x9a4>)
 800dfa4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800dfa8:	4659      	mov	r1, fp
 800dfaa:	4650      	mov	r0, sl
 800dfac:	fb99 f3f3 	sdiv	r3, r9, r3
 800dfb0:	f002 fe2e 	bl	8010c10 <sniprintf>
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	f6ff aba1 	blt.w	800d6fc <__strftime.isra.0+0x64>
 800dfba:	4404      	add	r4, r0
 800dfbc:	42a5      	cmp	r5, r4
 800dfbe:	f67f ab9d 	bls.w	800d6fc <__strftime.isra.0+0x64>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	9302      	str	r3, [sp, #8]
 800dfc6:	e46b      	b.n	800d8a0 <__strftime.isra.0+0x208>
 800dfc8:	6a33      	ldr	r3, [r6, #32]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f6ff ac68 	blt.w	800d8a0 <__strftime.isra.0+0x208>
 800dfd0:	f000 f98c 	bl	800e2ec <__tz_lock>
 800dfd4:	9b02      	ldr	r3, [sp, #8]
 800dfd6:	b90b      	cbnz	r3, 800dfdc <__strftime.isra.0+0x944>
 800dfd8:	f000 f994 	bl	800e304 <_tzset_unlocked>
 800dfdc:	6a33      	ldr	r3, [r6, #32]
 800dfde:	4a18      	ldr	r2, [pc, #96]	; (800e040 <__strftime.isra.0+0x9a8>)
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	bfd4      	ite	le
 800dfe4:	2300      	movle	r3, #0
 800dfe6:	2301      	movgt	r3, #1
 800dfe8:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800dfec:	4648      	mov	r0, r9
 800dfee:	f7f2 f8ff 	bl	80001f0 <strlen>
 800dff2:	f109 39ff 	add.w	r9, r9, #4294967295
 800dff6:	4420      	add	r0, r4
 800dff8:	1e6b      	subs	r3, r5, #1
 800dffa:	42a0      	cmp	r0, r4
 800dffc:	d102      	bne.n	800e004 <__strftime.isra.0+0x96c>
 800dffe:	f000 f97b 	bl	800e2f8 <__tz_unlock>
 800e002:	e7de      	b.n	800dfc2 <__strftime.isra.0+0x92a>
 800e004:	42a3      	cmp	r3, r4
 800e006:	d904      	bls.n	800e012 <__strftime.isra.0+0x97a>
 800e008:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800e00c:	553a      	strb	r2, [r7, r4]
 800e00e:	3401      	adds	r4, #1
 800e010:	e7f3      	b.n	800dffa <__strftime.isra.0+0x962>
 800e012:	f000 f971 	bl	800e2f8 <__tz_unlock>
 800e016:	f7ff bb71 	b.w	800d6fc <__strftime.isra.0+0x64>
 800e01a:	1e6b      	subs	r3, r5, #1
 800e01c:	429c      	cmp	r4, r3
 800e01e:	f4bf ab6d 	bcs.w	800d6fc <__strftime.isra.0+0x64>
 800e022:	2325      	movs	r3, #37	; 0x25
 800e024:	e62d      	b.n	800dc82 <__strftime.isra.0+0x5ea>
 800e026:	b10d      	cbz	r5, 800e02c <__strftime.isra.0+0x994>
 800e028:	2300      	movs	r3, #0
 800e02a:	553b      	strb	r3, [r7, r4]
 800e02c:	4620      	mov	r0, r4
 800e02e:	b00f      	add	sp, #60	; 0x3c
 800e030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e034:	fffff894 	.word	0xfffff894
 800e038:	0803924b 	.word	0x0803924b
 800e03c:	08039268 	.word	0x08039268
 800e040:	20000320 	.word	0x20000320

0800e044 <strftime>:
 800e044:	f7ff bb28 	b.w	800d698 <__strftime.isra.0>

0800e048 <strncpy>:
 800e048:	b510      	push	{r4, lr}
 800e04a:	3901      	subs	r1, #1
 800e04c:	4603      	mov	r3, r0
 800e04e:	b132      	cbz	r2, 800e05e <strncpy+0x16>
 800e050:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e054:	f803 4b01 	strb.w	r4, [r3], #1
 800e058:	3a01      	subs	r2, #1
 800e05a:	2c00      	cmp	r4, #0
 800e05c:	d1f7      	bne.n	800e04e <strncpy+0x6>
 800e05e:	441a      	add	r2, r3
 800e060:	2100      	movs	r1, #0
 800e062:	4293      	cmp	r3, r2
 800e064:	d100      	bne.n	800e068 <strncpy+0x20>
 800e066:	bd10      	pop	{r4, pc}
 800e068:	f803 1b01 	strb.w	r1, [r3], #1
 800e06c:	e7f9      	b.n	800e062 <strncpy+0x1a>

0800e06e <strstr>:
 800e06e:	780a      	ldrb	r2, [r1, #0]
 800e070:	b570      	push	{r4, r5, r6, lr}
 800e072:	b96a      	cbnz	r2, 800e090 <strstr+0x22>
 800e074:	bd70      	pop	{r4, r5, r6, pc}
 800e076:	429a      	cmp	r2, r3
 800e078:	d109      	bne.n	800e08e <strstr+0x20>
 800e07a:	460c      	mov	r4, r1
 800e07c:	4605      	mov	r5, r0
 800e07e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e082:	2b00      	cmp	r3, #0
 800e084:	d0f6      	beq.n	800e074 <strstr+0x6>
 800e086:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e08a:	429e      	cmp	r6, r3
 800e08c:	d0f7      	beq.n	800e07e <strstr+0x10>
 800e08e:	3001      	adds	r0, #1
 800e090:	7803      	ldrb	r3, [r0, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d1ef      	bne.n	800e076 <strstr+0x8>
 800e096:	4618      	mov	r0, r3
 800e098:	e7ec      	b.n	800e074 <strstr+0x6>
	...

0800e09c <_strtoul_l.constprop.0>:
 800e09c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0a0:	4f36      	ldr	r7, [pc, #216]	; (800e17c <_strtoul_l.constprop.0+0xe0>)
 800e0a2:	4686      	mov	lr, r0
 800e0a4:	460d      	mov	r5, r1
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0ac:	5de6      	ldrb	r6, [r4, r7]
 800e0ae:	f016 0608 	ands.w	r6, r6, #8
 800e0b2:	d1f8      	bne.n	800e0a6 <_strtoul_l.constprop.0+0xa>
 800e0b4:	2c2d      	cmp	r4, #45	; 0x2d
 800e0b6:	d12f      	bne.n	800e118 <_strtoul_l.constprop.0+0x7c>
 800e0b8:	782c      	ldrb	r4, [r5, #0]
 800e0ba:	2601      	movs	r6, #1
 800e0bc:	1c85      	adds	r5, r0, #2
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d057      	beq.n	800e172 <_strtoul_l.constprop.0+0xd6>
 800e0c2:	2b10      	cmp	r3, #16
 800e0c4:	d109      	bne.n	800e0da <_strtoul_l.constprop.0+0x3e>
 800e0c6:	2c30      	cmp	r4, #48	; 0x30
 800e0c8:	d107      	bne.n	800e0da <_strtoul_l.constprop.0+0x3e>
 800e0ca:	7828      	ldrb	r0, [r5, #0]
 800e0cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e0d0:	2858      	cmp	r0, #88	; 0x58
 800e0d2:	d149      	bne.n	800e168 <_strtoul_l.constprop.0+0xcc>
 800e0d4:	786c      	ldrb	r4, [r5, #1]
 800e0d6:	2310      	movs	r3, #16
 800e0d8:	3502      	adds	r5, #2
 800e0da:	f04f 38ff 	mov.w	r8, #4294967295
 800e0de:	2700      	movs	r7, #0
 800e0e0:	fbb8 f8f3 	udiv	r8, r8, r3
 800e0e4:	fb03 f908 	mul.w	r9, r3, r8
 800e0e8:	ea6f 0909 	mvn.w	r9, r9
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e0f2:	f1bc 0f09 	cmp.w	ip, #9
 800e0f6:	d814      	bhi.n	800e122 <_strtoul_l.constprop.0+0x86>
 800e0f8:	4664      	mov	r4, ip
 800e0fa:	42a3      	cmp	r3, r4
 800e0fc:	dd22      	ble.n	800e144 <_strtoul_l.constprop.0+0xa8>
 800e0fe:	2f00      	cmp	r7, #0
 800e100:	db1d      	blt.n	800e13e <_strtoul_l.constprop.0+0xa2>
 800e102:	4580      	cmp	r8, r0
 800e104:	d31b      	bcc.n	800e13e <_strtoul_l.constprop.0+0xa2>
 800e106:	d101      	bne.n	800e10c <_strtoul_l.constprop.0+0x70>
 800e108:	45a1      	cmp	r9, r4
 800e10a:	db18      	blt.n	800e13e <_strtoul_l.constprop.0+0xa2>
 800e10c:	fb00 4003 	mla	r0, r0, r3, r4
 800e110:	2701      	movs	r7, #1
 800e112:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e116:	e7ea      	b.n	800e0ee <_strtoul_l.constprop.0+0x52>
 800e118:	2c2b      	cmp	r4, #43	; 0x2b
 800e11a:	bf04      	itt	eq
 800e11c:	782c      	ldrbeq	r4, [r5, #0]
 800e11e:	1c85      	addeq	r5, r0, #2
 800e120:	e7cd      	b.n	800e0be <_strtoul_l.constprop.0+0x22>
 800e122:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e126:	f1bc 0f19 	cmp.w	ip, #25
 800e12a:	d801      	bhi.n	800e130 <_strtoul_l.constprop.0+0x94>
 800e12c:	3c37      	subs	r4, #55	; 0x37
 800e12e:	e7e4      	b.n	800e0fa <_strtoul_l.constprop.0+0x5e>
 800e130:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e134:	f1bc 0f19 	cmp.w	ip, #25
 800e138:	d804      	bhi.n	800e144 <_strtoul_l.constprop.0+0xa8>
 800e13a:	3c57      	subs	r4, #87	; 0x57
 800e13c:	e7dd      	b.n	800e0fa <_strtoul_l.constprop.0+0x5e>
 800e13e:	f04f 37ff 	mov.w	r7, #4294967295
 800e142:	e7e6      	b.n	800e112 <_strtoul_l.constprop.0+0x76>
 800e144:	2f00      	cmp	r7, #0
 800e146:	da07      	bge.n	800e158 <_strtoul_l.constprop.0+0xbc>
 800e148:	2322      	movs	r3, #34	; 0x22
 800e14a:	f8ce 3000 	str.w	r3, [lr]
 800e14e:	f04f 30ff 	mov.w	r0, #4294967295
 800e152:	b932      	cbnz	r2, 800e162 <_strtoul_l.constprop.0+0xc6>
 800e154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e158:	b106      	cbz	r6, 800e15c <_strtoul_l.constprop.0+0xc0>
 800e15a:	4240      	negs	r0, r0
 800e15c:	2a00      	cmp	r2, #0
 800e15e:	d0f9      	beq.n	800e154 <_strtoul_l.constprop.0+0xb8>
 800e160:	b107      	cbz	r7, 800e164 <_strtoul_l.constprop.0+0xc8>
 800e162:	1e69      	subs	r1, r5, #1
 800e164:	6011      	str	r1, [r2, #0]
 800e166:	e7f5      	b.n	800e154 <_strtoul_l.constprop.0+0xb8>
 800e168:	2430      	movs	r4, #48	; 0x30
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d1b5      	bne.n	800e0da <_strtoul_l.constprop.0+0x3e>
 800e16e:	2308      	movs	r3, #8
 800e170:	e7b3      	b.n	800e0da <_strtoul_l.constprop.0+0x3e>
 800e172:	2c30      	cmp	r4, #48	; 0x30
 800e174:	d0a9      	beq.n	800e0ca <_strtoul_l.constprop.0+0x2e>
 800e176:	230a      	movs	r3, #10
 800e178:	e7af      	b.n	800e0da <_strtoul_l.constprop.0+0x3e>
 800e17a:	bf00      	nop
 800e17c:	080394d9 	.word	0x080394d9

0800e180 <_strtoul_r>:
 800e180:	f7ff bf8c 	b.w	800e09c <_strtoul_l.constprop.0>

0800e184 <strtoul>:
 800e184:	4613      	mov	r3, r2
 800e186:	460a      	mov	r2, r1
 800e188:	4601      	mov	r1, r0
 800e18a:	4802      	ldr	r0, [pc, #8]	; (800e194 <strtoul+0x10>)
 800e18c:	6800      	ldr	r0, [r0, #0]
 800e18e:	f7ff bf85 	b.w	800e09c <_strtoul_l.constprop.0>
 800e192:	bf00      	nop
 800e194:	200002bc 	.word	0x200002bc

0800e198 <__tzcalc_limits>:
 800e198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19c:	4605      	mov	r5, r0
 800e19e:	f001 fbb1 	bl	800f904 <__gettzinfo>
 800e1a2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800e1a6:	429d      	cmp	r5, r3
 800e1a8:	f340 8099 	ble.w	800e2de <__tzcalc_limits+0x146>
 800e1ac:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800e1b0:	18ac      	adds	r4, r5, r2
 800e1b2:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800e1b6:	f240 126d 	movw	r2, #365	; 0x16d
 800e1ba:	10a4      	asrs	r4, r4, #2
 800e1bc:	fb02 4403 	mla	r4, r2, r3, r4
 800e1c0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800e1c4:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800e1c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1cc:	441c      	add	r4, r3
 800e1ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e1d2:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800e1d6:	fb95 fcf3 	sdiv	ip, r5, r3
 800e1da:	fb03 5c1c 	mls	ip, r3, ip, r5
 800e1de:	186a      	adds	r2, r5, r1
 800e1e0:	fabc f68c 	clz	r6, ip
 800e1e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800e1e8:	f005 0303 	and.w	r3, r5, #3
 800e1ec:	4414      	add	r4, r2
 800e1ee:	2264      	movs	r2, #100	; 0x64
 800e1f0:	6045      	str	r5, [r0, #4]
 800e1f2:	fb95 f7f2 	sdiv	r7, r5, r2
 800e1f6:	0976      	lsrs	r6, r6, #5
 800e1f8:	fb02 5717 	mls	r7, r2, r7, r5
 800e1fc:	4601      	mov	r1, r0
 800e1fe:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	f04f 0a07 	mov.w	sl, #7
 800e208:	7a0d      	ldrb	r5, [r1, #8]
 800e20a:	694b      	ldr	r3, [r1, #20]
 800e20c:	2d4a      	cmp	r5, #74	; 0x4a
 800e20e:	d12d      	bne.n	800e26c <__tzcalc_limits+0xd4>
 800e210:	9a00      	ldr	r2, [sp, #0]
 800e212:	eb04 0e03 	add.w	lr, r4, r3
 800e216:	b902      	cbnz	r2, 800e21a <__tzcalc_limits+0x82>
 800e218:	b917      	cbnz	r7, 800e220 <__tzcalc_limits+0x88>
 800e21a:	f1bc 0f00 	cmp.w	ip, #0
 800e21e:	d123      	bne.n	800e268 <__tzcalc_limits+0xd0>
 800e220:	2b3b      	cmp	r3, #59	; 0x3b
 800e222:	bfd4      	ite	le
 800e224:	2300      	movle	r3, #0
 800e226:	2301      	movgt	r3, #1
 800e228:	4473      	add	r3, lr
 800e22a:	3b01      	subs	r3, #1
 800e22c:	698d      	ldr	r5, [r1, #24]
 800e22e:	4a2d      	ldr	r2, [pc, #180]	; (800e2e4 <__tzcalc_limits+0x14c>)
 800e230:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800e234:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800e238:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e23a:	18ed      	adds	r5, r5, r3
 800e23c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800e240:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800e244:	3128      	adds	r1, #40	; 0x28
 800e246:	458b      	cmp	fp, r1
 800e248:	d1de      	bne.n	800e208 <__tzcalc_limits+0x70>
 800e24a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800e24e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800e252:	428c      	cmp	r4, r1
 800e254:	eb72 0303 	sbcs.w	r3, r2, r3
 800e258:	bfb4      	ite	lt
 800e25a:	2301      	movlt	r3, #1
 800e25c:	2300      	movge	r3, #0
 800e25e:	6003      	str	r3, [r0, #0]
 800e260:	2001      	movs	r0, #1
 800e262:	b003      	add	sp, #12
 800e264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e268:	2300      	movs	r3, #0
 800e26a:	e7dd      	b.n	800e228 <__tzcalc_limits+0x90>
 800e26c:	2d44      	cmp	r5, #68	; 0x44
 800e26e:	d101      	bne.n	800e274 <__tzcalc_limits+0xdc>
 800e270:	4423      	add	r3, r4
 800e272:	e7db      	b.n	800e22c <__tzcalc_limits+0x94>
 800e274:	9a00      	ldr	r2, [sp, #0]
 800e276:	bb62      	cbnz	r2, 800e2d2 <__tzcalc_limits+0x13a>
 800e278:	2f00      	cmp	r7, #0
 800e27a:	bf0c      	ite	eq
 800e27c:	4635      	moveq	r5, r6
 800e27e:	2501      	movne	r5, #1
 800e280:	68ca      	ldr	r2, [r1, #12]
 800e282:	9201      	str	r2, [sp, #4]
 800e284:	4a18      	ldr	r2, [pc, #96]	; (800e2e8 <__tzcalc_limits+0x150>)
 800e286:	f04f 0930 	mov.w	r9, #48	; 0x30
 800e28a:	fb09 2505 	mla	r5, r9, r5, r2
 800e28e:	46a6      	mov	lr, r4
 800e290:	f04f 0800 	mov.w	r8, #0
 800e294:	3d04      	subs	r5, #4
 800e296:	9a01      	ldr	r2, [sp, #4]
 800e298:	f108 0801 	add.w	r8, r8, #1
 800e29c:	4542      	cmp	r2, r8
 800e29e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800e2a2:	dc18      	bgt.n	800e2d6 <__tzcalc_limits+0x13e>
 800e2a4:	f10e 0504 	add.w	r5, lr, #4
 800e2a8:	fb95 f8fa 	sdiv	r8, r5, sl
 800e2ac:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800e2b0:	eba5 0808 	sub.w	r8, r5, r8
 800e2b4:	ebb3 0808 	subs.w	r8, r3, r8
 800e2b8:	690b      	ldr	r3, [r1, #16]
 800e2ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800e2be:	bf48      	it	mi
 800e2c0:	f108 0807 	addmi.w	r8, r8, #7
 800e2c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e2c8:	4443      	add	r3, r8
 800e2ca:	454b      	cmp	r3, r9
 800e2cc:	da05      	bge.n	800e2da <__tzcalc_limits+0x142>
 800e2ce:	4473      	add	r3, lr
 800e2d0:	e7ac      	b.n	800e22c <__tzcalc_limits+0x94>
 800e2d2:	4635      	mov	r5, r6
 800e2d4:	e7d4      	b.n	800e280 <__tzcalc_limits+0xe8>
 800e2d6:	44ce      	add	lr, r9
 800e2d8:	e7dd      	b.n	800e296 <__tzcalc_limits+0xfe>
 800e2da:	3b07      	subs	r3, #7
 800e2dc:	e7f5      	b.n	800e2ca <__tzcalc_limits+0x132>
 800e2de:	2000      	movs	r0, #0
 800e2e0:	e7bf      	b.n	800e262 <__tzcalc_limits+0xca>
 800e2e2:	bf00      	nop
 800e2e4:	00015180 	.word	0x00015180
 800e2e8:	080396b4 	.word	0x080396b4

0800e2ec <__tz_lock>:
 800e2ec:	4801      	ldr	r0, [pc, #4]	; (800e2f4 <__tz_lock+0x8>)
 800e2ee:	f001 bb16 	b.w	800f91e <__retarget_lock_acquire>
 800e2f2:	bf00      	nop
 800e2f4:	20003a54 	.word	0x20003a54

0800e2f8 <__tz_unlock>:
 800e2f8:	4801      	ldr	r0, [pc, #4]	; (800e300 <__tz_unlock+0x8>)
 800e2fa:	f001 bb12 	b.w	800f922 <__retarget_lock_release>
 800e2fe:	bf00      	nop
 800e300:	20003a54 	.word	0x20003a54

0800e304 <_tzset_unlocked>:
 800e304:	4b01      	ldr	r3, [pc, #4]	; (800e30c <_tzset_unlocked+0x8>)
 800e306:	6818      	ldr	r0, [r3, #0]
 800e308:	f000 b802 	b.w	800e310 <_tzset_unlocked_r>
 800e30c:	200002bc 	.word	0x200002bc

0800e310 <_tzset_unlocked_r>:
 800e310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e314:	b08d      	sub	sp, #52	; 0x34
 800e316:	4607      	mov	r7, r0
 800e318:	f001 faf4 	bl	800f904 <__gettzinfo>
 800e31c:	49b0      	ldr	r1, [pc, #704]	; (800e5e0 <_tzset_unlocked_r+0x2d0>)
 800e31e:	4eb1      	ldr	r6, [pc, #708]	; (800e5e4 <_tzset_unlocked_r+0x2d4>)
 800e320:	4605      	mov	r5, r0
 800e322:	4638      	mov	r0, r7
 800e324:	f001 fae6 	bl	800f8f4 <_getenv_r>
 800e328:	4604      	mov	r4, r0
 800e32a:	b970      	cbnz	r0, 800e34a <_tzset_unlocked_r+0x3a>
 800e32c:	4bae      	ldr	r3, [pc, #696]	; (800e5e8 <_tzset_unlocked_r+0x2d8>)
 800e32e:	4aaf      	ldr	r2, [pc, #700]	; (800e5ec <_tzset_unlocked_r+0x2dc>)
 800e330:	6018      	str	r0, [r3, #0]
 800e332:	4baf      	ldr	r3, [pc, #700]	; (800e5f0 <_tzset_unlocked_r+0x2e0>)
 800e334:	6018      	str	r0, [r3, #0]
 800e336:	4baf      	ldr	r3, [pc, #700]	; (800e5f4 <_tzset_unlocked_r+0x2e4>)
 800e338:	6830      	ldr	r0, [r6, #0]
 800e33a:	e9c3 2200 	strd	r2, r2, [r3]
 800e33e:	f7fd ff67 	bl	800c210 <free>
 800e342:	6034      	str	r4, [r6, #0]
 800e344:	b00d      	add	sp, #52	; 0x34
 800e346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e34a:	6831      	ldr	r1, [r6, #0]
 800e34c:	2900      	cmp	r1, #0
 800e34e:	d162      	bne.n	800e416 <_tzset_unlocked_r+0x106>
 800e350:	6830      	ldr	r0, [r6, #0]
 800e352:	f7fd ff5d 	bl	800c210 <free>
 800e356:	4620      	mov	r0, r4
 800e358:	f7f1 ff4a 	bl	80001f0 <strlen>
 800e35c:	1c41      	adds	r1, r0, #1
 800e35e:	4638      	mov	r0, r7
 800e360:	f7fe fa52 	bl	800c808 <_malloc_r>
 800e364:	6030      	str	r0, [r6, #0]
 800e366:	2800      	cmp	r0, #0
 800e368:	d15a      	bne.n	800e420 <_tzset_unlocked_r+0x110>
 800e36a:	7823      	ldrb	r3, [r4, #0]
 800e36c:	4aa2      	ldr	r2, [pc, #648]	; (800e5f8 <_tzset_unlocked_r+0x2e8>)
 800e36e:	49a3      	ldr	r1, [pc, #652]	; (800e5fc <_tzset_unlocked_r+0x2ec>)
 800e370:	2b3a      	cmp	r3, #58	; 0x3a
 800e372:	bf08      	it	eq
 800e374:	3401      	addeq	r4, #1
 800e376:	ae0a      	add	r6, sp, #40	; 0x28
 800e378:	4633      	mov	r3, r6
 800e37a:	4620      	mov	r0, r4
 800e37c:	f7ff f8ac 	bl	800d4d8 <siscanf>
 800e380:	2800      	cmp	r0, #0
 800e382:	dddf      	ble.n	800e344 <_tzset_unlocked_r+0x34>
 800e384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e386:	18e7      	adds	r7, r4, r3
 800e388:	5ce3      	ldrb	r3, [r4, r3]
 800e38a:	2b2d      	cmp	r3, #45	; 0x2d
 800e38c:	d14c      	bne.n	800e428 <_tzset_unlocked_r+0x118>
 800e38e:	3701      	adds	r7, #1
 800e390:	f04f 38ff 	mov.w	r8, #4294967295
 800e394:	f10d 0a20 	add.w	sl, sp, #32
 800e398:	f10d 0b1e 	add.w	fp, sp, #30
 800e39c:	2400      	movs	r4, #0
 800e39e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800e3a2:	4997      	ldr	r1, [pc, #604]	; (800e600 <_tzset_unlocked_r+0x2f0>)
 800e3a4:	9603      	str	r6, [sp, #12]
 800e3a6:	f8cd b000 	str.w	fp, [sp]
 800e3aa:	4633      	mov	r3, r6
 800e3ac:	aa07      	add	r2, sp, #28
 800e3ae:	4638      	mov	r0, r7
 800e3b0:	f8ad 401e 	strh.w	r4, [sp, #30]
 800e3b4:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e3b8:	f7ff f88e 	bl	800d4d8 <siscanf>
 800e3bc:	42a0      	cmp	r0, r4
 800e3be:	ddc1      	ble.n	800e344 <_tzset_unlocked_r+0x34>
 800e3c0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e3c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e3c8:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800e60c <_tzset_unlocked_r+0x2fc>
 800e3cc:	213c      	movs	r1, #60	; 0x3c
 800e3ce:	fb01 3302 	mla	r3, r1, r2, r3
 800e3d2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e3d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e3da:	fb01 3302 	mla	r3, r1, r2, r3
 800e3de:	fb08 f303 	mul.w	r3, r8, r3
 800e3e2:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800e5f4 <_tzset_unlocked_r+0x2e4>
 800e3e6:	62ab      	str	r3, [r5, #40]	; 0x28
 800e3e8:	4b83      	ldr	r3, [pc, #524]	; (800e5f8 <_tzset_unlocked_r+0x2e8>)
 800e3ea:	f8c8 3000 	str.w	r3, [r8]
 800e3ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3f0:	4982      	ldr	r1, [pc, #520]	; (800e5fc <_tzset_unlocked_r+0x2ec>)
 800e3f2:	441f      	add	r7, r3
 800e3f4:	464a      	mov	r2, r9
 800e3f6:	4633      	mov	r3, r6
 800e3f8:	4638      	mov	r0, r7
 800e3fa:	f7ff f86d 	bl	800d4d8 <siscanf>
 800e3fe:	42a0      	cmp	r0, r4
 800e400:	dc18      	bgt.n	800e434 <_tzset_unlocked_r+0x124>
 800e402:	f8d8 3000 	ldr.w	r3, [r8]
 800e406:	f8c8 3004 	str.w	r3, [r8, #4]
 800e40a:	4b77      	ldr	r3, [pc, #476]	; (800e5e8 <_tzset_unlocked_r+0x2d8>)
 800e40c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e40e:	601a      	str	r2, [r3, #0]
 800e410:	4b77      	ldr	r3, [pc, #476]	; (800e5f0 <_tzset_unlocked_r+0x2e0>)
 800e412:	601c      	str	r4, [r3, #0]
 800e414:	e796      	b.n	800e344 <_tzset_unlocked_r+0x34>
 800e416:	f7f1 ff43 	bl	80002a0 <strcmp>
 800e41a:	2800      	cmp	r0, #0
 800e41c:	d198      	bne.n	800e350 <_tzset_unlocked_r+0x40>
 800e41e:	e791      	b.n	800e344 <_tzset_unlocked_r+0x34>
 800e420:	4621      	mov	r1, r4
 800e422:	f002 fc29 	bl	8010c78 <strcpy>
 800e426:	e7a0      	b.n	800e36a <_tzset_unlocked_r+0x5a>
 800e428:	2b2b      	cmp	r3, #43	; 0x2b
 800e42a:	bf08      	it	eq
 800e42c:	3701      	addeq	r7, #1
 800e42e:	f04f 0801 	mov.w	r8, #1
 800e432:	e7af      	b.n	800e394 <_tzset_unlocked_r+0x84>
 800e434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e436:	f8c8 9004 	str.w	r9, [r8, #4]
 800e43a:	18fc      	adds	r4, r7, r3
 800e43c:	5cfb      	ldrb	r3, [r7, r3]
 800e43e:	2b2d      	cmp	r3, #45	; 0x2d
 800e440:	f040 808b 	bne.w	800e55a <_tzset_unlocked_r+0x24a>
 800e444:	3401      	adds	r4, #1
 800e446:	f04f 37ff 	mov.w	r7, #4294967295
 800e44a:	2300      	movs	r3, #0
 800e44c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e450:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e454:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e458:	930a      	str	r3, [sp, #40]	; 0x28
 800e45a:	e9cd a602 	strd	sl, r6, [sp, #8]
 800e45e:	e9cd b600 	strd	fp, r6, [sp]
 800e462:	4967      	ldr	r1, [pc, #412]	; (800e600 <_tzset_unlocked_r+0x2f0>)
 800e464:	4633      	mov	r3, r6
 800e466:	aa07      	add	r2, sp, #28
 800e468:	4620      	mov	r0, r4
 800e46a:	f7ff f835 	bl	800d4d8 <siscanf>
 800e46e:	2800      	cmp	r0, #0
 800e470:	dc78      	bgt.n	800e564 <_tzset_unlocked_r+0x254>
 800e472:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e474:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800e478:	652b      	str	r3, [r5, #80]	; 0x50
 800e47a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e47c:	462f      	mov	r7, r5
 800e47e:	441c      	add	r4, r3
 800e480:	f04f 0900 	mov.w	r9, #0
 800e484:	7823      	ldrb	r3, [r4, #0]
 800e486:	2b2c      	cmp	r3, #44	; 0x2c
 800e488:	bf08      	it	eq
 800e48a:	3401      	addeq	r4, #1
 800e48c:	f894 8000 	ldrb.w	r8, [r4]
 800e490:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800e494:	d178      	bne.n	800e588 <_tzset_unlocked_r+0x278>
 800e496:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800e49a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800e49e:	ab09      	add	r3, sp, #36	; 0x24
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	4958      	ldr	r1, [pc, #352]	; (800e604 <_tzset_unlocked_r+0x2f4>)
 800e4a4:	9603      	str	r6, [sp, #12]
 800e4a6:	4633      	mov	r3, r6
 800e4a8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f7ff f813 	bl	800d4d8 <siscanf>
 800e4b2:	2803      	cmp	r0, #3
 800e4b4:	f47f af46 	bne.w	800e344 <_tzset_unlocked_r+0x34>
 800e4b8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800e4bc:	1e4b      	subs	r3, r1, #1
 800e4be:	2b0b      	cmp	r3, #11
 800e4c0:	f63f af40 	bhi.w	800e344 <_tzset_unlocked_r+0x34>
 800e4c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800e4c8:	1e53      	subs	r3, r2, #1
 800e4ca:	2b04      	cmp	r3, #4
 800e4cc:	f63f af3a 	bhi.w	800e344 <_tzset_unlocked_r+0x34>
 800e4d0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800e4d4:	2b06      	cmp	r3, #6
 800e4d6:	f63f af35 	bhi.w	800e344 <_tzset_unlocked_r+0x34>
 800e4da:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800e4de:	f887 8008 	strb.w	r8, [r7, #8]
 800e4e2:	617b      	str	r3, [r7, #20]
 800e4e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4e6:	eb04 0803 	add.w	r8, r4, r3
 800e4ea:	2302      	movs	r3, #2
 800e4ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e4f6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e4fa:	930a      	str	r3, [sp, #40]	; 0x28
 800e4fc:	f898 3000 	ldrb.w	r3, [r8]
 800e500:	2b2f      	cmp	r3, #47	; 0x2f
 800e502:	d109      	bne.n	800e518 <_tzset_unlocked_r+0x208>
 800e504:	e9cd a602 	strd	sl, r6, [sp, #8]
 800e508:	e9cd b600 	strd	fp, r6, [sp]
 800e50c:	493e      	ldr	r1, [pc, #248]	; (800e608 <_tzset_unlocked_r+0x2f8>)
 800e50e:	4633      	mov	r3, r6
 800e510:	aa07      	add	r2, sp, #28
 800e512:	4640      	mov	r0, r8
 800e514:	f7fe ffe0 	bl	800d4d8 <siscanf>
 800e518:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e51c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e520:	213c      	movs	r1, #60	; 0x3c
 800e522:	fb01 3302 	mla	r3, r1, r2, r3
 800e526:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e52a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e52e:	fb01 3302 	mla	r3, r1, r2, r3
 800e532:	61bb      	str	r3, [r7, #24]
 800e534:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e536:	3728      	adds	r7, #40	; 0x28
 800e538:	4444      	add	r4, r8
 800e53a:	f1b9 0f00 	cmp.w	r9, #0
 800e53e:	d020      	beq.n	800e582 <_tzset_unlocked_r+0x272>
 800e540:	6868      	ldr	r0, [r5, #4]
 800e542:	f7ff fe29 	bl	800e198 <__tzcalc_limits>
 800e546:	4b28      	ldr	r3, [pc, #160]	; (800e5e8 <_tzset_unlocked_r+0x2d8>)
 800e548:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e54a:	601a      	str	r2, [r3, #0]
 800e54c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e54e:	1a9b      	subs	r3, r3, r2
 800e550:	4a27      	ldr	r2, [pc, #156]	; (800e5f0 <_tzset_unlocked_r+0x2e0>)
 800e552:	bf18      	it	ne
 800e554:	2301      	movne	r3, #1
 800e556:	6013      	str	r3, [r2, #0]
 800e558:	e6f4      	b.n	800e344 <_tzset_unlocked_r+0x34>
 800e55a:	2b2b      	cmp	r3, #43	; 0x2b
 800e55c:	bf08      	it	eq
 800e55e:	3401      	addeq	r4, #1
 800e560:	2701      	movs	r7, #1
 800e562:	e772      	b.n	800e44a <_tzset_unlocked_r+0x13a>
 800e564:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e568:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e56c:	213c      	movs	r1, #60	; 0x3c
 800e56e:	fb01 3302 	mla	r3, r1, r2, r3
 800e572:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800e576:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e57a:	fb01 3302 	mla	r3, r1, r2, r3
 800e57e:	437b      	muls	r3, r7
 800e580:	e77a      	b.n	800e478 <_tzset_unlocked_r+0x168>
 800e582:	f04f 0901 	mov.w	r9, #1
 800e586:	e77d      	b.n	800e484 <_tzset_unlocked_r+0x174>
 800e588:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800e58c:	bf06      	itte	eq
 800e58e:	3401      	addeq	r4, #1
 800e590:	4643      	moveq	r3, r8
 800e592:	2344      	movne	r3, #68	; 0x44
 800e594:	220a      	movs	r2, #10
 800e596:	a90b      	add	r1, sp, #44	; 0x2c
 800e598:	4620      	mov	r0, r4
 800e59a:	9305      	str	r3, [sp, #20]
 800e59c:	f7ff fdf2 	bl	800e184 <strtoul>
 800e5a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800e5a4:	9b05      	ldr	r3, [sp, #20]
 800e5a6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800e5aa:	45a0      	cmp	r8, r4
 800e5ac:	d114      	bne.n	800e5d8 <_tzset_unlocked_r+0x2c8>
 800e5ae:	234d      	movs	r3, #77	; 0x4d
 800e5b0:	f1b9 0f00 	cmp.w	r9, #0
 800e5b4:	d107      	bne.n	800e5c6 <_tzset_unlocked_r+0x2b6>
 800e5b6:	722b      	strb	r3, [r5, #8]
 800e5b8:	2103      	movs	r1, #3
 800e5ba:	2302      	movs	r3, #2
 800e5bc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800e5c0:	f8c5 9014 	str.w	r9, [r5, #20]
 800e5c4:	e791      	b.n	800e4ea <_tzset_unlocked_r+0x1da>
 800e5c6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800e5ca:	220b      	movs	r2, #11
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	63eb      	str	r3, [r5, #60]	; 0x3c
 800e5d6:	e788      	b.n	800e4ea <_tzset_unlocked_r+0x1da>
 800e5d8:	b280      	uxth	r0, r0
 800e5da:	723b      	strb	r3, [r7, #8]
 800e5dc:	6178      	str	r0, [r7, #20]
 800e5de:	e784      	b.n	800e4ea <_tzset_unlocked_r+0x1da>
 800e5e0:	0803949c 	.word	0x0803949c
 800e5e4:	20003a44 	.word	0x20003a44
 800e5e8:	20003a4c 	.word	0x20003a4c
 800e5ec:	0803949f 	.word	0x0803949f
 800e5f0:	20003a48 	.word	0x20003a48
 800e5f4:	20000320 	.word	0x20000320
 800e5f8:	20003a37 	.word	0x20003a37
 800e5fc:	080394a3 	.word	0x080394a3
 800e600:	080394c6 	.word	0x080394c6
 800e604:	080394b2 	.word	0x080394b2
 800e608:	080394c5 	.word	0x080394c5
 800e60c:	20003a2c 	.word	0x20003a2c

0800e610 <__swbuf_r>:
 800e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e612:	460e      	mov	r6, r1
 800e614:	4614      	mov	r4, r2
 800e616:	4605      	mov	r5, r0
 800e618:	b118      	cbz	r0, 800e622 <__swbuf_r+0x12>
 800e61a:	6983      	ldr	r3, [r0, #24]
 800e61c:	b90b      	cbnz	r3, 800e622 <__swbuf_r+0x12>
 800e61e:	f001 f88f 	bl	800f740 <__sinit>
 800e622:	4b21      	ldr	r3, [pc, #132]	; (800e6a8 <__swbuf_r+0x98>)
 800e624:	429c      	cmp	r4, r3
 800e626:	d12b      	bne.n	800e680 <__swbuf_r+0x70>
 800e628:	686c      	ldr	r4, [r5, #4]
 800e62a:	69a3      	ldr	r3, [r4, #24]
 800e62c:	60a3      	str	r3, [r4, #8]
 800e62e:	89a3      	ldrh	r3, [r4, #12]
 800e630:	071a      	lsls	r2, r3, #28
 800e632:	d52f      	bpl.n	800e694 <__swbuf_r+0x84>
 800e634:	6923      	ldr	r3, [r4, #16]
 800e636:	b36b      	cbz	r3, 800e694 <__swbuf_r+0x84>
 800e638:	6923      	ldr	r3, [r4, #16]
 800e63a:	6820      	ldr	r0, [r4, #0]
 800e63c:	1ac0      	subs	r0, r0, r3
 800e63e:	6963      	ldr	r3, [r4, #20]
 800e640:	b2f6      	uxtb	r6, r6
 800e642:	4283      	cmp	r3, r0
 800e644:	4637      	mov	r7, r6
 800e646:	dc04      	bgt.n	800e652 <__swbuf_r+0x42>
 800e648:	4621      	mov	r1, r4
 800e64a:	4628      	mov	r0, r5
 800e64c:	f000 ffe4 	bl	800f618 <_fflush_r>
 800e650:	bb30      	cbnz	r0, 800e6a0 <__swbuf_r+0x90>
 800e652:	68a3      	ldr	r3, [r4, #8]
 800e654:	3b01      	subs	r3, #1
 800e656:	60a3      	str	r3, [r4, #8]
 800e658:	6823      	ldr	r3, [r4, #0]
 800e65a:	1c5a      	adds	r2, r3, #1
 800e65c:	6022      	str	r2, [r4, #0]
 800e65e:	701e      	strb	r6, [r3, #0]
 800e660:	6963      	ldr	r3, [r4, #20]
 800e662:	3001      	adds	r0, #1
 800e664:	4283      	cmp	r3, r0
 800e666:	d004      	beq.n	800e672 <__swbuf_r+0x62>
 800e668:	89a3      	ldrh	r3, [r4, #12]
 800e66a:	07db      	lsls	r3, r3, #31
 800e66c:	d506      	bpl.n	800e67c <__swbuf_r+0x6c>
 800e66e:	2e0a      	cmp	r6, #10
 800e670:	d104      	bne.n	800e67c <__swbuf_r+0x6c>
 800e672:	4621      	mov	r1, r4
 800e674:	4628      	mov	r0, r5
 800e676:	f000 ffcf 	bl	800f618 <_fflush_r>
 800e67a:	b988      	cbnz	r0, 800e6a0 <__swbuf_r+0x90>
 800e67c:	4638      	mov	r0, r7
 800e67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e680:	4b0a      	ldr	r3, [pc, #40]	; (800e6ac <__swbuf_r+0x9c>)
 800e682:	429c      	cmp	r4, r3
 800e684:	d101      	bne.n	800e68a <__swbuf_r+0x7a>
 800e686:	68ac      	ldr	r4, [r5, #8]
 800e688:	e7cf      	b.n	800e62a <__swbuf_r+0x1a>
 800e68a:	4b09      	ldr	r3, [pc, #36]	; (800e6b0 <__swbuf_r+0xa0>)
 800e68c:	429c      	cmp	r4, r3
 800e68e:	bf08      	it	eq
 800e690:	68ec      	ldreq	r4, [r5, #12]
 800e692:	e7ca      	b.n	800e62a <__swbuf_r+0x1a>
 800e694:	4621      	mov	r1, r4
 800e696:	4628      	mov	r0, r5
 800e698:	f000 f81e 	bl	800e6d8 <__swsetup_r>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	d0cb      	beq.n	800e638 <__swbuf_r+0x28>
 800e6a0:	f04f 37ff 	mov.w	r7, #4294967295
 800e6a4:	e7ea      	b.n	800e67c <__swbuf_r+0x6c>
 800e6a6:	bf00      	nop
 800e6a8:	08039674 	.word	0x08039674
 800e6ac:	08039694 	.word	0x08039694
 800e6b0:	08039654 	.word	0x08039654

0800e6b4 <_write_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	4d07      	ldr	r5, [pc, #28]	; (800e6d4 <_write_r+0x20>)
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	4608      	mov	r0, r1
 800e6bc:	4611      	mov	r1, r2
 800e6be:	2200      	movs	r2, #0
 800e6c0:	602a      	str	r2, [r5, #0]
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	f005 f88c 	bl	80137e0 <_write>
 800e6c8:	1c43      	adds	r3, r0, #1
 800e6ca:	d102      	bne.n	800e6d2 <_write_r+0x1e>
 800e6cc:	682b      	ldr	r3, [r5, #0]
 800e6ce:	b103      	cbz	r3, 800e6d2 <_write_r+0x1e>
 800e6d0:	6023      	str	r3, [r4, #0]
 800e6d2:	bd38      	pop	{r3, r4, r5, pc}
 800e6d4:	20003a58 	.word	0x20003a58

0800e6d8 <__swsetup_r>:
 800e6d8:	4b32      	ldr	r3, [pc, #200]	; (800e7a4 <__swsetup_r+0xcc>)
 800e6da:	b570      	push	{r4, r5, r6, lr}
 800e6dc:	681d      	ldr	r5, [r3, #0]
 800e6de:	4606      	mov	r6, r0
 800e6e0:	460c      	mov	r4, r1
 800e6e2:	b125      	cbz	r5, 800e6ee <__swsetup_r+0x16>
 800e6e4:	69ab      	ldr	r3, [r5, #24]
 800e6e6:	b913      	cbnz	r3, 800e6ee <__swsetup_r+0x16>
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	f001 f829 	bl	800f740 <__sinit>
 800e6ee:	4b2e      	ldr	r3, [pc, #184]	; (800e7a8 <__swsetup_r+0xd0>)
 800e6f0:	429c      	cmp	r4, r3
 800e6f2:	d10f      	bne.n	800e714 <__swsetup_r+0x3c>
 800e6f4:	686c      	ldr	r4, [r5, #4]
 800e6f6:	89a3      	ldrh	r3, [r4, #12]
 800e6f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6fc:	0719      	lsls	r1, r3, #28
 800e6fe:	d42c      	bmi.n	800e75a <__swsetup_r+0x82>
 800e700:	06dd      	lsls	r5, r3, #27
 800e702:	d411      	bmi.n	800e728 <__swsetup_r+0x50>
 800e704:	2309      	movs	r3, #9
 800e706:	6033      	str	r3, [r6, #0]
 800e708:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e70c:	81a3      	strh	r3, [r4, #12]
 800e70e:	f04f 30ff 	mov.w	r0, #4294967295
 800e712:	e03e      	b.n	800e792 <__swsetup_r+0xba>
 800e714:	4b25      	ldr	r3, [pc, #148]	; (800e7ac <__swsetup_r+0xd4>)
 800e716:	429c      	cmp	r4, r3
 800e718:	d101      	bne.n	800e71e <__swsetup_r+0x46>
 800e71a:	68ac      	ldr	r4, [r5, #8]
 800e71c:	e7eb      	b.n	800e6f6 <__swsetup_r+0x1e>
 800e71e:	4b24      	ldr	r3, [pc, #144]	; (800e7b0 <__swsetup_r+0xd8>)
 800e720:	429c      	cmp	r4, r3
 800e722:	bf08      	it	eq
 800e724:	68ec      	ldreq	r4, [r5, #12]
 800e726:	e7e6      	b.n	800e6f6 <__swsetup_r+0x1e>
 800e728:	0758      	lsls	r0, r3, #29
 800e72a:	d512      	bpl.n	800e752 <__swsetup_r+0x7a>
 800e72c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e72e:	b141      	cbz	r1, 800e742 <__swsetup_r+0x6a>
 800e730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e734:	4299      	cmp	r1, r3
 800e736:	d002      	beq.n	800e73e <__swsetup_r+0x66>
 800e738:	4630      	mov	r0, r6
 800e73a:	f7fd fff9 	bl	800c730 <_free_r>
 800e73e:	2300      	movs	r3, #0
 800e740:	6363      	str	r3, [r4, #52]	; 0x34
 800e742:	89a3      	ldrh	r3, [r4, #12]
 800e744:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e748:	81a3      	strh	r3, [r4, #12]
 800e74a:	2300      	movs	r3, #0
 800e74c:	6063      	str	r3, [r4, #4]
 800e74e:	6923      	ldr	r3, [r4, #16]
 800e750:	6023      	str	r3, [r4, #0]
 800e752:	89a3      	ldrh	r3, [r4, #12]
 800e754:	f043 0308 	orr.w	r3, r3, #8
 800e758:	81a3      	strh	r3, [r4, #12]
 800e75a:	6923      	ldr	r3, [r4, #16]
 800e75c:	b94b      	cbnz	r3, 800e772 <__swsetup_r+0x9a>
 800e75e:	89a3      	ldrh	r3, [r4, #12]
 800e760:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e768:	d003      	beq.n	800e772 <__swsetup_r+0x9a>
 800e76a:	4621      	mov	r1, r4
 800e76c:	4630      	mov	r0, r6
 800e76e:	f001 f913 	bl	800f998 <__smakebuf_r>
 800e772:	89a0      	ldrh	r0, [r4, #12]
 800e774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e778:	f010 0301 	ands.w	r3, r0, #1
 800e77c:	d00a      	beq.n	800e794 <__swsetup_r+0xbc>
 800e77e:	2300      	movs	r3, #0
 800e780:	60a3      	str	r3, [r4, #8]
 800e782:	6963      	ldr	r3, [r4, #20]
 800e784:	425b      	negs	r3, r3
 800e786:	61a3      	str	r3, [r4, #24]
 800e788:	6923      	ldr	r3, [r4, #16]
 800e78a:	b943      	cbnz	r3, 800e79e <__swsetup_r+0xc6>
 800e78c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e790:	d1ba      	bne.n	800e708 <__swsetup_r+0x30>
 800e792:	bd70      	pop	{r4, r5, r6, pc}
 800e794:	0781      	lsls	r1, r0, #30
 800e796:	bf58      	it	pl
 800e798:	6963      	ldrpl	r3, [r4, #20]
 800e79a:	60a3      	str	r3, [r4, #8]
 800e79c:	e7f4      	b.n	800e788 <__swsetup_r+0xb0>
 800e79e:	2000      	movs	r0, #0
 800e7a0:	e7f7      	b.n	800e792 <__swsetup_r+0xba>
 800e7a2:	bf00      	nop
 800e7a4:	200002bc 	.word	0x200002bc
 800e7a8:	08039674 	.word	0x08039674
 800e7ac:	08039694 	.word	0x08039694
 800e7b0:	08039654 	.word	0x08039654

0800e7b4 <abort>:
 800e7b4:	b508      	push	{r3, lr}
 800e7b6:	2006      	movs	r0, #6
 800e7b8:	f002 fa0e 	bl	8010bd8 <raise>
 800e7bc:	2001      	movs	r0, #1
 800e7be:	f005 f817 	bl	80137f0 <_exit>

0800e7c2 <abs>:
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	bfb8      	it	lt
 800e7c6:	4240      	neglt	r0, r0
 800e7c8:	4770      	bx	lr
	...

0800e7cc <_close_r>:
 800e7cc:	b538      	push	{r3, r4, r5, lr}
 800e7ce:	4d06      	ldr	r5, [pc, #24]	; (800e7e8 <_close_r+0x1c>)
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	4608      	mov	r0, r1
 800e7d6:	602b      	str	r3, [r5, #0]
 800e7d8:	f004 ffbc 	bl	8013754 <_close>
 800e7dc:	1c43      	adds	r3, r0, #1
 800e7de:	d102      	bne.n	800e7e6 <_close_r+0x1a>
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	b103      	cbz	r3, 800e7e6 <_close_r+0x1a>
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	bd38      	pop	{r3, r4, r5, pc}
 800e7e8:	20003a58 	.word	0x20003a58

0800e7ec <div>:
 800e7ec:	2900      	cmp	r1, #0
 800e7ee:	b510      	push	{r4, lr}
 800e7f0:	fb91 f4f2 	sdiv	r4, r1, r2
 800e7f4:	fb02 1314 	mls	r3, r2, r4, r1
 800e7f8:	db06      	blt.n	800e808 <div+0x1c>
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	da01      	bge.n	800e802 <div+0x16>
 800e7fe:	3401      	adds	r4, #1
 800e800:	1a9b      	subs	r3, r3, r2
 800e802:	e9c0 4300 	strd	r4, r3, [r0]
 800e806:	bd10      	pop	{r4, pc}
 800e808:	2b00      	cmp	r3, #0
 800e80a:	bfc4      	itt	gt
 800e80c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800e810:	189b      	addgt	r3, r3, r2
 800e812:	e7f6      	b.n	800e802 <div+0x16>

0800e814 <quorem>:
 800e814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e818:	6903      	ldr	r3, [r0, #16]
 800e81a:	690c      	ldr	r4, [r1, #16]
 800e81c:	42a3      	cmp	r3, r4
 800e81e:	4607      	mov	r7, r0
 800e820:	f2c0 8081 	blt.w	800e926 <quorem+0x112>
 800e824:	3c01      	subs	r4, #1
 800e826:	f101 0814 	add.w	r8, r1, #20
 800e82a:	f100 0514 	add.w	r5, r0, #20
 800e82e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e832:	9301      	str	r3, [sp, #4]
 800e834:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e838:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e83c:	3301      	adds	r3, #1
 800e83e:	429a      	cmp	r2, r3
 800e840:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e844:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e848:	fbb2 f6f3 	udiv	r6, r2, r3
 800e84c:	d331      	bcc.n	800e8b2 <quorem+0x9e>
 800e84e:	f04f 0e00 	mov.w	lr, #0
 800e852:	4640      	mov	r0, r8
 800e854:	46ac      	mov	ip, r5
 800e856:	46f2      	mov	sl, lr
 800e858:	f850 2b04 	ldr.w	r2, [r0], #4
 800e85c:	b293      	uxth	r3, r2
 800e85e:	fb06 e303 	mla	r3, r6, r3, lr
 800e862:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e866:	b29b      	uxth	r3, r3
 800e868:	ebaa 0303 	sub.w	r3, sl, r3
 800e86c:	f8dc a000 	ldr.w	sl, [ip]
 800e870:	0c12      	lsrs	r2, r2, #16
 800e872:	fa13 f38a 	uxtah	r3, r3, sl
 800e876:	fb06 e202 	mla	r2, r6, r2, lr
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	9b00      	ldr	r3, [sp, #0]
 800e87e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e882:	b292      	uxth	r2, r2
 800e884:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e888:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e88c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e890:	4581      	cmp	r9, r0
 800e892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e896:	f84c 3b04 	str.w	r3, [ip], #4
 800e89a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e89e:	d2db      	bcs.n	800e858 <quorem+0x44>
 800e8a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800e8a4:	b92b      	cbnz	r3, 800e8b2 <quorem+0x9e>
 800e8a6:	9b01      	ldr	r3, [sp, #4]
 800e8a8:	3b04      	subs	r3, #4
 800e8aa:	429d      	cmp	r5, r3
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	d32e      	bcc.n	800e90e <quorem+0xfa>
 800e8b0:	613c      	str	r4, [r7, #16]
 800e8b2:	4638      	mov	r0, r7
 800e8b4:	f001 fb58 	bl	800ff68 <__mcmp>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	db24      	blt.n	800e906 <quorem+0xf2>
 800e8bc:	3601      	adds	r6, #1
 800e8be:	4628      	mov	r0, r5
 800e8c0:	f04f 0c00 	mov.w	ip, #0
 800e8c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e8c8:	f8d0 e000 	ldr.w	lr, [r0]
 800e8cc:	b293      	uxth	r3, r2
 800e8ce:	ebac 0303 	sub.w	r3, ip, r3
 800e8d2:	0c12      	lsrs	r2, r2, #16
 800e8d4:	fa13 f38e 	uxtah	r3, r3, lr
 800e8d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e8dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8e6:	45c1      	cmp	r9, r8
 800e8e8:	f840 3b04 	str.w	r3, [r0], #4
 800e8ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e8f0:	d2e8      	bcs.n	800e8c4 <quorem+0xb0>
 800e8f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e8f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e8fa:	b922      	cbnz	r2, 800e906 <quorem+0xf2>
 800e8fc:	3b04      	subs	r3, #4
 800e8fe:	429d      	cmp	r5, r3
 800e900:	461a      	mov	r2, r3
 800e902:	d30a      	bcc.n	800e91a <quorem+0x106>
 800e904:	613c      	str	r4, [r7, #16]
 800e906:	4630      	mov	r0, r6
 800e908:	b003      	add	sp, #12
 800e90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e90e:	6812      	ldr	r2, [r2, #0]
 800e910:	3b04      	subs	r3, #4
 800e912:	2a00      	cmp	r2, #0
 800e914:	d1cc      	bne.n	800e8b0 <quorem+0x9c>
 800e916:	3c01      	subs	r4, #1
 800e918:	e7c7      	b.n	800e8aa <quorem+0x96>
 800e91a:	6812      	ldr	r2, [r2, #0]
 800e91c:	3b04      	subs	r3, #4
 800e91e:	2a00      	cmp	r2, #0
 800e920:	d1f0      	bne.n	800e904 <quorem+0xf0>
 800e922:	3c01      	subs	r4, #1
 800e924:	e7eb      	b.n	800e8fe <quorem+0xea>
 800e926:	2000      	movs	r0, #0
 800e928:	e7ee      	b.n	800e908 <quorem+0xf4>
 800e92a:	0000      	movs	r0, r0
 800e92c:	0000      	movs	r0, r0
	...

0800e930 <_dtoa_r>:
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	ed2d 8b04 	vpush	{d8-d9}
 800e938:	ec57 6b10 	vmov	r6, r7, d0
 800e93c:	b093      	sub	sp, #76	; 0x4c
 800e93e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e940:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e944:	9106      	str	r1, [sp, #24]
 800e946:	ee10 aa10 	vmov	sl, s0
 800e94a:	4604      	mov	r4, r0
 800e94c:	9209      	str	r2, [sp, #36]	; 0x24
 800e94e:	930c      	str	r3, [sp, #48]	; 0x30
 800e950:	46bb      	mov	fp, r7
 800e952:	b975      	cbnz	r5, 800e972 <_dtoa_r+0x42>
 800e954:	2010      	movs	r0, #16
 800e956:	f7fd fc53 	bl	800c200 <malloc>
 800e95a:	4602      	mov	r2, r0
 800e95c:	6260      	str	r0, [r4, #36]	; 0x24
 800e95e:	b920      	cbnz	r0, 800e96a <_dtoa_r+0x3a>
 800e960:	4ba7      	ldr	r3, [pc, #668]	; (800ec00 <_dtoa_r+0x2d0>)
 800e962:	21ea      	movs	r1, #234	; 0xea
 800e964:	48a7      	ldr	r0, [pc, #668]	; (800ec04 <_dtoa_r+0x2d4>)
 800e966:	f7fd fbf7 	bl	800c158 <__assert_func>
 800e96a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e96e:	6005      	str	r5, [r0, #0]
 800e970:	60c5      	str	r5, [r0, #12]
 800e972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e974:	6819      	ldr	r1, [r3, #0]
 800e976:	b151      	cbz	r1, 800e98e <_dtoa_r+0x5e>
 800e978:	685a      	ldr	r2, [r3, #4]
 800e97a:	604a      	str	r2, [r1, #4]
 800e97c:	2301      	movs	r3, #1
 800e97e:	4093      	lsls	r3, r2
 800e980:	608b      	str	r3, [r1, #8]
 800e982:	4620      	mov	r0, r4
 800e984:	f001 f8ae 	bl	800fae4 <_Bfree>
 800e988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e98a:	2200      	movs	r2, #0
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	1e3b      	subs	r3, r7, #0
 800e990:	bfaa      	itet	ge
 800e992:	2300      	movge	r3, #0
 800e994:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e998:	f8c8 3000 	strge.w	r3, [r8]
 800e99c:	4b9a      	ldr	r3, [pc, #616]	; (800ec08 <_dtoa_r+0x2d8>)
 800e99e:	bfbc      	itt	lt
 800e9a0:	2201      	movlt	r2, #1
 800e9a2:	f8c8 2000 	strlt.w	r2, [r8]
 800e9a6:	ea33 030b 	bics.w	r3, r3, fp
 800e9aa:	d11b      	bne.n	800e9e4 <_dtoa_r+0xb4>
 800e9ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800e9b2:	6013      	str	r3, [r2, #0]
 800e9b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9b8:	4333      	orrs	r3, r6
 800e9ba:	f000 8592 	beq.w	800f4e2 <_dtoa_r+0xbb2>
 800e9be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9c0:	b963      	cbnz	r3, 800e9dc <_dtoa_r+0xac>
 800e9c2:	4b92      	ldr	r3, [pc, #584]	; (800ec0c <_dtoa_r+0x2dc>)
 800e9c4:	e022      	b.n	800ea0c <_dtoa_r+0xdc>
 800e9c6:	4b92      	ldr	r3, [pc, #584]	; (800ec10 <_dtoa_r+0x2e0>)
 800e9c8:	9301      	str	r3, [sp, #4]
 800e9ca:	3308      	adds	r3, #8
 800e9cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e9ce:	6013      	str	r3, [r2, #0]
 800e9d0:	9801      	ldr	r0, [sp, #4]
 800e9d2:	b013      	add	sp, #76	; 0x4c
 800e9d4:	ecbd 8b04 	vpop	{d8-d9}
 800e9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9dc:	4b8b      	ldr	r3, [pc, #556]	; (800ec0c <_dtoa_r+0x2dc>)
 800e9de:	9301      	str	r3, [sp, #4]
 800e9e0:	3303      	adds	r3, #3
 800e9e2:	e7f3      	b.n	800e9cc <_dtoa_r+0x9c>
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	4650      	mov	r0, sl
 800e9ea:	4659      	mov	r1, fp
 800e9ec:	f7f2 f886 	bl	8000afc <__aeabi_dcmpeq>
 800e9f0:	ec4b ab19 	vmov	d9, sl, fp
 800e9f4:	4680      	mov	r8, r0
 800e9f6:	b158      	cbz	r0, 800ea10 <_dtoa_r+0xe0>
 800e9f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	6013      	str	r3, [r2, #0]
 800e9fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f000 856b 	beq.w	800f4dc <_dtoa_r+0xbac>
 800ea06:	4883      	ldr	r0, [pc, #524]	; (800ec14 <_dtoa_r+0x2e4>)
 800ea08:	6018      	str	r0, [r3, #0]
 800ea0a:	1e43      	subs	r3, r0, #1
 800ea0c:	9301      	str	r3, [sp, #4]
 800ea0e:	e7df      	b.n	800e9d0 <_dtoa_r+0xa0>
 800ea10:	ec4b ab10 	vmov	d0, sl, fp
 800ea14:	aa10      	add	r2, sp, #64	; 0x40
 800ea16:	a911      	add	r1, sp, #68	; 0x44
 800ea18:	4620      	mov	r0, r4
 800ea1a:	f001 fb4b 	bl	80100b4 <__d2b>
 800ea1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ea22:	ee08 0a10 	vmov	s16, r0
 800ea26:	2d00      	cmp	r5, #0
 800ea28:	f000 8084 	beq.w	800eb34 <_dtoa_r+0x204>
 800ea2c:	ee19 3a90 	vmov	r3, s19
 800ea30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ea38:	4656      	mov	r6, sl
 800ea3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ea3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ea42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ea46:	4b74      	ldr	r3, [pc, #464]	; (800ec18 <_dtoa_r+0x2e8>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	4630      	mov	r0, r6
 800ea4c:	4639      	mov	r1, r7
 800ea4e:	f7f1 fc35 	bl	80002bc <__aeabi_dsub>
 800ea52:	a365      	add	r3, pc, #404	; (adr r3, 800ebe8 <_dtoa_r+0x2b8>)
 800ea54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea58:	f7f1 fde8 	bl	800062c <__aeabi_dmul>
 800ea5c:	a364      	add	r3, pc, #400	; (adr r3, 800ebf0 <_dtoa_r+0x2c0>)
 800ea5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea62:	f7f1 fc2d 	bl	80002c0 <__adddf3>
 800ea66:	4606      	mov	r6, r0
 800ea68:	4628      	mov	r0, r5
 800ea6a:	460f      	mov	r7, r1
 800ea6c:	f7f1 fd74 	bl	8000558 <__aeabi_i2d>
 800ea70:	a361      	add	r3, pc, #388	; (adr r3, 800ebf8 <_dtoa_r+0x2c8>)
 800ea72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea76:	f7f1 fdd9 	bl	800062c <__aeabi_dmul>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	4630      	mov	r0, r6
 800ea80:	4639      	mov	r1, r7
 800ea82:	f7f1 fc1d 	bl	80002c0 <__adddf3>
 800ea86:	4606      	mov	r6, r0
 800ea88:	460f      	mov	r7, r1
 800ea8a:	f7f2 f87f 	bl	8000b8c <__aeabi_d2iz>
 800ea8e:	2200      	movs	r2, #0
 800ea90:	9000      	str	r0, [sp, #0]
 800ea92:	2300      	movs	r3, #0
 800ea94:	4630      	mov	r0, r6
 800ea96:	4639      	mov	r1, r7
 800ea98:	f7f2 f83a 	bl	8000b10 <__aeabi_dcmplt>
 800ea9c:	b150      	cbz	r0, 800eab4 <_dtoa_r+0x184>
 800ea9e:	9800      	ldr	r0, [sp, #0]
 800eaa0:	f7f1 fd5a 	bl	8000558 <__aeabi_i2d>
 800eaa4:	4632      	mov	r2, r6
 800eaa6:	463b      	mov	r3, r7
 800eaa8:	f7f2 f828 	bl	8000afc <__aeabi_dcmpeq>
 800eaac:	b910      	cbnz	r0, 800eab4 <_dtoa_r+0x184>
 800eaae:	9b00      	ldr	r3, [sp, #0]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	9300      	str	r3, [sp, #0]
 800eab4:	9b00      	ldr	r3, [sp, #0]
 800eab6:	2b16      	cmp	r3, #22
 800eab8:	d85a      	bhi.n	800eb70 <_dtoa_r+0x240>
 800eaba:	9a00      	ldr	r2, [sp, #0]
 800eabc:	4b57      	ldr	r3, [pc, #348]	; (800ec1c <_dtoa_r+0x2ec>)
 800eabe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac6:	ec51 0b19 	vmov	r0, r1, d9
 800eaca:	f7f2 f821 	bl	8000b10 <__aeabi_dcmplt>
 800eace:	2800      	cmp	r0, #0
 800ead0:	d050      	beq.n	800eb74 <_dtoa_r+0x244>
 800ead2:	9b00      	ldr	r3, [sp, #0]
 800ead4:	3b01      	subs	r3, #1
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	2300      	movs	r3, #0
 800eada:	930b      	str	r3, [sp, #44]	; 0x2c
 800eadc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eade:	1b5d      	subs	r5, r3, r5
 800eae0:	1e6b      	subs	r3, r5, #1
 800eae2:	9305      	str	r3, [sp, #20]
 800eae4:	bf45      	ittet	mi
 800eae6:	f1c5 0301 	rsbmi	r3, r5, #1
 800eaea:	9304      	strmi	r3, [sp, #16]
 800eaec:	2300      	movpl	r3, #0
 800eaee:	2300      	movmi	r3, #0
 800eaf0:	bf4c      	ite	mi
 800eaf2:	9305      	strmi	r3, [sp, #20]
 800eaf4:	9304      	strpl	r3, [sp, #16]
 800eaf6:	9b00      	ldr	r3, [sp, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	db3d      	blt.n	800eb78 <_dtoa_r+0x248>
 800eafc:	9b05      	ldr	r3, [sp, #20]
 800eafe:	9a00      	ldr	r2, [sp, #0]
 800eb00:	920a      	str	r2, [sp, #40]	; 0x28
 800eb02:	4413      	add	r3, r2
 800eb04:	9305      	str	r3, [sp, #20]
 800eb06:	2300      	movs	r3, #0
 800eb08:	9307      	str	r3, [sp, #28]
 800eb0a:	9b06      	ldr	r3, [sp, #24]
 800eb0c:	2b09      	cmp	r3, #9
 800eb0e:	f200 8089 	bhi.w	800ec24 <_dtoa_r+0x2f4>
 800eb12:	2b05      	cmp	r3, #5
 800eb14:	bfc4      	itt	gt
 800eb16:	3b04      	subgt	r3, #4
 800eb18:	9306      	strgt	r3, [sp, #24]
 800eb1a:	9b06      	ldr	r3, [sp, #24]
 800eb1c:	f1a3 0302 	sub.w	r3, r3, #2
 800eb20:	bfcc      	ite	gt
 800eb22:	2500      	movgt	r5, #0
 800eb24:	2501      	movle	r5, #1
 800eb26:	2b03      	cmp	r3, #3
 800eb28:	f200 8087 	bhi.w	800ec3a <_dtoa_r+0x30a>
 800eb2c:	e8df f003 	tbb	[pc, r3]
 800eb30:	59383a2d 	.word	0x59383a2d
 800eb34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eb38:	441d      	add	r5, r3
 800eb3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eb3e:	2b20      	cmp	r3, #32
 800eb40:	bfc1      	itttt	gt
 800eb42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eb46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eb4a:	fa0b f303 	lslgt.w	r3, fp, r3
 800eb4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eb52:	bfda      	itte	le
 800eb54:	f1c3 0320 	rsble	r3, r3, #32
 800eb58:	fa06 f003 	lslle.w	r0, r6, r3
 800eb5c:	4318      	orrgt	r0, r3
 800eb5e:	f7f1 fceb 	bl	8000538 <__aeabi_ui2d>
 800eb62:	2301      	movs	r3, #1
 800eb64:	4606      	mov	r6, r0
 800eb66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eb6a:	3d01      	subs	r5, #1
 800eb6c:	930e      	str	r3, [sp, #56]	; 0x38
 800eb6e:	e76a      	b.n	800ea46 <_dtoa_r+0x116>
 800eb70:	2301      	movs	r3, #1
 800eb72:	e7b2      	b.n	800eada <_dtoa_r+0x1aa>
 800eb74:	900b      	str	r0, [sp, #44]	; 0x2c
 800eb76:	e7b1      	b.n	800eadc <_dtoa_r+0x1ac>
 800eb78:	9b04      	ldr	r3, [sp, #16]
 800eb7a:	9a00      	ldr	r2, [sp, #0]
 800eb7c:	1a9b      	subs	r3, r3, r2
 800eb7e:	9304      	str	r3, [sp, #16]
 800eb80:	4253      	negs	r3, r2
 800eb82:	9307      	str	r3, [sp, #28]
 800eb84:	2300      	movs	r3, #0
 800eb86:	930a      	str	r3, [sp, #40]	; 0x28
 800eb88:	e7bf      	b.n	800eb0a <_dtoa_r+0x1da>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	9308      	str	r3, [sp, #32]
 800eb8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	dc55      	bgt.n	800ec40 <_dtoa_r+0x310>
 800eb94:	2301      	movs	r3, #1
 800eb96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	9209      	str	r2, [sp, #36]	; 0x24
 800eb9e:	e00c      	b.n	800ebba <_dtoa_r+0x28a>
 800eba0:	2301      	movs	r3, #1
 800eba2:	e7f3      	b.n	800eb8c <_dtoa_r+0x25c>
 800eba4:	2300      	movs	r3, #0
 800eba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eba8:	9308      	str	r3, [sp, #32]
 800ebaa:	9b00      	ldr	r3, [sp, #0]
 800ebac:	4413      	add	r3, r2
 800ebae:	9302      	str	r3, [sp, #8]
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	9303      	str	r3, [sp, #12]
 800ebb6:	bfb8      	it	lt
 800ebb8:	2301      	movlt	r3, #1
 800ebba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	6042      	str	r2, [r0, #4]
 800ebc0:	2204      	movs	r2, #4
 800ebc2:	f102 0614 	add.w	r6, r2, #20
 800ebc6:	429e      	cmp	r6, r3
 800ebc8:	6841      	ldr	r1, [r0, #4]
 800ebca:	d93d      	bls.n	800ec48 <_dtoa_r+0x318>
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f000 ff49 	bl	800fa64 <_Balloc>
 800ebd2:	9001      	str	r0, [sp, #4]
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	d13b      	bne.n	800ec50 <_dtoa_r+0x320>
 800ebd8:	4b11      	ldr	r3, [pc, #68]	; (800ec20 <_dtoa_r+0x2f0>)
 800ebda:	4602      	mov	r2, r0
 800ebdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ebe0:	e6c0      	b.n	800e964 <_dtoa_r+0x34>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e7df      	b.n	800eba6 <_dtoa_r+0x276>
 800ebe6:	bf00      	nop
 800ebe8:	636f4361 	.word	0x636f4361
 800ebec:	3fd287a7 	.word	0x3fd287a7
 800ebf0:	8b60c8b3 	.word	0x8b60c8b3
 800ebf4:	3fc68a28 	.word	0x3fc68a28
 800ebf8:	509f79fb 	.word	0x509f79fb
 800ebfc:	3fd34413 	.word	0x3fd34413
 800ec00:	0803906c 	.word	0x0803906c
 800ec04:	080395e6 	.word	0x080395e6
 800ec08:	7ff00000 	.word	0x7ff00000
 800ec0c:	080395e2 	.word	0x080395e2
 800ec10:	080395d9 	.word	0x080395d9
 800ec14:	08039871 	.word	0x08039871
 800ec18:	3ff80000 	.word	0x3ff80000
 800ec1c:	08039798 	.word	0x08039798
 800ec20:	08039641 	.word	0x08039641
 800ec24:	2501      	movs	r5, #1
 800ec26:	2300      	movs	r3, #0
 800ec28:	9306      	str	r3, [sp, #24]
 800ec2a:	9508      	str	r5, [sp, #32]
 800ec2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec34:	2200      	movs	r2, #0
 800ec36:	2312      	movs	r3, #18
 800ec38:	e7b0      	b.n	800eb9c <_dtoa_r+0x26c>
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	9308      	str	r3, [sp, #32]
 800ec3e:	e7f5      	b.n	800ec2c <_dtoa_r+0x2fc>
 800ec40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec46:	e7b8      	b.n	800ebba <_dtoa_r+0x28a>
 800ec48:	3101      	adds	r1, #1
 800ec4a:	6041      	str	r1, [r0, #4]
 800ec4c:	0052      	lsls	r2, r2, #1
 800ec4e:	e7b8      	b.n	800ebc2 <_dtoa_r+0x292>
 800ec50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec52:	9a01      	ldr	r2, [sp, #4]
 800ec54:	601a      	str	r2, [r3, #0]
 800ec56:	9b03      	ldr	r3, [sp, #12]
 800ec58:	2b0e      	cmp	r3, #14
 800ec5a:	f200 809d 	bhi.w	800ed98 <_dtoa_r+0x468>
 800ec5e:	2d00      	cmp	r5, #0
 800ec60:	f000 809a 	beq.w	800ed98 <_dtoa_r+0x468>
 800ec64:	9b00      	ldr	r3, [sp, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	dd32      	ble.n	800ecd0 <_dtoa_r+0x3a0>
 800ec6a:	4ab7      	ldr	r2, [pc, #732]	; (800ef48 <_dtoa_r+0x618>)
 800ec6c:	f003 030f 	and.w	r3, r3, #15
 800ec70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ec74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec78:	9b00      	ldr	r3, [sp, #0]
 800ec7a:	05d8      	lsls	r0, r3, #23
 800ec7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ec80:	d516      	bpl.n	800ecb0 <_dtoa_r+0x380>
 800ec82:	4bb2      	ldr	r3, [pc, #712]	; (800ef4c <_dtoa_r+0x61c>)
 800ec84:	ec51 0b19 	vmov	r0, r1, d9
 800ec88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ec8c:	f7f1 fdf8 	bl	8000880 <__aeabi_ddiv>
 800ec90:	f007 070f 	and.w	r7, r7, #15
 800ec94:	4682      	mov	sl, r0
 800ec96:	468b      	mov	fp, r1
 800ec98:	2503      	movs	r5, #3
 800ec9a:	4eac      	ldr	r6, [pc, #688]	; (800ef4c <_dtoa_r+0x61c>)
 800ec9c:	b957      	cbnz	r7, 800ecb4 <_dtoa_r+0x384>
 800ec9e:	4642      	mov	r2, r8
 800eca0:	464b      	mov	r3, r9
 800eca2:	4650      	mov	r0, sl
 800eca4:	4659      	mov	r1, fp
 800eca6:	f7f1 fdeb 	bl	8000880 <__aeabi_ddiv>
 800ecaa:	4682      	mov	sl, r0
 800ecac:	468b      	mov	fp, r1
 800ecae:	e028      	b.n	800ed02 <_dtoa_r+0x3d2>
 800ecb0:	2502      	movs	r5, #2
 800ecb2:	e7f2      	b.n	800ec9a <_dtoa_r+0x36a>
 800ecb4:	07f9      	lsls	r1, r7, #31
 800ecb6:	d508      	bpl.n	800ecca <_dtoa_r+0x39a>
 800ecb8:	4640      	mov	r0, r8
 800ecba:	4649      	mov	r1, r9
 800ecbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ecc0:	f7f1 fcb4 	bl	800062c <__aeabi_dmul>
 800ecc4:	3501      	adds	r5, #1
 800ecc6:	4680      	mov	r8, r0
 800ecc8:	4689      	mov	r9, r1
 800ecca:	107f      	asrs	r7, r7, #1
 800eccc:	3608      	adds	r6, #8
 800ecce:	e7e5      	b.n	800ec9c <_dtoa_r+0x36c>
 800ecd0:	f000 809b 	beq.w	800ee0a <_dtoa_r+0x4da>
 800ecd4:	9b00      	ldr	r3, [sp, #0]
 800ecd6:	4f9d      	ldr	r7, [pc, #628]	; (800ef4c <_dtoa_r+0x61c>)
 800ecd8:	425e      	negs	r6, r3
 800ecda:	4b9b      	ldr	r3, [pc, #620]	; (800ef48 <_dtoa_r+0x618>)
 800ecdc:	f006 020f 	and.w	r2, r6, #15
 800ece0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece8:	ec51 0b19 	vmov	r0, r1, d9
 800ecec:	f7f1 fc9e 	bl	800062c <__aeabi_dmul>
 800ecf0:	1136      	asrs	r6, r6, #4
 800ecf2:	4682      	mov	sl, r0
 800ecf4:	468b      	mov	fp, r1
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	2502      	movs	r5, #2
 800ecfa:	2e00      	cmp	r6, #0
 800ecfc:	d17a      	bne.n	800edf4 <_dtoa_r+0x4c4>
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1d3      	bne.n	800ecaa <_dtoa_r+0x37a>
 800ed02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f000 8082 	beq.w	800ee0e <_dtoa_r+0x4de>
 800ed0a:	4b91      	ldr	r3, [pc, #580]	; (800ef50 <_dtoa_r+0x620>)
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	4650      	mov	r0, sl
 800ed10:	4659      	mov	r1, fp
 800ed12:	f7f1 fefd 	bl	8000b10 <__aeabi_dcmplt>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d079      	beq.n	800ee0e <_dtoa_r+0x4de>
 800ed1a:	9b03      	ldr	r3, [sp, #12]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d076      	beq.n	800ee0e <_dtoa_r+0x4de>
 800ed20:	9b02      	ldr	r3, [sp, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	dd36      	ble.n	800ed94 <_dtoa_r+0x464>
 800ed26:	9b00      	ldr	r3, [sp, #0]
 800ed28:	4650      	mov	r0, sl
 800ed2a:	4659      	mov	r1, fp
 800ed2c:	1e5f      	subs	r7, r3, #1
 800ed2e:	2200      	movs	r2, #0
 800ed30:	4b88      	ldr	r3, [pc, #544]	; (800ef54 <_dtoa_r+0x624>)
 800ed32:	f7f1 fc7b 	bl	800062c <__aeabi_dmul>
 800ed36:	9e02      	ldr	r6, [sp, #8]
 800ed38:	4682      	mov	sl, r0
 800ed3a:	468b      	mov	fp, r1
 800ed3c:	3501      	adds	r5, #1
 800ed3e:	4628      	mov	r0, r5
 800ed40:	f7f1 fc0a 	bl	8000558 <__aeabi_i2d>
 800ed44:	4652      	mov	r2, sl
 800ed46:	465b      	mov	r3, fp
 800ed48:	f7f1 fc70 	bl	800062c <__aeabi_dmul>
 800ed4c:	4b82      	ldr	r3, [pc, #520]	; (800ef58 <_dtoa_r+0x628>)
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f7f1 fab6 	bl	80002c0 <__adddf3>
 800ed54:	46d0      	mov	r8, sl
 800ed56:	46d9      	mov	r9, fp
 800ed58:	4682      	mov	sl, r0
 800ed5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ed5e:	2e00      	cmp	r6, #0
 800ed60:	d158      	bne.n	800ee14 <_dtoa_r+0x4e4>
 800ed62:	4b7e      	ldr	r3, [pc, #504]	; (800ef5c <_dtoa_r+0x62c>)
 800ed64:	2200      	movs	r2, #0
 800ed66:	4640      	mov	r0, r8
 800ed68:	4649      	mov	r1, r9
 800ed6a:	f7f1 faa7 	bl	80002bc <__aeabi_dsub>
 800ed6e:	4652      	mov	r2, sl
 800ed70:	465b      	mov	r3, fp
 800ed72:	4680      	mov	r8, r0
 800ed74:	4689      	mov	r9, r1
 800ed76:	f7f1 fee9 	bl	8000b4c <__aeabi_dcmpgt>
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	f040 8295 	bne.w	800f2aa <_dtoa_r+0x97a>
 800ed80:	4652      	mov	r2, sl
 800ed82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ed86:	4640      	mov	r0, r8
 800ed88:	4649      	mov	r1, r9
 800ed8a:	f7f1 fec1 	bl	8000b10 <__aeabi_dcmplt>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	f040 8289 	bne.w	800f2a6 <_dtoa_r+0x976>
 800ed94:	ec5b ab19 	vmov	sl, fp, d9
 800ed98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f2c0 8148 	blt.w	800f030 <_dtoa_r+0x700>
 800eda0:	9a00      	ldr	r2, [sp, #0]
 800eda2:	2a0e      	cmp	r2, #14
 800eda4:	f300 8144 	bgt.w	800f030 <_dtoa_r+0x700>
 800eda8:	4b67      	ldr	r3, [pc, #412]	; (800ef48 <_dtoa_r+0x618>)
 800edaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	f280 80d5 	bge.w	800ef64 <_dtoa_r+0x634>
 800edba:	9b03      	ldr	r3, [sp, #12]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f300 80d1 	bgt.w	800ef64 <_dtoa_r+0x634>
 800edc2:	f040 826f 	bne.w	800f2a4 <_dtoa_r+0x974>
 800edc6:	4b65      	ldr	r3, [pc, #404]	; (800ef5c <_dtoa_r+0x62c>)
 800edc8:	2200      	movs	r2, #0
 800edca:	4640      	mov	r0, r8
 800edcc:	4649      	mov	r1, r9
 800edce:	f7f1 fc2d 	bl	800062c <__aeabi_dmul>
 800edd2:	4652      	mov	r2, sl
 800edd4:	465b      	mov	r3, fp
 800edd6:	f7f1 feaf 	bl	8000b38 <__aeabi_dcmpge>
 800edda:	9e03      	ldr	r6, [sp, #12]
 800eddc:	4637      	mov	r7, r6
 800edde:	2800      	cmp	r0, #0
 800ede0:	f040 8245 	bne.w	800f26e <_dtoa_r+0x93e>
 800ede4:	9d01      	ldr	r5, [sp, #4]
 800ede6:	2331      	movs	r3, #49	; 0x31
 800ede8:	f805 3b01 	strb.w	r3, [r5], #1
 800edec:	9b00      	ldr	r3, [sp, #0]
 800edee:	3301      	adds	r3, #1
 800edf0:	9300      	str	r3, [sp, #0]
 800edf2:	e240      	b.n	800f276 <_dtoa_r+0x946>
 800edf4:	07f2      	lsls	r2, r6, #31
 800edf6:	d505      	bpl.n	800ee04 <_dtoa_r+0x4d4>
 800edf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edfc:	f7f1 fc16 	bl	800062c <__aeabi_dmul>
 800ee00:	3501      	adds	r5, #1
 800ee02:	2301      	movs	r3, #1
 800ee04:	1076      	asrs	r6, r6, #1
 800ee06:	3708      	adds	r7, #8
 800ee08:	e777      	b.n	800ecfa <_dtoa_r+0x3ca>
 800ee0a:	2502      	movs	r5, #2
 800ee0c:	e779      	b.n	800ed02 <_dtoa_r+0x3d2>
 800ee0e:	9f00      	ldr	r7, [sp, #0]
 800ee10:	9e03      	ldr	r6, [sp, #12]
 800ee12:	e794      	b.n	800ed3e <_dtoa_r+0x40e>
 800ee14:	9901      	ldr	r1, [sp, #4]
 800ee16:	4b4c      	ldr	r3, [pc, #304]	; (800ef48 <_dtoa_r+0x618>)
 800ee18:	4431      	add	r1, r6
 800ee1a:	910d      	str	r1, [sp, #52]	; 0x34
 800ee1c:	9908      	ldr	r1, [sp, #32]
 800ee1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ee22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee26:	2900      	cmp	r1, #0
 800ee28:	d043      	beq.n	800eeb2 <_dtoa_r+0x582>
 800ee2a:	494d      	ldr	r1, [pc, #308]	; (800ef60 <_dtoa_r+0x630>)
 800ee2c:	2000      	movs	r0, #0
 800ee2e:	f7f1 fd27 	bl	8000880 <__aeabi_ddiv>
 800ee32:	4652      	mov	r2, sl
 800ee34:	465b      	mov	r3, fp
 800ee36:	f7f1 fa41 	bl	80002bc <__aeabi_dsub>
 800ee3a:	9d01      	ldr	r5, [sp, #4]
 800ee3c:	4682      	mov	sl, r0
 800ee3e:	468b      	mov	fp, r1
 800ee40:	4649      	mov	r1, r9
 800ee42:	4640      	mov	r0, r8
 800ee44:	f7f1 fea2 	bl	8000b8c <__aeabi_d2iz>
 800ee48:	4606      	mov	r6, r0
 800ee4a:	f7f1 fb85 	bl	8000558 <__aeabi_i2d>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	460b      	mov	r3, r1
 800ee52:	4640      	mov	r0, r8
 800ee54:	4649      	mov	r1, r9
 800ee56:	f7f1 fa31 	bl	80002bc <__aeabi_dsub>
 800ee5a:	3630      	adds	r6, #48	; 0x30
 800ee5c:	f805 6b01 	strb.w	r6, [r5], #1
 800ee60:	4652      	mov	r2, sl
 800ee62:	465b      	mov	r3, fp
 800ee64:	4680      	mov	r8, r0
 800ee66:	4689      	mov	r9, r1
 800ee68:	f7f1 fe52 	bl	8000b10 <__aeabi_dcmplt>
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d163      	bne.n	800ef38 <_dtoa_r+0x608>
 800ee70:	4642      	mov	r2, r8
 800ee72:	464b      	mov	r3, r9
 800ee74:	4936      	ldr	r1, [pc, #216]	; (800ef50 <_dtoa_r+0x620>)
 800ee76:	2000      	movs	r0, #0
 800ee78:	f7f1 fa20 	bl	80002bc <__aeabi_dsub>
 800ee7c:	4652      	mov	r2, sl
 800ee7e:	465b      	mov	r3, fp
 800ee80:	f7f1 fe46 	bl	8000b10 <__aeabi_dcmplt>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	f040 80b5 	bne.w	800eff4 <_dtoa_r+0x6c4>
 800ee8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee8c:	429d      	cmp	r5, r3
 800ee8e:	d081      	beq.n	800ed94 <_dtoa_r+0x464>
 800ee90:	4b30      	ldr	r3, [pc, #192]	; (800ef54 <_dtoa_r+0x624>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	4650      	mov	r0, sl
 800ee96:	4659      	mov	r1, fp
 800ee98:	f7f1 fbc8 	bl	800062c <__aeabi_dmul>
 800ee9c:	4b2d      	ldr	r3, [pc, #180]	; (800ef54 <_dtoa_r+0x624>)
 800ee9e:	4682      	mov	sl, r0
 800eea0:	468b      	mov	fp, r1
 800eea2:	4640      	mov	r0, r8
 800eea4:	4649      	mov	r1, r9
 800eea6:	2200      	movs	r2, #0
 800eea8:	f7f1 fbc0 	bl	800062c <__aeabi_dmul>
 800eeac:	4680      	mov	r8, r0
 800eeae:	4689      	mov	r9, r1
 800eeb0:	e7c6      	b.n	800ee40 <_dtoa_r+0x510>
 800eeb2:	4650      	mov	r0, sl
 800eeb4:	4659      	mov	r1, fp
 800eeb6:	f7f1 fbb9 	bl	800062c <__aeabi_dmul>
 800eeba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eebc:	9d01      	ldr	r5, [sp, #4]
 800eebe:	930f      	str	r3, [sp, #60]	; 0x3c
 800eec0:	4682      	mov	sl, r0
 800eec2:	468b      	mov	fp, r1
 800eec4:	4649      	mov	r1, r9
 800eec6:	4640      	mov	r0, r8
 800eec8:	f7f1 fe60 	bl	8000b8c <__aeabi_d2iz>
 800eecc:	4606      	mov	r6, r0
 800eece:	f7f1 fb43 	bl	8000558 <__aeabi_i2d>
 800eed2:	3630      	adds	r6, #48	; 0x30
 800eed4:	4602      	mov	r2, r0
 800eed6:	460b      	mov	r3, r1
 800eed8:	4640      	mov	r0, r8
 800eeda:	4649      	mov	r1, r9
 800eedc:	f7f1 f9ee 	bl	80002bc <__aeabi_dsub>
 800eee0:	f805 6b01 	strb.w	r6, [r5], #1
 800eee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eee6:	429d      	cmp	r5, r3
 800eee8:	4680      	mov	r8, r0
 800eeea:	4689      	mov	r9, r1
 800eeec:	f04f 0200 	mov.w	r2, #0
 800eef0:	d124      	bne.n	800ef3c <_dtoa_r+0x60c>
 800eef2:	4b1b      	ldr	r3, [pc, #108]	; (800ef60 <_dtoa_r+0x630>)
 800eef4:	4650      	mov	r0, sl
 800eef6:	4659      	mov	r1, fp
 800eef8:	f7f1 f9e2 	bl	80002c0 <__adddf3>
 800eefc:	4602      	mov	r2, r0
 800eefe:	460b      	mov	r3, r1
 800ef00:	4640      	mov	r0, r8
 800ef02:	4649      	mov	r1, r9
 800ef04:	f7f1 fe22 	bl	8000b4c <__aeabi_dcmpgt>
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d173      	bne.n	800eff4 <_dtoa_r+0x6c4>
 800ef0c:	4652      	mov	r2, sl
 800ef0e:	465b      	mov	r3, fp
 800ef10:	4913      	ldr	r1, [pc, #76]	; (800ef60 <_dtoa_r+0x630>)
 800ef12:	2000      	movs	r0, #0
 800ef14:	f7f1 f9d2 	bl	80002bc <__aeabi_dsub>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	4640      	mov	r0, r8
 800ef1e:	4649      	mov	r1, r9
 800ef20:	f7f1 fdf6 	bl	8000b10 <__aeabi_dcmplt>
 800ef24:	2800      	cmp	r0, #0
 800ef26:	f43f af35 	beq.w	800ed94 <_dtoa_r+0x464>
 800ef2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ef2c:	1e6b      	subs	r3, r5, #1
 800ef2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ef34:	2b30      	cmp	r3, #48	; 0x30
 800ef36:	d0f8      	beq.n	800ef2a <_dtoa_r+0x5fa>
 800ef38:	9700      	str	r7, [sp, #0]
 800ef3a:	e049      	b.n	800efd0 <_dtoa_r+0x6a0>
 800ef3c:	4b05      	ldr	r3, [pc, #20]	; (800ef54 <_dtoa_r+0x624>)
 800ef3e:	f7f1 fb75 	bl	800062c <__aeabi_dmul>
 800ef42:	4680      	mov	r8, r0
 800ef44:	4689      	mov	r9, r1
 800ef46:	e7bd      	b.n	800eec4 <_dtoa_r+0x594>
 800ef48:	08039798 	.word	0x08039798
 800ef4c:	08039770 	.word	0x08039770
 800ef50:	3ff00000 	.word	0x3ff00000
 800ef54:	40240000 	.word	0x40240000
 800ef58:	401c0000 	.word	0x401c0000
 800ef5c:	40140000 	.word	0x40140000
 800ef60:	3fe00000 	.word	0x3fe00000
 800ef64:	9d01      	ldr	r5, [sp, #4]
 800ef66:	4656      	mov	r6, sl
 800ef68:	465f      	mov	r7, fp
 800ef6a:	4642      	mov	r2, r8
 800ef6c:	464b      	mov	r3, r9
 800ef6e:	4630      	mov	r0, r6
 800ef70:	4639      	mov	r1, r7
 800ef72:	f7f1 fc85 	bl	8000880 <__aeabi_ddiv>
 800ef76:	f7f1 fe09 	bl	8000b8c <__aeabi_d2iz>
 800ef7a:	4682      	mov	sl, r0
 800ef7c:	f7f1 faec 	bl	8000558 <__aeabi_i2d>
 800ef80:	4642      	mov	r2, r8
 800ef82:	464b      	mov	r3, r9
 800ef84:	f7f1 fb52 	bl	800062c <__aeabi_dmul>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	4639      	mov	r1, r7
 800ef90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ef94:	f7f1 f992 	bl	80002bc <__aeabi_dsub>
 800ef98:	f805 6b01 	strb.w	r6, [r5], #1
 800ef9c:	9e01      	ldr	r6, [sp, #4]
 800ef9e:	9f03      	ldr	r7, [sp, #12]
 800efa0:	1bae      	subs	r6, r5, r6
 800efa2:	42b7      	cmp	r7, r6
 800efa4:	4602      	mov	r2, r0
 800efa6:	460b      	mov	r3, r1
 800efa8:	d135      	bne.n	800f016 <_dtoa_r+0x6e6>
 800efaa:	f7f1 f989 	bl	80002c0 <__adddf3>
 800efae:	4642      	mov	r2, r8
 800efb0:	464b      	mov	r3, r9
 800efb2:	4606      	mov	r6, r0
 800efb4:	460f      	mov	r7, r1
 800efb6:	f7f1 fdc9 	bl	8000b4c <__aeabi_dcmpgt>
 800efba:	b9d0      	cbnz	r0, 800eff2 <_dtoa_r+0x6c2>
 800efbc:	4642      	mov	r2, r8
 800efbe:	464b      	mov	r3, r9
 800efc0:	4630      	mov	r0, r6
 800efc2:	4639      	mov	r1, r7
 800efc4:	f7f1 fd9a 	bl	8000afc <__aeabi_dcmpeq>
 800efc8:	b110      	cbz	r0, 800efd0 <_dtoa_r+0x6a0>
 800efca:	f01a 0f01 	tst.w	sl, #1
 800efce:	d110      	bne.n	800eff2 <_dtoa_r+0x6c2>
 800efd0:	4620      	mov	r0, r4
 800efd2:	ee18 1a10 	vmov	r1, s16
 800efd6:	f000 fd85 	bl	800fae4 <_Bfree>
 800efda:	2300      	movs	r3, #0
 800efdc:	9800      	ldr	r0, [sp, #0]
 800efde:	702b      	strb	r3, [r5, #0]
 800efe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efe2:	3001      	adds	r0, #1
 800efe4:	6018      	str	r0, [r3, #0]
 800efe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f43f acf1 	beq.w	800e9d0 <_dtoa_r+0xa0>
 800efee:	601d      	str	r5, [r3, #0]
 800eff0:	e4ee      	b.n	800e9d0 <_dtoa_r+0xa0>
 800eff2:	9f00      	ldr	r7, [sp, #0]
 800eff4:	462b      	mov	r3, r5
 800eff6:	461d      	mov	r5, r3
 800eff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800effc:	2a39      	cmp	r2, #57	; 0x39
 800effe:	d106      	bne.n	800f00e <_dtoa_r+0x6de>
 800f000:	9a01      	ldr	r2, [sp, #4]
 800f002:	429a      	cmp	r2, r3
 800f004:	d1f7      	bne.n	800eff6 <_dtoa_r+0x6c6>
 800f006:	9901      	ldr	r1, [sp, #4]
 800f008:	2230      	movs	r2, #48	; 0x30
 800f00a:	3701      	adds	r7, #1
 800f00c:	700a      	strb	r2, [r1, #0]
 800f00e:	781a      	ldrb	r2, [r3, #0]
 800f010:	3201      	adds	r2, #1
 800f012:	701a      	strb	r2, [r3, #0]
 800f014:	e790      	b.n	800ef38 <_dtoa_r+0x608>
 800f016:	4ba6      	ldr	r3, [pc, #664]	; (800f2b0 <_dtoa_r+0x980>)
 800f018:	2200      	movs	r2, #0
 800f01a:	f7f1 fb07 	bl	800062c <__aeabi_dmul>
 800f01e:	2200      	movs	r2, #0
 800f020:	2300      	movs	r3, #0
 800f022:	4606      	mov	r6, r0
 800f024:	460f      	mov	r7, r1
 800f026:	f7f1 fd69 	bl	8000afc <__aeabi_dcmpeq>
 800f02a:	2800      	cmp	r0, #0
 800f02c:	d09d      	beq.n	800ef6a <_dtoa_r+0x63a>
 800f02e:	e7cf      	b.n	800efd0 <_dtoa_r+0x6a0>
 800f030:	9a08      	ldr	r2, [sp, #32]
 800f032:	2a00      	cmp	r2, #0
 800f034:	f000 80d7 	beq.w	800f1e6 <_dtoa_r+0x8b6>
 800f038:	9a06      	ldr	r2, [sp, #24]
 800f03a:	2a01      	cmp	r2, #1
 800f03c:	f300 80ba 	bgt.w	800f1b4 <_dtoa_r+0x884>
 800f040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f042:	2a00      	cmp	r2, #0
 800f044:	f000 80b2 	beq.w	800f1ac <_dtoa_r+0x87c>
 800f048:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f04c:	9e07      	ldr	r6, [sp, #28]
 800f04e:	9d04      	ldr	r5, [sp, #16]
 800f050:	9a04      	ldr	r2, [sp, #16]
 800f052:	441a      	add	r2, r3
 800f054:	9204      	str	r2, [sp, #16]
 800f056:	9a05      	ldr	r2, [sp, #20]
 800f058:	2101      	movs	r1, #1
 800f05a:	441a      	add	r2, r3
 800f05c:	4620      	mov	r0, r4
 800f05e:	9205      	str	r2, [sp, #20]
 800f060:	f000 fdf8 	bl	800fc54 <__i2b>
 800f064:	4607      	mov	r7, r0
 800f066:	2d00      	cmp	r5, #0
 800f068:	dd0c      	ble.n	800f084 <_dtoa_r+0x754>
 800f06a:	9b05      	ldr	r3, [sp, #20]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	dd09      	ble.n	800f084 <_dtoa_r+0x754>
 800f070:	42ab      	cmp	r3, r5
 800f072:	9a04      	ldr	r2, [sp, #16]
 800f074:	bfa8      	it	ge
 800f076:	462b      	movge	r3, r5
 800f078:	1ad2      	subs	r2, r2, r3
 800f07a:	9204      	str	r2, [sp, #16]
 800f07c:	9a05      	ldr	r2, [sp, #20]
 800f07e:	1aed      	subs	r5, r5, r3
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	9305      	str	r3, [sp, #20]
 800f084:	9b07      	ldr	r3, [sp, #28]
 800f086:	b31b      	cbz	r3, 800f0d0 <_dtoa_r+0x7a0>
 800f088:	9b08      	ldr	r3, [sp, #32]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	f000 80af 	beq.w	800f1ee <_dtoa_r+0x8be>
 800f090:	2e00      	cmp	r6, #0
 800f092:	dd13      	ble.n	800f0bc <_dtoa_r+0x78c>
 800f094:	4639      	mov	r1, r7
 800f096:	4632      	mov	r2, r6
 800f098:	4620      	mov	r0, r4
 800f09a:	f000 fe9b 	bl	800fdd4 <__pow5mult>
 800f09e:	ee18 2a10 	vmov	r2, s16
 800f0a2:	4601      	mov	r1, r0
 800f0a4:	4607      	mov	r7, r0
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f000 fdea 	bl	800fc80 <__multiply>
 800f0ac:	ee18 1a10 	vmov	r1, s16
 800f0b0:	4680      	mov	r8, r0
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f000 fd16 	bl	800fae4 <_Bfree>
 800f0b8:	ee08 8a10 	vmov	s16, r8
 800f0bc:	9b07      	ldr	r3, [sp, #28]
 800f0be:	1b9a      	subs	r2, r3, r6
 800f0c0:	d006      	beq.n	800f0d0 <_dtoa_r+0x7a0>
 800f0c2:	ee18 1a10 	vmov	r1, s16
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	f000 fe84 	bl	800fdd4 <__pow5mult>
 800f0cc:	ee08 0a10 	vmov	s16, r0
 800f0d0:	2101      	movs	r1, #1
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f000 fdbe 	bl	800fc54 <__i2b>
 800f0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	4606      	mov	r6, r0
 800f0de:	f340 8088 	ble.w	800f1f2 <_dtoa_r+0x8c2>
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	4601      	mov	r1, r0
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f000 fe74 	bl	800fdd4 <__pow5mult>
 800f0ec:	9b06      	ldr	r3, [sp, #24]
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	4606      	mov	r6, r0
 800f0f2:	f340 8081 	ble.w	800f1f8 <_dtoa_r+0x8c8>
 800f0f6:	f04f 0800 	mov.w	r8, #0
 800f0fa:	6933      	ldr	r3, [r6, #16]
 800f0fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f100:	6918      	ldr	r0, [r3, #16]
 800f102:	f000 fd57 	bl	800fbb4 <__hi0bits>
 800f106:	f1c0 0020 	rsb	r0, r0, #32
 800f10a:	9b05      	ldr	r3, [sp, #20]
 800f10c:	4418      	add	r0, r3
 800f10e:	f010 001f 	ands.w	r0, r0, #31
 800f112:	f000 8092 	beq.w	800f23a <_dtoa_r+0x90a>
 800f116:	f1c0 0320 	rsb	r3, r0, #32
 800f11a:	2b04      	cmp	r3, #4
 800f11c:	f340 808a 	ble.w	800f234 <_dtoa_r+0x904>
 800f120:	f1c0 001c 	rsb	r0, r0, #28
 800f124:	9b04      	ldr	r3, [sp, #16]
 800f126:	4403      	add	r3, r0
 800f128:	9304      	str	r3, [sp, #16]
 800f12a:	9b05      	ldr	r3, [sp, #20]
 800f12c:	4403      	add	r3, r0
 800f12e:	4405      	add	r5, r0
 800f130:	9305      	str	r3, [sp, #20]
 800f132:	9b04      	ldr	r3, [sp, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	dd07      	ble.n	800f148 <_dtoa_r+0x818>
 800f138:	ee18 1a10 	vmov	r1, s16
 800f13c:	461a      	mov	r2, r3
 800f13e:	4620      	mov	r0, r4
 800f140:	f000 fea2 	bl	800fe88 <__lshift>
 800f144:	ee08 0a10 	vmov	s16, r0
 800f148:	9b05      	ldr	r3, [sp, #20]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	dd05      	ble.n	800f15a <_dtoa_r+0x82a>
 800f14e:	4631      	mov	r1, r6
 800f150:	461a      	mov	r2, r3
 800f152:	4620      	mov	r0, r4
 800f154:	f000 fe98 	bl	800fe88 <__lshift>
 800f158:	4606      	mov	r6, r0
 800f15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d06e      	beq.n	800f23e <_dtoa_r+0x90e>
 800f160:	ee18 0a10 	vmov	r0, s16
 800f164:	4631      	mov	r1, r6
 800f166:	f000 feff 	bl	800ff68 <__mcmp>
 800f16a:	2800      	cmp	r0, #0
 800f16c:	da67      	bge.n	800f23e <_dtoa_r+0x90e>
 800f16e:	9b00      	ldr	r3, [sp, #0]
 800f170:	3b01      	subs	r3, #1
 800f172:	ee18 1a10 	vmov	r1, s16
 800f176:	9300      	str	r3, [sp, #0]
 800f178:	220a      	movs	r2, #10
 800f17a:	2300      	movs	r3, #0
 800f17c:	4620      	mov	r0, r4
 800f17e:	f000 fcd3 	bl	800fb28 <__multadd>
 800f182:	9b08      	ldr	r3, [sp, #32]
 800f184:	ee08 0a10 	vmov	s16, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f000 81b1 	beq.w	800f4f0 <_dtoa_r+0xbc0>
 800f18e:	2300      	movs	r3, #0
 800f190:	4639      	mov	r1, r7
 800f192:	220a      	movs	r2, #10
 800f194:	4620      	mov	r0, r4
 800f196:	f000 fcc7 	bl	800fb28 <__multadd>
 800f19a:	9b02      	ldr	r3, [sp, #8]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	4607      	mov	r7, r0
 800f1a0:	f300 808e 	bgt.w	800f2c0 <_dtoa_r+0x990>
 800f1a4:	9b06      	ldr	r3, [sp, #24]
 800f1a6:	2b02      	cmp	r3, #2
 800f1a8:	dc51      	bgt.n	800f24e <_dtoa_r+0x91e>
 800f1aa:	e089      	b.n	800f2c0 <_dtoa_r+0x990>
 800f1ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f1b2:	e74b      	b.n	800f04c <_dtoa_r+0x71c>
 800f1b4:	9b03      	ldr	r3, [sp, #12]
 800f1b6:	1e5e      	subs	r6, r3, #1
 800f1b8:	9b07      	ldr	r3, [sp, #28]
 800f1ba:	42b3      	cmp	r3, r6
 800f1bc:	bfbf      	itttt	lt
 800f1be:	9b07      	ldrlt	r3, [sp, #28]
 800f1c0:	9607      	strlt	r6, [sp, #28]
 800f1c2:	1af2      	sublt	r2, r6, r3
 800f1c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f1c6:	bfb6      	itet	lt
 800f1c8:	189b      	addlt	r3, r3, r2
 800f1ca:	1b9e      	subge	r6, r3, r6
 800f1cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f1ce:	9b03      	ldr	r3, [sp, #12]
 800f1d0:	bfb8      	it	lt
 800f1d2:	2600      	movlt	r6, #0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	bfb7      	itett	lt
 800f1d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f1dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f1e0:	1a9d      	sublt	r5, r3, r2
 800f1e2:	2300      	movlt	r3, #0
 800f1e4:	e734      	b.n	800f050 <_dtoa_r+0x720>
 800f1e6:	9e07      	ldr	r6, [sp, #28]
 800f1e8:	9d04      	ldr	r5, [sp, #16]
 800f1ea:	9f08      	ldr	r7, [sp, #32]
 800f1ec:	e73b      	b.n	800f066 <_dtoa_r+0x736>
 800f1ee:	9a07      	ldr	r2, [sp, #28]
 800f1f0:	e767      	b.n	800f0c2 <_dtoa_r+0x792>
 800f1f2:	9b06      	ldr	r3, [sp, #24]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	dc18      	bgt.n	800f22a <_dtoa_r+0x8fa>
 800f1f8:	f1ba 0f00 	cmp.w	sl, #0
 800f1fc:	d115      	bne.n	800f22a <_dtoa_r+0x8fa>
 800f1fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f202:	b993      	cbnz	r3, 800f22a <_dtoa_r+0x8fa>
 800f204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f208:	0d1b      	lsrs	r3, r3, #20
 800f20a:	051b      	lsls	r3, r3, #20
 800f20c:	b183      	cbz	r3, 800f230 <_dtoa_r+0x900>
 800f20e:	9b04      	ldr	r3, [sp, #16]
 800f210:	3301      	adds	r3, #1
 800f212:	9304      	str	r3, [sp, #16]
 800f214:	9b05      	ldr	r3, [sp, #20]
 800f216:	3301      	adds	r3, #1
 800f218:	9305      	str	r3, [sp, #20]
 800f21a:	f04f 0801 	mov.w	r8, #1
 800f21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f220:	2b00      	cmp	r3, #0
 800f222:	f47f af6a 	bne.w	800f0fa <_dtoa_r+0x7ca>
 800f226:	2001      	movs	r0, #1
 800f228:	e76f      	b.n	800f10a <_dtoa_r+0x7da>
 800f22a:	f04f 0800 	mov.w	r8, #0
 800f22e:	e7f6      	b.n	800f21e <_dtoa_r+0x8ee>
 800f230:	4698      	mov	r8, r3
 800f232:	e7f4      	b.n	800f21e <_dtoa_r+0x8ee>
 800f234:	f43f af7d 	beq.w	800f132 <_dtoa_r+0x802>
 800f238:	4618      	mov	r0, r3
 800f23a:	301c      	adds	r0, #28
 800f23c:	e772      	b.n	800f124 <_dtoa_r+0x7f4>
 800f23e:	9b03      	ldr	r3, [sp, #12]
 800f240:	2b00      	cmp	r3, #0
 800f242:	dc37      	bgt.n	800f2b4 <_dtoa_r+0x984>
 800f244:	9b06      	ldr	r3, [sp, #24]
 800f246:	2b02      	cmp	r3, #2
 800f248:	dd34      	ble.n	800f2b4 <_dtoa_r+0x984>
 800f24a:	9b03      	ldr	r3, [sp, #12]
 800f24c:	9302      	str	r3, [sp, #8]
 800f24e:	9b02      	ldr	r3, [sp, #8]
 800f250:	b96b      	cbnz	r3, 800f26e <_dtoa_r+0x93e>
 800f252:	4631      	mov	r1, r6
 800f254:	2205      	movs	r2, #5
 800f256:	4620      	mov	r0, r4
 800f258:	f000 fc66 	bl	800fb28 <__multadd>
 800f25c:	4601      	mov	r1, r0
 800f25e:	4606      	mov	r6, r0
 800f260:	ee18 0a10 	vmov	r0, s16
 800f264:	f000 fe80 	bl	800ff68 <__mcmp>
 800f268:	2800      	cmp	r0, #0
 800f26a:	f73f adbb 	bgt.w	800ede4 <_dtoa_r+0x4b4>
 800f26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f270:	9d01      	ldr	r5, [sp, #4]
 800f272:	43db      	mvns	r3, r3
 800f274:	9300      	str	r3, [sp, #0]
 800f276:	f04f 0800 	mov.w	r8, #0
 800f27a:	4631      	mov	r1, r6
 800f27c:	4620      	mov	r0, r4
 800f27e:	f000 fc31 	bl	800fae4 <_Bfree>
 800f282:	2f00      	cmp	r7, #0
 800f284:	f43f aea4 	beq.w	800efd0 <_dtoa_r+0x6a0>
 800f288:	f1b8 0f00 	cmp.w	r8, #0
 800f28c:	d005      	beq.n	800f29a <_dtoa_r+0x96a>
 800f28e:	45b8      	cmp	r8, r7
 800f290:	d003      	beq.n	800f29a <_dtoa_r+0x96a>
 800f292:	4641      	mov	r1, r8
 800f294:	4620      	mov	r0, r4
 800f296:	f000 fc25 	bl	800fae4 <_Bfree>
 800f29a:	4639      	mov	r1, r7
 800f29c:	4620      	mov	r0, r4
 800f29e:	f000 fc21 	bl	800fae4 <_Bfree>
 800f2a2:	e695      	b.n	800efd0 <_dtoa_r+0x6a0>
 800f2a4:	2600      	movs	r6, #0
 800f2a6:	4637      	mov	r7, r6
 800f2a8:	e7e1      	b.n	800f26e <_dtoa_r+0x93e>
 800f2aa:	9700      	str	r7, [sp, #0]
 800f2ac:	4637      	mov	r7, r6
 800f2ae:	e599      	b.n	800ede4 <_dtoa_r+0x4b4>
 800f2b0:	40240000 	.word	0x40240000
 800f2b4:	9b08      	ldr	r3, [sp, #32]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	f000 80ca 	beq.w	800f450 <_dtoa_r+0xb20>
 800f2bc:	9b03      	ldr	r3, [sp, #12]
 800f2be:	9302      	str	r3, [sp, #8]
 800f2c0:	2d00      	cmp	r5, #0
 800f2c2:	dd05      	ble.n	800f2d0 <_dtoa_r+0x9a0>
 800f2c4:	4639      	mov	r1, r7
 800f2c6:	462a      	mov	r2, r5
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f000 fddd 	bl	800fe88 <__lshift>
 800f2ce:	4607      	mov	r7, r0
 800f2d0:	f1b8 0f00 	cmp.w	r8, #0
 800f2d4:	d05b      	beq.n	800f38e <_dtoa_r+0xa5e>
 800f2d6:	6879      	ldr	r1, [r7, #4]
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f000 fbc3 	bl	800fa64 <_Balloc>
 800f2de:	4605      	mov	r5, r0
 800f2e0:	b928      	cbnz	r0, 800f2ee <_dtoa_r+0x9be>
 800f2e2:	4b87      	ldr	r3, [pc, #540]	; (800f500 <_dtoa_r+0xbd0>)
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f2ea:	f7ff bb3b 	b.w	800e964 <_dtoa_r+0x34>
 800f2ee:	693a      	ldr	r2, [r7, #16]
 800f2f0:	3202      	adds	r2, #2
 800f2f2:	0092      	lsls	r2, r2, #2
 800f2f4:	f107 010c 	add.w	r1, r7, #12
 800f2f8:	300c      	adds	r0, #12
 800f2fa:	f7fc ff91 	bl	800c220 <memcpy>
 800f2fe:	2201      	movs	r2, #1
 800f300:	4629      	mov	r1, r5
 800f302:	4620      	mov	r0, r4
 800f304:	f000 fdc0 	bl	800fe88 <__lshift>
 800f308:	9b01      	ldr	r3, [sp, #4]
 800f30a:	f103 0901 	add.w	r9, r3, #1
 800f30e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f312:	4413      	add	r3, r2
 800f314:	9305      	str	r3, [sp, #20]
 800f316:	f00a 0301 	and.w	r3, sl, #1
 800f31a:	46b8      	mov	r8, r7
 800f31c:	9304      	str	r3, [sp, #16]
 800f31e:	4607      	mov	r7, r0
 800f320:	4631      	mov	r1, r6
 800f322:	ee18 0a10 	vmov	r0, s16
 800f326:	f7ff fa75 	bl	800e814 <quorem>
 800f32a:	4641      	mov	r1, r8
 800f32c:	9002      	str	r0, [sp, #8]
 800f32e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f332:	ee18 0a10 	vmov	r0, s16
 800f336:	f000 fe17 	bl	800ff68 <__mcmp>
 800f33a:	463a      	mov	r2, r7
 800f33c:	9003      	str	r0, [sp, #12]
 800f33e:	4631      	mov	r1, r6
 800f340:	4620      	mov	r0, r4
 800f342:	f000 fe2d 	bl	800ffa0 <__mdiff>
 800f346:	68c2      	ldr	r2, [r0, #12]
 800f348:	f109 3bff 	add.w	fp, r9, #4294967295
 800f34c:	4605      	mov	r5, r0
 800f34e:	bb02      	cbnz	r2, 800f392 <_dtoa_r+0xa62>
 800f350:	4601      	mov	r1, r0
 800f352:	ee18 0a10 	vmov	r0, s16
 800f356:	f000 fe07 	bl	800ff68 <__mcmp>
 800f35a:	4602      	mov	r2, r0
 800f35c:	4629      	mov	r1, r5
 800f35e:	4620      	mov	r0, r4
 800f360:	9207      	str	r2, [sp, #28]
 800f362:	f000 fbbf 	bl	800fae4 <_Bfree>
 800f366:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f36a:	ea43 0102 	orr.w	r1, r3, r2
 800f36e:	9b04      	ldr	r3, [sp, #16]
 800f370:	430b      	orrs	r3, r1
 800f372:	464d      	mov	r5, r9
 800f374:	d10f      	bne.n	800f396 <_dtoa_r+0xa66>
 800f376:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f37a:	d02a      	beq.n	800f3d2 <_dtoa_r+0xaa2>
 800f37c:	9b03      	ldr	r3, [sp, #12]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	dd02      	ble.n	800f388 <_dtoa_r+0xa58>
 800f382:	9b02      	ldr	r3, [sp, #8]
 800f384:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f388:	f88b a000 	strb.w	sl, [fp]
 800f38c:	e775      	b.n	800f27a <_dtoa_r+0x94a>
 800f38e:	4638      	mov	r0, r7
 800f390:	e7ba      	b.n	800f308 <_dtoa_r+0x9d8>
 800f392:	2201      	movs	r2, #1
 800f394:	e7e2      	b.n	800f35c <_dtoa_r+0xa2c>
 800f396:	9b03      	ldr	r3, [sp, #12]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	db04      	blt.n	800f3a6 <_dtoa_r+0xa76>
 800f39c:	9906      	ldr	r1, [sp, #24]
 800f39e:	430b      	orrs	r3, r1
 800f3a0:	9904      	ldr	r1, [sp, #16]
 800f3a2:	430b      	orrs	r3, r1
 800f3a4:	d122      	bne.n	800f3ec <_dtoa_r+0xabc>
 800f3a6:	2a00      	cmp	r2, #0
 800f3a8:	ddee      	ble.n	800f388 <_dtoa_r+0xa58>
 800f3aa:	ee18 1a10 	vmov	r1, s16
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f000 fd69 	bl	800fe88 <__lshift>
 800f3b6:	4631      	mov	r1, r6
 800f3b8:	ee08 0a10 	vmov	s16, r0
 800f3bc:	f000 fdd4 	bl	800ff68 <__mcmp>
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	dc03      	bgt.n	800f3cc <_dtoa_r+0xa9c>
 800f3c4:	d1e0      	bne.n	800f388 <_dtoa_r+0xa58>
 800f3c6:	f01a 0f01 	tst.w	sl, #1
 800f3ca:	d0dd      	beq.n	800f388 <_dtoa_r+0xa58>
 800f3cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f3d0:	d1d7      	bne.n	800f382 <_dtoa_r+0xa52>
 800f3d2:	2339      	movs	r3, #57	; 0x39
 800f3d4:	f88b 3000 	strb.w	r3, [fp]
 800f3d8:	462b      	mov	r3, r5
 800f3da:	461d      	mov	r5, r3
 800f3dc:	3b01      	subs	r3, #1
 800f3de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f3e2:	2a39      	cmp	r2, #57	; 0x39
 800f3e4:	d071      	beq.n	800f4ca <_dtoa_r+0xb9a>
 800f3e6:	3201      	adds	r2, #1
 800f3e8:	701a      	strb	r2, [r3, #0]
 800f3ea:	e746      	b.n	800f27a <_dtoa_r+0x94a>
 800f3ec:	2a00      	cmp	r2, #0
 800f3ee:	dd07      	ble.n	800f400 <_dtoa_r+0xad0>
 800f3f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f3f4:	d0ed      	beq.n	800f3d2 <_dtoa_r+0xaa2>
 800f3f6:	f10a 0301 	add.w	r3, sl, #1
 800f3fa:	f88b 3000 	strb.w	r3, [fp]
 800f3fe:	e73c      	b.n	800f27a <_dtoa_r+0x94a>
 800f400:	9b05      	ldr	r3, [sp, #20]
 800f402:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f406:	4599      	cmp	r9, r3
 800f408:	d047      	beq.n	800f49a <_dtoa_r+0xb6a>
 800f40a:	ee18 1a10 	vmov	r1, s16
 800f40e:	2300      	movs	r3, #0
 800f410:	220a      	movs	r2, #10
 800f412:	4620      	mov	r0, r4
 800f414:	f000 fb88 	bl	800fb28 <__multadd>
 800f418:	45b8      	cmp	r8, r7
 800f41a:	ee08 0a10 	vmov	s16, r0
 800f41e:	f04f 0300 	mov.w	r3, #0
 800f422:	f04f 020a 	mov.w	r2, #10
 800f426:	4641      	mov	r1, r8
 800f428:	4620      	mov	r0, r4
 800f42a:	d106      	bne.n	800f43a <_dtoa_r+0xb0a>
 800f42c:	f000 fb7c 	bl	800fb28 <__multadd>
 800f430:	4680      	mov	r8, r0
 800f432:	4607      	mov	r7, r0
 800f434:	f109 0901 	add.w	r9, r9, #1
 800f438:	e772      	b.n	800f320 <_dtoa_r+0x9f0>
 800f43a:	f000 fb75 	bl	800fb28 <__multadd>
 800f43e:	4639      	mov	r1, r7
 800f440:	4680      	mov	r8, r0
 800f442:	2300      	movs	r3, #0
 800f444:	220a      	movs	r2, #10
 800f446:	4620      	mov	r0, r4
 800f448:	f000 fb6e 	bl	800fb28 <__multadd>
 800f44c:	4607      	mov	r7, r0
 800f44e:	e7f1      	b.n	800f434 <_dtoa_r+0xb04>
 800f450:	9b03      	ldr	r3, [sp, #12]
 800f452:	9302      	str	r3, [sp, #8]
 800f454:	9d01      	ldr	r5, [sp, #4]
 800f456:	ee18 0a10 	vmov	r0, s16
 800f45a:	4631      	mov	r1, r6
 800f45c:	f7ff f9da 	bl	800e814 <quorem>
 800f460:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f464:	9b01      	ldr	r3, [sp, #4]
 800f466:	f805 ab01 	strb.w	sl, [r5], #1
 800f46a:	1aea      	subs	r2, r5, r3
 800f46c:	9b02      	ldr	r3, [sp, #8]
 800f46e:	4293      	cmp	r3, r2
 800f470:	dd09      	ble.n	800f486 <_dtoa_r+0xb56>
 800f472:	ee18 1a10 	vmov	r1, s16
 800f476:	2300      	movs	r3, #0
 800f478:	220a      	movs	r2, #10
 800f47a:	4620      	mov	r0, r4
 800f47c:	f000 fb54 	bl	800fb28 <__multadd>
 800f480:	ee08 0a10 	vmov	s16, r0
 800f484:	e7e7      	b.n	800f456 <_dtoa_r+0xb26>
 800f486:	9b02      	ldr	r3, [sp, #8]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	bfc8      	it	gt
 800f48c:	461d      	movgt	r5, r3
 800f48e:	9b01      	ldr	r3, [sp, #4]
 800f490:	bfd8      	it	le
 800f492:	2501      	movle	r5, #1
 800f494:	441d      	add	r5, r3
 800f496:	f04f 0800 	mov.w	r8, #0
 800f49a:	ee18 1a10 	vmov	r1, s16
 800f49e:	2201      	movs	r2, #1
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	f000 fcf1 	bl	800fe88 <__lshift>
 800f4a6:	4631      	mov	r1, r6
 800f4a8:	ee08 0a10 	vmov	s16, r0
 800f4ac:	f000 fd5c 	bl	800ff68 <__mcmp>
 800f4b0:	2800      	cmp	r0, #0
 800f4b2:	dc91      	bgt.n	800f3d8 <_dtoa_r+0xaa8>
 800f4b4:	d102      	bne.n	800f4bc <_dtoa_r+0xb8c>
 800f4b6:	f01a 0f01 	tst.w	sl, #1
 800f4ba:	d18d      	bne.n	800f3d8 <_dtoa_r+0xaa8>
 800f4bc:	462b      	mov	r3, r5
 800f4be:	461d      	mov	r5, r3
 800f4c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4c4:	2a30      	cmp	r2, #48	; 0x30
 800f4c6:	d0fa      	beq.n	800f4be <_dtoa_r+0xb8e>
 800f4c8:	e6d7      	b.n	800f27a <_dtoa_r+0x94a>
 800f4ca:	9a01      	ldr	r2, [sp, #4]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d184      	bne.n	800f3da <_dtoa_r+0xaaa>
 800f4d0:	9b00      	ldr	r3, [sp, #0]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	2331      	movs	r3, #49	; 0x31
 800f4d8:	7013      	strb	r3, [r2, #0]
 800f4da:	e6ce      	b.n	800f27a <_dtoa_r+0x94a>
 800f4dc:	4b09      	ldr	r3, [pc, #36]	; (800f504 <_dtoa_r+0xbd4>)
 800f4de:	f7ff ba95 	b.w	800ea0c <_dtoa_r+0xdc>
 800f4e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f47f aa6e 	bne.w	800e9c6 <_dtoa_r+0x96>
 800f4ea:	4b07      	ldr	r3, [pc, #28]	; (800f508 <_dtoa_r+0xbd8>)
 800f4ec:	f7ff ba8e 	b.w	800ea0c <_dtoa_r+0xdc>
 800f4f0:	9b02      	ldr	r3, [sp, #8]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	dcae      	bgt.n	800f454 <_dtoa_r+0xb24>
 800f4f6:	9b06      	ldr	r3, [sp, #24]
 800f4f8:	2b02      	cmp	r3, #2
 800f4fa:	f73f aea8 	bgt.w	800f24e <_dtoa_r+0x91e>
 800f4fe:	e7a9      	b.n	800f454 <_dtoa_r+0xb24>
 800f500:	08039641 	.word	0x08039641
 800f504:	08039870 	.word	0x08039870
 800f508:	080395d9 	.word	0x080395d9

0800f50c <__sflush_r>:
 800f50c:	898a      	ldrh	r2, [r1, #12]
 800f50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f512:	4605      	mov	r5, r0
 800f514:	0710      	lsls	r0, r2, #28
 800f516:	460c      	mov	r4, r1
 800f518:	d458      	bmi.n	800f5cc <__sflush_r+0xc0>
 800f51a:	684b      	ldr	r3, [r1, #4]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	dc05      	bgt.n	800f52c <__sflush_r+0x20>
 800f520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f522:	2b00      	cmp	r3, #0
 800f524:	dc02      	bgt.n	800f52c <__sflush_r+0x20>
 800f526:	2000      	movs	r0, #0
 800f528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f52c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f52e:	2e00      	cmp	r6, #0
 800f530:	d0f9      	beq.n	800f526 <__sflush_r+0x1a>
 800f532:	2300      	movs	r3, #0
 800f534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f538:	682f      	ldr	r7, [r5, #0]
 800f53a:	602b      	str	r3, [r5, #0]
 800f53c:	d032      	beq.n	800f5a4 <__sflush_r+0x98>
 800f53e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f540:	89a3      	ldrh	r3, [r4, #12]
 800f542:	075a      	lsls	r2, r3, #29
 800f544:	d505      	bpl.n	800f552 <__sflush_r+0x46>
 800f546:	6863      	ldr	r3, [r4, #4]
 800f548:	1ac0      	subs	r0, r0, r3
 800f54a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f54c:	b10b      	cbz	r3, 800f552 <__sflush_r+0x46>
 800f54e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f550:	1ac0      	subs	r0, r0, r3
 800f552:	2300      	movs	r3, #0
 800f554:	4602      	mov	r2, r0
 800f556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f558:	6a21      	ldr	r1, [r4, #32]
 800f55a:	4628      	mov	r0, r5
 800f55c:	47b0      	blx	r6
 800f55e:	1c43      	adds	r3, r0, #1
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	d106      	bne.n	800f572 <__sflush_r+0x66>
 800f564:	6829      	ldr	r1, [r5, #0]
 800f566:	291d      	cmp	r1, #29
 800f568:	d82c      	bhi.n	800f5c4 <__sflush_r+0xb8>
 800f56a:	4a2a      	ldr	r2, [pc, #168]	; (800f614 <__sflush_r+0x108>)
 800f56c:	40ca      	lsrs	r2, r1
 800f56e:	07d6      	lsls	r6, r2, #31
 800f570:	d528      	bpl.n	800f5c4 <__sflush_r+0xb8>
 800f572:	2200      	movs	r2, #0
 800f574:	6062      	str	r2, [r4, #4]
 800f576:	04d9      	lsls	r1, r3, #19
 800f578:	6922      	ldr	r2, [r4, #16]
 800f57a:	6022      	str	r2, [r4, #0]
 800f57c:	d504      	bpl.n	800f588 <__sflush_r+0x7c>
 800f57e:	1c42      	adds	r2, r0, #1
 800f580:	d101      	bne.n	800f586 <__sflush_r+0x7a>
 800f582:	682b      	ldr	r3, [r5, #0]
 800f584:	b903      	cbnz	r3, 800f588 <__sflush_r+0x7c>
 800f586:	6560      	str	r0, [r4, #84]	; 0x54
 800f588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f58a:	602f      	str	r7, [r5, #0]
 800f58c:	2900      	cmp	r1, #0
 800f58e:	d0ca      	beq.n	800f526 <__sflush_r+0x1a>
 800f590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f594:	4299      	cmp	r1, r3
 800f596:	d002      	beq.n	800f59e <__sflush_r+0x92>
 800f598:	4628      	mov	r0, r5
 800f59a:	f7fd f8c9 	bl	800c730 <_free_r>
 800f59e:	2000      	movs	r0, #0
 800f5a0:	6360      	str	r0, [r4, #52]	; 0x34
 800f5a2:	e7c1      	b.n	800f528 <__sflush_r+0x1c>
 800f5a4:	6a21      	ldr	r1, [r4, #32]
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	4628      	mov	r0, r5
 800f5aa:	47b0      	blx	r6
 800f5ac:	1c41      	adds	r1, r0, #1
 800f5ae:	d1c7      	bne.n	800f540 <__sflush_r+0x34>
 800f5b0:	682b      	ldr	r3, [r5, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d0c4      	beq.n	800f540 <__sflush_r+0x34>
 800f5b6:	2b1d      	cmp	r3, #29
 800f5b8:	d001      	beq.n	800f5be <__sflush_r+0xb2>
 800f5ba:	2b16      	cmp	r3, #22
 800f5bc:	d101      	bne.n	800f5c2 <__sflush_r+0xb6>
 800f5be:	602f      	str	r7, [r5, #0]
 800f5c0:	e7b1      	b.n	800f526 <__sflush_r+0x1a>
 800f5c2:	89a3      	ldrh	r3, [r4, #12]
 800f5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5c8:	81a3      	strh	r3, [r4, #12]
 800f5ca:	e7ad      	b.n	800f528 <__sflush_r+0x1c>
 800f5cc:	690f      	ldr	r7, [r1, #16]
 800f5ce:	2f00      	cmp	r7, #0
 800f5d0:	d0a9      	beq.n	800f526 <__sflush_r+0x1a>
 800f5d2:	0793      	lsls	r3, r2, #30
 800f5d4:	680e      	ldr	r6, [r1, #0]
 800f5d6:	bf08      	it	eq
 800f5d8:	694b      	ldreq	r3, [r1, #20]
 800f5da:	600f      	str	r7, [r1, #0]
 800f5dc:	bf18      	it	ne
 800f5de:	2300      	movne	r3, #0
 800f5e0:	eba6 0807 	sub.w	r8, r6, r7
 800f5e4:	608b      	str	r3, [r1, #8]
 800f5e6:	f1b8 0f00 	cmp.w	r8, #0
 800f5ea:	dd9c      	ble.n	800f526 <__sflush_r+0x1a>
 800f5ec:	6a21      	ldr	r1, [r4, #32]
 800f5ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f5f0:	4643      	mov	r3, r8
 800f5f2:	463a      	mov	r2, r7
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	47b0      	blx	r6
 800f5f8:	2800      	cmp	r0, #0
 800f5fa:	dc06      	bgt.n	800f60a <__sflush_r+0xfe>
 800f5fc:	89a3      	ldrh	r3, [r4, #12]
 800f5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f602:	81a3      	strh	r3, [r4, #12]
 800f604:	f04f 30ff 	mov.w	r0, #4294967295
 800f608:	e78e      	b.n	800f528 <__sflush_r+0x1c>
 800f60a:	4407      	add	r7, r0
 800f60c:	eba8 0800 	sub.w	r8, r8, r0
 800f610:	e7e9      	b.n	800f5e6 <__sflush_r+0xda>
 800f612:	bf00      	nop
 800f614:	20400001 	.word	0x20400001

0800f618 <_fflush_r>:
 800f618:	b538      	push	{r3, r4, r5, lr}
 800f61a:	690b      	ldr	r3, [r1, #16]
 800f61c:	4605      	mov	r5, r0
 800f61e:	460c      	mov	r4, r1
 800f620:	b913      	cbnz	r3, 800f628 <_fflush_r+0x10>
 800f622:	2500      	movs	r5, #0
 800f624:	4628      	mov	r0, r5
 800f626:	bd38      	pop	{r3, r4, r5, pc}
 800f628:	b118      	cbz	r0, 800f632 <_fflush_r+0x1a>
 800f62a:	6983      	ldr	r3, [r0, #24]
 800f62c:	b90b      	cbnz	r3, 800f632 <_fflush_r+0x1a>
 800f62e:	f000 f887 	bl	800f740 <__sinit>
 800f632:	4b14      	ldr	r3, [pc, #80]	; (800f684 <_fflush_r+0x6c>)
 800f634:	429c      	cmp	r4, r3
 800f636:	d11b      	bne.n	800f670 <_fflush_r+0x58>
 800f638:	686c      	ldr	r4, [r5, #4]
 800f63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d0ef      	beq.n	800f622 <_fflush_r+0xa>
 800f642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f644:	07d0      	lsls	r0, r2, #31
 800f646:	d404      	bmi.n	800f652 <_fflush_r+0x3a>
 800f648:	0599      	lsls	r1, r3, #22
 800f64a:	d402      	bmi.n	800f652 <_fflush_r+0x3a>
 800f64c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f64e:	f000 f967 	bl	800f920 <__retarget_lock_acquire_recursive>
 800f652:	4628      	mov	r0, r5
 800f654:	4621      	mov	r1, r4
 800f656:	f7ff ff59 	bl	800f50c <__sflush_r>
 800f65a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f65c:	07da      	lsls	r2, r3, #31
 800f65e:	4605      	mov	r5, r0
 800f660:	d4e0      	bmi.n	800f624 <_fflush_r+0xc>
 800f662:	89a3      	ldrh	r3, [r4, #12]
 800f664:	059b      	lsls	r3, r3, #22
 800f666:	d4dd      	bmi.n	800f624 <_fflush_r+0xc>
 800f668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f66a:	f000 f95b 	bl	800f924 <__retarget_lock_release_recursive>
 800f66e:	e7d9      	b.n	800f624 <_fflush_r+0xc>
 800f670:	4b05      	ldr	r3, [pc, #20]	; (800f688 <_fflush_r+0x70>)
 800f672:	429c      	cmp	r4, r3
 800f674:	d101      	bne.n	800f67a <_fflush_r+0x62>
 800f676:	68ac      	ldr	r4, [r5, #8]
 800f678:	e7df      	b.n	800f63a <_fflush_r+0x22>
 800f67a:	4b04      	ldr	r3, [pc, #16]	; (800f68c <_fflush_r+0x74>)
 800f67c:	429c      	cmp	r4, r3
 800f67e:	bf08      	it	eq
 800f680:	68ec      	ldreq	r4, [r5, #12]
 800f682:	e7da      	b.n	800f63a <_fflush_r+0x22>
 800f684:	08039674 	.word	0x08039674
 800f688:	08039694 	.word	0x08039694
 800f68c:	08039654 	.word	0x08039654

0800f690 <std>:
 800f690:	2300      	movs	r3, #0
 800f692:	b510      	push	{r4, lr}
 800f694:	4604      	mov	r4, r0
 800f696:	e9c0 3300 	strd	r3, r3, [r0]
 800f69a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f69e:	6083      	str	r3, [r0, #8]
 800f6a0:	8181      	strh	r1, [r0, #12]
 800f6a2:	6643      	str	r3, [r0, #100]	; 0x64
 800f6a4:	81c2      	strh	r2, [r0, #14]
 800f6a6:	6183      	str	r3, [r0, #24]
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	2208      	movs	r2, #8
 800f6ac:	305c      	adds	r0, #92	; 0x5c
 800f6ae:	f7fc fdc5 	bl	800c23c <memset>
 800f6b2:	4b05      	ldr	r3, [pc, #20]	; (800f6c8 <std+0x38>)
 800f6b4:	6263      	str	r3, [r4, #36]	; 0x24
 800f6b6:	4b05      	ldr	r3, [pc, #20]	; (800f6cc <std+0x3c>)
 800f6b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f6ba:	4b05      	ldr	r3, [pc, #20]	; (800f6d0 <std+0x40>)
 800f6bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f6be:	4b05      	ldr	r3, [pc, #20]	; (800f6d4 <std+0x44>)
 800f6c0:	6224      	str	r4, [r4, #32]
 800f6c2:	6323      	str	r3, [r4, #48]	; 0x30
 800f6c4:	bd10      	pop	{r4, pc}
 800f6c6:	bf00      	nop
 800f6c8:	0800d531 	.word	0x0800d531
 800f6cc:	0800d557 	.word	0x0800d557
 800f6d0:	0800d58f 	.word	0x0800d58f
 800f6d4:	0800d5b3 	.word	0x0800d5b3

0800f6d8 <_cleanup_r>:
 800f6d8:	4901      	ldr	r1, [pc, #4]	; (800f6e0 <_cleanup_r+0x8>)
 800f6da:	f000 b8af 	b.w	800f83c <_fwalk_reent>
 800f6de:	bf00      	nop
 800f6e0:	0800f619 	.word	0x0800f619

0800f6e4 <__sfmoreglue>:
 800f6e4:	b570      	push	{r4, r5, r6, lr}
 800f6e6:	2268      	movs	r2, #104	; 0x68
 800f6e8:	1e4d      	subs	r5, r1, #1
 800f6ea:	4355      	muls	r5, r2
 800f6ec:	460e      	mov	r6, r1
 800f6ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f6f2:	f7fd f889 	bl	800c808 <_malloc_r>
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	b140      	cbz	r0, 800f70c <__sfmoreglue+0x28>
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	e9c0 1600 	strd	r1, r6, [r0]
 800f700:	300c      	adds	r0, #12
 800f702:	60a0      	str	r0, [r4, #8]
 800f704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f708:	f7fc fd98 	bl	800c23c <memset>
 800f70c:	4620      	mov	r0, r4
 800f70e:	bd70      	pop	{r4, r5, r6, pc}

0800f710 <__sfp_lock_acquire>:
 800f710:	4801      	ldr	r0, [pc, #4]	; (800f718 <__sfp_lock_acquire+0x8>)
 800f712:	f000 b905 	b.w	800f920 <__retarget_lock_acquire_recursive>
 800f716:	bf00      	nop
 800f718:	20003a52 	.word	0x20003a52

0800f71c <__sfp_lock_release>:
 800f71c:	4801      	ldr	r0, [pc, #4]	; (800f724 <__sfp_lock_release+0x8>)
 800f71e:	f000 b901 	b.w	800f924 <__retarget_lock_release_recursive>
 800f722:	bf00      	nop
 800f724:	20003a52 	.word	0x20003a52

0800f728 <__sinit_lock_acquire>:
 800f728:	4801      	ldr	r0, [pc, #4]	; (800f730 <__sinit_lock_acquire+0x8>)
 800f72a:	f000 b8f9 	b.w	800f920 <__retarget_lock_acquire_recursive>
 800f72e:	bf00      	nop
 800f730:	20003a53 	.word	0x20003a53

0800f734 <__sinit_lock_release>:
 800f734:	4801      	ldr	r0, [pc, #4]	; (800f73c <__sinit_lock_release+0x8>)
 800f736:	f000 b8f5 	b.w	800f924 <__retarget_lock_release_recursive>
 800f73a:	bf00      	nop
 800f73c:	20003a53 	.word	0x20003a53

0800f740 <__sinit>:
 800f740:	b510      	push	{r4, lr}
 800f742:	4604      	mov	r4, r0
 800f744:	f7ff fff0 	bl	800f728 <__sinit_lock_acquire>
 800f748:	69a3      	ldr	r3, [r4, #24]
 800f74a:	b11b      	cbz	r3, 800f754 <__sinit+0x14>
 800f74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f750:	f7ff bff0 	b.w	800f734 <__sinit_lock_release>
 800f754:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f758:	6523      	str	r3, [r4, #80]	; 0x50
 800f75a:	4b13      	ldr	r3, [pc, #76]	; (800f7a8 <__sinit+0x68>)
 800f75c:	4a13      	ldr	r2, [pc, #76]	; (800f7ac <__sinit+0x6c>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	62a2      	str	r2, [r4, #40]	; 0x28
 800f762:	42a3      	cmp	r3, r4
 800f764:	bf04      	itt	eq
 800f766:	2301      	moveq	r3, #1
 800f768:	61a3      	streq	r3, [r4, #24]
 800f76a:	4620      	mov	r0, r4
 800f76c:	f000 f820 	bl	800f7b0 <__sfp>
 800f770:	6060      	str	r0, [r4, #4]
 800f772:	4620      	mov	r0, r4
 800f774:	f000 f81c 	bl	800f7b0 <__sfp>
 800f778:	60a0      	str	r0, [r4, #8]
 800f77a:	4620      	mov	r0, r4
 800f77c:	f000 f818 	bl	800f7b0 <__sfp>
 800f780:	2200      	movs	r2, #0
 800f782:	60e0      	str	r0, [r4, #12]
 800f784:	2104      	movs	r1, #4
 800f786:	6860      	ldr	r0, [r4, #4]
 800f788:	f7ff ff82 	bl	800f690 <std>
 800f78c:	68a0      	ldr	r0, [r4, #8]
 800f78e:	2201      	movs	r2, #1
 800f790:	2109      	movs	r1, #9
 800f792:	f7ff ff7d 	bl	800f690 <std>
 800f796:	68e0      	ldr	r0, [r4, #12]
 800f798:	2202      	movs	r2, #2
 800f79a:	2112      	movs	r1, #18
 800f79c:	f7ff ff78 	bl	800f690 <std>
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	61a3      	str	r3, [r4, #24]
 800f7a4:	e7d2      	b.n	800f74c <__sinit+0xc>
 800f7a6:	bf00      	nop
 800f7a8:	08039174 	.word	0x08039174
 800f7ac:	0800f6d9 	.word	0x0800f6d9

0800f7b0 <__sfp>:
 800f7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7b2:	4607      	mov	r7, r0
 800f7b4:	f7ff ffac 	bl	800f710 <__sfp_lock_acquire>
 800f7b8:	4b1e      	ldr	r3, [pc, #120]	; (800f834 <__sfp+0x84>)
 800f7ba:	681e      	ldr	r6, [r3, #0]
 800f7bc:	69b3      	ldr	r3, [r6, #24]
 800f7be:	b913      	cbnz	r3, 800f7c6 <__sfp+0x16>
 800f7c0:	4630      	mov	r0, r6
 800f7c2:	f7ff ffbd 	bl	800f740 <__sinit>
 800f7c6:	3648      	adds	r6, #72	; 0x48
 800f7c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	d503      	bpl.n	800f7d8 <__sfp+0x28>
 800f7d0:	6833      	ldr	r3, [r6, #0]
 800f7d2:	b30b      	cbz	r3, 800f818 <__sfp+0x68>
 800f7d4:	6836      	ldr	r6, [r6, #0]
 800f7d6:	e7f7      	b.n	800f7c8 <__sfp+0x18>
 800f7d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f7dc:	b9d5      	cbnz	r5, 800f814 <__sfp+0x64>
 800f7de:	4b16      	ldr	r3, [pc, #88]	; (800f838 <__sfp+0x88>)
 800f7e0:	60e3      	str	r3, [r4, #12]
 800f7e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f7e6:	6665      	str	r5, [r4, #100]	; 0x64
 800f7e8:	f000 f898 	bl	800f91c <__retarget_lock_init_recursive>
 800f7ec:	f7ff ff96 	bl	800f71c <__sfp_lock_release>
 800f7f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f7f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f7f8:	6025      	str	r5, [r4, #0]
 800f7fa:	61a5      	str	r5, [r4, #24]
 800f7fc:	2208      	movs	r2, #8
 800f7fe:	4629      	mov	r1, r5
 800f800:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f804:	f7fc fd1a 	bl	800c23c <memset>
 800f808:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f80c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f810:	4620      	mov	r0, r4
 800f812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f814:	3468      	adds	r4, #104	; 0x68
 800f816:	e7d9      	b.n	800f7cc <__sfp+0x1c>
 800f818:	2104      	movs	r1, #4
 800f81a:	4638      	mov	r0, r7
 800f81c:	f7ff ff62 	bl	800f6e4 <__sfmoreglue>
 800f820:	4604      	mov	r4, r0
 800f822:	6030      	str	r0, [r6, #0]
 800f824:	2800      	cmp	r0, #0
 800f826:	d1d5      	bne.n	800f7d4 <__sfp+0x24>
 800f828:	f7ff ff78 	bl	800f71c <__sfp_lock_release>
 800f82c:	230c      	movs	r3, #12
 800f82e:	603b      	str	r3, [r7, #0]
 800f830:	e7ee      	b.n	800f810 <__sfp+0x60>
 800f832:	bf00      	nop
 800f834:	08039174 	.word	0x08039174
 800f838:	ffff0001 	.word	0xffff0001

0800f83c <_fwalk_reent>:
 800f83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f840:	4606      	mov	r6, r0
 800f842:	4688      	mov	r8, r1
 800f844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f848:	2700      	movs	r7, #0
 800f84a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f84e:	f1b9 0901 	subs.w	r9, r9, #1
 800f852:	d505      	bpl.n	800f860 <_fwalk_reent+0x24>
 800f854:	6824      	ldr	r4, [r4, #0]
 800f856:	2c00      	cmp	r4, #0
 800f858:	d1f7      	bne.n	800f84a <_fwalk_reent+0xe>
 800f85a:	4638      	mov	r0, r7
 800f85c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f860:	89ab      	ldrh	r3, [r5, #12]
 800f862:	2b01      	cmp	r3, #1
 800f864:	d907      	bls.n	800f876 <_fwalk_reent+0x3a>
 800f866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f86a:	3301      	adds	r3, #1
 800f86c:	d003      	beq.n	800f876 <_fwalk_reent+0x3a>
 800f86e:	4629      	mov	r1, r5
 800f870:	4630      	mov	r0, r6
 800f872:	47c0      	blx	r8
 800f874:	4307      	orrs	r7, r0
 800f876:	3568      	adds	r5, #104	; 0x68
 800f878:	e7e9      	b.n	800f84e <_fwalk_reent+0x12>
	...

0800f87c <_findenv_r>:
 800f87c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f880:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800f8f0 <_findenv_r+0x74>
 800f884:	4607      	mov	r7, r0
 800f886:	4689      	mov	r9, r1
 800f888:	4616      	mov	r6, r2
 800f88a:	f001 facf 	bl	8010e2c <__env_lock>
 800f88e:	f8da 4000 	ldr.w	r4, [sl]
 800f892:	b134      	cbz	r4, 800f8a2 <_findenv_r+0x26>
 800f894:	464b      	mov	r3, r9
 800f896:	4698      	mov	r8, r3
 800f898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f89c:	b13a      	cbz	r2, 800f8ae <_findenv_r+0x32>
 800f89e:	2a3d      	cmp	r2, #61	; 0x3d
 800f8a0:	d1f9      	bne.n	800f896 <_findenv_r+0x1a>
 800f8a2:	4638      	mov	r0, r7
 800f8a4:	f001 fac8 	bl	8010e38 <__env_unlock>
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ae:	eba8 0809 	sub.w	r8, r8, r9
 800f8b2:	46a3      	mov	fp, r4
 800f8b4:	f854 0b04 	ldr.w	r0, [r4], #4
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	d0f2      	beq.n	800f8a2 <_findenv_r+0x26>
 800f8bc:	4642      	mov	r2, r8
 800f8be:	4649      	mov	r1, r9
 800f8c0:	f001 f9e2 	bl	8010c88 <strncmp>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d1f4      	bne.n	800f8b2 <_findenv_r+0x36>
 800f8c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f8cc:	eb03 0508 	add.w	r5, r3, r8
 800f8d0:	f813 3008 	ldrb.w	r3, [r3, r8]
 800f8d4:	2b3d      	cmp	r3, #61	; 0x3d
 800f8d6:	d1ec      	bne.n	800f8b2 <_findenv_r+0x36>
 800f8d8:	f8da 3000 	ldr.w	r3, [sl]
 800f8dc:	ebab 0303 	sub.w	r3, fp, r3
 800f8e0:	109b      	asrs	r3, r3, #2
 800f8e2:	4638      	mov	r0, r7
 800f8e4:	6033      	str	r3, [r6, #0]
 800f8e6:	f001 faa7 	bl	8010e38 <__env_unlock>
 800f8ea:	1c68      	adds	r0, r5, #1
 800f8ec:	e7dd      	b.n	800f8aa <_findenv_r+0x2e>
 800f8ee:	bf00      	nop
 800f8f0:	20000380 	.word	0x20000380

0800f8f4 <_getenv_r>:
 800f8f4:	b507      	push	{r0, r1, r2, lr}
 800f8f6:	aa01      	add	r2, sp, #4
 800f8f8:	f7ff ffc0 	bl	800f87c <_findenv_r>
 800f8fc:	b003      	add	sp, #12
 800f8fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f904 <__gettzinfo>:
 800f904:	4800      	ldr	r0, [pc, #0]	; (800f908 <__gettzinfo+0x4>)
 800f906:	4770      	bx	lr
 800f908:	20000328 	.word	0x20000328

0800f90c <labs>:
 800f90c:	2800      	cmp	r0, #0
 800f90e:	bfb8      	it	lt
 800f910:	4240      	neglt	r0, r0
 800f912:	4770      	bx	lr

0800f914 <_localeconv_r>:
 800f914:	4800      	ldr	r0, [pc, #0]	; (800f918 <_localeconv_r+0x4>)
 800f916:	4770      	bx	lr
 800f918:	20000474 	.word	0x20000474

0800f91c <__retarget_lock_init_recursive>:
 800f91c:	4770      	bx	lr

0800f91e <__retarget_lock_acquire>:
 800f91e:	4770      	bx	lr

0800f920 <__retarget_lock_acquire_recursive>:
 800f920:	4770      	bx	lr

0800f922 <__retarget_lock_release>:
 800f922:	4770      	bx	lr

0800f924 <__retarget_lock_release_recursive>:
 800f924:	4770      	bx	lr
	...

0800f928 <_lseek_r>:
 800f928:	b538      	push	{r3, r4, r5, lr}
 800f92a:	4d07      	ldr	r5, [pc, #28]	; (800f948 <_lseek_r+0x20>)
 800f92c:	4604      	mov	r4, r0
 800f92e:	4608      	mov	r0, r1
 800f930:	4611      	mov	r1, r2
 800f932:	2200      	movs	r2, #0
 800f934:	602a      	str	r2, [r5, #0]
 800f936:	461a      	mov	r2, r3
 800f938:	f003 ff34 	bl	80137a4 <_lseek>
 800f93c:	1c43      	adds	r3, r0, #1
 800f93e:	d102      	bne.n	800f946 <_lseek_r+0x1e>
 800f940:	682b      	ldr	r3, [r5, #0]
 800f942:	b103      	cbz	r3, 800f946 <_lseek_r+0x1e>
 800f944:	6023      	str	r3, [r4, #0]
 800f946:	bd38      	pop	{r3, r4, r5, pc}
 800f948:	20003a58 	.word	0x20003a58

0800f94c <__swhatbuf_r>:
 800f94c:	b570      	push	{r4, r5, r6, lr}
 800f94e:	460e      	mov	r6, r1
 800f950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f954:	2900      	cmp	r1, #0
 800f956:	b096      	sub	sp, #88	; 0x58
 800f958:	4614      	mov	r4, r2
 800f95a:	461d      	mov	r5, r3
 800f95c:	da08      	bge.n	800f970 <__swhatbuf_r+0x24>
 800f95e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f962:	2200      	movs	r2, #0
 800f964:	602a      	str	r2, [r5, #0]
 800f966:	061a      	lsls	r2, r3, #24
 800f968:	d410      	bmi.n	800f98c <__swhatbuf_r+0x40>
 800f96a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f96e:	e00e      	b.n	800f98e <__swhatbuf_r+0x42>
 800f970:	466a      	mov	r2, sp
 800f972:	f001 fa6d 	bl	8010e50 <_fstat_r>
 800f976:	2800      	cmp	r0, #0
 800f978:	dbf1      	blt.n	800f95e <__swhatbuf_r+0x12>
 800f97a:	9a01      	ldr	r2, [sp, #4]
 800f97c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f980:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f984:	425a      	negs	r2, r3
 800f986:	415a      	adcs	r2, r3
 800f988:	602a      	str	r2, [r5, #0]
 800f98a:	e7ee      	b.n	800f96a <__swhatbuf_r+0x1e>
 800f98c:	2340      	movs	r3, #64	; 0x40
 800f98e:	2000      	movs	r0, #0
 800f990:	6023      	str	r3, [r4, #0]
 800f992:	b016      	add	sp, #88	; 0x58
 800f994:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f998 <__smakebuf_r>:
 800f998:	898b      	ldrh	r3, [r1, #12]
 800f99a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f99c:	079d      	lsls	r5, r3, #30
 800f99e:	4606      	mov	r6, r0
 800f9a0:	460c      	mov	r4, r1
 800f9a2:	d507      	bpl.n	800f9b4 <__smakebuf_r+0x1c>
 800f9a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f9a8:	6023      	str	r3, [r4, #0]
 800f9aa:	6123      	str	r3, [r4, #16]
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	6163      	str	r3, [r4, #20]
 800f9b0:	b002      	add	sp, #8
 800f9b2:	bd70      	pop	{r4, r5, r6, pc}
 800f9b4:	ab01      	add	r3, sp, #4
 800f9b6:	466a      	mov	r2, sp
 800f9b8:	f7ff ffc8 	bl	800f94c <__swhatbuf_r>
 800f9bc:	9900      	ldr	r1, [sp, #0]
 800f9be:	4605      	mov	r5, r0
 800f9c0:	4630      	mov	r0, r6
 800f9c2:	f7fc ff21 	bl	800c808 <_malloc_r>
 800f9c6:	b948      	cbnz	r0, 800f9dc <__smakebuf_r+0x44>
 800f9c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9cc:	059a      	lsls	r2, r3, #22
 800f9ce:	d4ef      	bmi.n	800f9b0 <__smakebuf_r+0x18>
 800f9d0:	f023 0303 	bic.w	r3, r3, #3
 800f9d4:	f043 0302 	orr.w	r3, r3, #2
 800f9d8:	81a3      	strh	r3, [r4, #12]
 800f9da:	e7e3      	b.n	800f9a4 <__smakebuf_r+0xc>
 800f9dc:	4b0d      	ldr	r3, [pc, #52]	; (800fa14 <__smakebuf_r+0x7c>)
 800f9de:	62b3      	str	r3, [r6, #40]	; 0x28
 800f9e0:	89a3      	ldrh	r3, [r4, #12]
 800f9e2:	6020      	str	r0, [r4, #0]
 800f9e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9e8:	81a3      	strh	r3, [r4, #12]
 800f9ea:	9b00      	ldr	r3, [sp, #0]
 800f9ec:	6163      	str	r3, [r4, #20]
 800f9ee:	9b01      	ldr	r3, [sp, #4]
 800f9f0:	6120      	str	r0, [r4, #16]
 800f9f2:	b15b      	cbz	r3, 800fa0c <__smakebuf_r+0x74>
 800f9f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	f001 fa3b 	bl	8010e74 <_isatty_r>
 800f9fe:	b128      	cbz	r0, 800fa0c <__smakebuf_r+0x74>
 800fa00:	89a3      	ldrh	r3, [r4, #12]
 800fa02:	f023 0303 	bic.w	r3, r3, #3
 800fa06:	f043 0301 	orr.w	r3, r3, #1
 800fa0a:	81a3      	strh	r3, [r4, #12]
 800fa0c:	89a0      	ldrh	r0, [r4, #12]
 800fa0e:	4305      	orrs	r5, r0
 800fa10:	81a5      	strh	r5, [r4, #12]
 800fa12:	e7cd      	b.n	800f9b0 <__smakebuf_r+0x18>
 800fa14:	0800f6d9 	.word	0x0800f6d9

0800fa18 <memmove>:
 800fa18:	4288      	cmp	r0, r1
 800fa1a:	b510      	push	{r4, lr}
 800fa1c:	eb01 0402 	add.w	r4, r1, r2
 800fa20:	d902      	bls.n	800fa28 <memmove+0x10>
 800fa22:	4284      	cmp	r4, r0
 800fa24:	4623      	mov	r3, r4
 800fa26:	d807      	bhi.n	800fa38 <memmove+0x20>
 800fa28:	1e43      	subs	r3, r0, #1
 800fa2a:	42a1      	cmp	r1, r4
 800fa2c:	d008      	beq.n	800fa40 <memmove+0x28>
 800fa2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa36:	e7f8      	b.n	800fa2a <memmove+0x12>
 800fa38:	4402      	add	r2, r0
 800fa3a:	4601      	mov	r1, r0
 800fa3c:	428a      	cmp	r2, r1
 800fa3e:	d100      	bne.n	800fa42 <memmove+0x2a>
 800fa40:	bd10      	pop	{r4, pc}
 800fa42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa4a:	e7f7      	b.n	800fa3c <memmove+0x24>

0800fa4c <__malloc_lock>:
 800fa4c:	4801      	ldr	r0, [pc, #4]	; (800fa54 <__malloc_lock+0x8>)
 800fa4e:	f7ff bf67 	b.w	800f920 <__retarget_lock_acquire_recursive>
 800fa52:	bf00      	nop
 800fa54:	20003a51 	.word	0x20003a51

0800fa58 <__malloc_unlock>:
 800fa58:	4801      	ldr	r0, [pc, #4]	; (800fa60 <__malloc_unlock+0x8>)
 800fa5a:	f7ff bf63 	b.w	800f924 <__retarget_lock_release_recursive>
 800fa5e:	bf00      	nop
 800fa60:	20003a51 	.word	0x20003a51

0800fa64 <_Balloc>:
 800fa64:	b570      	push	{r4, r5, r6, lr}
 800fa66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fa68:	4604      	mov	r4, r0
 800fa6a:	460d      	mov	r5, r1
 800fa6c:	b976      	cbnz	r6, 800fa8c <_Balloc+0x28>
 800fa6e:	2010      	movs	r0, #16
 800fa70:	f7fc fbc6 	bl	800c200 <malloc>
 800fa74:	4602      	mov	r2, r0
 800fa76:	6260      	str	r0, [r4, #36]	; 0x24
 800fa78:	b920      	cbnz	r0, 800fa84 <_Balloc+0x20>
 800fa7a:	4b18      	ldr	r3, [pc, #96]	; (800fadc <_Balloc+0x78>)
 800fa7c:	4818      	ldr	r0, [pc, #96]	; (800fae0 <_Balloc+0x7c>)
 800fa7e:	2166      	movs	r1, #102	; 0x66
 800fa80:	f7fc fb6a 	bl	800c158 <__assert_func>
 800fa84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa88:	6006      	str	r6, [r0, #0]
 800fa8a:	60c6      	str	r6, [r0, #12]
 800fa8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fa8e:	68f3      	ldr	r3, [r6, #12]
 800fa90:	b183      	cbz	r3, 800fab4 <_Balloc+0x50>
 800fa92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa94:	68db      	ldr	r3, [r3, #12]
 800fa96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fa9a:	b9b8      	cbnz	r0, 800facc <_Balloc+0x68>
 800fa9c:	2101      	movs	r1, #1
 800fa9e:	fa01 f605 	lsl.w	r6, r1, r5
 800faa2:	1d72      	adds	r2, r6, #5
 800faa4:	0092      	lsls	r2, r2, #2
 800faa6:	4620      	mov	r0, r4
 800faa8:	f000 fb60 	bl	801016c <_calloc_r>
 800faac:	b160      	cbz	r0, 800fac8 <_Balloc+0x64>
 800faae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fab2:	e00e      	b.n	800fad2 <_Balloc+0x6e>
 800fab4:	2221      	movs	r2, #33	; 0x21
 800fab6:	2104      	movs	r1, #4
 800fab8:	4620      	mov	r0, r4
 800faba:	f000 fb57 	bl	801016c <_calloc_r>
 800fabe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fac0:	60f0      	str	r0, [r6, #12]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d1e4      	bne.n	800fa92 <_Balloc+0x2e>
 800fac8:	2000      	movs	r0, #0
 800faca:	bd70      	pop	{r4, r5, r6, pc}
 800facc:	6802      	ldr	r2, [r0, #0]
 800face:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fad2:	2300      	movs	r3, #0
 800fad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fad8:	e7f7      	b.n	800faca <_Balloc+0x66>
 800fada:	bf00      	nop
 800fadc:	0803906c 	.word	0x0803906c
 800fae0:	08039714 	.word	0x08039714

0800fae4 <_Bfree>:
 800fae4:	b570      	push	{r4, r5, r6, lr}
 800fae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fae8:	4605      	mov	r5, r0
 800faea:	460c      	mov	r4, r1
 800faec:	b976      	cbnz	r6, 800fb0c <_Bfree+0x28>
 800faee:	2010      	movs	r0, #16
 800faf0:	f7fc fb86 	bl	800c200 <malloc>
 800faf4:	4602      	mov	r2, r0
 800faf6:	6268      	str	r0, [r5, #36]	; 0x24
 800faf8:	b920      	cbnz	r0, 800fb04 <_Bfree+0x20>
 800fafa:	4b09      	ldr	r3, [pc, #36]	; (800fb20 <_Bfree+0x3c>)
 800fafc:	4809      	ldr	r0, [pc, #36]	; (800fb24 <_Bfree+0x40>)
 800fafe:	218a      	movs	r1, #138	; 0x8a
 800fb00:	f7fc fb2a 	bl	800c158 <__assert_func>
 800fb04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb08:	6006      	str	r6, [r0, #0]
 800fb0a:	60c6      	str	r6, [r0, #12]
 800fb0c:	b13c      	cbz	r4, 800fb1e <_Bfree+0x3a>
 800fb0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fb10:	6862      	ldr	r2, [r4, #4]
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb18:	6021      	str	r1, [r4, #0]
 800fb1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb1e:	bd70      	pop	{r4, r5, r6, pc}
 800fb20:	0803906c 	.word	0x0803906c
 800fb24:	08039714 	.word	0x08039714

0800fb28 <__multadd>:
 800fb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb2c:	690d      	ldr	r5, [r1, #16]
 800fb2e:	4607      	mov	r7, r0
 800fb30:	460c      	mov	r4, r1
 800fb32:	461e      	mov	r6, r3
 800fb34:	f101 0c14 	add.w	ip, r1, #20
 800fb38:	2000      	movs	r0, #0
 800fb3a:	f8dc 3000 	ldr.w	r3, [ip]
 800fb3e:	b299      	uxth	r1, r3
 800fb40:	fb02 6101 	mla	r1, r2, r1, r6
 800fb44:	0c1e      	lsrs	r6, r3, #16
 800fb46:	0c0b      	lsrs	r3, r1, #16
 800fb48:	fb02 3306 	mla	r3, r2, r6, r3
 800fb4c:	b289      	uxth	r1, r1
 800fb4e:	3001      	adds	r0, #1
 800fb50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fb54:	4285      	cmp	r5, r0
 800fb56:	f84c 1b04 	str.w	r1, [ip], #4
 800fb5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fb5e:	dcec      	bgt.n	800fb3a <__multadd+0x12>
 800fb60:	b30e      	cbz	r6, 800fba6 <__multadd+0x7e>
 800fb62:	68a3      	ldr	r3, [r4, #8]
 800fb64:	42ab      	cmp	r3, r5
 800fb66:	dc19      	bgt.n	800fb9c <__multadd+0x74>
 800fb68:	6861      	ldr	r1, [r4, #4]
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	3101      	adds	r1, #1
 800fb6e:	f7ff ff79 	bl	800fa64 <_Balloc>
 800fb72:	4680      	mov	r8, r0
 800fb74:	b928      	cbnz	r0, 800fb82 <__multadd+0x5a>
 800fb76:	4602      	mov	r2, r0
 800fb78:	4b0c      	ldr	r3, [pc, #48]	; (800fbac <__multadd+0x84>)
 800fb7a:	480d      	ldr	r0, [pc, #52]	; (800fbb0 <__multadd+0x88>)
 800fb7c:	21b5      	movs	r1, #181	; 0xb5
 800fb7e:	f7fc faeb 	bl	800c158 <__assert_func>
 800fb82:	6922      	ldr	r2, [r4, #16]
 800fb84:	3202      	adds	r2, #2
 800fb86:	f104 010c 	add.w	r1, r4, #12
 800fb8a:	0092      	lsls	r2, r2, #2
 800fb8c:	300c      	adds	r0, #12
 800fb8e:	f7fc fb47 	bl	800c220 <memcpy>
 800fb92:	4621      	mov	r1, r4
 800fb94:	4638      	mov	r0, r7
 800fb96:	f7ff ffa5 	bl	800fae4 <_Bfree>
 800fb9a:	4644      	mov	r4, r8
 800fb9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fba0:	3501      	adds	r5, #1
 800fba2:	615e      	str	r6, [r3, #20]
 800fba4:	6125      	str	r5, [r4, #16]
 800fba6:	4620      	mov	r0, r4
 800fba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbac:	08039641 	.word	0x08039641
 800fbb0:	08039714 	.word	0x08039714

0800fbb4 <__hi0bits>:
 800fbb4:	0c03      	lsrs	r3, r0, #16
 800fbb6:	041b      	lsls	r3, r3, #16
 800fbb8:	b9d3      	cbnz	r3, 800fbf0 <__hi0bits+0x3c>
 800fbba:	0400      	lsls	r0, r0, #16
 800fbbc:	2310      	movs	r3, #16
 800fbbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fbc2:	bf04      	itt	eq
 800fbc4:	0200      	lsleq	r0, r0, #8
 800fbc6:	3308      	addeq	r3, #8
 800fbc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fbcc:	bf04      	itt	eq
 800fbce:	0100      	lsleq	r0, r0, #4
 800fbd0:	3304      	addeq	r3, #4
 800fbd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fbd6:	bf04      	itt	eq
 800fbd8:	0080      	lsleq	r0, r0, #2
 800fbda:	3302      	addeq	r3, #2
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	db05      	blt.n	800fbec <__hi0bits+0x38>
 800fbe0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fbe4:	f103 0301 	add.w	r3, r3, #1
 800fbe8:	bf08      	it	eq
 800fbea:	2320      	moveq	r3, #32
 800fbec:	4618      	mov	r0, r3
 800fbee:	4770      	bx	lr
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	e7e4      	b.n	800fbbe <__hi0bits+0xa>

0800fbf4 <__lo0bits>:
 800fbf4:	6803      	ldr	r3, [r0, #0]
 800fbf6:	f013 0207 	ands.w	r2, r3, #7
 800fbfa:	4601      	mov	r1, r0
 800fbfc:	d00b      	beq.n	800fc16 <__lo0bits+0x22>
 800fbfe:	07da      	lsls	r2, r3, #31
 800fc00:	d423      	bmi.n	800fc4a <__lo0bits+0x56>
 800fc02:	0798      	lsls	r0, r3, #30
 800fc04:	bf49      	itett	mi
 800fc06:	085b      	lsrmi	r3, r3, #1
 800fc08:	089b      	lsrpl	r3, r3, #2
 800fc0a:	2001      	movmi	r0, #1
 800fc0c:	600b      	strmi	r3, [r1, #0]
 800fc0e:	bf5c      	itt	pl
 800fc10:	600b      	strpl	r3, [r1, #0]
 800fc12:	2002      	movpl	r0, #2
 800fc14:	4770      	bx	lr
 800fc16:	b298      	uxth	r0, r3
 800fc18:	b9a8      	cbnz	r0, 800fc46 <__lo0bits+0x52>
 800fc1a:	0c1b      	lsrs	r3, r3, #16
 800fc1c:	2010      	movs	r0, #16
 800fc1e:	b2da      	uxtb	r2, r3
 800fc20:	b90a      	cbnz	r2, 800fc26 <__lo0bits+0x32>
 800fc22:	3008      	adds	r0, #8
 800fc24:	0a1b      	lsrs	r3, r3, #8
 800fc26:	071a      	lsls	r2, r3, #28
 800fc28:	bf04      	itt	eq
 800fc2a:	091b      	lsreq	r3, r3, #4
 800fc2c:	3004      	addeq	r0, #4
 800fc2e:	079a      	lsls	r2, r3, #30
 800fc30:	bf04      	itt	eq
 800fc32:	089b      	lsreq	r3, r3, #2
 800fc34:	3002      	addeq	r0, #2
 800fc36:	07da      	lsls	r2, r3, #31
 800fc38:	d403      	bmi.n	800fc42 <__lo0bits+0x4e>
 800fc3a:	085b      	lsrs	r3, r3, #1
 800fc3c:	f100 0001 	add.w	r0, r0, #1
 800fc40:	d005      	beq.n	800fc4e <__lo0bits+0x5a>
 800fc42:	600b      	str	r3, [r1, #0]
 800fc44:	4770      	bx	lr
 800fc46:	4610      	mov	r0, r2
 800fc48:	e7e9      	b.n	800fc1e <__lo0bits+0x2a>
 800fc4a:	2000      	movs	r0, #0
 800fc4c:	4770      	bx	lr
 800fc4e:	2020      	movs	r0, #32
 800fc50:	4770      	bx	lr
	...

0800fc54 <__i2b>:
 800fc54:	b510      	push	{r4, lr}
 800fc56:	460c      	mov	r4, r1
 800fc58:	2101      	movs	r1, #1
 800fc5a:	f7ff ff03 	bl	800fa64 <_Balloc>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	b928      	cbnz	r0, 800fc6e <__i2b+0x1a>
 800fc62:	4b05      	ldr	r3, [pc, #20]	; (800fc78 <__i2b+0x24>)
 800fc64:	4805      	ldr	r0, [pc, #20]	; (800fc7c <__i2b+0x28>)
 800fc66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fc6a:	f7fc fa75 	bl	800c158 <__assert_func>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	6144      	str	r4, [r0, #20]
 800fc72:	6103      	str	r3, [r0, #16]
 800fc74:	bd10      	pop	{r4, pc}
 800fc76:	bf00      	nop
 800fc78:	08039641 	.word	0x08039641
 800fc7c:	08039714 	.word	0x08039714

0800fc80 <__multiply>:
 800fc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc84:	4691      	mov	r9, r2
 800fc86:	690a      	ldr	r2, [r1, #16]
 800fc88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	bfb8      	it	lt
 800fc90:	460b      	movlt	r3, r1
 800fc92:	460c      	mov	r4, r1
 800fc94:	bfbc      	itt	lt
 800fc96:	464c      	movlt	r4, r9
 800fc98:	4699      	movlt	r9, r3
 800fc9a:	6927      	ldr	r7, [r4, #16]
 800fc9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fca0:	68a3      	ldr	r3, [r4, #8]
 800fca2:	6861      	ldr	r1, [r4, #4]
 800fca4:	eb07 060a 	add.w	r6, r7, sl
 800fca8:	42b3      	cmp	r3, r6
 800fcaa:	b085      	sub	sp, #20
 800fcac:	bfb8      	it	lt
 800fcae:	3101      	addlt	r1, #1
 800fcb0:	f7ff fed8 	bl	800fa64 <_Balloc>
 800fcb4:	b930      	cbnz	r0, 800fcc4 <__multiply+0x44>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	4b44      	ldr	r3, [pc, #272]	; (800fdcc <__multiply+0x14c>)
 800fcba:	4845      	ldr	r0, [pc, #276]	; (800fdd0 <__multiply+0x150>)
 800fcbc:	f240 115d 	movw	r1, #349	; 0x15d
 800fcc0:	f7fc fa4a 	bl	800c158 <__assert_func>
 800fcc4:	f100 0514 	add.w	r5, r0, #20
 800fcc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fccc:	462b      	mov	r3, r5
 800fcce:	2200      	movs	r2, #0
 800fcd0:	4543      	cmp	r3, r8
 800fcd2:	d321      	bcc.n	800fd18 <__multiply+0x98>
 800fcd4:	f104 0314 	add.w	r3, r4, #20
 800fcd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fcdc:	f109 0314 	add.w	r3, r9, #20
 800fce0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fce4:	9202      	str	r2, [sp, #8]
 800fce6:	1b3a      	subs	r2, r7, r4
 800fce8:	3a15      	subs	r2, #21
 800fcea:	f022 0203 	bic.w	r2, r2, #3
 800fcee:	3204      	adds	r2, #4
 800fcf0:	f104 0115 	add.w	r1, r4, #21
 800fcf4:	428f      	cmp	r7, r1
 800fcf6:	bf38      	it	cc
 800fcf8:	2204      	movcc	r2, #4
 800fcfa:	9201      	str	r2, [sp, #4]
 800fcfc:	9a02      	ldr	r2, [sp, #8]
 800fcfe:	9303      	str	r3, [sp, #12]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d80c      	bhi.n	800fd1e <__multiply+0x9e>
 800fd04:	2e00      	cmp	r6, #0
 800fd06:	dd03      	ble.n	800fd10 <__multiply+0x90>
 800fd08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d05a      	beq.n	800fdc6 <__multiply+0x146>
 800fd10:	6106      	str	r6, [r0, #16]
 800fd12:	b005      	add	sp, #20
 800fd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd18:	f843 2b04 	str.w	r2, [r3], #4
 800fd1c:	e7d8      	b.n	800fcd0 <__multiply+0x50>
 800fd1e:	f8b3 a000 	ldrh.w	sl, [r3]
 800fd22:	f1ba 0f00 	cmp.w	sl, #0
 800fd26:	d024      	beq.n	800fd72 <__multiply+0xf2>
 800fd28:	f104 0e14 	add.w	lr, r4, #20
 800fd2c:	46a9      	mov	r9, r5
 800fd2e:	f04f 0c00 	mov.w	ip, #0
 800fd32:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fd36:	f8d9 1000 	ldr.w	r1, [r9]
 800fd3a:	fa1f fb82 	uxth.w	fp, r2
 800fd3e:	b289      	uxth	r1, r1
 800fd40:	fb0a 110b 	mla	r1, sl, fp, r1
 800fd44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fd48:	f8d9 2000 	ldr.w	r2, [r9]
 800fd4c:	4461      	add	r1, ip
 800fd4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fd52:	fb0a c20b 	mla	r2, sl, fp, ip
 800fd56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fd5a:	b289      	uxth	r1, r1
 800fd5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fd60:	4577      	cmp	r7, lr
 800fd62:	f849 1b04 	str.w	r1, [r9], #4
 800fd66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fd6a:	d8e2      	bhi.n	800fd32 <__multiply+0xb2>
 800fd6c:	9a01      	ldr	r2, [sp, #4]
 800fd6e:	f845 c002 	str.w	ip, [r5, r2]
 800fd72:	9a03      	ldr	r2, [sp, #12]
 800fd74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fd78:	3304      	adds	r3, #4
 800fd7a:	f1b9 0f00 	cmp.w	r9, #0
 800fd7e:	d020      	beq.n	800fdc2 <__multiply+0x142>
 800fd80:	6829      	ldr	r1, [r5, #0]
 800fd82:	f104 0c14 	add.w	ip, r4, #20
 800fd86:	46ae      	mov	lr, r5
 800fd88:	f04f 0a00 	mov.w	sl, #0
 800fd8c:	f8bc b000 	ldrh.w	fp, [ip]
 800fd90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fd94:	fb09 220b 	mla	r2, r9, fp, r2
 800fd98:	4492      	add	sl, r2
 800fd9a:	b289      	uxth	r1, r1
 800fd9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fda0:	f84e 1b04 	str.w	r1, [lr], #4
 800fda4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fda8:	f8be 1000 	ldrh.w	r1, [lr]
 800fdac:	0c12      	lsrs	r2, r2, #16
 800fdae:	fb09 1102 	mla	r1, r9, r2, r1
 800fdb2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fdb6:	4567      	cmp	r7, ip
 800fdb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fdbc:	d8e6      	bhi.n	800fd8c <__multiply+0x10c>
 800fdbe:	9a01      	ldr	r2, [sp, #4]
 800fdc0:	50a9      	str	r1, [r5, r2]
 800fdc2:	3504      	adds	r5, #4
 800fdc4:	e79a      	b.n	800fcfc <__multiply+0x7c>
 800fdc6:	3e01      	subs	r6, #1
 800fdc8:	e79c      	b.n	800fd04 <__multiply+0x84>
 800fdca:	bf00      	nop
 800fdcc:	08039641 	.word	0x08039641
 800fdd0:	08039714 	.word	0x08039714

0800fdd4 <__pow5mult>:
 800fdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdd8:	4615      	mov	r5, r2
 800fdda:	f012 0203 	ands.w	r2, r2, #3
 800fdde:	4606      	mov	r6, r0
 800fde0:	460f      	mov	r7, r1
 800fde2:	d007      	beq.n	800fdf4 <__pow5mult+0x20>
 800fde4:	4c25      	ldr	r4, [pc, #148]	; (800fe7c <__pow5mult+0xa8>)
 800fde6:	3a01      	subs	r2, #1
 800fde8:	2300      	movs	r3, #0
 800fdea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fdee:	f7ff fe9b 	bl	800fb28 <__multadd>
 800fdf2:	4607      	mov	r7, r0
 800fdf4:	10ad      	asrs	r5, r5, #2
 800fdf6:	d03d      	beq.n	800fe74 <__pow5mult+0xa0>
 800fdf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fdfa:	b97c      	cbnz	r4, 800fe1c <__pow5mult+0x48>
 800fdfc:	2010      	movs	r0, #16
 800fdfe:	f7fc f9ff 	bl	800c200 <malloc>
 800fe02:	4602      	mov	r2, r0
 800fe04:	6270      	str	r0, [r6, #36]	; 0x24
 800fe06:	b928      	cbnz	r0, 800fe14 <__pow5mult+0x40>
 800fe08:	4b1d      	ldr	r3, [pc, #116]	; (800fe80 <__pow5mult+0xac>)
 800fe0a:	481e      	ldr	r0, [pc, #120]	; (800fe84 <__pow5mult+0xb0>)
 800fe0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fe10:	f7fc f9a2 	bl	800c158 <__assert_func>
 800fe14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe18:	6004      	str	r4, [r0, #0]
 800fe1a:	60c4      	str	r4, [r0, #12]
 800fe1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fe20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe24:	b94c      	cbnz	r4, 800fe3a <__pow5mult+0x66>
 800fe26:	f240 2171 	movw	r1, #625	; 0x271
 800fe2a:	4630      	mov	r0, r6
 800fe2c:	f7ff ff12 	bl	800fc54 <__i2b>
 800fe30:	2300      	movs	r3, #0
 800fe32:	f8c8 0008 	str.w	r0, [r8, #8]
 800fe36:	4604      	mov	r4, r0
 800fe38:	6003      	str	r3, [r0, #0]
 800fe3a:	f04f 0900 	mov.w	r9, #0
 800fe3e:	07eb      	lsls	r3, r5, #31
 800fe40:	d50a      	bpl.n	800fe58 <__pow5mult+0x84>
 800fe42:	4639      	mov	r1, r7
 800fe44:	4622      	mov	r2, r4
 800fe46:	4630      	mov	r0, r6
 800fe48:	f7ff ff1a 	bl	800fc80 <__multiply>
 800fe4c:	4639      	mov	r1, r7
 800fe4e:	4680      	mov	r8, r0
 800fe50:	4630      	mov	r0, r6
 800fe52:	f7ff fe47 	bl	800fae4 <_Bfree>
 800fe56:	4647      	mov	r7, r8
 800fe58:	106d      	asrs	r5, r5, #1
 800fe5a:	d00b      	beq.n	800fe74 <__pow5mult+0xa0>
 800fe5c:	6820      	ldr	r0, [r4, #0]
 800fe5e:	b938      	cbnz	r0, 800fe70 <__pow5mult+0x9c>
 800fe60:	4622      	mov	r2, r4
 800fe62:	4621      	mov	r1, r4
 800fe64:	4630      	mov	r0, r6
 800fe66:	f7ff ff0b 	bl	800fc80 <__multiply>
 800fe6a:	6020      	str	r0, [r4, #0]
 800fe6c:	f8c0 9000 	str.w	r9, [r0]
 800fe70:	4604      	mov	r4, r0
 800fe72:	e7e4      	b.n	800fe3e <__pow5mult+0x6a>
 800fe74:	4638      	mov	r0, r7
 800fe76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe7a:	bf00      	nop
 800fe7c:	08039860 	.word	0x08039860
 800fe80:	0803906c 	.word	0x0803906c
 800fe84:	08039714 	.word	0x08039714

0800fe88 <__lshift>:
 800fe88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe8c:	460c      	mov	r4, r1
 800fe8e:	6849      	ldr	r1, [r1, #4]
 800fe90:	6923      	ldr	r3, [r4, #16]
 800fe92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fe96:	68a3      	ldr	r3, [r4, #8]
 800fe98:	4607      	mov	r7, r0
 800fe9a:	4691      	mov	r9, r2
 800fe9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fea0:	f108 0601 	add.w	r6, r8, #1
 800fea4:	42b3      	cmp	r3, r6
 800fea6:	db0b      	blt.n	800fec0 <__lshift+0x38>
 800fea8:	4638      	mov	r0, r7
 800feaa:	f7ff fddb 	bl	800fa64 <_Balloc>
 800feae:	4605      	mov	r5, r0
 800feb0:	b948      	cbnz	r0, 800fec6 <__lshift+0x3e>
 800feb2:	4602      	mov	r2, r0
 800feb4:	4b2a      	ldr	r3, [pc, #168]	; (800ff60 <__lshift+0xd8>)
 800feb6:	482b      	ldr	r0, [pc, #172]	; (800ff64 <__lshift+0xdc>)
 800feb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800febc:	f7fc f94c 	bl	800c158 <__assert_func>
 800fec0:	3101      	adds	r1, #1
 800fec2:	005b      	lsls	r3, r3, #1
 800fec4:	e7ee      	b.n	800fea4 <__lshift+0x1c>
 800fec6:	2300      	movs	r3, #0
 800fec8:	f100 0114 	add.w	r1, r0, #20
 800fecc:	f100 0210 	add.w	r2, r0, #16
 800fed0:	4618      	mov	r0, r3
 800fed2:	4553      	cmp	r3, sl
 800fed4:	db37      	blt.n	800ff46 <__lshift+0xbe>
 800fed6:	6920      	ldr	r0, [r4, #16]
 800fed8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fedc:	f104 0314 	add.w	r3, r4, #20
 800fee0:	f019 091f 	ands.w	r9, r9, #31
 800fee4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fee8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800feec:	d02f      	beq.n	800ff4e <__lshift+0xc6>
 800feee:	f1c9 0e20 	rsb	lr, r9, #32
 800fef2:	468a      	mov	sl, r1
 800fef4:	f04f 0c00 	mov.w	ip, #0
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	fa02 f209 	lsl.w	r2, r2, r9
 800fefe:	ea42 020c 	orr.w	r2, r2, ip
 800ff02:	f84a 2b04 	str.w	r2, [sl], #4
 800ff06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff0a:	4298      	cmp	r0, r3
 800ff0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ff10:	d8f2      	bhi.n	800fef8 <__lshift+0x70>
 800ff12:	1b03      	subs	r3, r0, r4
 800ff14:	3b15      	subs	r3, #21
 800ff16:	f023 0303 	bic.w	r3, r3, #3
 800ff1a:	3304      	adds	r3, #4
 800ff1c:	f104 0215 	add.w	r2, r4, #21
 800ff20:	4290      	cmp	r0, r2
 800ff22:	bf38      	it	cc
 800ff24:	2304      	movcc	r3, #4
 800ff26:	f841 c003 	str.w	ip, [r1, r3]
 800ff2a:	f1bc 0f00 	cmp.w	ip, #0
 800ff2e:	d001      	beq.n	800ff34 <__lshift+0xac>
 800ff30:	f108 0602 	add.w	r6, r8, #2
 800ff34:	3e01      	subs	r6, #1
 800ff36:	4638      	mov	r0, r7
 800ff38:	612e      	str	r6, [r5, #16]
 800ff3a:	4621      	mov	r1, r4
 800ff3c:	f7ff fdd2 	bl	800fae4 <_Bfree>
 800ff40:	4628      	mov	r0, r5
 800ff42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff46:	f842 0f04 	str.w	r0, [r2, #4]!
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	e7c1      	b.n	800fed2 <__lshift+0x4a>
 800ff4e:	3904      	subs	r1, #4
 800ff50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff54:	f841 2f04 	str.w	r2, [r1, #4]!
 800ff58:	4298      	cmp	r0, r3
 800ff5a:	d8f9      	bhi.n	800ff50 <__lshift+0xc8>
 800ff5c:	e7ea      	b.n	800ff34 <__lshift+0xac>
 800ff5e:	bf00      	nop
 800ff60:	08039641 	.word	0x08039641
 800ff64:	08039714 	.word	0x08039714

0800ff68 <__mcmp>:
 800ff68:	b530      	push	{r4, r5, lr}
 800ff6a:	6902      	ldr	r2, [r0, #16]
 800ff6c:	690c      	ldr	r4, [r1, #16]
 800ff6e:	1b12      	subs	r2, r2, r4
 800ff70:	d10e      	bne.n	800ff90 <__mcmp+0x28>
 800ff72:	f100 0314 	add.w	r3, r0, #20
 800ff76:	3114      	adds	r1, #20
 800ff78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ff7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ff80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ff84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ff88:	42a5      	cmp	r5, r4
 800ff8a:	d003      	beq.n	800ff94 <__mcmp+0x2c>
 800ff8c:	d305      	bcc.n	800ff9a <__mcmp+0x32>
 800ff8e:	2201      	movs	r2, #1
 800ff90:	4610      	mov	r0, r2
 800ff92:	bd30      	pop	{r4, r5, pc}
 800ff94:	4283      	cmp	r3, r0
 800ff96:	d3f3      	bcc.n	800ff80 <__mcmp+0x18>
 800ff98:	e7fa      	b.n	800ff90 <__mcmp+0x28>
 800ff9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ff9e:	e7f7      	b.n	800ff90 <__mcmp+0x28>

0800ffa0 <__mdiff>:
 800ffa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa4:	460c      	mov	r4, r1
 800ffa6:	4606      	mov	r6, r0
 800ffa8:	4611      	mov	r1, r2
 800ffaa:	4620      	mov	r0, r4
 800ffac:	4690      	mov	r8, r2
 800ffae:	f7ff ffdb 	bl	800ff68 <__mcmp>
 800ffb2:	1e05      	subs	r5, r0, #0
 800ffb4:	d110      	bne.n	800ffd8 <__mdiff+0x38>
 800ffb6:	4629      	mov	r1, r5
 800ffb8:	4630      	mov	r0, r6
 800ffba:	f7ff fd53 	bl	800fa64 <_Balloc>
 800ffbe:	b930      	cbnz	r0, 800ffce <__mdiff+0x2e>
 800ffc0:	4b3a      	ldr	r3, [pc, #232]	; (80100ac <__mdiff+0x10c>)
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	f240 2132 	movw	r1, #562	; 0x232
 800ffc8:	4839      	ldr	r0, [pc, #228]	; (80100b0 <__mdiff+0x110>)
 800ffca:	f7fc f8c5 	bl	800c158 <__assert_func>
 800ffce:	2301      	movs	r3, #1
 800ffd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ffd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd8:	bfa4      	itt	ge
 800ffda:	4643      	movge	r3, r8
 800ffdc:	46a0      	movge	r8, r4
 800ffde:	4630      	mov	r0, r6
 800ffe0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ffe4:	bfa6      	itte	ge
 800ffe6:	461c      	movge	r4, r3
 800ffe8:	2500      	movge	r5, #0
 800ffea:	2501      	movlt	r5, #1
 800ffec:	f7ff fd3a 	bl	800fa64 <_Balloc>
 800fff0:	b920      	cbnz	r0, 800fffc <__mdiff+0x5c>
 800fff2:	4b2e      	ldr	r3, [pc, #184]	; (80100ac <__mdiff+0x10c>)
 800fff4:	4602      	mov	r2, r0
 800fff6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fffa:	e7e5      	b.n	800ffc8 <__mdiff+0x28>
 800fffc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010000:	6926      	ldr	r6, [r4, #16]
 8010002:	60c5      	str	r5, [r0, #12]
 8010004:	f104 0914 	add.w	r9, r4, #20
 8010008:	f108 0514 	add.w	r5, r8, #20
 801000c:	f100 0e14 	add.w	lr, r0, #20
 8010010:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010014:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010018:	f108 0210 	add.w	r2, r8, #16
 801001c:	46f2      	mov	sl, lr
 801001e:	2100      	movs	r1, #0
 8010020:	f859 3b04 	ldr.w	r3, [r9], #4
 8010024:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010028:	fa1f f883 	uxth.w	r8, r3
 801002c:	fa11 f18b 	uxtah	r1, r1, fp
 8010030:	0c1b      	lsrs	r3, r3, #16
 8010032:	eba1 0808 	sub.w	r8, r1, r8
 8010036:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801003a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801003e:	fa1f f888 	uxth.w	r8, r8
 8010042:	1419      	asrs	r1, r3, #16
 8010044:	454e      	cmp	r6, r9
 8010046:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801004a:	f84a 3b04 	str.w	r3, [sl], #4
 801004e:	d8e7      	bhi.n	8010020 <__mdiff+0x80>
 8010050:	1b33      	subs	r3, r6, r4
 8010052:	3b15      	subs	r3, #21
 8010054:	f023 0303 	bic.w	r3, r3, #3
 8010058:	3304      	adds	r3, #4
 801005a:	3415      	adds	r4, #21
 801005c:	42a6      	cmp	r6, r4
 801005e:	bf38      	it	cc
 8010060:	2304      	movcc	r3, #4
 8010062:	441d      	add	r5, r3
 8010064:	4473      	add	r3, lr
 8010066:	469e      	mov	lr, r3
 8010068:	462e      	mov	r6, r5
 801006a:	4566      	cmp	r6, ip
 801006c:	d30e      	bcc.n	801008c <__mdiff+0xec>
 801006e:	f10c 0203 	add.w	r2, ip, #3
 8010072:	1b52      	subs	r2, r2, r5
 8010074:	f022 0203 	bic.w	r2, r2, #3
 8010078:	3d03      	subs	r5, #3
 801007a:	45ac      	cmp	ip, r5
 801007c:	bf38      	it	cc
 801007e:	2200      	movcc	r2, #0
 8010080:	441a      	add	r2, r3
 8010082:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010086:	b17b      	cbz	r3, 80100a8 <__mdiff+0x108>
 8010088:	6107      	str	r7, [r0, #16]
 801008a:	e7a3      	b.n	800ffd4 <__mdiff+0x34>
 801008c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010090:	fa11 f288 	uxtah	r2, r1, r8
 8010094:	1414      	asrs	r4, r2, #16
 8010096:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801009a:	b292      	uxth	r2, r2
 801009c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80100a0:	f84e 2b04 	str.w	r2, [lr], #4
 80100a4:	1421      	asrs	r1, r4, #16
 80100a6:	e7e0      	b.n	801006a <__mdiff+0xca>
 80100a8:	3f01      	subs	r7, #1
 80100aa:	e7ea      	b.n	8010082 <__mdiff+0xe2>
 80100ac:	08039641 	.word	0x08039641
 80100b0:	08039714 	.word	0x08039714

080100b4 <__d2b>:
 80100b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80100b8:	4689      	mov	r9, r1
 80100ba:	2101      	movs	r1, #1
 80100bc:	ec57 6b10 	vmov	r6, r7, d0
 80100c0:	4690      	mov	r8, r2
 80100c2:	f7ff fccf 	bl	800fa64 <_Balloc>
 80100c6:	4604      	mov	r4, r0
 80100c8:	b930      	cbnz	r0, 80100d8 <__d2b+0x24>
 80100ca:	4602      	mov	r2, r0
 80100cc:	4b25      	ldr	r3, [pc, #148]	; (8010164 <__d2b+0xb0>)
 80100ce:	4826      	ldr	r0, [pc, #152]	; (8010168 <__d2b+0xb4>)
 80100d0:	f240 310a 	movw	r1, #778	; 0x30a
 80100d4:	f7fc f840 	bl	800c158 <__assert_func>
 80100d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80100dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80100e0:	bb35      	cbnz	r5, 8010130 <__d2b+0x7c>
 80100e2:	2e00      	cmp	r6, #0
 80100e4:	9301      	str	r3, [sp, #4]
 80100e6:	d028      	beq.n	801013a <__d2b+0x86>
 80100e8:	4668      	mov	r0, sp
 80100ea:	9600      	str	r6, [sp, #0]
 80100ec:	f7ff fd82 	bl	800fbf4 <__lo0bits>
 80100f0:	9900      	ldr	r1, [sp, #0]
 80100f2:	b300      	cbz	r0, 8010136 <__d2b+0x82>
 80100f4:	9a01      	ldr	r2, [sp, #4]
 80100f6:	f1c0 0320 	rsb	r3, r0, #32
 80100fa:	fa02 f303 	lsl.w	r3, r2, r3
 80100fe:	430b      	orrs	r3, r1
 8010100:	40c2      	lsrs	r2, r0
 8010102:	6163      	str	r3, [r4, #20]
 8010104:	9201      	str	r2, [sp, #4]
 8010106:	9b01      	ldr	r3, [sp, #4]
 8010108:	61a3      	str	r3, [r4, #24]
 801010a:	2b00      	cmp	r3, #0
 801010c:	bf14      	ite	ne
 801010e:	2202      	movne	r2, #2
 8010110:	2201      	moveq	r2, #1
 8010112:	6122      	str	r2, [r4, #16]
 8010114:	b1d5      	cbz	r5, 801014c <__d2b+0x98>
 8010116:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801011a:	4405      	add	r5, r0
 801011c:	f8c9 5000 	str.w	r5, [r9]
 8010120:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010124:	f8c8 0000 	str.w	r0, [r8]
 8010128:	4620      	mov	r0, r4
 801012a:	b003      	add	sp, #12
 801012c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010134:	e7d5      	b.n	80100e2 <__d2b+0x2e>
 8010136:	6161      	str	r1, [r4, #20]
 8010138:	e7e5      	b.n	8010106 <__d2b+0x52>
 801013a:	a801      	add	r0, sp, #4
 801013c:	f7ff fd5a 	bl	800fbf4 <__lo0bits>
 8010140:	9b01      	ldr	r3, [sp, #4]
 8010142:	6163      	str	r3, [r4, #20]
 8010144:	2201      	movs	r2, #1
 8010146:	6122      	str	r2, [r4, #16]
 8010148:	3020      	adds	r0, #32
 801014a:	e7e3      	b.n	8010114 <__d2b+0x60>
 801014c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010150:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010154:	f8c9 0000 	str.w	r0, [r9]
 8010158:	6918      	ldr	r0, [r3, #16]
 801015a:	f7ff fd2b 	bl	800fbb4 <__hi0bits>
 801015e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010162:	e7df      	b.n	8010124 <__d2b+0x70>
 8010164:	08039641 	.word	0x08039641
 8010168:	08039714 	.word	0x08039714

0801016c <_calloc_r>:
 801016c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801016e:	fba1 2402 	umull	r2, r4, r1, r2
 8010172:	b94c      	cbnz	r4, 8010188 <_calloc_r+0x1c>
 8010174:	4611      	mov	r1, r2
 8010176:	9201      	str	r2, [sp, #4]
 8010178:	f7fc fb46 	bl	800c808 <_malloc_r>
 801017c:	9a01      	ldr	r2, [sp, #4]
 801017e:	4605      	mov	r5, r0
 8010180:	b930      	cbnz	r0, 8010190 <_calloc_r+0x24>
 8010182:	4628      	mov	r0, r5
 8010184:	b003      	add	sp, #12
 8010186:	bd30      	pop	{r4, r5, pc}
 8010188:	220c      	movs	r2, #12
 801018a:	6002      	str	r2, [r0, #0]
 801018c:	2500      	movs	r5, #0
 801018e:	e7f8      	b.n	8010182 <_calloc_r+0x16>
 8010190:	4621      	mov	r1, r4
 8010192:	f7fc f853 	bl	800c23c <memset>
 8010196:	e7f4      	b.n	8010182 <_calloc_r+0x16>

08010198 <_realloc_r>:
 8010198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801019c:	4680      	mov	r8, r0
 801019e:	4614      	mov	r4, r2
 80101a0:	460e      	mov	r6, r1
 80101a2:	b921      	cbnz	r1, 80101ae <_realloc_r+0x16>
 80101a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101a8:	4611      	mov	r1, r2
 80101aa:	f7fc bb2d 	b.w	800c808 <_malloc_r>
 80101ae:	b92a      	cbnz	r2, 80101bc <_realloc_r+0x24>
 80101b0:	f7fc fabe 	bl	800c730 <_free_r>
 80101b4:	4625      	mov	r5, r4
 80101b6:	4628      	mov	r0, r5
 80101b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101bc:	f000 fe7c 	bl	8010eb8 <_malloc_usable_size_r>
 80101c0:	4284      	cmp	r4, r0
 80101c2:	4607      	mov	r7, r0
 80101c4:	d802      	bhi.n	80101cc <_realloc_r+0x34>
 80101c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80101ca:	d812      	bhi.n	80101f2 <_realloc_r+0x5a>
 80101cc:	4621      	mov	r1, r4
 80101ce:	4640      	mov	r0, r8
 80101d0:	f7fc fb1a 	bl	800c808 <_malloc_r>
 80101d4:	4605      	mov	r5, r0
 80101d6:	2800      	cmp	r0, #0
 80101d8:	d0ed      	beq.n	80101b6 <_realloc_r+0x1e>
 80101da:	42bc      	cmp	r4, r7
 80101dc:	4622      	mov	r2, r4
 80101de:	4631      	mov	r1, r6
 80101e0:	bf28      	it	cs
 80101e2:	463a      	movcs	r2, r7
 80101e4:	f7fc f81c 	bl	800c220 <memcpy>
 80101e8:	4631      	mov	r1, r6
 80101ea:	4640      	mov	r0, r8
 80101ec:	f7fc faa0 	bl	800c730 <_free_r>
 80101f0:	e7e1      	b.n	80101b6 <_realloc_r+0x1e>
 80101f2:	4635      	mov	r5, r6
 80101f4:	e7df      	b.n	80101b6 <_realloc_r+0x1e>

080101f6 <__ssputs_r>:
 80101f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101fa:	688e      	ldr	r6, [r1, #8]
 80101fc:	429e      	cmp	r6, r3
 80101fe:	4682      	mov	sl, r0
 8010200:	460c      	mov	r4, r1
 8010202:	4690      	mov	r8, r2
 8010204:	461f      	mov	r7, r3
 8010206:	d838      	bhi.n	801027a <__ssputs_r+0x84>
 8010208:	898a      	ldrh	r2, [r1, #12]
 801020a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801020e:	d032      	beq.n	8010276 <__ssputs_r+0x80>
 8010210:	6825      	ldr	r5, [r4, #0]
 8010212:	6909      	ldr	r1, [r1, #16]
 8010214:	eba5 0901 	sub.w	r9, r5, r1
 8010218:	6965      	ldr	r5, [r4, #20]
 801021a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801021e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010222:	3301      	adds	r3, #1
 8010224:	444b      	add	r3, r9
 8010226:	106d      	asrs	r5, r5, #1
 8010228:	429d      	cmp	r5, r3
 801022a:	bf38      	it	cc
 801022c:	461d      	movcc	r5, r3
 801022e:	0553      	lsls	r3, r2, #21
 8010230:	d531      	bpl.n	8010296 <__ssputs_r+0xa0>
 8010232:	4629      	mov	r1, r5
 8010234:	f7fc fae8 	bl	800c808 <_malloc_r>
 8010238:	4606      	mov	r6, r0
 801023a:	b950      	cbnz	r0, 8010252 <__ssputs_r+0x5c>
 801023c:	230c      	movs	r3, #12
 801023e:	f8ca 3000 	str.w	r3, [sl]
 8010242:	89a3      	ldrh	r3, [r4, #12]
 8010244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010248:	81a3      	strh	r3, [r4, #12]
 801024a:	f04f 30ff 	mov.w	r0, #4294967295
 801024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010252:	6921      	ldr	r1, [r4, #16]
 8010254:	464a      	mov	r2, r9
 8010256:	f7fb ffe3 	bl	800c220 <memcpy>
 801025a:	89a3      	ldrh	r3, [r4, #12]
 801025c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010264:	81a3      	strh	r3, [r4, #12]
 8010266:	6126      	str	r6, [r4, #16]
 8010268:	6165      	str	r5, [r4, #20]
 801026a:	444e      	add	r6, r9
 801026c:	eba5 0509 	sub.w	r5, r5, r9
 8010270:	6026      	str	r6, [r4, #0]
 8010272:	60a5      	str	r5, [r4, #8]
 8010274:	463e      	mov	r6, r7
 8010276:	42be      	cmp	r6, r7
 8010278:	d900      	bls.n	801027c <__ssputs_r+0x86>
 801027a:	463e      	mov	r6, r7
 801027c:	6820      	ldr	r0, [r4, #0]
 801027e:	4632      	mov	r2, r6
 8010280:	4641      	mov	r1, r8
 8010282:	f7ff fbc9 	bl	800fa18 <memmove>
 8010286:	68a3      	ldr	r3, [r4, #8]
 8010288:	1b9b      	subs	r3, r3, r6
 801028a:	60a3      	str	r3, [r4, #8]
 801028c:	6823      	ldr	r3, [r4, #0]
 801028e:	4433      	add	r3, r6
 8010290:	6023      	str	r3, [r4, #0]
 8010292:	2000      	movs	r0, #0
 8010294:	e7db      	b.n	801024e <__ssputs_r+0x58>
 8010296:	462a      	mov	r2, r5
 8010298:	f7ff ff7e 	bl	8010198 <_realloc_r>
 801029c:	4606      	mov	r6, r0
 801029e:	2800      	cmp	r0, #0
 80102a0:	d1e1      	bne.n	8010266 <__ssputs_r+0x70>
 80102a2:	6921      	ldr	r1, [r4, #16]
 80102a4:	4650      	mov	r0, sl
 80102a6:	f7fc fa43 	bl	800c730 <_free_r>
 80102aa:	e7c7      	b.n	801023c <__ssputs_r+0x46>

080102ac <_svfiprintf_r>:
 80102ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b0:	4698      	mov	r8, r3
 80102b2:	898b      	ldrh	r3, [r1, #12]
 80102b4:	061b      	lsls	r3, r3, #24
 80102b6:	b09d      	sub	sp, #116	; 0x74
 80102b8:	4607      	mov	r7, r0
 80102ba:	460d      	mov	r5, r1
 80102bc:	4614      	mov	r4, r2
 80102be:	d50e      	bpl.n	80102de <_svfiprintf_r+0x32>
 80102c0:	690b      	ldr	r3, [r1, #16]
 80102c2:	b963      	cbnz	r3, 80102de <_svfiprintf_r+0x32>
 80102c4:	2140      	movs	r1, #64	; 0x40
 80102c6:	f7fc fa9f 	bl	800c808 <_malloc_r>
 80102ca:	6028      	str	r0, [r5, #0]
 80102cc:	6128      	str	r0, [r5, #16]
 80102ce:	b920      	cbnz	r0, 80102da <_svfiprintf_r+0x2e>
 80102d0:	230c      	movs	r3, #12
 80102d2:	603b      	str	r3, [r7, #0]
 80102d4:	f04f 30ff 	mov.w	r0, #4294967295
 80102d8:	e0d1      	b.n	801047e <_svfiprintf_r+0x1d2>
 80102da:	2340      	movs	r3, #64	; 0x40
 80102dc:	616b      	str	r3, [r5, #20]
 80102de:	2300      	movs	r3, #0
 80102e0:	9309      	str	r3, [sp, #36]	; 0x24
 80102e2:	2320      	movs	r3, #32
 80102e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80102ec:	2330      	movs	r3, #48	; 0x30
 80102ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010498 <_svfiprintf_r+0x1ec>
 80102f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102f6:	f04f 0901 	mov.w	r9, #1
 80102fa:	4623      	mov	r3, r4
 80102fc:	469a      	mov	sl, r3
 80102fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010302:	b10a      	cbz	r2, 8010308 <_svfiprintf_r+0x5c>
 8010304:	2a25      	cmp	r2, #37	; 0x25
 8010306:	d1f9      	bne.n	80102fc <_svfiprintf_r+0x50>
 8010308:	ebba 0b04 	subs.w	fp, sl, r4
 801030c:	d00b      	beq.n	8010326 <_svfiprintf_r+0x7a>
 801030e:	465b      	mov	r3, fp
 8010310:	4622      	mov	r2, r4
 8010312:	4629      	mov	r1, r5
 8010314:	4638      	mov	r0, r7
 8010316:	f7ff ff6e 	bl	80101f6 <__ssputs_r>
 801031a:	3001      	adds	r0, #1
 801031c:	f000 80aa 	beq.w	8010474 <_svfiprintf_r+0x1c8>
 8010320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010322:	445a      	add	r2, fp
 8010324:	9209      	str	r2, [sp, #36]	; 0x24
 8010326:	f89a 3000 	ldrb.w	r3, [sl]
 801032a:	2b00      	cmp	r3, #0
 801032c:	f000 80a2 	beq.w	8010474 <_svfiprintf_r+0x1c8>
 8010330:	2300      	movs	r3, #0
 8010332:	f04f 32ff 	mov.w	r2, #4294967295
 8010336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801033a:	f10a 0a01 	add.w	sl, sl, #1
 801033e:	9304      	str	r3, [sp, #16]
 8010340:	9307      	str	r3, [sp, #28]
 8010342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010346:	931a      	str	r3, [sp, #104]	; 0x68
 8010348:	4654      	mov	r4, sl
 801034a:	2205      	movs	r2, #5
 801034c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010350:	4851      	ldr	r0, [pc, #324]	; (8010498 <_svfiprintf_r+0x1ec>)
 8010352:	f7ef ff55 	bl	8000200 <memchr>
 8010356:	9a04      	ldr	r2, [sp, #16]
 8010358:	b9d8      	cbnz	r0, 8010392 <_svfiprintf_r+0xe6>
 801035a:	06d0      	lsls	r0, r2, #27
 801035c:	bf44      	itt	mi
 801035e:	2320      	movmi	r3, #32
 8010360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010364:	0711      	lsls	r1, r2, #28
 8010366:	bf44      	itt	mi
 8010368:	232b      	movmi	r3, #43	; 0x2b
 801036a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801036e:	f89a 3000 	ldrb.w	r3, [sl]
 8010372:	2b2a      	cmp	r3, #42	; 0x2a
 8010374:	d015      	beq.n	80103a2 <_svfiprintf_r+0xf6>
 8010376:	9a07      	ldr	r2, [sp, #28]
 8010378:	4654      	mov	r4, sl
 801037a:	2000      	movs	r0, #0
 801037c:	f04f 0c0a 	mov.w	ip, #10
 8010380:	4621      	mov	r1, r4
 8010382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010386:	3b30      	subs	r3, #48	; 0x30
 8010388:	2b09      	cmp	r3, #9
 801038a:	d94e      	bls.n	801042a <_svfiprintf_r+0x17e>
 801038c:	b1b0      	cbz	r0, 80103bc <_svfiprintf_r+0x110>
 801038e:	9207      	str	r2, [sp, #28]
 8010390:	e014      	b.n	80103bc <_svfiprintf_r+0x110>
 8010392:	eba0 0308 	sub.w	r3, r0, r8
 8010396:	fa09 f303 	lsl.w	r3, r9, r3
 801039a:	4313      	orrs	r3, r2
 801039c:	9304      	str	r3, [sp, #16]
 801039e:	46a2      	mov	sl, r4
 80103a0:	e7d2      	b.n	8010348 <_svfiprintf_r+0x9c>
 80103a2:	9b03      	ldr	r3, [sp, #12]
 80103a4:	1d19      	adds	r1, r3, #4
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	9103      	str	r1, [sp, #12]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	bfbb      	ittet	lt
 80103ae:	425b      	neglt	r3, r3
 80103b0:	f042 0202 	orrlt.w	r2, r2, #2
 80103b4:	9307      	strge	r3, [sp, #28]
 80103b6:	9307      	strlt	r3, [sp, #28]
 80103b8:	bfb8      	it	lt
 80103ba:	9204      	strlt	r2, [sp, #16]
 80103bc:	7823      	ldrb	r3, [r4, #0]
 80103be:	2b2e      	cmp	r3, #46	; 0x2e
 80103c0:	d10c      	bne.n	80103dc <_svfiprintf_r+0x130>
 80103c2:	7863      	ldrb	r3, [r4, #1]
 80103c4:	2b2a      	cmp	r3, #42	; 0x2a
 80103c6:	d135      	bne.n	8010434 <_svfiprintf_r+0x188>
 80103c8:	9b03      	ldr	r3, [sp, #12]
 80103ca:	1d1a      	adds	r2, r3, #4
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	9203      	str	r2, [sp, #12]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	bfb8      	it	lt
 80103d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80103d8:	3402      	adds	r4, #2
 80103da:	9305      	str	r3, [sp, #20]
 80103dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80104a8 <_svfiprintf_r+0x1fc>
 80103e0:	7821      	ldrb	r1, [r4, #0]
 80103e2:	2203      	movs	r2, #3
 80103e4:	4650      	mov	r0, sl
 80103e6:	f7ef ff0b 	bl	8000200 <memchr>
 80103ea:	b140      	cbz	r0, 80103fe <_svfiprintf_r+0x152>
 80103ec:	2340      	movs	r3, #64	; 0x40
 80103ee:	eba0 000a 	sub.w	r0, r0, sl
 80103f2:	fa03 f000 	lsl.w	r0, r3, r0
 80103f6:	9b04      	ldr	r3, [sp, #16]
 80103f8:	4303      	orrs	r3, r0
 80103fa:	3401      	adds	r4, #1
 80103fc:	9304      	str	r3, [sp, #16]
 80103fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010402:	4826      	ldr	r0, [pc, #152]	; (801049c <_svfiprintf_r+0x1f0>)
 8010404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010408:	2206      	movs	r2, #6
 801040a:	f7ef fef9 	bl	8000200 <memchr>
 801040e:	2800      	cmp	r0, #0
 8010410:	d038      	beq.n	8010484 <_svfiprintf_r+0x1d8>
 8010412:	4b23      	ldr	r3, [pc, #140]	; (80104a0 <_svfiprintf_r+0x1f4>)
 8010414:	bb1b      	cbnz	r3, 801045e <_svfiprintf_r+0x1b2>
 8010416:	9b03      	ldr	r3, [sp, #12]
 8010418:	3307      	adds	r3, #7
 801041a:	f023 0307 	bic.w	r3, r3, #7
 801041e:	3308      	adds	r3, #8
 8010420:	9303      	str	r3, [sp, #12]
 8010422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010424:	4433      	add	r3, r6
 8010426:	9309      	str	r3, [sp, #36]	; 0x24
 8010428:	e767      	b.n	80102fa <_svfiprintf_r+0x4e>
 801042a:	fb0c 3202 	mla	r2, ip, r2, r3
 801042e:	460c      	mov	r4, r1
 8010430:	2001      	movs	r0, #1
 8010432:	e7a5      	b.n	8010380 <_svfiprintf_r+0xd4>
 8010434:	2300      	movs	r3, #0
 8010436:	3401      	adds	r4, #1
 8010438:	9305      	str	r3, [sp, #20]
 801043a:	4619      	mov	r1, r3
 801043c:	f04f 0c0a 	mov.w	ip, #10
 8010440:	4620      	mov	r0, r4
 8010442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010446:	3a30      	subs	r2, #48	; 0x30
 8010448:	2a09      	cmp	r2, #9
 801044a:	d903      	bls.n	8010454 <_svfiprintf_r+0x1a8>
 801044c:	2b00      	cmp	r3, #0
 801044e:	d0c5      	beq.n	80103dc <_svfiprintf_r+0x130>
 8010450:	9105      	str	r1, [sp, #20]
 8010452:	e7c3      	b.n	80103dc <_svfiprintf_r+0x130>
 8010454:	fb0c 2101 	mla	r1, ip, r1, r2
 8010458:	4604      	mov	r4, r0
 801045a:	2301      	movs	r3, #1
 801045c:	e7f0      	b.n	8010440 <_svfiprintf_r+0x194>
 801045e:	ab03      	add	r3, sp, #12
 8010460:	9300      	str	r3, [sp, #0]
 8010462:	462a      	mov	r2, r5
 8010464:	4b0f      	ldr	r3, [pc, #60]	; (80104a4 <_svfiprintf_r+0x1f8>)
 8010466:	a904      	add	r1, sp, #16
 8010468:	4638      	mov	r0, r7
 801046a:	f7fc fc3b 	bl	800cce4 <_printf_float>
 801046e:	1c42      	adds	r2, r0, #1
 8010470:	4606      	mov	r6, r0
 8010472:	d1d6      	bne.n	8010422 <_svfiprintf_r+0x176>
 8010474:	89ab      	ldrh	r3, [r5, #12]
 8010476:	065b      	lsls	r3, r3, #25
 8010478:	f53f af2c 	bmi.w	80102d4 <_svfiprintf_r+0x28>
 801047c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801047e:	b01d      	add	sp, #116	; 0x74
 8010480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010484:	ab03      	add	r3, sp, #12
 8010486:	9300      	str	r3, [sp, #0]
 8010488:	462a      	mov	r2, r5
 801048a:	4b06      	ldr	r3, [pc, #24]	; (80104a4 <_svfiprintf_r+0x1f8>)
 801048c:	a904      	add	r1, sp, #16
 801048e:	4638      	mov	r0, r7
 8010490:	f7fc fecc 	bl	800d22c <_printf_i>
 8010494:	e7eb      	b.n	801046e <_svfiprintf_r+0x1c2>
 8010496:	bf00      	nop
 8010498:	080391d8 	.word	0x080391d8
 801049c:	080391e2 	.word	0x080391e2
 80104a0:	0800cce5 	.word	0x0800cce5
 80104a4:	080101f7 	.word	0x080101f7
 80104a8:	080391de 	.word	0x080391de

080104ac <_sungetc_r>:
 80104ac:	b538      	push	{r3, r4, r5, lr}
 80104ae:	1c4b      	adds	r3, r1, #1
 80104b0:	4614      	mov	r4, r2
 80104b2:	d103      	bne.n	80104bc <_sungetc_r+0x10>
 80104b4:	f04f 35ff 	mov.w	r5, #4294967295
 80104b8:	4628      	mov	r0, r5
 80104ba:	bd38      	pop	{r3, r4, r5, pc}
 80104bc:	8993      	ldrh	r3, [r2, #12]
 80104be:	f023 0320 	bic.w	r3, r3, #32
 80104c2:	8193      	strh	r3, [r2, #12]
 80104c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104c6:	6852      	ldr	r2, [r2, #4]
 80104c8:	b2cd      	uxtb	r5, r1
 80104ca:	b18b      	cbz	r3, 80104f0 <_sungetc_r+0x44>
 80104cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80104ce:	4293      	cmp	r3, r2
 80104d0:	dd08      	ble.n	80104e4 <_sungetc_r+0x38>
 80104d2:	6823      	ldr	r3, [r4, #0]
 80104d4:	1e5a      	subs	r2, r3, #1
 80104d6:	6022      	str	r2, [r4, #0]
 80104d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80104dc:	6863      	ldr	r3, [r4, #4]
 80104de:	3301      	adds	r3, #1
 80104e0:	6063      	str	r3, [r4, #4]
 80104e2:	e7e9      	b.n	80104b8 <_sungetc_r+0xc>
 80104e4:	4621      	mov	r1, r4
 80104e6:	f000 fc67 	bl	8010db8 <__submore>
 80104ea:	2800      	cmp	r0, #0
 80104ec:	d0f1      	beq.n	80104d2 <_sungetc_r+0x26>
 80104ee:	e7e1      	b.n	80104b4 <_sungetc_r+0x8>
 80104f0:	6921      	ldr	r1, [r4, #16]
 80104f2:	6823      	ldr	r3, [r4, #0]
 80104f4:	b151      	cbz	r1, 801050c <_sungetc_r+0x60>
 80104f6:	4299      	cmp	r1, r3
 80104f8:	d208      	bcs.n	801050c <_sungetc_r+0x60>
 80104fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80104fe:	42a9      	cmp	r1, r5
 8010500:	d104      	bne.n	801050c <_sungetc_r+0x60>
 8010502:	3b01      	subs	r3, #1
 8010504:	3201      	adds	r2, #1
 8010506:	6023      	str	r3, [r4, #0]
 8010508:	6062      	str	r2, [r4, #4]
 801050a:	e7d5      	b.n	80104b8 <_sungetc_r+0xc>
 801050c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010514:	6363      	str	r3, [r4, #52]	; 0x34
 8010516:	2303      	movs	r3, #3
 8010518:	63a3      	str	r3, [r4, #56]	; 0x38
 801051a:	4623      	mov	r3, r4
 801051c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010520:	6023      	str	r3, [r4, #0]
 8010522:	2301      	movs	r3, #1
 8010524:	e7dc      	b.n	80104e0 <_sungetc_r+0x34>

08010526 <__ssrefill_r>:
 8010526:	b510      	push	{r4, lr}
 8010528:	460c      	mov	r4, r1
 801052a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801052c:	b169      	cbz	r1, 801054a <__ssrefill_r+0x24>
 801052e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010532:	4299      	cmp	r1, r3
 8010534:	d001      	beq.n	801053a <__ssrefill_r+0x14>
 8010536:	f7fc f8fb 	bl	800c730 <_free_r>
 801053a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801053c:	6063      	str	r3, [r4, #4]
 801053e:	2000      	movs	r0, #0
 8010540:	6360      	str	r0, [r4, #52]	; 0x34
 8010542:	b113      	cbz	r3, 801054a <__ssrefill_r+0x24>
 8010544:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010546:	6023      	str	r3, [r4, #0]
 8010548:	bd10      	pop	{r4, pc}
 801054a:	6923      	ldr	r3, [r4, #16]
 801054c:	6023      	str	r3, [r4, #0]
 801054e:	2300      	movs	r3, #0
 8010550:	6063      	str	r3, [r4, #4]
 8010552:	89a3      	ldrh	r3, [r4, #12]
 8010554:	f043 0320 	orr.w	r3, r3, #32
 8010558:	81a3      	strh	r3, [r4, #12]
 801055a:	f04f 30ff 	mov.w	r0, #4294967295
 801055e:	e7f3      	b.n	8010548 <__ssrefill_r+0x22>

08010560 <__ssvfiscanf_r>:
 8010560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010564:	460c      	mov	r4, r1
 8010566:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801056a:	2100      	movs	r1, #0
 801056c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010570:	49a6      	ldr	r1, [pc, #664]	; (801080c <__ssvfiscanf_r+0x2ac>)
 8010572:	91a0      	str	r1, [sp, #640]	; 0x280
 8010574:	f10d 0804 	add.w	r8, sp, #4
 8010578:	49a5      	ldr	r1, [pc, #660]	; (8010810 <__ssvfiscanf_r+0x2b0>)
 801057a:	4fa6      	ldr	r7, [pc, #664]	; (8010814 <__ssvfiscanf_r+0x2b4>)
 801057c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010818 <__ssvfiscanf_r+0x2b8>
 8010580:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010584:	4606      	mov	r6, r0
 8010586:	91a1      	str	r1, [sp, #644]	; 0x284
 8010588:	9300      	str	r3, [sp, #0]
 801058a:	7813      	ldrb	r3, [r2, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	f000 815a 	beq.w	8010846 <__ssvfiscanf_r+0x2e6>
 8010592:	5dd9      	ldrb	r1, [r3, r7]
 8010594:	f011 0108 	ands.w	r1, r1, #8
 8010598:	f102 0501 	add.w	r5, r2, #1
 801059c:	d019      	beq.n	80105d2 <__ssvfiscanf_r+0x72>
 801059e:	6863      	ldr	r3, [r4, #4]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	dd0f      	ble.n	80105c4 <__ssvfiscanf_r+0x64>
 80105a4:	6823      	ldr	r3, [r4, #0]
 80105a6:	781a      	ldrb	r2, [r3, #0]
 80105a8:	5cba      	ldrb	r2, [r7, r2]
 80105aa:	0712      	lsls	r2, r2, #28
 80105ac:	d401      	bmi.n	80105b2 <__ssvfiscanf_r+0x52>
 80105ae:	462a      	mov	r2, r5
 80105b0:	e7eb      	b.n	801058a <__ssvfiscanf_r+0x2a>
 80105b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80105b4:	3201      	adds	r2, #1
 80105b6:	9245      	str	r2, [sp, #276]	; 0x114
 80105b8:	6862      	ldr	r2, [r4, #4]
 80105ba:	3301      	adds	r3, #1
 80105bc:	3a01      	subs	r2, #1
 80105be:	6062      	str	r2, [r4, #4]
 80105c0:	6023      	str	r3, [r4, #0]
 80105c2:	e7ec      	b.n	801059e <__ssvfiscanf_r+0x3e>
 80105c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80105c6:	4621      	mov	r1, r4
 80105c8:	4630      	mov	r0, r6
 80105ca:	4798      	blx	r3
 80105cc:	2800      	cmp	r0, #0
 80105ce:	d0e9      	beq.n	80105a4 <__ssvfiscanf_r+0x44>
 80105d0:	e7ed      	b.n	80105ae <__ssvfiscanf_r+0x4e>
 80105d2:	2b25      	cmp	r3, #37	; 0x25
 80105d4:	d012      	beq.n	80105fc <__ssvfiscanf_r+0x9c>
 80105d6:	469a      	mov	sl, r3
 80105d8:	6863      	ldr	r3, [r4, #4]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f340 8091 	ble.w	8010702 <__ssvfiscanf_r+0x1a2>
 80105e0:	6822      	ldr	r2, [r4, #0]
 80105e2:	7813      	ldrb	r3, [r2, #0]
 80105e4:	4553      	cmp	r3, sl
 80105e6:	f040 812e 	bne.w	8010846 <__ssvfiscanf_r+0x2e6>
 80105ea:	6863      	ldr	r3, [r4, #4]
 80105ec:	3b01      	subs	r3, #1
 80105ee:	6063      	str	r3, [r4, #4]
 80105f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80105f2:	3201      	adds	r2, #1
 80105f4:	3301      	adds	r3, #1
 80105f6:	6022      	str	r2, [r4, #0]
 80105f8:	9345      	str	r3, [sp, #276]	; 0x114
 80105fa:	e7d8      	b.n	80105ae <__ssvfiscanf_r+0x4e>
 80105fc:	9141      	str	r1, [sp, #260]	; 0x104
 80105fe:	9143      	str	r1, [sp, #268]	; 0x10c
 8010600:	7853      	ldrb	r3, [r2, #1]
 8010602:	2b2a      	cmp	r3, #42	; 0x2a
 8010604:	bf02      	ittt	eq
 8010606:	2310      	moveq	r3, #16
 8010608:	1c95      	addeq	r5, r2, #2
 801060a:	9341      	streq	r3, [sp, #260]	; 0x104
 801060c:	220a      	movs	r2, #10
 801060e:	46aa      	mov	sl, r5
 8010610:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010614:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010618:	2b09      	cmp	r3, #9
 801061a:	d91d      	bls.n	8010658 <__ssvfiscanf_r+0xf8>
 801061c:	487e      	ldr	r0, [pc, #504]	; (8010818 <__ssvfiscanf_r+0x2b8>)
 801061e:	2203      	movs	r2, #3
 8010620:	f7ef fdee 	bl	8000200 <memchr>
 8010624:	b140      	cbz	r0, 8010638 <__ssvfiscanf_r+0xd8>
 8010626:	2301      	movs	r3, #1
 8010628:	eba0 0009 	sub.w	r0, r0, r9
 801062c:	fa03 f000 	lsl.w	r0, r3, r0
 8010630:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010632:	4318      	orrs	r0, r3
 8010634:	9041      	str	r0, [sp, #260]	; 0x104
 8010636:	4655      	mov	r5, sl
 8010638:	f815 3b01 	ldrb.w	r3, [r5], #1
 801063c:	2b78      	cmp	r3, #120	; 0x78
 801063e:	d806      	bhi.n	801064e <__ssvfiscanf_r+0xee>
 8010640:	2b57      	cmp	r3, #87	; 0x57
 8010642:	d810      	bhi.n	8010666 <__ssvfiscanf_r+0x106>
 8010644:	2b25      	cmp	r3, #37	; 0x25
 8010646:	d0c6      	beq.n	80105d6 <__ssvfiscanf_r+0x76>
 8010648:	d856      	bhi.n	80106f8 <__ssvfiscanf_r+0x198>
 801064a:	2b00      	cmp	r3, #0
 801064c:	d064      	beq.n	8010718 <__ssvfiscanf_r+0x1b8>
 801064e:	2303      	movs	r3, #3
 8010650:	9347      	str	r3, [sp, #284]	; 0x11c
 8010652:	230a      	movs	r3, #10
 8010654:	9342      	str	r3, [sp, #264]	; 0x108
 8010656:	e071      	b.n	801073c <__ssvfiscanf_r+0x1dc>
 8010658:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801065a:	fb02 1103 	mla	r1, r2, r3, r1
 801065e:	3930      	subs	r1, #48	; 0x30
 8010660:	9143      	str	r1, [sp, #268]	; 0x10c
 8010662:	4655      	mov	r5, sl
 8010664:	e7d3      	b.n	801060e <__ssvfiscanf_r+0xae>
 8010666:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801066a:	2a20      	cmp	r2, #32
 801066c:	d8ef      	bhi.n	801064e <__ssvfiscanf_r+0xee>
 801066e:	a101      	add	r1, pc, #4	; (adr r1, 8010674 <__ssvfiscanf_r+0x114>)
 8010670:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010674:	08010727 	.word	0x08010727
 8010678:	0801064f 	.word	0x0801064f
 801067c:	0801064f 	.word	0x0801064f
 8010680:	08010785 	.word	0x08010785
 8010684:	0801064f 	.word	0x0801064f
 8010688:	0801064f 	.word	0x0801064f
 801068c:	0801064f 	.word	0x0801064f
 8010690:	0801064f 	.word	0x0801064f
 8010694:	0801064f 	.word	0x0801064f
 8010698:	0801064f 	.word	0x0801064f
 801069c:	0801064f 	.word	0x0801064f
 80106a0:	0801079b 	.word	0x0801079b
 80106a4:	08010771 	.word	0x08010771
 80106a8:	080106ff 	.word	0x080106ff
 80106ac:	080106ff 	.word	0x080106ff
 80106b0:	080106ff 	.word	0x080106ff
 80106b4:	0801064f 	.word	0x0801064f
 80106b8:	08010775 	.word	0x08010775
 80106bc:	0801064f 	.word	0x0801064f
 80106c0:	0801064f 	.word	0x0801064f
 80106c4:	0801064f 	.word	0x0801064f
 80106c8:	0801064f 	.word	0x0801064f
 80106cc:	080107ab 	.word	0x080107ab
 80106d0:	0801077d 	.word	0x0801077d
 80106d4:	0801071f 	.word	0x0801071f
 80106d8:	0801064f 	.word	0x0801064f
 80106dc:	0801064f 	.word	0x0801064f
 80106e0:	080107a7 	.word	0x080107a7
 80106e4:	0801064f 	.word	0x0801064f
 80106e8:	08010771 	.word	0x08010771
 80106ec:	0801064f 	.word	0x0801064f
 80106f0:	0801064f 	.word	0x0801064f
 80106f4:	08010727 	.word	0x08010727
 80106f8:	3b45      	subs	r3, #69	; 0x45
 80106fa:	2b02      	cmp	r3, #2
 80106fc:	d8a7      	bhi.n	801064e <__ssvfiscanf_r+0xee>
 80106fe:	2305      	movs	r3, #5
 8010700:	e01b      	b.n	801073a <__ssvfiscanf_r+0x1da>
 8010702:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010704:	4621      	mov	r1, r4
 8010706:	4630      	mov	r0, r6
 8010708:	4798      	blx	r3
 801070a:	2800      	cmp	r0, #0
 801070c:	f43f af68 	beq.w	80105e0 <__ssvfiscanf_r+0x80>
 8010710:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010712:	2800      	cmp	r0, #0
 8010714:	f040 808d 	bne.w	8010832 <__ssvfiscanf_r+0x2d2>
 8010718:	f04f 30ff 	mov.w	r0, #4294967295
 801071c:	e08f      	b.n	801083e <__ssvfiscanf_r+0x2de>
 801071e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010720:	f042 0220 	orr.w	r2, r2, #32
 8010724:	9241      	str	r2, [sp, #260]	; 0x104
 8010726:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801072c:	9241      	str	r2, [sp, #260]	; 0x104
 801072e:	2210      	movs	r2, #16
 8010730:	2b6f      	cmp	r3, #111	; 0x6f
 8010732:	9242      	str	r2, [sp, #264]	; 0x108
 8010734:	bf34      	ite	cc
 8010736:	2303      	movcc	r3, #3
 8010738:	2304      	movcs	r3, #4
 801073a:	9347      	str	r3, [sp, #284]	; 0x11c
 801073c:	6863      	ldr	r3, [r4, #4]
 801073e:	2b00      	cmp	r3, #0
 8010740:	dd42      	ble.n	80107c8 <__ssvfiscanf_r+0x268>
 8010742:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010744:	0659      	lsls	r1, r3, #25
 8010746:	d404      	bmi.n	8010752 <__ssvfiscanf_r+0x1f2>
 8010748:	6823      	ldr	r3, [r4, #0]
 801074a:	781a      	ldrb	r2, [r3, #0]
 801074c:	5cba      	ldrb	r2, [r7, r2]
 801074e:	0712      	lsls	r2, r2, #28
 8010750:	d441      	bmi.n	80107d6 <__ssvfiscanf_r+0x276>
 8010752:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010754:	2b02      	cmp	r3, #2
 8010756:	dc50      	bgt.n	80107fa <__ssvfiscanf_r+0x29a>
 8010758:	466b      	mov	r3, sp
 801075a:	4622      	mov	r2, r4
 801075c:	a941      	add	r1, sp, #260	; 0x104
 801075e:	4630      	mov	r0, r6
 8010760:	f000 f876 	bl	8010850 <_scanf_chars>
 8010764:	2801      	cmp	r0, #1
 8010766:	d06e      	beq.n	8010846 <__ssvfiscanf_r+0x2e6>
 8010768:	2802      	cmp	r0, #2
 801076a:	f47f af20 	bne.w	80105ae <__ssvfiscanf_r+0x4e>
 801076e:	e7cf      	b.n	8010710 <__ssvfiscanf_r+0x1b0>
 8010770:	220a      	movs	r2, #10
 8010772:	e7dd      	b.n	8010730 <__ssvfiscanf_r+0x1d0>
 8010774:	2300      	movs	r3, #0
 8010776:	9342      	str	r3, [sp, #264]	; 0x108
 8010778:	2303      	movs	r3, #3
 801077a:	e7de      	b.n	801073a <__ssvfiscanf_r+0x1da>
 801077c:	2308      	movs	r3, #8
 801077e:	9342      	str	r3, [sp, #264]	; 0x108
 8010780:	2304      	movs	r3, #4
 8010782:	e7da      	b.n	801073a <__ssvfiscanf_r+0x1da>
 8010784:	4629      	mov	r1, r5
 8010786:	4640      	mov	r0, r8
 8010788:	f000 f9c6 	bl	8010b18 <__sccl>
 801078c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801078e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010792:	9341      	str	r3, [sp, #260]	; 0x104
 8010794:	4605      	mov	r5, r0
 8010796:	2301      	movs	r3, #1
 8010798:	e7cf      	b.n	801073a <__ssvfiscanf_r+0x1da>
 801079a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801079c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107a0:	9341      	str	r3, [sp, #260]	; 0x104
 80107a2:	2300      	movs	r3, #0
 80107a4:	e7c9      	b.n	801073a <__ssvfiscanf_r+0x1da>
 80107a6:	2302      	movs	r3, #2
 80107a8:	e7c7      	b.n	801073a <__ssvfiscanf_r+0x1da>
 80107aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 80107ac:	06c3      	lsls	r3, r0, #27
 80107ae:	f53f aefe 	bmi.w	80105ae <__ssvfiscanf_r+0x4e>
 80107b2:	9b00      	ldr	r3, [sp, #0]
 80107b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80107b6:	1d19      	adds	r1, r3, #4
 80107b8:	9100      	str	r1, [sp, #0]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f010 0f01 	tst.w	r0, #1
 80107c0:	bf14      	ite	ne
 80107c2:	801a      	strhne	r2, [r3, #0]
 80107c4:	601a      	streq	r2, [r3, #0]
 80107c6:	e6f2      	b.n	80105ae <__ssvfiscanf_r+0x4e>
 80107c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80107ca:	4621      	mov	r1, r4
 80107cc:	4630      	mov	r0, r6
 80107ce:	4798      	blx	r3
 80107d0:	2800      	cmp	r0, #0
 80107d2:	d0b6      	beq.n	8010742 <__ssvfiscanf_r+0x1e2>
 80107d4:	e79c      	b.n	8010710 <__ssvfiscanf_r+0x1b0>
 80107d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80107d8:	3201      	adds	r2, #1
 80107da:	9245      	str	r2, [sp, #276]	; 0x114
 80107dc:	6862      	ldr	r2, [r4, #4]
 80107de:	3a01      	subs	r2, #1
 80107e0:	2a00      	cmp	r2, #0
 80107e2:	6062      	str	r2, [r4, #4]
 80107e4:	dd02      	ble.n	80107ec <__ssvfiscanf_r+0x28c>
 80107e6:	3301      	adds	r3, #1
 80107e8:	6023      	str	r3, [r4, #0]
 80107ea:	e7ad      	b.n	8010748 <__ssvfiscanf_r+0x1e8>
 80107ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80107ee:	4621      	mov	r1, r4
 80107f0:	4630      	mov	r0, r6
 80107f2:	4798      	blx	r3
 80107f4:	2800      	cmp	r0, #0
 80107f6:	d0a7      	beq.n	8010748 <__ssvfiscanf_r+0x1e8>
 80107f8:	e78a      	b.n	8010710 <__ssvfiscanf_r+0x1b0>
 80107fa:	2b04      	cmp	r3, #4
 80107fc:	dc0e      	bgt.n	801081c <__ssvfiscanf_r+0x2bc>
 80107fe:	466b      	mov	r3, sp
 8010800:	4622      	mov	r2, r4
 8010802:	a941      	add	r1, sp, #260	; 0x104
 8010804:	4630      	mov	r0, r6
 8010806:	f000 f87d 	bl	8010904 <_scanf_i>
 801080a:	e7ab      	b.n	8010764 <__ssvfiscanf_r+0x204>
 801080c:	080104ad 	.word	0x080104ad
 8010810:	08010527 	.word	0x08010527
 8010814:	080394d9 	.word	0x080394d9
 8010818:	080391de 	.word	0x080391de
 801081c:	4b0b      	ldr	r3, [pc, #44]	; (801084c <__ssvfiscanf_r+0x2ec>)
 801081e:	2b00      	cmp	r3, #0
 8010820:	f43f aec5 	beq.w	80105ae <__ssvfiscanf_r+0x4e>
 8010824:	466b      	mov	r3, sp
 8010826:	4622      	mov	r2, r4
 8010828:	a941      	add	r1, sp, #260	; 0x104
 801082a:	4630      	mov	r0, r6
 801082c:	f3af 8000 	nop.w
 8010830:	e798      	b.n	8010764 <__ssvfiscanf_r+0x204>
 8010832:	89a3      	ldrh	r3, [r4, #12]
 8010834:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010838:	bf18      	it	ne
 801083a:	f04f 30ff 	movne.w	r0, #4294967295
 801083e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010846:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010848:	e7f9      	b.n	801083e <__ssvfiscanf_r+0x2de>
 801084a:	bf00      	nop
 801084c:	00000000 	.word	0x00000000

08010850 <_scanf_chars>:
 8010850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010854:	4615      	mov	r5, r2
 8010856:	688a      	ldr	r2, [r1, #8]
 8010858:	4680      	mov	r8, r0
 801085a:	460c      	mov	r4, r1
 801085c:	b932      	cbnz	r2, 801086c <_scanf_chars+0x1c>
 801085e:	698a      	ldr	r2, [r1, #24]
 8010860:	2a00      	cmp	r2, #0
 8010862:	bf0c      	ite	eq
 8010864:	2201      	moveq	r2, #1
 8010866:	f04f 32ff 	movne.w	r2, #4294967295
 801086a:	608a      	str	r2, [r1, #8]
 801086c:	6822      	ldr	r2, [r4, #0]
 801086e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010900 <_scanf_chars+0xb0>
 8010872:	06d1      	lsls	r1, r2, #27
 8010874:	bf5f      	itttt	pl
 8010876:	681a      	ldrpl	r2, [r3, #0]
 8010878:	1d11      	addpl	r1, r2, #4
 801087a:	6019      	strpl	r1, [r3, #0]
 801087c:	6816      	ldrpl	r6, [r2, #0]
 801087e:	2700      	movs	r7, #0
 8010880:	69a0      	ldr	r0, [r4, #24]
 8010882:	b188      	cbz	r0, 80108a8 <_scanf_chars+0x58>
 8010884:	2801      	cmp	r0, #1
 8010886:	d107      	bne.n	8010898 <_scanf_chars+0x48>
 8010888:	682a      	ldr	r2, [r5, #0]
 801088a:	7811      	ldrb	r1, [r2, #0]
 801088c:	6962      	ldr	r2, [r4, #20]
 801088e:	5c52      	ldrb	r2, [r2, r1]
 8010890:	b952      	cbnz	r2, 80108a8 <_scanf_chars+0x58>
 8010892:	2f00      	cmp	r7, #0
 8010894:	d031      	beq.n	80108fa <_scanf_chars+0xaa>
 8010896:	e022      	b.n	80108de <_scanf_chars+0x8e>
 8010898:	2802      	cmp	r0, #2
 801089a:	d120      	bne.n	80108de <_scanf_chars+0x8e>
 801089c:	682b      	ldr	r3, [r5, #0]
 801089e:	781b      	ldrb	r3, [r3, #0]
 80108a0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80108a4:	071b      	lsls	r3, r3, #28
 80108a6:	d41a      	bmi.n	80108de <_scanf_chars+0x8e>
 80108a8:	6823      	ldr	r3, [r4, #0]
 80108aa:	06da      	lsls	r2, r3, #27
 80108ac:	bf5e      	ittt	pl
 80108ae:	682b      	ldrpl	r3, [r5, #0]
 80108b0:	781b      	ldrbpl	r3, [r3, #0]
 80108b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80108b6:	682a      	ldr	r2, [r5, #0]
 80108b8:	686b      	ldr	r3, [r5, #4]
 80108ba:	3201      	adds	r2, #1
 80108bc:	602a      	str	r2, [r5, #0]
 80108be:	68a2      	ldr	r2, [r4, #8]
 80108c0:	3b01      	subs	r3, #1
 80108c2:	3a01      	subs	r2, #1
 80108c4:	606b      	str	r3, [r5, #4]
 80108c6:	3701      	adds	r7, #1
 80108c8:	60a2      	str	r2, [r4, #8]
 80108ca:	b142      	cbz	r2, 80108de <_scanf_chars+0x8e>
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	dcd7      	bgt.n	8010880 <_scanf_chars+0x30>
 80108d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80108d4:	4629      	mov	r1, r5
 80108d6:	4640      	mov	r0, r8
 80108d8:	4798      	blx	r3
 80108da:	2800      	cmp	r0, #0
 80108dc:	d0d0      	beq.n	8010880 <_scanf_chars+0x30>
 80108de:	6823      	ldr	r3, [r4, #0]
 80108e0:	f013 0310 	ands.w	r3, r3, #16
 80108e4:	d105      	bne.n	80108f2 <_scanf_chars+0xa2>
 80108e6:	68e2      	ldr	r2, [r4, #12]
 80108e8:	3201      	adds	r2, #1
 80108ea:	60e2      	str	r2, [r4, #12]
 80108ec:	69a2      	ldr	r2, [r4, #24]
 80108ee:	b102      	cbz	r2, 80108f2 <_scanf_chars+0xa2>
 80108f0:	7033      	strb	r3, [r6, #0]
 80108f2:	6923      	ldr	r3, [r4, #16]
 80108f4:	443b      	add	r3, r7
 80108f6:	6123      	str	r3, [r4, #16]
 80108f8:	2000      	movs	r0, #0
 80108fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108fe:	bf00      	nop
 8010900:	080394d9 	.word	0x080394d9

08010904 <_scanf_i>:
 8010904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010908:	4698      	mov	r8, r3
 801090a:	4b76      	ldr	r3, [pc, #472]	; (8010ae4 <_scanf_i+0x1e0>)
 801090c:	460c      	mov	r4, r1
 801090e:	4682      	mov	sl, r0
 8010910:	4616      	mov	r6, r2
 8010912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010916:	b087      	sub	sp, #28
 8010918:	ab03      	add	r3, sp, #12
 801091a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801091e:	4b72      	ldr	r3, [pc, #456]	; (8010ae8 <_scanf_i+0x1e4>)
 8010920:	69a1      	ldr	r1, [r4, #24]
 8010922:	4a72      	ldr	r2, [pc, #456]	; (8010aec <_scanf_i+0x1e8>)
 8010924:	2903      	cmp	r1, #3
 8010926:	bf18      	it	ne
 8010928:	461a      	movne	r2, r3
 801092a:	68a3      	ldr	r3, [r4, #8]
 801092c:	9201      	str	r2, [sp, #4]
 801092e:	1e5a      	subs	r2, r3, #1
 8010930:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010934:	bf88      	it	hi
 8010936:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801093a:	4627      	mov	r7, r4
 801093c:	bf82      	ittt	hi
 801093e:	eb03 0905 	addhi.w	r9, r3, r5
 8010942:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010946:	60a3      	strhi	r3, [r4, #8]
 8010948:	f857 3b1c 	ldr.w	r3, [r7], #28
 801094c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010950:	bf98      	it	ls
 8010952:	f04f 0900 	movls.w	r9, #0
 8010956:	6023      	str	r3, [r4, #0]
 8010958:	463d      	mov	r5, r7
 801095a:	f04f 0b00 	mov.w	fp, #0
 801095e:	6831      	ldr	r1, [r6, #0]
 8010960:	ab03      	add	r3, sp, #12
 8010962:	7809      	ldrb	r1, [r1, #0]
 8010964:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010968:	2202      	movs	r2, #2
 801096a:	f7ef fc49 	bl	8000200 <memchr>
 801096e:	b328      	cbz	r0, 80109bc <_scanf_i+0xb8>
 8010970:	f1bb 0f01 	cmp.w	fp, #1
 8010974:	d159      	bne.n	8010a2a <_scanf_i+0x126>
 8010976:	6862      	ldr	r2, [r4, #4]
 8010978:	b92a      	cbnz	r2, 8010986 <_scanf_i+0x82>
 801097a:	6822      	ldr	r2, [r4, #0]
 801097c:	2308      	movs	r3, #8
 801097e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010982:	6063      	str	r3, [r4, #4]
 8010984:	6022      	str	r2, [r4, #0]
 8010986:	6822      	ldr	r2, [r4, #0]
 8010988:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801098c:	6022      	str	r2, [r4, #0]
 801098e:	68a2      	ldr	r2, [r4, #8]
 8010990:	1e51      	subs	r1, r2, #1
 8010992:	60a1      	str	r1, [r4, #8]
 8010994:	b192      	cbz	r2, 80109bc <_scanf_i+0xb8>
 8010996:	6832      	ldr	r2, [r6, #0]
 8010998:	1c51      	adds	r1, r2, #1
 801099a:	6031      	str	r1, [r6, #0]
 801099c:	7812      	ldrb	r2, [r2, #0]
 801099e:	f805 2b01 	strb.w	r2, [r5], #1
 80109a2:	6872      	ldr	r2, [r6, #4]
 80109a4:	3a01      	subs	r2, #1
 80109a6:	2a00      	cmp	r2, #0
 80109a8:	6072      	str	r2, [r6, #4]
 80109aa:	dc07      	bgt.n	80109bc <_scanf_i+0xb8>
 80109ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80109b0:	4631      	mov	r1, r6
 80109b2:	4650      	mov	r0, sl
 80109b4:	4790      	blx	r2
 80109b6:	2800      	cmp	r0, #0
 80109b8:	f040 8085 	bne.w	8010ac6 <_scanf_i+0x1c2>
 80109bc:	f10b 0b01 	add.w	fp, fp, #1
 80109c0:	f1bb 0f03 	cmp.w	fp, #3
 80109c4:	d1cb      	bne.n	801095e <_scanf_i+0x5a>
 80109c6:	6863      	ldr	r3, [r4, #4]
 80109c8:	b90b      	cbnz	r3, 80109ce <_scanf_i+0xca>
 80109ca:	230a      	movs	r3, #10
 80109cc:	6063      	str	r3, [r4, #4]
 80109ce:	6863      	ldr	r3, [r4, #4]
 80109d0:	4947      	ldr	r1, [pc, #284]	; (8010af0 <_scanf_i+0x1ec>)
 80109d2:	6960      	ldr	r0, [r4, #20]
 80109d4:	1ac9      	subs	r1, r1, r3
 80109d6:	f000 f89f 	bl	8010b18 <__sccl>
 80109da:	f04f 0b00 	mov.w	fp, #0
 80109de:	68a3      	ldr	r3, [r4, #8]
 80109e0:	6822      	ldr	r2, [r4, #0]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d03d      	beq.n	8010a62 <_scanf_i+0x15e>
 80109e6:	6831      	ldr	r1, [r6, #0]
 80109e8:	6960      	ldr	r0, [r4, #20]
 80109ea:	f891 c000 	ldrb.w	ip, [r1]
 80109ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 80109f2:	2800      	cmp	r0, #0
 80109f4:	d035      	beq.n	8010a62 <_scanf_i+0x15e>
 80109f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80109fa:	d124      	bne.n	8010a46 <_scanf_i+0x142>
 80109fc:	0510      	lsls	r0, r2, #20
 80109fe:	d522      	bpl.n	8010a46 <_scanf_i+0x142>
 8010a00:	f10b 0b01 	add.w	fp, fp, #1
 8010a04:	f1b9 0f00 	cmp.w	r9, #0
 8010a08:	d003      	beq.n	8010a12 <_scanf_i+0x10e>
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010a10:	60a3      	str	r3, [r4, #8]
 8010a12:	6873      	ldr	r3, [r6, #4]
 8010a14:	3b01      	subs	r3, #1
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	6073      	str	r3, [r6, #4]
 8010a1a:	dd1b      	ble.n	8010a54 <_scanf_i+0x150>
 8010a1c:	6833      	ldr	r3, [r6, #0]
 8010a1e:	3301      	adds	r3, #1
 8010a20:	6033      	str	r3, [r6, #0]
 8010a22:	68a3      	ldr	r3, [r4, #8]
 8010a24:	3b01      	subs	r3, #1
 8010a26:	60a3      	str	r3, [r4, #8]
 8010a28:	e7d9      	b.n	80109de <_scanf_i+0xda>
 8010a2a:	f1bb 0f02 	cmp.w	fp, #2
 8010a2e:	d1ae      	bne.n	801098e <_scanf_i+0x8a>
 8010a30:	6822      	ldr	r2, [r4, #0]
 8010a32:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010a36:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010a3a:	d1bf      	bne.n	80109bc <_scanf_i+0xb8>
 8010a3c:	2310      	movs	r3, #16
 8010a3e:	6063      	str	r3, [r4, #4]
 8010a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010a44:	e7a2      	b.n	801098c <_scanf_i+0x88>
 8010a46:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010a4a:	6022      	str	r2, [r4, #0]
 8010a4c:	780b      	ldrb	r3, [r1, #0]
 8010a4e:	f805 3b01 	strb.w	r3, [r5], #1
 8010a52:	e7de      	b.n	8010a12 <_scanf_i+0x10e>
 8010a54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010a58:	4631      	mov	r1, r6
 8010a5a:	4650      	mov	r0, sl
 8010a5c:	4798      	blx	r3
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d0df      	beq.n	8010a22 <_scanf_i+0x11e>
 8010a62:	6823      	ldr	r3, [r4, #0]
 8010a64:	05db      	lsls	r3, r3, #23
 8010a66:	d50d      	bpl.n	8010a84 <_scanf_i+0x180>
 8010a68:	42bd      	cmp	r5, r7
 8010a6a:	d909      	bls.n	8010a80 <_scanf_i+0x17c>
 8010a6c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010a70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010a74:	4632      	mov	r2, r6
 8010a76:	4650      	mov	r0, sl
 8010a78:	4798      	blx	r3
 8010a7a:	f105 39ff 	add.w	r9, r5, #4294967295
 8010a7e:	464d      	mov	r5, r9
 8010a80:	42bd      	cmp	r5, r7
 8010a82:	d02d      	beq.n	8010ae0 <_scanf_i+0x1dc>
 8010a84:	6822      	ldr	r2, [r4, #0]
 8010a86:	f012 0210 	ands.w	r2, r2, #16
 8010a8a:	d113      	bne.n	8010ab4 <_scanf_i+0x1b0>
 8010a8c:	702a      	strb	r2, [r5, #0]
 8010a8e:	6863      	ldr	r3, [r4, #4]
 8010a90:	9e01      	ldr	r6, [sp, #4]
 8010a92:	4639      	mov	r1, r7
 8010a94:	4650      	mov	r0, sl
 8010a96:	47b0      	blx	r6
 8010a98:	6821      	ldr	r1, [r4, #0]
 8010a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8010a9e:	f011 0f20 	tst.w	r1, #32
 8010aa2:	d013      	beq.n	8010acc <_scanf_i+0x1c8>
 8010aa4:	1d1a      	adds	r2, r3, #4
 8010aa6:	f8c8 2000 	str.w	r2, [r8]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	6018      	str	r0, [r3, #0]
 8010aae:	68e3      	ldr	r3, [r4, #12]
 8010ab0:	3301      	adds	r3, #1
 8010ab2:	60e3      	str	r3, [r4, #12]
 8010ab4:	1bed      	subs	r5, r5, r7
 8010ab6:	44ab      	add	fp, r5
 8010ab8:	6925      	ldr	r5, [r4, #16]
 8010aba:	445d      	add	r5, fp
 8010abc:	6125      	str	r5, [r4, #16]
 8010abe:	2000      	movs	r0, #0
 8010ac0:	b007      	add	sp, #28
 8010ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac6:	f04f 0b00 	mov.w	fp, #0
 8010aca:	e7ca      	b.n	8010a62 <_scanf_i+0x15e>
 8010acc:	1d1a      	adds	r2, r3, #4
 8010ace:	f8c8 2000 	str.w	r2, [r8]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	f011 0f01 	tst.w	r1, #1
 8010ad8:	bf14      	ite	ne
 8010ada:	8018      	strhne	r0, [r3, #0]
 8010adc:	6018      	streq	r0, [r3, #0]
 8010ade:	e7e6      	b.n	8010aae <_scanf_i+0x1aa>
 8010ae0:	2001      	movs	r0, #1
 8010ae2:	e7ed      	b.n	8010ac0 <_scanf_i+0x1bc>
 8010ae4:	080140d8 	.word	0x080140d8
 8010ae8:	0800e181 	.word	0x0800e181
 8010aec:	08010db5 	.word	0x08010db5
 8010af0:	08039885 	.word	0x08039885

08010af4 <_read_r>:
 8010af4:	b538      	push	{r3, r4, r5, lr}
 8010af6:	4d07      	ldr	r5, [pc, #28]	; (8010b14 <_read_r+0x20>)
 8010af8:	4604      	mov	r4, r0
 8010afa:	4608      	mov	r0, r1
 8010afc:	4611      	mov	r1, r2
 8010afe:	2200      	movs	r2, #0
 8010b00:	602a      	str	r2, [r5, #0]
 8010b02:	461a      	mov	r2, r3
 8010b04:	f002 fe56 	bl	80137b4 <_read>
 8010b08:	1c43      	adds	r3, r0, #1
 8010b0a:	d102      	bne.n	8010b12 <_read_r+0x1e>
 8010b0c:	682b      	ldr	r3, [r5, #0]
 8010b0e:	b103      	cbz	r3, 8010b12 <_read_r+0x1e>
 8010b10:	6023      	str	r3, [r4, #0]
 8010b12:	bd38      	pop	{r3, r4, r5, pc}
 8010b14:	20003a58 	.word	0x20003a58

08010b18 <__sccl>:
 8010b18:	b570      	push	{r4, r5, r6, lr}
 8010b1a:	780b      	ldrb	r3, [r1, #0]
 8010b1c:	4604      	mov	r4, r0
 8010b1e:	2b5e      	cmp	r3, #94	; 0x5e
 8010b20:	bf0b      	itete	eq
 8010b22:	784b      	ldrbeq	r3, [r1, #1]
 8010b24:	1c48      	addne	r0, r1, #1
 8010b26:	1c88      	addeq	r0, r1, #2
 8010b28:	2200      	movne	r2, #0
 8010b2a:	bf08      	it	eq
 8010b2c:	2201      	moveq	r2, #1
 8010b2e:	1e61      	subs	r1, r4, #1
 8010b30:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010b34:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010b38:	42a9      	cmp	r1, r5
 8010b3a:	d1fb      	bne.n	8010b34 <__sccl+0x1c>
 8010b3c:	b90b      	cbnz	r3, 8010b42 <__sccl+0x2a>
 8010b3e:	3801      	subs	r0, #1
 8010b40:	bd70      	pop	{r4, r5, r6, pc}
 8010b42:	f082 0201 	eor.w	r2, r2, #1
 8010b46:	54e2      	strb	r2, [r4, r3]
 8010b48:	4605      	mov	r5, r0
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010b50:	292d      	cmp	r1, #45	; 0x2d
 8010b52:	d006      	beq.n	8010b62 <__sccl+0x4a>
 8010b54:	295d      	cmp	r1, #93	; 0x5d
 8010b56:	d0f3      	beq.n	8010b40 <__sccl+0x28>
 8010b58:	b909      	cbnz	r1, 8010b5e <__sccl+0x46>
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	e7f0      	b.n	8010b40 <__sccl+0x28>
 8010b5e:	460b      	mov	r3, r1
 8010b60:	e7f1      	b.n	8010b46 <__sccl+0x2e>
 8010b62:	786e      	ldrb	r6, [r5, #1]
 8010b64:	2e5d      	cmp	r6, #93	; 0x5d
 8010b66:	d0fa      	beq.n	8010b5e <__sccl+0x46>
 8010b68:	42b3      	cmp	r3, r6
 8010b6a:	dcf8      	bgt.n	8010b5e <__sccl+0x46>
 8010b6c:	3502      	adds	r5, #2
 8010b6e:	4619      	mov	r1, r3
 8010b70:	3101      	adds	r1, #1
 8010b72:	428e      	cmp	r6, r1
 8010b74:	5462      	strb	r2, [r4, r1]
 8010b76:	dcfb      	bgt.n	8010b70 <__sccl+0x58>
 8010b78:	1af1      	subs	r1, r6, r3
 8010b7a:	3901      	subs	r1, #1
 8010b7c:	1c58      	adds	r0, r3, #1
 8010b7e:	42b3      	cmp	r3, r6
 8010b80:	bfa8      	it	ge
 8010b82:	2100      	movge	r1, #0
 8010b84:	1843      	adds	r3, r0, r1
 8010b86:	e7e0      	b.n	8010b4a <__sccl+0x32>

08010b88 <_raise_r>:
 8010b88:	291f      	cmp	r1, #31
 8010b8a:	b538      	push	{r3, r4, r5, lr}
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	460d      	mov	r5, r1
 8010b90:	d904      	bls.n	8010b9c <_raise_r+0x14>
 8010b92:	2316      	movs	r3, #22
 8010b94:	6003      	str	r3, [r0, #0]
 8010b96:	f04f 30ff 	mov.w	r0, #4294967295
 8010b9a:	bd38      	pop	{r3, r4, r5, pc}
 8010b9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010b9e:	b112      	cbz	r2, 8010ba6 <_raise_r+0x1e>
 8010ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ba4:	b94b      	cbnz	r3, 8010bba <_raise_r+0x32>
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	f000 f830 	bl	8010c0c <_getpid_r>
 8010bac:	462a      	mov	r2, r5
 8010bae:	4601      	mov	r1, r0
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bb6:	f000 b817 	b.w	8010be8 <_kill_r>
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d00a      	beq.n	8010bd4 <_raise_r+0x4c>
 8010bbe:	1c59      	adds	r1, r3, #1
 8010bc0:	d103      	bne.n	8010bca <_raise_r+0x42>
 8010bc2:	2316      	movs	r3, #22
 8010bc4:	6003      	str	r3, [r0, #0]
 8010bc6:	2001      	movs	r0, #1
 8010bc8:	e7e7      	b.n	8010b9a <_raise_r+0x12>
 8010bca:	2400      	movs	r4, #0
 8010bcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	4798      	blx	r3
 8010bd4:	2000      	movs	r0, #0
 8010bd6:	e7e0      	b.n	8010b9a <_raise_r+0x12>

08010bd8 <raise>:
 8010bd8:	4b02      	ldr	r3, [pc, #8]	; (8010be4 <raise+0xc>)
 8010bda:	4601      	mov	r1, r0
 8010bdc:	6818      	ldr	r0, [r3, #0]
 8010bde:	f7ff bfd3 	b.w	8010b88 <_raise_r>
 8010be2:	bf00      	nop
 8010be4:	200002bc 	.word	0x200002bc

08010be8 <_kill_r>:
 8010be8:	b538      	push	{r3, r4, r5, lr}
 8010bea:	4d07      	ldr	r5, [pc, #28]	; (8010c08 <_kill_r+0x20>)
 8010bec:	2300      	movs	r3, #0
 8010bee:	4604      	mov	r4, r0
 8010bf0:	4608      	mov	r0, r1
 8010bf2:	4611      	mov	r1, r2
 8010bf4:	602b      	str	r3, [r5, #0]
 8010bf6:	f002 fdcd 	bl	8013794 <_kill>
 8010bfa:	1c43      	adds	r3, r0, #1
 8010bfc:	d102      	bne.n	8010c04 <_kill_r+0x1c>
 8010bfe:	682b      	ldr	r3, [r5, #0]
 8010c00:	b103      	cbz	r3, 8010c04 <_kill_r+0x1c>
 8010c02:	6023      	str	r3, [r4, #0]
 8010c04:	bd38      	pop	{r3, r4, r5, pc}
 8010c06:	bf00      	nop
 8010c08:	20003a58 	.word	0x20003a58

08010c0c <_getpid_r>:
 8010c0c:	f002 bdb2 	b.w	8013774 <_getpid>

08010c10 <sniprintf>:
 8010c10:	b40c      	push	{r2, r3}
 8010c12:	b530      	push	{r4, r5, lr}
 8010c14:	4b17      	ldr	r3, [pc, #92]	; (8010c74 <sniprintf+0x64>)
 8010c16:	1e0c      	subs	r4, r1, #0
 8010c18:	681d      	ldr	r5, [r3, #0]
 8010c1a:	b09d      	sub	sp, #116	; 0x74
 8010c1c:	da08      	bge.n	8010c30 <sniprintf+0x20>
 8010c1e:	238b      	movs	r3, #139	; 0x8b
 8010c20:	602b      	str	r3, [r5, #0]
 8010c22:	f04f 30ff 	mov.w	r0, #4294967295
 8010c26:	b01d      	add	sp, #116	; 0x74
 8010c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c2c:	b002      	add	sp, #8
 8010c2e:	4770      	bx	lr
 8010c30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010c34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010c38:	bf14      	ite	ne
 8010c3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010c3e:	4623      	moveq	r3, r4
 8010c40:	9304      	str	r3, [sp, #16]
 8010c42:	9307      	str	r3, [sp, #28]
 8010c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010c48:	9002      	str	r0, [sp, #8]
 8010c4a:	9006      	str	r0, [sp, #24]
 8010c4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010c50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010c52:	ab21      	add	r3, sp, #132	; 0x84
 8010c54:	a902      	add	r1, sp, #8
 8010c56:	4628      	mov	r0, r5
 8010c58:	9301      	str	r3, [sp, #4]
 8010c5a:	f7ff fb27 	bl	80102ac <_svfiprintf_r>
 8010c5e:	1c43      	adds	r3, r0, #1
 8010c60:	bfbc      	itt	lt
 8010c62:	238b      	movlt	r3, #139	; 0x8b
 8010c64:	602b      	strlt	r3, [r5, #0]
 8010c66:	2c00      	cmp	r4, #0
 8010c68:	d0dd      	beq.n	8010c26 <sniprintf+0x16>
 8010c6a:	9b02      	ldr	r3, [sp, #8]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	701a      	strb	r2, [r3, #0]
 8010c70:	e7d9      	b.n	8010c26 <sniprintf+0x16>
 8010c72:	bf00      	nop
 8010c74:	200002bc 	.word	0x200002bc

08010c78 <strcpy>:
 8010c78:	4603      	mov	r3, r0
 8010c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c7e:	f803 2b01 	strb.w	r2, [r3], #1
 8010c82:	2a00      	cmp	r2, #0
 8010c84:	d1f9      	bne.n	8010c7a <strcpy+0x2>
 8010c86:	4770      	bx	lr

08010c88 <strncmp>:
 8010c88:	b510      	push	{r4, lr}
 8010c8a:	b17a      	cbz	r2, 8010cac <strncmp+0x24>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	3901      	subs	r1, #1
 8010c90:	1884      	adds	r4, r0, r2
 8010c92:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010c96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010c9a:	4290      	cmp	r0, r2
 8010c9c:	d101      	bne.n	8010ca2 <strncmp+0x1a>
 8010c9e:	42a3      	cmp	r3, r4
 8010ca0:	d101      	bne.n	8010ca6 <strncmp+0x1e>
 8010ca2:	1a80      	subs	r0, r0, r2
 8010ca4:	bd10      	pop	{r4, pc}
 8010ca6:	2800      	cmp	r0, #0
 8010ca8:	d1f3      	bne.n	8010c92 <strncmp+0xa>
 8010caa:	e7fa      	b.n	8010ca2 <strncmp+0x1a>
 8010cac:	4610      	mov	r0, r2
 8010cae:	e7f9      	b.n	8010ca4 <strncmp+0x1c>

08010cb0 <_strtol_l.constprop.0>:
 8010cb0:	2b01      	cmp	r3, #1
 8010cb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb6:	d001      	beq.n	8010cbc <_strtol_l.constprop.0+0xc>
 8010cb8:	2b24      	cmp	r3, #36	; 0x24
 8010cba:	d906      	bls.n	8010cca <_strtol_l.constprop.0+0x1a>
 8010cbc:	f000 f8c2 	bl	8010e44 <__errno>
 8010cc0:	2316      	movs	r3, #22
 8010cc2:	6003      	str	r3, [r0, #0]
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010db0 <_strtol_l.constprop.0+0x100>
 8010cce:	460d      	mov	r5, r1
 8010cd0:	462e      	mov	r6, r5
 8010cd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010cd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010cda:	f017 0708 	ands.w	r7, r7, #8
 8010cde:	d1f7      	bne.n	8010cd0 <_strtol_l.constprop.0+0x20>
 8010ce0:	2c2d      	cmp	r4, #45	; 0x2d
 8010ce2:	d132      	bne.n	8010d4a <_strtol_l.constprop.0+0x9a>
 8010ce4:	782c      	ldrb	r4, [r5, #0]
 8010ce6:	2701      	movs	r7, #1
 8010ce8:	1cb5      	adds	r5, r6, #2
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d05b      	beq.n	8010da6 <_strtol_l.constprop.0+0xf6>
 8010cee:	2b10      	cmp	r3, #16
 8010cf0:	d109      	bne.n	8010d06 <_strtol_l.constprop.0+0x56>
 8010cf2:	2c30      	cmp	r4, #48	; 0x30
 8010cf4:	d107      	bne.n	8010d06 <_strtol_l.constprop.0+0x56>
 8010cf6:	782c      	ldrb	r4, [r5, #0]
 8010cf8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010cfc:	2c58      	cmp	r4, #88	; 0x58
 8010cfe:	d14d      	bne.n	8010d9c <_strtol_l.constprop.0+0xec>
 8010d00:	786c      	ldrb	r4, [r5, #1]
 8010d02:	2310      	movs	r3, #16
 8010d04:	3502      	adds	r5, #2
 8010d06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010d0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8010d0e:	f04f 0c00 	mov.w	ip, #0
 8010d12:	fbb8 f9f3 	udiv	r9, r8, r3
 8010d16:	4666      	mov	r6, ip
 8010d18:	fb03 8a19 	mls	sl, r3, r9, r8
 8010d1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010d20:	f1be 0f09 	cmp.w	lr, #9
 8010d24:	d816      	bhi.n	8010d54 <_strtol_l.constprop.0+0xa4>
 8010d26:	4674      	mov	r4, lr
 8010d28:	42a3      	cmp	r3, r4
 8010d2a:	dd24      	ble.n	8010d76 <_strtol_l.constprop.0+0xc6>
 8010d2c:	f1bc 0f00 	cmp.w	ip, #0
 8010d30:	db1e      	blt.n	8010d70 <_strtol_l.constprop.0+0xc0>
 8010d32:	45b1      	cmp	r9, r6
 8010d34:	d31c      	bcc.n	8010d70 <_strtol_l.constprop.0+0xc0>
 8010d36:	d101      	bne.n	8010d3c <_strtol_l.constprop.0+0x8c>
 8010d38:	45a2      	cmp	sl, r4
 8010d3a:	db19      	blt.n	8010d70 <_strtol_l.constprop.0+0xc0>
 8010d3c:	fb06 4603 	mla	r6, r6, r3, r4
 8010d40:	f04f 0c01 	mov.w	ip, #1
 8010d44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d48:	e7e8      	b.n	8010d1c <_strtol_l.constprop.0+0x6c>
 8010d4a:	2c2b      	cmp	r4, #43	; 0x2b
 8010d4c:	bf04      	itt	eq
 8010d4e:	782c      	ldrbeq	r4, [r5, #0]
 8010d50:	1cb5      	addeq	r5, r6, #2
 8010d52:	e7ca      	b.n	8010cea <_strtol_l.constprop.0+0x3a>
 8010d54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010d58:	f1be 0f19 	cmp.w	lr, #25
 8010d5c:	d801      	bhi.n	8010d62 <_strtol_l.constprop.0+0xb2>
 8010d5e:	3c37      	subs	r4, #55	; 0x37
 8010d60:	e7e2      	b.n	8010d28 <_strtol_l.constprop.0+0x78>
 8010d62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010d66:	f1be 0f19 	cmp.w	lr, #25
 8010d6a:	d804      	bhi.n	8010d76 <_strtol_l.constprop.0+0xc6>
 8010d6c:	3c57      	subs	r4, #87	; 0x57
 8010d6e:	e7db      	b.n	8010d28 <_strtol_l.constprop.0+0x78>
 8010d70:	f04f 3cff 	mov.w	ip, #4294967295
 8010d74:	e7e6      	b.n	8010d44 <_strtol_l.constprop.0+0x94>
 8010d76:	f1bc 0f00 	cmp.w	ip, #0
 8010d7a:	da05      	bge.n	8010d88 <_strtol_l.constprop.0+0xd8>
 8010d7c:	2322      	movs	r3, #34	; 0x22
 8010d7e:	6003      	str	r3, [r0, #0]
 8010d80:	4646      	mov	r6, r8
 8010d82:	b942      	cbnz	r2, 8010d96 <_strtol_l.constprop.0+0xe6>
 8010d84:	4630      	mov	r0, r6
 8010d86:	e79e      	b.n	8010cc6 <_strtol_l.constprop.0+0x16>
 8010d88:	b107      	cbz	r7, 8010d8c <_strtol_l.constprop.0+0xdc>
 8010d8a:	4276      	negs	r6, r6
 8010d8c:	2a00      	cmp	r2, #0
 8010d8e:	d0f9      	beq.n	8010d84 <_strtol_l.constprop.0+0xd4>
 8010d90:	f1bc 0f00 	cmp.w	ip, #0
 8010d94:	d000      	beq.n	8010d98 <_strtol_l.constprop.0+0xe8>
 8010d96:	1e69      	subs	r1, r5, #1
 8010d98:	6011      	str	r1, [r2, #0]
 8010d9a:	e7f3      	b.n	8010d84 <_strtol_l.constprop.0+0xd4>
 8010d9c:	2430      	movs	r4, #48	; 0x30
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d1b1      	bne.n	8010d06 <_strtol_l.constprop.0+0x56>
 8010da2:	2308      	movs	r3, #8
 8010da4:	e7af      	b.n	8010d06 <_strtol_l.constprop.0+0x56>
 8010da6:	2c30      	cmp	r4, #48	; 0x30
 8010da8:	d0a5      	beq.n	8010cf6 <_strtol_l.constprop.0+0x46>
 8010daa:	230a      	movs	r3, #10
 8010dac:	e7ab      	b.n	8010d06 <_strtol_l.constprop.0+0x56>
 8010dae:	bf00      	nop
 8010db0:	080394d9 	.word	0x080394d9

08010db4 <_strtol_r>:
 8010db4:	f7ff bf7c 	b.w	8010cb0 <_strtol_l.constprop.0>

08010db8 <__submore>:
 8010db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dbc:	460c      	mov	r4, r1
 8010dbe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010dc4:	4299      	cmp	r1, r3
 8010dc6:	d11d      	bne.n	8010e04 <__submore+0x4c>
 8010dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010dcc:	f7fb fd1c 	bl	800c808 <_malloc_r>
 8010dd0:	b918      	cbnz	r0, 8010dda <__submore+0x22>
 8010dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dde:	63a3      	str	r3, [r4, #56]	; 0x38
 8010de0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010de4:	6360      	str	r0, [r4, #52]	; 0x34
 8010de6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010dea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010dee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010df2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010df6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010dfa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010dfe:	6020      	str	r0, [r4, #0]
 8010e00:	2000      	movs	r0, #0
 8010e02:	e7e8      	b.n	8010dd6 <__submore+0x1e>
 8010e04:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010e06:	0077      	lsls	r7, r6, #1
 8010e08:	463a      	mov	r2, r7
 8010e0a:	f7ff f9c5 	bl	8010198 <_realloc_r>
 8010e0e:	4605      	mov	r5, r0
 8010e10:	2800      	cmp	r0, #0
 8010e12:	d0de      	beq.n	8010dd2 <__submore+0x1a>
 8010e14:	eb00 0806 	add.w	r8, r0, r6
 8010e18:	4601      	mov	r1, r0
 8010e1a:	4632      	mov	r2, r6
 8010e1c:	4640      	mov	r0, r8
 8010e1e:	f7fb f9ff 	bl	800c220 <memcpy>
 8010e22:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010e26:	f8c4 8000 	str.w	r8, [r4]
 8010e2a:	e7e9      	b.n	8010e00 <__submore+0x48>

08010e2c <__env_lock>:
 8010e2c:	4801      	ldr	r0, [pc, #4]	; (8010e34 <__env_lock+0x8>)
 8010e2e:	f7fe bd77 	b.w	800f920 <__retarget_lock_acquire_recursive>
 8010e32:	bf00      	nop
 8010e34:	20003a50 	.word	0x20003a50

08010e38 <__env_unlock>:
 8010e38:	4801      	ldr	r0, [pc, #4]	; (8010e40 <__env_unlock+0x8>)
 8010e3a:	f7fe bd73 	b.w	800f924 <__retarget_lock_release_recursive>
 8010e3e:	bf00      	nop
 8010e40:	20003a50 	.word	0x20003a50

08010e44 <__errno>:
 8010e44:	4b01      	ldr	r3, [pc, #4]	; (8010e4c <__errno+0x8>)
 8010e46:	6818      	ldr	r0, [r3, #0]
 8010e48:	4770      	bx	lr
 8010e4a:	bf00      	nop
 8010e4c:	200002bc 	.word	0x200002bc

08010e50 <_fstat_r>:
 8010e50:	b538      	push	{r3, r4, r5, lr}
 8010e52:	4d07      	ldr	r5, [pc, #28]	; (8010e70 <_fstat_r+0x20>)
 8010e54:	2300      	movs	r3, #0
 8010e56:	4604      	mov	r4, r0
 8010e58:	4608      	mov	r0, r1
 8010e5a:	4611      	mov	r1, r2
 8010e5c:	602b      	str	r3, [r5, #0]
 8010e5e:	f002 fc81 	bl	8013764 <_fstat>
 8010e62:	1c43      	adds	r3, r0, #1
 8010e64:	d102      	bne.n	8010e6c <_fstat_r+0x1c>
 8010e66:	682b      	ldr	r3, [r5, #0]
 8010e68:	b103      	cbz	r3, 8010e6c <_fstat_r+0x1c>
 8010e6a:	6023      	str	r3, [r4, #0]
 8010e6c:	bd38      	pop	{r3, r4, r5, pc}
 8010e6e:	bf00      	nop
 8010e70:	20003a58 	.word	0x20003a58

08010e74 <_isatty_r>:
 8010e74:	b538      	push	{r3, r4, r5, lr}
 8010e76:	4d06      	ldr	r5, [pc, #24]	; (8010e90 <_isatty_r+0x1c>)
 8010e78:	2300      	movs	r3, #0
 8010e7a:	4604      	mov	r4, r0
 8010e7c:	4608      	mov	r0, r1
 8010e7e:	602b      	str	r3, [r5, #0]
 8010e80:	f002 fc80 	bl	8013784 <_isatty>
 8010e84:	1c43      	adds	r3, r0, #1
 8010e86:	d102      	bne.n	8010e8e <_isatty_r+0x1a>
 8010e88:	682b      	ldr	r3, [r5, #0]
 8010e8a:	b103      	cbz	r3, 8010e8e <_isatty_r+0x1a>
 8010e8c:	6023      	str	r3, [r4, #0]
 8010e8e:	bd38      	pop	{r3, r4, r5, pc}
 8010e90:	20003a58 	.word	0x20003a58

08010e94 <__ascii_mbtowc>:
 8010e94:	b082      	sub	sp, #8
 8010e96:	b901      	cbnz	r1, 8010e9a <__ascii_mbtowc+0x6>
 8010e98:	a901      	add	r1, sp, #4
 8010e9a:	b142      	cbz	r2, 8010eae <__ascii_mbtowc+0x1a>
 8010e9c:	b14b      	cbz	r3, 8010eb2 <__ascii_mbtowc+0x1e>
 8010e9e:	7813      	ldrb	r3, [r2, #0]
 8010ea0:	600b      	str	r3, [r1, #0]
 8010ea2:	7812      	ldrb	r2, [r2, #0]
 8010ea4:	1e10      	subs	r0, r2, #0
 8010ea6:	bf18      	it	ne
 8010ea8:	2001      	movne	r0, #1
 8010eaa:	b002      	add	sp, #8
 8010eac:	4770      	bx	lr
 8010eae:	4610      	mov	r0, r2
 8010eb0:	e7fb      	b.n	8010eaa <__ascii_mbtowc+0x16>
 8010eb2:	f06f 0001 	mvn.w	r0, #1
 8010eb6:	e7f8      	b.n	8010eaa <__ascii_mbtowc+0x16>

08010eb8 <_malloc_usable_size_r>:
 8010eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ebc:	1f18      	subs	r0, r3, #4
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	bfbc      	itt	lt
 8010ec2:	580b      	ldrlt	r3, [r1, r0]
 8010ec4:	18c0      	addlt	r0, r0, r3
 8010ec6:	4770      	bx	lr

08010ec8 <__ascii_wctomb>:
 8010ec8:	b149      	cbz	r1, 8010ede <__ascii_wctomb+0x16>
 8010eca:	2aff      	cmp	r2, #255	; 0xff
 8010ecc:	bf85      	ittet	hi
 8010ece:	238a      	movhi	r3, #138	; 0x8a
 8010ed0:	6003      	strhi	r3, [r0, #0]
 8010ed2:	700a      	strbls	r2, [r1, #0]
 8010ed4:	f04f 30ff 	movhi.w	r0, #4294967295
 8010ed8:	bf98      	it	ls
 8010eda:	2001      	movls	r0, #1
 8010edc:	4770      	bx	lr
 8010ede:	4608      	mov	r0, r1
 8010ee0:	4770      	bx	lr
 8010ee2:	0000      	movs	r0, r0
 8010ee4:	0000      	movs	r0, r0
	...

08010ee8 <cos>:
 8010ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010eea:	ec53 2b10 	vmov	r2, r3, d0
 8010eee:	4826      	ldr	r0, [pc, #152]	; (8010f88 <cos+0xa0>)
 8010ef0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010ef4:	4281      	cmp	r1, r0
 8010ef6:	dc06      	bgt.n	8010f06 <cos+0x1e>
 8010ef8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010f80 <cos+0x98>
 8010efc:	b005      	add	sp, #20
 8010efe:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f02:	f001 bbf1 	b.w	80126e8 <__kernel_cos>
 8010f06:	4821      	ldr	r0, [pc, #132]	; (8010f8c <cos+0xa4>)
 8010f08:	4281      	cmp	r1, r0
 8010f0a:	dd09      	ble.n	8010f20 <cos+0x38>
 8010f0c:	ee10 0a10 	vmov	r0, s0
 8010f10:	4619      	mov	r1, r3
 8010f12:	f7ef f9d3 	bl	80002bc <__aeabi_dsub>
 8010f16:	ec41 0b10 	vmov	d0, r0, r1
 8010f1a:	b005      	add	sp, #20
 8010f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f20:	4668      	mov	r0, sp
 8010f22:	f001 f921 	bl	8012168 <__ieee754_rem_pio2>
 8010f26:	f000 0003 	and.w	r0, r0, #3
 8010f2a:	2801      	cmp	r0, #1
 8010f2c:	d00b      	beq.n	8010f46 <cos+0x5e>
 8010f2e:	2802      	cmp	r0, #2
 8010f30:	d016      	beq.n	8010f60 <cos+0x78>
 8010f32:	b9e0      	cbnz	r0, 8010f6e <cos+0x86>
 8010f34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f38:	ed9d 0b00 	vldr	d0, [sp]
 8010f3c:	f001 fbd4 	bl	80126e8 <__kernel_cos>
 8010f40:	ec51 0b10 	vmov	r0, r1, d0
 8010f44:	e7e7      	b.n	8010f16 <cos+0x2e>
 8010f46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f4a:	ed9d 0b00 	vldr	d0, [sp]
 8010f4e:	f001 ffe3 	bl	8012f18 <__kernel_sin>
 8010f52:	ec53 2b10 	vmov	r2, r3, d0
 8010f56:	ee10 0a10 	vmov	r0, s0
 8010f5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010f5e:	e7da      	b.n	8010f16 <cos+0x2e>
 8010f60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f64:	ed9d 0b00 	vldr	d0, [sp]
 8010f68:	f001 fbbe 	bl	80126e8 <__kernel_cos>
 8010f6c:	e7f1      	b.n	8010f52 <cos+0x6a>
 8010f6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f72:	ed9d 0b00 	vldr	d0, [sp]
 8010f76:	2001      	movs	r0, #1
 8010f78:	f001 ffce 	bl	8012f18 <__kernel_sin>
 8010f7c:	e7e0      	b.n	8010f40 <cos+0x58>
 8010f7e:	bf00      	nop
	...
 8010f88:	3fe921fb 	.word	0x3fe921fb
 8010f8c:	7fefffff 	.word	0x7fefffff

08010f90 <sin>:
 8010f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f92:	ec53 2b10 	vmov	r2, r3, d0
 8010f96:	4828      	ldr	r0, [pc, #160]	; (8011038 <sin+0xa8>)
 8010f98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010f9c:	4281      	cmp	r1, r0
 8010f9e:	dc07      	bgt.n	8010fb0 <sin+0x20>
 8010fa0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8011030 <sin+0xa0>
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	b005      	add	sp, #20
 8010fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fac:	f001 bfb4 	b.w	8012f18 <__kernel_sin>
 8010fb0:	4822      	ldr	r0, [pc, #136]	; (801103c <sin+0xac>)
 8010fb2:	4281      	cmp	r1, r0
 8010fb4:	dd09      	ble.n	8010fca <sin+0x3a>
 8010fb6:	ee10 0a10 	vmov	r0, s0
 8010fba:	4619      	mov	r1, r3
 8010fbc:	f7ef f97e 	bl	80002bc <__aeabi_dsub>
 8010fc0:	ec41 0b10 	vmov	d0, r0, r1
 8010fc4:	b005      	add	sp, #20
 8010fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010fca:	4668      	mov	r0, sp
 8010fcc:	f001 f8cc 	bl	8012168 <__ieee754_rem_pio2>
 8010fd0:	f000 0003 	and.w	r0, r0, #3
 8010fd4:	2801      	cmp	r0, #1
 8010fd6:	d00c      	beq.n	8010ff2 <sin+0x62>
 8010fd8:	2802      	cmp	r0, #2
 8010fda:	d011      	beq.n	8011000 <sin+0x70>
 8010fdc:	b9f0      	cbnz	r0, 801101c <sin+0x8c>
 8010fde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010fe2:	ed9d 0b00 	vldr	d0, [sp]
 8010fe6:	2001      	movs	r0, #1
 8010fe8:	f001 ff96 	bl	8012f18 <__kernel_sin>
 8010fec:	ec51 0b10 	vmov	r0, r1, d0
 8010ff0:	e7e6      	b.n	8010fc0 <sin+0x30>
 8010ff2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ff6:	ed9d 0b00 	vldr	d0, [sp]
 8010ffa:	f001 fb75 	bl	80126e8 <__kernel_cos>
 8010ffe:	e7f5      	b.n	8010fec <sin+0x5c>
 8011000:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011004:	ed9d 0b00 	vldr	d0, [sp]
 8011008:	2001      	movs	r0, #1
 801100a:	f001 ff85 	bl	8012f18 <__kernel_sin>
 801100e:	ec53 2b10 	vmov	r2, r3, d0
 8011012:	ee10 0a10 	vmov	r0, s0
 8011016:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801101a:	e7d1      	b.n	8010fc0 <sin+0x30>
 801101c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011020:	ed9d 0b00 	vldr	d0, [sp]
 8011024:	f001 fb60 	bl	80126e8 <__kernel_cos>
 8011028:	e7f1      	b.n	801100e <sin+0x7e>
 801102a:	bf00      	nop
 801102c:	f3af 8000 	nop.w
	...
 8011038:	3fe921fb 	.word	0x3fe921fb
 801103c:	7fefffff 	.word	0x7fefffff

08011040 <tan>:
 8011040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011042:	ec53 2b10 	vmov	r2, r3, d0
 8011046:	4816      	ldr	r0, [pc, #88]	; (80110a0 <tan+0x60>)
 8011048:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801104c:	4281      	cmp	r1, r0
 801104e:	dc07      	bgt.n	8011060 <tan+0x20>
 8011050:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8011098 <tan+0x58>
 8011054:	2001      	movs	r0, #1
 8011056:	b005      	add	sp, #20
 8011058:	f85d eb04 	ldr.w	lr, [sp], #4
 801105c:	f002 b81c 	b.w	8013098 <__kernel_tan>
 8011060:	4810      	ldr	r0, [pc, #64]	; (80110a4 <tan+0x64>)
 8011062:	4281      	cmp	r1, r0
 8011064:	dd09      	ble.n	801107a <tan+0x3a>
 8011066:	ee10 0a10 	vmov	r0, s0
 801106a:	4619      	mov	r1, r3
 801106c:	f7ef f926 	bl	80002bc <__aeabi_dsub>
 8011070:	ec41 0b10 	vmov	d0, r0, r1
 8011074:	b005      	add	sp, #20
 8011076:	f85d fb04 	ldr.w	pc, [sp], #4
 801107a:	4668      	mov	r0, sp
 801107c:	f001 f874 	bl	8012168 <__ieee754_rem_pio2>
 8011080:	0040      	lsls	r0, r0, #1
 8011082:	f000 0002 	and.w	r0, r0, #2
 8011086:	ed9d 1b02 	vldr	d1, [sp, #8]
 801108a:	ed9d 0b00 	vldr	d0, [sp]
 801108e:	f1c0 0001 	rsb	r0, r0, #1
 8011092:	f002 f801 	bl	8013098 <__kernel_tan>
 8011096:	e7ed      	b.n	8011074 <tan+0x34>
	...
 80110a0:	3fe921fb 	.word	0x3fe921fb
 80110a4:	7fefffff 	.word	0x7fefffff

080110a8 <acos>:
 80110a8:	b538      	push	{r3, r4, r5, lr}
 80110aa:	ed2d 8b02 	vpush	{d8}
 80110ae:	ec55 4b10 	vmov	r4, r5, d0
 80110b2:	f000 f8c9 	bl	8011248 <__ieee754_acos>
 80110b6:	4622      	mov	r2, r4
 80110b8:	462b      	mov	r3, r5
 80110ba:	4620      	mov	r0, r4
 80110bc:	4629      	mov	r1, r5
 80110be:	eeb0 8a40 	vmov.f32	s16, s0
 80110c2:	eef0 8a60 	vmov.f32	s17, s1
 80110c6:	f7ef fd4b 	bl	8000b60 <__aeabi_dcmpun>
 80110ca:	b9a8      	cbnz	r0, 80110f8 <acos+0x50>
 80110cc:	ec45 4b10 	vmov	d0, r4, r5
 80110d0:	f002 fa1c 	bl	801350c <fabs>
 80110d4:	4b0c      	ldr	r3, [pc, #48]	; (8011108 <acos+0x60>)
 80110d6:	ec51 0b10 	vmov	r0, r1, d0
 80110da:	2200      	movs	r2, #0
 80110dc:	f7ef fd36 	bl	8000b4c <__aeabi_dcmpgt>
 80110e0:	b150      	cbz	r0, 80110f8 <acos+0x50>
 80110e2:	f7ff feaf 	bl	8010e44 <__errno>
 80110e6:	ecbd 8b02 	vpop	{d8}
 80110ea:	2321      	movs	r3, #33	; 0x21
 80110ec:	6003      	str	r3, [r0, #0]
 80110ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110f2:	4806      	ldr	r0, [pc, #24]	; (801110c <acos+0x64>)
 80110f4:	f002 baa0 	b.w	8013638 <nan>
 80110f8:	eeb0 0a48 	vmov.f32	s0, s16
 80110fc:	eef0 0a68 	vmov.f32	s1, s17
 8011100:	ecbd 8b02 	vpop	{d8}
 8011104:	bd38      	pop	{r3, r4, r5, pc}
 8011106:	bf00      	nop
 8011108:	3ff00000 	.word	0x3ff00000
 801110c:	080390fe 	.word	0x080390fe

08011110 <pow>:
 8011110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011112:	ed2d 8b02 	vpush	{d8}
 8011116:	eeb0 8a40 	vmov.f32	s16, s0
 801111a:	eef0 8a60 	vmov.f32	s17, s1
 801111e:	ec55 4b11 	vmov	r4, r5, d1
 8011122:	f000 faf1 	bl	8011708 <__ieee754_pow>
 8011126:	4622      	mov	r2, r4
 8011128:	462b      	mov	r3, r5
 801112a:	4620      	mov	r0, r4
 801112c:	4629      	mov	r1, r5
 801112e:	ec57 6b10 	vmov	r6, r7, d0
 8011132:	f7ef fd15 	bl	8000b60 <__aeabi_dcmpun>
 8011136:	2800      	cmp	r0, #0
 8011138:	d13b      	bne.n	80111b2 <pow+0xa2>
 801113a:	ec51 0b18 	vmov	r0, r1, d8
 801113e:	2200      	movs	r2, #0
 8011140:	2300      	movs	r3, #0
 8011142:	f7ef fcdb 	bl	8000afc <__aeabi_dcmpeq>
 8011146:	b1b8      	cbz	r0, 8011178 <pow+0x68>
 8011148:	2200      	movs	r2, #0
 801114a:	2300      	movs	r3, #0
 801114c:	4620      	mov	r0, r4
 801114e:	4629      	mov	r1, r5
 8011150:	f7ef fcd4 	bl	8000afc <__aeabi_dcmpeq>
 8011154:	2800      	cmp	r0, #0
 8011156:	d146      	bne.n	80111e6 <pow+0xd6>
 8011158:	ec45 4b10 	vmov	d0, r4, r5
 801115c:	f002 f9df 	bl	801351e <finite>
 8011160:	b338      	cbz	r0, 80111b2 <pow+0xa2>
 8011162:	2200      	movs	r2, #0
 8011164:	2300      	movs	r3, #0
 8011166:	4620      	mov	r0, r4
 8011168:	4629      	mov	r1, r5
 801116a:	f7ef fcd1 	bl	8000b10 <__aeabi_dcmplt>
 801116e:	b300      	cbz	r0, 80111b2 <pow+0xa2>
 8011170:	f7ff fe68 	bl	8010e44 <__errno>
 8011174:	2322      	movs	r3, #34	; 0x22
 8011176:	e01b      	b.n	80111b0 <pow+0xa0>
 8011178:	ec47 6b10 	vmov	d0, r6, r7
 801117c:	f002 f9cf 	bl	801351e <finite>
 8011180:	b9e0      	cbnz	r0, 80111bc <pow+0xac>
 8011182:	eeb0 0a48 	vmov.f32	s0, s16
 8011186:	eef0 0a68 	vmov.f32	s1, s17
 801118a:	f002 f9c8 	bl	801351e <finite>
 801118e:	b1a8      	cbz	r0, 80111bc <pow+0xac>
 8011190:	ec45 4b10 	vmov	d0, r4, r5
 8011194:	f002 f9c3 	bl	801351e <finite>
 8011198:	b180      	cbz	r0, 80111bc <pow+0xac>
 801119a:	4632      	mov	r2, r6
 801119c:	463b      	mov	r3, r7
 801119e:	4630      	mov	r0, r6
 80111a0:	4639      	mov	r1, r7
 80111a2:	f7ef fcdd 	bl	8000b60 <__aeabi_dcmpun>
 80111a6:	2800      	cmp	r0, #0
 80111a8:	d0e2      	beq.n	8011170 <pow+0x60>
 80111aa:	f7ff fe4b 	bl	8010e44 <__errno>
 80111ae:	2321      	movs	r3, #33	; 0x21
 80111b0:	6003      	str	r3, [r0, #0]
 80111b2:	ecbd 8b02 	vpop	{d8}
 80111b6:	ec47 6b10 	vmov	d0, r6, r7
 80111ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111bc:	2200      	movs	r2, #0
 80111be:	2300      	movs	r3, #0
 80111c0:	4630      	mov	r0, r6
 80111c2:	4639      	mov	r1, r7
 80111c4:	f7ef fc9a 	bl	8000afc <__aeabi_dcmpeq>
 80111c8:	2800      	cmp	r0, #0
 80111ca:	d0f2      	beq.n	80111b2 <pow+0xa2>
 80111cc:	eeb0 0a48 	vmov.f32	s0, s16
 80111d0:	eef0 0a68 	vmov.f32	s1, s17
 80111d4:	f002 f9a3 	bl	801351e <finite>
 80111d8:	2800      	cmp	r0, #0
 80111da:	d0ea      	beq.n	80111b2 <pow+0xa2>
 80111dc:	ec45 4b10 	vmov	d0, r4, r5
 80111e0:	f002 f99d 	bl	801351e <finite>
 80111e4:	e7c3      	b.n	801116e <pow+0x5e>
 80111e6:	4f01      	ldr	r7, [pc, #4]	; (80111ec <pow+0xdc>)
 80111e8:	2600      	movs	r6, #0
 80111ea:	e7e2      	b.n	80111b2 <pow+0xa2>
 80111ec:	3ff00000 	.word	0x3ff00000

080111f0 <sqrt>:
 80111f0:	b538      	push	{r3, r4, r5, lr}
 80111f2:	ed2d 8b02 	vpush	{d8}
 80111f6:	ec55 4b10 	vmov	r4, r5, d0
 80111fa:	f001 f9c1 	bl	8012580 <__ieee754_sqrt>
 80111fe:	4622      	mov	r2, r4
 8011200:	462b      	mov	r3, r5
 8011202:	4620      	mov	r0, r4
 8011204:	4629      	mov	r1, r5
 8011206:	eeb0 8a40 	vmov.f32	s16, s0
 801120a:	eef0 8a60 	vmov.f32	s17, s1
 801120e:	f7ef fca7 	bl	8000b60 <__aeabi_dcmpun>
 8011212:	b990      	cbnz	r0, 801123a <sqrt+0x4a>
 8011214:	2200      	movs	r2, #0
 8011216:	2300      	movs	r3, #0
 8011218:	4620      	mov	r0, r4
 801121a:	4629      	mov	r1, r5
 801121c:	f7ef fc78 	bl	8000b10 <__aeabi_dcmplt>
 8011220:	b158      	cbz	r0, 801123a <sqrt+0x4a>
 8011222:	f7ff fe0f 	bl	8010e44 <__errno>
 8011226:	2321      	movs	r3, #33	; 0x21
 8011228:	6003      	str	r3, [r0, #0]
 801122a:	2200      	movs	r2, #0
 801122c:	2300      	movs	r3, #0
 801122e:	4610      	mov	r0, r2
 8011230:	4619      	mov	r1, r3
 8011232:	f7ef fb25 	bl	8000880 <__aeabi_ddiv>
 8011236:	ec41 0b18 	vmov	d8, r0, r1
 801123a:	eeb0 0a48 	vmov.f32	s0, s16
 801123e:	eef0 0a68 	vmov.f32	s1, s17
 8011242:	ecbd 8b02 	vpop	{d8}
 8011246:	bd38      	pop	{r3, r4, r5, pc}

08011248 <__ieee754_acos>:
 8011248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801124c:	ec55 4b10 	vmov	r4, r5, d0
 8011250:	49b7      	ldr	r1, [pc, #732]	; (8011530 <__ieee754_acos+0x2e8>)
 8011252:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011256:	428b      	cmp	r3, r1
 8011258:	dd1b      	ble.n	8011292 <__ieee754_acos+0x4a>
 801125a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801125e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011262:	4323      	orrs	r3, r4
 8011264:	d106      	bne.n	8011274 <__ieee754_acos+0x2c>
 8011266:	2d00      	cmp	r5, #0
 8011268:	f300 8211 	bgt.w	801168e <__ieee754_acos+0x446>
 801126c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80114c8 <__ieee754_acos+0x280>
 8011270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011274:	ee10 2a10 	vmov	r2, s0
 8011278:	462b      	mov	r3, r5
 801127a:	ee10 0a10 	vmov	r0, s0
 801127e:	4629      	mov	r1, r5
 8011280:	f7ef f81c 	bl	80002bc <__aeabi_dsub>
 8011284:	4602      	mov	r2, r0
 8011286:	460b      	mov	r3, r1
 8011288:	f7ef fafa 	bl	8000880 <__aeabi_ddiv>
 801128c:	ec41 0b10 	vmov	d0, r0, r1
 8011290:	e7ee      	b.n	8011270 <__ieee754_acos+0x28>
 8011292:	49a8      	ldr	r1, [pc, #672]	; (8011534 <__ieee754_acos+0x2ec>)
 8011294:	428b      	cmp	r3, r1
 8011296:	f300 8087 	bgt.w	80113a8 <__ieee754_acos+0x160>
 801129a:	4aa7      	ldr	r2, [pc, #668]	; (8011538 <__ieee754_acos+0x2f0>)
 801129c:	4293      	cmp	r3, r2
 801129e:	f340 81f9 	ble.w	8011694 <__ieee754_acos+0x44c>
 80112a2:	ee10 2a10 	vmov	r2, s0
 80112a6:	ee10 0a10 	vmov	r0, s0
 80112aa:	462b      	mov	r3, r5
 80112ac:	4629      	mov	r1, r5
 80112ae:	f7ef f9bd 	bl	800062c <__aeabi_dmul>
 80112b2:	a387      	add	r3, pc, #540	; (adr r3, 80114d0 <__ieee754_acos+0x288>)
 80112b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b8:	4606      	mov	r6, r0
 80112ba:	460f      	mov	r7, r1
 80112bc:	f7ef f9b6 	bl	800062c <__aeabi_dmul>
 80112c0:	a385      	add	r3, pc, #532	; (adr r3, 80114d8 <__ieee754_acos+0x290>)
 80112c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c6:	f7ee fffb 	bl	80002c0 <__adddf3>
 80112ca:	4632      	mov	r2, r6
 80112cc:	463b      	mov	r3, r7
 80112ce:	f7ef f9ad 	bl	800062c <__aeabi_dmul>
 80112d2:	a383      	add	r3, pc, #524	; (adr r3, 80114e0 <__ieee754_acos+0x298>)
 80112d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d8:	f7ee fff0 	bl	80002bc <__aeabi_dsub>
 80112dc:	4632      	mov	r2, r6
 80112de:	463b      	mov	r3, r7
 80112e0:	f7ef f9a4 	bl	800062c <__aeabi_dmul>
 80112e4:	a380      	add	r3, pc, #512	; (adr r3, 80114e8 <__ieee754_acos+0x2a0>)
 80112e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ea:	f7ee ffe9 	bl	80002c0 <__adddf3>
 80112ee:	4632      	mov	r2, r6
 80112f0:	463b      	mov	r3, r7
 80112f2:	f7ef f99b 	bl	800062c <__aeabi_dmul>
 80112f6:	a37e      	add	r3, pc, #504	; (adr r3, 80114f0 <__ieee754_acos+0x2a8>)
 80112f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fc:	f7ee ffde 	bl	80002bc <__aeabi_dsub>
 8011300:	4632      	mov	r2, r6
 8011302:	463b      	mov	r3, r7
 8011304:	f7ef f992 	bl	800062c <__aeabi_dmul>
 8011308:	a37b      	add	r3, pc, #492	; (adr r3, 80114f8 <__ieee754_acos+0x2b0>)
 801130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130e:	f7ee ffd7 	bl	80002c0 <__adddf3>
 8011312:	4632      	mov	r2, r6
 8011314:	463b      	mov	r3, r7
 8011316:	f7ef f989 	bl	800062c <__aeabi_dmul>
 801131a:	a379      	add	r3, pc, #484	; (adr r3, 8011500 <__ieee754_acos+0x2b8>)
 801131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011320:	4680      	mov	r8, r0
 8011322:	4689      	mov	r9, r1
 8011324:	4630      	mov	r0, r6
 8011326:	4639      	mov	r1, r7
 8011328:	f7ef f980 	bl	800062c <__aeabi_dmul>
 801132c:	a376      	add	r3, pc, #472	; (adr r3, 8011508 <__ieee754_acos+0x2c0>)
 801132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011332:	f7ee ffc3 	bl	80002bc <__aeabi_dsub>
 8011336:	4632      	mov	r2, r6
 8011338:	463b      	mov	r3, r7
 801133a:	f7ef f977 	bl	800062c <__aeabi_dmul>
 801133e:	a374      	add	r3, pc, #464	; (adr r3, 8011510 <__ieee754_acos+0x2c8>)
 8011340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011344:	f7ee ffbc 	bl	80002c0 <__adddf3>
 8011348:	4632      	mov	r2, r6
 801134a:	463b      	mov	r3, r7
 801134c:	f7ef f96e 	bl	800062c <__aeabi_dmul>
 8011350:	a371      	add	r3, pc, #452	; (adr r3, 8011518 <__ieee754_acos+0x2d0>)
 8011352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011356:	f7ee ffb1 	bl	80002bc <__aeabi_dsub>
 801135a:	4632      	mov	r2, r6
 801135c:	463b      	mov	r3, r7
 801135e:	f7ef f965 	bl	800062c <__aeabi_dmul>
 8011362:	4b76      	ldr	r3, [pc, #472]	; (801153c <__ieee754_acos+0x2f4>)
 8011364:	2200      	movs	r2, #0
 8011366:	f7ee ffab 	bl	80002c0 <__adddf3>
 801136a:	4602      	mov	r2, r0
 801136c:	460b      	mov	r3, r1
 801136e:	4640      	mov	r0, r8
 8011370:	4649      	mov	r1, r9
 8011372:	f7ef fa85 	bl	8000880 <__aeabi_ddiv>
 8011376:	4622      	mov	r2, r4
 8011378:	462b      	mov	r3, r5
 801137a:	f7ef f957 	bl	800062c <__aeabi_dmul>
 801137e:	4602      	mov	r2, r0
 8011380:	460b      	mov	r3, r1
 8011382:	a167      	add	r1, pc, #412	; (adr r1, 8011520 <__ieee754_acos+0x2d8>)
 8011384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011388:	f7ee ff98 	bl	80002bc <__aeabi_dsub>
 801138c:	4602      	mov	r2, r0
 801138e:	460b      	mov	r3, r1
 8011390:	4620      	mov	r0, r4
 8011392:	4629      	mov	r1, r5
 8011394:	f7ee ff92 	bl	80002bc <__aeabi_dsub>
 8011398:	4602      	mov	r2, r0
 801139a:	460b      	mov	r3, r1
 801139c:	a162      	add	r1, pc, #392	; (adr r1, 8011528 <__ieee754_acos+0x2e0>)
 801139e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113a2:	f7ee ff8b 	bl	80002bc <__aeabi_dsub>
 80113a6:	e771      	b.n	801128c <__ieee754_acos+0x44>
 80113a8:	2d00      	cmp	r5, #0
 80113aa:	f280 80cb 	bge.w	8011544 <__ieee754_acos+0x2fc>
 80113ae:	ee10 0a10 	vmov	r0, s0
 80113b2:	4b62      	ldr	r3, [pc, #392]	; (801153c <__ieee754_acos+0x2f4>)
 80113b4:	2200      	movs	r2, #0
 80113b6:	4629      	mov	r1, r5
 80113b8:	f7ee ff82 	bl	80002c0 <__adddf3>
 80113bc:	4b60      	ldr	r3, [pc, #384]	; (8011540 <__ieee754_acos+0x2f8>)
 80113be:	2200      	movs	r2, #0
 80113c0:	f7ef f934 	bl	800062c <__aeabi_dmul>
 80113c4:	a342      	add	r3, pc, #264	; (adr r3, 80114d0 <__ieee754_acos+0x288>)
 80113c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ca:	4604      	mov	r4, r0
 80113cc:	460d      	mov	r5, r1
 80113ce:	f7ef f92d 	bl	800062c <__aeabi_dmul>
 80113d2:	a341      	add	r3, pc, #260	; (adr r3, 80114d8 <__ieee754_acos+0x290>)
 80113d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d8:	f7ee ff72 	bl	80002c0 <__adddf3>
 80113dc:	4622      	mov	r2, r4
 80113de:	462b      	mov	r3, r5
 80113e0:	f7ef f924 	bl	800062c <__aeabi_dmul>
 80113e4:	a33e      	add	r3, pc, #248	; (adr r3, 80114e0 <__ieee754_acos+0x298>)
 80113e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ea:	f7ee ff67 	bl	80002bc <__aeabi_dsub>
 80113ee:	4622      	mov	r2, r4
 80113f0:	462b      	mov	r3, r5
 80113f2:	f7ef f91b 	bl	800062c <__aeabi_dmul>
 80113f6:	a33c      	add	r3, pc, #240	; (adr r3, 80114e8 <__ieee754_acos+0x2a0>)
 80113f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fc:	f7ee ff60 	bl	80002c0 <__adddf3>
 8011400:	4622      	mov	r2, r4
 8011402:	462b      	mov	r3, r5
 8011404:	f7ef f912 	bl	800062c <__aeabi_dmul>
 8011408:	a339      	add	r3, pc, #228	; (adr r3, 80114f0 <__ieee754_acos+0x2a8>)
 801140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140e:	f7ee ff55 	bl	80002bc <__aeabi_dsub>
 8011412:	4622      	mov	r2, r4
 8011414:	462b      	mov	r3, r5
 8011416:	f7ef f909 	bl	800062c <__aeabi_dmul>
 801141a:	a337      	add	r3, pc, #220	; (adr r3, 80114f8 <__ieee754_acos+0x2b0>)
 801141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011420:	f7ee ff4e 	bl	80002c0 <__adddf3>
 8011424:	4622      	mov	r2, r4
 8011426:	462b      	mov	r3, r5
 8011428:	f7ef f900 	bl	800062c <__aeabi_dmul>
 801142c:	ec45 4b10 	vmov	d0, r4, r5
 8011430:	4680      	mov	r8, r0
 8011432:	4689      	mov	r9, r1
 8011434:	f001 f8a4 	bl	8012580 <__ieee754_sqrt>
 8011438:	a331      	add	r3, pc, #196	; (adr r3, 8011500 <__ieee754_acos+0x2b8>)
 801143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801143e:	4620      	mov	r0, r4
 8011440:	4629      	mov	r1, r5
 8011442:	ec57 6b10 	vmov	r6, r7, d0
 8011446:	f7ef f8f1 	bl	800062c <__aeabi_dmul>
 801144a:	a32f      	add	r3, pc, #188	; (adr r3, 8011508 <__ieee754_acos+0x2c0>)
 801144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011450:	f7ee ff34 	bl	80002bc <__aeabi_dsub>
 8011454:	4622      	mov	r2, r4
 8011456:	462b      	mov	r3, r5
 8011458:	f7ef f8e8 	bl	800062c <__aeabi_dmul>
 801145c:	a32c      	add	r3, pc, #176	; (adr r3, 8011510 <__ieee754_acos+0x2c8>)
 801145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011462:	f7ee ff2d 	bl	80002c0 <__adddf3>
 8011466:	4622      	mov	r2, r4
 8011468:	462b      	mov	r3, r5
 801146a:	f7ef f8df 	bl	800062c <__aeabi_dmul>
 801146e:	a32a      	add	r3, pc, #168	; (adr r3, 8011518 <__ieee754_acos+0x2d0>)
 8011470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011474:	f7ee ff22 	bl	80002bc <__aeabi_dsub>
 8011478:	4622      	mov	r2, r4
 801147a:	462b      	mov	r3, r5
 801147c:	f7ef f8d6 	bl	800062c <__aeabi_dmul>
 8011480:	4b2e      	ldr	r3, [pc, #184]	; (801153c <__ieee754_acos+0x2f4>)
 8011482:	2200      	movs	r2, #0
 8011484:	f7ee ff1c 	bl	80002c0 <__adddf3>
 8011488:	4602      	mov	r2, r0
 801148a:	460b      	mov	r3, r1
 801148c:	4640      	mov	r0, r8
 801148e:	4649      	mov	r1, r9
 8011490:	f7ef f9f6 	bl	8000880 <__aeabi_ddiv>
 8011494:	4632      	mov	r2, r6
 8011496:	463b      	mov	r3, r7
 8011498:	f7ef f8c8 	bl	800062c <__aeabi_dmul>
 801149c:	a320      	add	r3, pc, #128	; (adr r3, 8011520 <__ieee754_acos+0x2d8>)
 801149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a2:	f7ee ff0b 	bl	80002bc <__aeabi_dsub>
 80114a6:	4632      	mov	r2, r6
 80114a8:	463b      	mov	r3, r7
 80114aa:	f7ee ff09 	bl	80002c0 <__adddf3>
 80114ae:	4602      	mov	r2, r0
 80114b0:	460b      	mov	r3, r1
 80114b2:	f7ee ff05 	bl	80002c0 <__adddf3>
 80114b6:	4602      	mov	r2, r0
 80114b8:	460b      	mov	r3, r1
 80114ba:	a103      	add	r1, pc, #12	; (adr r1, 80114c8 <__ieee754_acos+0x280>)
 80114bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114c0:	e76f      	b.n	80113a2 <__ieee754_acos+0x15a>
 80114c2:	bf00      	nop
 80114c4:	f3af 8000 	nop.w
 80114c8:	54442d18 	.word	0x54442d18
 80114cc:	400921fb 	.word	0x400921fb
 80114d0:	0dfdf709 	.word	0x0dfdf709
 80114d4:	3f023de1 	.word	0x3f023de1
 80114d8:	7501b288 	.word	0x7501b288
 80114dc:	3f49efe0 	.word	0x3f49efe0
 80114e0:	b5688f3b 	.word	0xb5688f3b
 80114e4:	3fa48228 	.word	0x3fa48228
 80114e8:	0e884455 	.word	0x0e884455
 80114ec:	3fc9c155 	.word	0x3fc9c155
 80114f0:	03eb6f7d 	.word	0x03eb6f7d
 80114f4:	3fd4d612 	.word	0x3fd4d612
 80114f8:	55555555 	.word	0x55555555
 80114fc:	3fc55555 	.word	0x3fc55555
 8011500:	b12e9282 	.word	0xb12e9282
 8011504:	3fb3b8c5 	.word	0x3fb3b8c5
 8011508:	1b8d0159 	.word	0x1b8d0159
 801150c:	3fe6066c 	.word	0x3fe6066c
 8011510:	9c598ac8 	.word	0x9c598ac8
 8011514:	40002ae5 	.word	0x40002ae5
 8011518:	1c8a2d4b 	.word	0x1c8a2d4b
 801151c:	40033a27 	.word	0x40033a27
 8011520:	33145c07 	.word	0x33145c07
 8011524:	3c91a626 	.word	0x3c91a626
 8011528:	54442d18 	.word	0x54442d18
 801152c:	3ff921fb 	.word	0x3ff921fb
 8011530:	3fefffff 	.word	0x3fefffff
 8011534:	3fdfffff 	.word	0x3fdfffff
 8011538:	3c600000 	.word	0x3c600000
 801153c:	3ff00000 	.word	0x3ff00000
 8011540:	3fe00000 	.word	0x3fe00000
 8011544:	ee10 2a10 	vmov	r2, s0
 8011548:	462b      	mov	r3, r5
 801154a:	496d      	ldr	r1, [pc, #436]	; (8011700 <__ieee754_acos+0x4b8>)
 801154c:	2000      	movs	r0, #0
 801154e:	f7ee feb5 	bl	80002bc <__aeabi_dsub>
 8011552:	4b6c      	ldr	r3, [pc, #432]	; (8011704 <__ieee754_acos+0x4bc>)
 8011554:	2200      	movs	r2, #0
 8011556:	f7ef f869 	bl	800062c <__aeabi_dmul>
 801155a:	4604      	mov	r4, r0
 801155c:	460d      	mov	r5, r1
 801155e:	ec45 4b10 	vmov	d0, r4, r5
 8011562:	f001 f80d 	bl	8012580 <__ieee754_sqrt>
 8011566:	a34e      	add	r3, pc, #312	; (adr r3, 80116a0 <__ieee754_acos+0x458>)
 8011568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156c:	4620      	mov	r0, r4
 801156e:	4629      	mov	r1, r5
 8011570:	ec59 8b10 	vmov	r8, r9, d0
 8011574:	f7ef f85a 	bl	800062c <__aeabi_dmul>
 8011578:	a34b      	add	r3, pc, #300	; (adr r3, 80116a8 <__ieee754_acos+0x460>)
 801157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801157e:	f7ee fe9f 	bl	80002c0 <__adddf3>
 8011582:	4622      	mov	r2, r4
 8011584:	462b      	mov	r3, r5
 8011586:	f7ef f851 	bl	800062c <__aeabi_dmul>
 801158a:	a349      	add	r3, pc, #292	; (adr r3, 80116b0 <__ieee754_acos+0x468>)
 801158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011590:	f7ee fe94 	bl	80002bc <__aeabi_dsub>
 8011594:	4622      	mov	r2, r4
 8011596:	462b      	mov	r3, r5
 8011598:	f7ef f848 	bl	800062c <__aeabi_dmul>
 801159c:	a346      	add	r3, pc, #280	; (adr r3, 80116b8 <__ieee754_acos+0x470>)
 801159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115a2:	f7ee fe8d 	bl	80002c0 <__adddf3>
 80115a6:	4622      	mov	r2, r4
 80115a8:	462b      	mov	r3, r5
 80115aa:	f7ef f83f 	bl	800062c <__aeabi_dmul>
 80115ae:	a344      	add	r3, pc, #272	; (adr r3, 80116c0 <__ieee754_acos+0x478>)
 80115b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b4:	f7ee fe82 	bl	80002bc <__aeabi_dsub>
 80115b8:	4622      	mov	r2, r4
 80115ba:	462b      	mov	r3, r5
 80115bc:	f7ef f836 	bl	800062c <__aeabi_dmul>
 80115c0:	a341      	add	r3, pc, #260	; (adr r3, 80116c8 <__ieee754_acos+0x480>)
 80115c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c6:	f7ee fe7b 	bl	80002c0 <__adddf3>
 80115ca:	4622      	mov	r2, r4
 80115cc:	462b      	mov	r3, r5
 80115ce:	f7ef f82d 	bl	800062c <__aeabi_dmul>
 80115d2:	a33f      	add	r3, pc, #252	; (adr r3, 80116d0 <__ieee754_acos+0x488>)
 80115d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d8:	4682      	mov	sl, r0
 80115da:	468b      	mov	fp, r1
 80115dc:	4620      	mov	r0, r4
 80115de:	4629      	mov	r1, r5
 80115e0:	f7ef f824 	bl	800062c <__aeabi_dmul>
 80115e4:	a33c      	add	r3, pc, #240	; (adr r3, 80116d8 <__ieee754_acos+0x490>)
 80115e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ea:	f7ee fe67 	bl	80002bc <__aeabi_dsub>
 80115ee:	4622      	mov	r2, r4
 80115f0:	462b      	mov	r3, r5
 80115f2:	f7ef f81b 	bl	800062c <__aeabi_dmul>
 80115f6:	a33a      	add	r3, pc, #232	; (adr r3, 80116e0 <__ieee754_acos+0x498>)
 80115f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115fc:	f7ee fe60 	bl	80002c0 <__adddf3>
 8011600:	4622      	mov	r2, r4
 8011602:	462b      	mov	r3, r5
 8011604:	f7ef f812 	bl	800062c <__aeabi_dmul>
 8011608:	a337      	add	r3, pc, #220	; (adr r3, 80116e8 <__ieee754_acos+0x4a0>)
 801160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160e:	f7ee fe55 	bl	80002bc <__aeabi_dsub>
 8011612:	4622      	mov	r2, r4
 8011614:	462b      	mov	r3, r5
 8011616:	f7ef f809 	bl	800062c <__aeabi_dmul>
 801161a:	4b39      	ldr	r3, [pc, #228]	; (8011700 <__ieee754_acos+0x4b8>)
 801161c:	2200      	movs	r2, #0
 801161e:	f7ee fe4f 	bl	80002c0 <__adddf3>
 8011622:	4602      	mov	r2, r0
 8011624:	460b      	mov	r3, r1
 8011626:	4650      	mov	r0, sl
 8011628:	4659      	mov	r1, fp
 801162a:	f7ef f929 	bl	8000880 <__aeabi_ddiv>
 801162e:	4642      	mov	r2, r8
 8011630:	464b      	mov	r3, r9
 8011632:	f7ee fffb 	bl	800062c <__aeabi_dmul>
 8011636:	2600      	movs	r6, #0
 8011638:	4682      	mov	sl, r0
 801163a:	468b      	mov	fp, r1
 801163c:	4632      	mov	r2, r6
 801163e:	464b      	mov	r3, r9
 8011640:	4630      	mov	r0, r6
 8011642:	4649      	mov	r1, r9
 8011644:	f7ee fff2 	bl	800062c <__aeabi_dmul>
 8011648:	4602      	mov	r2, r0
 801164a:	460b      	mov	r3, r1
 801164c:	4620      	mov	r0, r4
 801164e:	4629      	mov	r1, r5
 8011650:	f7ee fe34 	bl	80002bc <__aeabi_dsub>
 8011654:	4632      	mov	r2, r6
 8011656:	4604      	mov	r4, r0
 8011658:	460d      	mov	r5, r1
 801165a:	464b      	mov	r3, r9
 801165c:	4640      	mov	r0, r8
 801165e:	4649      	mov	r1, r9
 8011660:	f7ee fe2e 	bl	80002c0 <__adddf3>
 8011664:	4602      	mov	r2, r0
 8011666:	460b      	mov	r3, r1
 8011668:	4620      	mov	r0, r4
 801166a:	4629      	mov	r1, r5
 801166c:	f7ef f908 	bl	8000880 <__aeabi_ddiv>
 8011670:	4602      	mov	r2, r0
 8011672:	460b      	mov	r3, r1
 8011674:	4650      	mov	r0, sl
 8011676:	4659      	mov	r1, fp
 8011678:	f7ee fe22 	bl	80002c0 <__adddf3>
 801167c:	4632      	mov	r2, r6
 801167e:	464b      	mov	r3, r9
 8011680:	f7ee fe1e 	bl	80002c0 <__adddf3>
 8011684:	4602      	mov	r2, r0
 8011686:	460b      	mov	r3, r1
 8011688:	f7ee fe1a 	bl	80002c0 <__adddf3>
 801168c:	e5fe      	b.n	801128c <__ieee754_acos+0x44>
 801168e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80116f0 <__ieee754_acos+0x4a8>
 8011692:	e5ed      	b.n	8011270 <__ieee754_acos+0x28>
 8011694:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80116f8 <__ieee754_acos+0x4b0>
 8011698:	e5ea      	b.n	8011270 <__ieee754_acos+0x28>
 801169a:	bf00      	nop
 801169c:	f3af 8000 	nop.w
 80116a0:	0dfdf709 	.word	0x0dfdf709
 80116a4:	3f023de1 	.word	0x3f023de1
 80116a8:	7501b288 	.word	0x7501b288
 80116ac:	3f49efe0 	.word	0x3f49efe0
 80116b0:	b5688f3b 	.word	0xb5688f3b
 80116b4:	3fa48228 	.word	0x3fa48228
 80116b8:	0e884455 	.word	0x0e884455
 80116bc:	3fc9c155 	.word	0x3fc9c155
 80116c0:	03eb6f7d 	.word	0x03eb6f7d
 80116c4:	3fd4d612 	.word	0x3fd4d612
 80116c8:	55555555 	.word	0x55555555
 80116cc:	3fc55555 	.word	0x3fc55555
 80116d0:	b12e9282 	.word	0xb12e9282
 80116d4:	3fb3b8c5 	.word	0x3fb3b8c5
 80116d8:	1b8d0159 	.word	0x1b8d0159
 80116dc:	3fe6066c 	.word	0x3fe6066c
 80116e0:	9c598ac8 	.word	0x9c598ac8
 80116e4:	40002ae5 	.word	0x40002ae5
 80116e8:	1c8a2d4b 	.word	0x1c8a2d4b
 80116ec:	40033a27 	.word	0x40033a27
	...
 80116f8:	54442d18 	.word	0x54442d18
 80116fc:	3ff921fb 	.word	0x3ff921fb
 8011700:	3ff00000 	.word	0x3ff00000
 8011704:	3fe00000 	.word	0x3fe00000

08011708 <__ieee754_pow>:
 8011708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801170c:	ed2d 8b06 	vpush	{d8-d10}
 8011710:	b089      	sub	sp, #36	; 0x24
 8011712:	ed8d 1b00 	vstr	d1, [sp]
 8011716:	e9dd 2900 	ldrd	r2, r9, [sp]
 801171a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801171e:	ea58 0102 	orrs.w	r1, r8, r2
 8011722:	ec57 6b10 	vmov	r6, r7, d0
 8011726:	d115      	bne.n	8011754 <__ieee754_pow+0x4c>
 8011728:	19b3      	adds	r3, r6, r6
 801172a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801172e:	4152      	adcs	r2, r2
 8011730:	4299      	cmp	r1, r3
 8011732:	4b89      	ldr	r3, [pc, #548]	; (8011958 <__ieee754_pow+0x250>)
 8011734:	4193      	sbcs	r3, r2
 8011736:	f080 84d2 	bcs.w	80120de <__ieee754_pow+0x9d6>
 801173a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801173e:	4630      	mov	r0, r6
 8011740:	4639      	mov	r1, r7
 8011742:	f7ee fdbd 	bl	80002c0 <__adddf3>
 8011746:	ec41 0b10 	vmov	d0, r0, r1
 801174a:	b009      	add	sp, #36	; 0x24
 801174c:	ecbd 8b06 	vpop	{d8-d10}
 8011750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011754:	4b81      	ldr	r3, [pc, #516]	; (801195c <__ieee754_pow+0x254>)
 8011756:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801175a:	429c      	cmp	r4, r3
 801175c:	ee10 aa10 	vmov	sl, s0
 8011760:	463d      	mov	r5, r7
 8011762:	dc06      	bgt.n	8011772 <__ieee754_pow+0x6a>
 8011764:	d101      	bne.n	801176a <__ieee754_pow+0x62>
 8011766:	2e00      	cmp	r6, #0
 8011768:	d1e7      	bne.n	801173a <__ieee754_pow+0x32>
 801176a:	4598      	cmp	r8, r3
 801176c:	dc01      	bgt.n	8011772 <__ieee754_pow+0x6a>
 801176e:	d10f      	bne.n	8011790 <__ieee754_pow+0x88>
 8011770:	b172      	cbz	r2, 8011790 <__ieee754_pow+0x88>
 8011772:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011776:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801177a:	ea55 050a 	orrs.w	r5, r5, sl
 801177e:	d1dc      	bne.n	801173a <__ieee754_pow+0x32>
 8011780:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011784:	18db      	adds	r3, r3, r3
 8011786:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801178a:	4152      	adcs	r2, r2
 801178c:	429d      	cmp	r5, r3
 801178e:	e7d0      	b.n	8011732 <__ieee754_pow+0x2a>
 8011790:	2d00      	cmp	r5, #0
 8011792:	da3b      	bge.n	801180c <__ieee754_pow+0x104>
 8011794:	4b72      	ldr	r3, [pc, #456]	; (8011960 <__ieee754_pow+0x258>)
 8011796:	4598      	cmp	r8, r3
 8011798:	dc51      	bgt.n	801183e <__ieee754_pow+0x136>
 801179a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801179e:	4598      	cmp	r8, r3
 80117a0:	f340 84ac 	ble.w	80120fc <__ieee754_pow+0x9f4>
 80117a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80117a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80117ac:	2b14      	cmp	r3, #20
 80117ae:	dd0f      	ble.n	80117d0 <__ieee754_pow+0xc8>
 80117b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80117b4:	fa22 f103 	lsr.w	r1, r2, r3
 80117b8:	fa01 f303 	lsl.w	r3, r1, r3
 80117bc:	4293      	cmp	r3, r2
 80117be:	f040 849d 	bne.w	80120fc <__ieee754_pow+0x9f4>
 80117c2:	f001 0101 	and.w	r1, r1, #1
 80117c6:	f1c1 0302 	rsb	r3, r1, #2
 80117ca:	9304      	str	r3, [sp, #16]
 80117cc:	b182      	cbz	r2, 80117f0 <__ieee754_pow+0xe8>
 80117ce:	e05f      	b.n	8011890 <__ieee754_pow+0x188>
 80117d0:	2a00      	cmp	r2, #0
 80117d2:	d15b      	bne.n	801188c <__ieee754_pow+0x184>
 80117d4:	f1c3 0314 	rsb	r3, r3, #20
 80117d8:	fa48 f103 	asr.w	r1, r8, r3
 80117dc:	fa01 f303 	lsl.w	r3, r1, r3
 80117e0:	4543      	cmp	r3, r8
 80117e2:	f040 8488 	bne.w	80120f6 <__ieee754_pow+0x9ee>
 80117e6:	f001 0101 	and.w	r1, r1, #1
 80117ea:	f1c1 0302 	rsb	r3, r1, #2
 80117ee:	9304      	str	r3, [sp, #16]
 80117f0:	4b5c      	ldr	r3, [pc, #368]	; (8011964 <__ieee754_pow+0x25c>)
 80117f2:	4598      	cmp	r8, r3
 80117f4:	d132      	bne.n	801185c <__ieee754_pow+0x154>
 80117f6:	f1b9 0f00 	cmp.w	r9, #0
 80117fa:	f280 8478 	bge.w	80120ee <__ieee754_pow+0x9e6>
 80117fe:	4959      	ldr	r1, [pc, #356]	; (8011964 <__ieee754_pow+0x25c>)
 8011800:	4632      	mov	r2, r6
 8011802:	463b      	mov	r3, r7
 8011804:	2000      	movs	r0, #0
 8011806:	f7ef f83b 	bl	8000880 <__aeabi_ddiv>
 801180a:	e79c      	b.n	8011746 <__ieee754_pow+0x3e>
 801180c:	2300      	movs	r3, #0
 801180e:	9304      	str	r3, [sp, #16]
 8011810:	2a00      	cmp	r2, #0
 8011812:	d13d      	bne.n	8011890 <__ieee754_pow+0x188>
 8011814:	4b51      	ldr	r3, [pc, #324]	; (801195c <__ieee754_pow+0x254>)
 8011816:	4598      	cmp	r8, r3
 8011818:	d1ea      	bne.n	80117f0 <__ieee754_pow+0xe8>
 801181a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801181e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011822:	ea53 030a 	orrs.w	r3, r3, sl
 8011826:	f000 845a 	beq.w	80120de <__ieee754_pow+0x9d6>
 801182a:	4b4f      	ldr	r3, [pc, #316]	; (8011968 <__ieee754_pow+0x260>)
 801182c:	429c      	cmp	r4, r3
 801182e:	dd08      	ble.n	8011842 <__ieee754_pow+0x13a>
 8011830:	f1b9 0f00 	cmp.w	r9, #0
 8011834:	f2c0 8457 	blt.w	80120e6 <__ieee754_pow+0x9de>
 8011838:	e9dd 0100 	ldrd	r0, r1, [sp]
 801183c:	e783      	b.n	8011746 <__ieee754_pow+0x3e>
 801183e:	2302      	movs	r3, #2
 8011840:	e7e5      	b.n	801180e <__ieee754_pow+0x106>
 8011842:	f1b9 0f00 	cmp.w	r9, #0
 8011846:	f04f 0000 	mov.w	r0, #0
 801184a:	f04f 0100 	mov.w	r1, #0
 801184e:	f6bf af7a 	bge.w	8011746 <__ieee754_pow+0x3e>
 8011852:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011856:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801185a:	e774      	b.n	8011746 <__ieee754_pow+0x3e>
 801185c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011860:	d106      	bne.n	8011870 <__ieee754_pow+0x168>
 8011862:	4632      	mov	r2, r6
 8011864:	463b      	mov	r3, r7
 8011866:	4630      	mov	r0, r6
 8011868:	4639      	mov	r1, r7
 801186a:	f7ee fedf 	bl	800062c <__aeabi_dmul>
 801186e:	e76a      	b.n	8011746 <__ieee754_pow+0x3e>
 8011870:	4b3e      	ldr	r3, [pc, #248]	; (801196c <__ieee754_pow+0x264>)
 8011872:	4599      	cmp	r9, r3
 8011874:	d10c      	bne.n	8011890 <__ieee754_pow+0x188>
 8011876:	2d00      	cmp	r5, #0
 8011878:	db0a      	blt.n	8011890 <__ieee754_pow+0x188>
 801187a:	ec47 6b10 	vmov	d0, r6, r7
 801187e:	b009      	add	sp, #36	; 0x24
 8011880:	ecbd 8b06 	vpop	{d8-d10}
 8011884:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011888:	f000 be7a 	b.w	8012580 <__ieee754_sqrt>
 801188c:	2300      	movs	r3, #0
 801188e:	9304      	str	r3, [sp, #16]
 8011890:	ec47 6b10 	vmov	d0, r6, r7
 8011894:	f001 fe3a 	bl	801350c <fabs>
 8011898:	ec51 0b10 	vmov	r0, r1, d0
 801189c:	f1ba 0f00 	cmp.w	sl, #0
 80118a0:	d129      	bne.n	80118f6 <__ieee754_pow+0x1ee>
 80118a2:	b124      	cbz	r4, 80118ae <__ieee754_pow+0x1a6>
 80118a4:	4b2f      	ldr	r3, [pc, #188]	; (8011964 <__ieee754_pow+0x25c>)
 80118a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d123      	bne.n	80118f6 <__ieee754_pow+0x1ee>
 80118ae:	f1b9 0f00 	cmp.w	r9, #0
 80118b2:	da05      	bge.n	80118c0 <__ieee754_pow+0x1b8>
 80118b4:	4602      	mov	r2, r0
 80118b6:	460b      	mov	r3, r1
 80118b8:	2000      	movs	r0, #0
 80118ba:	492a      	ldr	r1, [pc, #168]	; (8011964 <__ieee754_pow+0x25c>)
 80118bc:	f7ee ffe0 	bl	8000880 <__aeabi_ddiv>
 80118c0:	2d00      	cmp	r5, #0
 80118c2:	f6bf af40 	bge.w	8011746 <__ieee754_pow+0x3e>
 80118c6:	9b04      	ldr	r3, [sp, #16]
 80118c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80118cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80118d0:	4323      	orrs	r3, r4
 80118d2:	d108      	bne.n	80118e6 <__ieee754_pow+0x1de>
 80118d4:	4602      	mov	r2, r0
 80118d6:	460b      	mov	r3, r1
 80118d8:	4610      	mov	r0, r2
 80118da:	4619      	mov	r1, r3
 80118dc:	f7ee fcee 	bl	80002bc <__aeabi_dsub>
 80118e0:	4602      	mov	r2, r0
 80118e2:	460b      	mov	r3, r1
 80118e4:	e78f      	b.n	8011806 <__ieee754_pow+0xfe>
 80118e6:	9b04      	ldr	r3, [sp, #16]
 80118e8:	2b01      	cmp	r3, #1
 80118ea:	f47f af2c 	bne.w	8011746 <__ieee754_pow+0x3e>
 80118ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80118f2:	4619      	mov	r1, r3
 80118f4:	e727      	b.n	8011746 <__ieee754_pow+0x3e>
 80118f6:	0feb      	lsrs	r3, r5, #31
 80118f8:	3b01      	subs	r3, #1
 80118fa:	9306      	str	r3, [sp, #24]
 80118fc:	9a06      	ldr	r2, [sp, #24]
 80118fe:	9b04      	ldr	r3, [sp, #16]
 8011900:	4313      	orrs	r3, r2
 8011902:	d102      	bne.n	801190a <__ieee754_pow+0x202>
 8011904:	4632      	mov	r2, r6
 8011906:	463b      	mov	r3, r7
 8011908:	e7e6      	b.n	80118d8 <__ieee754_pow+0x1d0>
 801190a:	4b19      	ldr	r3, [pc, #100]	; (8011970 <__ieee754_pow+0x268>)
 801190c:	4598      	cmp	r8, r3
 801190e:	f340 80fb 	ble.w	8011b08 <__ieee754_pow+0x400>
 8011912:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011916:	4598      	cmp	r8, r3
 8011918:	4b13      	ldr	r3, [pc, #76]	; (8011968 <__ieee754_pow+0x260>)
 801191a:	dd0c      	ble.n	8011936 <__ieee754_pow+0x22e>
 801191c:	429c      	cmp	r4, r3
 801191e:	dc0f      	bgt.n	8011940 <__ieee754_pow+0x238>
 8011920:	f1b9 0f00 	cmp.w	r9, #0
 8011924:	da0f      	bge.n	8011946 <__ieee754_pow+0x23e>
 8011926:	2000      	movs	r0, #0
 8011928:	b009      	add	sp, #36	; 0x24
 801192a:	ecbd 8b06 	vpop	{d8-d10}
 801192e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011932:	f001 bde2 	b.w	80134fa <__math_oflow>
 8011936:	429c      	cmp	r4, r3
 8011938:	dbf2      	blt.n	8011920 <__ieee754_pow+0x218>
 801193a:	4b0a      	ldr	r3, [pc, #40]	; (8011964 <__ieee754_pow+0x25c>)
 801193c:	429c      	cmp	r4, r3
 801193e:	dd19      	ble.n	8011974 <__ieee754_pow+0x26c>
 8011940:	f1b9 0f00 	cmp.w	r9, #0
 8011944:	dcef      	bgt.n	8011926 <__ieee754_pow+0x21e>
 8011946:	2000      	movs	r0, #0
 8011948:	b009      	add	sp, #36	; 0x24
 801194a:	ecbd 8b06 	vpop	{d8-d10}
 801194e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011952:	f001 bdc9 	b.w	80134e8 <__math_uflow>
 8011956:	bf00      	nop
 8011958:	fff00000 	.word	0xfff00000
 801195c:	7ff00000 	.word	0x7ff00000
 8011960:	433fffff 	.word	0x433fffff
 8011964:	3ff00000 	.word	0x3ff00000
 8011968:	3fefffff 	.word	0x3fefffff
 801196c:	3fe00000 	.word	0x3fe00000
 8011970:	41e00000 	.word	0x41e00000
 8011974:	4b60      	ldr	r3, [pc, #384]	; (8011af8 <__ieee754_pow+0x3f0>)
 8011976:	2200      	movs	r2, #0
 8011978:	f7ee fca0 	bl	80002bc <__aeabi_dsub>
 801197c:	a354      	add	r3, pc, #336	; (adr r3, 8011ad0 <__ieee754_pow+0x3c8>)
 801197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011982:	4604      	mov	r4, r0
 8011984:	460d      	mov	r5, r1
 8011986:	f7ee fe51 	bl	800062c <__aeabi_dmul>
 801198a:	a353      	add	r3, pc, #332	; (adr r3, 8011ad8 <__ieee754_pow+0x3d0>)
 801198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011990:	4606      	mov	r6, r0
 8011992:	460f      	mov	r7, r1
 8011994:	4620      	mov	r0, r4
 8011996:	4629      	mov	r1, r5
 8011998:	f7ee fe48 	bl	800062c <__aeabi_dmul>
 801199c:	4b57      	ldr	r3, [pc, #348]	; (8011afc <__ieee754_pow+0x3f4>)
 801199e:	4682      	mov	sl, r0
 80119a0:	468b      	mov	fp, r1
 80119a2:	2200      	movs	r2, #0
 80119a4:	4620      	mov	r0, r4
 80119a6:	4629      	mov	r1, r5
 80119a8:	f7ee fe40 	bl	800062c <__aeabi_dmul>
 80119ac:	4602      	mov	r2, r0
 80119ae:	460b      	mov	r3, r1
 80119b0:	a14b      	add	r1, pc, #300	; (adr r1, 8011ae0 <__ieee754_pow+0x3d8>)
 80119b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119b6:	f7ee fc81 	bl	80002bc <__aeabi_dsub>
 80119ba:	4622      	mov	r2, r4
 80119bc:	462b      	mov	r3, r5
 80119be:	f7ee fe35 	bl	800062c <__aeabi_dmul>
 80119c2:	4602      	mov	r2, r0
 80119c4:	460b      	mov	r3, r1
 80119c6:	2000      	movs	r0, #0
 80119c8:	494d      	ldr	r1, [pc, #308]	; (8011b00 <__ieee754_pow+0x3f8>)
 80119ca:	f7ee fc77 	bl	80002bc <__aeabi_dsub>
 80119ce:	4622      	mov	r2, r4
 80119d0:	4680      	mov	r8, r0
 80119d2:	4689      	mov	r9, r1
 80119d4:	462b      	mov	r3, r5
 80119d6:	4620      	mov	r0, r4
 80119d8:	4629      	mov	r1, r5
 80119da:	f7ee fe27 	bl	800062c <__aeabi_dmul>
 80119de:	4602      	mov	r2, r0
 80119e0:	460b      	mov	r3, r1
 80119e2:	4640      	mov	r0, r8
 80119e4:	4649      	mov	r1, r9
 80119e6:	f7ee fe21 	bl	800062c <__aeabi_dmul>
 80119ea:	a33f      	add	r3, pc, #252	; (adr r3, 8011ae8 <__ieee754_pow+0x3e0>)
 80119ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f0:	f7ee fe1c 	bl	800062c <__aeabi_dmul>
 80119f4:	4602      	mov	r2, r0
 80119f6:	460b      	mov	r3, r1
 80119f8:	4650      	mov	r0, sl
 80119fa:	4659      	mov	r1, fp
 80119fc:	f7ee fc5e 	bl	80002bc <__aeabi_dsub>
 8011a00:	4602      	mov	r2, r0
 8011a02:	460b      	mov	r3, r1
 8011a04:	4680      	mov	r8, r0
 8011a06:	4689      	mov	r9, r1
 8011a08:	4630      	mov	r0, r6
 8011a0a:	4639      	mov	r1, r7
 8011a0c:	f7ee fc58 	bl	80002c0 <__adddf3>
 8011a10:	2000      	movs	r0, #0
 8011a12:	4632      	mov	r2, r6
 8011a14:	463b      	mov	r3, r7
 8011a16:	4604      	mov	r4, r0
 8011a18:	460d      	mov	r5, r1
 8011a1a:	f7ee fc4f 	bl	80002bc <__aeabi_dsub>
 8011a1e:	4602      	mov	r2, r0
 8011a20:	460b      	mov	r3, r1
 8011a22:	4640      	mov	r0, r8
 8011a24:	4649      	mov	r1, r9
 8011a26:	f7ee fc49 	bl	80002bc <__aeabi_dsub>
 8011a2a:	9b04      	ldr	r3, [sp, #16]
 8011a2c:	9a06      	ldr	r2, [sp, #24]
 8011a2e:	3b01      	subs	r3, #1
 8011a30:	4313      	orrs	r3, r2
 8011a32:	4682      	mov	sl, r0
 8011a34:	468b      	mov	fp, r1
 8011a36:	f040 81e7 	bne.w	8011e08 <__ieee754_pow+0x700>
 8011a3a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011af0 <__ieee754_pow+0x3e8>
 8011a3e:	eeb0 8a47 	vmov.f32	s16, s14
 8011a42:	eef0 8a67 	vmov.f32	s17, s15
 8011a46:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011a4a:	2600      	movs	r6, #0
 8011a4c:	4632      	mov	r2, r6
 8011a4e:	463b      	mov	r3, r7
 8011a50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a54:	f7ee fc32 	bl	80002bc <__aeabi_dsub>
 8011a58:	4622      	mov	r2, r4
 8011a5a:	462b      	mov	r3, r5
 8011a5c:	f7ee fde6 	bl	800062c <__aeabi_dmul>
 8011a60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a64:	4680      	mov	r8, r0
 8011a66:	4689      	mov	r9, r1
 8011a68:	4650      	mov	r0, sl
 8011a6a:	4659      	mov	r1, fp
 8011a6c:	f7ee fdde 	bl	800062c <__aeabi_dmul>
 8011a70:	4602      	mov	r2, r0
 8011a72:	460b      	mov	r3, r1
 8011a74:	4640      	mov	r0, r8
 8011a76:	4649      	mov	r1, r9
 8011a78:	f7ee fc22 	bl	80002c0 <__adddf3>
 8011a7c:	4632      	mov	r2, r6
 8011a7e:	463b      	mov	r3, r7
 8011a80:	4680      	mov	r8, r0
 8011a82:	4689      	mov	r9, r1
 8011a84:	4620      	mov	r0, r4
 8011a86:	4629      	mov	r1, r5
 8011a88:	f7ee fdd0 	bl	800062c <__aeabi_dmul>
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	4604      	mov	r4, r0
 8011a90:	460d      	mov	r5, r1
 8011a92:	4602      	mov	r2, r0
 8011a94:	4649      	mov	r1, r9
 8011a96:	4640      	mov	r0, r8
 8011a98:	f7ee fc12 	bl	80002c0 <__adddf3>
 8011a9c:	4b19      	ldr	r3, [pc, #100]	; (8011b04 <__ieee754_pow+0x3fc>)
 8011a9e:	4299      	cmp	r1, r3
 8011aa0:	ec45 4b19 	vmov	d9, r4, r5
 8011aa4:	4606      	mov	r6, r0
 8011aa6:	460f      	mov	r7, r1
 8011aa8:	468b      	mov	fp, r1
 8011aaa:	f340 82f1 	ble.w	8012090 <__ieee754_pow+0x988>
 8011aae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011ab2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011ab6:	4303      	orrs	r3, r0
 8011ab8:	f000 81e4 	beq.w	8011e84 <__ieee754_pow+0x77c>
 8011abc:	ec51 0b18 	vmov	r0, r1, d8
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	f7ef f824 	bl	8000b10 <__aeabi_dcmplt>
 8011ac8:	3800      	subs	r0, #0
 8011aca:	bf18      	it	ne
 8011acc:	2001      	movne	r0, #1
 8011ace:	e72b      	b.n	8011928 <__ieee754_pow+0x220>
 8011ad0:	60000000 	.word	0x60000000
 8011ad4:	3ff71547 	.word	0x3ff71547
 8011ad8:	f85ddf44 	.word	0xf85ddf44
 8011adc:	3e54ae0b 	.word	0x3e54ae0b
 8011ae0:	55555555 	.word	0x55555555
 8011ae4:	3fd55555 	.word	0x3fd55555
 8011ae8:	652b82fe 	.word	0x652b82fe
 8011aec:	3ff71547 	.word	0x3ff71547
 8011af0:	00000000 	.word	0x00000000
 8011af4:	bff00000 	.word	0xbff00000
 8011af8:	3ff00000 	.word	0x3ff00000
 8011afc:	3fd00000 	.word	0x3fd00000
 8011b00:	3fe00000 	.word	0x3fe00000
 8011b04:	408fffff 	.word	0x408fffff
 8011b08:	4bd5      	ldr	r3, [pc, #852]	; (8011e60 <__ieee754_pow+0x758>)
 8011b0a:	402b      	ands	r3, r5
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	b92b      	cbnz	r3, 8011b1c <__ieee754_pow+0x414>
 8011b10:	4bd4      	ldr	r3, [pc, #848]	; (8011e64 <__ieee754_pow+0x75c>)
 8011b12:	f7ee fd8b 	bl	800062c <__aeabi_dmul>
 8011b16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011b1a:	460c      	mov	r4, r1
 8011b1c:	1523      	asrs	r3, r4, #20
 8011b1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011b22:	4413      	add	r3, r2
 8011b24:	9305      	str	r3, [sp, #20]
 8011b26:	4bd0      	ldr	r3, [pc, #832]	; (8011e68 <__ieee754_pow+0x760>)
 8011b28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011b2c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011b30:	429c      	cmp	r4, r3
 8011b32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011b36:	dd08      	ble.n	8011b4a <__ieee754_pow+0x442>
 8011b38:	4bcc      	ldr	r3, [pc, #816]	; (8011e6c <__ieee754_pow+0x764>)
 8011b3a:	429c      	cmp	r4, r3
 8011b3c:	f340 8162 	ble.w	8011e04 <__ieee754_pow+0x6fc>
 8011b40:	9b05      	ldr	r3, [sp, #20]
 8011b42:	3301      	adds	r3, #1
 8011b44:	9305      	str	r3, [sp, #20]
 8011b46:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011b4a:	2400      	movs	r4, #0
 8011b4c:	00e3      	lsls	r3, r4, #3
 8011b4e:	9307      	str	r3, [sp, #28]
 8011b50:	4bc7      	ldr	r3, [pc, #796]	; (8011e70 <__ieee754_pow+0x768>)
 8011b52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011b56:	ed93 7b00 	vldr	d7, [r3]
 8011b5a:	4629      	mov	r1, r5
 8011b5c:	ec53 2b17 	vmov	r2, r3, d7
 8011b60:	eeb0 9a47 	vmov.f32	s18, s14
 8011b64:	eef0 9a67 	vmov.f32	s19, s15
 8011b68:	4682      	mov	sl, r0
 8011b6a:	f7ee fba7 	bl	80002bc <__aeabi_dsub>
 8011b6e:	4652      	mov	r2, sl
 8011b70:	4606      	mov	r6, r0
 8011b72:	460f      	mov	r7, r1
 8011b74:	462b      	mov	r3, r5
 8011b76:	ec51 0b19 	vmov	r0, r1, d9
 8011b7a:	f7ee fba1 	bl	80002c0 <__adddf3>
 8011b7e:	4602      	mov	r2, r0
 8011b80:	460b      	mov	r3, r1
 8011b82:	2000      	movs	r0, #0
 8011b84:	49bb      	ldr	r1, [pc, #748]	; (8011e74 <__ieee754_pow+0x76c>)
 8011b86:	f7ee fe7b 	bl	8000880 <__aeabi_ddiv>
 8011b8a:	ec41 0b1a 	vmov	d10, r0, r1
 8011b8e:	4602      	mov	r2, r0
 8011b90:	460b      	mov	r3, r1
 8011b92:	4630      	mov	r0, r6
 8011b94:	4639      	mov	r1, r7
 8011b96:	f7ee fd49 	bl	800062c <__aeabi_dmul>
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ba0:	9302      	str	r3, [sp, #8]
 8011ba2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011ba6:	46ab      	mov	fp, r5
 8011ba8:	106d      	asrs	r5, r5, #1
 8011baa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011bae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011bb2:	ec41 0b18 	vmov	d8, r0, r1
 8011bb6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011bba:	2200      	movs	r2, #0
 8011bbc:	4640      	mov	r0, r8
 8011bbe:	4649      	mov	r1, r9
 8011bc0:	4614      	mov	r4, r2
 8011bc2:	461d      	mov	r5, r3
 8011bc4:	f7ee fd32 	bl	800062c <__aeabi_dmul>
 8011bc8:	4602      	mov	r2, r0
 8011bca:	460b      	mov	r3, r1
 8011bcc:	4630      	mov	r0, r6
 8011bce:	4639      	mov	r1, r7
 8011bd0:	f7ee fb74 	bl	80002bc <__aeabi_dsub>
 8011bd4:	ec53 2b19 	vmov	r2, r3, d9
 8011bd8:	4606      	mov	r6, r0
 8011bda:	460f      	mov	r7, r1
 8011bdc:	4620      	mov	r0, r4
 8011bde:	4629      	mov	r1, r5
 8011be0:	f7ee fb6c 	bl	80002bc <__aeabi_dsub>
 8011be4:	4602      	mov	r2, r0
 8011be6:	460b      	mov	r3, r1
 8011be8:	4650      	mov	r0, sl
 8011bea:	4659      	mov	r1, fp
 8011bec:	f7ee fb66 	bl	80002bc <__aeabi_dsub>
 8011bf0:	4642      	mov	r2, r8
 8011bf2:	464b      	mov	r3, r9
 8011bf4:	f7ee fd1a 	bl	800062c <__aeabi_dmul>
 8011bf8:	4602      	mov	r2, r0
 8011bfa:	460b      	mov	r3, r1
 8011bfc:	4630      	mov	r0, r6
 8011bfe:	4639      	mov	r1, r7
 8011c00:	f7ee fb5c 	bl	80002bc <__aeabi_dsub>
 8011c04:	ec53 2b1a 	vmov	r2, r3, d10
 8011c08:	f7ee fd10 	bl	800062c <__aeabi_dmul>
 8011c0c:	ec53 2b18 	vmov	r2, r3, d8
 8011c10:	ec41 0b19 	vmov	d9, r0, r1
 8011c14:	ec51 0b18 	vmov	r0, r1, d8
 8011c18:	f7ee fd08 	bl	800062c <__aeabi_dmul>
 8011c1c:	a37c      	add	r3, pc, #496	; (adr r3, 8011e10 <__ieee754_pow+0x708>)
 8011c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c22:	4604      	mov	r4, r0
 8011c24:	460d      	mov	r5, r1
 8011c26:	f7ee fd01 	bl	800062c <__aeabi_dmul>
 8011c2a:	a37b      	add	r3, pc, #492	; (adr r3, 8011e18 <__ieee754_pow+0x710>)
 8011c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c30:	f7ee fb46 	bl	80002c0 <__adddf3>
 8011c34:	4622      	mov	r2, r4
 8011c36:	462b      	mov	r3, r5
 8011c38:	f7ee fcf8 	bl	800062c <__aeabi_dmul>
 8011c3c:	a378      	add	r3, pc, #480	; (adr r3, 8011e20 <__ieee754_pow+0x718>)
 8011c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c42:	f7ee fb3d 	bl	80002c0 <__adddf3>
 8011c46:	4622      	mov	r2, r4
 8011c48:	462b      	mov	r3, r5
 8011c4a:	f7ee fcef 	bl	800062c <__aeabi_dmul>
 8011c4e:	a376      	add	r3, pc, #472	; (adr r3, 8011e28 <__ieee754_pow+0x720>)
 8011c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c54:	f7ee fb34 	bl	80002c0 <__adddf3>
 8011c58:	4622      	mov	r2, r4
 8011c5a:	462b      	mov	r3, r5
 8011c5c:	f7ee fce6 	bl	800062c <__aeabi_dmul>
 8011c60:	a373      	add	r3, pc, #460	; (adr r3, 8011e30 <__ieee754_pow+0x728>)
 8011c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c66:	f7ee fb2b 	bl	80002c0 <__adddf3>
 8011c6a:	4622      	mov	r2, r4
 8011c6c:	462b      	mov	r3, r5
 8011c6e:	f7ee fcdd 	bl	800062c <__aeabi_dmul>
 8011c72:	a371      	add	r3, pc, #452	; (adr r3, 8011e38 <__ieee754_pow+0x730>)
 8011c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c78:	f7ee fb22 	bl	80002c0 <__adddf3>
 8011c7c:	4622      	mov	r2, r4
 8011c7e:	4606      	mov	r6, r0
 8011c80:	460f      	mov	r7, r1
 8011c82:	462b      	mov	r3, r5
 8011c84:	4620      	mov	r0, r4
 8011c86:	4629      	mov	r1, r5
 8011c88:	f7ee fcd0 	bl	800062c <__aeabi_dmul>
 8011c8c:	4602      	mov	r2, r0
 8011c8e:	460b      	mov	r3, r1
 8011c90:	4630      	mov	r0, r6
 8011c92:	4639      	mov	r1, r7
 8011c94:	f7ee fcca 	bl	800062c <__aeabi_dmul>
 8011c98:	4642      	mov	r2, r8
 8011c9a:	4604      	mov	r4, r0
 8011c9c:	460d      	mov	r5, r1
 8011c9e:	464b      	mov	r3, r9
 8011ca0:	ec51 0b18 	vmov	r0, r1, d8
 8011ca4:	f7ee fb0c 	bl	80002c0 <__adddf3>
 8011ca8:	ec53 2b19 	vmov	r2, r3, d9
 8011cac:	f7ee fcbe 	bl	800062c <__aeabi_dmul>
 8011cb0:	4622      	mov	r2, r4
 8011cb2:	462b      	mov	r3, r5
 8011cb4:	f7ee fb04 	bl	80002c0 <__adddf3>
 8011cb8:	4642      	mov	r2, r8
 8011cba:	4682      	mov	sl, r0
 8011cbc:	468b      	mov	fp, r1
 8011cbe:	464b      	mov	r3, r9
 8011cc0:	4640      	mov	r0, r8
 8011cc2:	4649      	mov	r1, r9
 8011cc4:	f7ee fcb2 	bl	800062c <__aeabi_dmul>
 8011cc8:	4b6b      	ldr	r3, [pc, #428]	; (8011e78 <__ieee754_pow+0x770>)
 8011cca:	2200      	movs	r2, #0
 8011ccc:	4606      	mov	r6, r0
 8011cce:	460f      	mov	r7, r1
 8011cd0:	f7ee faf6 	bl	80002c0 <__adddf3>
 8011cd4:	4652      	mov	r2, sl
 8011cd6:	465b      	mov	r3, fp
 8011cd8:	f7ee faf2 	bl	80002c0 <__adddf3>
 8011cdc:	2000      	movs	r0, #0
 8011cde:	4604      	mov	r4, r0
 8011ce0:	460d      	mov	r5, r1
 8011ce2:	4602      	mov	r2, r0
 8011ce4:	460b      	mov	r3, r1
 8011ce6:	4640      	mov	r0, r8
 8011ce8:	4649      	mov	r1, r9
 8011cea:	f7ee fc9f 	bl	800062c <__aeabi_dmul>
 8011cee:	4b62      	ldr	r3, [pc, #392]	; (8011e78 <__ieee754_pow+0x770>)
 8011cf0:	4680      	mov	r8, r0
 8011cf2:	4689      	mov	r9, r1
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	4620      	mov	r0, r4
 8011cf8:	4629      	mov	r1, r5
 8011cfa:	f7ee fadf 	bl	80002bc <__aeabi_dsub>
 8011cfe:	4632      	mov	r2, r6
 8011d00:	463b      	mov	r3, r7
 8011d02:	f7ee fadb 	bl	80002bc <__aeabi_dsub>
 8011d06:	4602      	mov	r2, r0
 8011d08:	460b      	mov	r3, r1
 8011d0a:	4650      	mov	r0, sl
 8011d0c:	4659      	mov	r1, fp
 8011d0e:	f7ee fad5 	bl	80002bc <__aeabi_dsub>
 8011d12:	ec53 2b18 	vmov	r2, r3, d8
 8011d16:	f7ee fc89 	bl	800062c <__aeabi_dmul>
 8011d1a:	4622      	mov	r2, r4
 8011d1c:	4606      	mov	r6, r0
 8011d1e:	460f      	mov	r7, r1
 8011d20:	462b      	mov	r3, r5
 8011d22:	ec51 0b19 	vmov	r0, r1, d9
 8011d26:	f7ee fc81 	bl	800062c <__aeabi_dmul>
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	460b      	mov	r3, r1
 8011d2e:	4630      	mov	r0, r6
 8011d30:	4639      	mov	r1, r7
 8011d32:	f7ee fac5 	bl	80002c0 <__adddf3>
 8011d36:	4606      	mov	r6, r0
 8011d38:	460f      	mov	r7, r1
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	460b      	mov	r3, r1
 8011d3e:	4640      	mov	r0, r8
 8011d40:	4649      	mov	r1, r9
 8011d42:	f7ee fabd 	bl	80002c0 <__adddf3>
 8011d46:	a33e      	add	r3, pc, #248	; (adr r3, 8011e40 <__ieee754_pow+0x738>)
 8011d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4c:	2000      	movs	r0, #0
 8011d4e:	4604      	mov	r4, r0
 8011d50:	460d      	mov	r5, r1
 8011d52:	f7ee fc6b 	bl	800062c <__aeabi_dmul>
 8011d56:	4642      	mov	r2, r8
 8011d58:	ec41 0b18 	vmov	d8, r0, r1
 8011d5c:	464b      	mov	r3, r9
 8011d5e:	4620      	mov	r0, r4
 8011d60:	4629      	mov	r1, r5
 8011d62:	f7ee faab 	bl	80002bc <__aeabi_dsub>
 8011d66:	4602      	mov	r2, r0
 8011d68:	460b      	mov	r3, r1
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	4639      	mov	r1, r7
 8011d6e:	f7ee faa5 	bl	80002bc <__aeabi_dsub>
 8011d72:	a335      	add	r3, pc, #212	; (adr r3, 8011e48 <__ieee754_pow+0x740>)
 8011d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d78:	f7ee fc58 	bl	800062c <__aeabi_dmul>
 8011d7c:	a334      	add	r3, pc, #208	; (adr r3, 8011e50 <__ieee754_pow+0x748>)
 8011d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d82:	4606      	mov	r6, r0
 8011d84:	460f      	mov	r7, r1
 8011d86:	4620      	mov	r0, r4
 8011d88:	4629      	mov	r1, r5
 8011d8a:	f7ee fc4f 	bl	800062c <__aeabi_dmul>
 8011d8e:	4602      	mov	r2, r0
 8011d90:	460b      	mov	r3, r1
 8011d92:	4630      	mov	r0, r6
 8011d94:	4639      	mov	r1, r7
 8011d96:	f7ee fa93 	bl	80002c0 <__adddf3>
 8011d9a:	9a07      	ldr	r2, [sp, #28]
 8011d9c:	4b37      	ldr	r3, [pc, #220]	; (8011e7c <__ieee754_pow+0x774>)
 8011d9e:	4413      	add	r3, r2
 8011da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da4:	f7ee fa8c 	bl	80002c0 <__adddf3>
 8011da8:	4682      	mov	sl, r0
 8011daa:	9805      	ldr	r0, [sp, #20]
 8011dac:	468b      	mov	fp, r1
 8011dae:	f7ee fbd3 	bl	8000558 <__aeabi_i2d>
 8011db2:	9a07      	ldr	r2, [sp, #28]
 8011db4:	4b32      	ldr	r3, [pc, #200]	; (8011e80 <__ieee754_pow+0x778>)
 8011db6:	4413      	add	r3, r2
 8011db8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011dbc:	4606      	mov	r6, r0
 8011dbe:	460f      	mov	r7, r1
 8011dc0:	4652      	mov	r2, sl
 8011dc2:	465b      	mov	r3, fp
 8011dc4:	ec51 0b18 	vmov	r0, r1, d8
 8011dc8:	f7ee fa7a 	bl	80002c0 <__adddf3>
 8011dcc:	4642      	mov	r2, r8
 8011dce:	464b      	mov	r3, r9
 8011dd0:	f7ee fa76 	bl	80002c0 <__adddf3>
 8011dd4:	4632      	mov	r2, r6
 8011dd6:	463b      	mov	r3, r7
 8011dd8:	f7ee fa72 	bl	80002c0 <__adddf3>
 8011ddc:	2000      	movs	r0, #0
 8011dde:	4632      	mov	r2, r6
 8011de0:	463b      	mov	r3, r7
 8011de2:	4604      	mov	r4, r0
 8011de4:	460d      	mov	r5, r1
 8011de6:	f7ee fa69 	bl	80002bc <__aeabi_dsub>
 8011dea:	4642      	mov	r2, r8
 8011dec:	464b      	mov	r3, r9
 8011dee:	f7ee fa65 	bl	80002bc <__aeabi_dsub>
 8011df2:	ec53 2b18 	vmov	r2, r3, d8
 8011df6:	f7ee fa61 	bl	80002bc <__aeabi_dsub>
 8011dfa:	4602      	mov	r2, r0
 8011dfc:	460b      	mov	r3, r1
 8011dfe:	4650      	mov	r0, sl
 8011e00:	4659      	mov	r1, fp
 8011e02:	e610      	b.n	8011a26 <__ieee754_pow+0x31e>
 8011e04:	2401      	movs	r4, #1
 8011e06:	e6a1      	b.n	8011b4c <__ieee754_pow+0x444>
 8011e08:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011e58 <__ieee754_pow+0x750>
 8011e0c:	e617      	b.n	8011a3e <__ieee754_pow+0x336>
 8011e0e:	bf00      	nop
 8011e10:	4a454eef 	.word	0x4a454eef
 8011e14:	3fca7e28 	.word	0x3fca7e28
 8011e18:	93c9db65 	.word	0x93c9db65
 8011e1c:	3fcd864a 	.word	0x3fcd864a
 8011e20:	a91d4101 	.word	0xa91d4101
 8011e24:	3fd17460 	.word	0x3fd17460
 8011e28:	518f264d 	.word	0x518f264d
 8011e2c:	3fd55555 	.word	0x3fd55555
 8011e30:	db6fabff 	.word	0xdb6fabff
 8011e34:	3fdb6db6 	.word	0x3fdb6db6
 8011e38:	33333303 	.word	0x33333303
 8011e3c:	3fe33333 	.word	0x3fe33333
 8011e40:	e0000000 	.word	0xe0000000
 8011e44:	3feec709 	.word	0x3feec709
 8011e48:	dc3a03fd 	.word	0xdc3a03fd
 8011e4c:	3feec709 	.word	0x3feec709
 8011e50:	145b01f5 	.word	0x145b01f5
 8011e54:	be3e2fe0 	.word	0xbe3e2fe0
 8011e58:	00000000 	.word	0x00000000
 8011e5c:	3ff00000 	.word	0x3ff00000
 8011e60:	7ff00000 	.word	0x7ff00000
 8011e64:	43400000 	.word	0x43400000
 8011e68:	0003988e 	.word	0x0003988e
 8011e6c:	000bb679 	.word	0x000bb679
 8011e70:	08039898 	.word	0x08039898
 8011e74:	3ff00000 	.word	0x3ff00000
 8011e78:	40080000 	.word	0x40080000
 8011e7c:	080398b8 	.word	0x080398b8
 8011e80:	080398a8 	.word	0x080398a8
 8011e84:	a3b5      	add	r3, pc, #724	; (adr r3, 801215c <__ieee754_pow+0xa54>)
 8011e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8a:	4640      	mov	r0, r8
 8011e8c:	4649      	mov	r1, r9
 8011e8e:	f7ee fa17 	bl	80002c0 <__adddf3>
 8011e92:	4622      	mov	r2, r4
 8011e94:	ec41 0b1a 	vmov	d10, r0, r1
 8011e98:	462b      	mov	r3, r5
 8011e9a:	4630      	mov	r0, r6
 8011e9c:	4639      	mov	r1, r7
 8011e9e:	f7ee fa0d 	bl	80002bc <__aeabi_dsub>
 8011ea2:	4602      	mov	r2, r0
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	ec51 0b1a 	vmov	r0, r1, d10
 8011eaa:	f7ee fe4f 	bl	8000b4c <__aeabi_dcmpgt>
 8011eae:	2800      	cmp	r0, #0
 8011eb0:	f47f ae04 	bne.w	8011abc <__ieee754_pow+0x3b4>
 8011eb4:	4aa4      	ldr	r2, [pc, #656]	; (8012148 <__ieee754_pow+0xa40>)
 8011eb6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011eba:	4293      	cmp	r3, r2
 8011ebc:	f340 8108 	ble.w	80120d0 <__ieee754_pow+0x9c8>
 8011ec0:	151b      	asrs	r3, r3, #20
 8011ec2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011ec6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011eca:	fa4a f303 	asr.w	r3, sl, r3
 8011ece:	445b      	add	r3, fp
 8011ed0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011ed4:	4e9d      	ldr	r6, [pc, #628]	; (801214c <__ieee754_pow+0xa44>)
 8011ed6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011eda:	4116      	asrs	r6, r2
 8011edc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	ea23 0106 	bic.w	r1, r3, r6
 8011ee6:	f1c2 0214 	rsb	r2, r2, #20
 8011eea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011eee:	fa4a fa02 	asr.w	sl, sl, r2
 8011ef2:	f1bb 0f00 	cmp.w	fp, #0
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	460b      	mov	r3, r1
 8011efa:	4620      	mov	r0, r4
 8011efc:	4629      	mov	r1, r5
 8011efe:	bfb8      	it	lt
 8011f00:	f1ca 0a00 	rsblt	sl, sl, #0
 8011f04:	f7ee f9da 	bl	80002bc <__aeabi_dsub>
 8011f08:	ec41 0b19 	vmov	d9, r0, r1
 8011f0c:	4642      	mov	r2, r8
 8011f0e:	464b      	mov	r3, r9
 8011f10:	ec51 0b19 	vmov	r0, r1, d9
 8011f14:	f7ee f9d4 	bl	80002c0 <__adddf3>
 8011f18:	a37b      	add	r3, pc, #492	; (adr r3, 8012108 <__ieee754_pow+0xa00>)
 8011f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f1e:	2000      	movs	r0, #0
 8011f20:	4604      	mov	r4, r0
 8011f22:	460d      	mov	r5, r1
 8011f24:	f7ee fb82 	bl	800062c <__aeabi_dmul>
 8011f28:	ec53 2b19 	vmov	r2, r3, d9
 8011f2c:	4606      	mov	r6, r0
 8011f2e:	460f      	mov	r7, r1
 8011f30:	4620      	mov	r0, r4
 8011f32:	4629      	mov	r1, r5
 8011f34:	f7ee f9c2 	bl	80002bc <__aeabi_dsub>
 8011f38:	4602      	mov	r2, r0
 8011f3a:	460b      	mov	r3, r1
 8011f3c:	4640      	mov	r0, r8
 8011f3e:	4649      	mov	r1, r9
 8011f40:	f7ee f9bc 	bl	80002bc <__aeabi_dsub>
 8011f44:	a372      	add	r3, pc, #456	; (adr r3, 8012110 <__ieee754_pow+0xa08>)
 8011f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4a:	f7ee fb6f 	bl	800062c <__aeabi_dmul>
 8011f4e:	a372      	add	r3, pc, #456	; (adr r3, 8012118 <__ieee754_pow+0xa10>)
 8011f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f54:	4680      	mov	r8, r0
 8011f56:	4689      	mov	r9, r1
 8011f58:	4620      	mov	r0, r4
 8011f5a:	4629      	mov	r1, r5
 8011f5c:	f7ee fb66 	bl	800062c <__aeabi_dmul>
 8011f60:	4602      	mov	r2, r0
 8011f62:	460b      	mov	r3, r1
 8011f64:	4640      	mov	r0, r8
 8011f66:	4649      	mov	r1, r9
 8011f68:	f7ee f9aa 	bl	80002c0 <__adddf3>
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	460d      	mov	r5, r1
 8011f70:	4602      	mov	r2, r0
 8011f72:	460b      	mov	r3, r1
 8011f74:	4630      	mov	r0, r6
 8011f76:	4639      	mov	r1, r7
 8011f78:	f7ee f9a2 	bl	80002c0 <__adddf3>
 8011f7c:	4632      	mov	r2, r6
 8011f7e:	463b      	mov	r3, r7
 8011f80:	4680      	mov	r8, r0
 8011f82:	4689      	mov	r9, r1
 8011f84:	f7ee f99a 	bl	80002bc <__aeabi_dsub>
 8011f88:	4602      	mov	r2, r0
 8011f8a:	460b      	mov	r3, r1
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	4629      	mov	r1, r5
 8011f90:	f7ee f994 	bl	80002bc <__aeabi_dsub>
 8011f94:	4642      	mov	r2, r8
 8011f96:	4606      	mov	r6, r0
 8011f98:	460f      	mov	r7, r1
 8011f9a:	464b      	mov	r3, r9
 8011f9c:	4640      	mov	r0, r8
 8011f9e:	4649      	mov	r1, r9
 8011fa0:	f7ee fb44 	bl	800062c <__aeabi_dmul>
 8011fa4:	a35e      	add	r3, pc, #376	; (adr r3, 8012120 <__ieee754_pow+0xa18>)
 8011fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011faa:	4604      	mov	r4, r0
 8011fac:	460d      	mov	r5, r1
 8011fae:	f7ee fb3d 	bl	800062c <__aeabi_dmul>
 8011fb2:	a35d      	add	r3, pc, #372	; (adr r3, 8012128 <__ieee754_pow+0xa20>)
 8011fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb8:	f7ee f980 	bl	80002bc <__aeabi_dsub>
 8011fbc:	4622      	mov	r2, r4
 8011fbe:	462b      	mov	r3, r5
 8011fc0:	f7ee fb34 	bl	800062c <__aeabi_dmul>
 8011fc4:	a35a      	add	r3, pc, #360	; (adr r3, 8012130 <__ieee754_pow+0xa28>)
 8011fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fca:	f7ee f979 	bl	80002c0 <__adddf3>
 8011fce:	4622      	mov	r2, r4
 8011fd0:	462b      	mov	r3, r5
 8011fd2:	f7ee fb2b 	bl	800062c <__aeabi_dmul>
 8011fd6:	a358      	add	r3, pc, #352	; (adr r3, 8012138 <__ieee754_pow+0xa30>)
 8011fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fdc:	f7ee f96e 	bl	80002bc <__aeabi_dsub>
 8011fe0:	4622      	mov	r2, r4
 8011fe2:	462b      	mov	r3, r5
 8011fe4:	f7ee fb22 	bl	800062c <__aeabi_dmul>
 8011fe8:	a355      	add	r3, pc, #340	; (adr r3, 8012140 <__ieee754_pow+0xa38>)
 8011fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fee:	f7ee f967 	bl	80002c0 <__adddf3>
 8011ff2:	4622      	mov	r2, r4
 8011ff4:	462b      	mov	r3, r5
 8011ff6:	f7ee fb19 	bl	800062c <__aeabi_dmul>
 8011ffa:	4602      	mov	r2, r0
 8011ffc:	460b      	mov	r3, r1
 8011ffe:	4640      	mov	r0, r8
 8012000:	4649      	mov	r1, r9
 8012002:	f7ee f95b 	bl	80002bc <__aeabi_dsub>
 8012006:	4604      	mov	r4, r0
 8012008:	460d      	mov	r5, r1
 801200a:	4602      	mov	r2, r0
 801200c:	460b      	mov	r3, r1
 801200e:	4640      	mov	r0, r8
 8012010:	4649      	mov	r1, r9
 8012012:	f7ee fb0b 	bl	800062c <__aeabi_dmul>
 8012016:	2200      	movs	r2, #0
 8012018:	ec41 0b19 	vmov	d9, r0, r1
 801201c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012020:	4620      	mov	r0, r4
 8012022:	4629      	mov	r1, r5
 8012024:	f7ee f94a 	bl	80002bc <__aeabi_dsub>
 8012028:	4602      	mov	r2, r0
 801202a:	460b      	mov	r3, r1
 801202c:	ec51 0b19 	vmov	r0, r1, d9
 8012030:	f7ee fc26 	bl	8000880 <__aeabi_ddiv>
 8012034:	4632      	mov	r2, r6
 8012036:	4604      	mov	r4, r0
 8012038:	460d      	mov	r5, r1
 801203a:	463b      	mov	r3, r7
 801203c:	4640      	mov	r0, r8
 801203e:	4649      	mov	r1, r9
 8012040:	f7ee faf4 	bl	800062c <__aeabi_dmul>
 8012044:	4632      	mov	r2, r6
 8012046:	463b      	mov	r3, r7
 8012048:	f7ee f93a 	bl	80002c0 <__adddf3>
 801204c:	4602      	mov	r2, r0
 801204e:	460b      	mov	r3, r1
 8012050:	4620      	mov	r0, r4
 8012052:	4629      	mov	r1, r5
 8012054:	f7ee f932 	bl	80002bc <__aeabi_dsub>
 8012058:	4642      	mov	r2, r8
 801205a:	464b      	mov	r3, r9
 801205c:	f7ee f92e 	bl	80002bc <__aeabi_dsub>
 8012060:	460b      	mov	r3, r1
 8012062:	4602      	mov	r2, r0
 8012064:	493a      	ldr	r1, [pc, #232]	; (8012150 <__ieee754_pow+0xa48>)
 8012066:	2000      	movs	r0, #0
 8012068:	f7ee f928 	bl	80002bc <__aeabi_dsub>
 801206c:	ec41 0b10 	vmov	d0, r0, r1
 8012070:	ee10 3a90 	vmov	r3, s1
 8012074:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801207c:	da2b      	bge.n	80120d6 <__ieee754_pow+0x9ce>
 801207e:	4650      	mov	r0, sl
 8012080:	f001 fae2 	bl	8013648 <scalbn>
 8012084:	ec51 0b10 	vmov	r0, r1, d0
 8012088:	ec53 2b18 	vmov	r2, r3, d8
 801208c:	f7ff bbed 	b.w	801186a <__ieee754_pow+0x162>
 8012090:	4b30      	ldr	r3, [pc, #192]	; (8012154 <__ieee754_pow+0xa4c>)
 8012092:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012096:	429e      	cmp	r6, r3
 8012098:	f77f af0c 	ble.w	8011eb4 <__ieee754_pow+0x7ac>
 801209c:	4b2e      	ldr	r3, [pc, #184]	; (8012158 <__ieee754_pow+0xa50>)
 801209e:	440b      	add	r3, r1
 80120a0:	4303      	orrs	r3, r0
 80120a2:	d009      	beq.n	80120b8 <__ieee754_pow+0x9b0>
 80120a4:	ec51 0b18 	vmov	r0, r1, d8
 80120a8:	2200      	movs	r2, #0
 80120aa:	2300      	movs	r3, #0
 80120ac:	f7ee fd30 	bl	8000b10 <__aeabi_dcmplt>
 80120b0:	3800      	subs	r0, #0
 80120b2:	bf18      	it	ne
 80120b4:	2001      	movne	r0, #1
 80120b6:	e447      	b.n	8011948 <__ieee754_pow+0x240>
 80120b8:	4622      	mov	r2, r4
 80120ba:	462b      	mov	r3, r5
 80120bc:	f7ee f8fe 	bl	80002bc <__aeabi_dsub>
 80120c0:	4642      	mov	r2, r8
 80120c2:	464b      	mov	r3, r9
 80120c4:	f7ee fd38 	bl	8000b38 <__aeabi_dcmpge>
 80120c8:	2800      	cmp	r0, #0
 80120ca:	f43f aef3 	beq.w	8011eb4 <__ieee754_pow+0x7ac>
 80120ce:	e7e9      	b.n	80120a4 <__ieee754_pow+0x99c>
 80120d0:	f04f 0a00 	mov.w	sl, #0
 80120d4:	e71a      	b.n	8011f0c <__ieee754_pow+0x804>
 80120d6:	ec51 0b10 	vmov	r0, r1, d0
 80120da:	4619      	mov	r1, r3
 80120dc:	e7d4      	b.n	8012088 <__ieee754_pow+0x980>
 80120de:	491c      	ldr	r1, [pc, #112]	; (8012150 <__ieee754_pow+0xa48>)
 80120e0:	2000      	movs	r0, #0
 80120e2:	f7ff bb30 	b.w	8011746 <__ieee754_pow+0x3e>
 80120e6:	2000      	movs	r0, #0
 80120e8:	2100      	movs	r1, #0
 80120ea:	f7ff bb2c 	b.w	8011746 <__ieee754_pow+0x3e>
 80120ee:	4630      	mov	r0, r6
 80120f0:	4639      	mov	r1, r7
 80120f2:	f7ff bb28 	b.w	8011746 <__ieee754_pow+0x3e>
 80120f6:	9204      	str	r2, [sp, #16]
 80120f8:	f7ff bb7a 	b.w	80117f0 <__ieee754_pow+0xe8>
 80120fc:	2300      	movs	r3, #0
 80120fe:	f7ff bb64 	b.w	80117ca <__ieee754_pow+0xc2>
 8012102:	bf00      	nop
 8012104:	f3af 8000 	nop.w
 8012108:	00000000 	.word	0x00000000
 801210c:	3fe62e43 	.word	0x3fe62e43
 8012110:	fefa39ef 	.word	0xfefa39ef
 8012114:	3fe62e42 	.word	0x3fe62e42
 8012118:	0ca86c39 	.word	0x0ca86c39
 801211c:	be205c61 	.word	0xbe205c61
 8012120:	72bea4d0 	.word	0x72bea4d0
 8012124:	3e663769 	.word	0x3e663769
 8012128:	c5d26bf1 	.word	0xc5d26bf1
 801212c:	3ebbbd41 	.word	0x3ebbbd41
 8012130:	af25de2c 	.word	0xaf25de2c
 8012134:	3f11566a 	.word	0x3f11566a
 8012138:	16bebd93 	.word	0x16bebd93
 801213c:	3f66c16c 	.word	0x3f66c16c
 8012140:	5555553e 	.word	0x5555553e
 8012144:	3fc55555 	.word	0x3fc55555
 8012148:	3fe00000 	.word	0x3fe00000
 801214c:	000fffff 	.word	0x000fffff
 8012150:	3ff00000 	.word	0x3ff00000
 8012154:	4090cbff 	.word	0x4090cbff
 8012158:	3f6f3400 	.word	0x3f6f3400
 801215c:	652b82fe 	.word	0x652b82fe
 8012160:	3c971547 	.word	0x3c971547
 8012164:	00000000 	.word	0x00000000

08012168 <__ieee754_rem_pio2>:
 8012168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801216c:	ed2d 8b02 	vpush	{d8}
 8012170:	ec55 4b10 	vmov	r4, r5, d0
 8012174:	4bca      	ldr	r3, [pc, #808]	; (80124a0 <__ieee754_rem_pio2+0x338>)
 8012176:	b08b      	sub	sp, #44	; 0x2c
 8012178:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801217c:	4598      	cmp	r8, r3
 801217e:	4682      	mov	sl, r0
 8012180:	9502      	str	r5, [sp, #8]
 8012182:	dc08      	bgt.n	8012196 <__ieee754_rem_pio2+0x2e>
 8012184:	2200      	movs	r2, #0
 8012186:	2300      	movs	r3, #0
 8012188:	ed80 0b00 	vstr	d0, [r0]
 801218c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012190:	f04f 0b00 	mov.w	fp, #0
 8012194:	e028      	b.n	80121e8 <__ieee754_rem_pio2+0x80>
 8012196:	4bc3      	ldr	r3, [pc, #780]	; (80124a4 <__ieee754_rem_pio2+0x33c>)
 8012198:	4598      	cmp	r8, r3
 801219a:	dc78      	bgt.n	801228e <__ieee754_rem_pio2+0x126>
 801219c:	9b02      	ldr	r3, [sp, #8]
 801219e:	4ec2      	ldr	r6, [pc, #776]	; (80124a8 <__ieee754_rem_pio2+0x340>)
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	ee10 0a10 	vmov	r0, s0
 80121a6:	a3b0      	add	r3, pc, #704	; (adr r3, 8012468 <__ieee754_rem_pio2+0x300>)
 80121a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ac:	4629      	mov	r1, r5
 80121ae:	dd39      	ble.n	8012224 <__ieee754_rem_pio2+0xbc>
 80121b0:	f7ee f884 	bl	80002bc <__aeabi_dsub>
 80121b4:	45b0      	cmp	r8, r6
 80121b6:	4604      	mov	r4, r0
 80121b8:	460d      	mov	r5, r1
 80121ba:	d01b      	beq.n	80121f4 <__ieee754_rem_pio2+0x8c>
 80121bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8012470 <__ieee754_rem_pio2+0x308>)
 80121be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c2:	f7ee f87b 	bl	80002bc <__aeabi_dsub>
 80121c6:	4602      	mov	r2, r0
 80121c8:	460b      	mov	r3, r1
 80121ca:	e9ca 2300 	strd	r2, r3, [sl]
 80121ce:	4620      	mov	r0, r4
 80121d0:	4629      	mov	r1, r5
 80121d2:	f7ee f873 	bl	80002bc <__aeabi_dsub>
 80121d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8012470 <__ieee754_rem_pio2+0x308>)
 80121d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121dc:	f7ee f86e 	bl	80002bc <__aeabi_dsub>
 80121e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80121e4:	f04f 0b01 	mov.w	fp, #1
 80121e8:	4658      	mov	r0, fp
 80121ea:	b00b      	add	sp, #44	; 0x2c
 80121ec:	ecbd 8b02 	vpop	{d8}
 80121f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8012478 <__ieee754_rem_pio2+0x310>)
 80121f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fa:	f7ee f85f 	bl	80002bc <__aeabi_dsub>
 80121fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8012480 <__ieee754_rem_pio2+0x318>)
 8012200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012204:	4604      	mov	r4, r0
 8012206:	460d      	mov	r5, r1
 8012208:	f7ee f858 	bl	80002bc <__aeabi_dsub>
 801220c:	4602      	mov	r2, r0
 801220e:	460b      	mov	r3, r1
 8012210:	e9ca 2300 	strd	r2, r3, [sl]
 8012214:	4620      	mov	r0, r4
 8012216:	4629      	mov	r1, r5
 8012218:	f7ee f850 	bl	80002bc <__aeabi_dsub>
 801221c:	a398      	add	r3, pc, #608	; (adr r3, 8012480 <__ieee754_rem_pio2+0x318>)
 801221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012222:	e7db      	b.n	80121dc <__ieee754_rem_pio2+0x74>
 8012224:	f7ee f84c 	bl	80002c0 <__adddf3>
 8012228:	45b0      	cmp	r8, r6
 801222a:	4604      	mov	r4, r0
 801222c:	460d      	mov	r5, r1
 801222e:	d016      	beq.n	801225e <__ieee754_rem_pio2+0xf6>
 8012230:	a38f      	add	r3, pc, #572	; (adr r3, 8012470 <__ieee754_rem_pio2+0x308>)
 8012232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012236:	f7ee f843 	bl	80002c0 <__adddf3>
 801223a:	4602      	mov	r2, r0
 801223c:	460b      	mov	r3, r1
 801223e:	e9ca 2300 	strd	r2, r3, [sl]
 8012242:	4620      	mov	r0, r4
 8012244:	4629      	mov	r1, r5
 8012246:	f7ee f839 	bl	80002bc <__aeabi_dsub>
 801224a:	a389      	add	r3, pc, #548	; (adr r3, 8012470 <__ieee754_rem_pio2+0x308>)
 801224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012250:	f7ee f836 	bl	80002c0 <__adddf3>
 8012254:	f04f 3bff 	mov.w	fp, #4294967295
 8012258:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801225c:	e7c4      	b.n	80121e8 <__ieee754_rem_pio2+0x80>
 801225e:	a386      	add	r3, pc, #536	; (adr r3, 8012478 <__ieee754_rem_pio2+0x310>)
 8012260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012264:	f7ee f82c 	bl	80002c0 <__adddf3>
 8012268:	a385      	add	r3, pc, #532	; (adr r3, 8012480 <__ieee754_rem_pio2+0x318>)
 801226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226e:	4604      	mov	r4, r0
 8012270:	460d      	mov	r5, r1
 8012272:	f7ee f825 	bl	80002c0 <__adddf3>
 8012276:	4602      	mov	r2, r0
 8012278:	460b      	mov	r3, r1
 801227a:	e9ca 2300 	strd	r2, r3, [sl]
 801227e:	4620      	mov	r0, r4
 8012280:	4629      	mov	r1, r5
 8012282:	f7ee f81b 	bl	80002bc <__aeabi_dsub>
 8012286:	a37e      	add	r3, pc, #504	; (adr r3, 8012480 <__ieee754_rem_pio2+0x318>)
 8012288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228c:	e7e0      	b.n	8012250 <__ieee754_rem_pio2+0xe8>
 801228e:	4b87      	ldr	r3, [pc, #540]	; (80124ac <__ieee754_rem_pio2+0x344>)
 8012290:	4598      	cmp	r8, r3
 8012292:	f300 80d9 	bgt.w	8012448 <__ieee754_rem_pio2+0x2e0>
 8012296:	f001 f939 	bl	801350c <fabs>
 801229a:	ec55 4b10 	vmov	r4, r5, d0
 801229e:	ee10 0a10 	vmov	r0, s0
 80122a2:	a379      	add	r3, pc, #484	; (adr r3, 8012488 <__ieee754_rem_pio2+0x320>)
 80122a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a8:	4629      	mov	r1, r5
 80122aa:	f7ee f9bf 	bl	800062c <__aeabi_dmul>
 80122ae:	4b80      	ldr	r3, [pc, #512]	; (80124b0 <__ieee754_rem_pio2+0x348>)
 80122b0:	2200      	movs	r2, #0
 80122b2:	f7ee f805 	bl	80002c0 <__adddf3>
 80122b6:	f7ee fc69 	bl	8000b8c <__aeabi_d2iz>
 80122ba:	4683      	mov	fp, r0
 80122bc:	f7ee f94c 	bl	8000558 <__aeabi_i2d>
 80122c0:	4602      	mov	r2, r0
 80122c2:	460b      	mov	r3, r1
 80122c4:	ec43 2b18 	vmov	d8, r2, r3
 80122c8:	a367      	add	r3, pc, #412	; (adr r3, 8012468 <__ieee754_rem_pio2+0x300>)
 80122ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ce:	f7ee f9ad 	bl	800062c <__aeabi_dmul>
 80122d2:	4602      	mov	r2, r0
 80122d4:	460b      	mov	r3, r1
 80122d6:	4620      	mov	r0, r4
 80122d8:	4629      	mov	r1, r5
 80122da:	f7ed ffef 	bl	80002bc <__aeabi_dsub>
 80122de:	a364      	add	r3, pc, #400	; (adr r3, 8012470 <__ieee754_rem_pio2+0x308>)
 80122e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e4:	4606      	mov	r6, r0
 80122e6:	460f      	mov	r7, r1
 80122e8:	ec51 0b18 	vmov	r0, r1, d8
 80122ec:	f7ee f99e 	bl	800062c <__aeabi_dmul>
 80122f0:	f1bb 0f1f 	cmp.w	fp, #31
 80122f4:	4604      	mov	r4, r0
 80122f6:	460d      	mov	r5, r1
 80122f8:	dc0d      	bgt.n	8012316 <__ieee754_rem_pio2+0x1ae>
 80122fa:	4b6e      	ldr	r3, [pc, #440]	; (80124b4 <__ieee754_rem_pio2+0x34c>)
 80122fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012304:	4543      	cmp	r3, r8
 8012306:	d006      	beq.n	8012316 <__ieee754_rem_pio2+0x1ae>
 8012308:	4622      	mov	r2, r4
 801230a:	462b      	mov	r3, r5
 801230c:	4630      	mov	r0, r6
 801230e:	4639      	mov	r1, r7
 8012310:	f7ed ffd4 	bl	80002bc <__aeabi_dsub>
 8012314:	e00f      	b.n	8012336 <__ieee754_rem_pio2+0x1ce>
 8012316:	462b      	mov	r3, r5
 8012318:	4622      	mov	r2, r4
 801231a:	4630      	mov	r0, r6
 801231c:	4639      	mov	r1, r7
 801231e:	f7ed ffcd 	bl	80002bc <__aeabi_dsub>
 8012322:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012326:	9303      	str	r3, [sp, #12]
 8012328:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801232c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012330:	f1b8 0f10 	cmp.w	r8, #16
 8012334:	dc02      	bgt.n	801233c <__ieee754_rem_pio2+0x1d4>
 8012336:	e9ca 0100 	strd	r0, r1, [sl]
 801233a:	e039      	b.n	80123b0 <__ieee754_rem_pio2+0x248>
 801233c:	a34e      	add	r3, pc, #312	; (adr r3, 8012478 <__ieee754_rem_pio2+0x310>)
 801233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012342:	ec51 0b18 	vmov	r0, r1, d8
 8012346:	f7ee f971 	bl	800062c <__aeabi_dmul>
 801234a:	4604      	mov	r4, r0
 801234c:	460d      	mov	r5, r1
 801234e:	4602      	mov	r2, r0
 8012350:	460b      	mov	r3, r1
 8012352:	4630      	mov	r0, r6
 8012354:	4639      	mov	r1, r7
 8012356:	f7ed ffb1 	bl	80002bc <__aeabi_dsub>
 801235a:	4602      	mov	r2, r0
 801235c:	460b      	mov	r3, r1
 801235e:	4680      	mov	r8, r0
 8012360:	4689      	mov	r9, r1
 8012362:	4630      	mov	r0, r6
 8012364:	4639      	mov	r1, r7
 8012366:	f7ed ffa9 	bl	80002bc <__aeabi_dsub>
 801236a:	4622      	mov	r2, r4
 801236c:	462b      	mov	r3, r5
 801236e:	f7ed ffa5 	bl	80002bc <__aeabi_dsub>
 8012372:	a343      	add	r3, pc, #268	; (adr r3, 8012480 <__ieee754_rem_pio2+0x318>)
 8012374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012378:	4604      	mov	r4, r0
 801237a:	460d      	mov	r5, r1
 801237c:	ec51 0b18 	vmov	r0, r1, d8
 8012380:	f7ee f954 	bl	800062c <__aeabi_dmul>
 8012384:	4622      	mov	r2, r4
 8012386:	462b      	mov	r3, r5
 8012388:	f7ed ff98 	bl	80002bc <__aeabi_dsub>
 801238c:	4602      	mov	r2, r0
 801238e:	460b      	mov	r3, r1
 8012390:	4604      	mov	r4, r0
 8012392:	460d      	mov	r5, r1
 8012394:	4640      	mov	r0, r8
 8012396:	4649      	mov	r1, r9
 8012398:	f7ed ff90 	bl	80002bc <__aeabi_dsub>
 801239c:	9a03      	ldr	r2, [sp, #12]
 801239e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80123a2:	1ad3      	subs	r3, r2, r3
 80123a4:	2b31      	cmp	r3, #49	; 0x31
 80123a6:	dc24      	bgt.n	80123f2 <__ieee754_rem_pio2+0x28a>
 80123a8:	e9ca 0100 	strd	r0, r1, [sl]
 80123ac:	4646      	mov	r6, r8
 80123ae:	464f      	mov	r7, r9
 80123b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80123b4:	4630      	mov	r0, r6
 80123b6:	4642      	mov	r2, r8
 80123b8:	464b      	mov	r3, r9
 80123ba:	4639      	mov	r1, r7
 80123bc:	f7ed ff7e 	bl	80002bc <__aeabi_dsub>
 80123c0:	462b      	mov	r3, r5
 80123c2:	4622      	mov	r2, r4
 80123c4:	f7ed ff7a 	bl	80002bc <__aeabi_dsub>
 80123c8:	9b02      	ldr	r3, [sp, #8]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80123d0:	f6bf af0a 	bge.w	80121e8 <__ieee754_rem_pio2+0x80>
 80123d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80123d8:	f8ca 3004 	str.w	r3, [sl, #4]
 80123dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123e0:	f8ca 8000 	str.w	r8, [sl]
 80123e4:	f8ca 0008 	str.w	r0, [sl, #8]
 80123e8:	f8ca 300c 	str.w	r3, [sl, #12]
 80123ec:	f1cb 0b00 	rsb	fp, fp, #0
 80123f0:	e6fa      	b.n	80121e8 <__ieee754_rem_pio2+0x80>
 80123f2:	a327      	add	r3, pc, #156	; (adr r3, 8012490 <__ieee754_rem_pio2+0x328>)
 80123f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f8:	ec51 0b18 	vmov	r0, r1, d8
 80123fc:	f7ee f916 	bl	800062c <__aeabi_dmul>
 8012400:	4604      	mov	r4, r0
 8012402:	460d      	mov	r5, r1
 8012404:	4602      	mov	r2, r0
 8012406:	460b      	mov	r3, r1
 8012408:	4640      	mov	r0, r8
 801240a:	4649      	mov	r1, r9
 801240c:	f7ed ff56 	bl	80002bc <__aeabi_dsub>
 8012410:	4602      	mov	r2, r0
 8012412:	460b      	mov	r3, r1
 8012414:	4606      	mov	r6, r0
 8012416:	460f      	mov	r7, r1
 8012418:	4640      	mov	r0, r8
 801241a:	4649      	mov	r1, r9
 801241c:	f7ed ff4e 	bl	80002bc <__aeabi_dsub>
 8012420:	4622      	mov	r2, r4
 8012422:	462b      	mov	r3, r5
 8012424:	f7ed ff4a 	bl	80002bc <__aeabi_dsub>
 8012428:	a31b      	add	r3, pc, #108	; (adr r3, 8012498 <__ieee754_rem_pio2+0x330>)
 801242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242e:	4604      	mov	r4, r0
 8012430:	460d      	mov	r5, r1
 8012432:	ec51 0b18 	vmov	r0, r1, d8
 8012436:	f7ee f8f9 	bl	800062c <__aeabi_dmul>
 801243a:	4622      	mov	r2, r4
 801243c:	462b      	mov	r3, r5
 801243e:	f7ed ff3d 	bl	80002bc <__aeabi_dsub>
 8012442:	4604      	mov	r4, r0
 8012444:	460d      	mov	r5, r1
 8012446:	e75f      	b.n	8012308 <__ieee754_rem_pio2+0x1a0>
 8012448:	4b1b      	ldr	r3, [pc, #108]	; (80124b8 <__ieee754_rem_pio2+0x350>)
 801244a:	4598      	cmp	r8, r3
 801244c:	dd36      	ble.n	80124bc <__ieee754_rem_pio2+0x354>
 801244e:	ee10 2a10 	vmov	r2, s0
 8012452:	462b      	mov	r3, r5
 8012454:	4620      	mov	r0, r4
 8012456:	4629      	mov	r1, r5
 8012458:	f7ed ff30 	bl	80002bc <__aeabi_dsub>
 801245c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012460:	e9ca 0100 	strd	r0, r1, [sl]
 8012464:	e694      	b.n	8012190 <__ieee754_rem_pio2+0x28>
 8012466:	bf00      	nop
 8012468:	54400000 	.word	0x54400000
 801246c:	3ff921fb 	.word	0x3ff921fb
 8012470:	1a626331 	.word	0x1a626331
 8012474:	3dd0b461 	.word	0x3dd0b461
 8012478:	1a600000 	.word	0x1a600000
 801247c:	3dd0b461 	.word	0x3dd0b461
 8012480:	2e037073 	.word	0x2e037073
 8012484:	3ba3198a 	.word	0x3ba3198a
 8012488:	6dc9c883 	.word	0x6dc9c883
 801248c:	3fe45f30 	.word	0x3fe45f30
 8012490:	2e000000 	.word	0x2e000000
 8012494:	3ba3198a 	.word	0x3ba3198a
 8012498:	252049c1 	.word	0x252049c1
 801249c:	397b839a 	.word	0x397b839a
 80124a0:	3fe921fb 	.word	0x3fe921fb
 80124a4:	4002d97b 	.word	0x4002d97b
 80124a8:	3ff921fb 	.word	0x3ff921fb
 80124ac:	413921fb 	.word	0x413921fb
 80124b0:	3fe00000 	.word	0x3fe00000
 80124b4:	080398c8 	.word	0x080398c8
 80124b8:	7fefffff 	.word	0x7fefffff
 80124bc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80124c0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80124c4:	ee10 0a10 	vmov	r0, s0
 80124c8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80124cc:	ee10 6a10 	vmov	r6, s0
 80124d0:	460f      	mov	r7, r1
 80124d2:	f7ee fb5b 	bl	8000b8c <__aeabi_d2iz>
 80124d6:	f7ee f83f 	bl	8000558 <__aeabi_i2d>
 80124da:	4602      	mov	r2, r0
 80124dc:	460b      	mov	r3, r1
 80124de:	4630      	mov	r0, r6
 80124e0:	4639      	mov	r1, r7
 80124e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80124e6:	f7ed fee9 	bl	80002bc <__aeabi_dsub>
 80124ea:	4b23      	ldr	r3, [pc, #140]	; (8012578 <__ieee754_rem_pio2+0x410>)
 80124ec:	2200      	movs	r2, #0
 80124ee:	f7ee f89d 	bl	800062c <__aeabi_dmul>
 80124f2:	460f      	mov	r7, r1
 80124f4:	4606      	mov	r6, r0
 80124f6:	f7ee fb49 	bl	8000b8c <__aeabi_d2iz>
 80124fa:	f7ee f82d 	bl	8000558 <__aeabi_i2d>
 80124fe:	4602      	mov	r2, r0
 8012500:	460b      	mov	r3, r1
 8012502:	4630      	mov	r0, r6
 8012504:	4639      	mov	r1, r7
 8012506:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801250a:	f7ed fed7 	bl	80002bc <__aeabi_dsub>
 801250e:	4b1a      	ldr	r3, [pc, #104]	; (8012578 <__ieee754_rem_pio2+0x410>)
 8012510:	2200      	movs	r2, #0
 8012512:	f7ee f88b 	bl	800062c <__aeabi_dmul>
 8012516:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801251a:	ad04      	add	r5, sp, #16
 801251c:	f04f 0803 	mov.w	r8, #3
 8012520:	46a9      	mov	r9, r5
 8012522:	2600      	movs	r6, #0
 8012524:	2700      	movs	r7, #0
 8012526:	4632      	mov	r2, r6
 8012528:	463b      	mov	r3, r7
 801252a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801252e:	46c3      	mov	fp, r8
 8012530:	3d08      	subs	r5, #8
 8012532:	f108 38ff 	add.w	r8, r8, #4294967295
 8012536:	f7ee fae1 	bl	8000afc <__aeabi_dcmpeq>
 801253a:	2800      	cmp	r0, #0
 801253c:	d1f3      	bne.n	8012526 <__ieee754_rem_pio2+0x3be>
 801253e:	4b0f      	ldr	r3, [pc, #60]	; (801257c <__ieee754_rem_pio2+0x414>)
 8012540:	9301      	str	r3, [sp, #4]
 8012542:	2302      	movs	r3, #2
 8012544:	9300      	str	r3, [sp, #0]
 8012546:	4622      	mov	r2, r4
 8012548:	465b      	mov	r3, fp
 801254a:	4651      	mov	r1, sl
 801254c:	4648      	mov	r0, r9
 801254e:	f000 f993 	bl	8012878 <__kernel_rem_pio2>
 8012552:	9b02      	ldr	r3, [sp, #8]
 8012554:	2b00      	cmp	r3, #0
 8012556:	4683      	mov	fp, r0
 8012558:	f6bf ae46 	bge.w	80121e8 <__ieee754_rem_pio2+0x80>
 801255c:	e9da 2100 	ldrd	r2, r1, [sl]
 8012560:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012564:	e9ca 2300 	strd	r2, r3, [sl]
 8012568:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801256c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012570:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8012574:	e73a      	b.n	80123ec <__ieee754_rem_pio2+0x284>
 8012576:	bf00      	nop
 8012578:	41700000 	.word	0x41700000
 801257c:	08039948 	.word	0x08039948

08012580 <__ieee754_sqrt>:
 8012580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012584:	ec55 4b10 	vmov	r4, r5, d0
 8012588:	4e55      	ldr	r6, [pc, #340]	; (80126e0 <__ieee754_sqrt+0x160>)
 801258a:	43ae      	bics	r6, r5
 801258c:	ee10 0a10 	vmov	r0, s0
 8012590:	ee10 3a10 	vmov	r3, s0
 8012594:	462a      	mov	r2, r5
 8012596:	4629      	mov	r1, r5
 8012598:	d110      	bne.n	80125bc <__ieee754_sqrt+0x3c>
 801259a:	ee10 2a10 	vmov	r2, s0
 801259e:	462b      	mov	r3, r5
 80125a0:	f7ee f844 	bl	800062c <__aeabi_dmul>
 80125a4:	4602      	mov	r2, r0
 80125a6:	460b      	mov	r3, r1
 80125a8:	4620      	mov	r0, r4
 80125aa:	4629      	mov	r1, r5
 80125ac:	f7ed fe88 	bl	80002c0 <__adddf3>
 80125b0:	4604      	mov	r4, r0
 80125b2:	460d      	mov	r5, r1
 80125b4:	ec45 4b10 	vmov	d0, r4, r5
 80125b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125bc:	2d00      	cmp	r5, #0
 80125be:	dc10      	bgt.n	80125e2 <__ieee754_sqrt+0x62>
 80125c0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80125c4:	4330      	orrs	r0, r6
 80125c6:	d0f5      	beq.n	80125b4 <__ieee754_sqrt+0x34>
 80125c8:	b15d      	cbz	r5, 80125e2 <__ieee754_sqrt+0x62>
 80125ca:	ee10 2a10 	vmov	r2, s0
 80125ce:	462b      	mov	r3, r5
 80125d0:	ee10 0a10 	vmov	r0, s0
 80125d4:	f7ed fe72 	bl	80002bc <__aeabi_dsub>
 80125d8:	4602      	mov	r2, r0
 80125da:	460b      	mov	r3, r1
 80125dc:	f7ee f950 	bl	8000880 <__aeabi_ddiv>
 80125e0:	e7e6      	b.n	80125b0 <__ieee754_sqrt+0x30>
 80125e2:	1512      	asrs	r2, r2, #20
 80125e4:	d074      	beq.n	80126d0 <__ieee754_sqrt+0x150>
 80125e6:	07d4      	lsls	r4, r2, #31
 80125e8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80125ec:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80125f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80125f4:	bf5e      	ittt	pl
 80125f6:	0fda      	lsrpl	r2, r3, #31
 80125f8:	005b      	lslpl	r3, r3, #1
 80125fa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80125fe:	2400      	movs	r4, #0
 8012600:	0fda      	lsrs	r2, r3, #31
 8012602:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012606:	107f      	asrs	r7, r7, #1
 8012608:	005b      	lsls	r3, r3, #1
 801260a:	2516      	movs	r5, #22
 801260c:	4620      	mov	r0, r4
 801260e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012612:	1886      	adds	r6, r0, r2
 8012614:	428e      	cmp	r6, r1
 8012616:	bfde      	ittt	le
 8012618:	1b89      	suble	r1, r1, r6
 801261a:	18b0      	addle	r0, r6, r2
 801261c:	18a4      	addle	r4, r4, r2
 801261e:	0049      	lsls	r1, r1, #1
 8012620:	3d01      	subs	r5, #1
 8012622:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012626:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801262a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801262e:	d1f0      	bne.n	8012612 <__ieee754_sqrt+0x92>
 8012630:	462a      	mov	r2, r5
 8012632:	f04f 0e20 	mov.w	lr, #32
 8012636:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801263a:	4281      	cmp	r1, r0
 801263c:	eb06 0c05 	add.w	ip, r6, r5
 8012640:	dc02      	bgt.n	8012648 <__ieee754_sqrt+0xc8>
 8012642:	d113      	bne.n	801266c <__ieee754_sqrt+0xec>
 8012644:	459c      	cmp	ip, r3
 8012646:	d811      	bhi.n	801266c <__ieee754_sqrt+0xec>
 8012648:	f1bc 0f00 	cmp.w	ip, #0
 801264c:	eb0c 0506 	add.w	r5, ip, r6
 8012650:	da43      	bge.n	80126da <__ieee754_sqrt+0x15a>
 8012652:	2d00      	cmp	r5, #0
 8012654:	db41      	blt.n	80126da <__ieee754_sqrt+0x15a>
 8012656:	f100 0801 	add.w	r8, r0, #1
 801265a:	1a09      	subs	r1, r1, r0
 801265c:	459c      	cmp	ip, r3
 801265e:	bf88      	it	hi
 8012660:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012664:	eba3 030c 	sub.w	r3, r3, ip
 8012668:	4432      	add	r2, r6
 801266a:	4640      	mov	r0, r8
 801266c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012670:	f1be 0e01 	subs.w	lr, lr, #1
 8012674:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012678:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801267c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012680:	d1db      	bne.n	801263a <__ieee754_sqrt+0xba>
 8012682:	430b      	orrs	r3, r1
 8012684:	d006      	beq.n	8012694 <__ieee754_sqrt+0x114>
 8012686:	1c50      	adds	r0, r2, #1
 8012688:	bf13      	iteet	ne
 801268a:	3201      	addne	r2, #1
 801268c:	3401      	addeq	r4, #1
 801268e:	4672      	moveq	r2, lr
 8012690:	f022 0201 	bicne.w	r2, r2, #1
 8012694:	1063      	asrs	r3, r4, #1
 8012696:	0852      	lsrs	r2, r2, #1
 8012698:	07e1      	lsls	r1, r4, #31
 801269a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801269e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80126a2:	bf48      	it	mi
 80126a4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80126a8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80126ac:	4614      	mov	r4, r2
 80126ae:	e781      	b.n	80125b4 <__ieee754_sqrt+0x34>
 80126b0:	0ad9      	lsrs	r1, r3, #11
 80126b2:	3815      	subs	r0, #21
 80126b4:	055b      	lsls	r3, r3, #21
 80126b6:	2900      	cmp	r1, #0
 80126b8:	d0fa      	beq.n	80126b0 <__ieee754_sqrt+0x130>
 80126ba:	02cd      	lsls	r5, r1, #11
 80126bc:	d50a      	bpl.n	80126d4 <__ieee754_sqrt+0x154>
 80126be:	f1c2 0420 	rsb	r4, r2, #32
 80126c2:	fa23 f404 	lsr.w	r4, r3, r4
 80126c6:	1e55      	subs	r5, r2, #1
 80126c8:	4093      	lsls	r3, r2
 80126ca:	4321      	orrs	r1, r4
 80126cc:	1b42      	subs	r2, r0, r5
 80126ce:	e78a      	b.n	80125e6 <__ieee754_sqrt+0x66>
 80126d0:	4610      	mov	r0, r2
 80126d2:	e7f0      	b.n	80126b6 <__ieee754_sqrt+0x136>
 80126d4:	0049      	lsls	r1, r1, #1
 80126d6:	3201      	adds	r2, #1
 80126d8:	e7ef      	b.n	80126ba <__ieee754_sqrt+0x13a>
 80126da:	4680      	mov	r8, r0
 80126dc:	e7bd      	b.n	801265a <__ieee754_sqrt+0xda>
 80126de:	bf00      	nop
 80126e0:	7ff00000 	.word	0x7ff00000
 80126e4:	00000000 	.word	0x00000000

080126e8 <__kernel_cos>:
 80126e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ec:	ec57 6b10 	vmov	r6, r7, d0
 80126f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80126f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80126f8:	ed8d 1b00 	vstr	d1, [sp]
 80126fc:	da07      	bge.n	801270e <__kernel_cos+0x26>
 80126fe:	ee10 0a10 	vmov	r0, s0
 8012702:	4639      	mov	r1, r7
 8012704:	f7ee fa42 	bl	8000b8c <__aeabi_d2iz>
 8012708:	2800      	cmp	r0, #0
 801270a:	f000 8088 	beq.w	801281e <__kernel_cos+0x136>
 801270e:	4632      	mov	r2, r6
 8012710:	463b      	mov	r3, r7
 8012712:	4630      	mov	r0, r6
 8012714:	4639      	mov	r1, r7
 8012716:	f7ed ff89 	bl	800062c <__aeabi_dmul>
 801271a:	4b51      	ldr	r3, [pc, #324]	; (8012860 <__kernel_cos+0x178>)
 801271c:	2200      	movs	r2, #0
 801271e:	4604      	mov	r4, r0
 8012720:	460d      	mov	r5, r1
 8012722:	f7ed ff83 	bl	800062c <__aeabi_dmul>
 8012726:	a340      	add	r3, pc, #256	; (adr r3, 8012828 <__kernel_cos+0x140>)
 8012728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272c:	4682      	mov	sl, r0
 801272e:	468b      	mov	fp, r1
 8012730:	4620      	mov	r0, r4
 8012732:	4629      	mov	r1, r5
 8012734:	f7ed ff7a 	bl	800062c <__aeabi_dmul>
 8012738:	a33d      	add	r3, pc, #244	; (adr r3, 8012830 <__kernel_cos+0x148>)
 801273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801273e:	f7ed fdbf 	bl	80002c0 <__adddf3>
 8012742:	4622      	mov	r2, r4
 8012744:	462b      	mov	r3, r5
 8012746:	f7ed ff71 	bl	800062c <__aeabi_dmul>
 801274a:	a33b      	add	r3, pc, #236	; (adr r3, 8012838 <__kernel_cos+0x150>)
 801274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012750:	f7ed fdb4 	bl	80002bc <__aeabi_dsub>
 8012754:	4622      	mov	r2, r4
 8012756:	462b      	mov	r3, r5
 8012758:	f7ed ff68 	bl	800062c <__aeabi_dmul>
 801275c:	a338      	add	r3, pc, #224	; (adr r3, 8012840 <__kernel_cos+0x158>)
 801275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012762:	f7ed fdad 	bl	80002c0 <__adddf3>
 8012766:	4622      	mov	r2, r4
 8012768:	462b      	mov	r3, r5
 801276a:	f7ed ff5f 	bl	800062c <__aeabi_dmul>
 801276e:	a336      	add	r3, pc, #216	; (adr r3, 8012848 <__kernel_cos+0x160>)
 8012770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012774:	f7ed fda2 	bl	80002bc <__aeabi_dsub>
 8012778:	4622      	mov	r2, r4
 801277a:	462b      	mov	r3, r5
 801277c:	f7ed ff56 	bl	800062c <__aeabi_dmul>
 8012780:	a333      	add	r3, pc, #204	; (adr r3, 8012850 <__kernel_cos+0x168>)
 8012782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012786:	f7ed fd9b 	bl	80002c0 <__adddf3>
 801278a:	4622      	mov	r2, r4
 801278c:	462b      	mov	r3, r5
 801278e:	f7ed ff4d 	bl	800062c <__aeabi_dmul>
 8012792:	4622      	mov	r2, r4
 8012794:	462b      	mov	r3, r5
 8012796:	f7ed ff49 	bl	800062c <__aeabi_dmul>
 801279a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801279e:	4604      	mov	r4, r0
 80127a0:	460d      	mov	r5, r1
 80127a2:	4630      	mov	r0, r6
 80127a4:	4639      	mov	r1, r7
 80127a6:	f7ed ff41 	bl	800062c <__aeabi_dmul>
 80127aa:	460b      	mov	r3, r1
 80127ac:	4602      	mov	r2, r0
 80127ae:	4629      	mov	r1, r5
 80127b0:	4620      	mov	r0, r4
 80127b2:	f7ed fd83 	bl	80002bc <__aeabi_dsub>
 80127b6:	4b2b      	ldr	r3, [pc, #172]	; (8012864 <__kernel_cos+0x17c>)
 80127b8:	4598      	cmp	r8, r3
 80127ba:	4606      	mov	r6, r0
 80127bc:	460f      	mov	r7, r1
 80127be:	dc10      	bgt.n	80127e2 <__kernel_cos+0xfa>
 80127c0:	4602      	mov	r2, r0
 80127c2:	460b      	mov	r3, r1
 80127c4:	4650      	mov	r0, sl
 80127c6:	4659      	mov	r1, fp
 80127c8:	f7ed fd78 	bl	80002bc <__aeabi_dsub>
 80127cc:	460b      	mov	r3, r1
 80127ce:	4926      	ldr	r1, [pc, #152]	; (8012868 <__kernel_cos+0x180>)
 80127d0:	4602      	mov	r2, r0
 80127d2:	2000      	movs	r0, #0
 80127d4:	f7ed fd72 	bl	80002bc <__aeabi_dsub>
 80127d8:	ec41 0b10 	vmov	d0, r0, r1
 80127dc:	b003      	add	sp, #12
 80127de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e2:	4b22      	ldr	r3, [pc, #136]	; (801286c <__kernel_cos+0x184>)
 80127e4:	4920      	ldr	r1, [pc, #128]	; (8012868 <__kernel_cos+0x180>)
 80127e6:	4598      	cmp	r8, r3
 80127e8:	bfcc      	ite	gt
 80127ea:	4d21      	ldrgt	r5, [pc, #132]	; (8012870 <__kernel_cos+0x188>)
 80127ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80127f0:	2400      	movs	r4, #0
 80127f2:	4622      	mov	r2, r4
 80127f4:	462b      	mov	r3, r5
 80127f6:	2000      	movs	r0, #0
 80127f8:	f7ed fd60 	bl	80002bc <__aeabi_dsub>
 80127fc:	4622      	mov	r2, r4
 80127fe:	4680      	mov	r8, r0
 8012800:	4689      	mov	r9, r1
 8012802:	462b      	mov	r3, r5
 8012804:	4650      	mov	r0, sl
 8012806:	4659      	mov	r1, fp
 8012808:	f7ed fd58 	bl	80002bc <__aeabi_dsub>
 801280c:	4632      	mov	r2, r6
 801280e:	463b      	mov	r3, r7
 8012810:	f7ed fd54 	bl	80002bc <__aeabi_dsub>
 8012814:	4602      	mov	r2, r0
 8012816:	460b      	mov	r3, r1
 8012818:	4640      	mov	r0, r8
 801281a:	4649      	mov	r1, r9
 801281c:	e7da      	b.n	80127d4 <__kernel_cos+0xec>
 801281e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012858 <__kernel_cos+0x170>
 8012822:	e7db      	b.n	80127dc <__kernel_cos+0xf4>
 8012824:	f3af 8000 	nop.w
 8012828:	be8838d4 	.word	0xbe8838d4
 801282c:	bda8fae9 	.word	0xbda8fae9
 8012830:	bdb4b1c4 	.word	0xbdb4b1c4
 8012834:	3e21ee9e 	.word	0x3e21ee9e
 8012838:	809c52ad 	.word	0x809c52ad
 801283c:	3e927e4f 	.word	0x3e927e4f
 8012840:	19cb1590 	.word	0x19cb1590
 8012844:	3efa01a0 	.word	0x3efa01a0
 8012848:	16c15177 	.word	0x16c15177
 801284c:	3f56c16c 	.word	0x3f56c16c
 8012850:	5555554c 	.word	0x5555554c
 8012854:	3fa55555 	.word	0x3fa55555
 8012858:	00000000 	.word	0x00000000
 801285c:	3ff00000 	.word	0x3ff00000
 8012860:	3fe00000 	.word	0x3fe00000
 8012864:	3fd33332 	.word	0x3fd33332
 8012868:	3ff00000 	.word	0x3ff00000
 801286c:	3fe90000 	.word	0x3fe90000
 8012870:	3fd20000 	.word	0x3fd20000
 8012874:	00000000 	.word	0x00000000

08012878 <__kernel_rem_pio2>:
 8012878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801287c:	ed2d 8b02 	vpush	{d8}
 8012880:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012884:	f112 0f14 	cmn.w	r2, #20
 8012888:	9308      	str	r3, [sp, #32]
 801288a:	9101      	str	r1, [sp, #4]
 801288c:	4bc4      	ldr	r3, [pc, #784]	; (8012ba0 <__kernel_rem_pio2+0x328>)
 801288e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012890:	900b      	str	r0, [sp, #44]	; 0x2c
 8012892:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012896:	9302      	str	r3, [sp, #8]
 8012898:	9b08      	ldr	r3, [sp, #32]
 801289a:	f103 33ff 	add.w	r3, r3, #4294967295
 801289e:	bfa8      	it	ge
 80128a0:	1ed4      	subge	r4, r2, #3
 80128a2:	9306      	str	r3, [sp, #24]
 80128a4:	bfb2      	itee	lt
 80128a6:	2400      	movlt	r4, #0
 80128a8:	2318      	movge	r3, #24
 80128aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80128ae:	f06f 0317 	mvn.w	r3, #23
 80128b2:	fb04 3303 	mla	r3, r4, r3, r3
 80128b6:	eb03 0a02 	add.w	sl, r3, r2
 80128ba:	9b02      	ldr	r3, [sp, #8]
 80128bc:	9a06      	ldr	r2, [sp, #24]
 80128be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8012b90 <__kernel_rem_pio2+0x318>
 80128c2:	eb03 0802 	add.w	r8, r3, r2
 80128c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80128c8:	1aa7      	subs	r7, r4, r2
 80128ca:	ae22      	add	r6, sp, #136	; 0x88
 80128cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80128d0:	2500      	movs	r5, #0
 80128d2:	4545      	cmp	r5, r8
 80128d4:	dd13      	ble.n	80128fe <__kernel_rem_pio2+0x86>
 80128d6:	9b08      	ldr	r3, [sp, #32]
 80128d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8012b90 <__kernel_rem_pio2+0x318>
 80128dc:	aa22      	add	r2, sp, #136	; 0x88
 80128de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80128e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80128e6:	f04f 0800 	mov.w	r8, #0
 80128ea:	9b02      	ldr	r3, [sp, #8]
 80128ec:	4598      	cmp	r8, r3
 80128ee:	dc2f      	bgt.n	8012950 <__kernel_rem_pio2+0xd8>
 80128f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80128f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80128f8:	462f      	mov	r7, r5
 80128fa:	2600      	movs	r6, #0
 80128fc:	e01b      	b.n	8012936 <__kernel_rem_pio2+0xbe>
 80128fe:	42ef      	cmn	r7, r5
 8012900:	d407      	bmi.n	8012912 <__kernel_rem_pio2+0x9a>
 8012902:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012906:	f7ed fe27 	bl	8000558 <__aeabi_i2d>
 801290a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801290e:	3501      	adds	r5, #1
 8012910:	e7df      	b.n	80128d2 <__kernel_rem_pio2+0x5a>
 8012912:	ec51 0b18 	vmov	r0, r1, d8
 8012916:	e7f8      	b.n	801290a <__kernel_rem_pio2+0x92>
 8012918:	e9d7 2300 	ldrd	r2, r3, [r7]
 801291c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012920:	f7ed fe84 	bl	800062c <__aeabi_dmul>
 8012924:	4602      	mov	r2, r0
 8012926:	460b      	mov	r3, r1
 8012928:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801292c:	f7ed fcc8 	bl	80002c0 <__adddf3>
 8012930:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012934:	3601      	adds	r6, #1
 8012936:	9b06      	ldr	r3, [sp, #24]
 8012938:	429e      	cmp	r6, r3
 801293a:	f1a7 0708 	sub.w	r7, r7, #8
 801293e:	ddeb      	ble.n	8012918 <__kernel_rem_pio2+0xa0>
 8012940:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012944:	f108 0801 	add.w	r8, r8, #1
 8012948:	ecab 7b02 	vstmia	fp!, {d7}
 801294c:	3508      	adds	r5, #8
 801294e:	e7cc      	b.n	80128ea <__kernel_rem_pio2+0x72>
 8012950:	9b02      	ldr	r3, [sp, #8]
 8012952:	aa0e      	add	r2, sp, #56	; 0x38
 8012954:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012958:	930d      	str	r3, [sp, #52]	; 0x34
 801295a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801295c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012960:	9c02      	ldr	r4, [sp, #8]
 8012962:	930c      	str	r3, [sp, #48]	; 0x30
 8012964:	00e3      	lsls	r3, r4, #3
 8012966:	930a      	str	r3, [sp, #40]	; 0x28
 8012968:	ab9a      	add	r3, sp, #616	; 0x268
 801296a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801296e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012972:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012976:	ab72      	add	r3, sp, #456	; 0x1c8
 8012978:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801297c:	46c3      	mov	fp, r8
 801297e:	46a1      	mov	r9, r4
 8012980:	f1b9 0f00 	cmp.w	r9, #0
 8012984:	f1a5 0508 	sub.w	r5, r5, #8
 8012988:	dc77      	bgt.n	8012a7a <__kernel_rem_pio2+0x202>
 801298a:	ec47 6b10 	vmov	d0, r6, r7
 801298e:	4650      	mov	r0, sl
 8012990:	f000 fe5a 	bl	8013648 <scalbn>
 8012994:	ec57 6b10 	vmov	r6, r7, d0
 8012998:	2200      	movs	r2, #0
 801299a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801299e:	ee10 0a10 	vmov	r0, s0
 80129a2:	4639      	mov	r1, r7
 80129a4:	f7ed fe42 	bl	800062c <__aeabi_dmul>
 80129a8:	ec41 0b10 	vmov	d0, r0, r1
 80129ac:	f000 fdc4 	bl	8013538 <floor>
 80129b0:	4b7c      	ldr	r3, [pc, #496]	; (8012ba4 <__kernel_rem_pio2+0x32c>)
 80129b2:	ec51 0b10 	vmov	r0, r1, d0
 80129b6:	2200      	movs	r2, #0
 80129b8:	f7ed fe38 	bl	800062c <__aeabi_dmul>
 80129bc:	4602      	mov	r2, r0
 80129be:	460b      	mov	r3, r1
 80129c0:	4630      	mov	r0, r6
 80129c2:	4639      	mov	r1, r7
 80129c4:	f7ed fc7a 	bl	80002bc <__aeabi_dsub>
 80129c8:	460f      	mov	r7, r1
 80129ca:	4606      	mov	r6, r0
 80129cc:	f7ee f8de 	bl	8000b8c <__aeabi_d2iz>
 80129d0:	9004      	str	r0, [sp, #16]
 80129d2:	f7ed fdc1 	bl	8000558 <__aeabi_i2d>
 80129d6:	4602      	mov	r2, r0
 80129d8:	460b      	mov	r3, r1
 80129da:	4630      	mov	r0, r6
 80129dc:	4639      	mov	r1, r7
 80129de:	f7ed fc6d 	bl	80002bc <__aeabi_dsub>
 80129e2:	f1ba 0f00 	cmp.w	sl, #0
 80129e6:	4606      	mov	r6, r0
 80129e8:	460f      	mov	r7, r1
 80129ea:	dd6d      	ble.n	8012ac8 <__kernel_rem_pio2+0x250>
 80129ec:	1e62      	subs	r2, r4, #1
 80129ee:	ab0e      	add	r3, sp, #56	; 0x38
 80129f0:	9d04      	ldr	r5, [sp, #16]
 80129f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80129f6:	f1ca 0118 	rsb	r1, sl, #24
 80129fa:	fa40 f301 	asr.w	r3, r0, r1
 80129fe:	441d      	add	r5, r3
 8012a00:	408b      	lsls	r3, r1
 8012a02:	1ac0      	subs	r0, r0, r3
 8012a04:	ab0e      	add	r3, sp, #56	; 0x38
 8012a06:	9504      	str	r5, [sp, #16]
 8012a08:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012a0c:	f1ca 0317 	rsb	r3, sl, #23
 8012a10:	fa40 fb03 	asr.w	fp, r0, r3
 8012a14:	f1bb 0f00 	cmp.w	fp, #0
 8012a18:	dd65      	ble.n	8012ae6 <__kernel_rem_pio2+0x26e>
 8012a1a:	9b04      	ldr	r3, [sp, #16]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	3301      	adds	r3, #1
 8012a20:	9304      	str	r3, [sp, #16]
 8012a22:	4615      	mov	r5, r2
 8012a24:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012a28:	4294      	cmp	r4, r2
 8012a2a:	f300 809c 	bgt.w	8012b66 <__kernel_rem_pio2+0x2ee>
 8012a2e:	f1ba 0f00 	cmp.w	sl, #0
 8012a32:	dd07      	ble.n	8012a44 <__kernel_rem_pio2+0x1cc>
 8012a34:	f1ba 0f01 	cmp.w	sl, #1
 8012a38:	f000 80c0 	beq.w	8012bbc <__kernel_rem_pio2+0x344>
 8012a3c:	f1ba 0f02 	cmp.w	sl, #2
 8012a40:	f000 80c6 	beq.w	8012bd0 <__kernel_rem_pio2+0x358>
 8012a44:	f1bb 0f02 	cmp.w	fp, #2
 8012a48:	d14d      	bne.n	8012ae6 <__kernel_rem_pio2+0x26e>
 8012a4a:	4632      	mov	r2, r6
 8012a4c:	463b      	mov	r3, r7
 8012a4e:	4956      	ldr	r1, [pc, #344]	; (8012ba8 <__kernel_rem_pio2+0x330>)
 8012a50:	2000      	movs	r0, #0
 8012a52:	f7ed fc33 	bl	80002bc <__aeabi_dsub>
 8012a56:	4606      	mov	r6, r0
 8012a58:	460f      	mov	r7, r1
 8012a5a:	2d00      	cmp	r5, #0
 8012a5c:	d043      	beq.n	8012ae6 <__kernel_rem_pio2+0x26e>
 8012a5e:	4650      	mov	r0, sl
 8012a60:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8012b98 <__kernel_rem_pio2+0x320>
 8012a64:	f000 fdf0 	bl	8013648 <scalbn>
 8012a68:	4630      	mov	r0, r6
 8012a6a:	4639      	mov	r1, r7
 8012a6c:	ec53 2b10 	vmov	r2, r3, d0
 8012a70:	f7ed fc24 	bl	80002bc <__aeabi_dsub>
 8012a74:	4606      	mov	r6, r0
 8012a76:	460f      	mov	r7, r1
 8012a78:	e035      	b.n	8012ae6 <__kernel_rem_pio2+0x26e>
 8012a7a:	4b4c      	ldr	r3, [pc, #304]	; (8012bac <__kernel_rem_pio2+0x334>)
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	4630      	mov	r0, r6
 8012a80:	4639      	mov	r1, r7
 8012a82:	f7ed fdd3 	bl	800062c <__aeabi_dmul>
 8012a86:	f7ee f881 	bl	8000b8c <__aeabi_d2iz>
 8012a8a:	f7ed fd65 	bl	8000558 <__aeabi_i2d>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	460b      	mov	r3, r1
 8012a92:	ec43 2b18 	vmov	d8, r2, r3
 8012a96:	4b46      	ldr	r3, [pc, #280]	; (8012bb0 <__kernel_rem_pio2+0x338>)
 8012a98:	2200      	movs	r2, #0
 8012a9a:	f7ed fdc7 	bl	800062c <__aeabi_dmul>
 8012a9e:	4602      	mov	r2, r0
 8012aa0:	460b      	mov	r3, r1
 8012aa2:	4630      	mov	r0, r6
 8012aa4:	4639      	mov	r1, r7
 8012aa6:	f7ed fc09 	bl	80002bc <__aeabi_dsub>
 8012aaa:	f7ee f86f 	bl	8000b8c <__aeabi_d2iz>
 8012aae:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012ab2:	f84b 0b04 	str.w	r0, [fp], #4
 8012ab6:	ec51 0b18 	vmov	r0, r1, d8
 8012aba:	f7ed fc01 	bl	80002c0 <__adddf3>
 8012abe:	f109 39ff 	add.w	r9, r9, #4294967295
 8012ac2:	4606      	mov	r6, r0
 8012ac4:	460f      	mov	r7, r1
 8012ac6:	e75b      	b.n	8012980 <__kernel_rem_pio2+0x108>
 8012ac8:	d106      	bne.n	8012ad8 <__kernel_rem_pio2+0x260>
 8012aca:	1e63      	subs	r3, r4, #1
 8012acc:	aa0e      	add	r2, sp, #56	; 0x38
 8012ace:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012ad2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8012ad6:	e79d      	b.n	8012a14 <__kernel_rem_pio2+0x19c>
 8012ad8:	4b36      	ldr	r3, [pc, #216]	; (8012bb4 <__kernel_rem_pio2+0x33c>)
 8012ada:	2200      	movs	r2, #0
 8012adc:	f7ee f82c 	bl	8000b38 <__aeabi_dcmpge>
 8012ae0:	2800      	cmp	r0, #0
 8012ae2:	d13d      	bne.n	8012b60 <__kernel_rem_pio2+0x2e8>
 8012ae4:	4683      	mov	fp, r0
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	2300      	movs	r3, #0
 8012aea:	4630      	mov	r0, r6
 8012aec:	4639      	mov	r1, r7
 8012aee:	f7ee f805 	bl	8000afc <__aeabi_dcmpeq>
 8012af2:	2800      	cmp	r0, #0
 8012af4:	f000 80c0 	beq.w	8012c78 <__kernel_rem_pio2+0x400>
 8012af8:	1e65      	subs	r5, r4, #1
 8012afa:	462b      	mov	r3, r5
 8012afc:	2200      	movs	r2, #0
 8012afe:	9902      	ldr	r1, [sp, #8]
 8012b00:	428b      	cmp	r3, r1
 8012b02:	da6c      	bge.n	8012bde <__kernel_rem_pio2+0x366>
 8012b04:	2a00      	cmp	r2, #0
 8012b06:	f000 8089 	beq.w	8012c1c <__kernel_rem_pio2+0x3a4>
 8012b0a:	ab0e      	add	r3, sp, #56	; 0x38
 8012b0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012b10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	f000 80ad 	beq.w	8012c74 <__kernel_rem_pio2+0x3fc>
 8012b1a:	4650      	mov	r0, sl
 8012b1c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8012b98 <__kernel_rem_pio2+0x320>
 8012b20:	f000 fd92 	bl	8013648 <scalbn>
 8012b24:	ab9a      	add	r3, sp, #616	; 0x268
 8012b26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012b2a:	ec57 6b10 	vmov	r6, r7, d0
 8012b2e:	00ec      	lsls	r4, r5, #3
 8012b30:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8012b34:	46aa      	mov	sl, r5
 8012b36:	f1ba 0f00 	cmp.w	sl, #0
 8012b3a:	f280 80d6 	bge.w	8012cea <__kernel_rem_pio2+0x472>
 8012b3e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8012b90 <__kernel_rem_pio2+0x318>
 8012b42:	462e      	mov	r6, r5
 8012b44:	2e00      	cmp	r6, #0
 8012b46:	f2c0 8104 	blt.w	8012d52 <__kernel_rem_pio2+0x4da>
 8012b4a:	ab72      	add	r3, sp, #456	; 0x1c8
 8012b4c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012b50:	f8df a064 	ldr.w	sl, [pc, #100]	; 8012bb8 <__kernel_rem_pio2+0x340>
 8012b54:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8012b58:	f04f 0800 	mov.w	r8, #0
 8012b5c:	1baf      	subs	r7, r5, r6
 8012b5e:	e0ea      	b.n	8012d36 <__kernel_rem_pio2+0x4be>
 8012b60:	f04f 0b02 	mov.w	fp, #2
 8012b64:	e759      	b.n	8012a1a <__kernel_rem_pio2+0x1a2>
 8012b66:	f8d8 3000 	ldr.w	r3, [r8]
 8012b6a:	b955      	cbnz	r5, 8012b82 <__kernel_rem_pio2+0x30a>
 8012b6c:	b123      	cbz	r3, 8012b78 <__kernel_rem_pio2+0x300>
 8012b6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012b72:	f8c8 3000 	str.w	r3, [r8]
 8012b76:	2301      	movs	r3, #1
 8012b78:	3201      	adds	r2, #1
 8012b7a:	f108 0804 	add.w	r8, r8, #4
 8012b7e:	461d      	mov	r5, r3
 8012b80:	e752      	b.n	8012a28 <__kernel_rem_pio2+0x1b0>
 8012b82:	1acb      	subs	r3, r1, r3
 8012b84:	f8c8 3000 	str.w	r3, [r8]
 8012b88:	462b      	mov	r3, r5
 8012b8a:	e7f5      	b.n	8012b78 <__kernel_rem_pio2+0x300>
 8012b8c:	f3af 8000 	nop.w
	...
 8012b9c:	3ff00000 	.word	0x3ff00000
 8012ba0:	08039a90 	.word	0x08039a90
 8012ba4:	40200000 	.word	0x40200000
 8012ba8:	3ff00000 	.word	0x3ff00000
 8012bac:	3e700000 	.word	0x3e700000
 8012bb0:	41700000 	.word	0x41700000
 8012bb4:	3fe00000 	.word	0x3fe00000
 8012bb8:	08039a50 	.word	0x08039a50
 8012bbc:	1e62      	subs	r2, r4, #1
 8012bbe:	ab0e      	add	r3, sp, #56	; 0x38
 8012bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bc4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012bc8:	a90e      	add	r1, sp, #56	; 0x38
 8012bca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012bce:	e739      	b.n	8012a44 <__kernel_rem_pio2+0x1cc>
 8012bd0:	1e62      	subs	r2, r4, #1
 8012bd2:	ab0e      	add	r3, sp, #56	; 0x38
 8012bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bd8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012bdc:	e7f4      	b.n	8012bc8 <__kernel_rem_pio2+0x350>
 8012bde:	a90e      	add	r1, sp, #56	; 0x38
 8012be0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012be4:	3b01      	subs	r3, #1
 8012be6:	430a      	orrs	r2, r1
 8012be8:	e789      	b.n	8012afe <__kernel_rem_pio2+0x286>
 8012bea:	3301      	adds	r3, #1
 8012bec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012bf0:	2900      	cmp	r1, #0
 8012bf2:	d0fa      	beq.n	8012bea <__kernel_rem_pio2+0x372>
 8012bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bf6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8012bfa:	446a      	add	r2, sp
 8012bfc:	3a98      	subs	r2, #152	; 0x98
 8012bfe:	920a      	str	r2, [sp, #40]	; 0x28
 8012c00:	9a08      	ldr	r2, [sp, #32]
 8012c02:	18e3      	adds	r3, r4, r3
 8012c04:	18a5      	adds	r5, r4, r2
 8012c06:	aa22      	add	r2, sp, #136	; 0x88
 8012c08:	f104 0801 	add.w	r8, r4, #1
 8012c0c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8012c10:	9304      	str	r3, [sp, #16]
 8012c12:	9b04      	ldr	r3, [sp, #16]
 8012c14:	4543      	cmp	r3, r8
 8012c16:	da04      	bge.n	8012c22 <__kernel_rem_pio2+0x3aa>
 8012c18:	461c      	mov	r4, r3
 8012c1a:	e6a3      	b.n	8012964 <__kernel_rem_pio2+0xec>
 8012c1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012c1e:	2301      	movs	r3, #1
 8012c20:	e7e4      	b.n	8012bec <__kernel_rem_pio2+0x374>
 8012c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012c28:	f7ed fc96 	bl	8000558 <__aeabi_i2d>
 8012c2c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c32:	46ab      	mov	fp, r5
 8012c34:	461c      	mov	r4, r3
 8012c36:	f04f 0900 	mov.w	r9, #0
 8012c3a:	2600      	movs	r6, #0
 8012c3c:	2700      	movs	r7, #0
 8012c3e:	9b06      	ldr	r3, [sp, #24]
 8012c40:	4599      	cmp	r9, r3
 8012c42:	dd06      	ble.n	8012c52 <__kernel_rem_pio2+0x3da>
 8012c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c46:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012c4a:	f108 0801 	add.w	r8, r8, #1
 8012c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8012c50:	e7df      	b.n	8012c12 <__kernel_rem_pio2+0x39a>
 8012c52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012c56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012c5a:	f7ed fce7 	bl	800062c <__aeabi_dmul>
 8012c5e:	4602      	mov	r2, r0
 8012c60:	460b      	mov	r3, r1
 8012c62:	4630      	mov	r0, r6
 8012c64:	4639      	mov	r1, r7
 8012c66:	f7ed fb2b 	bl	80002c0 <__adddf3>
 8012c6a:	f109 0901 	add.w	r9, r9, #1
 8012c6e:	4606      	mov	r6, r0
 8012c70:	460f      	mov	r7, r1
 8012c72:	e7e4      	b.n	8012c3e <__kernel_rem_pio2+0x3c6>
 8012c74:	3d01      	subs	r5, #1
 8012c76:	e748      	b.n	8012b0a <__kernel_rem_pio2+0x292>
 8012c78:	ec47 6b10 	vmov	d0, r6, r7
 8012c7c:	f1ca 0000 	rsb	r0, sl, #0
 8012c80:	f000 fce2 	bl	8013648 <scalbn>
 8012c84:	ec57 6b10 	vmov	r6, r7, d0
 8012c88:	4ba0      	ldr	r3, [pc, #640]	; (8012f0c <__kernel_rem_pio2+0x694>)
 8012c8a:	ee10 0a10 	vmov	r0, s0
 8012c8e:	2200      	movs	r2, #0
 8012c90:	4639      	mov	r1, r7
 8012c92:	f7ed ff51 	bl	8000b38 <__aeabi_dcmpge>
 8012c96:	b1f8      	cbz	r0, 8012cd8 <__kernel_rem_pio2+0x460>
 8012c98:	4b9d      	ldr	r3, [pc, #628]	; (8012f10 <__kernel_rem_pio2+0x698>)
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	4630      	mov	r0, r6
 8012c9e:	4639      	mov	r1, r7
 8012ca0:	f7ed fcc4 	bl	800062c <__aeabi_dmul>
 8012ca4:	f7ed ff72 	bl	8000b8c <__aeabi_d2iz>
 8012ca8:	4680      	mov	r8, r0
 8012caa:	f7ed fc55 	bl	8000558 <__aeabi_i2d>
 8012cae:	4b97      	ldr	r3, [pc, #604]	; (8012f0c <__kernel_rem_pio2+0x694>)
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	f7ed fcbb 	bl	800062c <__aeabi_dmul>
 8012cb6:	460b      	mov	r3, r1
 8012cb8:	4602      	mov	r2, r0
 8012cba:	4639      	mov	r1, r7
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	f7ed fafd 	bl	80002bc <__aeabi_dsub>
 8012cc2:	f7ed ff63 	bl	8000b8c <__aeabi_d2iz>
 8012cc6:	1c65      	adds	r5, r4, #1
 8012cc8:	ab0e      	add	r3, sp, #56	; 0x38
 8012cca:	f10a 0a18 	add.w	sl, sl, #24
 8012cce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012cd2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012cd6:	e720      	b.n	8012b1a <__kernel_rem_pio2+0x2a2>
 8012cd8:	4630      	mov	r0, r6
 8012cda:	4639      	mov	r1, r7
 8012cdc:	f7ed ff56 	bl	8000b8c <__aeabi_d2iz>
 8012ce0:	ab0e      	add	r3, sp, #56	; 0x38
 8012ce2:	4625      	mov	r5, r4
 8012ce4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012ce8:	e717      	b.n	8012b1a <__kernel_rem_pio2+0x2a2>
 8012cea:	ab0e      	add	r3, sp, #56	; 0x38
 8012cec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012cf0:	f7ed fc32 	bl	8000558 <__aeabi_i2d>
 8012cf4:	4632      	mov	r2, r6
 8012cf6:	463b      	mov	r3, r7
 8012cf8:	f7ed fc98 	bl	800062c <__aeabi_dmul>
 8012cfc:	4b84      	ldr	r3, [pc, #528]	; (8012f10 <__kernel_rem_pio2+0x698>)
 8012cfe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8012d02:	2200      	movs	r2, #0
 8012d04:	4630      	mov	r0, r6
 8012d06:	4639      	mov	r1, r7
 8012d08:	f7ed fc90 	bl	800062c <__aeabi_dmul>
 8012d0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012d10:	4606      	mov	r6, r0
 8012d12:	460f      	mov	r7, r1
 8012d14:	e70f      	b.n	8012b36 <__kernel_rem_pio2+0x2be>
 8012d16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8012d1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8012d1e:	f7ed fc85 	bl	800062c <__aeabi_dmul>
 8012d22:	4602      	mov	r2, r0
 8012d24:	460b      	mov	r3, r1
 8012d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d2a:	f7ed fac9 	bl	80002c0 <__adddf3>
 8012d2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012d32:	f108 0801 	add.w	r8, r8, #1
 8012d36:	9b02      	ldr	r3, [sp, #8]
 8012d38:	4598      	cmp	r8, r3
 8012d3a:	dc01      	bgt.n	8012d40 <__kernel_rem_pio2+0x4c8>
 8012d3c:	45b8      	cmp	r8, r7
 8012d3e:	ddea      	ble.n	8012d16 <__kernel_rem_pio2+0x49e>
 8012d40:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012d44:	ab4a      	add	r3, sp, #296	; 0x128
 8012d46:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012d4a:	ed87 7b00 	vstr	d7, [r7]
 8012d4e:	3e01      	subs	r6, #1
 8012d50:	e6f8      	b.n	8012b44 <__kernel_rem_pio2+0x2cc>
 8012d52:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012d54:	2b02      	cmp	r3, #2
 8012d56:	dc0b      	bgt.n	8012d70 <__kernel_rem_pio2+0x4f8>
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	dc35      	bgt.n	8012dc8 <__kernel_rem_pio2+0x550>
 8012d5c:	d059      	beq.n	8012e12 <__kernel_rem_pio2+0x59a>
 8012d5e:	9b04      	ldr	r3, [sp, #16]
 8012d60:	f003 0007 	and.w	r0, r3, #7
 8012d64:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012d68:	ecbd 8b02 	vpop	{d8}
 8012d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d70:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012d72:	2b03      	cmp	r3, #3
 8012d74:	d1f3      	bne.n	8012d5e <__kernel_rem_pio2+0x4e6>
 8012d76:	ab4a      	add	r3, sp, #296	; 0x128
 8012d78:	4423      	add	r3, r4
 8012d7a:	9306      	str	r3, [sp, #24]
 8012d7c:	461c      	mov	r4, r3
 8012d7e:	469a      	mov	sl, r3
 8012d80:	9502      	str	r5, [sp, #8]
 8012d82:	9b02      	ldr	r3, [sp, #8]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	f1aa 0a08 	sub.w	sl, sl, #8
 8012d8a:	dc6b      	bgt.n	8012e64 <__kernel_rem_pio2+0x5ec>
 8012d8c:	46aa      	mov	sl, r5
 8012d8e:	f1ba 0f01 	cmp.w	sl, #1
 8012d92:	f1a4 0408 	sub.w	r4, r4, #8
 8012d96:	f300 8085 	bgt.w	8012ea4 <__kernel_rem_pio2+0x62c>
 8012d9a:	9c06      	ldr	r4, [sp, #24]
 8012d9c:	2000      	movs	r0, #0
 8012d9e:	3408      	adds	r4, #8
 8012da0:	2100      	movs	r1, #0
 8012da2:	2d01      	cmp	r5, #1
 8012da4:	f300 809d 	bgt.w	8012ee2 <__kernel_rem_pio2+0x66a>
 8012da8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012dac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8012db0:	f1bb 0f00 	cmp.w	fp, #0
 8012db4:	f040 809b 	bne.w	8012eee <__kernel_rem_pio2+0x676>
 8012db8:	9b01      	ldr	r3, [sp, #4]
 8012dba:	e9c3 5600 	strd	r5, r6, [r3]
 8012dbe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012dc2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012dc6:	e7ca      	b.n	8012d5e <__kernel_rem_pio2+0x4e6>
 8012dc8:	3408      	adds	r4, #8
 8012dca:	ab4a      	add	r3, sp, #296	; 0x128
 8012dcc:	441c      	add	r4, r3
 8012dce:	462e      	mov	r6, r5
 8012dd0:	2000      	movs	r0, #0
 8012dd2:	2100      	movs	r1, #0
 8012dd4:	2e00      	cmp	r6, #0
 8012dd6:	da36      	bge.n	8012e46 <__kernel_rem_pio2+0x5ce>
 8012dd8:	f1bb 0f00 	cmp.w	fp, #0
 8012ddc:	d039      	beq.n	8012e52 <__kernel_rem_pio2+0x5da>
 8012dde:	4602      	mov	r2, r0
 8012de0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012de4:	9c01      	ldr	r4, [sp, #4]
 8012de6:	e9c4 2300 	strd	r2, r3, [r4]
 8012dea:	4602      	mov	r2, r0
 8012dec:	460b      	mov	r3, r1
 8012dee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012df2:	f7ed fa63 	bl	80002bc <__aeabi_dsub>
 8012df6:	ae4c      	add	r6, sp, #304	; 0x130
 8012df8:	2401      	movs	r4, #1
 8012dfa:	42a5      	cmp	r5, r4
 8012dfc:	da2c      	bge.n	8012e58 <__kernel_rem_pio2+0x5e0>
 8012dfe:	f1bb 0f00 	cmp.w	fp, #0
 8012e02:	d002      	beq.n	8012e0a <__kernel_rem_pio2+0x592>
 8012e04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e08:	4619      	mov	r1, r3
 8012e0a:	9b01      	ldr	r3, [sp, #4]
 8012e0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012e10:	e7a5      	b.n	8012d5e <__kernel_rem_pio2+0x4e6>
 8012e12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8012e16:	eb0d 0403 	add.w	r4, sp, r3
 8012e1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012e1e:	2000      	movs	r0, #0
 8012e20:	2100      	movs	r1, #0
 8012e22:	2d00      	cmp	r5, #0
 8012e24:	da09      	bge.n	8012e3a <__kernel_rem_pio2+0x5c2>
 8012e26:	f1bb 0f00 	cmp.w	fp, #0
 8012e2a:	d002      	beq.n	8012e32 <__kernel_rem_pio2+0x5ba>
 8012e2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e30:	4619      	mov	r1, r3
 8012e32:	9b01      	ldr	r3, [sp, #4]
 8012e34:	e9c3 0100 	strd	r0, r1, [r3]
 8012e38:	e791      	b.n	8012d5e <__kernel_rem_pio2+0x4e6>
 8012e3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012e3e:	f7ed fa3f 	bl	80002c0 <__adddf3>
 8012e42:	3d01      	subs	r5, #1
 8012e44:	e7ed      	b.n	8012e22 <__kernel_rem_pio2+0x5aa>
 8012e46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012e4a:	f7ed fa39 	bl	80002c0 <__adddf3>
 8012e4e:	3e01      	subs	r6, #1
 8012e50:	e7c0      	b.n	8012dd4 <__kernel_rem_pio2+0x55c>
 8012e52:	4602      	mov	r2, r0
 8012e54:	460b      	mov	r3, r1
 8012e56:	e7c5      	b.n	8012de4 <__kernel_rem_pio2+0x56c>
 8012e58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012e5c:	f7ed fa30 	bl	80002c0 <__adddf3>
 8012e60:	3401      	adds	r4, #1
 8012e62:	e7ca      	b.n	8012dfa <__kernel_rem_pio2+0x582>
 8012e64:	e9da 8900 	ldrd	r8, r9, [sl]
 8012e68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012e6c:	9b02      	ldr	r3, [sp, #8]
 8012e6e:	3b01      	subs	r3, #1
 8012e70:	9302      	str	r3, [sp, #8]
 8012e72:	4632      	mov	r2, r6
 8012e74:	463b      	mov	r3, r7
 8012e76:	4640      	mov	r0, r8
 8012e78:	4649      	mov	r1, r9
 8012e7a:	f7ed fa21 	bl	80002c0 <__adddf3>
 8012e7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012e82:	4602      	mov	r2, r0
 8012e84:	460b      	mov	r3, r1
 8012e86:	4640      	mov	r0, r8
 8012e88:	4649      	mov	r1, r9
 8012e8a:	f7ed fa17 	bl	80002bc <__aeabi_dsub>
 8012e8e:	4632      	mov	r2, r6
 8012e90:	463b      	mov	r3, r7
 8012e92:	f7ed fa15 	bl	80002c0 <__adddf3>
 8012e96:	ed9d 7b08 	vldr	d7, [sp, #32]
 8012e9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012e9e:	ed8a 7b00 	vstr	d7, [sl]
 8012ea2:	e76e      	b.n	8012d82 <__kernel_rem_pio2+0x50a>
 8012ea4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012ea8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012eac:	4640      	mov	r0, r8
 8012eae:	4632      	mov	r2, r6
 8012eb0:	463b      	mov	r3, r7
 8012eb2:	4649      	mov	r1, r9
 8012eb4:	f7ed fa04 	bl	80002c0 <__adddf3>
 8012eb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ebc:	4602      	mov	r2, r0
 8012ebe:	460b      	mov	r3, r1
 8012ec0:	4640      	mov	r0, r8
 8012ec2:	4649      	mov	r1, r9
 8012ec4:	f7ed f9fa 	bl	80002bc <__aeabi_dsub>
 8012ec8:	4632      	mov	r2, r6
 8012eca:	463b      	mov	r3, r7
 8012ecc:	f7ed f9f8 	bl	80002c0 <__adddf3>
 8012ed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ed4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012ed8:	ed84 7b00 	vstr	d7, [r4]
 8012edc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012ee0:	e755      	b.n	8012d8e <__kernel_rem_pio2+0x516>
 8012ee2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012ee6:	f7ed f9eb 	bl	80002c0 <__adddf3>
 8012eea:	3d01      	subs	r5, #1
 8012eec:	e759      	b.n	8012da2 <__kernel_rem_pio2+0x52a>
 8012eee:	9b01      	ldr	r3, [sp, #4]
 8012ef0:	9a01      	ldr	r2, [sp, #4]
 8012ef2:	601d      	str	r5, [r3, #0]
 8012ef4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012ef8:	605c      	str	r4, [r3, #4]
 8012efa:	609f      	str	r7, [r3, #8]
 8012efc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012f00:	60d3      	str	r3, [r2, #12]
 8012f02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f06:	6110      	str	r0, [r2, #16]
 8012f08:	6153      	str	r3, [r2, #20]
 8012f0a:	e728      	b.n	8012d5e <__kernel_rem_pio2+0x4e6>
 8012f0c:	41700000 	.word	0x41700000
 8012f10:	3e700000 	.word	0x3e700000
 8012f14:	00000000 	.word	0x00000000

08012f18 <__kernel_sin>:
 8012f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f1c:	ed2d 8b04 	vpush	{d8-d9}
 8012f20:	eeb0 8a41 	vmov.f32	s16, s2
 8012f24:	eef0 8a61 	vmov.f32	s17, s3
 8012f28:	ec55 4b10 	vmov	r4, r5, d0
 8012f2c:	b083      	sub	sp, #12
 8012f2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012f32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012f36:	9001      	str	r0, [sp, #4]
 8012f38:	da06      	bge.n	8012f48 <__kernel_sin+0x30>
 8012f3a:	ee10 0a10 	vmov	r0, s0
 8012f3e:	4629      	mov	r1, r5
 8012f40:	f7ed fe24 	bl	8000b8c <__aeabi_d2iz>
 8012f44:	2800      	cmp	r0, #0
 8012f46:	d051      	beq.n	8012fec <__kernel_sin+0xd4>
 8012f48:	4622      	mov	r2, r4
 8012f4a:	462b      	mov	r3, r5
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	4629      	mov	r1, r5
 8012f50:	f7ed fb6c 	bl	800062c <__aeabi_dmul>
 8012f54:	4682      	mov	sl, r0
 8012f56:	468b      	mov	fp, r1
 8012f58:	4602      	mov	r2, r0
 8012f5a:	460b      	mov	r3, r1
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	4629      	mov	r1, r5
 8012f60:	f7ed fb64 	bl	800062c <__aeabi_dmul>
 8012f64:	a341      	add	r3, pc, #260	; (adr r3, 801306c <__kernel_sin+0x154>)
 8012f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6a:	4680      	mov	r8, r0
 8012f6c:	4689      	mov	r9, r1
 8012f6e:	4650      	mov	r0, sl
 8012f70:	4659      	mov	r1, fp
 8012f72:	f7ed fb5b 	bl	800062c <__aeabi_dmul>
 8012f76:	a33f      	add	r3, pc, #252	; (adr r3, 8013074 <__kernel_sin+0x15c>)
 8012f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f7c:	f7ed f99e 	bl	80002bc <__aeabi_dsub>
 8012f80:	4652      	mov	r2, sl
 8012f82:	465b      	mov	r3, fp
 8012f84:	f7ed fb52 	bl	800062c <__aeabi_dmul>
 8012f88:	a33c      	add	r3, pc, #240	; (adr r3, 801307c <__kernel_sin+0x164>)
 8012f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8e:	f7ed f997 	bl	80002c0 <__adddf3>
 8012f92:	4652      	mov	r2, sl
 8012f94:	465b      	mov	r3, fp
 8012f96:	f7ed fb49 	bl	800062c <__aeabi_dmul>
 8012f9a:	a33a      	add	r3, pc, #232	; (adr r3, 8013084 <__kernel_sin+0x16c>)
 8012f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa0:	f7ed f98c 	bl	80002bc <__aeabi_dsub>
 8012fa4:	4652      	mov	r2, sl
 8012fa6:	465b      	mov	r3, fp
 8012fa8:	f7ed fb40 	bl	800062c <__aeabi_dmul>
 8012fac:	a337      	add	r3, pc, #220	; (adr r3, 801308c <__kernel_sin+0x174>)
 8012fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb2:	f7ed f985 	bl	80002c0 <__adddf3>
 8012fb6:	9b01      	ldr	r3, [sp, #4]
 8012fb8:	4606      	mov	r6, r0
 8012fba:	460f      	mov	r7, r1
 8012fbc:	b9eb      	cbnz	r3, 8012ffa <__kernel_sin+0xe2>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	4650      	mov	r0, sl
 8012fc4:	4659      	mov	r1, fp
 8012fc6:	f7ed fb31 	bl	800062c <__aeabi_dmul>
 8012fca:	a325      	add	r3, pc, #148	; (adr r3, 8013060 <__kernel_sin+0x148>)
 8012fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd0:	f7ed f974 	bl	80002bc <__aeabi_dsub>
 8012fd4:	4642      	mov	r2, r8
 8012fd6:	464b      	mov	r3, r9
 8012fd8:	f7ed fb28 	bl	800062c <__aeabi_dmul>
 8012fdc:	4602      	mov	r2, r0
 8012fde:	460b      	mov	r3, r1
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	4629      	mov	r1, r5
 8012fe4:	f7ed f96c 	bl	80002c0 <__adddf3>
 8012fe8:	4604      	mov	r4, r0
 8012fea:	460d      	mov	r5, r1
 8012fec:	ec45 4b10 	vmov	d0, r4, r5
 8012ff0:	b003      	add	sp, #12
 8012ff2:	ecbd 8b04 	vpop	{d8-d9}
 8012ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ffa:	4b1b      	ldr	r3, [pc, #108]	; (8013068 <__kernel_sin+0x150>)
 8012ffc:	ec51 0b18 	vmov	r0, r1, d8
 8013000:	2200      	movs	r2, #0
 8013002:	f7ed fb13 	bl	800062c <__aeabi_dmul>
 8013006:	4632      	mov	r2, r6
 8013008:	ec41 0b19 	vmov	d9, r0, r1
 801300c:	463b      	mov	r3, r7
 801300e:	4640      	mov	r0, r8
 8013010:	4649      	mov	r1, r9
 8013012:	f7ed fb0b 	bl	800062c <__aeabi_dmul>
 8013016:	4602      	mov	r2, r0
 8013018:	460b      	mov	r3, r1
 801301a:	ec51 0b19 	vmov	r0, r1, d9
 801301e:	f7ed f94d 	bl	80002bc <__aeabi_dsub>
 8013022:	4652      	mov	r2, sl
 8013024:	465b      	mov	r3, fp
 8013026:	f7ed fb01 	bl	800062c <__aeabi_dmul>
 801302a:	ec53 2b18 	vmov	r2, r3, d8
 801302e:	f7ed f945 	bl	80002bc <__aeabi_dsub>
 8013032:	a30b      	add	r3, pc, #44	; (adr r3, 8013060 <__kernel_sin+0x148>)
 8013034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013038:	4606      	mov	r6, r0
 801303a:	460f      	mov	r7, r1
 801303c:	4640      	mov	r0, r8
 801303e:	4649      	mov	r1, r9
 8013040:	f7ed faf4 	bl	800062c <__aeabi_dmul>
 8013044:	4602      	mov	r2, r0
 8013046:	460b      	mov	r3, r1
 8013048:	4630      	mov	r0, r6
 801304a:	4639      	mov	r1, r7
 801304c:	f7ed f938 	bl	80002c0 <__adddf3>
 8013050:	4602      	mov	r2, r0
 8013052:	460b      	mov	r3, r1
 8013054:	4620      	mov	r0, r4
 8013056:	4629      	mov	r1, r5
 8013058:	f7ed f930 	bl	80002bc <__aeabi_dsub>
 801305c:	e7c4      	b.n	8012fe8 <__kernel_sin+0xd0>
 801305e:	bf00      	nop
 8013060:	55555549 	.word	0x55555549
 8013064:	3fc55555 	.word	0x3fc55555
 8013068:	3fe00000 	.word	0x3fe00000
 801306c:	5acfd57c 	.word	0x5acfd57c
 8013070:	3de5d93a 	.word	0x3de5d93a
 8013074:	8a2b9ceb 	.word	0x8a2b9ceb
 8013078:	3e5ae5e6 	.word	0x3e5ae5e6
 801307c:	57b1fe7d 	.word	0x57b1fe7d
 8013080:	3ec71de3 	.word	0x3ec71de3
 8013084:	19c161d5 	.word	0x19c161d5
 8013088:	3f2a01a0 	.word	0x3f2a01a0
 801308c:	1110f8a6 	.word	0x1110f8a6
 8013090:	3f811111 	.word	0x3f811111
 8013094:	00000000 	.word	0x00000000

08013098 <__kernel_tan>:
 8013098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801309c:	ed2d 8b06 	vpush	{d8-d10}
 80130a0:	ec5b ab10 	vmov	sl, fp, d0
 80130a4:	4be0      	ldr	r3, [pc, #896]	; (8013428 <__kernel_tan+0x390>)
 80130a6:	b083      	sub	sp, #12
 80130a8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80130ac:	429f      	cmp	r7, r3
 80130ae:	ec59 8b11 	vmov	r8, r9, d1
 80130b2:	4606      	mov	r6, r0
 80130b4:	f8cd b000 	str.w	fp, [sp]
 80130b8:	dc61      	bgt.n	801317e <__kernel_tan+0xe6>
 80130ba:	ee10 0a10 	vmov	r0, s0
 80130be:	4659      	mov	r1, fp
 80130c0:	f7ed fd64 	bl	8000b8c <__aeabi_d2iz>
 80130c4:	4605      	mov	r5, r0
 80130c6:	2800      	cmp	r0, #0
 80130c8:	f040 8083 	bne.w	80131d2 <__kernel_tan+0x13a>
 80130cc:	1c73      	adds	r3, r6, #1
 80130ce:	4652      	mov	r2, sl
 80130d0:	4313      	orrs	r3, r2
 80130d2:	433b      	orrs	r3, r7
 80130d4:	d112      	bne.n	80130fc <__kernel_tan+0x64>
 80130d6:	ec4b ab10 	vmov	d0, sl, fp
 80130da:	f000 fa17 	bl	801350c <fabs>
 80130de:	49d3      	ldr	r1, [pc, #844]	; (801342c <__kernel_tan+0x394>)
 80130e0:	ec53 2b10 	vmov	r2, r3, d0
 80130e4:	2000      	movs	r0, #0
 80130e6:	f7ed fbcb 	bl	8000880 <__aeabi_ddiv>
 80130ea:	4682      	mov	sl, r0
 80130ec:	468b      	mov	fp, r1
 80130ee:	ec4b ab10 	vmov	d0, sl, fp
 80130f2:	b003      	add	sp, #12
 80130f4:	ecbd 8b06 	vpop	{d8-d10}
 80130f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fc:	2e01      	cmp	r6, #1
 80130fe:	d0f6      	beq.n	80130ee <__kernel_tan+0x56>
 8013100:	4642      	mov	r2, r8
 8013102:	464b      	mov	r3, r9
 8013104:	4650      	mov	r0, sl
 8013106:	4659      	mov	r1, fp
 8013108:	f7ed f8da 	bl	80002c0 <__adddf3>
 801310c:	4602      	mov	r2, r0
 801310e:	460b      	mov	r3, r1
 8013110:	460f      	mov	r7, r1
 8013112:	2000      	movs	r0, #0
 8013114:	49c6      	ldr	r1, [pc, #792]	; (8013430 <__kernel_tan+0x398>)
 8013116:	f7ed fbb3 	bl	8000880 <__aeabi_ddiv>
 801311a:	e9cd 0100 	strd	r0, r1, [sp]
 801311e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013122:	462e      	mov	r6, r5
 8013124:	4652      	mov	r2, sl
 8013126:	462c      	mov	r4, r5
 8013128:	4630      	mov	r0, r6
 801312a:	461d      	mov	r5, r3
 801312c:	4639      	mov	r1, r7
 801312e:	465b      	mov	r3, fp
 8013130:	f7ed f8c4 	bl	80002bc <__aeabi_dsub>
 8013134:	4602      	mov	r2, r0
 8013136:	460b      	mov	r3, r1
 8013138:	4640      	mov	r0, r8
 801313a:	4649      	mov	r1, r9
 801313c:	f7ed f8be 	bl	80002bc <__aeabi_dsub>
 8013140:	4632      	mov	r2, r6
 8013142:	462b      	mov	r3, r5
 8013144:	f7ed fa72 	bl	800062c <__aeabi_dmul>
 8013148:	4632      	mov	r2, r6
 801314a:	4680      	mov	r8, r0
 801314c:	4689      	mov	r9, r1
 801314e:	462b      	mov	r3, r5
 8013150:	4630      	mov	r0, r6
 8013152:	4639      	mov	r1, r7
 8013154:	f7ed fa6a 	bl	800062c <__aeabi_dmul>
 8013158:	4bb4      	ldr	r3, [pc, #720]	; (801342c <__kernel_tan+0x394>)
 801315a:	2200      	movs	r2, #0
 801315c:	f7ed f8b0 	bl	80002c0 <__adddf3>
 8013160:	4602      	mov	r2, r0
 8013162:	460b      	mov	r3, r1
 8013164:	4640      	mov	r0, r8
 8013166:	4649      	mov	r1, r9
 8013168:	f7ed f8aa 	bl	80002c0 <__adddf3>
 801316c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013170:	f7ed fa5c 	bl	800062c <__aeabi_dmul>
 8013174:	4622      	mov	r2, r4
 8013176:	462b      	mov	r3, r5
 8013178:	f7ed f8a2 	bl	80002c0 <__adddf3>
 801317c:	e7b5      	b.n	80130ea <__kernel_tan+0x52>
 801317e:	4bad      	ldr	r3, [pc, #692]	; (8013434 <__kernel_tan+0x39c>)
 8013180:	429f      	cmp	r7, r3
 8013182:	dd26      	ble.n	80131d2 <__kernel_tan+0x13a>
 8013184:	9b00      	ldr	r3, [sp, #0]
 8013186:	2b00      	cmp	r3, #0
 8013188:	da09      	bge.n	801319e <__kernel_tan+0x106>
 801318a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801318e:	469b      	mov	fp, r3
 8013190:	ee10 aa10 	vmov	sl, s0
 8013194:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013198:	ee11 8a10 	vmov	r8, s2
 801319c:	4699      	mov	r9, r3
 801319e:	4652      	mov	r2, sl
 80131a0:	465b      	mov	r3, fp
 80131a2:	a183      	add	r1, pc, #524	; (adr r1, 80133b0 <__kernel_tan+0x318>)
 80131a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131a8:	f7ed f888 	bl	80002bc <__aeabi_dsub>
 80131ac:	4642      	mov	r2, r8
 80131ae:	464b      	mov	r3, r9
 80131b0:	4604      	mov	r4, r0
 80131b2:	460d      	mov	r5, r1
 80131b4:	a180      	add	r1, pc, #512	; (adr r1, 80133b8 <__kernel_tan+0x320>)
 80131b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131ba:	f7ed f87f 	bl	80002bc <__aeabi_dsub>
 80131be:	4622      	mov	r2, r4
 80131c0:	462b      	mov	r3, r5
 80131c2:	f7ed f87d 	bl	80002c0 <__adddf3>
 80131c6:	f04f 0800 	mov.w	r8, #0
 80131ca:	4682      	mov	sl, r0
 80131cc:	468b      	mov	fp, r1
 80131ce:	f04f 0900 	mov.w	r9, #0
 80131d2:	4652      	mov	r2, sl
 80131d4:	465b      	mov	r3, fp
 80131d6:	4650      	mov	r0, sl
 80131d8:	4659      	mov	r1, fp
 80131da:	f7ed fa27 	bl	800062c <__aeabi_dmul>
 80131de:	4602      	mov	r2, r0
 80131e0:	460b      	mov	r3, r1
 80131e2:	ec43 2b18 	vmov	d8, r2, r3
 80131e6:	f7ed fa21 	bl	800062c <__aeabi_dmul>
 80131ea:	ec53 2b18 	vmov	r2, r3, d8
 80131ee:	4604      	mov	r4, r0
 80131f0:	460d      	mov	r5, r1
 80131f2:	4650      	mov	r0, sl
 80131f4:	4659      	mov	r1, fp
 80131f6:	f7ed fa19 	bl	800062c <__aeabi_dmul>
 80131fa:	a371      	add	r3, pc, #452	; (adr r3, 80133c0 <__kernel_tan+0x328>)
 80131fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013200:	ec41 0b19 	vmov	d9, r0, r1
 8013204:	4620      	mov	r0, r4
 8013206:	4629      	mov	r1, r5
 8013208:	f7ed fa10 	bl	800062c <__aeabi_dmul>
 801320c:	a36e      	add	r3, pc, #440	; (adr r3, 80133c8 <__kernel_tan+0x330>)
 801320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013212:	f7ed f855 	bl	80002c0 <__adddf3>
 8013216:	4622      	mov	r2, r4
 8013218:	462b      	mov	r3, r5
 801321a:	f7ed fa07 	bl	800062c <__aeabi_dmul>
 801321e:	a36c      	add	r3, pc, #432	; (adr r3, 80133d0 <__kernel_tan+0x338>)
 8013220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013224:	f7ed f84c 	bl	80002c0 <__adddf3>
 8013228:	4622      	mov	r2, r4
 801322a:	462b      	mov	r3, r5
 801322c:	f7ed f9fe 	bl	800062c <__aeabi_dmul>
 8013230:	a369      	add	r3, pc, #420	; (adr r3, 80133d8 <__kernel_tan+0x340>)
 8013232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013236:	f7ed f843 	bl	80002c0 <__adddf3>
 801323a:	4622      	mov	r2, r4
 801323c:	462b      	mov	r3, r5
 801323e:	f7ed f9f5 	bl	800062c <__aeabi_dmul>
 8013242:	a367      	add	r3, pc, #412	; (adr r3, 80133e0 <__kernel_tan+0x348>)
 8013244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013248:	f7ed f83a 	bl	80002c0 <__adddf3>
 801324c:	4622      	mov	r2, r4
 801324e:	462b      	mov	r3, r5
 8013250:	f7ed f9ec 	bl	800062c <__aeabi_dmul>
 8013254:	a364      	add	r3, pc, #400	; (adr r3, 80133e8 <__kernel_tan+0x350>)
 8013256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325a:	f7ed f831 	bl	80002c0 <__adddf3>
 801325e:	ec53 2b18 	vmov	r2, r3, d8
 8013262:	f7ed f9e3 	bl	800062c <__aeabi_dmul>
 8013266:	a362      	add	r3, pc, #392	; (adr r3, 80133f0 <__kernel_tan+0x358>)
 8013268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326c:	ec41 0b1a 	vmov	d10, r0, r1
 8013270:	4620      	mov	r0, r4
 8013272:	4629      	mov	r1, r5
 8013274:	f7ed f9da 	bl	800062c <__aeabi_dmul>
 8013278:	a35f      	add	r3, pc, #380	; (adr r3, 80133f8 <__kernel_tan+0x360>)
 801327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327e:	f7ed f81f 	bl	80002c0 <__adddf3>
 8013282:	4622      	mov	r2, r4
 8013284:	462b      	mov	r3, r5
 8013286:	f7ed f9d1 	bl	800062c <__aeabi_dmul>
 801328a:	a35d      	add	r3, pc, #372	; (adr r3, 8013400 <__kernel_tan+0x368>)
 801328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013290:	f7ed f816 	bl	80002c0 <__adddf3>
 8013294:	4622      	mov	r2, r4
 8013296:	462b      	mov	r3, r5
 8013298:	f7ed f9c8 	bl	800062c <__aeabi_dmul>
 801329c:	a35a      	add	r3, pc, #360	; (adr r3, 8013408 <__kernel_tan+0x370>)
 801329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a2:	f7ed f80d 	bl	80002c0 <__adddf3>
 80132a6:	4622      	mov	r2, r4
 80132a8:	462b      	mov	r3, r5
 80132aa:	f7ed f9bf 	bl	800062c <__aeabi_dmul>
 80132ae:	a358      	add	r3, pc, #352	; (adr r3, 8013410 <__kernel_tan+0x378>)
 80132b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b4:	f7ed f804 	bl	80002c0 <__adddf3>
 80132b8:	4622      	mov	r2, r4
 80132ba:	462b      	mov	r3, r5
 80132bc:	f7ed f9b6 	bl	800062c <__aeabi_dmul>
 80132c0:	a355      	add	r3, pc, #340	; (adr r3, 8013418 <__kernel_tan+0x380>)
 80132c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c6:	f7ec fffb 	bl	80002c0 <__adddf3>
 80132ca:	4602      	mov	r2, r0
 80132cc:	460b      	mov	r3, r1
 80132ce:	ec51 0b1a 	vmov	r0, r1, d10
 80132d2:	f7ec fff5 	bl	80002c0 <__adddf3>
 80132d6:	ec53 2b19 	vmov	r2, r3, d9
 80132da:	f7ed f9a7 	bl	800062c <__aeabi_dmul>
 80132de:	4642      	mov	r2, r8
 80132e0:	464b      	mov	r3, r9
 80132e2:	f7ec ffed 	bl	80002c0 <__adddf3>
 80132e6:	ec53 2b18 	vmov	r2, r3, d8
 80132ea:	f7ed f99f 	bl	800062c <__aeabi_dmul>
 80132ee:	4642      	mov	r2, r8
 80132f0:	464b      	mov	r3, r9
 80132f2:	f7ec ffe5 	bl	80002c0 <__adddf3>
 80132f6:	a34a      	add	r3, pc, #296	; (adr r3, 8013420 <__kernel_tan+0x388>)
 80132f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fc:	4604      	mov	r4, r0
 80132fe:	460d      	mov	r5, r1
 8013300:	ec51 0b19 	vmov	r0, r1, d9
 8013304:	f7ed f992 	bl	800062c <__aeabi_dmul>
 8013308:	4622      	mov	r2, r4
 801330a:	462b      	mov	r3, r5
 801330c:	f7ec ffd8 	bl	80002c0 <__adddf3>
 8013310:	460b      	mov	r3, r1
 8013312:	ec41 0b18 	vmov	d8, r0, r1
 8013316:	4602      	mov	r2, r0
 8013318:	4659      	mov	r1, fp
 801331a:	4650      	mov	r0, sl
 801331c:	f7ec ffd0 	bl	80002c0 <__adddf3>
 8013320:	4b44      	ldr	r3, [pc, #272]	; (8013434 <__kernel_tan+0x39c>)
 8013322:	429f      	cmp	r7, r3
 8013324:	4604      	mov	r4, r0
 8013326:	460d      	mov	r5, r1
 8013328:	f340 8086 	ble.w	8013438 <__kernel_tan+0x3a0>
 801332c:	4630      	mov	r0, r6
 801332e:	f7ed f913 	bl	8000558 <__aeabi_i2d>
 8013332:	4622      	mov	r2, r4
 8013334:	4680      	mov	r8, r0
 8013336:	4689      	mov	r9, r1
 8013338:	462b      	mov	r3, r5
 801333a:	4620      	mov	r0, r4
 801333c:	4629      	mov	r1, r5
 801333e:	f7ed f975 	bl	800062c <__aeabi_dmul>
 8013342:	4642      	mov	r2, r8
 8013344:	4606      	mov	r6, r0
 8013346:	460f      	mov	r7, r1
 8013348:	464b      	mov	r3, r9
 801334a:	4620      	mov	r0, r4
 801334c:	4629      	mov	r1, r5
 801334e:	f7ec ffb7 	bl	80002c0 <__adddf3>
 8013352:	4602      	mov	r2, r0
 8013354:	460b      	mov	r3, r1
 8013356:	4630      	mov	r0, r6
 8013358:	4639      	mov	r1, r7
 801335a:	f7ed fa91 	bl	8000880 <__aeabi_ddiv>
 801335e:	ec53 2b18 	vmov	r2, r3, d8
 8013362:	f7ec ffab 	bl	80002bc <__aeabi_dsub>
 8013366:	4602      	mov	r2, r0
 8013368:	460b      	mov	r3, r1
 801336a:	4650      	mov	r0, sl
 801336c:	4659      	mov	r1, fp
 801336e:	f7ec ffa5 	bl	80002bc <__aeabi_dsub>
 8013372:	4602      	mov	r2, r0
 8013374:	460b      	mov	r3, r1
 8013376:	f7ec ffa3 	bl	80002c0 <__adddf3>
 801337a:	4602      	mov	r2, r0
 801337c:	460b      	mov	r3, r1
 801337e:	4640      	mov	r0, r8
 8013380:	4649      	mov	r1, r9
 8013382:	f7ec ff9b 	bl	80002bc <__aeabi_dsub>
 8013386:	9b00      	ldr	r3, [sp, #0]
 8013388:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801338c:	f00a 0a02 	and.w	sl, sl, #2
 8013390:	4604      	mov	r4, r0
 8013392:	f1ca 0001 	rsb	r0, sl, #1
 8013396:	460d      	mov	r5, r1
 8013398:	f7ed f8de 	bl	8000558 <__aeabi_i2d>
 801339c:	4602      	mov	r2, r0
 801339e:	460b      	mov	r3, r1
 80133a0:	4620      	mov	r0, r4
 80133a2:	4629      	mov	r1, r5
 80133a4:	f7ed f942 	bl	800062c <__aeabi_dmul>
 80133a8:	e69f      	b.n	80130ea <__kernel_tan+0x52>
 80133aa:	bf00      	nop
 80133ac:	f3af 8000 	nop.w
 80133b0:	54442d18 	.word	0x54442d18
 80133b4:	3fe921fb 	.word	0x3fe921fb
 80133b8:	33145c07 	.word	0x33145c07
 80133bc:	3c81a626 	.word	0x3c81a626
 80133c0:	74bf7ad4 	.word	0x74bf7ad4
 80133c4:	3efb2a70 	.word	0x3efb2a70
 80133c8:	32f0a7e9 	.word	0x32f0a7e9
 80133cc:	3f12b80f 	.word	0x3f12b80f
 80133d0:	1a8d1068 	.word	0x1a8d1068
 80133d4:	3f3026f7 	.word	0x3f3026f7
 80133d8:	fee08315 	.word	0xfee08315
 80133dc:	3f57dbc8 	.word	0x3f57dbc8
 80133e0:	e96e8493 	.word	0xe96e8493
 80133e4:	3f8226e3 	.word	0x3f8226e3
 80133e8:	1bb341fe 	.word	0x1bb341fe
 80133ec:	3faba1ba 	.word	0x3faba1ba
 80133f0:	db605373 	.word	0xdb605373
 80133f4:	bef375cb 	.word	0xbef375cb
 80133f8:	a03792a6 	.word	0xa03792a6
 80133fc:	3f147e88 	.word	0x3f147e88
 8013400:	f2f26501 	.word	0xf2f26501
 8013404:	3f4344d8 	.word	0x3f4344d8
 8013408:	c9560328 	.word	0xc9560328
 801340c:	3f6d6d22 	.word	0x3f6d6d22
 8013410:	8406d637 	.word	0x8406d637
 8013414:	3f9664f4 	.word	0x3f9664f4
 8013418:	1110fe7a 	.word	0x1110fe7a
 801341c:	3fc11111 	.word	0x3fc11111
 8013420:	55555563 	.word	0x55555563
 8013424:	3fd55555 	.word	0x3fd55555
 8013428:	3e2fffff 	.word	0x3e2fffff
 801342c:	3ff00000 	.word	0x3ff00000
 8013430:	bff00000 	.word	0xbff00000
 8013434:	3fe59427 	.word	0x3fe59427
 8013438:	2e01      	cmp	r6, #1
 801343a:	d02f      	beq.n	801349c <__kernel_tan+0x404>
 801343c:	460f      	mov	r7, r1
 801343e:	4602      	mov	r2, r0
 8013440:	460b      	mov	r3, r1
 8013442:	4689      	mov	r9, r1
 8013444:	2000      	movs	r0, #0
 8013446:	4917      	ldr	r1, [pc, #92]	; (80134a4 <__kernel_tan+0x40c>)
 8013448:	f7ed fa1a 	bl	8000880 <__aeabi_ddiv>
 801344c:	2600      	movs	r6, #0
 801344e:	e9cd 0100 	strd	r0, r1, [sp]
 8013452:	4652      	mov	r2, sl
 8013454:	465b      	mov	r3, fp
 8013456:	4630      	mov	r0, r6
 8013458:	4639      	mov	r1, r7
 801345a:	f7ec ff2f 	bl	80002bc <__aeabi_dsub>
 801345e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013462:	4602      	mov	r2, r0
 8013464:	460b      	mov	r3, r1
 8013466:	ec51 0b18 	vmov	r0, r1, d8
 801346a:	f7ec ff27 	bl	80002bc <__aeabi_dsub>
 801346e:	4632      	mov	r2, r6
 8013470:	462b      	mov	r3, r5
 8013472:	f7ed f8db 	bl	800062c <__aeabi_dmul>
 8013476:	46b0      	mov	r8, r6
 8013478:	460f      	mov	r7, r1
 801347a:	4642      	mov	r2, r8
 801347c:	462b      	mov	r3, r5
 801347e:	4634      	mov	r4, r6
 8013480:	4649      	mov	r1, r9
 8013482:	4606      	mov	r6, r0
 8013484:	4640      	mov	r0, r8
 8013486:	f7ed f8d1 	bl	800062c <__aeabi_dmul>
 801348a:	4b07      	ldr	r3, [pc, #28]	; (80134a8 <__kernel_tan+0x410>)
 801348c:	2200      	movs	r2, #0
 801348e:	f7ec ff17 	bl	80002c0 <__adddf3>
 8013492:	4602      	mov	r2, r0
 8013494:	460b      	mov	r3, r1
 8013496:	4630      	mov	r0, r6
 8013498:	4639      	mov	r1, r7
 801349a:	e665      	b.n	8013168 <__kernel_tan+0xd0>
 801349c:	4682      	mov	sl, r0
 801349e:	468b      	mov	fp, r1
 80134a0:	e625      	b.n	80130ee <__kernel_tan+0x56>
 80134a2:	bf00      	nop
 80134a4:	bff00000 	.word	0xbff00000
 80134a8:	3ff00000 	.word	0x3ff00000

080134ac <with_errno>:
 80134ac:	b570      	push	{r4, r5, r6, lr}
 80134ae:	4604      	mov	r4, r0
 80134b0:	460d      	mov	r5, r1
 80134b2:	4616      	mov	r6, r2
 80134b4:	f7fd fcc6 	bl	8010e44 <__errno>
 80134b8:	4629      	mov	r1, r5
 80134ba:	6006      	str	r6, [r0, #0]
 80134bc:	4620      	mov	r0, r4
 80134be:	bd70      	pop	{r4, r5, r6, pc}

080134c0 <xflow>:
 80134c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80134c2:	4614      	mov	r4, r2
 80134c4:	461d      	mov	r5, r3
 80134c6:	b108      	cbz	r0, 80134cc <xflow+0xc>
 80134c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80134cc:	e9cd 2300 	strd	r2, r3, [sp]
 80134d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134d4:	4620      	mov	r0, r4
 80134d6:	4629      	mov	r1, r5
 80134d8:	f7ed f8a8 	bl	800062c <__aeabi_dmul>
 80134dc:	2222      	movs	r2, #34	; 0x22
 80134de:	b003      	add	sp, #12
 80134e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134e4:	f7ff bfe2 	b.w	80134ac <with_errno>

080134e8 <__math_uflow>:
 80134e8:	b508      	push	{r3, lr}
 80134ea:	2200      	movs	r2, #0
 80134ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80134f0:	f7ff ffe6 	bl	80134c0 <xflow>
 80134f4:	ec41 0b10 	vmov	d0, r0, r1
 80134f8:	bd08      	pop	{r3, pc}

080134fa <__math_oflow>:
 80134fa:	b508      	push	{r3, lr}
 80134fc:	2200      	movs	r2, #0
 80134fe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013502:	f7ff ffdd 	bl	80134c0 <xflow>
 8013506:	ec41 0b10 	vmov	d0, r0, r1
 801350a:	bd08      	pop	{r3, pc}

0801350c <fabs>:
 801350c:	ec51 0b10 	vmov	r0, r1, d0
 8013510:	ee10 2a10 	vmov	r2, s0
 8013514:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013518:	ec43 2b10 	vmov	d0, r2, r3
 801351c:	4770      	bx	lr

0801351e <finite>:
 801351e:	b082      	sub	sp, #8
 8013520:	ed8d 0b00 	vstr	d0, [sp]
 8013524:	9801      	ldr	r0, [sp, #4]
 8013526:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801352a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801352e:	0fc0      	lsrs	r0, r0, #31
 8013530:	b002      	add	sp, #8
 8013532:	4770      	bx	lr
 8013534:	0000      	movs	r0, r0
	...

08013538 <floor>:
 8013538:	ec51 0b10 	vmov	r0, r1, d0
 801353c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013540:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013544:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013548:	2e13      	cmp	r6, #19
 801354a:	ee10 5a10 	vmov	r5, s0
 801354e:	ee10 8a10 	vmov	r8, s0
 8013552:	460c      	mov	r4, r1
 8013554:	dc32      	bgt.n	80135bc <floor+0x84>
 8013556:	2e00      	cmp	r6, #0
 8013558:	da14      	bge.n	8013584 <floor+0x4c>
 801355a:	a333      	add	r3, pc, #204	; (adr r3, 8013628 <floor+0xf0>)
 801355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013560:	f7ec feae 	bl	80002c0 <__adddf3>
 8013564:	2200      	movs	r2, #0
 8013566:	2300      	movs	r3, #0
 8013568:	f7ed faf0 	bl	8000b4c <__aeabi_dcmpgt>
 801356c:	b138      	cbz	r0, 801357e <floor+0x46>
 801356e:	2c00      	cmp	r4, #0
 8013570:	da57      	bge.n	8013622 <floor+0xea>
 8013572:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013576:	431d      	orrs	r5, r3
 8013578:	d001      	beq.n	801357e <floor+0x46>
 801357a:	4c2d      	ldr	r4, [pc, #180]	; (8013630 <floor+0xf8>)
 801357c:	2500      	movs	r5, #0
 801357e:	4621      	mov	r1, r4
 8013580:	4628      	mov	r0, r5
 8013582:	e025      	b.n	80135d0 <floor+0x98>
 8013584:	4f2b      	ldr	r7, [pc, #172]	; (8013634 <floor+0xfc>)
 8013586:	4137      	asrs	r7, r6
 8013588:	ea01 0307 	and.w	r3, r1, r7
 801358c:	4303      	orrs	r3, r0
 801358e:	d01f      	beq.n	80135d0 <floor+0x98>
 8013590:	a325      	add	r3, pc, #148	; (adr r3, 8013628 <floor+0xf0>)
 8013592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013596:	f7ec fe93 	bl	80002c0 <__adddf3>
 801359a:	2200      	movs	r2, #0
 801359c:	2300      	movs	r3, #0
 801359e:	f7ed fad5 	bl	8000b4c <__aeabi_dcmpgt>
 80135a2:	2800      	cmp	r0, #0
 80135a4:	d0eb      	beq.n	801357e <floor+0x46>
 80135a6:	2c00      	cmp	r4, #0
 80135a8:	bfbe      	ittt	lt
 80135aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80135ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80135b2:	19a4      	addlt	r4, r4, r6
 80135b4:	ea24 0407 	bic.w	r4, r4, r7
 80135b8:	2500      	movs	r5, #0
 80135ba:	e7e0      	b.n	801357e <floor+0x46>
 80135bc:	2e33      	cmp	r6, #51	; 0x33
 80135be:	dd0b      	ble.n	80135d8 <floor+0xa0>
 80135c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80135c4:	d104      	bne.n	80135d0 <floor+0x98>
 80135c6:	ee10 2a10 	vmov	r2, s0
 80135ca:	460b      	mov	r3, r1
 80135cc:	f7ec fe78 	bl	80002c0 <__adddf3>
 80135d0:	ec41 0b10 	vmov	d0, r0, r1
 80135d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80135dc:	f04f 33ff 	mov.w	r3, #4294967295
 80135e0:	fa23 f707 	lsr.w	r7, r3, r7
 80135e4:	4207      	tst	r7, r0
 80135e6:	d0f3      	beq.n	80135d0 <floor+0x98>
 80135e8:	a30f      	add	r3, pc, #60	; (adr r3, 8013628 <floor+0xf0>)
 80135ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ee:	f7ec fe67 	bl	80002c0 <__adddf3>
 80135f2:	2200      	movs	r2, #0
 80135f4:	2300      	movs	r3, #0
 80135f6:	f7ed faa9 	bl	8000b4c <__aeabi_dcmpgt>
 80135fa:	2800      	cmp	r0, #0
 80135fc:	d0bf      	beq.n	801357e <floor+0x46>
 80135fe:	2c00      	cmp	r4, #0
 8013600:	da02      	bge.n	8013608 <floor+0xd0>
 8013602:	2e14      	cmp	r6, #20
 8013604:	d103      	bne.n	801360e <floor+0xd6>
 8013606:	3401      	adds	r4, #1
 8013608:	ea25 0507 	bic.w	r5, r5, r7
 801360c:	e7b7      	b.n	801357e <floor+0x46>
 801360e:	2301      	movs	r3, #1
 8013610:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013614:	fa03 f606 	lsl.w	r6, r3, r6
 8013618:	4435      	add	r5, r6
 801361a:	4545      	cmp	r5, r8
 801361c:	bf38      	it	cc
 801361e:	18e4      	addcc	r4, r4, r3
 8013620:	e7f2      	b.n	8013608 <floor+0xd0>
 8013622:	2500      	movs	r5, #0
 8013624:	462c      	mov	r4, r5
 8013626:	e7aa      	b.n	801357e <floor+0x46>
 8013628:	8800759c 	.word	0x8800759c
 801362c:	7e37e43c 	.word	0x7e37e43c
 8013630:	bff00000 	.word	0xbff00000
 8013634:	000fffff 	.word	0x000fffff

08013638 <nan>:
 8013638:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013640 <nan+0x8>
 801363c:	4770      	bx	lr
 801363e:	bf00      	nop
 8013640:	00000000 	.word	0x00000000
 8013644:	7ff80000 	.word	0x7ff80000

08013648 <scalbn>:
 8013648:	b570      	push	{r4, r5, r6, lr}
 801364a:	ec55 4b10 	vmov	r4, r5, d0
 801364e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013652:	4606      	mov	r6, r0
 8013654:	462b      	mov	r3, r5
 8013656:	b99a      	cbnz	r2, 8013680 <scalbn+0x38>
 8013658:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801365c:	4323      	orrs	r3, r4
 801365e:	d036      	beq.n	80136ce <scalbn+0x86>
 8013660:	4b39      	ldr	r3, [pc, #228]	; (8013748 <scalbn+0x100>)
 8013662:	4629      	mov	r1, r5
 8013664:	ee10 0a10 	vmov	r0, s0
 8013668:	2200      	movs	r2, #0
 801366a:	f7ec ffdf 	bl	800062c <__aeabi_dmul>
 801366e:	4b37      	ldr	r3, [pc, #220]	; (801374c <scalbn+0x104>)
 8013670:	429e      	cmp	r6, r3
 8013672:	4604      	mov	r4, r0
 8013674:	460d      	mov	r5, r1
 8013676:	da10      	bge.n	801369a <scalbn+0x52>
 8013678:	a32b      	add	r3, pc, #172	; (adr r3, 8013728 <scalbn+0xe0>)
 801367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801367e:	e03a      	b.n	80136f6 <scalbn+0xae>
 8013680:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013684:	428a      	cmp	r2, r1
 8013686:	d10c      	bne.n	80136a2 <scalbn+0x5a>
 8013688:	ee10 2a10 	vmov	r2, s0
 801368c:	4620      	mov	r0, r4
 801368e:	4629      	mov	r1, r5
 8013690:	f7ec fe16 	bl	80002c0 <__adddf3>
 8013694:	4604      	mov	r4, r0
 8013696:	460d      	mov	r5, r1
 8013698:	e019      	b.n	80136ce <scalbn+0x86>
 801369a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801369e:	460b      	mov	r3, r1
 80136a0:	3a36      	subs	r2, #54	; 0x36
 80136a2:	4432      	add	r2, r6
 80136a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80136a8:	428a      	cmp	r2, r1
 80136aa:	dd08      	ble.n	80136be <scalbn+0x76>
 80136ac:	2d00      	cmp	r5, #0
 80136ae:	a120      	add	r1, pc, #128	; (adr r1, 8013730 <scalbn+0xe8>)
 80136b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136b4:	da1c      	bge.n	80136f0 <scalbn+0xa8>
 80136b6:	a120      	add	r1, pc, #128	; (adr r1, 8013738 <scalbn+0xf0>)
 80136b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136bc:	e018      	b.n	80136f0 <scalbn+0xa8>
 80136be:	2a00      	cmp	r2, #0
 80136c0:	dd08      	ble.n	80136d4 <scalbn+0x8c>
 80136c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80136c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80136ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80136ce:	ec45 4b10 	vmov	d0, r4, r5
 80136d2:	bd70      	pop	{r4, r5, r6, pc}
 80136d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80136d8:	da19      	bge.n	801370e <scalbn+0xc6>
 80136da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80136de:	429e      	cmp	r6, r3
 80136e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80136e4:	dd0a      	ble.n	80136fc <scalbn+0xb4>
 80136e6:	a112      	add	r1, pc, #72	; (adr r1, 8013730 <scalbn+0xe8>)
 80136e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d1e2      	bne.n	80136b6 <scalbn+0x6e>
 80136f0:	a30f      	add	r3, pc, #60	; (adr r3, 8013730 <scalbn+0xe8>)
 80136f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f6:	f7ec ff99 	bl	800062c <__aeabi_dmul>
 80136fa:	e7cb      	b.n	8013694 <scalbn+0x4c>
 80136fc:	a10a      	add	r1, pc, #40	; (adr r1, 8013728 <scalbn+0xe0>)
 80136fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d0b8      	beq.n	8013678 <scalbn+0x30>
 8013706:	a10e      	add	r1, pc, #56	; (adr r1, 8013740 <scalbn+0xf8>)
 8013708:	e9d1 0100 	ldrd	r0, r1, [r1]
 801370c:	e7b4      	b.n	8013678 <scalbn+0x30>
 801370e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013712:	3236      	adds	r2, #54	; 0x36
 8013714:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013718:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801371c:	4620      	mov	r0, r4
 801371e:	4b0c      	ldr	r3, [pc, #48]	; (8013750 <scalbn+0x108>)
 8013720:	2200      	movs	r2, #0
 8013722:	e7e8      	b.n	80136f6 <scalbn+0xae>
 8013724:	f3af 8000 	nop.w
 8013728:	c2f8f359 	.word	0xc2f8f359
 801372c:	01a56e1f 	.word	0x01a56e1f
 8013730:	8800759c 	.word	0x8800759c
 8013734:	7e37e43c 	.word	0x7e37e43c
 8013738:	8800759c 	.word	0x8800759c
 801373c:	fe37e43c 	.word	0xfe37e43c
 8013740:	c2f8f359 	.word	0xc2f8f359
 8013744:	81a56e1f 	.word	0x81a56e1f
 8013748:	43500000 	.word	0x43500000
 801374c:	ffff3cb0 	.word	0xffff3cb0
 8013750:	3c900000 	.word	0x3c900000

08013754 <_close>:
 8013754:	4b02      	ldr	r3, [pc, #8]	; (8013760 <_close+0xc>)
 8013756:	2258      	movs	r2, #88	; 0x58
 8013758:	601a      	str	r2, [r3, #0]
 801375a:	f04f 30ff 	mov.w	r0, #4294967295
 801375e:	4770      	bx	lr
 8013760:	20003a58 	.word	0x20003a58

08013764 <_fstat>:
 8013764:	4b02      	ldr	r3, [pc, #8]	; (8013770 <_fstat+0xc>)
 8013766:	2258      	movs	r2, #88	; 0x58
 8013768:	601a      	str	r2, [r3, #0]
 801376a:	f04f 30ff 	mov.w	r0, #4294967295
 801376e:	4770      	bx	lr
 8013770:	20003a58 	.word	0x20003a58

08013774 <_getpid>:
 8013774:	4b02      	ldr	r3, [pc, #8]	; (8013780 <_getpid+0xc>)
 8013776:	2258      	movs	r2, #88	; 0x58
 8013778:	601a      	str	r2, [r3, #0]
 801377a:	f04f 30ff 	mov.w	r0, #4294967295
 801377e:	4770      	bx	lr
 8013780:	20003a58 	.word	0x20003a58

08013784 <_isatty>:
 8013784:	4b02      	ldr	r3, [pc, #8]	; (8013790 <_isatty+0xc>)
 8013786:	2258      	movs	r2, #88	; 0x58
 8013788:	601a      	str	r2, [r3, #0]
 801378a:	2000      	movs	r0, #0
 801378c:	4770      	bx	lr
 801378e:	bf00      	nop
 8013790:	20003a58 	.word	0x20003a58

08013794 <_kill>:
 8013794:	4b02      	ldr	r3, [pc, #8]	; (80137a0 <_kill+0xc>)
 8013796:	2258      	movs	r2, #88	; 0x58
 8013798:	601a      	str	r2, [r3, #0]
 801379a:	f04f 30ff 	mov.w	r0, #4294967295
 801379e:	4770      	bx	lr
 80137a0:	20003a58 	.word	0x20003a58

080137a4 <_lseek>:
 80137a4:	4b02      	ldr	r3, [pc, #8]	; (80137b0 <_lseek+0xc>)
 80137a6:	2258      	movs	r2, #88	; 0x58
 80137a8:	601a      	str	r2, [r3, #0]
 80137aa:	f04f 30ff 	mov.w	r0, #4294967295
 80137ae:	4770      	bx	lr
 80137b0:	20003a58 	.word	0x20003a58

080137b4 <_read>:
 80137b4:	4b02      	ldr	r3, [pc, #8]	; (80137c0 <_read+0xc>)
 80137b6:	2258      	movs	r2, #88	; 0x58
 80137b8:	601a      	str	r2, [r3, #0]
 80137ba:	f04f 30ff 	mov.w	r0, #4294967295
 80137be:	4770      	bx	lr
 80137c0:	20003a58 	.word	0x20003a58

080137c4 <_sbrk>:
 80137c4:	4a04      	ldr	r2, [pc, #16]	; (80137d8 <_sbrk+0x14>)
 80137c6:	6811      	ldr	r1, [r2, #0]
 80137c8:	4603      	mov	r3, r0
 80137ca:	b909      	cbnz	r1, 80137d0 <_sbrk+0xc>
 80137cc:	4903      	ldr	r1, [pc, #12]	; (80137dc <_sbrk+0x18>)
 80137ce:	6011      	str	r1, [r2, #0]
 80137d0:	6810      	ldr	r0, [r2, #0]
 80137d2:	4403      	add	r3, r0
 80137d4:	6013      	str	r3, [r2, #0]
 80137d6:	4770      	bx	lr
 80137d8:	20003a60 	.word	0x20003a60
 80137dc:	20003a68 	.word	0x20003a68

080137e0 <_write>:
 80137e0:	4b02      	ldr	r3, [pc, #8]	; (80137ec <_write+0xc>)
 80137e2:	2258      	movs	r2, #88	; 0x58
 80137e4:	601a      	str	r2, [r3, #0]
 80137e6:	f04f 30ff 	mov.w	r0, #4294967295
 80137ea:	4770      	bx	lr
 80137ec:	20003a58 	.word	0x20003a58

080137f0 <_exit>:
 80137f0:	e7fe      	b.n	80137f0 <_exit>
	...

080137f4 <_init>:
 80137f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137f6:	bf00      	nop
 80137f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137fa:	bc08      	pop	{r3}
 80137fc:	469e      	mov	lr, r3
 80137fe:	4770      	bx	lr

08013800 <_fini>:
 8013800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013802:	bf00      	nop
 8013804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013806:	bc08      	pop	{r3}
 8013808:	469e      	mov	lr, r3
 801380a:	4770      	bx	lr
