
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001275c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002a858  08012910  08012910  00022910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803d168  0803d168  000504f0  2**0
                  CONTENTS
  4 .ARM          00000008  0803d168  0803d168  0004d168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803d170  0803d170  000504f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803d170  0803d170  0004d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803d174  0803d174  0004d174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f0  20000000  0803d178  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000504f0  2**0
                  CONTENTS
 10 .bss          000032fc  200004f0  200004f0  000504f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200037ec  200037ec  000504f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000504f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fe7f  00000000  00000000  00050520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055fe  00000000  00000000  0007039f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  000759a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001690  00000000  00000000  00077258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a2bd  00000000  00000000  000788e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024d6a  00000000  00000000  000a2ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6b92  00000000  00000000  000c790f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ae4a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000082b4  00000000  00000000  001ae4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  001b67a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001b6874  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200004f0 	.word	0x200004f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080128f4 	.word	0x080128f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200004f4 	.word	0x200004f4
 80001ec:	080128f4 	.word	0x080128f4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c90:	f000 b974 	b.w	8000f7c <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9d08      	ldr	r5, [sp, #32]
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	468e      	mov	lr, r1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d14d      	bne.n	8000d56 <__udivmoddi4+0xaa>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	d969      	bls.n	8000d94 <__udivmoddi4+0xe8>
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	b152      	cbz	r2, 8000cdc <__udivmoddi4+0x30>
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	f1c2 0120 	rsb	r1, r2, #32
 8000cce:	fa20 f101 	lsr.w	r1, r0, r1
 8000cd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cda:	4094      	lsls	r4, r2
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	0c21      	lsrs	r1, r4, #16
 8000ce2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce6:	fa1f f78c 	uxth.w	r7, ip
 8000cea:	fb08 e316 	mls	r3, r8, r6, lr
 8000cee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cf2:	fb06 f107 	mul.w	r1, r6, r7
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x64>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d02:	f080 811f 	bcs.w	8000f44 <__udivmoddi4+0x298>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 811c 	bls.w	8000f44 <__udivmoddi4+0x298>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d18:	fb08 3310 	mls	r3, r8, r0, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb00 f707 	mul.w	r7, r0, r7
 8000d24:	42a7      	cmp	r7, r4
 8000d26:	d90a      	bls.n	8000d3e <__udivmoddi4+0x92>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d30:	f080 810a 	bcs.w	8000f48 <__udivmoddi4+0x29c>
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	f240 8107 	bls.w	8000f48 <__udivmoddi4+0x29c>
 8000d3a:	4464      	add	r4, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	1be4      	subs	r4, r4, r7
 8000d44:	2600      	movs	r6, #0
 8000d46:	b11d      	cbz	r5, 8000d50 <__udivmoddi4+0xa4>
 8000d48:	40d4      	lsrs	r4, r2
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0xc2>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80ef 	beq.w	8000f3e <__udivmoddi4+0x292>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x160>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xd4>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80f9 	bhi.w	8000f72 <__udivmoddi4+0x2c6>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0303 	sbc.w	r3, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	469e      	mov	lr, r3
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e0      	beq.n	8000d50 <__udivmoddi4+0xa4>
 8000d8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d92:	e7dd      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000d94:	b902      	cbnz	r2, 8000d98 <__udivmoddi4+0xec>
 8000d96:	deff      	udf	#255	; 0xff
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	f040 8092 	bne.w	8000ec6 <__udivmoddi4+0x21a>
 8000da2:	eba1 010c 	sub.w	r1, r1, ip
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f fe8c 	uxth.w	lr, ip
 8000dae:	2601      	movs	r6, #1
 8000db0:	0c20      	lsrs	r0, r4, #16
 8000db2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbe:	fb0e f003 	mul.w	r0, lr, r3
 8000dc2:	4288      	cmp	r0, r1
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x12c>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x12a>
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	f200 80cb 	bhi.w	8000f6c <__udivmoddi4+0x2c0>
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	1a09      	subs	r1, r1, r0
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de0:	fb07 1110 	mls	r1, r7, r0, r1
 8000de4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x156>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x154>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	f200 80bb 	bhi.w	8000f76 <__udivmoddi4+0x2ca>
 8000e00:	4608      	mov	r0, r1
 8000e02:	eba4 040e 	sub.w	r4, r4, lr
 8000e06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e0a:	e79c      	b.n	8000d46 <__udivmoddi4+0x9a>
 8000e0c:	f1c6 0720 	rsb	r7, r6, #32
 8000e10:	40b3      	lsls	r3, r6
 8000e12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	40f9      	lsrs	r1, r7
 8000e26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e32:	0c20      	lsrs	r0, r4, #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fb09 1118 	mls	r1, r9, r8, r1
 8000e3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e40:	fb08 f00e 	mul.w	r0, r8, lr
 8000e44:	4288      	cmp	r0, r1
 8000e46:	fa02 f206 	lsl.w	r2, r2, r6
 8000e4a:	d90b      	bls.n	8000e64 <__udivmoddi4+0x1b8>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e54:	f080 8088 	bcs.w	8000f68 <__udivmoddi4+0x2bc>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f240 8085 	bls.w	8000f68 <__udivmoddi4+0x2bc>
 8000e5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	458e      	cmp	lr, r1
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x1e2>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e84:	d26c      	bcs.n	8000f60 <__udivmoddi4+0x2b4>
 8000e86:	458e      	cmp	lr, r1
 8000e88:	d96a      	bls.n	8000f60 <__udivmoddi4+0x2b4>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4461      	add	r1, ip
 8000e8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e92:	fba0 9402 	umull	r9, r4, r0, r2
 8000e96:	eba1 010e 	sub.w	r1, r1, lr
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	46c8      	mov	r8, r9
 8000e9e:	46a6      	mov	lr, r4
 8000ea0:	d356      	bcc.n	8000f50 <__udivmoddi4+0x2a4>
 8000ea2:	d053      	beq.n	8000f4c <__udivmoddi4+0x2a0>
 8000ea4:	b15d      	cbz	r5, 8000ebe <__udivmoddi4+0x212>
 8000ea6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000eae:	fa01 f707 	lsl.w	r7, r1, r7
 8000eb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb6:	40f1      	lsrs	r1, r6
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	e9c5 7100 	strd	r7, r1, [r5]
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	f1c2 0320 	rsb	r3, r2, #32
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	4301      	orrs	r1, r0
 8000ed8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee8:	0c0b      	lsrs	r3, r1, #16
 8000eea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eee:	fb00 f60e 	mul.w	r6, r0, lr
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x260>
 8000efa:	eb1c 0303 	adds.w	r3, ip, r3
 8000efe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f02:	d22f      	bcs.n	8000f64 <__udivmoddi4+0x2b8>
 8000f04:	429e      	cmp	r6, r3
 8000f06:	d92d      	bls.n	8000f64 <__udivmoddi4+0x2b8>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	1b9b      	subs	r3, r3, r6
 8000f0e:	b289      	uxth	r1, r1
 8000f10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f14:	fb07 3316 	mls	r3, r7, r6, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x28a>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f2c:	d216      	bcs.n	8000f5c <__udivmoddi4+0x2b0>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d914      	bls.n	8000f5c <__udivmoddi4+0x2b0>
 8000f32:	3e02      	subs	r6, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f3c:	e738      	b.n	8000db0 <__udivmoddi4+0x104>
 8000f3e:	462e      	mov	r6, r5
 8000f40:	4628      	mov	r0, r5
 8000f42:	e705      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000f44:	4606      	mov	r6, r0
 8000f46:	e6e3      	b.n	8000d10 <__udivmoddi4+0x64>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6f8      	b.n	8000d3e <__udivmoddi4+0x92>
 8000f4c:	454b      	cmp	r3, r9
 8000f4e:	d2a9      	bcs.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f50:	ebb9 0802 	subs.w	r8, r9, r2
 8000f54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f58:	3801      	subs	r0, #1
 8000f5a:	e7a3      	b.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f5c:	4646      	mov	r6, r8
 8000f5e:	e7ea      	b.n	8000f36 <__udivmoddi4+0x28a>
 8000f60:	4620      	mov	r0, r4
 8000f62:	e794      	b.n	8000e8e <__udivmoddi4+0x1e2>
 8000f64:	4640      	mov	r0, r8
 8000f66:	e7d1      	b.n	8000f0c <__udivmoddi4+0x260>
 8000f68:	46d0      	mov	r8, sl
 8000f6a:	e77b      	b.n	8000e64 <__udivmoddi4+0x1b8>
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	e732      	b.n	8000dd8 <__udivmoddi4+0x12c>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e709      	b.n	8000d8a <__udivmoddi4+0xde>
 8000f76:	4464      	add	r4, ip
 8000f78:	3802      	subs	r0, #2
 8000f7a:	e742      	b.n	8000e02 <__udivmoddi4+0x156>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8000f8e:	2332      	movs	r3, #50	; 0x32
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	22d0      	movs	r2, #208	; 0xd0
 8000f9e:	21ef      	movs	r1, #239	; 0xef
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <read_chip_id+0x3c>)
 8000fa2:	f005 fea9 	bl	8006cf8 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	2b55      	cmp	r3, #85	; 0x55
 8000faa:	d001      	beq.n	8000fb0 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000063c 	.word	0x2000063c

08000fc0 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8000fcc:	2300      	movs	r3, #0
 8000fce:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d81a      	bhi.n	800100c <set_oss+0x4c>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <set_oss+0x1c>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	08000ff5 	.word	0x08000ff5
 8000fe4:	08000ffd 	.word	0x08000ffd
 8000fe8:	08001005 	.word	0x08001005
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	705a      	strb	r2, [r3, #1]
			break;
 8000ff2:	e00f      	b.n	8001014 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	705a      	strb	r2, [r3, #1]
			break;
 8000ffa:	e00b      	b.n	8001014 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	220e      	movs	r2, #14
 8001000:	705a      	strb	r2, [r3, #1]
			break;
 8001002:	e007      	b.n	8001014 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	221a      	movs	r2, #26
 8001008:	705a      	strb	r2, [r3, #1]
			break;
 800100a:	e003      	b.n	8001014 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2208      	movs	r2, #8
 8001010:	705a      	strb	r2, [r3, #1]
			break;
 8001012:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	78fa      	ldrb	r2, [r7, #3]
 8001018:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	70fb      	strb	r3, [r7, #3]
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001024:	2332      	movs	r3, #50	; 0x32
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2302      	movs	r3, #2
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	22f4      	movs	r2, #244	; 0xf4
 8001036:	21ee      	movs	r1, #238	; 0xee
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <set_oss+0x88>)
 800103a:	f005 fd63 	bl	8006b04 <HAL_I2C_Mem_Write>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000063c 	.word	0x2000063c

0800104c <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af04      	add	r7, sp, #16
 8001052:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800107a:	2332      	movs	r3, #50	; 0x32
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2316      	movs	r3, #22
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	22aa      	movs	r2, #170	; 0xaa
 800108c:	21ef      	movs	r1, #239	; 0xef
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <read_calib_data+0xe0>)
 8001090:	f005 fe32 	bl	8006cf8 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800109a:	e03c      	b.n	8001116 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800109c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	3328      	adds	r3, #40	; 0x28
 80010a4:	443b      	add	r3, r7
 80010a6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b219      	sxth	r1, r3
 80010ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010b2:	3328      	adds	r3, #40	; 0x28
 80010b4:	443b      	add	r3, r7
 80010b6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	4403      	add	r3, r0
 80010c6:	430a      	orrs	r2, r1
 80010c8:	b212      	sxth	r2, r2
 80010ca:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80010cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf0c      	ite	eq
 80010de:	2301      	moveq	r3, #1
 80010e0:	2300      	movne	r3, #0
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	440b      	add	r3, r1
 80010ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 8001106:	2302      	movs	r3, #2
 8001108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800110c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001110:	3301      	adds	r3, #1
 8001112:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001116:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800111a:	2b0b      	cmp	r3, #11
 800111c:	d9be      	bls.n	800109c <read_calib_data+0x50>
		}
	}

	return ret_val;
 800111e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001122:	4618      	mov	r0, r3
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000063c 	.word	0x2000063c

08001130 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2204      	movs	r2, #4
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00a f91e 	bl	800b380 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001144:	687c      	ldr	r4, [r7, #4]
 8001146:	f7ff ff1b 	bl	8000f80 <read_chip_id>
 800114a:	4603      	mov	r3, r0
 800114c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	687c      	ldr	r4, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff79 	bl	800104c <read_calib_data>
 800115a:	4603      	mov	r3, r0
 800115c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3340      	adds	r3, #64	; 0x40
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff2a 	bl	8000fc0 <set_oss>
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800117a:	232e      	movs	r3, #46	; 0x2e
 800117c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800117e:	2332      	movs	r3, #50	; 0x32
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	22f4      	movs	r2, #244	; 0xf4
 800118e:	21ee      	movs	r1, #238	; 0xee
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <get_ut+0x50>)
 8001192:	f005 fcb7 	bl	8006b04 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001196:	2005      	movs	r0, #5
 8001198:	f004 ff8c 	bl	80060b4 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800119c:	2332      	movs	r3, #50	; 0x32
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2302      	movs	r3, #2
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	22f6      	movs	r2, #246	; 0xf6
 80011ac:	21ef      	movs	r1, #239	; 0xef
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <get_ut+0x50>)
 80011b0:	f005 fda2 	bl	8006cf8 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80011b4:	793b      	ldrb	r3, [r7, #4]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	797a      	ldrb	r2, [r7, #5]
 80011ba:	4313      	orrs	r3, r2
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000063c 	.word	0x2000063c

080011c8 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 2a90 	vmov	r2, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	895b      	ldrh	r3, [r3, #10]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	8912      	ldrh	r2, [r2, #8]
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	13db      	asrs	r3, r3, #15
 80011fc:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001204:	02da      	lsls	r2, r3, #11
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800120c:	4619      	mov	r1, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	440b      	add	r3, r1
 8001212:	fb92 f3f3 	sdiv	r3, r2, r3
 8001216:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	441a      	add	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001226:	3308      	adds	r3, #8
 8001228:	111b      	asrs	r3, r3, #4
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001280 <get_temp+0xb8>
 8001236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123a:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800123e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001242:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001284 <get_temp+0xbc>
 8001246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	d908      	bls.n	8001262 <get_temp+0x9a>
 8001250:	edd7 7a03 	vldr	s15, [r7, #12]
 8001254:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001288 <get_temp+0xc0>
 8001258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	db03      	blt.n	800126a <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2203      	movs	r2, #3
 8001266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	ee07 3a90 	vmov	s15, r3
}
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	3dcccccd 	.word	0x3dcccccd
 8001284:	c2200000 	.word	0xc2200000
 8001288:	42aa0000 	.word	0x42aa0000

0800128c <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <get_up+0x7c>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	813b      	strh	r3, [r7, #8]
 800129a:	2300      	movs	r3, #0
 800129c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 80012a2:	2334      	movs	r3, #52	; 0x34
 80012a4:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80012a6:	2332      	movs	r3, #50	; 0x32
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	22f4      	movs	r2, #244	; 0xf4
 80012b8:	21ee      	movs	r1, #238	; 0xee
 80012ba:	4814      	ldr	r0, [pc, #80]	; (800130c <get_up+0x80>)
 80012bc:	f005 fc22 	bl	8006b04 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fef6 	bl	80060b4 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80012c8:	2332      	movs	r3, #50	; 0x32
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2303      	movs	r3, #3
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	22f6      	movs	r2, #246	; 0xf6
 80012da:	21ef      	movs	r1, #239	; 0xef
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <get_up+0x80>)
 80012de:	f005 fd0b 	bl	8006cf8 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80012e2:	7a3b      	ldrb	r3, [r7, #8]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	7a7b      	ldrb	r3, [r7, #9]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	4413      	add	r3, r2
 80012ec:	7aba      	ldrb	r2, [r7, #10]
 80012ee:	441a      	add	r2, r3
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	f1c3 0308 	rsb	r3, r3, #8
 80012f6:	fa42 f303 	asr.w	r3, r2, r3
 80012fa:	60fb      	str	r3, [r7, #12]
	return up;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	08012910 	.word	0x08012910
 800130c:	2000063c 	.word	0x2000063c

08001310 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001310:	b084      	sub	sp, #16
 8001312:	b480      	push	{r7}
 8001314:	b089      	sub	sp, #36	; 0x24
 8001316:	af00      	add	r7, sp, #0
 8001318:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800131c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800132e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001330:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001334:	461a      	mov	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	fb03 f303 	mul.w	r3, r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	da01      	bge.n	8001344 <get_pressure+0x34>
 8001340:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001344:	131b      	asrs	r3, r3, #12
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	da01      	bge.n	8001352 <get_pressure+0x42>
 800134e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001352:	12db      	asrs	r3, r3, #11
 8001354:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001356:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800135a:	461a      	mov	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	da01      	bge.n	800136a <get_pressure+0x5a>
 8001366:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800136a:	12db      	asrs	r3, r3, #11
 800136c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001376:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800137a:	009a      	lsls	r2, r3, #2
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4413      	add	r3, r2
 8001380:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001384:	4093      	lsls	r3, r2
 8001386:	3302      	adds	r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	da00      	bge.n	800138e <get_pressure+0x7e>
 800138c:	3303      	adds	r3, #3
 800138e:	109b      	asrs	r3, r3, #2
 8001390:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001392:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001396:	461a      	mov	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da02      	bge.n	80013a8 <get_pressure+0x98>
 80013a2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80013a6:	331f      	adds	r3, #31
 80013a8:	135b      	asrs	r3, r3, #13
 80013aa:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80013ac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80013b0:	461a      	mov	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fb03 f303 	mul.w	r3, r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da01      	bge.n	80013c0 <get_pressure+0xb0>
 80013bc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80013c0:	131b      	asrs	r3, r3, #12
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da02      	bge.n	80013d0 <get_pressure+0xc0>
 80013ca:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80013ce:	33ff      	adds	r3, #255	; 0xff
 80013d0:	141b      	asrs	r3, r3, #16
 80013d2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	3302      	adds	r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da00      	bge.n	80013e2 <get_pressure+0xd2>
 80013e0:	3303      	adds	r3, #3
 80013e2:	109b      	asrs	r3, r3, #2
 80013e4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80013e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	0bdb      	lsrs	r3, r3, #15
 80013f6:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80013f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001404:	4611      	mov	r1, r2
 8001406:	f24c 3250 	movw	r2, #50000	; 0xc350
 800140a:	410a      	asrs	r2, r1
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db06      	blt.n	8001426 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	005a      	lsls	r2, r3, #1
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	e005      	b.n	8001432 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b00      	cmp	r3, #0
 8001436:	da00      	bge.n	800143a <get_pressure+0x12a>
 8001438:	33ff      	adds	r3, #255	; 0xff
 800143a:	121b      	asrs	r3, r3, #8
 800143c:	461a      	mov	r2, r3
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2b00      	cmp	r3, #0
 8001442:	da00      	bge.n	8001446 <get_pressure+0x136>
 8001444:	33ff      	adds	r3, #255	; 0xff
 8001446:	121b      	asrs	r3, r3, #8
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f640 32de 	movw	r2, #3038	; 0xbde
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	da02      	bge.n	8001462 <get_pressure+0x152>
 800145c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001460:	33ff      	adds	r3, #255	; 0xff
 8001462:	141b      	asrs	r3, r3, #16
 8001464:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <get_pressure+0x198>)
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	da02      	bge.n	8001478 <get_pressure+0x168>
 8001472:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001476:	33ff      	adds	r3, #255	; 0xff
 8001478:	141b      	asrs	r3, r3, #16
 800147a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001486:	2b00      	cmp	r3, #0
 8001488:	da00      	bge.n	800148c <get_pressure+0x17c>
 800148a:	330f      	adds	r3, #15
 800148c:	111b      	asrs	r3, r3, #4
 800148e:	461a      	mov	r2, r3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	61fb      	str	r3, [r7, #28]

	return p;
 8001496:	69fb      	ldr	r3, [r7, #28]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	b004      	add	sp, #16
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	ffffe343 	.word	0xffffe343
 80014ac:	00000000 	.word	0x00000000

080014b0 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <get_altitude+0xb8>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014d4:	ee16 0a90 	vmov	r0, s13
 80014d8:	f7ff f850 	bl	800057c <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001558 <get_altitude+0xa8>
 80014e4:	ec43 2b10 	vmov	d0, r2, r3
 80014e8:	f00e fe92 	bl	8010210 <pow>
 80014ec:	ec53 2b10 	vmov	r2, r3, d0
 80014f0:	f04f 0000 	mov.w	r0, #0
 80014f4:	491d      	ldr	r1, [pc, #116]	; (800156c <get_altitude+0xbc>)
 80014f6:	f7fe fee1 	bl	80002bc <__aeabi_dsub>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a317      	add	r3, pc, #92	; (adr r3, 8001560 <get_altitude+0xb0>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f890 	bl	800062c <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb62 	bl	8000bdc <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 800151c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001520:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001570 <get_altitude+0xc0>
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d908      	bls.n	8001540 <get_altitude+0x90>
 800152e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001532:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001574 <get_altitude+0xc4>
 8001536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	db03      	blt.n	8001548 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2205      	movs	r2, #5
 8001544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	ee07 3a90 	vmov	s15, r3
}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	ccd9456c 	.word	0xccd9456c
 800155c:	3fc85b95 	.word	0x3fc85b95
 8001560:	00000000 	.word	0x00000000
 8001564:	40e5a540 	.word	0x40e5a540
 8001568:	20000000 	.word	0x20000000
 800156c:	3ff00000 	.word	0x3ff00000
 8001570:	c3fa0000 	.word	0xc3fa0000
 8001574:	460ca000 	.word	0x460ca000

08001578 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffe4 	bl	8000558 <__aeabi_i2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <get_slp+0x80>)
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80015fc <get_slp+0x84>
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	ee17 0a90 	vmov	r0, s15
 80015ae:	f7fe ffe5 	bl	800057c <__aeabi_f2d>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80015f0 <get_slp+0x78>
 80015ba:	ec43 2b10 	vmov	d0, r2, r3
 80015be:	f00e fe27 	bl	8010210 <pow>
 80015c2:	ec53 2b10 	vmov	r2, r3, d0
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7ff f959 	bl	8000880 <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fb01 	bl	8000bdc <__aeabi_d2f>
 80015da:	4603      	mov	r3, r0
 80015dc:	60fb      	str	r3, [r7, #12]

	return slp;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	ee07 3a90 	vmov	s15, r3
}
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdb0      	pop	{r4, r5, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	b851eb85 	.word	0xb851eb85
 80015f4:	4015051e 	.word	0x4015051e
 80015f8:	20000004 	.word	0x20000004
 80015fc:	472d2a00 	.word	0x472d2a00

08001600 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b095      	sub	sp, #84	; 0x54
 8001604:	af0e      	add	r7, sp, #56	; 0x38
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 800160a:	f7ff fdb3 	bl	8001174 <get_ut>
 800160e:	ee07 0a90 	vmov	s15, r0
 8001612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f7ff fdd3 	bl	80011c8 <get_temp>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001630:	f7ff fe2c 	bl	800128c <get_up>
 8001634:	4602      	mov	r2, r0
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 800163a:	683e      	ldr	r6, [r7, #0]
 800163c:	466d      	mov	r5, sp
 800163e:	f106 0410 	add.w	r4, r6, #16
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	602b      	str	r3, [r5, #0]
 8001652:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001656:	f7ff fe5b 	bl	8001310 <get_pressure>
 800165a:	4602      	mov	r2, r0
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f7ff ff89 	bl	8001578 <get_slp>
 8001666:	eef0 7a40 	vmov.f32	s15, s0
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f7ff ff1d 	bl	80014b0 <get_altitude>
 8001676:	eef0 7a40 	vmov.f32	s15, s0
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	617b      	str	r3, [r7, #20]
	return result;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	461c      	mov	r4, r3
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016b0 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80016bc:	e083      	b.n	80017c6 <initButtons+0x116>
		btns[i]->pin = pins[i];
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	440b      	add	r3, r1
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4944      	ldr	r1, [pc, #272]	; (80017dc <initButtons+0x12c>)
 80016cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80016d0:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	440b      	add	r3, r1
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4940      	ldr	r1, [pc, #256]	; (80017e0 <initButtons+0x130>)
 80016e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016e4:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	7993      	ldrb	r3, [r2, #6]
 80016f2:	f36f 0300 	bfc	r3, #0, #1
 80016f6:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	7993      	ldrb	r3, [r2, #6]
 8001704:	f36f 0341 	bfc	r3, #1, #1
 8001708:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2200      	movs	r2, #0
 8001716:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	3301      	adds	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	f67f af78 	bls.w	80016be <initButtons+0xe>
	}
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000020 	.word	0x20000020
 80017e0:	20000008 	.word	0x20000008

080017e4 <resetButtonHandlers>:

void resetButtonHandlers(void){
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 80017ee:	e020      	b.n	8001832 <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <resetButtonHandlers+0x64>)
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <resetButtonHandlers+0x64>)
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <resetButtonHandlers+0x64>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <resetButtonHandlers+0x64>)
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <resetButtonHandlers+0x64>)
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
		i++;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3301      	adds	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d9db      	bls.n	80017f0 <resetButtonHandlers+0xc>
	}
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000002c 	.word	0x2000002c

0800184c <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	889b      	ldrh	r3, [r3, #4]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f004 ff9c 	bl	800679c <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf0c      	ite	eq
 800186a:	2301      	moveq	r3, #1
 800186c:	2300      	movne	r3, #0
 800186e:	b2db      	uxtb	r3, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <scanButton>:

void scanButton(Button* btn){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	799b      	ldrb	r3, [r3, #6]
 8001884:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	b2d9      	uxtb	r1, r3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	7993      	ldrb	r3, [r2, #6]
 8001898:	f361 0300 	bfi	r3, r1, #0, #1
 800189c:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffd4 	bl	800184c <readButton>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 80018a8:	7bbb      	ldrb	r3, [r7, #14]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	b2d9      	uxtb	r1, r3
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	7993      	ldrb	r3, [r2, #6]
 80018b4:	f361 0341 	bfi	r3, r1, #1, #1
 80018b8:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 80018ba:	7bba      	ldrb	r2, [r7, #14]
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d150      	bne.n	8001964 <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d146      	bne.n	8001956 <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7a9b      	ldrb	r3, [r3, #10]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2000      	movs	r0, #0
 80018e2:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7a9b      	ldrb	r3, [r3, #10]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <scanButton+0x15c>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d32d      	bcc.n	800194e <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7b5b      	ldrb	r3, [r3, #13]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d110      	bne.n	800191c <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2000      	movs	r0, #0
 8001908:	4798      	blx	r3
					}
					btn->longSingleOn++;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7a5b      	ldrb	r3, [r3, #9]
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7a9b      	ldrb	r3, [r3, #10]
 8001920:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <scanButton+0x15c>)
 8001922:	8852      	ldrh	r2, [r2, #2]
 8001924:	fb93 f1f2 	sdiv	r1, r3, r2
 8001928:	fb01 f202 	mul.w	r2, r1, r2
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2000      	movs	r0, #0
 8001940:	4798      	blx	r3
					}
					btn->longContinuous++;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7adb      	ldrb	r3, [r3, #11]
 8001946:	3301      	adds	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8001954:	e03a      	b.n	80019cc <scanButton+0x154>
			btn->shortSingleHandled = 0;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	735a      	strb	r2, [r3, #13]
}
 8001962:	e033      	b.n	80019cc <scanButton+0x154>
		if(currStatus == 1){
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d11b      	bne.n	80019a2 <scanButton+0x12a>
			btn->shortContinuous = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7b1b      	ldrb	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d126      	bne.n	80019cc <scanButton+0x154>
				if(btn->onSinglePressHandler != NULL){
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <scanButton+0x116>
					btn->onSinglePressHandler(NULL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2000      	movs	r0, #0
 800198c:	4798      	blx	r3
				btn->shortSingleOn++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	79db      	ldrb	r3, [r3, #7]
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	731a      	strb	r2, [r3, #12]
}
 80019a0:	e014      	b.n	80019cc <scanButton+0x154>
			if(btn->releaseHandled == 0){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b9b      	ldrb	r3, [r3, #14]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d110      	bne.n	80019cc <scanButton+0x154>
				if(btn->onReleaseHandler != NULL){
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <scanButton+0x142>
					btn->onReleaseHandler(NULL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	2000      	movs	r0, #0
 80019b8:	4798      	blx	r3
				btn->shortSingleOff++;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7a1b      	ldrb	r3, [r3, #8]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	739a      	strb	r2, [r3, #14]
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000044 	.word	0x20000044

080019d8 <scanButtons>:

void scanButtons(Button* btns[6]){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019e4:	e00a      	b.n	80019fc <scanButtons+0x24>
		scanButton(btns[i]);
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff41 	bl	8001878 <scanButton>
		i++;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	3301      	adds	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d9f1      	bls.n	80019e6 <scanButtons+0xe>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <initTimer>:
 *  Created on: Apr 11, 2022
 *      Author: wojch
 */
#include "customTimer.h"

void initTimer(void){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim11);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <initTimer+0x10>)
 8001a12:	f007 fb53 	bl	80090bc <HAL_TIM_Base_Init>
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20003698 	.word	0x20003698

08001a20 <setTimeout>:

void setTimeout(int count){
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	htim11.Init.Period = 65000;
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <setTimeout+0x1c>)
 8001a2a:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001a2e:	60da      	str	r2, [r3, #12]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	20003698 	.word	0x20003698

08001a40 <startClock>:
void timerFunction(void){
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//	stopMeasure();
}

void startClock(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <startClock+0x10>)
 8001a46:	f007 fb89 	bl	800915c <HAL_TIM_Base_Start_IT>
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20003698 	.word	0x20003698

08001a54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	; 0x30
 8001a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a5f      	ldr	r2, [pc, #380]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b52      	ldr	r3, [pc, #328]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a51      	ldr	r2, [pc, #324]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b4f      	ldr	r3, [pc, #316]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a4a      	ldr	r2, [pc, #296]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a43      	ldr	r2, [pc, #268]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a3c      	ldr	r2, [pc, #240]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2140      	movs	r1, #64	; 0x40
 8001b32:	4830      	ldr	r0, [pc, #192]	; (8001bf4 <MX_GPIO_Init+0x1a0>)
 8001b34:	f004 fe4a 	bl	80067cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b3e:	482e      	ldr	r0, [pc, #184]	; (8001bf8 <MX_GPIO_Init+0x1a4>)
 8001b40:	f004 fe44 	bl	80067cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2140      	movs	r1, #64	; 0x40
 8001b48:	482c      	ldr	r0, [pc, #176]	; (8001bfc <MX_GPIO_Init+0x1a8>)
 8001b4a:	f004 fe3f 	bl	80067cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001b4e:	2340      	movs	r3, #64	; 0x40
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4823      	ldr	r0, [pc, #140]	; (8001bf4 <MX_GPIO_Init+0x1a0>)
 8001b66:	f004 fc6d 	bl	8006444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b6a:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	481d      	ldr	r0, [pc, #116]	; (8001bf8 <MX_GPIO_Init+0x1a4>)
 8001b84:	f004 fc5e 	bl	8006444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8001b88:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b8c:	61fb      	str	r3, [r7, #28]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b8e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4818      	ldr	r0, [pc, #96]	; (8001c00 <MX_GPIO_Init+0x1ac>)
 8001ba0:	f004 fc50 	bl	8006444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ba4:	2340      	movs	r3, #64	; 0x40
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4810      	ldr	r0, [pc, #64]	; (8001bfc <MX_GPIO_Init+0x1a8>)
 8001bbc:	f004 fc42 	bl	8006444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480a      	ldr	r0, [pc, #40]	; (8001bfc <MX_GPIO_Init+0x1a8>)
 8001bd4:	f004 fc36 	bl	8006444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2028      	movs	r0, #40	; 0x28
 8001bde:	f004 fb68 	bl	80062b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001be2:	2028      	movs	r0, #40	; 0x28
 8001be4:	f004 fb81 	bl	80062ea <HAL_NVIC_EnableIRQ>

}
 8001be8:	bf00      	nop
 8001bea:	3730      	adds	r7, #48	; 0x30
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40021000 	.word	0x40021000

08001c04 <getDataFromUart>:


//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};
char gpsBuffer[600] = {0};

void getDataFromUart(gpsDevice* gps){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive(&huart6, &gps->buffer, 600, 1000);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1d19      	adds	r1, r3, #4
 8001c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c14:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <getDataFromUart+0x24>)
 8001c1a:	f008 fb2a 	bl	800a272 <HAL_UART_Receive>
//	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20003724 	.word	0x20003724

08001c2c <initGps>:

gpsDevice initGps(UART_HandleTypeDef* uartPort){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c38:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c3c:	6018      	str	r0, [r3, #0]
 8001c3e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c42:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001c46:	6019      	str	r1, [r3, #0]
	gpsDevice gpsModule;
	gpsModule.uartPort = uartPort;
 8001c48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c4c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c50:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8001c54:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, 600);
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	3304      	adds	r3, #4
 8001c62:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00b fa83 	bl	800d174 <strncpy>
	gpsModule.getData = &getDataFromUart;
 8001c6e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c72:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <initGps+0x84>)
 8001c78:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	return(gpsModule);
 8001c7c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c80:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c8a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f44f 7318 	mov.w	r3, #608	; 0x260
 8001c96:	461a      	mov	r2, r3
 8001c98:	f009 fb64 	bl	800b364 <memcpy>
}
 8001c9c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001ca0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	08001c05 	.word	0x08001c05

08001cb4 <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	if(position>0){
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <prevPos+0x2c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <prevPos+0x1a>
		position--;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <prevPos+0x2c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <prevPos+0x2c>)
 8001cca:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8001ccc:	e002      	b.n	8001cd4 <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <prevPos+0x2c>)
 8001cd0:	2205      	movs	r2, #5
 8001cd2:	701a      	strb	r2, [r3, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000638 	.word	0x20000638

08001ce4 <nextPos>:

void nextPos(void){
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <nextPos+0x2c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d806      	bhi.n	8001cfe <nextPos+0x1a>
		position++;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <nextPos+0x2c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <nextPos+0x2c>)
 8001cfa:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8001cfc:	e002      	b.n	8001d04 <nextPos+0x20>
		position=0;
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <nextPos+0x2c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000638 	.word	0x20000638

08001d14 <nextScreen>:

void nextScreen(void){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	nextPos();
 8001d18:	f7ff ffe4 	bl	8001ce4 <nextPos>
	applySelectedScreen();
 8001d1c:	f000 f82c 	bl	8001d78 <applySelectedScreen>
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <prevScreen>:
void prevScreen(void){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	prevPos();
 8001d28:	f7ff ffc4 	bl	8001cb4 <prevPos>
	applySelectedScreen();
 8001d2c:	f000 f824 	bl	8001d78 <applySelectedScreen>
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <resetPos>:
void resetPos(void){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	position=0;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <resetPos+0x14>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8001d3e:	f000 f81b 	bl	8001d78 <applySelectedScreen>
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000638 	.word	0x20000638

08001d4c <guiApplyView>:

void guiApplyView(struct Module *module){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <guiApplyView+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <guiApplyView+0x28>)
 8001d62:	6013      	str	r3, [r2, #0]
	selectScreen();
 8001d64:	f000 f830 	bl	8001dc8 <selectScreen>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000013c 	.word	0x2000013c
 8001d74:	20000138 	.word	0x20000138

08001d78 <applySelectedScreen>:

void applySelectedScreen(void){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <applySelectedScreen+0x40>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <applySelectedScreen+0x44>)
 8001d84:	460b      	mov	r3, r1
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3320      	adds	r3, #32
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <applySelectedScreen+0x48>)
 8001d94:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <applySelectedScreen+0x40>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <applySelectedScreen+0x44>)
 8001d9e:	460b      	mov	r3, r1
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	3324      	adds	r3, #36	; 0x24
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <applySelectedScreen+0x4c>)
 8001dae:	6013      	str	r3, [r2, #0]
	selectScreen();
 8001db0:	f000 f80a 	bl	8001dc8 <selectScreen>
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000638 	.word	0x20000638
 8001dbc:	20000048 	.word	0x20000048
 8001dc0:	2000013c 	.word	0x2000013c
 8001dc4:	20000138 	.word	0x20000138

08001dc8 <selectScreen>:

void selectScreen(void){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8001dcc:	f7ff fd0a 	bl	80017e4 <resetButtonHandlers>
	isModuleSet = 0;
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <selectScreen+0x1c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <selectScreen+0x20>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <selectScreen+0x24>)
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000639 	.word	0x20000639
 8001de8:	20000138 	.word	0x20000138
 8001dec:	20000140 	.word	0x20000140

08001df0 <showGui>:
// function to display alert message over current gui
void showAlert(){

}

void showGui(void){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <showGui+0x30>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <showGui+0x18>
		moduleSetupPtr();
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <showGui+0x34>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4798      	blx	r3
		isModuleSet = 1;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <showGui+0x30>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <showGui+0x38>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <showGui+0x26>
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <showGui+0x38>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4798      	blx	r3
	lcdRefresh();
 8001e16:	f000 fcc9 	bl	80027ac <lcdRefresh>
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000639 	.word	0x20000639
 8001e24:	2000013c 	.word	0x2000013c
 8001e28:	20000140 	.word	0x20000140

08001e2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e32:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <MX_I2C1_Init+0x78>)
 8001e34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e38:	4a1b      	ldr	r2, [pc, #108]	; (8001ea8 <MX_I2C1_Init+0x7c>)
 8001e3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e6a:	f004 fd07 	bl	800687c <HAL_I2C_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e74:	f000 fe7a 	bl	8002b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e7c:	f005 fcbd 	bl	80077fa <HAL_I2CEx_ConfigAnalogFilter>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001e86:	f000 fe71 	bl	8002b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e8e:	f005 fcf0 	bl	8007872 <HAL_I2CEx_ConfigDigitalFilter>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001e98:	f000 fe68 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	2000063c 	.word	0x2000063c
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	000186a0 	.word	0x000186a0

08001eac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_I2C_MspInit+0x84>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d12c      	bne.n	8001f28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_I2C_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <HAL_I2C_MspInit+0x88>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_I2C_MspInit+0x88>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef0:	2312      	movs	r3, #18
 8001ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001efc:	2304      	movs	r3, #4
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	480c      	ldr	r0, [pc, #48]	; (8001f38 <HAL_I2C_MspInit+0x8c>)
 8001f08:	f004 fa9c 	bl	8006444 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_I2C_MspInit+0x88>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <HAL_I2C_MspInit+0x88>)
 8001f16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_I2C_MspInit+0x88>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40005400 	.word	0x40005400
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020400 	.word	0x40020400

08001f3c <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8001f46:	2307      	movs	r3, #7
 8001f48:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8001f56:	e010      	b.n	8001f7a <reverse_uint8+0x3e>
		result = result << 1;
 8001f58:	7bbb      	ldrb	r3, [r7, #14]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8001f6c:	7bba      	ldrb	r2, [r7, #14]
 8001f6e:	7b7b      	ldrb	r3, [r7, #13]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	73bb      	strb	r3, [r7, #14]
		times--;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1eb      	bne.n	8001f58 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8001f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
	updateSetting(0);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f824 	bl	8001fe4 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	e014      	b.n	8001fcc <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	80bb      	strh	r3, [r7, #4]
 8001fa6:	e00b      	b.n	8001fc0 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	2232      	movs	r2, #50	; 0x32
 8001fac:	fb03 f202 	mul.w	r2, r3, r2
 8001fb0:	88bb      	ldrh	r3, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <lcdClearBuffer+0x50>)
 8001fb6:	21ff      	movs	r1, #255	; 0xff
 8001fb8:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8001fba:	88bb      	ldrh	r3, [r7, #4]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	80bb      	strh	r3, [r7, #4]
 8001fc0:	88bb      	ldrh	r3, [r7, #4]
 8001fc2:	2b31      	cmp	r3, #49	; 0x31
 8001fc4:	d9f0      	bls.n	8001fa8 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2bef      	cmp	r3, #239	; 0xef
 8001fd0:	d9e7      	bls.n	8001fa2 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f000 f806 	bl	8001fe4 <updateSetting>
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000694 	.word	0x20000694

08001fe4 <updateSetting>:

void updateSetting(uint8_t state){
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <updateSetting+0x1c>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	7013      	strb	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20000144 	.word	0x20000144

08002004 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	4603      	mov	r3, r0
 800200e:	80fb      	strh	r3, [r7, #6]
 8002010:	460b      	mov	r3, r1
 8002012:	717b      	strb	r3, [r7, #5]
 8002014:	4613      	mov	r3, r2
 8002016:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	795b      	ldrb	r3, [r3, #5]
 800201c:	793a      	ldrb	r2, [r7, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	d304      	bcc.n	800202c <lcdPutChar+0x28>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	799b      	ldrb	r3, [r3, #6]
 8002026:	793a      	ldrb	r2, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	d902      	bls.n	8002032 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	79db      	ldrb	r3, [r3, #7]
 8002030:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	08db      	lsrs	r3, r3, #3
 8002040:	b29b      	uxth	r3, r3
 8002042:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	885b      	ldrh	r3, [r3, #2]
 8002048:	461a      	mov	r2, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	785b      	ldrb	r3, [r3, #1]
 800204e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002052:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002054:	2300      	movs	r3, #0
 8002056:	75fb      	strb	r3, [r7, #23]
 8002058:	e09b      	b.n	8002192 <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 800205a:	797a      	ldrb	r2, [r7, #5]
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	4413      	add	r3, r2
 8002060:	b29b      	uxth	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	4413      	add	r3, r2
 8002068:	461a      	mov	r2, r3
 800206a:	0091      	lsls	r1, r2, #2
 800206c:	461a      	mov	r2, r3
 800206e:	460b      	mov	r3, r1
 8002070:	4413      	add	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	7cfb      	ldrb	r3, [r7, #19]
 8002078:	b29b      	uxth	r3, r3
 800207a:	4413      	add	r3, r2
 800207c:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 800207e:	793b      	ldrb	r3, [r7, #4]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	7952      	ldrb	r2, [r2, #5]
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	8852      	ldrh	r2, [r2, #2]
 800208a:	fb03 f202 	mul.w	r2, r3, r2
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	7cb9      	ldrb	r1, [r7, #18]
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	3308      	adds	r3, #8
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	7d3b      	ldrb	r3, [r7, #20]
 80020a8:	fa42 f303 	asr.w	r3, r2, r3
 80020ac:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 80020ae:	8a3b      	ldrh	r3, [r7, #16]
 80020b0:	4a3e      	ldr	r2, [pc, #248]	; (80021ac <lcdPutChar+0x1a8>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	b25a      	sxtb	r2, r3
 80020b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	b25b      	sxtb	r3, r3
 80020be:	4013      	ands	r3, r2
 80020c0:	b25a      	sxtb	r2, r3
 80020c2:	8a3b      	ldrh	r3, [r7, #16]
 80020c4:	b2d1      	uxtb	r1, r2
 80020c6:	4a39      	ldr	r2, [pc, #228]	; (80021ac <lcdPutChar+0x1a8>)
 80020c8:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	3308      	adds	r3, #8
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	b25a      	sxtb	r2, r3
 80020d6:	7d3b      	ldrb	r3, [r7, #20]
 80020d8:	f1c3 0308 	rsb	r3, r3, #8
 80020dc:	21ff      	movs	r1, #255	; 0xff
 80020de:	fa41 f303 	asr.w	r3, r1, r3
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	4013      	ands	r3, r2
 80020e6:	b25b      	sxtb	r3, r3
 80020e8:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80020ea:	2301      	movs	r3, #1
 80020ec:	757b      	strb	r3, [r7, #21]
 80020ee:	e029      	b.n	8002144 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 80020f0:	7d7a      	ldrb	r2, [r7, #21]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4413      	add	r3, r2
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	7a1b      	ldrb	r3, [r3, #8]
 80020fc:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 80020fe:	8a3a      	ldrh	r2, [r7, #16]
 8002100:	7d7b      	ldrb	r3, [r7, #21]
 8002102:	4413      	add	r3, r2
 8002104:	4a29      	ldr	r2, [pc, #164]	; (80021ac <lcdPutChar+0x1a8>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	b25a      	sxtb	r2, r3
 800210a:	7db9      	ldrb	r1, [r7, #22]
 800210c:	7d3b      	ldrb	r3, [r7, #20]
 800210e:	f1c3 0308 	rsb	r3, r3, #8
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	b259      	sxtb	r1, r3
 8002118:	7af8      	ldrb	r0, [r7, #11]
 800211a:	7d3b      	ldrb	r3, [r7, #20]
 800211c:	fa40 f303 	asr.w	r3, r0, r3
 8002120:	b25b      	sxtb	r3, r3
 8002122:	430b      	orrs	r3, r1
 8002124:	b25b      	sxtb	r3, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	b25b      	sxtb	r3, r3
 800212a:	4013      	ands	r3, r2
 800212c:	b259      	sxtb	r1, r3
 800212e:	8a3a      	ldrh	r2, [r7, #16]
 8002130:	7d7b      	ldrb	r3, [r7, #21]
 8002132:	4413      	add	r3, r2
 8002134:	b2c9      	uxtb	r1, r1
 8002136:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <lcdPutChar+0x1a8>)
 8002138:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 800213e:	7d7b      	ldrb	r3, [r7, #21]
 8002140:	3301      	adds	r3, #1
 8002142:	757b      	strb	r3, [r7, #21]
 8002144:	7d7a      	ldrb	r2, [r7, #21]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	3307      	adds	r3, #7
 800214c:	10db      	asrs	r3, r3, #3
 800214e:	429a      	cmp	r2, r3
 8002150:	dbce      	blt.n	80020f0 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002152:	8a3a      	ldrh	r2, [r7, #16]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	3307      	adds	r3, #7
 800215a:	10db      	asrs	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	4a13      	ldr	r2, [pc, #76]	; (80021ac <lcdPutChar+0x1a8>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	b25a      	sxtb	r2, r3
 8002164:	7db9      	ldrb	r1, [r7, #22]
 8002166:	7d3b      	ldrb	r3, [r7, #20]
 8002168:	f1c3 0308 	rsb	r3, r3, #8
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	b25b      	sxtb	r3, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	b25b      	sxtb	r3, r3
 8002176:	4013      	ands	r3, r2
 8002178:	b259      	sxtb	r1, r3
 800217a:	8a3a      	ldrh	r2, [r7, #16]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	3307      	adds	r3, #7
 8002182:	10db      	asrs	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	b2c9      	uxtb	r1, r1
 8002188:	4a08      	ldr	r2, [pc, #32]	; (80021ac <lcdPutChar+0x1a8>)
 800218a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	3301      	adds	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	7dfa      	ldrb	r2, [r7, #23]
 8002198:	429a      	cmp	r2, r3
 800219a:	f4ff af5e 	bcc.w	800205a <lcdPutChar+0x56>
	}
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	20000694 	.word	0x20000694

080021b0 <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60ba      	str	r2, [r7, #8]
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	4603      	mov	r3, r0
 80021bc:	81fb      	strh	r3, [r7, #14]
 80021be:	460b      	mov	r3, r1
 80021c0:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
 80021c6:	e015      	b.n	80021f4 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	fb12 f303 	smulbb	r3, r2, r3
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	89fb      	ldrh	r3, [r7, #14]
 80021da:	4413      	add	r3, r2
 80021dc:	b298      	uxth	r0, r3
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	4413      	add	r3, r2
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	7b79      	ldrb	r1, [r7, #13]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f7ff ff0b 	bl	8002004 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
 80021f0:	3301      	adds	r3, #1
 80021f2:	75fb      	strb	r3, [r7, #23]
 80021f4:	7dfc      	ldrb	r4, [r7, #23]
 80021f6:	68b8      	ldr	r0, [r7, #8]
 80021f8:	f7fd fffa 	bl	80001f0 <strlen>
 80021fc:	4603      	mov	r3, r0
 80021fe:	429c      	cmp	r4, r3
 8002200:	d3e2      	bcc.n	80021c8 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 8002202:	bf00      	nop
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd90      	pop	{r4, r7, pc}

0800220c <lcdVLine>:
void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 800220c:	b490      	push	{r4, r7}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4604      	mov	r4, r0
 8002214:	4608      	mov	r0, r1
 8002216:	4611      	mov	r1, r2
 8002218:	461a      	mov	r2, r3
 800221a:	4623      	mov	r3, r4
 800221c:	80fb      	strh	r3, [r7, #6]
 800221e:	4603      	mov	r3, r0
 8002220:	80bb      	strh	r3, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	70fb      	strb	r3, [r7, #3]
 8002226:	4613      	mov	r3, r2
 8002228:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	b29b      	uxth	r3, r3
 8002230:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	733b      	strb	r3, [r7, #12]
	for(uint8_t y = y1; y <= y2; y++){
 800223c:	88bb      	ldrh	r3, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e041      	b.n	80022c6 <lcdVLine+0xba>
	uint8_t content = lcdBuffer[y*SCR_W/8+block];
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	2232      	movs	r2, #50	; 0x32
 8002246:	fb03 f202 	mul.w	r2, r3, r2
 800224a:	7b7b      	ldrb	r3, [r7, #13]
 800224c:	4413      	add	r3, r2
 800224e:	4a23      	ldr	r2, [pc, #140]	; (80022dc <lcdVLine+0xd0>)
 8002250:	5cd3      	ldrb	r3, [r2, r3]
 8002252:	73bb      	strb	r3, [r7, #14]
	switch(mode){
 8002254:	78bb      	ldrb	r3, [r7, #2]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d01e      	beq.n	8002298 <lcdVLine+0x8c>
 800225a:	2b02      	cmp	r3, #2
 800225c:	dc27      	bgt.n	80022ae <lcdVLine+0xa2>
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <lcdVLine+0x5c>
 8002262:	2b01      	cmp	r3, #1
 8002264:	d00b      	beq.n	800227e <lcdVLine+0x72>
 8002266:	e022      	b.n	80022ae <lcdVLine+0xa2>
		// clear
		case 0:
			content |= (0b10000000 >> offset);
 8002268:	7b3b      	ldrb	r3, [r7, #12]
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	fa42 f303 	asr.w	r3, r2, r3
 8002270:	b25a      	sxtb	r2, r3
 8002272:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002276:	4313      	orrs	r3, r2
 8002278:	b25b      	sxtb	r3, r3
 800227a:	73bb      	strb	r3, [r7, #14]
			break;
 800227c:	e017      	b.n	80022ae <lcdVLine+0xa2>
		// fill
		case 1:
			content &= ~(0b10000000 >> offset);
 800227e:	7b3b      	ldrb	r3, [r7, #12]
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	fa42 f303 	asr.w	r3, r2, r3
 8002286:	b25b      	sxtb	r3, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	b25a      	sxtb	r2, r3
 800228c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002290:	4013      	ands	r3, r2
 8002292:	b25b      	sxtb	r3, r3
 8002294:	73bb      	strb	r3, [r7, #14]
			break;
 8002296:	e00a      	b.n	80022ae <lcdVLine+0xa2>
		// revert
		case 2:
			content ^= (0b10000000 >> offset);
 8002298:	7b3b      	ldrb	r3, [r7, #12]
 800229a:	2280      	movs	r2, #128	; 0x80
 800229c:	fa42 f303 	asr.w	r3, r2, r3
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022a6:	4053      	eors	r3, r2
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	73bb      	strb	r3, [r7, #14]
			break;
 80022ac:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+block] = content;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2232      	movs	r2, #50	; 0x32
 80022b2:	fb03 f202 	mul.w	r2, r3, r2
 80022b6:	7b7b      	ldrb	r3, [r7, #13]
 80022b8:	4413      	add	r3, r2
 80022ba:	4908      	ldr	r1, [pc, #32]	; (80022dc <lcdVLine+0xd0>)
 80022bc:	7bba      	ldrb	r2, [r7, #14]
 80022be:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	3301      	adds	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d9b9      	bls.n	8002242 <lcdVLine+0x36>
	}
}
 80022ce:	bf00      	nop
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc90      	pop	{r4, r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000694 	.word	0x20000694

080022e0 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 80022e0:	b490      	push	{r4, r7}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4604      	mov	r4, r0
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	80fb      	strh	r3, [r7, #6]
 80022f2:	4603      	mov	r3, r0
 80022f4:	80bb      	strh	r3, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	70fb      	strb	r3, [r7, #3]
 80022fa:	4613      	mov	r3, r2
 80022fc:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 80022fe:	23ff      	movs	r3, #255	; 0xff
 8002300:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 8002302:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002306:	2b07      	cmp	r3, #7
 8002308:	f200 8086 	bhi.w	8002418 <lcdHLine2+0x138>
 800230c:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <lcdHLine2+0x34>)
 800230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002312:	bf00      	nop
 8002314:	08002335 	.word	0x08002335
 8002318:	0800233b 	.word	0x0800233b
 800231c:	08002341 	.word	0x08002341
 8002320:	08002347 	.word	0x08002347
 8002324:	0800235f 	.word	0x0800235f
 8002328:	08002377 	.word	0x08002377
 800232c:	0800238f 	.word	0x0800238f
 8002330:	080023d7 	.word	0x080023d7
		case 0:	// clear
			pattern = 0x00;
 8002334:	2300      	movs	r3, #0
 8002336:	75fb      	strb	r3, [r7, #23]
			break;
 8002338:	e074      	b.n	8002424 <lcdHLine2+0x144>
		case 1:	// fill
			pattern = 0xFF;
 800233a:	23ff      	movs	r3, #255	; 0xff
 800233c:	75fb      	strb	r3, [r7, #23]
			break;
 800233e:	e071      	b.n	8002424 <lcdHLine2+0x144>
		case 2:	// vertical lines
			pattern = 0x55;
 8002340:	2355      	movs	r3, #85	; 0x55
 8002342:	75fb      	strb	r3, [r7, #23]
			break;
 8002344:	e06e      	b.n	8002424 <lcdHLine2+0x144>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <lcdHLine2+0x78>
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 8002356:	e065      	b.n	8002424 <lcdHLine2+0x144>
			else pattern = 0xFF;
 8002358:	23ff      	movs	r3, #255	; 0xff
 800235a:	75fb      	strb	r3, [r7, #23]
			break;
 800235c:	e062      	b.n	8002424 <lcdHLine2+0x144>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <lcdHLine2+0x90>
 800236a:	23aa      	movs	r3, #170	; 0xaa
 800236c:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 800236e:	e059      	b.n	8002424 <lcdHLine2+0x144>
			else pattern = 0x55;
 8002370:	2355      	movs	r3, #85	; 0x55
 8002372:	75fb      	strb	r3, [r7, #23]
			break;
 8002374:	e056      	b.n	8002424 <lcdHLine2+0x144>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <lcdHLine2+0xa8>
 8002382:	2388      	movs	r3, #136	; 0x88
 8002384:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 8002386:	e04d      	b.n	8002424 <lcdHLine2+0x144>
			else pattern = 0b00100010;
 8002388:	2322      	movs	r3, #34	; 0x22
 800238a:	75fb      	strb	r3, [r7, #23]
			break;
 800238c:	e04a      	b.n	8002424 <lcdHLine2+0x144>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <lcdHLine2+0xc0>
 800239a:	2388      	movs	r3, #136	; 0x88
 800239c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 800239e:	e03e      	b.n	800241e <lcdHLine2+0x13e>
			else if(y%4==1) pattern = 0b01000100;
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d102      	bne.n	80023b2 <lcdHLine2+0xd2>
 80023ac:	2344      	movs	r3, #68	; 0x44
 80023ae:	75fb      	strb	r3, [r7, #23]
			break;
 80023b0:	e035      	b.n	800241e <lcdHLine2+0x13e>
			else if(y%4==2) pattern = 0b00100010;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d102      	bne.n	80023c4 <lcdHLine2+0xe4>
 80023be:	2322      	movs	r3, #34	; 0x22
 80023c0:	75fb      	strb	r3, [r7, #23]
			break;
 80023c2:	e02c      	b.n	800241e <lcdHLine2+0x13e>
			else if(y%4==3) pattern = 0b00010001;
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d126      	bne.n	800241e <lcdHLine2+0x13e>
 80023d0:	2311      	movs	r3, #17
 80023d2:	75fb      	strb	r3, [r7, #23]
			break;
 80023d4:	e023      	b.n	800241e <lcdHLine2+0x13e>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <lcdHLine2+0x10e>
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d102      	bne.n	80023f4 <lcdHLine2+0x114>
 80023ee:	23aa      	movs	r3, #170	; 0xaa
 80023f0:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 80023f2:	e016      	b.n	8002422 <lcdHLine2+0x142>
			else if(y%4==1) pattern = 0b00100010;
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d102      	bne.n	8002406 <lcdHLine2+0x126>
 8002400:	2322      	movs	r3, #34	; 0x22
 8002402:	75fb      	strb	r3, [r7, #23]
			break;
 8002404:	e00d      	b.n	8002422 <lcdHLine2+0x142>
			else if(y%4==3) pattern = 0b00100010<<2;
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b03      	cmp	r3, #3
 8002410:	d107      	bne.n	8002422 <lcdHLine2+0x142>
 8002412:	2388      	movs	r3, #136	; 0x88
 8002414:	75fb      	strb	r3, [r7, #23]
			break;
 8002416:	e004      	b.n	8002422 <lcdHLine2+0x142>
		default:
			pattern = 0x00;
 8002418:	2300      	movs	r3, #0
 800241a:	75fb      	strb	r3, [r7, #23]
			break;
 800241c:	e002      	b.n	8002424 <lcdHLine2+0x144>
			break;
 800241e:	bf00      	nop
 8002420:	e000      	b.n	8002424 <lcdHLine2+0x144>
			break;
 8002422:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	08db      	lsrs	r3, r3, #3
 8002428:	b29b      	uxth	r3, r3
 800242a:	74bb      	strb	r3, [r7, #18]
		uint8_t offset1 = x1%8;
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	747b      	strb	r3, [r7, #17]
		uint8_t x2block = x2/8;
 8002436:	88bb      	ldrh	r3, [r7, #4]
 8002438:	08db      	lsrs	r3, r3, #3
 800243a:	b29b      	uxth	r3, r3
 800243c:	743b      	strb	r3, [r7, #16]
		uint8_t offset2 = x2%8;
 800243e:	88bb      	ldrh	r3, [r7, #4]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	73fb      	strb	r3, [r7, #15]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	2232      	movs	r2, #50	; 0x32
 800244c:	fb03 f202 	mul.w	r2, r3, r2
 8002450:	7cbb      	ldrb	r3, [r7, #18]
 8002452:	4413      	add	r3, r2
 8002454:	4a4e      	ldr	r2, [pc, #312]	; (8002590 <lcdHLine2+0x2b0>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	2232      	movs	r2, #50	; 0x32
 800245e:	fb03 f202 	mul.w	r2, r3, r2
 8002462:	7c3b      	ldrb	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	4a4a      	ldr	r2, [pc, #296]	; (8002590 <lcdHLine2+0x2b0>)
 8002468:	5cd3      	ldrb	r3, [r2, r3]
 800246a:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 800246c:	23ff      	movs	r3, #255	; 0xff
 800246e:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 8002470:	7c7b      	ldrb	r3, [r7, #17]
 8002472:	f1c3 0208 	rsb	r2, r3, #8
 8002476:	88b9      	ldrh	r1, [r7, #4]
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	1acb      	subs	r3, r1, r3
 800247c:	3301      	adds	r3, #1
 800247e:	429a      	cmp	r2, r3
 8002480:	dd11      	ble.n	80024a6 <lcdHLine2+0x1c6>
 8002482:	88ba      	ldrh	r2, [r7, #4]
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	3301      	adds	r3, #1
 800248a:	22ff      	movs	r2, #255	; 0xff
 800248c:	fa42 f303 	asr.w	r3, r2, r3
 8002490:	43da      	mvns	r2, r3
 8002492:	7c7b      	ldrb	r3, [r7, #17]
 8002494:	fa42 f303 	asr.w	r3, r2, r3
 8002498:	b25a      	sxtb	r2, r3
 800249a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800249e:	4013      	ands	r3, r2
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	753b      	strb	r3, [r7, #20]
 80024a4:	e001      	b.n	80024aa <lcdHLine2+0x1ca>
		else fillBlock = pattern;
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
 80024a8:	753b      	strb	r3, [r7, #20]
		switch(mode){
 80024aa:	78bb      	ldrb	r3, [r7, #2]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d050      	beq.n	8002552 <lcdHLine2+0x272>
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	dc51      	bgt.n	8002558 <lcdHLine2+0x278>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d04e      	beq.n	8002556 <lcdHLine2+0x276>
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d14d      	bne.n	8002558 <lcdHLine2+0x278>
//				lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
//			}
			break;
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 80024bc:	7c7b      	ldrb	r3, [r7, #17]
 80024be:	22ff      	movs	r2, #255	; 0xff
 80024c0:	fa42 f303 	asr.w	r3, r2, r3
 80024c4:	b25a      	sxtb	r2, r3
 80024c6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80024ca:	4013      	ands	r3, r2
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	b25a      	sxtb	r2, r3
 80024d2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80024d6:	4013      	ands	r3, r2
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	22ff      	movs	r2, #255	; 0xff
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	b25a      	sxtb	r2, r3
 80024ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024ee:	4013      	ands	r3, r2
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	b25a      	sxtb	r2, r3
 80024f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80024fa:	4013      	ands	r3, r2
 80024fc:	b25b      	sxtb	r3, r3
 80024fe:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002500:	2301      	movs	r3, #1
 8002502:	74fb      	strb	r3, [r7, #19]
 8002504:	e01e      	b.n	8002544 <lcdHLine2+0x264>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	2232      	movs	r2, #50	; 0x32
 800250a:	fb03 f202 	mul.w	r2, r3, r2
 800250e:	7cbb      	ldrb	r3, [r7, #18]
 8002510:	441a      	add	r2, r3
 8002512:	7cfb      	ldrb	r3, [r7, #19]
 8002514:	4413      	add	r3, r2
 8002516:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <lcdHLine2+0x2b0>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	b25a      	sxtb	r2, r3
 800251c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002520:	43db      	mvns	r3, r3
 8002522:	b25b      	sxtb	r3, r3
 8002524:	4013      	ands	r3, r2
 8002526:	b259      	sxtb	r1, r3
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	2232      	movs	r2, #50	; 0x32
 800252c:	fb03 f202 	mul.w	r2, r3, r2
 8002530:	7cbb      	ldrb	r3, [r7, #18]
 8002532:	441a      	add	r2, r3
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	4413      	add	r3, r2
 8002538:	b2c9      	uxtb	r1, r1
 800253a:	4a15      	ldr	r2, [pc, #84]	; (8002590 <lcdHLine2+0x2b0>)
 800253c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	3301      	adds	r3, #1
 8002542:	74fb      	strb	r3, [r7, #19]
 8002544:	7cfa      	ldrb	r2, [r7, #19]
 8002546:	7c39      	ldrb	r1, [r7, #16]
 8002548:	7cbb      	ldrb	r3, [r7, #18]
 800254a:	1acb      	subs	r3, r1, r3
 800254c:	429a      	cmp	r2, r3
 800254e:	dbda      	blt.n	8002506 <lcdHLine2+0x226>
			}
			break;
 8002550:	e002      	b.n	8002558 <lcdHLine2+0x278>
//			firstBlock ^= (fillBlock >> offset1);
//			lastBlock ^= (0xFF << (8-offset2-1));
//			for(uint8_t i = 1; i < (x2block-x1block); i++){
//				lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
//			}
			break;
 8002552:	bf00      	nop
 8002554:	e000      	b.n	8002558 <lcdHLine2+0x278>
			break;
 8002556:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	2232      	movs	r2, #50	; 0x32
 800255c:	fb03 f202 	mul.w	r2, r3, r2
 8002560:	7cbb      	ldrb	r3, [r7, #18]
 8002562:	4413      	add	r3, r2
 8002564:	490a      	ldr	r1, [pc, #40]	; (8002590 <lcdHLine2+0x2b0>)
 8002566:	7dba      	ldrb	r2, [r7, #22]
 8002568:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 800256a:	7c3a      	ldrb	r2, [r7, #16]
 800256c:	7cbb      	ldrb	r3, [r7, #18]
 800256e:	429a      	cmp	r2, r3
 8002570:	d908      	bls.n	8002584 <lcdHLine2+0x2a4>
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	2232      	movs	r2, #50	; 0x32
 8002576:	fb03 f202 	mul.w	r2, r3, r2
 800257a:	7c3b      	ldrb	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	4904      	ldr	r1, [pc, #16]	; (8002590 <lcdHLine2+0x2b0>)
 8002580:	7d7a      	ldrb	r2, [r7, #21]
 8002582:	54ca      	strb	r2, [r1, r3]
}
 8002584:	bf00      	nop
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bc90      	pop	{r4, r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000694 	.word	0x20000694

08002594 <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8002594:	b490      	push	{r4, r7}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	4604      	mov	r4, r0
 800259c:	4608      	mov	r0, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	4623      	mov	r3, r4
 80025a4:	80fb      	strh	r3, [r7, #6]
 80025a6:	4603      	mov	r3, r0
 80025a8:	80bb      	strh	r3, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	70fb      	strb	r3, [r7, #3]
 80025ae:	4613      	mov	r3, r2
 80025b0:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	08db      	lsrs	r3, r3, #3
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 80025c4:	88bb      	ldrh	r3, [r7, #4]
 80025c6:	08db      	lsrs	r3, r3, #3
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 80025cc:	88bb      	ldrh	r3, [r7, #4]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	2232      	movs	r2, #50	; 0x32
 80025da:	fb03 f202 	mul.w	r2, r3, r2
 80025de:	7c7b      	ldrb	r3, [r7, #17]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a71      	ldr	r2, [pc, #452]	; (80027a8 <lcdHLine+0x214>)
 80025e4:	5cd3      	ldrb	r3, [r2, r3]
 80025e6:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	2232      	movs	r2, #50	; 0x32
 80025ec:	fb03 f202 	mul.w	r2, r3, r2
 80025f0:	7c7b      	ldrb	r3, [r7, #17]
 80025f2:	441a      	add	r2, r3
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	4413      	add	r3, r2
 80025f8:	4a6b      	ldr	r2, [pc, #428]	; (80027a8 <lcdHLine+0x214>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 80025fe:	23ff      	movs	r3, #255	; 0xff
 8002600:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 8002602:	7c3b      	ldrb	r3, [r7, #16]
 8002604:	f1c3 0208 	rsb	r2, r3, #8
 8002608:	88b9      	ldrh	r1, [r7, #4]
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	1acb      	subs	r3, r1, r3
 800260e:	3301      	adds	r3, #1
 8002610:	429a      	cmp	r2, r3
 8002612:	dd09      	ble.n	8002628 <lcdHLine+0x94>
 8002614:	88ba      	ldrh	r2, [r7, #4]
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	3301      	adds	r3, #1
 800261c:	22ff      	movs	r2, #255	; 0xff
 800261e:	fa42 f303 	asr.w	r3, r2, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	757b      	strb	r3, [r7, #21]
	switch(mode){
 8002628:	78bb      	ldrb	r3, [r7, #2]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d067      	beq.n	80026fe <lcdHLine+0x16a>
 800262e:	2b02      	cmp	r3, #2
 8002630:	f300 809e 	bgt.w	8002770 <lcdHLine+0x1dc>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <lcdHLine+0xaa>
 8002638:	2b01      	cmp	r3, #1
 800263a:	d02e      	beq.n	800269a <lcdHLine+0x106>
 800263c:	e098      	b.n	8002770 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 800263e:	7d7a      	ldrb	r2, [r7, #21]
 8002640:	7c3b      	ldrb	r3, [r7, #16]
 8002642:	fa42 f303 	asr.w	r3, r2, r3
 8002646:	b25a      	sxtb	r2, r3
 8002648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800264c:	4313      	orrs	r3, r2
 800264e:	b25b      	sxtb	r3, r3
 8002650:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8002652:	7bbb      	ldrb	r3, [r7, #14]
 8002654:	f1c3 0307 	rsb	r3, r3, #7
 8002658:	22ff      	movs	r2, #255	; 0xff
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	b25a      	sxtb	r2, r3
 8002660:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002664:	4313      	orrs	r3, r2
 8002666:	b25b      	sxtb	r3, r3
 8002668:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800266a:	2301      	movs	r3, #1
 800266c:	753b      	strb	r3, [r7, #20]
 800266e:	e00d      	b.n	800268c <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	2232      	movs	r2, #50	; 0x32
 8002674:	fb03 f202 	mul.w	r2, r3, r2
 8002678:	7c7b      	ldrb	r3, [r7, #17]
 800267a:	441a      	add	r2, r3
 800267c:	7d3b      	ldrb	r3, [r7, #20]
 800267e:	4413      	add	r3, r2
 8002680:	4a49      	ldr	r2, [pc, #292]	; (80027a8 <lcdHLine+0x214>)
 8002682:	21ff      	movs	r1, #255	; 0xff
 8002684:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002686:	7d3b      	ldrb	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	753b      	strb	r3, [r7, #20]
 800268c:	7d3a      	ldrb	r2, [r7, #20]
 800268e:	7bf9      	ldrb	r1, [r7, #15]
 8002690:	7c7b      	ldrb	r3, [r7, #17]
 8002692:	1acb      	subs	r3, r1, r3
 8002694:	429a      	cmp	r2, r3
 8002696:	dbeb      	blt.n	8002670 <lcdHLine+0xdc>
		}
		break;
 8002698:	e06a      	b.n	8002770 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 800269a:	7d7a      	ldrb	r2, [r7, #21]
 800269c:	7c3b      	ldrb	r3, [r7, #16]
 800269e:	fa42 f303 	asr.w	r3, r2, r3
 80026a2:	b25b      	sxtb	r3, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	b25a      	sxtb	r2, r3
 80026a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026ac:	4013      	ands	r3, r2
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 80026b2:	7bbb      	ldrb	r3, [r7, #14]
 80026b4:	f1c3 0307 	rsb	r3, r3, #7
 80026b8:	22ff      	movs	r2, #255	; 0xff
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	b25b      	sxtb	r3, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	b25a      	sxtb	r2, r3
 80026c4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80026c8:	4013      	ands	r3, r2
 80026ca:	b25b      	sxtb	r3, r3
 80026cc:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80026ce:	2301      	movs	r3, #1
 80026d0:	74fb      	strb	r3, [r7, #19]
 80026d2:	e00d      	b.n	80026f0 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	2232      	movs	r2, #50	; 0x32
 80026d8:	fb03 f202 	mul.w	r2, r3, r2
 80026dc:	7c7b      	ldrb	r3, [r7, #17]
 80026de:	441a      	add	r2, r3
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a30      	ldr	r2, [pc, #192]	; (80027a8 <lcdHLine+0x214>)
 80026e6:	2100      	movs	r1, #0
 80026e8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80026ea:	7cfb      	ldrb	r3, [r7, #19]
 80026ec:	3301      	adds	r3, #1
 80026ee:	74fb      	strb	r3, [r7, #19]
 80026f0:	7cfa      	ldrb	r2, [r7, #19]
 80026f2:	7bf9      	ldrb	r1, [r7, #15]
 80026f4:	7c7b      	ldrb	r3, [r7, #17]
 80026f6:	1acb      	subs	r3, r1, r3
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dbeb      	blt.n	80026d4 <lcdHLine+0x140>
		}
		break;
 80026fc:	e038      	b.n	8002770 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 80026fe:	7d7a      	ldrb	r2, [r7, #21]
 8002700:	7c3b      	ldrb	r3, [r7, #16]
 8002702:	fa42 f303 	asr.w	r3, r2, r3
 8002706:	b25a      	sxtb	r2, r3
 8002708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800270c:	4053      	eors	r3, r2
 800270e:	b25b      	sxtb	r3, r3
 8002710:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 8002712:	7bbb      	ldrb	r3, [r7, #14]
 8002714:	f1c3 0307 	rsb	r3, r3, #7
 8002718:	22ff      	movs	r2, #255	; 0xff
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	b25a      	sxtb	r2, r3
 8002720:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002724:	4053      	eors	r3, r2
 8002726:	b25b      	sxtb	r3, r3
 8002728:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800272a:	2301      	movs	r3, #1
 800272c:	74bb      	strb	r3, [r7, #18]
 800272e:	e018      	b.n	8002762 <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	2232      	movs	r2, #50	; 0x32
 8002734:	fb03 f202 	mul.w	r2, r3, r2
 8002738:	7c7b      	ldrb	r3, [r7, #17]
 800273a:	441a      	add	r2, r3
 800273c:	7cbb      	ldrb	r3, [r7, #18]
 800273e:	4413      	add	r3, r2
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <lcdHLine+0x214>)
 8002742:	5cd2      	ldrb	r2, [r2, r3]
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	2132      	movs	r1, #50	; 0x32
 8002748:	fb03 f101 	mul.w	r1, r3, r1
 800274c:	7c7b      	ldrb	r3, [r7, #17]
 800274e:	4419      	add	r1, r3
 8002750:	7cbb      	ldrb	r3, [r7, #18]
 8002752:	440b      	add	r3, r1
 8002754:	43d2      	mvns	r2, r2
 8002756:	b2d1      	uxtb	r1, r2
 8002758:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <lcdHLine+0x214>)
 800275a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800275c:	7cbb      	ldrb	r3, [r7, #18]
 800275e:	3301      	adds	r3, #1
 8002760:	74bb      	strb	r3, [r7, #18]
 8002762:	7cba      	ldrb	r2, [r7, #18]
 8002764:	7bf9      	ldrb	r1, [r7, #15]
 8002766:	7c7b      	ldrb	r3, [r7, #17]
 8002768:	1acb      	subs	r3, r1, r3
 800276a:	429a      	cmp	r2, r3
 800276c:	dbe0      	blt.n	8002730 <lcdHLine+0x19c>
		}
		break;
 800276e:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	2232      	movs	r2, #50	; 0x32
 8002774:	fb03 f202 	mul.w	r2, r3, r2
 8002778:	7c7b      	ldrb	r3, [r7, #17]
 800277a:	4413      	add	r3, r2
 800277c:	490a      	ldr	r1, [pc, #40]	; (80027a8 <lcdHLine+0x214>)
 800277e:	7dfa      	ldrb	r2, [r7, #23]
 8002780:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	7c7b      	ldrb	r3, [r7, #17]
 8002786:	429a      	cmp	r2, r3
 8002788:	d908      	bls.n	800279c <lcdHLine+0x208>
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	2232      	movs	r2, #50	; 0x32
 800278e:	fb03 f202 	mul.w	r2, r3, r2
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	4413      	add	r3, r2
 8002796:	4904      	ldr	r1, [pc, #16]	; (80027a8 <lcdHLine+0x214>)
 8002798:	7dba      	ldrb	r2, [r7, #22]
 800279a:	54ca      	strb	r2, [r1, r3]
}
 800279c:	bf00      	nop
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc90      	pop	{r4, r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000694 	.word	0x20000694

080027ac <lcdRefresh>:

void lcdRefresh(void){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
	if(allowUpdate){
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <lcdRefresh+0x7c>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d032      	beq.n	8002820 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 80027ba:	2201      	movs	r2, #1
 80027bc:	2140      	movs	r1, #64	; 0x40
 80027be:	481b      	ldr	r0, [pc, #108]	; (800282c <lcdRefresh+0x80>)
 80027c0:	f004 f804 	bl	80067cc <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 80027c4:	2301      	movs	r3, #1
 80027c6:	71fb      	strb	r3, [r7, #7]
 80027c8:	e01c      	b.n	8002804 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fbb5 	bl	8001f3c <reverse_uint8>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <lcdRefresh+0x84>)
 80027d8:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 80027da:	2396      	movs	r3, #150	; 0x96
 80027dc:	2202      	movs	r2, #2
 80027de:	4914      	ldr	r1, [pc, #80]	; (8002830 <lcdRefresh+0x84>)
 80027e0:	4814      	ldr	r0, [pc, #80]	; (8002834 <lcdRefresh+0x88>)
 80027e2:	f006 fa64 	bl	8008cae <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	2232      	movs	r2, #50	; 0x32
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	4a11      	ldr	r2, [pc, #68]	; (8002838 <lcdRefresh+0x8c>)
 80027f2:	1899      	adds	r1, r3, r2
 80027f4:	2396      	movs	r3, #150	; 0x96
 80027f6:	2232      	movs	r2, #50	; 0x32
 80027f8:	480e      	ldr	r0, [pc, #56]	; (8002834 <lcdRefresh+0x88>)
 80027fa:	f006 fa58 	bl	8008cae <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	3301      	adds	r3, #1
 8002802:	71fb      	strb	r3, [r7, #7]
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	2bf1      	cmp	r3, #241	; 0xf1
 8002808:	d9df      	bls.n	80027ca <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 800280a:	2396      	movs	r3, #150	; 0x96
 800280c:	2202      	movs	r2, #2
 800280e:	490b      	ldr	r1, [pc, #44]	; (800283c <lcdRefresh+0x90>)
 8002810:	4808      	ldr	r0, [pc, #32]	; (8002834 <lcdRefresh+0x88>)
 8002812:	f006 fa4c 	bl	8008cae <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8002816:	2200      	movs	r2, #0
 8002818:	2140      	movs	r1, #64	; 0x40
 800281a:	4804      	ldr	r0, [pc, #16]	; (800282c <lcdRefresh+0x80>)
 800281c:	f003 ffd6 	bl	80067cc <HAL_GPIO_WritePin>
	}
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000144 	.word	0x20000144
 800282c:	40020000 	.word	0x40020000
 8002830:	20000148 	.word	0x20000148
 8002834:	200035ac 	.word	0x200035ac
 8002838:	20000694 	.word	0x20000694
 800283c:	20000690 	.word	0x20000690

08002840 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	4604      	mov	r4, r0
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	4623      	mov	r3, r4
 8002850:	80fb      	strh	r3, [r7, #6]
 8002852:	4603      	mov	r3, r0
 8002854:	80bb      	strh	r3, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	70fb      	strb	r3, [r7, #3]
 800285a:	4613      	mov	r3, r2
 800285c:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	e009      	b.n	8002878 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8002864:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002868:	7bfa      	ldrb	r2, [r7, #15]
 800286a:	88b9      	ldrh	r1, [r7, #4]
 800286c:	88f8      	ldrh	r0, [r7, #6]
 800286e:	f7ff fe91 	bl	8002594 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	3301      	adds	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	78bb      	ldrb	r3, [r7, #2]
 800287c:	429a      	cmp	r2, r3
 800287e:	d9f1      	bls.n	8002864 <lcdRect+0x24>
	}
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}

0800288a <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill){
 800288a:	b590      	push	{r4, r7, lr}
 800288c:	b087      	sub	sp, #28
 800288e:	af02      	add	r7, sp, #8
 8002890:	4604      	mov	r4, r0
 8002892:	4608      	mov	r0, r1
 8002894:	4611      	mov	r1, r2
 8002896:	461a      	mov	r2, r3
 8002898:	4623      	mov	r3, r4
 800289a:	80fb      	strh	r3, [r7, #6]
 800289c:	4603      	mov	r3, r0
 800289e:	80bb      	strh	r3, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
 80028a4:	4613      	mov	r3, r2
 80028a6:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	88bb      	ldrh	r3, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d047      	beq.n	8002940 <lcdRect2+0xb6>
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	78bb      	ldrb	r3, [r7, #2]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d043      	beq.n	8002940 <lcdRect2+0xb6>
		lcdHLine2(x1, x2, y1, mode,1);
 80028b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	88b9      	ldrh	r1, [r7, #4]
 80028c0:	88f8      	ldrh	r0, [r7, #6]
 80028c2:	2401      	movs	r4, #1
 80028c4:	9400      	str	r4, [sp, #0]
 80028c6:	f7ff fd0b 	bl	80022e0 <lcdHLine2>
		lcdHLine2(x1, x2, y2, mode,1);
 80028ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028ce:	78ba      	ldrb	r2, [r7, #2]
 80028d0:	88b9      	ldrh	r1, [r7, #4]
 80028d2:	88f8      	ldrh	r0, [r7, #6]
 80028d4:	2401      	movs	r4, #1
 80028d6:	9400      	str	r4, [sp, #0]
 80028d8:	f7ff fd02 	bl	80022e0 <lcdHLine2>
		lcdVLine(x1, y1+1, y2-1, mode);
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	b299      	uxth	r1, r3
 80028e4:	78bb      	ldrb	r3, [r7, #2]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028ee:	88f8      	ldrh	r0, [r7, #6]
 80028f0:	f7ff fc8c 	bl	800220c <lcdVLine>
		lcdVLine(x2, y1+1, y2-1, mode);
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	b299      	uxth	r1, r3
 80028fc:	78bb      	ldrb	r3, [r7, #2]
 80028fe:	3b01      	subs	r3, #1
 8002900:	b2da      	uxtb	r2, r3
 8002902:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002906:	88b8      	ldrh	r0, [r7, #4]
 8002908:	f7ff fc80 	bl	800220c <lcdVLine>
		for(uint8_t y = y1+1; y < y2; y++){
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	3301      	adds	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	e011      	b.n	8002938 <lcdRect2+0xae>
			lcdHLine2(x1+1, x2-1, y, mode, fill);
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	3301      	adds	r3, #1
 8002918:	b298      	uxth	r0, r3
 800291a:	88bb      	ldrh	r3, [r7, #4]
 800291c:	3b01      	subs	r3, #1
 800291e:	b299      	uxth	r1, r3
 8002920:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	4623      	mov	r3, r4
 800292e:	f7ff fcd7 	bl	80022e0 <lcdHLine2>
		for(uint8_t y = y1+1; y < y2; y++){
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	3301      	adds	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	78bb      	ldrb	r3, [r7, #2]
 800293c:	429a      	cmp	r2, r3
 800293e:	d3e9      	bcc.n	8002914 <lcdRect2+0x8a>
		}
	}
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	bd90      	pop	{r4, r7, pc}

08002948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002950:	f003 fb3e 	bl	8005fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002954:	f000 f868 	bl	8002a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002958:	f7ff f87c 	bl	8001a54 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800295c:	f000 fca2 	bl	80032a4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002960:	f000 f96c 	bl	8002c3c <MX_SPI1_Init>
  MX_TIM1_Init();
 8002964:	f000 fb0e 	bl	8002f84 <MX_TIM1_Init>
  MX_TIM10_Init();
 8002968:	f000 fbae 	bl	80030c8 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 800296c:	f000 fcc4 	bl	80032f8 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8002970:	f7ff fa5c 	bl	8001e2c <MX_I2C1_Init>
  MX_TIM11_Init();
 8002974:	f000 fbcc 	bl	8003110 <MX_TIM11_Init>
  MX_RTC_Init();
 8002978:	f000 f906 	bl	8002b88 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart6, &znak, 1);

  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 800297c:	4821      	ldr	r0, [pc, #132]	; (8002a04 <main+0xbc>)
 800297e:	f006 fb9d 	bl	80090bc <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8002982:	4820      	ldr	r0, [pc, #128]	; (8002a04 <main+0xbc>)
 8002984:	f006 fbea 	bl	800915c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002988:	2100      	movs	r1, #0
 800298a:	481e      	ldr	r0, [pc, #120]	; (8002a04 <main+0xbc>)
 800298c:	f006 fcb0 	bl	80092f0 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 8002990:	481d      	ldr	r0, [pc, #116]	; (8002a08 <main+0xc0>)
 8002992:	f006 fbe3 	bl	800915c <HAL_TIM_Base_Start_IT>

  gpsDevice gpsModule;
  gpsModule = initGps(&huart6);
 8002996:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800299a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800299e:	491b      	ldr	r1, [pc, #108]	; (8002a0c <main+0xc4>)
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff f943 	bl	8001c2c <initGps>

//  bmp_t bmp180module;
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 80029a6:	481a      	ldr	r0, [pc, #104]	; (8002a10 <main+0xc8>)
 80029a8:	f7fe fbc2 	bl	8001130 <bmp_init>

  initButtons(btnsPtrs);
 80029ac:	4819      	ldr	r0, [pc, #100]	; (8002a14 <main+0xcc>)
 80029ae:	f7fe fe7f 	bl	80016b0 <initButtons>

  initTimer();
 80029b2:	f7ff f82b 	bl	8001a0c <initTimer>
  setTimeout(1);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff f832 	bl	8001a20 <setTimeout>
  startClock();
 80029bc:	f7ff f840 	bl	8001a40 <startClock>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 80029c0:	f7ff fae6 	bl	8001f90 <lcdClearBuffer>
  lcdRefresh();
 80029c4:	f7ff fef2 	bl	80027ac <lcdRefresh>
  while (1)
  {
	  // functions executed along with the menu
		bmpData = getBmpData(&bmp180module);
 80029c8:	4c13      	ldr	r4, [pc, #76]	; (8002a18 <main+0xd0>)
 80029ca:	463b      	mov	r3, r7
 80029cc:	4910      	ldr	r1, [pc, #64]	; (8002a10 <main+0xc8>)
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fe16 	bl	8001600 <getBmpData>
 80029d4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80029d8:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80029dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80029e2:	2200      	movs	r2, #0
 80029e4:	490d      	ldr	r1, [pc, #52]	; (8002a1c <main+0xd4>)
 80029e6:	480e      	ldr	r0, [pc, #56]	; (8002a20 <main+0xd8>)
 80029e8:	f005 feea 	bl	80087c0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80029ec:	2200      	movs	r2, #0
 80029ee:	490d      	ldr	r1, [pc, #52]	; (8002a24 <main+0xdc>)
 80029f0:	480b      	ldr	r0, [pc, #44]	; (8002a20 <main+0xd8>)
 80029f2:	f005 ffc7 	bl	8008984 <HAL_RTC_GetDate>
	  lcdClearBuffer();
 80029f6:	f7ff facb 	bl	8001f90 <lcdClearBuffer>

	  // functions executed through GUI
	  showGui();
 80029fa:	f7ff f9f9 	bl	8001df0 <showGui>

	  lcdRefresh();
 80029fe:	f7ff fed5 	bl	80027ac <lcdRefresh>
		bmpData = getBmpData(&bmp180module);
 8002a02:	e7e1      	b.n	80029c8 <main+0x80>
 8002a04:	20003608 	.word	0x20003608
 8002a08:	20003650 	.word	0x20003650
 8002a0c:	20003724 	.word	0x20003724
 8002a10:	2000050c 	.word	0x2000050c
 8002a14:	2000002c 	.word	0x2000002c
 8002a18:	20000550 	.word	0x20000550
 8002a1c:	20003574 	.word	0x20003574
 8002a20:	2000358c 	.word	0x2000358c
 8002a24:	20003588 	.word	0x20003588

08002a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b094      	sub	sp, #80	; 0x50
 8002a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a2e:	f107 0320 	add.w	r3, r7, #32
 8002a32:	2230      	movs	r2, #48	; 0x30
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f008 fca2 	bl	800b380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <SystemClock_Config+0xd0>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a28      	ldr	r2, [pc, #160]	; (8002af8 <SystemClock_Config+0xd0>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5c:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <SystemClock_Config+0xd0>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	4b23      	ldr	r3, [pc, #140]	; (8002afc <SystemClock_Config+0xd4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a22      	ldr	r2, [pc, #136]	; (8002afc <SystemClock_Config+0xd4>)
 8002a72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b20      	ldr	r3, [pc, #128]	; (8002afc <SystemClock_Config+0xd4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002a84:	2305      	movs	r3, #5
 8002a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002a88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a92:	2302      	movs	r3, #2
 8002a94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002aa0:	23a8      	movs	r3, #168	; 0xa8
 8002aa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002aa8:	2307      	movs	r3, #7
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aac:	f107 0320 	add.w	r3, r7, #32
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f004 ff1d 	bl	80078f0 <HAL_RCC_OscConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002abc:	f000 f856 	bl	8002b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ac0:	230f      	movs	r3, #15
 8002ac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002acc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	2105      	movs	r1, #5
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f005 f97e 	bl	8007de0 <HAL_RCC_ClockConfig>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002aea:	f000 f83f 	bl	8002b6c <Error_Handler>
  }
}
 8002aee:	bf00      	nop
 8002af0:	3750      	adds	r7, #80	; 0x50
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40007000 	.word	0x40007000

08002b00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM10){
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d10c      	bne.n	8002b2c <HAL_TIM_PeriodElapsedCallback+0x2c>
		if(stwS.state){
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b14:	78db      	ldrb	r3, [r3, #3]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_TIM_PeriodElapsedCallback+0x2c>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002b20:	2101      	movs	r1, #1
 8002b22:	480a      	ldr	r0, [pc, #40]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002b24:	f003 fe6b 	bl	80067fe <HAL_GPIO_TogglePin>
			stwTick();
 8002b28:	f000 f9d8 	bl	8002edc <stwTick>
		}
	}
	if(htim->Instance == TIM11){
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d102      	bne.n	8002b3c <HAL_TIM_PeriodElapsedCallback+0x3c>
		scanButtons(btnsPtrs);
 8002b36:	4807      	ldr	r0, [pc, #28]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002b38:	f7fe ff4e 	bl	80019d8 <scanButtons>
	}
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40014400 	.word	0x40014400
 8002b48:	20003604 	.word	0x20003604
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	40014800 	.word	0x40014800
 8002b54:	2000002c 	.word	0x2000002c

08002b58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){

	}
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b70:	b672      	cpsid	i
}
 8002b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002b74:	2201      	movs	r2, #1
 8002b76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b7a:	4802      	ldr	r0, [pc, #8]	; (8002b84 <Error_Handler+0x18>)
 8002b7c:	f003 fe26 	bl	80067cc <HAL_GPIO_WritePin>
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <Error_Handler+0x14>
 8002b82:	bf00      	nop
 8002b84:	40020400 	.word	0x40020400

08002b88 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <MX_RTC_Init+0x58>)
 8002ba2:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <MX_RTC_Init+0x5c>)
 8002ba4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <MX_RTC_Init+0x58>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <MX_RTC_Init+0x58>)
 8002bae:	227f      	movs	r2, #127	; 0x7f
 8002bb0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <MX_RTC_Init+0x58>)
 8002bb4:	22ff      	movs	r2, #255	; 0xff
 8002bb6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <MX_RTC_Init+0x58>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <MX_RTC_Init+0x58>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <MX_RTC_Init+0x58>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002bca:	4805      	ldr	r0, [pc, #20]	; (8002be0 <MX_RTC_Init+0x58>)
 8002bcc:	f005 fce8 	bl	80085a0 <HAL_RTC_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002bd6:	f7ff ffc9 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	2000358c 	.word	0x2000358c
 8002be4:	40002800 	.word	0x40002800

08002be8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08e      	sub	sp, #56	; 0x38
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	2230      	movs	r2, #48	; 0x30
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f008 fbc1 	bl	800b380 <memset>
  if(rtcHandle->Instance==RTC)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a0c      	ldr	r2, [pc, #48]	; (8002c34 <HAL_RTC_MspInit+0x4c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d111      	bne.n	8002c2c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c10:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	4618      	mov	r0, r3
 8002c18:	f005 fb02 	bl	8008220 <HAL_RCCEx_PeriphCLKConfig>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002c22:	f7ff ffa3 	bl	8002b6c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <HAL_RTC_MspInit+0x50>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3738      	adds	r7, #56	; 0x38
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40002800 	.word	0x40002800
 8002c38:	42470e3c 	.word	0x42470e3c

08002c3c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c42:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <MX_SPI1_Init+0x68>)
 8002c44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c70:	2220      	movs	r2, #32
 8002c72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c88:	220a      	movs	r2, #10
 8002c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c8c:	4804      	ldr	r0, [pc, #16]	; (8002ca0 <MX_SPI1_Init+0x64>)
 8002c8e:	f005 ff85 	bl	8008b9c <HAL_SPI_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c98:	f7ff ff68 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	200035ac 	.word	0x200035ac
 8002ca4:	40013000 	.word	0x40013000

08002ca8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	; 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <HAL_SPI_MspInit+0x84>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d12b      	bne.n	8002d22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <HAL_SPI_MspInit+0x88>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <HAL_SPI_MspInit+0x88>)
 8002cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cda:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <HAL_SPI_MspInit+0x88>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_SPI_MspInit+0x88>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a10      	ldr	r2, [pc, #64]	; (8002d30 <HAL_SPI_MspInit+0x88>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_SPI_MspInit+0x88>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d02:	23a0      	movs	r3, #160	; 0xa0
 8002d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d12:	2305      	movs	r3, #5
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4805      	ldr	r0, [pc, #20]	; (8002d34 <HAL_SPI_MspInit+0x8c>)
 8002d1e:	f003 fb91 	bl	8006444 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d22:	bf00      	nop
 8002d24:	3728      	adds	r7, #40	; 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40013000 	.word	0x40013000
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020000 	.word	0x40020000

08002d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	4a0f      	ldr	r2, [pc, #60]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_MspInit+0x4c>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800

08002d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <NMI_Handler+0x4>

08002d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 8002d92:	f7ff feeb 	bl	8002b6c <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d96:	e7fe      	b.n	8002d96 <HardFault_Handler+0x8>

08002d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <MemManage_Handler+0x4>

08002d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002da2:	e7fe      	b.n	8002da2 <BusFault_Handler+0x4>

08002da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <UsageFault_Handler+0x4>

08002daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dd8:	f003 f94c 	bl	8006074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002de4:	4803      	ldr	r0, [pc, #12]	; (8002df4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002de6:	f006 fb4b 	bl	8009480 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002dea:	4803      	ldr	r0, [pc, #12]	; (8002df8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002dec:	f006 fb48 	bl	8009480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20003608 	.word	0x20003608
 8002df8:	20003650 	.word	0x20003650

08002dfc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e00:	4803      	ldr	r0, [pc, #12]	; (8002e10 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002e02:	f006 fb3d 	bl	8009480 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002e06:	4803      	ldr	r0, [pc, #12]	; (8002e14 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002e08:	f006 fb3a 	bl	8009480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20003608 	.word	0x20003608
 8002e14:	20003698 	.word	0x20003698

08002e18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 8002e1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e20:	f003 fd08 	bl	8006834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 8002e24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002e28:	f003 fd04 	bl	8006834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e30:	f003 fd00 	bl	8006834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 8002e34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e38:	f003 fcfc 	bl	8006834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8002e3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e40:	f003 fcf8 	bl	8006834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8002e44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e48:	f003 fcf4 	bl	8006834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <USART6_IRQHandler+0x10>)
 8002e56:	f007 faaf 	bl	800a3b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20003724 	.word	0x20003724

08002e64 <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 8002e68:	2228      	movs	r2, #40	; 0x28
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4804      	ldr	r0, [pc, #16]	; (8002e80 <clearTable+0x1c>)
 8002e6e:	f008 fa87 	bl	800b380 <memset>
	stwT.position = 0;
 8002e72:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <clearTable+0x1c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	2000014c 	.word	0x2000014c

08002e84 <addItem>:
void addItem(stw_struct stwS){
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <addItem+0x38>)
 8002e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <addItem+0x38>)
 8002e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <addItem+0x38>)
 8002ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <addItem+0x38>)
 8002eac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	2000014c 	.word	0x2000014c

08002ec0 <stwStart>:

void stwStart(void){
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_ENABLED;
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <stwStart+0x18>)
 8002ec6:	78d3      	ldrb	r3, [r2, #3]
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	70d3      	strb	r3, [r2, #3]
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	20003604 	.word	0x20003604

08002edc <stwTick>:
void stwTick(void){
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
	stwS.cnt++;
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <stwTick+0x28>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002eee:	4905      	ldr	r1, [pc, #20]	; (8002f04 <stwTick+0x28>)
 8002ef0:	680b      	ldr	r3, [r1, #0]
 8002ef2:	f362 0317 	bfi	r3, r2, #0, #24
 8002ef6:	600b      	str	r3, [r1, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20003604 	.word	0x20003604

08002f08 <stwStop>:
void stwStop(void){
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <stwStop+0x18>)
 8002f0e:	78d3      	ldrb	r3, [r2, #3]
 8002f10:	f36f 0300 	bfc	r3, #0, #1
 8002f14:	70d3      	strb	r3, [r2, #3]
}
 8002f16:	bf00      	nop
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	20003604 	.word	0x20003604

08002f24 <stwClear>:
void stwClear(void){
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
	stwS.cnt = 0;
 8002f28:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <stwClear+0x18>)
 8002f2a:	6813      	ldr	r3, [r2, #0]
 8002f2c:	f36f 0317 	bfc	r3, #0, #24
 8002f30:	6013      	str	r3, [r2, #0]
}
 8002f32:	bf00      	nop
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	20003604 	.word	0x20003604

08002f40 <stwSave>:
void stwSave(void){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <stwSave+0x18>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <stwSave+0x1c>)
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8002f50:	4610      	mov	r0, r2
 8002f52:	4798      	blx	r3
}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	2000014c 	.word	0x2000014c
 8002f5c:	20003604 	.word	0x20003604

08002f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <SystemInit+0x20>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <SystemInit+0x20>)
 8002f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b096      	sub	sp, #88	; 0x58
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	60da      	str	r2, [r3, #12]
 8002fb0:	611a      	str	r2, [r3, #16]
 8002fb2:	615a      	str	r2, [r3, #20]
 8002fb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	2220      	movs	r2, #32
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f008 f9df 	bl	800b380 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fc2:	4b3f      	ldr	r3, [pc, #252]	; (80030c0 <MX_TIM1_Init+0x13c>)
 8002fc4:	4a3f      	ldr	r2, [pc, #252]	; (80030c4 <MX_TIM1_Init+0x140>)
 8002fc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8002fc8:	4b3d      	ldr	r3, [pc, #244]	; (80030c0 <MX_TIM1_Init+0x13c>)
 8002fca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002fce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd0:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <MX_TIM1_Init+0x13c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	; (80030c0 <MX_TIM1_Init+0x13c>)
 8002fd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fde:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <MX_TIM1_Init+0x13c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fe4:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <MX_TIM1_Init+0x13c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fea:	4b35      	ldr	r3, [pc, #212]	; (80030c0 <MX_TIM1_Init+0x13c>)
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ff0:	4833      	ldr	r0, [pc, #204]	; (80030c0 <MX_TIM1_Init+0x13c>)
 8002ff2:	f006 f863 	bl	80090bc <HAL_TIM_Base_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002ffc:	f7ff fdb6 	bl	8002b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003004:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003006:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800300a:	4619      	mov	r1, r3
 800300c:	482c      	ldr	r0, [pc, #176]	; (80030c0 <MX_TIM1_Init+0x13c>)
 800300e:	f006 fc01 	bl	8009814 <HAL_TIM_ConfigClockSource>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003018:	f7ff fda8 	bl	8002b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800301c:	4828      	ldr	r0, [pc, #160]	; (80030c0 <MX_TIM1_Init+0x13c>)
 800301e:	f006 f90d 	bl	800923c <HAL_TIM_PWM_Init>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003028:	f7ff fda0 	bl	8002b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800302c:	2300      	movs	r3, #0
 800302e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003030:	2300      	movs	r3, #0
 8003032:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003034:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003038:	4619      	mov	r1, r3
 800303a:	4821      	ldr	r0, [pc, #132]	; (80030c0 <MX_TIM1_Init+0x13c>)
 800303c:	f006 ffea 	bl	800a014 <HAL_TIMEx_MasterConfigSynchronization>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003046:	f7ff fd91 	bl	8002b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800304a:	2360      	movs	r3, #96	; 0x60
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 800304e:	2302      	movs	r3, #2
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003052:	2300      	movs	r3, #0
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003056:	2300      	movs	r3, #0
 8003058:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003062:	2300      	movs	r3, #0
 8003064:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306a:	2200      	movs	r2, #0
 800306c:	4619      	mov	r1, r3
 800306e:	4814      	ldr	r0, [pc, #80]	; (80030c0 <MX_TIM1_Init+0x13c>)
 8003070:	f006 fb0e 	bl	8009690 <HAL_TIM_PWM_ConfigChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800307a:	f7ff fd77 	bl	8002b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003096:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	4619      	mov	r1, r3
 80030a0:	4807      	ldr	r0, [pc, #28]	; (80030c0 <MX_TIM1_Init+0x13c>)
 80030a2:	f007 f833 	bl	800a10c <HAL_TIMEx_ConfigBreakDeadTime>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80030ac:	f7ff fd5e 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80030b0:	4803      	ldr	r0, [pc, #12]	; (80030c0 <MX_TIM1_Init+0x13c>)
 80030b2:	f000 f8bd 	bl	8003230 <HAL_TIM_MspPostInit>

}
 80030b6:	bf00      	nop
 80030b8:	3758      	adds	r7, #88	; 0x58
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20003608 	.word	0x20003608
 80030c4:	40010000 	.word	0x40010000

080030c8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <MX_TIM10_Init+0x40>)
 80030ce:	4a0f      	ldr	r2, [pc, #60]	; (800310c <MX_TIM10_Init+0x44>)
 80030d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <MX_TIM10_Init+0x40>)
 80030d4:	f244 129f 	movw	r2, #16799	; 0x419f
 80030d8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <MX_TIM10_Init+0x40>)
 80030dc:	2200      	movs	r2, #0
 80030de:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <MX_TIM10_Init+0x40>)
 80030e2:	2263      	movs	r2, #99	; 0x63
 80030e4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <MX_TIM10_Init+0x40>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <MX_TIM10_Init+0x40>)
 80030ee:	2280      	movs	r2, #128	; 0x80
 80030f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80030f2:	4805      	ldr	r0, [pc, #20]	; (8003108 <MX_TIM10_Init+0x40>)
 80030f4:	f005 ffe2 	bl	80090bc <HAL_TIM_Base_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80030fe:	f7ff fd35 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20003650 	.word	0x20003650
 800310c:	40014400 	.word	0x40014400

08003110 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003114:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <MX_TIM11_Init+0x40>)
 8003116:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <MX_TIM11_Init+0x44>)
 8003118:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <MX_TIM11_Init+0x40>)
 800311c:	f244 129f 	movw	r2, #16799	; 0x419f
 8003120:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <MX_TIM11_Init+0x40>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 499;
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <MX_TIM11_Init+0x40>)
 800312a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800312e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <MX_TIM11_Init+0x40>)
 8003132:	2200      	movs	r2, #0
 8003134:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <MX_TIM11_Init+0x40>)
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800313c:	4804      	ldr	r0, [pc, #16]	; (8003150 <MX_TIM11_Init+0x40>)
 800313e:	f005 ffbd 	bl	80090bc <HAL_TIM_Base_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8003148:	f7ff fd10 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20003698 	.word	0x20003698
 8003154:	40014800 	.word	0x40014800

08003158 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2e      	ldr	r2, [pc, #184]	; (8003220 <HAL_TIM_Base_MspInit+0xc8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d11e      	bne.n	80031a8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_TIM_Base_MspInit+0xcc>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	4a2c      	ldr	r2, [pc, #176]	; (8003224 <HAL_TIM_Base_MspInit+0xcc>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6453      	str	r3, [r2, #68]	; 0x44
 800317a:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_TIM_Base_MspInit+0xcc>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	2100      	movs	r1, #0
 800318a:	2019      	movs	r0, #25
 800318c:	f003 f891 	bl	80062b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003190:	2019      	movs	r0, #25
 8003192:	f003 f8aa 	bl	80062ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003196:	2200      	movs	r2, #0
 8003198:	2100      	movs	r1, #0
 800319a:	201a      	movs	r0, #26
 800319c:	f003 f889 	bl	80062b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80031a0:	201a      	movs	r0, #26
 80031a2:	f003 f8a2 	bl	80062ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80031a6:	e036      	b.n	8003216 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM10)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_TIM_Base_MspInit+0xd0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d116      	bne.n	80031e0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_TIM_Base_MspInit+0xcc>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	4a1a      	ldr	r2, [pc, #104]	; (8003224 <HAL_TIM_Base_MspInit+0xcc>)
 80031bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c0:	6453      	str	r3, [r2, #68]	; 0x44
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <HAL_TIM_Base_MspInit+0xcc>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	2019      	movs	r0, #25
 80031d4:	f003 f86d 	bl	80062b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80031d8:	2019      	movs	r0, #25
 80031da:	f003 f886 	bl	80062ea <HAL_NVIC_EnableIRQ>
}
 80031de:	e01a      	b.n	8003216 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a11      	ldr	r2, [pc, #68]	; (800322c <HAL_TIM_Base_MspInit+0xd4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d115      	bne.n	8003216 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_TIM_Base_MspInit+0xcc>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <HAL_TIM_Base_MspInit+0xcc>)
 80031f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f8:	6453      	str	r3, [r2, #68]	; 0x44
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <HAL_TIM_Base_MspInit+0xcc>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2100      	movs	r1, #0
 800320a:	201a      	movs	r0, #26
 800320c:	f003 f851 	bl	80062b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003210:	201a      	movs	r0, #26
 8003212:	f003 f86a 	bl	80062ea <HAL_NVIC_EnableIRQ>
}
 8003216:	bf00      	nop
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40010000 	.word	0x40010000
 8003224:	40023800 	.word	0x40023800
 8003228:	40014400 	.word	0x40014400
 800322c:	40014800 	.word	0x40014800

08003230 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	f107 030c 	add.w	r3, r7, #12
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a12      	ldr	r2, [pc, #72]	; (8003298 <HAL_TIM_MspPostInit+0x68>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d11e      	bne.n	8003290 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <HAL_TIM_MspPostInit+0x6c>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a10      	ldr	r2, [pc, #64]	; (800329c <HAL_TIM_MspPostInit+0x6c>)
 800325c:	f043 0310 	orr.w	r3, r3, #16
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b0e      	ldr	r3, [pc, #56]	; (800329c <HAL_TIM_MspPostInit+0x6c>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800326e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003272:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003280:	2301      	movs	r3, #1
 8003282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	4619      	mov	r1, r3
 800328a:	4805      	ldr	r0, [pc, #20]	; (80032a0 <HAL_TIM_MspPostInit+0x70>)
 800328c:	f003 f8da 	bl	8006444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003290:	bf00      	nop
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40010000 	.word	0x40010000
 800329c:	40023800 	.word	0x40023800
 80032a0:	40021000 	.word	0x40021000

080032a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <MX_USART3_UART_Init+0x4c>)
 80032aa:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <MX_USART3_UART_Init+0x50>)
 80032ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <MX_USART3_UART_Init+0x4c>)
 80032b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <MX_USART3_UART_Init+0x4c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <MX_USART3_UART_Init+0x4c>)
 80032be:	2200      	movs	r2, #0
 80032c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <MX_USART3_UART_Init+0x4c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <MX_USART3_UART_Init+0x4c>)
 80032ca:	220c      	movs	r2, #12
 80032cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <MX_USART3_UART_Init+0x4c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <MX_USART3_UART_Init+0x4c>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032da:	4805      	ldr	r0, [pc, #20]	; (80032f0 <MX_USART3_UART_Init+0x4c>)
 80032dc:	f006 ff7c 	bl	800a1d8 <HAL_UART_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80032e6:	f7ff fc41 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200036e0 	.word	0x200036e0
 80032f4:	40004800 	.word	0x40004800

080032f8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <MX_USART6_UART_Init+0x4c>)
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <MX_USART6_UART_Init+0x50>)
 8003300:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <MX_USART6_UART_Init+0x4c>)
 8003304:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003308:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800330a:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <MX_USART6_UART_Init+0x4c>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <MX_USART6_UART_Init+0x4c>)
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <MX_USART6_UART_Init+0x4c>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <MX_USART6_UART_Init+0x4c>)
 800331e:	2204      	movs	r2, #4
 8003320:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <MX_USART6_UART_Init+0x4c>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <MX_USART6_UART_Init+0x4c>)
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800332e:	4805      	ldr	r0, [pc, #20]	; (8003344 <MX_USART6_UART_Init+0x4c>)
 8003330:	f006 ff52 	bl	800a1d8 <HAL_UART_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800333a:	f7ff fc17 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20003724 	.word	0x20003724
 8003348:	40011400 	.word	0x40011400

0800334c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08c      	sub	sp, #48	; 0x30
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003354:	f107 031c 	add.w	r3, r7, #28
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a36      	ldr	r2, [pc, #216]	; (8003444 <HAL_UART_MspInit+0xf8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d12d      	bne.n	80033ca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	4b35      	ldr	r3, [pc, #212]	; (8003448 <HAL_UART_MspInit+0xfc>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a34      	ldr	r2, [pc, #208]	; (8003448 <HAL_UART_MspInit+0xfc>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b32      	ldr	r3, [pc, #200]	; (8003448 <HAL_UART_MspInit+0xfc>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	4b2e      	ldr	r3, [pc, #184]	; (8003448 <HAL_UART_MspInit+0xfc>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <HAL_UART_MspInit+0xfc>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_UART_MspInit+0xfc>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80033a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b4:	2303      	movs	r3, #3
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033b8:	2307      	movs	r3, #7
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033bc:	f107 031c 	add.w	r3, r7, #28
 80033c0:	4619      	mov	r1, r3
 80033c2:	4822      	ldr	r0, [pc, #136]	; (800344c <HAL_UART_MspInit+0x100>)
 80033c4:	f003 f83e 	bl	8006444 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80033c8:	e038      	b.n	800343c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a20      	ldr	r2, [pc, #128]	; (8003450 <HAL_UART_MspInit+0x104>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d133      	bne.n	800343c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80033d4:	2300      	movs	r3, #0
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_UART_MspInit+0xfc>)
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	4a1a      	ldr	r2, [pc, #104]	; (8003448 <HAL_UART_MspInit+0xfc>)
 80033de:	f043 0320 	orr.w	r3, r3, #32
 80033e2:	6453      	str	r3, [r2, #68]	; 0x44
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <HAL_UART_MspInit+0xfc>)
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	4b14      	ldr	r3, [pc, #80]	; (8003448 <HAL_UART_MspInit+0xfc>)
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	4a13      	ldr	r2, [pc, #76]	; (8003448 <HAL_UART_MspInit+0xfc>)
 80033fa:	f043 0304 	orr.w	r3, r3, #4
 80033fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_UART_MspInit+0xfc>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800340c:	23c0      	movs	r3, #192	; 0xc0
 800340e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003410:	2302      	movs	r3, #2
 8003412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003418:	2303      	movs	r3, #3
 800341a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800341c:	2308      	movs	r3, #8
 800341e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003420:	f107 031c 	add.w	r3, r7, #28
 8003424:	4619      	mov	r1, r3
 8003426:	480b      	ldr	r0, [pc, #44]	; (8003454 <HAL_UART_MspInit+0x108>)
 8003428:	f003 f80c 	bl	8006444 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800342c:	2200      	movs	r2, #0
 800342e:	2100      	movs	r1, #0
 8003430:	2047      	movs	r0, #71	; 0x47
 8003432:	f002 ff3e 	bl	80062b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003436:	2047      	movs	r0, #71	; 0x47
 8003438:	f002 ff57 	bl	80062ea <HAL_NVIC_EnableIRQ>
}
 800343c:	bf00      	nop
 800343e:	3730      	adds	r7, #48	; 0x30
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40004800 	.word	0x40004800
 8003448:	40023800 	.word	0x40023800
 800344c:	40020c00 	.word	0x40020c00
 8003450:	40011400 	.word	0x40011400
 8003454:	40020800 	.word	0x40020800

08003458 <setDefaultClbcks>:
#include "fonts/zekton14b.h"

// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <setDefaultClbcks+0x2c>)
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <setDefaultClbcks+0x30>)
 8003460:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <setDefaultClbcks+0x34>)
 8003464:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <setDefaultClbcks+0x38>)
 8003466:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <setDefaultClbcks+0x3c>)
 800346a:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <setDefaultClbcks+0x40>)
 800346c:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <setDefaultClbcks+0x44>)
 8003470:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <setDefaultClbcks+0x48>)
 8003472:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <setDefaultClbcks+0x4c>)
 8003476:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <setDefaultClbcks+0x50>)
 8003478:	619a      	str	r2, [r3, #24]
}
 800347a:	bf00      	nop
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	20000560 	.word	0x20000560
 8003488:	08001d15 	.word	0x08001d15
 800348c:	200005a8 	.word	0x200005a8
 8003490:	08001d25 	.word	0x08001d25
 8003494:	20000584 	.word	0x20000584
 8003498:	08003651 	.word	0x08003651
 800349c:	20000614 	.word	0x20000614
 80034a0:	08003695 	.word	0x08003695
 80034a4:	200005cc 	.word	0x200005cc
 80034a8:	080036e1 	.word	0x080036e1

080034ac <baroSetup>:

// function executed once on module load
void baroSetup(void){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80034b0:	f7ff ffd2 	bl	8003458 <setDefaultClbcks>
}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <baroMain>:

// main function
void baroMain(void){
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b0a8      	sub	sp, #160	; 0xa0
 80034bc:	af00      	add	r7, sp, #0
	char str1[50] = {0};
 80034be:	2300      	movs	r3, #0
 80034c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034c6:	222e      	movs	r2, #46	; 0x2e
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f007 ff58 	bl	800b380 <memset>
	char str3[50] = {0};
 80034d0:	2300      	movs	r3, #0
 80034d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80034d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034d8:	222e      	movs	r2, #46	; 0x2e
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f007 ff4f 	bl	800b380 <memset>
	char str4[50] = {0};
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	222e      	movs	r2, #46	; 0x2e
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f007 ff46 	bl	800b380 <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 80034f4:	4b48      	ldr	r3, [pc, #288]	; (8003618 <baroMain+0x160>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd f83f 	bl	800057c <__aeabi_f2d>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003506:	4945      	ldr	r1, [pc, #276]	; (800361c <baroMain+0x164>)
 8003508:	f009 f868 	bl	800c5dc <siprintf>
	lcdPutStr(10, 14, str1, zekton12font);
 800350c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003510:	4b43      	ldr	r3, [pc, #268]	; (8003620 <baroMain+0x168>)
 8003512:	210e      	movs	r1, #14
 8003514:	200a      	movs	r0, #10
 8003516:	f7fe fe4b 	bl	80021b0 <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 800351a:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <baroMain+0x160>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003526:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003624 <baroMain+0x16c>
 800352a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800352e:	ee16 0a90 	vmov	r0, s13
 8003532:	f7fd f823 	bl	800057c <__aeabi_f2d>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800353e:	493a      	ldr	r1, [pc, #232]	; (8003628 <baroMain+0x170>)
 8003540:	f009 f84c 	bl	800c5dc <siprintf>
	lcdPutStr(10, 30, str1, zekton12font);
 8003544:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003548:	4b35      	ldr	r3, [pc, #212]	; (8003620 <baroMain+0x168>)
 800354a:	211e      	movs	r1, #30
 800354c:	200a      	movs	r0, #10
 800354e:	f7fe fe2f 	bl	80021b0 <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <baroMain+0x174>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d123      	bne.n	80035a2 <baroMain+0xea>
		sprintf(&str4, "Fixed altitude mode");
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	4934      	ldr	r1, [pc, #208]	; (8003630 <baroMain+0x178>)
 800355e:	4618      	mov	r0, r3
 8003560:	f009 f83c 	bl	800c5dc <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 8003564:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <baroMain+0x160>)
 8003566:	edd3 7a03 	vldr	s15, [r3, #12]
 800356a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003624 <baroMain+0x16c>
 800356e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003572:	ee16 0a90 	vmov	r0, s13
 8003576:	f7fd f801 	bl	800057c <__aeabi_f2d>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003582:	492c      	ldr	r1, [pc, #176]	; (8003634 <baroMain+0x17c>)
 8003584:	f009 f82a 	bl	800c5dc <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 8003588:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <baroMain+0x180>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fc fff5 	bl	800057c <__aeabi_f2d>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800359a:	4928      	ldr	r1, [pc, #160]	; (800363c <baroMain+0x184>)
 800359c:	f009 f81e 	bl	800c5dc <siprintf>
 80035a0:	e022      	b.n	80035e8 <baroMain+0x130>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 80035a2:	1d3b      	adds	r3, r7, #4
 80035a4:	4926      	ldr	r1, [pc, #152]	; (8003640 <baroMain+0x188>)
 80035a6:	4618      	mov	r0, r3
 80035a8:	f009 f818 	bl	800c5dc <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <baroMain+0x160>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fc ffe3 	bl	800057c <__aeabi_f2d>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80035be:	4921      	ldr	r1, [pc, #132]	; (8003644 <baroMain+0x18c>)
 80035c0:	f009 f80c 	bl	800c5dc <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 80035c4:	4b20      	ldr	r3, [pc, #128]	; (8003648 <baroMain+0x190>)
 80035c6:	edd3 7a00 	vldr	s15, [r3]
 80035ca:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003624 <baroMain+0x16c>
 80035ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80035d2:	ee16 0a90 	vmov	r0, s13
 80035d6:	f7fc ffd1 	bl	800057c <__aeabi_f2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80035e2:	491a      	ldr	r1, [pc, #104]	; (800364c <baroMain+0x194>)
 80035e4:	f008 fffa 	bl	800c5dc <siprintf>
	}
	lcdPutStr(10, 50, str4, zekton12font);
 80035e8:	1d3a      	adds	r2, r7, #4
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <baroMain+0x168>)
 80035ec:	2132      	movs	r1, #50	; 0x32
 80035ee:	200a      	movs	r0, #10
 80035f0:	f7fe fdde 	bl	80021b0 <lcdPutStr>
	lcdPutStr(10, 66, str1, zekton12font);
 80035f4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <baroMain+0x168>)
 80035fa:	2142      	movs	r1, #66	; 0x42
 80035fc:	200a      	movs	r0, #10
 80035fe:	f7fe fdd7 	bl	80021b0 <lcdPutStr>
	lcdPutStr(10, 82, str3, zekton12font);
 8003602:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <baroMain+0x168>)
 8003608:	2152      	movs	r1, #82	; 0x52
 800360a:	200a      	movs	r0, #10
 800360c:	f7fe fdd0 	bl	80021b0 <lcdPutStr>
}
 8003610:	bf00      	nop
 8003612:	37a0      	adds	r7, #160	; 0xa0
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000550 	.word	0x20000550
 800361c:	080129cc 	.word	0x080129cc
 8003620:	08013134 	.word	0x08013134
 8003624:	42c80000 	.word	0x42c80000
 8003628:	080129e4 	.word	0x080129e4
 800362c:	20003768 	.word	0x20003768
 8003630:	08012a00 	.word	0x08012a00
 8003634:	08012a14 	.word	0x08012a14
 8003638:	20000004 	.word	0x20000004
 800363c:	08012a38 	.word	0x08012a38
 8003640:	08012a58 	.word	0x08012a58
 8003644:	08012a6c 	.word	0x08012a6c
 8003648:	20000000 	.word	0x20000000
 800364c:	08012a8c 	.word	0x08012a8c

08003650 <changeBaroMode>:

void changeBaroMode(void){
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <changeBaroMode+0x34>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d107      	bne.n	800366c <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <changeBaroMode+0x38>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a0a      	ldr	r2, [pc, #40]	; (800368c <changeBaroMode+0x3c>)
 8003662:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 8003664:	4b07      	ldr	r3, [pc, #28]	; (8003684 <changeBaroMode+0x34>)
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = BARO_MODE_FIXED_ALTITUDE;
	}
}
 800366a:	e006      	b.n	800367a <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <changeBaroMode+0x38>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a07      	ldr	r2, [pc, #28]	; (8003690 <changeBaroMode+0x40>)
 8003672:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <changeBaroMode+0x34>)
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	20003768 	.word	0x20003768
 8003688:	20000550 	.word	0x20000550
 800368c:	20000000 	.word	0x20000000
 8003690:	20000004 	.word	0x20000004

08003694 <addBaro>:
void addBaro(void){
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <addBaro+0x40>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <addBaro+0x22>
			fixedAltitude += 1;
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <addBaro+0x44>)
 80036a2:	edd3 7a00 	vldr	s15, [r3]
 80036a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <addBaro+0x44>)
 80036b0:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 80036b4:	e009      	b.n	80036ca <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <addBaro+0x48>)
 80036b8:	edd3 7a00 	vldr	s15, [r3]
 80036bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80036c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <addBaro+0x48>)
 80036c6:	edc3 7a00 	vstr	s15, [r3]
}
 80036ca:	bf00      	nop
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	20003768 	.word	0x20003768
 80036d8:	20000004 	.word	0x20000004
 80036dc:	20000000 	.word	0x20000000

080036e0 <remBaro>:
void remBaro(void){
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 80036e4:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <remBaro+0x40>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <remBaro+0x22>
			fixedAltitude -= 1;
 80036ec:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <remBaro+0x44>)
 80036ee:	edd3 7a00 	vldr	s15, [r3]
 80036f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <remBaro+0x44>)
 80036fc:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 8003700:	e009      	b.n	8003716 <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <remBaro+0x48>)
 8003704:	edd3 7a00 	vldr	s15, [r3]
 8003708:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800370c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <remBaro+0x48>)
 8003712:	edc3 7a00 	vstr	s15, [r3]
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	20003768 	.word	0x20003768
 8003724:	20000004 	.word	0x20000004
 8003728:	20000000 	.word	0x20000000

0800372c <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <setupCntxMenu+0x1c>)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6013      	str	r3, [r2, #0]
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	2000376c 	.word	0x2000376c

0800374c <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
	hideCntxMenu();
 8003750:	f000 f87e 	bl	8003850 <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <cntxSelect+0x1c>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	4b04      	ldr	r3, [pc, #16]	; (800376c <cntxSelect+0x20>)
 800375c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4798      	blx	r3
}
 8003764:	bf00      	nop
 8003766:	bd80      	pop	{r7, pc}
 8003768:	2000376a 	.word	0x2000376a
 800376c:	200001dc 	.word	0x200001dc

08003770 <nextItem>:

void nextItem(void){
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <nextItem+0x34>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <nextItem+0x38>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	3b01      	subs	r3, #1
 8003780:	429a      	cmp	r2, r3
 8003782:	da06      	bge.n	8003792 <nextItem+0x22>
		cntxPosition++;
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <nextItem+0x34>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	3301      	adds	r3, #1
 800378a:	b2da      	uxtb	r2, r3
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <nextItem+0x34>)
 800378e:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 8003790:	e002      	b.n	8003798 <nextItem+0x28>
		cntxPosition = 0;
 8003792:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <nextItem+0x34>)
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	2000376a 	.word	0x2000376a
 80037a8:	20000184 	.word	0x20000184

080037ac <prevItem>:
void prevItem(void){
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <prevItem+0x30>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <prevItem+0x1a>
		cntxPosition--;
 80037b8:	4b08      	ldr	r3, [pc, #32]	; (80037dc <prevItem+0x30>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	3b01      	subs	r3, #1
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <prevItem+0x30>)
 80037c2:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 80037c4:	e005      	b.n	80037d2 <prevItem+0x26>
		cntxPosition = actionsNum-1;
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <prevItem+0x34>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4b03      	ldr	r3, [pc, #12]	; (80037dc <prevItem+0x30>)
 80037d0:	701a      	strb	r2, [r3, #0]
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	2000376a 	.word	0x2000376a
 80037e0:	20000184 	.word	0x20000184

080037e4 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <setDefaultClbcks+0x34>)
 80037ea:	4a0c      	ldr	r2, [pc, #48]	; (800381c <setDefaultClbcks+0x38>)
 80037ec:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 80037ee:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <setDefaultClbcks+0x3c>)
 80037f0:	4a0c      	ldr	r2, [pc, #48]	; (8003824 <setDefaultClbcks+0x40>)
 80037f2:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <setDefaultClbcks+0x3c>)
 80037f6:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <setDefaultClbcks+0x40>)
 80037f8:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <setDefaultClbcks+0x44>)
 80037fc:	4a0b      	ldr	r2, [pc, #44]	; (800382c <setDefaultClbcks+0x48>)
 80037fe:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <setDefaultClbcks+0x4c>)
 8003802:	4a0c      	ldr	r2, [pc, #48]	; (8003834 <setDefaultClbcks+0x50>)
 8003804:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <setDefaultClbcks+0x4c>)
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <setDefaultClbcks+0x50>)
 800380a:	61da      	str	r2, [r3, #28]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000614 	.word	0x20000614
 800381c:	08003851 	.word	0x08003851
 8003820:	200005a8 	.word	0x200005a8
 8003824:	080037ad 	.word	0x080037ad
 8003828:	20000584 	.word	0x20000584
 800382c:	0800374d 	.word	0x0800374d
 8003830:	20000560 	.word	0x20000560
 8003834:	08003771 	.word	0x08003771

08003838 <showCntxMenu>:

void showCntxMenu(void){
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 800383c:	f7ff ffd2 	bl	80037e4 <setDefaultClbcks>
	isCntxOpen = 1;
 8003840:	4b02      	ldr	r3, [pc, #8]	; (800384c <showCntxMenu+0x14>)
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20003769 	.word	0x20003769

08003850 <hideCntxMenu>:
void hideCntxMenu(void){
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 8003854:	f7fd ffc6 	bl	80017e4 <resetButtonHandlers>
	(*prevClbcks)();
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <hideCntxMenu+0x18>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4798      	blx	r3
	isCntxOpen = 0;
 800385e:	4b03      	ldr	r3, [pc, #12]	; (800386c <hideCntxMenu+0x1c>)
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
}
 8003864:	bf00      	nop
 8003866:	bd80      	pop	{r7, pc}
 8003868:	2000376c 	.word	0x2000376c
 800386c:	20003769 	.word	0x20003769

08003870 <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 8003876:	4b36      	ldr	r3, [pc, #216]	; (8003950 <enableCntxMenu+0xe0>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d063      	beq.n	8003946 <enableCntxMenu+0xd6>
//		clear rect
		lcdRect(0, 200, 5, 8+(*zekton24font.font_Height)*(actionsNum-1)+28, 0);
 800387e:	231b      	movs	r3, #27
 8003880:	461a      	mov	r2, r3
 8003882:	4b34      	ldr	r3, [pc, #208]	; (8003954 <enableCntxMenu+0xe4>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	3b01      	subs	r3, #1
 8003888:	fb02 f303 	mul.w	r3, r2, r3
 800388c:	3324      	adds	r3, #36	; 0x24
 800388e:	2200      	movs	r2, #0
 8003890:	9200      	str	r2, [sp, #0]
 8003892:	2205      	movs	r2, #5
 8003894:	21c8      	movs	r1, #200	; 0xc8
 8003896:	2000      	movs	r0, #0
 8003898:	f7fe ffd2 	bl	8002840 <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 800389c:	2301      	movs	r3, #1
 800389e:	2206      	movs	r2, #6
 80038a0:	21c8      	movs	r1, #200	; 0xc8
 80038a2:	2000      	movs	r0, #0
 80038a4:	f7fe fe76 	bl	8002594 <lcdHLine>
		lcdHLine(0, 200, 8+(*zekton24font.font_Height)*(actionsNum-1)+28, 1);
 80038a8:	231b      	movs	r3, #27
 80038aa:	461a      	mov	r2, r3
 80038ac:	4b29      	ldr	r3, [pc, #164]	; (8003954 <enableCntxMenu+0xe4>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80038ba:	2301      	movs	r3, #1
 80038bc:	21c8      	movs	r1, #200	; 0xc8
 80038be:	2000      	movs	r0, #0
 80038c0:	f7fe fe68 	bl	8002594 <lcdHLine>
//		create list
		char item[30] = {0};
 80038c4:	2300      	movs	r3, #0
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	60da      	str	r2, [r3, #12]
 80038d4:	611a      	str	r2, [r3, #16]
 80038d6:	615a      	str	r2, [r3, #20]
 80038d8:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 80038da:	2300      	movs	r3, #0
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e018      	b.n	8003912 <enableCntxMenu+0xa2>
			sprintf(&item, ContextActions[i]->name);
 80038e0:	7ffb      	ldrb	r3, [r7, #31]
 80038e2:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <enableCntxMenu+0xe8>)
 80038e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e8:	461a      	mov	r2, r3
 80038ea:	463b      	mov	r3, r7
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f008 fe74 	bl	800c5dc <siprintf>
			lcdPutStr(5, 10+(*zekton24font.font_Height)*i, item, zekton24font);
 80038f4:	221b      	movs	r2, #27
 80038f6:	7ffb      	ldrb	r3, [r7, #31]
 80038f8:	fb13 f302 	smulbb	r3, r3, r2
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	330a      	adds	r3, #10
 8003900:	b2d9      	uxtb	r1, r3
 8003902:	463a      	mov	r2, r7
 8003904:	4b15      	ldr	r3, [pc, #84]	; (800395c <enableCntxMenu+0xec>)
 8003906:	2005      	movs	r0, #5
 8003908:	f7fe fc52 	bl	80021b0 <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 800390c:	7ffb      	ldrb	r3, [r7, #31]
 800390e:	3301      	adds	r3, #1
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <enableCntxMenu+0xe4>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	7ffa      	ldrb	r2, [r7, #31]
 8003918:	429a      	cmp	r2, r3
 800391a:	d3e1      	bcc.n	80038e0 <enableCntxMenu+0x70>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*zekton24font.font_Height)*cntxPosition, 33+(*zekton24font.font_Height)*cntxPosition, 2);
 800391c:	231b      	movs	r3, #27
 800391e:	461a      	mov	r2, r3
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <enableCntxMenu+0xf0>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	fb02 f303 	mul.w	r3, r2, r3
 8003928:	f103 0208 	add.w	r2, r3, #8
 800392c:	231b      	movs	r3, #27
 800392e:	4619      	mov	r1, r3
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <enableCntxMenu+0xf0>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	3321      	adds	r3, #33	; 0x21
 800393a:	2102      	movs	r1, #2
 800393c:	9100      	str	r1, [sp, #0]
 800393e:	21c8      	movs	r1, #200	; 0xc8
 8003940:	2000      	movs	r0, #0
 8003942:	f7fe ff7d 	bl	8002840 <lcdRect>

	}
}
 8003946:	bf00      	nop
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20003769 	.word	0x20003769
 8003954:	20000184 	.word	0x20000184
 8003958:	200001dc 	.word	0x200001dc
 800395c:	08013bbc 	.word	0x08013bbc
 8003960:	2000376a 	.word	0x2000376a

08003964 <setDefaultClbcks>:

#include "gpsModule.h"
#include "font13.h"
#include "digits5x9.h"

static void setDefaultClbcks(void){
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <setDefaultClbcks+0x1c>)
 800396a:	4a06      	ldr	r2, [pc, #24]	; (8003984 <setDefaultClbcks+0x20>)
 800396c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <setDefaultClbcks+0x24>)
 8003970:	4a06      	ldr	r2, [pc, #24]	; (800398c <setDefaultClbcks+0x28>)
 8003972:	611a      	str	r2, [r3, #16]
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000560 	.word	0x20000560
 8003984:	08001d15 	.word	0x08001d15
 8003988:	200005a8 	.word	0x200005a8
 800398c:	08001d25 	.word	0x08001d25

08003990 <gpsSetup>:

void gpsSetup(void){
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8003994:	f7ff ffe6 	bl	8003964 <setDefaultClbcks>

}
 8003998:	bf00      	nop
 800399a:	bd80      	pop	{r7, pc}

0800399c <gpsMain>:

void gpsMain(void){
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af02      	add	r7, sp, #8
//		for(j=0; j<20; j++){
//			lcdHLine2(i, i+j, i*20+j, 1, 3);
//		}
//	}

	lcdRect2(10, 50, 10, 50, 1, 0);
 80039a2:	2300      	movs	r3, #0
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	2301      	movs	r3, #1
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2332      	movs	r3, #50	; 0x32
 80039ac:	220a      	movs	r2, #10
 80039ae:	2132      	movs	r1, #50	; 0x32
 80039b0:	200a      	movs	r0, #10
 80039b2:	f7fe ff6a 	bl	800288a <lcdRect2>
	lcdRect2(60, 100, 10, 50, 1, 1);
 80039b6:	2301      	movs	r3, #1
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	2301      	movs	r3, #1
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2332      	movs	r3, #50	; 0x32
 80039c0:	220a      	movs	r2, #10
 80039c2:	2164      	movs	r1, #100	; 0x64
 80039c4:	203c      	movs	r0, #60	; 0x3c
 80039c6:	f7fe ff60 	bl	800288a <lcdRect2>
	lcdRect2(110, 150, 10, 50, 1, 2);
 80039ca:	2302      	movs	r3, #2
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	2301      	movs	r3, #1
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	2332      	movs	r3, #50	; 0x32
 80039d4:	220a      	movs	r2, #10
 80039d6:	2196      	movs	r1, #150	; 0x96
 80039d8:	206e      	movs	r0, #110	; 0x6e
 80039da:	f7fe ff56 	bl	800288a <lcdRect2>
	lcdRect2(160, 200, 10, 50, 1, 3);
 80039de:	2303      	movs	r3, #3
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	2301      	movs	r3, #1
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2332      	movs	r3, #50	; 0x32
 80039e8:	220a      	movs	r2, #10
 80039ea:	21c8      	movs	r1, #200	; 0xc8
 80039ec:	20a0      	movs	r0, #160	; 0xa0
 80039ee:	f7fe ff4c 	bl	800288a <lcdRect2>
	lcdRect2(210, 250, 10, 50, 1, 4);
 80039f2:	2304      	movs	r3, #4
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	2301      	movs	r3, #1
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	2332      	movs	r3, #50	; 0x32
 80039fc:	220a      	movs	r2, #10
 80039fe:	21fa      	movs	r1, #250	; 0xfa
 8003a00:	20d2      	movs	r0, #210	; 0xd2
 8003a02:	f7fe ff42 	bl	800288a <lcdRect2>
	lcdRect2(260, 300, 10, 50, 1, 5);
 8003a06:	2305      	movs	r3, #5
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2332      	movs	r3, #50	; 0x32
 8003a10:	220a      	movs	r2, #10
 8003a12:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003a16:	f44f 7082 	mov.w	r0, #260	; 0x104
 8003a1a:	f7fe ff36 	bl	800288a <lcdRect2>
	lcdRect2(310, 350, 10, 50, 1, 6);
 8003a1e:	2306      	movs	r3, #6
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	2301      	movs	r3, #1
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2332      	movs	r3, #50	; 0x32
 8003a28:	220a      	movs	r2, #10
 8003a2a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003a2e:	f44f 709b 	mov.w	r0, #310	; 0x136
 8003a32:	f7fe ff2a 	bl	800288a <lcdRect2>
	lcdRect2(10, 50, 60, 100, 1, 7);
 8003a36:	2307      	movs	r3, #7
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2364      	movs	r3, #100	; 0x64
 8003a40:	223c      	movs	r2, #60	; 0x3c
 8003a42:	2132      	movs	r1, #50	; 0x32
 8003a44:	200a      	movs	r0, #10
 8003a46:	f7fe ff20 	bl	800288a <lcdRect2>
	lcdRect2(60, 100, 60, 100, 1, 8);
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	2301      	movs	r3, #1
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2364      	movs	r3, #100	; 0x64
 8003a54:	223c      	movs	r2, #60	; 0x3c
 8003a56:	2164      	movs	r1, #100	; 0x64
 8003a58:	203c      	movs	r0, #60	; 0x3c
 8003a5a:	f7fe ff16 	bl	800288a <lcdRect2>
	lcdRect2(110, 150, 60, 100, 1, 9);
 8003a5e:	2309      	movs	r3, #9
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	2301      	movs	r3, #1
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2364      	movs	r3, #100	; 0x64
 8003a68:	223c      	movs	r2, #60	; 0x3c
 8003a6a:	2196      	movs	r1, #150	; 0x96
 8003a6c:	206e      	movs	r0, #110	; 0x6e
 8003a6e:	f7fe ff0c 	bl	800288a <lcdRect2>
	lcdRect2(160, 200, 60, 100, 1, 10);
 8003a72:	230a      	movs	r3, #10
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	2301      	movs	r3, #1
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2364      	movs	r3, #100	; 0x64
 8003a7c:	223c      	movs	r2, #60	; 0x3c
 8003a7e:	21c8      	movs	r1, #200	; 0xc8
 8003a80:	20a0      	movs	r0, #160	; 0xa0
 8003a82:	f7fe ff02 	bl	800288a <lcdRect2>
	lcdRect2(210, 250, 60, 100, 1, 11);
 8003a86:	230b      	movs	r3, #11
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	2364      	movs	r3, #100	; 0x64
 8003a90:	223c      	movs	r2, #60	; 0x3c
 8003a92:	21fa      	movs	r1, #250	; 0xfa
 8003a94:	20d2      	movs	r0, #210	; 0xd2
 8003a96:	f7fe fef8 	bl	800288a <lcdRect2>
	lcdRect2(260, 300, 60, 100, 1, 12);
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2364      	movs	r3, #100	; 0x64
 8003aa4:	223c      	movs	r2, #60	; 0x3c
 8003aa6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003aaa:	f44f 7082 	mov.w	r0, #260	; 0x104
 8003aae:	f7fe feec 	bl	800288a <lcdRect2>
	lcdRect2(310, 350, 60, 100, 1, 13);
 8003ab2:	230d      	movs	r3, #13
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2364      	movs	r3, #100	; 0x64
 8003abc:	223c      	movs	r2, #60	; 0x3c
 8003abe:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003ac2:	f44f 709b 	mov.w	r0, #310	; 0x136
 8003ac6:	f7fe fee0 	bl	800288a <lcdRect2>
//	lcdRect2(50, 120, 40, 120, 1, 1);
	lcdRect2(10, 390, 110, 230, 1, 4);
 8003aca:	2304      	movs	r3, #4
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	2301      	movs	r3, #1
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	23e6      	movs	r3, #230	; 0xe6
 8003ad4:	226e      	movs	r2, #110	; 0x6e
 8003ad6:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8003ada:	200a      	movs	r0, #10
 8003adc:	f7fe fed5 	bl	800288a <lcdRect2>

//	for(pix=0; pix<=200; pix++){
//		lcdHLine(pix, 2*pix, pix, 1);
//	}
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <setDefaultClbcks>:
	testTime.tm_mday--;
	mktime(&testTime);

}

static void setDefaultClbcks(void){
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <setDefaultClbcks+0x1c>)
 8003aee:	4a06      	ldr	r2, [pc, #24]	; (8003b08 <setDefaultClbcks+0x20>)
 8003af0:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <setDefaultClbcks+0x24>)
 8003af4:	4a06      	ldr	r2, [pc, #24]	; (8003b10 <setDefaultClbcks+0x28>)
 8003af6:	611a      	str	r2, [r3, #16]
//	btn_B1.onContinuousShortPressHandler = &addDay;
//	btn_B3.onContinuousShortPressHandler = &remDay;
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000560 	.word	0x20000560
 8003b08:	08001d15 	.word	0x08001d15
 8003b0c:	200005a8 	.word	0x200005a8
 8003b10:	08001d25 	.word	0x08001d25

08003b14 <localSetup>:
void localSetup(void){
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8003b18:	f7ff ffe6 	bl	8003ae8 <setDefaultClbcks>
	testTime.tm_hour = RtcTime.Hours;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <localSetup+0x50>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <localSetup+0x54>)
 8003b24:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 8003b26:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <localSetup+0x50>)
 8003b28:	785b      	ldrb	r3, [r3, #1]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <localSetup+0x54>)
 8003b2e:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <localSetup+0x50>)
 8003b32:	789b      	ldrb	r3, [r3, #2]
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <localSetup+0x54>)
 8003b38:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <localSetup+0x58>)
 8003b3c:	789b      	ldrb	r3, [r3, #2]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <localSetup+0x54>)
 8003b42:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <localSetup+0x58>)
 8003b46:	785b      	ldrb	r3, [r3, #1]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <localSetup+0x54>)
 8003b4c:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 8003b4e:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <localSetup+0x58>)
 8003b50:	78db      	ldrb	r3, [r3, #3]
 8003b52:	3364      	adds	r3, #100	; 0x64
 8003b54:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <localSetup+0x54>)
 8003b56:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 8003b58:	4803      	ldr	r0, [pc, #12]	; (8003b68 <localSetup+0x54>)
 8003b5a:	f007 fcf1 	bl	800b540 <mktime>
}
 8003b5e:	bf00      	nop
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20003574 	.word	0x20003574
 8003b68:	20003770 	.word	0x20003770
 8003b6c:	20003588 	.word	0x20003588

08003b70 <localMain>:


void localMain(void){
 8003b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b74:	b0c2      	sub	sp, #264	; 0x108
 8003b76:	af00      	add	r7, sp, #0
	testTime.tm_hour = RtcTime.Hours;
 8003b78:	4bdd      	ldr	r3, [pc, #884]	; (8003ef0 <localMain+0x380>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4bdd      	ldr	r3, [pc, #884]	; (8003ef4 <localMain+0x384>)
 8003b80:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 8003b82:	4bdb      	ldr	r3, [pc, #876]	; (8003ef0 <localMain+0x380>)
 8003b84:	785b      	ldrb	r3, [r3, #1]
 8003b86:	461a      	mov	r2, r3
 8003b88:	4bda      	ldr	r3, [pc, #872]	; (8003ef4 <localMain+0x384>)
 8003b8a:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 8003b8c:	4bd8      	ldr	r3, [pc, #864]	; (8003ef0 <localMain+0x380>)
 8003b8e:	789b      	ldrb	r3, [r3, #2]
 8003b90:	461a      	mov	r2, r3
 8003b92:	4bd8      	ldr	r3, [pc, #864]	; (8003ef4 <localMain+0x384>)
 8003b94:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 8003b96:	4bd8      	ldr	r3, [pc, #864]	; (8003ef8 <localMain+0x388>)
 8003b98:	789b      	ldrb	r3, [r3, #2]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4bd5      	ldr	r3, [pc, #852]	; (8003ef4 <localMain+0x384>)
 8003b9e:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8003ba0:	4bd5      	ldr	r3, [pc, #852]	; (8003ef8 <localMain+0x388>)
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	4ad3      	ldr	r2, [pc, #844]	; (8003ef4 <localMain+0x384>)
 8003ba8:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 8003baa:	4bd3      	ldr	r3, [pc, #844]	; (8003ef8 <localMain+0x388>)
 8003bac:	78db      	ldrb	r3, [r3, #3]
 8003bae:	3364      	adds	r3, #100	; 0x64
 8003bb0:	4ad0      	ldr	r2, [pc, #832]	; (8003ef4 <localMain+0x384>)
 8003bb2:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 8003bb4:	48cf      	ldr	r0, [pc, #828]	; (8003ef4 <localMain+0x384>)
 8003bb6:	f007 fcc3 	bl	800b540 <mktime>

	char textBuffer[50] = {0};
 8003bba:	2300      	movs	r3, #0
 8003bbc:	657b      	str	r3, [r7, #84]	; 0x54
 8003bbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bc2:	222e      	movs	r2, #46	; 0x2e
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f007 fbda 	bl	800b380 <memset>
	char textBuffer2[50] = {0};
 8003bcc:	2300      	movs	r3, #0
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd4:	222e      	movs	r2, #46	; 0x2e
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f007 fbd1 	bl	800b380 <memset>
	uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 8003bde:	4bc5      	ldr	r3, [pc, #788]	; (8003ef4 <localMain+0x384>)
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	1d9a      	adds	r2, r3, #6
 8003be4:	4bc5      	ldr	r3, [pc, #788]	; (8003efc <localMain+0x38c>)
 8003be6:	fb83 1302 	smull	r1, r3, r3, r2
 8003bea:	4413      	add	r3, r2
 8003bec:	1099      	asrs	r1, r3, #2
 8003bee:	17d3      	asrs	r3, r2, #31
 8003bf0:	1ac9      	subs	r1, r1, r3
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	1a5b      	subs	r3, r3, r1
 8003bf8:	1ad1      	subs	r1, r2, r3
 8003bfa:	b2cb      	uxtb	r3, r1
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 8003c02:	4bbc      	ldr	r3, [pc, #752]	; (8003ef4 <localMain+0x384>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f103 0208 	add.w	r2, r3, #8
 8003c0a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	4aba      	ldr	r2, [pc, #744]	; (8003efc <localMain+0x38c>)
 8003c12:	fb82 1203 	smull	r1, r2, r2, r3
 8003c16:	441a      	add	r2, r3
 8003c18:	1092      	asrs	r2, r2, #2
 8003c1a:	17db      	asrs	r3, r3, #31
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
	sprintf(&textBuffer, "week %d day %d", weekOfTheYear, testTime.tm_yday+1);
 8003c22:	f897 20fe 	ldrb.w	r2, [r7, #254]	; 0xfe
 8003c26:	4bb3      	ldr	r3, [pc, #716]	; (8003ef4 <localMain+0x384>)
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8003c30:	49b3      	ldr	r1, [pc, #716]	; (8003f00 <localMain+0x390>)
 8003c32:	f008 fcd3 	bl	800c5dc <siprintf>
	lcdPutStr(10, 10, textBuffer, zekton12font);
 8003c36:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003c3a:	4bb2      	ldr	r3, [pc, #712]	; (8003f04 <localMain+0x394>)
 8003c3c:	210a      	movs	r1, #10
 8003c3e:	200a      	movs	r0, #10
 8003c40:	f7fe fab6 	bl	80021b0 <lcdPutStr>

	sprintf(&textBuffer, asctime(&testTime));
 8003c44:	48ab      	ldr	r0, [pc, #684]	; (8003ef4 <localMain+0x384>)
 8003c46:	f007 fae1 	bl	800b20c <asctime>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f008 fcc2 	bl	800c5dc <siprintf>
	lcdPutStr(170, 10, textBuffer, smallestFont);
 8003c58:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003c5c:	4baa      	ldr	r3, [pc, #680]	; (8003f08 <localMain+0x398>)
 8003c5e:	210a      	movs	r1, #10
 8003c60:	20aa      	movs	r0, #170	; 0xaa
 8003c62:	f7fe faa5 	bl	80021b0 <lcdPutStr>
	strftime(&textBuffer, 40, "%Z day:%j week:%U", &testTime);
 8003c66:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8003c6a:	4ba2      	ldr	r3, [pc, #648]	; (8003ef4 <localMain+0x384>)
 8003c6c:	4aa7      	ldr	r2, [pc, #668]	; (8003f0c <localMain+0x39c>)
 8003c6e:	2128      	movs	r1, #40	; 0x28
 8003c70:	f009 fa7e 	bl	800d170 <strftime>
	lcdPutStr(170, 22, textBuffer, smallestFont);
 8003c74:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003c78:	4ba3      	ldr	r3, [pc, #652]	; (8003f08 <localMain+0x398>)
 8003c7a:	2116      	movs	r1, #22
 8003c7c:	20aa      	movs	r0, #170	; 0xaa
 8003c7e:	f7fe fa97 	bl	80021b0 <lcdPutStr>

	uint8_t hhour = testTime.tm_hour;
 8003c82:	4b9c      	ldr	r3, [pc, #624]	; (8003ef4 <localMain+0x384>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	uint8_t mmin = testTime.tm_min;
 8003c8a:	4b9a      	ldr	r3, [pc, #616]	; (8003ef4 <localMain+0x384>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t ssec = testTime.tm_sec;
 8003c92:	4b98      	ldr	r3, [pc, #608]	; (8003ef4 <localMain+0x384>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	int timezone = 2;		// [h] east+ west-
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int dayOfTheYear = testTime.tm_yday+1;
 8003ca0:	4b94      	ldr	r3, [pc, #592]	; (8003ef4 <localMain+0x384>)
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	// fractional year = gamma [rad]
	float fyear = (2*M_PI/365)*(dayOfTheYear-1+(hhour-timezone-12)/24);
 8003caa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003cae:	1e5a      	subs	r2, r3, #1
 8003cb0:	f897 10fd 	ldrb.w	r1, [r7, #253]	; 0xfd
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb8:	1acb      	subs	r3, r1, r3
 8003cba:	3b0c      	subs	r3, #12
 8003cbc:	4994      	ldr	r1, [pc, #592]	; (8003f10 <localMain+0x3a0>)
 8003cbe:	fb81 0103 	smull	r0, r1, r1, r3
 8003cc2:	1089      	asrs	r1, r1, #2
 8003cc4:	17db      	asrs	r3, r3, #31
 8003cc6:	1acb      	subs	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fc44 	bl	8000558 <__aeabi_i2d>
 8003cd0:	a371      	add	r3, pc, #452	; (adr r3, 8003e98 <localMain+0x328>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f7fc fca9 	bl	800062c <__aeabi_dmul>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7fc ff7b 	bl	8000bdc <__aeabi_d2f>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// equation of time [min]
	float eqtime = 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 8003cec:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8003cf0:	f7fc fc44 	bl	800057c <__aeabi_f2d>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	ec43 2b10 	vmov	d0, r2, r3
 8003cfc:	f00c f974 	bl	800ffe8 <cos>
 8003d00:	ec51 0b10 	vmov	r0, r1, d0
 8003d04:	a366      	add	r3, pc, #408	; (adr r3, 8003ea0 <localMain+0x330>)
 8003d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0a:	f7fc fc8f 	bl	800062c <__aeabi_dmul>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	a364      	add	r3, pc, #400	; (adr r3, 8003ea8 <localMain+0x338>)
 8003d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1c:	f7fc fad0 	bl	80002c0 <__adddf3>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4690      	mov	r8, r2
 8003d26:	4699      	mov	r9, r3
 8003d28:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8003d2c:	f7fc fc26 	bl	800057c <__aeabi_f2d>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	ec43 2b10 	vmov	d0, r2, r3
 8003d38:	f00c f9aa 	bl	8010090 <sin>
 8003d3c:	ec51 0b10 	vmov	r0, r1, d0
 8003d40:	a35b      	add	r3, pc, #364	; (adr r3, 8003eb0 <localMain+0x340>)
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	f7fc fc71 	bl	800062c <__aeabi_dmul>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4640      	mov	r0, r8
 8003d50:	4649      	mov	r1, r9
 8003d52:	f7fc fab3 	bl	80002bc <__aeabi_dsub>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4690      	mov	r8, r2
 8003d5c:	4699      	mov	r9, r3
 8003d5e:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003d62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003d66:	ee17 0a90 	vmov	r0, s15
 8003d6a:	f7fc fc07 	bl	800057c <__aeabi_f2d>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	ec43 2b10 	vmov	d0, r2, r3
 8003d76:	f00c f937 	bl	800ffe8 <cos>
 8003d7a:	ec51 0b10 	vmov	r0, r1, d0
 8003d7e:	a34e      	add	r3, pc, #312	; (adr r3, 8003eb8 <localMain+0x348>)
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f7fc fc52 	bl	800062c <__aeabi_dmul>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4640      	mov	r0, r8
 8003d8e:	4649      	mov	r1, r9
 8003d90:	f7fc fa94 	bl	80002bc <__aeabi_dsub>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4690      	mov	r8, r2
 8003d9a:	4699      	mov	r9, r3
 8003d9c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003da0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003da4:	ee17 0a90 	vmov	r0, s15
 8003da8:	f7fc fbe8 	bl	800057c <__aeabi_f2d>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	ec43 2b10 	vmov	d0, r2, r3
 8003db4:	f00c f96c 	bl	8010090 <sin>
 8003db8:	ec51 0b10 	vmov	r0, r1, d0
 8003dbc:	a340      	add	r3, pc, #256	; (adr r3, 8003ec0 <localMain+0x350>)
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f7fc fc33 	bl	800062c <__aeabi_dmul>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4640      	mov	r0, r8
 8003dcc:	4649      	mov	r1, r9
 8003dce:	f7fc fa75 	bl	80002bc <__aeabi_dsub>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	a33b      	add	r3, pc, #236	; (adr r3, 8003ec8 <localMain+0x358>)
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f7fc fc24 	bl	800062c <__aeabi_dmul>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	f7fc fef6 	bl	8000bdc <__aeabi_d2f>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	// solar declination angle [rad]
	float decl = 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 8003df6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8003dfa:	f7fc fbbf 	bl	800057c <__aeabi_f2d>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	ec43 2b10 	vmov	d0, r2, r3
 8003e06:	f00c f8ef 	bl	800ffe8 <cos>
 8003e0a:	ec51 0b10 	vmov	r0, r1, d0
 8003e0e:	a330      	add	r3, pc, #192	; (adr r3, 8003ed0 <localMain+0x360>)
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f7fc fc0a 	bl	800062c <__aeabi_dmul>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	a12e      	add	r1, pc, #184	; (adr r1, 8003ed8 <localMain+0x368>)
 8003e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e22:	f7fc fa4b 	bl	80002bc <__aeabi_dsub>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4690      	mov	r8, r2
 8003e2c:	4699      	mov	r9, r3
 8003e2e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8003e32:	f7fc fba3 	bl	800057c <__aeabi_f2d>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	ec43 2b10 	vmov	d0, r2, r3
 8003e3e:	f00c f927 	bl	8010090 <sin>
 8003e42:	ec51 0b10 	vmov	r0, r1, d0
 8003e46:	a326      	add	r3, pc, #152	; (adr r3, 8003ee0 <localMain+0x370>)
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f7fc fbee 	bl	800062c <__aeabi_dmul>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4640      	mov	r0, r8
 8003e56:	4649      	mov	r1, r9
 8003e58:	f7fc fa32 	bl	80002c0 <__adddf3>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4690      	mov	r8, r2
 8003e62:	4699      	mov	r9, r3
 8003e64:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003e68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e6c:	ee17 0a90 	vmov	r0, s15
 8003e70:	f7fc fb84 	bl	800057c <__aeabi_f2d>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	ec43 2b10 	vmov	d0, r2, r3
 8003e7c:	f00c f8b4 	bl	800ffe8 <cos>
 8003e80:	ec51 0b10 	vmov	r0, r1, d0
 8003e84:	a318      	add	r3, pc, #96	; (adr r3, 8003ee8 <localMain+0x378>)
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f7fc fbcf 	bl	800062c <__aeabi_dmul>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	e03f      	b.n	8003f14 <localMain+0x3a4>
 8003e94:	f3af 8000 	nop.w
 8003e98:	d4b3ac9a 	.word	0xd4b3ac9a
 8003e9c:	3f91a099 	.word	0x3f91a099
 8003ea0:	ba2be059 	.word	0xba2be059
 8003ea4:	3f5e9af5 	.word	0x3f5e9af5
 8003ea8:	30553261 	.word	0x30553261
 8003eac:	3f13a92a 	.word	0x3f13a92a
 8003eb0:	83e8576d 	.word	0x83e8576d
 8003eb4:	3fa06c65 	.word	0x3fa06c65
 8003eb8:	183f91e6 	.word	0x183f91e6
 8003ebc:	3f8dee78 	.word	0x3f8dee78
 8003ec0:	fe260b2d 	.word	0xfe260b2d
 8003ec4:	3fa4ea28 	.word	0x3fa4ea28
 8003ec8:	8f5c28f6 	.word	0x8f5c28f6
 8003ecc:	406ca5c2 	.word	0x406ca5c2
 8003ed0:	8051c9f7 	.word	0x8051c9f7
 8003ed4:	3fd99828 	.word	0x3fd99828
 8003ed8:	7c0f4517 	.word	0x7c0f4517
 8003edc:	3f7c560c 	.word	0x3f7c560c
 8003ee0:	dd50a88f 	.word	0xdd50a88f
 8003ee4:	3fb1fc5c 	.word	0x3fb1fc5c
 8003ee8:	cfc829d0 	.word	0xcfc829d0
 8003eec:	3f7bae46 	.word	0x3f7bae46
 8003ef0:	20003574 	.word	0x20003574
 8003ef4:	20003770 	.word	0x20003770
 8003ef8:	20003588 	.word	0x20003588
 8003efc:	92492493 	.word	0x92492493
 8003f00:	08012b68 	.word	0x08012b68
 8003f04:	08015ea0 	.word	0x08015ea0
 8003f08:	08015a24 	.word	0x08015a24
 8003f0c:	08012b78 	.word	0x08012b78
 8003f10:	2aaaaaab 	.word	0x2aaaaaab
 8003f14:	4640      	mov	r0, r8
 8003f16:	4649      	mov	r1, r9
 8003f18:	f7fc f9d0 	bl	80002bc <__aeabi_dsub>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4690      	mov	r8, r2
 8003f22:	4699      	mov	r9, r3
 8003f24:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003f28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f2c:	ee17 0a90 	vmov	r0, s15
 8003f30:	f7fc fb24 	bl	800057c <__aeabi_f2d>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	ec43 2b10 	vmov	d0, r2, r3
 8003f3c:	f00c f8a8 	bl	8010090 <sin>
 8003f40:	ec51 0b10 	vmov	r0, r1, d0
 8003f44:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	f7fc fb6e 	bl	800062c <__aeabi_dmul>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4640      	mov	r0, r8
 8003f56:	4649      	mov	r1, r9
 8003f58:	f7fc f9b2 	bl	80002c0 <__adddf3>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4690      	mov	r8, r2
 8003f62:	4699      	mov	r9, r3
 8003f64:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003f68:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f70:	ee17 0a90 	vmov	r0, s15
 8003f74:	f7fc fb02 	bl	800057c <__aeabi_f2d>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	ec43 2b10 	vmov	d0, r2, r3
 8003f80:	f00c f832 	bl	800ffe8 <cos>
 8003f84:	ec51 0b10 	vmov	r0, r1, d0
 8003f88:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f7fc fb4c 	bl	800062c <__aeabi_dmul>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4640      	mov	r0, r8
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	f7fc f98e 	bl	80002bc <__aeabi_dsub>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4690      	mov	r8, r2
 8003fa6:	4699      	mov	r9, r3
 8003fa8:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003fac:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb4:	ee17 0a90 	vmov	r0, s15
 8003fb8:	f7fc fae0 	bl	800057c <__aeabi_f2d>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	ec43 2b10 	vmov	d0, r2, r3
 8003fc4:	f00c f864 	bl	8010090 <sin>
 8003fc8:	ec51 0b10 	vmov	r0, r1, d0
 8003fcc:	f20f 4300 	addw	r3, pc, #1024	; 0x400
 8003fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd4:	f7fc fb2a 	bl	800062c <__aeabi_dmul>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4640      	mov	r0, r8
 8003fde:	4649      	mov	r1, r9
 8003fe0:	f7fc f96e 	bl	80002c0 <__adddf3>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	f7fc fdf6 	bl	8000bdc <__aeabi_d2f>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4


	double longitude = 17; 	// [deg]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	4be9      	ldr	r3, [pc, #932]	; (80043a0 <localMain+0x830>)
 8003ffc:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	double latitude = 51;	// [deg]
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	4be7      	ldr	r3, [pc, #924]	; (80043a4 <localMain+0x834>)
 8004006:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	float time_off = eqtime+4*longitude-60*timezone; // time offset [min]
 800400a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800400e:	f7fc fab5 	bl	800057c <__aeabi_f2d>
 8004012:	4680      	mov	r8, r0
 8004014:	4689      	mov	r9, r1
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	4be3      	ldr	r3, [pc, #908]	; (80043a8 <localMain+0x838>)
 800401c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004020:	f7fc fb04 	bl	800062c <__aeabi_dmul>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4640      	mov	r0, r8
 800402a:	4649      	mov	r1, r9
 800402c:	f7fc f948 	bl	80002c0 <__adddf3>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4690      	mov	r8, r2
 8004036:	4699      	mov	r9, r3
 8004038:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4618      	mov	r0, r3
 8004046:	f7fc fa87 	bl	8000558 <__aeabi_i2d>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4640      	mov	r0, r8
 8004050:	4649      	mov	r1, r9
 8004052:	f7fc f933 	bl	80002bc <__aeabi_dsub>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	f7fc fdbd 	bl	8000bdc <__aeabi_d2f>
 8004062:	4603      	mov	r3, r0
 8004064:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float tst = hhour*60+mmin+(float)ssec/60+time_off; // true solar time [min]
 8004068:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	461a      	mov	r2, r3
 8004076:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800407a:	4413      	add	r3, r2
 800407c:	ee07 3a90 	vmov	s15, r3
 8004080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004084:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004088:	ee07 3a90 	vmov	s15, r3
 800408c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004090:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 80043ac <localMain+0x83c>
 8004094:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800409c:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 80040a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040a4:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 80040a8:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80040ac:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80040b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040b4:	ed9f 7abe 	vldr	s14, [pc, #760]	; 80043b0 <localMain+0x840>
 80040b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040bc:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 80040c0:	a3b5      	add	r3, pc, #724	; (adr r3, 8004398 <localMain+0x828>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80040ca:	f7fc faaf 	bl	800062c <__aeabi_dmul>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	4bb6      	ldr	r3, [pc, #728]	; (80043b4 <localMain+0x844>)
 80040dc:	f7fc fbd0 	bl	8000880 <__aeabi_ddiv>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	ec43 2b17 	vmov	d7, r2, r3
 80040e8:	eeb0 0a47 	vmov.f32	s0, s14
 80040ec:	eef0 0a67 	vmov.f32	s1, s15
 80040f0:	f00b ffce 	bl	8010090 <sin>
 80040f4:	ec59 8b10 	vmov	r8, r9, d0
 80040f8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80040fc:	f7fc fa3e 	bl	800057c <__aeabi_f2d>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	ec43 2b10 	vmov	d0, r2, r3
 8004108:	f00b ffc2 	bl	8010090 <sin>
 800410c:	ec53 2b10 	vmov	r2, r3, d0
 8004110:	4640      	mov	r0, r8
 8004112:	4649      	mov	r1, r9
 8004114:	f7fc fa8a 	bl	800062c <__aeabi_dmul>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4690      	mov	r8, r2
 800411e:	4699      	mov	r9, r3
 8004120:	a39d      	add	r3, pc, #628	; (adr r3, 8004398 <localMain+0x828>)
 8004122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004126:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800412a:	f7fc fa7f 	bl	800062c <__aeabi_dmul>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	4b9e      	ldr	r3, [pc, #632]	; (80043b4 <localMain+0x844>)
 800413c:	f7fc fba0 	bl	8000880 <__aeabi_ddiv>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	ec43 2b17 	vmov	d7, r2, r3
 8004148:	eeb0 0a47 	vmov.f32	s0, s14
 800414c:	eef0 0a67 	vmov.f32	s1, s15
 8004150:	f00b ff4a 	bl	800ffe8 <cos>
 8004154:	ec5b ab10 	vmov	sl, fp, d0
 8004158:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800415c:	f7fc fa0e 	bl	800057c <__aeabi_f2d>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	ec43 2b10 	vmov	d0, r2, r3
 8004168:	f00b ff3e 	bl	800ffe8 <cos>
 800416c:	ec53 2b10 	vmov	r2, r3, d0
 8004170:	4650      	mov	r0, sl
 8004172:	4659      	mov	r1, fp
 8004174:	f7fc fa5a 	bl	800062c <__aeabi_dmul>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4692      	mov	sl, r2
 800417e:	469b      	mov	fp, r3
 8004180:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8004184:	f7fc f9fa 	bl	800057c <__aeabi_f2d>
 8004188:	a383      	add	r3, pc, #524	; (adr r3, 8004398 <localMain+0x828>)
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	f7fc fa4d 	bl	800062c <__aeabi_dmul>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	4b85      	ldr	r3, [pc, #532]	; (80043b4 <localMain+0x844>)
 80041a0:	f7fc fb6e 	bl	8000880 <__aeabi_ddiv>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	ec43 2b17 	vmov	d7, r2, r3
 80041ac:	eeb0 0a47 	vmov.f32	s0, s14
 80041b0:	eef0 0a67 	vmov.f32	s1, s15
 80041b4:	f00b ff18 	bl	800ffe8 <cos>
 80041b8:	ec53 2b10 	vmov	r2, r3, d0
 80041bc:	4650      	mov	r0, sl
 80041be:	4659      	mov	r1, fp
 80041c0:	f7fc fa34 	bl	800062c <__aeabi_dmul>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4640      	mov	r0, r8
 80041ca:	4649      	mov	r1, r9
 80041cc:	f7fc f878 	bl	80002c0 <__adddf3>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4610      	mov	r0, r2
 80041d6:	4619      	mov	r1, r3
 80041d8:	f7fc fd00 	bl	8000bdc <__aeabi_d2f>
 80041dc:	4603      	mov	r3, r0
 80041de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float phi = acos(cosphi);
 80041e2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80041e6:	f7fc f9c9 	bl	800057c <__aeabi_f2d>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	ec43 2b10 	vmov	d0, r2, r3
 80041f2:	f00b ffd9 	bl	80101a8 <acos>
 80041f6:	ec53 2b10 	vmov	r2, r3, d0
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	f7fc fced 	bl	8000bdc <__aeabi_d2f>
 8004202:	4603      	mov	r3, r0
 8004204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float sinphi = sqrt(1-cosphi*cosphi);
 8004208:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800420c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004218:	ee17 0a90 	vmov	r0, s15
 800421c:	f7fc f9ae 	bl	800057c <__aeabi_f2d>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	ec43 2b10 	vmov	d0, r2, r3
 8004228:	f00c f862 	bl	80102f0 <sqrt>
 800422c:	ec53 2b10 	vmov	r2, r3, d0
 8004230:	4610      	mov	r0, r2
 8004232:	4619      	mov	r1, r3
 8004234:	f7fc fcd2 	bl	8000bdc <__aeabi_d2f>
 8004238:	4603      	mov	r3, r0
 800423a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 800423e:	a356      	add	r3, pc, #344	; (adr r3, 8004398 <localMain+0x828>)
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004248:	f7fc f9f0 	bl	800062c <__aeabi_dmul>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	4b56      	ldr	r3, [pc, #344]	; (80043b4 <localMain+0x844>)
 800425a:	f7fc fb11 	bl	8000880 <__aeabi_ddiv>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	ec43 2b17 	vmov	d7, r2, r3
 8004266:	eeb0 0a47 	vmov.f32	s0, s14
 800426a:	eef0 0a67 	vmov.f32	s1, s15
 800426e:	f00b ff0f 	bl	8010090 <sin>
 8004272:	ec59 8b10 	vmov	r8, r9, d0
 8004276:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800427a:	f7fc f97f 	bl	800057c <__aeabi_f2d>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4640      	mov	r0, r8
 8004284:	4649      	mov	r1, r9
 8004286:	f7fc f9d1 	bl	800062c <__aeabi_dmul>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4690      	mov	r8, r2
 8004290:	4699      	mov	r9, r3
 8004292:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004296:	f7fc f971 	bl	800057c <__aeabi_f2d>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	ec43 2b10 	vmov	d0, r2, r3
 80042a2:	f00b fef5 	bl	8010090 <sin>
 80042a6:	ec53 2b10 	vmov	r2, r3, d0
 80042aa:	4640      	mov	r0, r8
 80042ac:	4649      	mov	r1, r9
 80042ae:	f7fc f805 	bl	80002bc <__aeabi_dsub>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4614      	mov	r4, r2
 80042b8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80042bc:	a336      	add	r3, pc, #216	; (adr r3, 8004398 <localMain+0x828>)
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80042c6:	f7fc f9b1 	bl	800062c <__aeabi_dmul>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4610      	mov	r0, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <localMain+0x844>)
 80042d8:	f7fc fad2 	bl	8000880 <__aeabi_ddiv>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	ec43 2b17 	vmov	d7, r2, r3
 80042e4:	eeb0 0a47 	vmov.f32	s0, s14
 80042e8:	eef0 0a67 	vmov.f32	s1, s15
 80042ec:	f00b fe7c 	bl	800ffe8 <cos>
 80042f0:	ec59 8b10 	vmov	r8, r9, d0
 80042f4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80042f8:	f7fc f940 	bl	800057c <__aeabi_f2d>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4640      	mov	r0, r8
 8004302:	4649      	mov	r1, r9
 8004304:	f7fc f992 	bl	800062c <__aeabi_dmul>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4620      	mov	r0, r4
 800430e:	4629      	mov	r1, r5
 8004310:	f7fc fab6 	bl	8000880 <__aeabi_ddiv>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	ec43 2b17 	vmov	d7, r2, r3
 800431c:	eeb0 0a47 	vmov.f32	s0, s14
 8004320:	eef0 0a67 	vmov.f32	s1, s15
 8004324:	f00b ff40 	bl	80101a8 <acos>
 8004328:	ec53 2b10 	vmov	r2, r3, d0
 800432c:	4610      	mov	r0, r2
 800432e:	4619      	mov	r1, r3
 8004330:	f7fc fc54 	bl	8000bdc <__aeabi_d2f>
 8004334:	4603      	mov	r3, r0
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef1 7a67 	vneg.f32	s15, s15
 800433e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

	// setting for sunrise/sunset zenith angle [rad]
	double twilightType[] = {0.833, 6, 12, 18}; // twilight, civil, nautical, astronomical
 8004342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800434a:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <localMain+0x848>)
 800434c:	461c      	mov	r4, r3
 800434e:	4615      	mov	r5, r2
 8004350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004354:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double zenith = (90+twilightType[0])*M_PI/180;
 800435c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <localMain+0x84c>)
 800436e:	f7fb ffa7 	bl	80002c0 <__adddf3>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	a307      	add	r3, pc, #28	; (adr r3, 8004398 <localMain+0x828>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f7fc f954 	bl	800062c <__aeabi_dmul>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <localMain+0x844>)
 8004392:	f7fc fa75 	bl	8000880 <__aeabi_ddiv>
 8004396:	e01f      	b.n	80043d8 <localMain+0x868>
 8004398:	54442d18 	.word	0x54442d18
 800439c:	400921fb 	.word	0x400921fb
 80043a0:	40310000 	.word	0x40310000
 80043a4:	40498000 	.word	0x40498000
 80043a8:	40100000 	.word	0x40100000
 80043ac:	42700000 	.word	0x42700000
 80043b0:	43340000 	.word	0x43340000
 80043b4:	40668000 	.word	0x40668000
 80043b8:	08012c50 	.word	0x08012c50
 80043bc:	40568000 	.word	0x40568000
 80043c0:	ab324852 	.word	0xab324852
 80043c4:	3f4db877 	.word	0x3f4db877
 80043c8:	d9839475 	.word	0xd9839475
 80043cc:	3f661804 	.word	0x3f661804
 80043d0:	e646f156 	.word	0xe646f156
 80043d4:	3f583f91 	.word	0x3f583f91
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 80043e0:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 80043e4:	f00b fe00 	bl	800ffe8 <cos>
 80043e8:	ec55 4b10 	vmov	r4, r5, d0
 80043ec:	a3f0      	add	r3, pc, #960	; (adr r3, 80047b0 <localMain+0xc40>)
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80043f6:	f7fc f919 	bl	800062c <__aeabi_dmul>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4610      	mov	r0, r2
 8004400:	4619      	mov	r1, r3
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	4bec      	ldr	r3, [pc, #944]	; (80047b8 <localMain+0xc48>)
 8004408:	f7fc fa3a 	bl	8000880 <__aeabi_ddiv>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	ec43 2b17 	vmov	d7, r2, r3
 8004414:	eeb0 0a47 	vmov.f32	s0, s14
 8004418:	eef0 0a67 	vmov.f32	s1, s15
 800441c:	f00b fde4 	bl	800ffe8 <cos>
 8004420:	ec59 8b10 	vmov	r8, r9, d0
 8004424:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004428:	f7fc f8a8 	bl	800057c <__aeabi_f2d>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	ec43 2b10 	vmov	d0, r2, r3
 8004434:	f00b fdd8 	bl	800ffe8 <cos>
 8004438:	ec53 2b10 	vmov	r2, r3, d0
 800443c:	4640      	mov	r0, r8
 800443e:	4649      	mov	r1, r9
 8004440:	f7fc f8f4 	bl	800062c <__aeabi_dmul>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4620      	mov	r0, r4
 800444a:	4629      	mov	r1, r5
 800444c:	f7fc fa18 	bl	8000880 <__aeabi_ddiv>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4614      	mov	r4, r2
 8004456:	461d      	mov	r5, r3
 8004458:	a3d5      	add	r3, pc, #852	; (adr r3, 80047b0 <localMain+0xc40>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004462:	f7fc f8e3 	bl	800062c <__aeabi_dmul>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	4bd1      	ldr	r3, [pc, #836]	; (80047b8 <localMain+0xc48>)
 8004474:	f7fc fa04 	bl	8000880 <__aeabi_ddiv>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	ec43 2b17 	vmov	d7, r2, r3
 8004480:	eeb0 0a47 	vmov.f32	s0, s14
 8004484:	eef0 0a67 	vmov.f32	s1, s15
 8004488:	f00b fe5a 	bl	8010140 <tan>
 800448c:	ec59 8b10 	vmov	r8, r9, d0
 8004490:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004494:	f7fc f872 	bl	800057c <__aeabi_f2d>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	ec43 2b10 	vmov	d0, r2, r3
 80044a0:	f00b fe4e 	bl	8010140 <tan>
 80044a4:	ec53 2b10 	vmov	r2, r3, d0
 80044a8:	4640      	mov	r0, r8
 80044aa:	4649      	mov	r1, r9
 80044ac:	f7fc f8be 	bl	800062c <__aeabi_dmul>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4620      	mov	r0, r4
 80044b6:	4629      	mov	r1, r5
 80044b8:	f7fb ff00 	bl	80002bc <__aeabi_dsub>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	ec43 2b17 	vmov	d7, r2, r3
 80044c4:	eeb0 0a47 	vmov.f32	s0, s14
 80044c8:	eef0 0a67 	vmov.f32	s1, s15
 80044cc:	f00b fe6c 	bl	80101a8 <acos>
 80044d0:	ec53 2b10 	vmov	r2, r3, d0
 80044d4:	4610      	mov	r0, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	f7fc fb80 	bl	8000bdc <__aeabi_d2f>
 80044dc:	4603      	mov	r3, r0
 80044de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//sunrise/sunset/noon times [min]
	int sunrise = 720-4*(longitude+cha*180/M_PI)-eqtime+60*timezone;
 80044e2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80044e6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80047bc <localMain+0xc4c>
 80044ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ee:	ee17 0a90 	vmov	r0, s15
 80044f2:	f7fc f843 	bl	800057c <__aeabi_f2d>
 80044f6:	a3ae      	add	r3, pc, #696	; (adr r3, 80047b0 <localMain+0xc40>)
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f7fc f9c0 	bl	8000880 <__aeabi_ddiv>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4610      	mov	r0, r2
 8004506:	4619      	mov	r1, r3
 8004508:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800450c:	f7fb fed8 	bl	80002c0 <__adddf3>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4610      	mov	r0, r2
 8004516:	4619      	mov	r1, r3
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	4ba8      	ldr	r3, [pc, #672]	; (80047c0 <localMain+0xc50>)
 800451e:	f7fc f885 	bl	800062c <__aeabi_dmul>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	f04f 0000 	mov.w	r0, #0
 800452a:	49a6      	ldr	r1, [pc, #664]	; (80047c4 <localMain+0xc54>)
 800452c:	f7fb fec6 	bl	80002bc <__aeabi_dsub>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4614      	mov	r4, r2
 8004536:	461d      	mov	r5, r3
 8004538:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800453c:	f7fc f81e 	bl	800057c <__aeabi_f2d>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4620      	mov	r0, r4
 8004546:	4629      	mov	r1, r5
 8004548:	f7fb feb8 	bl	80002bc <__aeabi_dsub>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4614      	mov	r4, r2
 8004552:	461d      	mov	r5, r3
 8004554:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004558:	4613      	mov	r3, r2
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4618      	mov	r0, r3
 8004562:	f7fb fff9 	bl	8000558 <__aeabi_i2d>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4620      	mov	r0, r4
 800456c:	4629      	mov	r1, r5
 800456e:	f7fb fea7 	bl	80002c0 <__adddf3>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	f7fc fb07 	bl	8000b8c <__aeabi_d2iz>
 800457e:	4603      	mov	r3, r0
 8004580:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int sunset = 720-4*(longitude-cha*180/M_PI)-eqtime+60*timezone;
 8004584:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004588:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80047bc <localMain+0xc4c>
 800458c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004590:	ee17 0a90 	vmov	r0, s15
 8004594:	f7fb fff2 	bl	800057c <__aeabi_f2d>
 8004598:	a385      	add	r3, pc, #532	; (adr r3, 80047b0 <localMain+0xc40>)
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	f7fc f96f 	bl	8000880 <__aeabi_ddiv>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80045aa:	f7fb fe87 	bl	80002bc <__aeabi_dsub>
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4610      	mov	r0, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	4b81      	ldr	r3, [pc, #516]	; (80047c0 <localMain+0xc50>)
 80045bc:	f7fc f836 	bl	800062c <__aeabi_dmul>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	f04f 0000 	mov.w	r0, #0
 80045c8:	497e      	ldr	r1, [pc, #504]	; (80047c4 <localMain+0xc54>)
 80045ca:	f7fb fe77 	bl	80002bc <__aeabi_dsub>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4614      	mov	r4, r2
 80045d4:	461d      	mov	r5, r3
 80045d6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80045da:	f7fb ffcf 	bl	800057c <__aeabi_f2d>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4620      	mov	r0, r4
 80045e4:	4629      	mov	r1, r5
 80045e6:	f7fb fe69 	bl	80002bc <__aeabi_dsub>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4614      	mov	r4, r2
 80045f0:	461d      	mov	r5, r3
 80045f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fb ffaa 	bl	8000558 <__aeabi_i2d>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4620      	mov	r0, r4
 800460a:	4629      	mov	r1, r5
 800460c:	f7fb fe58 	bl	80002c0 <__adddf3>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	f7fc fab8 	bl	8000b8c <__aeabi_d2iz>
 800461c:	4603      	mov	r3, r0
 800461e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	int noon = 720-4*longitude-eqtime+60*timezone;
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	4b66      	ldr	r3, [pc, #408]	; (80047c0 <localMain+0xc50>)
 8004628:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800462c:	f7fb fffe 	bl	800062c <__aeabi_dmul>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	f04f 0000 	mov.w	r0, #0
 8004638:	4962      	ldr	r1, [pc, #392]	; (80047c4 <localMain+0xc54>)
 800463a:	f7fb fe3f 	bl	80002bc <__aeabi_dsub>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4614      	mov	r4, r2
 8004644:	461d      	mov	r5, r3
 8004646:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800464a:	f7fb ff97 	bl	800057c <__aeabi_f2d>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4620      	mov	r0, r4
 8004654:	4629      	mov	r1, r5
 8004656:	f7fb fe31 	bl	80002bc <__aeabi_dsub>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4614      	mov	r4, r2
 8004660:	461d      	mov	r5, r3
 8004662:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f7fb ff72 	bl	8000558 <__aeabi_i2d>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4620      	mov	r0, r4
 800467a:	4629      	mov	r1, r5
 800467c:	f7fb fe20 	bl	80002c0 <__adddf3>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	f7fc fa80 	bl	8000b8c <__aeabi_d2iz>
 800468c:	4603      	mov	r3, r0
 800468e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
//	sprintf(&textBuffer, "sa:%f cha:%f", sa, cha);
//	lcdPutStr(0, 210, textBuffer, smallestFont);

	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	sprintf(&textBuffer, "Sunrise: %02d:%02d", sunrise/60, sunrise%60);
 8004692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004696:	4a4c      	ldr	r2, [pc, #304]	; (80047c8 <localMain+0xc58>)
 8004698:	fb82 1203 	smull	r1, r2, r2, r3
 800469c:	441a      	add	r2, r3
 800469e:	1152      	asrs	r2, r2, #5
 80046a0:	17db      	asrs	r3, r3, #31
 80046a2:	1ad4      	subs	r4, r2, r3
 80046a4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80046a8:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <localMain+0xc58>)
 80046aa:	fb83 1302 	smull	r1, r3, r3, r2
 80046ae:	4413      	add	r3, r2
 80046b0:	1159      	asrs	r1, r3, #5
 80046b2:	17d3      	asrs	r3, r2, #31
 80046b4:	1ac9      	subs	r1, r1, r3
 80046b6:	460b      	mov	r3, r1
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a5b      	subs	r3, r3, r1
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	1ad1      	subs	r1, r2, r3
 80046c0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80046c4:	460b      	mov	r3, r1
 80046c6:	4622      	mov	r2, r4
 80046c8:	4940      	ldr	r1, [pc, #256]	; (80047cc <localMain+0xc5c>)
 80046ca:	f007 ff87 	bl	800c5dc <siprintf>
	lcdPutStr(10, 28, textBuffer, zekton12font_bold);
 80046ce:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80046d2:	4b3f      	ldr	r3, [pc, #252]	; (80047d0 <localMain+0xc60>)
 80046d4:	211c      	movs	r1, #28
 80046d6:	200a      	movs	r0, #10
 80046d8:	f7fd fd6a 	bl	80021b0 <lcdPutStr>
	sprintf(&textBuffer, "Noon: %02d:%02d", noon/60, noon%60);
 80046dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046e0:	4a39      	ldr	r2, [pc, #228]	; (80047c8 <localMain+0xc58>)
 80046e2:	fb82 1203 	smull	r1, r2, r2, r3
 80046e6:	441a      	add	r2, r3
 80046e8:	1152      	asrs	r2, r2, #5
 80046ea:	17db      	asrs	r3, r3, #31
 80046ec:	1ad4      	subs	r4, r2, r3
 80046ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80046f2:	4b35      	ldr	r3, [pc, #212]	; (80047c8 <localMain+0xc58>)
 80046f4:	fb83 1302 	smull	r1, r3, r3, r2
 80046f8:	4413      	add	r3, r2
 80046fa:	1159      	asrs	r1, r3, #5
 80046fc:	17d3      	asrs	r3, r2, #31
 80046fe:	1ac9      	subs	r1, r1, r3
 8004700:	460b      	mov	r3, r1
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	1a5b      	subs	r3, r3, r1
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	1ad1      	subs	r1, r2, r3
 800470a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800470e:	460b      	mov	r3, r1
 8004710:	4622      	mov	r2, r4
 8004712:	4930      	ldr	r1, [pc, #192]	; (80047d4 <localMain+0xc64>)
 8004714:	f007 ff62 	bl	800c5dc <siprintf>
	lcdPutStr(10, 44, textBuffer, zekton12font_bold);
 8004718:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800471c:	4b2c      	ldr	r3, [pc, #176]	; (80047d0 <localMain+0xc60>)
 800471e:	212c      	movs	r1, #44	; 0x2c
 8004720:	200a      	movs	r0, #10
 8004722:	f7fd fd45 	bl	80021b0 <lcdPutStr>
	sprintf(&textBuffer, "Sunset: %02d:%02d", sunset/60, sunset%60);
 8004726:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800472a:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <localMain+0xc58>)
 800472c:	fb82 1203 	smull	r1, r2, r2, r3
 8004730:	441a      	add	r2, r3
 8004732:	1152      	asrs	r2, r2, #5
 8004734:	17db      	asrs	r3, r3, #31
 8004736:	1ad4      	subs	r4, r2, r3
 8004738:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800473c:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <localMain+0xc58>)
 800473e:	fb83 1302 	smull	r1, r3, r3, r2
 8004742:	4413      	add	r3, r2
 8004744:	1159      	asrs	r1, r3, #5
 8004746:	17d3      	asrs	r3, r2, #31
 8004748:	1ac9      	subs	r1, r1, r3
 800474a:	460b      	mov	r3, r1
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	1a5b      	subs	r3, r3, r1
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	1ad1      	subs	r1, r2, r3
 8004754:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004758:	460b      	mov	r3, r1
 800475a:	4622      	mov	r2, r4
 800475c:	491e      	ldr	r1, [pc, #120]	; (80047d8 <localMain+0xc68>)
 800475e:	f007 ff3d 	bl	800c5dc <siprintf>
	lcdPutStr(10, 60, textBuffer, zekton12font_bold);
 8004762:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004766:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <localMain+0xc60>)
 8004768:	213c      	movs	r1, #60	; 0x3c
 800476a:	200a      	movs	r0, #10
 800476c:	f7fd fd20 	bl	80021b0 <lcdPutStr>

	sprintf(&textBuffer, "solar elevation angle: %02.3f deg", 90-phi*180/M_PI);
 8004770:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004774:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80047bc <localMain+0xc4c>
 8004778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800477c:	ee17 0a90 	vmov	r0, s15
 8004780:	f7fb fefc 	bl	800057c <__aeabi_f2d>
 8004784:	a30a      	add	r3, pc, #40	; (adr r3, 80047b0 <localMain+0xc40>)
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	f7fc f879 	bl	8000880 <__aeabi_ddiv>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	f04f 0000 	mov.w	r0, #0
 8004796:	4911      	ldr	r1, [pc, #68]	; (80047dc <localMain+0xc6c>)
 8004798:	f7fb fd90 	bl	80002bc <__aeabi_dsub>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80047a4:	490e      	ldr	r1, [pc, #56]	; (80047e0 <localMain+0xc70>)
 80047a6:	f007 ff19 	bl	800c5dc <siprintf>
 80047aa:	e01b      	b.n	80047e4 <localMain+0xc74>
 80047ac:	f3af 8000 	nop.w
 80047b0:	54442d18 	.word	0x54442d18
 80047b4:	400921fb 	.word	0x400921fb
 80047b8:	40668000 	.word	0x40668000
 80047bc:	43340000 	.word	0x43340000
 80047c0:	40100000 	.word	0x40100000
 80047c4:	40868000 	.word	0x40868000
 80047c8:	88888889 	.word	0x88888889
 80047cc:	08012b8c 	.word	0x08012b8c
 80047d0:	08016928 	.word	0x08016928
 80047d4:	08012ba0 	.word	0x08012ba0
 80047d8:	08012bb0 	.word	0x08012bb0
 80047dc:	40568000 	.word	0x40568000
 80047e0:	08012bc4 	.word	0x08012bc4
	lcdPutStr(10, 80, textBuffer, zekton12font_bold);
 80047e4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80047e8:	4b13      	ldr	r3, [pc, #76]	; (8004838 <localMain+0xcc8>)
 80047ea:	2150      	movs	r1, #80	; 0x50
 80047ec:	200a      	movs	r0, #10
 80047ee:	f7fd fcdf 	bl	80021b0 <lcdPutStr>

	double saDeg;
	if(cha<0) saDeg = -sa*180/M_PI;
 80047f2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80047f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fe:	d51f      	bpl.n	8004840 <localMain+0xcd0>
 8004800:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004804:	eef1 7a67 	vneg.f32	s15, s15
 8004808:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800483c <localMain+0xccc>
 800480c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004810:	ee17 0a90 	vmov	r0, s15
 8004814:	f7fb feb2 	bl	800057c <__aeabi_f2d>
 8004818:	a305      	add	r3, pc, #20	; (adr r3, 8004830 <localMain+0xcc0>)
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f7fc f82f 	bl	8000880 <__aeabi_ddiv>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 800482a:	e025      	b.n	8004878 <localMain+0xd08>
 800482c:	f3af 8000 	nop.w
 8004830:	54442d18 	.word	0x54442d18
 8004834:	400921fb 	.word	0x400921fb
 8004838:	08016928 	.word	0x08016928
 800483c:	43340000 	.word	0x43340000
	else saDeg = 360+sa*180/M_PI;
 8004840:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004844:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 800483c <localMain+0xccc>
 8004848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800484c:	ee17 0a90 	vmov	r0, s15
 8004850:	f7fb fe94 	bl	800057c <__aeabi_f2d>
 8004854:	a3db      	add	r3, pc, #876	; (adr r3, 8004bc4 <localMain+0x1054>)
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	f7fc f811 	bl	8000880 <__aeabi_ddiv>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4610      	mov	r0, r2
 8004864:	4619      	mov	r1, r3
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	4bcb      	ldr	r3, [pc, #812]	; (8004b98 <localMain+0x1028>)
 800486c:	f7fb fd28 	bl	80002c0 <__adddf3>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", saDeg);
 8004878:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800487c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8004880:	49c6      	ldr	r1, [pc, #792]	; (8004b9c <localMain+0x102c>)
 8004882:	f007 feab 	bl	800c5dc <siprintf>
//	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", fmod(360+sa*180/M_PI, 360));
	lcdPutStr(10, 96, textBuffer, zekton12font_bold);
 8004886:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800488a:	4bc5      	ldr	r3, [pc, #788]	; (8004ba0 <localMain+0x1030>)
 800488c:	2160      	movs	r1, #96	; 0x60
 800488e:	200a      	movs	r0, #10
 8004890:	f7fd fc8e 	bl	80021b0 <lcdPutStr>

	double perc = (hhour*60+mmin+(double)ssec/60-sunrise)*100/(sunset-sunrise);
 8004894:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	461a      	mov	r2, r3
 80048a2:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80048a6:	4413      	add	r3, r2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fb fe55 	bl	8000558 <__aeabi_i2d>
 80048ae:	4604      	mov	r4, r0
 80048b0:	460d      	mov	r5, r1
 80048b2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fb fe3e 	bl	8000538 <__aeabi_ui2d>
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	4bb8      	ldr	r3, [pc, #736]	; (8004ba4 <localMain+0x1034>)
 80048c2:	f7fb ffdd 	bl	8000880 <__aeabi_ddiv>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4620      	mov	r0, r4
 80048cc:	4629      	mov	r1, r5
 80048ce:	f7fb fcf7 	bl	80002c0 <__adddf3>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4614      	mov	r4, r2
 80048d8:	461d      	mov	r5, r3
 80048da:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80048de:	f7fb fe3b 	bl	8000558 <__aeabi_i2d>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4620      	mov	r0, r4
 80048e8:	4629      	mov	r1, r5
 80048ea:	f7fb fce7 	bl	80002bc <__aeabi_dsub>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	4bab      	ldr	r3, [pc, #684]	; (8004ba8 <localMain+0x1038>)
 80048fc:	f7fb fe96 	bl	800062c <__aeabi_dmul>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4614      	mov	r4, r2
 8004906:	461d      	mov	r5, r3
 8004908:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800490c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	4618      	mov	r0, r3
 8004914:	f7fb fe20 	bl	8000558 <__aeabi_i2d>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4620      	mov	r0, r4
 800491e:	4629      	mov	r1, r5
 8004920:	f7fb ffae 	bl	8000880 <__aeabi_ddiv>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	sprintf(&textBuffer, "percentage daylight: %2.3f%%", perc);
 800492c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004930:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004934:	499d      	ldr	r1, [pc, #628]	; (8004bac <localMain+0x103c>)
 8004936:	f007 fe51 	bl	800c5dc <siprintf>
	lcdPutStr(10, 116, textBuffer, zekton12font_bold);
 800493a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800493e:	4b98      	ldr	r3, [pc, #608]	; (8004ba0 <localMain+0x1030>)
 8004940:	2174      	movs	r1, #116	; 0x74
 8004942:	200a      	movs	r0, #10
 8004944:	f7fd fc34 	bl	80021b0 <lcdPutStr>
	sprintf(&textBuffer, "day length: %02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 8004948:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800494c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	4a97      	ldr	r2, [pc, #604]	; (8004bb0 <localMain+0x1040>)
 8004954:	fb82 1203 	smull	r1, r2, r2, r3
 8004958:	441a      	add	r2, r3
 800495a:	1152      	asrs	r2, r2, #5
 800495c:	17db      	asrs	r3, r3, #31
 800495e:	1ad4      	subs	r4, r2, r3
 8004960:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004964:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004968:	1ad2      	subs	r2, r2, r3
 800496a:	4b91      	ldr	r3, [pc, #580]	; (8004bb0 <localMain+0x1040>)
 800496c:	fb83 1302 	smull	r1, r3, r3, r2
 8004970:	4413      	add	r3, r2
 8004972:	1159      	asrs	r1, r3, #5
 8004974:	17d3      	asrs	r3, r2, #31
 8004976:	1ac9      	subs	r1, r1, r3
 8004978:	460b      	mov	r3, r1
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	1a5b      	subs	r3, r3, r1
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	1ad1      	subs	r1, r2, r3
 8004982:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004986:	460b      	mov	r3, r1
 8004988:	4622      	mov	r2, r4
 800498a:	498a      	ldr	r1, [pc, #552]	; (8004bb4 <localMain+0x1044>)
 800498c:	f007 fe26 	bl	800c5dc <siprintf>
	lcdPutStr(10, 132, textBuffer, zekton12font_bold);
 8004990:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004994:	4b82      	ldr	r3, [pc, #520]	; (8004ba0 <localMain+0x1030>)
 8004996:	2184      	movs	r1, #132	; 0x84
 8004998:	200a      	movs	r0, #10
 800499a:	f7fd fc09 	bl	80021b0 <lcdPutStr>

	uint16_t scaleXrise = 10+380*sunrise/(24*60-0);
 800499e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049a2:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	4a83      	ldr	r2, [pc, #524]	; (8004bb8 <localMain+0x1048>)
 80049ac:	fb82 1203 	smull	r1, r2, r2, r3
 80049b0:	441a      	add	r2, r3
 80049b2:	1292      	asrs	r2, r2, #10
 80049b4:	17db      	asrs	r3, r3, #31
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	330a      	adds	r3, #10
 80049bc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t scaleXset = 10+380*sunset/(24*60-0);
 80049c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049c4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	4a7a      	ldr	r2, [pc, #488]	; (8004bb8 <localMain+0x1048>)
 80049ce:	fb82 1203 	smull	r1, r2, r2, r3
 80049d2:	441a      	add	r2, r3
 80049d4:	1292      	asrs	r2, r2, #10
 80049d6:	17db      	asrs	r3, r3, #31
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	b29b      	uxth	r3, r3
 80049dc:	330a      	adds	r3, #10
 80049de:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t scaleXnoon = 10+380*noon/(24*60-0);
 80049e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049e6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	4a72      	ldr	r2, [pc, #456]	; (8004bb8 <localMain+0x1048>)
 80049f0:	fb82 1203 	smull	r1, r2, r2, r3
 80049f4:	441a      	add	r2, r3
 80049f6:	1292      	asrs	r2, r2, #10
 80049f8:	17db      	asrs	r3, r3, #31
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	330a      	adds	r3, #10
 8004a00:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t scaleXnow = 10+380*(hhour*60+mmin)/(24*60-0);
 8004a04:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8004a08:	4613      	mov	r3, r2
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	461a      	mov	r2, r3
 8004a12:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004a16:	4413      	add	r3, r2
 8004a18:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8004a1c:	fb02 f303 	mul.w	r3, r2, r3
 8004a20:	4a65      	ldr	r2, [pc, #404]	; (8004bb8 <localMain+0x1048>)
 8004a22:	fb82 1203 	smull	r1, r2, r2, r3
 8004a26:	441a      	add	r2, r3
 8004a28:	1292      	asrs	r2, r2, #10
 8004a2a:	17db      	asrs	r3, r3, #31
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	330a      	adds	r3, #10
 8004a32:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	lcdHLine(10,399-10,165,1);
 8004a36:	2301      	movs	r3, #1
 8004a38:	22a5      	movs	r2, #165	; 0xa5
 8004a3a:	f240 1185 	movw	r1, #389	; 0x185
 8004a3e:	200a      	movs	r0, #10
 8004a40:	f7fd fda8 	bl	8002594 <lcdHLine>
	lcdVLine(10, 163, 167, 1);
 8004a44:	2301      	movs	r3, #1
 8004a46:	22a7      	movs	r2, #167	; 0xa7
 8004a48:	21a3      	movs	r1, #163	; 0xa3
 8004a4a:	200a      	movs	r0, #10
 8004a4c:	f7fd fbde 	bl	800220c <lcdVLine>
	lcdVLine(399-10, 163, 167, 1);
 8004a50:	2301      	movs	r3, #1
 8004a52:	22a7      	movs	r2, #167	; 0xa7
 8004a54:	21a3      	movs	r1, #163	; 0xa3
 8004a56:	f240 1085 	movw	r0, #389	; 0x185
 8004a5a:	f7fd fbd7 	bl	800220c <lcdVLine>
	lcdVLine(scaleXrise, 160, 170, 2);
 8004a5e:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 8004a62:	2302      	movs	r3, #2
 8004a64:	22aa      	movs	r2, #170	; 0xaa
 8004a66:	21a0      	movs	r1, #160	; 0xa0
 8004a68:	f7fd fbd0 	bl	800220c <lcdVLine>
	lcdVLine(scaleXset, 160, 170, 2);
 8004a6c:	f8b7 008c 	ldrh.w	r0, [r7, #140]	; 0x8c
 8004a70:	2302      	movs	r3, #2
 8004a72:	22aa      	movs	r2, #170	; 0xaa
 8004a74:	21a0      	movs	r1, #160	; 0xa0
 8004a76:	f7fd fbc9 	bl	800220c <lcdVLine>
	lcdVLine(scaleXnoon, 160, 170, 2);
 8004a7a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004a7e:	2302      	movs	r3, #2
 8004a80:	22aa      	movs	r2, #170	; 0xaa
 8004a82:	21a0      	movs	r1, #160	; 0xa0
 8004a84:	f7fd fbc2 	bl	800220c <lcdVLine>
	lcdVLine(scaleXnow, 155, 175, 2);
 8004a88:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	22af      	movs	r2, #175	; 0xaf
 8004a90:	219b      	movs	r1, #155	; 0x9b
 8004a92:	f7fd fbbb 	bl	800220c <lcdVLine>

	sprintf(&textBuffer, "%02d:%02d", sunrise/60, sunrise%60);
 8004a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a9a:	4a45      	ldr	r2, [pc, #276]	; (8004bb0 <localMain+0x1040>)
 8004a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8004aa0:	441a      	add	r2, r3
 8004aa2:	1152      	asrs	r2, r2, #5
 8004aa4:	17db      	asrs	r3, r3, #31
 8004aa6:	1ad4      	subs	r4, r2, r3
 8004aa8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004aac:	4b40      	ldr	r3, [pc, #256]	; (8004bb0 <localMain+0x1040>)
 8004aae:	fb83 1302 	smull	r1, r3, r3, r2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	1159      	asrs	r1, r3, #5
 8004ab6:	17d3      	asrs	r3, r2, #31
 8004ab8:	1ac9      	subs	r1, r1, r3
 8004aba:	460b      	mov	r3, r1
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	1a5b      	subs	r3, r3, r1
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	1ad1      	subs	r1, r2, r3
 8004ac4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4622      	mov	r2, r4
 8004acc:	493b      	ldr	r1, [pc, #236]	; (8004bbc <localMain+0x104c>)
 8004ace:	f007 fd85 	bl	800c5dc <siprintf>
	lcdPutStr(scaleXrise-19, 170, textBuffer, smallestFont);
 8004ad2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004ad6:	3b13      	subs	r3, #19
 8004ad8:	b298      	uxth	r0, r3
 8004ada:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004ade:	4b38      	ldr	r3, [pc, #224]	; (8004bc0 <localMain+0x1050>)
 8004ae0:	21aa      	movs	r1, #170	; 0xaa
 8004ae2:	f7fd fb65 	bl	80021b0 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", sunset/60, sunset%60);
 8004ae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004aea:	4a31      	ldr	r2, [pc, #196]	; (8004bb0 <localMain+0x1040>)
 8004aec:	fb82 1203 	smull	r1, r2, r2, r3
 8004af0:	441a      	add	r2, r3
 8004af2:	1152      	asrs	r2, r2, #5
 8004af4:	17db      	asrs	r3, r3, #31
 8004af6:	1ad4      	subs	r4, r2, r3
 8004af8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004afc:	4b2c      	ldr	r3, [pc, #176]	; (8004bb0 <localMain+0x1040>)
 8004afe:	fb83 1302 	smull	r1, r3, r3, r2
 8004b02:	4413      	add	r3, r2
 8004b04:	1159      	asrs	r1, r3, #5
 8004b06:	17d3      	asrs	r3, r2, #31
 8004b08:	1ac9      	subs	r1, r1, r3
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	1a5b      	subs	r3, r3, r1
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	1ad1      	subs	r1, r2, r3
 8004b14:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	4927      	ldr	r1, [pc, #156]	; (8004bbc <localMain+0x104c>)
 8004b1e:	f007 fd5d 	bl	800c5dc <siprintf>
	lcdPutStr(scaleXset-19, 170, textBuffer, smallestFont);
 8004b22:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b26:	3b13      	subs	r3, #19
 8004b28:	b298      	uxth	r0, r3
 8004b2a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004b2e:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <localMain+0x1050>)
 8004b30:	21aa      	movs	r1, #170	; 0xaa
 8004b32:	f7fd fb3d 	bl	80021b0 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", noon/60, noon%60);
 8004b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b3a:	4a1d      	ldr	r2, [pc, #116]	; (8004bb0 <localMain+0x1040>)
 8004b3c:	fb82 1203 	smull	r1, r2, r2, r3
 8004b40:	441a      	add	r2, r3
 8004b42:	1152      	asrs	r2, r2, #5
 8004b44:	17db      	asrs	r3, r3, #31
 8004b46:	1ad4      	subs	r4, r2, r3
 8004b48:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <localMain+0x1040>)
 8004b4e:	fb83 1302 	smull	r1, r3, r3, r2
 8004b52:	4413      	add	r3, r2
 8004b54:	1159      	asrs	r1, r3, #5
 8004b56:	17d3      	asrs	r3, r2, #31
 8004b58:	1ac9      	subs	r1, r1, r3
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	1a5b      	subs	r3, r3, r1
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	1ad1      	subs	r1, r2, r3
 8004b64:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4622      	mov	r2, r4
 8004b6c:	4913      	ldr	r1, [pc, #76]	; (8004bbc <localMain+0x104c>)
 8004b6e:	f007 fd35 	bl	800c5dc <siprintf>
	lcdPutStr(scaleXnoon-19, 170, textBuffer, smallestFont);
 8004b72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b76:	3b13      	subs	r3, #19
 8004b78:	b298      	uxth	r0, r3
 8004b7a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004b7e:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <localMain+0x1050>)
 8004b80:	21aa      	movs	r1, #170	; 0xaa
 8004b82:	f7fd fb15 	bl	80021b0 <lcdPutStr>
}
 8004b86:	bf00      	nop
 8004b88:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b92:	bf00      	nop
 8004b94:	f3af 8000 	nop.w
 8004b98:	40768000 	.word	0x40768000
 8004b9c:	08012be8 	.word	0x08012be8
 8004ba0:	08016928 	.word	0x08016928
 8004ba4:	404e0000 	.word	0x404e0000
 8004ba8:	40590000 	.word	0x40590000
 8004bac:	08012c08 	.word	0x08012c08
 8004bb0:	88888889 	.word	0x88888889
 8004bb4:	08012c28 	.word	0x08012c28
 8004bb8:	b60b60b7 	.word	0xb60b60b7
 8004bbc:	08012c44 	.word	0x08012c44
 8004bc0:	08015a24 	.word	0x08015a24
 8004bc4:	54442d18 	.word	0x54442d18
 8004bc8:	400921fb 	.word	0x400921fb

08004bcc <prevPage>:
#include "fonts/ocrFont.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
	if(currentPage>0){
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <prevPage+0x30>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d006      	beq.n	8004be6 <prevPage+0x1a>
		currentPage--;
 8004bd8:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <prevPage+0x30>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <prevPage+0x30>)
 8004be2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 8004be4:	e005      	b.n	8004bf2 <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <prevPage+0x34>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <prevPage+0x30>)
 8004bf0:	701a      	strb	r2, [r3, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	20003794 	.word	0x20003794
 8004c00:	20000185 	.word	0x20000185

08004c04 <nextPage>:
void nextPage(void){
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <nextPage+0x34>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <nextPage+0x38>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	429a      	cmp	r2, r3
 8004c16:	da06      	bge.n	8004c26 <nextPage+0x22>
		currentPage++;
 8004c18:	4b07      	ldr	r3, [pc, #28]	; (8004c38 <nextPage+0x34>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <nextPage+0x34>)
 8004c22:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 8004c24:	e002      	b.n	8004c2c <nextPage+0x28>
		currentPage=0;
 8004c26:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <nextPage+0x34>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20003794 	.word	0x20003794
 8004c3c:	20000185 	.word	0x20000185

08004c40 <showPage1>:

void showPage1(void){
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b090      	sub	sp, #64	; 0x40
 8004c44:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8004c46:	2300      	movs	r3, #0
 8004c48:	623b      	str	r3, [r7, #32]
 8004c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	609a      	str	r2, [r3, #8]
 8004c56:	60da      	str	r2, [r3, #12]
 8004c58:	611a      	str	r2, [r3, #16]
 8004c5a:	615a      	str	r2, [r3, #20]
 8004c5c:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 8004c5e:	2300      	movs	r3, #0
 8004c60:	603b      	str	r3, [r7, #0]
 8004c62:	1d3b      	adds	r3, r7, #4
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	611a      	str	r2, [r3, #16]
 8004c70:	615a      	str	r2, [r3, #20]
 8004c72:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d%02d", RtcTime.Hours, RtcTime.Minutes);
 8004c74:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <showPage1+0x7c>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <showPage1+0x7c>)
 8004c7c:	785b      	ldrb	r3, [r3, #1]
 8004c7e:	4638      	mov	r0, r7
 8004c80:	490f      	ldr	r1, [pc, #60]	; (8004cc0 <showPage1+0x80>)
 8004c82:	f007 fcab 	bl	800c5dc <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		sprintf(&fracStr, "%02d", RtcTime.Seconds);
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <showPage1+0x7c>)
 8004c88:	789b      	ldrb	r3, [r3, #2]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f107 0320 	add.w	r3, r7, #32
 8004c90:	490c      	ldr	r1, [pc, #48]	; (8004cc4 <showPage1+0x84>)
 8004c92:	4618      	mov	r0, r3
 8004c94:	f007 fca2 	bl	800c5dc <siprintf>
		lcdPutStr(0, 0, timeStr, bigDigitsLarabie);
 8004c98:	463a      	mov	r2, r7
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <showPage1+0x88>)
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f7fd fa86 	bl	80021b0 <lcdPutStr>
		lcdPutStr(300, 0, fracStr, fontLarabieMedium);
 8004ca4:	f107 0220 	add.w	r2, r7, #32
 8004ca8:	4b08      	ldr	r3, [pc, #32]	; (8004ccc <showPage1+0x8c>)
 8004caa:	2100      	movs	r1, #0
 8004cac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004cb0:	f7fd fa7e 	bl	80021b0 <lcdPutStr>
}
 8004cb4:	bf00      	nop
 8004cb6:	3740      	adds	r7, #64	; 0x40
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20003574 	.word	0x20003574
 8004cc0:	08012d28 	.word	0x08012d28
 8004cc4:	08012d34 	.word	0x08012d34
 8004cc8:	0801840c 	.word	0x0801840c
 8004ccc:	0801c528 	.word	0x0801c528

08004cd0 <showPage2>:
void showPage2(void){
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	603b      	str	r3, [r7, #0]
 8004cda:	1d3b      	adds	r3, r7, #4
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	611a      	str	r2, [r3, #16]
 8004ce8:	615a      	str	r2, [r3, #20]
 8004cea:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 2: STW");
 8004cec:	463b      	mov	r3, r7
 8004cee:	4907      	ldr	r1, [pc, #28]	; (8004d0c <showPage2+0x3c>)
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f007 fc73 	bl	800c5dc <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 8004cf6:	463a      	mov	r2, r7
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <showPage2+0x40>)
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f7fd fa57 	bl	80021b0 <lcdPutStr>
}
 8004d02:	bf00      	nop
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	08012d3c 	.word	0x08012d3c
 8004d10:	0801c528 	.word	0x0801c528

08004d14 <showPage3>:
void showPage3(void){
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	1d3b      	adds	r3, r7, #4
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	60da      	str	r2, [r3, #12]
 8004d2a:	611a      	str	r2, [r3, #16]
 8004d2c:	615a      	str	r2, [r3, #20]
 8004d2e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 8004d30:	463b      	mov	r3, r7
 8004d32:	4907      	ldr	r1, [pc, #28]	; (8004d50 <showPage3+0x3c>)
 8004d34:	4618      	mov	r0, r3
 8004d36:	f007 fc51 	bl	800c5dc <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 8004d3a:	463a      	mov	r2, r7
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <showPage3+0x40>)
 8004d3e:	2100      	movs	r1, #0
 8004d40:	2000      	movs	r0, #0
 8004d42:	f7fd fa35 	bl	80021b0 <lcdPutStr>
}
 8004d46:	bf00      	nop
 8004d48:	3720      	adds	r7, #32
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	08012d48 	.word	0x08012d48
 8004d54:	0801c528 	.word	0x0801c528

08004d58 <showPage4>:
void showPage4(void){
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8004d5e:	2300      	movs	r3, #0
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	1d3b      	adds	r3, r7, #4
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	611a      	str	r2, [r3, #16]
 8004d70:	615a      	str	r2, [r3, #20]
 8004d72:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 8004d74:	463b      	mov	r3, r7
 8004d76:	4907      	ldr	r1, [pc, #28]	; (8004d94 <showPage4+0x3c>)
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f007 fc2f 	bl	800c5dc <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 8004d7e:	463a      	mov	r2, r7
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <showPage4+0x40>)
 8004d82:	2100      	movs	r1, #0
 8004d84:	2000      	movs	r0, #0
 8004d86:	f7fd fa13 	bl	80021b0 <lcdPutStr>
}
 8004d8a:	bf00      	nop
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	08012d54 	.word	0x08012d54
 8004d98:	0801c528 	.word	0x0801c528

08004d9c <showPage5>:
void showPage5(void){
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8004da2:	2300      	movs	r3, #0
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	605a      	str	r2, [r3, #4]
 8004dae:	609a      	str	r2, [r3, #8]
 8004db0:	60da      	str	r2, [r3, #12]
 8004db2:	611a      	str	r2, [r3, #16]
 8004db4:	615a      	str	r2, [r3, #20]
 8004db6:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 5: WRLD");
 8004db8:	463b      	mov	r3, r7
 8004dba:	4907      	ldr	r1, [pc, #28]	; (8004dd8 <showPage5+0x3c>)
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f007 fc0d 	bl	800c5dc <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 8004dc2:	463a      	mov	r2, r7
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <showPage5+0x40>)
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2000      	movs	r0, #0
 8004dca:	f7fd f9f1 	bl	80021b0 <lcdPutStr>
}
 8004dce:	bf00      	nop
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	08012d60 	.word	0x08012d60
 8004ddc:	0801c528 	.word	0x0801c528

08004de0 <showPage6>:
void showPage6(void){
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8004de6:	2300      	movs	r3, #0
 8004de8:	603b      	str	r3, [r7, #0]
 8004dea:	1d3b      	adds	r3, r7, #4
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	605a      	str	r2, [r3, #4]
 8004df2:	609a      	str	r2, [r3, #8]
 8004df4:	60da      	str	r2, [r3, #12]
 8004df6:	611a      	str	r2, [r3, #16]
 8004df8:	615a      	str	r2, [r3, #20]
 8004dfa:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 6: DLT");
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	4907      	ldr	r1, [pc, #28]	; (8004e1c <showPage6+0x3c>)
 8004e00:	4618      	mov	r0, r3
 8004e02:	f007 fbeb 	bl	800c5dc <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 8004e06:	463a      	mov	r2, r7
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <showPage6+0x40>)
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	f7fd f9cf 	bl	80021b0 <lcdPutStr>
}
 8004e12:	bf00      	nop
 8004e14:	3720      	adds	r7, #32
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	08012d70 	.word	0x08012d70
 8004e20:	0801c528 	.word	0x0801c528

08004e24 <showPage>:

void showPage(uint8_t pageNum){
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	d821      	bhi.n	8004e78 <showPage+0x54>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <showPage+0x18>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e55 	.word	0x08004e55
 8004e40:	08004e5b 	.word	0x08004e5b
 8004e44:	08004e61 	.word	0x08004e61
 8004e48:	08004e67 	.word	0x08004e67
 8004e4c:	08004e6d 	.word	0x08004e6d
 8004e50:	08004e73 	.word	0x08004e73
	case 0:
		showPage1();
 8004e54:	f7ff fef4 	bl	8004c40 <showPage1>
		break;
 8004e58:	e00e      	b.n	8004e78 <showPage+0x54>
	case 1:
		showPage2();
 8004e5a:	f7ff ff39 	bl	8004cd0 <showPage2>
		break;
 8004e5e:	e00b      	b.n	8004e78 <showPage+0x54>
	case 2:
		showPage3();
 8004e60:	f7ff ff58 	bl	8004d14 <showPage3>
		break;
 8004e64:	e008      	b.n	8004e78 <showPage+0x54>
	case 3:
		showPage4();
 8004e66:	f7ff ff77 	bl	8004d58 <showPage4>
		break;
 8004e6a:	e005      	b.n	8004e78 <showPage+0x54>
	case 4:
		showPage5();
 8004e6c:	f7ff ff96 	bl	8004d9c <showPage5>
		break;
 8004e70:	e002      	b.n	8004e78 <showPage+0x54>
	case 5:
		showPage6();
 8004e72:	f7ff ffb5 	bl	8004de0 <showPage6>
		break;
 8004e76:	bf00      	nop
	}
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8004e84:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <setDefaultClbcks+0x28>)
 8004e86:	4a09      	ldr	r2, [pc, #36]	; (8004eac <setDefaultClbcks+0x2c>)
 8004e88:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <setDefaultClbcks+0x30>)
 8004e8c:	4a09      	ldr	r2, [pc, #36]	; (8004eb4 <setDefaultClbcks+0x34>)
 8004e8e:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 8004e90:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <setDefaultClbcks+0x38>)
 8004e92:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <setDefaultClbcks+0x3c>)
 8004e94:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8004e96:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <setDefaultClbcks+0x40>)
 8004e98:	4a0a      	ldr	r2, [pc, #40]	; (8004ec4 <setDefaultClbcks+0x44>)
 8004e9a:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000560 	.word	0x20000560
 8004eac:	08001d15 	.word	0x08001d15
 8004eb0:	200005a8 	.word	0x200005a8
 8004eb4:	08001d25 	.word	0x08001d25
 8004eb8:	20000614 	.word	0x20000614
 8004ebc:	08004bcd 	.word	0x08004bcd
 8004ec0:	200005cc 	.word	0x200005cc
 8004ec4:	08004c05 	.word	0x08004c05

08004ec8 <settingsSetup>:


void settingsSetup(void){
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8004ecc:	f7ff ffd8 	bl	8004e80 <setDefaultClbcks>
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <settingsMain>:

void settingsMain(void){
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8004eda:	2300      	movs	r3, #0
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	1d3b      	adds	r3, r7, #4
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	605a      	str	r2, [r3, #4]
 8004ee6:	609a      	str	r2, [r3, #8]
 8004ee8:	60da      	str	r2, [r3, #12]
 8004eea:	611a      	str	r2, [r3, #16]
 8004eec:	615a      	str	r2, [r3, #20]
 8004eee:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr, "Settings will be shown");
 8004ef0:	463b      	mov	r3, r7
 8004ef2:	4909      	ldr	r1, [pc, #36]	; (8004f18 <settingsMain+0x44>)
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f007 fb71 	bl	800c5dc <siprintf>
	lcdPutStr(0, 0, tempStr, font13);
 8004efa:	463a      	mov	r2, r7
 8004efc:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <settingsMain+0x48>)
 8004efe:	2100      	movs	r1, #0
 8004f00:	2000      	movs	r0, #0
 8004f02:	f7fd f955 	bl	80021b0 <lcdPutStr>
	showPage(currentPage);
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <settingsMain+0x4c>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff ff8a 	bl	8004e24 <showPage>

}
 8004f10:	bf00      	nop
 8004f12:	3720      	adds	r7, #32
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	08012d7c 	.word	0x08012d7c
 8004f1c:	080173b0 	.word	0x080173b0
 8004f20:	20003794 	.word	0x20003794

08004f24 <startStopwatch>:
#include "fonts/zekton24.h"

#include <fonts/zekton45.h>
#include "stopwatchModule.h"

void startStopwatch(){
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
	stwStart();
 8004f28:	f7fd ffca 	bl	8002ec0 <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <startStopwatch+0x18>)
 8004f2e:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <startStopwatch+0x1c>)
 8004f30:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 8004f32:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <startStopwatch+0x20>)
 8004f34:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <startStopwatch+0x24>)
 8004f36:	611a      	str	r2, [r3, #16]
}
 8004f38:	bf00      	nop
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20000584 	.word	0x20000584
 8004f40:	08004f4d 	.word	0x08004f4d
 8004f44:	200005f0 	.word	0x200005f0
 8004f48:	08004f8d 	.word	0x08004f8d

08004f4c <stopStopwatch>:
void stopStopwatch(){
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
	stwStop();
 8004f50:	f7fd ffda 	bl	8002f08 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8004f54:	4b03      	ldr	r3, [pc, #12]	; (8004f64 <stopStopwatch+0x18>)
 8004f56:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <stopStopwatch+0x1c>)
 8004f58:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8004f5a:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <stopStopwatch+0x20>)
 8004f5c:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <stopStopwatch+0x24>)
 8004f5e:	611a      	str	r2, [r3, #16]
}
 8004f60:	bf00      	nop
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000584 	.word	0x20000584
 8004f68:	08004f25 	.word	0x08004f25
 8004f6c:	200005f0 	.word	0x200005f0
 8004f70:	08004f75 	.word	0x08004f75

08004f74 <resetStopwatch>:
void resetStopwatch(){
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
	stwClear();
 8004f78:	f7fd ffd4 	bl	8002f24 <stwClear>
	stwT.clear();
 8004f7c:	4b02      	ldr	r3, [pc, #8]	; (8004f88 <resetStopwatch+0x14>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	4798      	blx	r3
}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	2000014c 	.word	0x2000014c

08004f8c <saveStopwatch>:
void saveStopwatch(){
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
	stwSave();
 8004f90:	f7fd ffd6 	bl	8002f40 <stwSave>
}
 8004f94:	bf00      	nop
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
//	btn_B3.onSingleLongPressHandler = &returnToMenu;
	btn_B3.onSinglePressHandler = &resetPos;
 8004f9c:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <setDefaultClbcks+0x48>)
 8004f9e:	4a11      	ldr	r2, [pc, #68]	; (8004fe4 <setDefaultClbcks+0x4c>)
 8004fa0:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <setDefaultClbcks+0x50>)
 8004fa4:	4a11      	ldr	r2, [pc, #68]	; (8004fec <setDefaultClbcks+0x54>)
 8004fa6:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8004fa8:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <setDefaultClbcks+0x58>)
 8004faa:	4a12      	ldr	r2, [pc, #72]	; (8004ff4 <setDefaultClbcks+0x5c>)
 8004fac:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <setDefaultClbcks+0x60>)
 8004fb0:	78db      	ldrb	r3, [r3, #3]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d006      	beq.n	8004fca <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <setDefaultClbcks+0x64>)
 8004fbe:	4a10      	ldr	r2, [pc, #64]	; (8005000 <setDefaultClbcks+0x68>)
 8004fc0:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8004fc2:	4b10      	ldr	r3, [pc, #64]	; (8005004 <setDefaultClbcks+0x6c>)
 8004fc4:	4a10      	ldr	r2, [pc, #64]	; (8005008 <setDefaultClbcks+0x70>)
 8004fc6:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8004fc8:	e005      	b.n	8004fd6 <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8004fca:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <setDefaultClbcks+0x64>)
 8004fcc:	4a0f      	ldr	r2, [pc, #60]	; (800500c <setDefaultClbcks+0x74>)
 8004fce:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <setDefaultClbcks+0x6c>)
 8004fd2:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <setDefaultClbcks+0x78>)
 8004fd4:	611a      	str	r2, [r3, #16]
}
 8004fd6:	bf00      	nop
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	20000614 	.word	0x20000614
 8004fe4:	08001d35 	.word	0x08001d35
 8004fe8:	20000560 	.word	0x20000560
 8004fec:	08001d15 	.word	0x08001d15
 8004ff0:	200005a8 	.word	0x200005a8
 8004ff4:	08001d25 	.word	0x08001d25
 8004ff8:	20003604 	.word	0x20003604
 8004ffc:	20000584 	.word	0x20000584
 8005000:	08004f4d 	.word	0x08004f4d
 8005004:	200005f0 	.word	0x200005f0
 8005008:	08004f8d 	.word	0x08004f8d
 800500c:	08004f25 	.word	0x08004f25
 8005010:	08004f75 	.word	0x08004f75

08005014 <convertTicks>:

struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	099b      	lsrs	r3, r3, #6
 8005020:	4a22      	ldr	r2, [pc, #136]	; (80050ac <convertTicks+0x98>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 8005028:	b2db      	uxtb	r3, r3
 800502a:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	0993      	lsrs	r3, r2, #6
 8005030:	491e      	ldr	r1, [pc, #120]	; (80050ac <convertTicks+0x98>)
 8005032:	fba1 1303 	umull	r1, r3, r1, r3
 8005036:	089b      	lsrs	r3, r3, #2
 8005038:	491d      	ldr	r1, [pc, #116]	; (80050b0 <convertTicks+0x9c>)
 800503a:	fb01 f303 	mul.w	r3, r1, r3
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	4a1c      	ldr	r2, [pc, #112]	; (80050b4 <convertTicks+0xa0>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 8005048:	b2db      	uxtb	r3, r3
 800504a:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4b19      	ldr	r3, [pc, #100]	; (80050b4 <convertTicks+0xa0>)
 8005050:	fba3 1302 	umull	r1, r3, r3, r2
 8005054:	09db      	lsrs	r3, r3, #7
 8005056:	f241 7170 	movw	r1, #6000	; 0x1770
 800505a:	fb01 f303 	mul.w	r3, r1, r3
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <convertTicks+0xa4>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 8005068:	b2db      	uxtb	r3, r3
 800506a:	72bb      	strb	r3, [r7, #10]
		ticks%100
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <convertTicks+0xa4>)
 8005070:	fba3 1302 	umull	r1, r3, r3, r2
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	2164      	movs	r1, #100	; 0x64
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 800507e:	b2db      	uxtb	r3, r3
 8005080:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	2300      	movs	r3, #0
 8005088:	7b3a      	ldrb	r2, [r7, #12]
 800508a:	f362 0307 	bfi	r3, r2, #0, #8
 800508e:	7b7a      	ldrb	r2, [r7, #13]
 8005090:	f362 230f 	bfi	r3, r2, #8, #8
 8005094:	7bba      	ldrb	r2, [r7, #14]
 8005096:	f362 4317 	bfi	r3, r2, #16, #8
 800509a:	7bfa      	ldrb	r2, [r7, #15]
 800509c:	f362 631f 	bfi	r3, r2, #24, #8
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	002e9a77 	.word	0x002e9a77
 80050b0:	00057e40 	.word	0x00057e40
 80050b4:	057619f1 	.word	0x057619f1
 80050b8:	51eb851f 	.word	0x51eb851f

080050bc <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 80050c6:	793b      	ldrb	r3, [r7, #4]
 80050c8:	4619      	mov	r1, r3
 80050ca:	797b      	ldrb	r3, [r7, #5]
 80050cc:	4618      	mov	r0, r3
 80050ce:	79bb      	ldrb	r3, [r7, #6]
 80050d0:	79fa      	ldrb	r2, [r7, #7]
 80050d2:	9201      	str	r2, [sp, #4]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	4603      	mov	r3, r0
 80050d8:	460a      	mov	r2, r1
 80050da:	4904      	ldr	r1, [pc, #16]	; (80050ec <stwString+0x30>)
 80050dc:	6838      	ldr	r0, [r7, #0]
 80050de:	f007 fa7d 	bl	800c5dc <siprintf>
	return str;
 80050e2:	683b      	ldr	r3, [r7, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	08012e4c 	.word	0x08012e4c

080050f0 <updateStopwatch>:
void updateStopwatch(void){
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
	stw_val.hours = stwS.cnt/(100*60*60);
 80050f4:	4b2a      	ldr	r3, [pc, #168]	; (80051a0 <updateStopwatch+0xb0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80050fc:	4a29      	ldr	r2, [pc, #164]	; (80051a4 <updateStopwatch+0xb4>)
 80050fe:	fb82 1203 	smull	r1, r2, r2, r3
 8005102:	1452      	asrs	r2, r2, #17
 8005104:	17db      	asrs	r3, r3, #31
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	b2da      	uxtb	r2, r3
 800510a:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <updateStopwatch+0xb8>)
 800510c:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
 800510e:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <updateStopwatch+0xb0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005116:	461a      	mov	r2, r3
 8005118:	4b22      	ldr	r3, [pc, #136]	; (80051a4 <updateStopwatch+0xb4>)
 800511a:	fb83 1302 	smull	r1, r3, r3, r2
 800511e:	1459      	asrs	r1, r3, #17
 8005120:	17d3      	asrs	r3, r2, #31
 8005122:	1acb      	subs	r3, r1, r3
 8005124:	4921      	ldr	r1, [pc, #132]	; (80051ac <updateStopwatch+0xbc>)
 8005126:	fb01 f303 	mul.w	r3, r1, r3
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	4a20      	ldr	r2, [pc, #128]	; (80051b0 <updateStopwatch+0xc0>)
 800512e:	fb82 1203 	smull	r1, r2, r2, r3
 8005132:	11d2      	asrs	r2, r2, #7
 8005134:	17db      	asrs	r3, r3, #31
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	b2da      	uxtb	r2, r3
 800513a:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <updateStopwatch+0xb8>)
 800513c:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%(60*100)/(100);
 800513e:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <updateStopwatch+0xb0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005146:	461a      	mov	r2, r3
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <updateStopwatch+0xc0>)
 800514a:	fb83 1302 	smull	r1, r3, r3, r2
 800514e:	11d9      	asrs	r1, r3, #7
 8005150:	17d3      	asrs	r3, r2, #31
 8005152:	1acb      	subs	r3, r1, r3
 8005154:	f241 7170 	movw	r1, #6000	; 0x1770
 8005158:	fb01 f303 	mul.w	r3, r1, r3
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	4a15      	ldr	r2, [pc, #84]	; (80051b4 <updateStopwatch+0xc4>)
 8005160:	fb82 1203 	smull	r1, r2, r2, r3
 8005164:	1152      	asrs	r2, r2, #5
 8005166:	17db      	asrs	r3, r3, #31
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	b2da      	uxtb	r2, r3
 800516c:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <updateStopwatch+0xb8>)
 800516e:	709a      	strb	r2, [r3, #2]
	stw_val.csec = stwS.cnt%100;
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <updateStopwatch+0xb0>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005178:	461a      	mov	r2, r3
 800517a:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <updateStopwatch+0xc4>)
 800517c:	fb83 1302 	smull	r1, r3, r3, r2
 8005180:	1159      	asrs	r1, r3, #5
 8005182:	17d3      	asrs	r3, r2, #31
 8005184:	1acb      	subs	r3, r1, r3
 8005186:	2164      	movs	r1, #100	; 0x64
 8005188:	fb01 f303 	mul.w	r3, r1, r3
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	b2da      	uxtb	r2, r3
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <updateStopwatch+0xb8>)
 8005192:	70da      	strb	r2, [r3, #3]
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	20003604 	.word	0x20003604
 80051a4:	5d34edef 	.word	0x5d34edef
 80051a8:	20003798 	.word	0x20003798
 80051ac:	00057e40 	.word	0x00057e40
 80051b0:	057619f1 	.word	0x057619f1
 80051b4:	51eb851f 	.word	0x51eb851f

080051b8 <stwSetup>:

void stwSetup(void){
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80051bc:	f7ff feec 	bl	8004f98 <setDefaultClbcks>
}
 80051c0:	bf00      	nop
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 80051c4:	b590      	push	{r4, r7, lr}
 80051c6:	b091      	sub	sp, #68	; 0x44
 80051c8:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 80051ca:	2300      	movs	r3, #0
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	2300      	movs	r3, #0
 80051d0:	84bb      	strh	r3, [r7, #36]	; 0x24
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 80051d2:	4b7c      	ldr	r3, [pc, #496]	; (80053c4 <stwMain+0x200>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	4b7a      	ldr	r3, [pc, #488]	; (80053c4 <stwMain+0x200>)
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	f107 0020 	add.w	r0, r7, #32
 80051e0:	4979      	ldr	r1, [pc, #484]	; (80053c8 <stwMain+0x204>)
 80051e2:	f007 f9fb 	bl	800c5dc <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 80051e6:	2314      	movs	r3, #20
 80051e8:	b29c      	uxth	r4, r3
 80051ea:	f107 0320 	add.w	r3, r7, #32
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fa fffe 	bl	80001f0 <strlen>
 80051f4:	4603      	mov	r3, r0
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	fb14 f303 	smulbb	r3, r4, r3
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 8005202:	b298      	uxth	r0, r3
 8005204:	f107 0220 	add.w	r2, r7, #32
 8005208:	4b70      	ldr	r3, [pc, #448]	; (80053cc <stwMain+0x208>)
 800520a:	210a      	movs	r1, #10
 800520c:	f7fc ffd0 	bl	80021b0 <lcdPutStr>

	updateStopwatch();
 8005210:	f7ff ff6e 	bl	80050f0 <updateStopwatch>
	char tempStr2[30] = {0};
 8005214:	2300      	movs	r3, #0
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	1d3b      	adds	r3, r7, #4
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	609a      	str	r2, [r3, #8]
 8005222:	60da      	str	r2, [r3, #12]
 8005224:	611a      	str	r2, [r3, #16]
 8005226:	615a      	str	r2, [r3, #20]
 8005228:	831a      	strh	r2, [r3, #24]
	if(stw_val.hours != 0){
 800522a:	4b69      	ldr	r3, [pc, #420]	; (80053d0 <stwMain+0x20c>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <stwMain+0x7e>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 8005232:	4b67      	ldr	r3, [pc, #412]	; (80053d0 <stwMain+0x20c>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	463b      	mov	r3, r7
 800523a:	4966      	ldr	r1, [pc, #408]	; (80053d4 <stwMain+0x210>)
 800523c:	4618      	mov	r0, r3
 800523e:	f007 f9cd 	bl	800c5dc <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 8005242:	463a      	mov	r2, r7
 8005244:	4b61      	ldr	r3, [pc, #388]	; (80053cc <stwMain+0x208>)
 8005246:	215f      	movs	r1, #95	; 0x5f
 8005248:	2014      	movs	r0, #20
 800524a:	f7fc ffb1 	bl	80021b0 <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 800524e:	4b60      	ldr	r3, [pc, #384]	; (80053d0 <stwMain+0x20c>)
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	461a      	mov	r2, r3
 8005254:	4b5e      	ldr	r3, [pc, #376]	; (80053d0 <stwMain+0x20c>)
 8005256:	789b      	ldrb	r3, [r3, #2]
 8005258:	4619      	mov	r1, r3
 800525a:	4b5d      	ldr	r3, [pc, #372]	; (80053d0 <stwMain+0x20c>)
 800525c:	78db      	ldrb	r3, [r3, #3]
 800525e:	4638      	mov	r0, r7
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	460b      	mov	r3, r1
 8005264:	495c      	ldr	r1, [pc, #368]	; (80053d8 <stwMain+0x214>)
 8005266:	f007 f9b9 	bl	800c5dc <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 800526a:	2322      	movs	r3, #34	; 0x22
 800526c:	b29c      	uxth	r4, r3
 800526e:	463b      	mov	r3, r7
 8005270:	4618      	mov	r0, r3
 8005272:	f7fa ffbd 	bl	80001f0 <strlen>
 8005276:	4603      	mov	r3, r0
 8005278:	b29b      	uxth	r3, r3
 800527a:	fb14 f303 	smulbb	r3, r4, r3
 800527e:	b29b      	uxth	r3, r3
 8005280:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8005284:	b298      	uxth	r0, r3
 8005286:	463a      	mov	r2, r7
 8005288:	4b54      	ldr	r3, [pc, #336]	; (80053dc <stwMain+0x218>)
 800528a:	214c      	movs	r1, #76	; 0x4c
 800528c:	f7fc ff90 	bl	80021b0 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8005290:	2300      	movs	r3, #0
 8005292:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005296:	e08b      	b.n	80053b0 <stwMain+0x1ec>
//		sprintf(&tempStr2, "%d. %d\"", i, stwT.stwArray[i]%(60*100)/100);
//		sprintf(&tempStr2, "%d. %s", i, stwString(convertTicks(stwT.stwArray[i])));
		if(stwT.stwArray[i] != 0){
 8005298:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800529c:	4a50      	ldr	r2, [pc, #320]	; (80053e0 <stwMain+0x21c>)
 800529e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d07f      	beq.n	80053a6 <stwMain+0x1e2>
			sprintf(&tempStr2, "Lap %d:", i+1);
 80052a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	463b      	mov	r3, r7
 80052ae:	494d      	ldr	r1, [pc, #308]	; (80053e4 <stwMain+0x220>)
 80052b0:	4618      	mov	r0, r3
 80052b2:	f007 f993 	bl	800c5dc <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, zekton12font);
 80052b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	3b7e      	subs	r3, #126	; 0x7e
 80052c0:	b2d9      	uxtb	r1, r3
 80052c2:	463a      	mov	r2, r7
 80052c4:	4b48      	ldr	r3, [pc, #288]	; (80053e8 <stwMain+0x224>)
 80052c6:	2000      	movs	r0, #0
 80052c8:	f7fc ff72 	bl	80021b0 <lcdPutStr>
			if(i>0){
 80052cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d022      	beq.n	800531a <stwMain+0x156>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), zekton12font);
 80052d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	3b7e      	subs	r3, #126	; 0x7e
 80052de:	b2dc      	uxtb	r4, r3
 80052e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052e4:	4a3e      	ldr	r2, [pc, #248]	; (80053e0 <stwMain+0x21c>)
 80052e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80052ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052ee:	3b01      	subs	r3, #1
 80052f0:	493b      	ldr	r1, [pc, #236]	; (80053e0 <stwMain+0x21c>)
 80052f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fe8b 	bl	8005014 <convertTicks>
 80052fe:	4603      	mov	r3, r0
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
 8005302:	463b      	mov	r3, r7
 8005304:	4619      	mov	r1, r3
 8005306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005308:	f7ff fed8 	bl	80050bc <stwString>
 800530c:	4602      	mov	r2, r0
 800530e:	4b36      	ldr	r3, [pc, #216]	; (80053e8 <stwMain+0x224>)
 8005310:	4621      	mov	r1, r4
 8005312:	2037      	movs	r0, #55	; 0x37
 8005314:	f7fc ff4c 	bl	80021b0 <lcdPutStr>
 8005318:	e01a      	b.n	8005350 <stwMain+0x18c>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), zekton12font);
 800531a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	b2db      	uxtb	r3, r3
 8005322:	3b7e      	subs	r3, #126	; 0x7e
 8005324:	b2dc      	uxtb	r4, r3
 8005326:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800532a:	4a2d      	ldr	r2, [pc, #180]	; (80053e0 <stwMain+0x21c>)
 800532c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fe6f 	bl	8005014 <convertTicks>
 8005336:	4603      	mov	r3, r0
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800533a:	463b      	mov	r3, r7
 800533c:	4619      	mov	r1, r3
 800533e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005340:	f7ff febc 	bl	80050bc <stwString>
 8005344:	4602      	mov	r2, r0
 8005346:	4b28      	ldr	r3, [pc, #160]	; (80053e8 <stwMain+0x224>)
 8005348:	4621      	mov	r1, r4
 800534a:	2037      	movs	r0, #55	; 0x37
 800534c:	f7fc ff30 	bl	80021b0 <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 8005350:	463b      	mov	r3, r7
 8005352:	4926      	ldr	r1, [pc, #152]	; (80053ec <stwMain+0x228>)
 8005354:	4618      	mov	r0, r3
 8005356:	f007 f941 	bl	800c5dc <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, zekton12font);
 800535a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	b2db      	uxtb	r3, r3
 8005362:	3b7e      	subs	r3, #126	; 0x7e
 8005364:	b2d9      	uxtb	r1, r3
 8005366:	463a      	mov	r2, r7
 8005368:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <stwMain+0x224>)
 800536a:	20a5      	movs	r0, #165	; 0xa5
 800536c:	f7fc ff20 	bl	80021b0 <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), zekton12font);
 8005370:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	b2db      	uxtb	r3, r3
 8005378:	3b7e      	subs	r3, #126	; 0x7e
 800537a:	b2dc      	uxtb	r4, r3
 800537c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005380:	4a17      	ldr	r2, [pc, #92]	; (80053e0 <stwMain+0x21c>)
 8005382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fe44 	bl	8005014 <convertTicks>
 800538c:	4603      	mov	r3, r0
 800538e:	633b      	str	r3, [r7, #48]	; 0x30
 8005390:	463b      	mov	r3, r7
 8005392:	4619      	mov	r1, r3
 8005394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005396:	f7ff fe91 	bl	80050bc <stwString>
 800539a:	4602      	mov	r2, r0
 800539c:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <stwMain+0x224>)
 800539e:	4621      	mov	r1, r4
 80053a0:	20e1      	movs	r0, #225	; 0xe1
 80053a2:	f7fc ff05 	bl	80021b0 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 80053a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053aa:	3301      	adds	r3, #1
 80053ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80053b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053b4:	2b06      	cmp	r3, #6
 80053b6:	f67f af6f 	bls.w	8005298 <stwMain+0xd4>

//	sprintf(&tempStr2, "%d", stwS.cnt);
//	lcdPutStr(0, 130, tempStr2, zecton45font);
//	sprintf(&tempStr2, "%d", stwS.state);
//	lcdPutStr(0, 184, tempStr2, zecton45font);
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	373c      	adds	r7, #60	; 0x3c
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd90      	pop	{r4, r7, pc}
 80053c4:	20003574 	.word	0x20003574
 80053c8:	08012e60 	.word	0x08012e60
 80053cc:	08022aa4 	.word	0x08022aa4
 80053d0:	20003798 	.word	0x20003798
 80053d4:	08012e6c 	.word	0x08012e6c
 80053d8:	08012e74 	.word	0x08012e74
 80053dc:	0802490c 	.word	0x0802490c
 80053e0:	2000014c 	.word	0x2000014c
 80053e4:	08012e84 	.word	0x08012e84
 80053e8:	0802201c 	.word	0x0802201c
 80053ec:	08012e8c 	.word	0x08012e8c

080053f0 <setDefaultClbcks>:
#include "fonts/zekton14.h"
#include "fonts/zekton24.h"
#include "fonts/zekton84.h"
#include <fonts/zekton45.h>

static void setDefaultClbcks(void){
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <setDefaultClbcks+0x20>)
 80053f6:	4a07      	ldr	r2, [pc, #28]	; (8005414 <setDefaultClbcks+0x24>)
 80053f8:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <setDefaultClbcks+0x28>)
 80053fc:	4a07      	ldr	r2, [pc, #28]	; (800541c <setDefaultClbcks+0x2c>)
 80053fe:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <setDefaultClbcks+0x30>)
 8005402:	4a08      	ldr	r2, [pc, #32]	; (8005424 <setDefaultClbcks+0x34>)
 8005404:	611a      	str	r2, [r3, #16]
}
 8005406:	bf00      	nop
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	200005f0 	.word	0x200005f0
 8005414:	08003839 	.word	0x08003839
 8005418:	20000560 	.word	0x20000560
 800541c:	08001d15 	.word	0x08001d15
 8005420:	200005a8 	.word	0x200005a8
 8005424:	08001d25 	.word	0x08001d25

08005428 <setTimeAction>:

static void setTimeAction(void){
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 800542c:	4802      	ldr	r0, [pc, #8]	; (8005438 <setTimeAction+0x10>)
 800542e:	f7fc fc8d 	bl	8001d4c <guiApplyView>
}
 8005432:	bf00      	nop
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	2000028c 	.word	0x2000028c

0800543c <setDateAction>:
static void setDateAction(void){
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 8005440:	4802      	ldr	r0, [pc, #8]	; (800544c <setDateAction+0x10>)
 8005442:	f7fc fc83 	bl	8001d4c <guiApplyView>
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000258 	.word	0x20000258

08005450 <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005454:	f7ff ffcc 	bl	80053f0 <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 8005458:	4802      	ldr	r0, [pc, #8]	; (8005464 <faceSetup+0x14>)
 800545a:	f7fe f967 	bl	800372c <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 800545e:	bf00      	nop
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	080053f1 	.word	0x080053f1

08005468 <faceMain>:

void faceMain(void){
 8005468:	b590      	push	{r4, r7, lr}
 800546a:	b0b1      	sub	sp, #196	; 0xc4
 800546c:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 800546e:	2300      	movs	r3, #0
 8005470:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005474:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	605a      	str	r2, [r3, #4]
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	60da      	str	r2, [r3, #12]
 8005482:	611a      	str	r2, [r3, #16]
 8005484:	615a      	str	r2, [r3, #20]
 8005486:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 8005488:	4b83      	ldr	r3, [pc, #524]	; (8005698 <faceMain+0x230>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fb f875 	bl	800057c <__aeabi_f2d>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800549a:	4980      	ldr	r1, [pc, #512]	; (800569c <faceMain+0x234>)
 800549c:	f007 f89e 	bl	800c5dc <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 80054a0:	2314      	movs	r3, #20
 80054a2:	b29c      	uxth	r4, r3
 80054a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fa fea1 	bl	80001f0 <strlen>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f1c3 030d 	rsb	r3, r3, #13
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	fb14 f303 	smulbb	r3, r4, r3
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3323      	adds	r3, #35	; 0x23
 80054be:	b298      	uxth	r0, r3
 80054c0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80054c4:	4b76      	ldr	r3, [pc, #472]	; (80056a0 <faceMain+0x238>)
 80054c6:	210e      	movs	r1, #14
 80054c8:	f7fc fe72 	bl	80021b0 <lcdPutStr>
	char baroStr[30] = {0};
 80054cc:	2300      	movs	r3, #0
 80054ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054d2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	605a      	str	r2, [r3, #4]
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	60da      	str	r2, [r3, #12]
 80054e0:	611a      	str	r2, [r3, #16]
 80054e2:	615a      	str	r2, [r3, #20]
 80054e4:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 80054e6:	4b6c      	ldr	r3, [pc, #432]	; (8005698 <faceMain+0x230>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f2:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80056a4 <faceMain+0x23c>
 80054f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80054fa:	ee16 0a90 	vmov	r0, s13
 80054fe:	f7fb f83d 	bl	800057c <__aeabi_f2d>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800550a:	4967      	ldr	r1, [pc, #412]	; (80056a8 <faceMain+0x240>)
 800550c:	f007 f866 	bl	800c5dc <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 8005510:	2314      	movs	r3, #20
 8005512:	b29c      	uxth	r4, r3
 8005514:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005518:	4618      	mov	r0, r3
 800551a:	f7fa fe69 	bl	80001f0 <strlen>
 800551e:	4603      	mov	r3, r0
 8005520:	f1c3 030d 	rsb	r3, r3, #13
 8005524:	b29b      	uxth	r3, r3
 8005526:	fb14 f303 	smulbb	r3, r4, r3
 800552a:	b29b      	uxth	r3, r3
 800552c:	3323      	adds	r3, #35	; 0x23
 800552e:	b298      	uxth	r0, r3
 8005530:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005534:	4b5a      	ldr	r3, [pc, #360]	; (80056a0 <faceMain+0x238>)
 8005536:	212a      	movs	r1, #42	; 0x2a
 8005538:	f7fc fe3a 	bl	80021b0 <lcdPutStr>

	char fracStr[30] = {0};
 800553c:	2300      	movs	r3, #0
 800553e:	663b      	str	r3, [r7, #96]	; 0x60
 8005540:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	605a      	str	r2, [r3, #4]
 800554a:	609a      	str	r2, [r3, #8]
 800554c:	60da      	str	r2, [r3, #12]
 800554e:	611a      	str	r2, [r3, #16]
 8005550:	615a      	str	r2, [r3, #20]
 8005552:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 8005554:	2300      	movs	r3, #0
 8005556:	643b      	str	r3, [r7, #64]	; 0x40
 8005558:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	609a      	str	r2, [r3, #8]
 8005564:	60da      	str	r2, [r3, #12]
 8005566:	611a      	str	r2, [r3, #16]
 8005568:	615a      	str	r2, [r3, #20]
 800556a:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 800556c:	2300      	movs	r3, #0
 800556e:	623b      	str	r3, [r7, #32]
 8005570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	605a      	str	r2, [r3, #4]
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	611a      	str	r2, [r3, #16]
 8005580:	615a      	str	r2, [r3, #20]
 8005582:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 8005584:	4b49      	ldr	r3, [pc, #292]	; (80056ac <faceMain+0x244>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800558e:	4948      	ldr	r1, [pc, #288]	; (80056b0 <faceMain+0x248>)
 8005590:	4618      	mov	r0, r3
 8005592:	f007 f823 	bl	800c5dc <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 8005596:	4b45      	ldr	r3, [pc, #276]	; (80056ac <faceMain+0x244>)
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	461a      	mov	r2, r3
 800559c:	f107 0320 	add.w	r3, r7, #32
 80055a0:	4943      	ldr	r1, [pc, #268]	; (80056b0 <faceMain+0x248>)
 80055a2:	4618      	mov	r0, r3
 80055a4:	f007 f81a 	bl	800c5dc <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 80055a8:	4b40      	ldr	r3, [pc, #256]	; (80056ac <faceMain+0x244>)
 80055aa:	789b      	ldrb	r3, [r3, #2]
 80055ac:	461a      	mov	r2, r3
 80055ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80055b2:	493f      	ldr	r1, [pc, #252]	; (80056b0 <faceMain+0x248>)
 80055b4:	4618      	mov	r0, r3
 80055b6:	f007 f811 	bl	800c5dc <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 80055ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80055be:	4b3d      	ldr	r3, [pc, #244]	; (80056b4 <faceMain+0x24c>)
 80055c0:	214c      	movs	r1, #76	; 0x4c
 80055c2:	2014      	movs	r0, #20
 80055c4:	f7fc fdf4 	bl	80021b0 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 80055c8:	f107 0220 	add.w	r2, r7, #32
 80055cc:	4b39      	ldr	r3, [pc, #228]	; (80056b4 <faceMain+0x24c>)
 80055ce:	214c      	movs	r1, #76	; 0x4c
 80055d0:	20aa      	movs	r0, #170	; 0xaa
 80055d2:	f7fc fded 	bl	80021b0 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 80055d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80055da:	4b37      	ldr	r3, [pc, #220]	; (80056b8 <faceMain+0x250>)
 80055dc:	214c      	movs	r1, #76	; 0x4c
 80055de:	f240 103b 	movw	r0, #315	; 0x13b
 80055e2:	f7fc fde5 	bl	80021b0 <lcdPutStr>

	char buffString[30] = {0};
 80055e6:	2300      	movs	r3, #0
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	1d3b      	adds	r3, r7, #4
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	60da      	str	r2, [r3, #12]
 80055f6:	611a      	str	r2, [r3, #16]
 80055f8:	615a      	str	r2, [r3, #20]
 80055fa:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 80055fc:	463b      	mov	r3, r7
 80055fe:	492f      	ldr	r1, [pc, #188]	; (80056bc <faceMain+0x254>)
 8005600:	4618      	mov	r0, r3
 8005602:	f006 ffeb 	bl	800c5dc <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 8005606:	4b2e      	ldr	r3, [pc, #184]	; (80056c0 <faceMain+0x258>)
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	461a      	mov	r2, r3
 800560c:	4b2d      	ldr	r3, [pc, #180]	; (80056c4 <faceMain+0x25c>)
 800560e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005612:	4b2b      	ldr	r3, [pc, #172]	; (80056c0 <faceMain+0x258>)
 8005614:	78db      	ldrb	r3, [r3, #3]
 8005616:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800561a:	4638      	mov	r0, r7
 800561c:	492a      	ldr	r1, [pc, #168]	; (80056c8 <faceMain+0x260>)
 800561e:	f006 ffdd 	bl	800c5dc <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8005622:	2314      	movs	r3, #20
 8005624:	b29c      	uxth	r4, r3
 8005626:	463b      	mov	r3, r7
 8005628:	4618      	mov	r0, r3
 800562a:	f7fa fde1 	bl	80001f0 <strlen>
 800562e:	4603      	mov	r3, r0
 8005630:	f1c3 030d 	rsb	r3, r3, #13
 8005634:	b29b      	uxth	r3, r3
 8005636:	fb14 f303 	smulbb	r3, r4, r3
 800563a:	b29b      	uxth	r3, r3
 800563c:	3323      	adds	r3, #35	; 0x23
 800563e:	b298      	uxth	r0, r3
 8005640:	463a      	mov	r2, r7
 8005642:	4b17      	ldr	r3, [pc, #92]	; (80056a0 <faceMain+0x238>)
 8005644:	21ae      	movs	r1, #174	; 0xae
 8005646:	f7fc fdb3 	bl	80021b0 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 800564a:	4b1d      	ldr	r3, [pc, #116]	; (80056c0 <faceMain+0x258>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	4b1e      	ldr	r3, [pc, #120]	; (80056cc <faceMain+0x264>)
 8005652:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005656:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <faceMain+0x258>)
 8005658:	789b      	ldrb	r3, [r3, #2]
 800565a:	4638      	mov	r0, r7
 800565c:	491a      	ldr	r1, [pc, #104]	; (80056c8 <faceMain+0x260>)
 800565e:	f006 ffbd 	bl	800c5dc <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8005662:	2314      	movs	r3, #20
 8005664:	b29c      	uxth	r4, r3
 8005666:	463b      	mov	r3, r7
 8005668:	4618      	mov	r0, r3
 800566a:	f7fa fdc1 	bl	80001f0 <strlen>
 800566e:	4603      	mov	r3, r0
 8005670:	f1c3 030d 	rsb	r3, r3, #13
 8005674:	b29b      	uxth	r3, r3
 8005676:	fb14 f303 	smulbb	r3, r4, r3
 800567a:	b29b      	uxth	r3, r3
 800567c:	3323      	adds	r3, #35	; 0x23
 800567e:	b298      	uxth	r0, r3
 8005680:	463a      	mov	r2, r7
 8005682:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <faceMain+0x238>)
 8005684:	21ca      	movs	r1, #202	; 0xca
 8005686:	f7fc fd93 	bl	80021b0 <lcdPutStr>

	enableCntxMenu();
 800568a:	f7fe f8f1 	bl	8003870 <enableCntxMenu>
}
 800568e:	bf00      	nop
 8005690:	37c4      	adds	r7, #196	; 0xc4
 8005692:	46bd      	mov	sp, r7
 8005694:	bd90      	pop	{r4, r7, pc}
 8005696:	bf00      	nop
 8005698:	20000550 	.word	0x20000550
 800569c:	08012f4c 	.word	0x08012f4c
 80056a0:	08029f54 	.word	0x08029f54
 80056a4:	42c80000 	.word	0x42c80000
 80056a8:	08012f54 	.word	0x08012f54
 80056ac:	20003574 	.word	0x20003574
 80056b0:	08012f60 	.word	0x08012f60
 80056b4:	0802bdbc 	.word	0x0802bdbc
 80056b8:	0802dcb4 	.word	0x0802dcb4
 80056bc:	08012f68 	.word	0x08012f68
 80056c0:	20003588 	.word	0x20003588
 80056c4:	200001a8 	.word	0x200001a8
 80056c8:	08012f78 	.word	0x08012f78
 80056cc:	20000188 	.word	0x20000188

080056d0 <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <setDefaultClbcks+0x34>)
 80056d6:	4a0c      	ldr	r2, [pc, #48]	; (8005708 <setDefaultClbcks+0x38>)
 80056d8:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 80056da:	4b0c      	ldr	r3, [pc, #48]	; (800570c <setDefaultClbcks+0x3c>)
 80056dc:	4a0c      	ldr	r2, [pc, #48]	; (8005710 <setDefaultClbcks+0x40>)
 80056de:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <setDefaultClbcks+0x44>)
 80056e2:	4a0d      	ldr	r2, [pc, #52]	; (8005718 <setDefaultClbcks+0x48>)
 80056e4:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 80056e6:	4b0d      	ldr	r3, [pc, #52]	; (800571c <setDefaultClbcks+0x4c>)
 80056e8:	4a0d      	ldr	r2, [pc, #52]	; (8005720 <setDefaultClbcks+0x50>)
 80056ea:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <setDefaultClbcks+0x54>)
 80056ee:	4a0e      	ldr	r2, [pc, #56]	; (8005728 <setDefaultClbcks+0x58>)
 80056f0:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <setDefaultClbcks+0x5c>)
 80056f4:	4a0e      	ldr	r2, [pc, #56]	; (8005730 <setDefaultClbcks+0x60>)
 80056f6:	611a      	str	r2, [r3, #16]
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20000614 	.word	0x20000614
 8005708:	08005a41 	.word	0x08005a41
 800570c:	200005f0 	.word	0x200005f0
 8005710:	08005901 	.word	0x08005901
 8005714:	200005cc 	.word	0x200005cc
 8005718:	08005a4d 	.word	0x08005a4d
 800571c:	20000560 	.word	0x20000560
 8005720:	080059b9 	.word	0x080059b9
 8005724:	20000584 	.word	0x20000584
 8005728:	080058d1 	.word	0x080058d1
 800572c:	200005a8 	.word	0x200005a8
 8005730:	08005931 	.word	0x08005931

08005734 <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005738:	f7ff ffca 	bl	80056d0 <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <dateInputSetup+0x24>)
 800573e:	789a      	ldrb	r2, [r3, #2]
 8005740:	4b06      	ldr	r3, [pc, #24]	; (800575c <dateInputSetup+0x28>)
 8005742:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <dateInputSetup+0x24>)
 8005746:	785a      	ldrb	r2, [r3, #1]
 8005748:	4b04      	ldr	r3, [pc, #16]	; (800575c <dateInputSetup+0x28>)
 800574a:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 800574c:	4b02      	ldr	r3, [pc, #8]	; (8005758 <dateInputSetup+0x24>)
 800574e:	78da      	ldrb	r2, [r3, #3]
 8005750:	4b02      	ldr	r3, [pc, #8]	; (800575c <dateInputSetup+0x28>)
 8005752:	709a      	strb	r2, [r3, #2]
}
 8005754:	bf00      	nop
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20003588 	.word	0x20003588
 800575c:	200037a0 	.word	0x200037a0

08005760 <dateInputMain>:

void dateInputMain(void){
 8005760:	b590      	push	{r4, r7, lr}
 8005762:	b089      	sub	sp, #36	; 0x24
 8005764:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 8005766:	2300      	movs	r3, #0
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	605a      	str	r2, [r3, #4]
 8005772:	609a      	str	r2, [r3, #8]
 8005774:	60da      	str	r2, [r3, #12]
 8005776:	611a      	str	r2, [r3, #16]
 8005778:	615a      	str	r2, [r3, #20]
 800577a:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 800577c:	463b      	mov	r3, r7
 800577e:	494a      	ldr	r1, [pc, #296]	; (80058a8 <dateInputMain+0x148>)
 8005780:	4618      	mov	r0, r3
 8005782:	f006 ff2b 	bl	800c5dc <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 8005786:	4b49      	ldr	r3, [pc, #292]	; (80058ac <dateInputMain+0x14c>)
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	461a      	mov	r2, r3
 800578c:	4b48      	ldr	r3, [pc, #288]	; (80058b0 <dateInputMain+0x150>)
 800578e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005792:	4b46      	ldr	r3, [pc, #280]	; (80058ac <dateInputMain+0x14c>)
 8005794:	789b      	ldrb	r3, [r3, #2]
 8005796:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800579a:	4638      	mov	r0, r7
 800579c:	4945      	ldr	r1, [pc, #276]	; (80058b4 <dateInputMain+0x154>)
 800579e:	f006 ff1d 	bl	800c5dc <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 80057a2:	2314      	movs	r3, #20
 80057a4:	b29c      	uxth	r4, r3
 80057a6:	463b      	mov	r3, r7
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fa fd21 	bl	80001f0 <strlen>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f1c3 030d 	rsb	r3, r3, #13
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	fb14 f303 	smulbb	r3, r4, r3
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3323      	adds	r3, #35	; 0x23
 80057be:	b298      	uxth	r0, r3
 80057c0:	463a      	mov	r2, r7
 80057c2:	4b3d      	ldr	r3, [pc, #244]	; (80058b8 <dateInputMain+0x158>)
 80057c4:	21ae      	movs	r1, #174	; 0xae
 80057c6:	f7fc fcf3 	bl	80021b0 <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 80057ca:	4b38      	ldr	r3, [pc, #224]	; (80058ac <dateInputMain+0x14c>)
 80057cc:	7818      	ldrb	r0, [r3, #0]
 80057ce:	4b37      	ldr	r3, [pc, #220]	; (80058ac <dateInputMain+0x14c>)
 80057d0:	7859      	ldrb	r1, [r3, #1]
 80057d2:	4b36      	ldr	r3, [pc, #216]	; (80058ac <dateInputMain+0x14c>)
 80057d4:	789b      	ldrb	r3, [r3, #2]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80057dc:	b29b      	uxth	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	f000 fb54 	bl	8005e8c <zellerCongruence>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	4b34      	ldr	r3, [pc, #208]	; (80058bc <dateInputMain+0x15c>)
 80057ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057ee:	4b2f      	ldr	r3, [pc, #188]	; (80058ac <dateInputMain+0x14c>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	4638      	mov	r0, r7
 80057f4:	492f      	ldr	r1, [pc, #188]	; (80058b4 <dateInputMain+0x154>)
 80057f6:	f006 fef1 	bl	800c5dc <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 80057fa:	2314      	movs	r3, #20
 80057fc:	b29c      	uxth	r4, r3
 80057fe:	463b      	mov	r3, r7
 8005800:	4618      	mov	r0, r3
 8005802:	f7fa fcf5 	bl	80001f0 <strlen>
 8005806:	4603      	mov	r3, r0
 8005808:	f1c3 030d 	rsb	r3, r3, #13
 800580c:	b29b      	uxth	r3, r3
 800580e:	fb14 f303 	smulbb	r3, r4, r3
 8005812:	b29b      	uxth	r3, r3
 8005814:	3323      	adds	r3, #35	; 0x23
 8005816:	b298      	uxth	r0, r3
 8005818:	463a      	mov	r2, r7
 800581a:	4b27      	ldr	r3, [pc, #156]	; (80058b8 <dateInputMain+0x158>)
 800581c:	21ca      	movs	r1, #202	; 0xca
 800581e:	f7fc fcc7 	bl	80021b0 <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 8005822:	4b27      	ldr	r3, [pc, #156]	; (80058c0 <dateInputMain+0x160>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	4b26      	ldr	r3, [pc, #152]	; (80058c4 <dateInputMain+0x164>)
 800582a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800582e:	4618      	mov	r0, r3
 8005830:	4b23      	ldr	r3, [pc, #140]	; (80058c0 <dateInputMain+0x160>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	4b23      	ldr	r3, [pc, #140]	; (80058c4 <dateInputMain+0x164>)
 8005838:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800583c:	461a      	mov	r2, r3
 800583e:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <dateInputMain+0x160>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	4619      	mov	r1, r3
 8005844:	4b20      	ldr	r3, [pc, #128]	; (80058c8 <dateInputMain+0x168>)
 8005846:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800584a:	18d1      	adds	r1, r2, r3
 800584c:	4b1c      	ldr	r3, [pc, #112]	; (80058c0 <dateInputMain+0x160>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	4b1e      	ldr	r3, [pc, #120]	; (80058cc <dateInputMain+0x16c>)
 8005854:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005858:	461a      	mov	r2, r3
 800585a:	2301      	movs	r3, #1
 800585c:	f7fc fe9a 	bl	8002594 <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 8005860:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <dateInputMain+0x160>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	4b17      	ldr	r3, [pc, #92]	; (80058c4 <dateInputMain+0x164>)
 8005868:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800586c:	4618      	mov	r0, r3
 800586e:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <dateInputMain+0x160>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <dateInputMain+0x164>)
 8005876:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800587a:	461a      	mov	r2, r3
 800587c:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <dateInputMain+0x160>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	4619      	mov	r1, r3
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <dateInputMain+0x168>)
 8005884:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005888:	18d1      	adds	r1, r2, r3
 800588a:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <dateInputMain+0x160>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	4b0e      	ldr	r3, [pc, #56]	; (80058cc <dateInputMain+0x16c>)
 8005892:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	2301      	movs	r3, #1
 800589a:	f7fc fe7b 	bl	8002594 <lcdHLine>
}
 800589e:	bf00      	nop
 80058a0:	3724      	adds	r7, #36	; 0x24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd90      	pop	{r4, r7, pc}
 80058a6:	bf00      	nop
 80058a8:	08013038 	.word	0x08013038
 80058ac:	200037a0 	.word	0x200037a0
 80058b0:	2000020c 	.word	0x2000020c
 80058b4:	08013048 	.word	0x08013048
 80058b8:	0803338c 	.word	0x0803338c
 80058bc:	200001ec 	.word	0x200001ec
 80058c0:	2000379c 	.word	0x2000379c
 80058c4:	20000240 	.word	0x20000240
 80058c8:	20000250 	.word	0x20000250
 80058cc:	20000248 	.word	0x20000248

080058d0 <cursorNext>:

static void cursorNext(void){
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 80058d4:	4b09      	ldr	r3, [pc, #36]	; (80058fc <cursorNext+0x2c>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d806      	bhi.n	80058ea <cursorNext+0x1a>
 80058dc:	4b07      	ldr	r3, [pc, #28]	; (80058fc <cursorNext+0x2c>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <cursorNext+0x2c>)
 80058e6:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 80058e8:	e002      	b.n	80058f0 <cursorNext+0x20>
	else curPosition = 0;
 80058ea:	4b04      	ldr	r3, [pc, #16]	; (80058fc <cursorNext+0x2c>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
}
 80058f0:	bf00      	nop
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	2000379c 	.word	0x2000379c

08005900 <cursorPrev>:
static void cursorPrev(void){
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8005904:	4b09      	ldr	r3, [pc, #36]	; (800592c <cursorPrev+0x2c>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d006      	beq.n	800591a <cursorPrev+0x1a>
 800590c:	4b07      	ldr	r3, [pc, #28]	; (800592c <cursorPrev+0x2c>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	3b01      	subs	r3, #1
 8005912:	b2da      	uxtb	r2, r3
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <cursorPrev+0x2c>)
 8005916:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 8005918:	e002      	b.n	8005920 <cursorPrev+0x20>
	else curPosition = 2;
 800591a:	4b04      	ldr	r3, [pc, #16]	; (800592c <cursorPrev+0x2c>)
 800591c:	2202      	movs	r2, #2
 800591e:	701a      	strb	r2, [r3, #0]
}
 8005920:	bf00      	nop
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	2000379c 	.word	0x2000379c

08005930 <increment>:
static void increment(void){
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
	switch(curPosition){
 8005934:	4b1e      	ldr	r3, [pc, #120]	; (80059b0 <increment+0x80>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d024      	beq.n	8005986 <increment+0x56>
 800593c:	2b02      	cmp	r3, #2
 800593e:	dc31      	bgt.n	80059a4 <increment+0x74>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <increment+0x1a>
 8005944:	2b01      	cmp	r3, #1
 8005946:	d00f      	beq.n	8005968 <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 8005948:	e02c      	b.n	80059a4 <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 800594a:	4b1a      	ldr	r3, [pc, #104]	; (80059b4 <increment+0x84>)
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	2b0b      	cmp	r3, #11
 8005950:	d806      	bhi.n	8005960 <increment+0x30>
 8005952:	4b18      	ldr	r3, [pc, #96]	; (80059b4 <increment+0x84>)
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	3301      	adds	r3, #1
 8005958:	b2da      	uxtb	r2, r3
 800595a:	4b16      	ldr	r3, [pc, #88]	; (80059b4 <increment+0x84>)
 800595c:	705a      	strb	r2, [r3, #1]
			break;
 800595e:	e021      	b.n	80059a4 <increment+0x74>
			else valDatePos[1] = 1;
 8005960:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <increment+0x84>)
 8005962:	2201      	movs	r2, #1
 8005964:	705a      	strb	r2, [r3, #1]
			break;
 8005966:	e01d      	b.n	80059a4 <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 8005968:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <increment+0x84>)
 800596a:	789b      	ldrb	r3, [r3, #2]
 800596c:	2b63      	cmp	r3, #99	; 0x63
 800596e:	d806      	bhi.n	800597e <increment+0x4e>
 8005970:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <increment+0x84>)
 8005972:	789b      	ldrb	r3, [r3, #2]
 8005974:	3301      	adds	r3, #1
 8005976:	b2da      	uxtb	r2, r3
 8005978:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <increment+0x84>)
 800597a:	709a      	strb	r2, [r3, #2]
			break;
 800597c:	e012      	b.n	80059a4 <increment+0x74>
			else valDatePos[2] = 0;
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <increment+0x84>)
 8005980:	2200      	movs	r2, #0
 8005982:	709a      	strb	r2, [r3, #2]
			break;
 8005984:	e00e      	b.n	80059a4 <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <increment+0x84>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b1e      	cmp	r3, #30
 800598c:	d806      	bhi.n	800599c <increment+0x6c>
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <increment+0x84>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	3301      	adds	r3, #1
 8005994:	b2da      	uxtb	r2, r3
 8005996:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <increment+0x84>)
 8005998:	701a      	strb	r2, [r3, #0]
			break;
 800599a:	e002      	b.n	80059a2 <increment+0x72>
			else valDatePos[0] = 1;
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <increment+0x84>)
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
			break;
 80059a2:	bf00      	nop
}
 80059a4:	bf00      	nop
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	2000379c 	.word	0x2000379c
 80059b4:	200037a0 	.word	0x200037a0

080059b8 <decrement>:
static void decrement(void){
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
	switch(curPosition){
 80059bc:	4b1e      	ldr	r3, [pc, #120]	; (8005a38 <decrement+0x80>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d024      	beq.n	8005a0e <decrement+0x56>
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	dc31      	bgt.n	8005a2c <decrement+0x74>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <decrement+0x1a>
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d00f      	beq.n	80059f0 <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 80059d0:	e02c      	b.n	8005a2c <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 80059d2:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <decrement+0x84>)
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d006      	beq.n	80059e8 <decrement+0x30>
 80059da:	4b18      	ldr	r3, [pc, #96]	; (8005a3c <decrement+0x84>)
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	3b01      	subs	r3, #1
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	4b16      	ldr	r3, [pc, #88]	; (8005a3c <decrement+0x84>)
 80059e4:	705a      	strb	r2, [r3, #1]
				break;
 80059e6:	e021      	b.n	8005a2c <decrement+0x74>
				else valDatePos[1] = 12;
 80059e8:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <decrement+0x84>)
 80059ea:	220c      	movs	r2, #12
 80059ec:	705a      	strb	r2, [r3, #1]
				break;
 80059ee:	e01d      	b.n	8005a2c <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 80059f0:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <decrement+0x84>)
 80059f2:	789b      	ldrb	r3, [r3, #2]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d006      	beq.n	8005a06 <decrement+0x4e>
 80059f8:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <decrement+0x84>)
 80059fa:	789b      	ldrb	r3, [r3, #2]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <decrement+0x84>)
 8005a02:	709a      	strb	r2, [r3, #2]
				break;
 8005a04:	e012      	b.n	8005a2c <decrement+0x74>
				else valDatePos[2] = 100;
 8005a06:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <decrement+0x84>)
 8005a08:	2264      	movs	r2, #100	; 0x64
 8005a0a:	709a      	strb	r2, [r3, #2]
				break;
 8005a0c:	e00e      	b.n	8005a2c <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <decrement+0x84>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d906      	bls.n	8005a24 <decrement+0x6c>
 8005a16:	4b09      	ldr	r3, [pc, #36]	; (8005a3c <decrement+0x84>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	4b07      	ldr	r3, [pc, #28]	; (8005a3c <decrement+0x84>)
 8005a20:	701a      	strb	r2, [r3, #0]
				break;
 8005a22:	e002      	b.n	8005a2a <decrement+0x72>
				else valDatePos[0] = 31;
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <decrement+0x84>)
 8005a26:	221f      	movs	r2, #31
 8005a28:	701a      	strb	r2, [r3, #0]
				break;
 8005a2a:	bf00      	nop
}
 8005a2c:	bf00      	nop
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	2000379c 	.word	0x2000379c
 8005a3c:	200037a0 	.word	0x200037a0

08005a40 <exit>:
static void exit(void){
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
	applySelectedScreen();
 8005a44:	f7fc f998 	bl	8001d78 <applySelectedScreen>
}
 8005a48:	bf00      	nop
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <accept>:
static void accept(void){
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 8005a50:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <accept+0x5c>)
 8005a52:	785a      	ldrb	r2, [r3, #1]
 8005a54:	4b15      	ldr	r3, [pc, #84]	; (8005aac <accept+0x60>)
 8005a56:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 8005a58:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <accept+0x5c>)
 8005a5a:	781a      	ldrb	r2, [r3, #0]
 8005a5c:	4b13      	ldr	r3, [pc, #76]	; (8005aac <accept+0x60>)
 8005a5e:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 8005a60:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <accept+0x5c>)
 8005a62:	789a      	ldrb	r2, [r3, #2]
 8005a64:	4b11      	ldr	r3, [pc, #68]	; (8005aac <accept+0x60>)
 8005a66:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 8005a68:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <accept+0x5c>)
 8005a6a:	7818      	ldrb	r0, [r3, #0]
 8005a6c:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <accept+0x5c>)
 8005a6e:	7859      	ldrb	r1, [r3, #1]
 8005a70:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <accept+0x5c>)
 8005a72:	789b      	ldrb	r3, [r3, #2]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f000 fa05 	bl	8005e8c <zellerCongruence>
 8005a82:	4603      	mov	r3, r0
 8005a84:	461a      	mov	r2, r3
 8005a86:	4b09      	ldr	r3, [pc, #36]	; (8005aac <accept+0x60>)
 8005a88:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	4907      	ldr	r1, [pc, #28]	; (8005aac <accept+0x60>)
 8005a8e:	4808      	ldr	r0, [pc, #32]	; (8005ab0 <accept+0x64>)
 8005a90:	f002 fef4 	bl	800887c <HAL_RTC_SetDate>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <accept+0x52>
	{
	Error_Handler();
 8005a9a:	f7fd f867 	bl	8002b6c <Error_Handler>
	}
	exit();
 8005a9e:	f7ff ffcf 	bl	8005a40 <exit>
}
 8005aa2:	bf00      	nop
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	200037a0 	.word	0x200037a0
 8005aac:	20003588 	.word	0x20003588
 8005ab0:	2000358c 	.word	0x2000358c

08005ab4 <setDefaultClbcks>:
#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <setDefaultClbcks+0x34>)
 8005aba:	4a0c      	ldr	r2, [pc, #48]	; (8005aec <setDefaultClbcks+0x38>)
 8005abc:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <setDefaultClbcks+0x3c>)
 8005ac0:	4a0c      	ldr	r2, [pc, #48]	; (8005af4 <setDefaultClbcks+0x40>)
 8005ac2:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <setDefaultClbcks+0x44>)
 8005ac6:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <setDefaultClbcks+0x48>)
 8005ac8:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <setDefaultClbcks+0x4c>)
 8005acc:	4a0d      	ldr	r2, [pc, #52]	; (8005b04 <setDefaultClbcks+0x50>)
 8005ace:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8005ad0:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <setDefaultClbcks+0x54>)
 8005ad2:	4a0e      	ldr	r2, [pc, #56]	; (8005b0c <setDefaultClbcks+0x58>)
 8005ad4:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8005ad6:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <setDefaultClbcks+0x5c>)
 8005ad8:	4a0e      	ldr	r2, [pc, #56]	; (8005b14 <setDefaultClbcks+0x60>)
 8005ada:	611a      	str	r2, [r3, #16]
}
 8005adc:	bf00      	nop
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20000614 	.word	0x20000614
 8005aec:	08005e39 	.word	0x08005e39
 8005af0:	200005f0 	.word	0x200005f0
 8005af4:	08005c7d 	.word	0x08005c7d
 8005af8:	200005cc 	.word	0x200005cc
 8005afc:	08005e45 	.word	0x08005e45
 8005b00:	20000560 	.word	0x20000560
 8005b04:	08005d69 	.word	0x08005d69
 8005b08:	20000584 	.word	0x20000584
 8005b0c:	08005c4d 	.word	0x08005c4d
 8005b10:	200005a8 	.word	0x200005a8
 8005b14:	08005cad 	.word	0x08005cad

08005b18 <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005b1c:	f7ff ffca 	bl	8005ab4 <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 8005b20:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <timeInputSetup+0x24>)
 8005b22:	781a      	ldrb	r2, [r3, #0]
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <timeInputSetup+0x28>)
 8005b26:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 8005b28:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <timeInputSetup+0x24>)
 8005b2a:	785a      	ldrb	r2, [r3, #1]
 8005b2c:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <timeInputSetup+0x28>)
 8005b2e:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 8005b30:	4b02      	ldr	r3, [pc, #8]	; (8005b3c <timeInputSetup+0x24>)
 8005b32:	789a      	ldrb	r2, [r3, #2]
 8005b34:	4b02      	ldr	r3, [pc, #8]	; (8005b40 <timeInputSetup+0x28>)
 8005b36:	709a      	strb	r2, [r3, #2]
}
 8005b38:	bf00      	nop
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20003574 	.word	0x20003574
 8005b40:	200037a4 	.word	0x200037a4

08005b44 <timeInputMain>:

void timeInputMain(void){
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	60da      	str	r2, [r3, #12]
 8005b5a:	611a      	str	r2, [r3, #16]
 8005b5c:	615a      	str	r2, [r3, #20]
 8005b5e:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 8005b60:	4b33      	ldr	r3, [pc, #204]	; (8005c30 <timeInputMain+0xec>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	463b      	mov	r3, r7
 8005b68:	4932      	ldr	r1, [pc, #200]	; (8005c34 <timeInputMain+0xf0>)
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f006 fd36 	bl	800c5dc <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 8005b70:	463a      	mov	r2, r7
 8005b72:	4b31      	ldr	r3, [pc, #196]	; (8005c38 <timeInputMain+0xf4>)
 8005b74:	214c      	movs	r1, #76	; 0x4c
 8005b76:	2014      	movs	r0, #20
 8005b78:	f7fc fb1a 	bl	80021b0 <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 8005b7c:	4b2c      	ldr	r3, [pc, #176]	; (8005c30 <timeInputMain+0xec>)
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	461a      	mov	r2, r3
 8005b82:	463b      	mov	r3, r7
 8005b84:	492b      	ldr	r1, [pc, #172]	; (8005c34 <timeInputMain+0xf0>)
 8005b86:	4618      	mov	r0, r3
 8005b88:	f006 fd28 	bl	800c5dc <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 8005b8c:	463a      	mov	r2, r7
 8005b8e:	4b2a      	ldr	r3, [pc, #168]	; (8005c38 <timeInputMain+0xf4>)
 8005b90:	214c      	movs	r1, #76	; 0x4c
 8005b92:	20aa      	movs	r0, #170	; 0xaa
 8005b94:	f7fc fb0c 	bl	80021b0 <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 8005b98:	4b28      	ldr	r3, [pc, #160]	; (8005c3c <timeInputMain+0xf8>)
 8005b9a:	789b      	ldrb	r3, [r3, #2]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	4924      	ldr	r1, [pc, #144]	; (8005c34 <timeInputMain+0xf0>)
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f006 fd1a 	bl	800c5dc <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 8005ba8:	463a      	mov	r2, r7
 8005baa:	4b25      	ldr	r3, [pc, #148]	; (8005c40 <timeInputMain+0xfc>)
 8005bac:	214c      	movs	r1, #76	; 0x4c
 8005bae:	f240 103b 	movw	r0, #315	; 0x13b
 8005bb2:	f7fc fafd 	bl	80021b0 <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 8005bb6:	4b23      	ldr	r3, [pc, #140]	; (8005c44 <timeInputMain+0x100>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <timeInputMain+0x104>)
 8005bbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	4b1f      	ldr	r3, [pc, #124]	; (8005c44 <timeInputMain+0x100>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4b1f      	ldr	r3, [pc, #124]	; (8005c48 <timeInputMain+0x104>)
 8005bcc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005bd0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	22af      	movs	r2, #175	; 0xaf
 8005bd8:	f7fc fcdc 	bl	8002594 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 8005bdc:	4b19      	ldr	r3, [pc, #100]	; (8005c44 <timeInputMain+0x100>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <timeInputMain+0x104>)
 8005be4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005be8:	4618      	mov	r0, r3
 8005bea:	4b16      	ldr	r3, [pc, #88]	; (8005c44 <timeInputMain+0x100>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <timeInputMain+0x104>)
 8005bf2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005bf6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	22b0      	movs	r2, #176	; 0xb0
 8005bfe:	f7fc fcc9 	bl	8002594 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 8005c02:	4b10      	ldr	r3, [pc, #64]	; (8005c44 <timeInputMain+0x100>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <timeInputMain+0x104>)
 8005c0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <timeInputMain+0x100>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <timeInputMain+0x104>)
 8005c18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005c1c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005c20:	2301      	movs	r3, #1
 8005c22:	22b1      	movs	r2, #177	; 0xb1
 8005c24:	f7fc fcb6 	bl	8002594 <lcdHLine>
}
 8005c28:	bf00      	nop
 8005c2a:	3720      	adds	r7, #32
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	200037a4 	.word	0x200037a4
 8005c34:	08013108 	.word	0x08013108
 8005c38:	080351f4 	.word	0x080351f4
 8005c3c:	20003574 	.word	0x20003574
 8005c40:	080370ec 	.word	0x080370ec
 8005c44:	200037a3 	.word	0x200037a3
 8005c48:	20000280 	.word	0x20000280

08005c4c <cursorNext>:

static void cursorNext(void){
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 8005c50:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <cursorNext+0x2c>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d806      	bhi.n	8005c66 <cursorNext+0x1a>
 8005c58:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <cursorNext+0x2c>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <cursorNext+0x2c>)
 8005c62:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 8005c64:	e002      	b.n	8005c6c <cursorNext+0x20>
	else curPosition = 0;
 8005c66:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <cursorNext+0x2c>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	701a      	strb	r2, [r3, #0]
}
 8005c6c:	bf00      	nop
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	200037a3 	.word	0x200037a3

08005c7c <cursorPrev>:
static void cursorPrev(void){
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8005c80:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <cursorPrev+0x2c>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d006      	beq.n	8005c96 <cursorPrev+0x1a>
 8005c88:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <cursorPrev+0x2c>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <cursorPrev+0x2c>)
 8005c92:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 8005c94:	e002      	b.n	8005c9c <cursorPrev+0x20>
	else curPosition = 4;
 8005c96:	4b04      	ldr	r3, [pc, #16]	; (8005ca8 <cursorPrev+0x2c>)
 8005c98:	2204      	movs	r2, #4
 8005c9a:	701a      	strb	r2, [r3, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	200037a3 	.word	0x200037a3

08005cac <increment>:
static void increment(void){
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
	switch(curPosition){
 8005cb0:	4b2b      	ldr	r3, [pc, #172]	; (8005d60 <increment+0xb4>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d84d      	bhi.n	8005d54 <increment+0xa8>
 8005cb8:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <increment+0x14>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cd5 	.word	0x08005cd5
 8005cc4:	08005cf3 	.word	0x08005cf3
 8005cc8:	08005d11 	.word	0x08005d11
 8005ccc:	08005d2f 	.word	0x08005d2f
 8005cd0:	08005d4d 	.word	0x08005d4d
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 8005cd4:	4b23      	ldr	r3, [pc, #140]	; (8005d64 <increment+0xb8>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b0c      	cmp	r3, #12
 8005cda:	d806      	bhi.n	8005cea <increment+0x3e>
 8005cdc:	4b21      	ldr	r3, [pc, #132]	; (8005d64 <increment+0xb8>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	330a      	adds	r3, #10
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	4b1f      	ldr	r3, [pc, #124]	; (8005d64 <increment+0xb8>)
 8005ce6:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 8005ce8:	e034      	b.n	8005d54 <increment+0xa8>
			else valTimePos[0] = 20;
 8005cea:	4b1e      	ldr	r3, [pc, #120]	; (8005d64 <increment+0xb8>)
 8005cec:	2214      	movs	r2, #20
 8005cee:	701a      	strb	r2, [r3, #0]
			break;
 8005cf0:	e030      	b.n	8005d54 <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <increment+0xb8>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b17      	cmp	r3, #23
 8005cf8:	d806      	bhi.n	8005d08 <increment+0x5c>
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <increment+0xb8>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	4b18      	ldr	r3, [pc, #96]	; (8005d64 <increment+0xb8>)
 8005d04:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 8005d06:	e025      	b.n	8005d54 <increment+0xa8>
			else valTimePos[0] = 0;
 8005d08:	4b16      	ldr	r3, [pc, #88]	; (8005d64 <increment+0xb8>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	701a      	strb	r2, [r3, #0]
			break;
 8005d0e:	e021      	b.n	8005d54 <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 8005d10:	4b14      	ldr	r3, [pc, #80]	; (8005d64 <increment+0xb8>)
 8005d12:	785b      	ldrb	r3, [r3, #1]
 8005d14:	2b30      	cmp	r3, #48	; 0x30
 8005d16:	d806      	bhi.n	8005d26 <increment+0x7a>
 8005d18:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <increment+0xb8>)
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	330a      	adds	r3, #10
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <increment+0xb8>)
 8005d22:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 8005d24:	e016      	b.n	8005d54 <increment+0xa8>
			else valTimePos[1] = 0;
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <increment+0xb8>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	705a      	strb	r2, [r3, #1]
			break;
 8005d2c:	e012      	b.n	8005d54 <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <increment+0xb8>)
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	2b3a      	cmp	r3, #58	; 0x3a
 8005d34:	d806      	bhi.n	8005d44 <increment+0x98>
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <increment+0xb8>)
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <increment+0xb8>)
 8005d40:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 8005d42:	e007      	b.n	8005d54 <increment+0xa8>
			else valTimePos[1] = 0;
 8005d44:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <increment+0xb8>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	705a      	strb	r2, [r3, #1]
			break;
 8005d4a:	e003      	b.n	8005d54 <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 8005d4c:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <increment+0xb8>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	709a      	strb	r2, [r3, #2]
			break;
 8005d52:	bf00      	nop
	}
}
 8005d54:	bf00      	nop
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	200037a3 	.word	0x200037a3
 8005d64:	200037a4 	.word	0x200037a4

08005d68 <decrement>:
static void decrement(void){
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
	switch(curPosition){
 8005d6c:	4b2e      	ldr	r3, [pc, #184]	; (8005e28 <decrement+0xc0>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d857      	bhi.n	8005e24 <decrement+0xbc>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <decrement+0x14>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005d91 	.word	0x08005d91
 8005d80:	08005daf 	.word	0x08005daf
 8005d84:	08005dcd 	.word	0x08005dcd
 8005d88:	08005deb 	.word	0x08005deb
 8005d8c:	08005e09 	.word	0x08005e09
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 8005d90:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <decrement+0xc4>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b09      	cmp	r3, #9
 8005d96:	d906      	bls.n	8005da6 <decrement+0x3e>
 8005d98:	4b24      	ldr	r3, [pc, #144]	; (8005e2c <decrement+0xc4>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	3b0a      	subs	r3, #10
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	4b22      	ldr	r3, [pc, #136]	; (8005e2c <decrement+0xc4>)
 8005da2:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 8005da4:	e03e      	b.n	8005e24 <decrement+0xbc>
				else valTimePos[0] = 0;
 8005da6:	4b21      	ldr	r3, [pc, #132]	; (8005e2c <decrement+0xc4>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	701a      	strb	r2, [r3, #0]
				break;
 8005dac:	e03a      	b.n	8005e24 <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 8005dae:	4b1f      	ldr	r3, [pc, #124]	; (8005e2c <decrement+0xc4>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <decrement+0x5c>
 8005db6:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <decrement+0xc4>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	4b1b      	ldr	r3, [pc, #108]	; (8005e2c <decrement+0xc4>)
 8005dc0:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 8005dc2:	e02f      	b.n	8005e24 <decrement+0xbc>
				else valTimePos[0] = 23;
 8005dc4:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <decrement+0xc4>)
 8005dc6:	2217      	movs	r2, #23
 8005dc8:	701a      	strb	r2, [r3, #0]
				break;
 8005dca:	e02b      	b.n	8005e24 <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 8005dcc:	4b17      	ldr	r3, [pc, #92]	; (8005e2c <decrement+0xc4>)
 8005dce:	785b      	ldrb	r3, [r3, #1]
 8005dd0:	2b09      	cmp	r3, #9
 8005dd2:	d906      	bls.n	8005de2 <decrement+0x7a>
 8005dd4:	4b15      	ldr	r3, [pc, #84]	; (8005e2c <decrement+0xc4>)
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	3b0a      	subs	r3, #10
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	4b13      	ldr	r3, [pc, #76]	; (8005e2c <decrement+0xc4>)
 8005dde:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 8005de0:	e020      	b.n	8005e24 <decrement+0xbc>
				else valTimePos[1] = 0;
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <decrement+0xc4>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	705a      	strb	r2, [r3, #1]
				break;
 8005de8:	e01c      	b.n	8005e24 <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 8005dea:	4b10      	ldr	r3, [pc, #64]	; (8005e2c <decrement+0xc4>)
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d006      	beq.n	8005e00 <decrement+0x98>
 8005df2:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <decrement+0xc4>)
 8005df4:	785b      	ldrb	r3, [r3, #1]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <decrement+0xc4>)
 8005dfc:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 8005dfe:	e011      	b.n	8005e24 <decrement+0xbc>
				else valTimePos[1] = 59;
 8005e00:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <decrement+0xc4>)
 8005e02:	223b      	movs	r2, #59	; 0x3b
 8005e04:	705a      	strb	r2, [r3, #1]
				break;
 8005e06:	e00d      	b.n	8005e24 <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 8005e08:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <decrement+0xc8>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	4907      	ldr	r1, [pc, #28]	; (8005e30 <decrement+0xc8>)
 8005e12:	4808      	ldr	r0, [pc, #32]	; (8005e34 <decrement+0xcc>)
 8005e14:	f002 fc3a 	bl	800868c <HAL_RTC_SetTime>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <decrement+0xba>
					{
						Error_Handler();
 8005e1e:	f7fc fea5 	bl	8002b6c <Error_Handler>
					}
				break;
 8005e22:	bf00      	nop
		}
}
 8005e24:	bf00      	nop
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	200037a3 	.word	0x200037a3
 8005e2c:	200037a4 	.word	0x200037a4
 8005e30:	20003574 	.word	0x20003574
 8005e34:	2000358c 	.word	0x2000358c

08005e38 <exit>:
static void exit(void){
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
	applySelectedScreen();
 8005e3c:	f7fb ff9c 	bl	8001d78 <applySelectedScreen>
}
 8005e40:	bf00      	nop
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <accept>:
static void accept(void){
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 8005e48:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <accept+0x3c>)
 8005e4a:	781a      	ldrb	r2, [r3, #0]
 8005e4c:	4b0d      	ldr	r3, [pc, #52]	; (8005e84 <accept+0x40>)
 8005e4e:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <accept+0x3c>)
 8005e52:	785a      	ldrb	r2, [r3, #1]
 8005e54:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <accept+0x40>)
 8005e56:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005e58:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <accept+0x40>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005e5e:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <accept+0x40>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8005e64:	2200      	movs	r2, #0
 8005e66:	4907      	ldr	r1, [pc, #28]	; (8005e84 <accept+0x40>)
 8005e68:	4807      	ldr	r0, [pc, #28]	; (8005e88 <accept+0x44>)
 8005e6a:	f002 fc0f 	bl	800868c <HAL_RTC_SetTime>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <accept+0x34>
	{
	Error_Handler();
 8005e74:	f7fc fe7a 	bl	8002b6c <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exit();
 8005e78:	f7ff ffde 	bl	8005e38 <exit>
}
 8005e7c:	bf00      	nop
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	200037a4 	.word	0x200037a4
 8005e84:	20003574 	.word	0x20003574
 8005e88:	2000358c 	.word	0x2000358c

08005e8c <zellerCongruence>:
 *      Author: wojch
 */

#include "timeUtils.h"

uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	71fb      	strb	r3, [r7, #7]
 8005e96:	460b      	mov	r3, r1
 8005e98:	71bb      	strb	r3, [r7, #6]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 8005e9e:	79bb      	ldrb	r3, [r7, #6]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d104      	bne.n	8005eae <zellerCongruence+0x22>
	        month = 13;
 8005ea4:	230d      	movs	r3, #13
 8005ea6:	71bb      	strb	r3, [r7, #6]
	        year--;
 8005ea8:	88bb      	ldrh	r3, [r7, #4]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 8005eae:	79bb      	ldrb	r3, [r7, #6]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d104      	bne.n	8005ebe <zellerCongruence+0x32>
	        month = 14;
 8005eb4:	230e      	movs	r3, #14
 8005eb6:	71bb      	strb	r3, [r7, #6]
	        year--;
 8005eb8:	88bb      	ldrh	r3, [r7, #4]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 8005ec2:	79bb      	ldrb	r3, [r7, #6]
 8005ec4:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 8005ec6:	88bb      	ldrh	r3, [r7, #4]
 8005ec8:	4a29      	ldr	r2, [pc, #164]	; (8005f70 <zellerCongruence+0xe4>)
 8005eca:	fba2 1203 	umull	r1, r2, r2, r3
 8005ece:	0952      	lsrs	r2, r2, #5
 8005ed0:	2164      	movs	r1, #100	; 0x64
 8005ed2:	fb01 f202 	mul.w	r2, r1, r2
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 8005edc:	88bb      	ldrh	r3, [r7, #4]
 8005ede:	4a24      	ldr	r2, [pc, #144]	; (8005f70 <zellerCongruence+0xe4>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8005eea:	7bf9      	ldrb	r1, [r7, #15]
 8005eec:	7bbb      	ldrb	r3, [r7, #14]
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	4a1e      	ldr	r2, [pc, #120]	; (8005f74 <zellerCongruence+0xe8>)
 8005efc:	fb82 0203 	smull	r0, r2, r2, r3
 8005f00:	1052      	asrs	r2, r2, #1
 8005f02:	17db      	asrs	r3, r3, #31
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	18ca      	adds	r2, r1, r3
 8005f08:	7b7b      	ldrb	r3, [r7, #13]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	7b7a      	ldrb	r2, [r7, #13]
 8005f0e:	0892      	lsrs	r2, r2, #2
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 8005f14:	7b3a      	ldrb	r2, [r7, #12]
 8005f16:	0892      	lsrs	r2, r2, #2
 8005f18:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8005f1a:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 8005f1c:	7b3a      	ldrb	r2, [r7, #12]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8005f24:	440b      	add	r3, r1
 8005f26:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	4b13      	ldr	r3, [pc, #76]	; (8005f78 <zellerCongruence+0xec>)
 8005f2c:	fb83 1302 	smull	r1, r3, r3, r2
 8005f30:	4413      	add	r3, r2
 8005f32:	1099      	asrs	r1, r3, #2
 8005f34:	17d3      	asrs	r3, r2, #31
 8005f36:	1ac9      	subs	r1, r1, r3
 8005f38:	460b      	mov	r3, r1
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	1a5b      	subs	r3, r3, r1
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	1d5a      	adds	r2, r3, #5
 8005f46:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <zellerCongruence+0xec>)
 8005f48:	fb83 1302 	smull	r1, r3, r3, r2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	1099      	asrs	r1, r3, #2
 8005f50:	17d3      	asrs	r3, r2, #31
 8005f52:	1ac9      	subs	r1, r1, r3
 8005f54:	460b      	mov	r3, r1
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	1a5b      	subs	r3, r3, r1
 8005f5a:	1ad1      	subs	r1, r2, r3
 8005f5c:	b2cb      	uxtb	r3, r1
 8005f5e:	3301      	adds	r3, #1
 8005f60:	b2db      	uxtb	r3, r3
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	51eb851f 	.word	0x51eb851f
 8005f74:	66666667 	.word	0x66666667
 8005f78:	92492493 	.word	0x92492493

08005f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005fb4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005f80:	480d      	ldr	r0, [pc, #52]	; (8005fb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005f82:	490e      	ldr	r1, [pc, #56]	; (8005fbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005f84:	4a0e      	ldr	r2, [pc, #56]	; (8005fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f88:	e002      	b.n	8005f90 <LoopCopyDataInit>

08005f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f8e:	3304      	adds	r3, #4

08005f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f94:	d3f9      	bcc.n	8005f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f96:	4a0b      	ldr	r2, [pc, #44]	; (8005fc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005f98:	4c0b      	ldr	r4, [pc, #44]	; (8005fc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f9c:	e001      	b.n	8005fa2 <LoopFillZerobss>

08005f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fa0:	3204      	adds	r2, #4

08005fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fa4:	d3fb      	bcc.n	8005f9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005fa6:	f7fc ffdb 	bl	8002f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005faa:	f005 f9a7 	bl	800b2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005fae:	f7fc fccb 	bl	8002948 <main>
  bx  lr    
 8005fb2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005fb4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fbc:	200004f0 	.word	0x200004f0
  ldr r2, =_sidata
 8005fc0:	0803d178 	.word	0x0803d178
  ldr r2, =_sbss
 8005fc4:	200004f0 	.word	0x200004f0
  ldr r4, =_ebss
 8005fc8:	200037ec 	.word	0x200037ec

08005fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fcc:	e7fe      	b.n	8005fcc <ADC_IRQHandler>
	...

08005fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fd4:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <HAL_Init+0x40>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a0d      	ldr	r2, [pc, #52]	; (8006010 <HAL_Init+0x40>)
 8005fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <HAL_Init+0x40>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a0a      	ldr	r2, [pc, #40]	; (8006010 <HAL_Init+0x40>)
 8005fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fec:	4b08      	ldr	r3, [pc, #32]	; (8006010 <HAL_Init+0x40>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a07      	ldr	r2, [pc, #28]	; (8006010 <HAL_Init+0x40>)
 8005ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ff8:	2003      	movs	r0, #3
 8005ffa:	f000 f94f 	bl	800629c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ffe:	2000      	movs	r0, #0
 8006000:	f000 f808 	bl	8006014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006004:	f7fc fe98 	bl	8002d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40023c00 	.word	0x40023c00

08006014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800601c:	4b12      	ldr	r3, [pc, #72]	; (8006068 <HAL_InitTick+0x54>)
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4b12      	ldr	r3, [pc, #72]	; (800606c <HAL_InitTick+0x58>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	4619      	mov	r1, r3
 8006026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800602a:	fbb3 f3f1 	udiv	r3, r3, r1
 800602e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f967 	bl	8006306 <HAL_SYSTICK_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e00e      	b.n	8006060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b0f      	cmp	r3, #15
 8006046:	d80a      	bhi.n	800605e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006048:	2200      	movs	r2, #0
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	f000 f92f 	bl	80062b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006054:	4a06      	ldr	r2, [pc, #24]	; (8006070 <HAL_InitTick+0x5c>)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	e000      	b.n	8006060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	20000180 	.word	0x20000180
 800606c:	200002b8 	.word	0x200002b8
 8006070:	200002b4 	.word	0x200002b4

08006074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006074:	b480      	push	{r7}
 8006076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006078:	4b06      	ldr	r3, [pc, #24]	; (8006094 <HAL_IncTick+0x20>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <HAL_IncTick+0x24>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4413      	add	r3, r2
 8006084:	4a04      	ldr	r2, [pc, #16]	; (8006098 <HAL_IncTick+0x24>)
 8006086:	6013      	str	r3, [r2, #0]
}
 8006088:	bf00      	nop
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	200002b8 	.word	0x200002b8
 8006098:	200037a8 	.word	0x200037a8

0800609c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  return uwTick;
 80060a0:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <HAL_GetTick+0x14>)
 80060a2:	681b      	ldr	r3, [r3, #0]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	200037a8 	.word	0x200037a8

080060b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060bc:	f7ff ffee 	bl	800609c <HAL_GetTick>
 80060c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d005      	beq.n	80060da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <HAL_Delay+0x44>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80060da:	bf00      	nop
 80060dc:	f7ff ffde 	bl	800609c <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d8f7      	bhi.n	80060dc <HAL_Delay+0x28>
  {
  }
}
 80060ec:	bf00      	nop
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	200002b8 	.word	0x200002b8

080060fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800610c:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <__NVIC_SetPriorityGrouping+0x44>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006118:	4013      	ands	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800612c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800612e:	4a04      	ldr	r2, [pc, #16]	; (8006140 <__NVIC_SetPriorityGrouping+0x44>)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	60d3      	str	r3, [r2, #12]
}
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	e000ed00 	.word	0xe000ed00

08006144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006148:	4b04      	ldr	r3, [pc, #16]	; (800615c <__NVIC_GetPriorityGrouping+0x18>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	0a1b      	lsrs	r3, r3, #8
 800614e:	f003 0307 	and.w	r3, r3, #7
}
 8006152:	4618      	mov	r0, r3
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	e000ed00 	.word	0xe000ed00

08006160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800616a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800616e:	2b00      	cmp	r3, #0
 8006170:	db0b      	blt.n	800618a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	f003 021f 	and.w	r2, r3, #31
 8006178:	4907      	ldr	r1, [pc, #28]	; (8006198 <__NVIC_EnableIRQ+0x38>)
 800617a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	2001      	movs	r0, #1
 8006182:	fa00 f202 	lsl.w	r2, r0, r2
 8006186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	e000e100 	.word	0xe000e100

0800619c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	6039      	str	r1, [r7, #0]
 80061a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	db0a      	blt.n	80061c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	490c      	ldr	r1, [pc, #48]	; (80061e8 <__NVIC_SetPriority+0x4c>)
 80061b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ba:	0112      	lsls	r2, r2, #4
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	440b      	add	r3, r1
 80061c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061c4:	e00a      	b.n	80061dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	4908      	ldr	r1, [pc, #32]	; (80061ec <__NVIC_SetPriority+0x50>)
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	3b04      	subs	r3, #4
 80061d4:	0112      	lsls	r2, r2, #4
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	440b      	add	r3, r1
 80061da:	761a      	strb	r2, [r3, #24]
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	e000e100 	.word	0xe000e100
 80061ec:	e000ed00 	.word	0xe000ed00

080061f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b089      	sub	sp, #36	; 0x24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f1c3 0307 	rsb	r3, r3, #7
 800620a:	2b04      	cmp	r3, #4
 800620c:	bf28      	it	cs
 800620e:	2304      	movcs	r3, #4
 8006210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	3304      	adds	r3, #4
 8006216:	2b06      	cmp	r3, #6
 8006218:	d902      	bls.n	8006220 <NVIC_EncodePriority+0x30>
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	3b03      	subs	r3, #3
 800621e:	e000      	b.n	8006222 <NVIC_EncodePriority+0x32>
 8006220:	2300      	movs	r3, #0
 8006222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006224:	f04f 32ff 	mov.w	r2, #4294967295
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	43da      	mvns	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	401a      	ands	r2, r3
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006238:	f04f 31ff 	mov.w	r1, #4294967295
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	fa01 f303 	lsl.w	r3, r1, r3
 8006242:	43d9      	mvns	r1, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006248:	4313      	orrs	r3, r2
         );
}
 800624a:	4618      	mov	r0, r3
 800624c:	3724      	adds	r7, #36	; 0x24
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3b01      	subs	r3, #1
 8006264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006268:	d301      	bcc.n	800626e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800626a:	2301      	movs	r3, #1
 800626c:	e00f      	b.n	800628e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800626e:	4a0a      	ldr	r2, [pc, #40]	; (8006298 <SysTick_Config+0x40>)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3b01      	subs	r3, #1
 8006274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006276:	210f      	movs	r1, #15
 8006278:	f04f 30ff 	mov.w	r0, #4294967295
 800627c:	f7ff ff8e 	bl	800619c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <SysTick_Config+0x40>)
 8006282:	2200      	movs	r2, #0
 8006284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006286:	4b04      	ldr	r3, [pc, #16]	; (8006298 <SysTick_Config+0x40>)
 8006288:	2207      	movs	r2, #7
 800628a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	e000e010 	.word	0xe000e010

0800629c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff ff29 	bl	80060fc <__NVIC_SetPriorityGrouping>
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b086      	sub	sp, #24
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	4603      	mov	r3, r0
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062c4:	f7ff ff3e 	bl	8006144 <__NVIC_GetPriorityGrouping>
 80062c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	6978      	ldr	r0, [r7, #20]
 80062d0:	f7ff ff8e 	bl	80061f0 <NVIC_EncodePriority>
 80062d4:	4602      	mov	r2, r0
 80062d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062da:	4611      	mov	r1, r2
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff ff5d 	bl	800619c <__NVIC_SetPriority>
}
 80062e2:	bf00      	nop
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b082      	sub	sp, #8
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	4603      	mov	r3, r0
 80062f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff ff31 	bl	8006160 <__NVIC_EnableIRQ>
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff ffa2 	bl	8006258 <SysTick_Config>
 8006314:	4603      	mov	r3, r0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800632c:	f7ff feb6 	bl	800609c <HAL_GetTick>
 8006330:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d008      	beq.n	8006350 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2280      	movs	r2, #128	; 0x80
 8006342:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e052      	b.n	80063f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0216 	bic.w	r2, r2, #22
 800635e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695a      	ldr	r2, [r3, #20]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800636e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d103      	bne.n	8006380 <HAL_DMA_Abort+0x62>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637c:	2b00      	cmp	r3, #0
 800637e:	d007      	beq.n	8006390 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0208 	bic.w	r2, r2, #8
 800638e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0201 	bic.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063a0:	e013      	b.n	80063ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063a2:	f7ff fe7b 	bl	800609c <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b05      	cmp	r3, #5
 80063ae:	d90c      	bls.n	80063ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2220      	movs	r2, #32
 80063b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2203      	movs	r2, #3
 80063ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e015      	b.n	80063f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e4      	bne.n	80063a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063dc:	223f      	movs	r2, #63	; 0x3f
 80063de:	409a      	lsls	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d004      	beq.n	800641c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2280      	movs	r2, #128	; 0x80
 8006416:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e00c      	b.n	8006436 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2205      	movs	r2, #5
 8006420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0201 	bic.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
	...

08006444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006444:	b480      	push	{r7}
 8006446:	b089      	sub	sp, #36	; 0x24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006452:	2300      	movs	r3, #0
 8006454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006456:	2300      	movs	r3, #0
 8006458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800645a:	2300      	movs	r3, #0
 800645c:	61fb      	str	r3, [r7, #28]
 800645e:	e177      	b.n	8006750 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006460:	2201      	movs	r2, #1
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4013      	ands	r3, r2
 8006472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	429a      	cmp	r2, r3
 800647a:	f040 8166 	bne.w	800674a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	2b01      	cmp	r3, #1
 8006488:	d005      	beq.n	8006496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006492:	2b02      	cmp	r3, #2
 8006494:	d130      	bne.n	80064f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	2203      	movs	r2, #3
 80064a2:	fa02 f303 	lsl.w	r3, r2, r3
 80064a6:	43db      	mvns	r3, r3
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	4013      	ands	r3, r2
 80064ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	4313      	orrs	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064cc:	2201      	movs	r2, #1
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	43db      	mvns	r3, r3
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	4013      	ands	r3, r2
 80064da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	091b      	lsrs	r3, r3, #4
 80064e2:	f003 0201 	and.w	r2, r3, #1
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	2b03      	cmp	r3, #3
 8006502:	d017      	beq.n	8006534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	2203      	movs	r2, #3
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	43db      	mvns	r3, r3
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	4013      	ands	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	4313      	orrs	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d123      	bne.n	8006588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	08da      	lsrs	r2, r3, #3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3208      	adds	r2, #8
 8006548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	220f      	movs	r2, #15
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	43db      	mvns	r3, r3
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	4013      	ands	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	4313      	orrs	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	08da      	lsrs	r2, r3, #3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3208      	adds	r2, #8
 8006582:	69b9      	ldr	r1, [r7, #24]
 8006584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	2203      	movs	r2, #3
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	43db      	mvns	r3, r3
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	4013      	ands	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f003 0203 	and.w	r2, r3, #3
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80c0 	beq.w	800674a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	4b66      	ldr	r3, [pc, #408]	; (8006768 <HAL_GPIO_Init+0x324>)
 80065d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d2:	4a65      	ldr	r2, [pc, #404]	; (8006768 <HAL_GPIO_Init+0x324>)
 80065d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065d8:	6453      	str	r3, [r2, #68]	; 0x44
 80065da:	4b63      	ldr	r3, [pc, #396]	; (8006768 <HAL_GPIO_Init+0x324>)
 80065dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065e6:	4a61      	ldr	r2, [pc, #388]	; (800676c <HAL_GPIO_Init+0x328>)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	089b      	lsrs	r3, r3, #2
 80065ec:	3302      	adds	r3, #2
 80065ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	220f      	movs	r2, #15
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	43db      	mvns	r3, r3
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	4013      	ands	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a58      	ldr	r2, [pc, #352]	; (8006770 <HAL_GPIO_Init+0x32c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d037      	beq.n	8006682 <HAL_GPIO_Init+0x23e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a57      	ldr	r2, [pc, #348]	; (8006774 <HAL_GPIO_Init+0x330>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d031      	beq.n	800667e <HAL_GPIO_Init+0x23a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a56      	ldr	r2, [pc, #344]	; (8006778 <HAL_GPIO_Init+0x334>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d02b      	beq.n	800667a <HAL_GPIO_Init+0x236>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a55      	ldr	r2, [pc, #340]	; (800677c <HAL_GPIO_Init+0x338>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d025      	beq.n	8006676 <HAL_GPIO_Init+0x232>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a54      	ldr	r2, [pc, #336]	; (8006780 <HAL_GPIO_Init+0x33c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d01f      	beq.n	8006672 <HAL_GPIO_Init+0x22e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a53      	ldr	r2, [pc, #332]	; (8006784 <HAL_GPIO_Init+0x340>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d019      	beq.n	800666e <HAL_GPIO_Init+0x22a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a52      	ldr	r2, [pc, #328]	; (8006788 <HAL_GPIO_Init+0x344>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d013      	beq.n	800666a <HAL_GPIO_Init+0x226>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a51      	ldr	r2, [pc, #324]	; (800678c <HAL_GPIO_Init+0x348>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00d      	beq.n	8006666 <HAL_GPIO_Init+0x222>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a50      	ldr	r2, [pc, #320]	; (8006790 <HAL_GPIO_Init+0x34c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d007      	beq.n	8006662 <HAL_GPIO_Init+0x21e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a4f      	ldr	r2, [pc, #316]	; (8006794 <HAL_GPIO_Init+0x350>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d101      	bne.n	800665e <HAL_GPIO_Init+0x21a>
 800665a:	2309      	movs	r3, #9
 800665c:	e012      	b.n	8006684 <HAL_GPIO_Init+0x240>
 800665e:	230a      	movs	r3, #10
 8006660:	e010      	b.n	8006684 <HAL_GPIO_Init+0x240>
 8006662:	2308      	movs	r3, #8
 8006664:	e00e      	b.n	8006684 <HAL_GPIO_Init+0x240>
 8006666:	2307      	movs	r3, #7
 8006668:	e00c      	b.n	8006684 <HAL_GPIO_Init+0x240>
 800666a:	2306      	movs	r3, #6
 800666c:	e00a      	b.n	8006684 <HAL_GPIO_Init+0x240>
 800666e:	2305      	movs	r3, #5
 8006670:	e008      	b.n	8006684 <HAL_GPIO_Init+0x240>
 8006672:	2304      	movs	r3, #4
 8006674:	e006      	b.n	8006684 <HAL_GPIO_Init+0x240>
 8006676:	2303      	movs	r3, #3
 8006678:	e004      	b.n	8006684 <HAL_GPIO_Init+0x240>
 800667a:	2302      	movs	r3, #2
 800667c:	e002      	b.n	8006684 <HAL_GPIO_Init+0x240>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_GPIO_Init+0x240>
 8006682:	2300      	movs	r3, #0
 8006684:	69fa      	ldr	r2, [r7, #28]
 8006686:	f002 0203 	and.w	r2, r2, #3
 800668a:	0092      	lsls	r2, r2, #2
 800668c:	4093      	lsls	r3, r2
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4313      	orrs	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006694:	4935      	ldr	r1, [pc, #212]	; (800676c <HAL_GPIO_Init+0x328>)
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	089b      	lsrs	r3, r3, #2
 800669a:	3302      	adds	r3, #2
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066a2:	4b3d      	ldr	r3, [pc, #244]	; (8006798 <HAL_GPIO_Init+0x354>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	43db      	mvns	r3, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4013      	ands	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066c6:	4a34      	ldr	r2, [pc, #208]	; (8006798 <HAL_GPIO_Init+0x354>)
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066cc:	4b32      	ldr	r3, [pc, #200]	; (8006798 <HAL_GPIO_Init+0x354>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	4013      	ands	r3, r2
 80066da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066f0:	4a29      	ldr	r2, [pc, #164]	; (8006798 <HAL_GPIO_Init+0x354>)
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066f6:	4b28      	ldr	r3, [pc, #160]	; (8006798 <HAL_GPIO_Init+0x354>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	43db      	mvns	r3, r3
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	4013      	ands	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800671a:	4a1f      	ldr	r2, [pc, #124]	; (8006798 <HAL_GPIO_Init+0x354>)
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006720:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <HAL_GPIO_Init+0x354>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	43db      	mvns	r3, r3
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	4013      	ands	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006744:	4a14      	ldr	r2, [pc, #80]	; (8006798 <HAL_GPIO_Init+0x354>)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3301      	adds	r3, #1
 800674e:	61fb      	str	r3, [r7, #28]
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	2b0f      	cmp	r3, #15
 8006754:	f67f ae84 	bls.w	8006460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	3724      	adds	r7, #36	; 0x24
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40023800 	.word	0x40023800
 800676c:	40013800 	.word	0x40013800
 8006770:	40020000 	.word	0x40020000
 8006774:	40020400 	.word	0x40020400
 8006778:	40020800 	.word	0x40020800
 800677c:	40020c00 	.word	0x40020c00
 8006780:	40021000 	.word	0x40021000
 8006784:	40021400 	.word	0x40021400
 8006788:	40021800 	.word	0x40021800
 800678c:	40021c00 	.word	0x40021c00
 8006790:	40022000 	.word	0x40022000
 8006794:	40022400 	.word	0x40022400
 8006798:	40013c00 	.word	0x40013c00

0800679c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	887b      	ldrh	r3, [r7, #2]
 80067ae:	4013      	ands	r3, r2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
 80067b8:	e001      	b.n	80067be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067be:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	807b      	strh	r3, [r7, #2]
 80067d8:	4613      	mov	r3, r2
 80067da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067dc:	787b      	ldrb	r3, [r7, #1]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067e2:	887a      	ldrh	r2, [r7, #2]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067e8:	e003      	b.n	80067f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067ea:	887b      	ldrh	r3, [r7, #2]
 80067ec:	041a      	lsls	r2, r3, #16
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	619a      	str	r2, [r3, #24]
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006810:	887a      	ldrh	r2, [r7, #2]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4013      	ands	r3, r2
 8006816:	041a      	lsls	r2, r3, #16
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	43d9      	mvns	r1, r3
 800681c:	887b      	ldrh	r3, [r7, #2]
 800681e:	400b      	ands	r3, r1
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	619a      	str	r2, [r3, #24]
}
 8006826:	bf00      	nop
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
	...

08006834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800683e:	4b08      	ldr	r3, [pc, #32]	; (8006860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006840:	695a      	ldr	r2, [r3, #20]
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	4013      	ands	r3, r2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d006      	beq.n	8006858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800684a:	4a05      	ldr	r2, [pc, #20]	; (8006860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006850:	88fb      	ldrh	r3, [r7, #6]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 f806 	bl	8006864 <HAL_GPIO_EXTI_Callback>
  }
}
 8006858:	bf00      	nop
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40013c00 	.word	0x40013c00

08006864 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	4603      	mov	r3, r0
 800686c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e12b      	b.n	8006ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fb fb02 	bl	8001eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2224      	movs	r2, #36	; 0x24
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0201 	bic.w	r2, r2, #1
 80068be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068e0:	f001 fc76 	bl	80081d0 <HAL_RCC_GetPCLK1Freq>
 80068e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	4a81      	ldr	r2, [pc, #516]	; (8006af0 <HAL_I2C_Init+0x274>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d807      	bhi.n	8006900 <HAL_I2C_Init+0x84>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4a80      	ldr	r2, [pc, #512]	; (8006af4 <HAL_I2C_Init+0x278>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	bf94      	ite	ls
 80068f8:	2301      	movls	r3, #1
 80068fa:	2300      	movhi	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	e006      	b.n	800690e <HAL_I2C_Init+0x92>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a7d      	ldr	r2, [pc, #500]	; (8006af8 <HAL_I2C_Init+0x27c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	bf94      	ite	ls
 8006908:	2301      	movls	r3, #1
 800690a:	2300      	movhi	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e0e7      	b.n	8006ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4a78      	ldr	r2, [pc, #480]	; (8006afc <HAL_I2C_Init+0x280>)
 800691a:	fba2 2303 	umull	r2, r3, r2, r3
 800691e:	0c9b      	lsrs	r3, r3, #18
 8006920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	4a6a      	ldr	r2, [pc, #424]	; (8006af0 <HAL_I2C_Init+0x274>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d802      	bhi.n	8006950 <HAL_I2C_Init+0xd4>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	3301      	adds	r3, #1
 800694e:	e009      	b.n	8006964 <HAL_I2C_Init+0xe8>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006956:	fb02 f303 	mul.w	r3, r2, r3
 800695a:	4a69      	ldr	r2, [pc, #420]	; (8006b00 <HAL_I2C_Init+0x284>)
 800695c:	fba2 2303 	umull	r2, r3, r2, r3
 8006960:	099b      	lsrs	r3, r3, #6
 8006962:	3301      	adds	r3, #1
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	430b      	orrs	r3, r1
 800696a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	495c      	ldr	r1, [pc, #368]	; (8006af0 <HAL_I2C_Init+0x274>)
 8006980:	428b      	cmp	r3, r1
 8006982:	d819      	bhi.n	80069b8 <HAL_I2C_Init+0x13c>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	1e59      	subs	r1, r3, #1
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006992:	1c59      	adds	r1, r3, #1
 8006994:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006998:	400b      	ands	r3, r1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <HAL_I2C_Init+0x138>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	1e59      	subs	r1, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80069ac:	3301      	adds	r3, #1
 80069ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b2:	e051      	b.n	8006a58 <HAL_I2C_Init+0x1dc>
 80069b4:	2304      	movs	r3, #4
 80069b6:	e04f      	b.n	8006a58 <HAL_I2C_Init+0x1dc>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d111      	bne.n	80069e4 <HAL_I2C_Init+0x168>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	1e58      	subs	r0, r3, #1
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6859      	ldr	r1, [r3, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	440b      	add	r3, r1
 80069ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80069d2:	3301      	adds	r3, #1
 80069d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bf0c      	ite	eq
 80069dc:	2301      	moveq	r3, #1
 80069de:	2300      	movne	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	e012      	b.n	8006a0a <HAL_I2C_Init+0x18e>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	1e58      	subs	r0, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6859      	ldr	r1, [r3, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	440b      	add	r3, r1
 80069f2:	0099      	lsls	r1, r3, #2
 80069f4:	440b      	add	r3, r1
 80069f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80069fa:	3301      	adds	r3, #1
 80069fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bf0c      	ite	eq
 8006a04:	2301      	moveq	r3, #1
 8006a06:	2300      	movne	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <HAL_I2C_Init+0x196>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e022      	b.n	8006a58 <HAL_I2C_Init+0x1dc>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10e      	bne.n	8006a38 <HAL_I2C_Init+0x1bc>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	1e58      	subs	r0, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6859      	ldr	r1, [r3, #4]
 8006a22:	460b      	mov	r3, r1
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	440b      	add	r3, r1
 8006a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a36:	e00f      	b.n	8006a58 <HAL_I2C_Init+0x1dc>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	1e58      	subs	r0, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6859      	ldr	r1, [r3, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	0099      	lsls	r1, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a4e:	3301      	adds	r3, #1
 8006a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	6809      	ldr	r1, [r1, #0]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69da      	ldr	r2, [r3, #28]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6911      	ldr	r1, [r2, #16]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	68d2      	ldr	r2, [r2, #12]
 8006a92:	4311      	orrs	r1, r2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	695a      	ldr	r2, [r3, #20]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0201 	orr.w	r2, r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	000186a0 	.word	0x000186a0
 8006af4:	001e847f 	.word	0x001e847f
 8006af8:	003d08ff 	.word	0x003d08ff
 8006afc:	431bde83 	.word	0x431bde83
 8006b00:	10624dd3 	.word	0x10624dd3

08006b04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	817b      	strh	r3, [r7, #10]
 8006b16:	460b      	mov	r3, r1
 8006b18:	813b      	strh	r3, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b1e:	f7ff fabd 	bl	800609c <HAL_GetTick>
 8006b22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	f040 80d9 	bne.w	8006ce4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	2319      	movs	r3, #25
 8006b38:	2201      	movs	r2, #1
 8006b3a:	496d      	ldr	r1, [pc, #436]	; (8006cf0 <HAL_I2C_Mem_Write+0x1ec>)
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 fc7f 	bl	8007440 <I2C_WaitOnFlagUntilTimeout>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e0cc      	b.n	8006ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_I2C_Mem_Write+0x56>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e0c5      	b.n	8006ce6 <HAL_I2C_Mem_Write+0x1e2>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d007      	beq.n	8006b80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2221      	movs	r2, #33	; 0x21
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2240      	movs	r2, #64	; 0x40
 8006b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a3a      	ldr	r2, [r7, #32]
 8006baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4a4d      	ldr	r2, [pc, #308]	; (8006cf4 <HAL_I2C_Mem_Write+0x1f0>)
 8006bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bc2:	88f8      	ldrh	r0, [r7, #6]
 8006bc4:	893a      	ldrh	r2, [r7, #8]
 8006bc6:	8979      	ldrh	r1, [r7, #10]
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	9301      	str	r3, [sp, #4]
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 fab6 	bl	8007144 <I2C_RequestMemoryWrite>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d052      	beq.n	8006c84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e081      	b.n	8006ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 fd00 	bl	80075ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00d      	beq.n	8006c0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d107      	bne.n	8006c0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e06b      	b.n	8006ce6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	781a      	ldrb	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d11b      	bne.n	8006c84 <HAL_I2C_Mem_Write+0x180>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d017      	beq.n	8006c84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	781a      	ldrb	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1aa      	bne.n	8006be2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fcec 	bl	800766e <I2C_WaitOnBTFFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00d      	beq.n	8006cb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d107      	bne.n	8006cb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e016      	b.n	8006ce6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e000      	b.n	8006ce6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006ce4:	2302      	movs	r3, #2
  }
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	00100002 	.word	0x00100002
 8006cf4:	ffff0000 	.word	0xffff0000

08006cf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08c      	sub	sp, #48	; 0x30
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	4608      	mov	r0, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	461a      	mov	r2, r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	817b      	strh	r3, [r7, #10]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	813b      	strh	r3, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d12:	f7ff f9c3 	bl	800609c <HAL_GetTick>
 8006d16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	f040 8208 	bne.w	8007136 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	2319      	movs	r3, #25
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	497b      	ldr	r1, [pc, #492]	; (8006f1c <HAL_I2C_Mem_Read+0x224>)
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fb85 	bl	8007440 <I2C_WaitOnFlagUntilTimeout>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e1fb      	b.n	8007138 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_I2C_Mem_Read+0x56>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e1f4      	b.n	8007138 <HAL_I2C_Mem_Read+0x440>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d007      	beq.n	8006d74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2222      	movs	r2, #34	; 0x22
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2240      	movs	r2, #64	; 0x40
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a5b      	ldr	r2, [pc, #364]	; (8006f20 <HAL_I2C_Mem_Read+0x228>)
 8006db4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006db6:	88f8      	ldrh	r0, [r7, #6]
 8006db8:	893a      	ldrh	r2, [r7, #8]
 8006dba:	8979      	ldrh	r1, [r7, #10]
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 fa52 	bl	8007270 <I2C_RequestMemoryRead>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e1b0      	b.n	8007138 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d113      	bne.n	8006e06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dde:	2300      	movs	r3, #0
 8006de0:	623b      	str	r3, [r7, #32]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	623b      	str	r3, [r7, #32]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	623b      	str	r3, [r7, #32]
 8006df2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	e184      	b.n	8007110 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d11b      	bne.n	8006e46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e1e:	2300      	movs	r3, #0
 8006e20:	61fb      	str	r3, [r7, #28]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e164      	b.n	8007110 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d11b      	bne.n	8006e86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	61bb      	str	r3, [r7, #24]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	61bb      	str	r3, [r7, #24]
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	e144      	b.n	8007110 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e86:	2300      	movs	r3, #0
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e9c:	e138      	b.n	8007110 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	f200 80f1 	bhi.w	800708a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d123      	bne.n	8006ef8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 fc1b 	bl	80076f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e139      	b.n	8007138 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691a      	ldr	r2, [r3, #16]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ef6:	e10b      	b.n	8007110 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d14e      	bne.n	8006f9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	2200      	movs	r2, #0
 8006f08:	4906      	ldr	r1, [pc, #24]	; (8006f24 <HAL_I2C_Mem_Read+0x22c>)
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 fa98 	bl	8007440 <I2C_WaitOnFlagUntilTimeout>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d008      	beq.n	8006f28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e10e      	b.n	8007138 <HAL_I2C_Mem_Read+0x440>
 8006f1a:	bf00      	nop
 8006f1c:	00100002 	.word	0x00100002
 8006f20:	ffff0000 	.word	0xffff0000
 8006f24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691a      	ldr	r2, [r3, #16]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f54:	3b01      	subs	r3, #1
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f9c:	e0b8      	b.n	8007110 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4966      	ldr	r1, [pc, #408]	; (8007140 <HAL_I2C_Mem_Read+0x448>)
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fa49 	bl	8007440 <I2C_WaitOnFlagUntilTimeout>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0bf      	b.n	8007138 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691a      	ldr	r2, [r3, #16]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	2200      	movs	r2, #0
 8007002:	494f      	ldr	r1, [pc, #316]	; (8007140 <HAL_I2C_Mem_Read+0x448>)
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 fa1b 	bl	8007440 <I2C_WaitOnFlagUntilTimeout>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e091      	b.n	8007138 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	691a      	ldr	r2, [r3, #16]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	b29a      	uxth	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007088:	e042      	b.n	8007110 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800708a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800708c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f000 fb2e 	bl	80076f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e04c      	b.n	8007138 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	b2d2      	uxtb	r2, r2
 80070aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d118      	bne.n	8007110 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007114:	2b00      	cmp	r3, #0
 8007116:	f47f aec2 	bne.w	8006e9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2220      	movs	r2, #32
 800711e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	e000      	b.n	8007138 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007136:	2302      	movs	r3, #2
  }
}
 8007138:	4618      	mov	r0, r3
 800713a:	3728      	adds	r7, #40	; 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	00010004 	.word	0x00010004

08007144 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b088      	sub	sp, #32
 8007148:	af02      	add	r7, sp, #8
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	461a      	mov	r2, r3
 8007152:	4603      	mov	r3, r0
 8007154:	817b      	strh	r3, [r7, #10]
 8007156:	460b      	mov	r3, r1
 8007158:	813b      	strh	r3, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800716c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	2200      	movs	r2, #0
 8007176:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f960 	bl	8007440 <I2C_WaitOnFlagUntilTimeout>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00d      	beq.n	80071a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007194:	d103      	bne.n	800719e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800719c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e05f      	b.n	8007262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071a2:	897b      	ldrh	r3, [r7, #10]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	461a      	mov	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	6a3a      	ldr	r2, [r7, #32]
 80071b6:	492d      	ldr	r1, [pc, #180]	; (800726c <I2C_RequestMemoryWrite+0x128>)
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f998 	bl	80074ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e04c      	b.n	8007262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e0:	6a39      	ldr	r1, [r7, #32]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 fa02 	bl	80075ec <I2C_WaitOnTXEFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00d      	beq.n	800720a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d107      	bne.n	8007206 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e02b      	b.n	8007262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d105      	bne.n	800721c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007210:	893b      	ldrh	r3, [r7, #8]
 8007212:	b2da      	uxtb	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	611a      	str	r2, [r3, #16]
 800721a:	e021      	b.n	8007260 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800721c:	893b      	ldrh	r3, [r7, #8]
 800721e:	0a1b      	lsrs	r3, r3, #8
 8007220:	b29b      	uxth	r3, r3
 8007222:	b2da      	uxtb	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800722a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722c:	6a39      	ldr	r1, [r7, #32]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 f9dc 	bl	80075ec <I2C_WaitOnTXEFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00d      	beq.n	8007256 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	2b04      	cmp	r3, #4
 8007240:	d107      	bne.n	8007252 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e005      	b.n	8007262 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007256:	893b      	ldrh	r3, [r7, #8]
 8007258:	b2da      	uxtb	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	00010002 	.word	0x00010002

08007270 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af02      	add	r7, sp, #8
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	4608      	mov	r0, r1
 800727a:	4611      	mov	r1, r2
 800727c:	461a      	mov	r2, r3
 800727e:	4603      	mov	r3, r0
 8007280:	817b      	strh	r3, [r7, #10]
 8007282:	460b      	mov	r3, r1
 8007284:	813b      	strh	r3, [r7, #8]
 8007286:	4613      	mov	r3, r2
 8007288:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007298:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 f8c2 	bl	8007440 <I2C_WaitOnFlagUntilTimeout>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00d      	beq.n	80072de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d0:	d103      	bne.n	80072da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e0aa      	b.n	8007434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072de:	897b      	ldrh	r3, [r7, #10]
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	461a      	mov	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	6a3a      	ldr	r2, [r7, #32]
 80072f2:	4952      	ldr	r1, [pc, #328]	; (800743c <I2C_RequestMemoryRead+0x1cc>)
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f8fa 	bl	80074ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e097      	b.n	8007434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007304:	2300      	movs	r3, #0
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	617b      	str	r3, [r7, #20]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800731a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800731c:	6a39      	ldr	r1, [r7, #32]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f964 	bl	80075ec <I2C_WaitOnTXEFlagUntilTimeout>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00d      	beq.n	8007346 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	2b04      	cmp	r3, #4
 8007330:	d107      	bne.n	8007342 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007340:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e076      	b.n	8007434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d105      	bne.n	8007358 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800734c:	893b      	ldrh	r3, [r7, #8]
 800734e:	b2da      	uxtb	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	611a      	str	r2, [r3, #16]
 8007356:	e021      	b.n	800739c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007358:	893b      	ldrh	r3, [r7, #8]
 800735a:	0a1b      	lsrs	r3, r3, #8
 800735c:	b29b      	uxth	r3, r3
 800735e:	b2da      	uxtb	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007368:	6a39      	ldr	r1, [r7, #32]
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 f93e 	bl	80075ec <I2C_WaitOnTXEFlagUntilTimeout>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00d      	beq.n	8007392 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	2b04      	cmp	r3, #4
 800737c:	d107      	bne.n	800738e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800738c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e050      	b.n	8007434 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007392:	893b      	ldrh	r3, [r7, #8]
 8007394:	b2da      	uxtb	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800739c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739e:	6a39      	ldr	r1, [r7, #32]
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f923 	bl	80075ec <I2C_WaitOnTXEFlagUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00d      	beq.n	80073c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d107      	bne.n	80073c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e035      	b.n	8007434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	2200      	movs	r2, #0
 80073e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f82b 	bl	8007440 <I2C_WaitOnFlagUntilTimeout>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00d      	beq.n	800740c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073fe:	d103      	bne.n	8007408 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e013      	b.n	8007434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800740c:	897b      	ldrh	r3, [r7, #10]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f043 0301 	orr.w	r3, r3, #1
 8007414:	b2da      	uxtb	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	6a3a      	ldr	r2, [r7, #32]
 8007420:	4906      	ldr	r1, [pc, #24]	; (800743c <I2C_RequestMemoryRead+0x1cc>)
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 f863 	bl	80074ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	00010002 	.word	0x00010002

08007440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	4613      	mov	r3, r2
 800744e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007450:	e025      	b.n	800749e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007458:	d021      	beq.n	800749e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745a:	f7fe fe1f 	bl	800609c <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d302      	bcc.n	8007470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d116      	bne.n	800749e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2220      	movs	r2, #32
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	f043 0220 	orr.w	r2, r3, #32
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e023      	b.n	80074e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	0c1b      	lsrs	r3, r3, #16
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d10d      	bne.n	80074c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	43da      	mvns	r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4013      	ands	r3, r2
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	bf0c      	ite	eq
 80074ba:	2301      	moveq	r3, #1
 80074bc:	2300      	movne	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	461a      	mov	r2, r3
 80074c2:	e00c      	b.n	80074de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	43da      	mvns	r2, r3
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4013      	ands	r3, r2
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bf0c      	ite	eq
 80074d6:	2301      	moveq	r3, #1
 80074d8:	2300      	movne	r3, #0
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	79fb      	ldrb	r3, [r7, #7]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d0b6      	beq.n	8007452 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
 80074fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074fc:	e051      	b.n	80075a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800750c:	d123      	bne.n	8007556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800751c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007526:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2220      	movs	r2, #32
 8007532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f043 0204 	orr.w	r2, r3, #4
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e046      	b.n	80075e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755c:	d021      	beq.n	80075a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800755e:	f7fe fd9d 	bl	800609c <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	429a      	cmp	r2, r3
 800756c:	d302      	bcc.n	8007574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d116      	bne.n	80075a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f043 0220 	orr.w	r2, r3, #32
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e020      	b.n	80075e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	0c1b      	lsrs	r3, r3, #16
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d10c      	bne.n	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	43da      	mvns	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4013      	ands	r3, r2
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	bf14      	ite	ne
 80075be:	2301      	movne	r3, #1
 80075c0:	2300      	moveq	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	e00b      	b.n	80075de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	43da      	mvns	r2, r3
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	4013      	ands	r3, r2
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bf14      	ite	ne
 80075d8:	2301      	movne	r3, #1
 80075da:	2300      	moveq	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d18d      	bne.n	80074fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075f8:	e02d      	b.n	8007656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 f8ce 	bl	800779c <I2C_IsAcknowledgeFailed>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e02d      	b.n	8007666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007610:	d021      	beq.n	8007656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007612:	f7fe fd43 	bl	800609c <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	429a      	cmp	r2, r3
 8007620:	d302      	bcc.n	8007628 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d116      	bne.n	8007656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2220      	movs	r2, #32
 8007632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	f043 0220 	orr.w	r2, r3, #32
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e007      	b.n	8007666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007660:	2b80      	cmp	r3, #128	; 0x80
 8007662:	d1ca      	bne.n	80075fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	60b9      	str	r1, [r7, #8]
 8007678:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800767a:	e02d      	b.n	80076d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f88d 	bl	800779c <I2C_IsAcknowledgeFailed>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e02d      	b.n	80076e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d021      	beq.n	80076d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007694:	f7fe fd02 	bl	800609c <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d302      	bcc.n	80076aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d116      	bne.n	80076d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	f043 0220 	orr.w	r2, r3, #32
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e007      	b.n	80076e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f003 0304 	and.w	r3, r3, #4
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d1ca      	bne.n	800767c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076fc:	e042      	b.n	8007784 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	f003 0310 	and.w	r3, r3, #16
 8007708:	2b10      	cmp	r3, #16
 800770a:	d119      	bne.n	8007740 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f06f 0210 	mvn.w	r2, #16
 8007714:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2220      	movs	r2, #32
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e029      	b.n	8007794 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007740:	f7fe fcac 	bl	800609c <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	429a      	cmp	r2, r3
 800774e:	d302      	bcc.n	8007756 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d116      	bne.n	8007784 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2220      	movs	r2, #32
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007770:	f043 0220 	orr.w	r2, r3, #32
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e007      	b.n	8007794 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778e:	2b40      	cmp	r3, #64	; 0x40
 8007790:	d1b5      	bne.n	80076fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077b2:	d11b      	bne.n	80077ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d8:	f043 0204 	orr.w	r2, r3, #4
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e000      	b.n	80077ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b20      	cmp	r3, #32
 800780e:	d129      	bne.n	8007864 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2224      	movs	r2, #36	; 0x24
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0201 	bic.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0210 	bic.w	r2, r2, #16
 8007836:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0201 	orr.w	r2, r2, #1
 8007856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2220      	movs	r2, #32
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	e000      	b.n	8007866 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007864:	2302      	movs	r3, #2
  }
}
 8007866:	4618      	mov	r0, r3
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007872:	b480      	push	{r7}
 8007874:	b085      	sub	sp, #20
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b20      	cmp	r3, #32
 800788a:	d12a      	bne.n	80078e2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2224      	movs	r2, #36	; 0x24
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 0201 	bic.w	r2, r2, #1
 80078a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80078ac:	89fb      	ldrh	r3, [r7, #14]
 80078ae:	f023 030f 	bic.w	r3, r3, #15
 80078b2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	89fb      	ldrh	r3, [r7, #14]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	89fa      	ldrh	r2, [r7, #14]
 80078c4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f042 0201 	orr.w	r2, r2, #1
 80078d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2220      	movs	r2, #32
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	e000      	b.n	80078e4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80078e2:	2302      	movs	r3, #2
  }
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e267      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d075      	beq.n	80079fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800790e:	4b88      	ldr	r3, [pc, #544]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f003 030c 	and.w	r3, r3, #12
 8007916:	2b04      	cmp	r3, #4
 8007918:	d00c      	beq.n	8007934 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800791a:	4b85      	ldr	r3, [pc, #532]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007922:	2b08      	cmp	r3, #8
 8007924:	d112      	bne.n	800794c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007926:	4b82      	ldr	r3, [pc, #520]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800792e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007932:	d10b      	bne.n	800794c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007934:	4b7e      	ldr	r3, [pc, #504]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d05b      	beq.n	80079f8 <HAL_RCC_OscConfig+0x108>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d157      	bne.n	80079f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e242      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007954:	d106      	bne.n	8007964 <HAL_RCC_OscConfig+0x74>
 8007956:	4b76      	ldr	r3, [pc, #472]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a75      	ldr	r2, [pc, #468]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 800795c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	e01d      	b.n	80079a0 <HAL_RCC_OscConfig+0xb0>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800796c:	d10c      	bne.n	8007988 <HAL_RCC_OscConfig+0x98>
 800796e:	4b70      	ldr	r3, [pc, #448]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a6f      	ldr	r2, [pc, #444]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	4b6d      	ldr	r3, [pc, #436]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a6c      	ldr	r2, [pc, #432]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	e00b      	b.n	80079a0 <HAL_RCC_OscConfig+0xb0>
 8007988:	4b69      	ldr	r3, [pc, #420]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a68      	ldr	r2, [pc, #416]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 800798e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	4b66      	ldr	r3, [pc, #408]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a65      	ldr	r2, [pc, #404]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 800799a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800799e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d013      	beq.n	80079d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a8:	f7fe fb78 	bl	800609c <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079b0:	f7fe fb74 	bl	800609c <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b64      	cmp	r3, #100	; 0x64
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e207      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079c2:	4b5b      	ldr	r3, [pc, #364]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0f0      	beq.n	80079b0 <HAL_RCC_OscConfig+0xc0>
 80079ce:	e014      	b.n	80079fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d0:	f7fe fb64 	bl	800609c <HAL_GetTick>
 80079d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079d8:	f7fe fb60 	bl	800609c <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b64      	cmp	r3, #100	; 0x64
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e1f3      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079ea:	4b51      	ldr	r3, [pc, #324]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f0      	bne.n	80079d8 <HAL_RCC_OscConfig+0xe8>
 80079f6:	e000      	b.n	80079fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d063      	beq.n	8007ace <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a06:	4b4a      	ldr	r3, [pc, #296]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 030c 	and.w	r3, r3, #12
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a12:	4b47      	ldr	r3, [pc, #284]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a1a:	2b08      	cmp	r3, #8
 8007a1c:	d11c      	bne.n	8007a58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a1e:	4b44      	ldr	r3, [pc, #272]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d116      	bne.n	8007a58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a2a:	4b41      	ldr	r3, [pc, #260]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d005      	beq.n	8007a42 <HAL_RCC_OscConfig+0x152>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d001      	beq.n	8007a42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e1c7      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a42:	4b3b      	ldr	r3, [pc, #236]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	4937      	ldr	r1, [pc, #220]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a56:	e03a      	b.n	8007ace <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d020      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a60:	4b34      	ldr	r3, [pc, #208]	; (8007b34 <HAL_RCC_OscConfig+0x244>)
 8007a62:	2201      	movs	r2, #1
 8007a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a66:	f7fe fb19 	bl	800609c <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a6c:	e008      	b.n	8007a80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a6e:	f7fe fb15 	bl	800609c <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e1a8      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a80:	4b2b      	ldr	r3, [pc, #172]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0f0      	beq.n	8007a6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a8c:	4b28      	ldr	r3, [pc, #160]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	4925      	ldr	r1, [pc, #148]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	600b      	str	r3, [r1, #0]
 8007aa0:	e015      	b.n	8007ace <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007aa2:	4b24      	ldr	r3, [pc, #144]	; (8007b34 <HAL_RCC_OscConfig+0x244>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa8:	f7fe faf8 	bl	800609c <HAL_GetTick>
 8007aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ab0:	f7fe faf4 	bl	800609c <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e187      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ac2:	4b1b      	ldr	r3, [pc, #108]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f0      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d036      	beq.n	8007b48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d016      	beq.n	8007b10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ae2:	4b15      	ldr	r3, [pc, #84]	; (8007b38 <HAL_RCC_OscConfig+0x248>)
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae8:	f7fe fad8 	bl	800609c <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007af0:	f7fe fad4 	bl	800609c <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e167      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b02:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <HAL_RCC_OscConfig+0x240>)
 8007b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0f0      	beq.n	8007af0 <HAL_RCC_OscConfig+0x200>
 8007b0e:	e01b      	b.n	8007b48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b10:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <HAL_RCC_OscConfig+0x248>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b16:	f7fe fac1 	bl	800609c <HAL_GetTick>
 8007b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b1c:	e00e      	b.n	8007b3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b1e:	f7fe fabd 	bl	800609c <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d907      	bls.n	8007b3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e150      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
 8007b30:	40023800 	.word	0x40023800
 8007b34:	42470000 	.word	0x42470000
 8007b38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b3c:	4b88      	ldr	r3, [pc, #544]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1ea      	bne.n	8007b1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 8097 	beq.w	8007c84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b56:	2300      	movs	r3, #0
 8007b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b5a:	4b81      	ldr	r3, [pc, #516]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10f      	bne.n	8007b86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b66:	2300      	movs	r3, #0
 8007b68:	60bb      	str	r3, [r7, #8]
 8007b6a:	4b7d      	ldr	r3, [pc, #500]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6e:	4a7c      	ldr	r2, [pc, #496]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b74:	6413      	str	r3, [r2, #64]	; 0x40
 8007b76:	4b7a      	ldr	r3, [pc, #488]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b7e:	60bb      	str	r3, [r7, #8]
 8007b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b82:	2301      	movs	r3, #1
 8007b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b86:	4b77      	ldr	r3, [pc, #476]	; (8007d64 <HAL_RCC_OscConfig+0x474>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d118      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b92:	4b74      	ldr	r3, [pc, #464]	; (8007d64 <HAL_RCC_OscConfig+0x474>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a73      	ldr	r2, [pc, #460]	; (8007d64 <HAL_RCC_OscConfig+0x474>)
 8007b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b9e:	f7fe fa7d 	bl	800609c <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ba6:	f7fe fa79 	bl	800609c <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e10c      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bb8:	4b6a      	ldr	r3, [pc, #424]	; (8007d64 <HAL_RCC_OscConfig+0x474>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0f0      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d106      	bne.n	8007bda <HAL_RCC_OscConfig+0x2ea>
 8007bcc:	4b64      	ldr	r3, [pc, #400]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd0:	4a63      	ldr	r2, [pc, #396]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007bd2:	f043 0301 	orr.w	r3, r3, #1
 8007bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8007bd8:	e01c      	b.n	8007c14 <HAL_RCC_OscConfig+0x324>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	2b05      	cmp	r3, #5
 8007be0:	d10c      	bne.n	8007bfc <HAL_RCC_OscConfig+0x30c>
 8007be2:	4b5f      	ldr	r3, [pc, #380]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be6:	4a5e      	ldr	r2, [pc, #376]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007be8:	f043 0304 	orr.w	r3, r3, #4
 8007bec:	6713      	str	r3, [r2, #112]	; 0x70
 8007bee:	4b5c      	ldr	r3, [pc, #368]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf2:	4a5b      	ldr	r2, [pc, #364]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007bf4:	f043 0301 	orr.w	r3, r3, #1
 8007bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8007bfa:	e00b      	b.n	8007c14 <HAL_RCC_OscConfig+0x324>
 8007bfc:	4b58      	ldr	r3, [pc, #352]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c00:	4a57      	ldr	r2, [pc, #348]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007c02:	f023 0301 	bic.w	r3, r3, #1
 8007c06:	6713      	str	r3, [r2, #112]	; 0x70
 8007c08:	4b55      	ldr	r3, [pc, #340]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0c:	4a54      	ldr	r2, [pc, #336]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007c0e:	f023 0304 	bic.w	r3, r3, #4
 8007c12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d015      	beq.n	8007c48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c1c:	f7fe fa3e 	bl	800609c <HAL_GetTick>
 8007c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c22:	e00a      	b.n	8007c3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c24:	f7fe fa3a 	bl	800609c <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d901      	bls.n	8007c3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e0cb      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c3a:	4b49      	ldr	r3, [pc, #292]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0ee      	beq.n	8007c24 <HAL_RCC_OscConfig+0x334>
 8007c46:	e014      	b.n	8007c72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c48:	f7fe fa28 	bl	800609c <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c4e:	e00a      	b.n	8007c66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c50:	f7fe fa24 	bl	800609c <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d901      	bls.n	8007c66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e0b5      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c66:	4b3e      	ldr	r3, [pc, #248]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1ee      	bne.n	8007c50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d105      	bne.n	8007c84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c78:	4b39      	ldr	r3, [pc, #228]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7c:	4a38      	ldr	r2, [pc, #224]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 80a1 	beq.w	8007dd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c8e:	4b34      	ldr	r3, [pc, #208]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 030c 	and.w	r3, r3, #12
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d05c      	beq.n	8007d54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d141      	bne.n	8007d26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ca2:	4b31      	ldr	r3, [pc, #196]	; (8007d68 <HAL_RCC_OscConfig+0x478>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ca8:	f7fe f9f8 	bl	800609c <HAL_GetTick>
 8007cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cae:	e008      	b.n	8007cc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cb0:	f7fe f9f4 	bl	800609c <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d901      	bls.n	8007cc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e087      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cc2:	4b27      	ldr	r3, [pc, #156]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1f0      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	69da      	ldr	r2, [r3, #28]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	019b      	lsls	r3, r3, #6
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	085b      	lsrs	r3, r3, #1
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	041b      	lsls	r3, r3, #16
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	061b      	lsls	r3, r3, #24
 8007cf2:	491b      	ldr	r1, [pc, #108]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cf8:	4b1b      	ldr	r3, [pc, #108]	; (8007d68 <HAL_RCC_OscConfig+0x478>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cfe:	f7fe f9cd 	bl	800609c <HAL_GetTick>
 8007d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d04:	e008      	b.n	8007d18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d06:	f7fe f9c9 	bl	800609c <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d901      	bls.n	8007d18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e05c      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d18:	4b11      	ldr	r3, [pc, #68]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0f0      	beq.n	8007d06 <HAL_RCC_OscConfig+0x416>
 8007d24:	e054      	b.n	8007dd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d26:	4b10      	ldr	r3, [pc, #64]	; (8007d68 <HAL_RCC_OscConfig+0x478>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d2c:	f7fe f9b6 	bl	800609c <HAL_GetTick>
 8007d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d34:	f7fe f9b2 	bl	800609c <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e045      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d46:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <HAL_RCC_OscConfig+0x470>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f0      	bne.n	8007d34 <HAL_RCC_OscConfig+0x444>
 8007d52:	e03d      	b.n	8007dd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d107      	bne.n	8007d6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e038      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
 8007d60:	40023800 	.word	0x40023800
 8007d64:	40007000 	.word	0x40007000
 8007d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d6c:	4b1b      	ldr	r3, [pc, #108]	; (8007ddc <HAL_RCC_OscConfig+0x4ec>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d028      	beq.n	8007dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d121      	bne.n	8007dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d11a      	bne.n	8007dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d111      	bne.n	8007dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	085b      	lsrs	r3, r3, #1
 8007db4:	3b01      	subs	r3, #1
 8007db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d107      	bne.n	8007dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d001      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e000      	b.n	8007dd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	40023800 	.word	0x40023800

08007de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e0cc      	b.n	8007f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007df4:	4b68      	ldr	r3, [pc, #416]	; (8007f98 <HAL_RCC_ClockConfig+0x1b8>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d90c      	bls.n	8007e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e02:	4b65      	ldr	r3, [pc, #404]	; (8007f98 <HAL_RCC_ClockConfig+0x1b8>)
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e0a:	4b63      	ldr	r3, [pc, #396]	; (8007f98 <HAL_RCC_ClockConfig+0x1b8>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 030f 	and.w	r3, r3, #15
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d001      	beq.n	8007e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e0b8      	b.n	8007f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d020      	beq.n	8007e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e34:	4b59      	ldr	r3, [pc, #356]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	4a58      	ldr	r2, [pc, #352]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0308 	and.w	r3, r3, #8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e4c:	4b53      	ldr	r3, [pc, #332]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	4a52      	ldr	r2, [pc, #328]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e58:	4b50      	ldr	r3, [pc, #320]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	494d      	ldr	r1, [pc, #308]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d044      	beq.n	8007f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d107      	bne.n	8007e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e7e:	4b47      	ldr	r3, [pc, #284]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d119      	bne.n	8007ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e07f      	b.n	8007f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d003      	beq.n	8007e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d107      	bne.n	8007eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e9e:	4b3f      	ldr	r3, [pc, #252]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d109      	bne.n	8007ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e06f      	b.n	8007f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eae:	4b3b      	ldr	r3, [pc, #236]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e067      	b.n	8007f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ebe:	4b37      	ldr	r3, [pc, #220]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f023 0203 	bic.w	r2, r3, #3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	4934      	ldr	r1, [pc, #208]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ed0:	f7fe f8e4 	bl	800609c <HAL_GetTick>
 8007ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ed6:	e00a      	b.n	8007eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ed8:	f7fe f8e0 	bl	800609c <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e04f      	b.n	8007f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eee:	4b2b      	ldr	r3, [pc, #172]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f003 020c 	and.w	r2, r3, #12
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d1eb      	bne.n	8007ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f00:	4b25      	ldr	r3, [pc, #148]	; (8007f98 <HAL_RCC_ClockConfig+0x1b8>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 030f 	and.w	r3, r3, #15
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d20c      	bcs.n	8007f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f0e:	4b22      	ldr	r3, [pc, #136]	; (8007f98 <HAL_RCC_ClockConfig+0x1b8>)
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f16:	4b20      	ldr	r3, [pc, #128]	; (8007f98 <HAL_RCC_ClockConfig+0x1b8>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d001      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e032      	b.n	8007f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d008      	beq.n	8007f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f34:	4b19      	ldr	r3, [pc, #100]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	4916      	ldr	r1, [pc, #88]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0308 	and.w	r3, r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d009      	beq.n	8007f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	490e      	ldr	r1, [pc, #56]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f66:	f000 f821 	bl	8007fac <HAL_RCC_GetSysClockFreq>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <HAL_RCC_ClockConfig+0x1bc>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	091b      	lsrs	r3, r3, #4
 8007f72:	f003 030f 	and.w	r3, r3, #15
 8007f76:	490a      	ldr	r1, [pc, #40]	; (8007fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8007f78:	5ccb      	ldrb	r3, [r1, r3]
 8007f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7e:	4a09      	ldr	r2, [pc, #36]	; (8007fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f82:	4b09      	ldr	r3, [pc, #36]	; (8007fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fe f844 	bl	8006014 <HAL_InitTick>

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	40023c00 	.word	0x40023c00
 8007f9c:	40023800 	.word	0x40023800
 8007fa0:	0801311c 	.word	0x0801311c
 8007fa4:	20000180 	.word	0x20000180
 8007fa8:	200002b4 	.word	0x200002b4

08007fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fb0:	b094      	sub	sp, #80	; 0x50
 8007fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fb8:	2300      	movs	r3, #0
 8007fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fc4:	4b79      	ldr	r3, [pc, #484]	; (80081ac <HAL_RCC_GetSysClockFreq+0x200>)
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f003 030c 	and.w	r3, r3, #12
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d00d      	beq.n	8007fec <HAL_RCC_GetSysClockFreq+0x40>
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	f200 80e1 	bhi.w	8008198 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d002      	beq.n	8007fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d003      	beq.n	8007fe6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007fde:	e0db      	b.n	8008198 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007fe0:	4b73      	ldr	r3, [pc, #460]	; (80081b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007fe2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007fe4:	e0db      	b.n	800819e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007fe6:	4b73      	ldr	r3, [pc, #460]	; (80081b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007fea:	e0d8      	b.n	800819e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fec:	4b6f      	ldr	r3, [pc, #444]	; (80081ac <HAL_RCC_GetSysClockFreq+0x200>)
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ff4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ff6:	4b6d      	ldr	r3, [pc, #436]	; (80081ac <HAL_RCC_GetSysClockFreq+0x200>)
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d063      	beq.n	80080ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008002:	4b6a      	ldr	r3, [pc, #424]	; (80081ac <HAL_RCC_GetSysClockFreq+0x200>)
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	099b      	lsrs	r3, r3, #6
 8008008:	2200      	movs	r2, #0
 800800a:	63bb      	str	r3, [r7, #56]	; 0x38
 800800c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008014:	633b      	str	r3, [r7, #48]	; 0x30
 8008016:	2300      	movs	r3, #0
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
 800801a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800801e:	4622      	mov	r2, r4
 8008020:	462b      	mov	r3, r5
 8008022:	f04f 0000 	mov.w	r0, #0
 8008026:	f04f 0100 	mov.w	r1, #0
 800802a:	0159      	lsls	r1, r3, #5
 800802c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008030:	0150      	lsls	r0, r2, #5
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4621      	mov	r1, r4
 8008038:	1a51      	subs	r1, r2, r1
 800803a:	6139      	str	r1, [r7, #16]
 800803c:	4629      	mov	r1, r5
 800803e:	eb63 0301 	sbc.w	r3, r3, r1
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	f04f 0300 	mov.w	r3, #0
 800804c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008050:	4659      	mov	r1, fp
 8008052:	018b      	lsls	r3, r1, #6
 8008054:	4651      	mov	r1, sl
 8008056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800805a:	4651      	mov	r1, sl
 800805c:	018a      	lsls	r2, r1, #6
 800805e:	4651      	mov	r1, sl
 8008060:	ebb2 0801 	subs.w	r8, r2, r1
 8008064:	4659      	mov	r1, fp
 8008066:	eb63 0901 	sbc.w	r9, r3, r1
 800806a:	f04f 0200 	mov.w	r2, #0
 800806e:	f04f 0300 	mov.w	r3, #0
 8008072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800807a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800807e:	4690      	mov	r8, r2
 8008080:	4699      	mov	r9, r3
 8008082:	4623      	mov	r3, r4
 8008084:	eb18 0303 	adds.w	r3, r8, r3
 8008088:	60bb      	str	r3, [r7, #8]
 800808a:	462b      	mov	r3, r5
 800808c:	eb49 0303 	adc.w	r3, r9, r3
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	f04f 0200 	mov.w	r2, #0
 8008096:	f04f 0300 	mov.w	r3, #0
 800809a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800809e:	4629      	mov	r1, r5
 80080a0:	024b      	lsls	r3, r1, #9
 80080a2:	4621      	mov	r1, r4
 80080a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80080a8:	4621      	mov	r1, r4
 80080aa:	024a      	lsls	r2, r1, #9
 80080ac:	4610      	mov	r0, r2
 80080ae:	4619      	mov	r1, r3
 80080b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080b2:	2200      	movs	r2, #0
 80080b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080bc:	f7f8 fdde 	bl	8000c7c <__aeabi_uldivmod>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4613      	mov	r3, r2
 80080c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080c8:	e058      	b.n	800817c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080ca:	4b38      	ldr	r3, [pc, #224]	; (80081ac <HAL_RCC_GetSysClockFreq+0x200>)
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	099b      	lsrs	r3, r3, #6
 80080d0:	2200      	movs	r2, #0
 80080d2:	4618      	mov	r0, r3
 80080d4:	4611      	mov	r1, r2
 80080d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80080da:	623b      	str	r3, [r7, #32]
 80080dc:	2300      	movs	r3, #0
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
 80080e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80080e4:	4642      	mov	r2, r8
 80080e6:	464b      	mov	r3, r9
 80080e8:	f04f 0000 	mov.w	r0, #0
 80080ec:	f04f 0100 	mov.w	r1, #0
 80080f0:	0159      	lsls	r1, r3, #5
 80080f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080f6:	0150      	lsls	r0, r2, #5
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4641      	mov	r1, r8
 80080fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8008102:	4649      	mov	r1, r9
 8008104:	eb63 0b01 	sbc.w	fp, r3, r1
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	f04f 0300 	mov.w	r3, #0
 8008110:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008114:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008118:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800811c:	ebb2 040a 	subs.w	r4, r2, sl
 8008120:	eb63 050b 	sbc.w	r5, r3, fp
 8008124:	f04f 0200 	mov.w	r2, #0
 8008128:	f04f 0300 	mov.w	r3, #0
 800812c:	00eb      	lsls	r3, r5, #3
 800812e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008132:	00e2      	lsls	r2, r4, #3
 8008134:	4614      	mov	r4, r2
 8008136:	461d      	mov	r5, r3
 8008138:	4643      	mov	r3, r8
 800813a:	18e3      	adds	r3, r4, r3
 800813c:	603b      	str	r3, [r7, #0]
 800813e:	464b      	mov	r3, r9
 8008140:	eb45 0303 	adc.w	r3, r5, r3
 8008144:	607b      	str	r3, [r7, #4]
 8008146:	f04f 0200 	mov.w	r2, #0
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008152:	4629      	mov	r1, r5
 8008154:	028b      	lsls	r3, r1, #10
 8008156:	4621      	mov	r1, r4
 8008158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800815c:	4621      	mov	r1, r4
 800815e:	028a      	lsls	r2, r1, #10
 8008160:	4610      	mov	r0, r2
 8008162:	4619      	mov	r1, r3
 8008164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008166:	2200      	movs	r2, #0
 8008168:	61bb      	str	r3, [r7, #24]
 800816a:	61fa      	str	r2, [r7, #28]
 800816c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008170:	f7f8 fd84 	bl	8000c7c <__aeabi_uldivmod>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4613      	mov	r3, r2
 800817a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800817c:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <HAL_RCC_GetSysClockFreq+0x200>)
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	0c1b      	lsrs	r3, r3, #16
 8008182:	f003 0303 	and.w	r3, r3, #3
 8008186:	3301      	adds	r3, #1
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800818c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800818e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008190:	fbb2 f3f3 	udiv	r3, r2, r3
 8008194:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008196:	e002      	b.n	800819e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008198:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800819a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800819c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800819e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3750      	adds	r7, #80	; 0x50
 80081a4:	46bd      	mov	sp, r7
 80081a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081aa:	bf00      	nop
 80081ac:	40023800 	.word	0x40023800
 80081b0:	00f42400 	.word	0x00f42400
 80081b4:	007a1200 	.word	0x007a1200

080081b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081bc:	4b03      	ldr	r3, [pc, #12]	; (80081cc <HAL_RCC_GetHCLKFreq+0x14>)
 80081be:	681b      	ldr	r3, [r3, #0]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	20000180 	.word	0x20000180

080081d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80081d4:	f7ff fff0 	bl	80081b8 <HAL_RCC_GetHCLKFreq>
 80081d8:	4602      	mov	r2, r0
 80081da:	4b05      	ldr	r3, [pc, #20]	; (80081f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	0a9b      	lsrs	r3, r3, #10
 80081e0:	f003 0307 	and.w	r3, r3, #7
 80081e4:	4903      	ldr	r1, [pc, #12]	; (80081f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081e6:	5ccb      	ldrb	r3, [r1, r3]
 80081e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	40023800 	.word	0x40023800
 80081f4:	0801312c 	.word	0x0801312c

080081f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80081fc:	f7ff ffdc 	bl	80081b8 <HAL_RCC_GetHCLKFreq>
 8008200:	4602      	mov	r2, r0
 8008202:	4b05      	ldr	r3, [pc, #20]	; (8008218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	0b5b      	lsrs	r3, r3, #13
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	4903      	ldr	r1, [pc, #12]	; (800821c <HAL_RCC_GetPCLK2Freq+0x24>)
 800820e:	5ccb      	ldrb	r3, [r1, r3]
 8008210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008214:	4618      	mov	r0, r3
 8008216:	bd80      	pop	{r7, pc}
 8008218:	40023800 	.word	0x40023800
 800821c:	0801312c 	.word	0x0801312c

08008220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10b      	bne.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008244:	2b00      	cmp	r3, #0
 8008246:	d105      	bne.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008250:	2b00      	cmp	r3, #0
 8008252:	d075      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008254:	4b91      	ldr	r3, [pc, #580]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008256:	2200      	movs	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800825a:	f7fd ff1f 	bl	800609c <HAL_GetTick>
 800825e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008260:	e008      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008262:	f7fd ff1b 	bl	800609c <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b02      	cmp	r3, #2
 800826e:	d901      	bls.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e189      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008274:	4b8a      	ldr	r3, [pc, #552]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1f0      	bne.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d009      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	019a      	lsls	r2, r3, #6
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	071b      	lsls	r3, r3, #28
 8008298:	4981      	ldr	r1, [pc, #516]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800829a:	4313      	orrs	r3, r2
 800829c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d01f      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80082ac:	4b7c      	ldr	r3, [pc, #496]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082b2:	0f1b      	lsrs	r3, r3, #28
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	019a      	lsls	r2, r3, #6
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	061b      	lsls	r3, r3, #24
 80082c6:	431a      	orrs	r2, r3
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	071b      	lsls	r3, r3, #28
 80082cc:	4974      	ldr	r1, [pc, #464]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80082d4:	4b72      	ldr	r3, [pc, #456]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082da:	f023 021f 	bic.w	r2, r3, #31
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	496e      	ldr	r1, [pc, #440]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00d      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	019a      	lsls	r2, r3, #6
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	061b      	lsls	r3, r3, #24
 8008304:	431a      	orrs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	071b      	lsls	r3, r3, #28
 800830c:	4964      	ldr	r1, [pc, #400]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800830e:	4313      	orrs	r3, r2
 8008310:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008314:	4b61      	ldr	r3, [pc, #388]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008316:	2201      	movs	r2, #1
 8008318:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800831a:	f7fd febf 	bl	800609c <HAL_GetTick>
 800831e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008320:	e008      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008322:	f7fd febb 	bl	800609c <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	d901      	bls.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e129      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008334:	4b5a      	ldr	r3, [pc, #360]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0f0      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b00      	cmp	r3, #0
 800834a:	d105      	bne.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008354:	2b00      	cmp	r3, #0
 8008356:	d079      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008358:	4b52      	ldr	r3, [pc, #328]	; (80084a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800835e:	f7fd fe9d 	bl	800609c <HAL_GetTick>
 8008362:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008364:	e008      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008366:	f7fd fe99 	bl	800609c <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	2b02      	cmp	r3, #2
 8008372:	d901      	bls.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e107      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008378:	4b49      	ldr	r3, [pc, #292]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008384:	d0ef      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0304 	and.w	r3, r3, #4
 800838e:	2b00      	cmp	r3, #0
 8008390:	d020      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008392:	4b43      	ldr	r3, [pc, #268]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008398:	0f1b      	lsrs	r3, r3, #28
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	019a      	lsls	r2, r3, #6
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	061b      	lsls	r3, r3, #24
 80083ac:	431a      	orrs	r2, r3
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	071b      	lsls	r3, r3, #28
 80083b2:	493b      	ldr	r1, [pc, #236]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80083ba:	4b39      	ldr	r3, [pc, #228]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	021b      	lsls	r3, r3, #8
 80083cc:	4934      	ldr	r1, [pc, #208]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0308 	and.w	r3, r3, #8
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d01e      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80083e0:	4b2f      	ldr	r3, [pc, #188]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e6:	0e1b      	lsrs	r3, r3, #24
 80083e8:	f003 030f 	and.w	r3, r3, #15
 80083ec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	019a      	lsls	r2, r3, #6
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	061b      	lsls	r3, r3, #24
 80083f8:	431a      	orrs	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	071b      	lsls	r3, r3, #28
 8008400:	4927      	ldr	r1, [pc, #156]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008402:	4313      	orrs	r3, r2
 8008404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008408:	4b25      	ldr	r3, [pc, #148]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800840a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800840e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008416:	4922      	ldr	r1, [pc, #136]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008418:	4313      	orrs	r3, r2
 800841a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800841e:	4b21      	ldr	r3, [pc, #132]	; (80084a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008420:	2201      	movs	r2, #1
 8008422:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008424:	f7fd fe3a 	bl	800609c <HAL_GetTick>
 8008428:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800842a:	e008      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800842c:	f7fd fe36 	bl	800609c <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	2b02      	cmp	r3, #2
 8008438:	d901      	bls.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e0a4      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800843e:	4b18      	ldr	r3, [pc, #96]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800844a:	d1ef      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0320 	and.w	r3, r3, #32
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 808b 	beq.w	8008570 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	4b10      	ldr	r3, [pc, #64]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	4a0f      	ldr	r2, [pc, #60]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008468:	6413      	str	r3, [r2, #64]	; 0x40
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008476:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a0b      	ldr	r2, [pc, #44]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800847c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008480:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008482:	f7fd fe0b 	bl	800609c <HAL_GetTick>
 8008486:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008488:	e010      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800848a:	f7fd fe07 	bl	800609c <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	2b02      	cmp	r3, #2
 8008496:	d909      	bls.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e075      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800849c:	42470068 	.word	0x42470068
 80084a0:	40023800 	.word	0x40023800
 80084a4:	42470070 	.word	0x42470070
 80084a8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80084ac:	4b38      	ldr	r3, [pc, #224]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d0e8      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80084b8:	4b36      	ldr	r3, [pc, #216]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d02f      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d028      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084d6:	4b2f      	ldr	r3, [pc, #188]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80084e0:	4b2d      	ldr	r3, [pc, #180]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80084e2:	2201      	movs	r2, #1
 80084e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80084e6:	4b2c      	ldr	r3, [pc, #176]	; (8008598 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80084ec:	4a29      	ldr	r2, [pc, #164]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80084f2:	4b28      	ldr	r3, [pc, #160]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d114      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80084fe:	f7fd fdcd 	bl	800609c <HAL_GetTick>
 8008502:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008504:	e00a      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008506:	f7fd fdc9 	bl	800609c <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	f241 3288 	movw	r2, #5000	; 0x1388
 8008514:	4293      	cmp	r3, r2
 8008516:	d901      	bls.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e035      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800851c:	4b1d      	ldr	r3, [pc, #116]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800851e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0ee      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008534:	d10d      	bne.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008536:	4b17      	ldr	r3, [pc, #92]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008542:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800854a:	4912      	ldr	r1, [pc, #72]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800854c:	4313      	orrs	r3, r2
 800854e:	608b      	str	r3, [r1, #8]
 8008550:	e005      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008552:	4b10      	ldr	r3, [pc, #64]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	4a0f      	ldr	r2, [pc, #60]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008558:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800855c:	6093      	str	r3, [r2, #8]
 800855e:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008560:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800856a:	490a      	ldr	r1, [pc, #40]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800856c:	4313      	orrs	r3, r2
 800856e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0310 	and.w	r3, r3, #16
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008584:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	40007000 	.word	0x40007000
 8008594:	40023800 	.word	0x40023800
 8008598:	42470e40 	.word	0x42470e40
 800859c:	424711e0 	.word	0x424711e0

080085a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e066      	b.n	8008684 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	7f5b      	ldrb	r3, [r3, #29]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d105      	bne.n	80085cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7fa fb0e 	bl	8002be8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	22ca      	movs	r2, #202	; 0xca
 80085d8:	625a      	str	r2, [r3, #36]	; 0x24
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2253      	movs	r2, #83	; 0x53
 80085e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fa45 	bl	8008a72 <RTC_EnterInitMode>
 80085e8:	4603      	mov	r3, r0
 80085ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d12c      	bne.n	800864c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	6812      	ldr	r2, [r2, #0]
 80085fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008604:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6899      	ldr	r1, [r3, #8]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	431a      	orrs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	430a      	orrs	r2, r1
 8008622:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	68d2      	ldr	r2, [r2, #12]
 800862c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6919      	ldr	r1, [r3, #16]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	041a      	lsls	r2, r3, #16
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	430a      	orrs	r2, r1
 8008640:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa4c 	bl	8008ae0 <RTC_ExitInitMode>
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d113      	bne.n	800867a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008660:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699a      	ldr	r2, [r3, #24]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	22ff      	movs	r2, #255	; 0xff
 8008680:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008682:	7bfb      	ldrb	r3, [r7, #15]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800868c:	b590      	push	{r4, r7, lr}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	7f1b      	ldrb	r3, [r3, #28]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d101      	bne.n	80086a8 <HAL_RTC_SetTime+0x1c>
 80086a4:	2302      	movs	r3, #2
 80086a6:	e087      	b.n	80087b8 <HAL_RTC_SetTime+0x12c>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2201      	movs	r2, #1
 80086ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2202      	movs	r2, #2
 80086b2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d126      	bne.n	8008708 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d102      	bne.n	80086ce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2200      	movs	r2, #0
 80086cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 fa29 	bl	8008b2a <RTC_ByteToBcd2>
 80086d8:	4603      	mov	r3, r0
 80086da:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	785b      	ldrb	r3, [r3, #1]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 fa22 	bl	8008b2a <RTC_ByteToBcd2>
 80086e6:	4603      	mov	r3, r0
 80086e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80086ea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	789b      	ldrb	r3, [r3, #2]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fa1a 	bl	8008b2a <RTC_ByteToBcd2>
 80086f6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80086f8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	78db      	ldrb	r3, [r3, #3]
 8008700:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008702:	4313      	orrs	r3, r2
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	e018      	b.n	800873a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	d102      	bne.n	800871c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2200      	movs	r2, #0
 800871a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	785b      	ldrb	r3, [r3, #1]
 8008726:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008728:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800872e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	78db      	ldrb	r3, [r3, #3]
 8008734:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008736:	4313      	orrs	r3, r2
 8008738:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	22ca      	movs	r2, #202	; 0xca
 8008740:	625a      	str	r2, [r3, #36]	; 0x24
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2253      	movs	r2, #83	; 0x53
 8008748:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 f991 	bl	8008a72 <RTC_EnterInitMode>
 8008750:	4603      	mov	r3, r0
 8008752:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008754:	7cfb      	ldrb	r3, [r7, #19]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d120      	bne.n	800879c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008764:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008768:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008778:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6899      	ldr	r1, [r3, #8]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	68da      	ldr	r2, [r3, #12]
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	431a      	orrs	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	430a      	orrs	r2, r1
 8008790:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 f9a4 	bl	8008ae0 <RTC_ExitInitMode>
 8008798:	4603      	mov	r3, r0
 800879a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800879c:	7cfb      	ldrb	r3, [r7, #19]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d102      	bne.n	80087a8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2201      	movs	r2, #1
 80087a6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	22ff      	movs	r2, #255	; 0xff
 80087ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	771a      	strb	r2, [r3, #28]

  return status;
 80087b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd90      	pop	{r4, r7, pc}

080087c0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80087f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80087f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	0c1b      	lsrs	r3, r3, #16
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008802:	b2da      	uxtb	r2, r3
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	0a1b      	lsrs	r3, r3, #8
 800880c:	b2db      	uxtb	r3, r3
 800880e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008812:	b2da      	uxtb	r2, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008820:	b2da      	uxtb	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	0d9b      	lsrs	r3, r3, #22
 800882a:	b2db      	uxtb	r3, r3
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	b2da      	uxtb	r2, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d11a      	bne.n	8008872 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 f98f 	bl	8008b64 <RTC_Bcd2ToByte>
 8008846:	4603      	mov	r3, r0
 8008848:	461a      	mov	r2, r3
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f986 	bl	8008b64 <RTC_Bcd2ToByte>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	789b      	ldrb	r3, [r3, #2]
 8008864:	4618      	mov	r0, r3
 8008866:	f000 f97d 	bl	8008b64 <RTC_Bcd2ToByte>
 800886a:	4603      	mov	r3, r0
 800886c:	461a      	mov	r2, r3
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800887c:	b590      	push	{r4, r7, lr}
 800887e:	b087      	sub	sp, #28
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	7f1b      	ldrb	r3, [r3, #28]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_RTC_SetDate+0x1c>
 8008894:	2302      	movs	r3, #2
 8008896:	e071      	b.n	800897c <HAL_RTC_SetDate+0x100>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2201      	movs	r2, #1
 800889c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2202      	movs	r2, #2
 80088a2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10e      	bne.n	80088c8 <HAL_RTC_SetDate+0x4c>
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	785b      	ldrb	r3, [r3, #1]
 80088ae:	f003 0310 	and.w	r3, r3, #16
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d008      	beq.n	80088c8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	f023 0310 	bic.w	r3, r3, #16
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	330a      	adds	r3, #10
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d11c      	bne.n	8008908 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	78db      	ldrb	r3, [r3, #3]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 f929 	bl	8008b2a <RTC_ByteToBcd2>
 80088d8:	4603      	mov	r3, r0
 80088da:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 f922 	bl	8008b2a <RTC_ByteToBcd2>
 80088e6:	4603      	mov	r3, r0
 80088e8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80088ea:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	789b      	ldrb	r3, [r3, #2]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 f91a 	bl	8008b2a <RTC_ByteToBcd2>
 80088f6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80088f8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008902:	4313      	orrs	r3, r2
 8008904:	617b      	str	r3, [r7, #20]
 8008906:	e00e      	b.n	8008926 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	78db      	ldrb	r3, [r3, #3]
 800890c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	785b      	ldrb	r3, [r3, #1]
 8008912:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008914:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800891a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	22ca      	movs	r2, #202	; 0xca
 800892c:	625a      	str	r2, [r3, #36]	; 0x24
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2253      	movs	r2, #83	; 0x53
 8008934:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 f89b 	bl	8008a72 <RTC_EnterInitMode>
 800893c:	4603      	mov	r3, r0
 800893e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008940:	7cfb      	ldrb	r3, [r7, #19]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10c      	bne.n	8008960 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008950:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008954:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 f8c2 	bl	8008ae0 <RTC_ExitInitMode>
 800895c:	4603      	mov	r3, r0
 800895e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008960:	7cfb      	ldrb	r3, [r7, #19]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d102      	bne.n	800896c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	22ff      	movs	r2, #255	; 0xff
 8008972:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	771a      	strb	r2, [r3, #28]

  return status;
 800897a:	7cfb      	ldrb	r3, [r7, #19]
}
 800897c:	4618      	mov	r0, r3
 800897e:	371c      	adds	r7, #28
 8008980:	46bd      	mov	sp, r7
 8008982:	bd90      	pop	{r4, r7, pc}

08008984 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800899e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	0c1b      	lsrs	r3, r3, #16
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	0a1b      	lsrs	r3, r3, #8
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	f003 031f 	and.w	r3, r3, #31
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	0b5b      	lsrs	r3, r3, #13
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d11a      	bne.n	8008a18 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	78db      	ldrb	r3, [r3, #3]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f8bc 	bl	8008b64 <RTC_Bcd2ToByte>
 80089ec:	4603      	mov	r3, r0
 80089ee:	461a      	mov	r2, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 f8b3 	bl	8008b64 <RTC_Bcd2ToByte>
 80089fe:	4603      	mov	r3, r0
 8008a00:	461a      	mov	r2, r3
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	789b      	ldrb	r3, [r3, #2]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 f8aa 	bl	8008b64 <RTC_Bcd2ToByte>
 8008a10:	4603      	mov	r3, r0
 8008a12:	461a      	mov	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68da      	ldr	r2, [r3, #12]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a3c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a3e:	f7fd fb2d 	bl	800609c <HAL_GetTick>
 8008a42:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a44:	e009      	b.n	8008a5a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008a46:	f7fd fb29 	bl	800609c <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a54:	d901      	bls.n	8008a5a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e007      	b.n	8008a6a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f003 0320 	and.w	r3, r3, #32
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0ee      	beq.n	8008a46 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d122      	bne.n	8008ad6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008aa0:	f7fd fafc 	bl	800609c <HAL_GetTick>
 8008aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008aa6:	e00c      	b.n	8008ac2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008aa8:	f7fd faf8 	bl	800609c <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ab6:	d904      	bls.n	8008ac2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2204      	movs	r2, #4
 8008abc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <RTC_EnterInitMode+0x64>
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d1e8      	bne.n	8008aa8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68da      	ldr	r2, [r3, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008afa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f003 0320 	and.w	r3, r3, #32
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10a      	bne.n	8008b20 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff ff89 	bl	8008a22 <HAL_RTC_WaitForSynchro>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d004      	beq.n	8008b20 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2204      	movs	r2, #4
 8008b1a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b085      	sub	sp, #20
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	4603      	mov	r3, r0
 8008b32:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008b38:	e005      	b.n	8008b46 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	3b0a      	subs	r3, #10
 8008b44:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008b46:	79fb      	ldrb	r3, [r7, #7]
 8008b48:	2b09      	cmp	r3, #9
 8008b4a:	d8f6      	bhi.n	8008b3a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	011b      	lsls	r3, r3, #4
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	79fb      	ldrb	r3, [r7, #7]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	b2db      	uxtb	r3, r3
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	091b      	lsrs	r3, r3, #4
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	461a      	mov	r2, r3
 8008b7a:	0092      	lsls	r2, r2, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	b2db      	uxtb	r3, r3
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e07b      	b.n	8008ca6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d108      	bne.n	8008bc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bbe:	d009      	beq.n	8008bd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	61da      	str	r2, [r3, #28]
 8008bc6:	e005      	b.n	8008bd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7fa f85a 	bl	8002ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c26:	431a      	orrs	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	431a      	orrs	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c44:	431a      	orrs	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c58:	ea42 0103 	orr.w	r1, r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	0c1b      	lsrs	r3, r3, #16
 8008c72:	f003 0104 	and.w	r1, r3, #4
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	f003 0210 	and.w	r2, r3, #16
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	430a      	orrs	r2, r1
 8008c84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	69da      	ldr	r2, [r3, #28]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b088      	sub	sp, #32
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	603b      	str	r3, [r7, #0]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d101      	bne.n	8008cd0 <HAL_SPI_Transmit+0x22>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e126      	b.n	8008f1e <HAL_SPI_Transmit+0x270>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cd8:	f7fd f9e0 	bl	800609c <HAL_GetTick>
 8008cdc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008cde:	88fb      	ldrh	r3, [r7, #6]
 8008ce0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d002      	beq.n	8008cf4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cf2:	e10b      	b.n	8008f0c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d002      	beq.n	8008d00 <HAL_SPI_Transmit+0x52>
 8008cfa:	88fb      	ldrh	r3, [r7, #6]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d04:	e102      	b.n	8008f0c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2203      	movs	r2, #3
 8008d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	88fa      	ldrh	r2, [r7, #6]
 8008d1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	88fa      	ldrh	r2, [r7, #6]
 8008d24:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d4c:	d10f      	bne.n	8008d6e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d78:	2b40      	cmp	r3, #64	; 0x40
 8008d7a:	d007      	beq.n	8008d8c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d94:	d14b      	bne.n	8008e2e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <HAL_SPI_Transmit+0xf6>
 8008d9e:	8afb      	ldrh	r3, [r7, #22]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d13e      	bne.n	8008e22 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da8:	881a      	ldrh	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db4:	1c9a      	adds	r2, r3, #2
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008dc8:	e02b      	b.n	8008e22 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f003 0302 	and.w	r3, r3, #2
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d112      	bne.n	8008dfe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ddc:	881a      	ldrh	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de8:	1c9a      	adds	r2, r3, #2
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	3b01      	subs	r3, #1
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8008dfc:	e011      	b.n	8008e22 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dfe:	f7fd f94d 	bl	800609c <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d803      	bhi.n	8008e16 <HAL_SPI_Transmit+0x168>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e14:	d102      	bne.n	8008e1c <HAL_SPI_Transmit+0x16e>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d102      	bne.n	8008e22 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e20:	e074      	b.n	8008f0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1ce      	bne.n	8008dca <HAL_SPI_Transmit+0x11c>
 8008e2c:	e04c      	b.n	8008ec8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <HAL_SPI_Transmit+0x18e>
 8008e36:	8afb      	ldrh	r3, [r7, #22]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d140      	bne.n	8008ebe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	330c      	adds	r3, #12
 8008e46:	7812      	ldrb	r2, [r2, #0]
 8008e48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008e62:	e02c      	b.n	8008ebe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f003 0302 	and.w	r3, r3, #2
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d113      	bne.n	8008e9a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	330c      	adds	r3, #12
 8008e7c:	7812      	ldrb	r2, [r2, #0]
 8008e7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	3b01      	subs	r3, #1
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e98:	e011      	b.n	8008ebe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e9a:	f7fd f8ff 	bl	800609c <HAL_GetTick>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d803      	bhi.n	8008eb2 <HAL_SPI_Transmit+0x204>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb0:	d102      	bne.n	8008eb8 <HAL_SPI_Transmit+0x20a>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d102      	bne.n	8008ebe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ebc:	e026      	b.n	8008f0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1cd      	bne.n	8008e64 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 f8b3 	bl	8009038 <SPI_EndRxTxTransaction>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2220      	movs	r2, #32
 8008edc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10a      	bne.n	8008efc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	613b      	str	r3, [r7, #16]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	613b      	str	r3, [r7, #16]
 8008efa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	77fb      	strb	r3, [r7, #31]
 8008f08:	e000      	b.n	8008f0c <HAL_SPI_Transmit+0x25e>
  }

error:
 8008f0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3720      	adds	r7, #32
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
	...

08008f28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	4613      	mov	r3, r2
 8008f36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f38:	f7fd f8b0 	bl	800609c <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f40:	1a9b      	subs	r3, r3, r2
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	4413      	add	r3, r2
 8008f46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f48:	f7fd f8a8 	bl	800609c <HAL_GetTick>
 8008f4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f4e:	4b39      	ldr	r3, [pc, #228]	; (8009034 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	015b      	lsls	r3, r3, #5
 8008f54:	0d1b      	lsrs	r3, r3, #20
 8008f56:	69fa      	ldr	r2, [r7, #28]
 8008f58:	fb02 f303 	mul.w	r3, r2, r3
 8008f5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f5e:	e054      	b.n	800900a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f66:	d050      	beq.n	800900a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f68:	f7fd f898 	bl	800609c <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d902      	bls.n	8008f7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d13d      	bne.n	8008ffa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f96:	d111      	bne.n	8008fbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fa0:	d004      	beq.n	8008fac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008faa:	d107      	bne.n	8008fbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fc4:	d10f      	bne.n	8008fe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e017      	b.n	800902a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009000:	2300      	movs	r3, #0
 8009002:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	3b01      	subs	r3, #1
 8009008:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	4013      	ands	r3, r2
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	429a      	cmp	r2, r3
 8009018:	bf0c      	ite	eq
 800901a:	2301      	moveq	r3, #1
 800901c:	2300      	movne	r3, #0
 800901e:	b2db      	uxtb	r3, r3
 8009020:	461a      	mov	r2, r3
 8009022:	79fb      	ldrb	r3, [r7, #7]
 8009024:	429a      	cmp	r2, r3
 8009026:	d19b      	bne.n	8008f60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3720      	adds	r7, #32
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20000180 	.word	0x20000180

08009038 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af02      	add	r7, sp, #8
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009044:	4b1b      	ldr	r3, [pc, #108]	; (80090b4 <SPI_EndRxTxTransaction+0x7c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a1b      	ldr	r2, [pc, #108]	; (80090b8 <SPI_EndRxTxTransaction+0x80>)
 800904a:	fba2 2303 	umull	r2, r3, r2, r3
 800904e:	0d5b      	lsrs	r3, r3, #21
 8009050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009054:	fb02 f303 	mul.w	r3, r2, r3
 8009058:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009062:	d112      	bne.n	800908a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2200      	movs	r2, #0
 800906c:	2180      	movs	r1, #128	; 0x80
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7ff ff5a 	bl	8008f28 <SPI_WaitFlagStateUntilTimeout>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d016      	beq.n	80090a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907e:	f043 0220 	orr.w	r2, r3, #32
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e00f      	b.n	80090aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00a      	beq.n	80090a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	3b01      	subs	r3, #1
 8009094:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a0:	2b80      	cmp	r3, #128	; 0x80
 80090a2:	d0f2      	beq.n	800908a <SPI_EndRxTxTransaction+0x52>
 80090a4:	e000      	b.n	80090a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80090a6:	bf00      	nop
  }

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3718      	adds	r7, #24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	20000180 	.word	0x20000180
 80090b8:	165e9f81 	.word	0x165e9f81

080090bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e041      	b.n	8009152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d106      	bne.n	80090e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7fa f838 	bl	8003158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2202      	movs	r2, #2
 80090ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	3304      	adds	r3, #4
 80090f8:	4619      	mov	r1, r3
 80090fa:	4610      	mov	r0, r2
 80090fc:	f000 fc7a 	bl	80099f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b01      	cmp	r3, #1
 800916e:	d001      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e04e      	b.n	8009212 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2202      	movs	r2, #2
 8009178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f042 0201 	orr.w	r2, r2, #1
 800918a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a23      	ldr	r2, [pc, #140]	; (8009220 <HAL_TIM_Base_Start_IT+0xc4>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d022      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800919e:	d01d      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a1f      	ldr	r2, [pc, #124]	; (8009224 <HAL_TIM_Base_Start_IT+0xc8>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d018      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a1e      	ldr	r2, [pc, #120]	; (8009228 <HAL_TIM_Base_Start_IT+0xcc>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d013      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a1c      	ldr	r2, [pc, #112]	; (800922c <HAL_TIM_Base_Start_IT+0xd0>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d00e      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a1b      	ldr	r2, [pc, #108]	; (8009230 <HAL_TIM_Base_Start_IT+0xd4>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d009      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a19      	ldr	r2, [pc, #100]	; (8009234 <HAL_TIM_Base_Start_IT+0xd8>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d004      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x80>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a18      	ldr	r2, [pc, #96]	; (8009238 <HAL_TIM_Base_Start_IT+0xdc>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d111      	bne.n	8009200 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f003 0307 	and.w	r3, r3, #7
 80091e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b06      	cmp	r3, #6
 80091ec:	d010      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f042 0201 	orr.w	r2, r2, #1
 80091fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091fe:	e007      	b.n	8009210 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0201 	orr.w	r2, r2, #1
 800920e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	40010000 	.word	0x40010000
 8009224:	40000400 	.word	0x40000400
 8009228:	40000800 	.word	0x40000800
 800922c:	40000c00 	.word	0x40000c00
 8009230:	40010400 	.word	0x40010400
 8009234:	40014000 	.word	0x40014000
 8009238:	40001800 	.word	0x40001800

0800923c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e041      	b.n	80092d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f839 	bl	80092da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	3304      	adds	r3, #4
 8009278:	4619      	mov	r1, r3
 800927a:	4610      	mov	r0, r2
 800927c:	f000 fbba 	bl	80099f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80092da:	b480      	push	{r7}
 80092dc:	b083      	sub	sp, #12
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80092e2:	bf00      	nop
 80092e4:	370c      	adds	r7, #12
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
	...

080092f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d109      	bne.n	8009314 <HAL_TIM_PWM_Start+0x24>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b01      	cmp	r3, #1
 800930a:	bf14      	ite	ne
 800930c:	2301      	movne	r3, #1
 800930e:	2300      	moveq	r3, #0
 8009310:	b2db      	uxtb	r3, r3
 8009312:	e022      	b.n	800935a <HAL_TIM_PWM_Start+0x6a>
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b04      	cmp	r3, #4
 8009318:	d109      	bne.n	800932e <HAL_TIM_PWM_Start+0x3e>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b01      	cmp	r3, #1
 8009324:	bf14      	ite	ne
 8009326:	2301      	movne	r3, #1
 8009328:	2300      	moveq	r3, #0
 800932a:	b2db      	uxtb	r3, r3
 800932c:	e015      	b.n	800935a <HAL_TIM_PWM_Start+0x6a>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b08      	cmp	r3, #8
 8009332:	d109      	bne.n	8009348 <HAL_TIM_PWM_Start+0x58>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b01      	cmp	r3, #1
 800933e:	bf14      	ite	ne
 8009340:	2301      	movne	r3, #1
 8009342:	2300      	moveq	r3, #0
 8009344:	b2db      	uxtb	r3, r3
 8009346:	e008      	b.n	800935a <HAL_TIM_PWM_Start+0x6a>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800934e:	b2db      	uxtb	r3, r3
 8009350:	2b01      	cmp	r3, #1
 8009352:	bf14      	ite	ne
 8009354:	2301      	movne	r3, #1
 8009356:	2300      	moveq	r3, #0
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e07c      	b.n	800945c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d104      	bne.n	8009372 <HAL_TIM_PWM_Start+0x82>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009370:	e013      	b.n	800939a <HAL_TIM_PWM_Start+0xaa>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b04      	cmp	r3, #4
 8009376:	d104      	bne.n	8009382 <HAL_TIM_PWM_Start+0x92>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009380:	e00b      	b.n	800939a <HAL_TIM_PWM_Start+0xaa>
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b08      	cmp	r3, #8
 8009386:	d104      	bne.n	8009392 <HAL_TIM_PWM_Start+0xa2>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2202      	movs	r2, #2
 800938c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009390:	e003      	b.n	800939a <HAL_TIM_PWM_Start+0xaa>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2202      	movs	r2, #2
 8009396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2201      	movs	r2, #1
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 fe10 	bl	8009fc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a2d      	ldr	r2, [pc, #180]	; (8009464 <HAL_TIM_PWM_Start+0x174>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d004      	beq.n	80093bc <HAL_TIM_PWM_Start+0xcc>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a2c      	ldr	r2, [pc, #176]	; (8009468 <HAL_TIM_PWM_Start+0x178>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d101      	bne.n	80093c0 <HAL_TIM_PWM_Start+0xd0>
 80093bc:	2301      	movs	r3, #1
 80093be:	e000      	b.n	80093c2 <HAL_TIM_PWM_Start+0xd2>
 80093c0:	2300      	movs	r3, #0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d007      	beq.n	80093d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a22      	ldr	r2, [pc, #136]	; (8009464 <HAL_TIM_PWM_Start+0x174>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d022      	beq.n	8009426 <HAL_TIM_PWM_Start+0x136>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e8:	d01d      	beq.n	8009426 <HAL_TIM_PWM_Start+0x136>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a1f      	ldr	r2, [pc, #124]	; (800946c <HAL_TIM_PWM_Start+0x17c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d018      	beq.n	8009426 <HAL_TIM_PWM_Start+0x136>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a1d      	ldr	r2, [pc, #116]	; (8009470 <HAL_TIM_PWM_Start+0x180>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d013      	beq.n	8009426 <HAL_TIM_PWM_Start+0x136>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a1c      	ldr	r2, [pc, #112]	; (8009474 <HAL_TIM_PWM_Start+0x184>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d00e      	beq.n	8009426 <HAL_TIM_PWM_Start+0x136>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a16      	ldr	r2, [pc, #88]	; (8009468 <HAL_TIM_PWM_Start+0x178>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d009      	beq.n	8009426 <HAL_TIM_PWM_Start+0x136>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a18      	ldr	r2, [pc, #96]	; (8009478 <HAL_TIM_PWM_Start+0x188>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d004      	beq.n	8009426 <HAL_TIM_PWM_Start+0x136>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a16      	ldr	r2, [pc, #88]	; (800947c <HAL_TIM_PWM_Start+0x18c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d111      	bne.n	800944a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2b06      	cmp	r3, #6
 8009436:	d010      	beq.n	800945a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f042 0201 	orr.w	r2, r2, #1
 8009446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009448:	e007      	b.n	800945a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f042 0201 	orr.w	r2, r2, #1
 8009458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	40010000 	.word	0x40010000
 8009468:	40010400 	.word	0x40010400
 800946c:	40000400 	.word	0x40000400
 8009470:	40000800 	.word	0x40000800
 8009474:	40000c00 	.word	0x40000c00
 8009478:	40014000 	.word	0x40014000
 800947c:	40001800 	.word	0x40001800

08009480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b02      	cmp	r3, #2
 8009494:	d122      	bne.n	80094dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d11b      	bne.n	80094dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f06f 0202 	mvn.w	r2, #2
 80094ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	f003 0303 	and.w	r3, r3, #3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fa77 	bl	80099b6 <HAL_TIM_IC_CaptureCallback>
 80094c8:	e005      	b.n	80094d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fa69 	bl	80099a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fa7a 	bl	80099ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f003 0304 	and.w	r3, r3, #4
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d122      	bne.n	8009530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d11b      	bne.n	8009530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f06f 0204 	mvn.w	r2, #4
 8009500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2202      	movs	r2, #2
 8009506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fa4d 	bl	80099b6 <HAL_TIM_IC_CaptureCallback>
 800951c:	e005      	b.n	800952a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa3f 	bl	80099a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fa50 	bl	80099ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f003 0308 	and.w	r3, r3, #8
 800953a:	2b08      	cmp	r3, #8
 800953c:	d122      	bne.n	8009584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f003 0308 	and.w	r3, r3, #8
 8009548:	2b08      	cmp	r3, #8
 800954a:	d11b      	bne.n	8009584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0208 	mvn.w	r2, #8
 8009554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2204      	movs	r2, #4
 800955a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	f003 0303 	and.w	r3, r3, #3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fa23 	bl	80099b6 <HAL_TIM_IC_CaptureCallback>
 8009570:	e005      	b.n	800957e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa15 	bl	80099a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fa26 	bl	80099ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	f003 0310 	and.w	r3, r3, #16
 800958e:	2b10      	cmp	r3, #16
 8009590:	d122      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f003 0310 	and.w	r3, r3, #16
 800959c:	2b10      	cmp	r3, #16
 800959e:	d11b      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f06f 0210 	mvn.w	r2, #16
 80095a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2208      	movs	r2, #8
 80095ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f9f9 	bl	80099b6 <HAL_TIM_IC_CaptureCallback>
 80095c4:	e005      	b.n	80095d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f9eb 	bl	80099a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f9fc 	bl	80099ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f003 0301 	and.w	r3, r3, #1
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d10e      	bne.n	8009604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d107      	bne.n	8009604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f06f 0201 	mvn.w	r2, #1
 80095fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7f9 fa7e 	bl	8002b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800960e:	2b80      	cmp	r3, #128	; 0x80
 8009610:	d10e      	bne.n	8009630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800961c:	2b80      	cmp	r3, #128	; 0x80
 800961e:	d107      	bne.n	8009630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fdca 	bl	800a1c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963a:	2b40      	cmp	r3, #64	; 0x40
 800963c:	d10e      	bne.n	800965c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009648:	2b40      	cmp	r3, #64	; 0x40
 800964a:	d107      	bne.n	800965c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f9c1 	bl	80099de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 0320 	and.w	r3, r3, #32
 8009666:	2b20      	cmp	r3, #32
 8009668:	d10e      	bne.n	8009688 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f003 0320 	and.w	r3, r3, #32
 8009674:	2b20      	cmp	r3, #32
 8009676:	d107      	bne.n	8009688 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f06f 0220 	mvn.w	r2, #32
 8009680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fd94 	bl	800a1b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009688:	bf00      	nop
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d101      	bne.n	80096ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096aa:	2302      	movs	r3, #2
 80096ac:	e0ae      	b.n	800980c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b0c      	cmp	r3, #12
 80096ba:	f200 809f 	bhi.w	80097fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80096be:	a201      	add	r2, pc, #4	; (adr r2, 80096c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	080096f9 	.word	0x080096f9
 80096c8:	080097fd 	.word	0x080097fd
 80096cc:	080097fd 	.word	0x080097fd
 80096d0:	080097fd 	.word	0x080097fd
 80096d4:	08009739 	.word	0x08009739
 80096d8:	080097fd 	.word	0x080097fd
 80096dc:	080097fd 	.word	0x080097fd
 80096e0:	080097fd 	.word	0x080097fd
 80096e4:	0800977b 	.word	0x0800977b
 80096e8:	080097fd 	.word	0x080097fd
 80096ec:	080097fd 	.word	0x080097fd
 80096f0:	080097fd 	.word	0x080097fd
 80096f4:	080097bb 	.word	0x080097bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68b9      	ldr	r1, [r7, #8]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fa18 	bl	8009b34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	699a      	ldr	r2, [r3, #24]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f042 0208 	orr.w	r2, r2, #8
 8009712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	699a      	ldr	r2, [r3, #24]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 0204 	bic.w	r2, r2, #4
 8009722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6999      	ldr	r1, [r3, #24]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	691a      	ldr	r2, [r3, #16]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	619a      	str	r2, [r3, #24]
      break;
 8009736:	e064      	b.n	8009802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68b9      	ldr	r1, [r7, #8]
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fa68 	bl	8009c14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	699a      	ldr	r2, [r3, #24]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	699a      	ldr	r2, [r3, #24]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6999      	ldr	r1, [r3, #24]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	021a      	lsls	r2, r3, #8
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	430a      	orrs	r2, r1
 8009776:	619a      	str	r2, [r3, #24]
      break;
 8009778:	e043      	b.n	8009802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68b9      	ldr	r1, [r7, #8]
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fabd 	bl	8009d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	69da      	ldr	r2, [r3, #28]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f042 0208 	orr.w	r2, r2, #8
 8009794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69da      	ldr	r2, [r3, #28]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f022 0204 	bic.w	r2, r2, #4
 80097a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69d9      	ldr	r1, [r3, #28]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	691a      	ldr	r2, [r3, #16]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	430a      	orrs	r2, r1
 80097b6:	61da      	str	r2, [r3, #28]
      break;
 80097b8:	e023      	b.n	8009802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68b9      	ldr	r1, [r7, #8]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 fb11 	bl	8009de8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	69da      	ldr	r2, [r3, #28]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	69da      	ldr	r2, [r3, #28]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69d9      	ldr	r1, [r3, #28]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	021a      	lsls	r2, r3, #8
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	61da      	str	r2, [r3, #28]
      break;
 80097fa:	e002      	b.n	8009802 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009800:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800980a:	7dfb      	ldrb	r3, [r7, #23]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009828:	2b01      	cmp	r3, #1
 800982a:	d101      	bne.n	8009830 <HAL_TIM_ConfigClockSource+0x1c>
 800982c:	2302      	movs	r3, #2
 800982e:	e0b4      	b.n	800999a <HAL_TIM_ConfigClockSource+0x186>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2202      	movs	r2, #2
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800984e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009856:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009868:	d03e      	beq.n	80098e8 <HAL_TIM_ConfigClockSource+0xd4>
 800986a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800986e:	f200 8087 	bhi.w	8009980 <HAL_TIM_ConfigClockSource+0x16c>
 8009872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009876:	f000 8086 	beq.w	8009986 <HAL_TIM_ConfigClockSource+0x172>
 800987a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800987e:	d87f      	bhi.n	8009980 <HAL_TIM_ConfigClockSource+0x16c>
 8009880:	2b70      	cmp	r3, #112	; 0x70
 8009882:	d01a      	beq.n	80098ba <HAL_TIM_ConfigClockSource+0xa6>
 8009884:	2b70      	cmp	r3, #112	; 0x70
 8009886:	d87b      	bhi.n	8009980 <HAL_TIM_ConfigClockSource+0x16c>
 8009888:	2b60      	cmp	r3, #96	; 0x60
 800988a:	d050      	beq.n	800992e <HAL_TIM_ConfigClockSource+0x11a>
 800988c:	2b60      	cmp	r3, #96	; 0x60
 800988e:	d877      	bhi.n	8009980 <HAL_TIM_ConfigClockSource+0x16c>
 8009890:	2b50      	cmp	r3, #80	; 0x50
 8009892:	d03c      	beq.n	800990e <HAL_TIM_ConfigClockSource+0xfa>
 8009894:	2b50      	cmp	r3, #80	; 0x50
 8009896:	d873      	bhi.n	8009980 <HAL_TIM_ConfigClockSource+0x16c>
 8009898:	2b40      	cmp	r3, #64	; 0x40
 800989a:	d058      	beq.n	800994e <HAL_TIM_ConfigClockSource+0x13a>
 800989c:	2b40      	cmp	r3, #64	; 0x40
 800989e:	d86f      	bhi.n	8009980 <HAL_TIM_ConfigClockSource+0x16c>
 80098a0:	2b30      	cmp	r3, #48	; 0x30
 80098a2:	d064      	beq.n	800996e <HAL_TIM_ConfigClockSource+0x15a>
 80098a4:	2b30      	cmp	r3, #48	; 0x30
 80098a6:	d86b      	bhi.n	8009980 <HAL_TIM_ConfigClockSource+0x16c>
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	d060      	beq.n	800996e <HAL_TIM_ConfigClockSource+0x15a>
 80098ac:	2b20      	cmp	r3, #32
 80098ae:	d867      	bhi.n	8009980 <HAL_TIM_ConfigClockSource+0x16c>
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d05c      	beq.n	800996e <HAL_TIM_ConfigClockSource+0x15a>
 80098b4:	2b10      	cmp	r3, #16
 80098b6:	d05a      	beq.n	800996e <HAL_TIM_ConfigClockSource+0x15a>
 80098b8:	e062      	b.n	8009980 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6818      	ldr	r0, [r3, #0]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	6899      	ldr	r1, [r3, #8]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	f000 fb5d 	bl	8009f88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80098dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	609a      	str	r2, [r3, #8]
      break;
 80098e6:	e04f      	b.n	8009988 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6818      	ldr	r0, [r3, #0]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	6899      	ldr	r1, [r3, #8]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f000 fb46 	bl	8009f88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689a      	ldr	r2, [r3, #8]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800990a:	609a      	str	r2, [r3, #8]
      break;
 800990c:	e03c      	b.n	8009988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6818      	ldr	r0, [r3, #0]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	6859      	ldr	r1, [r3, #4]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	461a      	mov	r2, r3
 800991c:	f000 faba 	bl	8009e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2150      	movs	r1, #80	; 0x50
 8009926:	4618      	mov	r0, r3
 8009928:	f000 fb13 	bl	8009f52 <TIM_ITRx_SetConfig>
      break;
 800992c:	e02c      	b.n	8009988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6818      	ldr	r0, [r3, #0]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	6859      	ldr	r1, [r3, #4]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	461a      	mov	r2, r3
 800993c:	f000 fad9 	bl	8009ef2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2160      	movs	r1, #96	; 0x60
 8009946:	4618      	mov	r0, r3
 8009948:	f000 fb03 	bl	8009f52 <TIM_ITRx_SetConfig>
      break;
 800994c:	e01c      	b.n	8009988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	6859      	ldr	r1, [r3, #4]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	461a      	mov	r2, r3
 800995c:	f000 fa9a 	bl	8009e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2140      	movs	r1, #64	; 0x40
 8009966:	4618      	mov	r0, r3
 8009968:	f000 faf3 	bl	8009f52 <TIM_ITRx_SetConfig>
      break;
 800996c:	e00c      	b.n	8009988 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4619      	mov	r1, r3
 8009978:	4610      	mov	r0, r2
 800997a:	f000 faea 	bl	8009f52 <TIM_ITRx_SetConfig>
      break;
 800997e:	e003      	b.n	8009988 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	73fb      	strb	r3, [r7, #15]
      break;
 8009984:	e000      	b.n	8009988 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009986:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009998:	7bfb      	ldrb	r3, [r7, #15]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b083      	sub	sp, #12
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099be:	bf00      	nop
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b083      	sub	sp, #12
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099d2:	bf00      	nop
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099de:	b480      	push	{r7}
 80099e0:	b083      	sub	sp, #12
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099e6:	bf00      	nop
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
	...

080099f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a40      	ldr	r2, [pc, #256]	; (8009b08 <TIM_Base_SetConfig+0x114>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d013      	beq.n	8009a34 <TIM_Base_SetConfig+0x40>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a12:	d00f      	beq.n	8009a34 <TIM_Base_SetConfig+0x40>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a3d      	ldr	r2, [pc, #244]	; (8009b0c <TIM_Base_SetConfig+0x118>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d00b      	beq.n	8009a34 <TIM_Base_SetConfig+0x40>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a3c      	ldr	r2, [pc, #240]	; (8009b10 <TIM_Base_SetConfig+0x11c>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d007      	beq.n	8009a34 <TIM_Base_SetConfig+0x40>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a3b      	ldr	r2, [pc, #236]	; (8009b14 <TIM_Base_SetConfig+0x120>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d003      	beq.n	8009a34 <TIM_Base_SetConfig+0x40>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a3a      	ldr	r2, [pc, #232]	; (8009b18 <TIM_Base_SetConfig+0x124>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d108      	bne.n	8009a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a2f      	ldr	r2, [pc, #188]	; (8009b08 <TIM_Base_SetConfig+0x114>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d02b      	beq.n	8009aa6 <TIM_Base_SetConfig+0xb2>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a54:	d027      	beq.n	8009aa6 <TIM_Base_SetConfig+0xb2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a2c      	ldr	r2, [pc, #176]	; (8009b0c <TIM_Base_SetConfig+0x118>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d023      	beq.n	8009aa6 <TIM_Base_SetConfig+0xb2>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a2b      	ldr	r2, [pc, #172]	; (8009b10 <TIM_Base_SetConfig+0x11c>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d01f      	beq.n	8009aa6 <TIM_Base_SetConfig+0xb2>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a2a      	ldr	r2, [pc, #168]	; (8009b14 <TIM_Base_SetConfig+0x120>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d01b      	beq.n	8009aa6 <TIM_Base_SetConfig+0xb2>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a29      	ldr	r2, [pc, #164]	; (8009b18 <TIM_Base_SetConfig+0x124>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d017      	beq.n	8009aa6 <TIM_Base_SetConfig+0xb2>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a28      	ldr	r2, [pc, #160]	; (8009b1c <TIM_Base_SetConfig+0x128>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d013      	beq.n	8009aa6 <TIM_Base_SetConfig+0xb2>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a27      	ldr	r2, [pc, #156]	; (8009b20 <TIM_Base_SetConfig+0x12c>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d00f      	beq.n	8009aa6 <TIM_Base_SetConfig+0xb2>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a26      	ldr	r2, [pc, #152]	; (8009b24 <TIM_Base_SetConfig+0x130>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d00b      	beq.n	8009aa6 <TIM_Base_SetConfig+0xb2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a25      	ldr	r2, [pc, #148]	; (8009b28 <TIM_Base_SetConfig+0x134>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d007      	beq.n	8009aa6 <TIM_Base_SetConfig+0xb2>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a24      	ldr	r2, [pc, #144]	; (8009b2c <TIM_Base_SetConfig+0x138>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d003      	beq.n	8009aa6 <TIM_Base_SetConfig+0xb2>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a23      	ldr	r2, [pc, #140]	; (8009b30 <TIM_Base_SetConfig+0x13c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d108      	bne.n	8009ab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	689a      	ldr	r2, [r3, #8]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a0a      	ldr	r2, [pc, #40]	; (8009b08 <TIM_Base_SetConfig+0x114>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d003      	beq.n	8009aec <TIM_Base_SetConfig+0xf8>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a0c      	ldr	r2, [pc, #48]	; (8009b18 <TIM_Base_SetConfig+0x124>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d103      	bne.n	8009af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	691a      	ldr	r2, [r3, #16]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	615a      	str	r2, [r3, #20]
}
 8009afa:	bf00      	nop
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	40010000 	.word	0x40010000
 8009b0c:	40000400 	.word	0x40000400
 8009b10:	40000800 	.word	0x40000800
 8009b14:	40000c00 	.word	0x40000c00
 8009b18:	40010400 	.word	0x40010400
 8009b1c:	40014000 	.word	0x40014000
 8009b20:	40014400 	.word	0x40014400
 8009b24:	40014800 	.word	0x40014800
 8009b28:	40001800 	.word	0x40001800
 8009b2c:	40001c00 	.word	0x40001c00
 8009b30:	40002000 	.word	0x40002000

08009b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	f023 0201 	bic.w	r2, r3, #1
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f023 0303 	bic.w	r3, r3, #3
 8009b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	f023 0302 	bic.w	r3, r3, #2
 8009b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a20      	ldr	r2, [pc, #128]	; (8009c0c <TIM_OC1_SetConfig+0xd8>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d003      	beq.n	8009b98 <TIM_OC1_SetConfig+0x64>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a1f      	ldr	r2, [pc, #124]	; (8009c10 <TIM_OC1_SetConfig+0xdc>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d10c      	bne.n	8009bb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f023 0308 	bic.w	r3, r3, #8
 8009b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f023 0304 	bic.w	r3, r3, #4
 8009bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a15      	ldr	r2, [pc, #84]	; (8009c0c <TIM_OC1_SetConfig+0xd8>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d003      	beq.n	8009bc2 <TIM_OC1_SetConfig+0x8e>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a14      	ldr	r2, [pc, #80]	; (8009c10 <TIM_OC1_SetConfig+0xdc>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d111      	bne.n	8009be6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	621a      	str	r2, [r3, #32]
}
 8009c00:	bf00      	nop
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	40010000 	.word	0x40010000
 8009c10:	40010400 	.word	0x40010400

08009c14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	f023 0210 	bic.w	r2, r3, #16
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	021b      	lsls	r3, r3, #8
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	f023 0320 	bic.w	r3, r3, #32
 8009c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	011b      	lsls	r3, r3, #4
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a22      	ldr	r2, [pc, #136]	; (8009cf8 <TIM_OC2_SetConfig+0xe4>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d003      	beq.n	8009c7c <TIM_OC2_SetConfig+0x68>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a21      	ldr	r2, [pc, #132]	; (8009cfc <TIM_OC2_SetConfig+0xe8>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d10d      	bne.n	8009c98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	011b      	lsls	r3, r3, #4
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a17      	ldr	r2, [pc, #92]	; (8009cf8 <TIM_OC2_SetConfig+0xe4>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d003      	beq.n	8009ca8 <TIM_OC2_SetConfig+0x94>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a16      	ldr	r2, [pc, #88]	; (8009cfc <TIM_OC2_SetConfig+0xe8>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d113      	bne.n	8009cd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	693a      	ldr	r2, [r7, #16]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	621a      	str	r2, [r3, #32]
}
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	40010000 	.word	0x40010000
 8009cfc:	40010400 	.word	0x40010400

08009d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f023 0303 	bic.w	r3, r3, #3
 8009d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	021b      	lsls	r3, r3, #8
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a21      	ldr	r2, [pc, #132]	; (8009de0 <TIM_OC3_SetConfig+0xe0>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d003      	beq.n	8009d66 <TIM_OC3_SetConfig+0x66>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a20      	ldr	r2, [pc, #128]	; (8009de4 <TIM_OC3_SetConfig+0xe4>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d10d      	bne.n	8009d82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	021b      	lsls	r3, r3, #8
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a16      	ldr	r2, [pc, #88]	; (8009de0 <TIM_OC3_SetConfig+0xe0>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d003      	beq.n	8009d92 <TIM_OC3_SetConfig+0x92>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a15      	ldr	r2, [pc, #84]	; (8009de4 <TIM_OC3_SetConfig+0xe4>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d113      	bne.n	8009dba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	011b      	lsls	r3, r3, #4
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	621a      	str	r2, [r3, #32]
}
 8009dd4:	bf00      	nop
 8009dd6:	371c      	adds	r7, #28
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	40010000 	.word	0x40010000
 8009de4:	40010400 	.word	0x40010400

08009de8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b087      	sub	sp, #28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	021b      	lsls	r3, r3, #8
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	031b      	lsls	r3, r3, #12
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a12      	ldr	r2, [pc, #72]	; (8009e8c <TIM_OC4_SetConfig+0xa4>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d003      	beq.n	8009e50 <TIM_OC4_SetConfig+0x68>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a11      	ldr	r2, [pc, #68]	; (8009e90 <TIM_OC4_SetConfig+0xa8>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d109      	bne.n	8009e64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	019b      	lsls	r3, r3, #6
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	621a      	str	r2, [r3, #32]
}
 8009e7e:	bf00      	nop
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	40010000 	.word	0x40010000
 8009e90:	40010400 	.word	0x40010400

08009e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	f023 0201 	bic.w	r2, r3, #1
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f023 030a 	bic.w	r3, r3, #10
 8009ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	621a      	str	r2, [r3, #32]
}
 8009ee6:	bf00      	nop
 8009ee8:	371c      	adds	r7, #28
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b087      	sub	sp, #28
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	60f8      	str	r0, [r7, #12]
 8009efa:	60b9      	str	r1, [r7, #8]
 8009efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	f023 0210 	bic.w	r2, r3, #16
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6a1b      	ldr	r3, [r3, #32]
 8009f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	031b      	lsls	r3, r3, #12
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	011b      	lsls	r3, r3, #4
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	621a      	str	r2, [r3, #32]
}
 8009f46:	bf00      	nop
 8009f48:	371c      	adds	r7, #28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b085      	sub	sp, #20
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	f043 0307 	orr.w	r3, r3, #7
 8009f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	609a      	str	r2, [r3, #8]
}
 8009f7c:	bf00      	nop
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b087      	sub	sp, #28
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
 8009f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	021a      	lsls	r2, r3, #8
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	431a      	orrs	r2, r3
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	609a      	str	r2, [r3, #8]
}
 8009fbc:	bf00      	nop
 8009fbe:	371c      	adds	r7, #28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	f003 031f 	and.w	r3, r3, #31
 8009fda:	2201      	movs	r2, #1
 8009fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6a1a      	ldr	r2, [r3, #32]
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	43db      	mvns	r3, r3
 8009fea:	401a      	ands	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6a1a      	ldr	r2, [r3, #32]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	f003 031f 	and.w	r3, r3, #31
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	fa01 f303 	lsl.w	r3, r1, r3
 800a000:	431a      	orrs	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	621a      	str	r2, [r3, #32]
}
 800a006:	bf00      	nop
 800a008:	371c      	adds	r7, #28
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
	...

0800a014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a024:	2b01      	cmp	r3, #1
 800a026:	d101      	bne.n	800a02c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a028:	2302      	movs	r3, #2
 800a02a:	e05a      	b.n	800a0e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2202      	movs	r2, #2
 800a038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a21      	ldr	r2, [pc, #132]	; (800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d022      	beq.n	800a0b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a078:	d01d      	beq.n	800a0b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a1d      	ldr	r2, [pc, #116]	; (800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d018      	beq.n	800a0b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a1b      	ldr	r2, [pc, #108]	; (800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d013      	beq.n	800a0b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a1a      	ldr	r2, [pc, #104]	; (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d00e      	beq.n	800a0b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a18      	ldr	r2, [pc, #96]	; (800a100 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d009      	beq.n	800a0b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a17      	ldr	r2, [pc, #92]	; (800a104 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d004      	beq.n	800a0b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a15      	ldr	r2, [pc, #84]	; (800a108 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d10c      	bne.n	800a0d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	40010000 	.word	0x40010000
 800a0f4:	40000400 	.word	0x40000400
 800a0f8:	40000800 	.word	0x40000800
 800a0fc:	40000c00 	.word	0x40000c00
 800a100:	40010400 	.word	0x40010400
 800a104:	40014000 	.word	0x40014000
 800a108:	40001800 	.word	0x40001800

0800a10c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a116:	2300      	movs	r3, #0
 800a118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a120:	2b01      	cmp	r3, #1
 800a122:	d101      	bne.n	800a128 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a124:	2302      	movs	r3, #2
 800a126:	e03d      	b.n	800a1a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	4313      	orrs	r3, r2
 800a14a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	4313      	orrs	r3, r2
 800a158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4313      	orrs	r3, r2
 800a166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	695b      	ldr	r3, [r3, #20]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	69db      	ldr	r3, [r3, #28]
 800a18e:	4313      	orrs	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3714      	adds	r7, #20
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e03f      	b.n	800a26a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7f9 f8a4 	bl	800334c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2224      	movs	r2, #36	; 0x24
 800a208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68da      	ldr	r2, [r3, #12]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a21a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fd81 	bl	800ad24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	691a      	ldr	r2, [r3, #16]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	695a      	ldr	r2, [r3, #20]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68da      	ldr	r2, [r3, #12]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2220      	movs	r2, #32
 800a25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2220      	movs	r2, #32
 800a264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b08a      	sub	sp, #40	; 0x28
 800a276:	af02      	add	r7, sp, #8
 800a278:	60f8      	str	r0, [r7, #12]
 800a27a:	60b9      	str	r1, [r7, #8]
 800a27c:	603b      	str	r3, [r7, #0]
 800a27e:	4613      	mov	r3, r2
 800a280:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a282:	2300      	movs	r3, #0
 800a284:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b20      	cmp	r3, #32
 800a290:	f040 808c 	bne.w	800a3ac <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d002      	beq.n	800a2a0 <HAL_UART_Receive+0x2e>
 800a29a:	88fb      	ldrh	r3, [r7, #6]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e084      	b.n	800a3ae <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d101      	bne.n	800a2b2 <HAL_UART_Receive+0x40>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	e07d      	b.n	800a3ae <HAL_UART_Receive+0x13c>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2222      	movs	r2, #34	; 0x22
 800a2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2ce:	f7fb fee5 	bl	800609c <HAL_GetTick>
 800a2d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	88fa      	ldrh	r2, [r7, #6]
 800a2d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	88fa      	ldrh	r2, [r7, #6]
 800a2de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e8:	d108      	bne.n	800a2fc <HAL_UART_Receive+0x8a>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d104      	bne.n	800a2fc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	61bb      	str	r3, [r7, #24]
 800a2fa:	e003      	b.n	800a304 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a300:	2300      	movs	r3, #0
 800a302:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a30c:	e043      	b.n	800a396 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2200      	movs	r2, #0
 800a316:	2120      	movs	r1, #32
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 fafb 	bl	800a914 <UART_WaitOnFlagUntilTimeout>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e042      	b.n	800a3ae <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10c      	bne.n	800a348 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	b29b      	uxth	r3, r3
 800a336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	3302      	adds	r3, #2
 800a344:	61bb      	str	r3, [r7, #24]
 800a346:	e01f      	b.n	800a388 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a350:	d007      	beq.n	800a362 <HAL_UART_Receive+0xf0>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10a      	bne.n	800a370 <HAL_UART_Receive+0xfe>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d106      	bne.n	800a370 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	701a      	strb	r2, [r3, #0]
 800a36e:	e008      	b.n	800a382 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	b2db      	uxtb	r3, r3
 800a378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	3301      	adds	r3, #1
 800a386:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	3b01      	subs	r3, #1
 800a390:	b29a      	uxth	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1b6      	bne.n	800a30e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e000      	b.n	800a3ae <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a3ac:	2302      	movs	r3, #2
  }
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3720      	adds	r7, #32
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
	...

0800a3b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b0ba      	sub	sp, #232	; 0xe8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ee:	f003 030f 	and.w	r3, r3, #15
 800a3f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a3f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10f      	bne.n	800a41e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a402:	f003 0320 	and.w	r3, r3, #32
 800a406:	2b00      	cmp	r3, #0
 800a408:	d009      	beq.n	800a41e <HAL_UART_IRQHandler+0x66>
 800a40a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a40e:	f003 0320 	and.w	r3, r3, #32
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fbc9 	bl	800abae <UART_Receive_IT>
      return;
 800a41c:	e256      	b.n	800a8cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a41e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a422:	2b00      	cmp	r3, #0
 800a424:	f000 80de 	beq.w	800a5e4 <HAL_UART_IRQHandler+0x22c>
 800a428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	d106      	bne.n	800a442 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a438:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 80d1 	beq.w	800a5e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00b      	beq.n	800a466 <HAL_UART_IRQHandler+0xae>
 800a44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a456:	2b00      	cmp	r3, #0
 800a458:	d005      	beq.n	800a466 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45e:	f043 0201 	orr.w	r2, r3, #1
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a46a:	f003 0304 	and.w	r3, r3, #4
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00b      	beq.n	800a48a <HAL_UART_IRQHandler+0xd2>
 800a472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d005      	beq.n	800a48a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a482:	f043 0202 	orr.w	r2, r3, #2
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a48a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a48e:	f003 0302 	and.w	r3, r3, #2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00b      	beq.n	800a4ae <HAL_UART_IRQHandler+0xf6>
 800a496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d005      	beq.n	800a4ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a6:	f043 0204 	orr.w	r2, r3, #4
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4b2:	f003 0308 	and.w	r3, r3, #8
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d011      	beq.n	800a4de <HAL_UART_IRQHandler+0x126>
 800a4ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d105      	bne.n	800a4d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a4c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d005      	beq.n	800a4de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d6:	f043 0208 	orr.w	r2, r3, #8
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f000 81ed 	beq.w	800a8c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ec:	f003 0320 	and.w	r3, r3, #32
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d008      	beq.n	800a506 <HAL_UART_IRQHandler+0x14e>
 800a4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4f8:	f003 0320 	and.w	r3, r3, #32
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fb54 	bl	800abae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a510:	2b40      	cmp	r3, #64	; 0x40
 800a512:	bf0c      	ite	eq
 800a514:	2301      	moveq	r3, #1
 800a516:	2300      	movne	r3, #0
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a522:	f003 0308 	and.w	r3, r3, #8
 800a526:	2b00      	cmp	r3, #0
 800a528:	d103      	bne.n	800a532 <HAL_UART_IRQHandler+0x17a>
 800a52a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d04f      	beq.n	800a5d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fa5c 	bl	800a9f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a542:	2b40      	cmp	r3, #64	; 0x40
 800a544:	d141      	bne.n	800a5ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3314      	adds	r3, #20
 800a54c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a550:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a554:	e853 3f00 	ldrex	r3, [r3]
 800a558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a55c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3314      	adds	r3, #20
 800a56e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a572:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a576:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a57e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a582:	e841 2300 	strex	r3, r2, [r1]
 800a586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a58a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1d9      	bne.n	800a546 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a596:	2b00      	cmp	r3, #0
 800a598:	d013      	beq.n	800a5c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	4a7d      	ldr	r2, [pc, #500]	; (800a794 <HAL_UART_IRQHandler+0x3dc>)
 800a5a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fb ff29 	bl	80063fe <HAL_DMA_Abort_IT>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d016      	beq.n	800a5e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c0:	e00e      	b.n	800a5e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f990 	bl	800a8e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c8:	e00a      	b.n	800a5e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f98c 	bl	800a8e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d0:	e006      	b.n	800a5e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f988 	bl	800a8e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a5de:	e170      	b.n	800a8c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e0:	bf00      	nop
    return;
 800a5e2:	e16e      	b.n	800a8c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	f040 814a 	bne.w	800a882 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5f2:	f003 0310 	and.w	r3, r3, #16
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 8143 	beq.w	800a882 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a600:	f003 0310 	and.w	r3, r3, #16
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 813c 	beq.w	800a882 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a60a:	2300      	movs	r3, #0
 800a60c:	60bb      	str	r3, [r7, #8]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	60bb      	str	r3, [r7, #8]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	60bb      	str	r3, [r7, #8]
 800a61e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a62a:	2b40      	cmp	r3, #64	; 0x40
 800a62c:	f040 80b4 	bne.w	800a798 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a63c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 8140 	beq.w	800a8c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a64a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a64e:	429a      	cmp	r2, r3
 800a650:	f080 8139 	bcs.w	800a8c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a65a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a666:	f000 8088 	beq.w	800a77a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	330c      	adds	r3, #12
 800a670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a674:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a678:	e853 3f00 	ldrex	r3, [r3]
 800a67c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	330c      	adds	r3, #12
 800a692:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a696:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a69a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a6a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a6a6:	e841 2300 	strex	r3, r2, [r1]
 800a6aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a6ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1d9      	bne.n	800a66a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3314      	adds	r3, #20
 800a6bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6c0:	e853 3f00 	ldrex	r3, [r3]
 800a6c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a6c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6c8:	f023 0301 	bic.w	r3, r3, #1
 800a6cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3314      	adds	r3, #20
 800a6d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a6da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a6de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a6e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a6ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1e1      	bne.n	800a6b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3314      	adds	r3, #20
 800a6f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	3314      	adds	r3, #20
 800a712:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a716:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a718:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a71c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a71e:	e841 2300 	strex	r3, r2, [r1]
 800a722:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1e3      	bne.n	800a6f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2220      	movs	r2, #32
 800a72e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	330c      	adds	r3, #12
 800a73e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a742:	e853 3f00 	ldrex	r3, [r3]
 800a746:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a74a:	f023 0310 	bic.w	r3, r3, #16
 800a74e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	330c      	adds	r3, #12
 800a758:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a75c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a75e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a760:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a762:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a764:	e841 2300 	strex	r3, r2, [r1]
 800a768:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a76a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1e3      	bne.n	800a738 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a774:	4618      	mov	r0, r3
 800a776:	f7fb fdd2 	bl	800631e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a782:	b29b      	uxth	r3, r3
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	b29b      	uxth	r3, r3
 800a788:	4619      	mov	r1, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f8b6 	bl	800a8fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a790:	e099      	b.n	800a8c6 <HAL_UART_IRQHandler+0x50e>
 800a792:	bf00      	nop
 800a794:	0800aab7 	.word	0x0800aab7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f000 808b 	beq.w	800a8ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a7b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 8086 	beq.w	800a8ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	330c      	adds	r3, #12
 800a7c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c8:	e853 3f00 	ldrex	r3, [r3]
 800a7cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	330c      	adds	r3, #12
 800a7de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a7e2:	647a      	str	r2, [r7, #68]	; 0x44
 800a7e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7ea:	e841 2300 	strex	r3, r2, [r1]
 800a7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1e3      	bne.n	800a7be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3314      	adds	r3, #20
 800a7fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	623b      	str	r3, [r7, #32]
   return(result);
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	f023 0301 	bic.w	r3, r3, #1
 800a80c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	3314      	adds	r3, #20
 800a816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a81a:	633a      	str	r2, [r7, #48]	; 0x30
 800a81c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a822:	e841 2300 	strex	r3, r2, [r1]
 800a826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1e3      	bne.n	800a7f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2220      	movs	r2, #32
 800a832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	330c      	adds	r3, #12
 800a842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	e853 3f00 	ldrex	r3, [r3]
 800a84a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f023 0310 	bic.w	r3, r3, #16
 800a852:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	330c      	adds	r3, #12
 800a85c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a860:	61fa      	str	r2, [r7, #28]
 800a862:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a864:	69b9      	ldr	r1, [r7, #24]
 800a866:	69fa      	ldr	r2, [r7, #28]
 800a868:	e841 2300 	strex	r3, r2, [r1]
 800a86c:	617b      	str	r3, [r7, #20]
   return(result);
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1e3      	bne.n	800a83c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a874:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a878:	4619      	mov	r1, r3
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f83e 	bl	800a8fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a880:	e023      	b.n	800a8ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d009      	beq.n	800a8a2 <HAL_UART_IRQHandler+0x4ea>
 800a88e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a896:	2b00      	cmp	r3, #0
 800a898:	d003      	beq.n	800a8a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f91f 	bl	800aade <UART_Transmit_IT>
    return;
 800a8a0:	e014      	b.n	800a8cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a8a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00e      	beq.n	800a8cc <HAL_UART_IRQHandler+0x514>
 800a8ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d008      	beq.n	800a8cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f95f 	bl	800ab7e <UART_EndTransmit_IT>
    return;
 800a8c0:	e004      	b.n	800a8cc <HAL_UART_IRQHandler+0x514>
    return;
 800a8c2:	bf00      	nop
 800a8c4:	e002      	b.n	800a8cc <HAL_UART_IRQHandler+0x514>
      return;
 800a8c6:	bf00      	nop
 800a8c8:	e000      	b.n	800a8cc <HAL_UART_IRQHandler+0x514>
      return;
 800a8ca:	bf00      	nop
  }
}
 800a8cc:	37e8      	adds	r7, #232	; 0xe8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop

0800a8d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b090      	sub	sp, #64	; 0x40
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	603b      	str	r3, [r7, #0]
 800a920:	4613      	mov	r3, r2
 800a922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a924:	e050      	b.n	800a9c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92c:	d04c      	beq.n	800a9c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a92e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a930:	2b00      	cmp	r3, #0
 800a932:	d007      	beq.n	800a944 <UART_WaitOnFlagUntilTimeout+0x30>
 800a934:	f7fb fbb2 	bl	800609c <HAL_GetTick>
 800a938:	4602      	mov	r2, r0
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a940:	429a      	cmp	r2, r3
 800a942:	d241      	bcs.n	800a9c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	330c      	adds	r3, #12
 800a94a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	e853 3f00 	ldrex	r3, [r3]
 800a952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a95a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	330c      	adds	r3, #12
 800a962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a964:	637a      	str	r2, [r7, #52]	; 0x34
 800a966:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a96a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a96c:	e841 2300 	strex	r3, r2, [r1]
 800a970:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e5      	bne.n	800a944 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3314      	adds	r3, #20
 800a97e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	e853 3f00 	ldrex	r3, [r3]
 800a986:	613b      	str	r3, [r7, #16]
   return(result);
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	f023 0301 	bic.w	r3, r3, #1
 800a98e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3314      	adds	r3, #20
 800a996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a998:	623a      	str	r2, [r7, #32]
 800a99a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99c:	69f9      	ldr	r1, [r7, #28]
 800a99e:	6a3a      	ldr	r2, [r7, #32]
 800a9a0:	e841 2300 	strex	r3, r2, [r1]
 800a9a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e5      	bne.n	800a978 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2220      	movs	r2, #32
 800a9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	e00f      	b.n	800a9e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	bf0c      	ite	eq
 800a9d8:	2301      	moveq	r3, #1
 800a9da:	2300      	movne	r3, #0
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	461a      	mov	r2, r3
 800a9e0:	79fb      	ldrb	r3, [r7, #7]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d09f      	beq.n	800a926 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3740      	adds	r7, #64	; 0x40
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b095      	sub	sp, #84	; 0x54
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	330c      	adds	r3, #12
 800a9fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa02:	e853 3f00 	ldrex	r3, [r3]
 800aa06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	330c      	adds	r3, #12
 800aa16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa18:	643a      	str	r2, [r7, #64]	; 0x40
 800aa1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa20:	e841 2300 	strex	r3, r2, [r1]
 800aa24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e5      	bne.n	800a9f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3314      	adds	r3, #20
 800aa32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa34:	6a3b      	ldr	r3, [r7, #32]
 800aa36:	e853 3f00 	ldrex	r3, [r3]
 800aa3a:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	f023 0301 	bic.w	r3, r3, #1
 800aa42:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3314      	adds	r3, #20
 800aa4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa54:	e841 2300 	strex	r3, r2, [r1]
 800aa58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1e5      	bne.n	800aa2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d119      	bne.n	800aa9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	330c      	adds	r3, #12
 800aa6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	e853 3f00 	ldrex	r3, [r3]
 800aa76:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	f023 0310 	bic.w	r3, r3, #16
 800aa7e:	647b      	str	r3, [r7, #68]	; 0x44
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	330c      	adds	r3, #12
 800aa86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa88:	61ba      	str	r2, [r7, #24]
 800aa8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8c:	6979      	ldr	r1, [r7, #20]
 800aa8e:	69ba      	ldr	r2, [r7, #24]
 800aa90:	e841 2300 	strex	r3, r2, [r1]
 800aa94:	613b      	str	r3, [r7, #16]
   return(result);
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1e5      	bne.n	800aa68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2220      	movs	r2, #32
 800aaa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aaaa:	bf00      	nop
 800aaac:	3754      	adds	r7, #84	; 0x54
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f7ff ff09 	bl	800a8e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aad6:	bf00      	nop
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aade:	b480      	push	{r7}
 800aae0:	b085      	sub	sp, #20
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	2b21      	cmp	r3, #33	; 0x21
 800aaf0:	d13e      	bne.n	800ab70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aafa:	d114      	bne.n	800ab26 <UART_Transmit_IT+0x48>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d110      	bne.n	800ab26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a1b      	ldr	r3, [r3, #32]
 800ab08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	1c9a      	adds	r2, r3, #2
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	621a      	str	r2, [r3, #32]
 800ab24:	e008      	b.n	800ab38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	1c59      	adds	r1, r3, #1
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6211      	str	r1, [r2, #32]
 800ab30:	781a      	ldrb	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	4619      	mov	r1, r3
 800ab46:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10f      	bne.n	800ab6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68da      	ldr	r2, [r3, #12]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	e000      	b.n	800ab72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ab70:	2302      	movs	r3, #2
  }
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b082      	sub	sp, #8
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68da      	ldr	r2, [r3, #12]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2220      	movs	r2, #32
 800ab9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f7ff fe98 	bl	800a8d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b08c      	sub	sp, #48	; 0x30
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b22      	cmp	r3, #34	; 0x22
 800abc0:	f040 80ab 	bne.w	800ad1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abcc:	d117      	bne.n	800abfe <UART_Receive_IT+0x50>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d113      	bne.n	800abfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800abd6:	2300      	movs	r3, #0
 800abd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abec:	b29a      	uxth	r2, r3
 800abee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf6:	1c9a      	adds	r2, r3, #2
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	629a      	str	r2, [r3, #40]	; 0x28
 800abfc:	e026      	b.n	800ac4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ac04:	2300      	movs	r3, #0
 800ac06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac10:	d007      	beq.n	800ac22 <UART_Receive_IT+0x74>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10a      	bne.n	800ac30 <UART_Receive_IT+0x82>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d106      	bne.n	800ac30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2c:	701a      	strb	r2, [r3, #0]
 800ac2e:	e008      	b.n	800ac42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac46:	1c5a      	adds	r2, r3, #1
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	3b01      	subs	r3, #1
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d15a      	bne.n	800ad16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68da      	ldr	r2, [r3, #12]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f022 0220 	bic.w	r2, r2, #32
 800ac6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68da      	ldr	r2, [r3, #12]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	695a      	ldr	r2, [r3, #20]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f022 0201 	bic.w	r2, r2, #1
 800ac8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2220      	movs	r2, #32
 800ac94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d135      	bne.n	800ad0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	330c      	adds	r3, #12
 800acac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	e853 3f00 	ldrex	r3, [r3]
 800acb4:	613b      	str	r3, [r7, #16]
   return(result);
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f023 0310 	bic.w	r3, r3, #16
 800acbc:	627b      	str	r3, [r7, #36]	; 0x24
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	330c      	adds	r3, #12
 800acc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc6:	623a      	str	r2, [r7, #32]
 800acc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acca:	69f9      	ldr	r1, [r7, #28]
 800accc:	6a3a      	ldr	r2, [r7, #32]
 800acce:	e841 2300 	strex	r3, r2, [r1]
 800acd2:	61bb      	str	r3, [r7, #24]
   return(result);
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1e5      	bne.n	800aca6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 0310 	and.w	r3, r3, #16
 800ace4:	2b10      	cmp	r3, #16
 800ace6:	d10a      	bne.n	800acfe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ace8:	2300      	movs	r3, #0
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	60fb      	str	r3, [r7, #12]
 800acfc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad02:	4619      	mov	r1, r3
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff fdf9 	bl	800a8fc <HAL_UARTEx_RxEventCallback>
 800ad0a:	e002      	b.n	800ad12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7f7 ff23 	bl	8002b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	e002      	b.n	800ad1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	e000      	b.n	800ad1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ad1a:	2302      	movs	r3, #2
  }
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3730      	adds	r7, #48	; 0x30
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad28:	b0c0      	sub	sp, #256	; 0x100
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad40:	68d9      	ldr	r1, [r3, #12]
 800ad42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	ea40 0301 	orr.w	r3, r0, r1
 800ad4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad52:	689a      	ldr	r2, [r3, #8]
 800ad54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	431a      	orrs	r2, r3
 800ad64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad68:	69db      	ldr	r3, [r3, #28]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ad70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ad7c:	f021 010c 	bic.w	r1, r1, #12
 800ad80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ad8a:	430b      	orrs	r3, r1
 800ad8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	695b      	ldr	r3, [r3, #20]
 800ad96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ad9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad9e:	6999      	ldr	r1, [r3, #24]
 800ada0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	ea40 0301 	orr.w	r3, r0, r1
 800adaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800adac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	4b8f      	ldr	r3, [pc, #572]	; (800aff0 <UART_SetConfig+0x2cc>)
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d005      	beq.n	800adc4 <UART_SetConfig+0xa0>
 800adb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	4b8d      	ldr	r3, [pc, #564]	; (800aff4 <UART_SetConfig+0x2d0>)
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d104      	bne.n	800adce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800adc4:	f7fd fa18 	bl	80081f8 <HAL_RCC_GetPCLK2Freq>
 800adc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800adcc:	e003      	b.n	800add6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800adce:	f7fd f9ff 	bl	80081d0 <HAL_RCC_GetPCLK1Freq>
 800add2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800add6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adda:	69db      	ldr	r3, [r3, #28]
 800addc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ade0:	f040 810c 	bne.w	800affc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ade4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ade8:	2200      	movs	r2, #0
 800adea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800adee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800adf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800adf6:	4622      	mov	r2, r4
 800adf8:	462b      	mov	r3, r5
 800adfa:	1891      	adds	r1, r2, r2
 800adfc:	65b9      	str	r1, [r7, #88]	; 0x58
 800adfe:	415b      	adcs	r3, r3
 800ae00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ae06:	4621      	mov	r1, r4
 800ae08:	eb12 0801 	adds.w	r8, r2, r1
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	eb43 0901 	adc.w	r9, r3, r1
 800ae12:	f04f 0200 	mov.w	r2, #0
 800ae16:	f04f 0300 	mov.w	r3, #0
 800ae1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ae1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ae22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ae26:	4690      	mov	r8, r2
 800ae28:	4699      	mov	r9, r3
 800ae2a:	4623      	mov	r3, r4
 800ae2c:	eb18 0303 	adds.w	r3, r8, r3
 800ae30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae34:	462b      	mov	r3, r5
 800ae36:	eb49 0303 	adc.w	r3, r9, r3
 800ae3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ae4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae52:	460b      	mov	r3, r1
 800ae54:	18db      	adds	r3, r3, r3
 800ae56:	653b      	str	r3, [r7, #80]	; 0x50
 800ae58:	4613      	mov	r3, r2
 800ae5a:	eb42 0303 	adc.w	r3, r2, r3
 800ae5e:	657b      	str	r3, [r7, #84]	; 0x54
 800ae60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ae64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ae68:	f7f5 ff08 	bl	8000c7c <__aeabi_uldivmod>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	4b61      	ldr	r3, [pc, #388]	; (800aff8 <UART_SetConfig+0x2d4>)
 800ae72:	fba3 2302 	umull	r2, r3, r3, r2
 800ae76:	095b      	lsrs	r3, r3, #5
 800ae78:	011c      	lsls	r4, r3, #4
 800ae7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ae88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ae8c:	4642      	mov	r2, r8
 800ae8e:	464b      	mov	r3, r9
 800ae90:	1891      	adds	r1, r2, r2
 800ae92:	64b9      	str	r1, [r7, #72]	; 0x48
 800ae94:	415b      	adcs	r3, r3
 800ae96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ae9c:	4641      	mov	r1, r8
 800ae9e:	eb12 0a01 	adds.w	sl, r2, r1
 800aea2:	4649      	mov	r1, r9
 800aea4:	eb43 0b01 	adc.w	fp, r3, r1
 800aea8:	f04f 0200 	mov.w	r2, #0
 800aeac:	f04f 0300 	mov.w	r3, #0
 800aeb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aeb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aeb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aebc:	4692      	mov	sl, r2
 800aebe:	469b      	mov	fp, r3
 800aec0:	4643      	mov	r3, r8
 800aec2:	eb1a 0303 	adds.w	r3, sl, r3
 800aec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aeca:	464b      	mov	r3, r9
 800aecc:	eb4b 0303 	adc.w	r3, fp, r3
 800aed0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aee0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aee4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aee8:	460b      	mov	r3, r1
 800aeea:	18db      	adds	r3, r3, r3
 800aeec:	643b      	str	r3, [r7, #64]	; 0x40
 800aeee:	4613      	mov	r3, r2
 800aef0:	eb42 0303 	adc.w	r3, r2, r3
 800aef4:	647b      	str	r3, [r7, #68]	; 0x44
 800aef6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aefa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aefe:	f7f5 febd 	bl	8000c7c <__aeabi_uldivmod>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	4611      	mov	r1, r2
 800af08:	4b3b      	ldr	r3, [pc, #236]	; (800aff8 <UART_SetConfig+0x2d4>)
 800af0a:	fba3 2301 	umull	r2, r3, r3, r1
 800af0e:	095b      	lsrs	r3, r3, #5
 800af10:	2264      	movs	r2, #100	; 0x64
 800af12:	fb02 f303 	mul.w	r3, r2, r3
 800af16:	1acb      	subs	r3, r1, r3
 800af18:	00db      	lsls	r3, r3, #3
 800af1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800af1e:	4b36      	ldr	r3, [pc, #216]	; (800aff8 <UART_SetConfig+0x2d4>)
 800af20:	fba3 2302 	umull	r2, r3, r3, r2
 800af24:	095b      	lsrs	r3, r3, #5
 800af26:	005b      	lsls	r3, r3, #1
 800af28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800af2c:	441c      	add	r4, r3
 800af2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af32:	2200      	movs	r2, #0
 800af34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800af3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800af40:	4642      	mov	r2, r8
 800af42:	464b      	mov	r3, r9
 800af44:	1891      	adds	r1, r2, r2
 800af46:	63b9      	str	r1, [r7, #56]	; 0x38
 800af48:	415b      	adcs	r3, r3
 800af4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800af50:	4641      	mov	r1, r8
 800af52:	1851      	adds	r1, r2, r1
 800af54:	6339      	str	r1, [r7, #48]	; 0x30
 800af56:	4649      	mov	r1, r9
 800af58:	414b      	adcs	r3, r1
 800af5a:	637b      	str	r3, [r7, #52]	; 0x34
 800af5c:	f04f 0200 	mov.w	r2, #0
 800af60:	f04f 0300 	mov.w	r3, #0
 800af64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800af68:	4659      	mov	r1, fp
 800af6a:	00cb      	lsls	r3, r1, #3
 800af6c:	4651      	mov	r1, sl
 800af6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af72:	4651      	mov	r1, sl
 800af74:	00ca      	lsls	r2, r1, #3
 800af76:	4610      	mov	r0, r2
 800af78:	4619      	mov	r1, r3
 800af7a:	4603      	mov	r3, r0
 800af7c:	4642      	mov	r2, r8
 800af7e:	189b      	adds	r3, r3, r2
 800af80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af84:	464b      	mov	r3, r9
 800af86:	460a      	mov	r2, r1
 800af88:	eb42 0303 	adc.w	r3, r2, r3
 800af8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800af9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800afa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800afa4:	460b      	mov	r3, r1
 800afa6:	18db      	adds	r3, r3, r3
 800afa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800afaa:	4613      	mov	r3, r2
 800afac:	eb42 0303 	adc.w	r3, r2, r3
 800afb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800afb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800afba:	f7f5 fe5f 	bl	8000c7c <__aeabi_uldivmod>
 800afbe:	4602      	mov	r2, r0
 800afc0:	460b      	mov	r3, r1
 800afc2:	4b0d      	ldr	r3, [pc, #52]	; (800aff8 <UART_SetConfig+0x2d4>)
 800afc4:	fba3 1302 	umull	r1, r3, r3, r2
 800afc8:	095b      	lsrs	r3, r3, #5
 800afca:	2164      	movs	r1, #100	; 0x64
 800afcc:	fb01 f303 	mul.w	r3, r1, r3
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	00db      	lsls	r3, r3, #3
 800afd4:	3332      	adds	r3, #50	; 0x32
 800afd6:	4a08      	ldr	r2, [pc, #32]	; (800aff8 <UART_SetConfig+0x2d4>)
 800afd8:	fba2 2303 	umull	r2, r3, r2, r3
 800afdc:	095b      	lsrs	r3, r3, #5
 800afde:	f003 0207 	and.w	r2, r3, #7
 800afe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4422      	add	r2, r4
 800afea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800afec:	e105      	b.n	800b1fa <UART_SetConfig+0x4d6>
 800afee:	bf00      	nop
 800aff0:	40011000 	.word	0x40011000
 800aff4:	40011400 	.word	0x40011400
 800aff8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800affc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b000:	2200      	movs	r2, #0
 800b002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b006:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b00a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b00e:	4642      	mov	r2, r8
 800b010:	464b      	mov	r3, r9
 800b012:	1891      	adds	r1, r2, r2
 800b014:	6239      	str	r1, [r7, #32]
 800b016:	415b      	adcs	r3, r3
 800b018:	627b      	str	r3, [r7, #36]	; 0x24
 800b01a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b01e:	4641      	mov	r1, r8
 800b020:	1854      	adds	r4, r2, r1
 800b022:	4649      	mov	r1, r9
 800b024:	eb43 0501 	adc.w	r5, r3, r1
 800b028:	f04f 0200 	mov.w	r2, #0
 800b02c:	f04f 0300 	mov.w	r3, #0
 800b030:	00eb      	lsls	r3, r5, #3
 800b032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b036:	00e2      	lsls	r2, r4, #3
 800b038:	4614      	mov	r4, r2
 800b03a:	461d      	mov	r5, r3
 800b03c:	4643      	mov	r3, r8
 800b03e:	18e3      	adds	r3, r4, r3
 800b040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b044:	464b      	mov	r3, r9
 800b046:	eb45 0303 	adc.w	r3, r5, r3
 800b04a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b04e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b05a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b05e:	f04f 0200 	mov.w	r2, #0
 800b062:	f04f 0300 	mov.w	r3, #0
 800b066:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b06a:	4629      	mov	r1, r5
 800b06c:	008b      	lsls	r3, r1, #2
 800b06e:	4621      	mov	r1, r4
 800b070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b074:	4621      	mov	r1, r4
 800b076:	008a      	lsls	r2, r1, #2
 800b078:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b07c:	f7f5 fdfe 	bl	8000c7c <__aeabi_uldivmod>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	4b60      	ldr	r3, [pc, #384]	; (800b208 <UART_SetConfig+0x4e4>)
 800b086:	fba3 2302 	umull	r2, r3, r3, r2
 800b08a:	095b      	lsrs	r3, r3, #5
 800b08c:	011c      	lsls	r4, r3, #4
 800b08e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b092:	2200      	movs	r2, #0
 800b094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b098:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b09c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b0a0:	4642      	mov	r2, r8
 800b0a2:	464b      	mov	r3, r9
 800b0a4:	1891      	adds	r1, r2, r2
 800b0a6:	61b9      	str	r1, [r7, #24]
 800b0a8:	415b      	adcs	r3, r3
 800b0aa:	61fb      	str	r3, [r7, #28]
 800b0ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0b0:	4641      	mov	r1, r8
 800b0b2:	1851      	adds	r1, r2, r1
 800b0b4:	6139      	str	r1, [r7, #16]
 800b0b6:	4649      	mov	r1, r9
 800b0b8:	414b      	adcs	r3, r1
 800b0ba:	617b      	str	r3, [r7, #20]
 800b0bc:	f04f 0200 	mov.w	r2, #0
 800b0c0:	f04f 0300 	mov.w	r3, #0
 800b0c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b0c8:	4659      	mov	r1, fp
 800b0ca:	00cb      	lsls	r3, r1, #3
 800b0cc:	4651      	mov	r1, sl
 800b0ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0d2:	4651      	mov	r1, sl
 800b0d4:	00ca      	lsls	r2, r1, #3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	4619      	mov	r1, r3
 800b0da:	4603      	mov	r3, r0
 800b0dc:	4642      	mov	r2, r8
 800b0de:	189b      	adds	r3, r3, r2
 800b0e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b0e4:	464b      	mov	r3, r9
 800b0e6:	460a      	mov	r2, r1
 800b0e8:	eb42 0303 	adc.w	r3, r2, r3
 800b0ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b0f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b0fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b0fc:	f04f 0200 	mov.w	r2, #0
 800b100:	f04f 0300 	mov.w	r3, #0
 800b104:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b108:	4649      	mov	r1, r9
 800b10a:	008b      	lsls	r3, r1, #2
 800b10c:	4641      	mov	r1, r8
 800b10e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b112:	4641      	mov	r1, r8
 800b114:	008a      	lsls	r2, r1, #2
 800b116:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b11a:	f7f5 fdaf 	bl	8000c7c <__aeabi_uldivmod>
 800b11e:	4602      	mov	r2, r0
 800b120:	460b      	mov	r3, r1
 800b122:	4b39      	ldr	r3, [pc, #228]	; (800b208 <UART_SetConfig+0x4e4>)
 800b124:	fba3 1302 	umull	r1, r3, r3, r2
 800b128:	095b      	lsrs	r3, r3, #5
 800b12a:	2164      	movs	r1, #100	; 0x64
 800b12c:	fb01 f303 	mul.w	r3, r1, r3
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	011b      	lsls	r3, r3, #4
 800b134:	3332      	adds	r3, #50	; 0x32
 800b136:	4a34      	ldr	r2, [pc, #208]	; (800b208 <UART_SetConfig+0x4e4>)
 800b138:	fba2 2303 	umull	r2, r3, r2, r3
 800b13c:	095b      	lsrs	r3, r3, #5
 800b13e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b142:	441c      	add	r4, r3
 800b144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b148:	2200      	movs	r2, #0
 800b14a:	673b      	str	r3, [r7, #112]	; 0x70
 800b14c:	677a      	str	r2, [r7, #116]	; 0x74
 800b14e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b152:	4642      	mov	r2, r8
 800b154:	464b      	mov	r3, r9
 800b156:	1891      	adds	r1, r2, r2
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	415b      	adcs	r3, r3
 800b15c:	60fb      	str	r3, [r7, #12]
 800b15e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b162:	4641      	mov	r1, r8
 800b164:	1851      	adds	r1, r2, r1
 800b166:	6039      	str	r1, [r7, #0]
 800b168:	4649      	mov	r1, r9
 800b16a:	414b      	adcs	r3, r1
 800b16c:	607b      	str	r3, [r7, #4]
 800b16e:	f04f 0200 	mov.w	r2, #0
 800b172:	f04f 0300 	mov.w	r3, #0
 800b176:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b17a:	4659      	mov	r1, fp
 800b17c:	00cb      	lsls	r3, r1, #3
 800b17e:	4651      	mov	r1, sl
 800b180:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b184:	4651      	mov	r1, sl
 800b186:	00ca      	lsls	r2, r1, #3
 800b188:	4610      	mov	r0, r2
 800b18a:	4619      	mov	r1, r3
 800b18c:	4603      	mov	r3, r0
 800b18e:	4642      	mov	r2, r8
 800b190:	189b      	adds	r3, r3, r2
 800b192:	66bb      	str	r3, [r7, #104]	; 0x68
 800b194:	464b      	mov	r3, r9
 800b196:	460a      	mov	r2, r1
 800b198:	eb42 0303 	adc.w	r3, r2, r3
 800b19c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b19e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	663b      	str	r3, [r7, #96]	; 0x60
 800b1a8:	667a      	str	r2, [r7, #100]	; 0x64
 800b1aa:	f04f 0200 	mov.w	r2, #0
 800b1ae:	f04f 0300 	mov.w	r3, #0
 800b1b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b1b6:	4649      	mov	r1, r9
 800b1b8:	008b      	lsls	r3, r1, #2
 800b1ba:	4641      	mov	r1, r8
 800b1bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1c0:	4641      	mov	r1, r8
 800b1c2:	008a      	lsls	r2, r1, #2
 800b1c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b1c8:	f7f5 fd58 	bl	8000c7c <__aeabi_uldivmod>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	4b0d      	ldr	r3, [pc, #52]	; (800b208 <UART_SetConfig+0x4e4>)
 800b1d2:	fba3 1302 	umull	r1, r3, r3, r2
 800b1d6:	095b      	lsrs	r3, r3, #5
 800b1d8:	2164      	movs	r1, #100	; 0x64
 800b1da:	fb01 f303 	mul.w	r3, r1, r3
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	011b      	lsls	r3, r3, #4
 800b1e2:	3332      	adds	r3, #50	; 0x32
 800b1e4:	4a08      	ldr	r2, [pc, #32]	; (800b208 <UART_SetConfig+0x4e4>)
 800b1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ea:	095b      	lsrs	r3, r3, #5
 800b1ec:	f003 020f 	and.w	r2, r3, #15
 800b1f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4422      	add	r2, r4
 800b1f8:	609a      	str	r2, [r3, #8]
}
 800b1fa:	bf00      	nop
 800b1fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b200:	46bd      	mov	sp, r7
 800b202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b206:	bf00      	nop
 800b208:	51eb851f 	.word	0x51eb851f

0800b20c <asctime>:
 800b20c:	4b0d      	ldr	r3, [pc, #52]	; (800b244 <asctime+0x38>)
 800b20e:	b570      	push	{r4, r5, r6, lr}
 800b210:	681d      	ldr	r5, [r3, #0]
 800b212:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800b214:	4604      	mov	r4, r0
 800b216:	b976      	cbnz	r6, 800b236 <asctime+0x2a>
 800b218:	201a      	movs	r0, #26
 800b21a:	f000 f893 	bl	800b344 <malloc>
 800b21e:	4602      	mov	r2, r0
 800b220:	6428      	str	r0, [r5, #64]	; 0x40
 800b222:	b920      	cbnz	r0, 800b22e <asctime+0x22>
 800b224:	4b08      	ldr	r3, [pc, #32]	; (800b248 <asctime+0x3c>)
 800b226:	4809      	ldr	r0, [pc, #36]	; (800b24c <asctime+0x40>)
 800b228:	2137      	movs	r1, #55	; 0x37
 800b22a:	f000 f837 	bl	800b29c <__assert_func>
 800b22e:	221a      	movs	r2, #26
 800b230:	4631      	mov	r1, r6
 800b232:	f000 f8a5 	bl	800b380 <memset>
 800b236:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800b238:	4620      	mov	r0, r4
 800b23a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b23e:	f000 b807 	b.w	800b250 <asctime_r>
 800b242:	bf00      	nop
 800b244:	200002bc 	.word	0x200002bc
 800b248:	0803c734 	.word	0x0803c734
 800b24c:	0803c74b 	.word	0x0803c74b

0800b250 <asctime_r>:
 800b250:	b510      	push	{r4, lr}
 800b252:	460c      	mov	r4, r1
 800b254:	6941      	ldr	r1, [r0, #20]
 800b256:	6903      	ldr	r3, [r0, #16]
 800b258:	6982      	ldr	r2, [r0, #24]
 800b25a:	b086      	sub	sp, #24
 800b25c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800b260:	9104      	str	r1, [sp, #16]
 800b262:	6801      	ldr	r1, [r0, #0]
 800b264:	9103      	str	r1, [sp, #12]
 800b266:	6841      	ldr	r1, [r0, #4]
 800b268:	9102      	str	r1, [sp, #8]
 800b26a:	6881      	ldr	r1, [r0, #8]
 800b26c:	9101      	str	r1, [sp, #4]
 800b26e:	68c1      	ldr	r1, [r0, #12]
 800b270:	9100      	str	r1, [sp, #0]
 800b272:	4907      	ldr	r1, [pc, #28]	; (800b290 <asctime_r+0x40>)
 800b274:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b278:	440b      	add	r3, r1
 800b27a:	4906      	ldr	r1, [pc, #24]	; (800b294 <asctime_r+0x44>)
 800b27c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b280:	440a      	add	r2, r1
 800b282:	4620      	mov	r0, r4
 800b284:	4904      	ldr	r1, [pc, #16]	; (800b298 <asctime_r+0x48>)
 800b286:	f001 f9a9 	bl	800c5dc <siprintf>
 800b28a:	4620      	mov	r0, r4
 800b28c:	b006      	add	sp, #24
 800b28e:	bd10      	pop	{r4, pc}
 800b290:	0803c7dc 	.word	0x0803c7dc
 800b294:	0803c7c7 	.word	0x0803c7c7
 800b298:	0803c7a7 	.word	0x0803c7a7

0800b29c <__assert_func>:
 800b29c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b29e:	4614      	mov	r4, r2
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	4b09      	ldr	r3, [pc, #36]	; (800b2c8 <__assert_func+0x2c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	68d8      	ldr	r0, [r3, #12]
 800b2aa:	b14c      	cbz	r4, 800b2c0 <__assert_func+0x24>
 800b2ac:	4b07      	ldr	r3, [pc, #28]	; (800b2cc <__assert_func+0x30>)
 800b2ae:	9100      	str	r1, [sp, #0]
 800b2b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2b4:	4906      	ldr	r1, [pc, #24]	; (800b2d0 <__assert_func+0x34>)
 800b2b6:	462b      	mov	r3, r5
 800b2b8:	f000 f80e 	bl	800b2d8 <fiprintf>
 800b2bc:	f002 fafa 	bl	800d8b4 <abort>
 800b2c0:	4b04      	ldr	r3, [pc, #16]	; (800b2d4 <__assert_func+0x38>)
 800b2c2:	461c      	mov	r4, r3
 800b2c4:	e7f3      	b.n	800b2ae <__assert_func+0x12>
 800b2c6:	bf00      	nop
 800b2c8:	200002bc 	.word	0x200002bc
 800b2cc:	0803c800 	.word	0x0803c800
 800b2d0:	0803c80d 	.word	0x0803c80d
 800b2d4:	0803c7c6 	.word	0x0803c7c6

0800b2d8 <fiprintf>:
 800b2d8:	b40e      	push	{r1, r2, r3}
 800b2da:	b503      	push	{r0, r1, lr}
 800b2dc:	4601      	mov	r1, r0
 800b2de:	ab03      	add	r3, sp, #12
 800b2e0:	4805      	ldr	r0, [pc, #20]	; (800b2f8 <fiprintf+0x20>)
 800b2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2e6:	6800      	ldr	r0, [r0, #0]
 800b2e8:	9301      	str	r3, [sp, #4]
 800b2ea:	f000 fbcd 	bl	800ba88 <_vfiprintf_r>
 800b2ee:	b002      	add	sp, #8
 800b2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2f4:	b003      	add	sp, #12
 800b2f6:	4770      	bx	lr
 800b2f8:	200002bc 	.word	0x200002bc

0800b2fc <__libc_init_array>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	4d0d      	ldr	r5, [pc, #52]	; (800b334 <__libc_init_array+0x38>)
 800b300:	4c0d      	ldr	r4, [pc, #52]	; (800b338 <__libc_init_array+0x3c>)
 800b302:	1b64      	subs	r4, r4, r5
 800b304:	10a4      	asrs	r4, r4, #2
 800b306:	2600      	movs	r6, #0
 800b308:	42a6      	cmp	r6, r4
 800b30a:	d109      	bne.n	800b320 <__libc_init_array+0x24>
 800b30c:	4d0b      	ldr	r5, [pc, #44]	; (800b33c <__libc_init_array+0x40>)
 800b30e:	4c0c      	ldr	r4, [pc, #48]	; (800b340 <__libc_init_array+0x44>)
 800b310:	f007 faf0 	bl	80128f4 <_init>
 800b314:	1b64      	subs	r4, r4, r5
 800b316:	10a4      	asrs	r4, r4, #2
 800b318:	2600      	movs	r6, #0
 800b31a:	42a6      	cmp	r6, r4
 800b31c:	d105      	bne.n	800b32a <__libc_init_array+0x2e>
 800b31e:	bd70      	pop	{r4, r5, r6, pc}
 800b320:	f855 3b04 	ldr.w	r3, [r5], #4
 800b324:	4798      	blx	r3
 800b326:	3601      	adds	r6, #1
 800b328:	e7ee      	b.n	800b308 <__libc_init_array+0xc>
 800b32a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b32e:	4798      	blx	r3
 800b330:	3601      	adds	r6, #1
 800b332:	e7f2      	b.n	800b31a <__libc_init_array+0x1e>
 800b334:	0803d170 	.word	0x0803d170
 800b338:	0803d170 	.word	0x0803d170
 800b33c:	0803d170 	.word	0x0803d170
 800b340:	0803d174 	.word	0x0803d174

0800b344 <malloc>:
 800b344:	4b02      	ldr	r3, [pc, #8]	; (800b350 <malloc+0xc>)
 800b346:	4601      	mov	r1, r0
 800b348:	6818      	ldr	r0, [r3, #0]
 800b34a:	f000 baff 	b.w	800b94c <_malloc_r>
 800b34e:	bf00      	nop
 800b350:	200002bc 	.word	0x200002bc

0800b354 <free>:
 800b354:	4b02      	ldr	r3, [pc, #8]	; (800b360 <free+0xc>)
 800b356:	4601      	mov	r1, r0
 800b358:	6818      	ldr	r0, [r3, #0]
 800b35a:	f000 ba8b 	b.w	800b874 <_free_r>
 800b35e:	bf00      	nop
 800b360:	200002bc 	.word	0x200002bc

0800b364 <memcpy>:
 800b364:	440a      	add	r2, r1
 800b366:	4291      	cmp	r1, r2
 800b368:	f100 33ff 	add.w	r3, r0, #4294967295
 800b36c:	d100      	bne.n	800b370 <memcpy+0xc>
 800b36e:	4770      	bx	lr
 800b370:	b510      	push	{r4, lr}
 800b372:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b37a:	4291      	cmp	r1, r2
 800b37c:	d1f9      	bne.n	800b372 <memcpy+0xe>
 800b37e:	bd10      	pop	{r4, pc}

0800b380 <memset>:
 800b380:	4402      	add	r2, r0
 800b382:	4603      	mov	r3, r0
 800b384:	4293      	cmp	r3, r2
 800b386:	d100      	bne.n	800b38a <memset+0xa>
 800b388:	4770      	bx	lr
 800b38a:	f803 1b01 	strb.w	r1, [r3], #1
 800b38e:	e7f9      	b.n	800b384 <memset+0x4>

0800b390 <validate_structure>:
 800b390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b392:	6801      	ldr	r1, [r0, #0]
 800b394:	293b      	cmp	r1, #59	; 0x3b
 800b396:	4604      	mov	r4, r0
 800b398:	d911      	bls.n	800b3be <validate_structure+0x2e>
 800b39a:	223c      	movs	r2, #60	; 0x3c
 800b39c:	4668      	mov	r0, sp
 800b39e:	f002 faa5 	bl	800d8ec <div>
 800b3a2:	9a01      	ldr	r2, [sp, #4]
 800b3a4:	6863      	ldr	r3, [r4, #4]
 800b3a6:	9900      	ldr	r1, [sp, #0]
 800b3a8:	2a00      	cmp	r2, #0
 800b3aa:	440b      	add	r3, r1
 800b3ac:	6063      	str	r3, [r4, #4]
 800b3ae:	bfbb      	ittet	lt
 800b3b0:	323c      	addlt	r2, #60	; 0x3c
 800b3b2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b3b6:	6022      	strge	r2, [r4, #0]
 800b3b8:	6022      	strlt	r2, [r4, #0]
 800b3ba:	bfb8      	it	lt
 800b3bc:	6063      	strlt	r3, [r4, #4]
 800b3be:	6861      	ldr	r1, [r4, #4]
 800b3c0:	293b      	cmp	r1, #59	; 0x3b
 800b3c2:	d911      	bls.n	800b3e8 <validate_structure+0x58>
 800b3c4:	223c      	movs	r2, #60	; 0x3c
 800b3c6:	4668      	mov	r0, sp
 800b3c8:	f002 fa90 	bl	800d8ec <div>
 800b3cc:	9a01      	ldr	r2, [sp, #4]
 800b3ce:	68a3      	ldr	r3, [r4, #8]
 800b3d0:	9900      	ldr	r1, [sp, #0]
 800b3d2:	2a00      	cmp	r2, #0
 800b3d4:	440b      	add	r3, r1
 800b3d6:	60a3      	str	r3, [r4, #8]
 800b3d8:	bfbb      	ittet	lt
 800b3da:	323c      	addlt	r2, #60	; 0x3c
 800b3dc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b3e0:	6062      	strge	r2, [r4, #4]
 800b3e2:	6062      	strlt	r2, [r4, #4]
 800b3e4:	bfb8      	it	lt
 800b3e6:	60a3      	strlt	r3, [r4, #8]
 800b3e8:	68a1      	ldr	r1, [r4, #8]
 800b3ea:	2917      	cmp	r1, #23
 800b3ec:	d911      	bls.n	800b412 <validate_structure+0x82>
 800b3ee:	2218      	movs	r2, #24
 800b3f0:	4668      	mov	r0, sp
 800b3f2:	f002 fa7b 	bl	800d8ec <div>
 800b3f6:	9a01      	ldr	r2, [sp, #4]
 800b3f8:	68e3      	ldr	r3, [r4, #12]
 800b3fa:	9900      	ldr	r1, [sp, #0]
 800b3fc:	2a00      	cmp	r2, #0
 800b3fe:	440b      	add	r3, r1
 800b400:	60e3      	str	r3, [r4, #12]
 800b402:	bfbb      	ittet	lt
 800b404:	3218      	addlt	r2, #24
 800b406:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b40a:	60a2      	strge	r2, [r4, #8]
 800b40c:	60a2      	strlt	r2, [r4, #8]
 800b40e:	bfb8      	it	lt
 800b410:	60e3      	strlt	r3, [r4, #12]
 800b412:	6921      	ldr	r1, [r4, #16]
 800b414:	290b      	cmp	r1, #11
 800b416:	d911      	bls.n	800b43c <validate_structure+0xac>
 800b418:	220c      	movs	r2, #12
 800b41a:	4668      	mov	r0, sp
 800b41c:	f002 fa66 	bl	800d8ec <div>
 800b420:	9a01      	ldr	r2, [sp, #4]
 800b422:	6963      	ldr	r3, [r4, #20]
 800b424:	9900      	ldr	r1, [sp, #0]
 800b426:	2a00      	cmp	r2, #0
 800b428:	440b      	add	r3, r1
 800b42a:	6163      	str	r3, [r4, #20]
 800b42c:	bfbb      	ittet	lt
 800b42e:	320c      	addlt	r2, #12
 800b430:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b434:	6122      	strge	r2, [r4, #16]
 800b436:	6122      	strlt	r2, [r4, #16]
 800b438:	bfb8      	it	lt
 800b43a:	6163      	strlt	r3, [r4, #20]
 800b43c:	6963      	ldr	r3, [r4, #20]
 800b43e:	0798      	lsls	r0, r3, #30
 800b440:	d120      	bne.n	800b484 <validate_structure+0xf4>
 800b442:	2164      	movs	r1, #100	; 0x64
 800b444:	fb93 f2f1 	sdiv	r2, r3, r1
 800b448:	fb01 3212 	mls	r2, r1, r2, r3
 800b44c:	b9e2      	cbnz	r2, 800b488 <validate_structure+0xf8>
 800b44e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800b452:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b456:	fb93 f1f2 	sdiv	r1, r3, r2
 800b45a:	fb02 3311 	mls	r3, r2, r1, r3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	bf14      	ite	ne
 800b462:	231c      	movne	r3, #28
 800b464:	231d      	moveq	r3, #29
 800b466:	68e2      	ldr	r2, [r4, #12]
 800b468:	2a00      	cmp	r2, #0
 800b46a:	dc0f      	bgt.n	800b48c <validate_structure+0xfc>
 800b46c:	4f33      	ldr	r7, [pc, #204]	; (800b53c <validate_structure+0x1ac>)
 800b46e:	260b      	movs	r6, #11
 800b470:	2064      	movs	r0, #100	; 0x64
 800b472:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800b476:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b47a:	f1bc 0f00 	cmp.w	ip, #0
 800b47e:	dd31      	ble.n	800b4e4 <validate_structure+0x154>
 800b480:	b003      	add	sp, #12
 800b482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b484:	231c      	movs	r3, #28
 800b486:	e7ee      	b.n	800b466 <validate_structure+0xd6>
 800b488:	231d      	movs	r3, #29
 800b48a:	e7ec      	b.n	800b466 <validate_structure+0xd6>
 800b48c:	4e2b      	ldr	r6, [pc, #172]	; (800b53c <validate_structure+0x1ac>)
 800b48e:	2700      	movs	r7, #0
 800b490:	2064      	movs	r0, #100	; 0x64
 800b492:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800b496:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800b49a:	2a01      	cmp	r2, #1
 800b49c:	bf14      	ite	ne
 800b49e:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800b4a2:	469c      	moveq	ip, r3
 800b4a4:	4561      	cmp	r1, ip
 800b4a6:	ddeb      	ble.n	800b480 <validate_structure+0xf0>
 800b4a8:	3201      	adds	r2, #1
 800b4aa:	eba1 010c 	sub.w	r1, r1, ip
 800b4ae:	2a0c      	cmp	r2, #12
 800b4b0:	60e1      	str	r1, [r4, #12]
 800b4b2:	6122      	str	r2, [r4, #16]
 800b4b4:	d1ef      	bne.n	800b496 <validate_structure+0x106>
 800b4b6:	6963      	ldr	r3, [r4, #20]
 800b4b8:	1c5a      	adds	r2, r3, #1
 800b4ba:	0791      	lsls	r1, r2, #30
 800b4bc:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800b4c0:	d137      	bne.n	800b532 <validate_structure+0x1a2>
 800b4c2:	fb92 f1f0 	sdiv	r1, r2, r0
 800b4c6:	fb00 2211 	mls	r2, r0, r1, r2
 800b4ca:	2a00      	cmp	r2, #0
 800b4cc:	d133      	bne.n	800b536 <validate_structure+0x1a6>
 800b4ce:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800b4d2:	fb93 f2f5 	sdiv	r2, r3, r5
 800b4d6:	fb05 3312 	mls	r3, r5, r2, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	bf14      	ite	ne
 800b4de:	231c      	movne	r3, #28
 800b4e0:	231d      	moveq	r3, #29
 800b4e2:	e7d8      	b.n	800b496 <validate_structure+0x106>
 800b4e4:	6921      	ldr	r1, [r4, #16]
 800b4e6:	3901      	subs	r1, #1
 800b4e8:	6121      	str	r1, [r4, #16]
 800b4ea:	3101      	adds	r1, #1
 800b4ec:	d114      	bne.n	800b518 <validate_structure+0x188>
 800b4ee:	6963      	ldr	r3, [r4, #20]
 800b4f0:	1e5a      	subs	r2, r3, #1
 800b4f2:	0791      	lsls	r1, r2, #30
 800b4f4:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800b4f8:	d117      	bne.n	800b52a <validate_structure+0x19a>
 800b4fa:	fb92 f1f0 	sdiv	r1, r2, r0
 800b4fe:	fb00 2211 	mls	r2, r0, r1, r2
 800b502:	b9a2      	cbnz	r2, 800b52e <validate_structure+0x19e>
 800b504:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800b508:	fb93 f2f5 	sdiv	r2, r3, r5
 800b50c:	fb05 3312 	mls	r3, r5, r2, r3
 800b510:	2b00      	cmp	r3, #0
 800b512:	bf14      	ite	ne
 800b514:	231c      	movne	r3, #28
 800b516:	231d      	moveq	r3, #29
 800b518:	6922      	ldr	r2, [r4, #16]
 800b51a:	2a01      	cmp	r2, #1
 800b51c:	bf14      	ite	ne
 800b51e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800b522:	461a      	moveq	r2, r3
 800b524:	4462      	add	r2, ip
 800b526:	60e2      	str	r2, [r4, #12]
 800b528:	e7a5      	b.n	800b476 <validate_structure+0xe6>
 800b52a:	231c      	movs	r3, #28
 800b52c:	e7f4      	b.n	800b518 <validate_structure+0x188>
 800b52e:	231d      	movs	r3, #29
 800b530:	e7f2      	b.n	800b518 <validate_structure+0x188>
 800b532:	231c      	movs	r3, #28
 800b534:	e7af      	b.n	800b496 <validate_structure+0x106>
 800b536:	231d      	movs	r3, #29
 800b538:	e7ad      	b.n	800b496 <validate_structure+0x106>
 800b53a:	bf00      	nop
 800b53c:	0803c840 	.word	0x0803c840

0800b540 <mktime>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	b085      	sub	sp, #20
 800b546:	4607      	mov	r7, r0
 800b548:	f003 fa5c 	bl	800ea04 <__gettzinfo>
 800b54c:	4681      	mov	r9, r0
 800b54e:	4638      	mov	r0, r7
 800b550:	f7ff ff1e 	bl	800b390 <validate_structure>
 800b554:	e9d7 4000 	ldrd	r4, r0, [r7]
 800b558:	233c      	movs	r3, #60	; 0x3c
 800b55a:	fb03 4400 	mla	r4, r3, r0, r4
 800b55e:	68b8      	ldr	r0, [r7, #8]
 800b560:	4abc      	ldr	r2, [pc, #752]	; (800b854 <mktime+0x314>)
 800b562:	697e      	ldr	r6, [r7, #20]
 800b564:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b568:	fb03 4400 	mla	r4, r3, r0, r4
 800b56c:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800b570:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b574:	3d01      	subs	r5, #1
 800b576:	2b01      	cmp	r3, #1
 800b578:	4415      	add	r5, r2
 800b57a:	dd11      	ble.n	800b5a0 <mktime+0x60>
 800b57c:	07b1      	lsls	r1, r6, #30
 800b57e:	d10f      	bne.n	800b5a0 <mktime+0x60>
 800b580:	2264      	movs	r2, #100	; 0x64
 800b582:	fb96 f3f2 	sdiv	r3, r6, r2
 800b586:	fb02 6313 	mls	r3, r2, r3, r6
 800b58a:	b943      	cbnz	r3, 800b59e <mktime+0x5e>
 800b58c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800b590:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b594:	fb93 f1f2 	sdiv	r1, r3, r2
 800b598:	fb02 3311 	mls	r3, r2, r1, r3
 800b59c:	b903      	cbnz	r3, 800b5a0 <mktime+0x60>
 800b59e:	3501      	adds	r5, #1
 800b5a0:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800b5a4:	3310      	adds	r3, #16
 800b5a6:	f644 6220 	movw	r2, #20000	; 0x4e20
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	61fd      	str	r5, [r7, #28]
 800b5ae:	f200 815d 	bhi.w	800b86c <mktime+0x32c>
 800b5b2:	2e46      	cmp	r6, #70	; 0x46
 800b5b4:	dd71      	ble.n	800b69a <mktime+0x15a>
 800b5b6:	2346      	movs	r3, #70	; 0x46
 800b5b8:	f240 1c6d 	movw	ip, #365	; 0x16d
 800b5bc:	2164      	movs	r1, #100	; 0x64
 800b5be:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b5c2:	079a      	lsls	r2, r3, #30
 800b5c4:	d163      	bne.n	800b68e <mktime+0x14e>
 800b5c6:	fb93 f2f1 	sdiv	r2, r3, r1
 800b5ca:	fb01 3212 	mls	r2, r1, r2, r3
 800b5ce:	2a00      	cmp	r2, #0
 800b5d0:	d160      	bne.n	800b694 <mktime+0x154>
 800b5d2:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800b5d6:	fb92 fef0 	sdiv	lr, r2, r0
 800b5da:	fb00 221e 	mls	r2, r0, lr, r2
 800b5de:	2a00      	cmp	r2, #0
 800b5e0:	bf14      	ite	ne
 800b5e2:	4662      	movne	r2, ip
 800b5e4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	429e      	cmp	r6, r3
 800b5ec:	4415      	add	r5, r2
 800b5ee:	d1e8      	bne.n	800b5c2 <mktime+0x82>
 800b5f0:	4b99      	ldr	r3, [pc, #612]	; (800b858 <mktime+0x318>)
 800b5f2:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800b5f6:	fbc5 4803 	smlal	r4, r8, r5, r3
 800b5fa:	f001 fef7 	bl	800d3ec <__tz_lock>
 800b5fe:	f001 ff01 	bl	800d404 <_tzset_unlocked>
 800b602:	4b96      	ldr	r3, [pc, #600]	; (800b85c <mktime+0x31c>)
 800b604:	f8d3 b000 	ldr.w	fp, [r3]
 800b608:	f1bb 0f00 	cmp.w	fp, #0
 800b60c:	d039      	beq.n	800b682 <mktime+0x142>
 800b60e:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800b612:	6978      	ldr	r0, [r7, #20]
 800b614:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b618:	f1bb 0f01 	cmp.w	fp, #1
 800b61c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800b620:	46da      	mov	sl, fp
 800b622:	bfa8      	it	ge
 800b624:	f04f 0a01 	movge.w	sl, #1
 800b628:	4283      	cmp	r3, r0
 800b62a:	d178      	bne.n	800b71e <mktime+0x1de>
 800b62c:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800b630:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800b634:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800b638:	1a5b      	subs	r3, r3, r1
 800b63a:	9302      	str	r3, [sp, #8]
 800b63c:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800b640:	9303      	str	r3, [sp, #12]
 800b642:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800b646:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800b64a:	9301      	str	r3, [sp, #4]
 800b64c:	ebb3 0c02 	subs.w	ip, r3, r2
 800b650:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800b654:	4564      	cmp	r4, ip
 800b656:	eb78 0300 	sbcs.w	r3, r8, r0
 800b65a:	da66      	bge.n	800b72a <mktime+0x1ea>
 800b65c:	f8d9 3000 	ldr.w	r3, [r9]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d06f      	beq.n	800b744 <mktime+0x204>
 800b664:	9b02      	ldr	r3, [sp, #8]
 800b666:	429c      	cmp	r4, r3
 800b668:	9b03      	ldr	r3, [sp, #12]
 800b66a:	eb78 0303 	sbcs.w	r3, r8, r3
 800b66e:	db03      	blt.n	800b678 <mktime+0x138>
 800b670:	4564      	cmp	r4, ip
 800b672:	eb78 0300 	sbcs.w	r3, r8, r0
 800b676:	db6b      	blt.n	800b750 <mktime+0x210>
 800b678:	f1bb 0f00 	cmp.w	fp, #0
 800b67c:	f04f 0b00 	mov.w	fp, #0
 800b680:	da6b      	bge.n	800b75a <mktime+0x21a>
 800b682:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800b686:	190c      	adds	r4, r1, r4
 800b688:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800b68c:	e0a9      	b.n	800b7e2 <mktime+0x2a2>
 800b68e:	f240 126d 	movw	r2, #365	; 0x16d
 800b692:	e7a9      	b.n	800b5e8 <mktime+0xa8>
 800b694:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800b698:	e7a6      	b.n	800b5e8 <mktime+0xa8>
 800b69a:	d0a9      	beq.n	800b5f0 <mktime+0xb0>
 800b69c:	2345      	movs	r3, #69	; 0x45
 800b69e:	f240 1c6d 	movw	ip, #365	; 0x16d
 800b6a2:	2164      	movs	r1, #100	; 0x64
 800b6a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b6a8:	e012      	b.n	800b6d0 <mktime+0x190>
 800b6aa:	bb62      	cbnz	r2, 800b706 <mktime+0x1c6>
 800b6ac:	fb93 f2f1 	sdiv	r2, r3, r1
 800b6b0:	fb01 3212 	mls	r2, r1, r2, r3
 800b6b4:	bb52      	cbnz	r2, 800b70c <mktime+0x1cc>
 800b6b6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800b6ba:	fb92 fef0 	sdiv	lr, r2, r0
 800b6be:	fb00 221e 	mls	r2, r0, lr, r2
 800b6c2:	2a00      	cmp	r2, #0
 800b6c4:	bf14      	ite	ne
 800b6c6:	4662      	movne	r2, ip
 800b6c8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800b6cc:	1aad      	subs	r5, r5, r2
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	429e      	cmp	r6, r3
 800b6d2:	f003 0203 	and.w	r2, r3, #3
 800b6d6:	dbe8      	blt.n	800b6aa <mktime+0x16a>
 800b6d8:	b9da      	cbnz	r2, 800b712 <mktime+0x1d2>
 800b6da:	2264      	movs	r2, #100	; 0x64
 800b6dc:	fb96 f3f2 	sdiv	r3, r6, r2
 800b6e0:	fb02 6313 	mls	r3, r2, r3, r6
 800b6e4:	b9c3      	cbnz	r3, 800b718 <mktime+0x1d8>
 800b6e6:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800b6ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b6ee:	fb93 f1f2 	sdiv	r1, r3, r2
 800b6f2:	fb02 3311 	mls	r3, r2, r1, r3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f240 136d 	movw	r3, #365	; 0x16d
 800b6fc:	bf08      	it	eq
 800b6fe:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800b702:	1aed      	subs	r5, r5, r3
 800b704:	e774      	b.n	800b5f0 <mktime+0xb0>
 800b706:	f240 126d 	movw	r2, #365	; 0x16d
 800b70a:	e7df      	b.n	800b6cc <mktime+0x18c>
 800b70c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800b710:	e7dc      	b.n	800b6cc <mktime+0x18c>
 800b712:	f240 136d 	movw	r3, #365	; 0x16d
 800b716:	e7f4      	b.n	800b702 <mktime+0x1c2>
 800b718:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800b71c:	e7f1      	b.n	800b702 <mktime+0x1c2>
 800b71e:	f001 fdbb 	bl	800d298 <__tzcalc_limits>
 800b722:	2800      	cmp	r0, #0
 800b724:	d182      	bne.n	800b62c <mktime+0xec>
 800b726:	46d3      	mov	fp, sl
 800b728:	e050      	b.n	800b7cc <mktime+0x28c>
 800b72a:	9b01      	ldr	r3, [sp, #4]
 800b72c:	1a5b      	subs	r3, r3, r1
 800b72e:	9301      	str	r3, [sp, #4]
 800b730:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800b734:	eb6e 0e03 	sbc.w	lr, lr, r3
 800b738:	9b01      	ldr	r3, [sp, #4]
 800b73a:	429c      	cmp	r4, r3
 800b73c:	eb78 030e 	sbcs.w	r3, r8, lr
 800b740:	dbf1      	blt.n	800b726 <mktime+0x1e6>
 800b742:	e78b      	b.n	800b65c <mktime+0x11c>
 800b744:	9b02      	ldr	r3, [sp, #8]
 800b746:	429c      	cmp	r4, r3
 800b748:	9b03      	ldr	r3, [sp, #12]
 800b74a:	eb78 0303 	sbcs.w	r3, r8, r3
 800b74e:	db8f      	blt.n	800b670 <mktime+0x130>
 800b750:	f1bb 0f00 	cmp.w	fp, #0
 800b754:	db3e      	blt.n	800b7d4 <mktime+0x294>
 800b756:	f04f 0b01 	mov.w	fp, #1
 800b75a:	ea8a 0a0b 	eor.w	sl, sl, fp
 800b75e:	f1ba 0f01 	cmp.w	sl, #1
 800b762:	d133      	bne.n	800b7cc <mktime+0x28c>
 800b764:	f1bb 0f00 	cmp.w	fp, #0
 800b768:	d04e      	beq.n	800b808 <mktime+0x2c8>
 800b76a:	1a52      	subs	r2, r2, r1
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800b772:	4413      	add	r3, r2
 800b774:	1914      	adds	r4, r2, r4
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	4638      	mov	r0, r7
 800b77a:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800b77e:	f7ff fe07 	bl	800b390 <validate_structure>
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	ebb2 020a 	subs.w	r2, r2, sl
 800b788:	d020      	beq.n	800b7cc <mktime+0x28c>
 800b78a:	2a01      	cmp	r2, #1
 800b78c:	dc3e      	bgt.n	800b80c <mktime+0x2cc>
 800b78e:	1c90      	adds	r0, r2, #2
 800b790:	bfd8      	it	le
 800b792:	2201      	movle	r2, #1
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	18d3      	adds	r3, r2, r3
 800b798:	4415      	add	r5, r2
 800b79a:	d540      	bpl.n	800b81e <mktime+0x2de>
 800b79c:	1e73      	subs	r3, r6, #1
 800b79e:	0799      	lsls	r1, r3, #30
 800b7a0:	d137      	bne.n	800b812 <mktime+0x2d2>
 800b7a2:	2264      	movs	r2, #100	; 0x64
 800b7a4:	fb93 f1f2 	sdiv	r1, r3, r2
 800b7a8:	fb02 3311 	mls	r3, r2, r1, r3
 800b7ac:	bba3      	cbnz	r3, 800b818 <mktime+0x2d8>
 800b7ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b7b2:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800b7b6:	fb96 f2f3 	sdiv	r2, r6, r3
 800b7ba:	fb03 6612 	mls	r6, r3, r2, r6
 800b7be:	2e00      	cmp	r6, #0
 800b7c0:	f240 136d 	movw	r3, #365	; 0x16d
 800b7c4:	bf18      	it	ne
 800b7c6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800b7ca:	61fb      	str	r3, [r7, #28]
 800b7cc:	f1bb 0f01 	cmp.w	fp, #1
 800b7d0:	f47f af57 	bne.w	800b682 <mktime+0x142>
 800b7d4:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800b7d8:	190c      	adds	r4, r1, r4
 800b7da:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800b7de:	f04f 0b01 	mov.w	fp, #1
 800b7e2:	f001 fe09 	bl	800d3f8 <__tz_unlock>
 800b7e6:	3504      	adds	r5, #4
 800b7e8:	2307      	movs	r3, #7
 800b7ea:	fb95 f3f3 	sdiv	r3, r5, r3
 800b7ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b7f2:	1aed      	subs	r5, r5, r3
 800b7f4:	bf48      	it	mi
 800b7f6:	3507      	addmi	r5, #7
 800b7f8:	f8c7 b020 	str.w	fp, [r7, #32]
 800b7fc:	61bd      	str	r5, [r7, #24]
 800b7fe:	4620      	mov	r0, r4
 800b800:	4641      	mov	r1, r8
 800b802:	b005      	add	sp, #20
 800b804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b808:	1a8a      	subs	r2, r1, r2
 800b80a:	e7af      	b.n	800b76c <mktime+0x22c>
 800b80c:	f04f 32ff 	mov.w	r2, #4294967295
 800b810:	e7c0      	b.n	800b794 <mktime+0x254>
 800b812:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800b816:	e7d8      	b.n	800b7ca <mktime+0x28a>
 800b818:	f240 136d 	movw	r3, #365	; 0x16d
 800b81c:	e7d5      	b.n	800b7ca <mktime+0x28a>
 800b81e:	07b2      	lsls	r2, r6, #30
 800b820:	d11e      	bne.n	800b860 <mktime+0x320>
 800b822:	2164      	movs	r1, #100	; 0x64
 800b824:	fb96 f2f1 	sdiv	r2, r6, r1
 800b828:	fb01 6212 	mls	r2, r1, r2, r6
 800b82c:	b9da      	cbnz	r2, 800b866 <mktime+0x326>
 800b82e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b832:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800b836:	fb96 f1f2 	sdiv	r1, r6, r2
 800b83a:	fb02 6611 	mls	r6, r2, r1, r6
 800b83e:	2e00      	cmp	r6, #0
 800b840:	f240 126d 	movw	r2, #365	; 0x16d
 800b844:	bf08      	it	eq
 800b846:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800b84a:	4293      	cmp	r3, r2
 800b84c:	bfa8      	it	ge
 800b84e:	1a9b      	subge	r3, r3, r2
 800b850:	e7bb      	b.n	800b7ca <mktime+0x28a>
 800b852:	bf00      	nop
 800b854:	0803c870 	.word	0x0803c870
 800b858:	00015180 	.word	0x00015180
 800b85c:	200037d0 	.word	0x200037d0
 800b860:	f240 126d 	movw	r2, #365	; 0x16d
 800b864:	e7f1      	b.n	800b84a <mktime+0x30a>
 800b866:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800b86a:	e7ee      	b.n	800b84a <mktime+0x30a>
 800b86c:	f04f 34ff 	mov.w	r4, #4294967295
 800b870:	46a0      	mov	r8, r4
 800b872:	e7c4      	b.n	800b7fe <mktime+0x2be>

0800b874 <_free_r>:
 800b874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b876:	2900      	cmp	r1, #0
 800b878:	d044      	beq.n	800b904 <_free_r+0x90>
 800b87a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b87e:	9001      	str	r0, [sp, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	f1a1 0404 	sub.w	r4, r1, #4
 800b886:	bfb8      	it	lt
 800b888:	18e4      	addlt	r4, r4, r3
 800b88a:	f003 f95f 	bl	800eb4c <__malloc_lock>
 800b88e:	4a1e      	ldr	r2, [pc, #120]	; (800b908 <_free_r+0x94>)
 800b890:	9801      	ldr	r0, [sp, #4]
 800b892:	6813      	ldr	r3, [r2, #0]
 800b894:	b933      	cbnz	r3, 800b8a4 <_free_r+0x30>
 800b896:	6063      	str	r3, [r4, #4]
 800b898:	6014      	str	r4, [r2, #0]
 800b89a:	b003      	add	sp, #12
 800b89c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8a0:	f003 b95a 	b.w	800eb58 <__malloc_unlock>
 800b8a4:	42a3      	cmp	r3, r4
 800b8a6:	d908      	bls.n	800b8ba <_free_r+0x46>
 800b8a8:	6825      	ldr	r5, [r4, #0]
 800b8aa:	1961      	adds	r1, r4, r5
 800b8ac:	428b      	cmp	r3, r1
 800b8ae:	bf01      	itttt	eq
 800b8b0:	6819      	ldreq	r1, [r3, #0]
 800b8b2:	685b      	ldreq	r3, [r3, #4]
 800b8b4:	1949      	addeq	r1, r1, r5
 800b8b6:	6021      	streq	r1, [r4, #0]
 800b8b8:	e7ed      	b.n	800b896 <_free_r+0x22>
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	b10b      	cbz	r3, 800b8c4 <_free_r+0x50>
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	d9fa      	bls.n	800b8ba <_free_r+0x46>
 800b8c4:	6811      	ldr	r1, [r2, #0]
 800b8c6:	1855      	adds	r5, r2, r1
 800b8c8:	42a5      	cmp	r5, r4
 800b8ca:	d10b      	bne.n	800b8e4 <_free_r+0x70>
 800b8cc:	6824      	ldr	r4, [r4, #0]
 800b8ce:	4421      	add	r1, r4
 800b8d0:	1854      	adds	r4, r2, r1
 800b8d2:	42a3      	cmp	r3, r4
 800b8d4:	6011      	str	r1, [r2, #0]
 800b8d6:	d1e0      	bne.n	800b89a <_free_r+0x26>
 800b8d8:	681c      	ldr	r4, [r3, #0]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	6053      	str	r3, [r2, #4]
 800b8de:	4421      	add	r1, r4
 800b8e0:	6011      	str	r1, [r2, #0]
 800b8e2:	e7da      	b.n	800b89a <_free_r+0x26>
 800b8e4:	d902      	bls.n	800b8ec <_free_r+0x78>
 800b8e6:	230c      	movs	r3, #12
 800b8e8:	6003      	str	r3, [r0, #0]
 800b8ea:	e7d6      	b.n	800b89a <_free_r+0x26>
 800b8ec:	6825      	ldr	r5, [r4, #0]
 800b8ee:	1961      	adds	r1, r4, r5
 800b8f0:	428b      	cmp	r3, r1
 800b8f2:	bf04      	itt	eq
 800b8f4:	6819      	ldreq	r1, [r3, #0]
 800b8f6:	685b      	ldreq	r3, [r3, #4]
 800b8f8:	6063      	str	r3, [r4, #4]
 800b8fa:	bf04      	itt	eq
 800b8fc:	1949      	addeq	r1, r1, r5
 800b8fe:	6021      	streq	r1, [r4, #0]
 800b900:	6054      	str	r4, [r2, #4]
 800b902:	e7ca      	b.n	800b89a <_free_r+0x26>
 800b904:	b003      	add	sp, #12
 800b906:	bd30      	pop	{r4, r5, pc}
 800b908:	200037ac 	.word	0x200037ac

0800b90c <sbrk_aligned>:
 800b90c:	b570      	push	{r4, r5, r6, lr}
 800b90e:	4e0e      	ldr	r6, [pc, #56]	; (800b948 <sbrk_aligned+0x3c>)
 800b910:	460c      	mov	r4, r1
 800b912:	6831      	ldr	r1, [r6, #0]
 800b914:	4605      	mov	r5, r0
 800b916:	b911      	cbnz	r1, 800b91e <sbrk_aligned+0x12>
 800b918:	f000 fe50 	bl	800c5bc <_sbrk_r>
 800b91c:	6030      	str	r0, [r6, #0]
 800b91e:	4621      	mov	r1, r4
 800b920:	4628      	mov	r0, r5
 800b922:	f000 fe4b 	bl	800c5bc <_sbrk_r>
 800b926:	1c43      	adds	r3, r0, #1
 800b928:	d00a      	beq.n	800b940 <sbrk_aligned+0x34>
 800b92a:	1cc4      	adds	r4, r0, #3
 800b92c:	f024 0403 	bic.w	r4, r4, #3
 800b930:	42a0      	cmp	r0, r4
 800b932:	d007      	beq.n	800b944 <sbrk_aligned+0x38>
 800b934:	1a21      	subs	r1, r4, r0
 800b936:	4628      	mov	r0, r5
 800b938:	f000 fe40 	bl	800c5bc <_sbrk_r>
 800b93c:	3001      	adds	r0, #1
 800b93e:	d101      	bne.n	800b944 <sbrk_aligned+0x38>
 800b940:	f04f 34ff 	mov.w	r4, #4294967295
 800b944:	4620      	mov	r0, r4
 800b946:	bd70      	pop	{r4, r5, r6, pc}
 800b948:	200037b0 	.word	0x200037b0

0800b94c <_malloc_r>:
 800b94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b950:	1ccd      	adds	r5, r1, #3
 800b952:	f025 0503 	bic.w	r5, r5, #3
 800b956:	3508      	adds	r5, #8
 800b958:	2d0c      	cmp	r5, #12
 800b95a:	bf38      	it	cc
 800b95c:	250c      	movcc	r5, #12
 800b95e:	2d00      	cmp	r5, #0
 800b960:	4607      	mov	r7, r0
 800b962:	db01      	blt.n	800b968 <_malloc_r+0x1c>
 800b964:	42a9      	cmp	r1, r5
 800b966:	d905      	bls.n	800b974 <_malloc_r+0x28>
 800b968:	230c      	movs	r3, #12
 800b96a:	603b      	str	r3, [r7, #0]
 800b96c:	2600      	movs	r6, #0
 800b96e:	4630      	mov	r0, r6
 800b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b974:	4e2e      	ldr	r6, [pc, #184]	; (800ba30 <_malloc_r+0xe4>)
 800b976:	f003 f8e9 	bl	800eb4c <__malloc_lock>
 800b97a:	6833      	ldr	r3, [r6, #0]
 800b97c:	461c      	mov	r4, r3
 800b97e:	bb34      	cbnz	r4, 800b9ce <_malloc_r+0x82>
 800b980:	4629      	mov	r1, r5
 800b982:	4638      	mov	r0, r7
 800b984:	f7ff ffc2 	bl	800b90c <sbrk_aligned>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	4604      	mov	r4, r0
 800b98c:	d14d      	bne.n	800ba2a <_malloc_r+0xde>
 800b98e:	6834      	ldr	r4, [r6, #0]
 800b990:	4626      	mov	r6, r4
 800b992:	2e00      	cmp	r6, #0
 800b994:	d140      	bne.n	800ba18 <_malloc_r+0xcc>
 800b996:	6823      	ldr	r3, [r4, #0]
 800b998:	4631      	mov	r1, r6
 800b99a:	4638      	mov	r0, r7
 800b99c:	eb04 0803 	add.w	r8, r4, r3
 800b9a0:	f000 fe0c 	bl	800c5bc <_sbrk_r>
 800b9a4:	4580      	cmp	r8, r0
 800b9a6:	d13a      	bne.n	800ba1e <_malloc_r+0xd2>
 800b9a8:	6821      	ldr	r1, [r4, #0]
 800b9aa:	3503      	adds	r5, #3
 800b9ac:	1a6d      	subs	r5, r5, r1
 800b9ae:	f025 0503 	bic.w	r5, r5, #3
 800b9b2:	3508      	adds	r5, #8
 800b9b4:	2d0c      	cmp	r5, #12
 800b9b6:	bf38      	it	cc
 800b9b8:	250c      	movcc	r5, #12
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f7ff ffa5 	bl	800b90c <sbrk_aligned>
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	d02b      	beq.n	800ba1e <_malloc_r+0xd2>
 800b9c6:	6823      	ldr	r3, [r4, #0]
 800b9c8:	442b      	add	r3, r5
 800b9ca:	6023      	str	r3, [r4, #0]
 800b9cc:	e00e      	b.n	800b9ec <_malloc_r+0xa0>
 800b9ce:	6822      	ldr	r2, [r4, #0]
 800b9d0:	1b52      	subs	r2, r2, r5
 800b9d2:	d41e      	bmi.n	800ba12 <_malloc_r+0xc6>
 800b9d4:	2a0b      	cmp	r2, #11
 800b9d6:	d916      	bls.n	800ba06 <_malloc_r+0xba>
 800b9d8:	1961      	adds	r1, r4, r5
 800b9da:	42a3      	cmp	r3, r4
 800b9dc:	6025      	str	r5, [r4, #0]
 800b9de:	bf18      	it	ne
 800b9e0:	6059      	strne	r1, [r3, #4]
 800b9e2:	6863      	ldr	r3, [r4, #4]
 800b9e4:	bf08      	it	eq
 800b9e6:	6031      	streq	r1, [r6, #0]
 800b9e8:	5162      	str	r2, [r4, r5]
 800b9ea:	604b      	str	r3, [r1, #4]
 800b9ec:	4638      	mov	r0, r7
 800b9ee:	f104 060b 	add.w	r6, r4, #11
 800b9f2:	f003 f8b1 	bl	800eb58 <__malloc_unlock>
 800b9f6:	f026 0607 	bic.w	r6, r6, #7
 800b9fa:	1d23      	adds	r3, r4, #4
 800b9fc:	1af2      	subs	r2, r6, r3
 800b9fe:	d0b6      	beq.n	800b96e <_malloc_r+0x22>
 800ba00:	1b9b      	subs	r3, r3, r6
 800ba02:	50a3      	str	r3, [r4, r2]
 800ba04:	e7b3      	b.n	800b96e <_malloc_r+0x22>
 800ba06:	6862      	ldr	r2, [r4, #4]
 800ba08:	42a3      	cmp	r3, r4
 800ba0a:	bf0c      	ite	eq
 800ba0c:	6032      	streq	r2, [r6, #0]
 800ba0e:	605a      	strne	r2, [r3, #4]
 800ba10:	e7ec      	b.n	800b9ec <_malloc_r+0xa0>
 800ba12:	4623      	mov	r3, r4
 800ba14:	6864      	ldr	r4, [r4, #4]
 800ba16:	e7b2      	b.n	800b97e <_malloc_r+0x32>
 800ba18:	4634      	mov	r4, r6
 800ba1a:	6876      	ldr	r6, [r6, #4]
 800ba1c:	e7b9      	b.n	800b992 <_malloc_r+0x46>
 800ba1e:	230c      	movs	r3, #12
 800ba20:	603b      	str	r3, [r7, #0]
 800ba22:	4638      	mov	r0, r7
 800ba24:	f003 f898 	bl	800eb58 <__malloc_unlock>
 800ba28:	e7a1      	b.n	800b96e <_malloc_r+0x22>
 800ba2a:	6025      	str	r5, [r4, #0]
 800ba2c:	e7de      	b.n	800b9ec <_malloc_r+0xa0>
 800ba2e:	bf00      	nop
 800ba30:	200037ac 	.word	0x200037ac

0800ba34 <__sfputc_r>:
 800ba34:	6893      	ldr	r3, [r2, #8]
 800ba36:	3b01      	subs	r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	b410      	push	{r4}
 800ba3c:	6093      	str	r3, [r2, #8]
 800ba3e:	da08      	bge.n	800ba52 <__sfputc_r+0x1e>
 800ba40:	6994      	ldr	r4, [r2, #24]
 800ba42:	42a3      	cmp	r3, r4
 800ba44:	db01      	blt.n	800ba4a <__sfputc_r+0x16>
 800ba46:	290a      	cmp	r1, #10
 800ba48:	d103      	bne.n	800ba52 <__sfputc_r+0x1e>
 800ba4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba4e:	f001 be5f 	b.w	800d710 <__swbuf_r>
 800ba52:	6813      	ldr	r3, [r2, #0]
 800ba54:	1c58      	adds	r0, r3, #1
 800ba56:	6010      	str	r0, [r2, #0]
 800ba58:	7019      	strb	r1, [r3, #0]
 800ba5a:	4608      	mov	r0, r1
 800ba5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <__sfputs_r>:
 800ba62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba64:	4606      	mov	r6, r0
 800ba66:	460f      	mov	r7, r1
 800ba68:	4614      	mov	r4, r2
 800ba6a:	18d5      	adds	r5, r2, r3
 800ba6c:	42ac      	cmp	r4, r5
 800ba6e:	d101      	bne.n	800ba74 <__sfputs_r+0x12>
 800ba70:	2000      	movs	r0, #0
 800ba72:	e007      	b.n	800ba84 <__sfputs_r+0x22>
 800ba74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba78:	463a      	mov	r2, r7
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	f7ff ffda 	bl	800ba34 <__sfputc_r>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d1f3      	bne.n	800ba6c <__sfputs_r+0xa>
 800ba84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba88 <_vfiprintf_r>:
 800ba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8c:	460d      	mov	r5, r1
 800ba8e:	b09d      	sub	sp, #116	; 0x74
 800ba90:	4614      	mov	r4, r2
 800ba92:	4698      	mov	r8, r3
 800ba94:	4606      	mov	r6, r0
 800ba96:	b118      	cbz	r0, 800baa0 <_vfiprintf_r+0x18>
 800ba98:	6983      	ldr	r3, [r0, #24]
 800ba9a:	b90b      	cbnz	r3, 800baa0 <_vfiprintf_r+0x18>
 800ba9c:	f002 fed0 	bl	800e840 <__sinit>
 800baa0:	4b89      	ldr	r3, [pc, #548]	; (800bcc8 <_vfiprintf_r+0x240>)
 800baa2:	429d      	cmp	r5, r3
 800baa4:	d11b      	bne.n	800bade <_vfiprintf_r+0x56>
 800baa6:	6875      	ldr	r5, [r6, #4]
 800baa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baaa:	07d9      	lsls	r1, r3, #31
 800baac:	d405      	bmi.n	800baba <_vfiprintf_r+0x32>
 800baae:	89ab      	ldrh	r3, [r5, #12]
 800bab0:	059a      	lsls	r2, r3, #22
 800bab2:	d402      	bmi.n	800baba <_vfiprintf_r+0x32>
 800bab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bab6:	f002 ffb3 	bl	800ea20 <__retarget_lock_acquire_recursive>
 800baba:	89ab      	ldrh	r3, [r5, #12]
 800babc:	071b      	lsls	r3, r3, #28
 800babe:	d501      	bpl.n	800bac4 <_vfiprintf_r+0x3c>
 800bac0:	692b      	ldr	r3, [r5, #16]
 800bac2:	b9eb      	cbnz	r3, 800bb00 <_vfiprintf_r+0x78>
 800bac4:	4629      	mov	r1, r5
 800bac6:	4630      	mov	r0, r6
 800bac8:	f001 fe86 	bl	800d7d8 <__swsetup_r>
 800bacc:	b1c0      	cbz	r0, 800bb00 <_vfiprintf_r+0x78>
 800bace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bad0:	07dc      	lsls	r4, r3, #31
 800bad2:	d50e      	bpl.n	800baf2 <_vfiprintf_r+0x6a>
 800bad4:	f04f 30ff 	mov.w	r0, #4294967295
 800bad8:	b01d      	add	sp, #116	; 0x74
 800bada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bade:	4b7b      	ldr	r3, [pc, #492]	; (800bccc <_vfiprintf_r+0x244>)
 800bae0:	429d      	cmp	r5, r3
 800bae2:	d101      	bne.n	800bae8 <_vfiprintf_r+0x60>
 800bae4:	68b5      	ldr	r5, [r6, #8]
 800bae6:	e7df      	b.n	800baa8 <_vfiprintf_r+0x20>
 800bae8:	4b79      	ldr	r3, [pc, #484]	; (800bcd0 <_vfiprintf_r+0x248>)
 800baea:	429d      	cmp	r5, r3
 800baec:	bf08      	it	eq
 800baee:	68f5      	ldreq	r5, [r6, #12]
 800baf0:	e7da      	b.n	800baa8 <_vfiprintf_r+0x20>
 800baf2:	89ab      	ldrh	r3, [r5, #12]
 800baf4:	0598      	lsls	r0, r3, #22
 800baf6:	d4ed      	bmi.n	800bad4 <_vfiprintf_r+0x4c>
 800baf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bafa:	f002 ff93 	bl	800ea24 <__retarget_lock_release_recursive>
 800bafe:	e7e9      	b.n	800bad4 <_vfiprintf_r+0x4c>
 800bb00:	2300      	movs	r3, #0
 800bb02:	9309      	str	r3, [sp, #36]	; 0x24
 800bb04:	2320      	movs	r3, #32
 800bb06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb0e:	2330      	movs	r3, #48	; 0x30
 800bb10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bcd4 <_vfiprintf_r+0x24c>
 800bb14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb18:	f04f 0901 	mov.w	r9, #1
 800bb1c:	4623      	mov	r3, r4
 800bb1e:	469a      	mov	sl, r3
 800bb20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb24:	b10a      	cbz	r2, 800bb2a <_vfiprintf_r+0xa2>
 800bb26:	2a25      	cmp	r2, #37	; 0x25
 800bb28:	d1f9      	bne.n	800bb1e <_vfiprintf_r+0x96>
 800bb2a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb2e:	d00b      	beq.n	800bb48 <_vfiprintf_r+0xc0>
 800bb30:	465b      	mov	r3, fp
 800bb32:	4622      	mov	r2, r4
 800bb34:	4629      	mov	r1, r5
 800bb36:	4630      	mov	r0, r6
 800bb38:	f7ff ff93 	bl	800ba62 <__sfputs_r>
 800bb3c:	3001      	adds	r0, #1
 800bb3e:	f000 80aa 	beq.w	800bc96 <_vfiprintf_r+0x20e>
 800bb42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb44:	445a      	add	r2, fp
 800bb46:	9209      	str	r2, [sp, #36]	; 0x24
 800bb48:	f89a 3000 	ldrb.w	r3, [sl]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f000 80a2 	beq.w	800bc96 <_vfiprintf_r+0x20e>
 800bb52:	2300      	movs	r3, #0
 800bb54:	f04f 32ff 	mov.w	r2, #4294967295
 800bb58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb5c:	f10a 0a01 	add.w	sl, sl, #1
 800bb60:	9304      	str	r3, [sp, #16]
 800bb62:	9307      	str	r3, [sp, #28]
 800bb64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb68:	931a      	str	r3, [sp, #104]	; 0x68
 800bb6a:	4654      	mov	r4, sl
 800bb6c:	2205      	movs	r2, #5
 800bb6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb72:	4858      	ldr	r0, [pc, #352]	; (800bcd4 <_vfiprintf_r+0x24c>)
 800bb74:	f7f4 fb44 	bl	8000200 <memchr>
 800bb78:	9a04      	ldr	r2, [sp, #16]
 800bb7a:	b9d8      	cbnz	r0, 800bbb4 <_vfiprintf_r+0x12c>
 800bb7c:	06d1      	lsls	r1, r2, #27
 800bb7e:	bf44      	itt	mi
 800bb80:	2320      	movmi	r3, #32
 800bb82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb86:	0713      	lsls	r3, r2, #28
 800bb88:	bf44      	itt	mi
 800bb8a:	232b      	movmi	r3, #43	; 0x2b
 800bb8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb90:	f89a 3000 	ldrb.w	r3, [sl]
 800bb94:	2b2a      	cmp	r3, #42	; 0x2a
 800bb96:	d015      	beq.n	800bbc4 <_vfiprintf_r+0x13c>
 800bb98:	9a07      	ldr	r2, [sp, #28]
 800bb9a:	4654      	mov	r4, sl
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	f04f 0c0a 	mov.w	ip, #10
 800bba2:	4621      	mov	r1, r4
 800bba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bba8:	3b30      	subs	r3, #48	; 0x30
 800bbaa:	2b09      	cmp	r3, #9
 800bbac:	d94e      	bls.n	800bc4c <_vfiprintf_r+0x1c4>
 800bbae:	b1b0      	cbz	r0, 800bbde <_vfiprintf_r+0x156>
 800bbb0:	9207      	str	r2, [sp, #28]
 800bbb2:	e014      	b.n	800bbde <_vfiprintf_r+0x156>
 800bbb4:	eba0 0308 	sub.w	r3, r0, r8
 800bbb8:	fa09 f303 	lsl.w	r3, r9, r3
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	9304      	str	r3, [sp, #16]
 800bbc0:	46a2      	mov	sl, r4
 800bbc2:	e7d2      	b.n	800bb6a <_vfiprintf_r+0xe2>
 800bbc4:	9b03      	ldr	r3, [sp, #12]
 800bbc6:	1d19      	adds	r1, r3, #4
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	9103      	str	r1, [sp, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	bfbb      	ittet	lt
 800bbd0:	425b      	neglt	r3, r3
 800bbd2:	f042 0202 	orrlt.w	r2, r2, #2
 800bbd6:	9307      	strge	r3, [sp, #28]
 800bbd8:	9307      	strlt	r3, [sp, #28]
 800bbda:	bfb8      	it	lt
 800bbdc:	9204      	strlt	r2, [sp, #16]
 800bbde:	7823      	ldrb	r3, [r4, #0]
 800bbe0:	2b2e      	cmp	r3, #46	; 0x2e
 800bbe2:	d10c      	bne.n	800bbfe <_vfiprintf_r+0x176>
 800bbe4:	7863      	ldrb	r3, [r4, #1]
 800bbe6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbe8:	d135      	bne.n	800bc56 <_vfiprintf_r+0x1ce>
 800bbea:	9b03      	ldr	r3, [sp, #12]
 800bbec:	1d1a      	adds	r2, r3, #4
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	9203      	str	r2, [sp, #12]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	bfb8      	it	lt
 800bbf6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbfa:	3402      	adds	r4, #2
 800bbfc:	9305      	str	r3, [sp, #20]
 800bbfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bce4 <_vfiprintf_r+0x25c>
 800bc02:	7821      	ldrb	r1, [r4, #0]
 800bc04:	2203      	movs	r2, #3
 800bc06:	4650      	mov	r0, sl
 800bc08:	f7f4 fafa 	bl	8000200 <memchr>
 800bc0c:	b140      	cbz	r0, 800bc20 <_vfiprintf_r+0x198>
 800bc0e:	2340      	movs	r3, #64	; 0x40
 800bc10:	eba0 000a 	sub.w	r0, r0, sl
 800bc14:	fa03 f000 	lsl.w	r0, r3, r0
 800bc18:	9b04      	ldr	r3, [sp, #16]
 800bc1a:	4303      	orrs	r3, r0
 800bc1c:	3401      	adds	r4, #1
 800bc1e:	9304      	str	r3, [sp, #16]
 800bc20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc24:	482c      	ldr	r0, [pc, #176]	; (800bcd8 <_vfiprintf_r+0x250>)
 800bc26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc2a:	2206      	movs	r2, #6
 800bc2c:	f7f4 fae8 	bl	8000200 <memchr>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d03f      	beq.n	800bcb4 <_vfiprintf_r+0x22c>
 800bc34:	4b29      	ldr	r3, [pc, #164]	; (800bcdc <_vfiprintf_r+0x254>)
 800bc36:	bb1b      	cbnz	r3, 800bc80 <_vfiprintf_r+0x1f8>
 800bc38:	9b03      	ldr	r3, [sp, #12]
 800bc3a:	3307      	adds	r3, #7
 800bc3c:	f023 0307 	bic.w	r3, r3, #7
 800bc40:	3308      	adds	r3, #8
 800bc42:	9303      	str	r3, [sp, #12]
 800bc44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc46:	443b      	add	r3, r7
 800bc48:	9309      	str	r3, [sp, #36]	; 0x24
 800bc4a:	e767      	b.n	800bb1c <_vfiprintf_r+0x94>
 800bc4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc50:	460c      	mov	r4, r1
 800bc52:	2001      	movs	r0, #1
 800bc54:	e7a5      	b.n	800bba2 <_vfiprintf_r+0x11a>
 800bc56:	2300      	movs	r3, #0
 800bc58:	3401      	adds	r4, #1
 800bc5a:	9305      	str	r3, [sp, #20]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	f04f 0c0a 	mov.w	ip, #10
 800bc62:	4620      	mov	r0, r4
 800bc64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc68:	3a30      	subs	r2, #48	; 0x30
 800bc6a:	2a09      	cmp	r2, #9
 800bc6c:	d903      	bls.n	800bc76 <_vfiprintf_r+0x1ee>
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d0c5      	beq.n	800bbfe <_vfiprintf_r+0x176>
 800bc72:	9105      	str	r1, [sp, #20]
 800bc74:	e7c3      	b.n	800bbfe <_vfiprintf_r+0x176>
 800bc76:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e7f0      	b.n	800bc62 <_vfiprintf_r+0x1da>
 800bc80:	ab03      	add	r3, sp, #12
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	462a      	mov	r2, r5
 800bc86:	4b16      	ldr	r3, [pc, #88]	; (800bce0 <_vfiprintf_r+0x258>)
 800bc88:	a904      	add	r1, sp, #16
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	f000 f8cc 	bl	800be28 <_printf_float>
 800bc90:	4607      	mov	r7, r0
 800bc92:	1c78      	adds	r0, r7, #1
 800bc94:	d1d6      	bne.n	800bc44 <_vfiprintf_r+0x1bc>
 800bc96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc98:	07d9      	lsls	r1, r3, #31
 800bc9a:	d405      	bmi.n	800bca8 <_vfiprintf_r+0x220>
 800bc9c:	89ab      	ldrh	r3, [r5, #12]
 800bc9e:	059a      	lsls	r2, r3, #22
 800bca0:	d402      	bmi.n	800bca8 <_vfiprintf_r+0x220>
 800bca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bca4:	f002 febe 	bl	800ea24 <__retarget_lock_release_recursive>
 800bca8:	89ab      	ldrh	r3, [r5, #12]
 800bcaa:	065b      	lsls	r3, r3, #25
 800bcac:	f53f af12 	bmi.w	800bad4 <_vfiprintf_r+0x4c>
 800bcb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcb2:	e711      	b.n	800bad8 <_vfiprintf_r+0x50>
 800bcb4:	ab03      	add	r3, sp, #12
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	462a      	mov	r2, r5
 800bcba:	4b09      	ldr	r3, [pc, #36]	; (800bce0 <_vfiprintf_r+0x258>)
 800bcbc:	a904      	add	r1, sp, #16
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f000 fb56 	bl	800c370 <_printf_i>
 800bcc4:	e7e4      	b.n	800bc90 <_vfiprintf_r+0x208>
 800bcc6:	bf00      	nop
 800bcc8:	0803cd3c 	.word	0x0803cd3c
 800bccc:	0803cd5c 	.word	0x0803cd5c
 800bcd0:	0803cd1c 	.word	0x0803cd1c
 800bcd4:	0803c8a0 	.word	0x0803c8a0
 800bcd8:	0803c8aa 	.word	0x0803c8aa
 800bcdc:	0800be29 	.word	0x0800be29
 800bce0:	0800ba63 	.word	0x0800ba63
 800bce4:	0803c8a6 	.word	0x0803c8a6

0800bce8 <__cvt>:
 800bce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcec:	ec55 4b10 	vmov	r4, r5, d0
 800bcf0:	2d00      	cmp	r5, #0
 800bcf2:	460e      	mov	r6, r1
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	bfbb      	ittet	lt
 800bcfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bcfe:	461d      	movlt	r5, r3
 800bd00:	2300      	movge	r3, #0
 800bd02:	232d      	movlt	r3, #45	; 0x2d
 800bd04:	700b      	strb	r3, [r1, #0]
 800bd06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd0c:	4691      	mov	r9, r2
 800bd0e:	f023 0820 	bic.w	r8, r3, #32
 800bd12:	bfbc      	itt	lt
 800bd14:	4622      	movlt	r2, r4
 800bd16:	4614      	movlt	r4, r2
 800bd18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd1c:	d005      	beq.n	800bd2a <__cvt+0x42>
 800bd1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd22:	d100      	bne.n	800bd26 <__cvt+0x3e>
 800bd24:	3601      	adds	r6, #1
 800bd26:	2102      	movs	r1, #2
 800bd28:	e000      	b.n	800bd2c <__cvt+0x44>
 800bd2a:	2103      	movs	r1, #3
 800bd2c:	ab03      	add	r3, sp, #12
 800bd2e:	9301      	str	r3, [sp, #4]
 800bd30:	ab02      	add	r3, sp, #8
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	ec45 4b10 	vmov	d0, r4, r5
 800bd38:	4653      	mov	r3, sl
 800bd3a:	4632      	mov	r2, r6
 800bd3c:	f001 fe78 	bl	800da30 <_dtoa_r>
 800bd40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd44:	4607      	mov	r7, r0
 800bd46:	d102      	bne.n	800bd4e <__cvt+0x66>
 800bd48:	f019 0f01 	tst.w	r9, #1
 800bd4c:	d022      	beq.n	800bd94 <__cvt+0xac>
 800bd4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd52:	eb07 0906 	add.w	r9, r7, r6
 800bd56:	d110      	bne.n	800bd7a <__cvt+0x92>
 800bd58:	783b      	ldrb	r3, [r7, #0]
 800bd5a:	2b30      	cmp	r3, #48	; 0x30
 800bd5c:	d10a      	bne.n	800bd74 <__cvt+0x8c>
 800bd5e:	2200      	movs	r2, #0
 800bd60:	2300      	movs	r3, #0
 800bd62:	4620      	mov	r0, r4
 800bd64:	4629      	mov	r1, r5
 800bd66:	f7f4 fec9 	bl	8000afc <__aeabi_dcmpeq>
 800bd6a:	b918      	cbnz	r0, 800bd74 <__cvt+0x8c>
 800bd6c:	f1c6 0601 	rsb	r6, r6, #1
 800bd70:	f8ca 6000 	str.w	r6, [sl]
 800bd74:	f8da 3000 	ldr.w	r3, [sl]
 800bd78:	4499      	add	r9, r3
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4620      	mov	r0, r4
 800bd80:	4629      	mov	r1, r5
 800bd82:	f7f4 febb 	bl	8000afc <__aeabi_dcmpeq>
 800bd86:	b108      	cbz	r0, 800bd8c <__cvt+0xa4>
 800bd88:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd8c:	2230      	movs	r2, #48	; 0x30
 800bd8e:	9b03      	ldr	r3, [sp, #12]
 800bd90:	454b      	cmp	r3, r9
 800bd92:	d307      	bcc.n	800bda4 <__cvt+0xbc>
 800bd94:	9b03      	ldr	r3, [sp, #12]
 800bd96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd98:	1bdb      	subs	r3, r3, r7
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	6013      	str	r3, [r2, #0]
 800bd9e:	b004      	add	sp, #16
 800bda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda4:	1c59      	adds	r1, r3, #1
 800bda6:	9103      	str	r1, [sp, #12]
 800bda8:	701a      	strb	r2, [r3, #0]
 800bdaa:	e7f0      	b.n	800bd8e <__cvt+0xa6>

0800bdac <__exponent>:
 800bdac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2900      	cmp	r1, #0
 800bdb2:	bfb8      	it	lt
 800bdb4:	4249      	neglt	r1, r1
 800bdb6:	f803 2b02 	strb.w	r2, [r3], #2
 800bdba:	bfb4      	ite	lt
 800bdbc:	222d      	movlt	r2, #45	; 0x2d
 800bdbe:	222b      	movge	r2, #43	; 0x2b
 800bdc0:	2909      	cmp	r1, #9
 800bdc2:	7042      	strb	r2, [r0, #1]
 800bdc4:	dd2a      	ble.n	800be1c <__exponent+0x70>
 800bdc6:	f10d 0407 	add.w	r4, sp, #7
 800bdca:	46a4      	mov	ip, r4
 800bdcc:	270a      	movs	r7, #10
 800bdce:	46a6      	mov	lr, r4
 800bdd0:	460a      	mov	r2, r1
 800bdd2:	fb91 f6f7 	sdiv	r6, r1, r7
 800bdd6:	fb07 1516 	mls	r5, r7, r6, r1
 800bdda:	3530      	adds	r5, #48	; 0x30
 800bddc:	2a63      	cmp	r2, #99	; 0x63
 800bdde:	f104 34ff 	add.w	r4, r4, #4294967295
 800bde2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bde6:	4631      	mov	r1, r6
 800bde8:	dcf1      	bgt.n	800bdce <__exponent+0x22>
 800bdea:	3130      	adds	r1, #48	; 0x30
 800bdec:	f1ae 0502 	sub.w	r5, lr, #2
 800bdf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bdf4:	1c44      	adds	r4, r0, #1
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	4561      	cmp	r1, ip
 800bdfa:	d30a      	bcc.n	800be12 <__exponent+0x66>
 800bdfc:	f10d 0209 	add.w	r2, sp, #9
 800be00:	eba2 020e 	sub.w	r2, r2, lr
 800be04:	4565      	cmp	r5, ip
 800be06:	bf88      	it	hi
 800be08:	2200      	movhi	r2, #0
 800be0a:	4413      	add	r3, r2
 800be0c:	1a18      	subs	r0, r3, r0
 800be0e:	b003      	add	sp, #12
 800be10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be16:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be1a:	e7ed      	b.n	800bdf8 <__exponent+0x4c>
 800be1c:	2330      	movs	r3, #48	; 0x30
 800be1e:	3130      	adds	r1, #48	; 0x30
 800be20:	7083      	strb	r3, [r0, #2]
 800be22:	70c1      	strb	r1, [r0, #3]
 800be24:	1d03      	adds	r3, r0, #4
 800be26:	e7f1      	b.n	800be0c <__exponent+0x60>

0800be28 <_printf_float>:
 800be28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2c:	ed2d 8b02 	vpush	{d8}
 800be30:	b08d      	sub	sp, #52	; 0x34
 800be32:	460c      	mov	r4, r1
 800be34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be38:	4616      	mov	r6, r2
 800be3a:	461f      	mov	r7, r3
 800be3c:	4605      	mov	r5, r0
 800be3e:	f002 fde9 	bl	800ea14 <_localeconv_r>
 800be42:	f8d0 a000 	ldr.w	sl, [r0]
 800be46:	4650      	mov	r0, sl
 800be48:	f7f4 f9d2 	bl	80001f0 <strlen>
 800be4c:	2300      	movs	r3, #0
 800be4e:	930a      	str	r3, [sp, #40]	; 0x28
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	f8d8 3000 	ldr.w	r3, [r8]
 800be58:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be5c:	3307      	adds	r3, #7
 800be5e:	f023 0307 	bic.w	r3, r3, #7
 800be62:	f103 0208 	add.w	r2, r3, #8
 800be66:	f8c8 2000 	str.w	r2, [r8]
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be7a:	9307      	str	r3, [sp, #28]
 800be7c:	f8cd 8018 	str.w	r8, [sp, #24]
 800be80:	ee08 0a10 	vmov	s16, r0
 800be84:	4b9f      	ldr	r3, [pc, #636]	; (800c104 <_printf_float+0x2dc>)
 800be86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be8a:	f04f 32ff 	mov.w	r2, #4294967295
 800be8e:	f7f4 fe67 	bl	8000b60 <__aeabi_dcmpun>
 800be92:	bb88      	cbnz	r0, 800bef8 <_printf_float+0xd0>
 800be94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be98:	4b9a      	ldr	r3, [pc, #616]	; (800c104 <_printf_float+0x2dc>)
 800be9a:	f04f 32ff 	mov.w	r2, #4294967295
 800be9e:	f7f4 fe41 	bl	8000b24 <__aeabi_dcmple>
 800bea2:	bb48      	cbnz	r0, 800bef8 <_printf_float+0xd0>
 800bea4:	2200      	movs	r2, #0
 800bea6:	2300      	movs	r3, #0
 800bea8:	4640      	mov	r0, r8
 800beaa:	4649      	mov	r1, r9
 800beac:	f7f4 fe30 	bl	8000b10 <__aeabi_dcmplt>
 800beb0:	b110      	cbz	r0, 800beb8 <_printf_float+0x90>
 800beb2:	232d      	movs	r3, #45	; 0x2d
 800beb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beb8:	4b93      	ldr	r3, [pc, #588]	; (800c108 <_printf_float+0x2e0>)
 800beba:	4894      	ldr	r0, [pc, #592]	; (800c10c <_printf_float+0x2e4>)
 800bebc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bec0:	bf94      	ite	ls
 800bec2:	4698      	movls	r8, r3
 800bec4:	4680      	movhi	r8, r0
 800bec6:	2303      	movs	r3, #3
 800bec8:	6123      	str	r3, [r4, #16]
 800beca:	9b05      	ldr	r3, [sp, #20]
 800becc:	f023 0204 	bic.w	r2, r3, #4
 800bed0:	6022      	str	r2, [r4, #0]
 800bed2:	f04f 0900 	mov.w	r9, #0
 800bed6:	9700      	str	r7, [sp, #0]
 800bed8:	4633      	mov	r3, r6
 800beda:	aa0b      	add	r2, sp, #44	; 0x2c
 800bedc:	4621      	mov	r1, r4
 800bede:	4628      	mov	r0, r5
 800bee0:	f000 f9d8 	bl	800c294 <_printf_common>
 800bee4:	3001      	adds	r0, #1
 800bee6:	f040 8090 	bne.w	800c00a <_printf_float+0x1e2>
 800beea:	f04f 30ff 	mov.w	r0, #4294967295
 800beee:	b00d      	add	sp, #52	; 0x34
 800bef0:	ecbd 8b02 	vpop	{d8}
 800bef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef8:	4642      	mov	r2, r8
 800befa:	464b      	mov	r3, r9
 800befc:	4640      	mov	r0, r8
 800befe:	4649      	mov	r1, r9
 800bf00:	f7f4 fe2e 	bl	8000b60 <__aeabi_dcmpun>
 800bf04:	b140      	cbz	r0, 800bf18 <_printf_float+0xf0>
 800bf06:	464b      	mov	r3, r9
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bfbc      	itt	lt
 800bf0c:	232d      	movlt	r3, #45	; 0x2d
 800bf0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf12:	487f      	ldr	r0, [pc, #508]	; (800c110 <_printf_float+0x2e8>)
 800bf14:	4b7f      	ldr	r3, [pc, #508]	; (800c114 <_printf_float+0x2ec>)
 800bf16:	e7d1      	b.n	800bebc <_printf_float+0x94>
 800bf18:	6863      	ldr	r3, [r4, #4]
 800bf1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bf1e:	9206      	str	r2, [sp, #24]
 800bf20:	1c5a      	adds	r2, r3, #1
 800bf22:	d13f      	bne.n	800bfa4 <_printf_float+0x17c>
 800bf24:	2306      	movs	r3, #6
 800bf26:	6063      	str	r3, [r4, #4]
 800bf28:	9b05      	ldr	r3, [sp, #20]
 800bf2a:	6861      	ldr	r1, [r4, #4]
 800bf2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf30:	2300      	movs	r3, #0
 800bf32:	9303      	str	r3, [sp, #12]
 800bf34:	ab0a      	add	r3, sp, #40	; 0x28
 800bf36:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf3a:	ab09      	add	r3, sp, #36	; 0x24
 800bf3c:	ec49 8b10 	vmov	d0, r8, r9
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	6022      	str	r2, [r4, #0]
 800bf44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf48:	4628      	mov	r0, r5
 800bf4a:	f7ff fecd 	bl	800bce8 <__cvt>
 800bf4e:	9b06      	ldr	r3, [sp, #24]
 800bf50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf52:	2b47      	cmp	r3, #71	; 0x47
 800bf54:	4680      	mov	r8, r0
 800bf56:	d108      	bne.n	800bf6a <_printf_float+0x142>
 800bf58:	1cc8      	adds	r0, r1, #3
 800bf5a:	db02      	blt.n	800bf62 <_printf_float+0x13a>
 800bf5c:	6863      	ldr	r3, [r4, #4]
 800bf5e:	4299      	cmp	r1, r3
 800bf60:	dd41      	ble.n	800bfe6 <_printf_float+0x1be>
 800bf62:	f1ab 0b02 	sub.w	fp, fp, #2
 800bf66:	fa5f fb8b 	uxtb.w	fp, fp
 800bf6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf6e:	d820      	bhi.n	800bfb2 <_printf_float+0x18a>
 800bf70:	3901      	subs	r1, #1
 800bf72:	465a      	mov	r2, fp
 800bf74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf78:	9109      	str	r1, [sp, #36]	; 0x24
 800bf7a:	f7ff ff17 	bl	800bdac <__exponent>
 800bf7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf80:	1813      	adds	r3, r2, r0
 800bf82:	2a01      	cmp	r2, #1
 800bf84:	4681      	mov	r9, r0
 800bf86:	6123      	str	r3, [r4, #16]
 800bf88:	dc02      	bgt.n	800bf90 <_printf_float+0x168>
 800bf8a:	6822      	ldr	r2, [r4, #0]
 800bf8c:	07d2      	lsls	r2, r2, #31
 800bf8e:	d501      	bpl.n	800bf94 <_printf_float+0x16c>
 800bf90:	3301      	adds	r3, #1
 800bf92:	6123      	str	r3, [r4, #16]
 800bf94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d09c      	beq.n	800bed6 <_printf_float+0xae>
 800bf9c:	232d      	movs	r3, #45	; 0x2d
 800bf9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfa2:	e798      	b.n	800bed6 <_printf_float+0xae>
 800bfa4:	9a06      	ldr	r2, [sp, #24]
 800bfa6:	2a47      	cmp	r2, #71	; 0x47
 800bfa8:	d1be      	bne.n	800bf28 <_printf_float+0x100>
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d1bc      	bne.n	800bf28 <_printf_float+0x100>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e7b9      	b.n	800bf26 <_printf_float+0xfe>
 800bfb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bfb6:	d118      	bne.n	800bfea <_printf_float+0x1c2>
 800bfb8:	2900      	cmp	r1, #0
 800bfba:	6863      	ldr	r3, [r4, #4]
 800bfbc:	dd0b      	ble.n	800bfd6 <_printf_float+0x1ae>
 800bfbe:	6121      	str	r1, [r4, #16]
 800bfc0:	b913      	cbnz	r3, 800bfc8 <_printf_float+0x1a0>
 800bfc2:	6822      	ldr	r2, [r4, #0]
 800bfc4:	07d0      	lsls	r0, r2, #31
 800bfc6:	d502      	bpl.n	800bfce <_printf_float+0x1a6>
 800bfc8:	3301      	adds	r3, #1
 800bfca:	440b      	add	r3, r1
 800bfcc:	6123      	str	r3, [r4, #16]
 800bfce:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfd0:	f04f 0900 	mov.w	r9, #0
 800bfd4:	e7de      	b.n	800bf94 <_printf_float+0x16c>
 800bfd6:	b913      	cbnz	r3, 800bfde <_printf_float+0x1b6>
 800bfd8:	6822      	ldr	r2, [r4, #0]
 800bfda:	07d2      	lsls	r2, r2, #31
 800bfdc:	d501      	bpl.n	800bfe2 <_printf_float+0x1ba>
 800bfde:	3302      	adds	r3, #2
 800bfe0:	e7f4      	b.n	800bfcc <_printf_float+0x1a4>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e7f2      	b.n	800bfcc <_printf_float+0x1a4>
 800bfe6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bfea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfec:	4299      	cmp	r1, r3
 800bfee:	db05      	blt.n	800bffc <_printf_float+0x1d4>
 800bff0:	6823      	ldr	r3, [r4, #0]
 800bff2:	6121      	str	r1, [r4, #16]
 800bff4:	07d8      	lsls	r0, r3, #31
 800bff6:	d5ea      	bpl.n	800bfce <_printf_float+0x1a6>
 800bff8:	1c4b      	adds	r3, r1, #1
 800bffa:	e7e7      	b.n	800bfcc <_printf_float+0x1a4>
 800bffc:	2900      	cmp	r1, #0
 800bffe:	bfd4      	ite	le
 800c000:	f1c1 0202 	rsble	r2, r1, #2
 800c004:	2201      	movgt	r2, #1
 800c006:	4413      	add	r3, r2
 800c008:	e7e0      	b.n	800bfcc <_printf_float+0x1a4>
 800c00a:	6823      	ldr	r3, [r4, #0]
 800c00c:	055a      	lsls	r2, r3, #21
 800c00e:	d407      	bmi.n	800c020 <_printf_float+0x1f8>
 800c010:	6923      	ldr	r3, [r4, #16]
 800c012:	4642      	mov	r2, r8
 800c014:	4631      	mov	r1, r6
 800c016:	4628      	mov	r0, r5
 800c018:	47b8      	blx	r7
 800c01a:	3001      	adds	r0, #1
 800c01c:	d12c      	bne.n	800c078 <_printf_float+0x250>
 800c01e:	e764      	b.n	800beea <_printf_float+0xc2>
 800c020:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c024:	f240 80e0 	bls.w	800c1e8 <_printf_float+0x3c0>
 800c028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c02c:	2200      	movs	r2, #0
 800c02e:	2300      	movs	r3, #0
 800c030:	f7f4 fd64 	bl	8000afc <__aeabi_dcmpeq>
 800c034:	2800      	cmp	r0, #0
 800c036:	d034      	beq.n	800c0a2 <_printf_float+0x27a>
 800c038:	4a37      	ldr	r2, [pc, #220]	; (800c118 <_printf_float+0x2f0>)
 800c03a:	2301      	movs	r3, #1
 800c03c:	4631      	mov	r1, r6
 800c03e:	4628      	mov	r0, r5
 800c040:	47b8      	blx	r7
 800c042:	3001      	adds	r0, #1
 800c044:	f43f af51 	beq.w	800beea <_printf_float+0xc2>
 800c048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c04c:	429a      	cmp	r2, r3
 800c04e:	db02      	blt.n	800c056 <_printf_float+0x22e>
 800c050:	6823      	ldr	r3, [r4, #0]
 800c052:	07d8      	lsls	r0, r3, #31
 800c054:	d510      	bpl.n	800c078 <_printf_float+0x250>
 800c056:	ee18 3a10 	vmov	r3, s16
 800c05a:	4652      	mov	r2, sl
 800c05c:	4631      	mov	r1, r6
 800c05e:	4628      	mov	r0, r5
 800c060:	47b8      	blx	r7
 800c062:	3001      	adds	r0, #1
 800c064:	f43f af41 	beq.w	800beea <_printf_float+0xc2>
 800c068:	f04f 0800 	mov.w	r8, #0
 800c06c:	f104 091a 	add.w	r9, r4, #26
 800c070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c072:	3b01      	subs	r3, #1
 800c074:	4543      	cmp	r3, r8
 800c076:	dc09      	bgt.n	800c08c <_printf_float+0x264>
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	079b      	lsls	r3, r3, #30
 800c07c:	f100 8105 	bmi.w	800c28a <_printf_float+0x462>
 800c080:	68e0      	ldr	r0, [r4, #12]
 800c082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c084:	4298      	cmp	r0, r3
 800c086:	bfb8      	it	lt
 800c088:	4618      	movlt	r0, r3
 800c08a:	e730      	b.n	800beee <_printf_float+0xc6>
 800c08c:	2301      	movs	r3, #1
 800c08e:	464a      	mov	r2, r9
 800c090:	4631      	mov	r1, r6
 800c092:	4628      	mov	r0, r5
 800c094:	47b8      	blx	r7
 800c096:	3001      	adds	r0, #1
 800c098:	f43f af27 	beq.w	800beea <_printf_float+0xc2>
 800c09c:	f108 0801 	add.w	r8, r8, #1
 800c0a0:	e7e6      	b.n	800c070 <_printf_float+0x248>
 800c0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	dc39      	bgt.n	800c11c <_printf_float+0x2f4>
 800c0a8:	4a1b      	ldr	r2, [pc, #108]	; (800c118 <_printf_float+0x2f0>)
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	4631      	mov	r1, r6
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	47b8      	blx	r7
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	f43f af19 	beq.w	800beea <_printf_float+0xc2>
 800c0b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	d102      	bne.n	800c0c6 <_printf_float+0x29e>
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	07d9      	lsls	r1, r3, #31
 800c0c4:	d5d8      	bpl.n	800c078 <_printf_float+0x250>
 800c0c6:	ee18 3a10 	vmov	r3, s16
 800c0ca:	4652      	mov	r2, sl
 800c0cc:	4631      	mov	r1, r6
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	47b8      	blx	r7
 800c0d2:	3001      	adds	r0, #1
 800c0d4:	f43f af09 	beq.w	800beea <_printf_float+0xc2>
 800c0d8:	f04f 0900 	mov.w	r9, #0
 800c0dc:	f104 0a1a 	add.w	sl, r4, #26
 800c0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e2:	425b      	negs	r3, r3
 800c0e4:	454b      	cmp	r3, r9
 800c0e6:	dc01      	bgt.n	800c0ec <_printf_float+0x2c4>
 800c0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ea:	e792      	b.n	800c012 <_printf_float+0x1ea>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	4652      	mov	r2, sl
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	47b8      	blx	r7
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	f43f aef7 	beq.w	800beea <_printf_float+0xc2>
 800c0fc:	f109 0901 	add.w	r9, r9, #1
 800c100:	e7ee      	b.n	800c0e0 <_printf_float+0x2b8>
 800c102:	bf00      	nop
 800c104:	7fefffff 	.word	0x7fefffff
 800c108:	0803c8b1 	.word	0x0803c8b1
 800c10c:	0803c8b5 	.word	0x0803c8b5
 800c110:	0803c8bd 	.word	0x0803c8bd
 800c114:	0803c8b9 	.word	0x0803c8b9
 800c118:	0803cf38 	.word	0x0803cf38
 800c11c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c11e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c120:	429a      	cmp	r2, r3
 800c122:	bfa8      	it	ge
 800c124:	461a      	movge	r2, r3
 800c126:	2a00      	cmp	r2, #0
 800c128:	4691      	mov	r9, r2
 800c12a:	dc37      	bgt.n	800c19c <_printf_float+0x374>
 800c12c:	f04f 0b00 	mov.w	fp, #0
 800c130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c134:	f104 021a 	add.w	r2, r4, #26
 800c138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c13a:	9305      	str	r3, [sp, #20]
 800c13c:	eba3 0309 	sub.w	r3, r3, r9
 800c140:	455b      	cmp	r3, fp
 800c142:	dc33      	bgt.n	800c1ac <_printf_float+0x384>
 800c144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c148:	429a      	cmp	r2, r3
 800c14a:	db3b      	blt.n	800c1c4 <_printf_float+0x39c>
 800c14c:	6823      	ldr	r3, [r4, #0]
 800c14e:	07da      	lsls	r2, r3, #31
 800c150:	d438      	bmi.n	800c1c4 <_printf_float+0x39c>
 800c152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c154:	9a05      	ldr	r2, [sp, #20]
 800c156:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c158:	1a9a      	subs	r2, r3, r2
 800c15a:	eba3 0901 	sub.w	r9, r3, r1
 800c15e:	4591      	cmp	r9, r2
 800c160:	bfa8      	it	ge
 800c162:	4691      	movge	r9, r2
 800c164:	f1b9 0f00 	cmp.w	r9, #0
 800c168:	dc35      	bgt.n	800c1d6 <_printf_float+0x3ae>
 800c16a:	f04f 0800 	mov.w	r8, #0
 800c16e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c172:	f104 0a1a 	add.w	sl, r4, #26
 800c176:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c17a:	1a9b      	subs	r3, r3, r2
 800c17c:	eba3 0309 	sub.w	r3, r3, r9
 800c180:	4543      	cmp	r3, r8
 800c182:	f77f af79 	ble.w	800c078 <_printf_float+0x250>
 800c186:	2301      	movs	r3, #1
 800c188:	4652      	mov	r2, sl
 800c18a:	4631      	mov	r1, r6
 800c18c:	4628      	mov	r0, r5
 800c18e:	47b8      	blx	r7
 800c190:	3001      	adds	r0, #1
 800c192:	f43f aeaa 	beq.w	800beea <_printf_float+0xc2>
 800c196:	f108 0801 	add.w	r8, r8, #1
 800c19a:	e7ec      	b.n	800c176 <_printf_float+0x34e>
 800c19c:	4613      	mov	r3, r2
 800c19e:	4631      	mov	r1, r6
 800c1a0:	4642      	mov	r2, r8
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	47b8      	blx	r7
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	d1c0      	bne.n	800c12c <_printf_float+0x304>
 800c1aa:	e69e      	b.n	800beea <_printf_float+0xc2>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	4631      	mov	r1, r6
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	9205      	str	r2, [sp, #20]
 800c1b4:	47b8      	blx	r7
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	f43f ae97 	beq.w	800beea <_printf_float+0xc2>
 800c1bc:	9a05      	ldr	r2, [sp, #20]
 800c1be:	f10b 0b01 	add.w	fp, fp, #1
 800c1c2:	e7b9      	b.n	800c138 <_printf_float+0x310>
 800c1c4:	ee18 3a10 	vmov	r3, s16
 800c1c8:	4652      	mov	r2, sl
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	47b8      	blx	r7
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	d1be      	bne.n	800c152 <_printf_float+0x32a>
 800c1d4:	e689      	b.n	800beea <_printf_float+0xc2>
 800c1d6:	9a05      	ldr	r2, [sp, #20]
 800c1d8:	464b      	mov	r3, r9
 800c1da:	4442      	add	r2, r8
 800c1dc:	4631      	mov	r1, r6
 800c1de:	4628      	mov	r0, r5
 800c1e0:	47b8      	blx	r7
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	d1c1      	bne.n	800c16a <_printf_float+0x342>
 800c1e6:	e680      	b.n	800beea <_printf_float+0xc2>
 800c1e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1ea:	2a01      	cmp	r2, #1
 800c1ec:	dc01      	bgt.n	800c1f2 <_printf_float+0x3ca>
 800c1ee:	07db      	lsls	r3, r3, #31
 800c1f0:	d538      	bpl.n	800c264 <_printf_float+0x43c>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	4642      	mov	r2, r8
 800c1f6:	4631      	mov	r1, r6
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	47b8      	blx	r7
 800c1fc:	3001      	adds	r0, #1
 800c1fe:	f43f ae74 	beq.w	800beea <_printf_float+0xc2>
 800c202:	ee18 3a10 	vmov	r3, s16
 800c206:	4652      	mov	r2, sl
 800c208:	4631      	mov	r1, r6
 800c20a:	4628      	mov	r0, r5
 800c20c:	47b8      	blx	r7
 800c20e:	3001      	adds	r0, #1
 800c210:	f43f ae6b 	beq.w	800beea <_printf_float+0xc2>
 800c214:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c218:	2200      	movs	r2, #0
 800c21a:	2300      	movs	r3, #0
 800c21c:	f7f4 fc6e 	bl	8000afc <__aeabi_dcmpeq>
 800c220:	b9d8      	cbnz	r0, 800c25a <_printf_float+0x432>
 800c222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c224:	f108 0201 	add.w	r2, r8, #1
 800c228:	3b01      	subs	r3, #1
 800c22a:	4631      	mov	r1, r6
 800c22c:	4628      	mov	r0, r5
 800c22e:	47b8      	blx	r7
 800c230:	3001      	adds	r0, #1
 800c232:	d10e      	bne.n	800c252 <_printf_float+0x42a>
 800c234:	e659      	b.n	800beea <_printf_float+0xc2>
 800c236:	2301      	movs	r3, #1
 800c238:	4652      	mov	r2, sl
 800c23a:	4631      	mov	r1, r6
 800c23c:	4628      	mov	r0, r5
 800c23e:	47b8      	blx	r7
 800c240:	3001      	adds	r0, #1
 800c242:	f43f ae52 	beq.w	800beea <_printf_float+0xc2>
 800c246:	f108 0801 	add.w	r8, r8, #1
 800c24a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c24c:	3b01      	subs	r3, #1
 800c24e:	4543      	cmp	r3, r8
 800c250:	dcf1      	bgt.n	800c236 <_printf_float+0x40e>
 800c252:	464b      	mov	r3, r9
 800c254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c258:	e6dc      	b.n	800c014 <_printf_float+0x1ec>
 800c25a:	f04f 0800 	mov.w	r8, #0
 800c25e:	f104 0a1a 	add.w	sl, r4, #26
 800c262:	e7f2      	b.n	800c24a <_printf_float+0x422>
 800c264:	2301      	movs	r3, #1
 800c266:	4642      	mov	r2, r8
 800c268:	e7df      	b.n	800c22a <_printf_float+0x402>
 800c26a:	2301      	movs	r3, #1
 800c26c:	464a      	mov	r2, r9
 800c26e:	4631      	mov	r1, r6
 800c270:	4628      	mov	r0, r5
 800c272:	47b8      	blx	r7
 800c274:	3001      	adds	r0, #1
 800c276:	f43f ae38 	beq.w	800beea <_printf_float+0xc2>
 800c27a:	f108 0801 	add.w	r8, r8, #1
 800c27e:	68e3      	ldr	r3, [r4, #12]
 800c280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c282:	1a5b      	subs	r3, r3, r1
 800c284:	4543      	cmp	r3, r8
 800c286:	dcf0      	bgt.n	800c26a <_printf_float+0x442>
 800c288:	e6fa      	b.n	800c080 <_printf_float+0x258>
 800c28a:	f04f 0800 	mov.w	r8, #0
 800c28e:	f104 0919 	add.w	r9, r4, #25
 800c292:	e7f4      	b.n	800c27e <_printf_float+0x456>

0800c294 <_printf_common>:
 800c294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c298:	4616      	mov	r6, r2
 800c29a:	4699      	mov	r9, r3
 800c29c:	688a      	ldr	r2, [r1, #8]
 800c29e:	690b      	ldr	r3, [r1, #16]
 800c2a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	bfb8      	it	lt
 800c2a8:	4613      	movlt	r3, r2
 800c2aa:	6033      	str	r3, [r6, #0]
 800c2ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2b0:	4607      	mov	r7, r0
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	b10a      	cbz	r2, 800c2ba <_printf_common+0x26>
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	6033      	str	r3, [r6, #0]
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	0699      	lsls	r1, r3, #26
 800c2be:	bf42      	ittt	mi
 800c2c0:	6833      	ldrmi	r3, [r6, #0]
 800c2c2:	3302      	addmi	r3, #2
 800c2c4:	6033      	strmi	r3, [r6, #0]
 800c2c6:	6825      	ldr	r5, [r4, #0]
 800c2c8:	f015 0506 	ands.w	r5, r5, #6
 800c2cc:	d106      	bne.n	800c2dc <_printf_common+0x48>
 800c2ce:	f104 0a19 	add.w	sl, r4, #25
 800c2d2:	68e3      	ldr	r3, [r4, #12]
 800c2d4:	6832      	ldr	r2, [r6, #0]
 800c2d6:	1a9b      	subs	r3, r3, r2
 800c2d8:	42ab      	cmp	r3, r5
 800c2da:	dc26      	bgt.n	800c32a <_printf_common+0x96>
 800c2dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2e0:	1e13      	subs	r3, r2, #0
 800c2e2:	6822      	ldr	r2, [r4, #0]
 800c2e4:	bf18      	it	ne
 800c2e6:	2301      	movne	r3, #1
 800c2e8:	0692      	lsls	r2, r2, #26
 800c2ea:	d42b      	bmi.n	800c344 <_printf_common+0xb0>
 800c2ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2f0:	4649      	mov	r1, r9
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	47c0      	blx	r8
 800c2f6:	3001      	adds	r0, #1
 800c2f8:	d01e      	beq.n	800c338 <_printf_common+0xa4>
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	68e5      	ldr	r5, [r4, #12]
 800c2fe:	6832      	ldr	r2, [r6, #0]
 800c300:	f003 0306 	and.w	r3, r3, #6
 800c304:	2b04      	cmp	r3, #4
 800c306:	bf08      	it	eq
 800c308:	1aad      	subeq	r5, r5, r2
 800c30a:	68a3      	ldr	r3, [r4, #8]
 800c30c:	6922      	ldr	r2, [r4, #16]
 800c30e:	bf0c      	ite	eq
 800c310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c314:	2500      	movne	r5, #0
 800c316:	4293      	cmp	r3, r2
 800c318:	bfc4      	itt	gt
 800c31a:	1a9b      	subgt	r3, r3, r2
 800c31c:	18ed      	addgt	r5, r5, r3
 800c31e:	2600      	movs	r6, #0
 800c320:	341a      	adds	r4, #26
 800c322:	42b5      	cmp	r5, r6
 800c324:	d11a      	bne.n	800c35c <_printf_common+0xc8>
 800c326:	2000      	movs	r0, #0
 800c328:	e008      	b.n	800c33c <_printf_common+0xa8>
 800c32a:	2301      	movs	r3, #1
 800c32c:	4652      	mov	r2, sl
 800c32e:	4649      	mov	r1, r9
 800c330:	4638      	mov	r0, r7
 800c332:	47c0      	blx	r8
 800c334:	3001      	adds	r0, #1
 800c336:	d103      	bne.n	800c340 <_printf_common+0xac>
 800c338:	f04f 30ff 	mov.w	r0, #4294967295
 800c33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c340:	3501      	adds	r5, #1
 800c342:	e7c6      	b.n	800c2d2 <_printf_common+0x3e>
 800c344:	18e1      	adds	r1, r4, r3
 800c346:	1c5a      	adds	r2, r3, #1
 800c348:	2030      	movs	r0, #48	; 0x30
 800c34a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c34e:	4422      	add	r2, r4
 800c350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c358:	3302      	adds	r3, #2
 800c35a:	e7c7      	b.n	800c2ec <_printf_common+0x58>
 800c35c:	2301      	movs	r3, #1
 800c35e:	4622      	mov	r2, r4
 800c360:	4649      	mov	r1, r9
 800c362:	4638      	mov	r0, r7
 800c364:	47c0      	blx	r8
 800c366:	3001      	adds	r0, #1
 800c368:	d0e6      	beq.n	800c338 <_printf_common+0xa4>
 800c36a:	3601      	adds	r6, #1
 800c36c:	e7d9      	b.n	800c322 <_printf_common+0x8e>
	...

0800c370 <_printf_i>:
 800c370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c374:	7e0f      	ldrb	r7, [r1, #24]
 800c376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c378:	2f78      	cmp	r7, #120	; 0x78
 800c37a:	4691      	mov	r9, r2
 800c37c:	4680      	mov	r8, r0
 800c37e:	460c      	mov	r4, r1
 800c380:	469a      	mov	sl, r3
 800c382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c386:	d807      	bhi.n	800c398 <_printf_i+0x28>
 800c388:	2f62      	cmp	r7, #98	; 0x62
 800c38a:	d80a      	bhi.n	800c3a2 <_printf_i+0x32>
 800c38c:	2f00      	cmp	r7, #0
 800c38e:	f000 80d8 	beq.w	800c542 <_printf_i+0x1d2>
 800c392:	2f58      	cmp	r7, #88	; 0x58
 800c394:	f000 80a3 	beq.w	800c4de <_printf_i+0x16e>
 800c398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c39c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3a0:	e03a      	b.n	800c418 <_printf_i+0xa8>
 800c3a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3a6:	2b15      	cmp	r3, #21
 800c3a8:	d8f6      	bhi.n	800c398 <_printf_i+0x28>
 800c3aa:	a101      	add	r1, pc, #4	; (adr r1, 800c3b0 <_printf_i+0x40>)
 800c3ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3b0:	0800c409 	.word	0x0800c409
 800c3b4:	0800c41d 	.word	0x0800c41d
 800c3b8:	0800c399 	.word	0x0800c399
 800c3bc:	0800c399 	.word	0x0800c399
 800c3c0:	0800c399 	.word	0x0800c399
 800c3c4:	0800c399 	.word	0x0800c399
 800c3c8:	0800c41d 	.word	0x0800c41d
 800c3cc:	0800c399 	.word	0x0800c399
 800c3d0:	0800c399 	.word	0x0800c399
 800c3d4:	0800c399 	.word	0x0800c399
 800c3d8:	0800c399 	.word	0x0800c399
 800c3dc:	0800c529 	.word	0x0800c529
 800c3e0:	0800c44d 	.word	0x0800c44d
 800c3e4:	0800c50b 	.word	0x0800c50b
 800c3e8:	0800c399 	.word	0x0800c399
 800c3ec:	0800c399 	.word	0x0800c399
 800c3f0:	0800c54b 	.word	0x0800c54b
 800c3f4:	0800c399 	.word	0x0800c399
 800c3f8:	0800c44d 	.word	0x0800c44d
 800c3fc:	0800c399 	.word	0x0800c399
 800c400:	0800c399 	.word	0x0800c399
 800c404:	0800c513 	.word	0x0800c513
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	1d1a      	adds	r2, r3, #4
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	602a      	str	r2, [r5, #0]
 800c410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c418:	2301      	movs	r3, #1
 800c41a:	e0a3      	b.n	800c564 <_printf_i+0x1f4>
 800c41c:	6820      	ldr	r0, [r4, #0]
 800c41e:	6829      	ldr	r1, [r5, #0]
 800c420:	0606      	lsls	r6, r0, #24
 800c422:	f101 0304 	add.w	r3, r1, #4
 800c426:	d50a      	bpl.n	800c43e <_printf_i+0xce>
 800c428:	680e      	ldr	r6, [r1, #0]
 800c42a:	602b      	str	r3, [r5, #0]
 800c42c:	2e00      	cmp	r6, #0
 800c42e:	da03      	bge.n	800c438 <_printf_i+0xc8>
 800c430:	232d      	movs	r3, #45	; 0x2d
 800c432:	4276      	negs	r6, r6
 800c434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c438:	485e      	ldr	r0, [pc, #376]	; (800c5b4 <_printf_i+0x244>)
 800c43a:	230a      	movs	r3, #10
 800c43c:	e019      	b.n	800c472 <_printf_i+0x102>
 800c43e:	680e      	ldr	r6, [r1, #0]
 800c440:	602b      	str	r3, [r5, #0]
 800c442:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c446:	bf18      	it	ne
 800c448:	b236      	sxthne	r6, r6
 800c44a:	e7ef      	b.n	800c42c <_printf_i+0xbc>
 800c44c:	682b      	ldr	r3, [r5, #0]
 800c44e:	6820      	ldr	r0, [r4, #0]
 800c450:	1d19      	adds	r1, r3, #4
 800c452:	6029      	str	r1, [r5, #0]
 800c454:	0601      	lsls	r1, r0, #24
 800c456:	d501      	bpl.n	800c45c <_printf_i+0xec>
 800c458:	681e      	ldr	r6, [r3, #0]
 800c45a:	e002      	b.n	800c462 <_printf_i+0xf2>
 800c45c:	0646      	lsls	r6, r0, #25
 800c45e:	d5fb      	bpl.n	800c458 <_printf_i+0xe8>
 800c460:	881e      	ldrh	r6, [r3, #0]
 800c462:	4854      	ldr	r0, [pc, #336]	; (800c5b4 <_printf_i+0x244>)
 800c464:	2f6f      	cmp	r7, #111	; 0x6f
 800c466:	bf0c      	ite	eq
 800c468:	2308      	moveq	r3, #8
 800c46a:	230a      	movne	r3, #10
 800c46c:	2100      	movs	r1, #0
 800c46e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c472:	6865      	ldr	r5, [r4, #4]
 800c474:	60a5      	str	r5, [r4, #8]
 800c476:	2d00      	cmp	r5, #0
 800c478:	bfa2      	ittt	ge
 800c47a:	6821      	ldrge	r1, [r4, #0]
 800c47c:	f021 0104 	bicge.w	r1, r1, #4
 800c480:	6021      	strge	r1, [r4, #0]
 800c482:	b90e      	cbnz	r6, 800c488 <_printf_i+0x118>
 800c484:	2d00      	cmp	r5, #0
 800c486:	d04d      	beq.n	800c524 <_printf_i+0x1b4>
 800c488:	4615      	mov	r5, r2
 800c48a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c48e:	fb03 6711 	mls	r7, r3, r1, r6
 800c492:	5dc7      	ldrb	r7, [r0, r7]
 800c494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c498:	4637      	mov	r7, r6
 800c49a:	42bb      	cmp	r3, r7
 800c49c:	460e      	mov	r6, r1
 800c49e:	d9f4      	bls.n	800c48a <_printf_i+0x11a>
 800c4a0:	2b08      	cmp	r3, #8
 800c4a2:	d10b      	bne.n	800c4bc <_printf_i+0x14c>
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	07de      	lsls	r6, r3, #31
 800c4a8:	d508      	bpl.n	800c4bc <_printf_i+0x14c>
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	6861      	ldr	r1, [r4, #4]
 800c4ae:	4299      	cmp	r1, r3
 800c4b0:	bfde      	ittt	le
 800c4b2:	2330      	movle	r3, #48	; 0x30
 800c4b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4bc:	1b52      	subs	r2, r2, r5
 800c4be:	6122      	str	r2, [r4, #16]
 800c4c0:	f8cd a000 	str.w	sl, [sp]
 800c4c4:	464b      	mov	r3, r9
 800c4c6:	aa03      	add	r2, sp, #12
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	4640      	mov	r0, r8
 800c4cc:	f7ff fee2 	bl	800c294 <_printf_common>
 800c4d0:	3001      	adds	r0, #1
 800c4d2:	d14c      	bne.n	800c56e <_printf_i+0x1fe>
 800c4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d8:	b004      	add	sp, #16
 800c4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4de:	4835      	ldr	r0, [pc, #212]	; (800c5b4 <_printf_i+0x244>)
 800c4e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c4e4:	6829      	ldr	r1, [r5, #0]
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4ec:	6029      	str	r1, [r5, #0]
 800c4ee:	061d      	lsls	r5, r3, #24
 800c4f0:	d514      	bpl.n	800c51c <_printf_i+0x1ac>
 800c4f2:	07df      	lsls	r7, r3, #31
 800c4f4:	bf44      	itt	mi
 800c4f6:	f043 0320 	orrmi.w	r3, r3, #32
 800c4fa:	6023      	strmi	r3, [r4, #0]
 800c4fc:	b91e      	cbnz	r6, 800c506 <_printf_i+0x196>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	f023 0320 	bic.w	r3, r3, #32
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	2310      	movs	r3, #16
 800c508:	e7b0      	b.n	800c46c <_printf_i+0xfc>
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	f043 0320 	orr.w	r3, r3, #32
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	2378      	movs	r3, #120	; 0x78
 800c514:	4828      	ldr	r0, [pc, #160]	; (800c5b8 <_printf_i+0x248>)
 800c516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c51a:	e7e3      	b.n	800c4e4 <_printf_i+0x174>
 800c51c:	0659      	lsls	r1, r3, #25
 800c51e:	bf48      	it	mi
 800c520:	b2b6      	uxthmi	r6, r6
 800c522:	e7e6      	b.n	800c4f2 <_printf_i+0x182>
 800c524:	4615      	mov	r5, r2
 800c526:	e7bb      	b.n	800c4a0 <_printf_i+0x130>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	6826      	ldr	r6, [r4, #0]
 800c52c:	6961      	ldr	r1, [r4, #20]
 800c52e:	1d18      	adds	r0, r3, #4
 800c530:	6028      	str	r0, [r5, #0]
 800c532:	0635      	lsls	r5, r6, #24
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	d501      	bpl.n	800c53c <_printf_i+0x1cc>
 800c538:	6019      	str	r1, [r3, #0]
 800c53a:	e002      	b.n	800c542 <_printf_i+0x1d2>
 800c53c:	0670      	lsls	r0, r6, #25
 800c53e:	d5fb      	bpl.n	800c538 <_printf_i+0x1c8>
 800c540:	8019      	strh	r1, [r3, #0]
 800c542:	2300      	movs	r3, #0
 800c544:	6123      	str	r3, [r4, #16]
 800c546:	4615      	mov	r5, r2
 800c548:	e7ba      	b.n	800c4c0 <_printf_i+0x150>
 800c54a:	682b      	ldr	r3, [r5, #0]
 800c54c:	1d1a      	adds	r2, r3, #4
 800c54e:	602a      	str	r2, [r5, #0]
 800c550:	681d      	ldr	r5, [r3, #0]
 800c552:	6862      	ldr	r2, [r4, #4]
 800c554:	2100      	movs	r1, #0
 800c556:	4628      	mov	r0, r5
 800c558:	f7f3 fe52 	bl	8000200 <memchr>
 800c55c:	b108      	cbz	r0, 800c562 <_printf_i+0x1f2>
 800c55e:	1b40      	subs	r0, r0, r5
 800c560:	6060      	str	r0, [r4, #4]
 800c562:	6863      	ldr	r3, [r4, #4]
 800c564:	6123      	str	r3, [r4, #16]
 800c566:	2300      	movs	r3, #0
 800c568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c56c:	e7a8      	b.n	800c4c0 <_printf_i+0x150>
 800c56e:	6923      	ldr	r3, [r4, #16]
 800c570:	462a      	mov	r2, r5
 800c572:	4649      	mov	r1, r9
 800c574:	4640      	mov	r0, r8
 800c576:	47d0      	blx	sl
 800c578:	3001      	adds	r0, #1
 800c57a:	d0ab      	beq.n	800c4d4 <_printf_i+0x164>
 800c57c:	6823      	ldr	r3, [r4, #0]
 800c57e:	079b      	lsls	r3, r3, #30
 800c580:	d413      	bmi.n	800c5aa <_printf_i+0x23a>
 800c582:	68e0      	ldr	r0, [r4, #12]
 800c584:	9b03      	ldr	r3, [sp, #12]
 800c586:	4298      	cmp	r0, r3
 800c588:	bfb8      	it	lt
 800c58a:	4618      	movlt	r0, r3
 800c58c:	e7a4      	b.n	800c4d8 <_printf_i+0x168>
 800c58e:	2301      	movs	r3, #1
 800c590:	4632      	mov	r2, r6
 800c592:	4649      	mov	r1, r9
 800c594:	4640      	mov	r0, r8
 800c596:	47d0      	blx	sl
 800c598:	3001      	adds	r0, #1
 800c59a:	d09b      	beq.n	800c4d4 <_printf_i+0x164>
 800c59c:	3501      	adds	r5, #1
 800c59e:	68e3      	ldr	r3, [r4, #12]
 800c5a0:	9903      	ldr	r1, [sp, #12]
 800c5a2:	1a5b      	subs	r3, r3, r1
 800c5a4:	42ab      	cmp	r3, r5
 800c5a6:	dcf2      	bgt.n	800c58e <_printf_i+0x21e>
 800c5a8:	e7eb      	b.n	800c582 <_printf_i+0x212>
 800c5aa:	2500      	movs	r5, #0
 800c5ac:	f104 0619 	add.w	r6, r4, #25
 800c5b0:	e7f5      	b.n	800c59e <_printf_i+0x22e>
 800c5b2:	bf00      	nop
 800c5b4:	0803c8c1 	.word	0x0803c8c1
 800c5b8:	0803c8d2 	.word	0x0803c8d2

0800c5bc <_sbrk_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	4d06      	ldr	r5, [pc, #24]	; (800c5d8 <_sbrk_r+0x1c>)
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	4608      	mov	r0, r1
 800c5c6:	602b      	str	r3, [r5, #0]
 800c5c8:	f006 f97c 	bl	80128c4 <_sbrk>
 800c5cc:	1c43      	adds	r3, r0, #1
 800c5ce:	d102      	bne.n	800c5d6 <_sbrk_r+0x1a>
 800c5d0:	682b      	ldr	r3, [r5, #0]
 800c5d2:	b103      	cbz	r3, 800c5d6 <_sbrk_r+0x1a>
 800c5d4:	6023      	str	r3, [r4, #0]
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}
 800c5d8:	200037e0 	.word	0x200037e0

0800c5dc <siprintf>:
 800c5dc:	b40e      	push	{r1, r2, r3}
 800c5de:	b500      	push	{lr}
 800c5e0:	b09c      	sub	sp, #112	; 0x70
 800c5e2:	ab1d      	add	r3, sp, #116	; 0x74
 800c5e4:	9002      	str	r0, [sp, #8]
 800c5e6:	9006      	str	r0, [sp, #24]
 800c5e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5ec:	4809      	ldr	r0, [pc, #36]	; (800c614 <siprintf+0x38>)
 800c5ee:	9107      	str	r1, [sp, #28]
 800c5f0:	9104      	str	r1, [sp, #16]
 800c5f2:	4909      	ldr	r1, [pc, #36]	; (800c618 <siprintf+0x3c>)
 800c5f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5f8:	9105      	str	r1, [sp, #20]
 800c5fa:	6800      	ldr	r0, [r0, #0]
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	a902      	add	r1, sp, #8
 800c600:	f002 fed4 	bl	800f3ac <_svfiprintf_r>
 800c604:	9b02      	ldr	r3, [sp, #8]
 800c606:	2200      	movs	r2, #0
 800c608:	701a      	strb	r2, [r3, #0]
 800c60a:	b01c      	add	sp, #112	; 0x70
 800c60c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c610:	b003      	add	sp, #12
 800c612:	4770      	bx	lr
 800c614:	200002bc 	.word	0x200002bc
 800c618:	ffff0208 	.word	0xffff0208

0800c61c <siscanf>:
 800c61c:	b40e      	push	{r1, r2, r3}
 800c61e:	b510      	push	{r4, lr}
 800c620:	b09f      	sub	sp, #124	; 0x7c
 800c622:	ac21      	add	r4, sp, #132	; 0x84
 800c624:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c628:	f854 2b04 	ldr.w	r2, [r4], #4
 800c62c:	9201      	str	r2, [sp, #4]
 800c62e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c632:	9004      	str	r0, [sp, #16]
 800c634:	9008      	str	r0, [sp, #32]
 800c636:	f7f3 fddb 	bl	80001f0 <strlen>
 800c63a:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <siscanf+0x50>)
 800c63c:	9005      	str	r0, [sp, #20]
 800c63e:	9009      	str	r0, [sp, #36]	; 0x24
 800c640:	930d      	str	r3, [sp, #52]	; 0x34
 800c642:	480b      	ldr	r0, [pc, #44]	; (800c670 <siscanf+0x54>)
 800c644:	9a01      	ldr	r2, [sp, #4]
 800c646:	6800      	ldr	r0, [r0, #0]
 800c648:	9403      	str	r4, [sp, #12]
 800c64a:	2300      	movs	r3, #0
 800c64c:	9311      	str	r3, [sp, #68]	; 0x44
 800c64e:	9316      	str	r3, [sp, #88]	; 0x58
 800c650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c654:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c658:	a904      	add	r1, sp, #16
 800c65a:	4623      	mov	r3, r4
 800c65c:	f003 f800 	bl	800f660 <__ssvfiscanf_r>
 800c660:	b01f      	add	sp, #124	; 0x7c
 800c662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c666:	b003      	add	sp, #12
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	0800c697 	.word	0x0800c697
 800c670:	200002bc 	.word	0x200002bc

0800c674 <__sread>:
 800c674:	b510      	push	{r4, lr}
 800c676:	460c      	mov	r4, r1
 800c678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c67c:	f003 faba 	bl	800fbf4 <_read_r>
 800c680:	2800      	cmp	r0, #0
 800c682:	bfab      	itete	ge
 800c684:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c686:	89a3      	ldrhlt	r3, [r4, #12]
 800c688:	181b      	addge	r3, r3, r0
 800c68a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c68e:	bfac      	ite	ge
 800c690:	6563      	strge	r3, [r4, #84]	; 0x54
 800c692:	81a3      	strhlt	r3, [r4, #12]
 800c694:	bd10      	pop	{r4, pc}

0800c696 <__seofread>:
 800c696:	2000      	movs	r0, #0
 800c698:	4770      	bx	lr

0800c69a <__swrite>:
 800c69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c69e:	461f      	mov	r7, r3
 800c6a0:	898b      	ldrh	r3, [r1, #12]
 800c6a2:	05db      	lsls	r3, r3, #23
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	4616      	mov	r6, r2
 800c6aa:	d505      	bpl.n	800c6b8 <__swrite+0x1e>
 800c6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f002 f9b8 	bl	800ea28 <_lseek_r>
 800c6b8:	89a3      	ldrh	r3, [r4, #12]
 800c6ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6c2:	81a3      	strh	r3, [r4, #12]
 800c6c4:	4632      	mov	r2, r6
 800c6c6:	463b      	mov	r3, r7
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ce:	f001 b871 	b.w	800d7b4 <_write_r>

0800c6d2 <__sseek>:
 800c6d2:	b510      	push	{r4, lr}
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6da:	f002 f9a5 	bl	800ea28 <_lseek_r>
 800c6de:	1c43      	adds	r3, r0, #1
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	bf15      	itete	ne
 800c6e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c6e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c6ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c6ee:	81a3      	strheq	r3, [r4, #12]
 800c6f0:	bf18      	it	ne
 800c6f2:	81a3      	strhne	r3, [r4, #12]
 800c6f4:	bd10      	pop	{r4, pc}

0800c6f6 <__sclose>:
 800c6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6fa:	f001 b8e7 	b.w	800d8cc <_close_r>
	...

0800c700 <iso_year_adjust>:
 800c700:	6942      	ldr	r2, [r0, #20]
 800c702:	2a00      	cmp	r2, #0
 800c704:	f240 736c 	movw	r3, #1900	; 0x76c
 800c708:	bfa8      	it	ge
 800c70a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800c70e:	4413      	add	r3, r2
 800c710:	0792      	lsls	r2, r2, #30
 800c712:	d105      	bne.n	800c720 <iso_year_adjust+0x20>
 800c714:	2164      	movs	r1, #100	; 0x64
 800c716:	fb93 f2f1 	sdiv	r2, r3, r1
 800c71a:	fb01 3212 	mls	r2, r1, r2, r3
 800c71e:	b9da      	cbnz	r2, 800c758 <iso_year_adjust+0x58>
 800c720:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c724:	fb93 f1f2 	sdiv	r1, r3, r2
 800c728:	fb02 3311 	mls	r3, r2, r1, r3
 800c72c:	fab3 f383 	clz	r3, r3
 800c730:	095b      	lsrs	r3, r3, #5
 800c732:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800c736:	0040      	lsls	r0, r0, #1
 800c738:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800c73c:	4418      	add	r0, r3
 800c73e:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800c742:	4298      	cmp	r0, r3
 800c744:	d03a      	beq.n	800c7bc <iso_year_adjust+0xbc>
 800c746:	dc21      	bgt.n	800c78c <iso_year_adjust+0x8c>
 800c748:	2801      	cmp	r0, #1
 800c74a:	dc1a      	bgt.n	800c782 <iso_year_adjust+0x82>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	bfb4      	ite	lt
 800c750:	2000      	movlt	r0, #0
 800c752:	f04f 30ff 	movge.w	r0, #4294967295
 800c756:	4770      	bx	lr
 800c758:	2301      	movs	r3, #1
 800c75a:	e7ea      	b.n	800c732 <iso_year_adjust+0x32>
 800c75c:	2817      	cmp	r0, #23
 800c75e:	d813      	bhi.n	800c788 <iso_year_adjust+0x88>
 800c760:	e8df f000 	tbb	[pc, r0]
 800c764:	0c0c0c0c 	.word	0x0c0c0c0c
 800c768:	0c0c1212 	.word	0x0c0c1212
 800c76c:	12121212 	.word	0x12121212
 800c770:	12121212 	.word	0x12121212
 800c774:	0c0c1212 	.word	0x0c0c1212
 800c778:	0c0c1212 	.word	0x0c0c1212
 800c77c:	f04f 30ff 	mov.w	r0, #4294967295
 800c780:	4770      	bx	lr
 800c782:	380a      	subs	r0, #10
 800c784:	2817      	cmp	r0, #23
 800c786:	d9e9      	bls.n	800c75c <iso_year_adjust+0x5c>
 800c788:	2000      	movs	r0, #0
 800c78a:	4770      	bx	lr
 800c78c:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800c790:	4298      	cmp	r0, r3
 800c792:	dc06      	bgt.n	800c7a2 <iso_year_adjust+0xa2>
 800c794:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800c798:	4298      	cmp	r0, r3
 800c79a:	bfd4      	ite	le
 800c79c:	2000      	movle	r0, #0
 800c79e:	2001      	movgt	r0, #1
 800c7a0:	4770      	bx	lr
 800c7a2:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800c7a6:	3802      	subs	r0, #2
 800c7a8:	2815      	cmp	r0, #21
 800c7aa:	d8ed      	bhi.n	800c788 <iso_year_adjust+0x88>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	4083      	lsls	r3, r0
 800c7b0:	4803      	ldr	r0, [pc, #12]	; (800c7c0 <iso_year_adjust+0xc0>)
 800c7b2:	4018      	ands	r0, r3
 800c7b4:	3800      	subs	r0, #0
 800c7b6:	bf18      	it	ne
 800c7b8:	2001      	movne	r0, #1
 800c7ba:	4770      	bx	lr
 800c7bc:	2001      	movs	r0, #1
 800c7be:	4770      	bx	lr
 800c7c0:	002a001f 	.word	0x002a001f

0800c7c4 <__strftime.isra.0>:
 800c7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c8:	b08f      	sub	sp, #60	; 0x3c
 800c7ca:	461e      	mov	r6, r3
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	4607      	mov	r7, r0
 800c7d0:	460d      	mov	r5, r1
 800c7d2:	9302      	str	r3, [sp, #8]
 800c7d4:	461c      	mov	r4, r3
 800c7d6:	7813      	ldrb	r3, [r2, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f000 84ba 	beq.w	800d152 <__strftime.isra.0+0x98e>
 800c7de:	2b25      	cmp	r3, #37	; 0x25
 800c7e0:	d11f      	bne.n	800c822 <__strftime.isra.0+0x5e>
 800c7e2:	f892 b001 	ldrb.w	fp, [r2, #1]
 800c7e6:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800c7ea:	d024      	beq.n	800c836 <__strftime.isra.0+0x72>
 800c7ec:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800c7f0:	d021      	beq.n	800c836 <__strftime.isra.0+0x72>
 800c7f2:	f102 0801 	add.w	r8, r2, #1
 800c7f6:	f04f 0b00 	mov.w	fp, #0
 800c7fa:	f898 2000 	ldrb.w	r2, [r8]
 800c7fe:	3a31      	subs	r2, #49	; 0x31
 800c800:	2a08      	cmp	r2, #8
 800c802:	d81b      	bhi.n	800c83c <__strftime.isra.0+0x78>
 800c804:	4640      	mov	r0, r8
 800c806:	220a      	movs	r2, #10
 800c808:	a906      	add	r1, sp, #24
 800c80a:	f000 fd3b 	bl	800d284 <strtoul>
 800c80e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c812:	4681      	mov	r9, r0
 800c814:	f898 2000 	ldrb.w	r2, [r8]
 800c818:	2a45      	cmp	r2, #69	; 0x45
 800c81a:	d112      	bne.n	800c842 <__strftime.isra.0+0x7e>
 800c81c:	f108 0801 	add.w	r8, r8, #1
 800c820:	e011      	b.n	800c846 <__strftime.isra.0+0x82>
 800c822:	1e69      	subs	r1, r5, #1
 800c824:	42a1      	cmp	r1, r4
 800c826:	d802      	bhi.n	800c82e <__strftime.isra.0+0x6a>
 800c828:	2400      	movs	r4, #0
 800c82a:	f000 bc95 	b.w	800d158 <__strftime.isra.0+0x994>
 800c82e:	553b      	strb	r3, [r7, r4]
 800c830:	3201      	adds	r2, #1
 800c832:	3401      	adds	r4, #1
 800c834:	e7cf      	b.n	800c7d6 <__strftime.isra.0+0x12>
 800c836:	f102 0802 	add.w	r8, r2, #2
 800c83a:	e7de      	b.n	800c7fa <__strftime.isra.0+0x36>
 800c83c:	f04f 0900 	mov.w	r9, #0
 800c840:	e7e8      	b.n	800c814 <__strftime.isra.0+0x50>
 800c842:	2a4f      	cmp	r2, #79	; 0x4f
 800c844:	d0ea      	beq.n	800c81c <__strftime.isra.0+0x58>
 800c846:	f898 0000 	ldrb.w	r0, [r8]
 800c84a:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800c84e:	2a55      	cmp	r2, #85	; 0x55
 800c850:	d8ea      	bhi.n	800c828 <__strftime.isra.0+0x64>
 800c852:	a301      	add	r3, pc, #4	; (adr r3, 800c858 <__strftime.isra.0+0x94>)
 800c854:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c858:	0800d147 	.word	0x0800d147
 800c85c:	0800c829 	.word	0x0800c829
 800c860:	0800c829 	.word	0x0800c829
 800c864:	0800c829 	.word	0x0800c829
 800c868:	0800c829 	.word	0x0800c829
 800c86c:	0800c829 	.word	0x0800c829
 800c870:	0800c829 	.word	0x0800c829
 800c874:	0800c829 	.word	0x0800c829
 800c878:	0800c829 	.word	0x0800c829
 800c87c:	0800c829 	.word	0x0800c829
 800c880:	0800c829 	.word	0x0800c829
 800c884:	0800c829 	.word	0x0800c829
 800c888:	0800c829 	.word	0x0800c829
 800c88c:	0800c829 	.word	0x0800c829
 800c890:	0800c829 	.word	0x0800c829
 800c894:	0800c829 	.word	0x0800c829
 800c898:	0800c829 	.word	0x0800c829
 800c89c:	0800c829 	.word	0x0800c829
 800c8a0:	0800c829 	.word	0x0800c829
 800c8a4:	0800c829 	.word	0x0800c829
 800c8a8:	0800c829 	.word	0x0800c829
 800c8ac:	0800c829 	.word	0x0800c829
 800c8b0:	0800c829 	.word	0x0800c829
 800c8b4:	0800c829 	.word	0x0800c829
 800c8b8:	0800c829 	.word	0x0800c829
 800c8bc:	0800c829 	.word	0x0800c829
 800c8c0:	0800c829 	.word	0x0800c829
 800c8c4:	0800c829 	.word	0x0800c829
 800c8c8:	0800c9ed 	.word	0x0800c9ed
 800c8cc:	0800ca45 	.word	0x0800ca45
 800c8d0:	0800cab3 	.word	0x0800cab3
 800c8d4:	0800cb51 	.word	0x0800cb51
 800c8d8:	0800c829 	.word	0x0800c829
 800c8dc:	0800cb9d 	.word	0x0800cb9d
 800c8e0:	0800cc89 	.word	0x0800cc89
 800c8e4:	0800cd63 	.word	0x0800cd63
 800c8e8:	0800cd71 	.word	0x0800cd71
 800c8ec:	0800c829 	.word	0x0800c829
 800c8f0:	0800c829 	.word	0x0800c829
 800c8f4:	0800c829 	.word	0x0800c829
 800c8f8:	0800cda1 	.word	0x0800cda1
 800c8fc:	0800c829 	.word	0x0800c829
 800c900:	0800c829 	.word	0x0800c829
 800c904:	0800cdb5 	.word	0x0800cdb5
 800c908:	0800c829 	.word	0x0800c829
 800c90c:	0800ce07 	.word	0x0800ce07
 800c910:	0800cf1b 	.word	0x0800cf1b
 800c914:	0800cf2b 	.word	0x0800cf2b
 800c918:	0800cf53 	.word	0x0800cf53
 800c91c:	0800cf8d 	.word	0x0800cf8d
 800c920:	0800d001 	.word	0x0800d001
 800c924:	0800caab 	.word	0x0800caab
 800c928:	0800d02d 	.word	0x0800d02d
 800c92c:	0800d0f5 	.word	0x0800d0f5
 800c930:	0800c829 	.word	0x0800c829
 800c934:	0800c829 	.word	0x0800c829
 800c938:	0800c829 	.word	0x0800c829
 800c93c:	0800c829 	.word	0x0800c829
 800c940:	0800c829 	.word	0x0800c829
 800c944:	0800c829 	.word	0x0800c829
 800c948:	0800c9b1 	.word	0x0800c9b1
 800c94c:	0800ca1b 	.word	0x0800ca1b
 800c950:	0800ca71 	.word	0x0800ca71
 800c954:	0800cb2d 	.word	0x0800cb2d
 800c958:	0800cb2d 	.word	0x0800cb2d
 800c95c:	0800c829 	.word	0x0800c829
 800c960:	0800cbef 	.word	0x0800cbef
 800c964:	0800ca1b 	.word	0x0800ca1b
 800c968:	0800c829 	.word	0x0800c829
 800c96c:	0800cd93 	.word	0x0800cd93
 800c970:	0800cd63 	.word	0x0800cd63
 800c974:	0800cd71 	.word	0x0800cd71
 800c978:	0800cd9b 	.word	0x0800cd9b
 800c97c:	0800cda5 	.word	0x0800cda5
 800c980:	0800c829 	.word	0x0800c829
 800c984:	0800cdb5 	.word	0x0800cdb5
 800c988:	0800c829 	.word	0x0800c829
 800c98c:	0800ca9b 	.word	0x0800ca9b
 800c990:	0800ce19 	.word	0x0800ce19
 800c994:	0800cf1f 	.word	0x0800cf1f
 800c998:	0800cf39 	.word	0x0800cf39
 800c99c:	0800c829 	.word	0x0800c829
 800c9a0:	0800cff3 	.word	0x0800cff3
 800c9a4:	0800caa3 	.word	0x0800caa3
 800c9a8:	0800d011 	.word	0x0800d011
 800c9ac:	0800d07f 	.word	0x0800d07f
 800c9b0:	69b3      	ldr	r3, [r6, #24]
 800c9b2:	4aa9      	ldr	r2, [pc, #676]	; (800cc58 <__strftime.isra.0+0x494>)
 800c9b4:	3318      	adds	r3, #24
 800c9b6:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800c9ba:	4648      	mov	r0, r9
 800c9bc:	f7f3 fc18 	bl	80001f0 <strlen>
 800c9c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800c9c4:	4420      	add	r0, r4
 800c9c6:	1e6b      	subs	r3, r5, #1
 800c9c8:	42a0      	cmp	r0, r4
 800c9ca:	d107      	bne.n	800c9dc <__strftime.isra.0+0x218>
 800c9cc:	f898 3000 	ldrb.w	r3, [r8]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	f000 83be 	beq.w	800d152 <__strftime.isra.0+0x98e>
 800c9d6:	f108 0201 	add.w	r2, r8, #1
 800c9da:	e6fc      	b.n	800c7d6 <__strftime.isra.0+0x12>
 800c9dc:	42a3      	cmp	r3, r4
 800c9de:	f67f af23 	bls.w	800c828 <__strftime.isra.0+0x64>
 800c9e2:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800c9e6:	553a      	strb	r2, [r7, r4]
 800c9e8:	3401      	adds	r4, #1
 800c9ea:	e7ed      	b.n	800c9c8 <__strftime.isra.0+0x204>
 800c9ec:	69b2      	ldr	r2, [r6, #24]
 800c9ee:	4b9a      	ldr	r3, [pc, #616]	; (800cc58 <__strftime.isra.0+0x494>)
 800c9f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c9f4:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800c9f8:	4648      	mov	r0, r9
 800c9fa:	f7f3 fbf9 	bl	80001f0 <strlen>
 800c9fe:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca02:	4420      	add	r0, r4
 800ca04:	1e6b      	subs	r3, r5, #1
 800ca06:	42a0      	cmp	r0, r4
 800ca08:	d0e0      	beq.n	800c9cc <__strftime.isra.0+0x208>
 800ca0a:	42a3      	cmp	r3, r4
 800ca0c:	f67f af0c 	bls.w	800c828 <__strftime.isra.0+0x64>
 800ca10:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800ca14:	553a      	strb	r2, [r7, r4]
 800ca16:	3401      	adds	r4, #1
 800ca18:	e7f5      	b.n	800ca06 <__strftime.isra.0+0x242>
 800ca1a:	4b8f      	ldr	r3, [pc, #572]	; (800cc58 <__strftime.isra.0+0x494>)
 800ca1c:	6932      	ldr	r2, [r6, #16]
 800ca1e:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800ca22:	4648      	mov	r0, r9
 800ca24:	f7f3 fbe4 	bl	80001f0 <strlen>
 800ca28:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca2c:	4420      	add	r0, r4
 800ca2e:	1e6b      	subs	r3, r5, #1
 800ca30:	42a0      	cmp	r0, r4
 800ca32:	d0cb      	beq.n	800c9cc <__strftime.isra.0+0x208>
 800ca34:	42a3      	cmp	r3, r4
 800ca36:	f67f aef7 	bls.w	800c828 <__strftime.isra.0+0x64>
 800ca3a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800ca3e:	553a      	strb	r2, [r7, r4]
 800ca40:	3401      	adds	r4, #1
 800ca42:	e7f5      	b.n	800ca30 <__strftime.isra.0+0x26c>
 800ca44:	6933      	ldr	r3, [r6, #16]
 800ca46:	4a84      	ldr	r2, [pc, #528]	; (800cc58 <__strftime.isra.0+0x494>)
 800ca48:	330c      	adds	r3, #12
 800ca4a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800ca4e:	4648      	mov	r0, r9
 800ca50:	f7f3 fbce 	bl	80001f0 <strlen>
 800ca54:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca58:	4420      	add	r0, r4
 800ca5a:	1e6b      	subs	r3, r5, #1
 800ca5c:	42a0      	cmp	r0, r4
 800ca5e:	d0b5      	beq.n	800c9cc <__strftime.isra.0+0x208>
 800ca60:	42a3      	cmp	r3, r4
 800ca62:	f67f aee1 	bls.w	800c828 <__strftime.isra.0+0x64>
 800ca66:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800ca6a:	553a      	strb	r2, [r7, r4]
 800ca6c:	3401      	adds	r4, #1
 800ca6e:	e7f5      	b.n	800ca5c <__strftime.isra.0+0x298>
 800ca70:	4b79      	ldr	r3, [pc, #484]	; (800cc58 <__strftime.isra.0+0x494>)
 800ca72:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800ca76:	4648      	mov	r0, r9
 800ca78:	f7f3 fbba 	bl	80001f0 <strlen>
 800ca7c:	f899 3000 	ldrb.w	r3, [r9]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d0a3      	beq.n	800c9cc <__strftime.isra.0+0x208>
 800ca84:	4633      	mov	r3, r6
 800ca86:	464a      	mov	r2, r9
 800ca88:	1b29      	subs	r1, r5, r4
 800ca8a:	1938      	adds	r0, r7, r4
 800ca8c:	f7ff fe9a 	bl	800c7c4 <__strftime.isra.0>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	f77f aec9 	ble.w	800c828 <__strftime.isra.0+0x64>
 800ca96:	4404      	add	r4, r0
 800ca98:	e798      	b.n	800c9cc <__strftime.isra.0+0x208>
 800ca9a:	4b6f      	ldr	r3, [pc, #444]	; (800cc58 <__strftime.isra.0+0x494>)
 800ca9c:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 800caa0:	e7e9      	b.n	800ca76 <__strftime.isra.0+0x2b2>
 800caa2:	4b6d      	ldr	r3, [pc, #436]	; (800cc58 <__strftime.isra.0+0x494>)
 800caa4:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800caa8:	e7e5      	b.n	800ca76 <__strftime.isra.0+0x2b2>
 800caaa:	4b6b      	ldr	r3, [pc, #428]	; (800cc58 <__strftime.isra.0+0x494>)
 800caac:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800cab0:	e7e1      	b.n	800ca76 <__strftime.isra.0+0x2b2>
 800cab2:	496a      	ldr	r1, [pc, #424]	; (800cc5c <__strftime.isra.0+0x498>)
 800cab4:	f8d6 a014 	ldr.w	sl, [r6, #20]
 800cab8:	458a      	cmp	sl, r1
 800caba:	bfac      	ite	ge
 800cabc:	2100      	movge	r1, #0
 800cabe:	2101      	movlt	r1, #1
 800cac0:	f1ba 0f00 	cmp.w	sl, #0
 800cac4:	db11      	blt.n	800caea <__strftime.isra.0+0x326>
 800cac6:	2064      	movs	r0, #100	; 0x64
 800cac8:	fb9a f0f0 	sdiv	r0, sl, r0
 800cacc:	3013      	adds	r0, #19
 800cace:	f1bb 0f00 	cmp.w	fp, #0
 800cad2:	d014      	beq.n	800cafe <__strftime.isra.0+0x33a>
 800cad4:	2863      	cmp	r0, #99	; 0x63
 800cad6:	dd27      	ble.n	800cb28 <__strftime.isra.0+0x364>
 800cad8:	4b61      	ldr	r3, [pc, #388]	; (800cc60 <__strftime.isra.0+0x49c>)
 800cada:	4a62      	ldr	r2, [pc, #392]	; (800cc64 <__strftime.isra.0+0x4a0>)
 800cadc:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800cae0:	bf18      	it	ne
 800cae2:	461a      	movne	r2, r3
 800cae4:	f8df c198 	ldr.w	ip, [pc, #408]	; 800cc80 <__strftime.isra.0+0x4bc>
 800cae8:	e00c      	b.n	800cb04 <__strftime.isra.0+0x340>
 800caea:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800caee:	9103      	str	r1, [sp, #12]
 800caf0:	f000 fee7 	bl	800d8c2 <abs>
 800caf4:	2264      	movs	r2, #100	; 0x64
 800caf6:	9903      	ldr	r1, [sp, #12]
 800caf8:	fb90 f0f2 	sdiv	r0, r0, r2
 800cafc:	e7e7      	b.n	800cace <__strftime.isra.0+0x30a>
 800cafe:	4a58      	ldr	r2, [pc, #352]	; (800cc60 <__strftime.isra.0+0x49c>)
 800cb00:	f8df c180 	ldr.w	ip, [pc, #384]	; 800cc84 <__strftime.isra.0+0x4c0>
 800cb04:	4b58      	ldr	r3, [pc, #352]	; (800cc68 <__strftime.isra.0+0x4a4>)
 800cb06:	9001      	str	r0, [sp, #4]
 800cb08:	f1b9 0f02 	cmp.w	r9, #2
 800cb0c:	bf2c      	ite	cs
 800cb0e:	ebc1 0109 	rsbcs	r1, r1, r9
 800cb12:	f1c1 0102 	rsbcc	r1, r1, #2
 800cb16:	9100      	str	r1, [sp, #0]
 800cb18:	4950      	ldr	r1, [pc, #320]	; (800cc5c <__strftime.isra.0+0x498>)
 800cb1a:	458a      	cmp	sl, r1
 800cb1c:	bfa8      	it	ge
 800cb1e:	4613      	movge	r3, r2
 800cb20:	4662      	mov	r2, ip
 800cb22:	1b29      	subs	r1, r5, r4
 800cb24:	1938      	adds	r0, r7, r4
 800cb26:	e028      	b.n	800cb7a <__strftime.isra.0+0x3b6>
 800cb28:	4a4d      	ldr	r2, [pc, #308]	; (800cc60 <__strftime.isra.0+0x49c>)
 800cb2a:	e7db      	b.n	800cae4 <__strftime.isra.0+0x320>
 800cb2c:	494f      	ldr	r1, [pc, #316]	; (800cc6c <__strftime.isra.0+0x4a8>)
 800cb2e:	4a50      	ldr	r2, [pc, #320]	; (800cc70 <__strftime.isra.0+0x4ac>)
 800cb30:	68f3      	ldr	r3, [r6, #12]
 800cb32:	2864      	cmp	r0, #100	; 0x64
 800cb34:	bf08      	it	eq
 800cb36:	460a      	moveq	r2, r1
 800cb38:	1b29      	subs	r1, r5, r4
 800cb3a:	1938      	adds	r0, r7, r4
 800cb3c:	f003 f8e8 	bl	800fd10 <sniprintf>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	f6ff ae71 	blt.w	800c828 <__strftime.isra.0+0x64>
 800cb46:	4404      	add	r4, r0
 800cb48:	42a5      	cmp	r5, r4
 800cb4a:	f63f af3f 	bhi.w	800c9cc <__strftime.isra.0+0x208>
 800cb4e:	e66b      	b.n	800c828 <__strftime.isra.0+0x64>
 800cb50:	6970      	ldr	r0, [r6, #20]
 800cb52:	6933      	ldr	r3, [r6, #16]
 800cb54:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	eb07 0904 	add.w	r9, r7, r4
 800cb5e:	eba5 0104 	sub.w	r1, r5, r4
 800cb62:	f103 0301 	add.w	r3, r3, #1
 800cb66:	db0b      	blt.n	800cb80 <__strftime.isra.0+0x3bc>
 800cb68:	2264      	movs	r2, #100	; 0x64
 800cb6a:	fb90 fcf2 	sdiv	ip, r0, r2
 800cb6e:	fb02 001c 	mls	r0, r2, ip, r0
 800cb72:	4a40      	ldr	r2, [pc, #256]	; (800cc74 <__strftime.isra.0+0x4b0>)
 800cb74:	e9cd a000 	strd	sl, r0, [sp]
 800cb78:	4648      	mov	r0, r9
 800cb7a:	f003 f8c9 	bl	800fd10 <sniprintf>
 800cb7e:	e7df      	b.n	800cb40 <__strftime.isra.0+0x37c>
 800cb80:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800cb84:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800cb88:	f000 fe9b 	bl	800d8c2 <abs>
 800cb8c:	2264      	movs	r2, #100	; 0x64
 800cb8e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 800cb92:	fb90 fcf2 	sdiv	ip, r0, r2
 800cb96:	fb0c 0012 	mls	r0, ip, r2, r0
 800cb9a:	e7ea      	b.n	800cb72 <__strftime.isra.0+0x3ae>
 800cb9c:	2225      	movs	r2, #37	; 0x25
 800cb9e:	f88d 2018 	strb.w	r2, [sp, #24]
 800cba2:	f1bb 0f00 	cmp.w	fp, #0
 800cba6:	d011      	beq.n	800cbcc <__strftime.isra.0+0x408>
 800cba8:	f1b9 0f06 	cmp.w	r9, #6
 800cbac:	bf38      	it	cc
 800cbae:	f04f 0906 	movcc.w	r9, #6
 800cbb2:	f1b9 0306 	subs.w	r3, r9, #6
 800cbb6:	f88d b019 	strb.w	fp, [sp, #25]
 800cbba:	d10c      	bne.n	800cbd6 <__strftime.isra.0+0x412>
 800cbbc:	f10d 001a 	add.w	r0, sp, #26
 800cbc0:	492d      	ldr	r1, [pc, #180]	; (800cc78 <__strftime.isra.0+0x4b4>)
 800cbc2:	f003 f8d9 	bl	800fd78 <strcpy>
 800cbc6:	4633      	mov	r3, r6
 800cbc8:	aa06      	add	r2, sp, #24
 800cbca:	e75d      	b.n	800ca88 <__strftime.isra.0+0x2c4>
 800cbcc:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 800cbd0:	f04f 090a 	mov.w	r9, #10
 800cbd4:	e7ed      	b.n	800cbb2 <__strftime.isra.0+0x3ee>
 800cbd6:	4a29      	ldr	r2, [pc, #164]	; (800cc7c <__strftime.isra.0+0x4b8>)
 800cbd8:	211e      	movs	r1, #30
 800cbda:	f10d 001a 	add.w	r0, sp, #26
 800cbde:	f003 f897 	bl	800fd10 <sniprintf>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	ddea      	ble.n	800cbbc <__strftime.isra.0+0x3f8>
 800cbe6:	f10d 031a 	add.w	r3, sp, #26
 800cbea:	4418      	add	r0, r3
 800cbec:	e7e8      	b.n	800cbc0 <__strftime.isra.0+0x3fc>
 800cbee:	4630      	mov	r0, r6
 800cbf0:	f7ff fd86 	bl	800c700 <iso_year_adjust>
 800cbf4:	4681      	mov	r9, r0
 800cbf6:	6970      	ldr	r0, [r6, #20]
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	db11      	blt.n	800cc20 <__strftime.isra.0+0x45c>
 800cbfc:	2364      	movs	r3, #100	; 0x64
 800cbfe:	fb90 f2f3 	sdiv	r2, r0, r3
 800cc02:	fb03 0012 	mls	r0, r3, r2, r0
 800cc06:	2264      	movs	r2, #100	; 0x64
 800cc08:	4481      	add	r9, r0
 800cc0a:	fb99 f3f2 	sdiv	r3, r9, r2
 800cc0e:	fb02 9913 	mls	r9, r2, r3, r9
 800cc12:	4491      	add	r9, r2
 800cc14:	fbb9 f3f2 	udiv	r3, r9, r2
 800cc18:	fb02 9313 	mls	r3, r2, r3, r9
 800cc1c:	4a13      	ldr	r2, [pc, #76]	; (800cc6c <__strftime.isra.0+0x4a8>)
 800cc1e:	e78b      	b.n	800cb38 <__strftime.isra.0+0x374>
 800cc20:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800cc24:	f000 fe4d 	bl	800d8c2 <abs>
 800cc28:	2364      	movs	r3, #100	; 0x64
 800cc2a:	f1b9 0f00 	cmp.w	r9, #0
 800cc2e:	fb90 f2f3 	sdiv	r2, r0, r3
 800cc32:	fb02 0013 	mls	r0, r2, r3, r0
 800cc36:	da07      	bge.n	800cc48 <__strftime.isra.0+0x484>
 800cc38:	6972      	ldr	r2, [r6, #20]
 800cc3a:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	bfb8      	it	lt
 800cc42:	f04f 0901 	movlt.w	r9, #1
 800cc46:	e7de      	b.n	800cc06 <__strftime.isra.0+0x442>
 800cc48:	d0dd      	beq.n	800cc06 <__strftime.isra.0+0x442>
 800cc4a:	6972      	ldr	r2, [r6, #20]
 800cc4c:	4b03      	ldr	r3, [pc, #12]	; (800cc5c <__strftime.isra.0+0x498>)
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	bfb8      	it	lt
 800cc52:	f04f 39ff 	movlt.w	r9, #4294967295
 800cc56:	e7d6      	b.n	800cc06 <__strftime.isra.0+0x442>
 800cc58:	0803ca68 	.word	0x0803ca68
 800cc5c:	fffff894 	.word	0xfffff894
 800cc60:	0803c7c6 	.word	0x0803c7c6
 800cc64:	0803c8f2 	.word	0x0803c8f2
 800cc68:	0803cf35 	.word	0x0803cf35
 800cc6c:	0803c902 	.word	0x0803c902
 800cc70:	0803c8f4 	.word	0x0803c8f4
 800cc74:	0803c8f8 	.word	0x0803c8f8
 800cc78:	0803c90b 	.word	0x0803c90b
 800cc7c:	0803c907 	.word	0x0803c907
 800cc80:	0803c8ea 	.word	0x0803c8ea
 800cc84:	0803c8e3 	.word	0x0803c8e3
 800cc88:	6971      	ldr	r1, [r6, #20]
 800cc8a:	4ab6      	ldr	r2, [pc, #728]	; (800cf64 <__strftime.isra.0+0x7a0>)
 800cc8c:	4291      	cmp	r1, r2
 800cc8e:	bfac      	ite	ge
 800cc90:	2300      	movge	r3, #0
 800cc92:	2301      	movlt	r3, #1
 800cc94:	4630      	mov	r0, r6
 800cc96:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800cc9a:	f7ff fd31 	bl	800c700 <iso_year_adjust>
 800cc9e:	9904      	ldr	r1, [sp, #16]
 800cca0:	2900      	cmp	r1, #0
 800cca2:	4682      	mov	sl, r0
 800cca4:	db2c      	blt.n	800cd00 <__strftime.isra.0+0x53c>
 800cca6:	2264      	movs	r2, #100	; 0x64
 800cca8:	fb91 f2f2 	sdiv	r2, r1, r2
 800ccac:	3213      	adds	r2, #19
 800ccae:	6970      	ldr	r0, [r6, #20]
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	db30      	blt.n	800cd16 <__strftime.isra.0+0x552>
 800ccb4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800ccb8:	fb90 fefc 	sdiv	lr, r0, ip
 800ccbc:	fb0c 001e 	mls	r0, ip, lr, r0
 800ccc0:	f1ba 0f00 	cmp.w	sl, #0
 800ccc4:	da36      	bge.n	800cd34 <__strftime.isra.0+0x570>
 800ccc6:	6971      	ldr	r1, [r6, #20]
 800ccc8:	4ba7      	ldr	r3, [pc, #668]	; (800cf68 <__strftime.isra.0+0x7a4>)
 800ccca:	4299      	cmp	r1, r3
 800cccc:	db3d      	blt.n	800cd4a <__strftime.isra.0+0x586>
 800ccce:	4482      	add	sl, r0
 800ccd0:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ccd4:	d13e      	bne.n	800cd54 <__strftime.isra.0+0x590>
 800ccd6:	3a01      	subs	r2, #1
 800ccd8:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800ccdc:	9b03      	ldr	r3, [sp, #12]
 800ccde:	2064      	movs	r0, #100	; 0x64
 800cce0:	fb00 aa02 	mla	sl, r0, r2, sl
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f000 81ad 	beq.w	800d044 <__strftime.isra.0+0x880>
 800ccea:	222d      	movs	r2, #45	; 0x2d
 800ccec:	f88d 2018 	strb.w	r2, [sp, #24]
 800ccf0:	f1b9 0f00 	cmp.w	r9, #0
 800ccf4:	d001      	beq.n	800ccfa <__strftime.isra.0+0x536>
 800ccf6:	f109 39ff 	add.w	r9, r9, #4294967295
 800ccfa:	f10d 0219 	add.w	r2, sp, #25
 800ccfe:	e1ac      	b.n	800d05a <__strftime.isra.0+0x896>
 800cd00:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800cd04:	9104      	str	r1, [sp, #16]
 800cd06:	f000 fddc 	bl	800d8c2 <abs>
 800cd0a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800cd0e:	9904      	ldr	r1, [sp, #16]
 800cd10:	fb90 f2fc 	sdiv	r2, r0, ip
 800cd14:	e7cb      	b.n	800ccae <__strftime.isra.0+0x4ea>
 800cd16:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800cd1a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800cd1e:	f000 fdd0 	bl	800d8c2 <abs>
 800cd22:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800cd26:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800cd2a:	fb90 fefc 	sdiv	lr, r0, ip
 800cd2e:	fb0e 001c 	mls	r0, lr, ip, r0
 800cd32:	e7c5      	b.n	800ccc0 <__strftime.isra.0+0x4fc>
 800cd34:	d0cb      	beq.n	800ccce <__strftime.isra.0+0x50a>
 800cd36:	4b8b      	ldr	r3, [pc, #556]	; (800cf64 <__strftime.isra.0+0x7a0>)
 800cd38:	4299      	cmp	r1, r3
 800cd3a:	bfb4      	ite	lt
 800cd3c:	2301      	movlt	r3, #1
 800cd3e:	2300      	movge	r3, #0
 800cd40:	9303      	str	r3, [sp, #12]
 800cd42:	bfb8      	it	lt
 800cd44:	f04f 3aff 	movlt.w	sl, #4294967295
 800cd48:	e7c1      	b.n	800ccce <__strftime.isra.0+0x50a>
 800cd4a:	f04f 0a01 	mov.w	sl, #1
 800cd4e:	f8cd a00c 	str.w	sl, [sp, #12]
 800cd52:	e7bc      	b.n	800ccce <__strftime.isra.0+0x50a>
 800cd54:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800cd58:	bf04      	itt	eq
 800cd5a:	3201      	addeq	r2, #1
 800cd5c:	f04f 0a00 	moveq.w	sl, #0
 800cd60:	e7bc      	b.n	800ccdc <__strftime.isra.0+0x518>
 800cd62:	4982      	ldr	r1, [pc, #520]	; (800cf6c <__strftime.isra.0+0x7a8>)
 800cd64:	4a82      	ldr	r2, [pc, #520]	; (800cf70 <__strftime.isra.0+0x7ac>)
 800cd66:	68b3      	ldr	r3, [r6, #8]
 800cd68:	286b      	cmp	r0, #107	; 0x6b
 800cd6a:	bf08      	it	eq
 800cd6c:	460a      	moveq	r2, r1
 800cd6e:	e6e3      	b.n	800cb38 <__strftime.isra.0+0x374>
 800cd70:	68b3      	ldr	r3, [r6, #8]
 800cd72:	b163      	cbz	r3, 800cd8e <__strftime.isra.0+0x5ca>
 800cd74:	2b0c      	cmp	r3, #12
 800cd76:	d004      	beq.n	800cd82 <__strftime.isra.0+0x5be>
 800cd78:	210c      	movs	r1, #12
 800cd7a:	fb93 f2f1 	sdiv	r2, r3, r1
 800cd7e:	fb01 3312 	mls	r3, r1, r2, r3
 800cd82:	497b      	ldr	r1, [pc, #492]	; (800cf70 <__strftime.isra.0+0x7ac>)
 800cd84:	4a79      	ldr	r2, [pc, #484]	; (800cf6c <__strftime.isra.0+0x7a8>)
 800cd86:	2849      	cmp	r0, #73	; 0x49
 800cd88:	bf08      	it	eq
 800cd8a:	460a      	moveq	r2, r1
 800cd8c:	e6d4      	b.n	800cb38 <__strftime.isra.0+0x374>
 800cd8e:	230c      	movs	r3, #12
 800cd90:	e7f7      	b.n	800cd82 <__strftime.isra.0+0x5be>
 800cd92:	69f3      	ldr	r3, [r6, #28]
 800cd94:	4a77      	ldr	r2, [pc, #476]	; (800cf74 <__strftime.isra.0+0x7b0>)
 800cd96:	3301      	adds	r3, #1
 800cd98:	e6ce      	b.n	800cb38 <__strftime.isra.0+0x374>
 800cd9a:	6933      	ldr	r3, [r6, #16]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	e73d      	b.n	800cc1c <__strftime.isra.0+0x458>
 800cda0:	6873      	ldr	r3, [r6, #4]
 800cda2:	e73b      	b.n	800cc1c <__strftime.isra.0+0x458>
 800cda4:	1e6b      	subs	r3, r5, #1
 800cda6:	429c      	cmp	r4, r3
 800cda8:	f4bf ad3e 	bcs.w	800c828 <__strftime.isra.0+0x64>
 800cdac:	230a      	movs	r3, #10
 800cdae:	553b      	strb	r3, [r7, r4]
 800cdb0:	3401      	adds	r4, #1
 800cdb2:	e60b      	b.n	800c9cc <__strftime.isra.0+0x208>
 800cdb4:	68b3      	ldr	r3, [r6, #8]
 800cdb6:	2b0b      	cmp	r3, #11
 800cdb8:	4b6f      	ldr	r3, [pc, #444]	; (800cf78 <__strftime.isra.0+0x7b4>)
 800cdba:	bfd4      	ite	le
 800cdbc:	2200      	movle	r2, #0
 800cdbe:	2201      	movgt	r2, #1
 800cdc0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800cdc4:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 800cdc8:	4648      	mov	r0, r9
 800cdca:	f7f3 fa11 	bl	80001f0 <strlen>
 800cdce:	f109 32ff 	add.w	r2, r9, #4294967295
 800cdd2:	4420      	add	r0, r4
 800cdd4:	f105 3cff 	add.w	ip, r5, #4294967295
 800cdd8:	42a0      	cmp	r0, r4
 800cdda:	f43f adf7 	beq.w	800c9cc <__strftime.isra.0+0x208>
 800cdde:	45a4      	cmp	ip, r4
 800cde0:	f67f ad22 	bls.w	800c828 <__strftime.isra.0+0x64>
 800cde4:	f898 1000 	ldrb.w	r1, [r8]
 800cde8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800cdec:	2950      	cmp	r1, #80	; 0x50
 800cdee:	d107      	bne.n	800ce00 <__strftime.isra.0+0x63c>
 800cdf0:	4962      	ldr	r1, [pc, #392]	; (800cf7c <__strftime.isra.0+0x7b8>)
 800cdf2:	5cc9      	ldrb	r1, [r1, r3]
 800cdf4:	f001 0103 	and.w	r1, r1, #3
 800cdf8:	2901      	cmp	r1, #1
 800cdfa:	bf08      	it	eq
 800cdfc:	3320      	addeq	r3, #32
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	553b      	strb	r3, [r7, r4]
 800ce02:	3401      	adds	r4, #1
 800ce04:	e7e8      	b.n	800cdd8 <__strftime.isra.0+0x614>
 800ce06:	6873      	ldr	r3, [r6, #4]
 800ce08:	9300      	str	r3, [sp, #0]
 800ce0a:	4a5d      	ldr	r2, [pc, #372]	; (800cf80 <__strftime.isra.0+0x7bc>)
 800ce0c:	68b3      	ldr	r3, [r6, #8]
 800ce0e:	1b29      	subs	r1, r5, r4
 800ce10:	1938      	adds	r0, r7, r4
 800ce12:	f002 ff7d 	bl	800fd10 <sniprintf>
 800ce16:	e693      	b.n	800cb40 <__strftime.isra.0+0x37c>
 800ce18:	6a33      	ldr	r3, [r6, #32]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	db7a      	blt.n	800cf14 <__strftime.isra.0+0x750>
 800ce1e:	f000 fae5 	bl	800d3ec <__tz_lock>
 800ce22:	9b02      	ldr	r3, [sp, #8]
 800ce24:	b90b      	cbnz	r3, 800ce2a <__strftime.isra.0+0x666>
 800ce26:	f000 faed 	bl	800d404 <_tzset_unlocked>
 800ce2a:	f001 fdeb 	bl	800ea04 <__gettzinfo>
 800ce2e:	6a33      	ldr	r3, [r6, #32]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	bfd4      	ite	le
 800ce34:	2200      	movle	r2, #0
 800ce36:	2201      	movgt	r2, #1
 800ce38:	2328      	movs	r3, #40	; 0x28
 800ce3a:	fb02 3303 	mla	r3, r2, r3, r3
 800ce3e:	58c3      	ldr	r3, [r0, r3]
 800ce40:	f1c3 0900 	rsb	r9, r3, #0
 800ce44:	f000 fad8 	bl	800d3f8 <__tz_unlock>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	9302      	str	r3, [sp, #8]
 800ce4c:	6972      	ldr	r2, [r6, #20]
 800ce4e:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800ce52:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800ce56:	f16c 0c00 	sbc.w	ip, ip, #0
 800ce5a:	f1bc 0f00 	cmp.w	ip, #0
 800ce5e:	eba5 0104 	sub.w	r1, r5, r4
 800ce62:	eb07 0004 	add.w	r0, r7, r4
 800ce66:	da02      	bge.n	800ce6e <__strftime.isra.0+0x6aa>
 800ce68:	3303      	adds	r3, #3
 800ce6a:	f14c 0c00 	adc.w	ip, ip, #0
 800ce6e:	089b      	lsrs	r3, r3, #2
 800ce70:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800ce74:	f102 3aff 	add.w	sl, r2, #4294967295
 800ce78:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800ce7c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800ce80:	fb9a fefe 	sdiv	lr, sl, lr
 800ce84:	ebb3 030e 	subs.w	r3, r3, lr
 800ce88:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800ce8c:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800ce90:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800ce94:	fb9a fefe 	sdiv	lr, sl, lr
 800ce98:	eb13 030e 	adds.w	r3, r3, lr
 800ce9c:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800cea0:	3a46      	subs	r2, #70	; 0x46
 800cea2:	f240 1c6d 	movw	ip, #365	; 0x16d
 800cea6:	fb0c f202 	mul.w	r2, ip, r2
 800ceaa:	189b      	adds	r3, r3, r2
 800ceac:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800ceb0:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800ceb4:	f04f 0c18 	mov.w	ip, #24
 800ceb8:	eb13 030e 	adds.w	r3, r3, lr
 800cebc:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800cec0:	fba3 3e0c 	umull	r3, lr, r3, ip
 800cec4:	fb0c e202 	mla	r2, ip, r2, lr
 800cec8:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800cecc:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800ced0:	eb13 030e 	adds.w	r3, r3, lr
 800ced4:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800ced8:	fba3 320c 	umull	r3, r2, r3, ip
 800cedc:	fb0c 220e 	mla	r2, ip, lr, r2
 800cee0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800cee4:	eb13 030e 	adds.w	r3, r3, lr
 800cee8:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800ceec:	fba3 3e0c 	umull	r3, lr, r3, ip
 800cef0:	fb0c e202 	mla	r2, ip, r2, lr
 800cef4:	f8d6 e000 	ldr.w	lr, [r6]
 800cef8:	eb13 030e 	adds.w	r3, r3, lr
 800cefc:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800cf00:	ebb3 0309 	subs.w	r3, r3, r9
 800cf04:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800cf08:	e9cd 3200 	strd	r3, r2, [sp]
 800cf0c:	4a1d      	ldr	r2, [pc, #116]	; (800cf84 <__strftime.isra.0+0x7c0>)
 800cf0e:	f002 feff 	bl	800fd10 <sniprintf>
 800cf12:	e615      	b.n	800cb40 <__strftime.isra.0+0x37c>
 800cf14:	f04f 0900 	mov.w	r9, #0
 800cf18:	e798      	b.n	800ce4c <__strftime.isra.0+0x688>
 800cf1a:	6833      	ldr	r3, [r6, #0]
 800cf1c:	e67e      	b.n	800cc1c <__strftime.isra.0+0x458>
 800cf1e:	1e6b      	subs	r3, r5, #1
 800cf20:	429c      	cmp	r4, r3
 800cf22:	f4bf ac81 	bcs.w	800c828 <__strftime.isra.0+0x64>
 800cf26:	2309      	movs	r3, #9
 800cf28:	e741      	b.n	800cdae <__strftime.isra.0+0x5ea>
 800cf2a:	6833      	ldr	r3, [r6, #0]
 800cf2c:	9301      	str	r3, [sp, #4]
 800cf2e:	6873      	ldr	r3, [r6, #4]
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	4a15      	ldr	r2, [pc, #84]	; (800cf88 <__strftime.isra.0+0x7c4>)
 800cf34:	68b3      	ldr	r3, [r6, #8]
 800cf36:	e5f4      	b.n	800cb22 <__strftime.isra.0+0x35e>
 800cf38:	1e6b      	subs	r3, r5, #1
 800cf3a:	429c      	cmp	r4, r3
 800cf3c:	f4bf ac74 	bcs.w	800c828 <__strftime.isra.0+0x64>
 800cf40:	69b3      	ldr	r3, [r6, #24]
 800cf42:	1c62      	adds	r2, r4, #1
 800cf44:	b91b      	cbnz	r3, 800cf4e <__strftime.isra.0+0x78a>
 800cf46:	2337      	movs	r3, #55	; 0x37
 800cf48:	553b      	strb	r3, [r7, r4]
 800cf4a:	4614      	mov	r4, r2
 800cf4c:	e53e      	b.n	800c9cc <__strftime.isra.0+0x208>
 800cf4e:	3330      	adds	r3, #48	; 0x30
 800cf50:	e7fa      	b.n	800cf48 <__strftime.isra.0+0x784>
 800cf52:	69f3      	ldr	r3, [r6, #28]
 800cf54:	69b2      	ldr	r2, [r6, #24]
 800cf56:	3307      	adds	r3, #7
 800cf58:	1a9b      	subs	r3, r3, r2
 800cf5a:	2207      	movs	r2, #7
 800cf5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf60:	e65c      	b.n	800cc1c <__strftime.isra.0+0x458>
 800cf62:	bf00      	nop
 800cf64:	fffff894 	.word	0xfffff894
 800cf68:	fffff895 	.word	0xfffff895
 800cf6c:	0803c8f4 	.word	0x0803c8f4
 800cf70:	0803c902 	.word	0x0803c902
 800cf74:	0803c917 	.word	0x0803c917
 800cf78:	0803ca68 	.word	0x0803ca68
 800cf7c:	0803cba1 	.word	0x0803cba1
 800cf80:	0803c926 	.word	0x0803c926
 800cf84:	0803c91c 	.word	0x0803c91c
 800cf88:	0803c921 	.word	0x0803c921
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	f7ff fbb7 	bl	800c700 <iso_year_adjust>
 800cf92:	69b2      	ldr	r2, [r6, #24]
 800cf94:	b132      	cbz	r2, 800cfa4 <__strftime.isra.0+0x7e0>
 800cf96:	3a01      	subs	r2, #1
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	dc28      	bgt.n	800cfee <__strftime.isra.0+0x82a>
 800cf9c:	69f3      	ldr	r3, [r6, #28]
 800cf9e:	d103      	bne.n	800cfa8 <__strftime.isra.0+0x7e4>
 800cfa0:	330a      	adds	r3, #10
 800cfa2:	e7d9      	b.n	800cf58 <__strftime.isra.0+0x794>
 800cfa4:	2206      	movs	r2, #6
 800cfa6:	e7f7      	b.n	800cf98 <__strftime.isra.0+0x7d4>
 800cfa8:	6971      	ldr	r1, [r6, #20]
 800cfaa:	2900      	cmp	r1, #0
 800cfac:	eba2 0203 	sub.w	r2, r2, r3
 800cfb0:	f240 736b 	movw	r3, #1899	; 0x76b
 800cfb4:	bfa8      	it	ge
 800cfb6:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800cfba:	440b      	add	r3, r1
 800cfbc:	0799      	lsls	r1, r3, #30
 800cfbe:	d105      	bne.n	800cfcc <__strftime.isra.0+0x808>
 800cfc0:	2064      	movs	r0, #100	; 0x64
 800cfc2:	fb93 f1f0 	sdiv	r1, r3, r0
 800cfc6:	fb00 3111 	mls	r1, r0, r1, r3
 800cfca:	b971      	cbnz	r1, 800cfea <__strftime.isra.0+0x826>
 800cfcc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800cfd0:	fb93 f0f1 	sdiv	r0, r3, r1
 800cfd4:	fb01 3310 	mls	r3, r1, r0, r3
 800cfd8:	fab3 f383 	clz	r3, r3
 800cfdc:	095b      	lsrs	r3, r3, #5
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	2b05      	cmp	r3, #5
 800cfe2:	bfb4      	ite	lt
 800cfe4:	2335      	movlt	r3, #53	; 0x35
 800cfe6:	2334      	movge	r3, #52	; 0x34
 800cfe8:	e618      	b.n	800cc1c <__strftime.isra.0+0x458>
 800cfea:	2301      	movs	r3, #1
 800cfec:	e7f7      	b.n	800cfde <__strftime.isra.0+0x81a>
 800cfee:	2301      	movs	r3, #1
 800cff0:	e614      	b.n	800cc1c <__strftime.isra.0+0x458>
 800cff2:	1e6b      	subs	r3, r5, #1
 800cff4:	429c      	cmp	r4, r3
 800cff6:	f4bf ac17 	bcs.w	800c828 <__strftime.isra.0+0x64>
 800cffa:	69b3      	ldr	r3, [r6, #24]
 800cffc:	3330      	adds	r3, #48	; 0x30
 800cffe:	e6d6      	b.n	800cdae <__strftime.isra.0+0x5ea>
 800d000:	69b2      	ldr	r2, [r6, #24]
 800d002:	b11a      	cbz	r2, 800d00c <__strftime.isra.0+0x848>
 800d004:	3a01      	subs	r2, #1
 800d006:	69f3      	ldr	r3, [r6, #28]
 800d008:	3307      	adds	r3, #7
 800d00a:	e7a5      	b.n	800cf58 <__strftime.isra.0+0x794>
 800d00c:	2206      	movs	r2, #6
 800d00e:	e7fa      	b.n	800d006 <__strftime.isra.0+0x842>
 800d010:	6970      	ldr	r0, [r6, #20]
 800d012:	2800      	cmp	r0, #0
 800d014:	db05      	blt.n	800d022 <__strftime.isra.0+0x85e>
 800d016:	2364      	movs	r3, #100	; 0x64
 800d018:	fb90 f2f3 	sdiv	r2, r0, r3
 800d01c:	fb02 0313 	mls	r3, r2, r3, r0
 800d020:	e5fc      	b.n	800cc1c <__strftime.isra.0+0x458>
 800d022:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800d026:	f000 fc4c 	bl	800d8c2 <abs>
 800d02a:	e7f4      	b.n	800d016 <__strftime.isra.0+0x852>
 800d02c:	6972      	ldr	r2, [r6, #20]
 800d02e:	494c      	ldr	r1, [pc, #304]	; (800d160 <__strftime.isra.0+0x99c>)
 800d030:	428a      	cmp	r2, r1
 800d032:	da05      	bge.n	800d040 <__strftime.isra.0+0x87c>
 800d034:	202d      	movs	r0, #45	; 0x2d
 800d036:	f88d 0018 	strb.w	r0, [sp, #24]
 800d03a:	eba1 0a02 	sub.w	sl, r1, r2
 800d03e:	e657      	b.n	800ccf0 <__strftime.isra.0+0x52c>
 800d040:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800d044:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800d048:	d106      	bne.n	800d058 <__strftime.isra.0+0x894>
 800d04a:	f242 720f 	movw	r2, #9999	; 0x270f
 800d04e:	4592      	cmp	sl, r2
 800d050:	d902      	bls.n	800d058 <__strftime.isra.0+0x894>
 800d052:	f88d b018 	strb.w	fp, [sp, #24]
 800d056:	e64b      	b.n	800ccf0 <__strftime.isra.0+0x52c>
 800d058:	aa06      	add	r2, sp, #24
 800d05a:	2125      	movs	r1, #37	; 0x25
 800d05c:	7011      	strb	r1, [r2, #0]
 800d05e:	f1bb 0f00 	cmp.w	fp, #0
 800d062:	d108      	bne.n	800d076 <__strftime.isra.0+0x8b2>
 800d064:	1c50      	adds	r0, r2, #1
 800d066:	493f      	ldr	r1, [pc, #252]	; (800d164 <__strftime.isra.0+0x9a0>)
 800d068:	f002 fe86 	bl	800fd78 <strcpy>
 800d06c:	f8cd a000 	str.w	sl, [sp]
 800d070:	464b      	mov	r3, r9
 800d072:	aa06      	add	r2, sp, #24
 800d074:	e6cb      	b.n	800ce0e <__strftime.isra.0+0x64a>
 800d076:	2330      	movs	r3, #48	; 0x30
 800d078:	1c90      	adds	r0, r2, #2
 800d07a:	7053      	strb	r3, [r2, #1]
 800d07c:	e7f3      	b.n	800d066 <__strftime.isra.0+0x8a2>
 800d07e:	6a33      	ldr	r3, [r6, #32]
 800d080:	2b00      	cmp	r3, #0
 800d082:	f6ff aca3 	blt.w	800c9cc <__strftime.isra.0+0x208>
 800d086:	f000 f9b1 	bl	800d3ec <__tz_lock>
 800d08a:	9b02      	ldr	r3, [sp, #8]
 800d08c:	b90b      	cbnz	r3, 800d092 <__strftime.isra.0+0x8ce>
 800d08e:	f000 f9b9 	bl	800d404 <_tzset_unlocked>
 800d092:	f001 fcb7 	bl	800ea04 <__gettzinfo>
 800d096:	6a33      	ldr	r3, [r6, #32]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	bfd4      	ite	le
 800d09c:	2200      	movle	r2, #0
 800d09e:	2201      	movgt	r2, #1
 800d0a0:	2328      	movs	r3, #40	; 0x28
 800d0a2:	fb02 3303 	mla	r3, r2, r3, r3
 800d0a6:	eb07 0a04 	add.w	sl, r7, r4
 800d0aa:	58c3      	ldr	r3, [r0, r3]
 800d0ac:	f1c3 0900 	rsb	r9, r3, #0
 800d0b0:	f000 f9a2 	bl	800d3f8 <__tz_unlock>
 800d0b4:	233c      	movs	r3, #60	; 0x3c
 800d0b6:	fb99 f0f3 	sdiv	r0, r9, r3
 800d0ba:	f001 fca7 	bl	800ea0c <labs>
 800d0be:	233c      	movs	r3, #60	; 0x3c
 800d0c0:	eba5 0b04 	sub.w	fp, r5, r4
 800d0c4:	fb90 f2f3 	sdiv	r2, r0, r3
 800d0c8:	fb02 0013 	mls	r0, r2, r3, r0
 800d0cc:	9000      	str	r0, [sp, #0]
 800d0ce:	4a26      	ldr	r2, [pc, #152]	; (800d168 <__strftime.isra.0+0x9a4>)
 800d0d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d0d4:	4659      	mov	r1, fp
 800d0d6:	4650      	mov	r0, sl
 800d0d8:	fb99 f3f3 	sdiv	r3, r9, r3
 800d0dc:	f002 fe18 	bl	800fd10 <sniprintf>
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	f6ff aba1 	blt.w	800c828 <__strftime.isra.0+0x64>
 800d0e6:	4404      	add	r4, r0
 800d0e8:	42a5      	cmp	r5, r4
 800d0ea:	f67f ab9d 	bls.w	800c828 <__strftime.isra.0+0x64>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	9302      	str	r3, [sp, #8]
 800d0f2:	e46b      	b.n	800c9cc <__strftime.isra.0+0x208>
 800d0f4:	6a33      	ldr	r3, [r6, #32]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f6ff ac68 	blt.w	800c9cc <__strftime.isra.0+0x208>
 800d0fc:	f000 f976 	bl	800d3ec <__tz_lock>
 800d100:	9b02      	ldr	r3, [sp, #8]
 800d102:	b90b      	cbnz	r3, 800d108 <__strftime.isra.0+0x944>
 800d104:	f000 f97e 	bl	800d404 <_tzset_unlocked>
 800d108:	6a33      	ldr	r3, [r6, #32]
 800d10a:	4a18      	ldr	r2, [pc, #96]	; (800d16c <__strftime.isra.0+0x9a8>)
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	bfd4      	ite	le
 800d110:	2300      	movle	r3, #0
 800d112:	2301      	movgt	r3, #1
 800d114:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800d118:	4648      	mov	r0, r9
 800d11a:	f7f3 f869 	bl	80001f0 <strlen>
 800d11e:	f109 39ff 	add.w	r9, r9, #4294967295
 800d122:	4420      	add	r0, r4
 800d124:	1e6b      	subs	r3, r5, #1
 800d126:	42a0      	cmp	r0, r4
 800d128:	d102      	bne.n	800d130 <__strftime.isra.0+0x96c>
 800d12a:	f000 f965 	bl	800d3f8 <__tz_unlock>
 800d12e:	e7de      	b.n	800d0ee <__strftime.isra.0+0x92a>
 800d130:	42a3      	cmp	r3, r4
 800d132:	d904      	bls.n	800d13e <__strftime.isra.0+0x97a>
 800d134:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d138:	553a      	strb	r2, [r7, r4]
 800d13a:	3401      	adds	r4, #1
 800d13c:	e7f3      	b.n	800d126 <__strftime.isra.0+0x962>
 800d13e:	f000 f95b 	bl	800d3f8 <__tz_unlock>
 800d142:	f7ff bb71 	b.w	800c828 <__strftime.isra.0+0x64>
 800d146:	1e6b      	subs	r3, r5, #1
 800d148:	429c      	cmp	r4, r3
 800d14a:	f4bf ab6d 	bcs.w	800c828 <__strftime.isra.0+0x64>
 800d14e:	2325      	movs	r3, #37	; 0x25
 800d150:	e62d      	b.n	800cdae <__strftime.isra.0+0x5ea>
 800d152:	b10d      	cbz	r5, 800d158 <__strftime.isra.0+0x994>
 800d154:	2300      	movs	r3, #0
 800d156:	553b      	strb	r3, [r7, r4]
 800d158:	4620      	mov	r0, r4
 800d15a:	b00f      	add	sp, #60	; 0x3c
 800d15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d160:	fffff894 	.word	0xfffff894
 800d164:	0803c913 	.word	0x0803c913
 800d168:	0803c930 	.word	0x0803c930
 800d16c:	20000320 	.word	0x20000320

0800d170 <strftime>:
 800d170:	f7ff bb28 	b.w	800c7c4 <__strftime.isra.0>

0800d174 <strncpy>:
 800d174:	b510      	push	{r4, lr}
 800d176:	3901      	subs	r1, #1
 800d178:	4603      	mov	r3, r0
 800d17a:	b132      	cbz	r2, 800d18a <strncpy+0x16>
 800d17c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d180:	f803 4b01 	strb.w	r4, [r3], #1
 800d184:	3a01      	subs	r2, #1
 800d186:	2c00      	cmp	r4, #0
 800d188:	d1f7      	bne.n	800d17a <strncpy+0x6>
 800d18a:	441a      	add	r2, r3
 800d18c:	2100      	movs	r1, #0
 800d18e:	4293      	cmp	r3, r2
 800d190:	d100      	bne.n	800d194 <strncpy+0x20>
 800d192:	bd10      	pop	{r4, pc}
 800d194:	f803 1b01 	strb.w	r1, [r3], #1
 800d198:	e7f9      	b.n	800d18e <strncpy+0x1a>
	...

0800d19c <_strtoul_l.constprop.0>:
 800d19c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1a0:	4f36      	ldr	r7, [pc, #216]	; (800d27c <_strtoul_l.constprop.0+0xe0>)
 800d1a2:	4686      	mov	lr, r0
 800d1a4:	460d      	mov	r5, r1
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1ac:	5de6      	ldrb	r6, [r4, r7]
 800d1ae:	f016 0608 	ands.w	r6, r6, #8
 800d1b2:	d1f8      	bne.n	800d1a6 <_strtoul_l.constprop.0+0xa>
 800d1b4:	2c2d      	cmp	r4, #45	; 0x2d
 800d1b6:	d12f      	bne.n	800d218 <_strtoul_l.constprop.0+0x7c>
 800d1b8:	782c      	ldrb	r4, [r5, #0]
 800d1ba:	2601      	movs	r6, #1
 800d1bc:	1c85      	adds	r5, r0, #2
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d057      	beq.n	800d272 <_strtoul_l.constprop.0+0xd6>
 800d1c2:	2b10      	cmp	r3, #16
 800d1c4:	d109      	bne.n	800d1da <_strtoul_l.constprop.0+0x3e>
 800d1c6:	2c30      	cmp	r4, #48	; 0x30
 800d1c8:	d107      	bne.n	800d1da <_strtoul_l.constprop.0+0x3e>
 800d1ca:	7828      	ldrb	r0, [r5, #0]
 800d1cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d1d0:	2858      	cmp	r0, #88	; 0x58
 800d1d2:	d149      	bne.n	800d268 <_strtoul_l.constprop.0+0xcc>
 800d1d4:	786c      	ldrb	r4, [r5, #1]
 800d1d6:	2310      	movs	r3, #16
 800d1d8:	3502      	adds	r5, #2
 800d1da:	f04f 38ff 	mov.w	r8, #4294967295
 800d1de:	2700      	movs	r7, #0
 800d1e0:	fbb8 f8f3 	udiv	r8, r8, r3
 800d1e4:	fb03 f908 	mul.w	r9, r3, r8
 800d1e8:	ea6f 0909 	mvn.w	r9, r9
 800d1ec:	4638      	mov	r0, r7
 800d1ee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d1f2:	f1bc 0f09 	cmp.w	ip, #9
 800d1f6:	d814      	bhi.n	800d222 <_strtoul_l.constprop.0+0x86>
 800d1f8:	4664      	mov	r4, ip
 800d1fa:	42a3      	cmp	r3, r4
 800d1fc:	dd22      	ble.n	800d244 <_strtoul_l.constprop.0+0xa8>
 800d1fe:	2f00      	cmp	r7, #0
 800d200:	db1d      	blt.n	800d23e <_strtoul_l.constprop.0+0xa2>
 800d202:	4580      	cmp	r8, r0
 800d204:	d31b      	bcc.n	800d23e <_strtoul_l.constprop.0+0xa2>
 800d206:	d101      	bne.n	800d20c <_strtoul_l.constprop.0+0x70>
 800d208:	45a1      	cmp	r9, r4
 800d20a:	db18      	blt.n	800d23e <_strtoul_l.constprop.0+0xa2>
 800d20c:	fb00 4003 	mla	r0, r0, r3, r4
 800d210:	2701      	movs	r7, #1
 800d212:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d216:	e7ea      	b.n	800d1ee <_strtoul_l.constprop.0+0x52>
 800d218:	2c2b      	cmp	r4, #43	; 0x2b
 800d21a:	bf04      	itt	eq
 800d21c:	782c      	ldrbeq	r4, [r5, #0]
 800d21e:	1c85      	addeq	r5, r0, #2
 800d220:	e7cd      	b.n	800d1be <_strtoul_l.constprop.0+0x22>
 800d222:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d226:	f1bc 0f19 	cmp.w	ip, #25
 800d22a:	d801      	bhi.n	800d230 <_strtoul_l.constprop.0+0x94>
 800d22c:	3c37      	subs	r4, #55	; 0x37
 800d22e:	e7e4      	b.n	800d1fa <_strtoul_l.constprop.0+0x5e>
 800d230:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d234:	f1bc 0f19 	cmp.w	ip, #25
 800d238:	d804      	bhi.n	800d244 <_strtoul_l.constprop.0+0xa8>
 800d23a:	3c57      	subs	r4, #87	; 0x57
 800d23c:	e7dd      	b.n	800d1fa <_strtoul_l.constprop.0+0x5e>
 800d23e:	f04f 37ff 	mov.w	r7, #4294967295
 800d242:	e7e6      	b.n	800d212 <_strtoul_l.constprop.0+0x76>
 800d244:	2f00      	cmp	r7, #0
 800d246:	da07      	bge.n	800d258 <_strtoul_l.constprop.0+0xbc>
 800d248:	2322      	movs	r3, #34	; 0x22
 800d24a:	f8ce 3000 	str.w	r3, [lr]
 800d24e:	f04f 30ff 	mov.w	r0, #4294967295
 800d252:	b932      	cbnz	r2, 800d262 <_strtoul_l.constprop.0+0xc6>
 800d254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d258:	b106      	cbz	r6, 800d25c <_strtoul_l.constprop.0+0xc0>
 800d25a:	4240      	negs	r0, r0
 800d25c:	2a00      	cmp	r2, #0
 800d25e:	d0f9      	beq.n	800d254 <_strtoul_l.constprop.0+0xb8>
 800d260:	b107      	cbz	r7, 800d264 <_strtoul_l.constprop.0+0xc8>
 800d262:	1e69      	subs	r1, r5, #1
 800d264:	6011      	str	r1, [r2, #0]
 800d266:	e7f5      	b.n	800d254 <_strtoul_l.constprop.0+0xb8>
 800d268:	2430      	movs	r4, #48	; 0x30
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d1b5      	bne.n	800d1da <_strtoul_l.constprop.0+0x3e>
 800d26e:	2308      	movs	r3, #8
 800d270:	e7b3      	b.n	800d1da <_strtoul_l.constprop.0+0x3e>
 800d272:	2c30      	cmp	r4, #48	; 0x30
 800d274:	d0a9      	beq.n	800d1ca <_strtoul_l.constprop.0+0x2e>
 800d276:	230a      	movs	r3, #10
 800d278:	e7af      	b.n	800d1da <_strtoul_l.constprop.0+0x3e>
 800d27a:	bf00      	nop
 800d27c:	0803cba1 	.word	0x0803cba1

0800d280 <_strtoul_r>:
 800d280:	f7ff bf8c 	b.w	800d19c <_strtoul_l.constprop.0>

0800d284 <strtoul>:
 800d284:	4613      	mov	r3, r2
 800d286:	460a      	mov	r2, r1
 800d288:	4601      	mov	r1, r0
 800d28a:	4802      	ldr	r0, [pc, #8]	; (800d294 <strtoul+0x10>)
 800d28c:	6800      	ldr	r0, [r0, #0]
 800d28e:	f7ff bf85 	b.w	800d19c <_strtoul_l.constprop.0>
 800d292:	bf00      	nop
 800d294:	200002bc 	.word	0x200002bc

0800d298 <__tzcalc_limits>:
 800d298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29c:	4605      	mov	r5, r0
 800d29e:	f001 fbb1 	bl	800ea04 <__gettzinfo>
 800d2a2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800d2a6:	429d      	cmp	r5, r3
 800d2a8:	f340 8099 	ble.w	800d3de <__tzcalc_limits+0x146>
 800d2ac:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800d2b0:	18ac      	adds	r4, r5, r2
 800d2b2:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800d2b6:	f240 126d 	movw	r2, #365	; 0x16d
 800d2ba:	10a4      	asrs	r4, r4, #2
 800d2bc:	fb02 4403 	mla	r4, r2, r3, r4
 800d2c0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800d2c4:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800d2c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2cc:	441c      	add	r4, r3
 800d2ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800d2d2:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800d2d6:	fb95 fcf3 	sdiv	ip, r5, r3
 800d2da:	fb03 5c1c 	mls	ip, r3, ip, r5
 800d2de:	186a      	adds	r2, r5, r1
 800d2e0:	fabc f68c 	clz	r6, ip
 800d2e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800d2e8:	f005 0303 	and.w	r3, r5, #3
 800d2ec:	4414      	add	r4, r2
 800d2ee:	2264      	movs	r2, #100	; 0x64
 800d2f0:	6045      	str	r5, [r0, #4]
 800d2f2:	fb95 f7f2 	sdiv	r7, r5, r2
 800d2f6:	0976      	lsrs	r6, r6, #5
 800d2f8:	fb02 5717 	mls	r7, r2, r7, r5
 800d2fc:	4601      	mov	r1, r0
 800d2fe:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	f04f 0a07 	mov.w	sl, #7
 800d308:	7a0d      	ldrb	r5, [r1, #8]
 800d30a:	694b      	ldr	r3, [r1, #20]
 800d30c:	2d4a      	cmp	r5, #74	; 0x4a
 800d30e:	d12d      	bne.n	800d36c <__tzcalc_limits+0xd4>
 800d310:	9a00      	ldr	r2, [sp, #0]
 800d312:	eb04 0e03 	add.w	lr, r4, r3
 800d316:	b902      	cbnz	r2, 800d31a <__tzcalc_limits+0x82>
 800d318:	b917      	cbnz	r7, 800d320 <__tzcalc_limits+0x88>
 800d31a:	f1bc 0f00 	cmp.w	ip, #0
 800d31e:	d123      	bne.n	800d368 <__tzcalc_limits+0xd0>
 800d320:	2b3b      	cmp	r3, #59	; 0x3b
 800d322:	bfd4      	ite	le
 800d324:	2300      	movle	r3, #0
 800d326:	2301      	movgt	r3, #1
 800d328:	4473      	add	r3, lr
 800d32a:	3b01      	subs	r3, #1
 800d32c:	698d      	ldr	r5, [r1, #24]
 800d32e:	4a2d      	ldr	r2, [pc, #180]	; (800d3e4 <__tzcalc_limits+0x14c>)
 800d330:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800d334:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800d338:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800d33a:	18ed      	adds	r5, r5, r3
 800d33c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800d340:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800d344:	3128      	adds	r1, #40	; 0x28
 800d346:	458b      	cmp	fp, r1
 800d348:	d1de      	bne.n	800d308 <__tzcalc_limits+0x70>
 800d34a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800d34e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800d352:	428c      	cmp	r4, r1
 800d354:	eb72 0303 	sbcs.w	r3, r2, r3
 800d358:	bfb4      	ite	lt
 800d35a:	2301      	movlt	r3, #1
 800d35c:	2300      	movge	r3, #0
 800d35e:	6003      	str	r3, [r0, #0]
 800d360:	2001      	movs	r0, #1
 800d362:	b003      	add	sp, #12
 800d364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d368:	2300      	movs	r3, #0
 800d36a:	e7dd      	b.n	800d328 <__tzcalc_limits+0x90>
 800d36c:	2d44      	cmp	r5, #68	; 0x44
 800d36e:	d101      	bne.n	800d374 <__tzcalc_limits+0xdc>
 800d370:	4423      	add	r3, r4
 800d372:	e7db      	b.n	800d32c <__tzcalc_limits+0x94>
 800d374:	9a00      	ldr	r2, [sp, #0]
 800d376:	bb62      	cbnz	r2, 800d3d2 <__tzcalc_limits+0x13a>
 800d378:	2f00      	cmp	r7, #0
 800d37a:	bf0c      	ite	eq
 800d37c:	4635      	moveq	r5, r6
 800d37e:	2501      	movne	r5, #1
 800d380:	68ca      	ldr	r2, [r1, #12]
 800d382:	9201      	str	r2, [sp, #4]
 800d384:	4a18      	ldr	r2, [pc, #96]	; (800d3e8 <__tzcalc_limits+0x150>)
 800d386:	f04f 0930 	mov.w	r9, #48	; 0x30
 800d38a:	fb09 2505 	mla	r5, r9, r5, r2
 800d38e:	46a6      	mov	lr, r4
 800d390:	f04f 0800 	mov.w	r8, #0
 800d394:	3d04      	subs	r5, #4
 800d396:	9a01      	ldr	r2, [sp, #4]
 800d398:	f108 0801 	add.w	r8, r8, #1
 800d39c:	4542      	cmp	r2, r8
 800d39e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800d3a2:	dc18      	bgt.n	800d3d6 <__tzcalc_limits+0x13e>
 800d3a4:	f10e 0504 	add.w	r5, lr, #4
 800d3a8:	fb95 f8fa 	sdiv	r8, r5, sl
 800d3ac:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800d3b0:	eba5 0808 	sub.w	r8, r5, r8
 800d3b4:	ebb3 0808 	subs.w	r8, r3, r8
 800d3b8:	690b      	ldr	r3, [r1, #16]
 800d3ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800d3be:	bf48      	it	mi
 800d3c0:	f108 0807 	addmi.w	r8, r8, #7
 800d3c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d3c8:	4443      	add	r3, r8
 800d3ca:	454b      	cmp	r3, r9
 800d3cc:	da05      	bge.n	800d3da <__tzcalc_limits+0x142>
 800d3ce:	4473      	add	r3, lr
 800d3d0:	e7ac      	b.n	800d32c <__tzcalc_limits+0x94>
 800d3d2:	4635      	mov	r5, r6
 800d3d4:	e7d4      	b.n	800d380 <__tzcalc_limits+0xe8>
 800d3d6:	44ce      	add	lr, r9
 800d3d8:	e7dd      	b.n	800d396 <__tzcalc_limits+0xfe>
 800d3da:	3b07      	subs	r3, #7
 800d3dc:	e7f5      	b.n	800d3ca <__tzcalc_limits+0x132>
 800d3de:	2000      	movs	r0, #0
 800d3e0:	e7bf      	b.n	800d362 <__tzcalc_limits+0xca>
 800d3e2:	bf00      	nop
 800d3e4:	00015180 	.word	0x00015180
 800d3e8:	0803cd7c 	.word	0x0803cd7c

0800d3ec <__tz_lock>:
 800d3ec:	4801      	ldr	r0, [pc, #4]	; (800d3f4 <__tz_lock+0x8>)
 800d3ee:	f001 bb16 	b.w	800ea1e <__retarget_lock_acquire>
 800d3f2:	bf00      	nop
 800d3f4:	200037dc 	.word	0x200037dc

0800d3f8 <__tz_unlock>:
 800d3f8:	4801      	ldr	r0, [pc, #4]	; (800d400 <__tz_unlock+0x8>)
 800d3fa:	f001 bb12 	b.w	800ea22 <__retarget_lock_release>
 800d3fe:	bf00      	nop
 800d400:	200037dc 	.word	0x200037dc

0800d404 <_tzset_unlocked>:
 800d404:	4b01      	ldr	r3, [pc, #4]	; (800d40c <_tzset_unlocked+0x8>)
 800d406:	6818      	ldr	r0, [r3, #0]
 800d408:	f000 b802 	b.w	800d410 <_tzset_unlocked_r>
 800d40c:	200002bc 	.word	0x200002bc

0800d410 <_tzset_unlocked_r>:
 800d410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d414:	b08d      	sub	sp, #52	; 0x34
 800d416:	4607      	mov	r7, r0
 800d418:	f001 faf4 	bl	800ea04 <__gettzinfo>
 800d41c:	49b0      	ldr	r1, [pc, #704]	; (800d6e0 <_tzset_unlocked_r+0x2d0>)
 800d41e:	4eb1      	ldr	r6, [pc, #708]	; (800d6e4 <_tzset_unlocked_r+0x2d4>)
 800d420:	4605      	mov	r5, r0
 800d422:	4638      	mov	r0, r7
 800d424:	f001 fae6 	bl	800e9f4 <_getenv_r>
 800d428:	4604      	mov	r4, r0
 800d42a:	b970      	cbnz	r0, 800d44a <_tzset_unlocked_r+0x3a>
 800d42c:	4bae      	ldr	r3, [pc, #696]	; (800d6e8 <_tzset_unlocked_r+0x2d8>)
 800d42e:	4aaf      	ldr	r2, [pc, #700]	; (800d6ec <_tzset_unlocked_r+0x2dc>)
 800d430:	6018      	str	r0, [r3, #0]
 800d432:	4baf      	ldr	r3, [pc, #700]	; (800d6f0 <_tzset_unlocked_r+0x2e0>)
 800d434:	6018      	str	r0, [r3, #0]
 800d436:	4baf      	ldr	r3, [pc, #700]	; (800d6f4 <_tzset_unlocked_r+0x2e4>)
 800d438:	6830      	ldr	r0, [r6, #0]
 800d43a:	e9c3 2200 	strd	r2, r2, [r3]
 800d43e:	f7fd ff89 	bl	800b354 <free>
 800d442:	6034      	str	r4, [r6, #0]
 800d444:	b00d      	add	sp, #52	; 0x34
 800d446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44a:	6831      	ldr	r1, [r6, #0]
 800d44c:	2900      	cmp	r1, #0
 800d44e:	d162      	bne.n	800d516 <_tzset_unlocked_r+0x106>
 800d450:	6830      	ldr	r0, [r6, #0]
 800d452:	f7fd ff7f 	bl	800b354 <free>
 800d456:	4620      	mov	r0, r4
 800d458:	f7f2 feca 	bl	80001f0 <strlen>
 800d45c:	1c41      	adds	r1, r0, #1
 800d45e:	4638      	mov	r0, r7
 800d460:	f7fe fa74 	bl	800b94c <_malloc_r>
 800d464:	6030      	str	r0, [r6, #0]
 800d466:	2800      	cmp	r0, #0
 800d468:	d15a      	bne.n	800d520 <_tzset_unlocked_r+0x110>
 800d46a:	7823      	ldrb	r3, [r4, #0]
 800d46c:	4aa2      	ldr	r2, [pc, #648]	; (800d6f8 <_tzset_unlocked_r+0x2e8>)
 800d46e:	49a3      	ldr	r1, [pc, #652]	; (800d6fc <_tzset_unlocked_r+0x2ec>)
 800d470:	2b3a      	cmp	r3, #58	; 0x3a
 800d472:	bf08      	it	eq
 800d474:	3401      	addeq	r4, #1
 800d476:	ae0a      	add	r6, sp, #40	; 0x28
 800d478:	4633      	mov	r3, r6
 800d47a:	4620      	mov	r0, r4
 800d47c:	f7ff f8ce 	bl	800c61c <siscanf>
 800d480:	2800      	cmp	r0, #0
 800d482:	dddf      	ble.n	800d444 <_tzset_unlocked_r+0x34>
 800d484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d486:	18e7      	adds	r7, r4, r3
 800d488:	5ce3      	ldrb	r3, [r4, r3]
 800d48a:	2b2d      	cmp	r3, #45	; 0x2d
 800d48c:	d14c      	bne.n	800d528 <_tzset_unlocked_r+0x118>
 800d48e:	3701      	adds	r7, #1
 800d490:	f04f 38ff 	mov.w	r8, #4294967295
 800d494:	f10d 0a20 	add.w	sl, sp, #32
 800d498:	f10d 0b1e 	add.w	fp, sp, #30
 800d49c:	2400      	movs	r4, #0
 800d49e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800d4a2:	4997      	ldr	r1, [pc, #604]	; (800d700 <_tzset_unlocked_r+0x2f0>)
 800d4a4:	9603      	str	r6, [sp, #12]
 800d4a6:	f8cd b000 	str.w	fp, [sp]
 800d4aa:	4633      	mov	r3, r6
 800d4ac:	aa07      	add	r2, sp, #28
 800d4ae:	4638      	mov	r0, r7
 800d4b0:	f8ad 401e 	strh.w	r4, [sp, #30]
 800d4b4:	f8ad 4020 	strh.w	r4, [sp, #32]
 800d4b8:	f7ff f8b0 	bl	800c61c <siscanf>
 800d4bc:	42a0      	cmp	r0, r4
 800d4be:	ddc1      	ble.n	800d444 <_tzset_unlocked_r+0x34>
 800d4c0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d4c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d4c8:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800d70c <_tzset_unlocked_r+0x2fc>
 800d4cc:	213c      	movs	r1, #60	; 0x3c
 800d4ce:	fb01 3302 	mla	r3, r1, r2, r3
 800d4d2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800d4d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d4da:	fb01 3302 	mla	r3, r1, r2, r3
 800d4de:	fb08 f303 	mul.w	r3, r8, r3
 800d4e2:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800d6f4 <_tzset_unlocked_r+0x2e4>
 800d4e6:	62ab      	str	r3, [r5, #40]	; 0x28
 800d4e8:	4b83      	ldr	r3, [pc, #524]	; (800d6f8 <_tzset_unlocked_r+0x2e8>)
 800d4ea:	f8c8 3000 	str.w	r3, [r8]
 800d4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4f0:	4982      	ldr	r1, [pc, #520]	; (800d6fc <_tzset_unlocked_r+0x2ec>)
 800d4f2:	441f      	add	r7, r3
 800d4f4:	464a      	mov	r2, r9
 800d4f6:	4633      	mov	r3, r6
 800d4f8:	4638      	mov	r0, r7
 800d4fa:	f7ff f88f 	bl	800c61c <siscanf>
 800d4fe:	42a0      	cmp	r0, r4
 800d500:	dc18      	bgt.n	800d534 <_tzset_unlocked_r+0x124>
 800d502:	f8d8 3000 	ldr.w	r3, [r8]
 800d506:	f8c8 3004 	str.w	r3, [r8, #4]
 800d50a:	4b77      	ldr	r3, [pc, #476]	; (800d6e8 <_tzset_unlocked_r+0x2d8>)
 800d50c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d50e:	601a      	str	r2, [r3, #0]
 800d510:	4b77      	ldr	r3, [pc, #476]	; (800d6f0 <_tzset_unlocked_r+0x2e0>)
 800d512:	601c      	str	r4, [r3, #0]
 800d514:	e796      	b.n	800d444 <_tzset_unlocked_r+0x34>
 800d516:	f7f2 fec3 	bl	80002a0 <strcmp>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	d198      	bne.n	800d450 <_tzset_unlocked_r+0x40>
 800d51e:	e791      	b.n	800d444 <_tzset_unlocked_r+0x34>
 800d520:	4621      	mov	r1, r4
 800d522:	f002 fc29 	bl	800fd78 <strcpy>
 800d526:	e7a0      	b.n	800d46a <_tzset_unlocked_r+0x5a>
 800d528:	2b2b      	cmp	r3, #43	; 0x2b
 800d52a:	bf08      	it	eq
 800d52c:	3701      	addeq	r7, #1
 800d52e:	f04f 0801 	mov.w	r8, #1
 800d532:	e7af      	b.n	800d494 <_tzset_unlocked_r+0x84>
 800d534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d536:	f8c8 9004 	str.w	r9, [r8, #4]
 800d53a:	18fc      	adds	r4, r7, r3
 800d53c:	5cfb      	ldrb	r3, [r7, r3]
 800d53e:	2b2d      	cmp	r3, #45	; 0x2d
 800d540:	f040 808b 	bne.w	800d65a <_tzset_unlocked_r+0x24a>
 800d544:	3401      	adds	r4, #1
 800d546:	f04f 37ff 	mov.w	r7, #4294967295
 800d54a:	2300      	movs	r3, #0
 800d54c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d550:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d554:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d558:	930a      	str	r3, [sp, #40]	; 0x28
 800d55a:	e9cd a602 	strd	sl, r6, [sp, #8]
 800d55e:	e9cd b600 	strd	fp, r6, [sp]
 800d562:	4967      	ldr	r1, [pc, #412]	; (800d700 <_tzset_unlocked_r+0x2f0>)
 800d564:	4633      	mov	r3, r6
 800d566:	aa07      	add	r2, sp, #28
 800d568:	4620      	mov	r0, r4
 800d56a:	f7ff f857 	bl	800c61c <siscanf>
 800d56e:	2800      	cmp	r0, #0
 800d570:	dc78      	bgt.n	800d664 <_tzset_unlocked_r+0x254>
 800d572:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d574:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800d578:	652b      	str	r3, [r5, #80]	; 0x50
 800d57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d57c:	462f      	mov	r7, r5
 800d57e:	441c      	add	r4, r3
 800d580:	f04f 0900 	mov.w	r9, #0
 800d584:	7823      	ldrb	r3, [r4, #0]
 800d586:	2b2c      	cmp	r3, #44	; 0x2c
 800d588:	bf08      	it	eq
 800d58a:	3401      	addeq	r4, #1
 800d58c:	f894 8000 	ldrb.w	r8, [r4]
 800d590:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800d594:	d178      	bne.n	800d688 <_tzset_unlocked_r+0x278>
 800d596:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800d59a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800d59e:	ab09      	add	r3, sp, #36	; 0x24
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	4958      	ldr	r1, [pc, #352]	; (800d704 <_tzset_unlocked_r+0x2f4>)
 800d5a4:	9603      	str	r6, [sp, #12]
 800d5a6:	4633      	mov	r3, r6
 800d5a8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f7ff f835 	bl	800c61c <siscanf>
 800d5b2:	2803      	cmp	r0, #3
 800d5b4:	f47f af46 	bne.w	800d444 <_tzset_unlocked_r+0x34>
 800d5b8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800d5bc:	1e4b      	subs	r3, r1, #1
 800d5be:	2b0b      	cmp	r3, #11
 800d5c0:	f63f af40 	bhi.w	800d444 <_tzset_unlocked_r+0x34>
 800d5c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800d5c8:	1e53      	subs	r3, r2, #1
 800d5ca:	2b04      	cmp	r3, #4
 800d5cc:	f63f af3a 	bhi.w	800d444 <_tzset_unlocked_r+0x34>
 800d5d0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800d5d4:	2b06      	cmp	r3, #6
 800d5d6:	f63f af35 	bhi.w	800d444 <_tzset_unlocked_r+0x34>
 800d5da:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800d5de:	f887 8008 	strb.w	r8, [r7, #8]
 800d5e2:	617b      	str	r3, [r7, #20]
 800d5e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5e6:	eb04 0803 	add.w	r8, r4, r3
 800d5ea:	2302      	movs	r3, #2
 800d5ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d5f6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d5fa:	930a      	str	r3, [sp, #40]	; 0x28
 800d5fc:	f898 3000 	ldrb.w	r3, [r8]
 800d600:	2b2f      	cmp	r3, #47	; 0x2f
 800d602:	d109      	bne.n	800d618 <_tzset_unlocked_r+0x208>
 800d604:	e9cd a602 	strd	sl, r6, [sp, #8]
 800d608:	e9cd b600 	strd	fp, r6, [sp]
 800d60c:	493e      	ldr	r1, [pc, #248]	; (800d708 <_tzset_unlocked_r+0x2f8>)
 800d60e:	4633      	mov	r3, r6
 800d610:	aa07      	add	r2, sp, #28
 800d612:	4640      	mov	r0, r8
 800d614:	f7ff f802 	bl	800c61c <siscanf>
 800d618:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d61c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d620:	213c      	movs	r1, #60	; 0x3c
 800d622:	fb01 3302 	mla	r3, r1, r2, r3
 800d626:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800d62a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d62e:	fb01 3302 	mla	r3, r1, r2, r3
 800d632:	61bb      	str	r3, [r7, #24]
 800d634:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d636:	3728      	adds	r7, #40	; 0x28
 800d638:	4444      	add	r4, r8
 800d63a:	f1b9 0f00 	cmp.w	r9, #0
 800d63e:	d020      	beq.n	800d682 <_tzset_unlocked_r+0x272>
 800d640:	6868      	ldr	r0, [r5, #4]
 800d642:	f7ff fe29 	bl	800d298 <__tzcalc_limits>
 800d646:	4b28      	ldr	r3, [pc, #160]	; (800d6e8 <_tzset_unlocked_r+0x2d8>)
 800d648:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d64e:	1a9b      	subs	r3, r3, r2
 800d650:	4a27      	ldr	r2, [pc, #156]	; (800d6f0 <_tzset_unlocked_r+0x2e0>)
 800d652:	bf18      	it	ne
 800d654:	2301      	movne	r3, #1
 800d656:	6013      	str	r3, [r2, #0]
 800d658:	e6f4      	b.n	800d444 <_tzset_unlocked_r+0x34>
 800d65a:	2b2b      	cmp	r3, #43	; 0x2b
 800d65c:	bf08      	it	eq
 800d65e:	3401      	addeq	r4, #1
 800d660:	2701      	movs	r7, #1
 800d662:	e772      	b.n	800d54a <_tzset_unlocked_r+0x13a>
 800d664:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d668:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d66c:	213c      	movs	r1, #60	; 0x3c
 800d66e:	fb01 3302 	mla	r3, r1, r2, r3
 800d672:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800d676:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d67a:	fb01 3302 	mla	r3, r1, r2, r3
 800d67e:	437b      	muls	r3, r7
 800d680:	e77a      	b.n	800d578 <_tzset_unlocked_r+0x168>
 800d682:	f04f 0901 	mov.w	r9, #1
 800d686:	e77d      	b.n	800d584 <_tzset_unlocked_r+0x174>
 800d688:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800d68c:	bf06      	itte	eq
 800d68e:	3401      	addeq	r4, #1
 800d690:	4643      	moveq	r3, r8
 800d692:	2344      	movne	r3, #68	; 0x44
 800d694:	220a      	movs	r2, #10
 800d696:	a90b      	add	r1, sp, #44	; 0x2c
 800d698:	4620      	mov	r0, r4
 800d69a:	9305      	str	r3, [sp, #20]
 800d69c:	f7ff fdf2 	bl	800d284 <strtoul>
 800d6a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800d6a4:	9b05      	ldr	r3, [sp, #20]
 800d6a6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800d6aa:	45a0      	cmp	r8, r4
 800d6ac:	d114      	bne.n	800d6d8 <_tzset_unlocked_r+0x2c8>
 800d6ae:	234d      	movs	r3, #77	; 0x4d
 800d6b0:	f1b9 0f00 	cmp.w	r9, #0
 800d6b4:	d107      	bne.n	800d6c6 <_tzset_unlocked_r+0x2b6>
 800d6b6:	722b      	strb	r3, [r5, #8]
 800d6b8:	2103      	movs	r1, #3
 800d6ba:	2302      	movs	r3, #2
 800d6bc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800d6c0:	f8c5 9014 	str.w	r9, [r5, #20]
 800d6c4:	e791      	b.n	800d5ea <_tzset_unlocked_r+0x1da>
 800d6c6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800d6ca:	220b      	movs	r2, #11
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	63eb      	str	r3, [r5, #60]	; 0x3c
 800d6d6:	e788      	b.n	800d5ea <_tzset_unlocked_r+0x1da>
 800d6d8:	b280      	uxth	r0, r0
 800d6da:	723b      	strb	r3, [r7, #8]
 800d6dc:	6178      	str	r0, [r7, #20]
 800d6de:	e784      	b.n	800d5ea <_tzset_unlocked_r+0x1da>
 800d6e0:	0803cb64 	.word	0x0803cb64
 800d6e4:	200037cc 	.word	0x200037cc
 800d6e8:	200037d4 	.word	0x200037d4
 800d6ec:	0803cb67 	.word	0x0803cb67
 800d6f0:	200037d0 	.word	0x200037d0
 800d6f4:	20000320 	.word	0x20000320
 800d6f8:	200037bf 	.word	0x200037bf
 800d6fc:	0803cb6b 	.word	0x0803cb6b
 800d700:	0803cb8e 	.word	0x0803cb8e
 800d704:	0803cb7a 	.word	0x0803cb7a
 800d708:	0803cb8d 	.word	0x0803cb8d
 800d70c:	200037b4 	.word	0x200037b4

0800d710 <__swbuf_r>:
 800d710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d712:	460e      	mov	r6, r1
 800d714:	4614      	mov	r4, r2
 800d716:	4605      	mov	r5, r0
 800d718:	b118      	cbz	r0, 800d722 <__swbuf_r+0x12>
 800d71a:	6983      	ldr	r3, [r0, #24]
 800d71c:	b90b      	cbnz	r3, 800d722 <__swbuf_r+0x12>
 800d71e:	f001 f88f 	bl	800e840 <__sinit>
 800d722:	4b21      	ldr	r3, [pc, #132]	; (800d7a8 <__swbuf_r+0x98>)
 800d724:	429c      	cmp	r4, r3
 800d726:	d12b      	bne.n	800d780 <__swbuf_r+0x70>
 800d728:	686c      	ldr	r4, [r5, #4]
 800d72a:	69a3      	ldr	r3, [r4, #24]
 800d72c:	60a3      	str	r3, [r4, #8]
 800d72e:	89a3      	ldrh	r3, [r4, #12]
 800d730:	071a      	lsls	r2, r3, #28
 800d732:	d52f      	bpl.n	800d794 <__swbuf_r+0x84>
 800d734:	6923      	ldr	r3, [r4, #16]
 800d736:	b36b      	cbz	r3, 800d794 <__swbuf_r+0x84>
 800d738:	6923      	ldr	r3, [r4, #16]
 800d73a:	6820      	ldr	r0, [r4, #0]
 800d73c:	1ac0      	subs	r0, r0, r3
 800d73e:	6963      	ldr	r3, [r4, #20]
 800d740:	b2f6      	uxtb	r6, r6
 800d742:	4283      	cmp	r3, r0
 800d744:	4637      	mov	r7, r6
 800d746:	dc04      	bgt.n	800d752 <__swbuf_r+0x42>
 800d748:	4621      	mov	r1, r4
 800d74a:	4628      	mov	r0, r5
 800d74c:	f000 ffe4 	bl	800e718 <_fflush_r>
 800d750:	bb30      	cbnz	r0, 800d7a0 <__swbuf_r+0x90>
 800d752:	68a3      	ldr	r3, [r4, #8]
 800d754:	3b01      	subs	r3, #1
 800d756:	60a3      	str	r3, [r4, #8]
 800d758:	6823      	ldr	r3, [r4, #0]
 800d75a:	1c5a      	adds	r2, r3, #1
 800d75c:	6022      	str	r2, [r4, #0]
 800d75e:	701e      	strb	r6, [r3, #0]
 800d760:	6963      	ldr	r3, [r4, #20]
 800d762:	3001      	adds	r0, #1
 800d764:	4283      	cmp	r3, r0
 800d766:	d004      	beq.n	800d772 <__swbuf_r+0x62>
 800d768:	89a3      	ldrh	r3, [r4, #12]
 800d76a:	07db      	lsls	r3, r3, #31
 800d76c:	d506      	bpl.n	800d77c <__swbuf_r+0x6c>
 800d76e:	2e0a      	cmp	r6, #10
 800d770:	d104      	bne.n	800d77c <__swbuf_r+0x6c>
 800d772:	4621      	mov	r1, r4
 800d774:	4628      	mov	r0, r5
 800d776:	f000 ffcf 	bl	800e718 <_fflush_r>
 800d77a:	b988      	cbnz	r0, 800d7a0 <__swbuf_r+0x90>
 800d77c:	4638      	mov	r0, r7
 800d77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d780:	4b0a      	ldr	r3, [pc, #40]	; (800d7ac <__swbuf_r+0x9c>)
 800d782:	429c      	cmp	r4, r3
 800d784:	d101      	bne.n	800d78a <__swbuf_r+0x7a>
 800d786:	68ac      	ldr	r4, [r5, #8]
 800d788:	e7cf      	b.n	800d72a <__swbuf_r+0x1a>
 800d78a:	4b09      	ldr	r3, [pc, #36]	; (800d7b0 <__swbuf_r+0xa0>)
 800d78c:	429c      	cmp	r4, r3
 800d78e:	bf08      	it	eq
 800d790:	68ec      	ldreq	r4, [r5, #12]
 800d792:	e7ca      	b.n	800d72a <__swbuf_r+0x1a>
 800d794:	4621      	mov	r1, r4
 800d796:	4628      	mov	r0, r5
 800d798:	f000 f81e 	bl	800d7d8 <__swsetup_r>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d0cb      	beq.n	800d738 <__swbuf_r+0x28>
 800d7a0:	f04f 37ff 	mov.w	r7, #4294967295
 800d7a4:	e7ea      	b.n	800d77c <__swbuf_r+0x6c>
 800d7a6:	bf00      	nop
 800d7a8:	0803cd3c 	.word	0x0803cd3c
 800d7ac:	0803cd5c 	.word	0x0803cd5c
 800d7b0:	0803cd1c 	.word	0x0803cd1c

0800d7b4 <_write_r>:
 800d7b4:	b538      	push	{r3, r4, r5, lr}
 800d7b6:	4d07      	ldr	r5, [pc, #28]	; (800d7d4 <_write_r+0x20>)
 800d7b8:	4604      	mov	r4, r0
 800d7ba:	4608      	mov	r0, r1
 800d7bc:	4611      	mov	r1, r2
 800d7be:	2200      	movs	r2, #0
 800d7c0:	602a      	str	r2, [r5, #0]
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	f005 f88c 	bl	80128e0 <_write>
 800d7c8:	1c43      	adds	r3, r0, #1
 800d7ca:	d102      	bne.n	800d7d2 <_write_r+0x1e>
 800d7cc:	682b      	ldr	r3, [r5, #0]
 800d7ce:	b103      	cbz	r3, 800d7d2 <_write_r+0x1e>
 800d7d0:	6023      	str	r3, [r4, #0]
 800d7d2:	bd38      	pop	{r3, r4, r5, pc}
 800d7d4:	200037e0 	.word	0x200037e0

0800d7d8 <__swsetup_r>:
 800d7d8:	4b32      	ldr	r3, [pc, #200]	; (800d8a4 <__swsetup_r+0xcc>)
 800d7da:	b570      	push	{r4, r5, r6, lr}
 800d7dc:	681d      	ldr	r5, [r3, #0]
 800d7de:	4606      	mov	r6, r0
 800d7e0:	460c      	mov	r4, r1
 800d7e2:	b125      	cbz	r5, 800d7ee <__swsetup_r+0x16>
 800d7e4:	69ab      	ldr	r3, [r5, #24]
 800d7e6:	b913      	cbnz	r3, 800d7ee <__swsetup_r+0x16>
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	f001 f829 	bl	800e840 <__sinit>
 800d7ee:	4b2e      	ldr	r3, [pc, #184]	; (800d8a8 <__swsetup_r+0xd0>)
 800d7f0:	429c      	cmp	r4, r3
 800d7f2:	d10f      	bne.n	800d814 <__swsetup_r+0x3c>
 800d7f4:	686c      	ldr	r4, [r5, #4]
 800d7f6:	89a3      	ldrh	r3, [r4, #12]
 800d7f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7fc:	0719      	lsls	r1, r3, #28
 800d7fe:	d42c      	bmi.n	800d85a <__swsetup_r+0x82>
 800d800:	06dd      	lsls	r5, r3, #27
 800d802:	d411      	bmi.n	800d828 <__swsetup_r+0x50>
 800d804:	2309      	movs	r3, #9
 800d806:	6033      	str	r3, [r6, #0]
 800d808:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d80c:	81a3      	strh	r3, [r4, #12]
 800d80e:	f04f 30ff 	mov.w	r0, #4294967295
 800d812:	e03e      	b.n	800d892 <__swsetup_r+0xba>
 800d814:	4b25      	ldr	r3, [pc, #148]	; (800d8ac <__swsetup_r+0xd4>)
 800d816:	429c      	cmp	r4, r3
 800d818:	d101      	bne.n	800d81e <__swsetup_r+0x46>
 800d81a:	68ac      	ldr	r4, [r5, #8]
 800d81c:	e7eb      	b.n	800d7f6 <__swsetup_r+0x1e>
 800d81e:	4b24      	ldr	r3, [pc, #144]	; (800d8b0 <__swsetup_r+0xd8>)
 800d820:	429c      	cmp	r4, r3
 800d822:	bf08      	it	eq
 800d824:	68ec      	ldreq	r4, [r5, #12]
 800d826:	e7e6      	b.n	800d7f6 <__swsetup_r+0x1e>
 800d828:	0758      	lsls	r0, r3, #29
 800d82a:	d512      	bpl.n	800d852 <__swsetup_r+0x7a>
 800d82c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d82e:	b141      	cbz	r1, 800d842 <__swsetup_r+0x6a>
 800d830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d834:	4299      	cmp	r1, r3
 800d836:	d002      	beq.n	800d83e <__swsetup_r+0x66>
 800d838:	4630      	mov	r0, r6
 800d83a:	f7fe f81b 	bl	800b874 <_free_r>
 800d83e:	2300      	movs	r3, #0
 800d840:	6363      	str	r3, [r4, #52]	; 0x34
 800d842:	89a3      	ldrh	r3, [r4, #12]
 800d844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d848:	81a3      	strh	r3, [r4, #12]
 800d84a:	2300      	movs	r3, #0
 800d84c:	6063      	str	r3, [r4, #4]
 800d84e:	6923      	ldr	r3, [r4, #16]
 800d850:	6023      	str	r3, [r4, #0]
 800d852:	89a3      	ldrh	r3, [r4, #12]
 800d854:	f043 0308 	orr.w	r3, r3, #8
 800d858:	81a3      	strh	r3, [r4, #12]
 800d85a:	6923      	ldr	r3, [r4, #16]
 800d85c:	b94b      	cbnz	r3, 800d872 <__swsetup_r+0x9a>
 800d85e:	89a3      	ldrh	r3, [r4, #12]
 800d860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d868:	d003      	beq.n	800d872 <__swsetup_r+0x9a>
 800d86a:	4621      	mov	r1, r4
 800d86c:	4630      	mov	r0, r6
 800d86e:	f001 f913 	bl	800ea98 <__smakebuf_r>
 800d872:	89a0      	ldrh	r0, [r4, #12]
 800d874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d878:	f010 0301 	ands.w	r3, r0, #1
 800d87c:	d00a      	beq.n	800d894 <__swsetup_r+0xbc>
 800d87e:	2300      	movs	r3, #0
 800d880:	60a3      	str	r3, [r4, #8]
 800d882:	6963      	ldr	r3, [r4, #20]
 800d884:	425b      	negs	r3, r3
 800d886:	61a3      	str	r3, [r4, #24]
 800d888:	6923      	ldr	r3, [r4, #16]
 800d88a:	b943      	cbnz	r3, 800d89e <__swsetup_r+0xc6>
 800d88c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d890:	d1ba      	bne.n	800d808 <__swsetup_r+0x30>
 800d892:	bd70      	pop	{r4, r5, r6, pc}
 800d894:	0781      	lsls	r1, r0, #30
 800d896:	bf58      	it	pl
 800d898:	6963      	ldrpl	r3, [r4, #20]
 800d89a:	60a3      	str	r3, [r4, #8]
 800d89c:	e7f4      	b.n	800d888 <__swsetup_r+0xb0>
 800d89e:	2000      	movs	r0, #0
 800d8a0:	e7f7      	b.n	800d892 <__swsetup_r+0xba>
 800d8a2:	bf00      	nop
 800d8a4:	200002bc 	.word	0x200002bc
 800d8a8:	0803cd3c 	.word	0x0803cd3c
 800d8ac:	0803cd5c 	.word	0x0803cd5c
 800d8b0:	0803cd1c 	.word	0x0803cd1c

0800d8b4 <abort>:
 800d8b4:	b508      	push	{r3, lr}
 800d8b6:	2006      	movs	r0, #6
 800d8b8:	f002 fa0e 	bl	800fcd8 <raise>
 800d8bc:	2001      	movs	r0, #1
 800d8be:	f005 f817 	bl	80128f0 <_exit>

0800d8c2 <abs>:
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	bfb8      	it	lt
 800d8c6:	4240      	neglt	r0, r0
 800d8c8:	4770      	bx	lr
	...

0800d8cc <_close_r>:
 800d8cc:	b538      	push	{r3, r4, r5, lr}
 800d8ce:	4d06      	ldr	r5, [pc, #24]	; (800d8e8 <_close_r+0x1c>)
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	4608      	mov	r0, r1
 800d8d6:	602b      	str	r3, [r5, #0]
 800d8d8:	f004 ffbc 	bl	8012854 <_close>
 800d8dc:	1c43      	adds	r3, r0, #1
 800d8de:	d102      	bne.n	800d8e6 <_close_r+0x1a>
 800d8e0:	682b      	ldr	r3, [r5, #0]
 800d8e2:	b103      	cbz	r3, 800d8e6 <_close_r+0x1a>
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	bd38      	pop	{r3, r4, r5, pc}
 800d8e8:	200037e0 	.word	0x200037e0

0800d8ec <div>:
 800d8ec:	2900      	cmp	r1, #0
 800d8ee:	b510      	push	{r4, lr}
 800d8f0:	fb91 f4f2 	sdiv	r4, r1, r2
 800d8f4:	fb02 1314 	mls	r3, r2, r4, r1
 800d8f8:	db06      	blt.n	800d908 <div+0x1c>
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	da01      	bge.n	800d902 <div+0x16>
 800d8fe:	3401      	adds	r4, #1
 800d900:	1a9b      	subs	r3, r3, r2
 800d902:	e9c0 4300 	strd	r4, r3, [r0]
 800d906:	bd10      	pop	{r4, pc}
 800d908:	2b00      	cmp	r3, #0
 800d90a:	bfc4      	itt	gt
 800d90c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800d910:	189b      	addgt	r3, r3, r2
 800d912:	e7f6      	b.n	800d902 <div+0x16>

0800d914 <quorem>:
 800d914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d918:	6903      	ldr	r3, [r0, #16]
 800d91a:	690c      	ldr	r4, [r1, #16]
 800d91c:	42a3      	cmp	r3, r4
 800d91e:	4607      	mov	r7, r0
 800d920:	f2c0 8081 	blt.w	800da26 <quorem+0x112>
 800d924:	3c01      	subs	r4, #1
 800d926:	f101 0814 	add.w	r8, r1, #20
 800d92a:	f100 0514 	add.w	r5, r0, #20
 800d92e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d932:	9301      	str	r3, [sp, #4]
 800d934:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d938:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d93c:	3301      	adds	r3, #1
 800d93e:	429a      	cmp	r2, r3
 800d940:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d944:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d948:	fbb2 f6f3 	udiv	r6, r2, r3
 800d94c:	d331      	bcc.n	800d9b2 <quorem+0x9e>
 800d94e:	f04f 0e00 	mov.w	lr, #0
 800d952:	4640      	mov	r0, r8
 800d954:	46ac      	mov	ip, r5
 800d956:	46f2      	mov	sl, lr
 800d958:	f850 2b04 	ldr.w	r2, [r0], #4
 800d95c:	b293      	uxth	r3, r2
 800d95e:	fb06 e303 	mla	r3, r6, r3, lr
 800d962:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d966:	b29b      	uxth	r3, r3
 800d968:	ebaa 0303 	sub.w	r3, sl, r3
 800d96c:	f8dc a000 	ldr.w	sl, [ip]
 800d970:	0c12      	lsrs	r2, r2, #16
 800d972:	fa13 f38a 	uxtah	r3, r3, sl
 800d976:	fb06 e202 	mla	r2, r6, r2, lr
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	9b00      	ldr	r3, [sp, #0]
 800d97e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d982:	b292      	uxth	r2, r2
 800d984:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d988:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d98c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d990:	4581      	cmp	r9, r0
 800d992:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d996:	f84c 3b04 	str.w	r3, [ip], #4
 800d99a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d99e:	d2db      	bcs.n	800d958 <quorem+0x44>
 800d9a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800d9a4:	b92b      	cbnz	r3, 800d9b2 <quorem+0x9e>
 800d9a6:	9b01      	ldr	r3, [sp, #4]
 800d9a8:	3b04      	subs	r3, #4
 800d9aa:	429d      	cmp	r5, r3
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	d32e      	bcc.n	800da0e <quorem+0xfa>
 800d9b0:	613c      	str	r4, [r7, #16]
 800d9b2:	4638      	mov	r0, r7
 800d9b4:	f001 fb58 	bl	800f068 <__mcmp>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	db24      	blt.n	800da06 <quorem+0xf2>
 800d9bc:	3601      	adds	r6, #1
 800d9be:	4628      	mov	r0, r5
 800d9c0:	f04f 0c00 	mov.w	ip, #0
 800d9c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d9c8:	f8d0 e000 	ldr.w	lr, [r0]
 800d9cc:	b293      	uxth	r3, r2
 800d9ce:	ebac 0303 	sub.w	r3, ip, r3
 800d9d2:	0c12      	lsrs	r2, r2, #16
 800d9d4:	fa13 f38e 	uxtah	r3, r3, lr
 800d9d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d9dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9e6:	45c1      	cmp	r9, r8
 800d9e8:	f840 3b04 	str.w	r3, [r0], #4
 800d9ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d9f0:	d2e8      	bcs.n	800d9c4 <quorem+0xb0>
 800d9f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9fa:	b922      	cbnz	r2, 800da06 <quorem+0xf2>
 800d9fc:	3b04      	subs	r3, #4
 800d9fe:	429d      	cmp	r5, r3
 800da00:	461a      	mov	r2, r3
 800da02:	d30a      	bcc.n	800da1a <quorem+0x106>
 800da04:	613c      	str	r4, [r7, #16]
 800da06:	4630      	mov	r0, r6
 800da08:	b003      	add	sp, #12
 800da0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da0e:	6812      	ldr	r2, [r2, #0]
 800da10:	3b04      	subs	r3, #4
 800da12:	2a00      	cmp	r2, #0
 800da14:	d1cc      	bne.n	800d9b0 <quorem+0x9c>
 800da16:	3c01      	subs	r4, #1
 800da18:	e7c7      	b.n	800d9aa <quorem+0x96>
 800da1a:	6812      	ldr	r2, [r2, #0]
 800da1c:	3b04      	subs	r3, #4
 800da1e:	2a00      	cmp	r2, #0
 800da20:	d1f0      	bne.n	800da04 <quorem+0xf0>
 800da22:	3c01      	subs	r4, #1
 800da24:	e7eb      	b.n	800d9fe <quorem+0xea>
 800da26:	2000      	movs	r0, #0
 800da28:	e7ee      	b.n	800da08 <quorem+0xf4>
 800da2a:	0000      	movs	r0, r0
 800da2c:	0000      	movs	r0, r0
	...

0800da30 <_dtoa_r>:
 800da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da34:	ed2d 8b04 	vpush	{d8-d9}
 800da38:	ec57 6b10 	vmov	r6, r7, d0
 800da3c:	b093      	sub	sp, #76	; 0x4c
 800da3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800da40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800da44:	9106      	str	r1, [sp, #24]
 800da46:	ee10 aa10 	vmov	sl, s0
 800da4a:	4604      	mov	r4, r0
 800da4c:	9209      	str	r2, [sp, #36]	; 0x24
 800da4e:	930c      	str	r3, [sp, #48]	; 0x30
 800da50:	46bb      	mov	fp, r7
 800da52:	b975      	cbnz	r5, 800da72 <_dtoa_r+0x42>
 800da54:	2010      	movs	r0, #16
 800da56:	f7fd fc75 	bl	800b344 <malloc>
 800da5a:	4602      	mov	r2, r0
 800da5c:	6260      	str	r0, [r4, #36]	; 0x24
 800da5e:	b920      	cbnz	r0, 800da6a <_dtoa_r+0x3a>
 800da60:	4ba7      	ldr	r3, [pc, #668]	; (800dd00 <_dtoa_r+0x2d0>)
 800da62:	21ea      	movs	r1, #234	; 0xea
 800da64:	48a7      	ldr	r0, [pc, #668]	; (800dd04 <_dtoa_r+0x2d4>)
 800da66:	f7fd fc19 	bl	800b29c <__assert_func>
 800da6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da6e:	6005      	str	r5, [r0, #0]
 800da70:	60c5      	str	r5, [r0, #12]
 800da72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da74:	6819      	ldr	r1, [r3, #0]
 800da76:	b151      	cbz	r1, 800da8e <_dtoa_r+0x5e>
 800da78:	685a      	ldr	r2, [r3, #4]
 800da7a:	604a      	str	r2, [r1, #4]
 800da7c:	2301      	movs	r3, #1
 800da7e:	4093      	lsls	r3, r2
 800da80:	608b      	str	r3, [r1, #8]
 800da82:	4620      	mov	r0, r4
 800da84:	f001 f8ae 	bl	800ebe4 <_Bfree>
 800da88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da8a:	2200      	movs	r2, #0
 800da8c:	601a      	str	r2, [r3, #0]
 800da8e:	1e3b      	subs	r3, r7, #0
 800da90:	bfaa      	itet	ge
 800da92:	2300      	movge	r3, #0
 800da94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800da98:	f8c8 3000 	strge.w	r3, [r8]
 800da9c:	4b9a      	ldr	r3, [pc, #616]	; (800dd08 <_dtoa_r+0x2d8>)
 800da9e:	bfbc      	itt	lt
 800daa0:	2201      	movlt	r2, #1
 800daa2:	f8c8 2000 	strlt.w	r2, [r8]
 800daa6:	ea33 030b 	bics.w	r3, r3, fp
 800daaa:	d11b      	bne.n	800dae4 <_dtoa_r+0xb4>
 800daac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800daae:	f242 730f 	movw	r3, #9999	; 0x270f
 800dab2:	6013      	str	r3, [r2, #0]
 800dab4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dab8:	4333      	orrs	r3, r6
 800daba:	f000 8592 	beq.w	800e5e2 <_dtoa_r+0xbb2>
 800dabe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dac0:	b963      	cbnz	r3, 800dadc <_dtoa_r+0xac>
 800dac2:	4b92      	ldr	r3, [pc, #584]	; (800dd0c <_dtoa_r+0x2dc>)
 800dac4:	e022      	b.n	800db0c <_dtoa_r+0xdc>
 800dac6:	4b92      	ldr	r3, [pc, #584]	; (800dd10 <_dtoa_r+0x2e0>)
 800dac8:	9301      	str	r3, [sp, #4]
 800daca:	3308      	adds	r3, #8
 800dacc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dace:	6013      	str	r3, [r2, #0]
 800dad0:	9801      	ldr	r0, [sp, #4]
 800dad2:	b013      	add	sp, #76	; 0x4c
 800dad4:	ecbd 8b04 	vpop	{d8-d9}
 800dad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dadc:	4b8b      	ldr	r3, [pc, #556]	; (800dd0c <_dtoa_r+0x2dc>)
 800dade:	9301      	str	r3, [sp, #4]
 800dae0:	3303      	adds	r3, #3
 800dae2:	e7f3      	b.n	800dacc <_dtoa_r+0x9c>
 800dae4:	2200      	movs	r2, #0
 800dae6:	2300      	movs	r3, #0
 800dae8:	4650      	mov	r0, sl
 800daea:	4659      	mov	r1, fp
 800daec:	f7f3 f806 	bl	8000afc <__aeabi_dcmpeq>
 800daf0:	ec4b ab19 	vmov	d9, sl, fp
 800daf4:	4680      	mov	r8, r0
 800daf6:	b158      	cbz	r0, 800db10 <_dtoa_r+0xe0>
 800daf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dafa:	2301      	movs	r3, #1
 800dafc:	6013      	str	r3, [r2, #0]
 800dafe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db00:	2b00      	cmp	r3, #0
 800db02:	f000 856b 	beq.w	800e5dc <_dtoa_r+0xbac>
 800db06:	4883      	ldr	r0, [pc, #524]	; (800dd14 <_dtoa_r+0x2e4>)
 800db08:	6018      	str	r0, [r3, #0]
 800db0a:	1e43      	subs	r3, r0, #1
 800db0c:	9301      	str	r3, [sp, #4]
 800db0e:	e7df      	b.n	800dad0 <_dtoa_r+0xa0>
 800db10:	ec4b ab10 	vmov	d0, sl, fp
 800db14:	aa10      	add	r2, sp, #64	; 0x40
 800db16:	a911      	add	r1, sp, #68	; 0x44
 800db18:	4620      	mov	r0, r4
 800db1a:	f001 fb4b 	bl	800f1b4 <__d2b>
 800db1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800db22:	ee08 0a10 	vmov	s16, r0
 800db26:	2d00      	cmp	r5, #0
 800db28:	f000 8084 	beq.w	800dc34 <_dtoa_r+0x204>
 800db2c:	ee19 3a90 	vmov	r3, s19
 800db30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800db38:	4656      	mov	r6, sl
 800db3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800db3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800db42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800db46:	4b74      	ldr	r3, [pc, #464]	; (800dd18 <_dtoa_r+0x2e8>)
 800db48:	2200      	movs	r2, #0
 800db4a:	4630      	mov	r0, r6
 800db4c:	4639      	mov	r1, r7
 800db4e:	f7f2 fbb5 	bl	80002bc <__aeabi_dsub>
 800db52:	a365      	add	r3, pc, #404	; (adr r3, 800dce8 <_dtoa_r+0x2b8>)
 800db54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db58:	f7f2 fd68 	bl	800062c <__aeabi_dmul>
 800db5c:	a364      	add	r3, pc, #400	; (adr r3, 800dcf0 <_dtoa_r+0x2c0>)
 800db5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db62:	f7f2 fbad 	bl	80002c0 <__adddf3>
 800db66:	4606      	mov	r6, r0
 800db68:	4628      	mov	r0, r5
 800db6a:	460f      	mov	r7, r1
 800db6c:	f7f2 fcf4 	bl	8000558 <__aeabi_i2d>
 800db70:	a361      	add	r3, pc, #388	; (adr r3, 800dcf8 <_dtoa_r+0x2c8>)
 800db72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db76:	f7f2 fd59 	bl	800062c <__aeabi_dmul>
 800db7a:	4602      	mov	r2, r0
 800db7c:	460b      	mov	r3, r1
 800db7e:	4630      	mov	r0, r6
 800db80:	4639      	mov	r1, r7
 800db82:	f7f2 fb9d 	bl	80002c0 <__adddf3>
 800db86:	4606      	mov	r6, r0
 800db88:	460f      	mov	r7, r1
 800db8a:	f7f2 ffff 	bl	8000b8c <__aeabi_d2iz>
 800db8e:	2200      	movs	r2, #0
 800db90:	9000      	str	r0, [sp, #0]
 800db92:	2300      	movs	r3, #0
 800db94:	4630      	mov	r0, r6
 800db96:	4639      	mov	r1, r7
 800db98:	f7f2 ffba 	bl	8000b10 <__aeabi_dcmplt>
 800db9c:	b150      	cbz	r0, 800dbb4 <_dtoa_r+0x184>
 800db9e:	9800      	ldr	r0, [sp, #0]
 800dba0:	f7f2 fcda 	bl	8000558 <__aeabi_i2d>
 800dba4:	4632      	mov	r2, r6
 800dba6:	463b      	mov	r3, r7
 800dba8:	f7f2 ffa8 	bl	8000afc <__aeabi_dcmpeq>
 800dbac:	b910      	cbnz	r0, 800dbb4 <_dtoa_r+0x184>
 800dbae:	9b00      	ldr	r3, [sp, #0]
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	9b00      	ldr	r3, [sp, #0]
 800dbb6:	2b16      	cmp	r3, #22
 800dbb8:	d85a      	bhi.n	800dc70 <_dtoa_r+0x240>
 800dbba:	9a00      	ldr	r2, [sp, #0]
 800dbbc:	4b57      	ldr	r3, [pc, #348]	; (800dd1c <_dtoa_r+0x2ec>)
 800dbbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc6:	ec51 0b19 	vmov	r0, r1, d9
 800dbca:	f7f2 ffa1 	bl	8000b10 <__aeabi_dcmplt>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d050      	beq.n	800dc74 <_dtoa_r+0x244>
 800dbd2:	9b00      	ldr	r3, [sp, #0]
 800dbd4:	3b01      	subs	r3, #1
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	2300      	movs	r3, #0
 800dbda:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbde:	1b5d      	subs	r5, r3, r5
 800dbe0:	1e6b      	subs	r3, r5, #1
 800dbe2:	9305      	str	r3, [sp, #20]
 800dbe4:	bf45      	ittet	mi
 800dbe6:	f1c5 0301 	rsbmi	r3, r5, #1
 800dbea:	9304      	strmi	r3, [sp, #16]
 800dbec:	2300      	movpl	r3, #0
 800dbee:	2300      	movmi	r3, #0
 800dbf0:	bf4c      	ite	mi
 800dbf2:	9305      	strmi	r3, [sp, #20]
 800dbf4:	9304      	strpl	r3, [sp, #16]
 800dbf6:	9b00      	ldr	r3, [sp, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	db3d      	blt.n	800dc78 <_dtoa_r+0x248>
 800dbfc:	9b05      	ldr	r3, [sp, #20]
 800dbfe:	9a00      	ldr	r2, [sp, #0]
 800dc00:	920a      	str	r2, [sp, #40]	; 0x28
 800dc02:	4413      	add	r3, r2
 800dc04:	9305      	str	r3, [sp, #20]
 800dc06:	2300      	movs	r3, #0
 800dc08:	9307      	str	r3, [sp, #28]
 800dc0a:	9b06      	ldr	r3, [sp, #24]
 800dc0c:	2b09      	cmp	r3, #9
 800dc0e:	f200 8089 	bhi.w	800dd24 <_dtoa_r+0x2f4>
 800dc12:	2b05      	cmp	r3, #5
 800dc14:	bfc4      	itt	gt
 800dc16:	3b04      	subgt	r3, #4
 800dc18:	9306      	strgt	r3, [sp, #24]
 800dc1a:	9b06      	ldr	r3, [sp, #24]
 800dc1c:	f1a3 0302 	sub.w	r3, r3, #2
 800dc20:	bfcc      	ite	gt
 800dc22:	2500      	movgt	r5, #0
 800dc24:	2501      	movle	r5, #1
 800dc26:	2b03      	cmp	r3, #3
 800dc28:	f200 8087 	bhi.w	800dd3a <_dtoa_r+0x30a>
 800dc2c:	e8df f003 	tbb	[pc, r3]
 800dc30:	59383a2d 	.word	0x59383a2d
 800dc34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dc38:	441d      	add	r5, r3
 800dc3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dc3e:	2b20      	cmp	r3, #32
 800dc40:	bfc1      	itttt	gt
 800dc42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dc4a:	fa0b f303 	lslgt.w	r3, fp, r3
 800dc4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dc52:	bfda      	itte	le
 800dc54:	f1c3 0320 	rsble	r3, r3, #32
 800dc58:	fa06 f003 	lslle.w	r0, r6, r3
 800dc5c:	4318      	orrgt	r0, r3
 800dc5e:	f7f2 fc6b 	bl	8000538 <__aeabi_ui2d>
 800dc62:	2301      	movs	r3, #1
 800dc64:	4606      	mov	r6, r0
 800dc66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dc6a:	3d01      	subs	r5, #1
 800dc6c:	930e      	str	r3, [sp, #56]	; 0x38
 800dc6e:	e76a      	b.n	800db46 <_dtoa_r+0x116>
 800dc70:	2301      	movs	r3, #1
 800dc72:	e7b2      	b.n	800dbda <_dtoa_r+0x1aa>
 800dc74:	900b      	str	r0, [sp, #44]	; 0x2c
 800dc76:	e7b1      	b.n	800dbdc <_dtoa_r+0x1ac>
 800dc78:	9b04      	ldr	r3, [sp, #16]
 800dc7a:	9a00      	ldr	r2, [sp, #0]
 800dc7c:	1a9b      	subs	r3, r3, r2
 800dc7e:	9304      	str	r3, [sp, #16]
 800dc80:	4253      	negs	r3, r2
 800dc82:	9307      	str	r3, [sp, #28]
 800dc84:	2300      	movs	r3, #0
 800dc86:	930a      	str	r3, [sp, #40]	; 0x28
 800dc88:	e7bf      	b.n	800dc0a <_dtoa_r+0x1da>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	9308      	str	r3, [sp, #32]
 800dc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	dc55      	bgt.n	800dd40 <_dtoa_r+0x310>
 800dc94:	2301      	movs	r3, #1
 800dc96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	9209      	str	r2, [sp, #36]	; 0x24
 800dc9e:	e00c      	b.n	800dcba <_dtoa_r+0x28a>
 800dca0:	2301      	movs	r3, #1
 800dca2:	e7f3      	b.n	800dc8c <_dtoa_r+0x25c>
 800dca4:	2300      	movs	r3, #0
 800dca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dca8:	9308      	str	r3, [sp, #32]
 800dcaa:	9b00      	ldr	r3, [sp, #0]
 800dcac:	4413      	add	r3, r2
 800dcae:	9302      	str	r3, [sp, #8]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	9303      	str	r3, [sp, #12]
 800dcb6:	bfb8      	it	lt
 800dcb8:	2301      	movlt	r3, #1
 800dcba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	6042      	str	r2, [r0, #4]
 800dcc0:	2204      	movs	r2, #4
 800dcc2:	f102 0614 	add.w	r6, r2, #20
 800dcc6:	429e      	cmp	r6, r3
 800dcc8:	6841      	ldr	r1, [r0, #4]
 800dcca:	d93d      	bls.n	800dd48 <_dtoa_r+0x318>
 800dccc:	4620      	mov	r0, r4
 800dcce:	f000 ff49 	bl	800eb64 <_Balloc>
 800dcd2:	9001      	str	r0, [sp, #4]
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	d13b      	bne.n	800dd50 <_dtoa_r+0x320>
 800dcd8:	4b11      	ldr	r3, [pc, #68]	; (800dd20 <_dtoa_r+0x2f0>)
 800dcda:	4602      	mov	r2, r0
 800dcdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dce0:	e6c0      	b.n	800da64 <_dtoa_r+0x34>
 800dce2:	2301      	movs	r3, #1
 800dce4:	e7df      	b.n	800dca6 <_dtoa_r+0x276>
 800dce6:	bf00      	nop
 800dce8:	636f4361 	.word	0x636f4361
 800dcec:	3fd287a7 	.word	0x3fd287a7
 800dcf0:	8b60c8b3 	.word	0x8b60c8b3
 800dcf4:	3fc68a28 	.word	0x3fc68a28
 800dcf8:	509f79fb 	.word	0x509f79fb
 800dcfc:	3fd34413 	.word	0x3fd34413
 800dd00:	0803c734 	.word	0x0803c734
 800dd04:	0803ccae 	.word	0x0803ccae
 800dd08:	7ff00000 	.word	0x7ff00000
 800dd0c:	0803ccaa 	.word	0x0803ccaa
 800dd10:	0803cca1 	.word	0x0803cca1
 800dd14:	0803cf39 	.word	0x0803cf39
 800dd18:	3ff80000 	.word	0x3ff80000
 800dd1c:	0803ce60 	.word	0x0803ce60
 800dd20:	0803cd09 	.word	0x0803cd09
 800dd24:	2501      	movs	r5, #1
 800dd26:	2300      	movs	r3, #0
 800dd28:	9306      	str	r3, [sp, #24]
 800dd2a:	9508      	str	r5, [sp, #32]
 800dd2c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd34:	2200      	movs	r2, #0
 800dd36:	2312      	movs	r3, #18
 800dd38:	e7b0      	b.n	800dc9c <_dtoa_r+0x26c>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	9308      	str	r3, [sp, #32]
 800dd3e:	e7f5      	b.n	800dd2c <_dtoa_r+0x2fc>
 800dd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd46:	e7b8      	b.n	800dcba <_dtoa_r+0x28a>
 800dd48:	3101      	adds	r1, #1
 800dd4a:	6041      	str	r1, [r0, #4]
 800dd4c:	0052      	lsls	r2, r2, #1
 800dd4e:	e7b8      	b.n	800dcc2 <_dtoa_r+0x292>
 800dd50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd52:	9a01      	ldr	r2, [sp, #4]
 800dd54:	601a      	str	r2, [r3, #0]
 800dd56:	9b03      	ldr	r3, [sp, #12]
 800dd58:	2b0e      	cmp	r3, #14
 800dd5a:	f200 809d 	bhi.w	800de98 <_dtoa_r+0x468>
 800dd5e:	2d00      	cmp	r5, #0
 800dd60:	f000 809a 	beq.w	800de98 <_dtoa_r+0x468>
 800dd64:	9b00      	ldr	r3, [sp, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	dd32      	ble.n	800ddd0 <_dtoa_r+0x3a0>
 800dd6a:	4ab7      	ldr	r2, [pc, #732]	; (800e048 <_dtoa_r+0x618>)
 800dd6c:	f003 030f 	and.w	r3, r3, #15
 800dd70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dd74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd78:	9b00      	ldr	r3, [sp, #0]
 800dd7a:	05d8      	lsls	r0, r3, #23
 800dd7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800dd80:	d516      	bpl.n	800ddb0 <_dtoa_r+0x380>
 800dd82:	4bb2      	ldr	r3, [pc, #712]	; (800e04c <_dtoa_r+0x61c>)
 800dd84:	ec51 0b19 	vmov	r0, r1, d9
 800dd88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd8c:	f7f2 fd78 	bl	8000880 <__aeabi_ddiv>
 800dd90:	f007 070f 	and.w	r7, r7, #15
 800dd94:	4682      	mov	sl, r0
 800dd96:	468b      	mov	fp, r1
 800dd98:	2503      	movs	r5, #3
 800dd9a:	4eac      	ldr	r6, [pc, #688]	; (800e04c <_dtoa_r+0x61c>)
 800dd9c:	b957      	cbnz	r7, 800ddb4 <_dtoa_r+0x384>
 800dd9e:	4642      	mov	r2, r8
 800dda0:	464b      	mov	r3, r9
 800dda2:	4650      	mov	r0, sl
 800dda4:	4659      	mov	r1, fp
 800dda6:	f7f2 fd6b 	bl	8000880 <__aeabi_ddiv>
 800ddaa:	4682      	mov	sl, r0
 800ddac:	468b      	mov	fp, r1
 800ddae:	e028      	b.n	800de02 <_dtoa_r+0x3d2>
 800ddb0:	2502      	movs	r5, #2
 800ddb2:	e7f2      	b.n	800dd9a <_dtoa_r+0x36a>
 800ddb4:	07f9      	lsls	r1, r7, #31
 800ddb6:	d508      	bpl.n	800ddca <_dtoa_r+0x39a>
 800ddb8:	4640      	mov	r0, r8
 800ddba:	4649      	mov	r1, r9
 800ddbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ddc0:	f7f2 fc34 	bl	800062c <__aeabi_dmul>
 800ddc4:	3501      	adds	r5, #1
 800ddc6:	4680      	mov	r8, r0
 800ddc8:	4689      	mov	r9, r1
 800ddca:	107f      	asrs	r7, r7, #1
 800ddcc:	3608      	adds	r6, #8
 800ddce:	e7e5      	b.n	800dd9c <_dtoa_r+0x36c>
 800ddd0:	f000 809b 	beq.w	800df0a <_dtoa_r+0x4da>
 800ddd4:	9b00      	ldr	r3, [sp, #0]
 800ddd6:	4f9d      	ldr	r7, [pc, #628]	; (800e04c <_dtoa_r+0x61c>)
 800ddd8:	425e      	negs	r6, r3
 800ddda:	4b9b      	ldr	r3, [pc, #620]	; (800e048 <_dtoa_r+0x618>)
 800dddc:	f006 020f 	and.w	r2, r6, #15
 800dde0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde8:	ec51 0b19 	vmov	r0, r1, d9
 800ddec:	f7f2 fc1e 	bl	800062c <__aeabi_dmul>
 800ddf0:	1136      	asrs	r6, r6, #4
 800ddf2:	4682      	mov	sl, r0
 800ddf4:	468b      	mov	fp, r1
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	2502      	movs	r5, #2
 800ddfa:	2e00      	cmp	r6, #0
 800ddfc:	d17a      	bne.n	800def4 <_dtoa_r+0x4c4>
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1d3      	bne.n	800ddaa <_dtoa_r+0x37a>
 800de02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de04:	2b00      	cmp	r3, #0
 800de06:	f000 8082 	beq.w	800df0e <_dtoa_r+0x4de>
 800de0a:	4b91      	ldr	r3, [pc, #580]	; (800e050 <_dtoa_r+0x620>)
 800de0c:	2200      	movs	r2, #0
 800de0e:	4650      	mov	r0, sl
 800de10:	4659      	mov	r1, fp
 800de12:	f7f2 fe7d 	bl	8000b10 <__aeabi_dcmplt>
 800de16:	2800      	cmp	r0, #0
 800de18:	d079      	beq.n	800df0e <_dtoa_r+0x4de>
 800de1a:	9b03      	ldr	r3, [sp, #12]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d076      	beq.n	800df0e <_dtoa_r+0x4de>
 800de20:	9b02      	ldr	r3, [sp, #8]
 800de22:	2b00      	cmp	r3, #0
 800de24:	dd36      	ble.n	800de94 <_dtoa_r+0x464>
 800de26:	9b00      	ldr	r3, [sp, #0]
 800de28:	4650      	mov	r0, sl
 800de2a:	4659      	mov	r1, fp
 800de2c:	1e5f      	subs	r7, r3, #1
 800de2e:	2200      	movs	r2, #0
 800de30:	4b88      	ldr	r3, [pc, #544]	; (800e054 <_dtoa_r+0x624>)
 800de32:	f7f2 fbfb 	bl	800062c <__aeabi_dmul>
 800de36:	9e02      	ldr	r6, [sp, #8]
 800de38:	4682      	mov	sl, r0
 800de3a:	468b      	mov	fp, r1
 800de3c:	3501      	adds	r5, #1
 800de3e:	4628      	mov	r0, r5
 800de40:	f7f2 fb8a 	bl	8000558 <__aeabi_i2d>
 800de44:	4652      	mov	r2, sl
 800de46:	465b      	mov	r3, fp
 800de48:	f7f2 fbf0 	bl	800062c <__aeabi_dmul>
 800de4c:	4b82      	ldr	r3, [pc, #520]	; (800e058 <_dtoa_r+0x628>)
 800de4e:	2200      	movs	r2, #0
 800de50:	f7f2 fa36 	bl	80002c0 <__adddf3>
 800de54:	46d0      	mov	r8, sl
 800de56:	46d9      	mov	r9, fp
 800de58:	4682      	mov	sl, r0
 800de5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800de5e:	2e00      	cmp	r6, #0
 800de60:	d158      	bne.n	800df14 <_dtoa_r+0x4e4>
 800de62:	4b7e      	ldr	r3, [pc, #504]	; (800e05c <_dtoa_r+0x62c>)
 800de64:	2200      	movs	r2, #0
 800de66:	4640      	mov	r0, r8
 800de68:	4649      	mov	r1, r9
 800de6a:	f7f2 fa27 	bl	80002bc <__aeabi_dsub>
 800de6e:	4652      	mov	r2, sl
 800de70:	465b      	mov	r3, fp
 800de72:	4680      	mov	r8, r0
 800de74:	4689      	mov	r9, r1
 800de76:	f7f2 fe69 	bl	8000b4c <__aeabi_dcmpgt>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	f040 8295 	bne.w	800e3aa <_dtoa_r+0x97a>
 800de80:	4652      	mov	r2, sl
 800de82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800de86:	4640      	mov	r0, r8
 800de88:	4649      	mov	r1, r9
 800de8a:	f7f2 fe41 	bl	8000b10 <__aeabi_dcmplt>
 800de8e:	2800      	cmp	r0, #0
 800de90:	f040 8289 	bne.w	800e3a6 <_dtoa_r+0x976>
 800de94:	ec5b ab19 	vmov	sl, fp, d9
 800de98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f2c0 8148 	blt.w	800e130 <_dtoa_r+0x700>
 800dea0:	9a00      	ldr	r2, [sp, #0]
 800dea2:	2a0e      	cmp	r2, #14
 800dea4:	f300 8144 	bgt.w	800e130 <_dtoa_r+0x700>
 800dea8:	4b67      	ldr	r3, [pc, #412]	; (800e048 <_dtoa_r+0x618>)
 800deaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800deae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800deb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	f280 80d5 	bge.w	800e064 <_dtoa_r+0x634>
 800deba:	9b03      	ldr	r3, [sp, #12]
 800debc:	2b00      	cmp	r3, #0
 800debe:	f300 80d1 	bgt.w	800e064 <_dtoa_r+0x634>
 800dec2:	f040 826f 	bne.w	800e3a4 <_dtoa_r+0x974>
 800dec6:	4b65      	ldr	r3, [pc, #404]	; (800e05c <_dtoa_r+0x62c>)
 800dec8:	2200      	movs	r2, #0
 800deca:	4640      	mov	r0, r8
 800decc:	4649      	mov	r1, r9
 800dece:	f7f2 fbad 	bl	800062c <__aeabi_dmul>
 800ded2:	4652      	mov	r2, sl
 800ded4:	465b      	mov	r3, fp
 800ded6:	f7f2 fe2f 	bl	8000b38 <__aeabi_dcmpge>
 800deda:	9e03      	ldr	r6, [sp, #12]
 800dedc:	4637      	mov	r7, r6
 800dede:	2800      	cmp	r0, #0
 800dee0:	f040 8245 	bne.w	800e36e <_dtoa_r+0x93e>
 800dee4:	9d01      	ldr	r5, [sp, #4]
 800dee6:	2331      	movs	r3, #49	; 0x31
 800dee8:	f805 3b01 	strb.w	r3, [r5], #1
 800deec:	9b00      	ldr	r3, [sp, #0]
 800deee:	3301      	adds	r3, #1
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	e240      	b.n	800e376 <_dtoa_r+0x946>
 800def4:	07f2      	lsls	r2, r6, #31
 800def6:	d505      	bpl.n	800df04 <_dtoa_r+0x4d4>
 800def8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800defc:	f7f2 fb96 	bl	800062c <__aeabi_dmul>
 800df00:	3501      	adds	r5, #1
 800df02:	2301      	movs	r3, #1
 800df04:	1076      	asrs	r6, r6, #1
 800df06:	3708      	adds	r7, #8
 800df08:	e777      	b.n	800ddfa <_dtoa_r+0x3ca>
 800df0a:	2502      	movs	r5, #2
 800df0c:	e779      	b.n	800de02 <_dtoa_r+0x3d2>
 800df0e:	9f00      	ldr	r7, [sp, #0]
 800df10:	9e03      	ldr	r6, [sp, #12]
 800df12:	e794      	b.n	800de3e <_dtoa_r+0x40e>
 800df14:	9901      	ldr	r1, [sp, #4]
 800df16:	4b4c      	ldr	r3, [pc, #304]	; (800e048 <_dtoa_r+0x618>)
 800df18:	4431      	add	r1, r6
 800df1a:	910d      	str	r1, [sp, #52]	; 0x34
 800df1c:	9908      	ldr	r1, [sp, #32]
 800df1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800df22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df26:	2900      	cmp	r1, #0
 800df28:	d043      	beq.n	800dfb2 <_dtoa_r+0x582>
 800df2a:	494d      	ldr	r1, [pc, #308]	; (800e060 <_dtoa_r+0x630>)
 800df2c:	2000      	movs	r0, #0
 800df2e:	f7f2 fca7 	bl	8000880 <__aeabi_ddiv>
 800df32:	4652      	mov	r2, sl
 800df34:	465b      	mov	r3, fp
 800df36:	f7f2 f9c1 	bl	80002bc <__aeabi_dsub>
 800df3a:	9d01      	ldr	r5, [sp, #4]
 800df3c:	4682      	mov	sl, r0
 800df3e:	468b      	mov	fp, r1
 800df40:	4649      	mov	r1, r9
 800df42:	4640      	mov	r0, r8
 800df44:	f7f2 fe22 	bl	8000b8c <__aeabi_d2iz>
 800df48:	4606      	mov	r6, r0
 800df4a:	f7f2 fb05 	bl	8000558 <__aeabi_i2d>
 800df4e:	4602      	mov	r2, r0
 800df50:	460b      	mov	r3, r1
 800df52:	4640      	mov	r0, r8
 800df54:	4649      	mov	r1, r9
 800df56:	f7f2 f9b1 	bl	80002bc <__aeabi_dsub>
 800df5a:	3630      	adds	r6, #48	; 0x30
 800df5c:	f805 6b01 	strb.w	r6, [r5], #1
 800df60:	4652      	mov	r2, sl
 800df62:	465b      	mov	r3, fp
 800df64:	4680      	mov	r8, r0
 800df66:	4689      	mov	r9, r1
 800df68:	f7f2 fdd2 	bl	8000b10 <__aeabi_dcmplt>
 800df6c:	2800      	cmp	r0, #0
 800df6e:	d163      	bne.n	800e038 <_dtoa_r+0x608>
 800df70:	4642      	mov	r2, r8
 800df72:	464b      	mov	r3, r9
 800df74:	4936      	ldr	r1, [pc, #216]	; (800e050 <_dtoa_r+0x620>)
 800df76:	2000      	movs	r0, #0
 800df78:	f7f2 f9a0 	bl	80002bc <__aeabi_dsub>
 800df7c:	4652      	mov	r2, sl
 800df7e:	465b      	mov	r3, fp
 800df80:	f7f2 fdc6 	bl	8000b10 <__aeabi_dcmplt>
 800df84:	2800      	cmp	r0, #0
 800df86:	f040 80b5 	bne.w	800e0f4 <_dtoa_r+0x6c4>
 800df8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df8c:	429d      	cmp	r5, r3
 800df8e:	d081      	beq.n	800de94 <_dtoa_r+0x464>
 800df90:	4b30      	ldr	r3, [pc, #192]	; (800e054 <_dtoa_r+0x624>)
 800df92:	2200      	movs	r2, #0
 800df94:	4650      	mov	r0, sl
 800df96:	4659      	mov	r1, fp
 800df98:	f7f2 fb48 	bl	800062c <__aeabi_dmul>
 800df9c:	4b2d      	ldr	r3, [pc, #180]	; (800e054 <_dtoa_r+0x624>)
 800df9e:	4682      	mov	sl, r0
 800dfa0:	468b      	mov	fp, r1
 800dfa2:	4640      	mov	r0, r8
 800dfa4:	4649      	mov	r1, r9
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f7f2 fb40 	bl	800062c <__aeabi_dmul>
 800dfac:	4680      	mov	r8, r0
 800dfae:	4689      	mov	r9, r1
 800dfb0:	e7c6      	b.n	800df40 <_dtoa_r+0x510>
 800dfb2:	4650      	mov	r0, sl
 800dfb4:	4659      	mov	r1, fp
 800dfb6:	f7f2 fb39 	bl	800062c <__aeabi_dmul>
 800dfba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfbc:	9d01      	ldr	r5, [sp, #4]
 800dfbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfc0:	4682      	mov	sl, r0
 800dfc2:	468b      	mov	fp, r1
 800dfc4:	4649      	mov	r1, r9
 800dfc6:	4640      	mov	r0, r8
 800dfc8:	f7f2 fde0 	bl	8000b8c <__aeabi_d2iz>
 800dfcc:	4606      	mov	r6, r0
 800dfce:	f7f2 fac3 	bl	8000558 <__aeabi_i2d>
 800dfd2:	3630      	adds	r6, #48	; 0x30
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	4640      	mov	r0, r8
 800dfda:	4649      	mov	r1, r9
 800dfdc:	f7f2 f96e 	bl	80002bc <__aeabi_dsub>
 800dfe0:	f805 6b01 	strb.w	r6, [r5], #1
 800dfe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfe6:	429d      	cmp	r5, r3
 800dfe8:	4680      	mov	r8, r0
 800dfea:	4689      	mov	r9, r1
 800dfec:	f04f 0200 	mov.w	r2, #0
 800dff0:	d124      	bne.n	800e03c <_dtoa_r+0x60c>
 800dff2:	4b1b      	ldr	r3, [pc, #108]	; (800e060 <_dtoa_r+0x630>)
 800dff4:	4650      	mov	r0, sl
 800dff6:	4659      	mov	r1, fp
 800dff8:	f7f2 f962 	bl	80002c0 <__adddf3>
 800dffc:	4602      	mov	r2, r0
 800dffe:	460b      	mov	r3, r1
 800e000:	4640      	mov	r0, r8
 800e002:	4649      	mov	r1, r9
 800e004:	f7f2 fda2 	bl	8000b4c <__aeabi_dcmpgt>
 800e008:	2800      	cmp	r0, #0
 800e00a:	d173      	bne.n	800e0f4 <_dtoa_r+0x6c4>
 800e00c:	4652      	mov	r2, sl
 800e00e:	465b      	mov	r3, fp
 800e010:	4913      	ldr	r1, [pc, #76]	; (800e060 <_dtoa_r+0x630>)
 800e012:	2000      	movs	r0, #0
 800e014:	f7f2 f952 	bl	80002bc <__aeabi_dsub>
 800e018:	4602      	mov	r2, r0
 800e01a:	460b      	mov	r3, r1
 800e01c:	4640      	mov	r0, r8
 800e01e:	4649      	mov	r1, r9
 800e020:	f7f2 fd76 	bl	8000b10 <__aeabi_dcmplt>
 800e024:	2800      	cmp	r0, #0
 800e026:	f43f af35 	beq.w	800de94 <_dtoa_r+0x464>
 800e02a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e02c:	1e6b      	subs	r3, r5, #1
 800e02e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e030:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e034:	2b30      	cmp	r3, #48	; 0x30
 800e036:	d0f8      	beq.n	800e02a <_dtoa_r+0x5fa>
 800e038:	9700      	str	r7, [sp, #0]
 800e03a:	e049      	b.n	800e0d0 <_dtoa_r+0x6a0>
 800e03c:	4b05      	ldr	r3, [pc, #20]	; (800e054 <_dtoa_r+0x624>)
 800e03e:	f7f2 faf5 	bl	800062c <__aeabi_dmul>
 800e042:	4680      	mov	r8, r0
 800e044:	4689      	mov	r9, r1
 800e046:	e7bd      	b.n	800dfc4 <_dtoa_r+0x594>
 800e048:	0803ce60 	.word	0x0803ce60
 800e04c:	0803ce38 	.word	0x0803ce38
 800e050:	3ff00000 	.word	0x3ff00000
 800e054:	40240000 	.word	0x40240000
 800e058:	401c0000 	.word	0x401c0000
 800e05c:	40140000 	.word	0x40140000
 800e060:	3fe00000 	.word	0x3fe00000
 800e064:	9d01      	ldr	r5, [sp, #4]
 800e066:	4656      	mov	r6, sl
 800e068:	465f      	mov	r7, fp
 800e06a:	4642      	mov	r2, r8
 800e06c:	464b      	mov	r3, r9
 800e06e:	4630      	mov	r0, r6
 800e070:	4639      	mov	r1, r7
 800e072:	f7f2 fc05 	bl	8000880 <__aeabi_ddiv>
 800e076:	f7f2 fd89 	bl	8000b8c <__aeabi_d2iz>
 800e07a:	4682      	mov	sl, r0
 800e07c:	f7f2 fa6c 	bl	8000558 <__aeabi_i2d>
 800e080:	4642      	mov	r2, r8
 800e082:	464b      	mov	r3, r9
 800e084:	f7f2 fad2 	bl	800062c <__aeabi_dmul>
 800e088:	4602      	mov	r2, r0
 800e08a:	460b      	mov	r3, r1
 800e08c:	4630      	mov	r0, r6
 800e08e:	4639      	mov	r1, r7
 800e090:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e094:	f7f2 f912 	bl	80002bc <__aeabi_dsub>
 800e098:	f805 6b01 	strb.w	r6, [r5], #1
 800e09c:	9e01      	ldr	r6, [sp, #4]
 800e09e:	9f03      	ldr	r7, [sp, #12]
 800e0a0:	1bae      	subs	r6, r5, r6
 800e0a2:	42b7      	cmp	r7, r6
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	d135      	bne.n	800e116 <_dtoa_r+0x6e6>
 800e0aa:	f7f2 f909 	bl	80002c0 <__adddf3>
 800e0ae:	4642      	mov	r2, r8
 800e0b0:	464b      	mov	r3, r9
 800e0b2:	4606      	mov	r6, r0
 800e0b4:	460f      	mov	r7, r1
 800e0b6:	f7f2 fd49 	bl	8000b4c <__aeabi_dcmpgt>
 800e0ba:	b9d0      	cbnz	r0, 800e0f2 <_dtoa_r+0x6c2>
 800e0bc:	4642      	mov	r2, r8
 800e0be:	464b      	mov	r3, r9
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	4639      	mov	r1, r7
 800e0c4:	f7f2 fd1a 	bl	8000afc <__aeabi_dcmpeq>
 800e0c8:	b110      	cbz	r0, 800e0d0 <_dtoa_r+0x6a0>
 800e0ca:	f01a 0f01 	tst.w	sl, #1
 800e0ce:	d110      	bne.n	800e0f2 <_dtoa_r+0x6c2>
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	ee18 1a10 	vmov	r1, s16
 800e0d6:	f000 fd85 	bl	800ebe4 <_Bfree>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	9800      	ldr	r0, [sp, #0]
 800e0de:	702b      	strb	r3, [r5, #0]
 800e0e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	6018      	str	r0, [r3, #0]
 800e0e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f43f acf1 	beq.w	800dad0 <_dtoa_r+0xa0>
 800e0ee:	601d      	str	r5, [r3, #0]
 800e0f0:	e4ee      	b.n	800dad0 <_dtoa_r+0xa0>
 800e0f2:	9f00      	ldr	r7, [sp, #0]
 800e0f4:	462b      	mov	r3, r5
 800e0f6:	461d      	mov	r5, r3
 800e0f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0fc:	2a39      	cmp	r2, #57	; 0x39
 800e0fe:	d106      	bne.n	800e10e <_dtoa_r+0x6de>
 800e100:	9a01      	ldr	r2, [sp, #4]
 800e102:	429a      	cmp	r2, r3
 800e104:	d1f7      	bne.n	800e0f6 <_dtoa_r+0x6c6>
 800e106:	9901      	ldr	r1, [sp, #4]
 800e108:	2230      	movs	r2, #48	; 0x30
 800e10a:	3701      	adds	r7, #1
 800e10c:	700a      	strb	r2, [r1, #0]
 800e10e:	781a      	ldrb	r2, [r3, #0]
 800e110:	3201      	adds	r2, #1
 800e112:	701a      	strb	r2, [r3, #0]
 800e114:	e790      	b.n	800e038 <_dtoa_r+0x608>
 800e116:	4ba6      	ldr	r3, [pc, #664]	; (800e3b0 <_dtoa_r+0x980>)
 800e118:	2200      	movs	r2, #0
 800e11a:	f7f2 fa87 	bl	800062c <__aeabi_dmul>
 800e11e:	2200      	movs	r2, #0
 800e120:	2300      	movs	r3, #0
 800e122:	4606      	mov	r6, r0
 800e124:	460f      	mov	r7, r1
 800e126:	f7f2 fce9 	bl	8000afc <__aeabi_dcmpeq>
 800e12a:	2800      	cmp	r0, #0
 800e12c:	d09d      	beq.n	800e06a <_dtoa_r+0x63a>
 800e12e:	e7cf      	b.n	800e0d0 <_dtoa_r+0x6a0>
 800e130:	9a08      	ldr	r2, [sp, #32]
 800e132:	2a00      	cmp	r2, #0
 800e134:	f000 80d7 	beq.w	800e2e6 <_dtoa_r+0x8b6>
 800e138:	9a06      	ldr	r2, [sp, #24]
 800e13a:	2a01      	cmp	r2, #1
 800e13c:	f300 80ba 	bgt.w	800e2b4 <_dtoa_r+0x884>
 800e140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e142:	2a00      	cmp	r2, #0
 800e144:	f000 80b2 	beq.w	800e2ac <_dtoa_r+0x87c>
 800e148:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e14c:	9e07      	ldr	r6, [sp, #28]
 800e14e:	9d04      	ldr	r5, [sp, #16]
 800e150:	9a04      	ldr	r2, [sp, #16]
 800e152:	441a      	add	r2, r3
 800e154:	9204      	str	r2, [sp, #16]
 800e156:	9a05      	ldr	r2, [sp, #20]
 800e158:	2101      	movs	r1, #1
 800e15a:	441a      	add	r2, r3
 800e15c:	4620      	mov	r0, r4
 800e15e:	9205      	str	r2, [sp, #20]
 800e160:	f000 fdf8 	bl	800ed54 <__i2b>
 800e164:	4607      	mov	r7, r0
 800e166:	2d00      	cmp	r5, #0
 800e168:	dd0c      	ble.n	800e184 <_dtoa_r+0x754>
 800e16a:	9b05      	ldr	r3, [sp, #20]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	dd09      	ble.n	800e184 <_dtoa_r+0x754>
 800e170:	42ab      	cmp	r3, r5
 800e172:	9a04      	ldr	r2, [sp, #16]
 800e174:	bfa8      	it	ge
 800e176:	462b      	movge	r3, r5
 800e178:	1ad2      	subs	r2, r2, r3
 800e17a:	9204      	str	r2, [sp, #16]
 800e17c:	9a05      	ldr	r2, [sp, #20]
 800e17e:	1aed      	subs	r5, r5, r3
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	9305      	str	r3, [sp, #20]
 800e184:	9b07      	ldr	r3, [sp, #28]
 800e186:	b31b      	cbz	r3, 800e1d0 <_dtoa_r+0x7a0>
 800e188:	9b08      	ldr	r3, [sp, #32]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f000 80af 	beq.w	800e2ee <_dtoa_r+0x8be>
 800e190:	2e00      	cmp	r6, #0
 800e192:	dd13      	ble.n	800e1bc <_dtoa_r+0x78c>
 800e194:	4639      	mov	r1, r7
 800e196:	4632      	mov	r2, r6
 800e198:	4620      	mov	r0, r4
 800e19a:	f000 fe9b 	bl	800eed4 <__pow5mult>
 800e19e:	ee18 2a10 	vmov	r2, s16
 800e1a2:	4601      	mov	r1, r0
 800e1a4:	4607      	mov	r7, r0
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	f000 fdea 	bl	800ed80 <__multiply>
 800e1ac:	ee18 1a10 	vmov	r1, s16
 800e1b0:	4680      	mov	r8, r0
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f000 fd16 	bl	800ebe4 <_Bfree>
 800e1b8:	ee08 8a10 	vmov	s16, r8
 800e1bc:	9b07      	ldr	r3, [sp, #28]
 800e1be:	1b9a      	subs	r2, r3, r6
 800e1c0:	d006      	beq.n	800e1d0 <_dtoa_r+0x7a0>
 800e1c2:	ee18 1a10 	vmov	r1, s16
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f000 fe84 	bl	800eed4 <__pow5mult>
 800e1cc:	ee08 0a10 	vmov	s16, r0
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	f000 fdbe 	bl	800ed54 <__i2b>
 800e1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	4606      	mov	r6, r0
 800e1de:	f340 8088 	ble.w	800e2f2 <_dtoa_r+0x8c2>
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	4601      	mov	r1, r0
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	f000 fe74 	bl	800eed4 <__pow5mult>
 800e1ec:	9b06      	ldr	r3, [sp, #24]
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	4606      	mov	r6, r0
 800e1f2:	f340 8081 	ble.w	800e2f8 <_dtoa_r+0x8c8>
 800e1f6:	f04f 0800 	mov.w	r8, #0
 800e1fa:	6933      	ldr	r3, [r6, #16]
 800e1fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e200:	6918      	ldr	r0, [r3, #16]
 800e202:	f000 fd57 	bl	800ecb4 <__hi0bits>
 800e206:	f1c0 0020 	rsb	r0, r0, #32
 800e20a:	9b05      	ldr	r3, [sp, #20]
 800e20c:	4418      	add	r0, r3
 800e20e:	f010 001f 	ands.w	r0, r0, #31
 800e212:	f000 8092 	beq.w	800e33a <_dtoa_r+0x90a>
 800e216:	f1c0 0320 	rsb	r3, r0, #32
 800e21a:	2b04      	cmp	r3, #4
 800e21c:	f340 808a 	ble.w	800e334 <_dtoa_r+0x904>
 800e220:	f1c0 001c 	rsb	r0, r0, #28
 800e224:	9b04      	ldr	r3, [sp, #16]
 800e226:	4403      	add	r3, r0
 800e228:	9304      	str	r3, [sp, #16]
 800e22a:	9b05      	ldr	r3, [sp, #20]
 800e22c:	4403      	add	r3, r0
 800e22e:	4405      	add	r5, r0
 800e230:	9305      	str	r3, [sp, #20]
 800e232:	9b04      	ldr	r3, [sp, #16]
 800e234:	2b00      	cmp	r3, #0
 800e236:	dd07      	ble.n	800e248 <_dtoa_r+0x818>
 800e238:	ee18 1a10 	vmov	r1, s16
 800e23c:	461a      	mov	r2, r3
 800e23e:	4620      	mov	r0, r4
 800e240:	f000 fea2 	bl	800ef88 <__lshift>
 800e244:	ee08 0a10 	vmov	s16, r0
 800e248:	9b05      	ldr	r3, [sp, #20]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	dd05      	ble.n	800e25a <_dtoa_r+0x82a>
 800e24e:	4631      	mov	r1, r6
 800e250:	461a      	mov	r2, r3
 800e252:	4620      	mov	r0, r4
 800e254:	f000 fe98 	bl	800ef88 <__lshift>
 800e258:	4606      	mov	r6, r0
 800e25a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d06e      	beq.n	800e33e <_dtoa_r+0x90e>
 800e260:	ee18 0a10 	vmov	r0, s16
 800e264:	4631      	mov	r1, r6
 800e266:	f000 feff 	bl	800f068 <__mcmp>
 800e26a:	2800      	cmp	r0, #0
 800e26c:	da67      	bge.n	800e33e <_dtoa_r+0x90e>
 800e26e:	9b00      	ldr	r3, [sp, #0]
 800e270:	3b01      	subs	r3, #1
 800e272:	ee18 1a10 	vmov	r1, s16
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	220a      	movs	r2, #10
 800e27a:	2300      	movs	r3, #0
 800e27c:	4620      	mov	r0, r4
 800e27e:	f000 fcd3 	bl	800ec28 <__multadd>
 800e282:	9b08      	ldr	r3, [sp, #32]
 800e284:	ee08 0a10 	vmov	s16, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f000 81b1 	beq.w	800e5f0 <_dtoa_r+0xbc0>
 800e28e:	2300      	movs	r3, #0
 800e290:	4639      	mov	r1, r7
 800e292:	220a      	movs	r2, #10
 800e294:	4620      	mov	r0, r4
 800e296:	f000 fcc7 	bl	800ec28 <__multadd>
 800e29a:	9b02      	ldr	r3, [sp, #8]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	4607      	mov	r7, r0
 800e2a0:	f300 808e 	bgt.w	800e3c0 <_dtoa_r+0x990>
 800e2a4:	9b06      	ldr	r3, [sp, #24]
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	dc51      	bgt.n	800e34e <_dtoa_r+0x91e>
 800e2aa:	e089      	b.n	800e3c0 <_dtoa_r+0x990>
 800e2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e2b2:	e74b      	b.n	800e14c <_dtoa_r+0x71c>
 800e2b4:	9b03      	ldr	r3, [sp, #12]
 800e2b6:	1e5e      	subs	r6, r3, #1
 800e2b8:	9b07      	ldr	r3, [sp, #28]
 800e2ba:	42b3      	cmp	r3, r6
 800e2bc:	bfbf      	itttt	lt
 800e2be:	9b07      	ldrlt	r3, [sp, #28]
 800e2c0:	9607      	strlt	r6, [sp, #28]
 800e2c2:	1af2      	sublt	r2, r6, r3
 800e2c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e2c6:	bfb6      	itet	lt
 800e2c8:	189b      	addlt	r3, r3, r2
 800e2ca:	1b9e      	subge	r6, r3, r6
 800e2cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e2ce:	9b03      	ldr	r3, [sp, #12]
 800e2d0:	bfb8      	it	lt
 800e2d2:	2600      	movlt	r6, #0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	bfb7      	itett	lt
 800e2d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e2dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e2e0:	1a9d      	sublt	r5, r3, r2
 800e2e2:	2300      	movlt	r3, #0
 800e2e4:	e734      	b.n	800e150 <_dtoa_r+0x720>
 800e2e6:	9e07      	ldr	r6, [sp, #28]
 800e2e8:	9d04      	ldr	r5, [sp, #16]
 800e2ea:	9f08      	ldr	r7, [sp, #32]
 800e2ec:	e73b      	b.n	800e166 <_dtoa_r+0x736>
 800e2ee:	9a07      	ldr	r2, [sp, #28]
 800e2f0:	e767      	b.n	800e1c2 <_dtoa_r+0x792>
 800e2f2:	9b06      	ldr	r3, [sp, #24]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	dc18      	bgt.n	800e32a <_dtoa_r+0x8fa>
 800e2f8:	f1ba 0f00 	cmp.w	sl, #0
 800e2fc:	d115      	bne.n	800e32a <_dtoa_r+0x8fa>
 800e2fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e302:	b993      	cbnz	r3, 800e32a <_dtoa_r+0x8fa>
 800e304:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e308:	0d1b      	lsrs	r3, r3, #20
 800e30a:	051b      	lsls	r3, r3, #20
 800e30c:	b183      	cbz	r3, 800e330 <_dtoa_r+0x900>
 800e30e:	9b04      	ldr	r3, [sp, #16]
 800e310:	3301      	adds	r3, #1
 800e312:	9304      	str	r3, [sp, #16]
 800e314:	9b05      	ldr	r3, [sp, #20]
 800e316:	3301      	adds	r3, #1
 800e318:	9305      	str	r3, [sp, #20]
 800e31a:	f04f 0801 	mov.w	r8, #1
 800e31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e320:	2b00      	cmp	r3, #0
 800e322:	f47f af6a 	bne.w	800e1fa <_dtoa_r+0x7ca>
 800e326:	2001      	movs	r0, #1
 800e328:	e76f      	b.n	800e20a <_dtoa_r+0x7da>
 800e32a:	f04f 0800 	mov.w	r8, #0
 800e32e:	e7f6      	b.n	800e31e <_dtoa_r+0x8ee>
 800e330:	4698      	mov	r8, r3
 800e332:	e7f4      	b.n	800e31e <_dtoa_r+0x8ee>
 800e334:	f43f af7d 	beq.w	800e232 <_dtoa_r+0x802>
 800e338:	4618      	mov	r0, r3
 800e33a:	301c      	adds	r0, #28
 800e33c:	e772      	b.n	800e224 <_dtoa_r+0x7f4>
 800e33e:	9b03      	ldr	r3, [sp, #12]
 800e340:	2b00      	cmp	r3, #0
 800e342:	dc37      	bgt.n	800e3b4 <_dtoa_r+0x984>
 800e344:	9b06      	ldr	r3, [sp, #24]
 800e346:	2b02      	cmp	r3, #2
 800e348:	dd34      	ble.n	800e3b4 <_dtoa_r+0x984>
 800e34a:	9b03      	ldr	r3, [sp, #12]
 800e34c:	9302      	str	r3, [sp, #8]
 800e34e:	9b02      	ldr	r3, [sp, #8]
 800e350:	b96b      	cbnz	r3, 800e36e <_dtoa_r+0x93e>
 800e352:	4631      	mov	r1, r6
 800e354:	2205      	movs	r2, #5
 800e356:	4620      	mov	r0, r4
 800e358:	f000 fc66 	bl	800ec28 <__multadd>
 800e35c:	4601      	mov	r1, r0
 800e35e:	4606      	mov	r6, r0
 800e360:	ee18 0a10 	vmov	r0, s16
 800e364:	f000 fe80 	bl	800f068 <__mcmp>
 800e368:	2800      	cmp	r0, #0
 800e36a:	f73f adbb 	bgt.w	800dee4 <_dtoa_r+0x4b4>
 800e36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e370:	9d01      	ldr	r5, [sp, #4]
 800e372:	43db      	mvns	r3, r3
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	f04f 0800 	mov.w	r8, #0
 800e37a:	4631      	mov	r1, r6
 800e37c:	4620      	mov	r0, r4
 800e37e:	f000 fc31 	bl	800ebe4 <_Bfree>
 800e382:	2f00      	cmp	r7, #0
 800e384:	f43f aea4 	beq.w	800e0d0 <_dtoa_r+0x6a0>
 800e388:	f1b8 0f00 	cmp.w	r8, #0
 800e38c:	d005      	beq.n	800e39a <_dtoa_r+0x96a>
 800e38e:	45b8      	cmp	r8, r7
 800e390:	d003      	beq.n	800e39a <_dtoa_r+0x96a>
 800e392:	4641      	mov	r1, r8
 800e394:	4620      	mov	r0, r4
 800e396:	f000 fc25 	bl	800ebe4 <_Bfree>
 800e39a:	4639      	mov	r1, r7
 800e39c:	4620      	mov	r0, r4
 800e39e:	f000 fc21 	bl	800ebe4 <_Bfree>
 800e3a2:	e695      	b.n	800e0d0 <_dtoa_r+0x6a0>
 800e3a4:	2600      	movs	r6, #0
 800e3a6:	4637      	mov	r7, r6
 800e3a8:	e7e1      	b.n	800e36e <_dtoa_r+0x93e>
 800e3aa:	9700      	str	r7, [sp, #0]
 800e3ac:	4637      	mov	r7, r6
 800e3ae:	e599      	b.n	800dee4 <_dtoa_r+0x4b4>
 800e3b0:	40240000 	.word	0x40240000
 800e3b4:	9b08      	ldr	r3, [sp, #32]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	f000 80ca 	beq.w	800e550 <_dtoa_r+0xb20>
 800e3bc:	9b03      	ldr	r3, [sp, #12]
 800e3be:	9302      	str	r3, [sp, #8]
 800e3c0:	2d00      	cmp	r5, #0
 800e3c2:	dd05      	ble.n	800e3d0 <_dtoa_r+0x9a0>
 800e3c4:	4639      	mov	r1, r7
 800e3c6:	462a      	mov	r2, r5
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	f000 fddd 	bl	800ef88 <__lshift>
 800e3ce:	4607      	mov	r7, r0
 800e3d0:	f1b8 0f00 	cmp.w	r8, #0
 800e3d4:	d05b      	beq.n	800e48e <_dtoa_r+0xa5e>
 800e3d6:	6879      	ldr	r1, [r7, #4]
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f000 fbc3 	bl	800eb64 <_Balloc>
 800e3de:	4605      	mov	r5, r0
 800e3e0:	b928      	cbnz	r0, 800e3ee <_dtoa_r+0x9be>
 800e3e2:	4b87      	ldr	r3, [pc, #540]	; (800e600 <_dtoa_r+0xbd0>)
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e3ea:	f7ff bb3b 	b.w	800da64 <_dtoa_r+0x34>
 800e3ee:	693a      	ldr	r2, [r7, #16]
 800e3f0:	3202      	adds	r2, #2
 800e3f2:	0092      	lsls	r2, r2, #2
 800e3f4:	f107 010c 	add.w	r1, r7, #12
 800e3f8:	300c      	adds	r0, #12
 800e3fa:	f7fc ffb3 	bl	800b364 <memcpy>
 800e3fe:	2201      	movs	r2, #1
 800e400:	4629      	mov	r1, r5
 800e402:	4620      	mov	r0, r4
 800e404:	f000 fdc0 	bl	800ef88 <__lshift>
 800e408:	9b01      	ldr	r3, [sp, #4]
 800e40a:	f103 0901 	add.w	r9, r3, #1
 800e40e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e412:	4413      	add	r3, r2
 800e414:	9305      	str	r3, [sp, #20]
 800e416:	f00a 0301 	and.w	r3, sl, #1
 800e41a:	46b8      	mov	r8, r7
 800e41c:	9304      	str	r3, [sp, #16]
 800e41e:	4607      	mov	r7, r0
 800e420:	4631      	mov	r1, r6
 800e422:	ee18 0a10 	vmov	r0, s16
 800e426:	f7ff fa75 	bl	800d914 <quorem>
 800e42a:	4641      	mov	r1, r8
 800e42c:	9002      	str	r0, [sp, #8]
 800e42e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e432:	ee18 0a10 	vmov	r0, s16
 800e436:	f000 fe17 	bl	800f068 <__mcmp>
 800e43a:	463a      	mov	r2, r7
 800e43c:	9003      	str	r0, [sp, #12]
 800e43e:	4631      	mov	r1, r6
 800e440:	4620      	mov	r0, r4
 800e442:	f000 fe2d 	bl	800f0a0 <__mdiff>
 800e446:	68c2      	ldr	r2, [r0, #12]
 800e448:	f109 3bff 	add.w	fp, r9, #4294967295
 800e44c:	4605      	mov	r5, r0
 800e44e:	bb02      	cbnz	r2, 800e492 <_dtoa_r+0xa62>
 800e450:	4601      	mov	r1, r0
 800e452:	ee18 0a10 	vmov	r0, s16
 800e456:	f000 fe07 	bl	800f068 <__mcmp>
 800e45a:	4602      	mov	r2, r0
 800e45c:	4629      	mov	r1, r5
 800e45e:	4620      	mov	r0, r4
 800e460:	9207      	str	r2, [sp, #28]
 800e462:	f000 fbbf 	bl	800ebe4 <_Bfree>
 800e466:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e46a:	ea43 0102 	orr.w	r1, r3, r2
 800e46e:	9b04      	ldr	r3, [sp, #16]
 800e470:	430b      	orrs	r3, r1
 800e472:	464d      	mov	r5, r9
 800e474:	d10f      	bne.n	800e496 <_dtoa_r+0xa66>
 800e476:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e47a:	d02a      	beq.n	800e4d2 <_dtoa_r+0xaa2>
 800e47c:	9b03      	ldr	r3, [sp, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	dd02      	ble.n	800e488 <_dtoa_r+0xa58>
 800e482:	9b02      	ldr	r3, [sp, #8]
 800e484:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e488:	f88b a000 	strb.w	sl, [fp]
 800e48c:	e775      	b.n	800e37a <_dtoa_r+0x94a>
 800e48e:	4638      	mov	r0, r7
 800e490:	e7ba      	b.n	800e408 <_dtoa_r+0x9d8>
 800e492:	2201      	movs	r2, #1
 800e494:	e7e2      	b.n	800e45c <_dtoa_r+0xa2c>
 800e496:	9b03      	ldr	r3, [sp, #12]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	db04      	blt.n	800e4a6 <_dtoa_r+0xa76>
 800e49c:	9906      	ldr	r1, [sp, #24]
 800e49e:	430b      	orrs	r3, r1
 800e4a0:	9904      	ldr	r1, [sp, #16]
 800e4a2:	430b      	orrs	r3, r1
 800e4a4:	d122      	bne.n	800e4ec <_dtoa_r+0xabc>
 800e4a6:	2a00      	cmp	r2, #0
 800e4a8:	ddee      	ble.n	800e488 <_dtoa_r+0xa58>
 800e4aa:	ee18 1a10 	vmov	r1, s16
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	f000 fd69 	bl	800ef88 <__lshift>
 800e4b6:	4631      	mov	r1, r6
 800e4b8:	ee08 0a10 	vmov	s16, r0
 800e4bc:	f000 fdd4 	bl	800f068 <__mcmp>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	dc03      	bgt.n	800e4cc <_dtoa_r+0xa9c>
 800e4c4:	d1e0      	bne.n	800e488 <_dtoa_r+0xa58>
 800e4c6:	f01a 0f01 	tst.w	sl, #1
 800e4ca:	d0dd      	beq.n	800e488 <_dtoa_r+0xa58>
 800e4cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e4d0:	d1d7      	bne.n	800e482 <_dtoa_r+0xa52>
 800e4d2:	2339      	movs	r3, #57	; 0x39
 800e4d4:	f88b 3000 	strb.w	r3, [fp]
 800e4d8:	462b      	mov	r3, r5
 800e4da:	461d      	mov	r5, r3
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e4e2:	2a39      	cmp	r2, #57	; 0x39
 800e4e4:	d071      	beq.n	800e5ca <_dtoa_r+0xb9a>
 800e4e6:	3201      	adds	r2, #1
 800e4e8:	701a      	strb	r2, [r3, #0]
 800e4ea:	e746      	b.n	800e37a <_dtoa_r+0x94a>
 800e4ec:	2a00      	cmp	r2, #0
 800e4ee:	dd07      	ble.n	800e500 <_dtoa_r+0xad0>
 800e4f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e4f4:	d0ed      	beq.n	800e4d2 <_dtoa_r+0xaa2>
 800e4f6:	f10a 0301 	add.w	r3, sl, #1
 800e4fa:	f88b 3000 	strb.w	r3, [fp]
 800e4fe:	e73c      	b.n	800e37a <_dtoa_r+0x94a>
 800e500:	9b05      	ldr	r3, [sp, #20]
 800e502:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e506:	4599      	cmp	r9, r3
 800e508:	d047      	beq.n	800e59a <_dtoa_r+0xb6a>
 800e50a:	ee18 1a10 	vmov	r1, s16
 800e50e:	2300      	movs	r3, #0
 800e510:	220a      	movs	r2, #10
 800e512:	4620      	mov	r0, r4
 800e514:	f000 fb88 	bl	800ec28 <__multadd>
 800e518:	45b8      	cmp	r8, r7
 800e51a:	ee08 0a10 	vmov	s16, r0
 800e51e:	f04f 0300 	mov.w	r3, #0
 800e522:	f04f 020a 	mov.w	r2, #10
 800e526:	4641      	mov	r1, r8
 800e528:	4620      	mov	r0, r4
 800e52a:	d106      	bne.n	800e53a <_dtoa_r+0xb0a>
 800e52c:	f000 fb7c 	bl	800ec28 <__multadd>
 800e530:	4680      	mov	r8, r0
 800e532:	4607      	mov	r7, r0
 800e534:	f109 0901 	add.w	r9, r9, #1
 800e538:	e772      	b.n	800e420 <_dtoa_r+0x9f0>
 800e53a:	f000 fb75 	bl	800ec28 <__multadd>
 800e53e:	4639      	mov	r1, r7
 800e540:	4680      	mov	r8, r0
 800e542:	2300      	movs	r3, #0
 800e544:	220a      	movs	r2, #10
 800e546:	4620      	mov	r0, r4
 800e548:	f000 fb6e 	bl	800ec28 <__multadd>
 800e54c:	4607      	mov	r7, r0
 800e54e:	e7f1      	b.n	800e534 <_dtoa_r+0xb04>
 800e550:	9b03      	ldr	r3, [sp, #12]
 800e552:	9302      	str	r3, [sp, #8]
 800e554:	9d01      	ldr	r5, [sp, #4]
 800e556:	ee18 0a10 	vmov	r0, s16
 800e55a:	4631      	mov	r1, r6
 800e55c:	f7ff f9da 	bl	800d914 <quorem>
 800e560:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e564:	9b01      	ldr	r3, [sp, #4]
 800e566:	f805 ab01 	strb.w	sl, [r5], #1
 800e56a:	1aea      	subs	r2, r5, r3
 800e56c:	9b02      	ldr	r3, [sp, #8]
 800e56e:	4293      	cmp	r3, r2
 800e570:	dd09      	ble.n	800e586 <_dtoa_r+0xb56>
 800e572:	ee18 1a10 	vmov	r1, s16
 800e576:	2300      	movs	r3, #0
 800e578:	220a      	movs	r2, #10
 800e57a:	4620      	mov	r0, r4
 800e57c:	f000 fb54 	bl	800ec28 <__multadd>
 800e580:	ee08 0a10 	vmov	s16, r0
 800e584:	e7e7      	b.n	800e556 <_dtoa_r+0xb26>
 800e586:	9b02      	ldr	r3, [sp, #8]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	bfc8      	it	gt
 800e58c:	461d      	movgt	r5, r3
 800e58e:	9b01      	ldr	r3, [sp, #4]
 800e590:	bfd8      	it	le
 800e592:	2501      	movle	r5, #1
 800e594:	441d      	add	r5, r3
 800e596:	f04f 0800 	mov.w	r8, #0
 800e59a:	ee18 1a10 	vmov	r1, s16
 800e59e:	2201      	movs	r2, #1
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	f000 fcf1 	bl	800ef88 <__lshift>
 800e5a6:	4631      	mov	r1, r6
 800e5a8:	ee08 0a10 	vmov	s16, r0
 800e5ac:	f000 fd5c 	bl	800f068 <__mcmp>
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	dc91      	bgt.n	800e4d8 <_dtoa_r+0xaa8>
 800e5b4:	d102      	bne.n	800e5bc <_dtoa_r+0xb8c>
 800e5b6:	f01a 0f01 	tst.w	sl, #1
 800e5ba:	d18d      	bne.n	800e4d8 <_dtoa_r+0xaa8>
 800e5bc:	462b      	mov	r3, r5
 800e5be:	461d      	mov	r5, r3
 800e5c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5c4:	2a30      	cmp	r2, #48	; 0x30
 800e5c6:	d0fa      	beq.n	800e5be <_dtoa_r+0xb8e>
 800e5c8:	e6d7      	b.n	800e37a <_dtoa_r+0x94a>
 800e5ca:	9a01      	ldr	r2, [sp, #4]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d184      	bne.n	800e4da <_dtoa_r+0xaaa>
 800e5d0:	9b00      	ldr	r3, [sp, #0]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	2331      	movs	r3, #49	; 0x31
 800e5d8:	7013      	strb	r3, [r2, #0]
 800e5da:	e6ce      	b.n	800e37a <_dtoa_r+0x94a>
 800e5dc:	4b09      	ldr	r3, [pc, #36]	; (800e604 <_dtoa_r+0xbd4>)
 800e5de:	f7ff ba95 	b.w	800db0c <_dtoa_r+0xdc>
 800e5e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	f47f aa6e 	bne.w	800dac6 <_dtoa_r+0x96>
 800e5ea:	4b07      	ldr	r3, [pc, #28]	; (800e608 <_dtoa_r+0xbd8>)
 800e5ec:	f7ff ba8e 	b.w	800db0c <_dtoa_r+0xdc>
 800e5f0:	9b02      	ldr	r3, [sp, #8]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	dcae      	bgt.n	800e554 <_dtoa_r+0xb24>
 800e5f6:	9b06      	ldr	r3, [sp, #24]
 800e5f8:	2b02      	cmp	r3, #2
 800e5fa:	f73f aea8 	bgt.w	800e34e <_dtoa_r+0x91e>
 800e5fe:	e7a9      	b.n	800e554 <_dtoa_r+0xb24>
 800e600:	0803cd09 	.word	0x0803cd09
 800e604:	0803cf38 	.word	0x0803cf38
 800e608:	0803cca1 	.word	0x0803cca1

0800e60c <__sflush_r>:
 800e60c:	898a      	ldrh	r2, [r1, #12]
 800e60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e612:	4605      	mov	r5, r0
 800e614:	0710      	lsls	r0, r2, #28
 800e616:	460c      	mov	r4, r1
 800e618:	d458      	bmi.n	800e6cc <__sflush_r+0xc0>
 800e61a:	684b      	ldr	r3, [r1, #4]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	dc05      	bgt.n	800e62c <__sflush_r+0x20>
 800e620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e622:	2b00      	cmp	r3, #0
 800e624:	dc02      	bgt.n	800e62c <__sflush_r+0x20>
 800e626:	2000      	movs	r0, #0
 800e628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e62c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e62e:	2e00      	cmp	r6, #0
 800e630:	d0f9      	beq.n	800e626 <__sflush_r+0x1a>
 800e632:	2300      	movs	r3, #0
 800e634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e638:	682f      	ldr	r7, [r5, #0]
 800e63a:	602b      	str	r3, [r5, #0]
 800e63c:	d032      	beq.n	800e6a4 <__sflush_r+0x98>
 800e63e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e640:	89a3      	ldrh	r3, [r4, #12]
 800e642:	075a      	lsls	r2, r3, #29
 800e644:	d505      	bpl.n	800e652 <__sflush_r+0x46>
 800e646:	6863      	ldr	r3, [r4, #4]
 800e648:	1ac0      	subs	r0, r0, r3
 800e64a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e64c:	b10b      	cbz	r3, 800e652 <__sflush_r+0x46>
 800e64e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e650:	1ac0      	subs	r0, r0, r3
 800e652:	2300      	movs	r3, #0
 800e654:	4602      	mov	r2, r0
 800e656:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e658:	6a21      	ldr	r1, [r4, #32]
 800e65a:	4628      	mov	r0, r5
 800e65c:	47b0      	blx	r6
 800e65e:	1c43      	adds	r3, r0, #1
 800e660:	89a3      	ldrh	r3, [r4, #12]
 800e662:	d106      	bne.n	800e672 <__sflush_r+0x66>
 800e664:	6829      	ldr	r1, [r5, #0]
 800e666:	291d      	cmp	r1, #29
 800e668:	d82c      	bhi.n	800e6c4 <__sflush_r+0xb8>
 800e66a:	4a2a      	ldr	r2, [pc, #168]	; (800e714 <__sflush_r+0x108>)
 800e66c:	40ca      	lsrs	r2, r1
 800e66e:	07d6      	lsls	r6, r2, #31
 800e670:	d528      	bpl.n	800e6c4 <__sflush_r+0xb8>
 800e672:	2200      	movs	r2, #0
 800e674:	6062      	str	r2, [r4, #4]
 800e676:	04d9      	lsls	r1, r3, #19
 800e678:	6922      	ldr	r2, [r4, #16]
 800e67a:	6022      	str	r2, [r4, #0]
 800e67c:	d504      	bpl.n	800e688 <__sflush_r+0x7c>
 800e67e:	1c42      	adds	r2, r0, #1
 800e680:	d101      	bne.n	800e686 <__sflush_r+0x7a>
 800e682:	682b      	ldr	r3, [r5, #0]
 800e684:	b903      	cbnz	r3, 800e688 <__sflush_r+0x7c>
 800e686:	6560      	str	r0, [r4, #84]	; 0x54
 800e688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e68a:	602f      	str	r7, [r5, #0]
 800e68c:	2900      	cmp	r1, #0
 800e68e:	d0ca      	beq.n	800e626 <__sflush_r+0x1a>
 800e690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e694:	4299      	cmp	r1, r3
 800e696:	d002      	beq.n	800e69e <__sflush_r+0x92>
 800e698:	4628      	mov	r0, r5
 800e69a:	f7fd f8eb 	bl	800b874 <_free_r>
 800e69e:	2000      	movs	r0, #0
 800e6a0:	6360      	str	r0, [r4, #52]	; 0x34
 800e6a2:	e7c1      	b.n	800e628 <__sflush_r+0x1c>
 800e6a4:	6a21      	ldr	r1, [r4, #32]
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	47b0      	blx	r6
 800e6ac:	1c41      	adds	r1, r0, #1
 800e6ae:	d1c7      	bne.n	800e640 <__sflush_r+0x34>
 800e6b0:	682b      	ldr	r3, [r5, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d0c4      	beq.n	800e640 <__sflush_r+0x34>
 800e6b6:	2b1d      	cmp	r3, #29
 800e6b8:	d001      	beq.n	800e6be <__sflush_r+0xb2>
 800e6ba:	2b16      	cmp	r3, #22
 800e6bc:	d101      	bne.n	800e6c2 <__sflush_r+0xb6>
 800e6be:	602f      	str	r7, [r5, #0]
 800e6c0:	e7b1      	b.n	800e626 <__sflush_r+0x1a>
 800e6c2:	89a3      	ldrh	r3, [r4, #12]
 800e6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6c8:	81a3      	strh	r3, [r4, #12]
 800e6ca:	e7ad      	b.n	800e628 <__sflush_r+0x1c>
 800e6cc:	690f      	ldr	r7, [r1, #16]
 800e6ce:	2f00      	cmp	r7, #0
 800e6d0:	d0a9      	beq.n	800e626 <__sflush_r+0x1a>
 800e6d2:	0793      	lsls	r3, r2, #30
 800e6d4:	680e      	ldr	r6, [r1, #0]
 800e6d6:	bf08      	it	eq
 800e6d8:	694b      	ldreq	r3, [r1, #20]
 800e6da:	600f      	str	r7, [r1, #0]
 800e6dc:	bf18      	it	ne
 800e6de:	2300      	movne	r3, #0
 800e6e0:	eba6 0807 	sub.w	r8, r6, r7
 800e6e4:	608b      	str	r3, [r1, #8]
 800e6e6:	f1b8 0f00 	cmp.w	r8, #0
 800e6ea:	dd9c      	ble.n	800e626 <__sflush_r+0x1a>
 800e6ec:	6a21      	ldr	r1, [r4, #32]
 800e6ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e6f0:	4643      	mov	r3, r8
 800e6f2:	463a      	mov	r2, r7
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	47b0      	blx	r6
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	dc06      	bgt.n	800e70a <__sflush_r+0xfe>
 800e6fc:	89a3      	ldrh	r3, [r4, #12]
 800e6fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e702:	81a3      	strh	r3, [r4, #12]
 800e704:	f04f 30ff 	mov.w	r0, #4294967295
 800e708:	e78e      	b.n	800e628 <__sflush_r+0x1c>
 800e70a:	4407      	add	r7, r0
 800e70c:	eba8 0800 	sub.w	r8, r8, r0
 800e710:	e7e9      	b.n	800e6e6 <__sflush_r+0xda>
 800e712:	bf00      	nop
 800e714:	20400001 	.word	0x20400001

0800e718 <_fflush_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	690b      	ldr	r3, [r1, #16]
 800e71c:	4605      	mov	r5, r0
 800e71e:	460c      	mov	r4, r1
 800e720:	b913      	cbnz	r3, 800e728 <_fflush_r+0x10>
 800e722:	2500      	movs	r5, #0
 800e724:	4628      	mov	r0, r5
 800e726:	bd38      	pop	{r3, r4, r5, pc}
 800e728:	b118      	cbz	r0, 800e732 <_fflush_r+0x1a>
 800e72a:	6983      	ldr	r3, [r0, #24]
 800e72c:	b90b      	cbnz	r3, 800e732 <_fflush_r+0x1a>
 800e72e:	f000 f887 	bl	800e840 <__sinit>
 800e732:	4b14      	ldr	r3, [pc, #80]	; (800e784 <_fflush_r+0x6c>)
 800e734:	429c      	cmp	r4, r3
 800e736:	d11b      	bne.n	800e770 <_fflush_r+0x58>
 800e738:	686c      	ldr	r4, [r5, #4]
 800e73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d0ef      	beq.n	800e722 <_fflush_r+0xa>
 800e742:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e744:	07d0      	lsls	r0, r2, #31
 800e746:	d404      	bmi.n	800e752 <_fflush_r+0x3a>
 800e748:	0599      	lsls	r1, r3, #22
 800e74a:	d402      	bmi.n	800e752 <_fflush_r+0x3a>
 800e74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e74e:	f000 f967 	bl	800ea20 <__retarget_lock_acquire_recursive>
 800e752:	4628      	mov	r0, r5
 800e754:	4621      	mov	r1, r4
 800e756:	f7ff ff59 	bl	800e60c <__sflush_r>
 800e75a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e75c:	07da      	lsls	r2, r3, #31
 800e75e:	4605      	mov	r5, r0
 800e760:	d4e0      	bmi.n	800e724 <_fflush_r+0xc>
 800e762:	89a3      	ldrh	r3, [r4, #12]
 800e764:	059b      	lsls	r3, r3, #22
 800e766:	d4dd      	bmi.n	800e724 <_fflush_r+0xc>
 800e768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e76a:	f000 f95b 	bl	800ea24 <__retarget_lock_release_recursive>
 800e76e:	e7d9      	b.n	800e724 <_fflush_r+0xc>
 800e770:	4b05      	ldr	r3, [pc, #20]	; (800e788 <_fflush_r+0x70>)
 800e772:	429c      	cmp	r4, r3
 800e774:	d101      	bne.n	800e77a <_fflush_r+0x62>
 800e776:	68ac      	ldr	r4, [r5, #8]
 800e778:	e7df      	b.n	800e73a <_fflush_r+0x22>
 800e77a:	4b04      	ldr	r3, [pc, #16]	; (800e78c <_fflush_r+0x74>)
 800e77c:	429c      	cmp	r4, r3
 800e77e:	bf08      	it	eq
 800e780:	68ec      	ldreq	r4, [r5, #12]
 800e782:	e7da      	b.n	800e73a <_fflush_r+0x22>
 800e784:	0803cd3c 	.word	0x0803cd3c
 800e788:	0803cd5c 	.word	0x0803cd5c
 800e78c:	0803cd1c 	.word	0x0803cd1c

0800e790 <std>:
 800e790:	2300      	movs	r3, #0
 800e792:	b510      	push	{r4, lr}
 800e794:	4604      	mov	r4, r0
 800e796:	e9c0 3300 	strd	r3, r3, [r0]
 800e79a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e79e:	6083      	str	r3, [r0, #8]
 800e7a0:	8181      	strh	r1, [r0, #12]
 800e7a2:	6643      	str	r3, [r0, #100]	; 0x64
 800e7a4:	81c2      	strh	r2, [r0, #14]
 800e7a6:	6183      	str	r3, [r0, #24]
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	2208      	movs	r2, #8
 800e7ac:	305c      	adds	r0, #92	; 0x5c
 800e7ae:	f7fc fde7 	bl	800b380 <memset>
 800e7b2:	4b05      	ldr	r3, [pc, #20]	; (800e7c8 <std+0x38>)
 800e7b4:	6263      	str	r3, [r4, #36]	; 0x24
 800e7b6:	4b05      	ldr	r3, [pc, #20]	; (800e7cc <std+0x3c>)
 800e7b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7ba:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <std+0x40>)
 800e7bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7be:	4b05      	ldr	r3, [pc, #20]	; (800e7d4 <std+0x44>)
 800e7c0:	6224      	str	r4, [r4, #32]
 800e7c2:	6323      	str	r3, [r4, #48]	; 0x30
 800e7c4:	bd10      	pop	{r4, pc}
 800e7c6:	bf00      	nop
 800e7c8:	0800c675 	.word	0x0800c675
 800e7cc:	0800c69b 	.word	0x0800c69b
 800e7d0:	0800c6d3 	.word	0x0800c6d3
 800e7d4:	0800c6f7 	.word	0x0800c6f7

0800e7d8 <_cleanup_r>:
 800e7d8:	4901      	ldr	r1, [pc, #4]	; (800e7e0 <_cleanup_r+0x8>)
 800e7da:	f000 b8af 	b.w	800e93c <_fwalk_reent>
 800e7de:	bf00      	nop
 800e7e0:	0800e719 	.word	0x0800e719

0800e7e4 <__sfmoreglue>:
 800e7e4:	b570      	push	{r4, r5, r6, lr}
 800e7e6:	2268      	movs	r2, #104	; 0x68
 800e7e8:	1e4d      	subs	r5, r1, #1
 800e7ea:	4355      	muls	r5, r2
 800e7ec:	460e      	mov	r6, r1
 800e7ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e7f2:	f7fd f8ab 	bl	800b94c <_malloc_r>
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	b140      	cbz	r0, 800e80c <__sfmoreglue+0x28>
 800e7fa:	2100      	movs	r1, #0
 800e7fc:	e9c0 1600 	strd	r1, r6, [r0]
 800e800:	300c      	adds	r0, #12
 800e802:	60a0      	str	r0, [r4, #8]
 800e804:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e808:	f7fc fdba 	bl	800b380 <memset>
 800e80c:	4620      	mov	r0, r4
 800e80e:	bd70      	pop	{r4, r5, r6, pc}

0800e810 <__sfp_lock_acquire>:
 800e810:	4801      	ldr	r0, [pc, #4]	; (800e818 <__sfp_lock_acquire+0x8>)
 800e812:	f000 b905 	b.w	800ea20 <__retarget_lock_acquire_recursive>
 800e816:	bf00      	nop
 800e818:	200037da 	.word	0x200037da

0800e81c <__sfp_lock_release>:
 800e81c:	4801      	ldr	r0, [pc, #4]	; (800e824 <__sfp_lock_release+0x8>)
 800e81e:	f000 b901 	b.w	800ea24 <__retarget_lock_release_recursive>
 800e822:	bf00      	nop
 800e824:	200037da 	.word	0x200037da

0800e828 <__sinit_lock_acquire>:
 800e828:	4801      	ldr	r0, [pc, #4]	; (800e830 <__sinit_lock_acquire+0x8>)
 800e82a:	f000 b8f9 	b.w	800ea20 <__retarget_lock_acquire_recursive>
 800e82e:	bf00      	nop
 800e830:	200037db 	.word	0x200037db

0800e834 <__sinit_lock_release>:
 800e834:	4801      	ldr	r0, [pc, #4]	; (800e83c <__sinit_lock_release+0x8>)
 800e836:	f000 b8f5 	b.w	800ea24 <__retarget_lock_release_recursive>
 800e83a:	bf00      	nop
 800e83c:	200037db 	.word	0x200037db

0800e840 <__sinit>:
 800e840:	b510      	push	{r4, lr}
 800e842:	4604      	mov	r4, r0
 800e844:	f7ff fff0 	bl	800e828 <__sinit_lock_acquire>
 800e848:	69a3      	ldr	r3, [r4, #24]
 800e84a:	b11b      	cbz	r3, 800e854 <__sinit+0x14>
 800e84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e850:	f7ff bff0 	b.w	800e834 <__sinit_lock_release>
 800e854:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e858:	6523      	str	r3, [r4, #80]	; 0x50
 800e85a:	4b13      	ldr	r3, [pc, #76]	; (800e8a8 <__sinit+0x68>)
 800e85c:	4a13      	ldr	r2, [pc, #76]	; (800e8ac <__sinit+0x6c>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	62a2      	str	r2, [r4, #40]	; 0x28
 800e862:	42a3      	cmp	r3, r4
 800e864:	bf04      	itt	eq
 800e866:	2301      	moveq	r3, #1
 800e868:	61a3      	streq	r3, [r4, #24]
 800e86a:	4620      	mov	r0, r4
 800e86c:	f000 f820 	bl	800e8b0 <__sfp>
 800e870:	6060      	str	r0, [r4, #4]
 800e872:	4620      	mov	r0, r4
 800e874:	f000 f81c 	bl	800e8b0 <__sfp>
 800e878:	60a0      	str	r0, [r4, #8]
 800e87a:	4620      	mov	r0, r4
 800e87c:	f000 f818 	bl	800e8b0 <__sfp>
 800e880:	2200      	movs	r2, #0
 800e882:	60e0      	str	r0, [r4, #12]
 800e884:	2104      	movs	r1, #4
 800e886:	6860      	ldr	r0, [r4, #4]
 800e888:	f7ff ff82 	bl	800e790 <std>
 800e88c:	68a0      	ldr	r0, [r4, #8]
 800e88e:	2201      	movs	r2, #1
 800e890:	2109      	movs	r1, #9
 800e892:	f7ff ff7d 	bl	800e790 <std>
 800e896:	68e0      	ldr	r0, [r4, #12]
 800e898:	2202      	movs	r2, #2
 800e89a:	2112      	movs	r1, #18
 800e89c:	f7ff ff78 	bl	800e790 <std>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	61a3      	str	r3, [r4, #24]
 800e8a4:	e7d2      	b.n	800e84c <__sinit+0xc>
 800e8a6:	bf00      	nop
 800e8a8:	0803c83c 	.word	0x0803c83c
 800e8ac:	0800e7d9 	.word	0x0800e7d9

0800e8b0 <__sfp>:
 800e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b2:	4607      	mov	r7, r0
 800e8b4:	f7ff ffac 	bl	800e810 <__sfp_lock_acquire>
 800e8b8:	4b1e      	ldr	r3, [pc, #120]	; (800e934 <__sfp+0x84>)
 800e8ba:	681e      	ldr	r6, [r3, #0]
 800e8bc:	69b3      	ldr	r3, [r6, #24]
 800e8be:	b913      	cbnz	r3, 800e8c6 <__sfp+0x16>
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	f7ff ffbd 	bl	800e840 <__sinit>
 800e8c6:	3648      	adds	r6, #72	; 0x48
 800e8c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	d503      	bpl.n	800e8d8 <__sfp+0x28>
 800e8d0:	6833      	ldr	r3, [r6, #0]
 800e8d2:	b30b      	cbz	r3, 800e918 <__sfp+0x68>
 800e8d4:	6836      	ldr	r6, [r6, #0]
 800e8d6:	e7f7      	b.n	800e8c8 <__sfp+0x18>
 800e8d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e8dc:	b9d5      	cbnz	r5, 800e914 <__sfp+0x64>
 800e8de:	4b16      	ldr	r3, [pc, #88]	; (800e938 <__sfp+0x88>)
 800e8e0:	60e3      	str	r3, [r4, #12]
 800e8e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e8e6:	6665      	str	r5, [r4, #100]	; 0x64
 800e8e8:	f000 f898 	bl	800ea1c <__retarget_lock_init_recursive>
 800e8ec:	f7ff ff96 	bl	800e81c <__sfp_lock_release>
 800e8f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e8f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e8f8:	6025      	str	r5, [r4, #0]
 800e8fa:	61a5      	str	r5, [r4, #24]
 800e8fc:	2208      	movs	r2, #8
 800e8fe:	4629      	mov	r1, r5
 800e900:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e904:	f7fc fd3c 	bl	800b380 <memset>
 800e908:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e90c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e910:	4620      	mov	r0, r4
 800e912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e914:	3468      	adds	r4, #104	; 0x68
 800e916:	e7d9      	b.n	800e8cc <__sfp+0x1c>
 800e918:	2104      	movs	r1, #4
 800e91a:	4638      	mov	r0, r7
 800e91c:	f7ff ff62 	bl	800e7e4 <__sfmoreglue>
 800e920:	4604      	mov	r4, r0
 800e922:	6030      	str	r0, [r6, #0]
 800e924:	2800      	cmp	r0, #0
 800e926:	d1d5      	bne.n	800e8d4 <__sfp+0x24>
 800e928:	f7ff ff78 	bl	800e81c <__sfp_lock_release>
 800e92c:	230c      	movs	r3, #12
 800e92e:	603b      	str	r3, [r7, #0]
 800e930:	e7ee      	b.n	800e910 <__sfp+0x60>
 800e932:	bf00      	nop
 800e934:	0803c83c 	.word	0x0803c83c
 800e938:	ffff0001 	.word	0xffff0001

0800e93c <_fwalk_reent>:
 800e93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e940:	4606      	mov	r6, r0
 800e942:	4688      	mov	r8, r1
 800e944:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e948:	2700      	movs	r7, #0
 800e94a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e94e:	f1b9 0901 	subs.w	r9, r9, #1
 800e952:	d505      	bpl.n	800e960 <_fwalk_reent+0x24>
 800e954:	6824      	ldr	r4, [r4, #0]
 800e956:	2c00      	cmp	r4, #0
 800e958:	d1f7      	bne.n	800e94a <_fwalk_reent+0xe>
 800e95a:	4638      	mov	r0, r7
 800e95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e960:	89ab      	ldrh	r3, [r5, #12]
 800e962:	2b01      	cmp	r3, #1
 800e964:	d907      	bls.n	800e976 <_fwalk_reent+0x3a>
 800e966:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e96a:	3301      	adds	r3, #1
 800e96c:	d003      	beq.n	800e976 <_fwalk_reent+0x3a>
 800e96e:	4629      	mov	r1, r5
 800e970:	4630      	mov	r0, r6
 800e972:	47c0      	blx	r8
 800e974:	4307      	orrs	r7, r0
 800e976:	3568      	adds	r5, #104	; 0x68
 800e978:	e7e9      	b.n	800e94e <_fwalk_reent+0x12>
	...

0800e97c <_findenv_r>:
 800e97c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e980:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800e9f0 <_findenv_r+0x74>
 800e984:	4607      	mov	r7, r0
 800e986:	4689      	mov	r9, r1
 800e988:	4616      	mov	r6, r2
 800e98a:	f001 facf 	bl	800ff2c <__env_lock>
 800e98e:	f8da 4000 	ldr.w	r4, [sl]
 800e992:	b134      	cbz	r4, 800e9a2 <_findenv_r+0x26>
 800e994:	464b      	mov	r3, r9
 800e996:	4698      	mov	r8, r3
 800e998:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e99c:	b13a      	cbz	r2, 800e9ae <_findenv_r+0x32>
 800e99e:	2a3d      	cmp	r2, #61	; 0x3d
 800e9a0:	d1f9      	bne.n	800e996 <_findenv_r+0x1a>
 800e9a2:	4638      	mov	r0, r7
 800e9a4:	f001 fac8 	bl	800ff38 <__env_unlock>
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ae:	eba8 0809 	sub.w	r8, r8, r9
 800e9b2:	46a3      	mov	fp, r4
 800e9b4:	f854 0b04 	ldr.w	r0, [r4], #4
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d0f2      	beq.n	800e9a2 <_findenv_r+0x26>
 800e9bc:	4642      	mov	r2, r8
 800e9be:	4649      	mov	r1, r9
 800e9c0:	f001 f9e2 	bl	800fd88 <strncmp>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	d1f4      	bne.n	800e9b2 <_findenv_r+0x36>
 800e9c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e9cc:	eb03 0508 	add.w	r5, r3, r8
 800e9d0:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e9d4:	2b3d      	cmp	r3, #61	; 0x3d
 800e9d6:	d1ec      	bne.n	800e9b2 <_findenv_r+0x36>
 800e9d8:	f8da 3000 	ldr.w	r3, [sl]
 800e9dc:	ebab 0303 	sub.w	r3, fp, r3
 800e9e0:	109b      	asrs	r3, r3, #2
 800e9e2:	4638      	mov	r0, r7
 800e9e4:	6033      	str	r3, [r6, #0]
 800e9e6:	f001 faa7 	bl	800ff38 <__env_unlock>
 800e9ea:	1c68      	adds	r0, r5, #1
 800e9ec:	e7dd      	b.n	800e9aa <_findenv_r+0x2e>
 800e9ee:	bf00      	nop
 800e9f0:	20000380 	.word	0x20000380

0800e9f4 <_getenv_r>:
 800e9f4:	b507      	push	{r0, r1, r2, lr}
 800e9f6:	aa01      	add	r2, sp, #4
 800e9f8:	f7ff ffc0 	bl	800e97c <_findenv_r>
 800e9fc:	b003      	add	sp, #12
 800e9fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ea04 <__gettzinfo>:
 800ea04:	4800      	ldr	r0, [pc, #0]	; (800ea08 <__gettzinfo+0x4>)
 800ea06:	4770      	bx	lr
 800ea08:	20000328 	.word	0x20000328

0800ea0c <labs>:
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	bfb8      	it	lt
 800ea10:	4240      	neglt	r0, r0
 800ea12:	4770      	bx	lr

0800ea14 <_localeconv_r>:
 800ea14:	4800      	ldr	r0, [pc, #0]	; (800ea18 <_localeconv_r+0x4>)
 800ea16:	4770      	bx	lr
 800ea18:	20000474 	.word	0x20000474

0800ea1c <__retarget_lock_init_recursive>:
 800ea1c:	4770      	bx	lr

0800ea1e <__retarget_lock_acquire>:
 800ea1e:	4770      	bx	lr

0800ea20 <__retarget_lock_acquire_recursive>:
 800ea20:	4770      	bx	lr

0800ea22 <__retarget_lock_release>:
 800ea22:	4770      	bx	lr

0800ea24 <__retarget_lock_release_recursive>:
 800ea24:	4770      	bx	lr
	...

0800ea28 <_lseek_r>:
 800ea28:	b538      	push	{r3, r4, r5, lr}
 800ea2a:	4d07      	ldr	r5, [pc, #28]	; (800ea48 <_lseek_r+0x20>)
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	4608      	mov	r0, r1
 800ea30:	4611      	mov	r1, r2
 800ea32:	2200      	movs	r2, #0
 800ea34:	602a      	str	r2, [r5, #0]
 800ea36:	461a      	mov	r2, r3
 800ea38:	f003 ff34 	bl	80128a4 <_lseek>
 800ea3c:	1c43      	adds	r3, r0, #1
 800ea3e:	d102      	bne.n	800ea46 <_lseek_r+0x1e>
 800ea40:	682b      	ldr	r3, [r5, #0]
 800ea42:	b103      	cbz	r3, 800ea46 <_lseek_r+0x1e>
 800ea44:	6023      	str	r3, [r4, #0]
 800ea46:	bd38      	pop	{r3, r4, r5, pc}
 800ea48:	200037e0 	.word	0x200037e0

0800ea4c <__swhatbuf_r>:
 800ea4c:	b570      	push	{r4, r5, r6, lr}
 800ea4e:	460e      	mov	r6, r1
 800ea50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea54:	2900      	cmp	r1, #0
 800ea56:	b096      	sub	sp, #88	; 0x58
 800ea58:	4614      	mov	r4, r2
 800ea5a:	461d      	mov	r5, r3
 800ea5c:	da08      	bge.n	800ea70 <__swhatbuf_r+0x24>
 800ea5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ea62:	2200      	movs	r2, #0
 800ea64:	602a      	str	r2, [r5, #0]
 800ea66:	061a      	lsls	r2, r3, #24
 800ea68:	d410      	bmi.n	800ea8c <__swhatbuf_r+0x40>
 800ea6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea6e:	e00e      	b.n	800ea8e <__swhatbuf_r+0x42>
 800ea70:	466a      	mov	r2, sp
 800ea72:	f001 fa6d 	bl	800ff50 <_fstat_r>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	dbf1      	blt.n	800ea5e <__swhatbuf_r+0x12>
 800ea7a:	9a01      	ldr	r2, [sp, #4]
 800ea7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ea80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ea84:	425a      	negs	r2, r3
 800ea86:	415a      	adcs	r2, r3
 800ea88:	602a      	str	r2, [r5, #0]
 800ea8a:	e7ee      	b.n	800ea6a <__swhatbuf_r+0x1e>
 800ea8c:	2340      	movs	r3, #64	; 0x40
 800ea8e:	2000      	movs	r0, #0
 800ea90:	6023      	str	r3, [r4, #0]
 800ea92:	b016      	add	sp, #88	; 0x58
 800ea94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ea98 <__smakebuf_r>:
 800ea98:	898b      	ldrh	r3, [r1, #12]
 800ea9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea9c:	079d      	lsls	r5, r3, #30
 800ea9e:	4606      	mov	r6, r0
 800eaa0:	460c      	mov	r4, r1
 800eaa2:	d507      	bpl.n	800eab4 <__smakebuf_r+0x1c>
 800eaa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eaa8:	6023      	str	r3, [r4, #0]
 800eaaa:	6123      	str	r3, [r4, #16]
 800eaac:	2301      	movs	r3, #1
 800eaae:	6163      	str	r3, [r4, #20]
 800eab0:	b002      	add	sp, #8
 800eab2:	bd70      	pop	{r4, r5, r6, pc}
 800eab4:	ab01      	add	r3, sp, #4
 800eab6:	466a      	mov	r2, sp
 800eab8:	f7ff ffc8 	bl	800ea4c <__swhatbuf_r>
 800eabc:	9900      	ldr	r1, [sp, #0]
 800eabe:	4605      	mov	r5, r0
 800eac0:	4630      	mov	r0, r6
 800eac2:	f7fc ff43 	bl	800b94c <_malloc_r>
 800eac6:	b948      	cbnz	r0, 800eadc <__smakebuf_r+0x44>
 800eac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eacc:	059a      	lsls	r2, r3, #22
 800eace:	d4ef      	bmi.n	800eab0 <__smakebuf_r+0x18>
 800ead0:	f023 0303 	bic.w	r3, r3, #3
 800ead4:	f043 0302 	orr.w	r3, r3, #2
 800ead8:	81a3      	strh	r3, [r4, #12]
 800eada:	e7e3      	b.n	800eaa4 <__smakebuf_r+0xc>
 800eadc:	4b0d      	ldr	r3, [pc, #52]	; (800eb14 <__smakebuf_r+0x7c>)
 800eade:	62b3      	str	r3, [r6, #40]	; 0x28
 800eae0:	89a3      	ldrh	r3, [r4, #12]
 800eae2:	6020      	str	r0, [r4, #0]
 800eae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eae8:	81a3      	strh	r3, [r4, #12]
 800eaea:	9b00      	ldr	r3, [sp, #0]
 800eaec:	6163      	str	r3, [r4, #20]
 800eaee:	9b01      	ldr	r3, [sp, #4]
 800eaf0:	6120      	str	r0, [r4, #16]
 800eaf2:	b15b      	cbz	r3, 800eb0c <__smakebuf_r+0x74>
 800eaf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eaf8:	4630      	mov	r0, r6
 800eafa:	f001 fa3b 	bl	800ff74 <_isatty_r>
 800eafe:	b128      	cbz	r0, 800eb0c <__smakebuf_r+0x74>
 800eb00:	89a3      	ldrh	r3, [r4, #12]
 800eb02:	f023 0303 	bic.w	r3, r3, #3
 800eb06:	f043 0301 	orr.w	r3, r3, #1
 800eb0a:	81a3      	strh	r3, [r4, #12]
 800eb0c:	89a0      	ldrh	r0, [r4, #12]
 800eb0e:	4305      	orrs	r5, r0
 800eb10:	81a5      	strh	r5, [r4, #12]
 800eb12:	e7cd      	b.n	800eab0 <__smakebuf_r+0x18>
 800eb14:	0800e7d9 	.word	0x0800e7d9

0800eb18 <memmove>:
 800eb18:	4288      	cmp	r0, r1
 800eb1a:	b510      	push	{r4, lr}
 800eb1c:	eb01 0402 	add.w	r4, r1, r2
 800eb20:	d902      	bls.n	800eb28 <memmove+0x10>
 800eb22:	4284      	cmp	r4, r0
 800eb24:	4623      	mov	r3, r4
 800eb26:	d807      	bhi.n	800eb38 <memmove+0x20>
 800eb28:	1e43      	subs	r3, r0, #1
 800eb2a:	42a1      	cmp	r1, r4
 800eb2c:	d008      	beq.n	800eb40 <memmove+0x28>
 800eb2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb36:	e7f8      	b.n	800eb2a <memmove+0x12>
 800eb38:	4402      	add	r2, r0
 800eb3a:	4601      	mov	r1, r0
 800eb3c:	428a      	cmp	r2, r1
 800eb3e:	d100      	bne.n	800eb42 <memmove+0x2a>
 800eb40:	bd10      	pop	{r4, pc}
 800eb42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb4a:	e7f7      	b.n	800eb3c <memmove+0x24>

0800eb4c <__malloc_lock>:
 800eb4c:	4801      	ldr	r0, [pc, #4]	; (800eb54 <__malloc_lock+0x8>)
 800eb4e:	f7ff bf67 	b.w	800ea20 <__retarget_lock_acquire_recursive>
 800eb52:	bf00      	nop
 800eb54:	200037d9 	.word	0x200037d9

0800eb58 <__malloc_unlock>:
 800eb58:	4801      	ldr	r0, [pc, #4]	; (800eb60 <__malloc_unlock+0x8>)
 800eb5a:	f7ff bf63 	b.w	800ea24 <__retarget_lock_release_recursive>
 800eb5e:	bf00      	nop
 800eb60:	200037d9 	.word	0x200037d9

0800eb64 <_Balloc>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb68:	4604      	mov	r4, r0
 800eb6a:	460d      	mov	r5, r1
 800eb6c:	b976      	cbnz	r6, 800eb8c <_Balloc+0x28>
 800eb6e:	2010      	movs	r0, #16
 800eb70:	f7fc fbe8 	bl	800b344 <malloc>
 800eb74:	4602      	mov	r2, r0
 800eb76:	6260      	str	r0, [r4, #36]	; 0x24
 800eb78:	b920      	cbnz	r0, 800eb84 <_Balloc+0x20>
 800eb7a:	4b18      	ldr	r3, [pc, #96]	; (800ebdc <_Balloc+0x78>)
 800eb7c:	4818      	ldr	r0, [pc, #96]	; (800ebe0 <_Balloc+0x7c>)
 800eb7e:	2166      	movs	r1, #102	; 0x66
 800eb80:	f7fc fb8c 	bl	800b29c <__assert_func>
 800eb84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb88:	6006      	str	r6, [r0, #0]
 800eb8a:	60c6      	str	r6, [r0, #12]
 800eb8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eb8e:	68f3      	ldr	r3, [r6, #12]
 800eb90:	b183      	cbz	r3, 800ebb4 <_Balloc+0x50>
 800eb92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb9a:	b9b8      	cbnz	r0, 800ebcc <_Balloc+0x68>
 800eb9c:	2101      	movs	r1, #1
 800eb9e:	fa01 f605 	lsl.w	r6, r1, r5
 800eba2:	1d72      	adds	r2, r6, #5
 800eba4:	0092      	lsls	r2, r2, #2
 800eba6:	4620      	mov	r0, r4
 800eba8:	f000 fb60 	bl	800f26c <_calloc_r>
 800ebac:	b160      	cbz	r0, 800ebc8 <_Balloc+0x64>
 800ebae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ebb2:	e00e      	b.n	800ebd2 <_Balloc+0x6e>
 800ebb4:	2221      	movs	r2, #33	; 0x21
 800ebb6:	2104      	movs	r1, #4
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f000 fb57 	bl	800f26c <_calloc_r>
 800ebbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebc0:	60f0      	str	r0, [r6, #12]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1e4      	bne.n	800eb92 <_Balloc+0x2e>
 800ebc8:	2000      	movs	r0, #0
 800ebca:	bd70      	pop	{r4, r5, r6, pc}
 800ebcc:	6802      	ldr	r2, [r0, #0]
 800ebce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ebd8:	e7f7      	b.n	800ebca <_Balloc+0x66>
 800ebda:	bf00      	nop
 800ebdc:	0803c734 	.word	0x0803c734
 800ebe0:	0803cddc 	.word	0x0803cddc

0800ebe4 <_Bfree>:
 800ebe4:	b570      	push	{r4, r5, r6, lr}
 800ebe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ebe8:	4605      	mov	r5, r0
 800ebea:	460c      	mov	r4, r1
 800ebec:	b976      	cbnz	r6, 800ec0c <_Bfree+0x28>
 800ebee:	2010      	movs	r0, #16
 800ebf0:	f7fc fba8 	bl	800b344 <malloc>
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	6268      	str	r0, [r5, #36]	; 0x24
 800ebf8:	b920      	cbnz	r0, 800ec04 <_Bfree+0x20>
 800ebfa:	4b09      	ldr	r3, [pc, #36]	; (800ec20 <_Bfree+0x3c>)
 800ebfc:	4809      	ldr	r0, [pc, #36]	; (800ec24 <_Bfree+0x40>)
 800ebfe:	218a      	movs	r1, #138	; 0x8a
 800ec00:	f7fc fb4c 	bl	800b29c <__assert_func>
 800ec04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec08:	6006      	str	r6, [r0, #0]
 800ec0a:	60c6      	str	r6, [r0, #12]
 800ec0c:	b13c      	cbz	r4, 800ec1e <_Bfree+0x3a>
 800ec0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ec10:	6862      	ldr	r2, [r4, #4]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec18:	6021      	str	r1, [r4, #0]
 800ec1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec1e:	bd70      	pop	{r4, r5, r6, pc}
 800ec20:	0803c734 	.word	0x0803c734
 800ec24:	0803cddc 	.word	0x0803cddc

0800ec28 <__multadd>:
 800ec28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec2c:	690d      	ldr	r5, [r1, #16]
 800ec2e:	4607      	mov	r7, r0
 800ec30:	460c      	mov	r4, r1
 800ec32:	461e      	mov	r6, r3
 800ec34:	f101 0c14 	add.w	ip, r1, #20
 800ec38:	2000      	movs	r0, #0
 800ec3a:	f8dc 3000 	ldr.w	r3, [ip]
 800ec3e:	b299      	uxth	r1, r3
 800ec40:	fb02 6101 	mla	r1, r2, r1, r6
 800ec44:	0c1e      	lsrs	r6, r3, #16
 800ec46:	0c0b      	lsrs	r3, r1, #16
 800ec48:	fb02 3306 	mla	r3, r2, r6, r3
 800ec4c:	b289      	uxth	r1, r1
 800ec4e:	3001      	adds	r0, #1
 800ec50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ec54:	4285      	cmp	r5, r0
 800ec56:	f84c 1b04 	str.w	r1, [ip], #4
 800ec5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ec5e:	dcec      	bgt.n	800ec3a <__multadd+0x12>
 800ec60:	b30e      	cbz	r6, 800eca6 <__multadd+0x7e>
 800ec62:	68a3      	ldr	r3, [r4, #8]
 800ec64:	42ab      	cmp	r3, r5
 800ec66:	dc19      	bgt.n	800ec9c <__multadd+0x74>
 800ec68:	6861      	ldr	r1, [r4, #4]
 800ec6a:	4638      	mov	r0, r7
 800ec6c:	3101      	adds	r1, #1
 800ec6e:	f7ff ff79 	bl	800eb64 <_Balloc>
 800ec72:	4680      	mov	r8, r0
 800ec74:	b928      	cbnz	r0, 800ec82 <__multadd+0x5a>
 800ec76:	4602      	mov	r2, r0
 800ec78:	4b0c      	ldr	r3, [pc, #48]	; (800ecac <__multadd+0x84>)
 800ec7a:	480d      	ldr	r0, [pc, #52]	; (800ecb0 <__multadd+0x88>)
 800ec7c:	21b5      	movs	r1, #181	; 0xb5
 800ec7e:	f7fc fb0d 	bl	800b29c <__assert_func>
 800ec82:	6922      	ldr	r2, [r4, #16]
 800ec84:	3202      	adds	r2, #2
 800ec86:	f104 010c 	add.w	r1, r4, #12
 800ec8a:	0092      	lsls	r2, r2, #2
 800ec8c:	300c      	adds	r0, #12
 800ec8e:	f7fc fb69 	bl	800b364 <memcpy>
 800ec92:	4621      	mov	r1, r4
 800ec94:	4638      	mov	r0, r7
 800ec96:	f7ff ffa5 	bl	800ebe4 <_Bfree>
 800ec9a:	4644      	mov	r4, r8
 800ec9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eca0:	3501      	adds	r5, #1
 800eca2:	615e      	str	r6, [r3, #20]
 800eca4:	6125      	str	r5, [r4, #16]
 800eca6:	4620      	mov	r0, r4
 800eca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecac:	0803cd09 	.word	0x0803cd09
 800ecb0:	0803cddc 	.word	0x0803cddc

0800ecb4 <__hi0bits>:
 800ecb4:	0c03      	lsrs	r3, r0, #16
 800ecb6:	041b      	lsls	r3, r3, #16
 800ecb8:	b9d3      	cbnz	r3, 800ecf0 <__hi0bits+0x3c>
 800ecba:	0400      	lsls	r0, r0, #16
 800ecbc:	2310      	movs	r3, #16
 800ecbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ecc2:	bf04      	itt	eq
 800ecc4:	0200      	lsleq	r0, r0, #8
 800ecc6:	3308      	addeq	r3, #8
 800ecc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eccc:	bf04      	itt	eq
 800ecce:	0100      	lsleq	r0, r0, #4
 800ecd0:	3304      	addeq	r3, #4
 800ecd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ecd6:	bf04      	itt	eq
 800ecd8:	0080      	lsleq	r0, r0, #2
 800ecda:	3302      	addeq	r3, #2
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	db05      	blt.n	800ecec <__hi0bits+0x38>
 800ece0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ece4:	f103 0301 	add.w	r3, r3, #1
 800ece8:	bf08      	it	eq
 800ecea:	2320      	moveq	r3, #32
 800ecec:	4618      	mov	r0, r3
 800ecee:	4770      	bx	lr
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	e7e4      	b.n	800ecbe <__hi0bits+0xa>

0800ecf4 <__lo0bits>:
 800ecf4:	6803      	ldr	r3, [r0, #0]
 800ecf6:	f013 0207 	ands.w	r2, r3, #7
 800ecfa:	4601      	mov	r1, r0
 800ecfc:	d00b      	beq.n	800ed16 <__lo0bits+0x22>
 800ecfe:	07da      	lsls	r2, r3, #31
 800ed00:	d423      	bmi.n	800ed4a <__lo0bits+0x56>
 800ed02:	0798      	lsls	r0, r3, #30
 800ed04:	bf49      	itett	mi
 800ed06:	085b      	lsrmi	r3, r3, #1
 800ed08:	089b      	lsrpl	r3, r3, #2
 800ed0a:	2001      	movmi	r0, #1
 800ed0c:	600b      	strmi	r3, [r1, #0]
 800ed0e:	bf5c      	itt	pl
 800ed10:	600b      	strpl	r3, [r1, #0]
 800ed12:	2002      	movpl	r0, #2
 800ed14:	4770      	bx	lr
 800ed16:	b298      	uxth	r0, r3
 800ed18:	b9a8      	cbnz	r0, 800ed46 <__lo0bits+0x52>
 800ed1a:	0c1b      	lsrs	r3, r3, #16
 800ed1c:	2010      	movs	r0, #16
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	b90a      	cbnz	r2, 800ed26 <__lo0bits+0x32>
 800ed22:	3008      	adds	r0, #8
 800ed24:	0a1b      	lsrs	r3, r3, #8
 800ed26:	071a      	lsls	r2, r3, #28
 800ed28:	bf04      	itt	eq
 800ed2a:	091b      	lsreq	r3, r3, #4
 800ed2c:	3004      	addeq	r0, #4
 800ed2e:	079a      	lsls	r2, r3, #30
 800ed30:	bf04      	itt	eq
 800ed32:	089b      	lsreq	r3, r3, #2
 800ed34:	3002      	addeq	r0, #2
 800ed36:	07da      	lsls	r2, r3, #31
 800ed38:	d403      	bmi.n	800ed42 <__lo0bits+0x4e>
 800ed3a:	085b      	lsrs	r3, r3, #1
 800ed3c:	f100 0001 	add.w	r0, r0, #1
 800ed40:	d005      	beq.n	800ed4e <__lo0bits+0x5a>
 800ed42:	600b      	str	r3, [r1, #0]
 800ed44:	4770      	bx	lr
 800ed46:	4610      	mov	r0, r2
 800ed48:	e7e9      	b.n	800ed1e <__lo0bits+0x2a>
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	4770      	bx	lr
 800ed4e:	2020      	movs	r0, #32
 800ed50:	4770      	bx	lr
	...

0800ed54 <__i2b>:
 800ed54:	b510      	push	{r4, lr}
 800ed56:	460c      	mov	r4, r1
 800ed58:	2101      	movs	r1, #1
 800ed5a:	f7ff ff03 	bl	800eb64 <_Balloc>
 800ed5e:	4602      	mov	r2, r0
 800ed60:	b928      	cbnz	r0, 800ed6e <__i2b+0x1a>
 800ed62:	4b05      	ldr	r3, [pc, #20]	; (800ed78 <__i2b+0x24>)
 800ed64:	4805      	ldr	r0, [pc, #20]	; (800ed7c <__i2b+0x28>)
 800ed66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ed6a:	f7fc fa97 	bl	800b29c <__assert_func>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	6144      	str	r4, [r0, #20]
 800ed72:	6103      	str	r3, [r0, #16]
 800ed74:	bd10      	pop	{r4, pc}
 800ed76:	bf00      	nop
 800ed78:	0803cd09 	.word	0x0803cd09
 800ed7c:	0803cddc 	.word	0x0803cddc

0800ed80 <__multiply>:
 800ed80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed84:	4691      	mov	r9, r2
 800ed86:	690a      	ldr	r2, [r1, #16]
 800ed88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	bfb8      	it	lt
 800ed90:	460b      	movlt	r3, r1
 800ed92:	460c      	mov	r4, r1
 800ed94:	bfbc      	itt	lt
 800ed96:	464c      	movlt	r4, r9
 800ed98:	4699      	movlt	r9, r3
 800ed9a:	6927      	ldr	r7, [r4, #16]
 800ed9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eda0:	68a3      	ldr	r3, [r4, #8]
 800eda2:	6861      	ldr	r1, [r4, #4]
 800eda4:	eb07 060a 	add.w	r6, r7, sl
 800eda8:	42b3      	cmp	r3, r6
 800edaa:	b085      	sub	sp, #20
 800edac:	bfb8      	it	lt
 800edae:	3101      	addlt	r1, #1
 800edb0:	f7ff fed8 	bl	800eb64 <_Balloc>
 800edb4:	b930      	cbnz	r0, 800edc4 <__multiply+0x44>
 800edb6:	4602      	mov	r2, r0
 800edb8:	4b44      	ldr	r3, [pc, #272]	; (800eecc <__multiply+0x14c>)
 800edba:	4845      	ldr	r0, [pc, #276]	; (800eed0 <__multiply+0x150>)
 800edbc:	f240 115d 	movw	r1, #349	; 0x15d
 800edc0:	f7fc fa6c 	bl	800b29c <__assert_func>
 800edc4:	f100 0514 	add.w	r5, r0, #20
 800edc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800edcc:	462b      	mov	r3, r5
 800edce:	2200      	movs	r2, #0
 800edd0:	4543      	cmp	r3, r8
 800edd2:	d321      	bcc.n	800ee18 <__multiply+0x98>
 800edd4:	f104 0314 	add.w	r3, r4, #20
 800edd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eddc:	f109 0314 	add.w	r3, r9, #20
 800ede0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ede4:	9202      	str	r2, [sp, #8]
 800ede6:	1b3a      	subs	r2, r7, r4
 800ede8:	3a15      	subs	r2, #21
 800edea:	f022 0203 	bic.w	r2, r2, #3
 800edee:	3204      	adds	r2, #4
 800edf0:	f104 0115 	add.w	r1, r4, #21
 800edf4:	428f      	cmp	r7, r1
 800edf6:	bf38      	it	cc
 800edf8:	2204      	movcc	r2, #4
 800edfa:	9201      	str	r2, [sp, #4]
 800edfc:	9a02      	ldr	r2, [sp, #8]
 800edfe:	9303      	str	r3, [sp, #12]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d80c      	bhi.n	800ee1e <__multiply+0x9e>
 800ee04:	2e00      	cmp	r6, #0
 800ee06:	dd03      	ble.n	800ee10 <__multiply+0x90>
 800ee08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d05a      	beq.n	800eec6 <__multiply+0x146>
 800ee10:	6106      	str	r6, [r0, #16]
 800ee12:	b005      	add	sp, #20
 800ee14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee18:	f843 2b04 	str.w	r2, [r3], #4
 800ee1c:	e7d8      	b.n	800edd0 <__multiply+0x50>
 800ee1e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ee22:	f1ba 0f00 	cmp.w	sl, #0
 800ee26:	d024      	beq.n	800ee72 <__multiply+0xf2>
 800ee28:	f104 0e14 	add.w	lr, r4, #20
 800ee2c:	46a9      	mov	r9, r5
 800ee2e:	f04f 0c00 	mov.w	ip, #0
 800ee32:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ee36:	f8d9 1000 	ldr.w	r1, [r9]
 800ee3a:	fa1f fb82 	uxth.w	fp, r2
 800ee3e:	b289      	uxth	r1, r1
 800ee40:	fb0a 110b 	mla	r1, sl, fp, r1
 800ee44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ee48:	f8d9 2000 	ldr.w	r2, [r9]
 800ee4c:	4461      	add	r1, ip
 800ee4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ee52:	fb0a c20b 	mla	r2, sl, fp, ip
 800ee56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ee5a:	b289      	uxth	r1, r1
 800ee5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ee60:	4577      	cmp	r7, lr
 800ee62:	f849 1b04 	str.w	r1, [r9], #4
 800ee66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ee6a:	d8e2      	bhi.n	800ee32 <__multiply+0xb2>
 800ee6c:	9a01      	ldr	r2, [sp, #4]
 800ee6e:	f845 c002 	str.w	ip, [r5, r2]
 800ee72:	9a03      	ldr	r2, [sp, #12]
 800ee74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ee78:	3304      	adds	r3, #4
 800ee7a:	f1b9 0f00 	cmp.w	r9, #0
 800ee7e:	d020      	beq.n	800eec2 <__multiply+0x142>
 800ee80:	6829      	ldr	r1, [r5, #0]
 800ee82:	f104 0c14 	add.w	ip, r4, #20
 800ee86:	46ae      	mov	lr, r5
 800ee88:	f04f 0a00 	mov.w	sl, #0
 800ee8c:	f8bc b000 	ldrh.w	fp, [ip]
 800ee90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ee94:	fb09 220b 	mla	r2, r9, fp, r2
 800ee98:	4492      	add	sl, r2
 800ee9a:	b289      	uxth	r1, r1
 800ee9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800eea0:	f84e 1b04 	str.w	r1, [lr], #4
 800eea4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eea8:	f8be 1000 	ldrh.w	r1, [lr]
 800eeac:	0c12      	lsrs	r2, r2, #16
 800eeae:	fb09 1102 	mla	r1, r9, r2, r1
 800eeb2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eeb6:	4567      	cmp	r7, ip
 800eeb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eebc:	d8e6      	bhi.n	800ee8c <__multiply+0x10c>
 800eebe:	9a01      	ldr	r2, [sp, #4]
 800eec0:	50a9      	str	r1, [r5, r2]
 800eec2:	3504      	adds	r5, #4
 800eec4:	e79a      	b.n	800edfc <__multiply+0x7c>
 800eec6:	3e01      	subs	r6, #1
 800eec8:	e79c      	b.n	800ee04 <__multiply+0x84>
 800eeca:	bf00      	nop
 800eecc:	0803cd09 	.word	0x0803cd09
 800eed0:	0803cddc 	.word	0x0803cddc

0800eed4 <__pow5mult>:
 800eed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eed8:	4615      	mov	r5, r2
 800eeda:	f012 0203 	ands.w	r2, r2, #3
 800eede:	4606      	mov	r6, r0
 800eee0:	460f      	mov	r7, r1
 800eee2:	d007      	beq.n	800eef4 <__pow5mult+0x20>
 800eee4:	4c25      	ldr	r4, [pc, #148]	; (800ef7c <__pow5mult+0xa8>)
 800eee6:	3a01      	subs	r2, #1
 800eee8:	2300      	movs	r3, #0
 800eeea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eeee:	f7ff fe9b 	bl	800ec28 <__multadd>
 800eef2:	4607      	mov	r7, r0
 800eef4:	10ad      	asrs	r5, r5, #2
 800eef6:	d03d      	beq.n	800ef74 <__pow5mult+0xa0>
 800eef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eefa:	b97c      	cbnz	r4, 800ef1c <__pow5mult+0x48>
 800eefc:	2010      	movs	r0, #16
 800eefe:	f7fc fa21 	bl	800b344 <malloc>
 800ef02:	4602      	mov	r2, r0
 800ef04:	6270      	str	r0, [r6, #36]	; 0x24
 800ef06:	b928      	cbnz	r0, 800ef14 <__pow5mult+0x40>
 800ef08:	4b1d      	ldr	r3, [pc, #116]	; (800ef80 <__pow5mult+0xac>)
 800ef0a:	481e      	ldr	r0, [pc, #120]	; (800ef84 <__pow5mult+0xb0>)
 800ef0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ef10:	f7fc f9c4 	bl	800b29c <__assert_func>
 800ef14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef18:	6004      	str	r4, [r0, #0]
 800ef1a:	60c4      	str	r4, [r0, #12]
 800ef1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ef20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef24:	b94c      	cbnz	r4, 800ef3a <__pow5mult+0x66>
 800ef26:	f240 2171 	movw	r1, #625	; 0x271
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	f7ff ff12 	bl	800ed54 <__i2b>
 800ef30:	2300      	movs	r3, #0
 800ef32:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef36:	4604      	mov	r4, r0
 800ef38:	6003      	str	r3, [r0, #0]
 800ef3a:	f04f 0900 	mov.w	r9, #0
 800ef3e:	07eb      	lsls	r3, r5, #31
 800ef40:	d50a      	bpl.n	800ef58 <__pow5mult+0x84>
 800ef42:	4639      	mov	r1, r7
 800ef44:	4622      	mov	r2, r4
 800ef46:	4630      	mov	r0, r6
 800ef48:	f7ff ff1a 	bl	800ed80 <__multiply>
 800ef4c:	4639      	mov	r1, r7
 800ef4e:	4680      	mov	r8, r0
 800ef50:	4630      	mov	r0, r6
 800ef52:	f7ff fe47 	bl	800ebe4 <_Bfree>
 800ef56:	4647      	mov	r7, r8
 800ef58:	106d      	asrs	r5, r5, #1
 800ef5a:	d00b      	beq.n	800ef74 <__pow5mult+0xa0>
 800ef5c:	6820      	ldr	r0, [r4, #0]
 800ef5e:	b938      	cbnz	r0, 800ef70 <__pow5mult+0x9c>
 800ef60:	4622      	mov	r2, r4
 800ef62:	4621      	mov	r1, r4
 800ef64:	4630      	mov	r0, r6
 800ef66:	f7ff ff0b 	bl	800ed80 <__multiply>
 800ef6a:	6020      	str	r0, [r4, #0]
 800ef6c:	f8c0 9000 	str.w	r9, [r0]
 800ef70:	4604      	mov	r4, r0
 800ef72:	e7e4      	b.n	800ef3e <__pow5mult+0x6a>
 800ef74:	4638      	mov	r0, r7
 800ef76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef7a:	bf00      	nop
 800ef7c:	0803cf28 	.word	0x0803cf28
 800ef80:	0803c734 	.word	0x0803c734
 800ef84:	0803cddc 	.word	0x0803cddc

0800ef88 <__lshift>:
 800ef88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef8c:	460c      	mov	r4, r1
 800ef8e:	6849      	ldr	r1, [r1, #4]
 800ef90:	6923      	ldr	r3, [r4, #16]
 800ef92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	4607      	mov	r7, r0
 800ef9a:	4691      	mov	r9, r2
 800ef9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800efa0:	f108 0601 	add.w	r6, r8, #1
 800efa4:	42b3      	cmp	r3, r6
 800efa6:	db0b      	blt.n	800efc0 <__lshift+0x38>
 800efa8:	4638      	mov	r0, r7
 800efaa:	f7ff fddb 	bl	800eb64 <_Balloc>
 800efae:	4605      	mov	r5, r0
 800efb0:	b948      	cbnz	r0, 800efc6 <__lshift+0x3e>
 800efb2:	4602      	mov	r2, r0
 800efb4:	4b2a      	ldr	r3, [pc, #168]	; (800f060 <__lshift+0xd8>)
 800efb6:	482b      	ldr	r0, [pc, #172]	; (800f064 <__lshift+0xdc>)
 800efb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800efbc:	f7fc f96e 	bl	800b29c <__assert_func>
 800efc0:	3101      	adds	r1, #1
 800efc2:	005b      	lsls	r3, r3, #1
 800efc4:	e7ee      	b.n	800efa4 <__lshift+0x1c>
 800efc6:	2300      	movs	r3, #0
 800efc8:	f100 0114 	add.w	r1, r0, #20
 800efcc:	f100 0210 	add.w	r2, r0, #16
 800efd0:	4618      	mov	r0, r3
 800efd2:	4553      	cmp	r3, sl
 800efd4:	db37      	blt.n	800f046 <__lshift+0xbe>
 800efd6:	6920      	ldr	r0, [r4, #16]
 800efd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800efdc:	f104 0314 	add.w	r3, r4, #20
 800efe0:	f019 091f 	ands.w	r9, r9, #31
 800efe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800efe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800efec:	d02f      	beq.n	800f04e <__lshift+0xc6>
 800efee:	f1c9 0e20 	rsb	lr, r9, #32
 800eff2:	468a      	mov	sl, r1
 800eff4:	f04f 0c00 	mov.w	ip, #0
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	fa02 f209 	lsl.w	r2, r2, r9
 800effe:	ea42 020c 	orr.w	r2, r2, ip
 800f002:	f84a 2b04 	str.w	r2, [sl], #4
 800f006:	f853 2b04 	ldr.w	r2, [r3], #4
 800f00a:	4298      	cmp	r0, r3
 800f00c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f010:	d8f2      	bhi.n	800eff8 <__lshift+0x70>
 800f012:	1b03      	subs	r3, r0, r4
 800f014:	3b15      	subs	r3, #21
 800f016:	f023 0303 	bic.w	r3, r3, #3
 800f01a:	3304      	adds	r3, #4
 800f01c:	f104 0215 	add.w	r2, r4, #21
 800f020:	4290      	cmp	r0, r2
 800f022:	bf38      	it	cc
 800f024:	2304      	movcc	r3, #4
 800f026:	f841 c003 	str.w	ip, [r1, r3]
 800f02a:	f1bc 0f00 	cmp.w	ip, #0
 800f02e:	d001      	beq.n	800f034 <__lshift+0xac>
 800f030:	f108 0602 	add.w	r6, r8, #2
 800f034:	3e01      	subs	r6, #1
 800f036:	4638      	mov	r0, r7
 800f038:	612e      	str	r6, [r5, #16]
 800f03a:	4621      	mov	r1, r4
 800f03c:	f7ff fdd2 	bl	800ebe4 <_Bfree>
 800f040:	4628      	mov	r0, r5
 800f042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f046:	f842 0f04 	str.w	r0, [r2, #4]!
 800f04a:	3301      	adds	r3, #1
 800f04c:	e7c1      	b.n	800efd2 <__lshift+0x4a>
 800f04e:	3904      	subs	r1, #4
 800f050:	f853 2b04 	ldr.w	r2, [r3], #4
 800f054:	f841 2f04 	str.w	r2, [r1, #4]!
 800f058:	4298      	cmp	r0, r3
 800f05a:	d8f9      	bhi.n	800f050 <__lshift+0xc8>
 800f05c:	e7ea      	b.n	800f034 <__lshift+0xac>
 800f05e:	bf00      	nop
 800f060:	0803cd09 	.word	0x0803cd09
 800f064:	0803cddc 	.word	0x0803cddc

0800f068 <__mcmp>:
 800f068:	b530      	push	{r4, r5, lr}
 800f06a:	6902      	ldr	r2, [r0, #16]
 800f06c:	690c      	ldr	r4, [r1, #16]
 800f06e:	1b12      	subs	r2, r2, r4
 800f070:	d10e      	bne.n	800f090 <__mcmp+0x28>
 800f072:	f100 0314 	add.w	r3, r0, #20
 800f076:	3114      	adds	r1, #20
 800f078:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f07c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f080:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f084:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f088:	42a5      	cmp	r5, r4
 800f08a:	d003      	beq.n	800f094 <__mcmp+0x2c>
 800f08c:	d305      	bcc.n	800f09a <__mcmp+0x32>
 800f08e:	2201      	movs	r2, #1
 800f090:	4610      	mov	r0, r2
 800f092:	bd30      	pop	{r4, r5, pc}
 800f094:	4283      	cmp	r3, r0
 800f096:	d3f3      	bcc.n	800f080 <__mcmp+0x18>
 800f098:	e7fa      	b.n	800f090 <__mcmp+0x28>
 800f09a:	f04f 32ff 	mov.w	r2, #4294967295
 800f09e:	e7f7      	b.n	800f090 <__mcmp+0x28>

0800f0a0 <__mdiff>:
 800f0a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	4611      	mov	r1, r2
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	4690      	mov	r8, r2
 800f0ae:	f7ff ffdb 	bl	800f068 <__mcmp>
 800f0b2:	1e05      	subs	r5, r0, #0
 800f0b4:	d110      	bne.n	800f0d8 <__mdiff+0x38>
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	f7ff fd53 	bl	800eb64 <_Balloc>
 800f0be:	b930      	cbnz	r0, 800f0ce <__mdiff+0x2e>
 800f0c0:	4b3a      	ldr	r3, [pc, #232]	; (800f1ac <__mdiff+0x10c>)
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	f240 2132 	movw	r1, #562	; 0x232
 800f0c8:	4839      	ldr	r0, [pc, #228]	; (800f1b0 <__mdiff+0x110>)
 800f0ca:	f7fc f8e7 	bl	800b29c <__assert_func>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f0d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0d8:	bfa4      	itt	ge
 800f0da:	4643      	movge	r3, r8
 800f0dc:	46a0      	movge	r8, r4
 800f0de:	4630      	mov	r0, r6
 800f0e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f0e4:	bfa6      	itte	ge
 800f0e6:	461c      	movge	r4, r3
 800f0e8:	2500      	movge	r5, #0
 800f0ea:	2501      	movlt	r5, #1
 800f0ec:	f7ff fd3a 	bl	800eb64 <_Balloc>
 800f0f0:	b920      	cbnz	r0, 800f0fc <__mdiff+0x5c>
 800f0f2:	4b2e      	ldr	r3, [pc, #184]	; (800f1ac <__mdiff+0x10c>)
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f0fa:	e7e5      	b.n	800f0c8 <__mdiff+0x28>
 800f0fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f100:	6926      	ldr	r6, [r4, #16]
 800f102:	60c5      	str	r5, [r0, #12]
 800f104:	f104 0914 	add.w	r9, r4, #20
 800f108:	f108 0514 	add.w	r5, r8, #20
 800f10c:	f100 0e14 	add.w	lr, r0, #20
 800f110:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f114:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f118:	f108 0210 	add.w	r2, r8, #16
 800f11c:	46f2      	mov	sl, lr
 800f11e:	2100      	movs	r1, #0
 800f120:	f859 3b04 	ldr.w	r3, [r9], #4
 800f124:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f128:	fa1f f883 	uxth.w	r8, r3
 800f12c:	fa11 f18b 	uxtah	r1, r1, fp
 800f130:	0c1b      	lsrs	r3, r3, #16
 800f132:	eba1 0808 	sub.w	r8, r1, r8
 800f136:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f13a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f13e:	fa1f f888 	uxth.w	r8, r8
 800f142:	1419      	asrs	r1, r3, #16
 800f144:	454e      	cmp	r6, r9
 800f146:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f14a:	f84a 3b04 	str.w	r3, [sl], #4
 800f14e:	d8e7      	bhi.n	800f120 <__mdiff+0x80>
 800f150:	1b33      	subs	r3, r6, r4
 800f152:	3b15      	subs	r3, #21
 800f154:	f023 0303 	bic.w	r3, r3, #3
 800f158:	3304      	adds	r3, #4
 800f15a:	3415      	adds	r4, #21
 800f15c:	42a6      	cmp	r6, r4
 800f15e:	bf38      	it	cc
 800f160:	2304      	movcc	r3, #4
 800f162:	441d      	add	r5, r3
 800f164:	4473      	add	r3, lr
 800f166:	469e      	mov	lr, r3
 800f168:	462e      	mov	r6, r5
 800f16a:	4566      	cmp	r6, ip
 800f16c:	d30e      	bcc.n	800f18c <__mdiff+0xec>
 800f16e:	f10c 0203 	add.w	r2, ip, #3
 800f172:	1b52      	subs	r2, r2, r5
 800f174:	f022 0203 	bic.w	r2, r2, #3
 800f178:	3d03      	subs	r5, #3
 800f17a:	45ac      	cmp	ip, r5
 800f17c:	bf38      	it	cc
 800f17e:	2200      	movcc	r2, #0
 800f180:	441a      	add	r2, r3
 800f182:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f186:	b17b      	cbz	r3, 800f1a8 <__mdiff+0x108>
 800f188:	6107      	str	r7, [r0, #16]
 800f18a:	e7a3      	b.n	800f0d4 <__mdiff+0x34>
 800f18c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f190:	fa11 f288 	uxtah	r2, r1, r8
 800f194:	1414      	asrs	r4, r2, #16
 800f196:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f19a:	b292      	uxth	r2, r2
 800f19c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f1a0:	f84e 2b04 	str.w	r2, [lr], #4
 800f1a4:	1421      	asrs	r1, r4, #16
 800f1a6:	e7e0      	b.n	800f16a <__mdiff+0xca>
 800f1a8:	3f01      	subs	r7, #1
 800f1aa:	e7ea      	b.n	800f182 <__mdiff+0xe2>
 800f1ac:	0803cd09 	.word	0x0803cd09
 800f1b0:	0803cddc 	.word	0x0803cddc

0800f1b4 <__d2b>:
 800f1b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1b8:	4689      	mov	r9, r1
 800f1ba:	2101      	movs	r1, #1
 800f1bc:	ec57 6b10 	vmov	r6, r7, d0
 800f1c0:	4690      	mov	r8, r2
 800f1c2:	f7ff fccf 	bl	800eb64 <_Balloc>
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	b930      	cbnz	r0, 800f1d8 <__d2b+0x24>
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	4b25      	ldr	r3, [pc, #148]	; (800f264 <__d2b+0xb0>)
 800f1ce:	4826      	ldr	r0, [pc, #152]	; (800f268 <__d2b+0xb4>)
 800f1d0:	f240 310a 	movw	r1, #778	; 0x30a
 800f1d4:	f7fc f862 	bl	800b29c <__assert_func>
 800f1d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f1dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f1e0:	bb35      	cbnz	r5, 800f230 <__d2b+0x7c>
 800f1e2:	2e00      	cmp	r6, #0
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	d028      	beq.n	800f23a <__d2b+0x86>
 800f1e8:	4668      	mov	r0, sp
 800f1ea:	9600      	str	r6, [sp, #0]
 800f1ec:	f7ff fd82 	bl	800ecf4 <__lo0bits>
 800f1f0:	9900      	ldr	r1, [sp, #0]
 800f1f2:	b300      	cbz	r0, 800f236 <__d2b+0x82>
 800f1f4:	9a01      	ldr	r2, [sp, #4]
 800f1f6:	f1c0 0320 	rsb	r3, r0, #32
 800f1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800f1fe:	430b      	orrs	r3, r1
 800f200:	40c2      	lsrs	r2, r0
 800f202:	6163      	str	r3, [r4, #20]
 800f204:	9201      	str	r2, [sp, #4]
 800f206:	9b01      	ldr	r3, [sp, #4]
 800f208:	61a3      	str	r3, [r4, #24]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	bf14      	ite	ne
 800f20e:	2202      	movne	r2, #2
 800f210:	2201      	moveq	r2, #1
 800f212:	6122      	str	r2, [r4, #16]
 800f214:	b1d5      	cbz	r5, 800f24c <__d2b+0x98>
 800f216:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f21a:	4405      	add	r5, r0
 800f21c:	f8c9 5000 	str.w	r5, [r9]
 800f220:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f224:	f8c8 0000 	str.w	r0, [r8]
 800f228:	4620      	mov	r0, r4
 800f22a:	b003      	add	sp, #12
 800f22c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f234:	e7d5      	b.n	800f1e2 <__d2b+0x2e>
 800f236:	6161      	str	r1, [r4, #20]
 800f238:	e7e5      	b.n	800f206 <__d2b+0x52>
 800f23a:	a801      	add	r0, sp, #4
 800f23c:	f7ff fd5a 	bl	800ecf4 <__lo0bits>
 800f240:	9b01      	ldr	r3, [sp, #4]
 800f242:	6163      	str	r3, [r4, #20]
 800f244:	2201      	movs	r2, #1
 800f246:	6122      	str	r2, [r4, #16]
 800f248:	3020      	adds	r0, #32
 800f24a:	e7e3      	b.n	800f214 <__d2b+0x60>
 800f24c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f250:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f254:	f8c9 0000 	str.w	r0, [r9]
 800f258:	6918      	ldr	r0, [r3, #16]
 800f25a:	f7ff fd2b 	bl	800ecb4 <__hi0bits>
 800f25e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f262:	e7df      	b.n	800f224 <__d2b+0x70>
 800f264:	0803cd09 	.word	0x0803cd09
 800f268:	0803cddc 	.word	0x0803cddc

0800f26c <_calloc_r>:
 800f26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f26e:	fba1 2402 	umull	r2, r4, r1, r2
 800f272:	b94c      	cbnz	r4, 800f288 <_calloc_r+0x1c>
 800f274:	4611      	mov	r1, r2
 800f276:	9201      	str	r2, [sp, #4]
 800f278:	f7fc fb68 	bl	800b94c <_malloc_r>
 800f27c:	9a01      	ldr	r2, [sp, #4]
 800f27e:	4605      	mov	r5, r0
 800f280:	b930      	cbnz	r0, 800f290 <_calloc_r+0x24>
 800f282:	4628      	mov	r0, r5
 800f284:	b003      	add	sp, #12
 800f286:	bd30      	pop	{r4, r5, pc}
 800f288:	220c      	movs	r2, #12
 800f28a:	6002      	str	r2, [r0, #0]
 800f28c:	2500      	movs	r5, #0
 800f28e:	e7f8      	b.n	800f282 <_calloc_r+0x16>
 800f290:	4621      	mov	r1, r4
 800f292:	f7fc f875 	bl	800b380 <memset>
 800f296:	e7f4      	b.n	800f282 <_calloc_r+0x16>

0800f298 <_realloc_r>:
 800f298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f29c:	4680      	mov	r8, r0
 800f29e:	4614      	mov	r4, r2
 800f2a0:	460e      	mov	r6, r1
 800f2a2:	b921      	cbnz	r1, 800f2ae <_realloc_r+0x16>
 800f2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a8:	4611      	mov	r1, r2
 800f2aa:	f7fc bb4f 	b.w	800b94c <_malloc_r>
 800f2ae:	b92a      	cbnz	r2, 800f2bc <_realloc_r+0x24>
 800f2b0:	f7fc fae0 	bl	800b874 <_free_r>
 800f2b4:	4625      	mov	r5, r4
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2bc:	f000 fe7c 	bl	800ffb8 <_malloc_usable_size_r>
 800f2c0:	4284      	cmp	r4, r0
 800f2c2:	4607      	mov	r7, r0
 800f2c4:	d802      	bhi.n	800f2cc <_realloc_r+0x34>
 800f2c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2ca:	d812      	bhi.n	800f2f2 <_realloc_r+0x5a>
 800f2cc:	4621      	mov	r1, r4
 800f2ce:	4640      	mov	r0, r8
 800f2d0:	f7fc fb3c 	bl	800b94c <_malloc_r>
 800f2d4:	4605      	mov	r5, r0
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	d0ed      	beq.n	800f2b6 <_realloc_r+0x1e>
 800f2da:	42bc      	cmp	r4, r7
 800f2dc:	4622      	mov	r2, r4
 800f2de:	4631      	mov	r1, r6
 800f2e0:	bf28      	it	cs
 800f2e2:	463a      	movcs	r2, r7
 800f2e4:	f7fc f83e 	bl	800b364 <memcpy>
 800f2e8:	4631      	mov	r1, r6
 800f2ea:	4640      	mov	r0, r8
 800f2ec:	f7fc fac2 	bl	800b874 <_free_r>
 800f2f0:	e7e1      	b.n	800f2b6 <_realloc_r+0x1e>
 800f2f2:	4635      	mov	r5, r6
 800f2f4:	e7df      	b.n	800f2b6 <_realloc_r+0x1e>

0800f2f6 <__ssputs_r>:
 800f2f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2fa:	688e      	ldr	r6, [r1, #8]
 800f2fc:	429e      	cmp	r6, r3
 800f2fe:	4682      	mov	sl, r0
 800f300:	460c      	mov	r4, r1
 800f302:	4690      	mov	r8, r2
 800f304:	461f      	mov	r7, r3
 800f306:	d838      	bhi.n	800f37a <__ssputs_r+0x84>
 800f308:	898a      	ldrh	r2, [r1, #12]
 800f30a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f30e:	d032      	beq.n	800f376 <__ssputs_r+0x80>
 800f310:	6825      	ldr	r5, [r4, #0]
 800f312:	6909      	ldr	r1, [r1, #16]
 800f314:	eba5 0901 	sub.w	r9, r5, r1
 800f318:	6965      	ldr	r5, [r4, #20]
 800f31a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f31e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f322:	3301      	adds	r3, #1
 800f324:	444b      	add	r3, r9
 800f326:	106d      	asrs	r5, r5, #1
 800f328:	429d      	cmp	r5, r3
 800f32a:	bf38      	it	cc
 800f32c:	461d      	movcc	r5, r3
 800f32e:	0553      	lsls	r3, r2, #21
 800f330:	d531      	bpl.n	800f396 <__ssputs_r+0xa0>
 800f332:	4629      	mov	r1, r5
 800f334:	f7fc fb0a 	bl	800b94c <_malloc_r>
 800f338:	4606      	mov	r6, r0
 800f33a:	b950      	cbnz	r0, 800f352 <__ssputs_r+0x5c>
 800f33c:	230c      	movs	r3, #12
 800f33e:	f8ca 3000 	str.w	r3, [sl]
 800f342:	89a3      	ldrh	r3, [r4, #12]
 800f344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f348:	81a3      	strh	r3, [r4, #12]
 800f34a:	f04f 30ff 	mov.w	r0, #4294967295
 800f34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f352:	6921      	ldr	r1, [r4, #16]
 800f354:	464a      	mov	r2, r9
 800f356:	f7fc f805 	bl	800b364 <memcpy>
 800f35a:	89a3      	ldrh	r3, [r4, #12]
 800f35c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f364:	81a3      	strh	r3, [r4, #12]
 800f366:	6126      	str	r6, [r4, #16]
 800f368:	6165      	str	r5, [r4, #20]
 800f36a:	444e      	add	r6, r9
 800f36c:	eba5 0509 	sub.w	r5, r5, r9
 800f370:	6026      	str	r6, [r4, #0]
 800f372:	60a5      	str	r5, [r4, #8]
 800f374:	463e      	mov	r6, r7
 800f376:	42be      	cmp	r6, r7
 800f378:	d900      	bls.n	800f37c <__ssputs_r+0x86>
 800f37a:	463e      	mov	r6, r7
 800f37c:	6820      	ldr	r0, [r4, #0]
 800f37e:	4632      	mov	r2, r6
 800f380:	4641      	mov	r1, r8
 800f382:	f7ff fbc9 	bl	800eb18 <memmove>
 800f386:	68a3      	ldr	r3, [r4, #8]
 800f388:	1b9b      	subs	r3, r3, r6
 800f38a:	60a3      	str	r3, [r4, #8]
 800f38c:	6823      	ldr	r3, [r4, #0]
 800f38e:	4433      	add	r3, r6
 800f390:	6023      	str	r3, [r4, #0]
 800f392:	2000      	movs	r0, #0
 800f394:	e7db      	b.n	800f34e <__ssputs_r+0x58>
 800f396:	462a      	mov	r2, r5
 800f398:	f7ff ff7e 	bl	800f298 <_realloc_r>
 800f39c:	4606      	mov	r6, r0
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	d1e1      	bne.n	800f366 <__ssputs_r+0x70>
 800f3a2:	6921      	ldr	r1, [r4, #16]
 800f3a4:	4650      	mov	r0, sl
 800f3a6:	f7fc fa65 	bl	800b874 <_free_r>
 800f3aa:	e7c7      	b.n	800f33c <__ssputs_r+0x46>

0800f3ac <_svfiprintf_r>:
 800f3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b0:	4698      	mov	r8, r3
 800f3b2:	898b      	ldrh	r3, [r1, #12]
 800f3b4:	061b      	lsls	r3, r3, #24
 800f3b6:	b09d      	sub	sp, #116	; 0x74
 800f3b8:	4607      	mov	r7, r0
 800f3ba:	460d      	mov	r5, r1
 800f3bc:	4614      	mov	r4, r2
 800f3be:	d50e      	bpl.n	800f3de <_svfiprintf_r+0x32>
 800f3c0:	690b      	ldr	r3, [r1, #16]
 800f3c2:	b963      	cbnz	r3, 800f3de <_svfiprintf_r+0x32>
 800f3c4:	2140      	movs	r1, #64	; 0x40
 800f3c6:	f7fc fac1 	bl	800b94c <_malloc_r>
 800f3ca:	6028      	str	r0, [r5, #0]
 800f3cc:	6128      	str	r0, [r5, #16]
 800f3ce:	b920      	cbnz	r0, 800f3da <_svfiprintf_r+0x2e>
 800f3d0:	230c      	movs	r3, #12
 800f3d2:	603b      	str	r3, [r7, #0]
 800f3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3d8:	e0d1      	b.n	800f57e <_svfiprintf_r+0x1d2>
 800f3da:	2340      	movs	r3, #64	; 0x40
 800f3dc:	616b      	str	r3, [r5, #20]
 800f3de:	2300      	movs	r3, #0
 800f3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800f3e2:	2320      	movs	r3, #32
 800f3e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3ec:	2330      	movs	r3, #48	; 0x30
 800f3ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f598 <_svfiprintf_r+0x1ec>
 800f3f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3f6:	f04f 0901 	mov.w	r9, #1
 800f3fa:	4623      	mov	r3, r4
 800f3fc:	469a      	mov	sl, r3
 800f3fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f402:	b10a      	cbz	r2, 800f408 <_svfiprintf_r+0x5c>
 800f404:	2a25      	cmp	r2, #37	; 0x25
 800f406:	d1f9      	bne.n	800f3fc <_svfiprintf_r+0x50>
 800f408:	ebba 0b04 	subs.w	fp, sl, r4
 800f40c:	d00b      	beq.n	800f426 <_svfiprintf_r+0x7a>
 800f40e:	465b      	mov	r3, fp
 800f410:	4622      	mov	r2, r4
 800f412:	4629      	mov	r1, r5
 800f414:	4638      	mov	r0, r7
 800f416:	f7ff ff6e 	bl	800f2f6 <__ssputs_r>
 800f41a:	3001      	adds	r0, #1
 800f41c:	f000 80aa 	beq.w	800f574 <_svfiprintf_r+0x1c8>
 800f420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f422:	445a      	add	r2, fp
 800f424:	9209      	str	r2, [sp, #36]	; 0x24
 800f426:	f89a 3000 	ldrb.w	r3, [sl]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	f000 80a2 	beq.w	800f574 <_svfiprintf_r+0x1c8>
 800f430:	2300      	movs	r3, #0
 800f432:	f04f 32ff 	mov.w	r2, #4294967295
 800f436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f43a:	f10a 0a01 	add.w	sl, sl, #1
 800f43e:	9304      	str	r3, [sp, #16]
 800f440:	9307      	str	r3, [sp, #28]
 800f442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f446:	931a      	str	r3, [sp, #104]	; 0x68
 800f448:	4654      	mov	r4, sl
 800f44a:	2205      	movs	r2, #5
 800f44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f450:	4851      	ldr	r0, [pc, #324]	; (800f598 <_svfiprintf_r+0x1ec>)
 800f452:	f7f0 fed5 	bl	8000200 <memchr>
 800f456:	9a04      	ldr	r2, [sp, #16]
 800f458:	b9d8      	cbnz	r0, 800f492 <_svfiprintf_r+0xe6>
 800f45a:	06d0      	lsls	r0, r2, #27
 800f45c:	bf44      	itt	mi
 800f45e:	2320      	movmi	r3, #32
 800f460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f464:	0711      	lsls	r1, r2, #28
 800f466:	bf44      	itt	mi
 800f468:	232b      	movmi	r3, #43	; 0x2b
 800f46a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f46e:	f89a 3000 	ldrb.w	r3, [sl]
 800f472:	2b2a      	cmp	r3, #42	; 0x2a
 800f474:	d015      	beq.n	800f4a2 <_svfiprintf_r+0xf6>
 800f476:	9a07      	ldr	r2, [sp, #28]
 800f478:	4654      	mov	r4, sl
 800f47a:	2000      	movs	r0, #0
 800f47c:	f04f 0c0a 	mov.w	ip, #10
 800f480:	4621      	mov	r1, r4
 800f482:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f486:	3b30      	subs	r3, #48	; 0x30
 800f488:	2b09      	cmp	r3, #9
 800f48a:	d94e      	bls.n	800f52a <_svfiprintf_r+0x17e>
 800f48c:	b1b0      	cbz	r0, 800f4bc <_svfiprintf_r+0x110>
 800f48e:	9207      	str	r2, [sp, #28]
 800f490:	e014      	b.n	800f4bc <_svfiprintf_r+0x110>
 800f492:	eba0 0308 	sub.w	r3, r0, r8
 800f496:	fa09 f303 	lsl.w	r3, r9, r3
 800f49a:	4313      	orrs	r3, r2
 800f49c:	9304      	str	r3, [sp, #16]
 800f49e:	46a2      	mov	sl, r4
 800f4a0:	e7d2      	b.n	800f448 <_svfiprintf_r+0x9c>
 800f4a2:	9b03      	ldr	r3, [sp, #12]
 800f4a4:	1d19      	adds	r1, r3, #4
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	9103      	str	r1, [sp, #12]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	bfbb      	ittet	lt
 800f4ae:	425b      	neglt	r3, r3
 800f4b0:	f042 0202 	orrlt.w	r2, r2, #2
 800f4b4:	9307      	strge	r3, [sp, #28]
 800f4b6:	9307      	strlt	r3, [sp, #28]
 800f4b8:	bfb8      	it	lt
 800f4ba:	9204      	strlt	r2, [sp, #16]
 800f4bc:	7823      	ldrb	r3, [r4, #0]
 800f4be:	2b2e      	cmp	r3, #46	; 0x2e
 800f4c0:	d10c      	bne.n	800f4dc <_svfiprintf_r+0x130>
 800f4c2:	7863      	ldrb	r3, [r4, #1]
 800f4c4:	2b2a      	cmp	r3, #42	; 0x2a
 800f4c6:	d135      	bne.n	800f534 <_svfiprintf_r+0x188>
 800f4c8:	9b03      	ldr	r3, [sp, #12]
 800f4ca:	1d1a      	adds	r2, r3, #4
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	9203      	str	r2, [sp, #12]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	bfb8      	it	lt
 800f4d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4d8:	3402      	adds	r4, #2
 800f4da:	9305      	str	r3, [sp, #20]
 800f4dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f5a8 <_svfiprintf_r+0x1fc>
 800f4e0:	7821      	ldrb	r1, [r4, #0]
 800f4e2:	2203      	movs	r2, #3
 800f4e4:	4650      	mov	r0, sl
 800f4e6:	f7f0 fe8b 	bl	8000200 <memchr>
 800f4ea:	b140      	cbz	r0, 800f4fe <_svfiprintf_r+0x152>
 800f4ec:	2340      	movs	r3, #64	; 0x40
 800f4ee:	eba0 000a 	sub.w	r0, r0, sl
 800f4f2:	fa03 f000 	lsl.w	r0, r3, r0
 800f4f6:	9b04      	ldr	r3, [sp, #16]
 800f4f8:	4303      	orrs	r3, r0
 800f4fa:	3401      	adds	r4, #1
 800f4fc:	9304      	str	r3, [sp, #16]
 800f4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f502:	4826      	ldr	r0, [pc, #152]	; (800f59c <_svfiprintf_r+0x1f0>)
 800f504:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f508:	2206      	movs	r2, #6
 800f50a:	f7f0 fe79 	bl	8000200 <memchr>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d038      	beq.n	800f584 <_svfiprintf_r+0x1d8>
 800f512:	4b23      	ldr	r3, [pc, #140]	; (800f5a0 <_svfiprintf_r+0x1f4>)
 800f514:	bb1b      	cbnz	r3, 800f55e <_svfiprintf_r+0x1b2>
 800f516:	9b03      	ldr	r3, [sp, #12]
 800f518:	3307      	adds	r3, #7
 800f51a:	f023 0307 	bic.w	r3, r3, #7
 800f51e:	3308      	adds	r3, #8
 800f520:	9303      	str	r3, [sp, #12]
 800f522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f524:	4433      	add	r3, r6
 800f526:	9309      	str	r3, [sp, #36]	; 0x24
 800f528:	e767      	b.n	800f3fa <_svfiprintf_r+0x4e>
 800f52a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f52e:	460c      	mov	r4, r1
 800f530:	2001      	movs	r0, #1
 800f532:	e7a5      	b.n	800f480 <_svfiprintf_r+0xd4>
 800f534:	2300      	movs	r3, #0
 800f536:	3401      	adds	r4, #1
 800f538:	9305      	str	r3, [sp, #20]
 800f53a:	4619      	mov	r1, r3
 800f53c:	f04f 0c0a 	mov.w	ip, #10
 800f540:	4620      	mov	r0, r4
 800f542:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f546:	3a30      	subs	r2, #48	; 0x30
 800f548:	2a09      	cmp	r2, #9
 800f54a:	d903      	bls.n	800f554 <_svfiprintf_r+0x1a8>
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d0c5      	beq.n	800f4dc <_svfiprintf_r+0x130>
 800f550:	9105      	str	r1, [sp, #20]
 800f552:	e7c3      	b.n	800f4dc <_svfiprintf_r+0x130>
 800f554:	fb0c 2101 	mla	r1, ip, r1, r2
 800f558:	4604      	mov	r4, r0
 800f55a:	2301      	movs	r3, #1
 800f55c:	e7f0      	b.n	800f540 <_svfiprintf_r+0x194>
 800f55e:	ab03      	add	r3, sp, #12
 800f560:	9300      	str	r3, [sp, #0]
 800f562:	462a      	mov	r2, r5
 800f564:	4b0f      	ldr	r3, [pc, #60]	; (800f5a4 <_svfiprintf_r+0x1f8>)
 800f566:	a904      	add	r1, sp, #16
 800f568:	4638      	mov	r0, r7
 800f56a:	f7fc fc5d 	bl	800be28 <_printf_float>
 800f56e:	1c42      	adds	r2, r0, #1
 800f570:	4606      	mov	r6, r0
 800f572:	d1d6      	bne.n	800f522 <_svfiprintf_r+0x176>
 800f574:	89ab      	ldrh	r3, [r5, #12]
 800f576:	065b      	lsls	r3, r3, #25
 800f578:	f53f af2c 	bmi.w	800f3d4 <_svfiprintf_r+0x28>
 800f57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f57e:	b01d      	add	sp, #116	; 0x74
 800f580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f584:	ab03      	add	r3, sp, #12
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	462a      	mov	r2, r5
 800f58a:	4b06      	ldr	r3, [pc, #24]	; (800f5a4 <_svfiprintf_r+0x1f8>)
 800f58c:	a904      	add	r1, sp, #16
 800f58e:	4638      	mov	r0, r7
 800f590:	f7fc feee 	bl	800c370 <_printf_i>
 800f594:	e7eb      	b.n	800f56e <_svfiprintf_r+0x1c2>
 800f596:	bf00      	nop
 800f598:	0803c8a0 	.word	0x0803c8a0
 800f59c:	0803c8aa 	.word	0x0803c8aa
 800f5a0:	0800be29 	.word	0x0800be29
 800f5a4:	0800f2f7 	.word	0x0800f2f7
 800f5a8:	0803c8a6 	.word	0x0803c8a6

0800f5ac <_sungetc_r>:
 800f5ac:	b538      	push	{r3, r4, r5, lr}
 800f5ae:	1c4b      	adds	r3, r1, #1
 800f5b0:	4614      	mov	r4, r2
 800f5b2:	d103      	bne.n	800f5bc <_sungetc_r+0x10>
 800f5b4:	f04f 35ff 	mov.w	r5, #4294967295
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	bd38      	pop	{r3, r4, r5, pc}
 800f5bc:	8993      	ldrh	r3, [r2, #12]
 800f5be:	f023 0320 	bic.w	r3, r3, #32
 800f5c2:	8193      	strh	r3, [r2, #12]
 800f5c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f5c6:	6852      	ldr	r2, [r2, #4]
 800f5c8:	b2cd      	uxtb	r5, r1
 800f5ca:	b18b      	cbz	r3, 800f5f0 <_sungetc_r+0x44>
 800f5cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	dd08      	ble.n	800f5e4 <_sungetc_r+0x38>
 800f5d2:	6823      	ldr	r3, [r4, #0]
 800f5d4:	1e5a      	subs	r2, r3, #1
 800f5d6:	6022      	str	r2, [r4, #0]
 800f5d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f5dc:	6863      	ldr	r3, [r4, #4]
 800f5de:	3301      	adds	r3, #1
 800f5e0:	6063      	str	r3, [r4, #4]
 800f5e2:	e7e9      	b.n	800f5b8 <_sungetc_r+0xc>
 800f5e4:	4621      	mov	r1, r4
 800f5e6:	f000 fc67 	bl	800feb8 <__submore>
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d0f1      	beq.n	800f5d2 <_sungetc_r+0x26>
 800f5ee:	e7e1      	b.n	800f5b4 <_sungetc_r+0x8>
 800f5f0:	6921      	ldr	r1, [r4, #16]
 800f5f2:	6823      	ldr	r3, [r4, #0]
 800f5f4:	b151      	cbz	r1, 800f60c <_sungetc_r+0x60>
 800f5f6:	4299      	cmp	r1, r3
 800f5f8:	d208      	bcs.n	800f60c <_sungetc_r+0x60>
 800f5fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f5fe:	42a9      	cmp	r1, r5
 800f600:	d104      	bne.n	800f60c <_sungetc_r+0x60>
 800f602:	3b01      	subs	r3, #1
 800f604:	3201      	adds	r2, #1
 800f606:	6023      	str	r3, [r4, #0]
 800f608:	6062      	str	r2, [r4, #4]
 800f60a:	e7d5      	b.n	800f5b8 <_sungetc_r+0xc>
 800f60c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f614:	6363      	str	r3, [r4, #52]	; 0x34
 800f616:	2303      	movs	r3, #3
 800f618:	63a3      	str	r3, [r4, #56]	; 0x38
 800f61a:	4623      	mov	r3, r4
 800f61c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f620:	6023      	str	r3, [r4, #0]
 800f622:	2301      	movs	r3, #1
 800f624:	e7dc      	b.n	800f5e0 <_sungetc_r+0x34>

0800f626 <__ssrefill_r>:
 800f626:	b510      	push	{r4, lr}
 800f628:	460c      	mov	r4, r1
 800f62a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f62c:	b169      	cbz	r1, 800f64a <__ssrefill_r+0x24>
 800f62e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f632:	4299      	cmp	r1, r3
 800f634:	d001      	beq.n	800f63a <__ssrefill_r+0x14>
 800f636:	f7fc f91d 	bl	800b874 <_free_r>
 800f63a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f63c:	6063      	str	r3, [r4, #4]
 800f63e:	2000      	movs	r0, #0
 800f640:	6360      	str	r0, [r4, #52]	; 0x34
 800f642:	b113      	cbz	r3, 800f64a <__ssrefill_r+0x24>
 800f644:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f646:	6023      	str	r3, [r4, #0]
 800f648:	bd10      	pop	{r4, pc}
 800f64a:	6923      	ldr	r3, [r4, #16]
 800f64c:	6023      	str	r3, [r4, #0]
 800f64e:	2300      	movs	r3, #0
 800f650:	6063      	str	r3, [r4, #4]
 800f652:	89a3      	ldrh	r3, [r4, #12]
 800f654:	f043 0320 	orr.w	r3, r3, #32
 800f658:	81a3      	strh	r3, [r4, #12]
 800f65a:	f04f 30ff 	mov.w	r0, #4294967295
 800f65e:	e7f3      	b.n	800f648 <__ssrefill_r+0x22>

0800f660 <__ssvfiscanf_r>:
 800f660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f664:	460c      	mov	r4, r1
 800f666:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f66a:	2100      	movs	r1, #0
 800f66c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f670:	49a6      	ldr	r1, [pc, #664]	; (800f90c <__ssvfiscanf_r+0x2ac>)
 800f672:	91a0      	str	r1, [sp, #640]	; 0x280
 800f674:	f10d 0804 	add.w	r8, sp, #4
 800f678:	49a5      	ldr	r1, [pc, #660]	; (800f910 <__ssvfiscanf_r+0x2b0>)
 800f67a:	4fa6      	ldr	r7, [pc, #664]	; (800f914 <__ssvfiscanf_r+0x2b4>)
 800f67c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f918 <__ssvfiscanf_r+0x2b8>
 800f680:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f684:	4606      	mov	r6, r0
 800f686:	91a1      	str	r1, [sp, #644]	; 0x284
 800f688:	9300      	str	r3, [sp, #0]
 800f68a:	7813      	ldrb	r3, [r2, #0]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	f000 815a 	beq.w	800f946 <__ssvfiscanf_r+0x2e6>
 800f692:	5dd9      	ldrb	r1, [r3, r7]
 800f694:	f011 0108 	ands.w	r1, r1, #8
 800f698:	f102 0501 	add.w	r5, r2, #1
 800f69c:	d019      	beq.n	800f6d2 <__ssvfiscanf_r+0x72>
 800f69e:	6863      	ldr	r3, [r4, #4]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	dd0f      	ble.n	800f6c4 <__ssvfiscanf_r+0x64>
 800f6a4:	6823      	ldr	r3, [r4, #0]
 800f6a6:	781a      	ldrb	r2, [r3, #0]
 800f6a8:	5cba      	ldrb	r2, [r7, r2]
 800f6aa:	0712      	lsls	r2, r2, #28
 800f6ac:	d401      	bmi.n	800f6b2 <__ssvfiscanf_r+0x52>
 800f6ae:	462a      	mov	r2, r5
 800f6b0:	e7eb      	b.n	800f68a <__ssvfiscanf_r+0x2a>
 800f6b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f6b4:	3201      	adds	r2, #1
 800f6b6:	9245      	str	r2, [sp, #276]	; 0x114
 800f6b8:	6862      	ldr	r2, [r4, #4]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	3a01      	subs	r2, #1
 800f6be:	6062      	str	r2, [r4, #4]
 800f6c0:	6023      	str	r3, [r4, #0]
 800f6c2:	e7ec      	b.n	800f69e <__ssvfiscanf_r+0x3e>
 800f6c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f6c6:	4621      	mov	r1, r4
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	4798      	blx	r3
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	d0e9      	beq.n	800f6a4 <__ssvfiscanf_r+0x44>
 800f6d0:	e7ed      	b.n	800f6ae <__ssvfiscanf_r+0x4e>
 800f6d2:	2b25      	cmp	r3, #37	; 0x25
 800f6d4:	d012      	beq.n	800f6fc <__ssvfiscanf_r+0x9c>
 800f6d6:	469a      	mov	sl, r3
 800f6d8:	6863      	ldr	r3, [r4, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f340 8091 	ble.w	800f802 <__ssvfiscanf_r+0x1a2>
 800f6e0:	6822      	ldr	r2, [r4, #0]
 800f6e2:	7813      	ldrb	r3, [r2, #0]
 800f6e4:	4553      	cmp	r3, sl
 800f6e6:	f040 812e 	bne.w	800f946 <__ssvfiscanf_r+0x2e6>
 800f6ea:	6863      	ldr	r3, [r4, #4]
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	6063      	str	r3, [r4, #4]
 800f6f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f6f2:	3201      	adds	r2, #1
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	6022      	str	r2, [r4, #0]
 800f6f8:	9345      	str	r3, [sp, #276]	; 0x114
 800f6fa:	e7d8      	b.n	800f6ae <__ssvfiscanf_r+0x4e>
 800f6fc:	9141      	str	r1, [sp, #260]	; 0x104
 800f6fe:	9143      	str	r1, [sp, #268]	; 0x10c
 800f700:	7853      	ldrb	r3, [r2, #1]
 800f702:	2b2a      	cmp	r3, #42	; 0x2a
 800f704:	bf02      	ittt	eq
 800f706:	2310      	moveq	r3, #16
 800f708:	1c95      	addeq	r5, r2, #2
 800f70a:	9341      	streq	r3, [sp, #260]	; 0x104
 800f70c:	220a      	movs	r2, #10
 800f70e:	46aa      	mov	sl, r5
 800f710:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f714:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f718:	2b09      	cmp	r3, #9
 800f71a:	d91d      	bls.n	800f758 <__ssvfiscanf_r+0xf8>
 800f71c:	487e      	ldr	r0, [pc, #504]	; (800f918 <__ssvfiscanf_r+0x2b8>)
 800f71e:	2203      	movs	r2, #3
 800f720:	f7f0 fd6e 	bl	8000200 <memchr>
 800f724:	b140      	cbz	r0, 800f738 <__ssvfiscanf_r+0xd8>
 800f726:	2301      	movs	r3, #1
 800f728:	eba0 0009 	sub.w	r0, r0, r9
 800f72c:	fa03 f000 	lsl.w	r0, r3, r0
 800f730:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f732:	4318      	orrs	r0, r3
 800f734:	9041      	str	r0, [sp, #260]	; 0x104
 800f736:	4655      	mov	r5, sl
 800f738:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f73c:	2b78      	cmp	r3, #120	; 0x78
 800f73e:	d806      	bhi.n	800f74e <__ssvfiscanf_r+0xee>
 800f740:	2b57      	cmp	r3, #87	; 0x57
 800f742:	d810      	bhi.n	800f766 <__ssvfiscanf_r+0x106>
 800f744:	2b25      	cmp	r3, #37	; 0x25
 800f746:	d0c6      	beq.n	800f6d6 <__ssvfiscanf_r+0x76>
 800f748:	d856      	bhi.n	800f7f8 <__ssvfiscanf_r+0x198>
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d064      	beq.n	800f818 <__ssvfiscanf_r+0x1b8>
 800f74e:	2303      	movs	r3, #3
 800f750:	9347      	str	r3, [sp, #284]	; 0x11c
 800f752:	230a      	movs	r3, #10
 800f754:	9342      	str	r3, [sp, #264]	; 0x108
 800f756:	e071      	b.n	800f83c <__ssvfiscanf_r+0x1dc>
 800f758:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f75a:	fb02 1103 	mla	r1, r2, r3, r1
 800f75e:	3930      	subs	r1, #48	; 0x30
 800f760:	9143      	str	r1, [sp, #268]	; 0x10c
 800f762:	4655      	mov	r5, sl
 800f764:	e7d3      	b.n	800f70e <__ssvfiscanf_r+0xae>
 800f766:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f76a:	2a20      	cmp	r2, #32
 800f76c:	d8ef      	bhi.n	800f74e <__ssvfiscanf_r+0xee>
 800f76e:	a101      	add	r1, pc, #4	; (adr r1, 800f774 <__ssvfiscanf_r+0x114>)
 800f770:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f774:	0800f827 	.word	0x0800f827
 800f778:	0800f74f 	.word	0x0800f74f
 800f77c:	0800f74f 	.word	0x0800f74f
 800f780:	0800f885 	.word	0x0800f885
 800f784:	0800f74f 	.word	0x0800f74f
 800f788:	0800f74f 	.word	0x0800f74f
 800f78c:	0800f74f 	.word	0x0800f74f
 800f790:	0800f74f 	.word	0x0800f74f
 800f794:	0800f74f 	.word	0x0800f74f
 800f798:	0800f74f 	.word	0x0800f74f
 800f79c:	0800f74f 	.word	0x0800f74f
 800f7a0:	0800f89b 	.word	0x0800f89b
 800f7a4:	0800f871 	.word	0x0800f871
 800f7a8:	0800f7ff 	.word	0x0800f7ff
 800f7ac:	0800f7ff 	.word	0x0800f7ff
 800f7b0:	0800f7ff 	.word	0x0800f7ff
 800f7b4:	0800f74f 	.word	0x0800f74f
 800f7b8:	0800f875 	.word	0x0800f875
 800f7bc:	0800f74f 	.word	0x0800f74f
 800f7c0:	0800f74f 	.word	0x0800f74f
 800f7c4:	0800f74f 	.word	0x0800f74f
 800f7c8:	0800f74f 	.word	0x0800f74f
 800f7cc:	0800f8ab 	.word	0x0800f8ab
 800f7d0:	0800f87d 	.word	0x0800f87d
 800f7d4:	0800f81f 	.word	0x0800f81f
 800f7d8:	0800f74f 	.word	0x0800f74f
 800f7dc:	0800f74f 	.word	0x0800f74f
 800f7e0:	0800f8a7 	.word	0x0800f8a7
 800f7e4:	0800f74f 	.word	0x0800f74f
 800f7e8:	0800f871 	.word	0x0800f871
 800f7ec:	0800f74f 	.word	0x0800f74f
 800f7f0:	0800f74f 	.word	0x0800f74f
 800f7f4:	0800f827 	.word	0x0800f827
 800f7f8:	3b45      	subs	r3, #69	; 0x45
 800f7fa:	2b02      	cmp	r3, #2
 800f7fc:	d8a7      	bhi.n	800f74e <__ssvfiscanf_r+0xee>
 800f7fe:	2305      	movs	r3, #5
 800f800:	e01b      	b.n	800f83a <__ssvfiscanf_r+0x1da>
 800f802:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f804:	4621      	mov	r1, r4
 800f806:	4630      	mov	r0, r6
 800f808:	4798      	blx	r3
 800f80a:	2800      	cmp	r0, #0
 800f80c:	f43f af68 	beq.w	800f6e0 <__ssvfiscanf_r+0x80>
 800f810:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f812:	2800      	cmp	r0, #0
 800f814:	f040 808d 	bne.w	800f932 <__ssvfiscanf_r+0x2d2>
 800f818:	f04f 30ff 	mov.w	r0, #4294967295
 800f81c:	e08f      	b.n	800f93e <__ssvfiscanf_r+0x2de>
 800f81e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f820:	f042 0220 	orr.w	r2, r2, #32
 800f824:	9241      	str	r2, [sp, #260]	; 0x104
 800f826:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f82c:	9241      	str	r2, [sp, #260]	; 0x104
 800f82e:	2210      	movs	r2, #16
 800f830:	2b6f      	cmp	r3, #111	; 0x6f
 800f832:	9242      	str	r2, [sp, #264]	; 0x108
 800f834:	bf34      	ite	cc
 800f836:	2303      	movcc	r3, #3
 800f838:	2304      	movcs	r3, #4
 800f83a:	9347      	str	r3, [sp, #284]	; 0x11c
 800f83c:	6863      	ldr	r3, [r4, #4]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	dd42      	ble.n	800f8c8 <__ssvfiscanf_r+0x268>
 800f842:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f844:	0659      	lsls	r1, r3, #25
 800f846:	d404      	bmi.n	800f852 <__ssvfiscanf_r+0x1f2>
 800f848:	6823      	ldr	r3, [r4, #0]
 800f84a:	781a      	ldrb	r2, [r3, #0]
 800f84c:	5cba      	ldrb	r2, [r7, r2]
 800f84e:	0712      	lsls	r2, r2, #28
 800f850:	d441      	bmi.n	800f8d6 <__ssvfiscanf_r+0x276>
 800f852:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f854:	2b02      	cmp	r3, #2
 800f856:	dc50      	bgt.n	800f8fa <__ssvfiscanf_r+0x29a>
 800f858:	466b      	mov	r3, sp
 800f85a:	4622      	mov	r2, r4
 800f85c:	a941      	add	r1, sp, #260	; 0x104
 800f85e:	4630      	mov	r0, r6
 800f860:	f000 f876 	bl	800f950 <_scanf_chars>
 800f864:	2801      	cmp	r0, #1
 800f866:	d06e      	beq.n	800f946 <__ssvfiscanf_r+0x2e6>
 800f868:	2802      	cmp	r0, #2
 800f86a:	f47f af20 	bne.w	800f6ae <__ssvfiscanf_r+0x4e>
 800f86e:	e7cf      	b.n	800f810 <__ssvfiscanf_r+0x1b0>
 800f870:	220a      	movs	r2, #10
 800f872:	e7dd      	b.n	800f830 <__ssvfiscanf_r+0x1d0>
 800f874:	2300      	movs	r3, #0
 800f876:	9342      	str	r3, [sp, #264]	; 0x108
 800f878:	2303      	movs	r3, #3
 800f87a:	e7de      	b.n	800f83a <__ssvfiscanf_r+0x1da>
 800f87c:	2308      	movs	r3, #8
 800f87e:	9342      	str	r3, [sp, #264]	; 0x108
 800f880:	2304      	movs	r3, #4
 800f882:	e7da      	b.n	800f83a <__ssvfiscanf_r+0x1da>
 800f884:	4629      	mov	r1, r5
 800f886:	4640      	mov	r0, r8
 800f888:	f000 f9c6 	bl	800fc18 <__sccl>
 800f88c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f88e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f892:	9341      	str	r3, [sp, #260]	; 0x104
 800f894:	4605      	mov	r5, r0
 800f896:	2301      	movs	r3, #1
 800f898:	e7cf      	b.n	800f83a <__ssvfiscanf_r+0x1da>
 800f89a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8a0:	9341      	str	r3, [sp, #260]	; 0x104
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e7c9      	b.n	800f83a <__ssvfiscanf_r+0x1da>
 800f8a6:	2302      	movs	r3, #2
 800f8a8:	e7c7      	b.n	800f83a <__ssvfiscanf_r+0x1da>
 800f8aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f8ac:	06c3      	lsls	r3, r0, #27
 800f8ae:	f53f aefe 	bmi.w	800f6ae <__ssvfiscanf_r+0x4e>
 800f8b2:	9b00      	ldr	r3, [sp, #0]
 800f8b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f8b6:	1d19      	adds	r1, r3, #4
 800f8b8:	9100      	str	r1, [sp, #0]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f010 0f01 	tst.w	r0, #1
 800f8c0:	bf14      	ite	ne
 800f8c2:	801a      	strhne	r2, [r3, #0]
 800f8c4:	601a      	streq	r2, [r3, #0]
 800f8c6:	e6f2      	b.n	800f6ae <__ssvfiscanf_r+0x4e>
 800f8c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f8ca:	4621      	mov	r1, r4
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	4798      	blx	r3
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d0b6      	beq.n	800f842 <__ssvfiscanf_r+0x1e2>
 800f8d4:	e79c      	b.n	800f810 <__ssvfiscanf_r+0x1b0>
 800f8d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f8d8:	3201      	adds	r2, #1
 800f8da:	9245      	str	r2, [sp, #276]	; 0x114
 800f8dc:	6862      	ldr	r2, [r4, #4]
 800f8de:	3a01      	subs	r2, #1
 800f8e0:	2a00      	cmp	r2, #0
 800f8e2:	6062      	str	r2, [r4, #4]
 800f8e4:	dd02      	ble.n	800f8ec <__ssvfiscanf_r+0x28c>
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	6023      	str	r3, [r4, #0]
 800f8ea:	e7ad      	b.n	800f848 <__ssvfiscanf_r+0x1e8>
 800f8ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f8ee:	4621      	mov	r1, r4
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	4798      	blx	r3
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	d0a7      	beq.n	800f848 <__ssvfiscanf_r+0x1e8>
 800f8f8:	e78a      	b.n	800f810 <__ssvfiscanf_r+0x1b0>
 800f8fa:	2b04      	cmp	r3, #4
 800f8fc:	dc0e      	bgt.n	800f91c <__ssvfiscanf_r+0x2bc>
 800f8fe:	466b      	mov	r3, sp
 800f900:	4622      	mov	r2, r4
 800f902:	a941      	add	r1, sp, #260	; 0x104
 800f904:	4630      	mov	r0, r6
 800f906:	f000 f87d 	bl	800fa04 <_scanf_i>
 800f90a:	e7ab      	b.n	800f864 <__ssvfiscanf_r+0x204>
 800f90c:	0800f5ad 	.word	0x0800f5ad
 800f910:	0800f627 	.word	0x0800f627
 800f914:	0803cba1 	.word	0x0803cba1
 800f918:	0803c8a6 	.word	0x0803c8a6
 800f91c:	4b0b      	ldr	r3, [pc, #44]	; (800f94c <__ssvfiscanf_r+0x2ec>)
 800f91e:	2b00      	cmp	r3, #0
 800f920:	f43f aec5 	beq.w	800f6ae <__ssvfiscanf_r+0x4e>
 800f924:	466b      	mov	r3, sp
 800f926:	4622      	mov	r2, r4
 800f928:	a941      	add	r1, sp, #260	; 0x104
 800f92a:	4630      	mov	r0, r6
 800f92c:	f3af 8000 	nop.w
 800f930:	e798      	b.n	800f864 <__ssvfiscanf_r+0x204>
 800f932:	89a3      	ldrh	r3, [r4, #12]
 800f934:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f938:	bf18      	it	ne
 800f93a:	f04f 30ff 	movne.w	r0, #4294967295
 800f93e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f946:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f948:	e7f9      	b.n	800f93e <__ssvfiscanf_r+0x2de>
 800f94a:	bf00      	nop
 800f94c:	00000000 	.word	0x00000000

0800f950 <_scanf_chars>:
 800f950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f954:	4615      	mov	r5, r2
 800f956:	688a      	ldr	r2, [r1, #8]
 800f958:	4680      	mov	r8, r0
 800f95a:	460c      	mov	r4, r1
 800f95c:	b932      	cbnz	r2, 800f96c <_scanf_chars+0x1c>
 800f95e:	698a      	ldr	r2, [r1, #24]
 800f960:	2a00      	cmp	r2, #0
 800f962:	bf0c      	ite	eq
 800f964:	2201      	moveq	r2, #1
 800f966:	f04f 32ff 	movne.w	r2, #4294967295
 800f96a:	608a      	str	r2, [r1, #8]
 800f96c:	6822      	ldr	r2, [r4, #0]
 800f96e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fa00 <_scanf_chars+0xb0>
 800f972:	06d1      	lsls	r1, r2, #27
 800f974:	bf5f      	itttt	pl
 800f976:	681a      	ldrpl	r2, [r3, #0]
 800f978:	1d11      	addpl	r1, r2, #4
 800f97a:	6019      	strpl	r1, [r3, #0]
 800f97c:	6816      	ldrpl	r6, [r2, #0]
 800f97e:	2700      	movs	r7, #0
 800f980:	69a0      	ldr	r0, [r4, #24]
 800f982:	b188      	cbz	r0, 800f9a8 <_scanf_chars+0x58>
 800f984:	2801      	cmp	r0, #1
 800f986:	d107      	bne.n	800f998 <_scanf_chars+0x48>
 800f988:	682a      	ldr	r2, [r5, #0]
 800f98a:	7811      	ldrb	r1, [r2, #0]
 800f98c:	6962      	ldr	r2, [r4, #20]
 800f98e:	5c52      	ldrb	r2, [r2, r1]
 800f990:	b952      	cbnz	r2, 800f9a8 <_scanf_chars+0x58>
 800f992:	2f00      	cmp	r7, #0
 800f994:	d031      	beq.n	800f9fa <_scanf_chars+0xaa>
 800f996:	e022      	b.n	800f9de <_scanf_chars+0x8e>
 800f998:	2802      	cmp	r0, #2
 800f99a:	d120      	bne.n	800f9de <_scanf_chars+0x8e>
 800f99c:	682b      	ldr	r3, [r5, #0]
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f9a4:	071b      	lsls	r3, r3, #28
 800f9a6:	d41a      	bmi.n	800f9de <_scanf_chars+0x8e>
 800f9a8:	6823      	ldr	r3, [r4, #0]
 800f9aa:	06da      	lsls	r2, r3, #27
 800f9ac:	bf5e      	ittt	pl
 800f9ae:	682b      	ldrpl	r3, [r5, #0]
 800f9b0:	781b      	ldrbpl	r3, [r3, #0]
 800f9b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f9b6:	682a      	ldr	r2, [r5, #0]
 800f9b8:	686b      	ldr	r3, [r5, #4]
 800f9ba:	3201      	adds	r2, #1
 800f9bc:	602a      	str	r2, [r5, #0]
 800f9be:	68a2      	ldr	r2, [r4, #8]
 800f9c0:	3b01      	subs	r3, #1
 800f9c2:	3a01      	subs	r2, #1
 800f9c4:	606b      	str	r3, [r5, #4]
 800f9c6:	3701      	adds	r7, #1
 800f9c8:	60a2      	str	r2, [r4, #8]
 800f9ca:	b142      	cbz	r2, 800f9de <_scanf_chars+0x8e>
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	dcd7      	bgt.n	800f980 <_scanf_chars+0x30>
 800f9d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	4640      	mov	r0, r8
 800f9d8:	4798      	blx	r3
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	d0d0      	beq.n	800f980 <_scanf_chars+0x30>
 800f9de:	6823      	ldr	r3, [r4, #0]
 800f9e0:	f013 0310 	ands.w	r3, r3, #16
 800f9e4:	d105      	bne.n	800f9f2 <_scanf_chars+0xa2>
 800f9e6:	68e2      	ldr	r2, [r4, #12]
 800f9e8:	3201      	adds	r2, #1
 800f9ea:	60e2      	str	r2, [r4, #12]
 800f9ec:	69a2      	ldr	r2, [r4, #24]
 800f9ee:	b102      	cbz	r2, 800f9f2 <_scanf_chars+0xa2>
 800f9f0:	7033      	strb	r3, [r6, #0]
 800f9f2:	6923      	ldr	r3, [r4, #16]
 800f9f4:	443b      	add	r3, r7
 800f9f6:	6123      	str	r3, [r4, #16]
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9fe:	bf00      	nop
 800fa00:	0803cba1 	.word	0x0803cba1

0800fa04 <_scanf_i>:
 800fa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa08:	4698      	mov	r8, r3
 800fa0a:	4b76      	ldr	r3, [pc, #472]	; (800fbe4 <_scanf_i+0x1e0>)
 800fa0c:	460c      	mov	r4, r1
 800fa0e:	4682      	mov	sl, r0
 800fa10:	4616      	mov	r6, r2
 800fa12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa16:	b087      	sub	sp, #28
 800fa18:	ab03      	add	r3, sp, #12
 800fa1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fa1e:	4b72      	ldr	r3, [pc, #456]	; (800fbe8 <_scanf_i+0x1e4>)
 800fa20:	69a1      	ldr	r1, [r4, #24]
 800fa22:	4a72      	ldr	r2, [pc, #456]	; (800fbec <_scanf_i+0x1e8>)
 800fa24:	2903      	cmp	r1, #3
 800fa26:	bf18      	it	ne
 800fa28:	461a      	movne	r2, r3
 800fa2a:	68a3      	ldr	r3, [r4, #8]
 800fa2c:	9201      	str	r2, [sp, #4]
 800fa2e:	1e5a      	subs	r2, r3, #1
 800fa30:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fa34:	bf88      	it	hi
 800fa36:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fa3a:	4627      	mov	r7, r4
 800fa3c:	bf82      	ittt	hi
 800fa3e:	eb03 0905 	addhi.w	r9, r3, r5
 800fa42:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fa46:	60a3      	strhi	r3, [r4, #8]
 800fa48:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fa4c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fa50:	bf98      	it	ls
 800fa52:	f04f 0900 	movls.w	r9, #0
 800fa56:	6023      	str	r3, [r4, #0]
 800fa58:	463d      	mov	r5, r7
 800fa5a:	f04f 0b00 	mov.w	fp, #0
 800fa5e:	6831      	ldr	r1, [r6, #0]
 800fa60:	ab03      	add	r3, sp, #12
 800fa62:	7809      	ldrb	r1, [r1, #0]
 800fa64:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fa68:	2202      	movs	r2, #2
 800fa6a:	f7f0 fbc9 	bl	8000200 <memchr>
 800fa6e:	b328      	cbz	r0, 800fabc <_scanf_i+0xb8>
 800fa70:	f1bb 0f01 	cmp.w	fp, #1
 800fa74:	d159      	bne.n	800fb2a <_scanf_i+0x126>
 800fa76:	6862      	ldr	r2, [r4, #4]
 800fa78:	b92a      	cbnz	r2, 800fa86 <_scanf_i+0x82>
 800fa7a:	6822      	ldr	r2, [r4, #0]
 800fa7c:	2308      	movs	r3, #8
 800fa7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa82:	6063      	str	r3, [r4, #4]
 800fa84:	6022      	str	r2, [r4, #0]
 800fa86:	6822      	ldr	r2, [r4, #0]
 800fa88:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fa8c:	6022      	str	r2, [r4, #0]
 800fa8e:	68a2      	ldr	r2, [r4, #8]
 800fa90:	1e51      	subs	r1, r2, #1
 800fa92:	60a1      	str	r1, [r4, #8]
 800fa94:	b192      	cbz	r2, 800fabc <_scanf_i+0xb8>
 800fa96:	6832      	ldr	r2, [r6, #0]
 800fa98:	1c51      	adds	r1, r2, #1
 800fa9a:	6031      	str	r1, [r6, #0]
 800fa9c:	7812      	ldrb	r2, [r2, #0]
 800fa9e:	f805 2b01 	strb.w	r2, [r5], #1
 800faa2:	6872      	ldr	r2, [r6, #4]
 800faa4:	3a01      	subs	r2, #1
 800faa6:	2a00      	cmp	r2, #0
 800faa8:	6072      	str	r2, [r6, #4]
 800faaa:	dc07      	bgt.n	800fabc <_scanf_i+0xb8>
 800faac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fab0:	4631      	mov	r1, r6
 800fab2:	4650      	mov	r0, sl
 800fab4:	4790      	blx	r2
 800fab6:	2800      	cmp	r0, #0
 800fab8:	f040 8085 	bne.w	800fbc6 <_scanf_i+0x1c2>
 800fabc:	f10b 0b01 	add.w	fp, fp, #1
 800fac0:	f1bb 0f03 	cmp.w	fp, #3
 800fac4:	d1cb      	bne.n	800fa5e <_scanf_i+0x5a>
 800fac6:	6863      	ldr	r3, [r4, #4]
 800fac8:	b90b      	cbnz	r3, 800face <_scanf_i+0xca>
 800faca:	230a      	movs	r3, #10
 800facc:	6063      	str	r3, [r4, #4]
 800face:	6863      	ldr	r3, [r4, #4]
 800fad0:	4947      	ldr	r1, [pc, #284]	; (800fbf0 <_scanf_i+0x1ec>)
 800fad2:	6960      	ldr	r0, [r4, #20]
 800fad4:	1ac9      	subs	r1, r1, r3
 800fad6:	f000 f89f 	bl	800fc18 <__sccl>
 800fada:	f04f 0b00 	mov.w	fp, #0
 800fade:	68a3      	ldr	r3, [r4, #8]
 800fae0:	6822      	ldr	r2, [r4, #0]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d03d      	beq.n	800fb62 <_scanf_i+0x15e>
 800fae6:	6831      	ldr	r1, [r6, #0]
 800fae8:	6960      	ldr	r0, [r4, #20]
 800faea:	f891 c000 	ldrb.w	ip, [r1]
 800faee:	f810 000c 	ldrb.w	r0, [r0, ip]
 800faf2:	2800      	cmp	r0, #0
 800faf4:	d035      	beq.n	800fb62 <_scanf_i+0x15e>
 800faf6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fafa:	d124      	bne.n	800fb46 <_scanf_i+0x142>
 800fafc:	0510      	lsls	r0, r2, #20
 800fafe:	d522      	bpl.n	800fb46 <_scanf_i+0x142>
 800fb00:	f10b 0b01 	add.w	fp, fp, #1
 800fb04:	f1b9 0f00 	cmp.w	r9, #0
 800fb08:	d003      	beq.n	800fb12 <_scanf_i+0x10e>
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	f109 39ff 	add.w	r9, r9, #4294967295
 800fb10:	60a3      	str	r3, [r4, #8]
 800fb12:	6873      	ldr	r3, [r6, #4]
 800fb14:	3b01      	subs	r3, #1
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	6073      	str	r3, [r6, #4]
 800fb1a:	dd1b      	ble.n	800fb54 <_scanf_i+0x150>
 800fb1c:	6833      	ldr	r3, [r6, #0]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	6033      	str	r3, [r6, #0]
 800fb22:	68a3      	ldr	r3, [r4, #8]
 800fb24:	3b01      	subs	r3, #1
 800fb26:	60a3      	str	r3, [r4, #8]
 800fb28:	e7d9      	b.n	800fade <_scanf_i+0xda>
 800fb2a:	f1bb 0f02 	cmp.w	fp, #2
 800fb2e:	d1ae      	bne.n	800fa8e <_scanf_i+0x8a>
 800fb30:	6822      	ldr	r2, [r4, #0]
 800fb32:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fb36:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fb3a:	d1bf      	bne.n	800fabc <_scanf_i+0xb8>
 800fb3c:	2310      	movs	r3, #16
 800fb3e:	6063      	str	r3, [r4, #4]
 800fb40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fb44:	e7a2      	b.n	800fa8c <_scanf_i+0x88>
 800fb46:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fb4a:	6022      	str	r2, [r4, #0]
 800fb4c:	780b      	ldrb	r3, [r1, #0]
 800fb4e:	f805 3b01 	strb.w	r3, [r5], #1
 800fb52:	e7de      	b.n	800fb12 <_scanf_i+0x10e>
 800fb54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fb58:	4631      	mov	r1, r6
 800fb5a:	4650      	mov	r0, sl
 800fb5c:	4798      	blx	r3
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	d0df      	beq.n	800fb22 <_scanf_i+0x11e>
 800fb62:	6823      	ldr	r3, [r4, #0]
 800fb64:	05db      	lsls	r3, r3, #23
 800fb66:	d50d      	bpl.n	800fb84 <_scanf_i+0x180>
 800fb68:	42bd      	cmp	r5, r7
 800fb6a:	d909      	bls.n	800fb80 <_scanf_i+0x17c>
 800fb6c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fb70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fb74:	4632      	mov	r2, r6
 800fb76:	4650      	mov	r0, sl
 800fb78:	4798      	blx	r3
 800fb7a:	f105 39ff 	add.w	r9, r5, #4294967295
 800fb7e:	464d      	mov	r5, r9
 800fb80:	42bd      	cmp	r5, r7
 800fb82:	d02d      	beq.n	800fbe0 <_scanf_i+0x1dc>
 800fb84:	6822      	ldr	r2, [r4, #0]
 800fb86:	f012 0210 	ands.w	r2, r2, #16
 800fb8a:	d113      	bne.n	800fbb4 <_scanf_i+0x1b0>
 800fb8c:	702a      	strb	r2, [r5, #0]
 800fb8e:	6863      	ldr	r3, [r4, #4]
 800fb90:	9e01      	ldr	r6, [sp, #4]
 800fb92:	4639      	mov	r1, r7
 800fb94:	4650      	mov	r0, sl
 800fb96:	47b0      	blx	r6
 800fb98:	6821      	ldr	r1, [r4, #0]
 800fb9a:	f8d8 3000 	ldr.w	r3, [r8]
 800fb9e:	f011 0f20 	tst.w	r1, #32
 800fba2:	d013      	beq.n	800fbcc <_scanf_i+0x1c8>
 800fba4:	1d1a      	adds	r2, r3, #4
 800fba6:	f8c8 2000 	str.w	r2, [r8]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	6018      	str	r0, [r3, #0]
 800fbae:	68e3      	ldr	r3, [r4, #12]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	60e3      	str	r3, [r4, #12]
 800fbb4:	1bed      	subs	r5, r5, r7
 800fbb6:	44ab      	add	fp, r5
 800fbb8:	6925      	ldr	r5, [r4, #16]
 800fbba:	445d      	add	r5, fp
 800fbbc:	6125      	str	r5, [r4, #16]
 800fbbe:	2000      	movs	r0, #0
 800fbc0:	b007      	add	sp, #28
 800fbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc6:	f04f 0b00 	mov.w	fp, #0
 800fbca:	e7ca      	b.n	800fb62 <_scanf_i+0x15e>
 800fbcc:	1d1a      	adds	r2, r3, #4
 800fbce:	f8c8 2000 	str.w	r2, [r8]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	f011 0f01 	tst.w	r1, #1
 800fbd8:	bf14      	ite	ne
 800fbda:	8018      	strhne	r0, [r3, #0]
 800fbdc:	6018      	streq	r0, [r3, #0]
 800fbde:	e7e6      	b.n	800fbae <_scanf_i+0x1aa>
 800fbe0:	2001      	movs	r0, #1
 800fbe2:	e7ed      	b.n	800fbc0 <_scanf_i+0x1bc>
 800fbe4:	08013110 	.word	0x08013110
 800fbe8:	0800d281 	.word	0x0800d281
 800fbec:	0800feb5 	.word	0x0800feb5
 800fbf0:	0803cf4d 	.word	0x0803cf4d

0800fbf4 <_read_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4d07      	ldr	r5, [pc, #28]	; (800fc14 <_read_r+0x20>)
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	4608      	mov	r0, r1
 800fbfc:	4611      	mov	r1, r2
 800fbfe:	2200      	movs	r2, #0
 800fc00:	602a      	str	r2, [r5, #0]
 800fc02:	461a      	mov	r2, r3
 800fc04:	f002 fe56 	bl	80128b4 <_read>
 800fc08:	1c43      	adds	r3, r0, #1
 800fc0a:	d102      	bne.n	800fc12 <_read_r+0x1e>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	b103      	cbz	r3, 800fc12 <_read_r+0x1e>
 800fc10:	6023      	str	r3, [r4, #0]
 800fc12:	bd38      	pop	{r3, r4, r5, pc}
 800fc14:	200037e0 	.word	0x200037e0

0800fc18 <__sccl>:
 800fc18:	b570      	push	{r4, r5, r6, lr}
 800fc1a:	780b      	ldrb	r3, [r1, #0]
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	2b5e      	cmp	r3, #94	; 0x5e
 800fc20:	bf0b      	itete	eq
 800fc22:	784b      	ldrbeq	r3, [r1, #1]
 800fc24:	1c48      	addne	r0, r1, #1
 800fc26:	1c88      	addeq	r0, r1, #2
 800fc28:	2200      	movne	r2, #0
 800fc2a:	bf08      	it	eq
 800fc2c:	2201      	moveq	r2, #1
 800fc2e:	1e61      	subs	r1, r4, #1
 800fc30:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fc34:	f801 2f01 	strb.w	r2, [r1, #1]!
 800fc38:	42a9      	cmp	r1, r5
 800fc3a:	d1fb      	bne.n	800fc34 <__sccl+0x1c>
 800fc3c:	b90b      	cbnz	r3, 800fc42 <__sccl+0x2a>
 800fc3e:	3801      	subs	r0, #1
 800fc40:	bd70      	pop	{r4, r5, r6, pc}
 800fc42:	f082 0201 	eor.w	r2, r2, #1
 800fc46:	54e2      	strb	r2, [r4, r3]
 800fc48:	4605      	mov	r5, r0
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fc50:	292d      	cmp	r1, #45	; 0x2d
 800fc52:	d006      	beq.n	800fc62 <__sccl+0x4a>
 800fc54:	295d      	cmp	r1, #93	; 0x5d
 800fc56:	d0f3      	beq.n	800fc40 <__sccl+0x28>
 800fc58:	b909      	cbnz	r1, 800fc5e <__sccl+0x46>
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	e7f0      	b.n	800fc40 <__sccl+0x28>
 800fc5e:	460b      	mov	r3, r1
 800fc60:	e7f1      	b.n	800fc46 <__sccl+0x2e>
 800fc62:	786e      	ldrb	r6, [r5, #1]
 800fc64:	2e5d      	cmp	r6, #93	; 0x5d
 800fc66:	d0fa      	beq.n	800fc5e <__sccl+0x46>
 800fc68:	42b3      	cmp	r3, r6
 800fc6a:	dcf8      	bgt.n	800fc5e <__sccl+0x46>
 800fc6c:	3502      	adds	r5, #2
 800fc6e:	4619      	mov	r1, r3
 800fc70:	3101      	adds	r1, #1
 800fc72:	428e      	cmp	r6, r1
 800fc74:	5462      	strb	r2, [r4, r1]
 800fc76:	dcfb      	bgt.n	800fc70 <__sccl+0x58>
 800fc78:	1af1      	subs	r1, r6, r3
 800fc7a:	3901      	subs	r1, #1
 800fc7c:	1c58      	adds	r0, r3, #1
 800fc7e:	42b3      	cmp	r3, r6
 800fc80:	bfa8      	it	ge
 800fc82:	2100      	movge	r1, #0
 800fc84:	1843      	adds	r3, r0, r1
 800fc86:	e7e0      	b.n	800fc4a <__sccl+0x32>

0800fc88 <_raise_r>:
 800fc88:	291f      	cmp	r1, #31
 800fc8a:	b538      	push	{r3, r4, r5, lr}
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	460d      	mov	r5, r1
 800fc90:	d904      	bls.n	800fc9c <_raise_r+0x14>
 800fc92:	2316      	movs	r3, #22
 800fc94:	6003      	str	r3, [r0, #0]
 800fc96:	f04f 30ff 	mov.w	r0, #4294967295
 800fc9a:	bd38      	pop	{r3, r4, r5, pc}
 800fc9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fc9e:	b112      	cbz	r2, 800fca6 <_raise_r+0x1e>
 800fca0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fca4:	b94b      	cbnz	r3, 800fcba <_raise_r+0x32>
 800fca6:	4620      	mov	r0, r4
 800fca8:	f000 f830 	bl	800fd0c <_getpid_r>
 800fcac:	462a      	mov	r2, r5
 800fcae:	4601      	mov	r1, r0
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcb6:	f000 b817 	b.w	800fce8 <_kill_r>
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d00a      	beq.n	800fcd4 <_raise_r+0x4c>
 800fcbe:	1c59      	adds	r1, r3, #1
 800fcc0:	d103      	bne.n	800fcca <_raise_r+0x42>
 800fcc2:	2316      	movs	r3, #22
 800fcc4:	6003      	str	r3, [r0, #0]
 800fcc6:	2001      	movs	r0, #1
 800fcc8:	e7e7      	b.n	800fc9a <_raise_r+0x12>
 800fcca:	2400      	movs	r4, #0
 800fccc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fcd0:	4628      	mov	r0, r5
 800fcd2:	4798      	blx	r3
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	e7e0      	b.n	800fc9a <_raise_r+0x12>

0800fcd8 <raise>:
 800fcd8:	4b02      	ldr	r3, [pc, #8]	; (800fce4 <raise+0xc>)
 800fcda:	4601      	mov	r1, r0
 800fcdc:	6818      	ldr	r0, [r3, #0]
 800fcde:	f7ff bfd3 	b.w	800fc88 <_raise_r>
 800fce2:	bf00      	nop
 800fce4:	200002bc 	.word	0x200002bc

0800fce8 <_kill_r>:
 800fce8:	b538      	push	{r3, r4, r5, lr}
 800fcea:	4d07      	ldr	r5, [pc, #28]	; (800fd08 <_kill_r+0x20>)
 800fcec:	2300      	movs	r3, #0
 800fcee:	4604      	mov	r4, r0
 800fcf0:	4608      	mov	r0, r1
 800fcf2:	4611      	mov	r1, r2
 800fcf4:	602b      	str	r3, [r5, #0]
 800fcf6:	f002 fdcd 	bl	8012894 <_kill>
 800fcfa:	1c43      	adds	r3, r0, #1
 800fcfc:	d102      	bne.n	800fd04 <_kill_r+0x1c>
 800fcfe:	682b      	ldr	r3, [r5, #0]
 800fd00:	b103      	cbz	r3, 800fd04 <_kill_r+0x1c>
 800fd02:	6023      	str	r3, [r4, #0]
 800fd04:	bd38      	pop	{r3, r4, r5, pc}
 800fd06:	bf00      	nop
 800fd08:	200037e0 	.word	0x200037e0

0800fd0c <_getpid_r>:
 800fd0c:	f002 bdb2 	b.w	8012874 <_getpid>

0800fd10 <sniprintf>:
 800fd10:	b40c      	push	{r2, r3}
 800fd12:	b530      	push	{r4, r5, lr}
 800fd14:	4b17      	ldr	r3, [pc, #92]	; (800fd74 <sniprintf+0x64>)
 800fd16:	1e0c      	subs	r4, r1, #0
 800fd18:	681d      	ldr	r5, [r3, #0]
 800fd1a:	b09d      	sub	sp, #116	; 0x74
 800fd1c:	da08      	bge.n	800fd30 <sniprintf+0x20>
 800fd1e:	238b      	movs	r3, #139	; 0x8b
 800fd20:	602b      	str	r3, [r5, #0]
 800fd22:	f04f 30ff 	mov.w	r0, #4294967295
 800fd26:	b01d      	add	sp, #116	; 0x74
 800fd28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd2c:	b002      	add	sp, #8
 800fd2e:	4770      	bx	lr
 800fd30:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fd34:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fd38:	bf14      	ite	ne
 800fd3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fd3e:	4623      	moveq	r3, r4
 800fd40:	9304      	str	r3, [sp, #16]
 800fd42:	9307      	str	r3, [sp, #28]
 800fd44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd48:	9002      	str	r0, [sp, #8]
 800fd4a:	9006      	str	r0, [sp, #24]
 800fd4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fd52:	ab21      	add	r3, sp, #132	; 0x84
 800fd54:	a902      	add	r1, sp, #8
 800fd56:	4628      	mov	r0, r5
 800fd58:	9301      	str	r3, [sp, #4]
 800fd5a:	f7ff fb27 	bl	800f3ac <_svfiprintf_r>
 800fd5e:	1c43      	adds	r3, r0, #1
 800fd60:	bfbc      	itt	lt
 800fd62:	238b      	movlt	r3, #139	; 0x8b
 800fd64:	602b      	strlt	r3, [r5, #0]
 800fd66:	2c00      	cmp	r4, #0
 800fd68:	d0dd      	beq.n	800fd26 <sniprintf+0x16>
 800fd6a:	9b02      	ldr	r3, [sp, #8]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	701a      	strb	r2, [r3, #0]
 800fd70:	e7d9      	b.n	800fd26 <sniprintf+0x16>
 800fd72:	bf00      	nop
 800fd74:	200002bc 	.word	0x200002bc

0800fd78 <strcpy>:
 800fd78:	4603      	mov	r3, r0
 800fd7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd7e:	f803 2b01 	strb.w	r2, [r3], #1
 800fd82:	2a00      	cmp	r2, #0
 800fd84:	d1f9      	bne.n	800fd7a <strcpy+0x2>
 800fd86:	4770      	bx	lr

0800fd88 <strncmp>:
 800fd88:	b510      	push	{r4, lr}
 800fd8a:	b17a      	cbz	r2, 800fdac <strncmp+0x24>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	3901      	subs	r1, #1
 800fd90:	1884      	adds	r4, r0, r2
 800fd92:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fd96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fd9a:	4290      	cmp	r0, r2
 800fd9c:	d101      	bne.n	800fda2 <strncmp+0x1a>
 800fd9e:	42a3      	cmp	r3, r4
 800fda0:	d101      	bne.n	800fda6 <strncmp+0x1e>
 800fda2:	1a80      	subs	r0, r0, r2
 800fda4:	bd10      	pop	{r4, pc}
 800fda6:	2800      	cmp	r0, #0
 800fda8:	d1f3      	bne.n	800fd92 <strncmp+0xa>
 800fdaa:	e7fa      	b.n	800fda2 <strncmp+0x1a>
 800fdac:	4610      	mov	r0, r2
 800fdae:	e7f9      	b.n	800fda4 <strncmp+0x1c>

0800fdb0 <_strtol_l.constprop.0>:
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb6:	d001      	beq.n	800fdbc <_strtol_l.constprop.0+0xc>
 800fdb8:	2b24      	cmp	r3, #36	; 0x24
 800fdba:	d906      	bls.n	800fdca <_strtol_l.constprop.0+0x1a>
 800fdbc:	f000 f8c2 	bl	800ff44 <__errno>
 800fdc0:	2316      	movs	r3, #22
 800fdc2:	6003      	str	r3, [r0, #0]
 800fdc4:	2000      	movs	r0, #0
 800fdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800feb0 <_strtol_l.constprop.0+0x100>
 800fdce:	460d      	mov	r5, r1
 800fdd0:	462e      	mov	r6, r5
 800fdd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fdda:	f017 0708 	ands.w	r7, r7, #8
 800fdde:	d1f7      	bne.n	800fdd0 <_strtol_l.constprop.0+0x20>
 800fde0:	2c2d      	cmp	r4, #45	; 0x2d
 800fde2:	d132      	bne.n	800fe4a <_strtol_l.constprop.0+0x9a>
 800fde4:	782c      	ldrb	r4, [r5, #0]
 800fde6:	2701      	movs	r7, #1
 800fde8:	1cb5      	adds	r5, r6, #2
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d05b      	beq.n	800fea6 <_strtol_l.constprop.0+0xf6>
 800fdee:	2b10      	cmp	r3, #16
 800fdf0:	d109      	bne.n	800fe06 <_strtol_l.constprop.0+0x56>
 800fdf2:	2c30      	cmp	r4, #48	; 0x30
 800fdf4:	d107      	bne.n	800fe06 <_strtol_l.constprop.0+0x56>
 800fdf6:	782c      	ldrb	r4, [r5, #0]
 800fdf8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fdfc:	2c58      	cmp	r4, #88	; 0x58
 800fdfe:	d14d      	bne.n	800fe9c <_strtol_l.constprop.0+0xec>
 800fe00:	786c      	ldrb	r4, [r5, #1]
 800fe02:	2310      	movs	r3, #16
 800fe04:	3502      	adds	r5, #2
 800fe06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fe0a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe0e:	f04f 0c00 	mov.w	ip, #0
 800fe12:	fbb8 f9f3 	udiv	r9, r8, r3
 800fe16:	4666      	mov	r6, ip
 800fe18:	fb03 8a19 	mls	sl, r3, r9, r8
 800fe1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fe20:	f1be 0f09 	cmp.w	lr, #9
 800fe24:	d816      	bhi.n	800fe54 <_strtol_l.constprop.0+0xa4>
 800fe26:	4674      	mov	r4, lr
 800fe28:	42a3      	cmp	r3, r4
 800fe2a:	dd24      	ble.n	800fe76 <_strtol_l.constprop.0+0xc6>
 800fe2c:	f1bc 0f00 	cmp.w	ip, #0
 800fe30:	db1e      	blt.n	800fe70 <_strtol_l.constprop.0+0xc0>
 800fe32:	45b1      	cmp	r9, r6
 800fe34:	d31c      	bcc.n	800fe70 <_strtol_l.constprop.0+0xc0>
 800fe36:	d101      	bne.n	800fe3c <_strtol_l.constprop.0+0x8c>
 800fe38:	45a2      	cmp	sl, r4
 800fe3a:	db19      	blt.n	800fe70 <_strtol_l.constprop.0+0xc0>
 800fe3c:	fb06 4603 	mla	r6, r6, r3, r4
 800fe40:	f04f 0c01 	mov.w	ip, #1
 800fe44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe48:	e7e8      	b.n	800fe1c <_strtol_l.constprop.0+0x6c>
 800fe4a:	2c2b      	cmp	r4, #43	; 0x2b
 800fe4c:	bf04      	itt	eq
 800fe4e:	782c      	ldrbeq	r4, [r5, #0]
 800fe50:	1cb5      	addeq	r5, r6, #2
 800fe52:	e7ca      	b.n	800fdea <_strtol_l.constprop.0+0x3a>
 800fe54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fe58:	f1be 0f19 	cmp.w	lr, #25
 800fe5c:	d801      	bhi.n	800fe62 <_strtol_l.constprop.0+0xb2>
 800fe5e:	3c37      	subs	r4, #55	; 0x37
 800fe60:	e7e2      	b.n	800fe28 <_strtol_l.constprop.0+0x78>
 800fe62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fe66:	f1be 0f19 	cmp.w	lr, #25
 800fe6a:	d804      	bhi.n	800fe76 <_strtol_l.constprop.0+0xc6>
 800fe6c:	3c57      	subs	r4, #87	; 0x57
 800fe6e:	e7db      	b.n	800fe28 <_strtol_l.constprop.0+0x78>
 800fe70:	f04f 3cff 	mov.w	ip, #4294967295
 800fe74:	e7e6      	b.n	800fe44 <_strtol_l.constprop.0+0x94>
 800fe76:	f1bc 0f00 	cmp.w	ip, #0
 800fe7a:	da05      	bge.n	800fe88 <_strtol_l.constprop.0+0xd8>
 800fe7c:	2322      	movs	r3, #34	; 0x22
 800fe7e:	6003      	str	r3, [r0, #0]
 800fe80:	4646      	mov	r6, r8
 800fe82:	b942      	cbnz	r2, 800fe96 <_strtol_l.constprop.0+0xe6>
 800fe84:	4630      	mov	r0, r6
 800fe86:	e79e      	b.n	800fdc6 <_strtol_l.constprop.0+0x16>
 800fe88:	b107      	cbz	r7, 800fe8c <_strtol_l.constprop.0+0xdc>
 800fe8a:	4276      	negs	r6, r6
 800fe8c:	2a00      	cmp	r2, #0
 800fe8e:	d0f9      	beq.n	800fe84 <_strtol_l.constprop.0+0xd4>
 800fe90:	f1bc 0f00 	cmp.w	ip, #0
 800fe94:	d000      	beq.n	800fe98 <_strtol_l.constprop.0+0xe8>
 800fe96:	1e69      	subs	r1, r5, #1
 800fe98:	6011      	str	r1, [r2, #0]
 800fe9a:	e7f3      	b.n	800fe84 <_strtol_l.constprop.0+0xd4>
 800fe9c:	2430      	movs	r4, #48	; 0x30
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d1b1      	bne.n	800fe06 <_strtol_l.constprop.0+0x56>
 800fea2:	2308      	movs	r3, #8
 800fea4:	e7af      	b.n	800fe06 <_strtol_l.constprop.0+0x56>
 800fea6:	2c30      	cmp	r4, #48	; 0x30
 800fea8:	d0a5      	beq.n	800fdf6 <_strtol_l.constprop.0+0x46>
 800feaa:	230a      	movs	r3, #10
 800feac:	e7ab      	b.n	800fe06 <_strtol_l.constprop.0+0x56>
 800feae:	bf00      	nop
 800feb0:	0803cba1 	.word	0x0803cba1

0800feb4 <_strtol_r>:
 800feb4:	f7ff bf7c 	b.w	800fdb0 <_strtol_l.constprop.0>

0800feb8 <__submore>:
 800feb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800febc:	460c      	mov	r4, r1
 800febe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fec4:	4299      	cmp	r1, r3
 800fec6:	d11d      	bne.n	800ff04 <__submore+0x4c>
 800fec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fecc:	f7fb fd3e 	bl	800b94c <_malloc_r>
 800fed0:	b918      	cbnz	r0, 800feda <__submore+0x22>
 800fed2:	f04f 30ff 	mov.w	r0, #4294967295
 800fed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fede:	63a3      	str	r3, [r4, #56]	; 0x38
 800fee0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fee4:	6360      	str	r0, [r4, #52]	; 0x34
 800fee6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800feea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800feee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fef2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fef6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fefa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fefe:	6020      	str	r0, [r4, #0]
 800ff00:	2000      	movs	r0, #0
 800ff02:	e7e8      	b.n	800fed6 <__submore+0x1e>
 800ff04:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ff06:	0077      	lsls	r7, r6, #1
 800ff08:	463a      	mov	r2, r7
 800ff0a:	f7ff f9c5 	bl	800f298 <_realloc_r>
 800ff0e:	4605      	mov	r5, r0
 800ff10:	2800      	cmp	r0, #0
 800ff12:	d0de      	beq.n	800fed2 <__submore+0x1a>
 800ff14:	eb00 0806 	add.w	r8, r0, r6
 800ff18:	4601      	mov	r1, r0
 800ff1a:	4632      	mov	r2, r6
 800ff1c:	4640      	mov	r0, r8
 800ff1e:	f7fb fa21 	bl	800b364 <memcpy>
 800ff22:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ff26:	f8c4 8000 	str.w	r8, [r4]
 800ff2a:	e7e9      	b.n	800ff00 <__submore+0x48>

0800ff2c <__env_lock>:
 800ff2c:	4801      	ldr	r0, [pc, #4]	; (800ff34 <__env_lock+0x8>)
 800ff2e:	f7fe bd77 	b.w	800ea20 <__retarget_lock_acquire_recursive>
 800ff32:	bf00      	nop
 800ff34:	200037d8 	.word	0x200037d8

0800ff38 <__env_unlock>:
 800ff38:	4801      	ldr	r0, [pc, #4]	; (800ff40 <__env_unlock+0x8>)
 800ff3a:	f7fe bd73 	b.w	800ea24 <__retarget_lock_release_recursive>
 800ff3e:	bf00      	nop
 800ff40:	200037d8 	.word	0x200037d8

0800ff44 <__errno>:
 800ff44:	4b01      	ldr	r3, [pc, #4]	; (800ff4c <__errno+0x8>)
 800ff46:	6818      	ldr	r0, [r3, #0]
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	200002bc 	.word	0x200002bc

0800ff50 <_fstat_r>:
 800ff50:	b538      	push	{r3, r4, r5, lr}
 800ff52:	4d07      	ldr	r5, [pc, #28]	; (800ff70 <_fstat_r+0x20>)
 800ff54:	2300      	movs	r3, #0
 800ff56:	4604      	mov	r4, r0
 800ff58:	4608      	mov	r0, r1
 800ff5a:	4611      	mov	r1, r2
 800ff5c:	602b      	str	r3, [r5, #0]
 800ff5e:	f002 fc81 	bl	8012864 <_fstat>
 800ff62:	1c43      	adds	r3, r0, #1
 800ff64:	d102      	bne.n	800ff6c <_fstat_r+0x1c>
 800ff66:	682b      	ldr	r3, [r5, #0]
 800ff68:	b103      	cbz	r3, 800ff6c <_fstat_r+0x1c>
 800ff6a:	6023      	str	r3, [r4, #0]
 800ff6c:	bd38      	pop	{r3, r4, r5, pc}
 800ff6e:	bf00      	nop
 800ff70:	200037e0 	.word	0x200037e0

0800ff74 <_isatty_r>:
 800ff74:	b538      	push	{r3, r4, r5, lr}
 800ff76:	4d06      	ldr	r5, [pc, #24]	; (800ff90 <_isatty_r+0x1c>)
 800ff78:	2300      	movs	r3, #0
 800ff7a:	4604      	mov	r4, r0
 800ff7c:	4608      	mov	r0, r1
 800ff7e:	602b      	str	r3, [r5, #0]
 800ff80:	f002 fc80 	bl	8012884 <_isatty>
 800ff84:	1c43      	adds	r3, r0, #1
 800ff86:	d102      	bne.n	800ff8e <_isatty_r+0x1a>
 800ff88:	682b      	ldr	r3, [r5, #0]
 800ff8a:	b103      	cbz	r3, 800ff8e <_isatty_r+0x1a>
 800ff8c:	6023      	str	r3, [r4, #0]
 800ff8e:	bd38      	pop	{r3, r4, r5, pc}
 800ff90:	200037e0 	.word	0x200037e0

0800ff94 <__ascii_mbtowc>:
 800ff94:	b082      	sub	sp, #8
 800ff96:	b901      	cbnz	r1, 800ff9a <__ascii_mbtowc+0x6>
 800ff98:	a901      	add	r1, sp, #4
 800ff9a:	b142      	cbz	r2, 800ffae <__ascii_mbtowc+0x1a>
 800ff9c:	b14b      	cbz	r3, 800ffb2 <__ascii_mbtowc+0x1e>
 800ff9e:	7813      	ldrb	r3, [r2, #0]
 800ffa0:	600b      	str	r3, [r1, #0]
 800ffa2:	7812      	ldrb	r2, [r2, #0]
 800ffa4:	1e10      	subs	r0, r2, #0
 800ffa6:	bf18      	it	ne
 800ffa8:	2001      	movne	r0, #1
 800ffaa:	b002      	add	sp, #8
 800ffac:	4770      	bx	lr
 800ffae:	4610      	mov	r0, r2
 800ffb0:	e7fb      	b.n	800ffaa <__ascii_mbtowc+0x16>
 800ffb2:	f06f 0001 	mvn.w	r0, #1
 800ffb6:	e7f8      	b.n	800ffaa <__ascii_mbtowc+0x16>

0800ffb8 <_malloc_usable_size_r>:
 800ffb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffbc:	1f18      	subs	r0, r3, #4
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	bfbc      	itt	lt
 800ffc2:	580b      	ldrlt	r3, [r1, r0]
 800ffc4:	18c0      	addlt	r0, r0, r3
 800ffc6:	4770      	bx	lr

0800ffc8 <__ascii_wctomb>:
 800ffc8:	b149      	cbz	r1, 800ffde <__ascii_wctomb+0x16>
 800ffca:	2aff      	cmp	r2, #255	; 0xff
 800ffcc:	bf85      	ittet	hi
 800ffce:	238a      	movhi	r3, #138	; 0x8a
 800ffd0:	6003      	strhi	r3, [r0, #0]
 800ffd2:	700a      	strbls	r2, [r1, #0]
 800ffd4:	f04f 30ff 	movhi.w	r0, #4294967295
 800ffd8:	bf98      	it	ls
 800ffda:	2001      	movls	r0, #1
 800ffdc:	4770      	bx	lr
 800ffde:	4608      	mov	r0, r1
 800ffe0:	4770      	bx	lr
 800ffe2:	0000      	movs	r0, r0
 800ffe4:	0000      	movs	r0, r0
	...

0800ffe8 <cos>:
 800ffe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ffea:	ec53 2b10 	vmov	r2, r3, d0
 800ffee:	4826      	ldr	r0, [pc, #152]	; (8010088 <cos+0xa0>)
 800fff0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fff4:	4281      	cmp	r1, r0
 800fff6:	dc06      	bgt.n	8010006 <cos+0x1e>
 800fff8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010080 <cos+0x98>
 800fffc:	b005      	add	sp, #20
 800fffe:	f85d eb04 	ldr.w	lr, [sp], #4
 8010002:	f001 bbf1 	b.w	80117e8 <__kernel_cos>
 8010006:	4821      	ldr	r0, [pc, #132]	; (801008c <cos+0xa4>)
 8010008:	4281      	cmp	r1, r0
 801000a:	dd09      	ble.n	8010020 <cos+0x38>
 801000c:	ee10 0a10 	vmov	r0, s0
 8010010:	4619      	mov	r1, r3
 8010012:	f7f0 f953 	bl	80002bc <__aeabi_dsub>
 8010016:	ec41 0b10 	vmov	d0, r0, r1
 801001a:	b005      	add	sp, #20
 801001c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010020:	4668      	mov	r0, sp
 8010022:	f001 f921 	bl	8011268 <__ieee754_rem_pio2>
 8010026:	f000 0003 	and.w	r0, r0, #3
 801002a:	2801      	cmp	r0, #1
 801002c:	d00b      	beq.n	8010046 <cos+0x5e>
 801002e:	2802      	cmp	r0, #2
 8010030:	d016      	beq.n	8010060 <cos+0x78>
 8010032:	b9e0      	cbnz	r0, 801006e <cos+0x86>
 8010034:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010038:	ed9d 0b00 	vldr	d0, [sp]
 801003c:	f001 fbd4 	bl	80117e8 <__kernel_cos>
 8010040:	ec51 0b10 	vmov	r0, r1, d0
 8010044:	e7e7      	b.n	8010016 <cos+0x2e>
 8010046:	ed9d 1b02 	vldr	d1, [sp, #8]
 801004a:	ed9d 0b00 	vldr	d0, [sp]
 801004e:	f001 ffe3 	bl	8012018 <__kernel_sin>
 8010052:	ec53 2b10 	vmov	r2, r3, d0
 8010056:	ee10 0a10 	vmov	r0, s0
 801005a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801005e:	e7da      	b.n	8010016 <cos+0x2e>
 8010060:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010064:	ed9d 0b00 	vldr	d0, [sp]
 8010068:	f001 fbbe 	bl	80117e8 <__kernel_cos>
 801006c:	e7f1      	b.n	8010052 <cos+0x6a>
 801006e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010072:	ed9d 0b00 	vldr	d0, [sp]
 8010076:	2001      	movs	r0, #1
 8010078:	f001 ffce 	bl	8012018 <__kernel_sin>
 801007c:	e7e0      	b.n	8010040 <cos+0x58>
 801007e:	bf00      	nop
	...
 8010088:	3fe921fb 	.word	0x3fe921fb
 801008c:	7fefffff 	.word	0x7fefffff

08010090 <sin>:
 8010090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010092:	ec53 2b10 	vmov	r2, r3, d0
 8010096:	4828      	ldr	r0, [pc, #160]	; (8010138 <sin+0xa8>)
 8010098:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801009c:	4281      	cmp	r1, r0
 801009e:	dc07      	bgt.n	80100b0 <sin+0x20>
 80100a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010130 <sin+0xa0>
 80100a4:	2000      	movs	r0, #0
 80100a6:	b005      	add	sp, #20
 80100a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80100ac:	f001 bfb4 	b.w	8012018 <__kernel_sin>
 80100b0:	4822      	ldr	r0, [pc, #136]	; (801013c <sin+0xac>)
 80100b2:	4281      	cmp	r1, r0
 80100b4:	dd09      	ble.n	80100ca <sin+0x3a>
 80100b6:	ee10 0a10 	vmov	r0, s0
 80100ba:	4619      	mov	r1, r3
 80100bc:	f7f0 f8fe 	bl	80002bc <__aeabi_dsub>
 80100c0:	ec41 0b10 	vmov	d0, r0, r1
 80100c4:	b005      	add	sp, #20
 80100c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80100ca:	4668      	mov	r0, sp
 80100cc:	f001 f8cc 	bl	8011268 <__ieee754_rem_pio2>
 80100d0:	f000 0003 	and.w	r0, r0, #3
 80100d4:	2801      	cmp	r0, #1
 80100d6:	d00c      	beq.n	80100f2 <sin+0x62>
 80100d8:	2802      	cmp	r0, #2
 80100da:	d011      	beq.n	8010100 <sin+0x70>
 80100dc:	b9f0      	cbnz	r0, 801011c <sin+0x8c>
 80100de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80100e2:	ed9d 0b00 	vldr	d0, [sp]
 80100e6:	2001      	movs	r0, #1
 80100e8:	f001 ff96 	bl	8012018 <__kernel_sin>
 80100ec:	ec51 0b10 	vmov	r0, r1, d0
 80100f0:	e7e6      	b.n	80100c0 <sin+0x30>
 80100f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80100f6:	ed9d 0b00 	vldr	d0, [sp]
 80100fa:	f001 fb75 	bl	80117e8 <__kernel_cos>
 80100fe:	e7f5      	b.n	80100ec <sin+0x5c>
 8010100:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010104:	ed9d 0b00 	vldr	d0, [sp]
 8010108:	2001      	movs	r0, #1
 801010a:	f001 ff85 	bl	8012018 <__kernel_sin>
 801010e:	ec53 2b10 	vmov	r2, r3, d0
 8010112:	ee10 0a10 	vmov	r0, s0
 8010116:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801011a:	e7d1      	b.n	80100c0 <sin+0x30>
 801011c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010120:	ed9d 0b00 	vldr	d0, [sp]
 8010124:	f001 fb60 	bl	80117e8 <__kernel_cos>
 8010128:	e7f1      	b.n	801010e <sin+0x7e>
 801012a:	bf00      	nop
 801012c:	f3af 8000 	nop.w
	...
 8010138:	3fe921fb 	.word	0x3fe921fb
 801013c:	7fefffff 	.word	0x7fefffff

08010140 <tan>:
 8010140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010142:	ec53 2b10 	vmov	r2, r3, d0
 8010146:	4816      	ldr	r0, [pc, #88]	; (80101a0 <tan+0x60>)
 8010148:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801014c:	4281      	cmp	r1, r0
 801014e:	dc07      	bgt.n	8010160 <tan+0x20>
 8010150:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8010198 <tan+0x58>
 8010154:	2001      	movs	r0, #1
 8010156:	b005      	add	sp, #20
 8010158:	f85d eb04 	ldr.w	lr, [sp], #4
 801015c:	f002 b81c 	b.w	8012198 <__kernel_tan>
 8010160:	4810      	ldr	r0, [pc, #64]	; (80101a4 <tan+0x64>)
 8010162:	4281      	cmp	r1, r0
 8010164:	dd09      	ble.n	801017a <tan+0x3a>
 8010166:	ee10 0a10 	vmov	r0, s0
 801016a:	4619      	mov	r1, r3
 801016c:	f7f0 f8a6 	bl	80002bc <__aeabi_dsub>
 8010170:	ec41 0b10 	vmov	d0, r0, r1
 8010174:	b005      	add	sp, #20
 8010176:	f85d fb04 	ldr.w	pc, [sp], #4
 801017a:	4668      	mov	r0, sp
 801017c:	f001 f874 	bl	8011268 <__ieee754_rem_pio2>
 8010180:	0040      	lsls	r0, r0, #1
 8010182:	f000 0002 	and.w	r0, r0, #2
 8010186:	ed9d 1b02 	vldr	d1, [sp, #8]
 801018a:	ed9d 0b00 	vldr	d0, [sp]
 801018e:	f1c0 0001 	rsb	r0, r0, #1
 8010192:	f002 f801 	bl	8012198 <__kernel_tan>
 8010196:	e7ed      	b.n	8010174 <tan+0x34>
	...
 80101a0:	3fe921fb 	.word	0x3fe921fb
 80101a4:	7fefffff 	.word	0x7fefffff

080101a8 <acos>:
 80101a8:	b538      	push	{r3, r4, r5, lr}
 80101aa:	ed2d 8b02 	vpush	{d8}
 80101ae:	ec55 4b10 	vmov	r4, r5, d0
 80101b2:	f000 f8c9 	bl	8010348 <__ieee754_acos>
 80101b6:	4622      	mov	r2, r4
 80101b8:	462b      	mov	r3, r5
 80101ba:	4620      	mov	r0, r4
 80101bc:	4629      	mov	r1, r5
 80101be:	eeb0 8a40 	vmov.f32	s16, s0
 80101c2:	eef0 8a60 	vmov.f32	s17, s1
 80101c6:	f7f0 fccb 	bl	8000b60 <__aeabi_dcmpun>
 80101ca:	b9a8      	cbnz	r0, 80101f8 <acos+0x50>
 80101cc:	ec45 4b10 	vmov	d0, r4, r5
 80101d0:	f002 fa1c 	bl	801260c <fabs>
 80101d4:	4b0c      	ldr	r3, [pc, #48]	; (8010208 <acos+0x60>)
 80101d6:	ec51 0b10 	vmov	r0, r1, d0
 80101da:	2200      	movs	r2, #0
 80101dc:	f7f0 fcb6 	bl	8000b4c <__aeabi_dcmpgt>
 80101e0:	b150      	cbz	r0, 80101f8 <acos+0x50>
 80101e2:	f7ff feaf 	bl	800ff44 <__errno>
 80101e6:	ecbd 8b02 	vpop	{d8}
 80101ea:	2321      	movs	r3, #33	; 0x21
 80101ec:	6003      	str	r3, [r0, #0]
 80101ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101f2:	4806      	ldr	r0, [pc, #24]	; (801020c <acos+0x64>)
 80101f4:	f002 baa0 	b.w	8012738 <nan>
 80101f8:	eeb0 0a48 	vmov.f32	s0, s16
 80101fc:	eef0 0a68 	vmov.f32	s1, s17
 8010200:	ecbd 8b02 	vpop	{d8}
 8010204:	bd38      	pop	{r3, r4, r5, pc}
 8010206:	bf00      	nop
 8010208:	3ff00000 	.word	0x3ff00000
 801020c:	0803c7c6 	.word	0x0803c7c6

08010210 <pow>:
 8010210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010212:	ed2d 8b02 	vpush	{d8}
 8010216:	eeb0 8a40 	vmov.f32	s16, s0
 801021a:	eef0 8a60 	vmov.f32	s17, s1
 801021e:	ec55 4b11 	vmov	r4, r5, d1
 8010222:	f000 faf1 	bl	8010808 <__ieee754_pow>
 8010226:	4622      	mov	r2, r4
 8010228:	462b      	mov	r3, r5
 801022a:	4620      	mov	r0, r4
 801022c:	4629      	mov	r1, r5
 801022e:	ec57 6b10 	vmov	r6, r7, d0
 8010232:	f7f0 fc95 	bl	8000b60 <__aeabi_dcmpun>
 8010236:	2800      	cmp	r0, #0
 8010238:	d13b      	bne.n	80102b2 <pow+0xa2>
 801023a:	ec51 0b18 	vmov	r0, r1, d8
 801023e:	2200      	movs	r2, #0
 8010240:	2300      	movs	r3, #0
 8010242:	f7f0 fc5b 	bl	8000afc <__aeabi_dcmpeq>
 8010246:	b1b8      	cbz	r0, 8010278 <pow+0x68>
 8010248:	2200      	movs	r2, #0
 801024a:	2300      	movs	r3, #0
 801024c:	4620      	mov	r0, r4
 801024e:	4629      	mov	r1, r5
 8010250:	f7f0 fc54 	bl	8000afc <__aeabi_dcmpeq>
 8010254:	2800      	cmp	r0, #0
 8010256:	d146      	bne.n	80102e6 <pow+0xd6>
 8010258:	ec45 4b10 	vmov	d0, r4, r5
 801025c:	f002 f9df 	bl	801261e <finite>
 8010260:	b338      	cbz	r0, 80102b2 <pow+0xa2>
 8010262:	2200      	movs	r2, #0
 8010264:	2300      	movs	r3, #0
 8010266:	4620      	mov	r0, r4
 8010268:	4629      	mov	r1, r5
 801026a:	f7f0 fc51 	bl	8000b10 <__aeabi_dcmplt>
 801026e:	b300      	cbz	r0, 80102b2 <pow+0xa2>
 8010270:	f7ff fe68 	bl	800ff44 <__errno>
 8010274:	2322      	movs	r3, #34	; 0x22
 8010276:	e01b      	b.n	80102b0 <pow+0xa0>
 8010278:	ec47 6b10 	vmov	d0, r6, r7
 801027c:	f002 f9cf 	bl	801261e <finite>
 8010280:	b9e0      	cbnz	r0, 80102bc <pow+0xac>
 8010282:	eeb0 0a48 	vmov.f32	s0, s16
 8010286:	eef0 0a68 	vmov.f32	s1, s17
 801028a:	f002 f9c8 	bl	801261e <finite>
 801028e:	b1a8      	cbz	r0, 80102bc <pow+0xac>
 8010290:	ec45 4b10 	vmov	d0, r4, r5
 8010294:	f002 f9c3 	bl	801261e <finite>
 8010298:	b180      	cbz	r0, 80102bc <pow+0xac>
 801029a:	4632      	mov	r2, r6
 801029c:	463b      	mov	r3, r7
 801029e:	4630      	mov	r0, r6
 80102a0:	4639      	mov	r1, r7
 80102a2:	f7f0 fc5d 	bl	8000b60 <__aeabi_dcmpun>
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d0e2      	beq.n	8010270 <pow+0x60>
 80102aa:	f7ff fe4b 	bl	800ff44 <__errno>
 80102ae:	2321      	movs	r3, #33	; 0x21
 80102b0:	6003      	str	r3, [r0, #0]
 80102b2:	ecbd 8b02 	vpop	{d8}
 80102b6:	ec47 6b10 	vmov	d0, r6, r7
 80102ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102bc:	2200      	movs	r2, #0
 80102be:	2300      	movs	r3, #0
 80102c0:	4630      	mov	r0, r6
 80102c2:	4639      	mov	r1, r7
 80102c4:	f7f0 fc1a 	bl	8000afc <__aeabi_dcmpeq>
 80102c8:	2800      	cmp	r0, #0
 80102ca:	d0f2      	beq.n	80102b2 <pow+0xa2>
 80102cc:	eeb0 0a48 	vmov.f32	s0, s16
 80102d0:	eef0 0a68 	vmov.f32	s1, s17
 80102d4:	f002 f9a3 	bl	801261e <finite>
 80102d8:	2800      	cmp	r0, #0
 80102da:	d0ea      	beq.n	80102b2 <pow+0xa2>
 80102dc:	ec45 4b10 	vmov	d0, r4, r5
 80102e0:	f002 f99d 	bl	801261e <finite>
 80102e4:	e7c3      	b.n	801026e <pow+0x5e>
 80102e6:	4f01      	ldr	r7, [pc, #4]	; (80102ec <pow+0xdc>)
 80102e8:	2600      	movs	r6, #0
 80102ea:	e7e2      	b.n	80102b2 <pow+0xa2>
 80102ec:	3ff00000 	.word	0x3ff00000

080102f0 <sqrt>:
 80102f0:	b538      	push	{r3, r4, r5, lr}
 80102f2:	ed2d 8b02 	vpush	{d8}
 80102f6:	ec55 4b10 	vmov	r4, r5, d0
 80102fa:	f001 f9c1 	bl	8011680 <__ieee754_sqrt>
 80102fe:	4622      	mov	r2, r4
 8010300:	462b      	mov	r3, r5
 8010302:	4620      	mov	r0, r4
 8010304:	4629      	mov	r1, r5
 8010306:	eeb0 8a40 	vmov.f32	s16, s0
 801030a:	eef0 8a60 	vmov.f32	s17, s1
 801030e:	f7f0 fc27 	bl	8000b60 <__aeabi_dcmpun>
 8010312:	b990      	cbnz	r0, 801033a <sqrt+0x4a>
 8010314:	2200      	movs	r2, #0
 8010316:	2300      	movs	r3, #0
 8010318:	4620      	mov	r0, r4
 801031a:	4629      	mov	r1, r5
 801031c:	f7f0 fbf8 	bl	8000b10 <__aeabi_dcmplt>
 8010320:	b158      	cbz	r0, 801033a <sqrt+0x4a>
 8010322:	f7ff fe0f 	bl	800ff44 <__errno>
 8010326:	2321      	movs	r3, #33	; 0x21
 8010328:	6003      	str	r3, [r0, #0]
 801032a:	2200      	movs	r2, #0
 801032c:	2300      	movs	r3, #0
 801032e:	4610      	mov	r0, r2
 8010330:	4619      	mov	r1, r3
 8010332:	f7f0 faa5 	bl	8000880 <__aeabi_ddiv>
 8010336:	ec41 0b18 	vmov	d8, r0, r1
 801033a:	eeb0 0a48 	vmov.f32	s0, s16
 801033e:	eef0 0a68 	vmov.f32	s1, s17
 8010342:	ecbd 8b02 	vpop	{d8}
 8010346:	bd38      	pop	{r3, r4, r5, pc}

08010348 <__ieee754_acos>:
 8010348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034c:	ec55 4b10 	vmov	r4, r5, d0
 8010350:	49b7      	ldr	r1, [pc, #732]	; (8010630 <__ieee754_acos+0x2e8>)
 8010352:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010356:	428b      	cmp	r3, r1
 8010358:	dd1b      	ble.n	8010392 <__ieee754_acos+0x4a>
 801035a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801035e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010362:	4323      	orrs	r3, r4
 8010364:	d106      	bne.n	8010374 <__ieee754_acos+0x2c>
 8010366:	2d00      	cmp	r5, #0
 8010368:	f300 8211 	bgt.w	801078e <__ieee754_acos+0x446>
 801036c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80105c8 <__ieee754_acos+0x280>
 8010370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010374:	ee10 2a10 	vmov	r2, s0
 8010378:	462b      	mov	r3, r5
 801037a:	ee10 0a10 	vmov	r0, s0
 801037e:	4629      	mov	r1, r5
 8010380:	f7ef ff9c 	bl	80002bc <__aeabi_dsub>
 8010384:	4602      	mov	r2, r0
 8010386:	460b      	mov	r3, r1
 8010388:	f7f0 fa7a 	bl	8000880 <__aeabi_ddiv>
 801038c:	ec41 0b10 	vmov	d0, r0, r1
 8010390:	e7ee      	b.n	8010370 <__ieee754_acos+0x28>
 8010392:	49a8      	ldr	r1, [pc, #672]	; (8010634 <__ieee754_acos+0x2ec>)
 8010394:	428b      	cmp	r3, r1
 8010396:	f300 8087 	bgt.w	80104a8 <__ieee754_acos+0x160>
 801039a:	4aa7      	ldr	r2, [pc, #668]	; (8010638 <__ieee754_acos+0x2f0>)
 801039c:	4293      	cmp	r3, r2
 801039e:	f340 81f9 	ble.w	8010794 <__ieee754_acos+0x44c>
 80103a2:	ee10 2a10 	vmov	r2, s0
 80103a6:	ee10 0a10 	vmov	r0, s0
 80103aa:	462b      	mov	r3, r5
 80103ac:	4629      	mov	r1, r5
 80103ae:	f7f0 f93d 	bl	800062c <__aeabi_dmul>
 80103b2:	a387      	add	r3, pc, #540	; (adr r3, 80105d0 <__ieee754_acos+0x288>)
 80103b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b8:	4606      	mov	r6, r0
 80103ba:	460f      	mov	r7, r1
 80103bc:	f7f0 f936 	bl	800062c <__aeabi_dmul>
 80103c0:	a385      	add	r3, pc, #532	; (adr r3, 80105d8 <__ieee754_acos+0x290>)
 80103c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c6:	f7ef ff7b 	bl	80002c0 <__adddf3>
 80103ca:	4632      	mov	r2, r6
 80103cc:	463b      	mov	r3, r7
 80103ce:	f7f0 f92d 	bl	800062c <__aeabi_dmul>
 80103d2:	a383      	add	r3, pc, #524	; (adr r3, 80105e0 <__ieee754_acos+0x298>)
 80103d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d8:	f7ef ff70 	bl	80002bc <__aeabi_dsub>
 80103dc:	4632      	mov	r2, r6
 80103de:	463b      	mov	r3, r7
 80103e0:	f7f0 f924 	bl	800062c <__aeabi_dmul>
 80103e4:	a380      	add	r3, pc, #512	; (adr r3, 80105e8 <__ieee754_acos+0x2a0>)
 80103e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ea:	f7ef ff69 	bl	80002c0 <__adddf3>
 80103ee:	4632      	mov	r2, r6
 80103f0:	463b      	mov	r3, r7
 80103f2:	f7f0 f91b 	bl	800062c <__aeabi_dmul>
 80103f6:	a37e      	add	r3, pc, #504	; (adr r3, 80105f0 <__ieee754_acos+0x2a8>)
 80103f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fc:	f7ef ff5e 	bl	80002bc <__aeabi_dsub>
 8010400:	4632      	mov	r2, r6
 8010402:	463b      	mov	r3, r7
 8010404:	f7f0 f912 	bl	800062c <__aeabi_dmul>
 8010408:	a37b      	add	r3, pc, #492	; (adr r3, 80105f8 <__ieee754_acos+0x2b0>)
 801040a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040e:	f7ef ff57 	bl	80002c0 <__adddf3>
 8010412:	4632      	mov	r2, r6
 8010414:	463b      	mov	r3, r7
 8010416:	f7f0 f909 	bl	800062c <__aeabi_dmul>
 801041a:	a379      	add	r3, pc, #484	; (adr r3, 8010600 <__ieee754_acos+0x2b8>)
 801041c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010420:	4680      	mov	r8, r0
 8010422:	4689      	mov	r9, r1
 8010424:	4630      	mov	r0, r6
 8010426:	4639      	mov	r1, r7
 8010428:	f7f0 f900 	bl	800062c <__aeabi_dmul>
 801042c:	a376      	add	r3, pc, #472	; (adr r3, 8010608 <__ieee754_acos+0x2c0>)
 801042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010432:	f7ef ff43 	bl	80002bc <__aeabi_dsub>
 8010436:	4632      	mov	r2, r6
 8010438:	463b      	mov	r3, r7
 801043a:	f7f0 f8f7 	bl	800062c <__aeabi_dmul>
 801043e:	a374      	add	r3, pc, #464	; (adr r3, 8010610 <__ieee754_acos+0x2c8>)
 8010440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010444:	f7ef ff3c 	bl	80002c0 <__adddf3>
 8010448:	4632      	mov	r2, r6
 801044a:	463b      	mov	r3, r7
 801044c:	f7f0 f8ee 	bl	800062c <__aeabi_dmul>
 8010450:	a371      	add	r3, pc, #452	; (adr r3, 8010618 <__ieee754_acos+0x2d0>)
 8010452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010456:	f7ef ff31 	bl	80002bc <__aeabi_dsub>
 801045a:	4632      	mov	r2, r6
 801045c:	463b      	mov	r3, r7
 801045e:	f7f0 f8e5 	bl	800062c <__aeabi_dmul>
 8010462:	4b76      	ldr	r3, [pc, #472]	; (801063c <__ieee754_acos+0x2f4>)
 8010464:	2200      	movs	r2, #0
 8010466:	f7ef ff2b 	bl	80002c0 <__adddf3>
 801046a:	4602      	mov	r2, r0
 801046c:	460b      	mov	r3, r1
 801046e:	4640      	mov	r0, r8
 8010470:	4649      	mov	r1, r9
 8010472:	f7f0 fa05 	bl	8000880 <__aeabi_ddiv>
 8010476:	4622      	mov	r2, r4
 8010478:	462b      	mov	r3, r5
 801047a:	f7f0 f8d7 	bl	800062c <__aeabi_dmul>
 801047e:	4602      	mov	r2, r0
 8010480:	460b      	mov	r3, r1
 8010482:	a167      	add	r1, pc, #412	; (adr r1, 8010620 <__ieee754_acos+0x2d8>)
 8010484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010488:	f7ef ff18 	bl	80002bc <__aeabi_dsub>
 801048c:	4602      	mov	r2, r0
 801048e:	460b      	mov	r3, r1
 8010490:	4620      	mov	r0, r4
 8010492:	4629      	mov	r1, r5
 8010494:	f7ef ff12 	bl	80002bc <__aeabi_dsub>
 8010498:	4602      	mov	r2, r0
 801049a:	460b      	mov	r3, r1
 801049c:	a162      	add	r1, pc, #392	; (adr r1, 8010628 <__ieee754_acos+0x2e0>)
 801049e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104a2:	f7ef ff0b 	bl	80002bc <__aeabi_dsub>
 80104a6:	e771      	b.n	801038c <__ieee754_acos+0x44>
 80104a8:	2d00      	cmp	r5, #0
 80104aa:	f280 80cb 	bge.w	8010644 <__ieee754_acos+0x2fc>
 80104ae:	ee10 0a10 	vmov	r0, s0
 80104b2:	4b62      	ldr	r3, [pc, #392]	; (801063c <__ieee754_acos+0x2f4>)
 80104b4:	2200      	movs	r2, #0
 80104b6:	4629      	mov	r1, r5
 80104b8:	f7ef ff02 	bl	80002c0 <__adddf3>
 80104bc:	4b60      	ldr	r3, [pc, #384]	; (8010640 <__ieee754_acos+0x2f8>)
 80104be:	2200      	movs	r2, #0
 80104c0:	f7f0 f8b4 	bl	800062c <__aeabi_dmul>
 80104c4:	a342      	add	r3, pc, #264	; (adr r3, 80105d0 <__ieee754_acos+0x288>)
 80104c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ca:	4604      	mov	r4, r0
 80104cc:	460d      	mov	r5, r1
 80104ce:	f7f0 f8ad 	bl	800062c <__aeabi_dmul>
 80104d2:	a341      	add	r3, pc, #260	; (adr r3, 80105d8 <__ieee754_acos+0x290>)
 80104d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d8:	f7ef fef2 	bl	80002c0 <__adddf3>
 80104dc:	4622      	mov	r2, r4
 80104de:	462b      	mov	r3, r5
 80104e0:	f7f0 f8a4 	bl	800062c <__aeabi_dmul>
 80104e4:	a33e      	add	r3, pc, #248	; (adr r3, 80105e0 <__ieee754_acos+0x298>)
 80104e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ea:	f7ef fee7 	bl	80002bc <__aeabi_dsub>
 80104ee:	4622      	mov	r2, r4
 80104f0:	462b      	mov	r3, r5
 80104f2:	f7f0 f89b 	bl	800062c <__aeabi_dmul>
 80104f6:	a33c      	add	r3, pc, #240	; (adr r3, 80105e8 <__ieee754_acos+0x2a0>)
 80104f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fc:	f7ef fee0 	bl	80002c0 <__adddf3>
 8010500:	4622      	mov	r2, r4
 8010502:	462b      	mov	r3, r5
 8010504:	f7f0 f892 	bl	800062c <__aeabi_dmul>
 8010508:	a339      	add	r3, pc, #228	; (adr r3, 80105f0 <__ieee754_acos+0x2a8>)
 801050a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050e:	f7ef fed5 	bl	80002bc <__aeabi_dsub>
 8010512:	4622      	mov	r2, r4
 8010514:	462b      	mov	r3, r5
 8010516:	f7f0 f889 	bl	800062c <__aeabi_dmul>
 801051a:	a337      	add	r3, pc, #220	; (adr r3, 80105f8 <__ieee754_acos+0x2b0>)
 801051c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010520:	f7ef fece 	bl	80002c0 <__adddf3>
 8010524:	4622      	mov	r2, r4
 8010526:	462b      	mov	r3, r5
 8010528:	f7f0 f880 	bl	800062c <__aeabi_dmul>
 801052c:	ec45 4b10 	vmov	d0, r4, r5
 8010530:	4680      	mov	r8, r0
 8010532:	4689      	mov	r9, r1
 8010534:	f001 f8a4 	bl	8011680 <__ieee754_sqrt>
 8010538:	a331      	add	r3, pc, #196	; (adr r3, 8010600 <__ieee754_acos+0x2b8>)
 801053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053e:	4620      	mov	r0, r4
 8010540:	4629      	mov	r1, r5
 8010542:	ec57 6b10 	vmov	r6, r7, d0
 8010546:	f7f0 f871 	bl	800062c <__aeabi_dmul>
 801054a:	a32f      	add	r3, pc, #188	; (adr r3, 8010608 <__ieee754_acos+0x2c0>)
 801054c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010550:	f7ef feb4 	bl	80002bc <__aeabi_dsub>
 8010554:	4622      	mov	r2, r4
 8010556:	462b      	mov	r3, r5
 8010558:	f7f0 f868 	bl	800062c <__aeabi_dmul>
 801055c:	a32c      	add	r3, pc, #176	; (adr r3, 8010610 <__ieee754_acos+0x2c8>)
 801055e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010562:	f7ef fead 	bl	80002c0 <__adddf3>
 8010566:	4622      	mov	r2, r4
 8010568:	462b      	mov	r3, r5
 801056a:	f7f0 f85f 	bl	800062c <__aeabi_dmul>
 801056e:	a32a      	add	r3, pc, #168	; (adr r3, 8010618 <__ieee754_acos+0x2d0>)
 8010570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010574:	f7ef fea2 	bl	80002bc <__aeabi_dsub>
 8010578:	4622      	mov	r2, r4
 801057a:	462b      	mov	r3, r5
 801057c:	f7f0 f856 	bl	800062c <__aeabi_dmul>
 8010580:	4b2e      	ldr	r3, [pc, #184]	; (801063c <__ieee754_acos+0x2f4>)
 8010582:	2200      	movs	r2, #0
 8010584:	f7ef fe9c 	bl	80002c0 <__adddf3>
 8010588:	4602      	mov	r2, r0
 801058a:	460b      	mov	r3, r1
 801058c:	4640      	mov	r0, r8
 801058e:	4649      	mov	r1, r9
 8010590:	f7f0 f976 	bl	8000880 <__aeabi_ddiv>
 8010594:	4632      	mov	r2, r6
 8010596:	463b      	mov	r3, r7
 8010598:	f7f0 f848 	bl	800062c <__aeabi_dmul>
 801059c:	a320      	add	r3, pc, #128	; (adr r3, 8010620 <__ieee754_acos+0x2d8>)
 801059e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a2:	f7ef fe8b 	bl	80002bc <__aeabi_dsub>
 80105a6:	4632      	mov	r2, r6
 80105a8:	463b      	mov	r3, r7
 80105aa:	f7ef fe89 	bl	80002c0 <__adddf3>
 80105ae:	4602      	mov	r2, r0
 80105b0:	460b      	mov	r3, r1
 80105b2:	f7ef fe85 	bl	80002c0 <__adddf3>
 80105b6:	4602      	mov	r2, r0
 80105b8:	460b      	mov	r3, r1
 80105ba:	a103      	add	r1, pc, #12	; (adr r1, 80105c8 <__ieee754_acos+0x280>)
 80105bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105c0:	e76f      	b.n	80104a2 <__ieee754_acos+0x15a>
 80105c2:	bf00      	nop
 80105c4:	f3af 8000 	nop.w
 80105c8:	54442d18 	.word	0x54442d18
 80105cc:	400921fb 	.word	0x400921fb
 80105d0:	0dfdf709 	.word	0x0dfdf709
 80105d4:	3f023de1 	.word	0x3f023de1
 80105d8:	7501b288 	.word	0x7501b288
 80105dc:	3f49efe0 	.word	0x3f49efe0
 80105e0:	b5688f3b 	.word	0xb5688f3b
 80105e4:	3fa48228 	.word	0x3fa48228
 80105e8:	0e884455 	.word	0x0e884455
 80105ec:	3fc9c155 	.word	0x3fc9c155
 80105f0:	03eb6f7d 	.word	0x03eb6f7d
 80105f4:	3fd4d612 	.word	0x3fd4d612
 80105f8:	55555555 	.word	0x55555555
 80105fc:	3fc55555 	.word	0x3fc55555
 8010600:	b12e9282 	.word	0xb12e9282
 8010604:	3fb3b8c5 	.word	0x3fb3b8c5
 8010608:	1b8d0159 	.word	0x1b8d0159
 801060c:	3fe6066c 	.word	0x3fe6066c
 8010610:	9c598ac8 	.word	0x9c598ac8
 8010614:	40002ae5 	.word	0x40002ae5
 8010618:	1c8a2d4b 	.word	0x1c8a2d4b
 801061c:	40033a27 	.word	0x40033a27
 8010620:	33145c07 	.word	0x33145c07
 8010624:	3c91a626 	.word	0x3c91a626
 8010628:	54442d18 	.word	0x54442d18
 801062c:	3ff921fb 	.word	0x3ff921fb
 8010630:	3fefffff 	.word	0x3fefffff
 8010634:	3fdfffff 	.word	0x3fdfffff
 8010638:	3c600000 	.word	0x3c600000
 801063c:	3ff00000 	.word	0x3ff00000
 8010640:	3fe00000 	.word	0x3fe00000
 8010644:	ee10 2a10 	vmov	r2, s0
 8010648:	462b      	mov	r3, r5
 801064a:	496d      	ldr	r1, [pc, #436]	; (8010800 <__ieee754_acos+0x4b8>)
 801064c:	2000      	movs	r0, #0
 801064e:	f7ef fe35 	bl	80002bc <__aeabi_dsub>
 8010652:	4b6c      	ldr	r3, [pc, #432]	; (8010804 <__ieee754_acos+0x4bc>)
 8010654:	2200      	movs	r2, #0
 8010656:	f7ef ffe9 	bl	800062c <__aeabi_dmul>
 801065a:	4604      	mov	r4, r0
 801065c:	460d      	mov	r5, r1
 801065e:	ec45 4b10 	vmov	d0, r4, r5
 8010662:	f001 f80d 	bl	8011680 <__ieee754_sqrt>
 8010666:	a34e      	add	r3, pc, #312	; (adr r3, 80107a0 <__ieee754_acos+0x458>)
 8010668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801066c:	4620      	mov	r0, r4
 801066e:	4629      	mov	r1, r5
 8010670:	ec59 8b10 	vmov	r8, r9, d0
 8010674:	f7ef ffda 	bl	800062c <__aeabi_dmul>
 8010678:	a34b      	add	r3, pc, #300	; (adr r3, 80107a8 <__ieee754_acos+0x460>)
 801067a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067e:	f7ef fe1f 	bl	80002c0 <__adddf3>
 8010682:	4622      	mov	r2, r4
 8010684:	462b      	mov	r3, r5
 8010686:	f7ef ffd1 	bl	800062c <__aeabi_dmul>
 801068a:	a349      	add	r3, pc, #292	; (adr r3, 80107b0 <__ieee754_acos+0x468>)
 801068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010690:	f7ef fe14 	bl	80002bc <__aeabi_dsub>
 8010694:	4622      	mov	r2, r4
 8010696:	462b      	mov	r3, r5
 8010698:	f7ef ffc8 	bl	800062c <__aeabi_dmul>
 801069c:	a346      	add	r3, pc, #280	; (adr r3, 80107b8 <__ieee754_acos+0x470>)
 801069e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a2:	f7ef fe0d 	bl	80002c0 <__adddf3>
 80106a6:	4622      	mov	r2, r4
 80106a8:	462b      	mov	r3, r5
 80106aa:	f7ef ffbf 	bl	800062c <__aeabi_dmul>
 80106ae:	a344      	add	r3, pc, #272	; (adr r3, 80107c0 <__ieee754_acos+0x478>)
 80106b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b4:	f7ef fe02 	bl	80002bc <__aeabi_dsub>
 80106b8:	4622      	mov	r2, r4
 80106ba:	462b      	mov	r3, r5
 80106bc:	f7ef ffb6 	bl	800062c <__aeabi_dmul>
 80106c0:	a341      	add	r3, pc, #260	; (adr r3, 80107c8 <__ieee754_acos+0x480>)
 80106c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c6:	f7ef fdfb 	bl	80002c0 <__adddf3>
 80106ca:	4622      	mov	r2, r4
 80106cc:	462b      	mov	r3, r5
 80106ce:	f7ef ffad 	bl	800062c <__aeabi_dmul>
 80106d2:	a33f      	add	r3, pc, #252	; (adr r3, 80107d0 <__ieee754_acos+0x488>)
 80106d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d8:	4682      	mov	sl, r0
 80106da:	468b      	mov	fp, r1
 80106dc:	4620      	mov	r0, r4
 80106de:	4629      	mov	r1, r5
 80106e0:	f7ef ffa4 	bl	800062c <__aeabi_dmul>
 80106e4:	a33c      	add	r3, pc, #240	; (adr r3, 80107d8 <__ieee754_acos+0x490>)
 80106e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ea:	f7ef fde7 	bl	80002bc <__aeabi_dsub>
 80106ee:	4622      	mov	r2, r4
 80106f0:	462b      	mov	r3, r5
 80106f2:	f7ef ff9b 	bl	800062c <__aeabi_dmul>
 80106f6:	a33a      	add	r3, pc, #232	; (adr r3, 80107e0 <__ieee754_acos+0x498>)
 80106f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fc:	f7ef fde0 	bl	80002c0 <__adddf3>
 8010700:	4622      	mov	r2, r4
 8010702:	462b      	mov	r3, r5
 8010704:	f7ef ff92 	bl	800062c <__aeabi_dmul>
 8010708:	a337      	add	r3, pc, #220	; (adr r3, 80107e8 <__ieee754_acos+0x4a0>)
 801070a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070e:	f7ef fdd5 	bl	80002bc <__aeabi_dsub>
 8010712:	4622      	mov	r2, r4
 8010714:	462b      	mov	r3, r5
 8010716:	f7ef ff89 	bl	800062c <__aeabi_dmul>
 801071a:	4b39      	ldr	r3, [pc, #228]	; (8010800 <__ieee754_acos+0x4b8>)
 801071c:	2200      	movs	r2, #0
 801071e:	f7ef fdcf 	bl	80002c0 <__adddf3>
 8010722:	4602      	mov	r2, r0
 8010724:	460b      	mov	r3, r1
 8010726:	4650      	mov	r0, sl
 8010728:	4659      	mov	r1, fp
 801072a:	f7f0 f8a9 	bl	8000880 <__aeabi_ddiv>
 801072e:	4642      	mov	r2, r8
 8010730:	464b      	mov	r3, r9
 8010732:	f7ef ff7b 	bl	800062c <__aeabi_dmul>
 8010736:	2600      	movs	r6, #0
 8010738:	4682      	mov	sl, r0
 801073a:	468b      	mov	fp, r1
 801073c:	4632      	mov	r2, r6
 801073e:	464b      	mov	r3, r9
 8010740:	4630      	mov	r0, r6
 8010742:	4649      	mov	r1, r9
 8010744:	f7ef ff72 	bl	800062c <__aeabi_dmul>
 8010748:	4602      	mov	r2, r0
 801074a:	460b      	mov	r3, r1
 801074c:	4620      	mov	r0, r4
 801074e:	4629      	mov	r1, r5
 8010750:	f7ef fdb4 	bl	80002bc <__aeabi_dsub>
 8010754:	4632      	mov	r2, r6
 8010756:	4604      	mov	r4, r0
 8010758:	460d      	mov	r5, r1
 801075a:	464b      	mov	r3, r9
 801075c:	4640      	mov	r0, r8
 801075e:	4649      	mov	r1, r9
 8010760:	f7ef fdae 	bl	80002c0 <__adddf3>
 8010764:	4602      	mov	r2, r0
 8010766:	460b      	mov	r3, r1
 8010768:	4620      	mov	r0, r4
 801076a:	4629      	mov	r1, r5
 801076c:	f7f0 f888 	bl	8000880 <__aeabi_ddiv>
 8010770:	4602      	mov	r2, r0
 8010772:	460b      	mov	r3, r1
 8010774:	4650      	mov	r0, sl
 8010776:	4659      	mov	r1, fp
 8010778:	f7ef fda2 	bl	80002c0 <__adddf3>
 801077c:	4632      	mov	r2, r6
 801077e:	464b      	mov	r3, r9
 8010780:	f7ef fd9e 	bl	80002c0 <__adddf3>
 8010784:	4602      	mov	r2, r0
 8010786:	460b      	mov	r3, r1
 8010788:	f7ef fd9a 	bl	80002c0 <__adddf3>
 801078c:	e5fe      	b.n	801038c <__ieee754_acos+0x44>
 801078e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80107f0 <__ieee754_acos+0x4a8>
 8010792:	e5ed      	b.n	8010370 <__ieee754_acos+0x28>
 8010794:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80107f8 <__ieee754_acos+0x4b0>
 8010798:	e5ea      	b.n	8010370 <__ieee754_acos+0x28>
 801079a:	bf00      	nop
 801079c:	f3af 8000 	nop.w
 80107a0:	0dfdf709 	.word	0x0dfdf709
 80107a4:	3f023de1 	.word	0x3f023de1
 80107a8:	7501b288 	.word	0x7501b288
 80107ac:	3f49efe0 	.word	0x3f49efe0
 80107b0:	b5688f3b 	.word	0xb5688f3b
 80107b4:	3fa48228 	.word	0x3fa48228
 80107b8:	0e884455 	.word	0x0e884455
 80107bc:	3fc9c155 	.word	0x3fc9c155
 80107c0:	03eb6f7d 	.word	0x03eb6f7d
 80107c4:	3fd4d612 	.word	0x3fd4d612
 80107c8:	55555555 	.word	0x55555555
 80107cc:	3fc55555 	.word	0x3fc55555
 80107d0:	b12e9282 	.word	0xb12e9282
 80107d4:	3fb3b8c5 	.word	0x3fb3b8c5
 80107d8:	1b8d0159 	.word	0x1b8d0159
 80107dc:	3fe6066c 	.word	0x3fe6066c
 80107e0:	9c598ac8 	.word	0x9c598ac8
 80107e4:	40002ae5 	.word	0x40002ae5
 80107e8:	1c8a2d4b 	.word	0x1c8a2d4b
 80107ec:	40033a27 	.word	0x40033a27
	...
 80107f8:	54442d18 	.word	0x54442d18
 80107fc:	3ff921fb 	.word	0x3ff921fb
 8010800:	3ff00000 	.word	0x3ff00000
 8010804:	3fe00000 	.word	0x3fe00000

08010808 <__ieee754_pow>:
 8010808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801080c:	ed2d 8b06 	vpush	{d8-d10}
 8010810:	b089      	sub	sp, #36	; 0x24
 8010812:	ed8d 1b00 	vstr	d1, [sp]
 8010816:	e9dd 2900 	ldrd	r2, r9, [sp]
 801081a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801081e:	ea58 0102 	orrs.w	r1, r8, r2
 8010822:	ec57 6b10 	vmov	r6, r7, d0
 8010826:	d115      	bne.n	8010854 <__ieee754_pow+0x4c>
 8010828:	19b3      	adds	r3, r6, r6
 801082a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801082e:	4152      	adcs	r2, r2
 8010830:	4299      	cmp	r1, r3
 8010832:	4b89      	ldr	r3, [pc, #548]	; (8010a58 <__ieee754_pow+0x250>)
 8010834:	4193      	sbcs	r3, r2
 8010836:	f080 84d2 	bcs.w	80111de <__ieee754_pow+0x9d6>
 801083a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801083e:	4630      	mov	r0, r6
 8010840:	4639      	mov	r1, r7
 8010842:	f7ef fd3d 	bl	80002c0 <__adddf3>
 8010846:	ec41 0b10 	vmov	d0, r0, r1
 801084a:	b009      	add	sp, #36	; 0x24
 801084c:	ecbd 8b06 	vpop	{d8-d10}
 8010850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010854:	4b81      	ldr	r3, [pc, #516]	; (8010a5c <__ieee754_pow+0x254>)
 8010856:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801085a:	429c      	cmp	r4, r3
 801085c:	ee10 aa10 	vmov	sl, s0
 8010860:	463d      	mov	r5, r7
 8010862:	dc06      	bgt.n	8010872 <__ieee754_pow+0x6a>
 8010864:	d101      	bne.n	801086a <__ieee754_pow+0x62>
 8010866:	2e00      	cmp	r6, #0
 8010868:	d1e7      	bne.n	801083a <__ieee754_pow+0x32>
 801086a:	4598      	cmp	r8, r3
 801086c:	dc01      	bgt.n	8010872 <__ieee754_pow+0x6a>
 801086e:	d10f      	bne.n	8010890 <__ieee754_pow+0x88>
 8010870:	b172      	cbz	r2, 8010890 <__ieee754_pow+0x88>
 8010872:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010876:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801087a:	ea55 050a 	orrs.w	r5, r5, sl
 801087e:	d1dc      	bne.n	801083a <__ieee754_pow+0x32>
 8010880:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010884:	18db      	adds	r3, r3, r3
 8010886:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801088a:	4152      	adcs	r2, r2
 801088c:	429d      	cmp	r5, r3
 801088e:	e7d0      	b.n	8010832 <__ieee754_pow+0x2a>
 8010890:	2d00      	cmp	r5, #0
 8010892:	da3b      	bge.n	801090c <__ieee754_pow+0x104>
 8010894:	4b72      	ldr	r3, [pc, #456]	; (8010a60 <__ieee754_pow+0x258>)
 8010896:	4598      	cmp	r8, r3
 8010898:	dc51      	bgt.n	801093e <__ieee754_pow+0x136>
 801089a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801089e:	4598      	cmp	r8, r3
 80108a0:	f340 84ac 	ble.w	80111fc <__ieee754_pow+0x9f4>
 80108a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80108a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80108ac:	2b14      	cmp	r3, #20
 80108ae:	dd0f      	ble.n	80108d0 <__ieee754_pow+0xc8>
 80108b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80108b4:	fa22 f103 	lsr.w	r1, r2, r3
 80108b8:	fa01 f303 	lsl.w	r3, r1, r3
 80108bc:	4293      	cmp	r3, r2
 80108be:	f040 849d 	bne.w	80111fc <__ieee754_pow+0x9f4>
 80108c2:	f001 0101 	and.w	r1, r1, #1
 80108c6:	f1c1 0302 	rsb	r3, r1, #2
 80108ca:	9304      	str	r3, [sp, #16]
 80108cc:	b182      	cbz	r2, 80108f0 <__ieee754_pow+0xe8>
 80108ce:	e05f      	b.n	8010990 <__ieee754_pow+0x188>
 80108d0:	2a00      	cmp	r2, #0
 80108d2:	d15b      	bne.n	801098c <__ieee754_pow+0x184>
 80108d4:	f1c3 0314 	rsb	r3, r3, #20
 80108d8:	fa48 f103 	asr.w	r1, r8, r3
 80108dc:	fa01 f303 	lsl.w	r3, r1, r3
 80108e0:	4543      	cmp	r3, r8
 80108e2:	f040 8488 	bne.w	80111f6 <__ieee754_pow+0x9ee>
 80108e6:	f001 0101 	and.w	r1, r1, #1
 80108ea:	f1c1 0302 	rsb	r3, r1, #2
 80108ee:	9304      	str	r3, [sp, #16]
 80108f0:	4b5c      	ldr	r3, [pc, #368]	; (8010a64 <__ieee754_pow+0x25c>)
 80108f2:	4598      	cmp	r8, r3
 80108f4:	d132      	bne.n	801095c <__ieee754_pow+0x154>
 80108f6:	f1b9 0f00 	cmp.w	r9, #0
 80108fa:	f280 8478 	bge.w	80111ee <__ieee754_pow+0x9e6>
 80108fe:	4959      	ldr	r1, [pc, #356]	; (8010a64 <__ieee754_pow+0x25c>)
 8010900:	4632      	mov	r2, r6
 8010902:	463b      	mov	r3, r7
 8010904:	2000      	movs	r0, #0
 8010906:	f7ef ffbb 	bl	8000880 <__aeabi_ddiv>
 801090a:	e79c      	b.n	8010846 <__ieee754_pow+0x3e>
 801090c:	2300      	movs	r3, #0
 801090e:	9304      	str	r3, [sp, #16]
 8010910:	2a00      	cmp	r2, #0
 8010912:	d13d      	bne.n	8010990 <__ieee754_pow+0x188>
 8010914:	4b51      	ldr	r3, [pc, #324]	; (8010a5c <__ieee754_pow+0x254>)
 8010916:	4598      	cmp	r8, r3
 8010918:	d1ea      	bne.n	80108f0 <__ieee754_pow+0xe8>
 801091a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801091e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010922:	ea53 030a 	orrs.w	r3, r3, sl
 8010926:	f000 845a 	beq.w	80111de <__ieee754_pow+0x9d6>
 801092a:	4b4f      	ldr	r3, [pc, #316]	; (8010a68 <__ieee754_pow+0x260>)
 801092c:	429c      	cmp	r4, r3
 801092e:	dd08      	ble.n	8010942 <__ieee754_pow+0x13a>
 8010930:	f1b9 0f00 	cmp.w	r9, #0
 8010934:	f2c0 8457 	blt.w	80111e6 <__ieee754_pow+0x9de>
 8010938:	e9dd 0100 	ldrd	r0, r1, [sp]
 801093c:	e783      	b.n	8010846 <__ieee754_pow+0x3e>
 801093e:	2302      	movs	r3, #2
 8010940:	e7e5      	b.n	801090e <__ieee754_pow+0x106>
 8010942:	f1b9 0f00 	cmp.w	r9, #0
 8010946:	f04f 0000 	mov.w	r0, #0
 801094a:	f04f 0100 	mov.w	r1, #0
 801094e:	f6bf af7a 	bge.w	8010846 <__ieee754_pow+0x3e>
 8010952:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010956:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801095a:	e774      	b.n	8010846 <__ieee754_pow+0x3e>
 801095c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010960:	d106      	bne.n	8010970 <__ieee754_pow+0x168>
 8010962:	4632      	mov	r2, r6
 8010964:	463b      	mov	r3, r7
 8010966:	4630      	mov	r0, r6
 8010968:	4639      	mov	r1, r7
 801096a:	f7ef fe5f 	bl	800062c <__aeabi_dmul>
 801096e:	e76a      	b.n	8010846 <__ieee754_pow+0x3e>
 8010970:	4b3e      	ldr	r3, [pc, #248]	; (8010a6c <__ieee754_pow+0x264>)
 8010972:	4599      	cmp	r9, r3
 8010974:	d10c      	bne.n	8010990 <__ieee754_pow+0x188>
 8010976:	2d00      	cmp	r5, #0
 8010978:	db0a      	blt.n	8010990 <__ieee754_pow+0x188>
 801097a:	ec47 6b10 	vmov	d0, r6, r7
 801097e:	b009      	add	sp, #36	; 0x24
 8010980:	ecbd 8b06 	vpop	{d8-d10}
 8010984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010988:	f000 be7a 	b.w	8011680 <__ieee754_sqrt>
 801098c:	2300      	movs	r3, #0
 801098e:	9304      	str	r3, [sp, #16]
 8010990:	ec47 6b10 	vmov	d0, r6, r7
 8010994:	f001 fe3a 	bl	801260c <fabs>
 8010998:	ec51 0b10 	vmov	r0, r1, d0
 801099c:	f1ba 0f00 	cmp.w	sl, #0
 80109a0:	d129      	bne.n	80109f6 <__ieee754_pow+0x1ee>
 80109a2:	b124      	cbz	r4, 80109ae <__ieee754_pow+0x1a6>
 80109a4:	4b2f      	ldr	r3, [pc, #188]	; (8010a64 <__ieee754_pow+0x25c>)
 80109a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d123      	bne.n	80109f6 <__ieee754_pow+0x1ee>
 80109ae:	f1b9 0f00 	cmp.w	r9, #0
 80109b2:	da05      	bge.n	80109c0 <__ieee754_pow+0x1b8>
 80109b4:	4602      	mov	r2, r0
 80109b6:	460b      	mov	r3, r1
 80109b8:	2000      	movs	r0, #0
 80109ba:	492a      	ldr	r1, [pc, #168]	; (8010a64 <__ieee754_pow+0x25c>)
 80109bc:	f7ef ff60 	bl	8000880 <__aeabi_ddiv>
 80109c0:	2d00      	cmp	r5, #0
 80109c2:	f6bf af40 	bge.w	8010846 <__ieee754_pow+0x3e>
 80109c6:	9b04      	ldr	r3, [sp, #16]
 80109c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80109cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80109d0:	4323      	orrs	r3, r4
 80109d2:	d108      	bne.n	80109e6 <__ieee754_pow+0x1de>
 80109d4:	4602      	mov	r2, r0
 80109d6:	460b      	mov	r3, r1
 80109d8:	4610      	mov	r0, r2
 80109da:	4619      	mov	r1, r3
 80109dc:	f7ef fc6e 	bl	80002bc <__aeabi_dsub>
 80109e0:	4602      	mov	r2, r0
 80109e2:	460b      	mov	r3, r1
 80109e4:	e78f      	b.n	8010906 <__ieee754_pow+0xfe>
 80109e6:	9b04      	ldr	r3, [sp, #16]
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	f47f af2c 	bne.w	8010846 <__ieee754_pow+0x3e>
 80109ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109f2:	4619      	mov	r1, r3
 80109f4:	e727      	b.n	8010846 <__ieee754_pow+0x3e>
 80109f6:	0feb      	lsrs	r3, r5, #31
 80109f8:	3b01      	subs	r3, #1
 80109fa:	9306      	str	r3, [sp, #24]
 80109fc:	9a06      	ldr	r2, [sp, #24]
 80109fe:	9b04      	ldr	r3, [sp, #16]
 8010a00:	4313      	orrs	r3, r2
 8010a02:	d102      	bne.n	8010a0a <__ieee754_pow+0x202>
 8010a04:	4632      	mov	r2, r6
 8010a06:	463b      	mov	r3, r7
 8010a08:	e7e6      	b.n	80109d8 <__ieee754_pow+0x1d0>
 8010a0a:	4b19      	ldr	r3, [pc, #100]	; (8010a70 <__ieee754_pow+0x268>)
 8010a0c:	4598      	cmp	r8, r3
 8010a0e:	f340 80fb 	ble.w	8010c08 <__ieee754_pow+0x400>
 8010a12:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010a16:	4598      	cmp	r8, r3
 8010a18:	4b13      	ldr	r3, [pc, #76]	; (8010a68 <__ieee754_pow+0x260>)
 8010a1a:	dd0c      	ble.n	8010a36 <__ieee754_pow+0x22e>
 8010a1c:	429c      	cmp	r4, r3
 8010a1e:	dc0f      	bgt.n	8010a40 <__ieee754_pow+0x238>
 8010a20:	f1b9 0f00 	cmp.w	r9, #0
 8010a24:	da0f      	bge.n	8010a46 <__ieee754_pow+0x23e>
 8010a26:	2000      	movs	r0, #0
 8010a28:	b009      	add	sp, #36	; 0x24
 8010a2a:	ecbd 8b06 	vpop	{d8-d10}
 8010a2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a32:	f001 bde2 	b.w	80125fa <__math_oflow>
 8010a36:	429c      	cmp	r4, r3
 8010a38:	dbf2      	blt.n	8010a20 <__ieee754_pow+0x218>
 8010a3a:	4b0a      	ldr	r3, [pc, #40]	; (8010a64 <__ieee754_pow+0x25c>)
 8010a3c:	429c      	cmp	r4, r3
 8010a3e:	dd19      	ble.n	8010a74 <__ieee754_pow+0x26c>
 8010a40:	f1b9 0f00 	cmp.w	r9, #0
 8010a44:	dcef      	bgt.n	8010a26 <__ieee754_pow+0x21e>
 8010a46:	2000      	movs	r0, #0
 8010a48:	b009      	add	sp, #36	; 0x24
 8010a4a:	ecbd 8b06 	vpop	{d8-d10}
 8010a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a52:	f001 bdc9 	b.w	80125e8 <__math_uflow>
 8010a56:	bf00      	nop
 8010a58:	fff00000 	.word	0xfff00000
 8010a5c:	7ff00000 	.word	0x7ff00000
 8010a60:	433fffff 	.word	0x433fffff
 8010a64:	3ff00000 	.word	0x3ff00000
 8010a68:	3fefffff 	.word	0x3fefffff
 8010a6c:	3fe00000 	.word	0x3fe00000
 8010a70:	41e00000 	.word	0x41e00000
 8010a74:	4b60      	ldr	r3, [pc, #384]	; (8010bf8 <__ieee754_pow+0x3f0>)
 8010a76:	2200      	movs	r2, #0
 8010a78:	f7ef fc20 	bl	80002bc <__aeabi_dsub>
 8010a7c:	a354      	add	r3, pc, #336	; (adr r3, 8010bd0 <__ieee754_pow+0x3c8>)
 8010a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a82:	4604      	mov	r4, r0
 8010a84:	460d      	mov	r5, r1
 8010a86:	f7ef fdd1 	bl	800062c <__aeabi_dmul>
 8010a8a:	a353      	add	r3, pc, #332	; (adr r3, 8010bd8 <__ieee754_pow+0x3d0>)
 8010a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a90:	4606      	mov	r6, r0
 8010a92:	460f      	mov	r7, r1
 8010a94:	4620      	mov	r0, r4
 8010a96:	4629      	mov	r1, r5
 8010a98:	f7ef fdc8 	bl	800062c <__aeabi_dmul>
 8010a9c:	4b57      	ldr	r3, [pc, #348]	; (8010bfc <__ieee754_pow+0x3f4>)
 8010a9e:	4682      	mov	sl, r0
 8010aa0:	468b      	mov	fp, r1
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	4629      	mov	r1, r5
 8010aa8:	f7ef fdc0 	bl	800062c <__aeabi_dmul>
 8010aac:	4602      	mov	r2, r0
 8010aae:	460b      	mov	r3, r1
 8010ab0:	a14b      	add	r1, pc, #300	; (adr r1, 8010be0 <__ieee754_pow+0x3d8>)
 8010ab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ab6:	f7ef fc01 	bl	80002bc <__aeabi_dsub>
 8010aba:	4622      	mov	r2, r4
 8010abc:	462b      	mov	r3, r5
 8010abe:	f7ef fdb5 	bl	800062c <__aeabi_dmul>
 8010ac2:	4602      	mov	r2, r0
 8010ac4:	460b      	mov	r3, r1
 8010ac6:	2000      	movs	r0, #0
 8010ac8:	494d      	ldr	r1, [pc, #308]	; (8010c00 <__ieee754_pow+0x3f8>)
 8010aca:	f7ef fbf7 	bl	80002bc <__aeabi_dsub>
 8010ace:	4622      	mov	r2, r4
 8010ad0:	4680      	mov	r8, r0
 8010ad2:	4689      	mov	r9, r1
 8010ad4:	462b      	mov	r3, r5
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	4629      	mov	r1, r5
 8010ada:	f7ef fda7 	bl	800062c <__aeabi_dmul>
 8010ade:	4602      	mov	r2, r0
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	4640      	mov	r0, r8
 8010ae4:	4649      	mov	r1, r9
 8010ae6:	f7ef fda1 	bl	800062c <__aeabi_dmul>
 8010aea:	a33f      	add	r3, pc, #252	; (adr r3, 8010be8 <__ieee754_pow+0x3e0>)
 8010aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af0:	f7ef fd9c 	bl	800062c <__aeabi_dmul>
 8010af4:	4602      	mov	r2, r0
 8010af6:	460b      	mov	r3, r1
 8010af8:	4650      	mov	r0, sl
 8010afa:	4659      	mov	r1, fp
 8010afc:	f7ef fbde 	bl	80002bc <__aeabi_dsub>
 8010b00:	4602      	mov	r2, r0
 8010b02:	460b      	mov	r3, r1
 8010b04:	4680      	mov	r8, r0
 8010b06:	4689      	mov	r9, r1
 8010b08:	4630      	mov	r0, r6
 8010b0a:	4639      	mov	r1, r7
 8010b0c:	f7ef fbd8 	bl	80002c0 <__adddf3>
 8010b10:	2000      	movs	r0, #0
 8010b12:	4632      	mov	r2, r6
 8010b14:	463b      	mov	r3, r7
 8010b16:	4604      	mov	r4, r0
 8010b18:	460d      	mov	r5, r1
 8010b1a:	f7ef fbcf 	bl	80002bc <__aeabi_dsub>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	460b      	mov	r3, r1
 8010b22:	4640      	mov	r0, r8
 8010b24:	4649      	mov	r1, r9
 8010b26:	f7ef fbc9 	bl	80002bc <__aeabi_dsub>
 8010b2a:	9b04      	ldr	r3, [sp, #16]
 8010b2c:	9a06      	ldr	r2, [sp, #24]
 8010b2e:	3b01      	subs	r3, #1
 8010b30:	4313      	orrs	r3, r2
 8010b32:	4682      	mov	sl, r0
 8010b34:	468b      	mov	fp, r1
 8010b36:	f040 81e7 	bne.w	8010f08 <__ieee754_pow+0x700>
 8010b3a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010bf0 <__ieee754_pow+0x3e8>
 8010b3e:	eeb0 8a47 	vmov.f32	s16, s14
 8010b42:	eef0 8a67 	vmov.f32	s17, s15
 8010b46:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010b4a:	2600      	movs	r6, #0
 8010b4c:	4632      	mov	r2, r6
 8010b4e:	463b      	mov	r3, r7
 8010b50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b54:	f7ef fbb2 	bl	80002bc <__aeabi_dsub>
 8010b58:	4622      	mov	r2, r4
 8010b5a:	462b      	mov	r3, r5
 8010b5c:	f7ef fd66 	bl	800062c <__aeabi_dmul>
 8010b60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b64:	4680      	mov	r8, r0
 8010b66:	4689      	mov	r9, r1
 8010b68:	4650      	mov	r0, sl
 8010b6a:	4659      	mov	r1, fp
 8010b6c:	f7ef fd5e 	bl	800062c <__aeabi_dmul>
 8010b70:	4602      	mov	r2, r0
 8010b72:	460b      	mov	r3, r1
 8010b74:	4640      	mov	r0, r8
 8010b76:	4649      	mov	r1, r9
 8010b78:	f7ef fba2 	bl	80002c0 <__adddf3>
 8010b7c:	4632      	mov	r2, r6
 8010b7e:	463b      	mov	r3, r7
 8010b80:	4680      	mov	r8, r0
 8010b82:	4689      	mov	r9, r1
 8010b84:	4620      	mov	r0, r4
 8010b86:	4629      	mov	r1, r5
 8010b88:	f7ef fd50 	bl	800062c <__aeabi_dmul>
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	4604      	mov	r4, r0
 8010b90:	460d      	mov	r5, r1
 8010b92:	4602      	mov	r2, r0
 8010b94:	4649      	mov	r1, r9
 8010b96:	4640      	mov	r0, r8
 8010b98:	f7ef fb92 	bl	80002c0 <__adddf3>
 8010b9c:	4b19      	ldr	r3, [pc, #100]	; (8010c04 <__ieee754_pow+0x3fc>)
 8010b9e:	4299      	cmp	r1, r3
 8010ba0:	ec45 4b19 	vmov	d9, r4, r5
 8010ba4:	4606      	mov	r6, r0
 8010ba6:	460f      	mov	r7, r1
 8010ba8:	468b      	mov	fp, r1
 8010baa:	f340 82f1 	ble.w	8011190 <__ieee754_pow+0x988>
 8010bae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010bb2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010bb6:	4303      	orrs	r3, r0
 8010bb8:	f000 81e4 	beq.w	8010f84 <__ieee754_pow+0x77c>
 8010bbc:	ec51 0b18 	vmov	r0, r1, d8
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	f7ef ffa4 	bl	8000b10 <__aeabi_dcmplt>
 8010bc8:	3800      	subs	r0, #0
 8010bca:	bf18      	it	ne
 8010bcc:	2001      	movne	r0, #1
 8010bce:	e72b      	b.n	8010a28 <__ieee754_pow+0x220>
 8010bd0:	60000000 	.word	0x60000000
 8010bd4:	3ff71547 	.word	0x3ff71547
 8010bd8:	f85ddf44 	.word	0xf85ddf44
 8010bdc:	3e54ae0b 	.word	0x3e54ae0b
 8010be0:	55555555 	.word	0x55555555
 8010be4:	3fd55555 	.word	0x3fd55555
 8010be8:	652b82fe 	.word	0x652b82fe
 8010bec:	3ff71547 	.word	0x3ff71547
 8010bf0:	00000000 	.word	0x00000000
 8010bf4:	bff00000 	.word	0xbff00000
 8010bf8:	3ff00000 	.word	0x3ff00000
 8010bfc:	3fd00000 	.word	0x3fd00000
 8010c00:	3fe00000 	.word	0x3fe00000
 8010c04:	408fffff 	.word	0x408fffff
 8010c08:	4bd5      	ldr	r3, [pc, #852]	; (8010f60 <__ieee754_pow+0x758>)
 8010c0a:	402b      	ands	r3, r5
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	b92b      	cbnz	r3, 8010c1c <__ieee754_pow+0x414>
 8010c10:	4bd4      	ldr	r3, [pc, #848]	; (8010f64 <__ieee754_pow+0x75c>)
 8010c12:	f7ef fd0b 	bl	800062c <__aeabi_dmul>
 8010c16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010c1a:	460c      	mov	r4, r1
 8010c1c:	1523      	asrs	r3, r4, #20
 8010c1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010c22:	4413      	add	r3, r2
 8010c24:	9305      	str	r3, [sp, #20]
 8010c26:	4bd0      	ldr	r3, [pc, #832]	; (8010f68 <__ieee754_pow+0x760>)
 8010c28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010c2c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010c30:	429c      	cmp	r4, r3
 8010c32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010c36:	dd08      	ble.n	8010c4a <__ieee754_pow+0x442>
 8010c38:	4bcc      	ldr	r3, [pc, #816]	; (8010f6c <__ieee754_pow+0x764>)
 8010c3a:	429c      	cmp	r4, r3
 8010c3c:	f340 8162 	ble.w	8010f04 <__ieee754_pow+0x6fc>
 8010c40:	9b05      	ldr	r3, [sp, #20]
 8010c42:	3301      	adds	r3, #1
 8010c44:	9305      	str	r3, [sp, #20]
 8010c46:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010c4a:	2400      	movs	r4, #0
 8010c4c:	00e3      	lsls	r3, r4, #3
 8010c4e:	9307      	str	r3, [sp, #28]
 8010c50:	4bc7      	ldr	r3, [pc, #796]	; (8010f70 <__ieee754_pow+0x768>)
 8010c52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010c56:	ed93 7b00 	vldr	d7, [r3]
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	ec53 2b17 	vmov	r2, r3, d7
 8010c60:	eeb0 9a47 	vmov.f32	s18, s14
 8010c64:	eef0 9a67 	vmov.f32	s19, s15
 8010c68:	4682      	mov	sl, r0
 8010c6a:	f7ef fb27 	bl	80002bc <__aeabi_dsub>
 8010c6e:	4652      	mov	r2, sl
 8010c70:	4606      	mov	r6, r0
 8010c72:	460f      	mov	r7, r1
 8010c74:	462b      	mov	r3, r5
 8010c76:	ec51 0b19 	vmov	r0, r1, d9
 8010c7a:	f7ef fb21 	bl	80002c0 <__adddf3>
 8010c7e:	4602      	mov	r2, r0
 8010c80:	460b      	mov	r3, r1
 8010c82:	2000      	movs	r0, #0
 8010c84:	49bb      	ldr	r1, [pc, #748]	; (8010f74 <__ieee754_pow+0x76c>)
 8010c86:	f7ef fdfb 	bl	8000880 <__aeabi_ddiv>
 8010c8a:	ec41 0b1a 	vmov	d10, r0, r1
 8010c8e:	4602      	mov	r2, r0
 8010c90:	460b      	mov	r3, r1
 8010c92:	4630      	mov	r0, r6
 8010c94:	4639      	mov	r1, r7
 8010c96:	f7ef fcc9 	bl	800062c <__aeabi_dmul>
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ca0:	9302      	str	r3, [sp, #8]
 8010ca2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010ca6:	46ab      	mov	fp, r5
 8010ca8:	106d      	asrs	r5, r5, #1
 8010caa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010cae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010cb2:	ec41 0b18 	vmov	d8, r0, r1
 8010cb6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010cba:	2200      	movs	r2, #0
 8010cbc:	4640      	mov	r0, r8
 8010cbe:	4649      	mov	r1, r9
 8010cc0:	4614      	mov	r4, r2
 8010cc2:	461d      	mov	r5, r3
 8010cc4:	f7ef fcb2 	bl	800062c <__aeabi_dmul>
 8010cc8:	4602      	mov	r2, r0
 8010cca:	460b      	mov	r3, r1
 8010ccc:	4630      	mov	r0, r6
 8010cce:	4639      	mov	r1, r7
 8010cd0:	f7ef faf4 	bl	80002bc <__aeabi_dsub>
 8010cd4:	ec53 2b19 	vmov	r2, r3, d9
 8010cd8:	4606      	mov	r6, r0
 8010cda:	460f      	mov	r7, r1
 8010cdc:	4620      	mov	r0, r4
 8010cde:	4629      	mov	r1, r5
 8010ce0:	f7ef faec 	bl	80002bc <__aeabi_dsub>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	460b      	mov	r3, r1
 8010ce8:	4650      	mov	r0, sl
 8010cea:	4659      	mov	r1, fp
 8010cec:	f7ef fae6 	bl	80002bc <__aeabi_dsub>
 8010cf0:	4642      	mov	r2, r8
 8010cf2:	464b      	mov	r3, r9
 8010cf4:	f7ef fc9a 	bl	800062c <__aeabi_dmul>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	460b      	mov	r3, r1
 8010cfc:	4630      	mov	r0, r6
 8010cfe:	4639      	mov	r1, r7
 8010d00:	f7ef fadc 	bl	80002bc <__aeabi_dsub>
 8010d04:	ec53 2b1a 	vmov	r2, r3, d10
 8010d08:	f7ef fc90 	bl	800062c <__aeabi_dmul>
 8010d0c:	ec53 2b18 	vmov	r2, r3, d8
 8010d10:	ec41 0b19 	vmov	d9, r0, r1
 8010d14:	ec51 0b18 	vmov	r0, r1, d8
 8010d18:	f7ef fc88 	bl	800062c <__aeabi_dmul>
 8010d1c:	a37c      	add	r3, pc, #496	; (adr r3, 8010f10 <__ieee754_pow+0x708>)
 8010d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d22:	4604      	mov	r4, r0
 8010d24:	460d      	mov	r5, r1
 8010d26:	f7ef fc81 	bl	800062c <__aeabi_dmul>
 8010d2a:	a37b      	add	r3, pc, #492	; (adr r3, 8010f18 <__ieee754_pow+0x710>)
 8010d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d30:	f7ef fac6 	bl	80002c0 <__adddf3>
 8010d34:	4622      	mov	r2, r4
 8010d36:	462b      	mov	r3, r5
 8010d38:	f7ef fc78 	bl	800062c <__aeabi_dmul>
 8010d3c:	a378      	add	r3, pc, #480	; (adr r3, 8010f20 <__ieee754_pow+0x718>)
 8010d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d42:	f7ef fabd 	bl	80002c0 <__adddf3>
 8010d46:	4622      	mov	r2, r4
 8010d48:	462b      	mov	r3, r5
 8010d4a:	f7ef fc6f 	bl	800062c <__aeabi_dmul>
 8010d4e:	a376      	add	r3, pc, #472	; (adr r3, 8010f28 <__ieee754_pow+0x720>)
 8010d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d54:	f7ef fab4 	bl	80002c0 <__adddf3>
 8010d58:	4622      	mov	r2, r4
 8010d5a:	462b      	mov	r3, r5
 8010d5c:	f7ef fc66 	bl	800062c <__aeabi_dmul>
 8010d60:	a373      	add	r3, pc, #460	; (adr r3, 8010f30 <__ieee754_pow+0x728>)
 8010d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d66:	f7ef faab 	bl	80002c0 <__adddf3>
 8010d6a:	4622      	mov	r2, r4
 8010d6c:	462b      	mov	r3, r5
 8010d6e:	f7ef fc5d 	bl	800062c <__aeabi_dmul>
 8010d72:	a371      	add	r3, pc, #452	; (adr r3, 8010f38 <__ieee754_pow+0x730>)
 8010d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d78:	f7ef faa2 	bl	80002c0 <__adddf3>
 8010d7c:	4622      	mov	r2, r4
 8010d7e:	4606      	mov	r6, r0
 8010d80:	460f      	mov	r7, r1
 8010d82:	462b      	mov	r3, r5
 8010d84:	4620      	mov	r0, r4
 8010d86:	4629      	mov	r1, r5
 8010d88:	f7ef fc50 	bl	800062c <__aeabi_dmul>
 8010d8c:	4602      	mov	r2, r0
 8010d8e:	460b      	mov	r3, r1
 8010d90:	4630      	mov	r0, r6
 8010d92:	4639      	mov	r1, r7
 8010d94:	f7ef fc4a 	bl	800062c <__aeabi_dmul>
 8010d98:	4642      	mov	r2, r8
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	460d      	mov	r5, r1
 8010d9e:	464b      	mov	r3, r9
 8010da0:	ec51 0b18 	vmov	r0, r1, d8
 8010da4:	f7ef fa8c 	bl	80002c0 <__adddf3>
 8010da8:	ec53 2b19 	vmov	r2, r3, d9
 8010dac:	f7ef fc3e 	bl	800062c <__aeabi_dmul>
 8010db0:	4622      	mov	r2, r4
 8010db2:	462b      	mov	r3, r5
 8010db4:	f7ef fa84 	bl	80002c0 <__adddf3>
 8010db8:	4642      	mov	r2, r8
 8010dba:	4682      	mov	sl, r0
 8010dbc:	468b      	mov	fp, r1
 8010dbe:	464b      	mov	r3, r9
 8010dc0:	4640      	mov	r0, r8
 8010dc2:	4649      	mov	r1, r9
 8010dc4:	f7ef fc32 	bl	800062c <__aeabi_dmul>
 8010dc8:	4b6b      	ldr	r3, [pc, #428]	; (8010f78 <__ieee754_pow+0x770>)
 8010dca:	2200      	movs	r2, #0
 8010dcc:	4606      	mov	r6, r0
 8010dce:	460f      	mov	r7, r1
 8010dd0:	f7ef fa76 	bl	80002c0 <__adddf3>
 8010dd4:	4652      	mov	r2, sl
 8010dd6:	465b      	mov	r3, fp
 8010dd8:	f7ef fa72 	bl	80002c0 <__adddf3>
 8010ddc:	2000      	movs	r0, #0
 8010dde:	4604      	mov	r4, r0
 8010de0:	460d      	mov	r5, r1
 8010de2:	4602      	mov	r2, r0
 8010de4:	460b      	mov	r3, r1
 8010de6:	4640      	mov	r0, r8
 8010de8:	4649      	mov	r1, r9
 8010dea:	f7ef fc1f 	bl	800062c <__aeabi_dmul>
 8010dee:	4b62      	ldr	r3, [pc, #392]	; (8010f78 <__ieee754_pow+0x770>)
 8010df0:	4680      	mov	r8, r0
 8010df2:	4689      	mov	r9, r1
 8010df4:	2200      	movs	r2, #0
 8010df6:	4620      	mov	r0, r4
 8010df8:	4629      	mov	r1, r5
 8010dfa:	f7ef fa5f 	bl	80002bc <__aeabi_dsub>
 8010dfe:	4632      	mov	r2, r6
 8010e00:	463b      	mov	r3, r7
 8010e02:	f7ef fa5b 	bl	80002bc <__aeabi_dsub>
 8010e06:	4602      	mov	r2, r0
 8010e08:	460b      	mov	r3, r1
 8010e0a:	4650      	mov	r0, sl
 8010e0c:	4659      	mov	r1, fp
 8010e0e:	f7ef fa55 	bl	80002bc <__aeabi_dsub>
 8010e12:	ec53 2b18 	vmov	r2, r3, d8
 8010e16:	f7ef fc09 	bl	800062c <__aeabi_dmul>
 8010e1a:	4622      	mov	r2, r4
 8010e1c:	4606      	mov	r6, r0
 8010e1e:	460f      	mov	r7, r1
 8010e20:	462b      	mov	r3, r5
 8010e22:	ec51 0b19 	vmov	r0, r1, d9
 8010e26:	f7ef fc01 	bl	800062c <__aeabi_dmul>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	460b      	mov	r3, r1
 8010e2e:	4630      	mov	r0, r6
 8010e30:	4639      	mov	r1, r7
 8010e32:	f7ef fa45 	bl	80002c0 <__adddf3>
 8010e36:	4606      	mov	r6, r0
 8010e38:	460f      	mov	r7, r1
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	460b      	mov	r3, r1
 8010e3e:	4640      	mov	r0, r8
 8010e40:	4649      	mov	r1, r9
 8010e42:	f7ef fa3d 	bl	80002c0 <__adddf3>
 8010e46:	a33e      	add	r3, pc, #248	; (adr r3, 8010f40 <__ieee754_pow+0x738>)
 8010e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4c:	2000      	movs	r0, #0
 8010e4e:	4604      	mov	r4, r0
 8010e50:	460d      	mov	r5, r1
 8010e52:	f7ef fbeb 	bl	800062c <__aeabi_dmul>
 8010e56:	4642      	mov	r2, r8
 8010e58:	ec41 0b18 	vmov	d8, r0, r1
 8010e5c:	464b      	mov	r3, r9
 8010e5e:	4620      	mov	r0, r4
 8010e60:	4629      	mov	r1, r5
 8010e62:	f7ef fa2b 	bl	80002bc <__aeabi_dsub>
 8010e66:	4602      	mov	r2, r0
 8010e68:	460b      	mov	r3, r1
 8010e6a:	4630      	mov	r0, r6
 8010e6c:	4639      	mov	r1, r7
 8010e6e:	f7ef fa25 	bl	80002bc <__aeabi_dsub>
 8010e72:	a335      	add	r3, pc, #212	; (adr r3, 8010f48 <__ieee754_pow+0x740>)
 8010e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e78:	f7ef fbd8 	bl	800062c <__aeabi_dmul>
 8010e7c:	a334      	add	r3, pc, #208	; (adr r3, 8010f50 <__ieee754_pow+0x748>)
 8010e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e82:	4606      	mov	r6, r0
 8010e84:	460f      	mov	r7, r1
 8010e86:	4620      	mov	r0, r4
 8010e88:	4629      	mov	r1, r5
 8010e8a:	f7ef fbcf 	bl	800062c <__aeabi_dmul>
 8010e8e:	4602      	mov	r2, r0
 8010e90:	460b      	mov	r3, r1
 8010e92:	4630      	mov	r0, r6
 8010e94:	4639      	mov	r1, r7
 8010e96:	f7ef fa13 	bl	80002c0 <__adddf3>
 8010e9a:	9a07      	ldr	r2, [sp, #28]
 8010e9c:	4b37      	ldr	r3, [pc, #220]	; (8010f7c <__ieee754_pow+0x774>)
 8010e9e:	4413      	add	r3, r2
 8010ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea4:	f7ef fa0c 	bl	80002c0 <__adddf3>
 8010ea8:	4682      	mov	sl, r0
 8010eaa:	9805      	ldr	r0, [sp, #20]
 8010eac:	468b      	mov	fp, r1
 8010eae:	f7ef fb53 	bl	8000558 <__aeabi_i2d>
 8010eb2:	9a07      	ldr	r2, [sp, #28]
 8010eb4:	4b32      	ldr	r3, [pc, #200]	; (8010f80 <__ieee754_pow+0x778>)
 8010eb6:	4413      	add	r3, r2
 8010eb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010ebc:	4606      	mov	r6, r0
 8010ebe:	460f      	mov	r7, r1
 8010ec0:	4652      	mov	r2, sl
 8010ec2:	465b      	mov	r3, fp
 8010ec4:	ec51 0b18 	vmov	r0, r1, d8
 8010ec8:	f7ef f9fa 	bl	80002c0 <__adddf3>
 8010ecc:	4642      	mov	r2, r8
 8010ece:	464b      	mov	r3, r9
 8010ed0:	f7ef f9f6 	bl	80002c0 <__adddf3>
 8010ed4:	4632      	mov	r2, r6
 8010ed6:	463b      	mov	r3, r7
 8010ed8:	f7ef f9f2 	bl	80002c0 <__adddf3>
 8010edc:	2000      	movs	r0, #0
 8010ede:	4632      	mov	r2, r6
 8010ee0:	463b      	mov	r3, r7
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	460d      	mov	r5, r1
 8010ee6:	f7ef f9e9 	bl	80002bc <__aeabi_dsub>
 8010eea:	4642      	mov	r2, r8
 8010eec:	464b      	mov	r3, r9
 8010eee:	f7ef f9e5 	bl	80002bc <__aeabi_dsub>
 8010ef2:	ec53 2b18 	vmov	r2, r3, d8
 8010ef6:	f7ef f9e1 	bl	80002bc <__aeabi_dsub>
 8010efa:	4602      	mov	r2, r0
 8010efc:	460b      	mov	r3, r1
 8010efe:	4650      	mov	r0, sl
 8010f00:	4659      	mov	r1, fp
 8010f02:	e610      	b.n	8010b26 <__ieee754_pow+0x31e>
 8010f04:	2401      	movs	r4, #1
 8010f06:	e6a1      	b.n	8010c4c <__ieee754_pow+0x444>
 8010f08:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010f58 <__ieee754_pow+0x750>
 8010f0c:	e617      	b.n	8010b3e <__ieee754_pow+0x336>
 8010f0e:	bf00      	nop
 8010f10:	4a454eef 	.word	0x4a454eef
 8010f14:	3fca7e28 	.word	0x3fca7e28
 8010f18:	93c9db65 	.word	0x93c9db65
 8010f1c:	3fcd864a 	.word	0x3fcd864a
 8010f20:	a91d4101 	.word	0xa91d4101
 8010f24:	3fd17460 	.word	0x3fd17460
 8010f28:	518f264d 	.word	0x518f264d
 8010f2c:	3fd55555 	.word	0x3fd55555
 8010f30:	db6fabff 	.word	0xdb6fabff
 8010f34:	3fdb6db6 	.word	0x3fdb6db6
 8010f38:	33333303 	.word	0x33333303
 8010f3c:	3fe33333 	.word	0x3fe33333
 8010f40:	e0000000 	.word	0xe0000000
 8010f44:	3feec709 	.word	0x3feec709
 8010f48:	dc3a03fd 	.word	0xdc3a03fd
 8010f4c:	3feec709 	.word	0x3feec709
 8010f50:	145b01f5 	.word	0x145b01f5
 8010f54:	be3e2fe0 	.word	0xbe3e2fe0
 8010f58:	00000000 	.word	0x00000000
 8010f5c:	3ff00000 	.word	0x3ff00000
 8010f60:	7ff00000 	.word	0x7ff00000
 8010f64:	43400000 	.word	0x43400000
 8010f68:	0003988e 	.word	0x0003988e
 8010f6c:	000bb679 	.word	0x000bb679
 8010f70:	0803cf60 	.word	0x0803cf60
 8010f74:	3ff00000 	.word	0x3ff00000
 8010f78:	40080000 	.word	0x40080000
 8010f7c:	0803cf80 	.word	0x0803cf80
 8010f80:	0803cf70 	.word	0x0803cf70
 8010f84:	a3b5      	add	r3, pc, #724	; (adr r3, 801125c <__ieee754_pow+0xa54>)
 8010f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8a:	4640      	mov	r0, r8
 8010f8c:	4649      	mov	r1, r9
 8010f8e:	f7ef f997 	bl	80002c0 <__adddf3>
 8010f92:	4622      	mov	r2, r4
 8010f94:	ec41 0b1a 	vmov	d10, r0, r1
 8010f98:	462b      	mov	r3, r5
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	4639      	mov	r1, r7
 8010f9e:	f7ef f98d 	bl	80002bc <__aeabi_dsub>
 8010fa2:	4602      	mov	r2, r0
 8010fa4:	460b      	mov	r3, r1
 8010fa6:	ec51 0b1a 	vmov	r0, r1, d10
 8010faa:	f7ef fdcf 	bl	8000b4c <__aeabi_dcmpgt>
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	f47f ae04 	bne.w	8010bbc <__ieee754_pow+0x3b4>
 8010fb4:	4aa4      	ldr	r2, [pc, #656]	; (8011248 <__ieee754_pow+0xa40>)
 8010fb6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010fba:	4293      	cmp	r3, r2
 8010fbc:	f340 8108 	ble.w	80111d0 <__ieee754_pow+0x9c8>
 8010fc0:	151b      	asrs	r3, r3, #20
 8010fc2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010fc6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010fca:	fa4a f303 	asr.w	r3, sl, r3
 8010fce:	445b      	add	r3, fp
 8010fd0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010fd4:	4e9d      	ldr	r6, [pc, #628]	; (801124c <__ieee754_pow+0xa44>)
 8010fd6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010fda:	4116      	asrs	r6, r2
 8010fdc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010fe0:	2000      	movs	r0, #0
 8010fe2:	ea23 0106 	bic.w	r1, r3, r6
 8010fe6:	f1c2 0214 	rsb	r2, r2, #20
 8010fea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010fee:	fa4a fa02 	asr.w	sl, sl, r2
 8010ff2:	f1bb 0f00 	cmp.w	fp, #0
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	4629      	mov	r1, r5
 8010ffe:	bfb8      	it	lt
 8011000:	f1ca 0a00 	rsblt	sl, sl, #0
 8011004:	f7ef f95a 	bl	80002bc <__aeabi_dsub>
 8011008:	ec41 0b19 	vmov	d9, r0, r1
 801100c:	4642      	mov	r2, r8
 801100e:	464b      	mov	r3, r9
 8011010:	ec51 0b19 	vmov	r0, r1, d9
 8011014:	f7ef f954 	bl	80002c0 <__adddf3>
 8011018:	a37b      	add	r3, pc, #492	; (adr r3, 8011208 <__ieee754_pow+0xa00>)
 801101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101e:	2000      	movs	r0, #0
 8011020:	4604      	mov	r4, r0
 8011022:	460d      	mov	r5, r1
 8011024:	f7ef fb02 	bl	800062c <__aeabi_dmul>
 8011028:	ec53 2b19 	vmov	r2, r3, d9
 801102c:	4606      	mov	r6, r0
 801102e:	460f      	mov	r7, r1
 8011030:	4620      	mov	r0, r4
 8011032:	4629      	mov	r1, r5
 8011034:	f7ef f942 	bl	80002bc <__aeabi_dsub>
 8011038:	4602      	mov	r2, r0
 801103a:	460b      	mov	r3, r1
 801103c:	4640      	mov	r0, r8
 801103e:	4649      	mov	r1, r9
 8011040:	f7ef f93c 	bl	80002bc <__aeabi_dsub>
 8011044:	a372      	add	r3, pc, #456	; (adr r3, 8011210 <__ieee754_pow+0xa08>)
 8011046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801104a:	f7ef faef 	bl	800062c <__aeabi_dmul>
 801104e:	a372      	add	r3, pc, #456	; (adr r3, 8011218 <__ieee754_pow+0xa10>)
 8011050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011054:	4680      	mov	r8, r0
 8011056:	4689      	mov	r9, r1
 8011058:	4620      	mov	r0, r4
 801105a:	4629      	mov	r1, r5
 801105c:	f7ef fae6 	bl	800062c <__aeabi_dmul>
 8011060:	4602      	mov	r2, r0
 8011062:	460b      	mov	r3, r1
 8011064:	4640      	mov	r0, r8
 8011066:	4649      	mov	r1, r9
 8011068:	f7ef f92a 	bl	80002c0 <__adddf3>
 801106c:	4604      	mov	r4, r0
 801106e:	460d      	mov	r5, r1
 8011070:	4602      	mov	r2, r0
 8011072:	460b      	mov	r3, r1
 8011074:	4630      	mov	r0, r6
 8011076:	4639      	mov	r1, r7
 8011078:	f7ef f922 	bl	80002c0 <__adddf3>
 801107c:	4632      	mov	r2, r6
 801107e:	463b      	mov	r3, r7
 8011080:	4680      	mov	r8, r0
 8011082:	4689      	mov	r9, r1
 8011084:	f7ef f91a 	bl	80002bc <__aeabi_dsub>
 8011088:	4602      	mov	r2, r0
 801108a:	460b      	mov	r3, r1
 801108c:	4620      	mov	r0, r4
 801108e:	4629      	mov	r1, r5
 8011090:	f7ef f914 	bl	80002bc <__aeabi_dsub>
 8011094:	4642      	mov	r2, r8
 8011096:	4606      	mov	r6, r0
 8011098:	460f      	mov	r7, r1
 801109a:	464b      	mov	r3, r9
 801109c:	4640      	mov	r0, r8
 801109e:	4649      	mov	r1, r9
 80110a0:	f7ef fac4 	bl	800062c <__aeabi_dmul>
 80110a4:	a35e      	add	r3, pc, #376	; (adr r3, 8011220 <__ieee754_pow+0xa18>)
 80110a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110aa:	4604      	mov	r4, r0
 80110ac:	460d      	mov	r5, r1
 80110ae:	f7ef fabd 	bl	800062c <__aeabi_dmul>
 80110b2:	a35d      	add	r3, pc, #372	; (adr r3, 8011228 <__ieee754_pow+0xa20>)
 80110b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b8:	f7ef f900 	bl	80002bc <__aeabi_dsub>
 80110bc:	4622      	mov	r2, r4
 80110be:	462b      	mov	r3, r5
 80110c0:	f7ef fab4 	bl	800062c <__aeabi_dmul>
 80110c4:	a35a      	add	r3, pc, #360	; (adr r3, 8011230 <__ieee754_pow+0xa28>)
 80110c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ca:	f7ef f8f9 	bl	80002c0 <__adddf3>
 80110ce:	4622      	mov	r2, r4
 80110d0:	462b      	mov	r3, r5
 80110d2:	f7ef faab 	bl	800062c <__aeabi_dmul>
 80110d6:	a358      	add	r3, pc, #352	; (adr r3, 8011238 <__ieee754_pow+0xa30>)
 80110d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110dc:	f7ef f8ee 	bl	80002bc <__aeabi_dsub>
 80110e0:	4622      	mov	r2, r4
 80110e2:	462b      	mov	r3, r5
 80110e4:	f7ef faa2 	bl	800062c <__aeabi_dmul>
 80110e8:	a355      	add	r3, pc, #340	; (adr r3, 8011240 <__ieee754_pow+0xa38>)
 80110ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ee:	f7ef f8e7 	bl	80002c0 <__adddf3>
 80110f2:	4622      	mov	r2, r4
 80110f4:	462b      	mov	r3, r5
 80110f6:	f7ef fa99 	bl	800062c <__aeabi_dmul>
 80110fa:	4602      	mov	r2, r0
 80110fc:	460b      	mov	r3, r1
 80110fe:	4640      	mov	r0, r8
 8011100:	4649      	mov	r1, r9
 8011102:	f7ef f8db 	bl	80002bc <__aeabi_dsub>
 8011106:	4604      	mov	r4, r0
 8011108:	460d      	mov	r5, r1
 801110a:	4602      	mov	r2, r0
 801110c:	460b      	mov	r3, r1
 801110e:	4640      	mov	r0, r8
 8011110:	4649      	mov	r1, r9
 8011112:	f7ef fa8b 	bl	800062c <__aeabi_dmul>
 8011116:	2200      	movs	r2, #0
 8011118:	ec41 0b19 	vmov	d9, r0, r1
 801111c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011120:	4620      	mov	r0, r4
 8011122:	4629      	mov	r1, r5
 8011124:	f7ef f8ca 	bl	80002bc <__aeabi_dsub>
 8011128:	4602      	mov	r2, r0
 801112a:	460b      	mov	r3, r1
 801112c:	ec51 0b19 	vmov	r0, r1, d9
 8011130:	f7ef fba6 	bl	8000880 <__aeabi_ddiv>
 8011134:	4632      	mov	r2, r6
 8011136:	4604      	mov	r4, r0
 8011138:	460d      	mov	r5, r1
 801113a:	463b      	mov	r3, r7
 801113c:	4640      	mov	r0, r8
 801113e:	4649      	mov	r1, r9
 8011140:	f7ef fa74 	bl	800062c <__aeabi_dmul>
 8011144:	4632      	mov	r2, r6
 8011146:	463b      	mov	r3, r7
 8011148:	f7ef f8ba 	bl	80002c0 <__adddf3>
 801114c:	4602      	mov	r2, r0
 801114e:	460b      	mov	r3, r1
 8011150:	4620      	mov	r0, r4
 8011152:	4629      	mov	r1, r5
 8011154:	f7ef f8b2 	bl	80002bc <__aeabi_dsub>
 8011158:	4642      	mov	r2, r8
 801115a:	464b      	mov	r3, r9
 801115c:	f7ef f8ae 	bl	80002bc <__aeabi_dsub>
 8011160:	460b      	mov	r3, r1
 8011162:	4602      	mov	r2, r0
 8011164:	493a      	ldr	r1, [pc, #232]	; (8011250 <__ieee754_pow+0xa48>)
 8011166:	2000      	movs	r0, #0
 8011168:	f7ef f8a8 	bl	80002bc <__aeabi_dsub>
 801116c:	ec41 0b10 	vmov	d0, r0, r1
 8011170:	ee10 3a90 	vmov	r3, s1
 8011174:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801117c:	da2b      	bge.n	80111d6 <__ieee754_pow+0x9ce>
 801117e:	4650      	mov	r0, sl
 8011180:	f001 fae2 	bl	8012748 <scalbn>
 8011184:	ec51 0b10 	vmov	r0, r1, d0
 8011188:	ec53 2b18 	vmov	r2, r3, d8
 801118c:	f7ff bbed 	b.w	801096a <__ieee754_pow+0x162>
 8011190:	4b30      	ldr	r3, [pc, #192]	; (8011254 <__ieee754_pow+0xa4c>)
 8011192:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011196:	429e      	cmp	r6, r3
 8011198:	f77f af0c 	ble.w	8010fb4 <__ieee754_pow+0x7ac>
 801119c:	4b2e      	ldr	r3, [pc, #184]	; (8011258 <__ieee754_pow+0xa50>)
 801119e:	440b      	add	r3, r1
 80111a0:	4303      	orrs	r3, r0
 80111a2:	d009      	beq.n	80111b8 <__ieee754_pow+0x9b0>
 80111a4:	ec51 0b18 	vmov	r0, r1, d8
 80111a8:	2200      	movs	r2, #0
 80111aa:	2300      	movs	r3, #0
 80111ac:	f7ef fcb0 	bl	8000b10 <__aeabi_dcmplt>
 80111b0:	3800      	subs	r0, #0
 80111b2:	bf18      	it	ne
 80111b4:	2001      	movne	r0, #1
 80111b6:	e447      	b.n	8010a48 <__ieee754_pow+0x240>
 80111b8:	4622      	mov	r2, r4
 80111ba:	462b      	mov	r3, r5
 80111bc:	f7ef f87e 	bl	80002bc <__aeabi_dsub>
 80111c0:	4642      	mov	r2, r8
 80111c2:	464b      	mov	r3, r9
 80111c4:	f7ef fcb8 	bl	8000b38 <__aeabi_dcmpge>
 80111c8:	2800      	cmp	r0, #0
 80111ca:	f43f aef3 	beq.w	8010fb4 <__ieee754_pow+0x7ac>
 80111ce:	e7e9      	b.n	80111a4 <__ieee754_pow+0x99c>
 80111d0:	f04f 0a00 	mov.w	sl, #0
 80111d4:	e71a      	b.n	801100c <__ieee754_pow+0x804>
 80111d6:	ec51 0b10 	vmov	r0, r1, d0
 80111da:	4619      	mov	r1, r3
 80111dc:	e7d4      	b.n	8011188 <__ieee754_pow+0x980>
 80111de:	491c      	ldr	r1, [pc, #112]	; (8011250 <__ieee754_pow+0xa48>)
 80111e0:	2000      	movs	r0, #0
 80111e2:	f7ff bb30 	b.w	8010846 <__ieee754_pow+0x3e>
 80111e6:	2000      	movs	r0, #0
 80111e8:	2100      	movs	r1, #0
 80111ea:	f7ff bb2c 	b.w	8010846 <__ieee754_pow+0x3e>
 80111ee:	4630      	mov	r0, r6
 80111f0:	4639      	mov	r1, r7
 80111f2:	f7ff bb28 	b.w	8010846 <__ieee754_pow+0x3e>
 80111f6:	9204      	str	r2, [sp, #16]
 80111f8:	f7ff bb7a 	b.w	80108f0 <__ieee754_pow+0xe8>
 80111fc:	2300      	movs	r3, #0
 80111fe:	f7ff bb64 	b.w	80108ca <__ieee754_pow+0xc2>
 8011202:	bf00      	nop
 8011204:	f3af 8000 	nop.w
 8011208:	00000000 	.word	0x00000000
 801120c:	3fe62e43 	.word	0x3fe62e43
 8011210:	fefa39ef 	.word	0xfefa39ef
 8011214:	3fe62e42 	.word	0x3fe62e42
 8011218:	0ca86c39 	.word	0x0ca86c39
 801121c:	be205c61 	.word	0xbe205c61
 8011220:	72bea4d0 	.word	0x72bea4d0
 8011224:	3e663769 	.word	0x3e663769
 8011228:	c5d26bf1 	.word	0xc5d26bf1
 801122c:	3ebbbd41 	.word	0x3ebbbd41
 8011230:	af25de2c 	.word	0xaf25de2c
 8011234:	3f11566a 	.word	0x3f11566a
 8011238:	16bebd93 	.word	0x16bebd93
 801123c:	3f66c16c 	.word	0x3f66c16c
 8011240:	5555553e 	.word	0x5555553e
 8011244:	3fc55555 	.word	0x3fc55555
 8011248:	3fe00000 	.word	0x3fe00000
 801124c:	000fffff 	.word	0x000fffff
 8011250:	3ff00000 	.word	0x3ff00000
 8011254:	4090cbff 	.word	0x4090cbff
 8011258:	3f6f3400 	.word	0x3f6f3400
 801125c:	652b82fe 	.word	0x652b82fe
 8011260:	3c971547 	.word	0x3c971547
 8011264:	00000000 	.word	0x00000000

08011268 <__ieee754_rem_pio2>:
 8011268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801126c:	ed2d 8b02 	vpush	{d8}
 8011270:	ec55 4b10 	vmov	r4, r5, d0
 8011274:	4bca      	ldr	r3, [pc, #808]	; (80115a0 <__ieee754_rem_pio2+0x338>)
 8011276:	b08b      	sub	sp, #44	; 0x2c
 8011278:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801127c:	4598      	cmp	r8, r3
 801127e:	4682      	mov	sl, r0
 8011280:	9502      	str	r5, [sp, #8]
 8011282:	dc08      	bgt.n	8011296 <__ieee754_rem_pio2+0x2e>
 8011284:	2200      	movs	r2, #0
 8011286:	2300      	movs	r3, #0
 8011288:	ed80 0b00 	vstr	d0, [r0]
 801128c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011290:	f04f 0b00 	mov.w	fp, #0
 8011294:	e028      	b.n	80112e8 <__ieee754_rem_pio2+0x80>
 8011296:	4bc3      	ldr	r3, [pc, #780]	; (80115a4 <__ieee754_rem_pio2+0x33c>)
 8011298:	4598      	cmp	r8, r3
 801129a:	dc78      	bgt.n	801138e <__ieee754_rem_pio2+0x126>
 801129c:	9b02      	ldr	r3, [sp, #8]
 801129e:	4ec2      	ldr	r6, [pc, #776]	; (80115a8 <__ieee754_rem_pio2+0x340>)
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	ee10 0a10 	vmov	r0, s0
 80112a6:	a3b0      	add	r3, pc, #704	; (adr r3, 8011568 <__ieee754_rem_pio2+0x300>)
 80112a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ac:	4629      	mov	r1, r5
 80112ae:	dd39      	ble.n	8011324 <__ieee754_rem_pio2+0xbc>
 80112b0:	f7ef f804 	bl	80002bc <__aeabi_dsub>
 80112b4:	45b0      	cmp	r8, r6
 80112b6:	4604      	mov	r4, r0
 80112b8:	460d      	mov	r5, r1
 80112ba:	d01b      	beq.n	80112f4 <__ieee754_rem_pio2+0x8c>
 80112bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8011570 <__ieee754_rem_pio2+0x308>)
 80112be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c2:	f7ee fffb 	bl	80002bc <__aeabi_dsub>
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	e9ca 2300 	strd	r2, r3, [sl]
 80112ce:	4620      	mov	r0, r4
 80112d0:	4629      	mov	r1, r5
 80112d2:	f7ee fff3 	bl	80002bc <__aeabi_dsub>
 80112d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8011570 <__ieee754_rem_pio2+0x308>)
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	f7ee ffee 	bl	80002bc <__aeabi_dsub>
 80112e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80112e4:	f04f 0b01 	mov.w	fp, #1
 80112e8:	4658      	mov	r0, fp
 80112ea:	b00b      	add	sp, #44	; 0x2c
 80112ec:	ecbd 8b02 	vpop	{d8}
 80112f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8011578 <__ieee754_rem_pio2+0x310>)
 80112f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fa:	f7ee ffdf 	bl	80002bc <__aeabi_dsub>
 80112fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8011580 <__ieee754_rem_pio2+0x318>)
 8011300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011304:	4604      	mov	r4, r0
 8011306:	460d      	mov	r5, r1
 8011308:	f7ee ffd8 	bl	80002bc <__aeabi_dsub>
 801130c:	4602      	mov	r2, r0
 801130e:	460b      	mov	r3, r1
 8011310:	e9ca 2300 	strd	r2, r3, [sl]
 8011314:	4620      	mov	r0, r4
 8011316:	4629      	mov	r1, r5
 8011318:	f7ee ffd0 	bl	80002bc <__aeabi_dsub>
 801131c:	a398      	add	r3, pc, #608	; (adr r3, 8011580 <__ieee754_rem_pio2+0x318>)
 801131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011322:	e7db      	b.n	80112dc <__ieee754_rem_pio2+0x74>
 8011324:	f7ee ffcc 	bl	80002c0 <__adddf3>
 8011328:	45b0      	cmp	r8, r6
 801132a:	4604      	mov	r4, r0
 801132c:	460d      	mov	r5, r1
 801132e:	d016      	beq.n	801135e <__ieee754_rem_pio2+0xf6>
 8011330:	a38f      	add	r3, pc, #572	; (adr r3, 8011570 <__ieee754_rem_pio2+0x308>)
 8011332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011336:	f7ee ffc3 	bl	80002c0 <__adddf3>
 801133a:	4602      	mov	r2, r0
 801133c:	460b      	mov	r3, r1
 801133e:	e9ca 2300 	strd	r2, r3, [sl]
 8011342:	4620      	mov	r0, r4
 8011344:	4629      	mov	r1, r5
 8011346:	f7ee ffb9 	bl	80002bc <__aeabi_dsub>
 801134a:	a389      	add	r3, pc, #548	; (adr r3, 8011570 <__ieee754_rem_pio2+0x308>)
 801134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011350:	f7ee ffb6 	bl	80002c0 <__adddf3>
 8011354:	f04f 3bff 	mov.w	fp, #4294967295
 8011358:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801135c:	e7c4      	b.n	80112e8 <__ieee754_rem_pio2+0x80>
 801135e:	a386      	add	r3, pc, #536	; (adr r3, 8011578 <__ieee754_rem_pio2+0x310>)
 8011360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011364:	f7ee ffac 	bl	80002c0 <__adddf3>
 8011368:	a385      	add	r3, pc, #532	; (adr r3, 8011580 <__ieee754_rem_pio2+0x318>)
 801136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136e:	4604      	mov	r4, r0
 8011370:	460d      	mov	r5, r1
 8011372:	f7ee ffa5 	bl	80002c0 <__adddf3>
 8011376:	4602      	mov	r2, r0
 8011378:	460b      	mov	r3, r1
 801137a:	e9ca 2300 	strd	r2, r3, [sl]
 801137e:	4620      	mov	r0, r4
 8011380:	4629      	mov	r1, r5
 8011382:	f7ee ff9b 	bl	80002bc <__aeabi_dsub>
 8011386:	a37e      	add	r3, pc, #504	; (adr r3, 8011580 <__ieee754_rem_pio2+0x318>)
 8011388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138c:	e7e0      	b.n	8011350 <__ieee754_rem_pio2+0xe8>
 801138e:	4b87      	ldr	r3, [pc, #540]	; (80115ac <__ieee754_rem_pio2+0x344>)
 8011390:	4598      	cmp	r8, r3
 8011392:	f300 80d9 	bgt.w	8011548 <__ieee754_rem_pio2+0x2e0>
 8011396:	f001 f939 	bl	801260c <fabs>
 801139a:	ec55 4b10 	vmov	r4, r5, d0
 801139e:	ee10 0a10 	vmov	r0, s0
 80113a2:	a379      	add	r3, pc, #484	; (adr r3, 8011588 <__ieee754_rem_pio2+0x320>)
 80113a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a8:	4629      	mov	r1, r5
 80113aa:	f7ef f93f 	bl	800062c <__aeabi_dmul>
 80113ae:	4b80      	ldr	r3, [pc, #512]	; (80115b0 <__ieee754_rem_pio2+0x348>)
 80113b0:	2200      	movs	r2, #0
 80113b2:	f7ee ff85 	bl	80002c0 <__adddf3>
 80113b6:	f7ef fbe9 	bl	8000b8c <__aeabi_d2iz>
 80113ba:	4683      	mov	fp, r0
 80113bc:	f7ef f8cc 	bl	8000558 <__aeabi_i2d>
 80113c0:	4602      	mov	r2, r0
 80113c2:	460b      	mov	r3, r1
 80113c4:	ec43 2b18 	vmov	d8, r2, r3
 80113c8:	a367      	add	r3, pc, #412	; (adr r3, 8011568 <__ieee754_rem_pio2+0x300>)
 80113ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ce:	f7ef f92d 	bl	800062c <__aeabi_dmul>
 80113d2:	4602      	mov	r2, r0
 80113d4:	460b      	mov	r3, r1
 80113d6:	4620      	mov	r0, r4
 80113d8:	4629      	mov	r1, r5
 80113da:	f7ee ff6f 	bl	80002bc <__aeabi_dsub>
 80113de:	a364      	add	r3, pc, #400	; (adr r3, 8011570 <__ieee754_rem_pio2+0x308>)
 80113e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e4:	4606      	mov	r6, r0
 80113e6:	460f      	mov	r7, r1
 80113e8:	ec51 0b18 	vmov	r0, r1, d8
 80113ec:	f7ef f91e 	bl	800062c <__aeabi_dmul>
 80113f0:	f1bb 0f1f 	cmp.w	fp, #31
 80113f4:	4604      	mov	r4, r0
 80113f6:	460d      	mov	r5, r1
 80113f8:	dc0d      	bgt.n	8011416 <__ieee754_rem_pio2+0x1ae>
 80113fa:	4b6e      	ldr	r3, [pc, #440]	; (80115b4 <__ieee754_rem_pio2+0x34c>)
 80113fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011404:	4543      	cmp	r3, r8
 8011406:	d006      	beq.n	8011416 <__ieee754_rem_pio2+0x1ae>
 8011408:	4622      	mov	r2, r4
 801140a:	462b      	mov	r3, r5
 801140c:	4630      	mov	r0, r6
 801140e:	4639      	mov	r1, r7
 8011410:	f7ee ff54 	bl	80002bc <__aeabi_dsub>
 8011414:	e00f      	b.n	8011436 <__ieee754_rem_pio2+0x1ce>
 8011416:	462b      	mov	r3, r5
 8011418:	4622      	mov	r2, r4
 801141a:	4630      	mov	r0, r6
 801141c:	4639      	mov	r1, r7
 801141e:	f7ee ff4d 	bl	80002bc <__aeabi_dsub>
 8011422:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011426:	9303      	str	r3, [sp, #12]
 8011428:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801142c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011430:	f1b8 0f10 	cmp.w	r8, #16
 8011434:	dc02      	bgt.n	801143c <__ieee754_rem_pio2+0x1d4>
 8011436:	e9ca 0100 	strd	r0, r1, [sl]
 801143a:	e039      	b.n	80114b0 <__ieee754_rem_pio2+0x248>
 801143c:	a34e      	add	r3, pc, #312	; (adr r3, 8011578 <__ieee754_rem_pio2+0x310>)
 801143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011442:	ec51 0b18 	vmov	r0, r1, d8
 8011446:	f7ef f8f1 	bl	800062c <__aeabi_dmul>
 801144a:	4604      	mov	r4, r0
 801144c:	460d      	mov	r5, r1
 801144e:	4602      	mov	r2, r0
 8011450:	460b      	mov	r3, r1
 8011452:	4630      	mov	r0, r6
 8011454:	4639      	mov	r1, r7
 8011456:	f7ee ff31 	bl	80002bc <__aeabi_dsub>
 801145a:	4602      	mov	r2, r0
 801145c:	460b      	mov	r3, r1
 801145e:	4680      	mov	r8, r0
 8011460:	4689      	mov	r9, r1
 8011462:	4630      	mov	r0, r6
 8011464:	4639      	mov	r1, r7
 8011466:	f7ee ff29 	bl	80002bc <__aeabi_dsub>
 801146a:	4622      	mov	r2, r4
 801146c:	462b      	mov	r3, r5
 801146e:	f7ee ff25 	bl	80002bc <__aeabi_dsub>
 8011472:	a343      	add	r3, pc, #268	; (adr r3, 8011580 <__ieee754_rem_pio2+0x318>)
 8011474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011478:	4604      	mov	r4, r0
 801147a:	460d      	mov	r5, r1
 801147c:	ec51 0b18 	vmov	r0, r1, d8
 8011480:	f7ef f8d4 	bl	800062c <__aeabi_dmul>
 8011484:	4622      	mov	r2, r4
 8011486:	462b      	mov	r3, r5
 8011488:	f7ee ff18 	bl	80002bc <__aeabi_dsub>
 801148c:	4602      	mov	r2, r0
 801148e:	460b      	mov	r3, r1
 8011490:	4604      	mov	r4, r0
 8011492:	460d      	mov	r5, r1
 8011494:	4640      	mov	r0, r8
 8011496:	4649      	mov	r1, r9
 8011498:	f7ee ff10 	bl	80002bc <__aeabi_dsub>
 801149c:	9a03      	ldr	r2, [sp, #12]
 801149e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80114a2:	1ad3      	subs	r3, r2, r3
 80114a4:	2b31      	cmp	r3, #49	; 0x31
 80114a6:	dc24      	bgt.n	80114f2 <__ieee754_rem_pio2+0x28a>
 80114a8:	e9ca 0100 	strd	r0, r1, [sl]
 80114ac:	4646      	mov	r6, r8
 80114ae:	464f      	mov	r7, r9
 80114b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80114b4:	4630      	mov	r0, r6
 80114b6:	4642      	mov	r2, r8
 80114b8:	464b      	mov	r3, r9
 80114ba:	4639      	mov	r1, r7
 80114bc:	f7ee fefe 	bl	80002bc <__aeabi_dsub>
 80114c0:	462b      	mov	r3, r5
 80114c2:	4622      	mov	r2, r4
 80114c4:	f7ee fefa 	bl	80002bc <__aeabi_dsub>
 80114c8:	9b02      	ldr	r3, [sp, #8]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80114d0:	f6bf af0a 	bge.w	80112e8 <__ieee754_rem_pio2+0x80>
 80114d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80114d8:	f8ca 3004 	str.w	r3, [sl, #4]
 80114dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80114e0:	f8ca 8000 	str.w	r8, [sl]
 80114e4:	f8ca 0008 	str.w	r0, [sl, #8]
 80114e8:	f8ca 300c 	str.w	r3, [sl, #12]
 80114ec:	f1cb 0b00 	rsb	fp, fp, #0
 80114f0:	e6fa      	b.n	80112e8 <__ieee754_rem_pio2+0x80>
 80114f2:	a327      	add	r3, pc, #156	; (adr r3, 8011590 <__ieee754_rem_pio2+0x328>)
 80114f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f8:	ec51 0b18 	vmov	r0, r1, d8
 80114fc:	f7ef f896 	bl	800062c <__aeabi_dmul>
 8011500:	4604      	mov	r4, r0
 8011502:	460d      	mov	r5, r1
 8011504:	4602      	mov	r2, r0
 8011506:	460b      	mov	r3, r1
 8011508:	4640      	mov	r0, r8
 801150a:	4649      	mov	r1, r9
 801150c:	f7ee fed6 	bl	80002bc <__aeabi_dsub>
 8011510:	4602      	mov	r2, r0
 8011512:	460b      	mov	r3, r1
 8011514:	4606      	mov	r6, r0
 8011516:	460f      	mov	r7, r1
 8011518:	4640      	mov	r0, r8
 801151a:	4649      	mov	r1, r9
 801151c:	f7ee fece 	bl	80002bc <__aeabi_dsub>
 8011520:	4622      	mov	r2, r4
 8011522:	462b      	mov	r3, r5
 8011524:	f7ee feca 	bl	80002bc <__aeabi_dsub>
 8011528:	a31b      	add	r3, pc, #108	; (adr r3, 8011598 <__ieee754_rem_pio2+0x330>)
 801152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801152e:	4604      	mov	r4, r0
 8011530:	460d      	mov	r5, r1
 8011532:	ec51 0b18 	vmov	r0, r1, d8
 8011536:	f7ef f879 	bl	800062c <__aeabi_dmul>
 801153a:	4622      	mov	r2, r4
 801153c:	462b      	mov	r3, r5
 801153e:	f7ee febd 	bl	80002bc <__aeabi_dsub>
 8011542:	4604      	mov	r4, r0
 8011544:	460d      	mov	r5, r1
 8011546:	e75f      	b.n	8011408 <__ieee754_rem_pio2+0x1a0>
 8011548:	4b1b      	ldr	r3, [pc, #108]	; (80115b8 <__ieee754_rem_pio2+0x350>)
 801154a:	4598      	cmp	r8, r3
 801154c:	dd36      	ble.n	80115bc <__ieee754_rem_pio2+0x354>
 801154e:	ee10 2a10 	vmov	r2, s0
 8011552:	462b      	mov	r3, r5
 8011554:	4620      	mov	r0, r4
 8011556:	4629      	mov	r1, r5
 8011558:	f7ee feb0 	bl	80002bc <__aeabi_dsub>
 801155c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011560:	e9ca 0100 	strd	r0, r1, [sl]
 8011564:	e694      	b.n	8011290 <__ieee754_rem_pio2+0x28>
 8011566:	bf00      	nop
 8011568:	54400000 	.word	0x54400000
 801156c:	3ff921fb 	.word	0x3ff921fb
 8011570:	1a626331 	.word	0x1a626331
 8011574:	3dd0b461 	.word	0x3dd0b461
 8011578:	1a600000 	.word	0x1a600000
 801157c:	3dd0b461 	.word	0x3dd0b461
 8011580:	2e037073 	.word	0x2e037073
 8011584:	3ba3198a 	.word	0x3ba3198a
 8011588:	6dc9c883 	.word	0x6dc9c883
 801158c:	3fe45f30 	.word	0x3fe45f30
 8011590:	2e000000 	.word	0x2e000000
 8011594:	3ba3198a 	.word	0x3ba3198a
 8011598:	252049c1 	.word	0x252049c1
 801159c:	397b839a 	.word	0x397b839a
 80115a0:	3fe921fb 	.word	0x3fe921fb
 80115a4:	4002d97b 	.word	0x4002d97b
 80115a8:	3ff921fb 	.word	0x3ff921fb
 80115ac:	413921fb 	.word	0x413921fb
 80115b0:	3fe00000 	.word	0x3fe00000
 80115b4:	0803cf90 	.word	0x0803cf90
 80115b8:	7fefffff 	.word	0x7fefffff
 80115bc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80115c0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80115c4:	ee10 0a10 	vmov	r0, s0
 80115c8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80115cc:	ee10 6a10 	vmov	r6, s0
 80115d0:	460f      	mov	r7, r1
 80115d2:	f7ef fadb 	bl	8000b8c <__aeabi_d2iz>
 80115d6:	f7ee ffbf 	bl	8000558 <__aeabi_i2d>
 80115da:	4602      	mov	r2, r0
 80115dc:	460b      	mov	r3, r1
 80115de:	4630      	mov	r0, r6
 80115e0:	4639      	mov	r1, r7
 80115e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80115e6:	f7ee fe69 	bl	80002bc <__aeabi_dsub>
 80115ea:	4b23      	ldr	r3, [pc, #140]	; (8011678 <__ieee754_rem_pio2+0x410>)
 80115ec:	2200      	movs	r2, #0
 80115ee:	f7ef f81d 	bl	800062c <__aeabi_dmul>
 80115f2:	460f      	mov	r7, r1
 80115f4:	4606      	mov	r6, r0
 80115f6:	f7ef fac9 	bl	8000b8c <__aeabi_d2iz>
 80115fa:	f7ee ffad 	bl	8000558 <__aeabi_i2d>
 80115fe:	4602      	mov	r2, r0
 8011600:	460b      	mov	r3, r1
 8011602:	4630      	mov	r0, r6
 8011604:	4639      	mov	r1, r7
 8011606:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801160a:	f7ee fe57 	bl	80002bc <__aeabi_dsub>
 801160e:	4b1a      	ldr	r3, [pc, #104]	; (8011678 <__ieee754_rem_pio2+0x410>)
 8011610:	2200      	movs	r2, #0
 8011612:	f7ef f80b 	bl	800062c <__aeabi_dmul>
 8011616:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801161a:	ad04      	add	r5, sp, #16
 801161c:	f04f 0803 	mov.w	r8, #3
 8011620:	46a9      	mov	r9, r5
 8011622:	2600      	movs	r6, #0
 8011624:	2700      	movs	r7, #0
 8011626:	4632      	mov	r2, r6
 8011628:	463b      	mov	r3, r7
 801162a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801162e:	46c3      	mov	fp, r8
 8011630:	3d08      	subs	r5, #8
 8011632:	f108 38ff 	add.w	r8, r8, #4294967295
 8011636:	f7ef fa61 	bl	8000afc <__aeabi_dcmpeq>
 801163a:	2800      	cmp	r0, #0
 801163c:	d1f3      	bne.n	8011626 <__ieee754_rem_pio2+0x3be>
 801163e:	4b0f      	ldr	r3, [pc, #60]	; (801167c <__ieee754_rem_pio2+0x414>)
 8011640:	9301      	str	r3, [sp, #4]
 8011642:	2302      	movs	r3, #2
 8011644:	9300      	str	r3, [sp, #0]
 8011646:	4622      	mov	r2, r4
 8011648:	465b      	mov	r3, fp
 801164a:	4651      	mov	r1, sl
 801164c:	4648      	mov	r0, r9
 801164e:	f000 f993 	bl	8011978 <__kernel_rem_pio2>
 8011652:	9b02      	ldr	r3, [sp, #8]
 8011654:	2b00      	cmp	r3, #0
 8011656:	4683      	mov	fp, r0
 8011658:	f6bf ae46 	bge.w	80112e8 <__ieee754_rem_pio2+0x80>
 801165c:	e9da 2100 	ldrd	r2, r1, [sl]
 8011660:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011664:	e9ca 2300 	strd	r2, r3, [sl]
 8011668:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801166c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011670:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011674:	e73a      	b.n	80114ec <__ieee754_rem_pio2+0x284>
 8011676:	bf00      	nop
 8011678:	41700000 	.word	0x41700000
 801167c:	0803d010 	.word	0x0803d010

08011680 <__ieee754_sqrt>:
 8011680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011684:	ec55 4b10 	vmov	r4, r5, d0
 8011688:	4e55      	ldr	r6, [pc, #340]	; (80117e0 <__ieee754_sqrt+0x160>)
 801168a:	43ae      	bics	r6, r5
 801168c:	ee10 0a10 	vmov	r0, s0
 8011690:	ee10 3a10 	vmov	r3, s0
 8011694:	462a      	mov	r2, r5
 8011696:	4629      	mov	r1, r5
 8011698:	d110      	bne.n	80116bc <__ieee754_sqrt+0x3c>
 801169a:	ee10 2a10 	vmov	r2, s0
 801169e:	462b      	mov	r3, r5
 80116a0:	f7ee ffc4 	bl	800062c <__aeabi_dmul>
 80116a4:	4602      	mov	r2, r0
 80116a6:	460b      	mov	r3, r1
 80116a8:	4620      	mov	r0, r4
 80116aa:	4629      	mov	r1, r5
 80116ac:	f7ee fe08 	bl	80002c0 <__adddf3>
 80116b0:	4604      	mov	r4, r0
 80116b2:	460d      	mov	r5, r1
 80116b4:	ec45 4b10 	vmov	d0, r4, r5
 80116b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116bc:	2d00      	cmp	r5, #0
 80116be:	dc10      	bgt.n	80116e2 <__ieee754_sqrt+0x62>
 80116c0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80116c4:	4330      	orrs	r0, r6
 80116c6:	d0f5      	beq.n	80116b4 <__ieee754_sqrt+0x34>
 80116c8:	b15d      	cbz	r5, 80116e2 <__ieee754_sqrt+0x62>
 80116ca:	ee10 2a10 	vmov	r2, s0
 80116ce:	462b      	mov	r3, r5
 80116d0:	ee10 0a10 	vmov	r0, s0
 80116d4:	f7ee fdf2 	bl	80002bc <__aeabi_dsub>
 80116d8:	4602      	mov	r2, r0
 80116da:	460b      	mov	r3, r1
 80116dc:	f7ef f8d0 	bl	8000880 <__aeabi_ddiv>
 80116e0:	e7e6      	b.n	80116b0 <__ieee754_sqrt+0x30>
 80116e2:	1512      	asrs	r2, r2, #20
 80116e4:	d074      	beq.n	80117d0 <__ieee754_sqrt+0x150>
 80116e6:	07d4      	lsls	r4, r2, #31
 80116e8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80116ec:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80116f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80116f4:	bf5e      	ittt	pl
 80116f6:	0fda      	lsrpl	r2, r3, #31
 80116f8:	005b      	lslpl	r3, r3, #1
 80116fa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80116fe:	2400      	movs	r4, #0
 8011700:	0fda      	lsrs	r2, r3, #31
 8011702:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011706:	107f      	asrs	r7, r7, #1
 8011708:	005b      	lsls	r3, r3, #1
 801170a:	2516      	movs	r5, #22
 801170c:	4620      	mov	r0, r4
 801170e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011712:	1886      	adds	r6, r0, r2
 8011714:	428e      	cmp	r6, r1
 8011716:	bfde      	ittt	le
 8011718:	1b89      	suble	r1, r1, r6
 801171a:	18b0      	addle	r0, r6, r2
 801171c:	18a4      	addle	r4, r4, r2
 801171e:	0049      	lsls	r1, r1, #1
 8011720:	3d01      	subs	r5, #1
 8011722:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8011726:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801172a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801172e:	d1f0      	bne.n	8011712 <__ieee754_sqrt+0x92>
 8011730:	462a      	mov	r2, r5
 8011732:	f04f 0e20 	mov.w	lr, #32
 8011736:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801173a:	4281      	cmp	r1, r0
 801173c:	eb06 0c05 	add.w	ip, r6, r5
 8011740:	dc02      	bgt.n	8011748 <__ieee754_sqrt+0xc8>
 8011742:	d113      	bne.n	801176c <__ieee754_sqrt+0xec>
 8011744:	459c      	cmp	ip, r3
 8011746:	d811      	bhi.n	801176c <__ieee754_sqrt+0xec>
 8011748:	f1bc 0f00 	cmp.w	ip, #0
 801174c:	eb0c 0506 	add.w	r5, ip, r6
 8011750:	da43      	bge.n	80117da <__ieee754_sqrt+0x15a>
 8011752:	2d00      	cmp	r5, #0
 8011754:	db41      	blt.n	80117da <__ieee754_sqrt+0x15a>
 8011756:	f100 0801 	add.w	r8, r0, #1
 801175a:	1a09      	subs	r1, r1, r0
 801175c:	459c      	cmp	ip, r3
 801175e:	bf88      	it	hi
 8011760:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8011764:	eba3 030c 	sub.w	r3, r3, ip
 8011768:	4432      	add	r2, r6
 801176a:	4640      	mov	r0, r8
 801176c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011770:	f1be 0e01 	subs.w	lr, lr, #1
 8011774:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8011778:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801177c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011780:	d1db      	bne.n	801173a <__ieee754_sqrt+0xba>
 8011782:	430b      	orrs	r3, r1
 8011784:	d006      	beq.n	8011794 <__ieee754_sqrt+0x114>
 8011786:	1c50      	adds	r0, r2, #1
 8011788:	bf13      	iteet	ne
 801178a:	3201      	addne	r2, #1
 801178c:	3401      	addeq	r4, #1
 801178e:	4672      	moveq	r2, lr
 8011790:	f022 0201 	bicne.w	r2, r2, #1
 8011794:	1063      	asrs	r3, r4, #1
 8011796:	0852      	lsrs	r2, r2, #1
 8011798:	07e1      	lsls	r1, r4, #31
 801179a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801179e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80117a2:	bf48      	it	mi
 80117a4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80117a8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80117ac:	4614      	mov	r4, r2
 80117ae:	e781      	b.n	80116b4 <__ieee754_sqrt+0x34>
 80117b0:	0ad9      	lsrs	r1, r3, #11
 80117b2:	3815      	subs	r0, #21
 80117b4:	055b      	lsls	r3, r3, #21
 80117b6:	2900      	cmp	r1, #0
 80117b8:	d0fa      	beq.n	80117b0 <__ieee754_sqrt+0x130>
 80117ba:	02cd      	lsls	r5, r1, #11
 80117bc:	d50a      	bpl.n	80117d4 <__ieee754_sqrt+0x154>
 80117be:	f1c2 0420 	rsb	r4, r2, #32
 80117c2:	fa23 f404 	lsr.w	r4, r3, r4
 80117c6:	1e55      	subs	r5, r2, #1
 80117c8:	4093      	lsls	r3, r2
 80117ca:	4321      	orrs	r1, r4
 80117cc:	1b42      	subs	r2, r0, r5
 80117ce:	e78a      	b.n	80116e6 <__ieee754_sqrt+0x66>
 80117d0:	4610      	mov	r0, r2
 80117d2:	e7f0      	b.n	80117b6 <__ieee754_sqrt+0x136>
 80117d4:	0049      	lsls	r1, r1, #1
 80117d6:	3201      	adds	r2, #1
 80117d8:	e7ef      	b.n	80117ba <__ieee754_sqrt+0x13a>
 80117da:	4680      	mov	r8, r0
 80117dc:	e7bd      	b.n	801175a <__ieee754_sqrt+0xda>
 80117de:	bf00      	nop
 80117e0:	7ff00000 	.word	0x7ff00000
 80117e4:	00000000 	.word	0x00000000

080117e8 <__kernel_cos>:
 80117e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ec:	ec57 6b10 	vmov	r6, r7, d0
 80117f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80117f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80117f8:	ed8d 1b00 	vstr	d1, [sp]
 80117fc:	da07      	bge.n	801180e <__kernel_cos+0x26>
 80117fe:	ee10 0a10 	vmov	r0, s0
 8011802:	4639      	mov	r1, r7
 8011804:	f7ef f9c2 	bl	8000b8c <__aeabi_d2iz>
 8011808:	2800      	cmp	r0, #0
 801180a:	f000 8088 	beq.w	801191e <__kernel_cos+0x136>
 801180e:	4632      	mov	r2, r6
 8011810:	463b      	mov	r3, r7
 8011812:	4630      	mov	r0, r6
 8011814:	4639      	mov	r1, r7
 8011816:	f7ee ff09 	bl	800062c <__aeabi_dmul>
 801181a:	4b51      	ldr	r3, [pc, #324]	; (8011960 <__kernel_cos+0x178>)
 801181c:	2200      	movs	r2, #0
 801181e:	4604      	mov	r4, r0
 8011820:	460d      	mov	r5, r1
 8011822:	f7ee ff03 	bl	800062c <__aeabi_dmul>
 8011826:	a340      	add	r3, pc, #256	; (adr r3, 8011928 <__kernel_cos+0x140>)
 8011828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182c:	4682      	mov	sl, r0
 801182e:	468b      	mov	fp, r1
 8011830:	4620      	mov	r0, r4
 8011832:	4629      	mov	r1, r5
 8011834:	f7ee fefa 	bl	800062c <__aeabi_dmul>
 8011838:	a33d      	add	r3, pc, #244	; (adr r3, 8011930 <__kernel_cos+0x148>)
 801183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801183e:	f7ee fd3f 	bl	80002c0 <__adddf3>
 8011842:	4622      	mov	r2, r4
 8011844:	462b      	mov	r3, r5
 8011846:	f7ee fef1 	bl	800062c <__aeabi_dmul>
 801184a:	a33b      	add	r3, pc, #236	; (adr r3, 8011938 <__kernel_cos+0x150>)
 801184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011850:	f7ee fd34 	bl	80002bc <__aeabi_dsub>
 8011854:	4622      	mov	r2, r4
 8011856:	462b      	mov	r3, r5
 8011858:	f7ee fee8 	bl	800062c <__aeabi_dmul>
 801185c:	a338      	add	r3, pc, #224	; (adr r3, 8011940 <__kernel_cos+0x158>)
 801185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011862:	f7ee fd2d 	bl	80002c0 <__adddf3>
 8011866:	4622      	mov	r2, r4
 8011868:	462b      	mov	r3, r5
 801186a:	f7ee fedf 	bl	800062c <__aeabi_dmul>
 801186e:	a336      	add	r3, pc, #216	; (adr r3, 8011948 <__kernel_cos+0x160>)
 8011870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011874:	f7ee fd22 	bl	80002bc <__aeabi_dsub>
 8011878:	4622      	mov	r2, r4
 801187a:	462b      	mov	r3, r5
 801187c:	f7ee fed6 	bl	800062c <__aeabi_dmul>
 8011880:	a333      	add	r3, pc, #204	; (adr r3, 8011950 <__kernel_cos+0x168>)
 8011882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011886:	f7ee fd1b 	bl	80002c0 <__adddf3>
 801188a:	4622      	mov	r2, r4
 801188c:	462b      	mov	r3, r5
 801188e:	f7ee fecd 	bl	800062c <__aeabi_dmul>
 8011892:	4622      	mov	r2, r4
 8011894:	462b      	mov	r3, r5
 8011896:	f7ee fec9 	bl	800062c <__aeabi_dmul>
 801189a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801189e:	4604      	mov	r4, r0
 80118a0:	460d      	mov	r5, r1
 80118a2:	4630      	mov	r0, r6
 80118a4:	4639      	mov	r1, r7
 80118a6:	f7ee fec1 	bl	800062c <__aeabi_dmul>
 80118aa:	460b      	mov	r3, r1
 80118ac:	4602      	mov	r2, r0
 80118ae:	4629      	mov	r1, r5
 80118b0:	4620      	mov	r0, r4
 80118b2:	f7ee fd03 	bl	80002bc <__aeabi_dsub>
 80118b6:	4b2b      	ldr	r3, [pc, #172]	; (8011964 <__kernel_cos+0x17c>)
 80118b8:	4598      	cmp	r8, r3
 80118ba:	4606      	mov	r6, r0
 80118bc:	460f      	mov	r7, r1
 80118be:	dc10      	bgt.n	80118e2 <__kernel_cos+0xfa>
 80118c0:	4602      	mov	r2, r0
 80118c2:	460b      	mov	r3, r1
 80118c4:	4650      	mov	r0, sl
 80118c6:	4659      	mov	r1, fp
 80118c8:	f7ee fcf8 	bl	80002bc <__aeabi_dsub>
 80118cc:	460b      	mov	r3, r1
 80118ce:	4926      	ldr	r1, [pc, #152]	; (8011968 <__kernel_cos+0x180>)
 80118d0:	4602      	mov	r2, r0
 80118d2:	2000      	movs	r0, #0
 80118d4:	f7ee fcf2 	bl	80002bc <__aeabi_dsub>
 80118d8:	ec41 0b10 	vmov	d0, r0, r1
 80118dc:	b003      	add	sp, #12
 80118de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118e2:	4b22      	ldr	r3, [pc, #136]	; (801196c <__kernel_cos+0x184>)
 80118e4:	4920      	ldr	r1, [pc, #128]	; (8011968 <__kernel_cos+0x180>)
 80118e6:	4598      	cmp	r8, r3
 80118e8:	bfcc      	ite	gt
 80118ea:	4d21      	ldrgt	r5, [pc, #132]	; (8011970 <__kernel_cos+0x188>)
 80118ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80118f0:	2400      	movs	r4, #0
 80118f2:	4622      	mov	r2, r4
 80118f4:	462b      	mov	r3, r5
 80118f6:	2000      	movs	r0, #0
 80118f8:	f7ee fce0 	bl	80002bc <__aeabi_dsub>
 80118fc:	4622      	mov	r2, r4
 80118fe:	4680      	mov	r8, r0
 8011900:	4689      	mov	r9, r1
 8011902:	462b      	mov	r3, r5
 8011904:	4650      	mov	r0, sl
 8011906:	4659      	mov	r1, fp
 8011908:	f7ee fcd8 	bl	80002bc <__aeabi_dsub>
 801190c:	4632      	mov	r2, r6
 801190e:	463b      	mov	r3, r7
 8011910:	f7ee fcd4 	bl	80002bc <__aeabi_dsub>
 8011914:	4602      	mov	r2, r0
 8011916:	460b      	mov	r3, r1
 8011918:	4640      	mov	r0, r8
 801191a:	4649      	mov	r1, r9
 801191c:	e7da      	b.n	80118d4 <__kernel_cos+0xec>
 801191e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011958 <__kernel_cos+0x170>
 8011922:	e7db      	b.n	80118dc <__kernel_cos+0xf4>
 8011924:	f3af 8000 	nop.w
 8011928:	be8838d4 	.word	0xbe8838d4
 801192c:	bda8fae9 	.word	0xbda8fae9
 8011930:	bdb4b1c4 	.word	0xbdb4b1c4
 8011934:	3e21ee9e 	.word	0x3e21ee9e
 8011938:	809c52ad 	.word	0x809c52ad
 801193c:	3e927e4f 	.word	0x3e927e4f
 8011940:	19cb1590 	.word	0x19cb1590
 8011944:	3efa01a0 	.word	0x3efa01a0
 8011948:	16c15177 	.word	0x16c15177
 801194c:	3f56c16c 	.word	0x3f56c16c
 8011950:	5555554c 	.word	0x5555554c
 8011954:	3fa55555 	.word	0x3fa55555
 8011958:	00000000 	.word	0x00000000
 801195c:	3ff00000 	.word	0x3ff00000
 8011960:	3fe00000 	.word	0x3fe00000
 8011964:	3fd33332 	.word	0x3fd33332
 8011968:	3ff00000 	.word	0x3ff00000
 801196c:	3fe90000 	.word	0x3fe90000
 8011970:	3fd20000 	.word	0x3fd20000
 8011974:	00000000 	.word	0x00000000

08011978 <__kernel_rem_pio2>:
 8011978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801197c:	ed2d 8b02 	vpush	{d8}
 8011980:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011984:	f112 0f14 	cmn.w	r2, #20
 8011988:	9308      	str	r3, [sp, #32]
 801198a:	9101      	str	r1, [sp, #4]
 801198c:	4bc4      	ldr	r3, [pc, #784]	; (8011ca0 <__kernel_rem_pio2+0x328>)
 801198e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011990:	900b      	str	r0, [sp, #44]	; 0x2c
 8011992:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011996:	9302      	str	r3, [sp, #8]
 8011998:	9b08      	ldr	r3, [sp, #32]
 801199a:	f103 33ff 	add.w	r3, r3, #4294967295
 801199e:	bfa8      	it	ge
 80119a0:	1ed4      	subge	r4, r2, #3
 80119a2:	9306      	str	r3, [sp, #24]
 80119a4:	bfb2      	itee	lt
 80119a6:	2400      	movlt	r4, #0
 80119a8:	2318      	movge	r3, #24
 80119aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80119ae:	f06f 0317 	mvn.w	r3, #23
 80119b2:	fb04 3303 	mla	r3, r4, r3, r3
 80119b6:	eb03 0a02 	add.w	sl, r3, r2
 80119ba:	9b02      	ldr	r3, [sp, #8]
 80119bc:	9a06      	ldr	r2, [sp, #24]
 80119be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011c90 <__kernel_rem_pio2+0x318>
 80119c2:	eb03 0802 	add.w	r8, r3, r2
 80119c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80119c8:	1aa7      	subs	r7, r4, r2
 80119ca:	ae22      	add	r6, sp, #136	; 0x88
 80119cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80119d0:	2500      	movs	r5, #0
 80119d2:	4545      	cmp	r5, r8
 80119d4:	dd13      	ble.n	80119fe <__kernel_rem_pio2+0x86>
 80119d6:	9b08      	ldr	r3, [sp, #32]
 80119d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011c90 <__kernel_rem_pio2+0x318>
 80119dc:	aa22      	add	r2, sp, #136	; 0x88
 80119de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80119e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80119e6:	f04f 0800 	mov.w	r8, #0
 80119ea:	9b02      	ldr	r3, [sp, #8]
 80119ec:	4598      	cmp	r8, r3
 80119ee:	dc2f      	bgt.n	8011a50 <__kernel_rem_pio2+0xd8>
 80119f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80119f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80119f8:	462f      	mov	r7, r5
 80119fa:	2600      	movs	r6, #0
 80119fc:	e01b      	b.n	8011a36 <__kernel_rem_pio2+0xbe>
 80119fe:	42ef      	cmn	r7, r5
 8011a00:	d407      	bmi.n	8011a12 <__kernel_rem_pio2+0x9a>
 8011a02:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011a06:	f7ee fda7 	bl	8000558 <__aeabi_i2d>
 8011a0a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011a0e:	3501      	adds	r5, #1
 8011a10:	e7df      	b.n	80119d2 <__kernel_rem_pio2+0x5a>
 8011a12:	ec51 0b18 	vmov	r0, r1, d8
 8011a16:	e7f8      	b.n	8011a0a <__kernel_rem_pio2+0x92>
 8011a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a1c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011a20:	f7ee fe04 	bl	800062c <__aeabi_dmul>
 8011a24:	4602      	mov	r2, r0
 8011a26:	460b      	mov	r3, r1
 8011a28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a2c:	f7ee fc48 	bl	80002c0 <__adddf3>
 8011a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a34:	3601      	adds	r6, #1
 8011a36:	9b06      	ldr	r3, [sp, #24]
 8011a38:	429e      	cmp	r6, r3
 8011a3a:	f1a7 0708 	sub.w	r7, r7, #8
 8011a3e:	ddeb      	ble.n	8011a18 <__kernel_rem_pio2+0xa0>
 8011a40:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011a44:	f108 0801 	add.w	r8, r8, #1
 8011a48:	ecab 7b02 	vstmia	fp!, {d7}
 8011a4c:	3508      	adds	r5, #8
 8011a4e:	e7cc      	b.n	80119ea <__kernel_rem_pio2+0x72>
 8011a50:	9b02      	ldr	r3, [sp, #8]
 8011a52:	aa0e      	add	r2, sp, #56	; 0x38
 8011a54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a58:	930d      	str	r3, [sp, #52]	; 0x34
 8011a5a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011a5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011a60:	9c02      	ldr	r4, [sp, #8]
 8011a62:	930c      	str	r3, [sp, #48]	; 0x30
 8011a64:	00e3      	lsls	r3, r4, #3
 8011a66:	930a      	str	r3, [sp, #40]	; 0x28
 8011a68:	ab9a      	add	r3, sp, #616	; 0x268
 8011a6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011a6e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011a72:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8011a76:	ab72      	add	r3, sp, #456	; 0x1c8
 8011a78:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8011a7c:	46c3      	mov	fp, r8
 8011a7e:	46a1      	mov	r9, r4
 8011a80:	f1b9 0f00 	cmp.w	r9, #0
 8011a84:	f1a5 0508 	sub.w	r5, r5, #8
 8011a88:	dc77      	bgt.n	8011b7a <__kernel_rem_pio2+0x202>
 8011a8a:	ec47 6b10 	vmov	d0, r6, r7
 8011a8e:	4650      	mov	r0, sl
 8011a90:	f000 fe5a 	bl	8012748 <scalbn>
 8011a94:	ec57 6b10 	vmov	r6, r7, d0
 8011a98:	2200      	movs	r2, #0
 8011a9a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011a9e:	ee10 0a10 	vmov	r0, s0
 8011aa2:	4639      	mov	r1, r7
 8011aa4:	f7ee fdc2 	bl	800062c <__aeabi_dmul>
 8011aa8:	ec41 0b10 	vmov	d0, r0, r1
 8011aac:	f000 fdc4 	bl	8012638 <floor>
 8011ab0:	4b7c      	ldr	r3, [pc, #496]	; (8011ca4 <__kernel_rem_pio2+0x32c>)
 8011ab2:	ec51 0b10 	vmov	r0, r1, d0
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	f7ee fdb8 	bl	800062c <__aeabi_dmul>
 8011abc:	4602      	mov	r2, r0
 8011abe:	460b      	mov	r3, r1
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	4639      	mov	r1, r7
 8011ac4:	f7ee fbfa 	bl	80002bc <__aeabi_dsub>
 8011ac8:	460f      	mov	r7, r1
 8011aca:	4606      	mov	r6, r0
 8011acc:	f7ef f85e 	bl	8000b8c <__aeabi_d2iz>
 8011ad0:	9004      	str	r0, [sp, #16]
 8011ad2:	f7ee fd41 	bl	8000558 <__aeabi_i2d>
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	460b      	mov	r3, r1
 8011ada:	4630      	mov	r0, r6
 8011adc:	4639      	mov	r1, r7
 8011ade:	f7ee fbed 	bl	80002bc <__aeabi_dsub>
 8011ae2:	f1ba 0f00 	cmp.w	sl, #0
 8011ae6:	4606      	mov	r6, r0
 8011ae8:	460f      	mov	r7, r1
 8011aea:	dd6d      	ble.n	8011bc8 <__kernel_rem_pio2+0x250>
 8011aec:	1e62      	subs	r2, r4, #1
 8011aee:	ab0e      	add	r3, sp, #56	; 0x38
 8011af0:	9d04      	ldr	r5, [sp, #16]
 8011af2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011af6:	f1ca 0118 	rsb	r1, sl, #24
 8011afa:	fa40 f301 	asr.w	r3, r0, r1
 8011afe:	441d      	add	r5, r3
 8011b00:	408b      	lsls	r3, r1
 8011b02:	1ac0      	subs	r0, r0, r3
 8011b04:	ab0e      	add	r3, sp, #56	; 0x38
 8011b06:	9504      	str	r5, [sp, #16]
 8011b08:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011b0c:	f1ca 0317 	rsb	r3, sl, #23
 8011b10:	fa40 fb03 	asr.w	fp, r0, r3
 8011b14:	f1bb 0f00 	cmp.w	fp, #0
 8011b18:	dd65      	ble.n	8011be6 <__kernel_rem_pio2+0x26e>
 8011b1a:	9b04      	ldr	r3, [sp, #16]
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	3301      	adds	r3, #1
 8011b20:	9304      	str	r3, [sp, #16]
 8011b22:	4615      	mov	r5, r2
 8011b24:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011b28:	4294      	cmp	r4, r2
 8011b2a:	f300 809c 	bgt.w	8011c66 <__kernel_rem_pio2+0x2ee>
 8011b2e:	f1ba 0f00 	cmp.w	sl, #0
 8011b32:	dd07      	ble.n	8011b44 <__kernel_rem_pio2+0x1cc>
 8011b34:	f1ba 0f01 	cmp.w	sl, #1
 8011b38:	f000 80c0 	beq.w	8011cbc <__kernel_rem_pio2+0x344>
 8011b3c:	f1ba 0f02 	cmp.w	sl, #2
 8011b40:	f000 80c6 	beq.w	8011cd0 <__kernel_rem_pio2+0x358>
 8011b44:	f1bb 0f02 	cmp.w	fp, #2
 8011b48:	d14d      	bne.n	8011be6 <__kernel_rem_pio2+0x26e>
 8011b4a:	4632      	mov	r2, r6
 8011b4c:	463b      	mov	r3, r7
 8011b4e:	4956      	ldr	r1, [pc, #344]	; (8011ca8 <__kernel_rem_pio2+0x330>)
 8011b50:	2000      	movs	r0, #0
 8011b52:	f7ee fbb3 	bl	80002bc <__aeabi_dsub>
 8011b56:	4606      	mov	r6, r0
 8011b58:	460f      	mov	r7, r1
 8011b5a:	2d00      	cmp	r5, #0
 8011b5c:	d043      	beq.n	8011be6 <__kernel_rem_pio2+0x26e>
 8011b5e:	4650      	mov	r0, sl
 8011b60:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011c98 <__kernel_rem_pio2+0x320>
 8011b64:	f000 fdf0 	bl	8012748 <scalbn>
 8011b68:	4630      	mov	r0, r6
 8011b6a:	4639      	mov	r1, r7
 8011b6c:	ec53 2b10 	vmov	r2, r3, d0
 8011b70:	f7ee fba4 	bl	80002bc <__aeabi_dsub>
 8011b74:	4606      	mov	r6, r0
 8011b76:	460f      	mov	r7, r1
 8011b78:	e035      	b.n	8011be6 <__kernel_rem_pio2+0x26e>
 8011b7a:	4b4c      	ldr	r3, [pc, #304]	; (8011cac <__kernel_rem_pio2+0x334>)
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	4630      	mov	r0, r6
 8011b80:	4639      	mov	r1, r7
 8011b82:	f7ee fd53 	bl	800062c <__aeabi_dmul>
 8011b86:	f7ef f801 	bl	8000b8c <__aeabi_d2iz>
 8011b8a:	f7ee fce5 	bl	8000558 <__aeabi_i2d>
 8011b8e:	4602      	mov	r2, r0
 8011b90:	460b      	mov	r3, r1
 8011b92:	ec43 2b18 	vmov	d8, r2, r3
 8011b96:	4b46      	ldr	r3, [pc, #280]	; (8011cb0 <__kernel_rem_pio2+0x338>)
 8011b98:	2200      	movs	r2, #0
 8011b9a:	f7ee fd47 	bl	800062c <__aeabi_dmul>
 8011b9e:	4602      	mov	r2, r0
 8011ba0:	460b      	mov	r3, r1
 8011ba2:	4630      	mov	r0, r6
 8011ba4:	4639      	mov	r1, r7
 8011ba6:	f7ee fb89 	bl	80002bc <__aeabi_dsub>
 8011baa:	f7ee ffef 	bl	8000b8c <__aeabi_d2iz>
 8011bae:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011bb2:	f84b 0b04 	str.w	r0, [fp], #4
 8011bb6:	ec51 0b18 	vmov	r0, r1, d8
 8011bba:	f7ee fb81 	bl	80002c0 <__adddf3>
 8011bbe:	f109 39ff 	add.w	r9, r9, #4294967295
 8011bc2:	4606      	mov	r6, r0
 8011bc4:	460f      	mov	r7, r1
 8011bc6:	e75b      	b.n	8011a80 <__kernel_rem_pio2+0x108>
 8011bc8:	d106      	bne.n	8011bd8 <__kernel_rem_pio2+0x260>
 8011bca:	1e63      	subs	r3, r4, #1
 8011bcc:	aa0e      	add	r2, sp, #56	; 0x38
 8011bce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011bd2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8011bd6:	e79d      	b.n	8011b14 <__kernel_rem_pio2+0x19c>
 8011bd8:	4b36      	ldr	r3, [pc, #216]	; (8011cb4 <__kernel_rem_pio2+0x33c>)
 8011bda:	2200      	movs	r2, #0
 8011bdc:	f7ee ffac 	bl	8000b38 <__aeabi_dcmpge>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d13d      	bne.n	8011c60 <__kernel_rem_pio2+0x2e8>
 8011be4:	4683      	mov	fp, r0
 8011be6:	2200      	movs	r2, #0
 8011be8:	2300      	movs	r3, #0
 8011bea:	4630      	mov	r0, r6
 8011bec:	4639      	mov	r1, r7
 8011bee:	f7ee ff85 	bl	8000afc <__aeabi_dcmpeq>
 8011bf2:	2800      	cmp	r0, #0
 8011bf4:	f000 80c0 	beq.w	8011d78 <__kernel_rem_pio2+0x400>
 8011bf8:	1e65      	subs	r5, r4, #1
 8011bfa:	462b      	mov	r3, r5
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	9902      	ldr	r1, [sp, #8]
 8011c00:	428b      	cmp	r3, r1
 8011c02:	da6c      	bge.n	8011cde <__kernel_rem_pio2+0x366>
 8011c04:	2a00      	cmp	r2, #0
 8011c06:	f000 8089 	beq.w	8011d1c <__kernel_rem_pio2+0x3a4>
 8011c0a:	ab0e      	add	r3, sp, #56	; 0x38
 8011c0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8011c10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	f000 80ad 	beq.w	8011d74 <__kernel_rem_pio2+0x3fc>
 8011c1a:	4650      	mov	r0, sl
 8011c1c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011c98 <__kernel_rem_pio2+0x320>
 8011c20:	f000 fd92 	bl	8012748 <scalbn>
 8011c24:	ab9a      	add	r3, sp, #616	; 0x268
 8011c26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011c2a:	ec57 6b10 	vmov	r6, r7, d0
 8011c2e:	00ec      	lsls	r4, r5, #3
 8011c30:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8011c34:	46aa      	mov	sl, r5
 8011c36:	f1ba 0f00 	cmp.w	sl, #0
 8011c3a:	f280 80d6 	bge.w	8011dea <__kernel_rem_pio2+0x472>
 8011c3e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011c90 <__kernel_rem_pio2+0x318>
 8011c42:	462e      	mov	r6, r5
 8011c44:	2e00      	cmp	r6, #0
 8011c46:	f2c0 8104 	blt.w	8011e52 <__kernel_rem_pio2+0x4da>
 8011c4a:	ab72      	add	r3, sp, #456	; 0x1c8
 8011c4c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011c50:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011cb8 <__kernel_rem_pio2+0x340>
 8011c54:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011c58:	f04f 0800 	mov.w	r8, #0
 8011c5c:	1baf      	subs	r7, r5, r6
 8011c5e:	e0ea      	b.n	8011e36 <__kernel_rem_pio2+0x4be>
 8011c60:	f04f 0b02 	mov.w	fp, #2
 8011c64:	e759      	b.n	8011b1a <__kernel_rem_pio2+0x1a2>
 8011c66:	f8d8 3000 	ldr.w	r3, [r8]
 8011c6a:	b955      	cbnz	r5, 8011c82 <__kernel_rem_pio2+0x30a>
 8011c6c:	b123      	cbz	r3, 8011c78 <__kernel_rem_pio2+0x300>
 8011c6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011c72:	f8c8 3000 	str.w	r3, [r8]
 8011c76:	2301      	movs	r3, #1
 8011c78:	3201      	adds	r2, #1
 8011c7a:	f108 0804 	add.w	r8, r8, #4
 8011c7e:	461d      	mov	r5, r3
 8011c80:	e752      	b.n	8011b28 <__kernel_rem_pio2+0x1b0>
 8011c82:	1acb      	subs	r3, r1, r3
 8011c84:	f8c8 3000 	str.w	r3, [r8]
 8011c88:	462b      	mov	r3, r5
 8011c8a:	e7f5      	b.n	8011c78 <__kernel_rem_pio2+0x300>
 8011c8c:	f3af 8000 	nop.w
	...
 8011c9c:	3ff00000 	.word	0x3ff00000
 8011ca0:	0803d158 	.word	0x0803d158
 8011ca4:	40200000 	.word	0x40200000
 8011ca8:	3ff00000 	.word	0x3ff00000
 8011cac:	3e700000 	.word	0x3e700000
 8011cb0:	41700000 	.word	0x41700000
 8011cb4:	3fe00000 	.word	0x3fe00000
 8011cb8:	0803d118 	.word	0x0803d118
 8011cbc:	1e62      	subs	r2, r4, #1
 8011cbe:	ab0e      	add	r3, sp, #56	; 0x38
 8011cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cc4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011cc8:	a90e      	add	r1, sp, #56	; 0x38
 8011cca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011cce:	e739      	b.n	8011b44 <__kernel_rem_pio2+0x1cc>
 8011cd0:	1e62      	subs	r2, r4, #1
 8011cd2:	ab0e      	add	r3, sp, #56	; 0x38
 8011cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cd8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011cdc:	e7f4      	b.n	8011cc8 <__kernel_rem_pio2+0x350>
 8011cde:	a90e      	add	r1, sp, #56	; 0x38
 8011ce0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011ce4:	3b01      	subs	r3, #1
 8011ce6:	430a      	orrs	r2, r1
 8011ce8:	e789      	b.n	8011bfe <__kernel_rem_pio2+0x286>
 8011cea:	3301      	adds	r3, #1
 8011cec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011cf0:	2900      	cmp	r1, #0
 8011cf2:	d0fa      	beq.n	8011cea <__kernel_rem_pio2+0x372>
 8011cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cf6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011cfa:	446a      	add	r2, sp
 8011cfc:	3a98      	subs	r2, #152	; 0x98
 8011cfe:	920a      	str	r2, [sp, #40]	; 0x28
 8011d00:	9a08      	ldr	r2, [sp, #32]
 8011d02:	18e3      	adds	r3, r4, r3
 8011d04:	18a5      	adds	r5, r4, r2
 8011d06:	aa22      	add	r2, sp, #136	; 0x88
 8011d08:	f104 0801 	add.w	r8, r4, #1
 8011d0c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011d10:	9304      	str	r3, [sp, #16]
 8011d12:	9b04      	ldr	r3, [sp, #16]
 8011d14:	4543      	cmp	r3, r8
 8011d16:	da04      	bge.n	8011d22 <__kernel_rem_pio2+0x3aa>
 8011d18:	461c      	mov	r4, r3
 8011d1a:	e6a3      	b.n	8011a64 <__kernel_rem_pio2+0xec>
 8011d1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011d1e:	2301      	movs	r3, #1
 8011d20:	e7e4      	b.n	8011cec <__kernel_rem_pio2+0x374>
 8011d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011d28:	f7ee fc16 	bl	8000558 <__aeabi_i2d>
 8011d2c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d32:	46ab      	mov	fp, r5
 8011d34:	461c      	mov	r4, r3
 8011d36:	f04f 0900 	mov.w	r9, #0
 8011d3a:	2600      	movs	r6, #0
 8011d3c:	2700      	movs	r7, #0
 8011d3e:	9b06      	ldr	r3, [sp, #24]
 8011d40:	4599      	cmp	r9, r3
 8011d42:	dd06      	ble.n	8011d52 <__kernel_rem_pio2+0x3da>
 8011d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d46:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011d4a:	f108 0801 	add.w	r8, r8, #1
 8011d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8011d50:	e7df      	b.n	8011d12 <__kernel_rem_pio2+0x39a>
 8011d52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011d56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011d5a:	f7ee fc67 	bl	800062c <__aeabi_dmul>
 8011d5e:	4602      	mov	r2, r0
 8011d60:	460b      	mov	r3, r1
 8011d62:	4630      	mov	r0, r6
 8011d64:	4639      	mov	r1, r7
 8011d66:	f7ee faab 	bl	80002c0 <__adddf3>
 8011d6a:	f109 0901 	add.w	r9, r9, #1
 8011d6e:	4606      	mov	r6, r0
 8011d70:	460f      	mov	r7, r1
 8011d72:	e7e4      	b.n	8011d3e <__kernel_rem_pio2+0x3c6>
 8011d74:	3d01      	subs	r5, #1
 8011d76:	e748      	b.n	8011c0a <__kernel_rem_pio2+0x292>
 8011d78:	ec47 6b10 	vmov	d0, r6, r7
 8011d7c:	f1ca 0000 	rsb	r0, sl, #0
 8011d80:	f000 fce2 	bl	8012748 <scalbn>
 8011d84:	ec57 6b10 	vmov	r6, r7, d0
 8011d88:	4ba0      	ldr	r3, [pc, #640]	; (801200c <__kernel_rem_pio2+0x694>)
 8011d8a:	ee10 0a10 	vmov	r0, s0
 8011d8e:	2200      	movs	r2, #0
 8011d90:	4639      	mov	r1, r7
 8011d92:	f7ee fed1 	bl	8000b38 <__aeabi_dcmpge>
 8011d96:	b1f8      	cbz	r0, 8011dd8 <__kernel_rem_pio2+0x460>
 8011d98:	4b9d      	ldr	r3, [pc, #628]	; (8012010 <__kernel_rem_pio2+0x698>)
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	4630      	mov	r0, r6
 8011d9e:	4639      	mov	r1, r7
 8011da0:	f7ee fc44 	bl	800062c <__aeabi_dmul>
 8011da4:	f7ee fef2 	bl	8000b8c <__aeabi_d2iz>
 8011da8:	4680      	mov	r8, r0
 8011daa:	f7ee fbd5 	bl	8000558 <__aeabi_i2d>
 8011dae:	4b97      	ldr	r3, [pc, #604]	; (801200c <__kernel_rem_pio2+0x694>)
 8011db0:	2200      	movs	r2, #0
 8011db2:	f7ee fc3b 	bl	800062c <__aeabi_dmul>
 8011db6:	460b      	mov	r3, r1
 8011db8:	4602      	mov	r2, r0
 8011dba:	4639      	mov	r1, r7
 8011dbc:	4630      	mov	r0, r6
 8011dbe:	f7ee fa7d 	bl	80002bc <__aeabi_dsub>
 8011dc2:	f7ee fee3 	bl	8000b8c <__aeabi_d2iz>
 8011dc6:	1c65      	adds	r5, r4, #1
 8011dc8:	ab0e      	add	r3, sp, #56	; 0x38
 8011dca:	f10a 0a18 	add.w	sl, sl, #24
 8011dce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011dd2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011dd6:	e720      	b.n	8011c1a <__kernel_rem_pio2+0x2a2>
 8011dd8:	4630      	mov	r0, r6
 8011dda:	4639      	mov	r1, r7
 8011ddc:	f7ee fed6 	bl	8000b8c <__aeabi_d2iz>
 8011de0:	ab0e      	add	r3, sp, #56	; 0x38
 8011de2:	4625      	mov	r5, r4
 8011de4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011de8:	e717      	b.n	8011c1a <__kernel_rem_pio2+0x2a2>
 8011dea:	ab0e      	add	r3, sp, #56	; 0x38
 8011dec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011df0:	f7ee fbb2 	bl	8000558 <__aeabi_i2d>
 8011df4:	4632      	mov	r2, r6
 8011df6:	463b      	mov	r3, r7
 8011df8:	f7ee fc18 	bl	800062c <__aeabi_dmul>
 8011dfc:	4b84      	ldr	r3, [pc, #528]	; (8012010 <__kernel_rem_pio2+0x698>)
 8011dfe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8011e02:	2200      	movs	r2, #0
 8011e04:	4630      	mov	r0, r6
 8011e06:	4639      	mov	r1, r7
 8011e08:	f7ee fc10 	bl	800062c <__aeabi_dmul>
 8011e0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011e10:	4606      	mov	r6, r0
 8011e12:	460f      	mov	r7, r1
 8011e14:	e70f      	b.n	8011c36 <__kernel_rem_pio2+0x2be>
 8011e16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011e1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011e1e:	f7ee fc05 	bl	800062c <__aeabi_dmul>
 8011e22:	4602      	mov	r2, r0
 8011e24:	460b      	mov	r3, r1
 8011e26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011e2a:	f7ee fa49 	bl	80002c0 <__adddf3>
 8011e2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011e32:	f108 0801 	add.w	r8, r8, #1
 8011e36:	9b02      	ldr	r3, [sp, #8]
 8011e38:	4598      	cmp	r8, r3
 8011e3a:	dc01      	bgt.n	8011e40 <__kernel_rem_pio2+0x4c8>
 8011e3c:	45b8      	cmp	r8, r7
 8011e3e:	ddea      	ble.n	8011e16 <__kernel_rem_pio2+0x49e>
 8011e40:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011e44:	ab4a      	add	r3, sp, #296	; 0x128
 8011e46:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011e4a:	ed87 7b00 	vstr	d7, [r7]
 8011e4e:	3e01      	subs	r6, #1
 8011e50:	e6f8      	b.n	8011c44 <__kernel_rem_pio2+0x2cc>
 8011e52:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011e54:	2b02      	cmp	r3, #2
 8011e56:	dc0b      	bgt.n	8011e70 <__kernel_rem_pio2+0x4f8>
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	dc35      	bgt.n	8011ec8 <__kernel_rem_pio2+0x550>
 8011e5c:	d059      	beq.n	8011f12 <__kernel_rem_pio2+0x59a>
 8011e5e:	9b04      	ldr	r3, [sp, #16]
 8011e60:	f003 0007 	and.w	r0, r3, #7
 8011e64:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011e68:	ecbd 8b02 	vpop	{d8}
 8011e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e70:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011e72:	2b03      	cmp	r3, #3
 8011e74:	d1f3      	bne.n	8011e5e <__kernel_rem_pio2+0x4e6>
 8011e76:	ab4a      	add	r3, sp, #296	; 0x128
 8011e78:	4423      	add	r3, r4
 8011e7a:	9306      	str	r3, [sp, #24]
 8011e7c:	461c      	mov	r4, r3
 8011e7e:	469a      	mov	sl, r3
 8011e80:	9502      	str	r5, [sp, #8]
 8011e82:	9b02      	ldr	r3, [sp, #8]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	f1aa 0a08 	sub.w	sl, sl, #8
 8011e8a:	dc6b      	bgt.n	8011f64 <__kernel_rem_pio2+0x5ec>
 8011e8c:	46aa      	mov	sl, r5
 8011e8e:	f1ba 0f01 	cmp.w	sl, #1
 8011e92:	f1a4 0408 	sub.w	r4, r4, #8
 8011e96:	f300 8085 	bgt.w	8011fa4 <__kernel_rem_pio2+0x62c>
 8011e9a:	9c06      	ldr	r4, [sp, #24]
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	3408      	adds	r4, #8
 8011ea0:	2100      	movs	r1, #0
 8011ea2:	2d01      	cmp	r5, #1
 8011ea4:	f300 809d 	bgt.w	8011fe2 <__kernel_rem_pio2+0x66a>
 8011ea8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011eac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8011eb0:	f1bb 0f00 	cmp.w	fp, #0
 8011eb4:	f040 809b 	bne.w	8011fee <__kernel_rem_pio2+0x676>
 8011eb8:	9b01      	ldr	r3, [sp, #4]
 8011eba:	e9c3 5600 	strd	r5, r6, [r3]
 8011ebe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011ec2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011ec6:	e7ca      	b.n	8011e5e <__kernel_rem_pio2+0x4e6>
 8011ec8:	3408      	adds	r4, #8
 8011eca:	ab4a      	add	r3, sp, #296	; 0x128
 8011ecc:	441c      	add	r4, r3
 8011ece:	462e      	mov	r6, r5
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	2100      	movs	r1, #0
 8011ed4:	2e00      	cmp	r6, #0
 8011ed6:	da36      	bge.n	8011f46 <__kernel_rem_pio2+0x5ce>
 8011ed8:	f1bb 0f00 	cmp.w	fp, #0
 8011edc:	d039      	beq.n	8011f52 <__kernel_rem_pio2+0x5da>
 8011ede:	4602      	mov	r2, r0
 8011ee0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ee4:	9c01      	ldr	r4, [sp, #4]
 8011ee6:	e9c4 2300 	strd	r2, r3, [r4]
 8011eea:	4602      	mov	r2, r0
 8011eec:	460b      	mov	r3, r1
 8011eee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011ef2:	f7ee f9e3 	bl	80002bc <__aeabi_dsub>
 8011ef6:	ae4c      	add	r6, sp, #304	; 0x130
 8011ef8:	2401      	movs	r4, #1
 8011efa:	42a5      	cmp	r5, r4
 8011efc:	da2c      	bge.n	8011f58 <__kernel_rem_pio2+0x5e0>
 8011efe:	f1bb 0f00 	cmp.w	fp, #0
 8011f02:	d002      	beq.n	8011f0a <__kernel_rem_pio2+0x592>
 8011f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f08:	4619      	mov	r1, r3
 8011f0a:	9b01      	ldr	r3, [sp, #4]
 8011f0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011f10:	e7a5      	b.n	8011e5e <__kernel_rem_pio2+0x4e6>
 8011f12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8011f16:	eb0d 0403 	add.w	r4, sp, r3
 8011f1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011f1e:	2000      	movs	r0, #0
 8011f20:	2100      	movs	r1, #0
 8011f22:	2d00      	cmp	r5, #0
 8011f24:	da09      	bge.n	8011f3a <__kernel_rem_pio2+0x5c2>
 8011f26:	f1bb 0f00 	cmp.w	fp, #0
 8011f2a:	d002      	beq.n	8011f32 <__kernel_rem_pio2+0x5ba>
 8011f2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f30:	4619      	mov	r1, r3
 8011f32:	9b01      	ldr	r3, [sp, #4]
 8011f34:	e9c3 0100 	strd	r0, r1, [r3]
 8011f38:	e791      	b.n	8011e5e <__kernel_rem_pio2+0x4e6>
 8011f3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011f3e:	f7ee f9bf 	bl	80002c0 <__adddf3>
 8011f42:	3d01      	subs	r5, #1
 8011f44:	e7ed      	b.n	8011f22 <__kernel_rem_pio2+0x5aa>
 8011f46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011f4a:	f7ee f9b9 	bl	80002c0 <__adddf3>
 8011f4e:	3e01      	subs	r6, #1
 8011f50:	e7c0      	b.n	8011ed4 <__kernel_rem_pio2+0x55c>
 8011f52:	4602      	mov	r2, r0
 8011f54:	460b      	mov	r3, r1
 8011f56:	e7c5      	b.n	8011ee4 <__kernel_rem_pio2+0x56c>
 8011f58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011f5c:	f7ee f9b0 	bl	80002c0 <__adddf3>
 8011f60:	3401      	adds	r4, #1
 8011f62:	e7ca      	b.n	8011efa <__kernel_rem_pio2+0x582>
 8011f64:	e9da 8900 	ldrd	r8, r9, [sl]
 8011f68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011f6c:	9b02      	ldr	r3, [sp, #8]
 8011f6e:	3b01      	subs	r3, #1
 8011f70:	9302      	str	r3, [sp, #8]
 8011f72:	4632      	mov	r2, r6
 8011f74:	463b      	mov	r3, r7
 8011f76:	4640      	mov	r0, r8
 8011f78:	4649      	mov	r1, r9
 8011f7a:	f7ee f9a1 	bl	80002c0 <__adddf3>
 8011f7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011f82:	4602      	mov	r2, r0
 8011f84:	460b      	mov	r3, r1
 8011f86:	4640      	mov	r0, r8
 8011f88:	4649      	mov	r1, r9
 8011f8a:	f7ee f997 	bl	80002bc <__aeabi_dsub>
 8011f8e:	4632      	mov	r2, r6
 8011f90:	463b      	mov	r3, r7
 8011f92:	f7ee f995 	bl	80002c0 <__adddf3>
 8011f96:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011f9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011f9e:	ed8a 7b00 	vstr	d7, [sl]
 8011fa2:	e76e      	b.n	8011e82 <__kernel_rem_pio2+0x50a>
 8011fa4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011fa8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011fac:	4640      	mov	r0, r8
 8011fae:	4632      	mov	r2, r6
 8011fb0:	463b      	mov	r3, r7
 8011fb2:	4649      	mov	r1, r9
 8011fb4:	f7ee f984 	bl	80002c0 <__adddf3>
 8011fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	460b      	mov	r3, r1
 8011fc0:	4640      	mov	r0, r8
 8011fc2:	4649      	mov	r1, r9
 8011fc4:	f7ee f97a 	bl	80002bc <__aeabi_dsub>
 8011fc8:	4632      	mov	r2, r6
 8011fca:	463b      	mov	r3, r7
 8011fcc:	f7ee f978 	bl	80002c0 <__adddf3>
 8011fd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011fd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011fd8:	ed84 7b00 	vstr	d7, [r4]
 8011fdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011fe0:	e755      	b.n	8011e8e <__kernel_rem_pio2+0x516>
 8011fe2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011fe6:	f7ee f96b 	bl	80002c0 <__adddf3>
 8011fea:	3d01      	subs	r5, #1
 8011fec:	e759      	b.n	8011ea2 <__kernel_rem_pio2+0x52a>
 8011fee:	9b01      	ldr	r3, [sp, #4]
 8011ff0:	9a01      	ldr	r2, [sp, #4]
 8011ff2:	601d      	str	r5, [r3, #0]
 8011ff4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011ff8:	605c      	str	r4, [r3, #4]
 8011ffa:	609f      	str	r7, [r3, #8]
 8011ffc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012000:	60d3      	str	r3, [r2, #12]
 8012002:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012006:	6110      	str	r0, [r2, #16]
 8012008:	6153      	str	r3, [r2, #20]
 801200a:	e728      	b.n	8011e5e <__kernel_rem_pio2+0x4e6>
 801200c:	41700000 	.word	0x41700000
 8012010:	3e700000 	.word	0x3e700000
 8012014:	00000000 	.word	0x00000000

08012018 <__kernel_sin>:
 8012018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801201c:	ed2d 8b04 	vpush	{d8-d9}
 8012020:	eeb0 8a41 	vmov.f32	s16, s2
 8012024:	eef0 8a61 	vmov.f32	s17, s3
 8012028:	ec55 4b10 	vmov	r4, r5, d0
 801202c:	b083      	sub	sp, #12
 801202e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012032:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012036:	9001      	str	r0, [sp, #4]
 8012038:	da06      	bge.n	8012048 <__kernel_sin+0x30>
 801203a:	ee10 0a10 	vmov	r0, s0
 801203e:	4629      	mov	r1, r5
 8012040:	f7ee fda4 	bl	8000b8c <__aeabi_d2iz>
 8012044:	2800      	cmp	r0, #0
 8012046:	d051      	beq.n	80120ec <__kernel_sin+0xd4>
 8012048:	4622      	mov	r2, r4
 801204a:	462b      	mov	r3, r5
 801204c:	4620      	mov	r0, r4
 801204e:	4629      	mov	r1, r5
 8012050:	f7ee faec 	bl	800062c <__aeabi_dmul>
 8012054:	4682      	mov	sl, r0
 8012056:	468b      	mov	fp, r1
 8012058:	4602      	mov	r2, r0
 801205a:	460b      	mov	r3, r1
 801205c:	4620      	mov	r0, r4
 801205e:	4629      	mov	r1, r5
 8012060:	f7ee fae4 	bl	800062c <__aeabi_dmul>
 8012064:	a341      	add	r3, pc, #260	; (adr r3, 801216c <__kernel_sin+0x154>)
 8012066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206a:	4680      	mov	r8, r0
 801206c:	4689      	mov	r9, r1
 801206e:	4650      	mov	r0, sl
 8012070:	4659      	mov	r1, fp
 8012072:	f7ee fadb 	bl	800062c <__aeabi_dmul>
 8012076:	a33f      	add	r3, pc, #252	; (adr r3, 8012174 <__kernel_sin+0x15c>)
 8012078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207c:	f7ee f91e 	bl	80002bc <__aeabi_dsub>
 8012080:	4652      	mov	r2, sl
 8012082:	465b      	mov	r3, fp
 8012084:	f7ee fad2 	bl	800062c <__aeabi_dmul>
 8012088:	a33c      	add	r3, pc, #240	; (adr r3, 801217c <__kernel_sin+0x164>)
 801208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208e:	f7ee f917 	bl	80002c0 <__adddf3>
 8012092:	4652      	mov	r2, sl
 8012094:	465b      	mov	r3, fp
 8012096:	f7ee fac9 	bl	800062c <__aeabi_dmul>
 801209a:	a33a      	add	r3, pc, #232	; (adr r3, 8012184 <__kernel_sin+0x16c>)
 801209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a0:	f7ee f90c 	bl	80002bc <__aeabi_dsub>
 80120a4:	4652      	mov	r2, sl
 80120a6:	465b      	mov	r3, fp
 80120a8:	f7ee fac0 	bl	800062c <__aeabi_dmul>
 80120ac:	a337      	add	r3, pc, #220	; (adr r3, 801218c <__kernel_sin+0x174>)
 80120ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b2:	f7ee f905 	bl	80002c0 <__adddf3>
 80120b6:	9b01      	ldr	r3, [sp, #4]
 80120b8:	4606      	mov	r6, r0
 80120ba:	460f      	mov	r7, r1
 80120bc:	b9eb      	cbnz	r3, 80120fa <__kernel_sin+0xe2>
 80120be:	4602      	mov	r2, r0
 80120c0:	460b      	mov	r3, r1
 80120c2:	4650      	mov	r0, sl
 80120c4:	4659      	mov	r1, fp
 80120c6:	f7ee fab1 	bl	800062c <__aeabi_dmul>
 80120ca:	a325      	add	r3, pc, #148	; (adr r3, 8012160 <__kernel_sin+0x148>)
 80120cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d0:	f7ee f8f4 	bl	80002bc <__aeabi_dsub>
 80120d4:	4642      	mov	r2, r8
 80120d6:	464b      	mov	r3, r9
 80120d8:	f7ee faa8 	bl	800062c <__aeabi_dmul>
 80120dc:	4602      	mov	r2, r0
 80120de:	460b      	mov	r3, r1
 80120e0:	4620      	mov	r0, r4
 80120e2:	4629      	mov	r1, r5
 80120e4:	f7ee f8ec 	bl	80002c0 <__adddf3>
 80120e8:	4604      	mov	r4, r0
 80120ea:	460d      	mov	r5, r1
 80120ec:	ec45 4b10 	vmov	d0, r4, r5
 80120f0:	b003      	add	sp, #12
 80120f2:	ecbd 8b04 	vpop	{d8-d9}
 80120f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120fa:	4b1b      	ldr	r3, [pc, #108]	; (8012168 <__kernel_sin+0x150>)
 80120fc:	ec51 0b18 	vmov	r0, r1, d8
 8012100:	2200      	movs	r2, #0
 8012102:	f7ee fa93 	bl	800062c <__aeabi_dmul>
 8012106:	4632      	mov	r2, r6
 8012108:	ec41 0b19 	vmov	d9, r0, r1
 801210c:	463b      	mov	r3, r7
 801210e:	4640      	mov	r0, r8
 8012110:	4649      	mov	r1, r9
 8012112:	f7ee fa8b 	bl	800062c <__aeabi_dmul>
 8012116:	4602      	mov	r2, r0
 8012118:	460b      	mov	r3, r1
 801211a:	ec51 0b19 	vmov	r0, r1, d9
 801211e:	f7ee f8cd 	bl	80002bc <__aeabi_dsub>
 8012122:	4652      	mov	r2, sl
 8012124:	465b      	mov	r3, fp
 8012126:	f7ee fa81 	bl	800062c <__aeabi_dmul>
 801212a:	ec53 2b18 	vmov	r2, r3, d8
 801212e:	f7ee f8c5 	bl	80002bc <__aeabi_dsub>
 8012132:	a30b      	add	r3, pc, #44	; (adr r3, 8012160 <__kernel_sin+0x148>)
 8012134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012138:	4606      	mov	r6, r0
 801213a:	460f      	mov	r7, r1
 801213c:	4640      	mov	r0, r8
 801213e:	4649      	mov	r1, r9
 8012140:	f7ee fa74 	bl	800062c <__aeabi_dmul>
 8012144:	4602      	mov	r2, r0
 8012146:	460b      	mov	r3, r1
 8012148:	4630      	mov	r0, r6
 801214a:	4639      	mov	r1, r7
 801214c:	f7ee f8b8 	bl	80002c0 <__adddf3>
 8012150:	4602      	mov	r2, r0
 8012152:	460b      	mov	r3, r1
 8012154:	4620      	mov	r0, r4
 8012156:	4629      	mov	r1, r5
 8012158:	f7ee f8b0 	bl	80002bc <__aeabi_dsub>
 801215c:	e7c4      	b.n	80120e8 <__kernel_sin+0xd0>
 801215e:	bf00      	nop
 8012160:	55555549 	.word	0x55555549
 8012164:	3fc55555 	.word	0x3fc55555
 8012168:	3fe00000 	.word	0x3fe00000
 801216c:	5acfd57c 	.word	0x5acfd57c
 8012170:	3de5d93a 	.word	0x3de5d93a
 8012174:	8a2b9ceb 	.word	0x8a2b9ceb
 8012178:	3e5ae5e6 	.word	0x3e5ae5e6
 801217c:	57b1fe7d 	.word	0x57b1fe7d
 8012180:	3ec71de3 	.word	0x3ec71de3
 8012184:	19c161d5 	.word	0x19c161d5
 8012188:	3f2a01a0 	.word	0x3f2a01a0
 801218c:	1110f8a6 	.word	0x1110f8a6
 8012190:	3f811111 	.word	0x3f811111
 8012194:	00000000 	.word	0x00000000

08012198 <__kernel_tan>:
 8012198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801219c:	ed2d 8b06 	vpush	{d8-d10}
 80121a0:	ec5b ab10 	vmov	sl, fp, d0
 80121a4:	4be0      	ldr	r3, [pc, #896]	; (8012528 <__kernel_tan+0x390>)
 80121a6:	b083      	sub	sp, #12
 80121a8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80121ac:	429f      	cmp	r7, r3
 80121ae:	ec59 8b11 	vmov	r8, r9, d1
 80121b2:	4606      	mov	r6, r0
 80121b4:	f8cd b000 	str.w	fp, [sp]
 80121b8:	dc61      	bgt.n	801227e <__kernel_tan+0xe6>
 80121ba:	ee10 0a10 	vmov	r0, s0
 80121be:	4659      	mov	r1, fp
 80121c0:	f7ee fce4 	bl	8000b8c <__aeabi_d2iz>
 80121c4:	4605      	mov	r5, r0
 80121c6:	2800      	cmp	r0, #0
 80121c8:	f040 8083 	bne.w	80122d2 <__kernel_tan+0x13a>
 80121cc:	1c73      	adds	r3, r6, #1
 80121ce:	4652      	mov	r2, sl
 80121d0:	4313      	orrs	r3, r2
 80121d2:	433b      	orrs	r3, r7
 80121d4:	d112      	bne.n	80121fc <__kernel_tan+0x64>
 80121d6:	ec4b ab10 	vmov	d0, sl, fp
 80121da:	f000 fa17 	bl	801260c <fabs>
 80121de:	49d3      	ldr	r1, [pc, #844]	; (801252c <__kernel_tan+0x394>)
 80121e0:	ec53 2b10 	vmov	r2, r3, d0
 80121e4:	2000      	movs	r0, #0
 80121e6:	f7ee fb4b 	bl	8000880 <__aeabi_ddiv>
 80121ea:	4682      	mov	sl, r0
 80121ec:	468b      	mov	fp, r1
 80121ee:	ec4b ab10 	vmov	d0, sl, fp
 80121f2:	b003      	add	sp, #12
 80121f4:	ecbd 8b06 	vpop	{d8-d10}
 80121f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121fc:	2e01      	cmp	r6, #1
 80121fe:	d0f6      	beq.n	80121ee <__kernel_tan+0x56>
 8012200:	4642      	mov	r2, r8
 8012202:	464b      	mov	r3, r9
 8012204:	4650      	mov	r0, sl
 8012206:	4659      	mov	r1, fp
 8012208:	f7ee f85a 	bl	80002c0 <__adddf3>
 801220c:	4602      	mov	r2, r0
 801220e:	460b      	mov	r3, r1
 8012210:	460f      	mov	r7, r1
 8012212:	2000      	movs	r0, #0
 8012214:	49c6      	ldr	r1, [pc, #792]	; (8012530 <__kernel_tan+0x398>)
 8012216:	f7ee fb33 	bl	8000880 <__aeabi_ddiv>
 801221a:	e9cd 0100 	strd	r0, r1, [sp]
 801221e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012222:	462e      	mov	r6, r5
 8012224:	4652      	mov	r2, sl
 8012226:	462c      	mov	r4, r5
 8012228:	4630      	mov	r0, r6
 801222a:	461d      	mov	r5, r3
 801222c:	4639      	mov	r1, r7
 801222e:	465b      	mov	r3, fp
 8012230:	f7ee f844 	bl	80002bc <__aeabi_dsub>
 8012234:	4602      	mov	r2, r0
 8012236:	460b      	mov	r3, r1
 8012238:	4640      	mov	r0, r8
 801223a:	4649      	mov	r1, r9
 801223c:	f7ee f83e 	bl	80002bc <__aeabi_dsub>
 8012240:	4632      	mov	r2, r6
 8012242:	462b      	mov	r3, r5
 8012244:	f7ee f9f2 	bl	800062c <__aeabi_dmul>
 8012248:	4632      	mov	r2, r6
 801224a:	4680      	mov	r8, r0
 801224c:	4689      	mov	r9, r1
 801224e:	462b      	mov	r3, r5
 8012250:	4630      	mov	r0, r6
 8012252:	4639      	mov	r1, r7
 8012254:	f7ee f9ea 	bl	800062c <__aeabi_dmul>
 8012258:	4bb4      	ldr	r3, [pc, #720]	; (801252c <__kernel_tan+0x394>)
 801225a:	2200      	movs	r2, #0
 801225c:	f7ee f830 	bl	80002c0 <__adddf3>
 8012260:	4602      	mov	r2, r0
 8012262:	460b      	mov	r3, r1
 8012264:	4640      	mov	r0, r8
 8012266:	4649      	mov	r1, r9
 8012268:	f7ee f82a 	bl	80002c0 <__adddf3>
 801226c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012270:	f7ee f9dc 	bl	800062c <__aeabi_dmul>
 8012274:	4622      	mov	r2, r4
 8012276:	462b      	mov	r3, r5
 8012278:	f7ee f822 	bl	80002c0 <__adddf3>
 801227c:	e7b5      	b.n	80121ea <__kernel_tan+0x52>
 801227e:	4bad      	ldr	r3, [pc, #692]	; (8012534 <__kernel_tan+0x39c>)
 8012280:	429f      	cmp	r7, r3
 8012282:	dd26      	ble.n	80122d2 <__kernel_tan+0x13a>
 8012284:	9b00      	ldr	r3, [sp, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	da09      	bge.n	801229e <__kernel_tan+0x106>
 801228a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801228e:	469b      	mov	fp, r3
 8012290:	ee10 aa10 	vmov	sl, s0
 8012294:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012298:	ee11 8a10 	vmov	r8, s2
 801229c:	4699      	mov	r9, r3
 801229e:	4652      	mov	r2, sl
 80122a0:	465b      	mov	r3, fp
 80122a2:	a183      	add	r1, pc, #524	; (adr r1, 80124b0 <__kernel_tan+0x318>)
 80122a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122a8:	f7ee f808 	bl	80002bc <__aeabi_dsub>
 80122ac:	4642      	mov	r2, r8
 80122ae:	464b      	mov	r3, r9
 80122b0:	4604      	mov	r4, r0
 80122b2:	460d      	mov	r5, r1
 80122b4:	a180      	add	r1, pc, #512	; (adr r1, 80124b8 <__kernel_tan+0x320>)
 80122b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122ba:	f7ed ffff 	bl	80002bc <__aeabi_dsub>
 80122be:	4622      	mov	r2, r4
 80122c0:	462b      	mov	r3, r5
 80122c2:	f7ed fffd 	bl	80002c0 <__adddf3>
 80122c6:	f04f 0800 	mov.w	r8, #0
 80122ca:	4682      	mov	sl, r0
 80122cc:	468b      	mov	fp, r1
 80122ce:	f04f 0900 	mov.w	r9, #0
 80122d2:	4652      	mov	r2, sl
 80122d4:	465b      	mov	r3, fp
 80122d6:	4650      	mov	r0, sl
 80122d8:	4659      	mov	r1, fp
 80122da:	f7ee f9a7 	bl	800062c <__aeabi_dmul>
 80122de:	4602      	mov	r2, r0
 80122e0:	460b      	mov	r3, r1
 80122e2:	ec43 2b18 	vmov	d8, r2, r3
 80122e6:	f7ee f9a1 	bl	800062c <__aeabi_dmul>
 80122ea:	ec53 2b18 	vmov	r2, r3, d8
 80122ee:	4604      	mov	r4, r0
 80122f0:	460d      	mov	r5, r1
 80122f2:	4650      	mov	r0, sl
 80122f4:	4659      	mov	r1, fp
 80122f6:	f7ee f999 	bl	800062c <__aeabi_dmul>
 80122fa:	a371      	add	r3, pc, #452	; (adr r3, 80124c0 <__kernel_tan+0x328>)
 80122fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012300:	ec41 0b19 	vmov	d9, r0, r1
 8012304:	4620      	mov	r0, r4
 8012306:	4629      	mov	r1, r5
 8012308:	f7ee f990 	bl	800062c <__aeabi_dmul>
 801230c:	a36e      	add	r3, pc, #440	; (adr r3, 80124c8 <__kernel_tan+0x330>)
 801230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012312:	f7ed ffd5 	bl	80002c0 <__adddf3>
 8012316:	4622      	mov	r2, r4
 8012318:	462b      	mov	r3, r5
 801231a:	f7ee f987 	bl	800062c <__aeabi_dmul>
 801231e:	a36c      	add	r3, pc, #432	; (adr r3, 80124d0 <__kernel_tan+0x338>)
 8012320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012324:	f7ed ffcc 	bl	80002c0 <__adddf3>
 8012328:	4622      	mov	r2, r4
 801232a:	462b      	mov	r3, r5
 801232c:	f7ee f97e 	bl	800062c <__aeabi_dmul>
 8012330:	a369      	add	r3, pc, #420	; (adr r3, 80124d8 <__kernel_tan+0x340>)
 8012332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012336:	f7ed ffc3 	bl	80002c0 <__adddf3>
 801233a:	4622      	mov	r2, r4
 801233c:	462b      	mov	r3, r5
 801233e:	f7ee f975 	bl	800062c <__aeabi_dmul>
 8012342:	a367      	add	r3, pc, #412	; (adr r3, 80124e0 <__kernel_tan+0x348>)
 8012344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012348:	f7ed ffba 	bl	80002c0 <__adddf3>
 801234c:	4622      	mov	r2, r4
 801234e:	462b      	mov	r3, r5
 8012350:	f7ee f96c 	bl	800062c <__aeabi_dmul>
 8012354:	a364      	add	r3, pc, #400	; (adr r3, 80124e8 <__kernel_tan+0x350>)
 8012356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235a:	f7ed ffb1 	bl	80002c0 <__adddf3>
 801235e:	ec53 2b18 	vmov	r2, r3, d8
 8012362:	f7ee f963 	bl	800062c <__aeabi_dmul>
 8012366:	a362      	add	r3, pc, #392	; (adr r3, 80124f0 <__kernel_tan+0x358>)
 8012368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236c:	ec41 0b1a 	vmov	d10, r0, r1
 8012370:	4620      	mov	r0, r4
 8012372:	4629      	mov	r1, r5
 8012374:	f7ee f95a 	bl	800062c <__aeabi_dmul>
 8012378:	a35f      	add	r3, pc, #380	; (adr r3, 80124f8 <__kernel_tan+0x360>)
 801237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801237e:	f7ed ff9f 	bl	80002c0 <__adddf3>
 8012382:	4622      	mov	r2, r4
 8012384:	462b      	mov	r3, r5
 8012386:	f7ee f951 	bl	800062c <__aeabi_dmul>
 801238a:	a35d      	add	r3, pc, #372	; (adr r3, 8012500 <__kernel_tan+0x368>)
 801238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012390:	f7ed ff96 	bl	80002c0 <__adddf3>
 8012394:	4622      	mov	r2, r4
 8012396:	462b      	mov	r3, r5
 8012398:	f7ee f948 	bl	800062c <__aeabi_dmul>
 801239c:	a35a      	add	r3, pc, #360	; (adr r3, 8012508 <__kernel_tan+0x370>)
 801239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a2:	f7ed ff8d 	bl	80002c0 <__adddf3>
 80123a6:	4622      	mov	r2, r4
 80123a8:	462b      	mov	r3, r5
 80123aa:	f7ee f93f 	bl	800062c <__aeabi_dmul>
 80123ae:	a358      	add	r3, pc, #352	; (adr r3, 8012510 <__kernel_tan+0x378>)
 80123b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b4:	f7ed ff84 	bl	80002c0 <__adddf3>
 80123b8:	4622      	mov	r2, r4
 80123ba:	462b      	mov	r3, r5
 80123bc:	f7ee f936 	bl	800062c <__aeabi_dmul>
 80123c0:	a355      	add	r3, pc, #340	; (adr r3, 8012518 <__kernel_tan+0x380>)
 80123c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c6:	f7ed ff7b 	bl	80002c0 <__adddf3>
 80123ca:	4602      	mov	r2, r0
 80123cc:	460b      	mov	r3, r1
 80123ce:	ec51 0b1a 	vmov	r0, r1, d10
 80123d2:	f7ed ff75 	bl	80002c0 <__adddf3>
 80123d6:	ec53 2b19 	vmov	r2, r3, d9
 80123da:	f7ee f927 	bl	800062c <__aeabi_dmul>
 80123de:	4642      	mov	r2, r8
 80123e0:	464b      	mov	r3, r9
 80123e2:	f7ed ff6d 	bl	80002c0 <__adddf3>
 80123e6:	ec53 2b18 	vmov	r2, r3, d8
 80123ea:	f7ee f91f 	bl	800062c <__aeabi_dmul>
 80123ee:	4642      	mov	r2, r8
 80123f0:	464b      	mov	r3, r9
 80123f2:	f7ed ff65 	bl	80002c0 <__adddf3>
 80123f6:	a34a      	add	r3, pc, #296	; (adr r3, 8012520 <__kernel_tan+0x388>)
 80123f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fc:	4604      	mov	r4, r0
 80123fe:	460d      	mov	r5, r1
 8012400:	ec51 0b19 	vmov	r0, r1, d9
 8012404:	f7ee f912 	bl	800062c <__aeabi_dmul>
 8012408:	4622      	mov	r2, r4
 801240a:	462b      	mov	r3, r5
 801240c:	f7ed ff58 	bl	80002c0 <__adddf3>
 8012410:	460b      	mov	r3, r1
 8012412:	ec41 0b18 	vmov	d8, r0, r1
 8012416:	4602      	mov	r2, r0
 8012418:	4659      	mov	r1, fp
 801241a:	4650      	mov	r0, sl
 801241c:	f7ed ff50 	bl	80002c0 <__adddf3>
 8012420:	4b44      	ldr	r3, [pc, #272]	; (8012534 <__kernel_tan+0x39c>)
 8012422:	429f      	cmp	r7, r3
 8012424:	4604      	mov	r4, r0
 8012426:	460d      	mov	r5, r1
 8012428:	f340 8086 	ble.w	8012538 <__kernel_tan+0x3a0>
 801242c:	4630      	mov	r0, r6
 801242e:	f7ee f893 	bl	8000558 <__aeabi_i2d>
 8012432:	4622      	mov	r2, r4
 8012434:	4680      	mov	r8, r0
 8012436:	4689      	mov	r9, r1
 8012438:	462b      	mov	r3, r5
 801243a:	4620      	mov	r0, r4
 801243c:	4629      	mov	r1, r5
 801243e:	f7ee f8f5 	bl	800062c <__aeabi_dmul>
 8012442:	4642      	mov	r2, r8
 8012444:	4606      	mov	r6, r0
 8012446:	460f      	mov	r7, r1
 8012448:	464b      	mov	r3, r9
 801244a:	4620      	mov	r0, r4
 801244c:	4629      	mov	r1, r5
 801244e:	f7ed ff37 	bl	80002c0 <__adddf3>
 8012452:	4602      	mov	r2, r0
 8012454:	460b      	mov	r3, r1
 8012456:	4630      	mov	r0, r6
 8012458:	4639      	mov	r1, r7
 801245a:	f7ee fa11 	bl	8000880 <__aeabi_ddiv>
 801245e:	ec53 2b18 	vmov	r2, r3, d8
 8012462:	f7ed ff2b 	bl	80002bc <__aeabi_dsub>
 8012466:	4602      	mov	r2, r0
 8012468:	460b      	mov	r3, r1
 801246a:	4650      	mov	r0, sl
 801246c:	4659      	mov	r1, fp
 801246e:	f7ed ff25 	bl	80002bc <__aeabi_dsub>
 8012472:	4602      	mov	r2, r0
 8012474:	460b      	mov	r3, r1
 8012476:	f7ed ff23 	bl	80002c0 <__adddf3>
 801247a:	4602      	mov	r2, r0
 801247c:	460b      	mov	r3, r1
 801247e:	4640      	mov	r0, r8
 8012480:	4649      	mov	r1, r9
 8012482:	f7ed ff1b 	bl	80002bc <__aeabi_dsub>
 8012486:	9b00      	ldr	r3, [sp, #0]
 8012488:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801248c:	f00a 0a02 	and.w	sl, sl, #2
 8012490:	4604      	mov	r4, r0
 8012492:	f1ca 0001 	rsb	r0, sl, #1
 8012496:	460d      	mov	r5, r1
 8012498:	f7ee f85e 	bl	8000558 <__aeabi_i2d>
 801249c:	4602      	mov	r2, r0
 801249e:	460b      	mov	r3, r1
 80124a0:	4620      	mov	r0, r4
 80124a2:	4629      	mov	r1, r5
 80124a4:	f7ee f8c2 	bl	800062c <__aeabi_dmul>
 80124a8:	e69f      	b.n	80121ea <__kernel_tan+0x52>
 80124aa:	bf00      	nop
 80124ac:	f3af 8000 	nop.w
 80124b0:	54442d18 	.word	0x54442d18
 80124b4:	3fe921fb 	.word	0x3fe921fb
 80124b8:	33145c07 	.word	0x33145c07
 80124bc:	3c81a626 	.word	0x3c81a626
 80124c0:	74bf7ad4 	.word	0x74bf7ad4
 80124c4:	3efb2a70 	.word	0x3efb2a70
 80124c8:	32f0a7e9 	.word	0x32f0a7e9
 80124cc:	3f12b80f 	.word	0x3f12b80f
 80124d0:	1a8d1068 	.word	0x1a8d1068
 80124d4:	3f3026f7 	.word	0x3f3026f7
 80124d8:	fee08315 	.word	0xfee08315
 80124dc:	3f57dbc8 	.word	0x3f57dbc8
 80124e0:	e96e8493 	.word	0xe96e8493
 80124e4:	3f8226e3 	.word	0x3f8226e3
 80124e8:	1bb341fe 	.word	0x1bb341fe
 80124ec:	3faba1ba 	.word	0x3faba1ba
 80124f0:	db605373 	.word	0xdb605373
 80124f4:	bef375cb 	.word	0xbef375cb
 80124f8:	a03792a6 	.word	0xa03792a6
 80124fc:	3f147e88 	.word	0x3f147e88
 8012500:	f2f26501 	.word	0xf2f26501
 8012504:	3f4344d8 	.word	0x3f4344d8
 8012508:	c9560328 	.word	0xc9560328
 801250c:	3f6d6d22 	.word	0x3f6d6d22
 8012510:	8406d637 	.word	0x8406d637
 8012514:	3f9664f4 	.word	0x3f9664f4
 8012518:	1110fe7a 	.word	0x1110fe7a
 801251c:	3fc11111 	.word	0x3fc11111
 8012520:	55555563 	.word	0x55555563
 8012524:	3fd55555 	.word	0x3fd55555
 8012528:	3e2fffff 	.word	0x3e2fffff
 801252c:	3ff00000 	.word	0x3ff00000
 8012530:	bff00000 	.word	0xbff00000
 8012534:	3fe59427 	.word	0x3fe59427
 8012538:	2e01      	cmp	r6, #1
 801253a:	d02f      	beq.n	801259c <__kernel_tan+0x404>
 801253c:	460f      	mov	r7, r1
 801253e:	4602      	mov	r2, r0
 8012540:	460b      	mov	r3, r1
 8012542:	4689      	mov	r9, r1
 8012544:	2000      	movs	r0, #0
 8012546:	4917      	ldr	r1, [pc, #92]	; (80125a4 <__kernel_tan+0x40c>)
 8012548:	f7ee f99a 	bl	8000880 <__aeabi_ddiv>
 801254c:	2600      	movs	r6, #0
 801254e:	e9cd 0100 	strd	r0, r1, [sp]
 8012552:	4652      	mov	r2, sl
 8012554:	465b      	mov	r3, fp
 8012556:	4630      	mov	r0, r6
 8012558:	4639      	mov	r1, r7
 801255a:	f7ed feaf 	bl	80002bc <__aeabi_dsub>
 801255e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012562:	4602      	mov	r2, r0
 8012564:	460b      	mov	r3, r1
 8012566:	ec51 0b18 	vmov	r0, r1, d8
 801256a:	f7ed fea7 	bl	80002bc <__aeabi_dsub>
 801256e:	4632      	mov	r2, r6
 8012570:	462b      	mov	r3, r5
 8012572:	f7ee f85b 	bl	800062c <__aeabi_dmul>
 8012576:	46b0      	mov	r8, r6
 8012578:	460f      	mov	r7, r1
 801257a:	4642      	mov	r2, r8
 801257c:	462b      	mov	r3, r5
 801257e:	4634      	mov	r4, r6
 8012580:	4649      	mov	r1, r9
 8012582:	4606      	mov	r6, r0
 8012584:	4640      	mov	r0, r8
 8012586:	f7ee f851 	bl	800062c <__aeabi_dmul>
 801258a:	4b07      	ldr	r3, [pc, #28]	; (80125a8 <__kernel_tan+0x410>)
 801258c:	2200      	movs	r2, #0
 801258e:	f7ed fe97 	bl	80002c0 <__adddf3>
 8012592:	4602      	mov	r2, r0
 8012594:	460b      	mov	r3, r1
 8012596:	4630      	mov	r0, r6
 8012598:	4639      	mov	r1, r7
 801259a:	e665      	b.n	8012268 <__kernel_tan+0xd0>
 801259c:	4682      	mov	sl, r0
 801259e:	468b      	mov	fp, r1
 80125a0:	e625      	b.n	80121ee <__kernel_tan+0x56>
 80125a2:	bf00      	nop
 80125a4:	bff00000 	.word	0xbff00000
 80125a8:	3ff00000 	.word	0x3ff00000

080125ac <with_errno>:
 80125ac:	b570      	push	{r4, r5, r6, lr}
 80125ae:	4604      	mov	r4, r0
 80125b0:	460d      	mov	r5, r1
 80125b2:	4616      	mov	r6, r2
 80125b4:	f7fd fcc6 	bl	800ff44 <__errno>
 80125b8:	4629      	mov	r1, r5
 80125ba:	6006      	str	r6, [r0, #0]
 80125bc:	4620      	mov	r0, r4
 80125be:	bd70      	pop	{r4, r5, r6, pc}

080125c0 <xflow>:
 80125c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80125c2:	4614      	mov	r4, r2
 80125c4:	461d      	mov	r5, r3
 80125c6:	b108      	cbz	r0, 80125cc <xflow+0xc>
 80125c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80125cc:	e9cd 2300 	strd	r2, r3, [sp]
 80125d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125d4:	4620      	mov	r0, r4
 80125d6:	4629      	mov	r1, r5
 80125d8:	f7ee f828 	bl	800062c <__aeabi_dmul>
 80125dc:	2222      	movs	r2, #34	; 0x22
 80125de:	b003      	add	sp, #12
 80125e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125e4:	f7ff bfe2 	b.w	80125ac <with_errno>

080125e8 <__math_uflow>:
 80125e8:	b508      	push	{r3, lr}
 80125ea:	2200      	movs	r2, #0
 80125ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80125f0:	f7ff ffe6 	bl	80125c0 <xflow>
 80125f4:	ec41 0b10 	vmov	d0, r0, r1
 80125f8:	bd08      	pop	{r3, pc}

080125fa <__math_oflow>:
 80125fa:	b508      	push	{r3, lr}
 80125fc:	2200      	movs	r2, #0
 80125fe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012602:	f7ff ffdd 	bl	80125c0 <xflow>
 8012606:	ec41 0b10 	vmov	d0, r0, r1
 801260a:	bd08      	pop	{r3, pc}

0801260c <fabs>:
 801260c:	ec51 0b10 	vmov	r0, r1, d0
 8012610:	ee10 2a10 	vmov	r2, s0
 8012614:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012618:	ec43 2b10 	vmov	d0, r2, r3
 801261c:	4770      	bx	lr

0801261e <finite>:
 801261e:	b082      	sub	sp, #8
 8012620:	ed8d 0b00 	vstr	d0, [sp]
 8012624:	9801      	ldr	r0, [sp, #4]
 8012626:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801262a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801262e:	0fc0      	lsrs	r0, r0, #31
 8012630:	b002      	add	sp, #8
 8012632:	4770      	bx	lr
 8012634:	0000      	movs	r0, r0
	...

08012638 <floor>:
 8012638:	ec51 0b10 	vmov	r0, r1, d0
 801263c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012640:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012644:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012648:	2e13      	cmp	r6, #19
 801264a:	ee10 5a10 	vmov	r5, s0
 801264e:	ee10 8a10 	vmov	r8, s0
 8012652:	460c      	mov	r4, r1
 8012654:	dc32      	bgt.n	80126bc <floor+0x84>
 8012656:	2e00      	cmp	r6, #0
 8012658:	da14      	bge.n	8012684 <floor+0x4c>
 801265a:	a333      	add	r3, pc, #204	; (adr r3, 8012728 <floor+0xf0>)
 801265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012660:	f7ed fe2e 	bl	80002c0 <__adddf3>
 8012664:	2200      	movs	r2, #0
 8012666:	2300      	movs	r3, #0
 8012668:	f7ee fa70 	bl	8000b4c <__aeabi_dcmpgt>
 801266c:	b138      	cbz	r0, 801267e <floor+0x46>
 801266e:	2c00      	cmp	r4, #0
 8012670:	da57      	bge.n	8012722 <floor+0xea>
 8012672:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012676:	431d      	orrs	r5, r3
 8012678:	d001      	beq.n	801267e <floor+0x46>
 801267a:	4c2d      	ldr	r4, [pc, #180]	; (8012730 <floor+0xf8>)
 801267c:	2500      	movs	r5, #0
 801267e:	4621      	mov	r1, r4
 8012680:	4628      	mov	r0, r5
 8012682:	e025      	b.n	80126d0 <floor+0x98>
 8012684:	4f2b      	ldr	r7, [pc, #172]	; (8012734 <floor+0xfc>)
 8012686:	4137      	asrs	r7, r6
 8012688:	ea01 0307 	and.w	r3, r1, r7
 801268c:	4303      	orrs	r3, r0
 801268e:	d01f      	beq.n	80126d0 <floor+0x98>
 8012690:	a325      	add	r3, pc, #148	; (adr r3, 8012728 <floor+0xf0>)
 8012692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012696:	f7ed fe13 	bl	80002c0 <__adddf3>
 801269a:	2200      	movs	r2, #0
 801269c:	2300      	movs	r3, #0
 801269e:	f7ee fa55 	bl	8000b4c <__aeabi_dcmpgt>
 80126a2:	2800      	cmp	r0, #0
 80126a4:	d0eb      	beq.n	801267e <floor+0x46>
 80126a6:	2c00      	cmp	r4, #0
 80126a8:	bfbe      	ittt	lt
 80126aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80126ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80126b2:	19a4      	addlt	r4, r4, r6
 80126b4:	ea24 0407 	bic.w	r4, r4, r7
 80126b8:	2500      	movs	r5, #0
 80126ba:	e7e0      	b.n	801267e <floor+0x46>
 80126bc:	2e33      	cmp	r6, #51	; 0x33
 80126be:	dd0b      	ble.n	80126d8 <floor+0xa0>
 80126c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80126c4:	d104      	bne.n	80126d0 <floor+0x98>
 80126c6:	ee10 2a10 	vmov	r2, s0
 80126ca:	460b      	mov	r3, r1
 80126cc:	f7ed fdf8 	bl	80002c0 <__adddf3>
 80126d0:	ec41 0b10 	vmov	d0, r0, r1
 80126d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80126dc:	f04f 33ff 	mov.w	r3, #4294967295
 80126e0:	fa23 f707 	lsr.w	r7, r3, r7
 80126e4:	4207      	tst	r7, r0
 80126e6:	d0f3      	beq.n	80126d0 <floor+0x98>
 80126e8:	a30f      	add	r3, pc, #60	; (adr r3, 8012728 <floor+0xf0>)
 80126ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ee:	f7ed fde7 	bl	80002c0 <__adddf3>
 80126f2:	2200      	movs	r2, #0
 80126f4:	2300      	movs	r3, #0
 80126f6:	f7ee fa29 	bl	8000b4c <__aeabi_dcmpgt>
 80126fa:	2800      	cmp	r0, #0
 80126fc:	d0bf      	beq.n	801267e <floor+0x46>
 80126fe:	2c00      	cmp	r4, #0
 8012700:	da02      	bge.n	8012708 <floor+0xd0>
 8012702:	2e14      	cmp	r6, #20
 8012704:	d103      	bne.n	801270e <floor+0xd6>
 8012706:	3401      	adds	r4, #1
 8012708:	ea25 0507 	bic.w	r5, r5, r7
 801270c:	e7b7      	b.n	801267e <floor+0x46>
 801270e:	2301      	movs	r3, #1
 8012710:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012714:	fa03 f606 	lsl.w	r6, r3, r6
 8012718:	4435      	add	r5, r6
 801271a:	4545      	cmp	r5, r8
 801271c:	bf38      	it	cc
 801271e:	18e4      	addcc	r4, r4, r3
 8012720:	e7f2      	b.n	8012708 <floor+0xd0>
 8012722:	2500      	movs	r5, #0
 8012724:	462c      	mov	r4, r5
 8012726:	e7aa      	b.n	801267e <floor+0x46>
 8012728:	8800759c 	.word	0x8800759c
 801272c:	7e37e43c 	.word	0x7e37e43c
 8012730:	bff00000 	.word	0xbff00000
 8012734:	000fffff 	.word	0x000fffff

08012738 <nan>:
 8012738:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012740 <nan+0x8>
 801273c:	4770      	bx	lr
 801273e:	bf00      	nop
 8012740:	00000000 	.word	0x00000000
 8012744:	7ff80000 	.word	0x7ff80000

08012748 <scalbn>:
 8012748:	b570      	push	{r4, r5, r6, lr}
 801274a:	ec55 4b10 	vmov	r4, r5, d0
 801274e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012752:	4606      	mov	r6, r0
 8012754:	462b      	mov	r3, r5
 8012756:	b99a      	cbnz	r2, 8012780 <scalbn+0x38>
 8012758:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801275c:	4323      	orrs	r3, r4
 801275e:	d036      	beq.n	80127ce <scalbn+0x86>
 8012760:	4b39      	ldr	r3, [pc, #228]	; (8012848 <scalbn+0x100>)
 8012762:	4629      	mov	r1, r5
 8012764:	ee10 0a10 	vmov	r0, s0
 8012768:	2200      	movs	r2, #0
 801276a:	f7ed ff5f 	bl	800062c <__aeabi_dmul>
 801276e:	4b37      	ldr	r3, [pc, #220]	; (801284c <scalbn+0x104>)
 8012770:	429e      	cmp	r6, r3
 8012772:	4604      	mov	r4, r0
 8012774:	460d      	mov	r5, r1
 8012776:	da10      	bge.n	801279a <scalbn+0x52>
 8012778:	a32b      	add	r3, pc, #172	; (adr r3, 8012828 <scalbn+0xe0>)
 801277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801277e:	e03a      	b.n	80127f6 <scalbn+0xae>
 8012780:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012784:	428a      	cmp	r2, r1
 8012786:	d10c      	bne.n	80127a2 <scalbn+0x5a>
 8012788:	ee10 2a10 	vmov	r2, s0
 801278c:	4620      	mov	r0, r4
 801278e:	4629      	mov	r1, r5
 8012790:	f7ed fd96 	bl	80002c0 <__adddf3>
 8012794:	4604      	mov	r4, r0
 8012796:	460d      	mov	r5, r1
 8012798:	e019      	b.n	80127ce <scalbn+0x86>
 801279a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801279e:	460b      	mov	r3, r1
 80127a0:	3a36      	subs	r2, #54	; 0x36
 80127a2:	4432      	add	r2, r6
 80127a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80127a8:	428a      	cmp	r2, r1
 80127aa:	dd08      	ble.n	80127be <scalbn+0x76>
 80127ac:	2d00      	cmp	r5, #0
 80127ae:	a120      	add	r1, pc, #128	; (adr r1, 8012830 <scalbn+0xe8>)
 80127b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127b4:	da1c      	bge.n	80127f0 <scalbn+0xa8>
 80127b6:	a120      	add	r1, pc, #128	; (adr r1, 8012838 <scalbn+0xf0>)
 80127b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127bc:	e018      	b.n	80127f0 <scalbn+0xa8>
 80127be:	2a00      	cmp	r2, #0
 80127c0:	dd08      	ble.n	80127d4 <scalbn+0x8c>
 80127c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80127c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80127ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80127ce:	ec45 4b10 	vmov	d0, r4, r5
 80127d2:	bd70      	pop	{r4, r5, r6, pc}
 80127d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80127d8:	da19      	bge.n	801280e <scalbn+0xc6>
 80127da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80127de:	429e      	cmp	r6, r3
 80127e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80127e4:	dd0a      	ble.n	80127fc <scalbn+0xb4>
 80127e6:	a112      	add	r1, pc, #72	; (adr r1, 8012830 <scalbn+0xe8>)
 80127e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d1e2      	bne.n	80127b6 <scalbn+0x6e>
 80127f0:	a30f      	add	r3, pc, #60	; (adr r3, 8012830 <scalbn+0xe8>)
 80127f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f6:	f7ed ff19 	bl	800062c <__aeabi_dmul>
 80127fa:	e7cb      	b.n	8012794 <scalbn+0x4c>
 80127fc:	a10a      	add	r1, pc, #40	; (adr r1, 8012828 <scalbn+0xe0>)
 80127fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d0b8      	beq.n	8012778 <scalbn+0x30>
 8012806:	a10e      	add	r1, pc, #56	; (adr r1, 8012840 <scalbn+0xf8>)
 8012808:	e9d1 0100 	ldrd	r0, r1, [r1]
 801280c:	e7b4      	b.n	8012778 <scalbn+0x30>
 801280e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012812:	3236      	adds	r2, #54	; 0x36
 8012814:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012818:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801281c:	4620      	mov	r0, r4
 801281e:	4b0c      	ldr	r3, [pc, #48]	; (8012850 <scalbn+0x108>)
 8012820:	2200      	movs	r2, #0
 8012822:	e7e8      	b.n	80127f6 <scalbn+0xae>
 8012824:	f3af 8000 	nop.w
 8012828:	c2f8f359 	.word	0xc2f8f359
 801282c:	01a56e1f 	.word	0x01a56e1f
 8012830:	8800759c 	.word	0x8800759c
 8012834:	7e37e43c 	.word	0x7e37e43c
 8012838:	8800759c 	.word	0x8800759c
 801283c:	fe37e43c 	.word	0xfe37e43c
 8012840:	c2f8f359 	.word	0xc2f8f359
 8012844:	81a56e1f 	.word	0x81a56e1f
 8012848:	43500000 	.word	0x43500000
 801284c:	ffff3cb0 	.word	0xffff3cb0
 8012850:	3c900000 	.word	0x3c900000

08012854 <_close>:
 8012854:	4b02      	ldr	r3, [pc, #8]	; (8012860 <_close+0xc>)
 8012856:	2258      	movs	r2, #88	; 0x58
 8012858:	601a      	str	r2, [r3, #0]
 801285a:	f04f 30ff 	mov.w	r0, #4294967295
 801285e:	4770      	bx	lr
 8012860:	200037e0 	.word	0x200037e0

08012864 <_fstat>:
 8012864:	4b02      	ldr	r3, [pc, #8]	; (8012870 <_fstat+0xc>)
 8012866:	2258      	movs	r2, #88	; 0x58
 8012868:	601a      	str	r2, [r3, #0]
 801286a:	f04f 30ff 	mov.w	r0, #4294967295
 801286e:	4770      	bx	lr
 8012870:	200037e0 	.word	0x200037e0

08012874 <_getpid>:
 8012874:	4b02      	ldr	r3, [pc, #8]	; (8012880 <_getpid+0xc>)
 8012876:	2258      	movs	r2, #88	; 0x58
 8012878:	601a      	str	r2, [r3, #0]
 801287a:	f04f 30ff 	mov.w	r0, #4294967295
 801287e:	4770      	bx	lr
 8012880:	200037e0 	.word	0x200037e0

08012884 <_isatty>:
 8012884:	4b02      	ldr	r3, [pc, #8]	; (8012890 <_isatty+0xc>)
 8012886:	2258      	movs	r2, #88	; 0x58
 8012888:	601a      	str	r2, [r3, #0]
 801288a:	2000      	movs	r0, #0
 801288c:	4770      	bx	lr
 801288e:	bf00      	nop
 8012890:	200037e0 	.word	0x200037e0

08012894 <_kill>:
 8012894:	4b02      	ldr	r3, [pc, #8]	; (80128a0 <_kill+0xc>)
 8012896:	2258      	movs	r2, #88	; 0x58
 8012898:	601a      	str	r2, [r3, #0]
 801289a:	f04f 30ff 	mov.w	r0, #4294967295
 801289e:	4770      	bx	lr
 80128a0:	200037e0 	.word	0x200037e0

080128a4 <_lseek>:
 80128a4:	4b02      	ldr	r3, [pc, #8]	; (80128b0 <_lseek+0xc>)
 80128a6:	2258      	movs	r2, #88	; 0x58
 80128a8:	601a      	str	r2, [r3, #0]
 80128aa:	f04f 30ff 	mov.w	r0, #4294967295
 80128ae:	4770      	bx	lr
 80128b0:	200037e0 	.word	0x200037e0

080128b4 <_read>:
 80128b4:	4b02      	ldr	r3, [pc, #8]	; (80128c0 <_read+0xc>)
 80128b6:	2258      	movs	r2, #88	; 0x58
 80128b8:	601a      	str	r2, [r3, #0]
 80128ba:	f04f 30ff 	mov.w	r0, #4294967295
 80128be:	4770      	bx	lr
 80128c0:	200037e0 	.word	0x200037e0

080128c4 <_sbrk>:
 80128c4:	4a04      	ldr	r2, [pc, #16]	; (80128d8 <_sbrk+0x14>)
 80128c6:	6811      	ldr	r1, [r2, #0]
 80128c8:	4603      	mov	r3, r0
 80128ca:	b909      	cbnz	r1, 80128d0 <_sbrk+0xc>
 80128cc:	4903      	ldr	r1, [pc, #12]	; (80128dc <_sbrk+0x18>)
 80128ce:	6011      	str	r1, [r2, #0]
 80128d0:	6810      	ldr	r0, [r2, #0]
 80128d2:	4403      	add	r3, r0
 80128d4:	6013      	str	r3, [r2, #0]
 80128d6:	4770      	bx	lr
 80128d8:	200037e8 	.word	0x200037e8
 80128dc:	200037f0 	.word	0x200037f0

080128e0 <_write>:
 80128e0:	4b02      	ldr	r3, [pc, #8]	; (80128ec <_write+0xc>)
 80128e2:	2258      	movs	r2, #88	; 0x58
 80128e4:	601a      	str	r2, [r3, #0]
 80128e6:	f04f 30ff 	mov.w	r0, #4294967295
 80128ea:	4770      	bx	lr
 80128ec:	200037e0 	.word	0x200037e0

080128f0 <_exit>:
 80128f0:	e7fe      	b.n	80128f0 <_exit>
	...

080128f4 <_init>:
 80128f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128f6:	bf00      	nop
 80128f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128fa:	bc08      	pop	{r3}
 80128fc:	469e      	mov	lr, r3
 80128fe:	4770      	bx	lr

08012900 <_fini>:
 8012900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012902:	bf00      	nop
 8012904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012906:	bc08      	pop	{r3}
 8012908:	469e      	mov	lr, r3
 801290a:	4770      	bx	lr
