
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f24  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001a8a8  080130d8  080130d8  000230d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d980  0802d980  000402a4  2**0
                  CONTENTS
  4 .ARM          00000008  0802d980  0802d980  0003d980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d988  0802d988  000402a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d988  0802d988  0003d988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d98c  0802d98c  0003d98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0802d990  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000402a4  2**0
                  CONTENTS
 10 .bss          000058fc  200002a4  200002a4  000402a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005ba0  20005ba0  000402a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000402a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028e96  00000000  00000000  000402d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000664a  00000000  00000000  0006916a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002130  00000000  00000000  0006f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e88  00000000  00000000  000718e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dd8e  00000000  00000000  00073770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fcc9  00000000  00000000  000a14fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f016c  00000000  00000000  000d11c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c1333  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009b9c  00000000  00000000  001c1384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002a4 	.word	0x200002a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080130bc 	.word	0x080130bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002a8 	.word	0x200002a8
 80001ec:	080130bc 	.word	0x080130bc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <SD_logger>:
void Send_Uart (char *string)
{
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}

void SD_logger(char *msg){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	Create_Dir("logs");
 8000fb4:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <SD_logger+0x24>)
 8000fb6:	f000 fa1d 	bl	80013f4 <Create_Dir>
	Create_File("logs/LOG.TXT");
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <SD_logger+0x28>)
 8000fbc:	f000 f8da 	bl	8001174 <Create_File>
	Update_File("logs/LOG.TXT", msg);
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <SD_logger+0x28>)
 8000fc4:	f000 f962 	bl	800128c <Update_File>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	080130d8 	.word	0x080130d8
 8000fd4:	080130e0 	.word	0x080130e0

08000fd8 <Mount_SD>:

uint8_t Mount_SD (const TCHAR* path)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <Mount_SD+0x30>)
 8000fe6:	f00d faa1 	bl	800e52c <f_mount>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <Mount_SD+0x34>)
 8000ff0:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
	if (fresult != FR_OK){
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <Mount_SD+0x34>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <Mount_SD+0x26>
		return SD_ERROR;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <Mount_SD+0x28>
	} else{
		return SD_SUCCESS;
 8000ffe:	2301      	movs	r3, #1
	}
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200002c0 	.word	0x200002c0
 800100c:	2000233c 	.word	0x2000233c

08001010 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name, char *outputBuffer)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800101a:	494d      	ldr	r1, [pc, #308]	; (8001150 <Read_File+0x140>)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f00e f832 	bl	800f086 <f_stat>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <Read_File+0x144>)
 8001028:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800102a:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <Read_File+0x144>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00f      	beq.n	8001052 <Read_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 8001032:	2064      	movs	r0, #100	; 0x64
 8001034:	f00e fa24 	bl	800f480 <malloc>
 8001038:	4603      	mov	r3, r0
 800103a:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4946      	ldr	r1, [pc, #280]	; (8001158 <Read_File+0x148>)
 8001040:	68b8      	ldr	r0, [r7, #8]
 8001042:	f00f f8f7 	bl	8010234 <siprintf>
//		Send_Uart (buf);
		free(buf);
 8001046:	68b8      	ldr	r0, [r7, #8]
 8001048:	f00e fa22 	bl	800f490 <free>
	    return fresult;
 800104c:	4b41      	ldr	r3, [pc, #260]	; (8001154 <Read_File+0x144>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	e07a      	b.n	8001148 <Read_File+0x138>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 8001052:	2201      	movs	r2, #1
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4841      	ldr	r0, [pc, #260]	; (800115c <Read_File+0x14c>)
 8001058:	f00d faae 	bl	800e5b8 <f_open>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <Read_File+0x144>)
 8001062:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 8001064:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <Read_File+0x144>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d012      	beq.n	8001092 <Read_File+0x82>
		{
			char *buf = malloc(100*sizeof(char));
 800106c:	2064      	movs	r0, #100	; 0x64
 800106e:	f00e fa07 	bl	800f480 <malloc>
 8001072:	4603      	mov	r3, r0
 8001074:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <Read_File+0x144>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4938      	ldr	r1, [pc, #224]	; (8001160 <Read_File+0x150>)
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f00f f8d7 	bl	8010234 <siprintf>
//		    Send_Uart(buf);
		    free(buf);
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f00e fa02 	bl	800f490 <free>
		    return fresult;
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <Read_File+0x144>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	e05a      	b.n	8001148 <Read_File+0x138>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 8001092:	2004      	movs	r0, #4
 8001094:	f00e f9f4 	bl	800f480 <malloc>
 8001098:	4603      	mov	r3, r0
 800109a:	61fb      	str	r3, [r7, #28]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <Read_File+0x14c>)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <Read_File+0x154>)
 80010a2:	69f9      	ldr	r1, [r7, #28]
 80010a4:	482d      	ldr	r0, [pc, #180]	; (800115c <Read_File+0x14c>)
 80010a6:	f00d fc53 	bl	800e950 <f_read>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <Read_File+0x144>)
 80010b0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <Read_File+0x144>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d013      	beq.n	80010e2 <Read_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	f00e f9e0 	bl	800f480 <malloc>
 80010c0:	4603      	mov	r3, r0
 80010c2:	613b      	str	r3, [r7, #16]
			free(buffer);
 80010c4:	69f8      	ldr	r0, [r7, #28]
 80010c6:	f00e f9e3 	bl	800f490 <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <Read_File+0x144>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4925      	ldr	r1, [pc, #148]	; (8001168 <Read_File+0x158>)
 80010d4:	6938      	ldr	r0, [r7, #16]
 80010d6:	f00f f8ad 	bl	8010234 <siprintf>
//		  	Send_Uart(buffer);
		  	free(buf);
 80010da:	6938      	ldr	r0, [r7, #16]
 80010dc:	f00e f9d8 	bl	800f490 <free>
 80010e0:	e030      	b.n	8001144 <Read_File+0x134>
		}

		else
		{
//			Send_Uart(buffer);
			strncpy(outputBuffer, buffer, 49);
 80010e2:	2231      	movs	r2, #49	; 0x31
 80010e4:	69f9      	ldr	r1, [r7, #28]
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f00f f907 	bl	80102fa <strncpy>
			free(buffer);
 80010ec:	69f8      	ldr	r0, [r7, #28]
 80010ee:	f00e f9cf 	bl	800f490 <free>

			/* Close file */
			fresult = f_close(&fil);
 80010f2:	481a      	ldr	r0, [pc, #104]	; (800115c <Read_File+0x14c>)
 80010f4:	f00d ff9d 	bl	800f032 <f_close>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <Read_File+0x144>)
 80010fe:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <Read_File+0x144>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d010      	beq.n	800112a <Read_File+0x11a>
			{
				char *buf = malloc(100*sizeof(char));
 8001108:	2064      	movs	r0, #100	; 0x64
 800110a:	f00e f9b9 	bl	800f480 <malloc>
 800110e:	4603      	mov	r3, r0
 8001110:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <Read_File+0x144>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4914      	ldr	r1, [pc, #80]	; (800116c <Read_File+0x15c>)
 800111c:	6978      	ldr	r0, [r7, #20]
 800111e:	f00f f889 	bl	8010234 <siprintf>
//				Send_Uart(buf);
				free(buf);
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f00e f9b4 	bl	800f490 <free>
 8001128:	e00c      	b.n	8001144 <Read_File+0x134>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 800112a:	2064      	movs	r0, #100	; 0x64
 800112c:	f00e f9a8 	bl	800f480 <malloc>
 8001130:	4603      	mov	r3, r0
 8001132:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <Read_File+0x160>)
 8001138:	69b8      	ldr	r0, [r7, #24]
 800113a:	f00f f87b 	bl	8010234 <siprintf>
//				Send_Uart(buf);
				free(buf);
 800113e:	69b8      	ldr	r0, [r7, #24]
 8001140:	f00e f9a6 	bl	800f490 <free>
			}
		}
	    return fresult;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <Read_File+0x144>)
 8001146:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001148:	4618      	mov	r0, r3
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20002324 	.word	0x20002324
 8001154:	2000233c 	.word	0x2000233c
 8001158:	08013214 	.word	0x08013214
 800115c:	200012f4 	.word	0x200012f4
 8001160:	08013150 	.word	0x08013150
 8001164:	20002340 	.word	0x20002340
 8001168:	08013238 	.word	0x08013238
 800116c:	08013260 	.word	0x08013260
 8001170:	08013288 	.word	0x08013288

08001174 <Create_File>:

FRESULT Create_File (char *name)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800117c:	493b      	ldr	r1, [pc, #236]	; (800126c <Create_File+0xf8>)
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f00d ff81 	bl	800f086 <f_stat>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b39      	ldr	r3, [pc, #228]	; (8001270 <Create_File+0xfc>)
 800118a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800118c:	4b38      	ldr	r3, [pc, #224]	; (8001270 <Create_File+0xfc>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10f      	bne.n	80011b4 <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 8001194:	2064      	movs	r0, #100	; 0x64
 8001196:	f00e f973 	bl	800f480 <malloc>
 800119a:	4603      	mov	r3, r0
 800119c:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4934      	ldr	r1, [pc, #208]	; (8001274 <Create_File+0x100>)
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f00f f846 	bl	8010234 <siprintf>
//		Send_Uart(buf);
		free(buf);
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f00e f971 	bl	800f490 <free>
	    return fresult;
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <Create_File+0xfc>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	e057      	b.n	8001264 <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80011b4:	220b      	movs	r2, #11
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	482f      	ldr	r0, [pc, #188]	; (8001278 <Create_File+0x104>)
 80011ba:	f00d f9fd 	bl	800e5b8 <f_open>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <Create_File+0xfc>)
 80011c4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <Create_File+0xfc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d012      	beq.n	80011f4 <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f00e f956 	bl	800f480 <malloc>
 80011d4:	4603      	mov	r3, r0
 80011d6:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <Create_File+0xfc>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4926      	ldr	r1, [pc, #152]	; (800127c <Create_File+0x108>)
 80011e2:	6938      	ldr	r0, [r7, #16]
 80011e4:	f00f f826 	bl	8010234 <siprintf>
//			Send_Uart(buf);
			free(buf);
 80011e8:	6938      	ldr	r0, [r7, #16]
 80011ea:	f00e f951 	bl	800f490 <free>
		    return fresult;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <Create_File+0xfc>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	e037      	b.n	8001264 <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80011f4:	2064      	movs	r0, #100	; 0x64
 80011f6:	f00e f943 	bl	800f480 <malloc>
 80011fa:	4603      	mov	r3, r0
 80011fc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	491f      	ldr	r1, [pc, #124]	; (8001280 <Create_File+0x10c>)
 8001202:	69f8      	ldr	r0, [r7, #28]
 8001204:	f00f f816 	bl	8010234 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001208:	69f8      	ldr	r0, [r7, #28]
 800120a:	f00e f941 	bl	800f490 <free>
		}

		fresult = f_close(&fil);
 800120e:	481a      	ldr	r0, [pc, #104]	; (8001278 <Create_File+0x104>)
 8001210:	f00d ff0f 	bl	800f032 <f_close>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <Create_File+0xfc>)
 800121a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <Create_File+0xfc>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d010      	beq.n	8001246 <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 8001224:	2064      	movs	r0, #100	; 0x64
 8001226:	f00e f92b 	bl	800f480 <malloc>
 800122a:	4603      	mov	r3, r0
 800122c:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <Create_File+0xfc>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4913      	ldr	r1, [pc, #76]	; (8001284 <Create_File+0x110>)
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f00e fffb 	bl	8010234 <siprintf>
//			Send_Uart(buf);
			free(buf);
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f00e f926 	bl	800f490 <free>
 8001244:	e00c      	b.n	8001260 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001246:	2064      	movs	r0, #100	; 0x64
 8001248:	f00e f91a 	bl	800f480 <malloc>
 800124c:	4603      	mov	r3, r0
 800124e:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	490d      	ldr	r1, [pc, #52]	; (8001288 <Create_File+0x114>)
 8001254:	69b8      	ldr	r0, [r7, #24]
 8001256:	f00e ffed 	bl	8010234 <siprintf>
//			Send_Uart(buf);
			free(buf);
 800125a:	69b8      	ldr	r0, [r7, #24]
 800125c:	f00e f918 	bl	800f490 <free>
		}
	}
    return fresult;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <Create_File+0xfc>)
 8001262:	781b      	ldrb	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20002324 	.word	0x20002324
 8001270:	2000233c 	.word	0x2000233c
 8001274:	080132a8 	.word	0x080132a8
 8001278:	200012f4 	.word	0x200012f4
 800127c:	080132e0 	.word	0x080132e0
 8001280:	08013308 	.word	0x08013308
 8001284:	08013348 	.word	0x08013348
 8001288:	08013288 	.word	0x08013288

0800128c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001296:	494d      	ldr	r1, [pc, #308]	; (80013cc <Update_File+0x140>)
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f00d fef4 	bl	800f086 <f_stat>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <Update_File+0x144>)
 80012a4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012a6:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <Update_File+0x144>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00f      	beq.n	80012ce <Update_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f00e f8e6 	bl	800f480 <malloc>
 80012b4:	4603      	mov	r3, r0
 80012b6:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4946      	ldr	r1, [pc, #280]	; (80013d4 <Update_File+0x148>)
 80012bc:	68b8      	ldr	r0, [r7, #8]
 80012be:	f00e ffb9 	bl	8010234 <siprintf>
//		Send_Uart (buf);
		free(buf);
 80012c2:	68b8      	ldr	r0, [r7, #8]
 80012c4:	f00e f8e4 	bl	800f490 <free>
	    return fresult;
 80012c8:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <Update_File+0x144>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	e079      	b.n	80013c2 <Update_File+0x136>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80012ce:	2232      	movs	r2, #50	; 0x32
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4841      	ldr	r0, [pc, #260]	; (80013d8 <Update_File+0x14c>)
 80012d4:	f00d f970 	bl	800e5b8 <f_open>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Update_File+0x144>)
 80012de:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012e0:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <Update_File+0x144>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d012      	beq.n	800130e <Update_File+0x82>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012e8:	2064      	movs	r0, #100	; 0x64
 80012ea:	f00e f8c9 	bl	800f480 <malloc>
 80012ee:	4603      	mov	r3, r0
 80012f0:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <Update_File+0x144>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4938      	ldr	r1, [pc, #224]	; (80013dc <Update_File+0x150>)
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f00e ff99 	bl	8010234 <siprintf>
//	    	Send_Uart(buf);
	        free(buf);
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f00e f8c4 	bl	800f490 <free>
	        return fresult;
 8001308:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <Update_File+0x144>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	e059      	b.n	80013c2 <Update_File+0x136>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800130e:	6838      	ldr	r0, [r7, #0]
 8001310:	f7fe ff6e 	bl	80001f0 <strlen>
 8001314:	4602      	mov	r2, r0
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <Update_File+0x154>)
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	482f      	ldr	r0, [pc, #188]	; (80013d8 <Update_File+0x14c>)
 800131c:	f00d fc77 	bl	800ec0e <f_write>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <Update_File+0x144>)
 8001326:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <Update_File+0x144>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d010      	beq.n	8001352 <Update_File+0xc6>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001330:	2064      	movs	r0, #100	; 0x64
 8001332:	f00e f8a5 	bl	800f480 <malloc>
 8001336:	4603      	mov	r3, r0
 8001338:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Update_File+0x144>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4928      	ldr	r1, [pc, #160]	; (80013e4 <Update_File+0x158>)
 8001344:	69b8      	ldr	r0, [r7, #24]
 8001346:	f00e ff75 	bl	8010234 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800134a:	69b8      	ldr	r0, [r7, #24]
 800134c:	f00e f8a0 	bl	800f490 <free>
 8001350:	e00c      	b.n	800136c <Update_File+0xe0>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001352:	2064      	movs	r0, #100	; 0x64
 8001354:	f00e f894 	bl	800f480 <malloc>
 8001358:	4603      	mov	r3, r0
 800135a:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4922      	ldr	r1, [pc, #136]	; (80013e8 <Update_File+0x15c>)
 8001360:	69f8      	ldr	r0, [r7, #28]
 8001362:	f00e ff67 	bl	8010234 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 8001366:	69f8      	ldr	r0, [r7, #28]
 8001368:	f00e f892 	bl	800f490 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <Update_File+0x14c>)
 800136e:	f00d fe60 	bl	800f032 <f_close>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Update_File+0x144>)
 8001378:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <Update_File+0x144>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d010      	beq.n	80013a4 <Update_File+0x118>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001382:	2064      	movs	r0, #100	; 0x64
 8001384:	f00e f87c 	bl	800f480 <malloc>
 8001388:	4603      	mov	r3, r0
 800138a:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <Update_File+0x144>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4915      	ldr	r1, [pc, #84]	; (80013ec <Update_File+0x160>)
 8001396:	6938      	ldr	r0, [r7, #16]
 8001398:	f00e ff4c 	bl	8010234 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800139c:	6938      	ldr	r0, [r7, #16]
 800139e:	f00e f877 	bl	800f490 <free>
 80013a2:	e00c      	b.n	80013be <Update_File+0x132>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013a4:	2064      	movs	r0, #100	; 0x64
 80013a6:	f00e f86b 	bl	800f480 <malloc>
 80013aa:	4603      	mov	r3, r0
 80013ac:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	490f      	ldr	r1, [pc, #60]	; (80013f0 <Update_File+0x164>)
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f00e ff3e 	bl	8010234 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80013b8:	6978      	ldr	r0, [r7, #20]
 80013ba:	f00e f869 	bl	800f490 <free>
	     }
	}
    return fresult;
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <Update_File+0x144>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20002324 	.word	0x20002324
 80013d0:	2000233c 	.word	0x2000233c
 80013d4:	08013130 	.word	0x08013130
 80013d8:	200012f4 	.word	0x200012f4
 80013dc:	08013150 	.word	0x08013150
 80013e0:	20002344 	.word	0x20002344
 80013e4:	0801336c 	.word	0x0801336c
 80013e8:	08013394 	.word	0x08013394
 80013ec:	08013260 	.word	0x08013260
 80013f0:	08013288 	.word	0x08013288

080013f4 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f00d fe7b 	bl	800f0f8 <f_mkdir>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <Create_Dir+0x68>)
 8001408:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <Create_Dir+0x68>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10d      	bne.n	800142e <Create_Dir+0x3a>
    {
    	char *buf = malloc(100*sizeof(char));
 8001412:	2064      	movs	r0, #100	; 0x64
 8001414:	f00e f834 	bl	800f480 <malloc>
 8001418:	4603      	mov	r3, r0
 800141a:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4910      	ldr	r1, [pc, #64]	; (8001460 <Create_Dir+0x6c>)
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	f00e ff07 	bl	8010234 <siprintf>
//    	Send_Uart (buf);
    	free(buf);
 8001426:	68b8      	ldr	r0, [r7, #8]
 8001428:	f00e f832 	bl	800f490 <free>
 800142c:	e00f      	b.n	800144e <Create_Dir+0x5a>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 800142e:	2064      	movs	r0, #100	; 0x64
 8001430:	f00e f826 	bl	800f480 <malloc>
 8001434:	4603      	mov	r3, r0
 8001436:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <Create_Dir+0x68>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4908      	ldr	r1, [pc, #32]	; (8001464 <Create_Dir+0x70>)
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f00e fef6 	bl	8010234 <siprintf>
//    	Send_Uart(buf);
    	free(buf);
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f00e f821 	bl	800f490 <free>
    }
    return fresult;
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <Create_Dir+0x68>)
 8001450:	781b      	ldrb	r3, [r3, #0]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000233c 	.word	0x2000233c
 8001460:	080133f4 	.word	0x080133f4
 8001464:	08013418 	.word	0x08013418

08001468 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8001476:	2332      	movs	r3, #50	; 0x32
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2301      	movs	r3, #1
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	1dbb      	adds	r3, r7, #6
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	22d0      	movs	r2, #208	; 0xd0
 8001486:	21ef      	movs	r1, #239	; 0xef
 8001488:	4806      	ldr	r0, [pc, #24]	; (80014a4 <read_chip_id+0x3c>)
 800148a:	f005 fd29 	bl	8006ee0 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	2b55      	cmp	r3, #85	; 0x55
 8001492:	d001      	beq.n	8001498 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001494:	2301      	movs	r3, #1
 8001496:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001498:	79fb      	ldrb	r3, [r7, #7]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20002554 	.word	0x20002554

080014a8 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af04      	add	r7, sp, #16
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80014b4:	2300      	movs	r3, #0
 80014b6:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d81a      	bhi.n	80014f4 <set_oss+0x4c>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <set_oss+0x1c>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014d5 	.word	0x080014d5
 80014c8:	080014dd 	.word	0x080014dd
 80014cc:	080014e5 	.word	0x080014e5
 80014d0:	080014ed 	.word	0x080014ed
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2205      	movs	r2, #5
 80014d8:	705a      	strb	r2, [r3, #1]
			break;
 80014da:	e00f      	b.n	80014fc <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2208      	movs	r2, #8
 80014e0:	705a      	strb	r2, [r3, #1]
			break;
 80014e2:	e00b      	b.n	80014fc <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	220e      	movs	r2, #14
 80014e8:	705a      	strb	r2, [r3, #1]
			break;
 80014ea:	e007      	b.n	80014fc <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	221a      	movs	r2, #26
 80014f0:	705a      	strb	r2, [r3, #1]
			break;
 80014f2:	e003      	b.n	80014fc <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2208      	movs	r2, #8
 80014f8:	705a      	strb	r2, [r3, #1]
			break;
 80014fa:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	78fa      	ldrb	r2, [r7, #3]
 8001500:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	70fb      	strb	r3, [r7, #3]
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 800150c:	2332      	movs	r3, #50	; 0x32
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	2302      	movs	r3, #2
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2301      	movs	r3, #1
 800151c:	22f4      	movs	r2, #244	; 0xf4
 800151e:	21ee      	movs	r1, #238	; 0xee
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <set_oss+0x88>)
 8001522:	f005 fbe3 	bl	8006cec <HAL_I2C_Mem_Write>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20002554 	.word	0x20002554

08001534 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af04      	add	r7, sp, #16
 800153a:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 800153c:	2300      	movs	r3, #0
 800153e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 800155c:	2301      	movs	r3, #1
 800155e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001562:	2332      	movs	r3, #50	; 0x32
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	2316      	movs	r3, #22
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2301      	movs	r3, #1
 8001572:	22aa      	movs	r2, #170	; 0xaa
 8001574:	21ef      	movs	r1, #239	; 0xef
 8001576:	4827      	ldr	r0, [pc, #156]	; (8001614 <read_calib_data+0xe0>)
 8001578:	f005 fcb2 	bl	8006ee0 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001582:	e03c      	b.n	80015fe <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	3328      	adds	r3, #40	; 0x28
 800158c:	443b      	add	r3, r7
 800158e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b219      	sxth	r1, r3
 8001596:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800159a:	3328      	adds	r3, #40	; 0x28
 800159c:	443b      	add	r3, r7
 800159e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	4403      	add	r3, r0
 80015ae:	430a      	orrs	r2, r1
 80015b0:	b212      	sxth	r2, r2
 80015b2:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80015b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	440b      	add	r3, r1
 80015d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80015f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015f8:	3301      	adds	r3, #1
 80015fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001602:	2b0b      	cmp	r3, #11
 8001604:	d9be      	bls.n	8001584 <read_calib_data+0x50>
		}
	}

	return ret_val;
 8001606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800160a:	4618      	mov	r0, r3
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20002554 	.word	0x20002554

08001618 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2204      	movs	r2, #4
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f00d ff48 	bl	800f4bc <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 800162c:	687c      	ldr	r4, [r7, #4]
 800162e:	f7ff ff1b 	bl	8001468 <read_chip_id>
 8001632:	4603      	mov	r3, r0
 8001634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	687c      	ldr	r4, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff79 	bl	8001534 <read_calib_data>
 8001642:	4603      	mov	r3, r0
 8001644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3340      	adds	r3, #64	; 0x40
 800164c:	2101      	movs	r1, #1
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff2a 	bl	80014a8 <set_oss>
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8001662:	232e      	movs	r3, #46	; 0x2e
 8001664:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001666:	2332      	movs	r3, #50	; 0x32
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	2301      	movs	r3, #1
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	22f4      	movs	r2, #244	; 0xf4
 8001676:	21ee      	movs	r1, #238	; 0xee
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <get_ut+0x50>)
 800167a:	f005 fb37 	bl	8006cec <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 800167e:	2005      	movs	r0, #5
 8001680:	f004 fe18 	bl	80062b4 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 8001684:	2332      	movs	r3, #50	; 0x32
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	2302      	movs	r3, #2
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	22f6      	movs	r2, #246	; 0xf6
 8001694:	21ef      	movs	r1, #239	; 0xef
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <get_ut+0x50>)
 8001698:	f005 fc22 	bl	8006ee0 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 800169c:	793b      	ldrb	r3, [r7, #4]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	797a      	ldrb	r2, [r7, #5]
 80016a2:	4313      	orrs	r3, r2
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20002554 	.word	0x20002554

080016b0 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80016cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d0:	ee17 2a90 	vmov	r2, s15
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	895b      	ldrh	r3, [r3, #10]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	8912      	ldrh	r2, [r2, #8]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	13db      	asrs	r3, r3, #15
 80016e4:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016ec:	02da      	lsls	r2, r3, #11
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016f4:	4619      	mov	r1, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	440b      	add	r3, r1
 80016fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80016fe:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	441a      	add	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170e:	3308      	adds	r3, #8
 8001710:	111b      	asrs	r3, r3, #4
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001768 <get_temp+0xb8>
 800171e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001722:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8001726:	edd7 7a03 	vldr	s15, [r7, #12]
 800172a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800176c <get_temp+0xbc>
 800172e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d908      	bls.n	800174a <get_temp+0x9a>
 8001738:	edd7 7a03 	vldr	s15, [r7, #12]
 800173c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001770 <get_temp+0xc0>
 8001740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	db03      	blt.n	8001752 <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	ee07 3a90 	vmov	s15, r3
}
 8001758:	eeb0 0a67 	vmov.f32	s0, s15
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	3dcccccd 	.word	0x3dcccccd
 800176c:	c2200000 	.word	0xc2200000
 8001770:	42aa0000 	.word	0x42aa0000

08001774 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af04      	add	r7, sp, #16
 800177a:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <get_up+0x7c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	813b      	strh	r3, [r7, #8]
 8001782:	2300      	movs	r3, #0
 8001784:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 800178a:	2334      	movs	r3, #52	; 0x34
 800178c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800178e:	2332      	movs	r3, #50	; 0x32
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	2301      	movs	r3, #1
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2301      	movs	r3, #1
 800179e:	22f4      	movs	r2, #244	; 0xf4
 80017a0:	21ee      	movs	r1, #238	; 0xee
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <get_up+0x80>)
 80017a4:	f005 faa2 	bl	8006cec <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80017a8:	797b      	ldrb	r3, [r7, #5]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fd82 	bl	80062b4 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80017b0:	2332      	movs	r3, #50	; 0x32
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2303      	movs	r3, #3
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2301      	movs	r3, #1
 80017c0:	22f6      	movs	r2, #246	; 0xf6
 80017c2:	21ef      	movs	r1, #239	; 0xef
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <get_up+0x80>)
 80017c6:	f005 fb8b 	bl	8006ee0 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80017ca:	7a3b      	ldrb	r3, [r7, #8]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	7a7b      	ldrb	r3, [r7, #9]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	4413      	add	r3, r2
 80017d4:	7aba      	ldrb	r2, [r7, #10]
 80017d6:	441a      	add	r2, r3
 80017d8:	793b      	ldrb	r3, [r7, #4]
 80017da:	f1c3 0308 	rsb	r3, r3, #8
 80017de:	fa42 f303 	asr.w	r3, r2, r3
 80017e2:	60fb      	str	r3, [r7, #12]
	return up;
 80017e4:	68fb      	ldr	r3, [r7, #12]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	08013488 	.word	0x08013488
 80017f4:	20002554 	.word	0x20002554

080017f8 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80017f8:	b084      	sub	sp, #16
 80017fa:	b480      	push	{r7}
 80017fc:	b089      	sub	sp, #36	; 0x24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001804:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001812:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001816:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001818:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800181c:	461a      	mov	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fb03 f303 	mul.w	r3, r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	da01      	bge.n	800182c <get_pressure+0x34>
 8001828:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800182c:	131b      	asrs	r3, r3, #12
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	da01      	bge.n	800183a <get_pressure+0x42>
 8001836:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800183a:	12db      	asrs	r3, r3, #11
 800183c:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 800183e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001842:	461a      	mov	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	da01      	bge.n	8001852 <get_pressure+0x5a>
 800184e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001852:	12db      	asrs	r3, r3, #11
 8001854:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800185e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001862:	009a      	lsls	r2, r3, #2
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4413      	add	r3, r2
 8001868:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800186c:	4093      	lsls	r3, r2
 800186e:	3302      	adds	r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	da00      	bge.n	8001876 <get_pressure+0x7e>
 8001874:	3303      	adds	r3, #3
 8001876:	109b      	asrs	r3, r3, #2
 8001878:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800187a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800187e:	461a      	mov	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	da02      	bge.n	8001890 <get_pressure+0x98>
 800188a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800188e:	331f      	adds	r3, #31
 8001890:	135b      	asrs	r3, r3, #13
 8001892:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001894:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001898:	461a      	mov	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fb03 f303 	mul.w	r3, r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da01      	bge.n	80018a8 <get_pressure+0xb0>
 80018a4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80018a8:	131b      	asrs	r3, r3, #12
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	da02      	bge.n	80018b8 <get_pressure+0xc0>
 80018b2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018b6:	33ff      	adds	r3, #255	; 0xff
 80018b8:	141b      	asrs	r3, r3, #16
 80018ba:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	3302      	adds	r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da00      	bge.n	80018ca <get_pressure+0xd2>
 80018c8:	3303      	adds	r3, #3
 80018ca:	109b      	asrs	r3, r3, #2
 80018cc:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80018ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018d0:	461a      	mov	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	0bdb      	lsrs	r3, r3, #15
 80018de:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80018e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80018ec:	4611      	mov	r1, r2
 80018ee:	f24c 3250 	movw	r2, #50000	; 0xc350
 80018f2:	410a      	asrs	r2, r1
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db06      	blt.n	800190e <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	005a      	lsls	r2, r3, #1
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	e005      	b.n	800191a <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	2b00      	cmp	r3, #0
 800191e:	da00      	bge.n	8001922 <get_pressure+0x12a>
 8001920:	33ff      	adds	r3, #255	; 0xff
 8001922:	121b      	asrs	r3, r3, #8
 8001924:	461a      	mov	r2, r3
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b00      	cmp	r3, #0
 800192a:	da00      	bge.n	800192e <get_pressure+0x136>
 800192c:	33ff      	adds	r3, #255	; 0xff
 800192e:	121b      	asrs	r3, r3, #8
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f640 32de 	movw	r2, #3038	; 0xbde
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	da02      	bge.n	800194a <get_pressure+0x152>
 8001944:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001948:	33ff      	adds	r3, #255	; 0xff
 800194a:	141b      	asrs	r3, r3, #16
 800194c:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <get_pressure+0x198>)
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	da02      	bge.n	8001960 <get_pressure+0x168>
 800195a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800195e:	33ff      	adds	r3, #255	; 0xff
 8001960:	141b      	asrs	r3, r3, #16
 8001962:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800196e:	2b00      	cmp	r3, #0
 8001970:	da00      	bge.n	8001974 <get_pressure+0x17c>
 8001972:	330f      	adds	r3, #15
 8001974:	111b      	asrs	r3, r3, #4
 8001976:	461a      	mov	r2, r3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4413      	add	r3, r2
 800197c:	61fb      	str	r3, [r7, #28]

	return p;
 800197e:	69fb      	ldr	r3, [r7, #28]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3724      	adds	r7, #36	; 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	b004      	add	sp, #16
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	ffffe343 	.word	0xffffe343
 8001994:	00000000 	.word	0x00000000

08001998 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <get_altitude+0xb8>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019bc:	ee16 0a90 	vmov	r0, s13
 80019c0:	f7fe fdd2 	bl	8000568 <__aeabi_f2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001a40 <get_altitude+0xa8>
 80019cc:	ec43 2b10 	vmov	d0, r2, r3
 80019d0:	f010 fc2e 	bl	8012230 <pow>
 80019d4:	ec53 2b10 	vmov	r2, r3, d0
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	491d      	ldr	r1, [pc, #116]	; (8001a54 <get_altitude+0xbc>)
 80019de:	f7fe fc63 	bl	80002a8 <__aeabi_dsub>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	a317      	add	r3, pc, #92	; (adr r3, 8001a48 <get_altitude+0xb0>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fe12 	bl	8000618 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f904 	bl	8000c08 <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001a04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a08:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001a58 <get_altitude+0xc0>
 8001a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d908      	bls.n	8001a28 <get_altitude+0x90>
 8001a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a5c <get_altitude+0xc4>
 8001a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	db03      	blt.n	8001a30 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2205      	movs	r2, #5
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	ee07 3a90 	vmov	s15, r3
}
 8001a36:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	ccd9456c 	.word	0xccd9456c
 8001a44:	3fc85b95 	.word	0x3fc85b95
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	40e5a540 	.word	0x40e5a540
 8001a50:	20000000 	.word	0x20000000
 8001a54:	3ff00000 	.word	0x3ff00000
 8001a58:	c3fa0000 	.word	0xc3fa0000
 8001a5c:	460ca000 	.word	0x460ca000

08001a60 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd66 	bl	8000544 <__aeabi_i2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <get_slp+0x80>)
 8001a7e:	ed93 7a00 	vldr	s14, [r3]
 8001a82:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001ae4 <get_slp+0x84>
 8001a86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a92:	ee17 0a90 	vmov	r0, s15
 8001a96:	f7fe fd67 	bl	8000568 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001ad8 <get_slp+0x78>
 8001aa2:	ec43 2b10 	vmov	d0, r2, r3
 8001aa6:	f010 fbc3 	bl	8012230 <pow>
 8001aaa:	ec53 2b10 	vmov	r2, r3, d0
 8001aae:	4620      	mov	r0, r4
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	f7fe fedb 	bl	800086c <__aeabi_ddiv>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f8a3 	bl	8000c08 <__aeabi_d2f>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	60fb      	str	r3, [r7, #12]

	return slp;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	ee07 3a90 	vmov	s15, r3
}
 8001acc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	b851eb85 	.word	0xb851eb85
 8001adc:	4015051e 	.word	0x4015051e
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	472d2a00 	.word	0x472d2a00

08001ae8 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aea:	b095      	sub	sp, #84	; 0x54
 8001aec:	af0e      	add	r7, sp, #56	; 0x38
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 8001af2:	f7ff fdb3 	bl	800165c <get_ut>
 8001af6:	ee07 0a90 	vmov	s15, r0
 8001afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff fdd3 	bl	80016b0 <get_temp>
 8001b0a:	eef0 7a40 	vmov.f32	s15, s0
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001b18:	f7ff fe2c 	bl	8001774 <get_up>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 8001b22:	683e      	ldr	r6, [r7, #0]
 8001b24:	466d      	mov	r5, sp
 8001b26:	f106 0410 	add.w	r4, r6, #16
 8001b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b3e:	f7ff fe5b 	bl	80017f8 <get_pressure>
 8001b42:	4602      	mov	r2, r0
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f7ff ff89 	bl	8001a60 <get_slp>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f7ff ff1d 	bl	8001998 <get_altitude>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6c:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	617b      	str	r3, [r7, #20]
	return result;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	461c      	mov	r4, r3
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b98 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[BTN_NUMBER] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[BTN_NUMBER] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[BTN_NUMBER] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[BTN_NUMBER]){
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
	while(i < BTN_NUMBER){
 8001ba4:	e0ad      	b.n	8001d02 <initButtons+0x16a>
		btns[i]->pin = pins[i];
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	440b      	add	r3, r1
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4959      	ldr	r1, [pc, #356]	; (8001d18 <initButtons+0x180>)
 8001bb4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001bb8:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	440b      	add	r3, r1
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4955      	ldr	r1, [pc, #340]	; (8001d1c <initButtons+0x184>)
 8001bc8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001bcc:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	7993      	ldrb	r3, [r2, #6]
 8001bda:	f36f 0300 	bfc	r3, #0, #1
 8001bde:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	7993      	ldrb	r3, [r2, #6]
 8001bec:	f36f 0341 	bfc	r3, #1, #1
 8001bf0:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2200      	movs	r2, #0
 8001c28:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2200      	movs	r2, #0
 8001c36:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2200      	movs	r2, #0
 8001c52:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
		// new handlers
		btns[i]->onPress = NULL;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
		btns[i]->onRelease = NULL;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
		btns[i]->onShortPress = NULL;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
		btns[i]->onLongPress = NULL;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	639a      	str	r2, [r3, #56]	; 0x38
		btns[i]->onContinuousPress = NULL;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	63da      	str	r2, [r3, #60]	; 0x3c
		btns[i]->onRepeatedPress = NULL;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40
		//
		i++;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
	while(i < BTN_NUMBER){
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	f67f af4e 	bls.w	8001ba6 <initButtons+0xe>
	}
}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	20000020 	.word	0x20000020
 8001d1c:	20000008 	.word	0x20000008

08001d20 <resetButtonHandlers>:

void resetButtonHandlers(void){
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	71fb      	strb	r3, [r7, #7]
	while(i < BTN_NUMBER){
 8001d2a:	e044      	b.n	8001db6 <resetButtonHandlers+0x96>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	4a27      	ldr	r2, [pc, #156]	; (8001dcc <resetButtonHandlers+0xac>)
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	4a24      	ldr	r2, [pc, #144]	; (8001dcc <resetButtonHandlers+0xac>)
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	2200      	movs	r2, #0
 8001d42:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4a21      	ldr	r2, [pc, #132]	; (8001dcc <resetButtonHandlers+0xac>)
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <resetButtonHandlers+0xac>)
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <resetButtonHandlers+0xac>)
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
		// new handlers
		btnsPtrs[i]->onPress = NULL;
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <resetButtonHandlers+0xac>)
 8001d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d70:	2200      	movs	r2, #0
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
		btnsPtrs[i]->onRelease = NULL;
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4a15      	ldr	r2, [pc, #84]	; (8001dcc <resetButtonHandlers+0xac>)
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
		btnsPtrs[i]->onShortPress = NULL;
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <resetButtonHandlers+0xac>)
 8001d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34
		btnsPtrs[i]->onLongPress = NULL;
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	4a0f      	ldr	r2, [pc, #60]	; (8001dcc <resetButtonHandlers+0xac>)
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	2200      	movs	r2, #0
 8001d96:	639a      	str	r2, [r3, #56]	; 0x38
		btnsPtrs[i]->onContinuousPress = NULL;
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <resetButtonHandlers+0xac>)
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	2200      	movs	r2, #0
 8001da2:	63da      	str	r2, [r3, #60]	; 0x3c
		btnsPtrs[i]->onRepeatedPress = NULL;
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <resetButtonHandlers+0xac>)
 8001da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dac:	2200      	movs	r2, #0
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40

		i++;
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	3301      	adds	r3, #1
 8001db4:	71fb      	strb	r3, [r7, #7]
	while(i < BTN_NUMBER){
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d9b7      	bls.n	8001d2c <resetButtonHandlers+0xc>
	}
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	2000002c 	.word	0x2000002c

08001dd0 <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	889b      	ldrh	r3, [r3, #4]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f004 fdce 	bl	8006984 <HAL_GPIO_ReadPin>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	bf0c      	ite	eq
 8001dee:	2301      	moveq	r3, #1
 8001df0:	2300      	movne	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <scanButton>:

void scanButton(Button* btn){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	799b      	ldrb	r3, [r3, #6]
 8001e08:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	b2d9      	uxtb	r1, r3
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	7993      	ldrb	r3, [r2, #6]
 8001e1c:	f361 0300 	bfi	r3, r1, #0, #1
 8001e20:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffd4 	bl	8001dd0 <readButton>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8001e2c:	7bbb      	ldrb	r3, [r7, #14]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	b2d9      	uxtb	r1, r3
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	7993      	ldrb	r3, [r2, #6]
 8001e38:	f361 0341 	bfi	r3, r1, #1, #1
 8001e3c:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 8001e3e:	7bba      	ldrb	r2, [r7, #14]
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d158      	bne.n	8001ef8 <scanButton+0xfc>
		// stable state pressed or released
		if(currStatus == 1){
 8001e46:	7bbb      	ldrb	r3, [r7, #14]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d14e      	bne.n	8001eea <scanButton+0xee>
			// stable pressed state
			btn->pressedFor++;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e52:	3301      	adds	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			btn->shortContinuous++;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7a9b      	ldrb	r3, [r3, #10]
 8001e60:	3301      	adds	r3, #1
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <scanButton+0x7c>
				btn->onContinuousShortPressHandler(NULL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	2000      	movs	r0, #0
 8001e76:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7a9b      	ldrb	r3, [r3, #10]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	4b3e      	ldr	r3, [pc, #248]	; (8001f78 <scanButton+0x17c>)
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d32d      	bcc.n	8001ee2 <scanButton+0xe6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7b5b      	ldrb	r3, [r3, #13]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d110      	bne.n	8001eb0 <scanButton+0xb4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <scanButton+0xa2>
						btn->onSingleLongPressHandler(NULL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	4798      	blx	r3
					}
					btn->longSingleOn++;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7a5b      	ldrb	r3, [r3, #9]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7a9b      	ldrb	r3, [r3, #10]
 8001eb4:	4a30      	ldr	r2, [pc, #192]	; (8001f78 <scanButton+0x17c>)
 8001eb6:	8852      	ldrh	r2, [r2, #2]
 8001eb8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ebc:	fb01 f202 	mul.w	r2, r1, r2
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10d      	bne.n	8001ee2 <scanButton+0xe6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <scanButton+0xda>
						btn->onContinuousLongPressHandler(NULL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	4798      	blx	r3
					}
					btn->longContinuous++;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7adb      	ldrb	r3, [r3, #11]
 8001eda:	3301      	adds	r3, #1
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8001ee8:	e042      	b.n	8001f70 <scanButton+0x174>
			btn->shortSingleHandled = 0;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	735a      	strb	r2, [r3, #13]
}
 8001ef6:	e03b      	b.n	8001f70 <scanButton+0x174>
		if(currStatus == 1){
 8001ef8:	7bbb      	ldrb	r3, [r7, #14]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d11f      	bne.n	8001f3e <scanButton+0x142>
			btn->shortContinuous = 0;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7b1b      	ldrb	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d12e      	bne.n	8001f70 <scanButton+0x174>
				if(btn->onSinglePressHandler != NULL){
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d007      	beq.n	8001f2a <scanButton+0x12e>
					pulseVib(5, 75);
 8001f1a:	214b      	movs	r1, #75	; 0x4b
 8001f1c:	2005      	movs	r0, #5
 8001f1e:	f003 f88b 	bl	8005038 <pulseVib>
					btn->onSinglePressHandler(NULL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2000      	movs	r0, #0
 8001f28:	4798      	blx	r3
				btn->shortSingleOn++;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	79db      	ldrb	r3, [r3, #7]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	731a      	strb	r2, [r3, #12]
}
 8001f3c:	e018      	b.n	8001f70 <scanButton+0x174>
			if(btn->releaseHandled == 0){
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7b9b      	ldrb	r3, [r3, #14]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d114      	bne.n	8001f70 <scanButton+0x174>
				if(btn->onReleaseHandler != NULL){
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <scanButton+0x15a>
					btn->onReleaseHandler(NULL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	2000      	movs	r0, #0
 8001f54:	4798      	blx	r3
				btn->pressedFor = 0;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				btn->shortSingleOff++;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7a1b      	ldrb	r3, [r3, #8]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	739a      	strb	r2, [r3, #14]
}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000044 	.word	0x20000044

08001f7c <scanButtons>:


void scanButtons(Button* btns[6]){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001f88:	e00a      	b.n	8001fa0 <scanButtons+0x24>
		scanButton(btns[i]);
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff31 	bl	8001dfc <scanButton>
		i++;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d9f1      	bls.n	8001f8a <scanButtons+0xe>
	}
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <isTimerRunning>:
 *      Author: wojch
 */

#include "countdownTimer.h"

uint8_t isTimerRunning(countdown_t *cnt){
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	return cnt->isRunning;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	791b      	ldrb	r3, [r3, #4]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <pauseTimer>:
	cnt->remainingSec = seconds;
}
void startTimer(countdown_t *cnt){
	cnt->isRunning = 1;
}
void pauseTimer(countdown_t *cnt){
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	cnt->isRunning = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	711a      	strb	r2, [r3, #4]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	; 0x38
 8001fe8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
 8001ffe:	4b72      	ldr	r3, [pc, #456]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a71      	ldr	r2, [pc, #452]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b6f      	ldr	r3, [pc, #444]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	4b6b      	ldr	r3, [pc, #428]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a6a      	ldr	r2, [pc, #424]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002020:	f043 0320 	orr.w	r3, r3, #32
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a63      	ldr	r2, [pc, #396]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 800203c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a5c      	ldr	r2, [pc, #368]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b5a      	ldr	r3, [pc, #360]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b56      	ldr	r3, [pc, #344]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a55      	ldr	r2, [pc, #340]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b4f      	ldr	r3, [pc, #316]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a4e      	ldr	r2, [pc, #312]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002090:	f043 0310 	orr.w	r3, r3, #16
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a47      	ldr	r2, [pc, #284]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 80020ac:	f043 0308 	orr.w	r3, r3, #8
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b45      	ldr	r3, [pc, #276]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 80020c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <MX_GPIO_Init+0x1e4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	2140      	movs	r1, #64	; 0x40
 80020de:	483b      	ldr	r0, [pc, #236]	; (80021cc <MX_GPIO_Init+0x1e8>)
 80020e0:	f004 fc68 	bl	80069b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80020e4:	2200      	movs	r2, #0
 80020e6:	f244 0181 	movw	r1, #16513	; 0x4081
 80020ea:	4839      	ldr	r0, [pc, #228]	; (80021d0 <MX_GPIO_Init+0x1ec>)
 80020ec:	f004 fc62 	bl	80069b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2140      	movs	r1, #64	; 0x40
 80020f4:	4837      	ldr	r0, [pc, #220]	; (80021d4 <MX_GPIO_Init+0x1f0>)
 80020f6:	f004 fc5d 	bl	80069b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002100:	4835      	ldr	r0, [pc, #212]	; (80021d8 <MX_GPIO_Init+0x1f4>)
 8002102:	f004 fc57 	bl	80069b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002106:	2340      	movs	r3, #64	; 0x40
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210a:	2301      	movs	r3, #1
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	482b      	ldr	r0, [pc, #172]	; (80021cc <MX_GPIO_Init+0x1e8>)
 800211e:	f004 fa85 	bl	800662c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002122:	f244 0381 	movw	r3, #16513	; 0x4081
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002128:	2301      	movs	r3, #1
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002138:	4619      	mov	r1, r3
 800213a:	4825      	ldr	r0, [pc, #148]	; (80021d0 <MX_GPIO_Init+0x1ec>)
 800213c:	f004 fa76 	bl	800662c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8002140:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002146:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002154:	4619      	mov	r1, r3
 8002156:	4821      	ldr	r0, [pc, #132]	; (80021dc <MX_GPIO_Init+0x1f8>)
 8002158:	f004 fa68 	bl	800662c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800215c:	2340      	movs	r3, #64	; 0x40
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	4619      	mov	r1, r3
 8002172:	4818      	ldr	r0, [pc, #96]	; (80021d4 <MX_GPIO_Init+0x1f0>)
 8002174:	f004 fa5a 	bl	800662c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217c:	2300      	movs	r3, #0
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	4619      	mov	r1, r3
 800218a:	4812      	ldr	r0, [pc, #72]	; (80021d4 <MX_GPIO_Init+0x1f0>)
 800218c:	f004 fa4e 	bl	800662c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002196:	2301      	movs	r3, #1
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80021a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a6:	4619      	mov	r1, r3
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <MX_GPIO_Init+0x1f4>)
 80021aa:	f004 fa3f 	bl	800662c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	2028      	movs	r0, #40	; 0x28
 80021b4:	f004 f97d 	bl	80064b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021b8:	2028      	movs	r0, #40	; 0x28
 80021ba:	f004 f996 	bl	80064ea <HAL_NVIC_EnableIRQ>

}
 80021be:	bf00      	nop
 80021c0:	3738      	adds	r7, #56	; 0x38
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020000 	.word	0x40020000
 80021d0:	40020400 	.word	0x40020400
 80021d4:	40021800 	.word	0x40021800
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40021000 	.word	0x40021000

080021e0 <getDataFromUart>:
#include <string.h>
#include "gps2.h"

char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	f44f 7216 	mov.w	r2, #600	; 0x258
 80021f0:	4619      	mov	r1, r3
 80021f2:	4803      	ldr	r0, [pc, #12]	; (8002200 <getDataFromUart+0x20>)
 80021f4:	f008 ffad 	bl	800b152 <HAL_UART_Receive_DMA>

}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20005ae0 	.word	0x20005ae0

08002204 <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 8002204:	b580      	push	{r7, lr}
 8002206:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 800220a:	af00      	add	r7, sp, #0
 800220c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002210:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002214:	6018      	str	r0, [r3, #0]
 8002216:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800221a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800221e:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 8002220:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002224:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002228:	f507 721c 	add.w	r2, r7, #624	; 0x270
 800222c:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	3304      	adds	r3, #4
 800223a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f00e f85a 	bl	80102fa <strncpy>
	gpsModule.getData = &getDataFromUart;
 8002246:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800224a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800224e:	4a11      	ldr	r2, [pc, #68]	; (8002294 <initGps+0x90>)
 8002250:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	gpsModule.isReady = 1;
 8002254:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002258:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	return(gpsModule);
 8002262:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002266:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002270:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f44f 7319 	mov.w	r3, #612	; 0x264
 800227c:	461a      	mov	r2, r3
 800227e:	f00d f90f 	bl	800f4a0 <memcpy>
}
 8002282:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002286:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	080021e1 	.word	0x080021e1

08002298 <tickTimAAB>:

uint8_t isModuleSet = 0;

uint8_t isScrollbarEnabled = 0;
timer_T* scrollerTimer = NULL;
void tickTimAAB(void){
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	tickTimer(scrollerTimer);
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <tickTimAAB+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 ff4c 	bl	800613e <tickTimer>
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20002550 	.word	0x20002550

080022b0 <showScrollbar>:
void showScrollbar(void){
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af04      	add	r7, sp, #16
	uint16_t x = 390;
 80022b6:	f44f 73c3 	mov.w	r3, #390	; 0x186
 80022ba:	81fb      	strh	r3, [r7, #14]
	uint8_t y = 20;
 80022bc:	2314      	movs	r3, #20
 80022be:	737b      	strb	r3, [r7, #13]
	uint8_t h_margin = 2;
 80022c0:	2302      	movs	r3, #2
 80022c2:	733b      	strb	r3, [r7, #12]
	uint8_t v_margin = 2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	72fb      	strb	r3, [r7, #11]
	uint8_t b_margin = 4;
 80022c8:	2304      	movs	r3, #4
 80022ca:	72bb      	strb	r3, [r7, #10]
	uint8_t width = 9;
 80022cc:	2309      	movs	r3, #9
 80022ce:	727b      	strb	r3, [r7, #9]
	uint8_t height = 200;
 80022d0:	23c8      	movs	r3, #200	; 0xc8
 80022d2:	723b      	strb	r3, [r7, #8]
	uint8_t b_height = (height-2*v_margin-(MENU_ITEM_NUM-1)*b_margin)/MENU_ITEM_NUM;
 80022d4:	7a3a      	ldrb	r2, [r7, #8]
 80022d6:	7afb      	ldrb	r3, [r7, #11]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	1ad2      	subs	r2, r2, r3
 80022dc:	7abb      	ldrb	r3, [r7, #10]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	4a30      	ldr	r2, [pc, #192]	; (80023a4 <showScrollbar+0xf4>)
 80022e4:	fb82 1203 	smull	r1, r2, r2, r3
 80022e8:	17db      	asrs	r3, r3, #31
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	71fb      	strb	r3, [r7, #7]

	lcdRoundedRect2(x, x+width-1, y, y+height, 0, LCD_RECT_PATTERN_FILL, 0,3);
 80022ee:	89f8      	ldrh	r0, [r7, #14]
 80022f0:	89fa      	ldrh	r2, [r7, #14]
 80022f2:	7a7b      	ldrb	r3, [r7, #9]
 80022f4:	4413      	add	r3, r2
 80022f6:	1e59      	subs	r1, r3, #1
 80022f8:	7b7c      	ldrb	r4, [r7, #13]
 80022fa:	7b7a      	ldrb	r2, [r7, #13]
 80022fc:	7a3b      	ldrb	r3, [r7, #8]
 80022fe:	4413      	add	r3, r2
 8002300:	2203      	movs	r2, #3
 8002302:	9203      	str	r2, [sp, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	9202      	str	r2, [sp, #8]
 8002308:	2201      	movs	r2, #1
 800230a:	9201      	str	r2, [sp, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	9200      	str	r2, [sp, #0]
 8002310:	4622      	mov	r2, r4
 8002312:	f001 f998 	bl	8003646 <lcdRoundedRect2>
	lcdRoundedRect2(x, x+width-1, y, y+height, 1, LCD_RECT_PATTERN_CLEAR, 1, 3);
 8002316:	89f8      	ldrh	r0, [r7, #14]
 8002318:	89fa      	ldrh	r2, [r7, #14]
 800231a:	7a7b      	ldrb	r3, [r7, #9]
 800231c:	4413      	add	r3, r2
 800231e:	1e59      	subs	r1, r3, #1
 8002320:	7b7c      	ldrb	r4, [r7, #13]
 8002322:	7b7a      	ldrb	r2, [r7, #13]
 8002324:	7a3b      	ldrb	r3, [r7, #8]
 8002326:	4413      	add	r3, r2
 8002328:	2203      	movs	r2, #3
 800232a:	9203      	str	r2, [sp, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	9202      	str	r2, [sp, #8]
 8002330:	2200      	movs	r2, #0
 8002332:	9201      	str	r2, [sp, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	9200      	str	r2, [sp, #0]
 8002338:	4622      	mov	r2, r4
 800233a:	f001 f984 	bl	8003646 <lcdRoundedRect2>
	lcdRoundedRect2(x+h_margin, x+width-1-h_margin, y+1+v_margin+(b_height+b_margin)*position, y+1+v_margin+b_height+(b_height+b_margin)*position, 1, LCD_RECT_PATTERN_FILL, 1, 1);
 800233e:	89fa      	ldrh	r2, [r7, #14]
 8002340:	7b3b      	ldrb	r3, [r7, #12]
 8002342:	18d0      	adds	r0, r2, r3
 8002344:	89fa      	ldrh	r2, [r7, #14]
 8002346:	7a7b      	ldrb	r3, [r7, #9]
 8002348:	4413      	add	r3, r2
 800234a:	1e5a      	subs	r2, r3, #1
 800234c:	7b3b      	ldrb	r3, [r7, #12]
 800234e:	1ad4      	subs	r4, r2, r3
 8002350:	7b7b      	ldrb	r3, [r7, #13]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	7afb      	ldrb	r3, [r7, #11]
 8002356:	441a      	add	r2, r3
 8002358:	79f9      	ldrb	r1, [r7, #7]
 800235a:	7abb      	ldrb	r3, [r7, #10]
 800235c:	440b      	add	r3, r1
 800235e:	4912      	ldr	r1, [pc, #72]	; (80023a8 <showScrollbar+0xf8>)
 8002360:	7809      	ldrb	r1, [r1, #0]
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	18d5      	adds	r5, r2, r3
 8002368:	7b7b      	ldrb	r3, [r7, #13]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	7afb      	ldrb	r3, [r7, #11]
 800236e:	441a      	add	r2, r3
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	441a      	add	r2, r3
 8002374:	79f9      	ldrb	r1, [r7, #7]
 8002376:	7abb      	ldrb	r3, [r7, #10]
 8002378:	440b      	add	r3, r1
 800237a:	490b      	ldr	r1, [pc, #44]	; (80023a8 <showScrollbar+0xf8>)
 800237c:	7809      	ldrb	r1, [r1, #0]
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	2201      	movs	r2, #1
 8002386:	9203      	str	r2, [sp, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	9202      	str	r2, [sp, #8]
 800238c:	2201      	movs	r2, #1
 800238e:	9201      	str	r2, [sp, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	9200      	str	r2, [sp, #0]
 8002394:	462a      	mov	r2, r5
 8002396:	4621      	mov	r1, r4
 8002398:	f001 f955 	bl	8003646 <lcdRoundedRect2>
//	lcdRoundedRect2(x+h_margin, x+width-h_margin, y+1+v_margin+(b_height+b_margin)*0, y+1+v_margin+b_height+(b_height+b_margin)*0, 1, LCD_RECT_PATTERN_FILL, 0, 1);
//	lcdRoundedRect2(x+h_margin, x+width-h_margin, y+1+v_margin+(b_height+b_margin)*1, y+1+v_margin+b_height+(b_height+b_margin)*1, 1, LCD_RECT_PATTERN_FILL, 0, 1);
//	lcdRoundedRect2(x+h_margin, x+width-h_margin, y+1+v_margin+(b_height+b_margin)*2, y+1+v_margin+b_height+(b_height+b_margin)*2, 1, LCD_RECT_PATTERN_FILL, 0, 1);
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bdb0      	pop	{r4, r5, r7, pc}
 80023a4:	55555556 	.word	0x55555556
 80023a8:	2000254c 	.word	0x2000254c

080023ac <disableScrollbar>:
void disableScrollbar(void){
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
	isScrollbarEnabled = 0;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <disableScrollbar+0x14>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	2000254e 	.word	0x2000254e

080023c4 <enableScrollbar>:
void enableScrollbar(void){
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	scrollerTimer = createTimer();
 80023c8:	f003 fe79 	bl	80060be <createTimer>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <enableScrollbar+0x30>)
 80023d0:	6013      	str	r3, [r2, #0]
	setTimerAAA(scrollerTimer, 2, &disableScrollbar);
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <enableScrollbar+0x30>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <enableScrollbar+0x34>)
 80023d8:	2102      	movs	r1, #2
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 fe7f 	bl	80060de <setTimerAAA>
	runTimerAAA(scrollerTimer);
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <enableScrollbar+0x30>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 fe94 	bl	8006112 <runTimerAAA>
	isScrollbarEnabled = 1;
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <enableScrollbar+0x38>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20002550 	.word	0x20002550
 80023f8:	080023ad 	.word	0x080023ad
 80023fc:	2000254e 	.word	0x2000254e

08002400 <prevPos>:

void prevPos(void){
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	enableScrollbar();
 8002404:	f7ff ffde 	bl	80023c4 <enableScrollbar>
	if(position>0){
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <prevPos+0x28>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <prevPos+0x1e>
		position--;
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <prevPos+0x28>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	3b01      	subs	r3, #1
 8002416:	b2da      	uxtb	r2, r3
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <prevPos+0x28>)
 800241a:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 800241c:	e002      	b.n	8002424 <prevPos+0x24>
		position=MENU_ITEM_NUM-1;
 800241e:	4b02      	ldr	r3, [pc, #8]	; (8002428 <prevPos+0x28>)
 8002420:	2202      	movs	r2, #2
 8002422:	701a      	strb	r2, [r3, #0]
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	2000254c 	.word	0x2000254c

0800242c <nextPos>:

void nextPos(void){
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	enableScrollbar();
 8002430:	f7ff ffc8 	bl	80023c4 <enableScrollbar>
	if(position<(MENU_ITEM_NUM-1)){
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <nextPos+0x28>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d806      	bhi.n	800244a <nextPos+0x1e>
		position++;
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <nextPos+0x28>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	b2da      	uxtb	r2, r3
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <nextPos+0x28>)
 8002446:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8002448:	e002      	b.n	8002450 <nextPos+0x24>
		position=0;
 800244a:	4b02      	ldr	r3, [pc, #8]	; (8002454 <nextPos+0x28>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	2000254c 	.word	0x2000254c

08002458 <nextScreen>:

void nextScreen(void){
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	nextPos();
 800245c:	f7ff ffe6 	bl	800242c <nextPos>
	applySelectedScreen();
 8002460:	f000 f816 	bl	8002490 <applySelectedScreen>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}

08002468 <prevScreen>:
void prevScreen(void){
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	prevPos();
 800246c:	f7ff ffc8 	bl	8002400 <prevPos>
	applySelectedScreen();
 8002470:	f000 f80e 	bl	8002490 <applySelectedScreen>
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}

08002478 <resetPos>:
void resetPos(void){
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	position=0;
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <resetPos+0x14>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8002482:	f000 f805 	bl	8002490 <applySelectedScreen>
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000254c 	.word	0x2000254c

08002490 <applySelectedScreen>:
	moduleSetupPtr = module->setup;
	moduleMainPtr = module->main;
	selectScreen();
}

void applySelectedScreen(void){
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <applySelectedScreen+0x40>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <applySelectedScreen+0x44>)
 800249c:	460b      	mov	r3, r1
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	3320      	adds	r3, #32
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a0b      	ldr	r2, [pc, #44]	; (80024d8 <applySelectedScreen+0x48>)
 80024ac:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <applySelectedScreen+0x40>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <applySelectedScreen+0x44>)
 80024b6:	460b      	mov	r3, r1
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	3324      	adds	r3, #36	; 0x24
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a05      	ldr	r2, [pc, #20]	; (80024dc <applySelectedScreen+0x4c>)
 80024c6:	6013      	str	r3, [r2, #0]
	selectScreen();
 80024c8:	f000 f80a 	bl	80024e0 <selectScreen>
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	2000254c 	.word	0x2000254c
 80024d4:	0801396c 	.word	0x0801396c
 80024d8:	2000004c 	.word	0x2000004c
 80024dc:	20000048 	.word	0x20000048

080024e0 <selectScreen>:

void selectScreen(void){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 80024e4:	f7ff fc1c 	bl	8001d20 <resetButtonHandlers>
	isModuleSet = 0;
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <selectScreen+0x1c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <selectScreen+0x20>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <selectScreen+0x24>)
 80024f4:	6013      	str	r3, [r2, #0]
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000254d 	.word	0x2000254d
 8002500:	20000048 	.word	0x20000048
 8002504:	20000050 	.word	0x20000050

08002508 <showGui>:
// function to display alert message over current gui
//void showAlert(){
//
//}

void showGui(void){
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <showGui+0x38>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <showGui+0x18>
		moduleSetupPtr();
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <showGui+0x3c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4798      	blx	r3
		isModuleSet = 1;
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <showGui+0x38>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <showGui+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <showGui+0x26>
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <showGui+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4798      	blx	r3
	if(isScrollbarEnabled) showScrollbar();
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <showGui+0x44>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <showGui+0x32>
 8002536:	f7ff febb 	bl	80022b0 <showScrollbar>
//	lcdRefresh();
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000254d 	.word	0x2000254d
 8002544:	2000004c 	.word	0x2000004c
 8002548:	20000050 	.word	0x20000050
 800254c:	2000254e 	.word	0x2000254e

08002550 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <MX_I2C1_Init+0x74>)
 8002556:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <MX_I2C1_Init+0x78>)
 8002558:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <MX_I2C1_Init+0x74>)
 800255c:	4a1b      	ldr	r2, [pc, #108]	; (80025cc <MX_I2C1_Init+0x7c>)
 800255e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <MX_I2C1_Init+0x74>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <MX_I2C1_Init+0x74>)
 8002568:	2200      	movs	r2, #0
 800256a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <MX_I2C1_Init+0x74>)
 800256e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002572:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <MX_I2C1_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <MX_I2C1_Init+0x74>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <MX_I2C1_Init+0x74>)
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <MX_I2C1_Init+0x74>)
 8002588:	2200      	movs	r2, #0
 800258a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800258c:	480d      	ldr	r0, [pc, #52]	; (80025c4 <MX_I2C1_Init+0x74>)
 800258e:	f004 fa69 	bl	8006a64 <HAL_I2C_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002598:	f001 fd84 	bl	80040a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800259c:	2100      	movs	r1, #0
 800259e:	4809      	ldr	r0, [pc, #36]	; (80025c4 <MX_I2C1_Init+0x74>)
 80025a0:	f005 fa1f 	bl	80079e2 <HAL_I2CEx_ConfigAnalogFilter>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80025aa:	f001 fd7b 	bl	80040a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025ae:	2100      	movs	r1, #0
 80025b0:	4804      	ldr	r0, [pc, #16]	; (80025c4 <MX_I2C1_Init+0x74>)
 80025b2:	f005 fa52 	bl	8007a5a <HAL_I2CEx_ConfigDigitalFilter>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80025bc:	f001 fd72 	bl	80040a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20002554 	.word	0x20002554
 80025c8:	40005400 	.word	0x40005400
 80025cc:	000186a0 	.word	0x000186a0

080025d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a19      	ldr	r2, [pc, #100]	; (8002654 <HAL_I2C_MspInit+0x84>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d12c      	bne.n	800264c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_I2C_MspInit+0x88>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a17      	ldr	r2, [pc, #92]	; (8002658 <HAL_I2C_MspInit+0x88>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_I2C_MspInit+0x88>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800260e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002614:	2312      	movs	r3, #18
 8002616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261c:	2303      	movs	r3, #3
 800261e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002620:	2304      	movs	r3, #4
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4619      	mov	r1, r3
 800262a:	480c      	ldr	r0, [pc, #48]	; (800265c <HAL_I2C_MspInit+0x8c>)
 800262c:	f003 fffe 	bl	800662c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_I2C_MspInit+0x88>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	4a07      	ldr	r2, [pc, #28]	; (8002658 <HAL_I2C_MspInit+0x88>)
 800263a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800263e:	6413      	str	r3, [r2, #64]	; 0x40
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_I2C_MspInit+0x88>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800264c:	bf00      	nop
 800264e:	3728      	adds	r7, #40	; 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40005400 	.word	0x40005400
 8002658:	40023800 	.word	0x40023800
 800265c:	40020400 	.word	0x40020400

08002660 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 800266a:	2307      	movs	r3, #7
 800266c:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 800267a:	e010      	b.n	800269e <reverse_uint8+0x3e>
		result = result << 1;
 800267c:	7bbb      	ldrb	r3, [r7, #14]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8002690:	7bba      	ldrb	r2, [r7, #14]
 8002692:	7b7b      	ldrb	r3, [r7, #13]
 8002694:	4313      	orrs	r3, r2
 8002696:	73bb      	strb	r3, [r7, #14]
		times--;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	3b01      	subs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1eb      	bne.n	800267c <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
	updateSetting(0);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f000 f824 	bl	8002708 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 80026c0:	2300      	movs	r3, #0
 80026c2:	71fb      	strb	r3, [r7, #7]
 80026c4:	e014      	b.n	80026f0 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 80026c6:	2300      	movs	r3, #0
 80026c8:	80bb      	strh	r3, [r7, #4]
 80026ca:	e00b      	b.n	80026e4 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	2232      	movs	r2, #50	; 0x32
 80026d0:	fb03 f202 	mul.w	r2, r3, r2
 80026d4:	88bb      	ldrh	r3, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <lcdClearBuffer+0x50>)
 80026da:	21ff      	movs	r1, #255	; 0xff
 80026dc:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 80026de:	88bb      	ldrh	r3, [r7, #4]
 80026e0:	3301      	adds	r3, #1
 80026e2:	80bb      	strh	r3, [r7, #4]
 80026e4:	88bb      	ldrh	r3, [r7, #4]
 80026e6:	2b31      	cmp	r3, #49	; 0x31
 80026e8:	d9f0      	bls.n	80026cc <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	3301      	adds	r3, #1
 80026ee:	71fb      	strb	r3, [r7, #7]
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	2bef      	cmp	r3, #239	; 0xef
 80026f4:	d9e7      	bls.n	80026c6 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 80026f6:	2001      	movs	r0, #1
 80026f8:	f000 f806 	bl	8002708 <updateSetting>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	200025ac 	.word	0x200025ac

08002708 <updateSetting>:

void updateSetting(uint8_t state){
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8002712:	4a04      	ldr	r2, [pc, #16]	; (8002724 <updateSetting+0x1c>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	7013      	strb	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	20000054 	.word	0x20000054

08002728 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4603      	mov	r3, r0
 8002732:	80fb      	strh	r3, [r7, #6]
 8002734:	460b      	mov	r3, r1
 8002736:	717b      	strb	r3, [r7, #5]
 8002738:	4613      	mov	r3, r2
 800273a:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	795b      	ldrb	r3, [r3, #5]
 8002740:	793a      	ldrb	r2, [r7, #4]
 8002742:	429a      	cmp	r2, r3
 8002744:	d304      	bcc.n	8002750 <lcdPutChar+0x28>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	799b      	ldrb	r3, [r3, #6]
 800274a:	793a      	ldrb	r2, [r7, #4]
 800274c:	429a      	cmp	r2, r3
 800274e:	d902      	bls.n	8002756 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	79db      	ldrb	r3, [r3, #7]
 8002754:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	08db      	lsrs	r3, r3, #3
 8002764:	b29b      	uxth	r3, r3
 8002766:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	885b      	ldrh	r3, [r3, #2]
 800276c:	461a      	mov	r2, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	785b      	ldrb	r3, [r3, #1]
 8002772:	fb92 f3f3 	sdiv	r3, r2, r3
 8002776:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002778:	2300      	movs	r3, #0
 800277a:	75fb      	strb	r3, [r7, #23]
 800277c:	e09b      	b.n	80028b6 <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 800277e:	797a      	ldrb	r2, [r7, #5]
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	4413      	add	r3, r2
 8002784:	b29b      	uxth	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	0092      	lsls	r2, r2, #2
 800278a:	4413      	add	r3, r2
 800278c:	461a      	mov	r2, r3
 800278e:	0091      	lsls	r1, r2, #2
 8002790:	461a      	mov	r2, r3
 8002792:	460b      	mov	r3, r1
 8002794:	4413      	add	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	b29b      	uxth	r3, r3
 800279e:	4413      	add	r3, r2
 80027a0:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 80027a2:	793b      	ldrb	r3, [r7, #4]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	7952      	ldrb	r2, [r2, #5]
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	8852      	ldrh	r2, [r2, #2]
 80027ae:	fb03 f202 	mul.w	r2, r3, r2
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	7cb9      	ldrb	r1, [r7, #18]
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	3308      	adds	r3, #8
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	7d3b      	ldrb	r3, [r7, #20]
 80027cc:	fa42 f303 	asr.w	r3, r2, r3
 80027d0:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 80027d2:	8a3b      	ldrh	r3, [r7, #16]
 80027d4:	4a3e      	ldr	r2, [pc, #248]	; (80028d0 <lcdPutChar+0x1a8>)
 80027d6:	5cd3      	ldrb	r3, [r2, r3]
 80027d8:	b25a      	sxtb	r2, r3
 80027da:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80027de:	43db      	mvns	r3, r3
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	4013      	ands	r3, r2
 80027e4:	b25a      	sxtb	r2, r3
 80027e6:	8a3b      	ldrh	r3, [r7, #16]
 80027e8:	b2d1      	uxtb	r1, r2
 80027ea:	4a39      	ldr	r2, [pc, #228]	; (80028d0 <lcdPutChar+0x1a8>)
 80027ec:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	3308      	adds	r3, #8
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b25a      	sxtb	r2, r3
 80027fa:	7d3b      	ldrb	r3, [r7, #20]
 80027fc:	f1c3 0308 	rsb	r3, r3, #8
 8002800:	21ff      	movs	r1, #255	; 0xff
 8002802:	fa41 f303 	asr.w	r3, r1, r3
 8002806:	b25b      	sxtb	r3, r3
 8002808:	4013      	ands	r3, r2
 800280a:	b25b      	sxtb	r3, r3
 800280c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 800280e:	2301      	movs	r3, #1
 8002810:	757b      	strb	r3, [r7, #21]
 8002812:	e029      	b.n	8002868 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 8002814:	7d7a      	ldrb	r2, [r7, #21]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	4413      	add	r3, r2
 800281e:	7a1b      	ldrb	r3, [r3, #8]
 8002820:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8002822:	8a3a      	ldrh	r2, [r7, #16]
 8002824:	7d7b      	ldrb	r3, [r7, #21]
 8002826:	4413      	add	r3, r2
 8002828:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <lcdPutChar+0x1a8>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	b25a      	sxtb	r2, r3
 800282e:	7db9      	ldrb	r1, [r7, #22]
 8002830:	7d3b      	ldrb	r3, [r7, #20]
 8002832:	f1c3 0308 	rsb	r3, r3, #8
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	b259      	sxtb	r1, r3
 800283c:	7af8      	ldrb	r0, [r7, #11]
 800283e:	7d3b      	ldrb	r3, [r7, #20]
 8002840:	fa40 f303 	asr.w	r3, r0, r3
 8002844:	b25b      	sxtb	r3, r3
 8002846:	430b      	orrs	r3, r1
 8002848:	b25b      	sxtb	r3, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	b25b      	sxtb	r3, r3
 800284e:	4013      	ands	r3, r2
 8002850:	b259      	sxtb	r1, r3
 8002852:	8a3a      	ldrh	r2, [r7, #16]
 8002854:	7d7b      	ldrb	r3, [r7, #21]
 8002856:	4413      	add	r3, r2
 8002858:	b2c9      	uxtb	r1, r1
 800285a:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <lcdPutChar+0x1a8>)
 800285c:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 800285e:	7afb      	ldrb	r3, [r7, #11]
 8002860:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002862:	7d7b      	ldrb	r3, [r7, #21]
 8002864:	3301      	adds	r3, #1
 8002866:	757b      	strb	r3, [r7, #21]
 8002868:	7d7a      	ldrb	r2, [r7, #21]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	3307      	adds	r3, #7
 8002870:	10db      	asrs	r3, r3, #3
 8002872:	429a      	cmp	r2, r3
 8002874:	dbce      	blt.n	8002814 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002876:	8a3a      	ldrh	r2, [r7, #16]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	3307      	adds	r3, #7
 800287e:	10db      	asrs	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <lcdPutChar+0x1a8>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	b25a      	sxtb	r2, r3
 8002888:	7db9      	ldrb	r1, [r7, #22]
 800288a:	7d3b      	ldrb	r3, [r7, #20]
 800288c:	f1c3 0308 	rsb	r3, r3, #8
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	b25b      	sxtb	r3, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	b25b      	sxtb	r3, r3
 800289a:	4013      	ands	r3, r2
 800289c:	b259      	sxtb	r1, r3
 800289e:	8a3a      	ldrh	r2, [r7, #16]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	3307      	adds	r3, #7
 80028a6:	10db      	asrs	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	b2c9      	uxtb	r1, r1
 80028ac:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <lcdPutChar+0x1a8>)
 80028ae:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	3301      	adds	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	7dfa      	ldrb	r2, [r7, #23]
 80028bc:	429a      	cmp	r2, r3
 80028be:	f4ff af5e 	bcc.w	800277e <lcdPutChar+0x56>
	}
}
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	200025ac 	.word	0x200025ac

080028d4 <lcdPutIcon>:

void lcdPutIcon(uint16_t x, uint8_t y, const Icon_TypeDef *icon){
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	603a      	str	r2, [r7, #0]
 80028de:	80fb      	strh	r3, [r7, #6]
 80028e0:	460b      	mov	r3, r1
 80028e2:	717b      	strb	r3, [r7, #5]
	uint8_t icon_Width = icon->icon_Width;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	773b      	strb	r3, [r7, #28]
	uint8_t icon_Height = icon->icon_Height;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	785b      	ldrb	r3, [r3, #1]
 80028ee:	76fb      	strb	r3, [r7, #27]
	uint8_t* icon_Data = &icon->icon_Data;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	3305      	adds	r3, #5
 80028f4:	617b      	str	r3, [r7, #20]
	uint8_t offset = x % 8;
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	74fb      	strb	r3, [r7, #19]
	uint8_t xBlock = x >> 3;
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	08db      	lsrs	r3, r3, #3
 8002904:	b29b      	uxth	r3, r3
 8002906:	74bb      	strb	r3, [r7, #18]
	uint8_t bytesInLine = (icon->icon_BPC/icon_Height);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	885b      	ldrh	r3, [r3, #2]
 800290c:	461a      	mov	r2, r3
 800290e:	7efb      	ldrb	r3, [r7, #27]
 8002910:	fb92 f3f3 	sdiv	r3, r2, r3
 8002914:	747b      	strb	r3, [r7, #17]
	for(uint8_t j = 0; j < (icon_Height); j++){
 8002916:	2300      	movs	r3, #0
 8002918:	77fb      	strb	r3, [r7, #31]
 800291a:	e094      	b.n	8002a46 <lcdPutIcon+0x172>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 800291c:	797a      	ldrb	r2, [r7, #5]
 800291e:	7ffb      	ldrb	r3, [r7, #31]
 8002920:	4413      	add	r3, r2
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	0092      	lsls	r2, r2, #2
 8002928:	4413      	add	r3, r2
 800292a:	461a      	mov	r2, r3
 800292c:	0091      	lsls	r1, r2, #2
 800292e:	461a      	mov	r2, r3
 8002930:	460b      	mov	r3, r1
 8002932:	4413      	add	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	7cbb      	ldrb	r3, [r7, #18]
 800293a:	b29b      	uxth	r3, r3
 800293c:	4413      	add	r3, r2
 800293e:	81fb      	strh	r3, [r7, #14]
		uint8_t dataBlock = icon_Data[j*bytesInLine] >> offset;
 8002940:	7ffb      	ldrb	r3, [r7, #31]
 8002942:	7c7a      	ldrb	r2, [r7, #17]
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	461a      	mov	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	7cfb      	ldrb	r3, [r7, #19]
 8002954:	fa42 f303 	asr.w	r3, r2, r3
 8002958:	77bb      	strb	r3, [r7, #30]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 800295a:	89fb      	ldrh	r3, [r7, #14]
 800295c:	4a40      	ldr	r2, [pc, #256]	; (8002a60 <lcdPutIcon+0x18c>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	b25a      	sxtb	r2, r3
 8002962:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002966:	43db      	mvns	r3, r3
 8002968:	b25b      	sxtb	r3, r3
 800296a:	4013      	ands	r3, r2
 800296c:	b25a      	sxtb	r2, r3
 800296e:	89fb      	ldrh	r3, [r7, #14]
 8002970:	b2d1      	uxtb	r1, r2
 8002972:	4a3b      	ldr	r2, [pc, #236]	; (8002a60 <lcdPutIcon+0x18c>)
 8002974:	54d1      	strb	r1, [r2, r3]
		dataBlock = (icon_Data[j*bytesInLine] & (0xFF >> (8 - offset)));
 8002976:	7ffb      	ldrb	r3, [r7, #31]
 8002978:	7c7a      	ldrb	r2, [r7, #17]
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	461a      	mov	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b25a      	sxtb	r2, r3
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	f1c3 0308 	rsb	r3, r3, #8
 800298e:	21ff      	movs	r1, #255	; 0xff
 8002990:	fa41 f303 	asr.w	r3, r1, r3
 8002994:	b25b      	sxtb	r3, r3
 8002996:	4013      	ands	r3, r2
 8002998:	b25b      	sxtb	r3, r3
 800299a:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 800299c:	2301      	movs	r3, #1
 800299e:	777b      	strb	r3, [r7, #29]
 80029a0:	e02d      	b.n	80029fe <lcdPutIcon+0x12a>
			uint8_t newDataBlock = icon_Data[j*bytesInLine + i];
 80029a2:	7ffb      	ldrb	r3, [r7, #31]
 80029a4:	7c7a      	ldrb	r2, [r7, #17]
 80029a6:	fb03 f202 	mul.w	r2, r3, r2
 80029aa:	7f7b      	ldrb	r3, [r7, #29]
 80029ac:	4413      	add	r3, r2
 80029ae:	461a      	mov	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	737b      	strb	r3, [r7, #13]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 80029b8:	89fa      	ldrh	r2, [r7, #14]
 80029ba:	7f7b      	ldrb	r3, [r7, #29]
 80029bc:	4413      	add	r3, r2
 80029be:	4a28      	ldr	r2, [pc, #160]	; (8002a60 <lcdPutIcon+0x18c>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	b25a      	sxtb	r2, r3
 80029c4:	7fb9      	ldrb	r1, [r7, #30]
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	f1c3 0308 	rsb	r3, r3, #8
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	b259      	sxtb	r1, r3
 80029d2:	7b78      	ldrb	r0, [r7, #13]
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	fa40 f303 	asr.w	r3, r0, r3
 80029da:	b25b      	sxtb	r3, r3
 80029dc:	430b      	orrs	r3, r1
 80029de:	b25b      	sxtb	r3, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	4013      	ands	r3, r2
 80029e6:	b259      	sxtb	r1, r3
 80029e8:	89fa      	ldrh	r2, [r7, #14]
 80029ea:	7f7b      	ldrb	r3, [r7, #29]
 80029ec:	4413      	add	r3, r2
 80029ee:	b2c9      	uxtb	r1, r1
 80029f0:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <lcdPutIcon+0x18c>)
 80029f2:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 80029f4:	7b7b      	ldrb	r3, [r7, #13]
 80029f6:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 80029f8:	7f7b      	ldrb	r3, [r7, #29]
 80029fa:	3301      	adds	r3, #1
 80029fc:	777b      	strb	r3, [r7, #29]
 80029fe:	7f3b      	ldrb	r3, [r7, #28]
 8002a00:	08db      	lsrs	r3, r3, #3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	7f7a      	ldrb	r2, [r7, #29]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d9cb      	bls.n	80029a2 <lcdPutIcon+0xce>
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002a0a:	89fa      	ldrh	r2, [r7, #14]
 8002a0c:	7f3b      	ldrb	r3, [r7, #28]
 8002a0e:	3307      	adds	r3, #7
 8002a10:	10db      	asrs	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <lcdPutIcon+0x18c>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	b25a      	sxtb	r2, r3
 8002a1a:	7fb9      	ldrb	r1, [r7, #30]
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	f1c3 0308 	rsb	r3, r3, #8
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	b25b      	sxtb	r3, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	b259      	sxtb	r1, r3
 8002a30:	89fa      	ldrh	r2, [r7, #14]
 8002a32:	7f3b      	ldrb	r3, [r7, #28]
 8002a34:	3307      	adds	r3, #7
 8002a36:	10db      	asrs	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	b2c9      	uxtb	r1, r1
 8002a3c:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <lcdPutIcon+0x18c>)
 8002a3e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (icon_Height); j++){
 8002a40:	7ffb      	ldrb	r3, [r7, #31]
 8002a42:	3301      	adds	r3, #1
 8002a44:	77fb      	strb	r3, [r7, #31]
 8002a46:	7ffa      	ldrb	r2, [r7, #31]
 8002a48:	7efb      	ldrb	r3, [r7, #27]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	f4ff af66 	bcc.w	800291c <lcdPutIcon+0x48>
	}
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	200025ac 	.word	0x200025ac

08002a64 <lcdPutStr>:

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60ba      	str	r2, [r7, #8]
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	4603      	mov	r3, r0
 8002a70:	81fb      	strh	r3, [r7, #14]
 8002a72:	460b      	mov	r3, r1
 8002a74:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002a76:	2300      	movs	r3, #0
 8002a78:	75fb      	strb	r3, [r7, #23]
 8002a7a:	e015      	b.n	8002aa8 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	fb12 f303 	smulbb	r3, r2, r3
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	89fb      	ldrh	r3, [r7, #14]
 8002a8e:	4413      	add	r3, r2
 8002a90:	b298      	uxth	r0, r3
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	4413      	add	r3, r2
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	7b79      	ldrb	r1, [r7, #13]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f7ff fe43 	bl	8002728 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	75fb      	strb	r3, [r7, #23]
 8002aa8:	7dfc      	ldrb	r4, [r7, #23]
 8002aaa:	68b8      	ldr	r0, [r7, #8]
 8002aac:	f7fd fba0 	bl	80001f0 <strlen>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	429c      	cmp	r4, r3
 8002ab4:	d3e2      	bcc.n	8002a7c <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}

08002ac0 <lcdVLine>:
		}

	}
}

void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 8002ac0:	b490      	push	{r4, r7}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	80fb      	strh	r3, [r7, #6]
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	80bb      	strh	r3, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
 8002ada:	4613      	mov	r3, r2
 8002adc:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	08db      	lsrs	r3, r3, #3
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	733b      	strb	r3, [r7, #12]
	if(y1 > y2){
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	88ba      	ldrh	r2, [r7, #4]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d905      	bls.n	8002b06 <lcdVLine+0x46>
		uint8_t temp = y1;
 8002afa:	88bb      	ldrh	r3, [r7, #4]
 8002afc:	72fb      	strb	r3, [r7, #11]
		y1 = y2;
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	80bb      	strh	r3, [r7, #4]
		y2 = temp;
 8002b02:	7afb      	ldrb	r3, [r7, #11]
 8002b04:	70fb      	strb	r3, [r7, #3]
	}
	for(uint8_t y = y1; y <= y2; y++){
 8002b06:	88bb      	ldrh	r3, [r7, #4]
 8002b08:	73fb      	strb	r3, [r7, #15]
 8002b0a:	e04e      	b.n	8002baa <lcdVLine+0xea>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2232      	movs	r2, #50	; 0x32
 8002b10:	fb03 f202 	mul.w	r2, r3, r2
 8002b14:	7b7b      	ldrb	r3, [r7, #13]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a29      	ldr	r2, [pc, #164]	; (8002bc0 <lcdVLine+0x100>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 8002b1e:	78bb      	ldrb	r3, [r7, #2]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d01e      	beq.n	8002b62 <lcdVLine+0xa2>
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	dc27      	bgt.n	8002b78 <lcdVLine+0xb8>
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <lcdVLine+0x72>
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d00b      	beq.n	8002b48 <lcdVLine+0x88>
 8002b30:	e022      	b.n	8002b78 <lcdVLine+0xb8>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 8002b32:	7b3b      	ldrb	r3, [r7, #12]
 8002b34:	2280      	movs	r2, #128	; 0x80
 8002b36:	fa42 f303 	asr.w	r3, r2, r3
 8002b3a:	b25a      	sxtb	r2, r3
 8002b3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	b25b      	sxtb	r3, r3
 8002b44:	73bb      	strb	r3, [r7, #14]
				break;
 8002b46:	e024      	b.n	8002b92 <lcdVLine+0xd2>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8002b48:	7b3b      	ldrb	r3, [r7, #12]
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	fa42 f303 	asr.w	r3, r2, r3
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	b25a      	sxtb	r2, r3
 8002b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	73bb      	strb	r3, [r7, #14]
				break;
 8002b60:	e017      	b.n	8002b92 <lcdVLine+0xd2>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8002b62:	7b3b      	ldrb	r3, [r7, #12]
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	fa42 f303 	asr.w	r3, r2, r3
 8002b6a:	b25a      	sxtb	r2, r3
 8002b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b70:	4053      	eors	r3, r2
 8002b72:	b25b      	sxtb	r3, r3
 8002b74:	73bb      	strb	r3, [r7, #14]
				break;
 8002b76:	e00c      	b.n	8002b92 <lcdVLine+0xd2>
			default:
				content &= ~(0b10000000 >> offset);
 8002b78:	7b3b      	ldrb	r3, [r7, #12]
 8002b7a:	2280      	movs	r2, #128	; 0x80
 8002b7c:	fa42 f303 	asr.w	r3, r2, r3
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	b25a      	sxtb	r2, r3
 8002b86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	b25b      	sxtb	r3, r3
 8002b8e:	73bb      	strb	r3, [r7, #14]
				break;
 8002b90:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2232      	movs	r2, #50	; 0x32
 8002b96:	fb03 f202 	mul.w	r2, r3, r2
 8002b9a:	7b7b      	ldrb	r3, [r7, #13]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4908      	ldr	r1, [pc, #32]	; (8002bc0 <lcdVLine+0x100>)
 8002ba0:	7bba      	ldrb	r2, [r7, #14]
 8002ba2:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d9ac      	bls.n	8002b0c <lcdVLine+0x4c>
	}
}
 8002bb2:	bf00      	nop
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc90      	pop	{r4, r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	200025ac 	.word	0x200025ac

08002bc4 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 8002bc4:	b490      	push	{r4, r7}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4604      	mov	r4, r0
 8002bcc:	4608      	mov	r0, r1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	80fb      	strh	r3, [r7, #6]
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	80bb      	strh	r3, [r7, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	70fb      	strb	r3, [r7, #3]
 8002bde:	4613      	mov	r3, r2
 8002be0:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 8002be2:	23ff      	movs	r3, #255	; 0xff
 8002be4:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 8002be6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bea:	2b14      	cmp	r3, #20
 8002bec:	f200 8208 	bhi.w	8003000 <lcdHLine2+0x43c>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <lcdHLine2+0x34>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c4d 	.word	0x08002c4d
 8002bfc:	08002c53 	.word	0x08002c53
 8002c00:	08002c59 	.word	0x08002c59
 8002c04:	08002c5f 	.word	0x08002c5f
 8002c08:	08002c77 	.word	0x08002c77
 8002c0c:	08002c8f 	.word	0x08002c8f
 8002c10:	08002ca7 	.word	0x08002ca7
 8002c14:	08002cf1 	.word	0x08002cf1
 8002c18:	08002d35 	.word	0x08002d35
 8002c1c:	08002d79 	.word	0x08002d79
 8002c20:	08002db7 	.word	0x08002db7
 8002c24:	08002ddd 	.word	0x08002ddd
 8002c28:	08002e07 	.word	0x08002e07
 8002c2c:	08002e3d 	.word	0x08002e3d
 8002c30:	08002e55 	.word	0x08002e55
 8002c34:	08002e7b 	.word	0x08002e7b
 8002c38:	08002eb1 	.word	0x08002eb1
 8002c3c:	08002ee7 	.word	0x08002ee7
 8002c40:	08002f29 	.word	0x08002f29
 8002c44:	08002f83 	.word	0x08002f83
 8002c48:	08002fbf 	.word	0x08002fbf
		case 0:	// clear
			pattern = 0x00;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	75fb      	strb	r3, [r7, #23]
			break;
 8002c50:	e1ea      	b.n	8003028 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 8002c52:	23ff      	movs	r3, #255	; 0xff
 8002c54:	75fb      	strb	r3, [r7, #23]
			break;
 8002c56:	e1e7      	b.n	8003028 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8002c58:	2355      	movs	r3, #85	; 0x55
 8002c5a:	75fb      	strb	r3, [r7, #23]
			break;
 8002c5c:	e1e4      	b.n	8003028 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <lcdHLine2+0xac>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 8002c6e:	e1db      	b.n	8003028 <lcdHLine2+0x464>
			else pattern = 0xFF;
 8002c70:	23ff      	movs	r3, #255	; 0xff
 8002c72:	75fb      	strb	r3, [r7, #23]
			break;
 8002c74:	e1d8      	b.n	8003028 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <lcdHLine2+0xc4>
 8002c82:	23aa      	movs	r3, #170	; 0xaa
 8002c84:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 8002c86:	e1cf      	b.n	8003028 <lcdHLine2+0x464>
			else pattern = 0x55;
 8002c88:	2355      	movs	r3, #85	; 0x55
 8002c8a:	75fb      	strb	r3, [r7, #23]
			break;
 8002c8c:	e1cc      	b.n	8003028 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <lcdHLine2+0xdc>
 8002c9a:	2388      	movs	r3, #136	; 0x88
 8002c9c:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 8002c9e:	e1c3      	b.n	8003028 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 8002ca0:	2322      	movs	r3, #34	; 0x22
 8002ca2:	75fb      	strb	r3, [r7, #23]
			break;
 8002ca4:	e1c0      	b.n	8003028 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <lcdHLine2+0xf4>
 8002cb2:	2388      	movs	r3, #136	; 0x88
 8002cb4:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8002cb6:	e1a6      	b.n	8003006 <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d102      	bne.n	8002cca <lcdHLine2+0x106>
 8002cc4:	2344      	movs	r3, #68	; 0x44
 8002cc6:	75fb      	strb	r3, [r7, #23]
			break;
 8002cc8:	e19d      	b.n	8003006 <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d102      	bne.n	8002cdc <lcdHLine2+0x118>
 8002cd6:	2322      	movs	r3, #34	; 0x22
 8002cd8:	75fb      	strb	r3, [r7, #23]
			break;
 8002cda:	e194      	b.n	8003006 <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	f040 818e 	bne.w	8003006 <lcdHLine2+0x442>
 8002cea:	2311      	movs	r3, #17
 8002cec:	75fb      	strb	r3, [r7, #23]
			break;
 8002cee:	e18a      	b.n	8003006 <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <lcdHLine2+0x144>
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d102      	bne.n	8002d0e <lcdHLine2+0x14a>
 8002d08:	23aa      	movs	r3, #170	; 0xaa
 8002d0a:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8002d0c:	e17d      	b.n	800300a <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d102      	bne.n	8002d20 <lcdHLine2+0x15c>
 8002d1a:	2322      	movs	r3, #34	; 0x22
 8002d1c:	75fb      	strb	r3, [r7, #23]
			break;
 8002d1e:	e174      	b.n	800300a <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	f040 816e 	bne.w	800300a <lcdHLine2+0x446>
 8002d2e:	2388      	movs	r3, #136	; 0x88
 8002d30:	75fb      	strb	r3, [r7, #23]
			break;
 8002d32:	e16a      	b.n	800300a <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d005      	beq.n	8002d4c <lcdHLine2+0x188>
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d102      	bne.n	8002d52 <lcdHLine2+0x18e>
 8002d4c:	2355      	movs	r3, #85	; 0x55
 8002d4e:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 8002d50:	e15d      	b.n	800300e <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <lcdHLine2+0x1a0>
 8002d5e:	2388      	movs	r3, #136	; 0x88
 8002d60:	75fb      	strb	r3, [r7, #23]
			break;
 8002d62:	e154      	b.n	800300e <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	f040 814e 	bne.w	800300e <lcdHLine2+0x44a>
 8002d72:	2322      	movs	r3, #34	; 0x22
 8002d74:	75fb      	strb	r3, [r7, #23]
			break;
 8002d76:	e14a      	b.n	800300e <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <lcdHLine2+0x1cc>
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d102      	bne.n	8002d96 <lcdHLine2+0x1d2>
 8002d90:	23cc      	movs	r3, #204	; 0xcc
 8002d92:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 8002d94:	e13d      	b.n	8003012 <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d006      	beq.n	8002db0 <lcdHLine2+0x1ec>
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	f040 8131 	bne.w	8003012 <lcdHLine2+0x44e>
 8002db0:	2333      	movs	r3, #51	; 0x33
 8002db2:	75fb      	strb	r3, [r7, #23]
			break;
 8002db4:	e12d      	b.n	8003012 <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <lcdHLine2+0x204>
 8002dc2:	2355      	movs	r3, #85	; 0x55
 8002dc4:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 8002dc6:	e126      	b.n	8003016 <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8120 	beq.w	8003016 <lcdHLine2+0x452>
 8002dd6:	23ff      	movs	r3, #255	; 0xff
 8002dd8:	75fb      	strb	r3, [r7, #23]
			break;
 8002dda:	e11c      	b.n	8003016 <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <lcdHLine2+0x22a>
 8002de8:	23cc      	movs	r3, #204	; 0xcc
 8002dea:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8002dec:	e11c      	b.n	8003028 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <lcdHLine2+0x23c>
 8002dfa:	2344      	movs	r3, #68	; 0x44
 8002dfc:	75fb      	strb	r3, [r7, #23]
			break;
 8002dfe:	e113      	b.n	8003028 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002e00:	2300      	movs	r3, #0
 8002e02:	75fb      	strb	r3, [r7, #23]
			break;
 8002e04:	e110      	b.n	8003028 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <lcdHLine2+0x254>
 8002e12:	23ee      	movs	r3, #238	; 0xee
 8002e14:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 8002e16:	e107      	b.n	8003028 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d005      	beq.n	8002e30 <lcdHLine2+0x26c>
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d102      	bne.n	8002e36 <lcdHLine2+0x272>
 8002e30:	2322      	movs	r3, #34	; 0x22
 8002e32:	75fb      	strb	r3, [r7, #23]
			break;
 8002e34:	e0f8      	b.n	8003028 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]
			break;
 8002e3a:	e0f5      	b.n	8003028 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <lcdHLine2+0x28a>
 8002e48:	23ff      	movs	r3, #255	; 0xff
 8002e4a:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8002e4c:	e0ec      	b.n	8003028 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 8002e4e:	2388      	movs	r3, #136	; 0x88
 8002e50:	75fb      	strb	r3, [r7, #23]
			break;
 8002e52:	e0e9      	b.n	8003028 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <lcdHLine2+0x2a2>
 8002e60:	23aa      	movs	r3, #170	; 0xaa
 8002e62:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 8002e64:	e0d9      	b.n	800301a <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80d3 	beq.w	800301a <lcdHLine2+0x456>
 8002e74:	2300      	movs	r3, #0
 8002e76:	75fb      	strb	r3, [r7, #23]
			break;
 8002e78:	e0cf      	b.n	800301a <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <lcdHLine2+0x2ce>
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d102      	bne.n	8002e98 <lcdHLine2+0x2d4>
 8002e92:	23aa      	movs	r3, #170	; 0xaa
 8002e94:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8002e96:	e0c7      	b.n	8003028 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <lcdHLine2+0x2e6>
 8002ea4:	2344      	movs	r3, #68	; 0x44
 8002ea6:	75fb      	strb	r3, [r7, #23]
			break;
 8002ea8:	e0be      	b.n	8003028 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
			break;
 8002eae:	e0bb      	b.n	8003028 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <lcdHLine2+0x304>
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d102      	bne.n	8002ece <lcdHLine2+0x30a>
 8002ec8:	23ee      	movs	r3, #238	; 0xee
 8002eca:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 8002ecc:	e0ac      	b.n	8003028 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d102      	bne.n	8002ee0 <lcdHLine2+0x31c>
 8002eda:	23aa      	movs	r3, #170	; 0xaa
 8002edc:	75fb      	strb	r3, [r7, #23]
			break;
 8002ede:	e0a3      	b.n	8003028 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	75fb      	strb	r3, [r7, #23]
			break;
 8002ee4:	e0a0      	b.n	8003028 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <lcdHLine2+0x33a>
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d102      	bne.n	8002f04 <lcdHLine2+0x340>
 8002efe:	2344      	movs	r3, #68	; 0x44
 8002f00:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8002f02:	e08c      	b.n	800301e <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d102      	bne.n	8002f16 <lcdHLine2+0x352>
 8002f10:	23aa      	movs	r3, #170	; 0xaa
 8002f12:	75fb      	strb	r3, [r7, #23]
			break;
 8002f14:	e083      	b.n	800301e <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d17d      	bne.n	800301e <lcdHLine2+0x45a>
 8002f22:	2311      	movs	r3, #17
 8002f24:	75fb      	strb	r3, [r7, #23]
			break;
 8002f26:	e07a      	b.n	800301e <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	4baf      	ldr	r3, [pc, #700]	; (80031e8 <lcdHLine2+0x624>)
 8002f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f30:	0859      	lsrs	r1, r3, #1
 8002f32:	460b      	mov	r3, r1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	440b      	add	r3, r1
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <lcdHLine2+0x382>
 8002f40:	2355      	movs	r3, #85	; 0x55
 8002f42:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 8002f44:	e06d      	b.n	8003022 <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	4ba7      	ldr	r3, [pc, #668]	; (80031e8 <lcdHLine2+0x624>)
 8002f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f4e:	0859      	lsrs	r1, r3, #1
 8002f50:	460b      	mov	r3, r1
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	440b      	add	r3, r1
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d102      	bne.n	8002f64 <lcdHLine2+0x3a0>
 8002f5e:	23aa      	movs	r3, #170	; 0xaa
 8002f60:	75fb      	strb	r3, [r7, #23]
			break;
 8002f62:	e05e      	b.n	8003022 <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	4ba0      	ldr	r3, [pc, #640]	; (80031e8 <lcdHLine2+0x624>)
 8002f68:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6c:	0859      	lsrs	r1, r3, #1
 8002f6e:	460b      	mov	r3, r1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	440b      	add	r3, r1
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d152      	bne.n	8003022 <lcdHLine2+0x45e>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	75fb      	strb	r3, [r7, #23]
			break;
 8002f80:	e04f      	b.n	8003022 <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <lcdHLine2+0x3d0>
 8002f8e:	2322      	movs	r3, #34	; 0x22
 8002f90:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 8002f92:	e049      	b.n	8003028 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d102      	bne.n	8002fa6 <lcdHLine2+0x3e2>
 8002fa0:	2355      	movs	r3, #85	; 0x55
 8002fa2:	75fb      	strb	r3, [r7, #23]
			break;
 8002fa4:	e040      	b.n	8003028 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d102      	bne.n	8002fb8 <lcdHLine2+0x3f4>
 8002fb2:	2388      	movs	r3, #136	; 0x88
 8002fb4:	75fb      	strb	r3, [r7, #23]
			break;
 8002fb6:	e037      	b.n	8003028 <lcdHLine2+0x464>
			else pattern = 0x00;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	75fb      	strb	r3, [r7, #23]
			break;
 8002fbc:	e034      	b.n	8003028 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d005      	beq.n	8002fd6 <lcdHLine2+0x412>
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d102      	bne.n	8002fdc <lcdHLine2+0x418>
 8002fd6:	2388      	movs	r3, #136	; 0x88
 8002fd8:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 8002fda:	e024      	b.n	8003026 <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <lcdHLine2+0x42a>
 8002fe8:	2377      	movs	r3, #119	; 0x77
 8002fea:	75fb      	strb	r3, [r7, #23]
			break;
 8002fec:	e01b      	b.n	8003026 <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d115      	bne.n	8003026 <lcdHLine2+0x462>
 8002ffa:	23aa      	movs	r3, #170	; 0xaa
 8002ffc:	75fb      	strb	r3, [r7, #23]
			break;
 8002ffe:	e012      	b.n	8003026 <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 8003000:	2300      	movs	r3, #0
 8003002:	75fb      	strb	r3, [r7, #23]
			break;
 8003004:	e010      	b.n	8003028 <lcdHLine2+0x464>
			break;
 8003006:	bf00      	nop
 8003008:	e00e      	b.n	8003028 <lcdHLine2+0x464>
			break;
 800300a:	bf00      	nop
 800300c:	e00c      	b.n	8003028 <lcdHLine2+0x464>
			break;
 800300e:	bf00      	nop
 8003010:	e00a      	b.n	8003028 <lcdHLine2+0x464>
			break;
 8003012:	bf00      	nop
 8003014:	e008      	b.n	8003028 <lcdHLine2+0x464>
			break;
 8003016:	bf00      	nop
 8003018:	e006      	b.n	8003028 <lcdHLine2+0x464>
			break;
 800301a:	bf00      	nop
 800301c:	e004      	b.n	8003028 <lcdHLine2+0x464>
			break;
 800301e:	bf00      	nop
 8003020:	e002      	b.n	8003028 <lcdHLine2+0x464>
			break;
 8003022:	bf00      	nop
 8003024:	e000      	b.n	8003028 <lcdHLine2+0x464>
			break;
 8003026:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	08db      	lsrs	r3, r3, #3
 800302c:	b29b      	uxth	r3, r3
 800302e:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 800303a:	88bb      	ldrh	r3, [r7, #4]
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	b29b      	uxth	r3, r3
 8003040:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 8003042:	88bb      	ldrh	r3, [r7, #4]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	2232      	movs	r2, #50	; 0x32
 8003050:	fb03 f202 	mul.w	r2, r3, r2
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	4413      	add	r3, r2
 8003058:	4a64      	ldr	r2, [pc, #400]	; (80031ec <lcdHLine2+0x628>)
 800305a:	5cd3      	ldrb	r3, [r2, r3]
 800305c:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	2232      	movs	r2, #50	; 0x32
 8003062:	fb03 f202 	mul.w	r2, r3, r2
 8003066:	7b7b      	ldrb	r3, [r7, #13]
 8003068:	4413      	add	r3, r2
 800306a:	4a60      	ldr	r2, [pc, #384]	; (80031ec <lcdHLine2+0x628>)
 800306c:	5cd3      	ldrb	r3, [r2, r3]
 800306e:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 8003070:	23ff      	movs	r3, #255	; 0xff
 8003072:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 8003074:	7bbb      	ldrb	r3, [r7, #14]
 8003076:	f1c3 0208 	rsb	r2, r3, #8
 800307a:	88b9      	ldrh	r1, [r7, #4]
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	1acb      	subs	r3, r1, r3
 8003080:	3301      	adds	r3, #1
 8003082:	429a      	cmp	r2, r3
 8003084:	dd11      	ble.n	80030aa <lcdHLine2+0x4e6>
 8003086:	88ba      	ldrh	r2, [r7, #4]
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	3301      	adds	r3, #1
 800308e:	22ff      	movs	r2, #255	; 0xff
 8003090:	fa42 f303 	asr.w	r3, r2, r3
 8003094:	43da      	mvns	r2, r3
 8003096:	7bbb      	ldrb	r3, [r7, #14]
 8003098:	fa42 f303 	asr.w	r3, r2, r3
 800309c:	b25a      	sxtb	r2, r3
 800309e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030a2:	4013      	ands	r3, r2
 80030a4:	b25b      	sxtb	r3, r3
 80030a6:	753b      	strb	r3, [r7, #20]
 80030a8:	e001      	b.n	80030ae <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	753b      	strb	r3, [r7, #20]
		switch(mode){
 80030ae:	78bb      	ldrb	r3, [r7, #2]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	f200 8130 	bhi.w	8003316 <lcdHLine2+0x752>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <lcdHLine2+0x4f8>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	08003151 	.word	0x08003151
 80030c4:	080031f1 	.word	0x080031f1
 80030c8:	08003275 	.word	0x08003275
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 80030cc:	7bbb      	ldrb	r3, [r7, #14]
 80030ce:	22ff      	movs	r2, #255	; 0xff
 80030d0:	fa42 f303 	asr.w	r3, r2, r3
 80030d4:	b25a      	sxtb	r2, r3
 80030d6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80030da:	4013      	ands	r3, r2
 80030dc:	b25a      	sxtb	r2, r3
 80030de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	b25b      	sxtb	r3, r3
 80030e6:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 80030e8:	7b3b      	ldrb	r3, [r7, #12]
 80030ea:	f1c3 0307 	rsb	r3, r3, #7
 80030ee:	22ff      	movs	r2, #255	; 0xff
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	b25a      	sxtb	r2, r3
 80030f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030fa:	4013      	ands	r3, r2
 80030fc:	b25a      	sxtb	r2, r3
 80030fe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003102:	4313      	orrs	r3, r2
 8003104:	b25b      	sxtb	r3, r3
 8003106:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003108:	2301      	movs	r3, #1
 800310a:	74fb      	strb	r3, [r7, #19]
 800310c:	e019      	b.n	8003142 <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	2232      	movs	r2, #50	; 0x32
 8003112:	fb03 f202 	mul.w	r2, r3, r2
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	441a      	add	r2, r3
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	4413      	add	r3, r2
 800311e:	4a33      	ldr	r2, [pc, #204]	; (80031ec <lcdHLine2+0x628>)
 8003120:	5cd1      	ldrb	r1, [r2, r3]
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	2232      	movs	r2, #50	; 0x32
 8003126:	fb03 f202 	mul.w	r2, r3, r2
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	441a      	add	r2, r3
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	4413      	add	r3, r2
 8003132:	7dfa      	ldrb	r2, [r7, #23]
 8003134:	430a      	orrs	r2, r1
 8003136:	b2d1      	uxtb	r1, r2
 8003138:	4a2c      	ldr	r2, [pc, #176]	; (80031ec <lcdHLine2+0x628>)
 800313a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	3301      	adds	r3, #1
 8003140:	74fb      	strb	r3, [r7, #19]
 8003142:	7cfa      	ldrb	r2, [r7, #19]
 8003144:	7b79      	ldrb	r1, [r7, #13]
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	1acb      	subs	r3, r1, r3
 800314a:	429a      	cmp	r2, r3
 800314c:	dbdf      	blt.n	800310e <lcdHLine2+0x54a>
			}
			break;
 800314e:	e0e2      	b.n	8003316 <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 8003150:	7bbb      	ldrb	r3, [r7, #14]
 8003152:	22ff      	movs	r2, #255	; 0xff
 8003154:	fa42 f303 	asr.w	r3, r2, r3
 8003158:	b25a      	sxtb	r2, r3
 800315a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800315e:	4013      	ands	r3, r2
 8003160:	b25b      	sxtb	r3, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	b25a      	sxtb	r2, r3
 8003166:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800316a:	4013      	ands	r3, r2
 800316c:	b25b      	sxtb	r3, r3
 800316e:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 8003170:	7b3b      	ldrb	r3, [r7, #12]
 8003172:	f1c3 0307 	rsb	r3, r3, #7
 8003176:	22ff      	movs	r2, #255	; 0xff
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	b25a      	sxtb	r2, r3
 800317e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003182:	4013      	ands	r3, r2
 8003184:	b25b      	sxtb	r3, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	b25a      	sxtb	r2, r3
 800318a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800318e:	4013      	ands	r3, r2
 8003190:	b25b      	sxtb	r3, r3
 8003192:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003194:	2301      	movs	r3, #1
 8003196:	74bb      	strb	r3, [r7, #18]
 8003198:	e01e      	b.n	80031d8 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	2232      	movs	r2, #50	; 0x32
 800319e:	fb03 f202 	mul.w	r2, r3, r2
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	441a      	add	r2, r3
 80031a6:	7cbb      	ldrb	r3, [r7, #18]
 80031a8:	4413      	add	r3, r2
 80031aa:	4a10      	ldr	r2, [pc, #64]	; (80031ec <lcdHLine2+0x628>)
 80031ac:	5cd3      	ldrb	r3, [r2, r3]
 80031ae:	b25a      	sxtb	r2, r3
 80031b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	b25b      	sxtb	r3, r3
 80031b8:	4013      	ands	r3, r2
 80031ba:	b259      	sxtb	r1, r3
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	2232      	movs	r2, #50	; 0x32
 80031c0:	fb03 f202 	mul.w	r2, r3, r2
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	441a      	add	r2, r3
 80031c8:	7cbb      	ldrb	r3, [r7, #18]
 80031ca:	4413      	add	r3, r2
 80031cc:	b2c9      	uxtb	r1, r1
 80031ce:	4a07      	ldr	r2, [pc, #28]	; (80031ec <lcdHLine2+0x628>)
 80031d0:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80031d2:	7cbb      	ldrb	r3, [r7, #18]
 80031d4:	3301      	adds	r3, #1
 80031d6:	74bb      	strb	r3, [r7, #18]
 80031d8:	7cba      	ldrb	r2, [r7, #18]
 80031da:	7b79      	ldrb	r1, [r7, #13]
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	1acb      	subs	r3, r1, r3
 80031e0:	429a      	cmp	r2, r3
 80031e2:	dbda      	blt.n	800319a <lcdHLine2+0x5d6>
			}
			break;
 80031e4:	e097      	b.n	8003316 <lcdHLine2+0x752>
 80031e6:	bf00      	nop
 80031e8:	aaaaaaab 	.word	0xaaaaaaab
 80031ec:	200025ac 	.word	0x200025ac
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 80031f0:	7bbb      	ldrb	r3, [r7, #14]
 80031f2:	22ff      	movs	r2, #255	; 0xff
 80031f4:	fa42 f303 	asr.w	r3, r2, r3
 80031f8:	b25a      	sxtb	r2, r3
 80031fa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80031fe:	4013      	ands	r3, r2
 8003200:	b25a      	sxtb	r2, r3
 8003202:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003206:	4053      	eors	r3, r2
 8003208:	b25b      	sxtb	r3, r3
 800320a:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 800320c:	7b3b      	ldrb	r3, [r7, #12]
 800320e:	f1c3 0307 	rsb	r3, r3, #7
 8003212:	22ff      	movs	r2, #255	; 0xff
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	b25a      	sxtb	r2, r3
 800321a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800321e:	4013      	ands	r3, r2
 8003220:	b25a      	sxtb	r2, r3
 8003222:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003226:	4053      	eors	r3, r2
 8003228:	b25b      	sxtb	r3, r3
 800322a:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800322c:	2301      	movs	r3, #1
 800322e:	747b      	strb	r3, [r7, #17]
 8003230:	e019      	b.n	8003266 <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	2232      	movs	r2, #50	; 0x32
 8003236:	fb03 f202 	mul.w	r2, r3, r2
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	441a      	add	r2, r3
 800323e:	7c7b      	ldrb	r3, [r7, #17]
 8003240:	4413      	add	r3, r2
 8003242:	4a42      	ldr	r2, [pc, #264]	; (800334c <lcdHLine2+0x788>)
 8003244:	5cd1      	ldrb	r1, [r2, r3]
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	2232      	movs	r2, #50	; 0x32
 800324a:	fb03 f202 	mul.w	r2, r3, r2
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	441a      	add	r2, r3
 8003252:	7c7b      	ldrb	r3, [r7, #17]
 8003254:	4413      	add	r3, r2
 8003256:	7dfa      	ldrb	r2, [r7, #23]
 8003258:	404a      	eors	r2, r1
 800325a:	b2d1      	uxtb	r1, r2
 800325c:	4a3b      	ldr	r2, [pc, #236]	; (800334c <lcdHLine2+0x788>)
 800325e:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003260:	7c7b      	ldrb	r3, [r7, #17]
 8003262:	3301      	adds	r3, #1
 8003264:	747b      	strb	r3, [r7, #17]
 8003266:	7c7a      	ldrb	r2, [r7, #17]
 8003268:	7b79      	ldrb	r1, [r7, #13]
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	1acb      	subs	r3, r1, r3
 800326e:	429a      	cmp	r2, r3
 8003270:	dbdf      	blt.n	8003232 <lcdHLine2+0x66e>
			}
			break;
 8003272:	e050      	b.n	8003316 <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 8003274:	7bbb      	ldrb	r3, [r7, #14]
 8003276:	22ff      	movs	r2, #255	; 0xff
 8003278:	fa42 f303 	asr.w	r3, r2, r3
 800327c:	b25a      	sxtb	r2, r3
 800327e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003282:	4013      	ands	r3, r2
 8003284:	b25a      	sxtb	r2, r3
 8003286:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800328a:	43db      	mvns	r3, r3
 800328c:	b259      	sxtb	r1, r3
 800328e:	7bbb      	ldrb	r3, [r7, #14]
 8003290:	f1c3 0308 	rsb	r3, r3, #8
 8003294:	20ff      	movs	r0, #255	; 0xff
 8003296:	fa00 f303 	lsl.w	r3, r0, r3
 800329a:	b25b      	sxtb	r3, r3
 800329c:	400b      	ands	r3, r1
 800329e:	b25b      	sxtb	r3, r3
 80032a0:	4313      	orrs	r3, r2
 80032a2:	b25b      	sxtb	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 80032aa:	7b3b      	ldrb	r3, [r7, #12]
 80032ac:	f1c3 0307 	rsb	r3, r3, #7
 80032b0:	22ff      	movs	r2, #255	; 0xff
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	b25a      	sxtb	r2, r3
 80032b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032bc:	4013      	ands	r3, r2
 80032be:	b25a      	sxtb	r2, r3
 80032c0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	b259      	sxtb	r1, r3
 80032c8:	7b3b      	ldrb	r3, [r7, #12]
 80032ca:	3301      	adds	r3, #1
 80032cc:	20ff      	movs	r0, #255	; 0xff
 80032ce:	fa40 f303 	asr.w	r3, r0, r3
 80032d2:	b25b      	sxtb	r3, r3
 80032d4:	400b      	ands	r3, r1
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	b25b      	sxtb	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80032e2:	2301      	movs	r3, #1
 80032e4:	743b      	strb	r3, [r7, #16]
 80032e6:	e00f      	b.n	8003308 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	2232      	movs	r2, #50	; 0x32
 80032ec:	fb03 f202 	mul.w	r2, r3, r2
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	441a      	add	r2, r3
 80032f4:	7c3b      	ldrb	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	7dfa      	ldrb	r2, [r7, #23]
 80032fa:	43d2      	mvns	r2, r2
 80032fc:	b2d1      	uxtb	r1, r2
 80032fe:	4a13      	ldr	r2, [pc, #76]	; (800334c <lcdHLine2+0x788>)
 8003300:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003302:	7c3b      	ldrb	r3, [r7, #16]
 8003304:	3301      	adds	r3, #1
 8003306:	743b      	strb	r3, [r7, #16]
 8003308:	7c3a      	ldrb	r2, [r7, #16]
 800330a:	7b79      	ldrb	r1, [r7, #13]
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	1acb      	subs	r3, r1, r3
 8003310:	429a      	cmp	r2, r3
 8003312:	dbe9      	blt.n	80032e8 <lcdHLine2+0x724>
			}
			break;
 8003314:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	2232      	movs	r2, #50	; 0x32
 800331a:	fb03 f202 	mul.w	r2, r3, r2
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	4413      	add	r3, r2
 8003322:	490a      	ldr	r1, [pc, #40]	; (800334c <lcdHLine2+0x788>)
 8003324:	7dba      	ldrb	r2, [r7, #22]
 8003326:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003328:	7b7a      	ldrb	r2, [r7, #13]
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	429a      	cmp	r2, r3
 800332e:	d908      	bls.n	8003342 <lcdHLine2+0x77e>
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	2232      	movs	r2, #50	; 0x32
 8003334:	fb03 f202 	mul.w	r2, r3, r2
 8003338:	7b7b      	ldrb	r3, [r7, #13]
 800333a:	4413      	add	r3, r2
 800333c:	4903      	ldr	r1, [pc, #12]	; (800334c <lcdHLine2+0x788>)
 800333e:	7d7a      	ldrb	r2, [r7, #21]
 8003340:	54ca      	strb	r2, [r1, r3]
}
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bc90      	pop	{r4, r7}
 800334a:	4770      	bx	lr
 800334c:	200025ac 	.word	0x200025ac

08003350 <lcdHLine>:

// Draw horizontal line
// Should not be used, causes problems for lines shorter than 8px
// use lcdHLine2 instead
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8003350:	b490      	push	{r4, r7}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	4604      	mov	r4, r0
 8003358:	4608      	mov	r0, r1
 800335a:	4611      	mov	r1, r2
 800335c:	461a      	mov	r2, r3
 800335e:	4623      	mov	r3, r4
 8003360:	80fb      	strh	r3, [r7, #6]
 8003362:	4603      	mov	r3, r0
 8003364:	80bb      	strh	r3, [r7, #4]
 8003366:	460b      	mov	r3, r1
 8003368:	70fb      	strb	r3, [r7, #3]
 800336a:	4613      	mov	r3, r2
 800336c:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	08db      	lsrs	r3, r3, #3
 8003372:	b29b      	uxth	r3, r3
 8003374:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 8003380:	88bb      	ldrh	r3, [r7, #4]
 8003382:	08db      	lsrs	r3, r3, #3
 8003384:	b29b      	uxth	r3, r3
 8003386:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 8003388:	88bb      	ldrh	r3, [r7, #4]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	2232      	movs	r2, #50	; 0x32
 8003396:	fb03 f202 	mul.w	r2, r3, r2
 800339a:	7c7b      	ldrb	r3, [r7, #17]
 800339c:	4413      	add	r3, r2
 800339e:	4a71      	ldr	r2, [pc, #452]	; (8003564 <lcdHLine+0x214>)
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
 80033a2:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	2232      	movs	r2, #50	; 0x32
 80033a8:	fb03 f202 	mul.w	r2, r3, r2
 80033ac:	7c7b      	ldrb	r3, [r7, #17]
 80033ae:	441a      	add	r2, r3
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	4413      	add	r3, r2
 80033b4:	4a6b      	ldr	r2, [pc, #428]	; (8003564 <lcdHLine+0x214>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 80033ba:	23ff      	movs	r3, #255	; 0xff
 80033bc:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 80033be:	7c3b      	ldrb	r3, [r7, #16]
 80033c0:	f1c3 0208 	rsb	r2, r3, #8
 80033c4:	88b9      	ldrh	r1, [r7, #4]
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	1acb      	subs	r3, r1, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	429a      	cmp	r2, r3
 80033ce:	dd09      	ble.n	80033e4 <lcdHLine+0x94>
 80033d0:	88ba      	ldrh	r2, [r7, #4]
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	3301      	adds	r3, #1
 80033d8:	22ff      	movs	r2, #255	; 0xff
 80033da:	fa42 f303 	asr.w	r3, r2, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	757b      	strb	r3, [r7, #21]
	switch(mode){
 80033e4:	78bb      	ldrb	r3, [r7, #2]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d067      	beq.n	80034ba <lcdHLine+0x16a>
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	f300 809e 	bgt.w	800352c <lcdHLine+0x1dc>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <lcdHLine+0xaa>
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d02e      	beq.n	8003456 <lcdHLine+0x106>
 80033f8:	e098      	b.n	800352c <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 80033fa:	7d7a      	ldrb	r2, [r7, #21]
 80033fc:	7c3b      	ldrb	r3, [r7, #16]
 80033fe:	fa42 f303 	asr.w	r3, r2, r3
 8003402:	b25a      	sxtb	r2, r3
 8003404:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003408:	4313      	orrs	r3, r2
 800340a:	b25b      	sxtb	r3, r3
 800340c:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 800340e:	7bbb      	ldrb	r3, [r7, #14]
 8003410:	f1c3 0307 	rsb	r3, r3, #7
 8003414:	22ff      	movs	r2, #255	; 0xff
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	b25a      	sxtb	r2, r3
 800341c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003420:	4313      	orrs	r3, r2
 8003422:	b25b      	sxtb	r3, r3
 8003424:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003426:	2301      	movs	r3, #1
 8003428:	753b      	strb	r3, [r7, #20]
 800342a:	e00d      	b.n	8003448 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	2232      	movs	r2, #50	; 0x32
 8003430:	fb03 f202 	mul.w	r2, r3, r2
 8003434:	7c7b      	ldrb	r3, [r7, #17]
 8003436:	441a      	add	r2, r3
 8003438:	7d3b      	ldrb	r3, [r7, #20]
 800343a:	4413      	add	r3, r2
 800343c:	4a49      	ldr	r2, [pc, #292]	; (8003564 <lcdHLine+0x214>)
 800343e:	21ff      	movs	r1, #255	; 0xff
 8003440:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003442:	7d3b      	ldrb	r3, [r7, #20]
 8003444:	3301      	adds	r3, #1
 8003446:	753b      	strb	r3, [r7, #20]
 8003448:	7d3a      	ldrb	r2, [r7, #20]
 800344a:	7bf9      	ldrb	r1, [r7, #15]
 800344c:	7c7b      	ldrb	r3, [r7, #17]
 800344e:	1acb      	subs	r3, r1, r3
 8003450:	429a      	cmp	r2, r3
 8003452:	dbeb      	blt.n	800342c <lcdHLine+0xdc>
		}
		break;
 8003454:	e06a      	b.n	800352c <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 8003456:	7d7a      	ldrb	r2, [r7, #21]
 8003458:	7c3b      	ldrb	r3, [r7, #16]
 800345a:	fa42 f303 	asr.w	r3, r2, r3
 800345e:	b25b      	sxtb	r3, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	b25a      	sxtb	r2, r3
 8003464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003468:	4013      	ands	r3, r2
 800346a:	b25b      	sxtb	r3, r3
 800346c:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 800346e:	7bbb      	ldrb	r3, [r7, #14]
 8003470:	f1c3 0307 	rsb	r3, r3, #7
 8003474:	22ff      	movs	r2, #255	; 0xff
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	b25b      	sxtb	r3, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	b25a      	sxtb	r2, r3
 8003480:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003484:	4013      	ands	r3, r2
 8003486:	b25b      	sxtb	r3, r3
 8003488:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800348a:	2301      	movs	r3, #1
 800348c:	74fb      	strb	r3, [r7, #19]
 800348e:	e00d      	b.n	80034ac <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	2232      	movs	r2, #50	; 0x32
 8003494:	fb03 f202 	mul.w	r2, r3, r2
 8003498:	7c7b      	ldrb	r3, [r7, #17]
 800349a:	441a      	add	r2, r3
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	4413      	add	r3, r2
 80034a0:	4a30      	ldr	r2, [pc, #192]	; (8003564 <lcdHLine+0x214>)
 80034a2:	2100      	movs	r1, #0
 80034a4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	3301      	adds	r3, #1
 80034aa:	74fb      	strb	r3, [r7, #19]
 80034ac:	7cfa      	ldrb	r2, [r7, #19]
 80034ae:	7bf9      	ldrb	r1, [r7, #15]
 80034b0:	7c7b      	ldrb	r3, [r7, #17]
 80034b2:	1acb      	subs	r3, r1, r3
 80034b4:	429a      	cmp	r2, r3
 80034b6:	dbeb      	blt.n	8003490 <lcdHLine+0x140>
		}
		break;
 80034b8:	e038      	b.n	800352c <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 80034ba:	7d7a      	ldrb	r2, [r7, #21]
 80034bc:	7c3b      	ldrb	r3, [r7, #16]
 80034be:	fa42 f303 	asr.w	r3, r2, r3
 80034c2:	b25a      	sxtb	r2, r3
 80034c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034c8:	4053      	eors	r3, r2
 80034ca:	b25b      	sxtb	r3, r3
 80034cc:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 80034ce:	7bbb      	ldrb	r3, [r7, #14]
 80034d0:	f1c3 0307 	rsb	r3, r3, #7
 80034d4:	22ff      	movs	r2, #255	; 0xff
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	b25a      	sxtb	r2, r3
 80034dc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034e0:	4053      	eors	r3, r2
 80034e2:	b25b      	sxtb	r3, r3
 80034e4:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80034e6:	2301      	movs	r3, #1
 80034e8:	74bb      	strb	r3, [r7, #18]
 80034ea:	e018      	b.n	800351e <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	2232      	movs	r2, #50	; 0x32
 80034f0:	fb03 f202 	mul.w	r2, r3, r2
 80034f4:	7c7b      	ldrb	r3, [r7, #17]
 80034f6:	441a      	add	r2, r3
 80034f8:	7cbb      	ldrb	r3, [r7, #18]
 80034fa:	4413      	add	r3, r2
 80034fc:	4a19      	ldr	r2, [pc, #100]	; (8003564 <lcdHLine+0x214>)
 80034fe:	5cd2      	ldrb	r2, [r2, r3]
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	2132      	movs	r1, #50	; 0x32
 8003504:	fb03 f101 	mul.w	r1, r3, r1
 8003508:	7c7b      	ldrb	r3, [r7, #17]
 800350a:	4419      	add	r1, r3
 800350c:	7cbb      	ldrb	r3, [r7, #18]
 800350e:	440b      	add	r3, r1
 8003510:	43d2      	mvns	r2, r2
 8003512:	b2d1      	uxtb	r1, r2
 8003514:	4a13      	ldr	r2, [pc, #76]	; (8003564 <lcdHLine+0x214>)
 8003516:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003518:	7cbb      	ldrb	r3, [r7, #18]
 800351a:	3301      	adds	r3, #1
 800351c:	74bb      	strb	r3, [r7, #18]
 800351e:	7cba      	ldrb	r2, [r7, #18]
 8003520:	7bf9      	ldrb	r1, [r7, #15]
 8003522:	7c7b      	ldrb	r3, [r7, #17]
 8003524:	1acb      	subs	r3, r1, r3
 8003526:	429a      	cmp	r2, r3
 8003528:	dbe0      	blt.n	80034ec <lcdHLine+0x19c>
		}
		break;
 800352a:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	2232      	movs	r2, #50	; 0x32
 8003530:	fb03 f202 	mul.w	r2, r3, r2
 8003534:	7c7b      	ldrb	r3, [r7, #17]
 8003536:	4413      	add	r3, r2
 8003538:	490a      	ldr	r1, [pc, #40]	; (8003564 <lcdHLine+0x214>)
 800353a:	7dfa      	ldrb	r2, [r7, #23]
 800353c:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	7c7b      	ldrb	r3, [r7, #17]
 8003542:	429a      	cmp	r2, r3
 8003544:	d908      	bls.n	8003558 <lcdHLine+0x208>
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	2232      	movs	r2, #50	; 0x32
 800354a:	fb03 f202 	mul.w	r2, r3, r2
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	4413      	add	r3, r2
 8003552:	4904      	ldr	r1, [pc, #16]	; (8003564 <lcdHLine+0x214>)
 8003554:	7dba      	ldrb	r2, [r7, #22]
 8003556:	54ca      	strb	r2, [r1, r3]
}
 8003558:	bf00      	nop
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bc90      	pop	{r4, r7}
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	200025ac 	.word	0x200025ac

08003568 <lcdRefresh>:

void lcdRefresh(void){
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
	if(allowUpdate){
 800356e:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <lcdRefresh+0x7c>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d032      	beq.n	80035dc <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8003576:	2201      	movs	r2, #1
 8003578:	2140      	movs	r1, #64	; 0x40
 800357a:	481b      	ldr	r0, [pc, #108]	; (80035e8 <lcdRefresh+0x80>)
 800357c:	f003 fa1a 	bl	80069b4 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003580:	2301      	movs	r3, #1
 8003582:	71fb      	strb	r3, [r7, #7]
 8003584:	e01c      	b.n	80035c0 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff f869 	bl	8002660 <reverse_uint8>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	4b16      	ldr	r3, [pc, #88]	; (80035ec <lcdRefresh+0x84>)
 8003594:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8003596:	2396      	movs	r3, #150	; 0x96
 8003598:	2202      	movs	r2, #2
 800359a:	4914      	ldr	r1, [pc, #80]	; (80035ec <lcdRefresh+0x84>)
 800359c:	4814      	ldr	r0, [pc, #80]	; (80035f0 <lcdRefresh+0x88>)
 800359e:	f006 fac8 	bl	8009b32 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	2232      	movs	r2, #50	; 0x32
 80035a8:	fb02 f303 	mul.w	r3, r2, r3
 80035ac:	4a11      	ldr	r2, [pc, #68]	; (80035f4 <lcdRefresh+0x8c>)
 80035ae:	1899      	adds	r1, r3, r2
 80035b0:	2396      	movs	r3, #150	; 0x96
 80035b2:	2232      	movs	r2, #50	; 0x32
 80035b4:	480e      	ldr	r0, [pc, #56]	; (80035f0 <lcdRefresh+0x88>)
 80035b6:	f006 fabc 	bl	8009b32 <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	3301      	adds	r3, #1
 80035be:	71fb      	strb	r3, [r7, #7]
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	2bf1      	cmp	r3, #241	; 0xf1
 80035c4:	d9df      	bls.n	8003586 <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 80035c6:	2396      	movs	r3, #150	; 0x96
 80035c8:	2202      	movs	r2, #2
 80035ca:	490b      	ldr	r1, [pc, #44]	; (80035f8 <lcdRefresh+0x90>)
 80035cc:	4808      	ldr	r0, [pc, #32]	; (80035f0 <lcdRefresh+0x88>)
 80035ce:	f006 fab0 	bl	8009b32 <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 80035d2:	2200      	movs	r2, #0
 80035d4:	2140      	movs	r1, #64	; 0x40
 80035d6:	4804      	ldr	r0, [pc, #16]	; (80035e8 <lcdRefresh+0x80>)
 80035d8:	f003 f9ec 	bl	80069b4 <HAL_GPIO_WritePin>
	}
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000054 	.word	0x20000054
 80035e8:	40020000 	.word	0x40020000
 80035ec:	20000058 	.word	0x20000058
 80035f0:	200057e0 	.word	0x200057e0
 80035f4:	200025ac 	.word	0x200025ac
 80035f8:	200025a8 	.word	0x200025a8

080035fc <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	4604      	mov	r4, r0
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	461a      	mov	r2, r3
 800360a:	4623      	mov	r3, r4
 800360c:	80fb      	strh	r3, [r7, #6]
 800360e:	4603      	mov	r3, r0
 8003610:	80bb      	strh	r3, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	70fb      	strb	r3, [r7, #3]
 8003616:	4613      	mov	r3, r2
 8003618:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	e009      	b.n	8003634 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8003620:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	88b9      	ldrh	r1, [r7, #4]
 8003628:	88f8      	ldrh	r0, [r7, #6]
 800362a:	f7ff fe91 	bl	8003350 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	3301      	adds	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	78bb      	ldrb	r3, [r7, #2]
 8003638:	429a      	cmp	r2, r3
 800363a:	d9f1      	bls.n	8003620 <lcdRect+0x24>
	}
}
 800363c:	bf00      	nop
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bd90      	pop	{r4, r7, pc}

08003646 <lcdRoundedRect2>:
		} else {
			lcdHLine(x1, x2, i, mode);
		}
	}
}
void lcdRoundedRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline, uint8_t r){
 8003646:	b590      	push	{r4, r7, lr}
 8003648:	b089      	sub	sp, #36	; 0x24
 800364a:	af02      	add	r7, sp, #8
 800364c:	4604      	mov	r4, r0
 800364e:	4608      	mov	r0, r1
 8003650:	4611      	mov	r1, r2
 8003652:	461a      	mov	r2, r3
 8003654:	4623      	mov	r3, r4
 8003656:	80fb      	strh	r3, [r7, #6]
 8003658:	4603      	mov	r3, r0
 800365a:	80bb      	strh	r3, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	70fb      	strb	r3, [r7, #3]
 8003660:	4613      	mov	r3, r2
 8003662:	70bb      	strb	r3, [r7, #2]
	// check if radius not exceded
	if((2*r>(x2-x1))||(2*r>(y2-y1))) r = 0;
 8003664:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003668:	005a      	lsls	r2, r3, #1
 800366a:	88b9      	ldrh	r1, [r7, #4]
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	1acb      	subs	r3, r1, r3
 8003670:	429a      	cmp	r2, r3
 8003672:	dc07      	bgt.n	8003684 <lcdRoundedRect2+0x3e>
 8003674:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003678:	005a      	lsls	r2, r3, #1
 800367a:	78b9      	ldrb	r1, [r7, #2]
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	1acb      	subs	r3, r1, r3
 8003680:	429a      	cmp	r2, r3
 8003682:	dd02      	ble.n	800368a <lcdRoundedRect2+0x44>
 8003684:	2300      	movs	r3, #0
 8003686:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	if(x1!=x2 && y1!=y2){
 800368a:	88fa      	ldrh	r2, [r7, #6]
 800368c:	88bb      	ldrh	r3, [r7, #4]
 800368e:	429a      	cmp	r2, r3
 8003690:	f000 81d5 	beq.w	8003a3e <lcdRoundedRect2+0x3f8>
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	78bb      	ldrb	r3, [r7, #2]
 8003698:	429a      	cmp	r2, r3
 800369a:	f000 81d0 	beq.w	8003a3e <lcdRoundedRect2+0x3f8>
		for(uint8_t y = y1; y <= y2; y++){
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	75fb      	strb	r3, [r7, #23]
 80036a2:	e0a3      	b.n	80037ec <lcdRoundedRect2+0x1a6>
			if((y-y1)<r){
 80036a4:	7dfa      	ldrb	r2, [r7, #23]
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	1ad2      	subs	r2, r2, r3
 80036aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80036ae:	429a      	cmp	r2, r3
 80036b0:	da43      	bge.n	800373a <lcdRoundedRect2+0xf4>
				uint8_t off = (int)(sqrt(r*r-(r-y+y1)*(r-y+y1)));
 80036b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80036b6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80036ba:	fb03 f202 	mul.w	r2, r3, r2
 80036be:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	1ac9      	subs	r1, r1, r3
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	440b      	add	r3, r1
 80036ca:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 80036ce:	7df9      	ldrb	r1, [r7, #23]
 80036d0:	1a40      	subs	r0, r0, r1
 80036d2:	78f9      	ldrb	r1, [r7, #3]
 80036d4:	4401      	add	r1, r0
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fc ff31 	bl	8000544 <__aeabi_i2d>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	ec43 2b10 	vmov	d0, r2, r3
 80036ea:	f00e fe11 	bl	8012310 <sqrt>
 80036ee:	ec53 2b10 	vmov	r2, r3, d0
 80036f2:	4610      	mov	r0, r2
 80036f4:	4619      	mov	r1, r3
 80036f6:	f7fd fa3f 	bl	8000b78 <__aeabi_d2iz>
 80036fa:	4603      	mov	r3, r0
 80036fc:	73bb      	strb	r3, [r7, #14]
				lcdHLine2(x1+r-off, x2-r+off, y, mode, fill);
 80036fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003702:	b29a      	uxth	r2, r3
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	4413      	add	r3, r2
 8003708:	b29a      	uxth	r2, r3
 800370a:	7bbb      	ldrb	r3, [r7, #14]
 800370c:	b29b      	uxth	r3, r3
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	b298      	uxth	r0, r3
 8003712:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003716:	b29b      	uxth	r3, r3
 8003718:	88ba      	ldrh	r2, [r7, #4]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	b29a      	uxth	r2, r3
 800371e:	7bbb      	ldrb	r3, [r7, #14]
 8003720:	b29b      	uxth	r3, r3
 8003722:	4413      	add	r3, r2
 8003724:	b299      	uxth	r1, r3
 8003726:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800372a:	7dfa      	ldrb	r2, [r7, #23]
 800372c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4623      	mov	r3, r4
 8003734:	f7ff fa46 	bl	8002bc4 <lcdHLine2>
 8003738:	e055      	b.n	80037e6 <lcdRoundedRect2+0x1a0>
			} else if((y2-y)<r){
 800373a:	78ba      	ldrb	r2, [r7, #2]
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	1ad2      	subs	r2, r2, r3
 8003740:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003744:	429a      	cmp	r2, r3
 8003746:	da43      	bge.n	80037d0 <lcdRoundedRect2+0x18a>
				uint8_t off = (int)(sqrt(r*r-(r-y2+y)*(r-y2+y)));
 8003748:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800374c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003750:	fb03 f202 	mul.w	r2, r3, r2
 8003754:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003758:	78bb      	ldrb	r3, [r7, #2]
 800375a:	1ac9      	subs	r1, r1, r3
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	440b      	add	r3, r1
 8003760:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003764:	78b9      	ldrb	r1, [r7, #2]
 8003766:	1a40      	subs	r0, r0, r1
 8003768:	7df9      	ldrb	r1, [r7, #23]
 800376a:	4401      	add	r1, r0
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	4618      	mov	r0, r3
 8003774:	f7fc fee6 	bl	8000544 <__aeabi_i2d>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	ec43 2b10 	vmov	d0, r2, r3
 8003780:	f00e fdc6 	bl	8012310 <sqrt>
 8003784:	ec53 2b10 	vmov	r2, r3, d0
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	f7fd f9f4 	bl	8000b78 <__aeabi_d2iz>
 8003790:	4603      	mov	r3, r0
 8003792:	73fb      	strb	r3, [r7, #15]
				lcdHLine2(x1+r-off, x2-r+off, y, mode, fill);
 8003794:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003798:	b29a      	uxth	r2, r3
 800379a:	88fb      	ldrh	r3, [r7, #6]
 800379c:	4413      	add	r3, r2
 800379e:	b29a      	uxth	r2, r3
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	b298      	uxth	r0, r3
 80037a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	88ba      	ldrh	r2, [r7, #4]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	b299      	uxth	r1, r3
 80037bc:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80037c0:	7dfa      	ldrb	r2, [r7, #23]
 80037c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	4623      	mov	r3, r4
 80037ca:	f7ff f9fb 	bl	8002bc4 <lcdHLine2>
 80037ce:	e00a      	b.n	80037e6 <lcdRoundedRect2+0x1a0>
			} else {
				lcdHLine2(x1, x2, y, mode, fill);
 80037d0:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80037d4:	7dfa      	ldrb	r2, [r7, #23]
 80037d6:	88b9      	ldrh	r1, [r7, #4]
 80037d8:	88f8      	ldrh	r0, [r7, #6]
 80037da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	4623      	mov	r3, r4
 80037e2:	f7ff f9ef 	bl	8002bc4 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
 80037e8:	3301      	adds	r3, #1
 80037ea:	75fb      	strb	r3, [r7, #23]
 80037ec:	7dfa      	ldrb	r2, [r7, #23]
 80037ee:	78bb      	ldrb	r3, [r7, #2]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	f67f af57 	bls.w	80036a4 <lcdRoundedRect2+0x5e>
			}
		}
		if(outline){
 80037f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 811f 	beq.w	8003a3e <lcdRoundedRect2+0x3f8>
			lcdHLine2(x1+r, x2-r, y1, mode,1);
 8003800:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003804:	b29a      	uxth	r2, r3
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	4413      	add	r3, r2
 800380a:	b298      	uxth	r0, r3
 800380c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003810:	b29b      	uxth	r3, r3
 8003812:	88ba      	ldrh	r2, [r7, #4]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	b299      	uxth	r1, r3
 8003818:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	2401      	movs	r4, #1
 8003820:	9400      	str	r4, [sp, #0]
 8003822:	f7ff f9cf 	bl	8002bc4 <lcdHLine2>
			lcdHLine2(x1+r, x2-r, y2, mode,1);
 8003826:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800382a:	b29a      	uxth	r2, r3
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	4413      	add	r3, r2
 8003830:	b298      	uxth	r0, r3
 8003832:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003836:	b29b      	uxth	r3, r3
 8003838:	88ba      	ldrh	r2, [r7, #4]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	b299      	uxth	r1, r3
 800383e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003842:	78ba      	ldrb	r2, [r7, #2]
 8003844:	2401      	movs	r4, #1
 8003846:	9400      	str	r4, [sp, #0]
 8003848:	f7ff f9bc 	bl	8002bc4 <lcdHLine2>
			lcdVLine(x1, y1+r, y2-r, mode);
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	b29a      	uxth	r2, r3
 8003850:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003854:	b29b      	uxth	r3, r3
 8003856:	4413      	add	r3, r2
 8003858:	b299      	uxth	r1, r3
 800385a:	78ba      	ldrb	r2, [r7, #2]
 800385c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	b2da      	uxtb	r2, r3
 8003864:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003868:	88f8      	ldrh	r0, [r7, #6]
 800386a:	f7ff f929 	bl	8002ac0 <lcdVLine>
			lcdVLine(x2, y1+r, y2-r, mode);
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	b29a      	uxth	r2, r3
 8003872:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003876:	b29b      	uxth	r3, r3
 8003878:	4413      	add	r3, r2
 800387a:	b299      	uxth	r1, r3
 800387c:	78ba      	ldrb	r2, [r7, #2]
 800387e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	b2da      	uxtb	r2, r3
 8003886:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800388a:	88b8      	ldrh	r0, [r7, #4]
 800388c:	f7ff f918 	bl	8002ac0 <lcdVLine>
//			uint16_t nextOff = 0;
			for(uint16_t i = 0; i < (r-1); i++){
 8003890:	2300      	movs	r3, #0
 8003892:	82bb      	strh	r3, [r7, #20]
 8003894:	e0cc      	b.n	8003a30 <lcdRoundedRect2+0x3ea>
				//corner line offsets from X of circle center
				uint16_t off = (uint16_t)(sqrt(r*r-(r-i)*(r-i)));
 8003896:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800389a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800389e:	fb03 f202 	mul.w	r2, r3, r2
 80038a2:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 80038a6:	8abb      	ldrh	r3, [r7, #20]
 80038a8:	1acb      	subs	r3, r1, r3
 80038aa:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 80038ae:	8ab9      	ldrh	r1, [r7, #20]
 80038b0:	1a41      	subs	r1, r0, r1
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fc fe43 	bl	8000544 <__aeabi_i2d>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	ec43 2b10 	vmov	d0, r2, r3
 80038c6:	f00e fd23 	bl	8012310 <sqrt>
 80038ca:	ec53 2b10 	vmov	r2, r3, d0
 80038ce:	4610      	mov	r0, r2
 80038d0:	4619      	mov	r1, r3
 80038d2:	f7fd f979 	bl	8000bc8 <__aeabi_d2uiz>
 80038d6:	4603      	mov	r3, r0
 80038d8:	827b      	strh	r3, [r7, #18]
				uint16_t nextOff = (uint16_t)(sqrt(r*r-(r-i-1)*(r-i-1)));
 80038da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80038de:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80038e2:	fb03 f202 	mul.w	r2, r3, r2
 80038e6:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 80038ea:	8abb      	ldrh	r3, [r7, #20]
 80038ec:	1acb      	subs	r3, r1, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 80038f4:	8ab9      	ldrh	r1, [r7, #20]
 80038f6:	1a41      	subs	r1, r0, r1
 80038f8:	3901      	subs	r1, #1
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	4618      	mov	r0, r3
 8003902:	f7fc fe1f 	bl	8000544 <__aeabi_i2d>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	ec43 2b10 	vmov	d0, r2, r3
 800390e:	f00e fcff 	bl	8012310 <sqrt>
 8003912:	ec53 2b10 	vmov	r2, r3, d0
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	f7fd f955 	bl	8000bc8 <__aeabi_d2uiz>
 800391e:	4603      	mov	r3, r0
 8003920:	823b      	strh	r3, [r7, #16]
				//reduce corner pixel-lines overlapping
				if((nextOff-off)>0) off++;
 8003922:	8a3a      	ldrh	r2, [r7, #16]
 8003924:	8a7b      	ldrh	r3, [r7, #18]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	dd02      	ble.n	8003932 <lcdRoundedRect2+0x2ec>
 800392c:	8a7b      	ldrh	r3, [r7, #18]
 800392e:	3301      	adds	r3, #1
 8003930:	827b      	strh	r3, [r7, #18]
				//left corners
				lcdHLine2(x1+r-nextOff, x1+r-off, y1+i+1, mode, 1);
 8003932:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003936:	b29a      	uxth	r2, r3
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	4413      	add	r3, r2
 800393c:	b29a      	uxth	r2, r3
 800393e:	8a3b      	ldrh	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	b298      	uxth	r0, r3
 8003944:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003948:	b29a      	uxth	r2, r3
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	4413      	add	r3, r2
 800394e:	b29a      	uxth	r2, r3
 8003950:	8a7b      	ldrh	r3, [r7, #18]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	b299      	uxth	r1, r3
 8003956:	8abb      	ldrh	r3, [r7, #20]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	4413      	add	r3, r2
 800395e:	b2db      	uxtb	r3, r3
 8003960:	3301      	adds	r3, #1
 8003962:	b2da      	uxtb	r2, r3
 8003964:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003968:	2401      	movs	r4, #1
 800396a:	9400      	str	r4, [sp, #0]
 800396c:	f7ff f92a 	bl	8002bc4 <lcdHLine2>
				lcdHLine2(x1+r-nextOff, x1+r-off, y2-i-1, mode, 1);
 8003970:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003974:	b29a      	uxth	r2, r3
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	4413      	add	r3, r2
 800397a:	b29a      	uxth	r2, r3
 800397c:	8a3b      	ldrh	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	b298      	uxth	r0, r3
 8003982:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003986:	b29a      	uxth	r2, r3
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	4413      	add	r3, r2
 800398c:	b29a      	uxth	r2, r3
 800398e:	8a7b      	ldrh	r3, [r7, #18]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	b299      	uxth	r1, r3
 8003994:	8abb      	ldrh	r3, [r7, #20]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	78ba      	ldrb	r2, [r7, #2]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	b2db      	uxtb	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039a6:	2401      	movs	r4, #1
 80039a8:	9400      	str	r4, [sp, #0]
 80039aa:	f7ff f90b 	bl	8002bc4 <lcdHLine2>
				//right corners
				lcdHLine2(x2-r+off, x2-r+nextOff, y1+i+1, mode, 1);
 80039ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	88ba      	ldrh	r2, [r7, #4]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	8a7b      	ldrh	r3, [r7, #18]
 80039bc:	4413      	add	r3, r2
 80039be:	b298      	uxth	r0, r3
 80039c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	88ba      	ldrh	r2, [r7, #4]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	8a3b      	ldrh	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	b299      	uxth	r1, r3
 80039d2:	8abb      	ldrh	r3, [r7, #20]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	4413      	add	r3, r2
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039e4:	2401      	movs	r4, #1
 80039e6:	9400      	str	r4, [sp, #0]
 80039e8:	f7ff f8ec 	bl	8002bc4 <lcdHLine2>
				lcdHLine2(x2-r+off, x2-r+nextOff, y2-i-1, mode, 1);
 80039ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	88ba      	ldrh	r2, [r7, #4]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	8a7b      	ldrh	r3, [r7, #18]
 80039fa:	4413      	add	r3, r2
 80039fc:	b298      	uxth	r0, r3
 80039fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	88ba      	ldrh	r2, [r7, #4]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	8a3b      	ldrh	r3, [r7, #16]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	b299      	uxth	r1, r3
 8003a10:	8abb      	ldrh	r3, [r7, #20]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	78ba      	ldrb	r2, [r7, #2]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a22:	2401      	movs	r4, #1
 8003a24:	9400      	str	r4, [sp, #0]
 8003a26:	f7ff f8cd 	bl	8002bc4 <lcdHLine2>
			for(uint16_t i = 0; i < (r-1); i++){
 8003a2a:	8abb      	ldrh	r3, [r7, #20]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	82bb      	strh	r3, [r7, #20]
 8003a30:	8aba      	ldrh	r2, [r7, #20]
 8003a32:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a36:	3b01      	subs	r3, #1
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	f6ff af2c 	blt.w	8003896 <lcdRoundedRect2+0x250>
			}
		}
	}
}
 8003a3e:	bf00      	nop
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd90      	pop	{r4, r7, pc}

08003a46 <lcdRect2>:


void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8003a46:	b590      	push	{r4, r7, lr}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af02      	add	r7, sp, #8
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	4608      	mov	r0, r1
 8003a50:	4611      	mov	r1, r2
 8003a52:	461a      	mov	r2, r3
 8003a54:	4623      	mov	r3, r4
 8003a56:	80fb      	strh	r3, [r7, #6]
 8003a58:	4603      	mov	r3, r0
 8003a5a:	80bb      	strh	r3, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	70fb      	strb	r3, [r7, #3]
 8003a60:	4613      	mov	r3, r2
 8003a62:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003a64:	88fa      	ldrh	r2, [r7, #6]
 8003a66:	88bb      	ldrh	r3, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d046      	beq.n	8003afa <lcdRect2+0xb4>
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	78bb      	ldrb	r3, [r7, #2]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d042      	beq.n	8003afa <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	73fb      	strb	r3, [r7, #15]
 8003a78:	e00d      	b.n	8003a96 <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8003a7a:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	88b9      	ldrh	r1, [r7, #4]
 8003a82:	88f8      	ldrh	r0, [r7, #6]
 8003a84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	f7ff f89a 	bl	8002bc4 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	3301      	adds	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
 8003a96:	7bfa      	ldrb	r2, [r7, #15]
 8003a98:	78bb      	ldrb	r3, [r7, #2]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d9ed      	bls.n	8003a7a <lcdRect2+0x34>
		}
		if(outline){
 8003a9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d029      	beq.n	8003afa <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8003aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	88b9      	ldrh	r1, [r7, #4]
 8003aae:	88f8      	ldrh	r0, [r7, #6]
 8003ab0:	2401      	movs	r4, #1
 8003ab2:	9400      	str	r4, [sp, #0]
 8003ab4:	f7ff f886 	bl	8002bc4 <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8003ab8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003abc:	78ba      	ldrb	r2, [r7, #2]
 8003abe:	88b9      	ldrh	r1, [r7, #4]
 8003ac0:	88f8      	ldrh	r0, [r7, #6]
 8003ac2:	2401      	movs	r4, #1
 8003ac4:	9400      	str	r4, [sp, #0]
 8003ac6:	f7ff f87d 	bl	8002bc4 <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b299      	uxth	r1, r3
 8003ad2:	78bb      	ldrb	r3, [r7, #2]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003adc:	88f8      	ldrh	r0, [r7, #6]
 8003ade:	f7fe ffef 	bl	8002ac0 <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	b299      	uxth	r1, r3
 8003aea:	78bb      	ldrb	r3, [r7, #2]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003af4:	88b8      	ldrh	r0, [r7, #4]
 8003af6:	f7fe ffe3 	bl	8002ac0 <lcdVLine>
		}
	}
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd90      	pop	{r4, r7, pc}

08003b02 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b0a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b0e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d013      	beq.n	8003b42 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003b1a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b1e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003b22:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003b2a:	e000      	b.n	8003b2e <ITM_SendChar+0x2c>
    {
      __NOP();
 8003b2c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003b2e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f9      	beq.n	8003b2c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003b38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003b42:	687b      	ldr	r3, [r7, #4]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff ffd1 	bl	8003b02 <ITM_SendChar>
	return(ch);
 8003b60:	687b      	ldr	r3, [r7, #4]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <setTimeout>:

uint8_t timeoutState = 0;
uint16_t timeoutValue;
uint16_t timeoutSetpoint;
void (*timeoutClbkPtr)(void);
void setTimeout(uint16_t ms,  void (*callback)(void)){
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	6039      	str	r1, [r7, #0]
 8003b76:	80fb      	strh	r3, [r7, #6]
	// set timeout setpoint
	timeoutSetpoint = ms;
 8003b78:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <setTimeout+0x30>)
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	8013      	strh	r3, [r2, #0]
	// reset timeout value
	timeoutValue = 0;
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <setTimeout+0x34>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	801a      	strh	r2, [r3, #0]
	// set callback function
	timeoutClbkPtr = callback;
 8003b84:	4a07      	ldr	r2, [pc, #28]	; (8003ba4 <setTimeout+0x38>)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6013      	str	r3, [r2, #0]
	// flag timeout running
	timeoutState = 1;
 8003b8a:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <setTimeout+0x3c>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	701a      	strb	r2, [r3, #0]
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	20005730 	.word	0x20005730
 8003ba0:	2000572e 	.word	0x2000572e
 8003ba4:	20005734 	.word	0x20005734
 8003ba8:	2000572d 	.word	0x2000572d

08003bac <showAlert>:

uint8_t alertFlag = 0;
void showAlert(void){
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af04      	add	r7, sp, #16
	lcdRect2(50, 350, 50, 190, 3, 0, 1);
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	9302      	str	r3, [sp, #8]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	2303      	movs	r3, #3
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	23be      	movs	r3, #190	; 0xbe
 8003bc0:	2232      	movs	r2, #50	; 0x32
 8003bc2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003bc6:	2032      	movs	r0, #50	; 0x32
 8003bc8:	f7ff ff3d 	bl	8003a46 <lcdRect2>
	lcdPutStr(90, 90, "Alert!", zekton24font);
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <showAlert+0x34>)
 8003bce:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <showAlert+0x38>)
 8003bd0:	215a      	movs	r1, #90	; 0x5a
 8003bd2:	205a      	movs	r0, #90	; 0x5a
 8003bd4:	f7fe ff46 	bl	8002a64 <lcdPutStr>
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	080139e4 	.word	0x080139e4
 8003be4:	08013544 	.word	0x08013544

08003be8 <hideAlert>:
void hideAlert(void){
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	alertFlag = 0;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <hideAlert+0x14>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	20005738 	.word	0x20005738

08003c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 8003c06:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c08:	f002 fae2 	bl	80061d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c0c:	f000 f906 	bl	8003e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c10:	f7fe f9e8 	bl	8001fe4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003c14:	f001 f922 	bl	8004e5c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003c18:	f000 fb34 	bl	8004284 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003c1c:	f000 febe 	bl	800499c <MX_TIM1_Init>
  MX_TIM10_Init();
 8003c20:	f000 ff5e 	bl	8004ae0 <MX_TIM10_Init>
  MX_I2C1_Init();
 8003c24:	f7fe fc94 	bl	8002550 <MX_I2C1_Init>
  MX_TIM11_Init();
 8003c28:	f000 ff7e 	bl	8004b28 <MX_TIM11_Init>
  MX_RTC_Init();
 8003c2c:	f000 fa48 	bl	80040c0 <MX_RTC_Init>
  MX_TIM13_Init();
 8003c30:	f000 ff9e 	bl	8004b70 <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 8003c34:	f000 fa9e 	bl	8004174 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003c38:	f008 fca4 	bl	800c584 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8003c3c:	f001 f938 	bl	8004eb0 <MX_USART6_UART_Init>
  MX_TIM14_Init();
 8003c40:	f000 ffba 	bl	8004bb8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8003c44:	485b      	ldr	r0, [pc, #364]	; (8003db4 <main+0x1b4>)
 8003c46:	f006 f97b 	bl	8009f40 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8003c4a:	485a      	ldr	r0, [pc, #360]	; (8003db4 <main+0x1b4>)
 8003c4c:	f006 f9c8 	bl	8009fe0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003c50:	2100      	movs	r1, #0
 8003c52:	4858      	ldr	r0, [pc, #352]	; (8003db4 <main+0x1b4>)
 8003c54:	f006 fabc 	bl	800a1d0 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 (1Hz) - for stopwatch
  stwInit(&htim10);
 8003c58:	4857      	ldr	r0, [pc, #348]	; (8003db8 <main+0x1b8>)
 8003c5a:	f000 fd8d 	bl	8004778 <stwInit>
  // Vibration motor PWM
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8003c5e:	2100      	movs	r1, #0
 8003c60:	4856      	ldr	r0, [pc, #344]	; (8003dbc <main+0x1bc>)
 8003c62:	f006 fab5 	bl	800a1d0 <HAL_TIM_PWM_Start>

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 8003c66:	4856      	ldr	r0, [pc, #344]	; (8003dc0 <main+0x1c0>)
 8003c68:	f006 f9ba 	bl	8009fe0 <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 8003c6c:	4855      	ldr	r0, [pc, #340]	; (8003dc4 <main+0x1c4>)
 8003c6e:	f7fd ff93 	bl	8001b98 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 8003c72:	4855      	ldr	r0, [pc, #340]	; (8003dc8 <main+0x1c8>)
 8003c74:	f006 f9b4 	bl	8009fe0 <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 8003c78:	4c54      	ldr	r4, [pc, #336]	; (8003dcc <main+0x1cc>)
 8003c7a:	463b      	mov	r3, r7
 8003c7c:	4954      	ldr	r1, [pc, #336]	; (8003dd0 <main+0x1d0>)
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fac0 	bl	8002204 <initGps>
 8003c84:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003c88:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f44f 7319 	mov.w	r3, #612	; 0x264
 8003c94:	461a      	mov	r2, r3
 8003c96:	f00b fc03 	bl	800f4a0 <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8003c9a:	484e      	ldr	r0, [pc, #312]	; (8003dd4 <main+0x1d4>)
 8003c9c:	f7fd fcbc 	bl	8001618 <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 8003ca0:	f240 118f 	movw	r1, #399	; 0x18f
 8003ca4:	484c      	ldr	r0, [pc, #304]	; (8003dd8 <main+0x1d8>)
 8003ca6:	f002 f985 	bl	8005fb4 <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 8003caa:	f240 128f 	movw	r2, #399	; 0x18f
 8003cae:	2102      	movs	r1, #2
 8003cb0:	484a      	ldr	r0, [pc, #296]	; (8003ddc <main+0x1dc>)
 8003cb2:	f002 f8e3 	bl	8005e7c <cbuf_init>

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cbc:	4848      	ldr	r0, [pc, #288]	; (8003de0 <main+0x1e0>)
 8003cbe:	f002 fe79 	bl	80069b4 <HAL_GPIO_WritePin>
  	Mount_SD("/");
 8003cc2:	4848      	ldr	r0, [pc, #288]	; (8003de4 <main+0x1e4>)
 8003cc4:	f7fd f988 	bl	8000fd8 <Mount_SD>
  	Create_File("FILE1.TXT");
 8003cc8:	4847      	ldr	r0, [pc, #284]	; (8003de8 <main+0x1e8>)
 8003cca:	f7fd fa53 	bl	8001174 <Create_File>
  	Update_File("FILE1.TXT", "Hello world, SD cart write \n");
 8003cce:	4947      	ldr	r1, [pc, #284]	; (8003dec <main+0x1ec>)
 8003cd0:	4845      	ldr	r0, [pc, #276]	; (8003de8 <main+0x1e8>)
 8003cd2:	f7fd fadb 	bl	800128c <Update_File>
  	Create_File("FILE4.TXT");
 8003cd6:	4846      	ldr	r0, [pc, #280]	; (8003df0 <main+0x1f0>)
 8003cd8:	f7fd fa4c 	bl	8001174 <Create_File>
  	char fileText[50];
  	Read_File("config.txt", &fileText);
 8003cdc:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4844      	ldr	r0, [pc, #272]	; (8003df4 <main+0x1f4>)
 8003ce4:	f7fd f994 	bl	8001010 <Read_File>

  	// log state after reset
  	HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003ce8:	2200      	movs	r2, #0
 8003cea:	4943      	ldr	r1, [pc, #268]	; (8003df8 <main+0x1f8>)
 8003cec:	4843      	ldr	r0, [pc, #268]	; (8003dfc <main+0x1fc>)
 8003cee:	f004 fdc1 	bl	8008874 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4942      	ldr	r1, [pc, #264]	; (8003e00 <main+0x200>)
 8003cf6:	4841      	ldr	r0, [pc, #260]	; (8003dfc <main+0x1fc>)
 8003cf8:	f004 fe1a 	bl	8008930 <HAL_RTC_GetDate>
	char tmpl[50] = {0};
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8003d02:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8003d06:	222e      	movs	r2, #46	; 0x2e
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f00b fbd6 	bl	800f4bc <memset>
	sprintf(&tmpl, "%02d:%02d:%02d --- Initialized ---\n", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8003d10:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <main+0x1f8>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	4b38      	ldr	r3, [pc, #224]	; (8003df8 <main+0x1f8>)
 8003d18:	785b      	ldrb	r3, [r3, #1]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <main+0x1f8>)
 8003d1e:	789b      	ldrb	r3, [r3, #2]
 8003d20:	f507 701a 	add.w	r0, r7, #616	; 0x268
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	460b      	mov	r3, r1
 8003d28:	4936      	ldr	r1, [pc, #216]	; (8003e04 <main+0x204>)
 8003d2a:	f00c fa83 	bl	8010234 <siprintf>
	SD_logger(tmpl);
 8003d2e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fd f93a 	bl	8000fac <SD_logger>
//  	Unmount_SD("/");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 8003d38:	f7fe fcbc 	bl	80026b4 <lcdClearBuffer>
  lcdRefresh();
 8003d3c:	f7ff fc14 	bl	8003568 <lcdRefresh>
  while (1)
  {
	  // periodic execution driven by flag modified inside of timer interrupt
	  if(updateBmpData_flag){
 8003d40:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <main+0x208>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00f      	beq.n	8003d68 <main+0x168>
		bmpData = getBmpData(&bmp180module);
 8003d48:	4c30      	ldr	r4, [pc, #192]	; (8003e0c <main+0x20c>)
 8003d4a:	463b      	mov	r3, r7
 8003d4c:	4921      	ldr	r1, [pc, #132]	; (8003dd4 <main+0x1d4>)
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fd feca 	bl	8001ae8 <getBmpData>
 8003d54:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003d58:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003d5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		updateBmpData_flag = 0;
 8003d62:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <main+0x208>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
	  }
	  // functions executed along with the menu
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003d68:	2200      	movs	r2, #0
 8003d6a:	4923      	ldr	r1, [pc, #140]	; (8003df8 <main+0x1f8>)
 8003d6c:	4823      	ldr	r0, [pc, #140]	; (8003dfc <main+0x1fc>)
 8003d6e:	f004 fd81 	bl	8008874 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8003d72:	2200      	movs	r2, #0
 8003d74:	4922      	ldr	r1, [pc, #136]	; (8003e00 <main+0x200>)
 8003d76:	4821      	ldr	r0, [pc, #132]	; (8003dfc <main+0x1fc>)
 8003d78:	f004 fdda 	bl	8008930 <HAL_RTC_GetDate>
		if(RtcTime.Minutes == 0 && RtcTime.Seconds==0){
 8003d7c:	4b1e      	ldr	r3, [pc, #120]	; (8003df8 <main+0x1f8>)
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <main+0x194>
 8003d84:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <main+0x1f8>)
 8003d86:	789b      	ldrb	r3, [r3, #2]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d103      	bne.n	8003d94 <main+0x194>
			pulseVib(40, 60);
 8003d8c:	213c      	movs	r1, #60	; 0x3c
 8003d8e:	2028      	movs	r0, #40	; 0x28
 8003d90:	f001 f952 	bl	8005038 <pulseVib>
		}
	  lcdClearBuffer();
 8003d94:	f7fe fc8e 	bl	80026b4 <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 8003d98:	f7fe fbb6 	bl	8002508 <showGui>

	  if(alertFlag){
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <main+0x210>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <main+0x1ae>
		  showAlert();
 8003da4:	f7ff ff02 	bl	8003bac <showAlert>
		btn_B2.onSinglePressHandler = &hideAlert;
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <main+0x214>)
 8003daa:	4a1b      	ldr	r2, [pc, #108]	; (8003e18 <main+0x218>)
 8003dac:	611a      	str	r2, [r3, #16]

	  }

	  lcdRefresh();
 8003dae:	f7ff fbdb 	bl	8003568 <lcdRefresh>
	  if(updateBmpData_flag){
 8003db2:	e7c5      	b.n	8003d40 <main+0x140>
 8003db4:	20005934 	.word	0x20005934
 8003db8:	2000597c 	.word	0x2000597c
 8003dbc:	20005a54 	.word	0x20005a54
 8003dc0:	200059c4 	.word	0x200059c4
 8003dc4:	2000002c 	.word	0x2000002c
 8003dc8:	20005a0c 	.word	0x20005a0c
 8003dcc:	200054c8 	.word	0x200054c8
 8003dd0:	20005ae0 	.word	0x20005ae0
 8003dd4:	20002348 	.word	0x20002348
 8003dd8:	200054b8 	.word	0x200054b8
 8003ddc:	200054a4 	.word	0x200054a4
 8003de0:	40020800 	.word	0x40020800
 8003de4:	0801354c 	.word	0x0801354c
 8003de8:	08013550 	.word	0x08013550
 8003dec:	0801355c 	.word	0x0801355c
 8003df0:	0801357c 	.word	0x0801357c
 8003df4:	08013588 	.word	0x08013588
 8003df8:	2000548c 	.word	0x2000548c
 8003dfc:	2000573c 	.word	0x2000573c
 8003e00:	200054a0 	.word	0x200054a0
 8003e04:	08013594 	.word	0x08013594
 8003e08:	2000005b 	.word	0x2000005b
 8003e0c:	2000238c 	.word	0x2000238c
 8003e10:	20005738 	.word	0x20005738
 8003e14:	200024bc 	.word	0x200024bc
 8003e18:	08003be9 	.word	0x08003be9

08003e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b094      	sub	sp, #80	; 0x50
 8003e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e22:	f107 0320 	add.w	r3, r7, #32
 8003e26:	2230      	movs	r2, #48	; 0x30
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f00b fb46 	bl	800f4bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e30:	f107 030c 	add.w	r3, r7, #12
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e40:	2300      	movs	r3, #0
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <SystemClock_Config+0xd0>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	4a28      	ldr	r2, [pc, #160]	; (8003eec <SystemClock_Config+0xd0>)
 8003e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e50:	4b26      	ldr	r3, [pc, #152]	; (8003eec <SystemClock_Config+0xd0>)
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <SystemClock_Config+0xd4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a22      	ldr	r2, [pc, #136]	; (8003ef0 <SystemClock_Config+0xd4>)
 8003e66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <SystemClock_Config+0xd4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003e78:	2305      	movs	r3, #5
 8003e7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003e7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003e82:	2301      	movs	r3, #1
 8003e84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e86:	2302      	movs	r3, #2
 8003e88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003e90:	2304      	movs	r3, #4
 8003e92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003e94:	23a8      	movs	r3, #168	; 0xa8
 8003e96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003e9c:	2307      	movs	r3, #7
 8003e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ea0:	f107 0320 	add.w	r3, r7, #32
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f003 fe17 	bl	8007ad8 <HAL_RCC_OscConfig>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003eb0:	f000 f8f8 	bl	80040a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eb4:	230f      	movs	r3, #15
 8003eb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ec0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ec4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ecc:	f107 030c 	add.w	r3, r7, #12
 8003ed0:	2105      	movs	r1, #5
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f004 f878 	bl	8007fc8 <HAL_RCC_ClockConfig>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003ede:	f000 f8e1 	bl	80040a4 <Error_Handler>
  }
}
 8003ee2:	bf00      	nop
 8003ee4:	3750      	adds	r7, #80	; 0x50
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40007000 	.word	0x40007000

08003ef4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 1Hz
	// used to time stopwatch
	if(htim->Instance == TIM10){
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a49      	ldr	r2, [pc, #292]	; (8004028 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d107      	bne.n	8003f16 <HAL_TIM_PeriodElapsedCallback+0x22>
		stwTick();
 8003f06:	f000 faeb 	bl	80044e0 <stwTick>
		// animation frame tick
		animationFrameNum++;
 8003f0a:	4b48      	ldr	r3, [pc, #288]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4b46      	ldr	r3, [pc, #280]	; (800402c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003f14:	701a      	strb	r2, [r3, #0]
	}
	// APB2 168MHz -> after PSCL 100Hz
	// button polling
	if(htim->Instance == TIM11){
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a45      	ldr	r2, [pc, #276]	; (8004030 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d119      	bne.n	8003f54 <HAL_TIM_PeriodElapsedCallback+0x60>
		scanButtons(btnsPtrs);
 8003f20:	4844      	ldr	r0, [pc, #272]	; (8004034 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8003f22:	f7fe f82b 	bl	8001f7c <scanButtons>
		// check timeouts
		if(timeoutState){
 8003f26:	4b44      	ldr	r3, [pc, #272]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d012      	beq.n	8003f54 <HAL_TIM_PeriodElapsedCallback+0x60>
			if(timeoutValue == timeoutSetpoint){
 8003f2e:	4b43      	ldr	r3, [pc, #268]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003f30:	881a      	ldrh	r2, [r3, #0]
 8003f32:	4b43      	ldr	r3, [pc, #268]	; (8004040 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d106      	bne.n	8003f48 <HAL_TIM_PeriodElapsedCallback+0x54>
				(*timeoutClbkPtr)();
 8003f3a:	4b42      	ldr	r3, [pc, #264]	; (8004044 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4798      	blx	r3
				timeoutState = 0;
 8003f40:	4b3d      	ldr	r3, [pc, #244]	; (8004038 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e005      	b.n	8003f54 <HAL_TIM_PeriodElapsedCallback+0x60>
			} else {
				timeoutValue++;
 8003f48:	4b3c      	ldr	r3, [pc, #240]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	4b3a      	ldr	r3, [pc, #232]	; (800403c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003f52:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a3b      	ldr	r2, [pc, #236]	; (8004048 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d160      	bne.n	8004020 <HAL_TIM_PeriodElapsedCallback+0x12c>
		// watchface module timer value incrementing
		tickTimAAB();
 8003f5e:	f7fe f99b 	bl	8002298 <tickTimAAB>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 8003f62:	4b3a      	ldr	r3, [pc, #232]	; (800404c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003f64:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d004      	beq.n	8003f76 <HAL_TIM_PeriodElapsedCallback+0x82>
 8003f6c:	4b37      	ldr	r3, [pc, #220]	; (800404c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003f6e:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8003f72:	4836      	ldr	r0, [pc, #216]	; (800404c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003f74:	4798      	blx	r3

		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003f76:	2101      	movs	r1, #1
 8003f78:	4835      	ldr	r0, [pc, #212]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003f7a:	f002 fd34 	bl	80069e6 <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 8003f7e:	4b35      	ldr	r3, [pc, #212]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003f80:	7b1b      	ldrb	r3, [r3, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <HAL_TIM_PeriodElapsedCallback+0xae>
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f98:	ee17 1a90 	vmov	r1, s15
 8003f9c:	482d      	ldr	r0, [pc, #180]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003f9e:	f002 f83f 	bl	8006020 <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 8003fa2:	4b2d      	ldr	r3, [pc, #180]	; (8004058 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4a2d      	ldr	r2, [pc, #180]	; (800405c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	08db      	lsrs	r3, r3, #3
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 8003fb2:	4b2b      	ldr	r3, [pc, #172]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003fb4:	7c1b      	ldrb	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8003fba:	f107 030e 	add.w	r3, r7, #14
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4827      	ldr	r0, [pc, #156]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003fc2:	f001 ff98 	bl	8005ef6 <cbuf_ovw>

		tim13_counter++;
 8003fc6:	4b27      	ldr	r3, [pc, #156]	; (8004064 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	4b25      	ldr	r3, [pc, #148]	; (8004064 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003fd0:	701a      	strb	r2, [r3, #0]
		if(tim13_counter == tim13_prescaler){
 8003fd2:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d109      	bne.n	8003ff2 <HAL_TIM_PeriodElapsedCallback+0xfe>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003fde:	2180      	movs	r1, #128	; 0x80
 8003fe0:	481b      	ldr	r0, [pc, #108]	; (8004050 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003fe2:	f002 fd00 	bl	80069e6 <HAL_GPIO_TogglePin>
			// set flag up - causes to update temp/baro data to update in the main loop
			updateBmpData_flag = 1;
 8003fe6:	4b21      	ldr	r3, [pc, #132]	; (800406c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	701a      	strb	r2, [r3, #0]
//			bmpData = getBmpData(&bmp180module);
			tim13_counter = 0;
 8003fec:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
		}
		if(isTimerRunning(&countDown1)){
 8003ff2:	481f      	ldr	r0, [pc, #124]	; (8004070 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003ff4:	f7fd ffdc 	bl	8001fb0 <isTimerRunning>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d010      	beq.n	8004020 <HAL_TIM_PeriodElapsedCallback+0x12c>
			if(countDown1.remainingSec == 0){
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004000:	885b      	ldrh	r3, [r3, #2]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_TIM_PeriodElapsedCallback+0x120>
				alertFlag = 1;
 8004006:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
				pauseTimer(&countDown1);
 800400c:	4818      	ldr	r0, [pc, #96]	; (8004070 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800400e:	f7fd ffdb 	bl	8001fc8 <pauseTimer>
			} else {
				countDown1.remainingSec--;
			}
		}
	}
}
 8004012:	e005      	b.n	8004020 <HAL_TIM_PeriodElapsedCallback+0x12c>
				countDown1.remainingSec--;
 8004014:	4b16      	ldr	r3, [pc, #88]	; (8004070 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004016:	885b      	ldrh	r3, [r3, #2]
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	4b14      	ldr	r3, [pc, #80]	; (8004070 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800401e:	805a      	strh	r2, [r3, #2]
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40014400 	.word	0x40014400
 800402c:	20005b46 	.word	0x20005b46
 8004030:	40014800 	.word	0x40014800
 8004034:	2000002c 	.word	0x2000002c
 8004038:	2000572d 	.word	0x2000572d
 800403c:	2000572e 	.word	0x2000572e
 8004040:	20005730 	.word	0x20005730
 8004044:	20005734 	.word	0x20005734
 8004048:	40001c00 	.word	0x40001c00
 800404c:	200054c8 	.word	0x200054c8
 8004050:	40020400 	.word	0x40020400
 8004054:	200054b8 	.word	0x200054b8
 8004058:	2000238c 	.word	0x2000238c
 800405c:	cccccccd 	.word	0xcccccccd
 8004060:	200054a4 	.word	0x200054a4
 8004064:	2000572c 	.word	0x2000572c
 8004068:	2000005a 	.word	0x2000005a
 800406c:	2000005b 	.word	0x2000005b
 8004070:	2000005c 	.word	0x2000005c
 8004074:	20005738 	.word	0x20005738

08004078 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a05      	ldr	r2, [pc, #20]	; (800409c <HAL_UART_RxCpltCallback+0x24>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d103      	bne.n	8004092 <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	4804      	ldr	r0, [pc, #16]	; (80040a0 <HAL_UART_RxCpltCallback+0x28>)
 800408e:	f002 fcaa 	bl	80069e6 <HAL_GPIO_TogglePin>
	}
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40011400 	.word	0x40011400
 80040a0:	40020400 	.word	0x40020400

080040a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040a8:	b672      	cpsid	i
}
 80040aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80040ac:	2201      	movs	r2, #1
 80040ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040b2:	4802      	ldr	r0, [pc, #8]	; (80040bc <Error_Handler+0x18>)
 80040b4:	f002 fc7e 	bl	80069b4 <HAL_GPIO_WritePin>
  while (1)
 80040b8:	e7fe      	b.n	80040b8 <Error_Handler+0x14>
 80040ba:	bf00      	nop
 80040bc:	40020400 	.word	0x40020400

080040c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	60da      	str	r2, [r3, #12]
 80040d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80040d4:	2300      	movs	r3, #0
 80040d6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <MX_RTC_Init+0x58>)
 80040da:	4a10      	ldr	r2, [pc, #64]	; (800411c <MX_RTC_Init+0x5c>)
 80040dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80040de:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <MX_RTC_Init+0x58>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <MX_RTC_Init+0x58>)
 80040e6:	227f      	movs	r2, #127	; 0x7f
 80040e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <MX_RTC_Init+0x58>)
 80040ec:	22ff      	movs	r2, #255	; 0xff
 80040ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <MX_RTC_Init+0x58>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80040f6:	4b08      	ldr	r3, [pc, #32]	; (8004118 <MX_RTC_Init+0x58>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <MX_RTC_Init+0x58>)
 80040fe:	2200      	movs	r2, #0
 8004100:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004102:	4805      	ldr	r0, [pc, #20]	; (8004118 <MX_RTC_Init+0x58>)
 8004104:	f004 fb40 	bl	8008788 <HAL_RTC_Init>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800410e:	f7ff ffc9 	bl	80040a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	2000573c 	.word	0x2000573c
 800411c:	40002800 	.word	0x40002800

08004120 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08e      	sub	sp, #56	; 0x38
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004128:	f107 0308 	add.w	r3, r7, #8
 800412c:	2230      	movs	r2, #48	; 0x30
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f00b f9c3 	bl	800f4bc <memset>
  if(rtcHandle->Instance==RTC)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a0c      	ldr	r2, [pc, #48]	; (800416c <HAL_RTC_MspInit+0x4c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d111      	bne.n	8004164 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004140:	2320      	movs	r3, #32
 8004142:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004148:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800414a:	f107 0308 	add.w	r3, r7, #8
 800414e:	4618      	mov	r0, r3
 8004150:	f004 f95a 	bl	8008408 <HAL_RCCEx_PeriphCLKConfig>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800415a:	f7ff ffa3 	bl	80040a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <HAL_RTC_MspInit+0x50>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004164:	bf00      	nop
 8004166:	3738      	adds	r7, #56	; 0x38
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40002800 	.word	0x40002800
 8004170:	42470e3c 	.word	0x42470e3c

08004174 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <MX_SDIO_SD_Init+0x38>)
 800417a:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <MX_SDIO_SD_Init+0x3c>)
 800417c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <MX_SDIO_SD_Init+0x38>)
 8004180:	2200      	movs	r2, #0
 8004182:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <MX_SDIO_SD_Init+0x38>)
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <MX_SDIO_SD_Init+0x38>)
 800418c:	2200      	movs	r2, #0
 800418e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <MX_SDIO_SD_Init+0x38>)
 8004192:	2200      	movs	r2, #0
 8004194:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <MX_SDIO_SD_Init+0x38>)
 8004198:	2200      	movs	r2, #0
 800419a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 800419c:	4b03      	ldr	r3, [pc, #12]	; (80041ac <MX_SDIO_SD_Init+0x38>)
 800419e:	2204      	movs	r2, #4
 80041a0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80041a2:	bf00      	nop
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	2000575c 	.word	0x2000575c
 80041b0:	40012c00 	.word	0x40012c00

080041b4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	; 0x28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041bc:	f107 0314 	add.w	r3, r7, #20
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	605a      	str	r2, [r3, #4]
 80041c6:	609a      	str	r2, [r3, #8]
 80041c8:	60da      	str	r2, [r3, #12]
 80041ca:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a28      	ldr	r2, [pc, #160]	; (8004274 <HAL_SD_MspInit+0xc0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d14a      	bne.n	800426c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_SD_MspInit+0xc4>)
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	4a26      	ldr	r2, [pc, #152]	; (8004278 <HAL_SD_MspInit+0xc4>)
 80041e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041e4:	6453      	str	r3, [r2, #68]	; 0x44
 80041e6:	4b24      	ldr	r3, [pc, #144]	; (8004278 <HAL_SD_MspInit+0xc4>)
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_SD_MspInit+0xc4>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <HAL_SD_MspInit+0xc4>)
 80041fc:	f043 0304 	orr.w	r3, r3, #4
 8004200:	6313      	str	r3, [r2, #48]	; 0x30
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_SD_MspInit+0xc4>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	4b19      	ldr	r3, [pc, #100]	; (8004278 <HAL_SD_MspInit+0xc4>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_SD_MspInit+0xc4>)
 8004218:	f043 0308 	orr.w	r3, r3, #8
 800421c:	6313      	str	r3, [r2, #48]	; 0x30
 800421e:	4b16      	ldr	r3, [pc, #88]	; (8004278 <HAL_SD_MspInit+0xc4>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800422a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800422e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004230:	2302      	movs	r3, #2
 8004232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004238:	2303      	movs	r3, #3
 800423a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800423c:	230c      	movs	r3, #12
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004240:	f107 0314 	add.w	r3, r7, #20
 8004244:	4619      	mov	r1, r3
 8004246:	480d      	ldr	r0, [pc, #52]	; (800427c <HAL_SD_MspInit+0xc8>)
 8004248:	f002 f9f0 	bl	800662c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800424c:	2304      	movs	r3, #4
 800424e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004250:	2302      	movs	r3, #2
 8004252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004258:	2303      	movs	r3, #3
 800425a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800425c:	230c      	movs	r3, #12
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	4619      	mov	r1, r3
 8004266:	4806      	ldr	r0, [pc, #24]	; (8004280 <HAL_SD_MspInit+0xcc>)
 8004268:	f002 f9e0 	bl	800662c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800426c:	bf00      	nop
 800426e:	3728      	adds	r7, #40	; 0x28
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40023800 	.word	0x40023800
 800427c:	40020800 	.word	0x40020800
 8004280:	40020c00 	.word	0x40020c00

08004284 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004288:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <MX_SPI1_Init+0x64>)
 800428a:	4a18      	ldr	r2, [pc, #96]	; (80042ec <MX_SPI1_Init+0x68>)
 800428c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800428e:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <MX_SPI1_Init+0x64>)
 8004290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <MX_SPI1_Init+0x64>)
 8004298:	2200      	movs	r2, #0
 800429a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800429c:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <MX_SPI1_Init+0x64>)
 800429e:	2200      	movs	r2, #0
 80042a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042a2:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <MX_SPI1_Init+0x64>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <MX_SPI1_Init+0x64>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <MX_SPI1_Init+0x64>)
 80042b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80042b6:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <MX_SPI1_Init+0x64>)
 80042b8:	2220      	movs	r2, #32
 80042ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <MX_SPI1_Init+0x64>)
 80042be:	2200      	movs	r2, #0
 80042c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <MX_SPI1_Init+0x64>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <MX_SPI1_Init+0x64>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <MX_SPI1_Init+0x64>)
 80042d0:	220a      	movs	r2, #10
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80042d4:	4804      	ldr	r0, [pc, #16]	; (80042e8 <MX_SPI1_Init+0x64>)
 80042d6:	f005 fba3 	bl	8009a20 <HAL_SPI_Init>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80042e0:	f7ff fee0 	bl	80040a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80042e4:	bf00      	nop
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	200057e0 	.word	0x200057e0
 80042ec:	40013000 	.word	0x40013000

080042f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f8:	f107 0314 	add.w	r3, r7, #20
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	605a      	str	r2, [r3, #4]
 8004302:	609a      	str	r2, [r3, #8]
 8004304:	60da      	str	r2, [r3, #12]
 8004306:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a19      	ldr	r2, [pc, #100]	; (8004374 <HAL_SPI_MspInit+0x84>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d12b      	bne.n	800436a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <HAL_SPI_MspInit+0x88>)
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	4a17      	ldr	r2, [pc, #92]	; (8004378 <HAL_SPI_MspInit+0x88>)
 800431c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004320:	6453      	str	r3, [r2, #68]	; 0x44
 8004322:	4b15      	ldr	r3, [pc, #84]	; (8004378 <HAL_SPI_MspInit+0x88>)
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	4b11      	ldr	r3, [pc, #68]	; (8004378 <HAL_SPI_MspInit+0x88>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	4a10      	ldr	r2, [pc, #64]	; (8004378 <HAL_SPI_MspInit+0x88>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6313      	str	r3, [r2, #48]	; 0x30
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <HAL_SPI_MspInit+0x88>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800434a:	23a0      	movs	r3, #160	; 0xa0
 800434c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434e:	2302      	movs	r3, #2
 8004350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004356:	2303      	movs	r3, #3
 8004358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800435a:	2305      	movs	r3, #5
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800435e:	f107 0314 	add.w	r3, r7, #20
 8004362:	4619      	mov	r1, r3
 8004364:	4805      	ldr	r0, [pc, #20]	; (800437c <HAL_SPI_MspInit+0x8c>)
 8004366:	f002 f961 	bl	800662c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800436a:	bf00      	nop
 800436c:	3728      	adds	r7, #40	; 0x28
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40013000 	.word	0x40013000
 8004378:	40023800 	.word	0x40023800
 800437c:	40020000 	.word	0x40020000

08004380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	607b      	str	r3, [r7, #4]
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_MspInit+0x4c>)
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	4a0f      	ldr	r2, [pc, #60]	; (80043cc <HAL_MspInit+0x4c>)
 8004390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004394:	6453      	str	r3, [r2, #68]	; 0x44
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <HAL_MspInit+0x4c>)
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	4b09      	ldr	r3, [pc, #36]	; (80043cc <HAL_MspInit+0x4c>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	4a08      	ldr	r2, [pc, #32]	; (80043cc <HAL_MspInit+0x4c>)
 80043ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6413      	str	r3, [r2, #64]	; 0x40
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_MspInit+0x4c>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40023800 	.word	0x40023800

080043d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043d4:	e7fe      	b.n	80043d4 <NMI_Handler+0x4>

080043d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 80043da:	f7ff fe63 	bl	80040a4 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043de:	e7fe      	b.n	80043de <HardFault_Handler+0x8>

080043e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043e4:	e7fe      	b.n	80043e4 <MemManage_Handler+0x4>

080043e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043e6:	b480      	push	{r7}
 80043e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043ea:	e7fe      	b.n	80043ea <BusFault_Handler+0x4>

080043ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043f0:	e7fe      	b.n	80043f0 <UsageFault_Handler+0x4>

080043f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043f2:	b480      	push	{r7}
 80043f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800440e:	b480      	push	{r7}
 8004410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004412:	bf00      	nop
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004420:	f001 ff28 	bl	8006274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004424:	bf00      	nop
 8004426:	bd80      	pop	{r7, pc}

08004428 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800442c:	4803      	ldr	r0, [pc, #12]	; (800443c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800442e:	f005 ff97 	bl	800a360 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004432:	4803      	ldr	r0, [pc, #12]	; (8004440 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004434:	f005 ff94 	bl	800a360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004438:	bf00      	nop
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20005934 	.word	0x20005934
 8004440:	2000597c 	.word	0x2000597c

08004444 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004448:	4803      	ldr	r0, [pc, #12]	; (8004458 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800444a:	f005 ff89 	bl	800a360 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800444e:	4803      	ldr	r0, [pc, #12]	; (800445c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004450:	f005 ff86 	bl	800a360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004454:	bf00      	nop
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20005934 	.word	0x20005934
 800445c:	200059c4 	.word	0x200059c4

08004460 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 8004464:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004468:	f002 fad8 	bl	8006a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 800446c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004470:	f002 fad4 	bl	8006a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004474:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004478:	f002 fad0 	bl	8006a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 800447c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004480:	f002 facc 	bl	8006a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8004484:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004488:	f002 fac8 	bl	8006a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 800448c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004490:	f002 fac4 	bl	8006a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004494:	bf00      	nop
 8004496:	bd80      	pop	{r7, pc}

08004498 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800449c:	4802      	ldr	r0, [pc, #8]	; (80044a8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800449e:	f005 ff5f 	bl	800a360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20005a0c 	.word	0x20005a0c

080044ac <getLapNum>:
stw_t stwS = {&currentStw, STW_STATE_DISABLED};

stw_counter_t stw_splits[STW_SPLIT_MAX_NUM];
uint8_t snap_number = 1;

uint8_t getLapNum(void){
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
	return snap_number;
 80044b0:	4b03      	ldr	r3, [pc, #12]	; (80044c0 <getLapNum+0x14>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	2000006c 	.word	0x2000006c

080044c4 <stwStart>:
//		return diff;
//	}
//}

// activate stopwatch and it's timer
void stwStart(void){
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_ENABLED;
 80044c8:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <stwStart+0x14>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	711a      	strb	r2, [r3, #4]
	  HAL_TIM_Base_Start_IT(&htim10);
 80044ce:	4803      	ldr	r0, [pc, #12]	; (80044dc <stwStart+0x18>)
 80044d0:	f005 fd86 	bl	8009fe0 <HAL_TIM_Base_Start_IT>
}
 80044d4:	bf00      	nop
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20000064 	.word	0x20000064
 80044dc:	2000597c 	.word	0x2000597c

080044e0 <stwTick>:
void stwTick(void){
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
	if(stwS.state){
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <stwTick+0x20>)
 80044e6:	791b      	ldrb	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <stwTick+0x16>
		(stwS.cnt->sec)++;
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <stwTick+0x20>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	3201      	adds	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
	}
}
 80044f6:	bf00      	nop
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000064 	.word	0x20000064

08004504 <stwStop>:
void stwStop(void){
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 8004508:	4b03      	ldr	r3, [pc, #12]	; (8004518 <stwStop+0x14>)
 800450a:	2200      	movs	r2, #0
 800450c:	711a      	strb	r2, [r3, #4]
	  HAL_TIM_Base_Stop_IT(&htim10);
 800450e:	4803      	ldr	r0, [pc, #12]	; (800451c <stwStop+0x18>)
 8004510:	f005 fdd6 	bl	800a0c0 <HAL_TIM_Base_Stop_IT>

}
 8004514:	bf00      	nop
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000064 	.word	0x20000064
 800451c:	2000597c 	.word	0x2000597c

08004520 <stwClear>:
void stwClear(void){
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8004524:	4b08      	ldr	r3, [pc, #32]	; (8004548 <stwClear+0x28>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2200      	movs	r2, #0
 800452a:	625a      	str	r2, [r3, #36]	; 0x24
	stwS.cnt->sec = 0;
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <stwClear+0x2c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
	memset(stw_splits, 0, sizeof stw_splits);
 8004534:	22f0      	movs	r2, #240	; 0xf0
 8004536:	2100      	movs	r1, #0
 8004538:	4805      	ldr	r0, [pc, #20]	; (8004550 <stwClear+0x30>)
 800453a:	f00a ffbf 	bl	800f4bc <memset>
	snap_number = 1;
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <stwClear+0x34>)
 8004540:	2201      	movs	r2, #1
 8004542:	701a      	strb	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	bd80      	pop	{r7, pc}
 8004548:	2000597c 	.word	0x2000597c
 800454c:	20000064 	.word	0x20000064
 8004550:	20005840 	.word	0x20005840
 8004554:	2000006c 	.word	0x2000006c

08004558 <getStw>:

void getStw(struct stopwatch_t* stw_ptr, stw_t* stwS){
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
		stw_ptr->hours = stwS->cnt->sec/(60*60);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a23      	ldr	r2, [pc, #140]	; (80045f8 <getStw+0xa0>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	0adb      	lsrs	r3, r3, #11
 8004570:	b2da      	uxtb	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	701a      	strb	r2, [r3, #0]
		stw_ptr->min = stwS->cnt->sec%(60*60)/(60);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <getStw+0xa0>)
 800457e:	fba3 1302 	umull	r1, r3, r3, r2
 8004582:	0adb      	lsrs	r3, r3, #11
 8004584:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	4a1b      	ldr	r2, [pc, #108]	; (80045fc <getStw+0xa4>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	b2da      	uxtb	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	705a      	strb	r2, [r3, #1]
		stw_ptr->sec = stwS->cnt->sec%60;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	4b16      	ldr	r3, [pc, #88]	; (80045fc <getStw+0xa4>)
 80045a4:	fba3 2301 	umull	r2, r3, r3, r1
 80045a8:	095a      	lsrs	r2, r3, #5
 80045aa:	4613      	mov	r3, r2
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	1aca      	subs	r2, r1, r3
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	709a      	strb	r2, [r3, #2]
		stw_ptr->csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 80045ba:	4b11      	ldr	r3, [pc, #68]	; (8004600 <getStw+0xa8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	4a10      	ldr	r2, [pc, #64]	; (8004604 <getStw+0xac>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	70da      	strb	r2, [r3, #3]
		// update .00 second counter in stw struct
		stwS->cnt->csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 80045d2:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <getStw+0xa8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	b29a      	uxth	r2, r3
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4909      	ldr	r1, [pc, #36]	; (8004604 <getStw+0xac>)
 80045e0:	fba1 1202 	umull	r1, r2, r1, r2
 80045e4:	0952      	lsrs	r2, r2, #5
 80045e6:	b292      	uxth	r2, r2
 80045e8:	809a      	strh	r2, [r3, #4]

}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	91a2b3c5 	.word	0x91a2b3c5
 80045fc:	88888889 	.word	0x88888889
 8004600:	2000597c 	.word	0x2000597c
 8004604:	51eb851f 	.word	0x51eb851f

08004608 <stwSave>:



// stopwatch snapshot
void stwSave(void){
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
	if(snap_number < STW_SPLIT_MAX_NUM){
 800460c:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <stwSave+0x70>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b1d      	cmp	r3, #29
 8004612:	d82b      	bhi.n	800466c <stwSave+0x64>
		stw_splits[snap_number].sec = stwS.cnt->sec;
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <stwSave+0x74>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a17      	ldr	r2, [pc, #92]	; (8004678 <stwSave+0x70>)
 800461a:	7812      	ldrb	r2, [r2, #0]
 800461c:	4611      	mov	r1, r2
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a17      	ldr	r2, [pc, #92]	; (8004680 <stwSave+0x78>)
 8004622:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
		stwS.cnt->csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 8004626:	4b17      	ldr	r3, [pc, #92]	; (8004684 <stwSave+0x7c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	b29a      	uxth	r2, r3
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <stwSave+0x74>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4915      	ldr	r1, [pc, #84]	; (8004688 <stwSave+0x80>)
 8004634:	fba1 1202 	umull	r1, r2, r1, r2
 8004638:	0952      	lsrs	r2, r2, #5
 800463a:	b292      	uxth	r2, r2
 800463c:	809a      	strh	r2, [r3, #4]
		stw_splits[snap_number].csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 800463e:	4b11      	ldr	r3, [pc, #68]	; (8004684 <stwSave+0x7c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	b29b      	uxth	r3, r3
 8004646:	4a0c      	ldr	r2, [pc, #48]	; (8004678 <stwSave+0x70>)
 8004648:	7812      	ldrb	r2, [r2, #0]
 800464a:	4610      	mov	r0, r2
 800464c:	4a0e      	ldr	r2, [pc, #56]	; (8004688 <stwSave+0x80>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	b299      	uxth	r1, r3
 8004656:	4a0a      	ldr	r2, [pc, #40]	; (8004680 <stwSave+0x78>)
 8004658:	00c3      	lsls	r3, r0, #3
 800465a:	4413      	add	r3, r2
 800465c:	460a      	mov	r2, r1
 800465e:	809a      	strh	r2, [r3, #4]
		snap_number++;
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <stwSave+0x70>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	b2da      	uxtb	r2, r3
 8004668:	4b03      	ldr	r3, [pc, #12]	; (8004678 <stwSave+0x70>)
 800466a:	701a      	strb	r2, [r3, #0]
	}
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	2000006c 	.word	0x2000006c
 800467c:	20000064 	.word	0x20000064
 8004680:	20005840 	.word	0x20005840
 8004684:	2000597c 	.word	0x2000597c
 8004688:	51eb851f 	.word	0x51eb851f

0800468c <counterDiff>:

void counterDiff(stw_counter_t* result, stw_counter_t* cnt1, stw_counter_t* cnt2){
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
//		if(diff > 100){
//		result->csec = diff+100;
//	} else {
//		result->csec = diff;
//	}
		result->sec = (cnt1->sec*100+cnt1->csec-cnt2->sec*100-cnt2->csec)/100;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2264      	movs	r2, #100	; 0x64
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	8892      	ldrh	r2, [r2, #4]
 80046a6:	441a      	add	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2164      	movs	r1, #100	; 0x64
 80046ae:	fb01 f303 	mul.w	r3, r1, r3
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	8892      	ldrh	r2, [r2, #4]
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	4a0f      	ldr	r2, [pc, #60]	; (80046f8 <counterDiff+0x6c>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	095a      	lsrs	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	601a      	str	r2, [r3, #0]
		uint16_t diff = cnt1->csec-cnt2->csec;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	889a      	ldrh	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	889b      	ldrh	r3, [r3, #4]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	82fb      	strh	r3, [r7, #22]
		if(diff > 100){
 80046d2:	8afb      	ldrh	r3, [r7, #22]
 80046d4:	2b64      	cmp	r3, #100	; 0x64
 80046d6:	d905      	bls.n	80046e4 <counterDiff+0x58>
			result->csec = diff+100;
 80046d8:	8afb      	ldrh	r3, [r7, #22]
 80046da:	3364      	adds	r3, #100	; 0x64
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	809a      	strh	r2, [r3, #4]
		} else {
			result->csec = diff;
		}
}
 80046e2:	e002      	b.n	80046ea <counterDiff+0x5e>
			result->csec = diff;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8afa      	ldrh	r2, [r7, #22]
 80046e8:	809a      	strh	r2, [r3, #4]
}
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	51eb851f 	.word	0x51eb851f

080046fc <counterToStopwatch>:

// transform counter info into hh/mm/ss/cs struct
void counterToStopwatch(struct stopwatch_t* output, stw_counter_t* counter){
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	output->hours = counter->sec/(60*60);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a19      	ldr	r2, [pc, #100]	; (8004770 <counterToStopwatch+0x74>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	0adb      	lsrs	r3, r3, #11
 8004712:	b2da      	uxtb	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	701a      	strb	r2, [r3, #0]
	output->min = counter->sec%(60*60)/(60);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b14      	ldr	r3, [pc, #80]	; (8004770 <counterToStopwatch+0x74>)
 800471e:	fba3 1302 	umull	r1, r3, r3, r2
 8004722:	0adb      	lsrs	r3, r3, #11
 8004724:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	4a11      	ldr	r2, [pc, #68]	; (8004774 <counterToStopwatch+0x78>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	b2da      	uxtb	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	705a      	strb	r2, [r3, #1]
	output->sec = counter->sec%60;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6819      	ldr	r1, [r3, #0]
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <counterToStopwatch+0x78>)
 8004742:	fba3 2301 	umull	r2, r3, r3, r1
 8004746:	095a      	lsrs	r2, r3, #5
 8004748:	4613      	mov	r3, r2
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	1aca      	subs	r2, r1, r3
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	709a      	strb	r2, [r3, #2]
	output->csec = counter->csec;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	889b      	ldrh	r3, [r3, #4]
 800475c:	b2da      	uxtb	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	70da      	strb	r2, [r3, #3]
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	91a2b3c5 	.word	0x91a2b3c5
 8004774:	88888889 	.word	0x88888889

08004778 <stwInit>:


void stwInit(TIM_HandleTypeDef* htim){
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	// initialize timer
	// start/stop/reset routine to fix bug:
	//BUG: first stopwatch start after reset causes timer to jump 1 second forward
	  HAL_TIM_Base_Init(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f005 fbdd 	bl	8009f40 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start_IT(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f005 fc2a 	bl	8009fe0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Stop_IT(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f005 fc97 	bl	800a0c0 <HAL_TIM_Base_Stop_IT>
	  __HAL_TIM_SET_COUNTER(htim, 0);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2200      	movs	r2, #0
 8004798:	625a      	str	r2, [r3, #36]	; 0x24
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <stwprintf>:

void stwprintf(char* outputString, struct stopwatch_t* stw_time){
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
	if(stw_time->hours > 0){
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00e      	beq.n	80047d4 <stwprintf+0x30>
		sprintf(outputString, "%02dh %02d'%02d\"", stw_time->hours, stw_time->min, stw_time->sec);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	785b      	ldrb	r3, [r3, #1]
 80047c0:	4619      	mov	r1, r3
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	789b      	ldrb	r3, [r3, #2]
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	460b      	mov	r3, r1
 80047ca:	490b      	ldr	r1, [pc, #44]	; (80047f8 <stwprintf+0x54>)
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f00b fd31 	bl	8010234 <siprintf>
	} else {
		sprintf(outputString, "%02d'%02d.%02d\"", stw_time->min, stw_time->sec, stw_time->csec);
	}
}
 80047d2:	e00d      	b.n	80047f0 <stwprintf+0x4c>
		sprintf(outputString, "%02d'%02d.%02d\"", stw_time->min, stw_time->sec, stw_time->csec);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	785b      	ldrb	r3, [r3, #1]
 80047d8:	461a      	mov	r2, r3
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	789b      	ldrb	r3, [r3, #2]
 80047de:	4619      	mov	r1, r3
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	78db      	ldrb	r3, [r3, #3]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	460b      	mov	r3, r1
 80047e8:	4904      	ldr	r1, [pc, #16]	; (80047fc <stwprintf+0x58>)
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f00b fd22 	bl	8010234 <siprintf>
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	080135b8 	.word	0x080135b8
 80047fc:	080135cc 	.word	0x080135cc

08004800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
	return 1;
 8004804:	2301      	movs	r3, #1
}
 8004806:	4618      	mov	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <_kill>:

int _kill(int pid, int sig)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800481a:	f00a fdf5 	bl	800f408 <__errno>
 800481e:	4603      	mov	r3, r0
 8004820:	2216      	movs	r2, #22
 8004822:	601a      	str	r2, [r3, #0]
	return -1;
 8004824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <_exit>:

void _exit (int status)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004838:	f04f 31ff 	mov.w	r1, #4294967295
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff ffe7 	bl	8004810 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004842:	e7fe      	b.n	8004842 <_exit+0x12>

08004844 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e00a      	b.n	800486c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004856:	f3af 8000 	nop.w
 800485a:	4601      	mov	r1, r0
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	60ba      	str	r2, [r7, #8]
 8004862:	b2ca      	uxtb	r2, r1
 8004864:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	3301      	adds	r3, #1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	dbf0      	blt.n	8004856 <_read+0x12>
	}

return len;
 8004874:	687b      	ldr	r3, [r7, #4]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b086      	sub	sp, #24
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e009      	b.n	80048a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	60ba      	str	r2, [r7, #8]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff f959 	bl	8003b50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	3301      	adds	r3, #1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	dbf1      	blt.n	8004890 <_write+0x12>
	}
	return len;
 80048ac:	687b      	ldr	r3, [r7, #4]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <_close>:

int _close(int file)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
	return -1;
 80048be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048de:	605a      	str	r2, [r3, #4]
	return 0;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <_isatty>:

int _isatty(int file)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
	return 1;
 80048f6:	2301      	movs	r3, #1
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
	return 0;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004928:	4b11      	ldr	r3, [pc, #68]	; (8004970 <_sbrk+0x50>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <_sbrk+0x16>
		heap_end = &end;
 8004930:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <_sbrk+0x50>)
 8004932:	4a10      	ldr	r2, [pc, #64]	; (8004974 <_sbrk+0x54>)
 8004934:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004936:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <_sbrk+0x50>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800493c:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <_sbrk+0x50>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4413      	add	r3, r2
 8004944:	466a      	mov	r2, sp
 8004946:	4293      	cmp	r3, r2
 8004948:	d907      	bls.n	800495a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800494a:	f00a fd5d 	bl	800f408 <__errno>
 800494e:	4603      	mov	r3, r0
 8004950:	220c      	movs	r2, #12
 8004952:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004954:	f04f 33ff 	mov.w	r3, #4294967295
 8004958:	e006      	b.n	8004968 <_sbrk+0x48>
	}

	heap_end += incr;
 800495a:	4b05      	ldr	r3, [pc, #20]	; (8004970 <_sbrk+0x50>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4413      	add	r3, r2
 8004962:	4a03      	ldr	r2, [pc, #12]	; (8004970 <_sbrk+0x50>)
 8004964:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20005930 	.word	0x20005930
 8004974:	20005ba0 	.word	0x20005ba0

08004978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800497c:	4b06      	ldr	r3, [pc, #24]	; (8004998 <SystemInit+0x20>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	4a05      	ldr	r2, [pc, #20]	; (8004998 <SystemInit+0x20>)
 8004984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b096      	sub	sp, #88	; 0x58
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	605a      	str	r2, [r3, #4]
 80049ac:	609a      	str	r2, [r3, #8]
 80049ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	605a      	str	r2, [r3, #4]
 80049c4:	609a      	str	r2, [r3, #8]
 80049c6:	60da      	str	r2, [r3, #12]
 80049c8:	611a      	str	r2, [r3, #16]
 80049ca:	615a      	str	r2, [r3, #20]
 80049cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049ce:	1d3b      	adds	r3, r7, #4
 80049d0:	2220      	movs	r2, #32
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f00a fd71 	bl	800f4bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80049da:	4b3f      	ldr	r3, [pc, #252]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 80049dc:	4a3f      	ldr	r2, [pc, #252]	; (8004adc <MX_TIM1_Init+0x140>)
 80049de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 80049e0:	4b3d      	ldr	r3, [pc, #244]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 80049e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80049e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049e8:	4b3b      	ldr	r3, [pc, #236]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 80049ee:	4b3a      	ldr	r3, [pc, #232]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 80049f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80049f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049f6:	4b38      	ldr	r3, [pc, #224]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049fc:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a02:	4b35      	ldr	r3, [pc, #212]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 8004a04:	2280      	movs	r2, #128	; 0x80
 8004a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a08:	4833      	ldr	r0, [pc, #204]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 8004a0a:	f005 fa99 	bl	8009f40 <HAL_TIM_Base_Init>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004a14:	f7ff fb46 	bl	80040a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a1c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a22:	4619      	mov	r1, r3
 8004a24:	482c      	ldr	r0, [pc, #176]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 8004a26:	f005 fe65 	bl	800a6f4 <HAL_TIM_ConfigClockSource>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004a30:	f7ff fb38 	bl	80040a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a34:	4828      	ldr	r0, [pc, #160]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 8004a36:	f005 fb72 	bl	800a11e <HAL_TIM_PWM_Init>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004a40:	f7ff fb30 	bl	80040a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a44:	2300      	movs	r3, #0
 8004a46:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a50:	4619      	mov	r1, r3
 8004a52:	4821      	ldr	r0, [pc, #132]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 8004a54:	f006 fa4e 	bl	800aef4 <HAL_TIMEx_MasterConfigSynchronization>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004a5e:	f7ff fb21 	bl	80040a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a62:	2360      	movs	r3, #96	; 0x60
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8004a66:	2302      	movs	r3, #2
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a76:	2300      	movs	r3, #0
 8004a78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a82:	2200      	movs	r2, #0
 8004a84:	4619      	mov	r1, r3
 8004a86:	4814      	ldr	r0, [pc, #80]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 8004a88:	f005 fd72 	bl	800a570 <HAL_TIM_PWM_ConfigChannel>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004a92:	f7ff fb07 	bl	80040a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004aaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004ab4:	1d3b      	adds	r3, r7, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4807      	ldr	r0, [pc, #28]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 8004aba:	f006 fa97 	bl	800afec <HAL_TIMEx_ConfigBreakDeadTime>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004ac4:	f7ff faee 	bl	80040a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004ac8:	4803      	ldr	r0, [pc, #12]	; (8004ad8 <MX_TIM1_Init+0x13c>)
 8004aca:	f000 f963 	bl	8004d94 <HAL_TIM_MspPostInit>

}
 8004ace:	bf00      	nop
 8004ad0:	3758      	adds	r7, #88	; 0x58
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20005934 	.word	0x20005934
 8004adc:	40010000 	.word	0x40010000

08004ae0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004ae4:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <MX_TIM10_Init+0x40>)
 8004ae6:	4a0f      	ldr	r2, [pc, #60]	; (8004b24 <MX_TIM10_Init+0x44>)
 8004ae8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8004aea:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <MX_TIM10_Init+0x40>)
 8004aec:	f244 129f 	movw	r2, #16799	; 0x419f
 8004af0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004af2:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <MX_TIM10_Init+0x40>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <MX_TIM10_Init+0x40>)
 8004afa:	f242 720f 	movw	r2, #9999	; 0x270f
 8004afe:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <MX_TIM10_Init+0x40>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <MX_TIM10_Init+0x40>)
 8004b08:	2280      	movs	r2, #128	; 0x80
 8004b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004b0c:	4804      	ldr	r0, [pc, #16]	; (8004b20 <MX_TIM10_Init+0x40>)
 8004b0e:	f005 fa17 	bl	8009f40 <HAL_TIM_Base_Init>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004b18:	f7ff fac4 	bl	80040a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004b1c:	bf00      	nop
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	2000597c 	.word	0x2000597c
 8004b24:	40014400 	.word	0x40014400

08004b28 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <MX_TIM11_Init+0x40>)
 8004b2e:	4a0f      	ldr	r2, [pc, #60]	; (8004b6c <MX_TIM11_Init+0x44>)
 8004b30:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 8004b32:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <MX_TIM11_Init+0x40>)
 8004b34:	f244 129f 	movw	r2, #16799	; 0x419f
 8004b38:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <MX_TIM11_Init+0x40>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8004b40:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <MX_TIM11_Init+0x40>)
 8004b42:	2263      	movs	r2, #99	; 0x63
 8004b44:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <MX_TIM11_Init+0x40>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <MX_TIM11_Init+0x40>)
 8004b4e:	2280      	movs	r2, #128	; 0x80
 8004b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004b52:	4805      	ldr	r0, [pc, #20]	; (8004b68 <MX_TIM11_Init+0x40>)
 8004b54:	f005 f9f4 	bl	8009f40 <HAL_TIM_Base_Init>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8004b5e:	f7ff faa1 	bl	80040a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004b62:	bf00      	nop
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	200059c4 	.word	0x200059c4
 8004b6c:	40014800 	.word	0x40014800

08004b70 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004b74:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <MX_TIM13_Init+0x40>)
 8004b76:	4a0f      	ldr	r2, [pc, #60]	; (8004bb4 <MX_TIM13_Init+0x44>)
 8004b78:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <MX_TIM13_Init+0x40>)
 8004b7c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004b80:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <MX_TIM13_Init+0x40>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <MX_TIM13_Init+0x40>)
 8004b8a:	f242 720f 	movw	r2, #9999	; 0x270f
 8004b8e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b90:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <MX_TIM13_Init+0x40>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <MX_TIM13_Init+0x40>)
 8004b98:	2280      	movs	r2, #128	; 0x80
 8004b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004b9c:	4804      	ldr	r0, [pc, #16]	; (8004bb0 <MX_TIM13_Init+0x40>)
 8004b9e:	f005 f9cf 	bl	8009f40 <HAL_TIM_Base_Init>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004ba8:	f7ff fa7c 	bl	80040a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004bac:	bf00      	nop
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20005a0c 	.word	0x20005a0c
 8004bb4:	40001c00 	.word	0x40001c00

08004bb8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bbe:	1d3b      	adds	r3, r7, #4
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	611a      	str	r2, [r3, #16]
 8004bcc:	615a      	str	r2, [r3, #20]
 8004bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004bd0:	4b1e      	ldr	r3, [pc, #120]	; (8004c4c <MX_TIM14_Init+0x94>)
 8004bd2:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <MX_TIM14_Init+0x98>)
 8004bd4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8399;
 8004bd6:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <MX_TIM14_Init+0x94>)
 8004bd8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004bdc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bde:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <MX_TIM14_Init+0x94>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8004be4:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <MX_TIM14_Init+0x94>)
 8004be6:	2263      	movs	r2, #99	; 0x63
 8004be8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bea:	4b18      	ldr	r3, [pc, #96]	; (8004c4c <MX_TIM14_Init+0x94>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bf0:	4b16      	ldr	r3, [pc, #88]	; (8004c4c <MX_TIM14_Init+0x94>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004bf6:	4815      	ldr	r0, [pc, #84]	; (8004c4c <MX_TIM14_Init+0x94>)
 8004bf8:	f005 f9a2 	bl	8009f40 <HAL_TIM_Base_Init>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8004c02:	f7ff fa4f 	bl	80040a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004c06:	4811      	ldr	r0, [pc, #68]	; (8004c4c <MX_TIM14_Init+0x94>)
 8004c08:	f005 fa89 	bl	800a11e <HAL_TIM_PWM_Init>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8004c12:	f7ff fa47 	bl	80040a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c16:	2360      	movs	r3, #96	; 0x60
 8004c18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c26:	1d3b      	adds	r3, r7, #4
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4807      	ldr	r0, [pc, #28]	; (8004c4c <MX_TIM14_Init+0x94>)
 8004c2e:	f005 fc9f 	bl	800a570 <HAL_TIM_PWM_ConfigChannel>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8004c38:	f7ff fa34 	bl	80040a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004c3c:	4803      	ldr	r0, [pc, #12]	; (8004c4c <MX_TIM14_Init+0x94>)
 8004c3e:	f000 f8a9 	bl	8004d94 <HAL_TIM_MspPostInit>

}
 8004c42:	bf00      	nop
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20005a54 	.word	0x20005a54
 8004c50:	40002000 	.word	0x40002000

08004c54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a46      	ldr	r2, [pc, #280]	; (8004d7c <HAL_TIM_Base_MspInit+0x128>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d11e      	bne.n	8004ca4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	4b45      	ldr	r3, [pc, #276]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	4a44      	ldr	r2, [pc, #272]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	6453      	str	r3, [r2, #68]	; 0x44
 8004c76:	4b42      	ldr	r3, [pc, #264]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004c82:	2200      	movs	r2, #0
 8004c84:	2100      	movs	r1, #0
 8004c86:	2019      	movs	r0, #25
 8004c88:	f001 fc13 	bl	80064b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004c8c:	2019      	movs	r0, #25
 8004c8e:	f001 fc2c 	bl	80064ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004c92:	2200      	movs	r2, #0
 8004c94:	2100      	movs	r1, #0
 8004c96:	201a      	movs	r0, #26
 8004c98:	f001 fc0b 	bl	80064b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004c9c:	201a      	movs	r0, #26
 8004c9e:	f001 fc24 	bl	80064ea <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004ca2:	e066      	b.n	8004d72 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a36      	ldr	r2, [pc, #216]	; (8004d84 <HAL_TIM_Base_MspInit+0x130>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d116      	bne.n	8004cdc <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	4b33      	ldr	r3, [pc, #204]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb6:	4a32      	ldr	r2, [pc, #200]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004cbe:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2100      	movs	r1, #0
 8004cce:	2019      	movs	r0, #25
 8004cd0:	f001 fbef 	bl	80064b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004cd4:	2019      	movs	r0, #25
 8004cd6:	f001 fc08 	bl	80064ea <HAL_NVIC_EnableIRQ>
}
 8004cda:	e04a      	b.n	8004d72 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a29      	ldr	r2, [pc, #164]	; (8004d88 <HAL_TIM_Base_MspInit+0x134>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d116      	bne.n	8004d14 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	4a24      	ldr	r2, [pc, #144]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8004cf6:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004d02:	2200      	movs	r2, #0
 8004d04:	2100      	movs	r1, #0
 8004d06:	201a      	movs	r0, #26
 8004d08:	f001 fbd3 	bl	80064b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004d0c:	201a      	movs	r0, #26
 8004d0e:	f001 fbec 	bl	80064ea <HAL_NVIC_EnableIRQ>
}
 8004d12:	e02e      	b.n	8004d72 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1c      	ldr	r2, [pc, #112]	; (8004d8c <HAL_TIM_Base_MspInit+0x138>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d116      	bne.n	8004d4c <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	4b17      	ldr	r3, [pc, #92]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2e:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	202c      	movs	r0, #44	; 0x2c
 8004d40:	f001 fbb7 	bl	80064b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004d44:	202c      	movs	r0, #44	; 0x2c
 8004d46:	f001 fbd0 	bl	80064ea <HAL_NVIC_EnableIRQ>
}
 8004d4a:	e012      	b.n	8004d72 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM14)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a0f      	ldr	r2, [pc, #60]	; (8004d90 <HAL_TIM_Base_MspInit+0x13c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10d      	bne.n	8004d72 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	4a08      	ldr	r2, [pc, #32]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d64:	6413      	str	r3, [r2, #64]	; 0x40
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_TIM_Base_MspInit+0x12c>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
}
 8004d72:	bf00      	nop
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40010000 	.word	0x40010000
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800
 8004d8c:	40001c00 	.word	0x40001c00
 8004d90:	40002000 	.word	0x40002000

08004d94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d9c:	f107 0314 	add.w	r3, r7, #20
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a25      	ldr	r2, [pc, #148]	; (8004e48 <HAL_TIM_MspPostInit+0xb4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d11f      	bne.n	8004df6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_TIM_MspPostInit+0xb8>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <HAL_TIM_MspPostInit+0xb8>)
 8004dc0:	f043 0310 	orr.w	r3, r3, #16
 8004dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc6:	4b21      	ldr	r3, [pc, #132]	; (8004e4c <HAL_TIM_MspPostInit+0xb8>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de0:	2300      	movs	r3, #0
 8004de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004de4:	2301      	movs	r3, #1
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004de8:	f107 0314 	add.w	r3, r7, #20
 8004dec:	4619      	mov	r1, r3
 8004dee:	4818      	ldr	r0, [pc, #96]	; (8004e50 <HAL_TIM_MspPostInit+0xbc>)
 8004df0:	f001 fc1c 	bl	800662c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004df4:	e023      	b.n	8004e3e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a16      	ldr	r2, [pc, #88]	; (8004e54 <HAL_TIM_MspPostInit+0xc0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d11e      	bne.n	8004e3e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <HAL_TIM_MspPostInit+0xb8>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	4a10      	ldr	r2, [pc, #64]	; (8004e4c <HAL_TIM_MspPostInit+0xb8>)
 8004e0a:	f043 0320 	orr.w	r3, r3, #32
 8004e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e10:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <HAL_TIM_MspPostInit+0xb8>)
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e22:	2302      	movs	r3, #2
 8004e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004e2e:	2309      	movs	r3, #9
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e32:	f107 0314 	add.w	r3, r7, #20
 8004e36:	4619      	mov	r1, r3
 8004e38:	4807      	ldr	r0, [pc, #28]	; (8004e58 <HAL_TIM_MspPostInit+0xc4>)
 8004e3a:	f001 fbf7 	bl	800662c <HAL_GPIO_Init>
}
 8004e3e:	bf00      	nop
 8004e40:	3728      	adds	r7, #40	; 0x28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40002000 	.word	0x40002000
 8004e58:	40021400 	.word	0x40021400

08004e5c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004e60:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <MX_USART3_UART_Init+0x4c>)
 8004e62:	4a12      	ldr	r2, [pc, #72]	; (8004eac <MX_USART3_UART_Init+0x50>)
 8004e64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <MX_USART3_UART_Init+0x4c>)
 8004e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004e6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ea8 <MX_USART3_UART_Init+0x4c>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004e74:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <MX_USART3_UART_Init+0x4c>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <MX_USART3_UART_Init+0x4c>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004e80:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <MX_USART3_UART_Init+0x4c>)
 8004e82:	220c      	movs	r2, #12
 8004e84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e86:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <MX_USART3_UART_Init+0x4c>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <MX_USART3_UART_Init+0x4c>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e92:	4805      	ldr	r0, [pc, #20]	; (8004ea8 <MX_USART3_UART_Init+0x4c>)
 8004e94:	f006 f910 	bl	800b0b8 <HAL_UART_Init>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004e9e:	f7ff f901 	bl	80040a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004ea2:	bf00      	nop
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20005a9c 	.word	0x20005a9c
 8004eac:	40004800 	.word	0x40004800

08004eb0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004eb4:	4b11      	ldr	r3, [pc, #68]	; (8004efc <MX_USART6_UART_Init+0x4c>)
 8004eb6:	4a12      	ldr	r2, [pc, #72]	; (8004f00 <MX_USART6_UART_Init+0x50>)
 8004eb8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004eba:	4b10      	ldr	r3, [pc, #64]	; (8004efc <MX_USART6_UART_Init+0x4c>)
 8004ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ec0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <MX_USART6_UART_Init+0x4c>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <MX_USART6_UART_Init+0x4c>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004ece:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <MX_USART6_UART_Init+0x4c>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004ed4:	4b09      	ldr	r3, [pc, #36]	; (8004efc <MX_USART6_UART_Init+0x4c>)
 8004ed6:	220c      	movs	r2, #12
 8004ed8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eda:	4b08      	ldr	r3, [pc, #32]	; (8004efc <MX_USART6_UART_Init+0x4c>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <MX_USART6_UART_Init+0x4c>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004ee6:	4805      	ldr	r0, [pc, #20]	; (8004efc <MX_USART6_UART_Init+0x4c>)
 8004ee8:	f006 f8e6 	bl	800b0b8 <HAL_UART_Init>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004ef2:	f7ff f8d7 	bl	80040a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20005ae0 	.word	0x20005ae0
 8004f00:	40011400 	.word	0x40011400

08004f04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08c      	sub	sp, #48	; 0x30
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f0c:	f107 031c 	add.w	r3, r7, #28
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	605a      	str	r2, [r3, #4]
 8004f16:	609a      	str	r2, [r3, #8]
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a32      	ldr	r2, [pc, #200]	; (8004fec <HAL_UART_MspInit+0xe8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d12d      	bne.n	8004f82 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <HAL_UART_MspInit+0xec>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	4a30      	ldr	r2, [pc, #192]	; (8004ff0 <HAL_UART_MspInit+0xec>)
 8004f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f34:	6413      	str	r3, [r2, #64]	; 0x40
 8004f36:	4b2e      	ldr	r3, [pc, #184]	; (8004ff0 <HAL_UART_MspInit+0xec>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <HAL_UART_MspInit+0xec>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	4a29      	ldr	r2, [pc, #164]	; (8004ff0 <HAL_UART_MspInit+0xec>)
 8004f4c:	f043 0308 	orr.w	r3, r3, #8
 8004f50:	6313      	str	r3, [r2, #48]	; 0x30
 8004f52:	4b27      	ldr	r3, [pc, #156]	; (8004ff0 <HAL_UART_MspInit+0xec>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004f5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f64:	2302      	movs	r3, #2
 8004f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004f70:	2307      	movs	r3, #7
 8004f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f74:	f107 031c 	add.w	r3, r7, #28
 8004f78:	4619      	mov	r1, r3
 8004f7a:	481e      	ldr	r0, [pc, #120]	; (8004ff4 <HAL_UART_MspInit+0xf0>)
 8004f7c:	f001 fb56 	bl	800662c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004f80:	e030      	b.n	8004fe4 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <HAL_UART_MspInit+0xf4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d12b      	bne.n	8004fe4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <HAL_UART_MspInit+0xec>)
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <HAL_UART_MspInit+0xec>)
 8004f96:	f043 0320 	orr.w	r3, r3, #32
 8004f9a:	6453      	str	r3, [r2, #68]	; 0x44
 8004f9c:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <HAL_UART_MspInit+0xec>)
 8004f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <HAL_UART_MspInit+0xec>)
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	4a0f      	ldr	r2, [pc, #60]	; (8004ff0 <HAL_UART_MspInit+0xec>)
 8004fb2:	f043 0304 	orr.w	r3, r3, #4
 8004fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <HAL_UART_MspInit+0xec>)
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004fc4:	23c0      	movs	r3, #192	; 0xc0
 8004fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fd8:	f107 031c 	add.w	r3, r7, #28
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4807      	ldr	r0, [pc, #28]	; (8004ffc <HAL_UART_MspInit+0xf8>)
 8004fe0:	f001 fb24 	bl	800662c <HAL_GPIO_Init>
}
 8004fe4:	bf00      	nop
 8004fe6:	3730      	adds	r7, #48	; 0x30
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40004800 	.word	0x40004800
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	40020c00 	.word	0x40020c00
 8004ff8:	40011400 	.word	0x40011400
 8004ffc:	40020800 	.word	0x40020800

08005000 <enableVib>:

void setVibrationPower(uint8_t power){
	vibPower = power;
}

void enableVib(void){
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
	TIM14->CCR1 = vibPower;
 8005004:	4b04      	ldr	r3, [pc, #16]	; (8005018 <enableVib+0x18>)
 8005006:	781a      	ldrb	r2, [r3, #0]
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <enableVib+0x1c>)
 800500a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000074 	.word	0x20000074
 800501c:	40002000 	.word	0x40002000

08005020 <disableVib>:
void disableVib(void){
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
	TIM14->CCR1 = 0;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <disableVib+0x14>)
 8005026:	2200      	movs	r2, #0
 8005028:	635a      	str	r2, [r3, #52]	; 0x34
}
 800502a:	bf00      	nop
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40002000 	.word	0x40002000

08005038 <pulseVib>:
		TIM14->CCR1 = vibPower;
	} else {
		TIM14->CCR1 = 0;
	}
}
void pulseVib(uint16_t duration, uint8_t power){
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	460a      	mov	r2, r1
 8005042:	80fb      	strh	r3, [r7, #6]
 8005044:	4613      	mov	r3, r2
 8005046:	717b      	strb	r3, [r7, #5]
	vibPower = power;
 8005048:	4a06      	ldr	r2, [pc, #24]	; (8005064 <pulseVib+0x2c>)
 800504a:	797b      	ldrb	r3, [r7, #5]
 800504c:	7013      	strb	r3, [r2, #0]
	enableVib();
 800504e:	f7ff ffd7 	bl	8005000 <enableVib>
	setTimeout(duration, &disableVib);
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	4904      	ldr	r1, [pc, #16]	; (8005068 <pulseVib+0x30>)
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe fd88 	bl	8003b6c <setTimeout>
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000074 	.word	0x20000074
 8005068:	08005021 	.word	0x08005021

0800506c <prevPage>:
}
void triplePressH(void){
	sprintf(&btnStr, "Triple press");
}

void prevPage(void){
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
	if(currentPage>0){
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <prevPage+0x30>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d006      	beq.n	8005086 <prevPage+0x1a>
		currentPage--;
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <prevPage+0x30>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	3b01      	subs	r3, #1
 800507e:	b2da      	uxtb	r2, r3
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <prevPage+0x30>)
 8005082:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 8005084:	e005      	b.n	8005092 <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <prevPage+0x34>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	3b01      	subs	r3, #1
 800508c:	b2da      	uxtb	r2, r3
 800508e:	4b03      	ldr	r3, [pc, #12]	; (800509c <prevPage+0x30>)
 8005090:	701a      	strb	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	20005b24 	.word	0x20005b24
 80050a0:	20000075 	.word	0x20000075

080050a4 <nextPage>:
void nextPage(void){
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <nextPage+0x34>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <nextPage+0x38>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	429a      	cmp	r2, r3
 80050b6:	da06      	bge.n	80050c6 <nextPage+0x22>
		currentPage++;
 80050b8:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <nextPage+0x34>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <nextPage+0x34>)
 80050c2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 80050c4:	e002      	b.n	80050cc <nextPage+0x28>
		currentPage=0;
 80050c6:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <nextPage+0x34>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
}
 80050cc:	bf00      	nop
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20005b24 	.word	0x20005b24
 80050dc:	20000075 	.word	0x20000075

080050e0 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
//	btn_B2.onReleaseHandler = &quickReleaseH;
//	btn_B2.onPress = &quickPressH;
//	btn_B2.onRelease = &quickReleaseH;
//	btn_BB.onSinglePressHandler = &showOptions;

	btn_BA.onSinglePressHandler = &nextScreen;
 80050e4:	4b08      	ldr	r3, [pc, #32]	; (8005108 <setDefaultClbcks+0x28>)
 80050e6:	4a09      	ldr	r2, [pc, #36]	; (800510c <setDefaultClbcks+0x2c>)
 80050e8:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80050ea:	4b09      	ldr	r3, [pc, #36]	; (8005110 <setDefaultClbcks+0x30>)
 80050ec:	4a09      	ldr	r2, [pc, #36]	; (8005114 <setDefaultClbcks+0x34>)
 80050ee:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 80050f0:	4b09      	ldr	r3, [pc, #36]	; (8005118 <setDefaultClbcks+0x38>)
 80050f2:	4a0a      	ldr	r2, [pc, #40]	; (800511c <setDefaultClbcks+0x3c>)
 80050f4:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <setDefaultClbcks+0x40>)
 80050f8:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <setDefaultClbcks+0x44>)
 80050fa:	611a      	str	r2, [r3, #16]
}
 80050fc:	bf00      	nop
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	2000239c 	.word	0x2000239c
 800510c:	08002459 	.word	0x08002459
 8005110:	2000242c 	.word	0x2000242c
 8005114:	08002469 	.word	0x08002469
 8005118:	20002504 	.word	0x20002504
 800511c:	0800506d 	.word	0x0800506d
 8005120:	20002474 	.word	0x20002474
 8005124:	080050a5 	.word	0x080050a5

08005128 <showPage1>:

void showPage1(void){
 8005128:	b580      	push	{r7, lr}
 800512a:	b092      	sub	sp, #72	; 0x48
 800512c:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 800512e:	2300      	movs	r3, #0
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	605a      	str	r2, [r3, #4]
 800513c:	609a      	str	r2, [r3, #8]
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	611a      	str	r2, [r3, #16]
 8005142:	615a      	str	r2, [r3, #20]
 8005144:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 8005146:	2300      	movs	r3, #0
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	1d3b      	adds	r3, r7, #4
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	605a      	str	r2, [r3, #4]
 8005152:	609a      	str	r2, [r3, #8]
 8005154:	60da      	str	r2, [r3, #12]
 8005156:	611a      	str	r2, [r3, #16]
 8005158:	615a      	str	r2, [r3, #20]
 800515a:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 800515c:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <showPage1+0xa0>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <showPage1+0xa0>)
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	4619      	mov	r1, r3
 8005168:	4b17      	ldr	r3, [pc, #92]	; (80051c8 <showPage1+0xa0>)
 800516a:	789b      	ldrb	r3, [r3, #2]
 800516c:	4638      	mov	r0, r7
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	460b      	mov	r3, r1
 8005172:	4916      	ldr	r1, [pc, #88]	; (80051cc <showPage1+0xa4>)
 8005174:	f00b f85e 	bl	8010234 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 8005178:	463a      	mov	r2, r7
 800517a:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <showPage1+0xa8>)
 800517c:	210b      	movs	r1, #11
 800517e:	200e      	movs	r0, #14
 8005180:	f7fd fc70 	bl	8002a64 <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 8005184:	2301      	movs	r3, #1
 8005186:	2227      	movs	r2, #39	; 0x27
 8005188:	2106      	movs	r1, #6
 800518a:	2001      	movs	r0, #1
 800518c:	f7fd fc98 	bl	8002ac0 <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 8005190:	2301      	movs	r3, #1
 8005192:	2228      	movs	r2, #40	; 0x28
 8005194:	2105      	movs	r1, #5
 8005196:	2002      	movs	r0, #2
 8005198:	f7fd fc92 	bl	8002ac0 <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 800519c:	2301      	movs	r3, #1
 800519e:	2228      	movs	r2, #40	; 0x28
 80051a0:	2105      	movs	r1, #5
 80051a2:	2003      	movs	r0, #3
 80051a4:	f7fd fc8c 	bl	8002ac0 <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 80051a8:	2301      	movs	r3, #1
 80051aa:	2227      	movs	r2, #39	; 0x27
 80051ac:	2106      	movs	r1, #6
 80051ae:	2004      	movs	r0, #4
 80051b0:	f7fd fc86 	bl	8002ac0 <lcdVLine>


		lcdPutStr(14, 60, btnStr, zekton24font);
 80051b4:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <showPage1+0xa8>)
 80051b6:	4a07      	ldr	r2, [pc, #28]	; (80051d4 <showPage1+0xac>)
 80051b8:	213c      	movs	r1, #60	; 0x3c
 80051ba:	200e      	movs	r0, #14
 80051bc:	f7fd fc52 	bl	8002a64 <lcdPutStr>
}
 80051c0:	bf00      	nop
 80051c2:	3740      	adds	r7, #64	; 0x40
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	2000548c 	.word	0x2000548c
 80051cc:	080136f8 	.word	0x080136f8
 80051d0:	0801a35c 	.word	0x0801a35c
 80051d4:	20005b28 	.word	0x20005b28

080051d8 <showPage2>:
void showPage2(void){
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80051de:	2300      	movs	r3, #0
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	1d3b      	adds	r3, r7, #4
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	611a      	str	r2, [r3, #16]
 80051f0:	615a      	str	r2, [r3, #20]
 80051f2:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 80051f4:	463b      	mov	r3, r7
 80051f6:	4913      	ldr	r1, [pc, #76]	; (8005244 <showPage2+0x6c>)
 80051f8:	4618      	mov	r0, r3
 80051fa:	f00b f81b 	bl	8010234 <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 80051fe:	463a      	mov	r2, r7
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <showPage2+0x70>)
 8005202:	2132      	movs	r1, #50	; 0x32
 8005204:	200e      	movs	r0, #14
 8005206:	f7fd fc2d 	bl	8002a64 <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 800520a:	2301      	movs	r3, #1
 800520c:	224e      	movs	r2, #78	; 0x4e
 800520e:	212d      	movs	r1, #45	; 0x2d
 8005210:	2001      	movs	r0, #1
 8005212:	f7fd fc55 	bl	8002ac0 <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8005216:	2301      	movs	r3, #1
 8005218:	224f      	movs	r2, #79	; 0x4f
 800521a:	212c      	movs	r1, #44	; 0x2c
 800521c:	2002      	movs	r0, #2
 800521e:	f7fd fc4f 	bl	8002ac0 <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8005222:	2301      	movs	r3, #1
 8005224:	224f      	movs	r2, #79	; 0x4f
 8005226:	212c      	movs	r1, #44	; 0x2c
 8005228:	2003      	movs	r0, #3
 800522a:	f7fd fc49 	bl	8002ac0 <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 800522e:	2301      	movs	r3, #1
 8005230:	224e      	movs	r2, #78	; 0x4e
 8005232:	212d      	movs	r1, #45	; 0x2d
 8005234:	2004      	movs	r0, #4
 8005236:	f7fd fc43 	bl	8002ac0 <lcdVLine>
}
 800523a:	bf00      	nop
 800523c:	3720      	adds	r7, #32
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	08013708 	.word	0x08013708
 8005248:	0801a35c 	.word	0x0801a35c

0800524c <showPage3>:
void showPage3(void){
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8005252:	2300      	movs	r3, #0
 8005254:	603b      	str	r3, [r7, #0]
 8005256:	1d3b      	adds	r3, r7, #4
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	60da      	str	r2, [r3, #12]
 8005262:	611a      	str	r2, [r3, #16]
 8005264:	615a      	str	r2, [r3, #20]
 8005266:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 8005268:	463b      	mov	r3, r7
 800526a:	4913      	ldr	r1, [pc, #76]	; (80052b8 <showPage3+0x6c>)
 800526c:	4618      	mov	r0, r3
 800526e:	f00a ffe1 	bl	8010234 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8005272:	463a      	mov	r2, r7
 8005274:	4b11      	ldr	r3, [pc, #68]	; (80052bc <showPage3+0x70>)
 8005276:	2100      	movs	r1, #0
 8005278:	2000      	movs	r0, #0
 800527a:	f7fd fbf3 	bl	8002a64 <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 800527e:	2301      	movs	r3, #1
 8005280:	2275      	movs	r2, #117	; 0x75
 8005282:	2154      	movs	r1, #84	; 0x54
 8005284:	2001      	movs	r0, #1
 8005286:	f7fd fc1b 	bl	8002ac0 <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 800528a:	2301      	movs	r3, #1
 800528c:	2276      	movs	r2, #118	; 0x76
 800528e:	2153      	movs	r1, #83	; 0x53
 8005290:	2002      	movs	r0, #2
 8005292:	f7fd fc15 	bl	8002ac0 <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8005296:	2301      	movs	r3, #1
 8005298:	2276      	movs	r2, #118	; 0x76
 800529a:	2153      	movs	r1, #83	; 0x53
 800529c:	2003      	movs	r0, #3
 800529e:	f7fd fc0f 	bl	8002ac0 <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 80052a2:	2301      	movs	r3, #1
 80052a4:	2275      	movs	r2, #117	; 0x75
 80052a6:	2154      	movs	r1, #84	; 0x54
 80052a8:	2004      	movs	r0, #4
 80052aa:	f7fd fc09 	bl	8002ac0 <lcdVLine>
}
 80052ae:	bf00      	nop
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	0801370c 	.word	0x0801370c
 80052bc:	0801a35c 	.word	0x0801a35c

080052c0 <showPage4>:
void showPage4(void){
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80052c6:	2300      	movs	r3, #0
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	1d3b      	adds	r3, r7, #4
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	609a      	str	r2, [r3, #8]
 80052d4:	60da      	str	r2, [r3, #12]
 80052d6:	611a      	str	r2, [r3, #16]
 80052d8:	615a      	str	r2, [r3, #20]
 80052da:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 80052dc:	463b      	mov	r3, r7
 80052de:	4913      	ldr	r1, [pc, #76]	; (800532c <showPage4+0x6c>)
 80052e0:	4618      	mov	r0, r3
 80052e2:	f00a ffa7 	bl	8010234 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 80052e6:	463a      	mov	r2, r7
 80052e8:	4b11      	ldr	r3, [pc, #68]	; (8005330 <showPage4+0x70>)
 80052ea:	2100      	movs	r1, #0
 80052ec:	2000      	movs	r0, #0
 80052ee:	f7fd fbb9 	bl	8002a64 <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 80052f2:	2301      	movs	r3, #1
 80052f4:	229c      	movs	r2, #156	; 0x9c
 80052f6:	217b      	movs	r1, #123	; 0x7b
 80052f8:	2001      	movs	r0, #1
 80052fa:	f7fd fbe1 	bl	8002ac0 <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 80052fe:	2301      	movs	r3, #1
 8005300:	229d      	movs	r2, #157	; 0x9d
 8005302:	217a      	movs	r1, #122	; 0x7a
 8005304:	2002      	movs	r0, #2
 8005306:	f7fd fbdb 	bl	8002ac0 <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 800530a:	2301      	movs	r3, #1
 800530c:	229d      	movs	r2, #157	; 0x9d
 800530e:	217a      	movs	r1, #122	; 0x7a
 8005310:	2003      	movs	r0, #3
 8005312:	f7fd fbd5 	bl	8002ac0 <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8005316:	2301      	movs	r3, #1
 8005318:	229c      	movs	r2, #156	; 0x9c
 800531a:	217b      	movs	r1, #123	; 0x7b
 800531c:	2004      	movs	r0, #4
 800531e:	f7fd fbcf 	bl	8002ac0 <lcdVLine>
}
 8005322:	bf00      	nop
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	08013718 	.word	0x08013718
 8005330:	0801a35c 	.word	0x0801a35c

08005334 <showPage5>:
void showPage5(void){
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800533a:	2300      	movs	r3, #0
 800533c:	603b      	str	r3, [r7, #0]
 800533e:	1d3b      	adds	r3, r7, #4
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	609a      	str	r2, [r3, #8]
 8005348:	60da      	str	r2, [r3, #12]
 800534a:	611a      	str	r2, [r3, #16]
 800534c:	615a      	str	r2, [r3, #20]
 800534e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 8005350:	463b      	mov	r3, r7
 8005352:	4925      	ldr	r1, [pc, #148]	; (80053e8 <showPage5+0xb4>)
 8005354:	4618      	mov	r0, r3
 8005356:	f00a ff6d 	bl	8010234 <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 800535a:	463a      	mov	r2, r7
 800535c:	4b23      	ldr	r3, [pc, #140]	; (80053ec <showPage5+0xb8>)
 800535e:	2100      	movs	r1, #0
 8005360:	200a      	movs	r0, #10
 8005362:	f7fd fb7f 	bl	8002a64 <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 8005366:	463a      	mov	r2, r7
 8005368:	4b21      	ldr	r3, [pc, #132]	; (80053f0 <showPage5+0xbc>)
 800536a:	210f      	movs	r1, #15
 800536c:	200a      	movs	r0, #10
 800536e:	f7fd fb79 	bl	8002a64 <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 8005372:	463a      	mov	r2, r7
 8005374:	4b1f      	ldr	r3, [pc, #124]	; (80053f4 <showPage5+0xc0>)
 8005376:	2132      	movs	r1, #50	; 0x32
 8005378:	200a      	movs	r0, #10
 800537a:	f7fd fb73 	bl	8002a64 <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 800537e:	463a      	mov	r2, r7
 8005380:	4b1d      	ldr	r3, [pc, #116]	; (80053f8 <showPage5+0xc4>)
 8005382:	213c      	movs	r1, #60	; 0x3c
 8005384:	200a      	movs	r0, #10
 8005386:	f7fd fb6d 	bl	8002a64 <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 800538a:	463a      	mov	r2, r7
 800538c:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <showPage5+0xc8>)
 800538e:	215a      	movs	r1, #90	; 0x5a
 8005390:	200a      	movs	r0, #10
 8005392:	f7fd fb67 	bl	8002a64 <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 8005396:	463a      	mov	r2, r7
 8005398:	4b19      	ldr	r3, [pc, #100]	; (8005400 <showPage5+0xcc>)
 800539a:	2178      	movs	r1, #120	; 0x78
 800539c:	200a      	movs	r0, #10
 800539e:	f7fd fb61 	bl	8002a64 <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 80053a2:	463a      	mov	r2, r7
 80053a4:	4b17      	ldr	r3, [pc, #92]	; (8005404 <showPage5+0xd0>)
 80053a6:	2196      	movs	r1, #150	; 0x96
 80053a8:	200a      	movs	r0, #10
 80053aa:	f7fd fb5b 	bl	8002a64 <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 80053ae:	2301      	movs	r3, #1
 80053b0:	22c3      	movs	r2, #195	; 0xc3
 80053b2:	21a2      	movs	r1, #162	; 0xa2
 80053b4:	2001      	movs	r0, #1
 80053b6:	f7fd fb83 	bl	8002ac0 <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 80053ba:	2301      	movs	r3, #1
 80053bc:	22c4      	movs	r2, #196	; 0xc4
 80053be:	21a1      	movs	r1, #161	; 0xa1
 80053c0:	2002      	movs	r0, #2
 80053c2:	f7fd fb7d 	bl	8002ac0 <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 80053c6:	2301      	movs	r3, #1
 80053c8:	22c4      	movs	r2, #196	; 0xc4
 80053ca:	21a1      	movs	r1, #161	; 0xa1
 80053cc:	2003      	movs	r0, #3
 80053ce:	f7fd fb77 	bl	8002ac0 <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 80053d2:	2301      	movs	r3, #1
 80053d4:	22c3      	movs	r2, #195	; 0xc3
 80053d6:	21a2      	movs	r1, #162	; 0xa2
 80053d8:	2004      	movs	r0, #4
 80053da:	f7fd fb71 	bl	8002ac0 <lcdVLine>
}
 80053de:	bf00      	nop
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	08013724 	.word	0x08013724
 80053ec:	0801824c 	.word	0x0801824c
 80053f0:	08018d94 	.word	0x08018d94
 80053f4:	08015864 	.word	0x08015864
 80053f8:	08015ce0 	.word	0x08015ce0
 80053fc:	08016d3c 	.word	0x08016d3c
 8005400:	080177c4 	.word	0x080177c4
 8005404:	0801a35c 	.word	0x0801a35c

08005408 <showPage6>:
void showPage6(void){
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 800540e:	2301      	movs	r3, #1
 8005410:	22ea      	movs	r2, #234	; 0xea
 8005412:	21c9      	movs	r1, #201	; 0xc9
 8005414:	2001      	movs	r0, #1
 8005416:	f7fd fb53 	bl	8002ac0 <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 800541a:	2301      	movs	r3, #1
 800541c:	22eb      	movs	r2, #235	; 0xeb
 800541e:	21c8      	movs	r1, #200	; 0xc8
 8005420:	2002      	movs	r0, #2
 8005422:	f7fd fb4d 	bl	8002ac0 <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8005426:	2301      	movs	r3, #1
 8005428:	22eb      	movs	r2, #235	; 0xeb
 800542a:	21c8      	movs	r1, #200	; 0xc8
 800542c:	2003      	movs	r0, #3
 800542e:	f7fd fb47 	bl	8002ac0 <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8005432:	2301      	movs	r3, #1
 8005434:	22ea      	movs	r2, #234	; 0xea
 8005436:	21c9      	movs	r1, #201	; 0xc9
 8005438:	2004      	movs	r0, #4
 800543a:	f7fd fb41 	bl	8002ac0 <lcdVLine>
		lcdRect(0,399,25,80,1);
 800543e:	2301      	movs	r3, #1
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	2350      	movs	r3, #80	; 0x50
 8005444:	2219      	movs	r2, #25
 8005446:	f240 118f 	movw	r1, #399	; 0x18f
 800544a:	2000      	movs	r0, #0
 800544c:	f7fe f8d6 	bl	80035fc <lcdRect>
		lcdRect(0,399,120,180,1);
 8005450:	2301      	movs	r3, #1
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	23b4      	movs	r3, #180	; 0xb4
 8005456:	2278      	movs	r2, #120	; 0x78
 8005458:	f240 118f 	movw	r1, #399	; 0x18f
 800545c:	2000      	movs	r0, #0
 800545e:	f7fe f8cd 	bl	80035fc <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 8005462:	2301      	movs	r3, #1
 8005464:	9302      	str	r3, [sp, #8]
 8005466:	2300      	movs	r3, #0
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	2303      	movs	r3, #3
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	2332      	movs	r3, #50	; 0x32
 8005470:	220a      	movs	r2, #10
 8005472:	2132      	movs	r1, #50	; 0x32
 8005474:	200a      	movs	r0, #10
 8005476:	f7fe fae6 	bl	8003a46 <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 800547a:	2301      	movs	r3, #1
 800547c:	9302      	str	r3, [sp, #8]
 800547e:	2301      	movs	r3, #1
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	2303      	movs	r3, #3
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2332      	movs	r3, #50	; 0x32
 8005488:	220a      	movs	r2, #10
 800548a:	2164      	movs	r1, #100	; 0x64
 800548c:	203c      	movs	r0, #60	; 0x3c
 800548e:	f7fe fada 	bl	8003a46 <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 8005492:	2301      	movs	r3, #1
 8005494:	9302      	str	r3, [sp, #8]
 8005496:	2302      	movs	r3, #2
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	2303      	movs	r3, #3
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	2332      	movs	r3, #50	; 0x32
 80054a0:	220a      	movs	r2, #10
 80054a2:	2196      	movs	r1, #150	; 0x96
 80054a4:	206e      	movs	r0, #110	; 0x6e
 80054a6:	f7fe face 	bl	8003a46 <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 80054aa:	2301      	movs	r3, #1
 80054ac:	9302      	str	r3, [sp, #8]
 80054ae:	2303      	movs	r3, #3
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	2303      	movs	r3, #3
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	2332      	movs	r3, #50	; 0x32
 80054b8:	220a      	movs	r2, #10
 80054ba:	21c8      	movs	r1, #200	; 0xc8
 80054bc:	20a0      	movs	r0, #160	; 0xa0
 80054be:	f7fe fac2 	bl	8003a46 <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 80054c2:	2301      	movs	r3, #1
 80054c4:	9302      	str	r3, [sp, #8]
 80054c6:	2304      	movs	r3, #4
 80054c8:	9301      	str	r3, [sp, #4]
 80054ca:	2303      	movs	r3, #3
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	2332      	movs	r3, #50	; 0x32
 80054d0:	220a      	movs	r2, #10
 80054d2:	21fa      	movs	r1, #250	; 0xfa
 80054d4:	20d2      	movs	r0, #210	; 0xd2
 80054d6:	f7fe fab6 	bl	8003a46 <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 80054da:	2301      	movs	r3, #1
 80054dc:	9302      	str	r3, [sp, #8]
 80054de:	2305      	movs	r3, #5
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	2303      	movs	r3, #3
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	2332      	movs	r3, #50	; 0x32
 80054e8:	220a      	movs	r2, #10
 80054ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80054ee:	f44f 7082 	mov.w	r0, #260	; 0x104
 80054f2:	f7fe faa8 	bl	8003a46 <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 80054f6:	2301      	movs	r3, #1
 80054f8:	9302      	str	r3, [sp, #8]
 80054fa:	2306      	movs	r3, #6
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	2303      	movs	r3, #3
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	2332      	movs	r3, #50	; 0x32
 8005504:	220a      	movs	r2, #10
 8005506:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800550a:	f44f 709b 	mov.w	r0, #310	; 0x136
 800550e:	f7fe fa9a 	bl	8003a46 <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 8005512:	2301      	movs	r3, #1
 8005514:	9302      	str	r3, [sp, #8]
 8005516:	2307      	movs	r3, #7
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	2303      	movs	r3, #3
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	2364      	movs	r3, #100	; 0x64
 8005520:	223c      	movs	r2, #60	; 0x3c
 8005522:	2132      	movs	r1, #50	; 0x32
 8005524:	200a      	movs	r0, #10
 8005526:	f7fe fa8e 	bl	8003a46 <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 800552a:	2301      	movs	r3, #1
 800552c:	9302      	str	r3, [sp, #8]
 800552e:	2308      	movs	r3, #8
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	2303      	movs	r3, #3
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	2364      	movs	r3, #100	; 0x64
 8005538:	223c      	movs	r2, #60	; 0x3c
 800553a:	2164      	movs	r1, #100	; 0x64
 800553c:	203c      	movs	r0, #60	; 0x3c
 800553e:	f7fe fa82 	bl	8003a46 <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 8005542:	2301      	movs	r3, #1
 8005544:	9302      	str	r3, [sp, #8]
 8005546:	2309      	movs	r3, #9
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	2303      	movs	r3, #3
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	2364      	movs	r3, #100	; 0x64
 8005550:	223c      	movs	r2, #60	; 0x3c
 8005552:	2196      	movs	r1, #150	; 0x96
 8005554:	206e      	movs	r0, #110	; 0x6e
 8005556:	f7fe fa76 	bl	8003a46 <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 800555a:	2301      	movs	r3, #1
 800555c:	9302      	str	r3, [sp, #8]
 800555e:	230a      	movs	r3, #10
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	2303      	movs	r3, #3
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2364      	movs	r3, #100	; 0x64
 8005568:	223c      	movs	r2, #60	; 0x3c
 800556a:	21c8      	movs	r1, #200	; 0xc8
 800556c:	20a0      	movs	r0, #160	; 0xa0
 800556e:	f7fe fa6a 	bl	8003a46 <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 8005572:	2301      	movs	r3, #1
 8005574:	9302      	str	r3, [sp, #8]
 8005576:	230b      	movs	r3, #11
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	2303      	movs	r3, #3
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	2364      	movs	r3, #100	; 0x64
 8005580:	223c      	movs	r2, #60	; 0x3c
 8005582:	21fa      	movs	r1, #250	; 0xfa
 8005584:	20d2      	movs	r0, #210	; 0xd2
 8005586:	f7fe fa5e 	bl	8003a46 <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 800558a:	2301      	movs	r3, #1
 800558c:	9302      	str	r3, [sp, #8]
 800558e:	230c      	movs	r3, #12
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	2303      	movs	r3, #3
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	2364      	movs	r3, #100	; 0x64
 8005598:	223c      	movs	r2, #60	; 0x3c
 800559a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800559e:	f44f 7082 	mov.w	r0, #260	; 0x104
 80055a2:	f7fe fa50 	bl	8003a46 <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 80055a6:	2301      	movs	r3, #1
 80055a8:	9302      	str	r3, [sp, #8]
 80055aa:	230d      	movs	r3, #13
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	2303      	movs	r3, #3
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	2364      	movs	r3, #100	; 0x64
 80055b4:	223c      	movs	r2, #60	; 0x3c
 80055b6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80055ba:	f44f 709b 	mov.w	r0, #310	; 0x136
 80055be:	f7fe fa42 	bl	8003a46 <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 80055c2:	2301      	movs	r3, #1
 80055c4:	9302      	str	r3, [sp, #8]
 80055c6:	230e      	movs	r3, #14
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	2303      	movs	r3, #3
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	2396      	movs	r3, #150	; 0x96
 80055d0:	226e      	movs	r2, #110	; 0x6e
 80055d2:	2132      	movs	r1, #50	; 0x32
 80055d4:	200a      	movs	r0, #10
 80055d6:	f7fe fa36 	bl	8003a46 <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 80055da:	2301      	movs	r3, #1
 80055dc:	9302      	str	r3, [sp, #8]
 80055de:	230f      	movs	r3, #15
 80055e0:	9301      	str	r3, [sp, #4]
 80055e2:	2303      	movs	r3, #3
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	2396      	movs	r3, #150	; 0x96
 80055e8:	226e      	movs	r2, #110	; 0x6e
 80055ea:	2164      	movs	r1, #100	; 0x64
 80055ec:	203c      	movs	r0, #60	; 0x3c
 80055ee:	f7fe fa2a 	bl	8003a46 <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 80055f2:	2301      	movs	r3, #1
 80055f4:	9302      	str	r3, [sp, #8]
 80055f6:	2310      	movs	r3, #16
 80055f8:	9301      	str	r3, [sp, #4]
 80055fa:	2303      	movs	r3, #3
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	2396      	movs	r3, #150	; 0x96
 8005600:	226e      	movs	r2, #110	; 0x6e
 8005602:	2196      	movs	r1, #150	; 0x96
 8005604:	206e      	movs	r0, #110	; 0x6e
 8005606:	f7fe fa1e 	bl	8003a46 <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 800560a:	2301      	movs	r3, #1
 800560c:	9302      	str	r3, [sp, #8]
 800560e:	2311      	movs	r3, #17
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	2303      	movs	r3, #3
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	2396      	movs	r3, #150	; 0x96
 8005618:	226e      	movs	r2, #110	; 0x6e
 800561a:	21c8      	movs	r1, #200	; 0xc8
 800561c:	20a0      	movs	r0, #160	; 0xa0
 800561e:	f7fe fa12 	bl	8003a46 <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 8005622:	2301      	movs	r3, #1
 8005624:	9302      	str	r3, [sp, #8]
 8005626:	2312      	movs	r3, #18
 8005628:	9301      	str	r3, [sp, #4]
 800562a:	2303      	movs	r3, #3
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	2396      	movs	r3, #150	; 0x96
 8005630:	226e      	movs	r2, #110	; 0x6e
 8005632:	21fa      	movs	r1, #250	; 0xfa
 8005634:	20d2      	movs	r0, #210	; 0xd2
 8005636:	f7fe fa06 	bl	8003a46 <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 800563a:	2301      	movs	r3, #1
 800563c:	9302      	str	r3, [sp, #8]
 800563e:	2313      	movs	r3, #19
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	2303      	movs	r3, #3
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	2396      	movs	r3, #150	; 0x96
 8005648:	226e      	movs	r2, #110	; 0x6e
 800564a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800564e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005652:	f7fe f9f8 	bl	8003a46 <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 8005656:	2301      	movs	r3, #1
 8005658:	9302      	str	r3, [sp, #8]
 800565a:	2314      	movs	r3, #20
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	2303      	movs	r3, #3
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	2396      	movs	r3, #150	; 0x96
 8005664:	226e      	movs	r2, #110	; 0x6e
 8005666:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800566a:	f44f 709b 	mov.w	r0, #310	; 0x136
 800566e:	f7fe f9ea 	bl	8003a46 <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 8005672:	2304      	movs	r3, #4
 8005674:	9301      	str	r3, [sp, #4]
 8005676:	2301      	movs	r3, #1
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	23c8      	movs	r3, #200	; 0xc8
 800567c:	22a0      	movs	r2, #160	; 0xa0
 800567e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005682:	200a      	movs	r0, #10
 8005684:	f7fe f9df 	bl	8003a46 <lcdRect2>
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <showPage>:

void showPage(uint8_t pageNum){
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	2b05      	cmp	r3, #5
 800569e:	d821      	bhi.n	80056e4 <showPage+0x54>
 80056a0:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <showPage+0x18>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056c1 	.word	0x080056c1
 80056ac:	080056c7 	.word	0x080056c7
 80056b0:	080056cd 	.word	0x080056cd
 80056b4:	080056d3 	.word	0x080056d3
 80056b8:	080056d9 	.word	0x080056d9
 80056bc:	080056df 	.word	0x080056df
	case 0:
		showPage1();
 80056c0:	f7ff fd32 	bl	8005128 <showPage1>
		break;
 80056c4:	e00e      	b.n	80056e4 <showPage+0x54>
	case 1:
		showPage2();
 80056c6:	f7ff fd87 	bl	80051d8 <showPage2>
		break;
 80056ca:	e00b      	b.n	80056e4 <showPage+0x54>
	case 2:
		showPage3();
 80056cc:	f7ff fdbe 	bl	800524c <showPage3>
		break;
 80056d0:	e008      	b.n	80056e4 <showPage+0x54>
	case 3:
		showPage4();
 80056d2:	f7ff fdf5 	bl	80052c0 <showPage4>
		break;
 80056d6:	e005      	b.n	80056e4 <showPage+0x54>
	case 4:
		showPage5();
 80056d8:	f7ff fe2c 	bl	8005334 <showPage5>
		break;
 80056dc:	e002      	b.n	80056e4 <showPage+0x54>
	case 5:
		showPage6();
 80056de:	f7ff fe93 	bl	8005408 <showPage6>
		break;
 80056e2:	bf00      	nop
	}
}
 80056e4:	bf00      	nop
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <screentestSetup>:

void screentestSetup(void){
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80056f0:	f7ff fcf6 	bl	80050e0 <setDefaultClbcks>
}
 80056f4:	bf00      	nop
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <screentestMain>:

void screentestMain(void){
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 80056fe:	2300      	movs	r3, #0
 8005700:	603b      	str	r3, [r7, #0]
 8005702:	1d3b      	adds	r3, r7, #4
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	609a      	str	r2, [r3, #8]
 800570c:	60da      	str	r2, [r3, #12]
 800570e:	611a      	str	r2, [r3, #16]
 8005710:	615a      	str	r2, [r3, #20]
 8005712:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8005714:	4b04      	ldr	r3, [pc, #16]	; (8005728 <screentestMain+0x30>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ffb9 	bl	8005690 <showPage>

}
 800571e:	bf00      	nop
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20005b24 	.word	0x20005b24

0800572c <switchStwView>:
#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

uint8_t stwSubView = 0;
void switchStwView(void){
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
//	if(stwSubView<3){
//		stwSubView++;
//	} else {
//		stwSubView = 0;
//	}
		stwSubView++;
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <switchStwView+0x1c>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	3301      	adds	r3, #1
 8005736:	b2da      	uxtb	r2, r3
 8005738:	4b03      	ldr	r3, [pc, #12]	; (8005748 <switchStwView+0x1c>)
 800573a:	701a      	strb	r2, [r3, #0]
}
 800573c:	bf00      	nop
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20005b47 	.word	0x20005b47

0800574c <startStopwatch>:

void startStopwatch(){
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
	stwStart();
 8005750:	f7fe feb8 	bl	80044c4 <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8005754:	4b03      	ldr	r3, [pc, #12]	; (8005764 <startStopwatch+0x18>)
 8005756:	4a04      	ldr	r2, [pc, #16]	; (8005768 <startStopwatch+0x1c>)
 8005758:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 800575a:	4b04      	ldr	r3, [pc, #16]	; (800576c <startStopwatch+0x20>)
 800575c:	4a04      	ldr	r2, [pc, #16]	; (8005770 <startStopwatch+0x24>)
 800575e:	611a      	str	r2, [r3, #16]
}
 8005760:	bf00      	nop
 8005762:	bd80      	pop	{r7, pc}
 8005764:	200023e4 	.word	0x200023e4
 8005768:	08005775 	.word	0x08005775
 800576c:	200024bc 	.word	0x200024bc
 8005770:	080057a9 	.word	0x080057a9

08005774 <stopStopwatch>:
void stopStopwatch(){
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
	stwStop();
 8005778:	f7fe fec4 	bl	8004504 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 800577c:	4b03      	ldr	r3, [pc, #12]	; (800578c <stopStopwatch+0x18>)
 800577e:	4a04      	ldr	r2, [pc, #16]	; (8005790 <stopStopwatch+0x1c>)
 8005780:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8005782:	4b04      	ldr	r3, [pc, #16]	; (8005794 <stopStopwatch+0x20>)
 8005784:	4a04      	ldr	r2, [pc, #16]	; (8005798 <stopStopwatch+0x24>)
 8005786:	611a      	str	r2, [r3, #16]
}
 8005788:	bf00      	nop
 800578a:	bd80      	pop	{r7, pc}
 800578c:	200023e4 	.word	0x200023e4
 8005790:	0800574d 	.word	0x0800574d
 8005794:	200024bc 	.word	0x200024bc
 8005798:	0800579d 	.word	0x0800579d

0800579c <resetStopwatch>:
void resetStopwatch(){
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
	stwClear();
 80057a0:	f7fe febe 	bl	8004520 <stwClear>
//	stwT.clear();
}
 80057a4:	bf00      	nop
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <saveStopwatch>:
void saveStopwatch(){
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
	stwSave();
 80057ac:	f7fe ff2c 	bl	8004608 <stwSave>
}
 80057b0:	bf00      	nop
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &resetPos;
 80057b8:	4b10      	ldr	r3, [pc, #64]	; (80057fc <setDefaultClbcks+0x48>)
 80057ba:	4a11      	ldr	r2, [pc, #68]	; (8005800 <setDefaultClbcks+0x4c>)
 80057bc:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 80057be:	4b11      	ldr	r3, [pc, #68]	; (8005804 <setDefaultClbcks+0x50>)
 80057c0:	4a11      	ldr	r2, [pc, #68]	; (8005808 <setDefaultClbcks+0x54>)
 80057c2:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80057c4:	4b11      	ldr	r3, [pc, #68]	; (800580c <setDefaultClbcks+0x58>)
 80057c6:	4a12      	ldr	r2, [pc, #72]	; (8005810 <setDefaultClbcks+0x5c>)
 80057c8:	611a      	str	r2, [r3, #16]

	btn_B1.onSinglePressHandler = &switchStwView;
 80057ca:	4b12      	ldr	r3, [pc, #72]	; (8005814 <setDefaultClbcks+0x60>)
 80057cc:	4a12      	ldr	r2, [pc, #72]	; (8005818 <setDefaultClbcks+0x64>)
 80057ce:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 80057d0:	4b12      	ldr	r3, [pc, #72]	; (800581c <setDefaultClbcks+0x68>)
 80057d2:	791b      	ldrb	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d006      	beq.n	80057e6 <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 80057d8:	4b11      	ldr	r3, [pc, #68]	; (8005820 <setDefaultClbcks+0x6c>)
 80057da:	4a12      	ldr	r2, [pc, #72]	; (8005824 <setDefaultClbcks+0x70>)
 80057dc:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 80057de:	4b12      	ldr	r3, [pc, #72]	; (8005828 <setDefaultClbcks+0x74>)
 80057e0:	4a12      	ldr	r2, [pc, #72]	; (800582c <setDefaultClbcks+0x78>)
 80057e2:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 80057e4:	e005      	b.n	80057f2 <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 80057e6:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <setDefaultClbcks+0x6c>)
 80057e8:	4a11      	ldr	r2, [pc, #68]	; (8005830 <setDefaultClbcks+0x7c>)
 80057ea:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 80057ec:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <setDefaultClbcks+0x74>)
 80057ee:	4a11      	ldr	r2, [pc, #68]	; (8005834 <setDefaultClbcks+0x80>)
 80057f0:	611a      	str	r2, [r3, #16]
}
 80057f2:	bf00      	nop
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	20002504 	.word	0x20002504
 8005800:	08002479 	.word	0x08002479
 8005804:	2000239c 	.word	0x2000239c
 8005808:	08002459 	.word	0x08002459
 800580c:	2000242c 	.word	0x2000242c
 8005810:	08002469 	.word	0x08002469
 8005814:	20002474 	.word	0x20002474
 8005818:	0800572d 	.word	0x0800572d
 800581c:	20000064 	.word	0x20000064
 8005820:	200023e4 	.word	0x200023e4
 8005824:	08005775 	.word	0x08005775
 8005828:	200024bc 	.word	0x200024bc
 800582c:	080057a9 	.word	0x080057a9
 8005830:	0800574d 	.word	0x0800574d
 8005834:	0800579d 	.word	0x0800579d

08005838 <stwSetup>:

// initialize stopwatch values
struct stopwatch_t stw_val = {0, 0, 0, 0};
struct stopwatch_t stw_lap_val = {0, 0, 0, 0};

void stwSetup(void){
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800583c:	f7ff ffba 	bl	80057b4 <setDefaultClbcks>
}
 8005840:	bf00      	nop
 8005842:	bd80      	pop	{r7, pc}

08005844 <stwMain>:
// position of the top of the stopwatch total value
uint8_t stw_time_y_pos = 40;

// functions to execute when menu item entered
void stwMain(void){
 8005844:	b590      	push	{r4, r7, lr}
 8005846:	b091      	sub	sp, #68	; 0x44
 8005848:	af04      	add	r7, sp, #16
//	lcdPutIcon(2, 200, accept_icon);
//	lcdPutIcon(370, 106, play_pause_icon);
//	lcdPutIcon(2, 106, cancel_icon);

	// statusbar
	lcdPutIcon(320, 5, full_battery_icon);
 800584a:	4aa4      	ldr	r2, [pc, #656]	; (8005adc <stwMain+0x298>)
 800584c:	2105      	movs	r1, #5
 800584e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8005852:	f7fd f83f 	bl	80028d4 <lcdPutIcon>
	char timeString[6] = {0};
 8005856:	2300      	movs	r3, #0
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28
 800585a:	2300      	movs	r3, #0
 800585c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	sprintf(&timeString, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 800585e:	4ba0      	ldr	r3, [pc, #640]	; (8005ae0 <stwMain+0x29c>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	4b9e      	ldr	r3, [pc, #632]	; (8005ae0 <stwMain+0x29c>)
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800586c:	499d      	ldr	r1, [pc, #628]	; (8005ae4 <stwMain+0x2a0>)
 800586e:	f00a fce1 	bl	8010234 <siprintf>
	lcdPutStr(400 - 5 - (*font_12_zekton.font_Width) * strlen(timeString), 5, timeString, font_12_zekton);
 8005872:	2309      	movs	r3, #9
 8005874:	b29c      	uxth	r4, r3
 8005876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800587a:	4618      	mov	r0, r3
 800587c:	f7fa fcb8 	bl	80001f0 <strlen>
 8005880:	4603      	mov	r3, r0
 8005882:	b29b      	uxth	r3, r3
 8005884:	fb14 f303 	smulbb	r3, r4, r3
 8005888:	b29b      	uxth	r3, r3
 800588a:	f5c3 73c5 	rsb	r3, r3, #394	; 0x18a
 800588e:	3301      	adds	r3, #1
 8005890:	b298      	uxth	r0, r3
 8005892:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005896:	4b94      	ldr	r3, [pc, #592]	; (8005ae8 <stwMain+0x2a4>)
 8005898:	2105      	movs	r1, #5
 800589a:	f7fd f8e3 	bl	8002a64 <lcdPutStr>
	char tempStr2[30] = {0};
 800589e:	2300      	movs	r3, #0
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	f107 030c 	add.w	r3, r7, #12
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	605a      	str	r2, [r3, #4]
 80058ac:	609a      	str	r2, [r3, #8]
 80058ae:	60da      	str	r2, [r3, #12]
 80058b0:	611a      	str	r2, [r3, #16]
 80058b2:	615a      	str	r2, [r3, #20]
 80058b4:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr2, "Stopwatch");
 80058b6:	f107 0308 	add.w	r3, r7, #8
 80058ba:	498c      	ldr	r1, [pc, #560]	; (8005aec <stwMain+0x2a8>)
 80058bc:	4618      	mov	r0, r3
 80058be:	f00a fcb9 	bl	8010234 <siprintf>
	lcdPutStr(5, 5, tempStr2, font_12_zekton);
 80058c2:	f107 0208 	add.w	r2, r7, #8
 80058c6:	4b88      	ldr	r3, [pc, #544]	; (8005ae8 <stwMain+0x2a4>)
 80058c8:	2105      	movs	r1, #5
 80058ca:	2005      	movs	r0, #5
 80058cc:	f7fd f8ca 	bl	8002a64 <lcdPutStr>

	// update stopwatch value
	getStw(&stw_val, &stwS);
 80058d0:	4987      	ldr	r1, [pc, #540]	; (8005af0 <stwMain+0x2ac>)
 80058d2:	4888      	ldr	r0, [pc, #544]	; (8005af4 <stwMain+0x2b0>)
 80058d4:	f7fe fe40 	bl	8004558 <getStw>

	// main STW view
	//show hours if exist
	if(stw_val.hours != 0){
 80058d8:	4b86      	ldr	r3, [pc, #536]	; (8005af4 <stwMain+0x2b0>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d025      	beq.n	800592c <stwMain+0xe8>
//	if(1){
		sprintf(&tempStr2, "%02dh %02d'%02d\"", stw_val.hours, stw_val.min, stw_val.sec);
 80058e0:	4b84      	ldr	r3, [pc, #528]	; (8005af4 <stwMain+0x2b0>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	4b83      	ldr	r3, [pc, #524]	; (8005af4 <stwMain+0x2b0>)
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	4619      	mov	r1, r3
 80058ec:	4b81      	ldr	r3, [pc, #516]	; (8005af4 <stwMain+0x2b0>)
 80058ee:	789b      	ldrb	r3, [r3, #2]
 80058f0:	f107 0008 	add.w	r0, r7, #8
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	460b      	mov	r3, r1
 80058f8:	497f      	ldr	r1, [pc, #508]	; (8005af8 <stwMain+0x2b4>)
 80058fa:	f00a fc9b 	bl	8010234 <siprintf>
		lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), stw_time_y_pos, tempStr2, zekton45font);
 80058fe:	2322      	movs	r3, #34	; 0x22
 8005900:	b29c      	uxth	r4, r3
 8005902:	f107 0308 	add.w	r3, r7, #8
 8005906:	4618      	mov	r0, r3
 8005908:	f7fa fc72 	bl	80001f0 <strlen>
 800590c:	4603      	mov	r3, r0
 800590e:	b29b      	uxth	r3, r3
 8005910:	fb14 f303 	smulbb	r3, r4, r3
 8005914:	b29b      	uxth	r3, r3
 8005916:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 800591a:	b298      	uxth	r0, r3
 800591c:	4b77      	ldr	r3, [pc, #476]	; (8005afc <stwMain+0x2b8>)
 800591e:	7819      	ldrb	r1, [r3, #0]
 8005920:	f107 0208 	add.w	r2, r7, #8
 8005924:	4b76      	ldr	r3, [pc, #472]	; (8005b00 <stwMain+0x2bc>)
 8005926:	f7fd f89d 	bl	8002a64 <lcdPutStr>
 800592a:	e025      	b.n	8005978 <stwMain+0x134>
//	} else if(stw_val.min != 0){
	} else {
		sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 800592c:	4b71      	ldr	r3, [pc, #452]	; (8005af4 <stwMain+0x2b0>)
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	461a      	mov	r2, r3
 8005932:	4b70      	ldr	r3, [pc, #448]	; (8005af4 <stwMain+0x2b0>)
 8005934:	789b      	ldrb	r3, [r3, #2]
 8005936:	4619      	mov	r1, r3
 8005938:	4b6e      	ldr	r3, [pc, #440]	; (8005af4 <stwMain+0x2b0>)
 800593a:	78db      	ldrb	r3, [r3, #3]
 800593c:	f107 0008 	add.w	r0, r7, #8
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	460b      	mov	r3, r1
 8005944:	496f      	ldr	r1, [pc, #444]	; (8005b04 <stwMain+0x2c0>)
 8005946:	f00a fc75 	bl	8010234 <siprintf>
		lcdPutStr(365-(*(zekton45font.font_Width)*strlen(tempStr2)), stw_time_y_pos, tempStr2, zekton45font);
 800594a:	2322      	movs	r3, #34	; 0x22
 800594c:	b29c      	uxth	r4, r3
 800594e:	f107 0308 	add.w	r3, r7, #8
 8005952:	4618      	mov	r0, r3
 8005954:	f7fa fc4c 	bl	80001f0 <strlen>
 8005958:	4603      	mov	r3, r0
 800595a:	b29b      	uxth	r3, r3
 800595c:	fb14 f303 	smulbb	r3, r4, r3
 8005960:	b29b      	uxth	r3, r3
 8005962:	f5c3 73b6 	rsb	r3, r3, #364	; 0x16c
 8005966:	3301      	adds	r3, #1
 8005968:	b298      	uxth	r0, r3
 800596a:	4b64      	ldr	r3, [pc, #400]	; (8005afc <stwMain+0x2b8>)
 800596c:	7819      	ldrb	r1, [r3, #0]
 800596e:	f107 0208 	add.w	r2, r7, #8
 8005972:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <stwMain+0x2bc>)
 8005974:	f7fd f876 	bl	8002a64 <lcdPutStr>
//		sprintf(&tempStr2, "%02d.%02d\"", stw_val.sec, stw_val.csec);
//		lcdPutStr(365-(*(zekton45font.font_Width)*strlen(tempStr2)), stw_time_y_pos, tempStr2, zekton45font);
//	}

	stw_counter_t lapTimeCnt;
	switch(stwSubView){
 8005978:	4b63      	ldr	r3, [pc, #396]	; (8005b08 <stwMain+0x2c4>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <stwMain+0x144>
 8005980:	2b01      	cmp	r3, #1
 8005982:	f000 80a7 	beq.w	8005ad4 <stwMain+0x290>
 8005986:	e117      	b.n	8005bb8 <stwMain+0x374>
//		case 0:
//			sprintf(&tempStr2, "Stopwatch ready", getLapNum());
//			lcdPutStr(55, 100, tempStr2, zekton24font);
//			break;
		case 0:
			if(getLapNum()>0){
 8005988:	f7fe fd90 	bl	80044ac <getLapNum>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	dd3e      	ble.n	8005a10 <stwMain+0x1cc>
				sprintf(&tempStr2, "LAP %d", getLapNum());
 8005992:	f7fe fd8b 	bl	80044ac <getLapNum>
 8005996:	4602      	mov	r2, r0
 8005998:	f107 0308 	add.w	r3, r7, #8
 800599c:	495b      	ldr	r1, [pc, #364]	; (8005b0c <stwMain+0x2c8>)
 800599e:	4618      	mov	r0, r3
 80059a0:	f00a fc48 	bl	8010234 <siprintf>
				lcdPutStr(250, 112, tempStr2, font_12_zekton);
 80059a4:	f107 0208 	add.w	r2, r7, #8
 80059a8:	4b4f      	ldr	r3, [pc, #316]	; (8005ae8 <stwMain+0x2a4>)
 80059aa:	2170      	movs	r1, #112	; 0x70
 80059ac:	20fa      	movs	r0, #250	; 0xfa
 80059ae:	f7fd f859 	bl	8002a64 <lcdPutStr>
				counterDiff(&lapTimeCnt, stwS.cnt, &stw_splits[getLapNum()-1]);
 80059b2:	4b4f      	ldr	r3, [pc, #316]	; (8005af0 <stwMain+0x2ac>)
 80059b4:	681c      	ldr	r4, [r3, #0]
 80059b6:	f7fe fd79 	bl	80044ac <getLapNum>
 80059ba:	4603      	mov	r3, r0
 80059bc:	3b01      	subs	r3, #1
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4a53      	ldr	r2, [pc, #332]	; (8005b10 <stwMain+0x2cc>)
 80059c2:	441a      	add	r2, r3
 80059c4:	463b      	mov	r3, r7
 80059c6:	4621      	mov	r1, r4
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe fe5f 	bl	800468c <counterDiff>
				counterToStopwatch(&stw_lap_val, &lapTimeCnt);
 80059ce:	463b      	mov	r3, r7
 80059d0:	4619      	mov	r1, r3
 80059d2:	4850      	ldr	r0, [pc, #320]	; (8005b14 <stwMain+0x2d0>)
 80059d4:	f7fe fe92 	bl	80046fc <counterToStopwatch>
				stwprintf(&tempStr2, &stw_lap_val);
 80059d8:	f107 0308 	add.w	r3, r7, #8
 80059dc:	494d      	ldr	r1, [pc, #308]	; (8005b14 <stwMain+0x2d0>)
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe fee0 	bl	80047a4 <stwprintf>
				lcdPutStr(60, 100, tempStr2, zekton24font);
 80059e4:	f107 0208 	add.w	r2, r7, #8
 80059e8:	4b4b      	ldr	r3, [pc, #300]	; (8005b18 <stwMain+0x2d4>)
 80059ea:	2164      	movs	r1, #100	; 0x64
 80059ec:	203c      	movs	r0, #60	; 0x3c
 80059ee:	f7fd f839 	bl	8002a64 <lcdPutStr>
				lcdRoundedRect2(240, 305, 110, 124, 2, LCD_RECT_PATTERN_FILL, 0, 2);
 80059f2:	2302      	movs	r3, #2
 80059f4:	9303      	str	r3, [sp, #12]
 80059f6:	2300      	movs	r3, #0
 80059f8:	9302      	str	r3, [sp, #8]
 80059fa:	2301      	movs	r3, #1
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	2302      	movs	r3, #2
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	237c      	movs	r3, #124	; 0x7c
 8005a04:	226e      	movs	r2, #110	; 0x6e
 8005a06:	f240 1131 	movw	r1, #305	; 0x131
 8005a0a:	20f0      	movs	r0, #240	; 0xf0
 8005a0c:	f7fd fe1b 	bl	8003646 <lcdRoundedRect2>
			}
			for(uint8_t i = 1; i<=4; i++){
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005a16:	e058      	b.n	8005aca <stwMain+0x286>
				if(getLapNum()>i){
 8005a18:	f7fe fd48 	bl	80044ac <getLapNum>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a22:	429a      	cmp	r2, r3
 8005a24:	dd4c      	ble.n	8005ac0 <stwMain+0x27c>
					sprintf(&tempStr2, "LAP %d", getLapNum()-i);
 8005a26:	f7fe fd41 	bl	80044ac <getLapNum>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a30:	1ad2      	subs	r2, r2, r3
 8005a32:	f107 0308 	add.w	r3, r7, #8
 8005a36:	4935      	ldr	r1, [pc, #212]	; (8005b0c <stwMain+0x2c8>)
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f00a fbfb 	bl	8010234 <siprintf>
					lcdPutStr(250, 112+i*28, tempStr2, font_12_zekton);
 8005a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a42:	461a      	mov	r2, r3
 8005a44:	00d2      	lsls	r2, r2, #3
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	3370      	adds	r3, #112	; 0x70
 8005a4e:	b2d9      	uxtb	r1, r3
 8005a50:	f107 0208 	add.w	r2, r7, #8
 8005a54:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <stwMain+0x2a4>)
 8005a56:	20fa      	movs	r0, #250	; 0xfa
 8005a58:	f7fd f804 	bl	8002a64 <lcdPutStr>
					counterDiff(&lapTimeCnt, &stw_splits[getLapNum()-i], &stw_splits[getLapNum()-1-i]);
 8005a5c:	f7fe fd26 	bl	80044ac <getLapNum>
 8005a60:	4602      	mov	r2, r0
 8005a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <stwMain+0x2cc>)
 8005a6c:	189c      	adds	r4, r3, r2
 8005a6e:	f7fe fd1d 	bl	80044ac <getLapNum>
 8005a72:	4603      	mov	r3, r0
 8005a74:	1e5a      	subs	r2, r3, #1
 8005a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <stwMain+0x2cc>)
 8005a80:	441a      	add	r2, r3
 8005a82:	463b      	mov	r3, r7
 8005a84:	4621      	mov	r1, r4
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe fe00 	bl	800468c <counterDiff>
					counterToStopwatch(&stw_lap_val, &lapTimeCnt);
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4820      	ldr	r0, [pc, #128]	; (8005b14 <stwMain+0x2d0>)
 8005a92:	f7fe fe33 	bl	80046fc <counterToStopwatch>
					stwprintf(&tempStr2, &stw_lap_val);
 8005a96:	f107 0308 	add.w	r3, r7, #8
 8005a9a:	491e      	ldr	r1, [pc, #120]	; (8005b14 <stwMain+0x2d0>)
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe fe81 	bl	80047a4 <stwprintf>
					lcdPutStr(60, 100+28*i, tempStr2, zekton24font);
 8005aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	00d2      	lsls	r2, r2, #3
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	3364      	adds	r3, #100	; 0x64
 8005ab2:	b2d9      	uxtb	r1, r3
 8005ab4:	f107 0208 	add.w	r2, r7, #8
 8005ab8:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <stwMain+0x2d4>)
 8005aba:	203c      	movs	r0, #60	; 0x3c
 8005abc:	f7fc ffd2 	bl	8002a64 <lcdPutStr>
			for(uint8_t i = 1; i<=4; i++){
 8005ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d9a2      	bls.n	8005a18 <stwMain+0x1d4>
				}
			}
			break;
 8005ad2:	e075      	b.n	8005bc0 <stwMain+0x37c>
		case 1:
			// split/lap table
			for(uint8_t i = 1; i<=5; i++){
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005ada:	e068      	b.n	8005bae <stwMain+0x36a>
 8005adc:	0801c1c4 	.word	0x0801c1c4
 8005ae0:	2000548c 	.word	0x2000548c
 8005ae4:	080137ec 	.word	0x080137ec
 8005ae8:	0801c1fc 	.word	0x0801c1fc
 8005aec:	080137f8 	.word	0x080137f8
 8005af0:	20000064 	.word	0x20000064
 8005af4:	20005b48 	.word	0x20005b48
 8005af8:	08013804 	.word	0x08013804
 8005afc:	20000076 	.word	0x20000076
 8005b00:	0801eaec 	.word	0x0801eaec
 8005b04:	08013818 	.word	0x08013818
 8005b08:	20005b47 	.word	0x20005b47
 8005b0c:	08013828 	.word	0x08013828
 8005b10:	20005840 	.word	0x20005840
 8005b14:	20005b4c 	.word	0x20005b4c
 8005b18:	0801cc84 	.word	0x0801cc84
				if(getLapNum()>i){
 8005b1c:	f7fe fcc6 	bl	80044ac <getLapNum>
 8005b20:	4602      	mov	r2, r0
 8005b22:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b26:	429a      	cmp	r2, r3
 8005b28:	dd3c      	ble.n	8005ba4 <stwMain+0x360>
					counterToStopwatch(&stw_lap_val, &stw_splits[getLapNum()-i]);
 8005b2a:	f7fe fcbf 	bl	80044ac <getLapNum>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4a23      	ldr	r2, [pc, #140]	; (8005bc8 <stwMain+0x384>)
 8005b3a:	4413      	add	r3, r2
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4823      	ldr	r0, [pc, #140]	; (8005bcc <stwMain+0x388>)
 8005b40:	f7fe fddc 	bl	80046fc <counterToStopwatch>
					stwprintf(&tempStr2, &stw_lap_val);
 8005b44:	f107 0308 	add.w	r3, r7, #8
 8005b48:	4920      	ldr	r1, [pc, #128]	; (8005bcc <stwMain+0x388>)
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe fe2a 	bl	80047a4 <stwprintf>
					lcdPutStr(60, 100+28*(i-1), tempStr2, zekton24font);
 8005b50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b54:	461a      	mov	r2, r3
 8005b56:	00d2      	lsls	r2, r2, #3
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	3348      	adds	r3, #72	; 0x48
 8005b60:	b2d9      	uxtb	r1, r3
 8005b62:	f107 0208 	add.w	r2, r7, #8
 8005b66:	4b1a      	ldr	r3, [pc, #104]	; (8005bd0 <stwMain+0x38c>)
 8005b68:	203c      	movs	r0, #60	; 0x3c
 8005b6a:	f7fc ff7b 	bl	8002a64 <lcdPutStr>

					sprintf(&tempStr2, "SPLIT %d", getLapNum()-i);
 8005b6e:	f7fe fc9d 	bl	80044ac <getLapNum>
 8005b72:	4602      	mov	r2, r0
 8005b74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b78:	1ad2      	subs	r2, r2, r3
 8005b7a:	f107 0308 	add.w	r3, r7, #8
 8005b7e:	4915      	ldr	r1, [pc, #84]	; (8005bd4 <stwMain+0x390>)
 8005b80:	4618      	mov	r0, r3
 8005b82:	f00a fb57 	bl	8010234 <siprintf>
					lcdPutStr(250, 112+(i-1)*28, tempStr2, font_12_zekton);
 8005b86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	00d2      	lsls	r2, r2, #3
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	3354      	adds	r3, #84	; 0x54
 8005b96:	b2d9      	uxtb	r1, r3
 8005b98:	f107 0208 	add.w	r2, r7, #8
 8005b9c:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <stwMain+0x394>)
 8005b9e:	20fa      	movs	r0, #250	; 0xfa
 8005ba0:	f7fc ff60 	bl	8002a64 <lcdPutStr>
			for(uint8_t i = 1; i<=5; i++){
 8005ba4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ba8:	3301      	adds	r3, #1
 8005baa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005bae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005bb2:	2b05      	cmp	r3, #5
 8005bb4:	d9b2      	bls.n	8005b1c <stwMain+0x2d8>

				}
			}
			break;
 8005bb6:	e003      	b.n	8005bc0 <stwMain+0x37c>
		default:
			stwSubView = 0;
 8005bb8:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <stwMain+0x398>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]





}
 8005bbe:	bf00      	nop
 8005bc0:	bf00      	nop
 8005bc2:	3734      	adds	r7, #52	; 0x34
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd90      	pop	{r4, r7, pc}
 8005bc8:	20005840 	.word	0x20005840
 8005bcc:	20005b4c 	.word	0x20005b4c
 8005bd0:	0801cc84 	.word	0x0801cc84
 8005bd4:	08013830 	.word	0x08013830
 8005bd8:	0801c1fc 	.word	0x0801c1fc
 8005bdc:	20005b47 	.word	0x20005b47

08005be0 <setDefaultClbcks>:
// fonts
#include "fonts/fonts.h"



static void setDefaultClbcks(void){
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8005be4:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <setDefaultClbcks+0x1c>)
 8005be6:	4a06      	ldr	r2, [pc, #24]	; (8005c00 <setDefaultClbcks+0x20>)
 8005be8:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <setDefaultClbcks+0x24>)
 8005bec:	4a06      	ldr	r2, [pc, #24]	; (8005c08 <setDefaultClbcks+0x28>)
 8005bee:	611a      	str	r2, [r3, #16]

}
 8005bf0:	bf00      	nop
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	2000239c 	.word	0x2000239c
 8005c00:	08002459 	.word	0x08002459
 8005c04:	2000242c 	.word	0x2000242c
 8005c08:	08002469 	.word	0x08002469

08005c0c <faceSetup>:
}
static void setDateAction(void){
	guiApplyView(&dateInputModule);
}

void faceSetup(void){
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005c10:	f7ff ffe6 	bl	8005be0 <setDefaultClbcks>
}
 8005c14:	bf00      	nop
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <faceMain>:

void faceMain(void){
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b0b1      	sub	sp, #196	; 0xc4
 8005c1c:	af00      	add	r7, sp, #0

	char temperature[30] = {0};
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	605a      	str	r2, [r3, #4]
 8005c2e:	609a      	str	r2, [r3, #8]
 8005c30:	60da      	str	r2, [r3, #12]
 8005c32:	611a      	str	r2, [r3, #16]
 8005c34:	615a      	str	r2, [r3, #20]
 8005c36:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 8005c38:	4b82      	ldr	r3, [pc, #520]	; (8005e44 <faceMain+0x22c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fa fc93 	bl	8000568 <__aeabi_f2d>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8005c4a:	497f      	ldr	r1, [pc, #508]	; (8005e48 <faceMain+0x230>)
 8005c4c:	f00a faf2 	bl	8010234 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8005c50:	2314      	movs	r3, #20
 8005c52:	b29c      	uxth	r4, r3
 8005c54:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fa fac9 	bl	80001f0 <strlen>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f1c3 030d 	rsb	r3, r3, #13
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	fb14 f303 	smulbb	r3, r4, r3
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3323      	adds	r3, #35	; 0x23
 8005c6e:	b298      	uxth	r0, r3
 8005c70:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005c74:	4b75      	ldr	r3, [pc, #468]	; (8005e4c <faceMain+0x234>)
 8005c76:	210e      	movs	r1, #14
 8005c78:	f7fc fef4 	bl	8002a64 <lcdPutStr>
	char baroStr[30] = {0};
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c82:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	605a      	str	r2, [r3, #4]
 8005c8c:	609a      	str	r2, [r3, #8]
 8005c8e:	60da      	str	r2, [r3, #12]
 8005c90:	611a      	str	r2, [r3, #16]
 8005c92:	615a      	str	r2, [r3, #20]
 8005c94:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 8005c96:	4b6b      	ldr	r3, [pc, #428]	; (8005e44 <faceMain+0x22c>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8005e50 <faceMain+0x238>
 8005ca6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005caa:	ee16 0a90 	vmov	r0, s13
 8005cae:	f7fa fc5b 	bl	8000568 <__aeabi_f2d>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8005cba:	4966      	ldr	r1, [pc, #408]	; (8005e54 <faceMain+0x23c>)
 8005cbc:	f00a faba 	bl	8010234 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 8005cc0:	2314      	movs	r3, #20
 8005cc2:	b29c      	uxth	r4, r3
 8005cc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fa fa91 	bl	80001f0 <strlen>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f1c3 030d 	rsb	r3, r3, #13
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	fb14 f303 	smulbb	r3, r4, r3
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3323      	adds	r3, #35	; 0x23
 8005cde:	b298      	uxth	r0, r3
 8005ce0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005ce4:	4b59      	ldr	r3, [pc, #356]	; (8005e4c <faceMain+0x234>)
 8005ce6:	212a      	movs	r1, #42	; 0x2a
 8005ce8:	f7fc febc 	bl	8002a64 <lcdPutStr>

	char fracStr[30] = {0};
 8005cec:	2300      	movs	r3, #0
 8005cee:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	609a      	str	r2, [r3, #8]
 8005cfc:	60da      	str	r2, [r3, #12]
 8005cfe:	611a      	str	r2, [r3, #16]
 8005d00:	615a      	str	r2, [r3, #20]
 8005d02:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 8005d04:	2300      	movs	r3, #0
 8005d06:	643b      	str	r3, [r7, #64]	; 0x40
 8005d08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	605a      	str	r2, [r3, #4]
 8005d12:	609a      	str	r2, [r3, #8]
 8005d14:	60da      	str	r2, [r3, #12]
 8005d16:	611a      	str	r2, [r3, #16]
 8005d18:	615a      	str	r2, [r3, #20]
 8005d1a:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	623b      	str	r3, [r7, #32]
 8005d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	605a      	str	r2, [r3, #4]
 8005d2a:	609a      	str	r2, [r3, #8]
 8005d2c:	60da      	str	r2, [r3, #12]
 8005d2e:	611a      	str	r2, [r3, #16]
 8005d30:	615a      	str	r2, [r3, #20]
 8005d32:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 8005d34:	4b48      	ldr	r3, [pc, #288]	; (8005e58 <faceMain+0x240>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d3e:	4947      	ldr	r1, [pc, #284]	; (8005e5c <faceMain+0x244>)
 8005d40:	4618      	mov	r0, r3
 8005d42:	f00a fa77 	bl	8010234 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 8005d46:	4b44      	ldr	r3, [pc, #272]	; (8005e58 <faceMain+0x240>)
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f107 0320 	add.w	r3, r7, #32
 8005d50:	4942      	ldr	r1, [pc, #264]	; (8005e5c <faceMain+0x244>)
 8005d52:	4618      	mov	r0, r3
 8005d54:	f00a fa6e 	bl	8010234 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 8005d58:	4b3f      	ldr	r3, [pc, #252]	; (8005e58 <faceMain+0x240>)
 8005d5a:	789b      	ldrb	r3, [r3, #2]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005d62:	493e      	ldr	r1, [pc, #248]	; (8005e5c <faceMain+0x244>)
 8005d64:	4618      	mov	r0, r3
 8005d66:	f00a fa65 	bl	8010234 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 8005d6a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005d6e:	4b3c      	ldr	r3, [pc, #240]	; (8005e60 <faceMain+0x248>)
 8005d70:	214c      	movs	r1, #76	; 0x4c
 8005d72:	2014      	movs	r0, #20
 8005d74:	f7fc fe76 	bl	8002a64 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 8005d78:	f107 0220 	add.w	r2, r7, #32
 8005d7c:	4b38      	ldr	r3, [pc, #224]	; (8005e60 <faceMain+0x248>)
 8005d7e:	214c      	movs	r1, #76	; 0x4c
 8005d80:	20aa      	movs	r0, #170	; 0xaa
 8005d82:	f7fc fe6f 	bl	8002a64 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 8005d86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d8a:	4b36      	ldr	r3, [pc, #216]	; (8005e64 <faceMain+0x24c>)
 8005d8c:	214c      	movs	r1, #76	; 0x4c
 8005d8e:	f240 103b 	movw	r0, #315	; 0x13b
 8005d92:	f7fc fe67 	bl	8002a64 <lcdPutStr>

	char buffString[30] = {0};
 8005d96:	2300      	movs	r3, #0
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	1d3b      	adds	r3, r7, #4
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	609a      	str	r2, [r3, #8]
 8005da4:	60da      	str	r2, [r3, #12]
 8005da6:	611a      	str	r2, [r3, #16]
 8005da8:	615a      	str	r2, [r3, #20]
 8005daa:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8005dac:	463b      	mov	r3, r7
 8005dae:	492e      	ldr	r1, [pc, #184]	; (8005e68 <faceMain+0x250>)
 8005db0:	4618      	mov	r0, r3
 8005db2:	f00a fa3f 	bl	8010234 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 8005db6:	4b2d      	ldr	r3, [pc, #180]	; (8005e6c <faceMain+0x254>)
 8005db8:	785b      	ldrb	r3, [r3, #1]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	4b2c      	ldr	r3, [pc, #176]	; (8005e70 <faceMain+0x258>)
 8005dbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005dc2:	4b2a      	ldr	r3, [pc, #168]	; (8005e6c <faceMain+0x254>)
 8005dc4:	78db      	ldrb	r3, [r3, #3]
 8005dc6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005dca:	4638      	mov	r0, r7
 8005dcc:	4929      	ldr	r1, [pc, #164]	; (8005e74 <faceMain+0x25c>)
 8005dce:	f00a fa31 	bl	8010234 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8005dd2:	2314      	movs	r3, #20
 8005dd4:	b29c      	uxth	r4, r3
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fa fa09 	bl	80001f0 <strlen>
 8005dde:	4603      	mov	r3, r0
 8005de0:	f1c3 030d 	rsb	r3, r3, #13
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	fb14 f303 	smulbb	r3, r4, r3
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3323      	adds	r3, #35	; 0x23
 8005dee:	b298      	uxth	r0, r3
 8005df0:	463a      	mov	r2, r7
 8005df2:	4b16      	ldr	r3, [pc, #88]	; (8005e4c <faceMain+0x234>)
 8005df4:	21ae      	movs	r1, #174	; 0xae
 8005df6:	f7fc fe35 	bl	8002a64 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 8005dfa:	4b1c      	ldr	r3, [pc, #112]	; (8005e6c <faceMain+0x254>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4b1d      	ldr	r3, [pc, #116]	; (8005e78 <faceMain+0x260>)
 8005e02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e06:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <faceMain+0x254>)
 8005e08:	789b      	ldrb	r3, [r3, #2]
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	4919      	ldr	r1, [pc, #100]	; (8005e74 <faceMain+0x25c>)
 8005e0e:	f00a fa11 	bl	8010234 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8005e12:	2314      	movs	r3, #20
 8005e14:	b29c      	uxth	r4, r3
 8005e16:	463b      	mov	r3, r7
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fa f9e9 	bl	80001f0 <strlen>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f1c3 030d 	rsb	r3, r3, #13
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	fb14 f303 	smulbb	r3, r4, r3
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3323      	adds	r3, #35	; 0x23
 8005e2e:	b298      	uxth	r0, r3
 8005e30:	463a      	mov	r2, r7
 8005e32:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <faceMain+0x234>)
 8005e34:	21ca      	movs	r1, #202	; 0xca
 8005e36:	f7fc fe15 	bl	8002a64 <lcdPutStr>
}
 8005e3a:	bf00      	nop
 8005e3c:	37c4      	adds	r7, #196	; 0xc4
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd90      	pop	{r4, r7, pc}
 8005e42:	bf00      	nop
 8005e44:	2000238c 	.word	0x2000238c
 8005e48:	080138f4 	.word	0x080138f4
 8005e4c:	08024134 	.word	0x08024134
 8005e50:	42c80000 	.word	0x42c80000
 8005e54:	080138fc 	.word	0x080138fc
 8005e58:	2000548c 	.word	0x2000548c
 8005e5c:	08013908 	.word	0x08013908
 8005e60:	0802b5e4 	.word	0x0802b5e4
 8005e64:	08025f9c 	.word	0x08025f9c
 8005e68:	08013910 	.word	0x08013910
 8005e6c:	200054a0 	.word	0x200054a0
 8005e70:	20000098 	.word	0x20000098
 8005e74:	08013920 	.word	0x08013920
 8005e78:	20000078 	.word	0x20000078

08005e7c <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	4613      	mov	r3, r2
 8005e88:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	88fa      	ldrh	r2, [r7, #6]
 8005e94:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	895b      	ldrh	r3, [r3, #10]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f009 faec 	bl	800f480 <malloc>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	461a      	mov	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	741a      	strb	r2, [r3, #16]
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	891a      	ldrh	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	895b      	ldrh	r3, [r3, #10]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	bf0c      	ite	eq
 8005ee4:	2301      	moveq	r3, #1
 8005ee6:	2300      	movne	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b082      	sub	sp, #8
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff ffe5 	bl	8005ed0 <cbuf_isFull>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02b      	beq.n	8005f64 <cbuf_ovw+0x6e>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	88db      	ldrh	r3, [r3, #6]
 8005f14:	4619      	mov	r1, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	fb01 f303 	mul.w	r3, r1, r3
 8005f1e:	18d0      	adds	r0, r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	f009 faba 	bl	800f4a0 <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	88db      	ldrh	r3, [r3, #6]
 8005f30:	3301      	adds	r3, #1
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	8952      	ldrh	r2, [r2, #10]
 8005f36:	fb93 f1f2 	sdiv	r1, r3, r2
 8005f3a:	fb01 f202 	mul.w	r2, r1, r2
 8005f3e:	1a9b      	subs	r3, r3, r2
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	889b      	ldrh	r3, [r3, #4]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	8952      	ldrh	r2, [r2, #10]
 8005f50:	fb93 f1f2 	sdiv	r1, r3, r2
 8005f54:	fb01 f202 	mul.w	r2, r1, r2
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	809a      	strh	r2, [r3, #4]
		return 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e023      	b.n	8005fac <cbuf_ovw+0xb6>
	} else{
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	88db      	ldrh	r3, [r3, #6]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	18d0      	adds	r0, r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	f009 fa8e 	bl	800f4a0 <memcpy>
		b->elemNum++;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	891b      	ldrh	r3, [r3, #8]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	88db      	ldrh	r3, [r3, #6]
 8005f94:	3301      	adds	r3, #1
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	8952      	ldrh	r2, [r2, #10]
 8005f9a:	fb93 f1f2 	sdiv	r1, r3, r2
 8005f9e:	fb01 f202 	mul.w	r2, r1, r2
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	80da      	strh	r2, [r3, #6]
		return 1;
 8005faa:	2301      	movs	r3, #1
	}
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	887a      	ldrh	r2, [r7, #2]
 8005fc4:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	895b      	ldrh	r3, [r3, #10]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f009 fa57 	bl	800f480 <malloc>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	731a      	strb	r2, [r3, #12]
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	891a      	ldrh	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	895b      	ldrh	r3, [r3, #10]
 800600a:	429a      	cmp	r2, r3
 800600c:	bf0c      	ite	eq
 800600e:	2301      	moveq	r3, #1
 8006010:	2300      	movne	r3, #0
 8006012:	b2db      	uxtb	r3, r3
}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff ffe5 	bl	8005ffa <ring_buffer_full>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d023      	beq.n	800607e <add_ovw_ring_buffer+0x5e>
		b->values[b->tail] = value;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	88db      	ldrh	r3, [r3, #6]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	88db      	ldrh	r3, [r3, #6]
 800604a:	3301      	adds	r3, #1
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	8952      	ldrh	r2, [r2, #10]
 8006050:	fb93 f1f2 	sdiv	r1, r3, r2
 8006054:	fb01 f202 	mul.w	r2, r1, r2
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	889b      	ldrh	r3, [r3, #4]
 8006064:	3301      	adds	r3, #1
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	8952      	ldrh	r2, [r2, #10]
 800606a:	fb93 f1f2 	sdiv	r1, r3, r2
 800606e:	fb01 f202 	mul.w	r2, r1, r2
 8006072:	1a9b      	subs	r3, r3, r2
 8006074:	b29a      	uxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	809a      	strh	r2, [r3, #4]
		return 0;
 800607a:	2300      	movs	r3, #0
 800607c:	e01b      	b.n	80060b6 <add_ovw_ring_buffer+0x96>
	} else{
		b->values[b->tail] = value;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	88db      	ldrh	r3, [r3, #6]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	891b      	ldrh	r3, [r3, #8]
 8006092:	3301      	adds	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	88db      	ldrh	r3, [r3, #6]
 800609e:	3301      	adds	r3, #1
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	8952      	ldrh	r2, [r2, #10]
 80060a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80060a8:	fb01 f202 	mul.w	r2, r1, r2
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	80da      	strh	r2, [r3, #6]
		return 1;
 80060b4:	2301      	movs	r3, #1
	}
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <createTimer>:
 *      Author: wojch
 */

#include "timerUtils.h"

timer_T* createTimer(void){
 80060be:	b580      	push	{r7, lr}
 80060c0:	b082      	sub	sp, #8
 80060c2:	af00      	add	r7, sp, #0
	timer_T* timerPtr = malloc(sizeof(timer_T));
 80060c4:	200c      	movs	r0, #12
 80060c6:	f009 f9db 	bl	800f480 <malloc>
 80060ca:	4603      	mov	r3, r0
 80060cc:	607b      	str	r3, [r7, #4]
	timerPtr->timerStatus = TIMER_STATUS_UNSET;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	721a      	strb	r2, [r3, #8]
	return timerPtr;
 80060d4:	687b      	ldr	r3, [r7, #4]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <setTimerAAA>:
void deleteTimer(timer_T* timer){
	free(timer);
}
uint8_t setTimerAAA(timer_T* timer, uint16_t targetTime, void* callback){
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	460b      	mov	r3, r1
 80060e8:	607a      	str	r2, [r7, #4]
 80060ea:	817b      	strh	r3, [r7, #10]
	timer->currentValue = 0;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	801a      	strh	r2, [r3, #0]
	timer->targetValue = targetTime;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	897a      	ldrh	r2, [r7, #10]
 80060f6:	805a      	strh	r2, [r3, #2]
	timer->callback = callback;
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	605a      	str	r2, [r3, #4]
	timer->timerStatus = TIMER_STATUS_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	721a      	strb	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <runTimerAAA>:

uint8_t runTimerAAA(timer_T* timer){
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
	if((timer->timerStatus == TIMER_STATUS_READY) || (timer->timerStatus == TIMER_STATUS_PAUSED)){
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	7a1b      	ldrb	r3, [r3, #8]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d003      	beq.n	800612a <runTimerAAA+0x18>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	7a1b      	ldrb	r3, [r3, #8]
 8006126:	2b03      	cmp	r3, #3
 8006128:	d102      	bne.n	8006130 <runTimerAAA+0x1e>
		timer->timerStatus = TIMER_STATUS_RUNNING;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2202      	movs	r2, #2
 800612e:	721a      	strb	r2, [r3, #8]
	}
}
 8006130:	bf00      	nop
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <tickTimer>:
uint8_t resetTimerAAA(timer_T* timer){
	timer->currentValue = 0;
	timer->timerStatus = TIMER_STATUS_READY;
}

void tickTimer(timer_T* timer){
 800613e:	b580      	push	{r7, lr}
 8006140:	b082      	sub	sp, #8
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
	if(timer->timerStatus == TIMER_STATUS_RUNNING) timer->currentValue++;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7a1b      	ldrb	r3, [r3, #8]
 800614a:	2b02      	cmp	r3, #2
 800614c:	d105      	bne.n	800615a <tickTimer+0x1c>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	3301      	adds	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	801a      	strh	r2, [r3, #0]
	if(timer->currentValue == timer->targetValue){
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	881a      	ldrh	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	885b      	ldrh	r3, [r3, #2]
 8006162:	429a      	cmp	r2, r3
 8006164:	d106      	bne.n	8006174 <tickTimer+0x36>
		timer->timerStatus = TIMER_STATUS_ELAPSED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2204      	movs	r2, #4
 800616a:	721a      	strb	r2, [r3, #8]
		// callback will be executed in the TMR interrupt!
		timer->callback(NULL);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2000      	movs	r0, #0
 8006172:	4798      	blx	r3
	}
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800617c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061b4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006180:	480d      	ldr	r0, [pc, #52]	; (80061b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006182:	490e      	ldr	r1, [pc, #56]	; (80061bc <LoopFillZerobss+0x1a>)
                                         ldr r2, =_sidata
 8006184:	4a0e      	ldr	r2, [pc, #56]	; (80061c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006188:	e002      	b.n	8006190 <LoopCopyDataInit>

0800618a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800618a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800618c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800618e:	3304      	adds	r3, #4

08006190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006194:	d3f9      	bcc.n	800618a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006196:	4a0b      	ldr	r2, [pc, #44]	; (80061c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006198:	4c0b      	ldr	r4, [pc, #44]	; (80061c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800619a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800619c:	e001      	b.n	80061a2 <LoopFillZerobss>

0800619e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800619e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061a0:	3204      	adds	r2, #4

080061a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061a4:	d3fb      	bcc.n	800619e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80061a6:	f7fe fbe7 	bl	8004978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061aa:	f009 f945 	bl	800f438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061ae:	f7fd fd27 	bl	8003c00 <main>
  bx  lr    
 80061b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80061b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80061b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80061bc:	200002a4 	.word	0x200002a4
                                         ldr r2, =_sidata
 80061c0:	0802d990 	.word	0x0802d990
  ldr r2, =_sbss
 80061c4:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 80061c8:	20005ba0 	.word	0x20005ba0

080061cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80061cc:	e7fe      	b.n	80061cc <ADC_IRQHandler>
	...

080061d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061d4:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <HAL_Init+0x40>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a0d      	ldr	r2, [pc, #52]	; (8006210 <HAL_Init+0x40>)
 80061da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <HAL_Init+0x40>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a0a      	ldr	r2, [pc, #40]	; (8006210 <HAL_Init+0x40>)
 80061e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061ec:	4b08      	ldr	r3, [pc, #32]	; (8006210 <HAL_Init+0x40>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a07      	ldr	r2, [pc, #28]	; (8006210 <HAL_Init+0x40>)
 80061f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061f8:	2003      	movs	r0, #3
 80061fa:	f000 f94f 	bl	800649c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061fe:	2000      	movs	r0, #0
 8006200:	f000 f808 	bl	8006214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006204:	f7fe f8bc 	bl	8004380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	40023c00 	.word	0x40023c00

08006214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800621c:	4b12      	ldr	r3, [pc, #72]	; (8006268 <HAL_InitTick+0x54>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	4b12      	ldr	r3, [pc, #72]	; (800626c <HAL_InitTick+0x58>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	4619      	mov	r1, r3
 8006226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800622a:	fbb3 f3f1 	udiv	r3, r3, r1
 800622e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006232:	4618      	mov	r0, r3
 8006234:	f000 f967 	bl	8006506 <HAL_SYSTICK_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e00e      	b.n	8006260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b0f      	cmp	r3, #15
 8006246:	d80a      	bhi.n	800625e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006248:	2200      	movs	r2, #0
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	f000 f92f 	bl	80064b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006254:	4a06      	ldr	r2, [pc, #24]	; (8006270 <HAL_InitTick+0x5c>)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	e000      	b.n	8006260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
}
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20000070 	.word	0x20000070
 800626c:	200000d0 	.word	0x200000d0
 8006270:	200000cc 	.word	0x200000cc

08006274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <HAL_IncTick+0x20>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	4b06      	ldr	r3, [pc, #24]	; (8006298 <HAL_IncTick+0x24>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4413      	add	r3, r2
 8006284:	4a04      	ldr	r2, [pc, #16]	; (8006298 <HAL_IncTick+0x24>)
 8006286:	6013      	str	r3, [r2, #0]
}
 8006288:	bf00      	nop
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	200000d0 	.word	0x200000d0
 8006298:	20005b50 	.word	0x20005b50

0800629c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  return uwTick;
 80062a0:	4b03      	ldr	r3, [pc, #12]	; (80062b0 <HAL_GetTick+0x14>)
 80062a2:	681b      	ldr	r3, [r3, #0]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	20005b50 	.word	0x20005b50

080062b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062bc:	f7ff ffee 	bl	800629c <HAL_GetTick>
 80062c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d005      	beq.n	80062da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062ce:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <HAL_Delay+0x44>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062da:	bf00      	nop
 80062dc:	f7ff ffde 	bl	800629c <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d8f7      	bhi.n	80062dc <HAL_Delay+0x28>
  {
  }
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	200000d0 	.word	0x200000d0

080062fc <__NVIC_SetPriorityGrouping>:
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800630c:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <__NVIC_SetPriorityGrouping+0x44>)
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006318:	4013      	ands	r3, r2
 800631a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800632e:	4a04      	ldr	r2, [pc, #16]	; (8006340 <__NVIC_SetPriorityGrouping+0x44>)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	60d3      	str	r3, [r2, #12]
}
 8006334:	bf00      	nop
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	e000ed00 	.word	0xe000ed00

08006344 <__NVIC_GetPriorityGrouping>:
{
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006348:	4b04      	ldr	r3, [pc, #16]	; (800635c <__NVIC_GetPriorityGrouping+0x18>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	0a1b      	lsrs	r3, r3, #8
 800634e:	f003 0307 	and.w	r3, r3, #7
}
 8006352:	4618      	mov	r0, r3
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	e000ed00 	.word	0xe000ed00

08006360 <__NVIC_EnableIRQ>:
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	4603      	mov	r3, r0
 8006368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800636a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800636e:	2b00      	cmp	r3, #0
 8006370:	db0b      	blt.n	800638a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	f003 021f 	and.w	r2, r3, #31
 8006378:	4907      	ldr	r1, [pc, #28]	; (8006398 <__NVIC_EnableIRQ+0x38>)
 800637a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	2001      	movs	r0, #1
 8006382:	fa00 f202 	lsl.w	r2, r0, r2
 8006386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	e000e100 	.word	0xe000e100

0800639c <__NVIC_SetPriority>:
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	6039      	str	r1, [r7, #0]
 80063a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	db0a      	blt.n	80063c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	490c      	ldr	r1, [pc, #48]	; (80063e8 <__NVIC_SetPriority+0x4c>)
 80063b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ba:	0112      	lsls	r2, r2, #4
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	440b      	add	r3, r1
 80063c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80063c4:	e00a      	b.n	80063dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	4908      	ldr	r1, [pc, #32]	; (80063ec <__NVIC_SetPriority+0x50>)
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	3b04      	subs	r3, #4
 80063d4:	0112      	lsls	r2, r2, #4
 80063d6:	b2d2      	uxtb	r2, r2
 80063d8:	440b      	add	r3, r1
 80063da:	761a      	strb	r2, [r3, #24]
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	e000e100 	.word	0xe000e100
 80063ec:	e000ed00 	.word	0xe000ed00

080063f0 <NVIC_EncodePriority>:
{
 80063f0:	b480      	push	{r7}
 80063f2:	b089      	sub	sp, #36	; 0x24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f1c3 0307 	rsb	r3, r3, #7
 800640a:	2b04      	cmp	r3, #4
 800640c:	bf28      	it	cs
 800640e:	2304      	movcs	r3, #4
 8006410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	3304      	adds	r3, #4
 8006416:	2b06      	cmp	r3, #6
 8006418:	d902      	bls.n	8006420 <NVIC_EncodePriority+0x30>
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	3b03      	subs	r3, #3
 800641e:	e000      	b.n	8006422 <NVIC_EncodePriority+0x32>
 8006420:	2300      	movs	r3, #0
 8006422:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006424:	f04f 32ff 	mov.w	r2, #4294967295
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	43da      	mvns	r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	401a      	ands	r2, r3
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006438:	f04f 31ff 	mov.w	r1, #4294967295
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	fa01 f303 	lsl.w	r3, r1, r3
 8006442:	43d9      	mvns	r1, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006448:	4313      	orrs	r3, r2
}
 800644a:	4618      	mov	r0, r3
 800644c:	3724      	adds	r7, #36	; 0x24
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
	...

08006458 <SysTick_Config>:
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3b01      	subs	r3, #1
 8006464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006468:	d301      	bcc.n	800646e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800646a:	2301      	movs	r3, #1
 800646c:	e00f      	b.n	800648e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800646e:	4a0a      	ldr	r2, [pc, #40]	; (8006498 <SysTick_Config+0x40>)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3b01      	subs	r3, #1
 8006474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006476:	210f      	movs	r1, #15
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	f7ff ff8e 	bl	800639c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006480:	4b05      	ldr	r3, [pc, #20]	; (8006498 <SysTick_Config+0x40>)
 8006482:	2200      	movs	r2, #0
 8006484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006486:	4b04      	ldr	r3, [pc, #16]	; (8006498 <SysTick_Config+0x40>)
 8006488:	2207      	movs	r2, #7
 800648a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	e000e010 	.word	0xe000e010

0800649c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ff29 	bl	80062fc <__NVIC_SetPriorityGrouping>
}
 80064aa:	bf00      	nop
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b086      	sub	sp, #24
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	4603      	mov	r3, r0
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064c4:	f7ff ff3e 	bl	8006344 <__NVIC_GetPriorityGrouping>
 80064c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	6978      	ldr	r0, [r7, #20]
 80064d0:	f7ff ff8e 	bl	80063f0 <NVIC_EncodePriority>
 80064d4:	4602      	mov	r2, r0
 80064d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064da:	4611      	mov	r1, r2
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff ff5d 	bl	800639c <__NVIC_SetPriority>
}
 80064e2:	bf00      	nop
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	4603      	mov	r3, r0
 80064f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff ff31 	bl	8006360 <__NVIC_EnableIRQ>
}
 80064fe:	bf00      	nop
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ffa2 	bl	8006458 <SysTick_Config>
 8006514:	4603      	mov	r3, r0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b086      	sub	sp, #24
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	607a      	str	r2, [r7, #4]
 800652a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006534:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_DMA_Start_IT+0x26>
 8006540:	2302      	movs	r3, #2
 8006542:	e040      	b.n	80065c6 <HAL_DMA_Start_IT+0xa8>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b01      	cmp	r3, #1
 8006556:	d12f      	bne.n	80065b8 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 f82e 	bl	80065ce <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	223f      	movs	r2, #63	; 0x3f
 8006578:	409a      	lsls	r2, r3
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0216 	orr.w	r2, r2, #22
 800658c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0208 	orr.w	r2, r2, #8
 80065a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0201 	orr.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	e005      	b.n	80065c4 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80065c0:	2302      	movs	r3, #2
 80065c2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b085      	sub	sp, #20
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065ea:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d108      	bne.n	800660e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800660c:	e007      	b.n	800661e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	60da      	str	r2, [r3, #12]
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800662c:	b480      	push	{r7}
 800662e:	b089      	sub	sp, #36	; 0x24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800663a:	2300      	movs	r3, #0
 800663c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800663e:	2300      	movs	r3, #0
 8006640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006642:	2300      	movs	r3, #0
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	e177      	b.n	8006938 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006648:	2201      	movs	r2, #1
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4013      	ands	r3, r2
 800665a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	429a      	cmp	r2, r3
 8006662:	f040 8166 	bne.w	8006932 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b01      	cmp	r3, #1
 8006670:	d005      	beq.n	800667e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800667a:	2b02      	cmp	r3, #2
 800667c:	d130      	bne.n	80066e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	2203      	movs	r2, #3
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	43db      	mvns	r3, r3
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	4013      	ands	r3, r2
 8006694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	fa02 f303 	lsl.w	r3, r2, r3
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066b4:	2201      	movs	r2, #1
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	43db      	mvns	r3, r3
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	4013      	ands	r3, r2
 80066c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	091b      	lsrs	r3, r3, #4
 80066ca:	f003 0201 	and.w	r2, r3, #1
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d017      	beq.n	800671c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	2203      	movs	r2, #3
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	43db      	mvns	r3, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	4013      	ands	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	fa02 f303 	lsl.w	r3, r2, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	4313      	orrs	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d123      	bne.n	8006770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	08da      	lsrs	r2, r3, #3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3208      	adds	r2, #8
 8006730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	220f      	movs	r2, #15
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	43db      	mvns	r3, r3
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	4013      	ands	r3, r2
 800674a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	fa02 f303 	lsl.w	r3, r2, r3
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	4313      	orrs	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	08da      	lsrs	r2, r3, #3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3208      	adds	r2, #8
 800676a:	69b9      	ldr	r1, [r7, #24]
 800676c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	2203      	movs	r2, #3
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	43db      	mvns	r3, r3
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	4013      	ands	r3, r2
 8006786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f003 0203 	and.w	r2, r3, #3
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	4313      	orrs	r3, r2
 800679c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80c0 	beq.w	8006932 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	4b66      	ldr	r3, [pc, #408]	; (8006950 <HAL_GPIO_Init+0x324>)
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	4a65      	ldr	r2, [pc, #404]	; (8006950 <HAL_GPIO_Init+0x324>)
 80067bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067c0:	6453      	str	r3, [r2, #68]	; 0x44
 80067c2:	4b63      	ldr	r3, [pc, #396]	; (8006950 <HAL_GPIO_Init+0x324>)
 80067c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067ce:	4a61      	ldr	r2, [pc, #388]	; (8006954 <HAL_GPIO_Init+0x328>)
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	089b      	lsrs	r3, r3, #2
 80067d4:	3302      	adds	r3, #2
 80067d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	220f      	movs	r2, #15
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	43db      	mvns	r3, r3
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	4013      	ands	r3, r2
 80067f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a58      	ldr	r2, [pc, #352]	; (8006958 <HAL_GPIO_Init+0x32c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d037      	beq.n	800686a <HAL_GPIO_Init+0x23e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a57      	ldr	r2, [pc, #348]	; (800695c <HAL_GPIO_Init+0x330>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d031      	beq.n	8006866 <HAL_GPIO_Init+0x23a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a56      	ldr	r2, [pc, #344]	; (8006960 <HAL_GPIO_Init+0x334>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d02b      	beq.n	8006862 <HAL_GPIO_Init+0x236>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a55      	ldr	r2, [pc, #340]	; (8006964 <HAL_GPIO_Init+0x338>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d025      	beq.n	800685e <HAL_GPIO_Init+0x232>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a54      	ldr	r2, [pc, #336]	; (8006968 <HAL_GPIO_Init+0x33c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01f      	beq.n	800685a <HAL_GPIO_Init+0x22e>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a53      	ldr	r2, [pc, #332]	; (800696c <HAL_GPIO_Init+0x340>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d019      	beq.n	8006856 <HAL_GPIO_Init+0x22a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a52      	ldr	r2, [pc, #328]	; (8006970 <HAL_GPIO_Init+0x344>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <HAL_GPIO_Init+0x226>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a51      	ldr	r2, [pc, #324]	; (8006974 <HAL_GPIO_Init+0x348>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00d      	beq.n	800684e <HAL_GPIO_Init+0x222>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a50      	ldr	r2, [pc, #320]	; (8006978 <HAL_GPIO_Init+0x34c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d007      	beq.n	800684a <HAL_GPIO_Init+0x21e>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a4f      	ldr	r2, [pc, #316]	; (800697c <HAL_GPIO_Init+0x350>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d101      	bne.n	8006846 <HAL_GPIO_Init+0x21a>
 8006842:	2309      	movs	r3, #9
 8006844:	e012      	b.n	800686c <HAL_GPIO_Init+0x240>
 8006846:	230a      	movs	r3, #10
 8006848:	e010      	b.n	800686c <HAL_GPIO_Init+0x240>
 800684a:	2308      	movs	r3, #8
 800684c:	e00e      	b.n	800686c <HAL_GPIO_Init+0x240>
 800684e:	2307      	movs	r3, #7
 8006850:	e00c      	b.n	800686c <HAL_GPIO_Init+0x240>
 8006852:	2306      	movs	r3, #6
 8006854:	e00a      	b.n	800686c <HAL_GPIO_Init+0x240>
 8006856:	2305      	movs	r3, #5
 8006858:	e008      	b.n	800686c <HAL_GPIO_Init+0x240>
 800685a:	2304      	movs	r3, #4
 800685c:	e006      	b.n	800686c <HAL_GPIO_Init+0x240>
 800685e:	2303      	movs	r3, #3
 8006860:	e004      	b.n	800686c <HAL_GPIO_Init+0x240>
 8006862:	2302      	movs	r3, #2
 8006864:	e002      	b.n	800686c <HAL_GPIO_Init+0x240>
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <HAL_GPIO_Init+0x240>
 800686a:	2300      	movs	r3, #0
 800686c:	69fa      	ldr	r2, [r7, #28]
 800686e:	f002 0203 	and.w	r2, r2, #3
 8006872:	0092      	lsls	r2, r2, #2
 8006874:	4093      	lsls	r3, r2
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	4313      	orrs	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800687c:	4935      	ldr	r1, [pc, #212]	; (8006954 <HAL_GPIO_Init+0x328>)
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	089b      	lsrs	r3, r3, #2
 8006882:	3302      	adds	r3, #2
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800688a:	4b3d      	ldr	r3, [pc, #244]	; (8006980 <HAL_GPIO_Init+0x354>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	43db      	mvns	r3, r3
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	4013      	ands	r3, r2
 8006898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068ae:	4a34      	ldr	r2, [pc, #208]	; (8006980 <HAL_GPIO_Init+0x354>)
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068b4:	4b32      	ldr	r3, [pc, #200]	; (8006980 <HAL_GPIO_Init+0x354>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	43db      	mvns	r3, r3
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	4013      	ands	r3, r2
 80068c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068d8:	4a29      	ldr	r2, [pc, #164]	; (8006980 <HAL_GPIO_Init+0x354>)
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068de:	4b28      	ldr	r3, [pc, #160]	; (8006980 <HAL_GPIO_Init+0x354>)
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	43db      	mvns	r3, r3
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	4013      	ands	r3, r2
 80068ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006902:	4a1f      	ldr	r2, [pc, #124]	; (8006980 <HAL_GPIO_Init+0x354>)
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006908:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <HAL_GPIO_Init+0x354>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	43db      	mvns	r3, r3
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	4013      	ands	r3, r2
 8006916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800692c:	4a14      	ldr	r2, [pc, #80]	; (8006980 <HAL_GPIO_Init+0x354>)
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	3301      	adds	r3, #1
 8006936:	61fb      	str	r3, [r7, #28]
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	2b0f      	cmp	r3, #15
 800693c:	f67f ae84 	bls.w	8006648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	3724      	adds	r7, #36	; 0x24
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40023800 	.word	0x40023800
 8006954:	40013800 	.word	0x40013800
 8006958:	40020000 	.word	0x40020000
 800695c:	40020400 	.word	0x40020400
 8006960:	40020800 	.word	0x40020800
 8006964:	40020c00 	.word	0x40020c00
 8006968:	40021000 	.word	0x40021000
 800696c:	40021400 	.word	0x40021400
 8006970:	40021800 	.word	0x40021800
 8006974:	40021c00 	.word	0x40021c00
 8006978:	40022000 	.word	0x40022000
 800697c:	40022400 	.word	0x40022400
 8006980:	40013c00 	.word	0x40013c00

08006984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	460b      	mov	r3, r1
 800698e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	887b      	ldrh	r3, [r7, #2]
 8006996:	4013      	ands	r3, r2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800699c:	2301      	movs	r3, #1
 800699e:	73fb      	strb	r3, [r7, #15]
 80069a0:	e001      	b.n	80069a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069a2:	2300      	movs	r3, #0
 80069a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	807b      	strh	r3, [r7, #2]
 80069c0:	4613      	mov	r3, r2
 80069c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069c4:	787b      	ldrb	r3, [r7, #1]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069ca:	887a      	ldrh	r2, [r7, #2]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069d0:	e003      	b.n	80069da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069d2:	887b      	ldrh	r3, [r7, #2]
 80069d4:	041a      	lsls	r2, r3, #16
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	619a      	str	r2, [r3, #24]
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b085      	sub	sp, #20
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069f8:	887a      	ldrh	r2, [r7, #2]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4013      	ands	r3, r2
 80069fe:	041a      	lsls	r2, r3, #16
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	43d9      	mvns	r1, r3
 8006a04:	887b      	ldrh	r3, [r7, #2]
 8006a06:	400b      	ands	r3, r1
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	619a      	str	r2, [r3, #24]
}
 8006a0e:	bf00      	nop
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	4603      	mov	r3, r0
 8006a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006a26:	4b08      	ldr	r3, [pc, #32]	; (8006a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a28:	695a      	ldr	r2, [r3, #20]
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d006      	beq.n	8006a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a32:	4a05      	ldr	r2, [pc, #20]	; (8006a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 f806 	bl	8006a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40013c00 	.word	0x40013c00

08006a4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
	...

08006a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e12b      	b.n	8006cce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7fb fda0 	bl	80025d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2224      	movs	r2, #36	; 0x24
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0201 	bic.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ab6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ac6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ac8:	f001 fc76 	bl	80083b8 <HAL_RCC_GetPCLK1Freq>
 8006acc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	4a81      	ldr	r2, [pc, #516]	; (8006cd8 <HAL_I2C_Init+0x274>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d807      	bhi.n	8006ae8 <HAL_I2C_Init+0x84>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4a80      	ldr	r2, [pc, #512]	; (8006cdc <HAL_I2C_Init+0x278>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	bf94      	ite	ls
 8006ae0:	2301      	movls	r3, #1
 8006ae2:	2300      	movhi	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	e006      	b.n	8006af6 <HAL_I2C_Init+0x92>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4a7d      	ldr	r2, [pc, #500]	; (8006ce0 <HAL_I2C_Init+0x27c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	bf94      	ite	ls
 8006af0:	2301      	movls	r3, #1
 8006af2:	2300      	movhi	r3, #0
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e0e7      	b.n	8006cce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4a78      	ldr	r2, [pc, #480]	; (8006ce4 <HAL_I2C_Init+0x280>)
 8006b02:	fba2 2303 	umull	r2, r3, r2, r3
 8006b06:	0c9b      	lsrs	r3, r3, #18
 8006b08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	4a6a      	ldr	r2, [pc, #424]	; (8006cd8 <HAL_I2C_Init+0x274>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d802      	bhi.n	8006b38 <HAL_I2C_Init+0xd4>
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	3301      	adds	r3, #1
 8006b36:	e009      	b.n	8006b4c <HAL_I2C_Init+0xe8>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b3e:	fb02 f303 	mul.w	r3, r2, r3
 8006b42:	4a69      	ldr	r2, [pc, #420]	; (8006ce8 <HAL_I2C_Init+0x284>)
 8006b44:	fba2 2303 	umull	r2, r3, r2, r3
 8006b48:	099b      	lsrs	r3, r3, #6
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	430b      	orrs	r3, r1
 8006b52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006b5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	495c      	ldr	r1, [pc, #368]	; (8006cd8 <HAL_I2C_Init+0x274>)
 8006b68:	428b      	cmp	r3, r1
 8006b6a:	d819      	bhi.n	8006ba0 <HAL_I2C_Init+0x13c>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	1e59      	subs	r1, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b7a:	1c59      	adds	r1, r3, #1
 8006b7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006b80:	400b      	ands	r3, r1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <HAL_I2C_Init+0x138>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1e59      	subs	r1, r3, #1
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b94:	3301      	adds	r3, #1
 8006b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b9a:	e051      	b.n	8006c40 <HAL_I2C_Init+0x1dc>
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	e04f      	b.n	8006c40 <HAL_I2C_Init+0x1dc>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d111      	bne.n	8006bcc <HAL_I2C_Init+0x168>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	1e58      	subs	r0, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6859      	ldr	r1, [r3, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	440b      	add	r3, r1
 8006bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bba:	3301      	adds	r3, #1
 8006bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	bf0c      	ite	eq
 8006bc4:	2301      	moveq	r3, #1
 8006bc6:	2300      	movne	r3, #0
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	e012      	b.n	8006bf2 <HAL_I2C_Init+0x18e>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	1e58      	subs	r0, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6859      	ldr	r1, [r3, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	0099      	lsls	r1, r3, #2
 8006bdc:	440b      	add	r3, r1
 8006bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8006be2:	3301      	adds	r3, #1
 8006be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	bf0c      	ite	eq
 8006bec:	2301      	moveq	r3, #1
 8006bee:	2300      	movne	r3, #0
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <HAL_I2C_Init+0x196>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e022      	b.n	8006c40 <HAL_I2C_Init+0x1dc>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10e      	bne.n	8006c20 <HAL_I2C_Init+0x1bc>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	1e58      	subs	r0, r3, #1
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6859      	ldr	r1, [r3, #4]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	440b      	add	r3, r1
 8006c10:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c14:	3301      	adds	r3, #1
 8006c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c1e:	e00f      	b.n	8006c40 <HAL_I2C_Init+0x1dc>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	1e58      	subs	r0, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6859      	ldr	r1, [r3, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	440b      	add	r3, r1
 8006c2e:	0099      	lsls	r1, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c36:	3301      	adds	r3, #1
 8006c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	6809      	ldr	r1, [r1, #0]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69da      	ldr	r2, [r3, #28]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6911      	ldr	r1, [r2, #16]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	68d2      	ldr	r2, [r2, #12]
 8006c7a:	4311      	orrs	r1, r2
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6812      	ldr	r2, [r2, #0]
 8006c80:	430b      	orrs	r3, r1
 8006c82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695a      	ldr	r2, [r3, #20]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	000186a0 	.word	0x000186a0
 8006cdc:	001e847f 	.word	0x001e847f
 8006ce0:	003d08ff 	.word	0x003d08ff
 8006ce4:	431bde83 	.word	0x431bde83
 8006ce8:	10624dd3 	.word	0x10624dd3

08006cec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af02      	add	r7, sp, #8
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	817b      	strh	r3, [r7, #10]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	813b      	strh	r3, [r7, #8]
 8006d02:	4613      	mov	r3, r2
 8006d04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d06:	f7ff fac9 	bl	800629c <HAL_GetTick>
 8006d0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	f040 80d9 	bne.w	8006ecc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	2319      	movs	r3, #25
 8006d20:	2201      	movs	r2, #1
 8006d22:	496d      	ldr	r1, [pc, #436]	; (8006ed8 <HAL_I2C_Mem_Write+0x1ec>)
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 fc7f 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006d30:	2302      	movs	r3, #2
 8006d32:	e0cc      	b.n	8006ece <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <HAL_I2C_Mem_Write+0x56>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e0c5      	b.n	8006ece <HAL_I2C_Mem_Write+0x1e2>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d007      	beq.n	8006d68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2221      	movs	r2, #33	; 0x21
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2240      	movs	r2, #64	; 0x40
 8006d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a3a      	ldr	r2, [r7, #32]
 8006d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4a4d      	ldr	r2, [pc, #308]	; (8006edc <HAL_I2C_Mem_Write+0x1f0>)
 8006da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006daa:	88f8      	ldrh	r0, [r7, #6]
 8006dac:	893a      	ldrh	r2, [r7, #8]
 8006dae:	8979      	ldrh	r1, [r7, #10]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	4603      	mov	r3, r0
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 fab6 	bl	800732c <I2C_RequestMemoryWrite>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d052      	beq.n	8006e6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e081      	b.n	8006ece <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fd00 	bl	80077d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00d      	beq.n	8006df6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d107      	bne.n	8006df2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e06b      	b.n	8006ece <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	781a      	ldrb	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d11b      	bne.n	8006e6c <HAL_I2C_Mem_Write+0x180>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d017      	beq.n	8006e6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	781a      	ldrb	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1aa      	bne.n	8006dca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fcec 	bl	8007856 <I2C_WaitOnBTFFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00d      	beq.n	8006ea0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d107      	bne.n	8006e9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e016      	b.n	8006ece <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e000      	b.n	8006ece <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006ecc:	2302      	movs	r3, #2
  }
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	00100002 	.word	0x00100002
 8006edc:	ffff0000 	.word	0xffff0000

08006ee0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08c      	sub	sp, #48	; 0x30
 8006ee4:	af02      	add	r7, sp, #8
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	4608      	mov	r0, r1
 8006eea:	4611      	mov	r1, r2
 8006eec:	461a      	mov	r2, r3
 8006eee:	4603      	mov	r3, r0
 8006ef0:	817b      	strh	r3, [r7, #10]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	813b      	strh	r3, [r7, #8]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006efa:	f7ff f9cf 	bl	800629c <HAL_GetTick>
 8006efe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	f040 8208 	bne.w	800731e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	2319      	movs	r3, #25
 8006f14:	2201      	movs	r2, #1
 8006f16:	497b      	ldr	r1, [pc, #492]	; (8007104 <HAL_I2C_Mem_Read+0x224>)
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 fb85 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006f24:	2302      	movs	r3, #2
 8006f26:	e1fb      	b.n	8007320 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_I2C_Mem_Read+0x56>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e1f4      	b.n	8007320 <HAL_I2C_Mem_Read+0x440>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d007      	beq.n	8006f5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2222      	movs	r2, #34	; 0x22
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2240      	movs	r2, #64	; 0x40
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4a5b      	ldr	r2, [pc, #364]	; (8007108 <HAL_I2C_Mem_Read+0x228>)
 8006f9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f9e:	88f8      	ldrh	r0, [r7, #6]
 8006fa0:	893a      	ldrh	r2, [r7, #8]
 8006fa2:	8979      	ldrh	r1, [r7, #10]
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	4603      	mov	r3, r0
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fa52 	bl	8007458 <I2C_RequestMemoryRead>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e1b0      	b.n	8007320 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d113      	bne.n	8006fee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	623b      	str	r3, [r7, #32]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	623b      	str	r3, [r7, #32]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	623b      	str	r3, [r7, #32]
 8006fda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	e184      	b.n	80072f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d11b      	bne.n	800702e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007006:	2300      	movs	r3, #0
 8007008:	61fb      	str	r3, [r7, #28]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	61fb      	str	r3, [r7, #28]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	61fb      	str	r3, [r7, #28]
 800701a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	e164      	b.n	80072f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007032:	2b02      	cmp	r3, #2
 8007034:	d11b      	bne.n	800706e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007044:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007054:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007056:	2300      	movs	r3, #0
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	e144      	b.n	80072f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	617b      	str	r3, [r7, #20]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007084:	e138      	b.n	80072f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708a:	2b03      	cmp	r3, #3
 800708c:	f200 80f1 	bhi.w	8007272 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007094:	2b01      	cmp	r3, #1
 8007096:	d123      	bne.n	80070e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800709a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fc1b 	bl	80078d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e139      	b.n	8007320 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691a      	ldr	r2, [r3, #16]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070de:	e10b      	b.n	80072f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d14e      	bne.n	8007186 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	2200      	movs	r2, #0
 80070f0:	4906      	ldr	r1, [pc, #24]	; (800710c <HAL_I2C_Mem_Read+0x22c>)
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 fa98 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d008      	beq.n	8007110 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e10e      	b.n	8007320 <HAL_I2C_Mem_Read+0x440>
 8007102:	bf00      	nop
 8007104:	00100002 	.word	0x00100002
 8007108:	ffff0000 	.word	0xffff0000
 800710c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800711e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691a      	ldr	r2, [r3, #16]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713c:	3b01      	subs	r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007148:	b29b      	uxth	r3, r3
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	b2d2      	uxtb	r2, r2
 800715e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716e:	3b01      	subs	r3, #1
 8007170:	b29a      	uxth	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717a:	b29b      	uxth	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007184:	e0b8      	b.n	80072f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	2200      	movs	r2, #0
 800718e:	4966      	ldr	r1, [pc, #408]	; (8007328 <HAL_I2C_Mem_Read+0x448>)
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fa49 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e0bf      	b.n	8007320 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d8:	b29b      	uxth	r3, r3
 80071da:	3b01      	subs	r3, #1
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e8:	2200      	movs	r2, #0
 80071ea:	494f      	ldr	r1, [pc, #316]	; (8007328 <HAL_I2C_Mem_Read+0x448>)
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fa1b 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e091      	b.n	8007320 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800720a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691a      	ldr	r2, [r3, #16]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007228:	3b01      	subs	r3, #1
 800722a:	b29a      	uxth	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	b2d2      	uxtb	r2, r2
 800724a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	1c5a      	adds	r2, r3, #1
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007270:	e042      	b.n	80072f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007274:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fb2e 	bl	80078d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e04c      	b.n	8007320 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691a      	ldr	r2, [r3, #16]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	b2d2      	uxtb	r2, r2
 8007292:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	d118      	bne.n	80072f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	b2d2      	uxtb	r2, r2
 80072d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e2:	3b01      	subs	r3, #1
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f47f aec2 	bne.w	8007086 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2220      	movs	r2, #32
 8007306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	e000      	b.n	8007320 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800731e:	2302      	movs	r3, #2
  }
}
 8007320:	4618      	mov	r0, r3
 8007322:	3728      	adds	r7, #40	; 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	00010004 	.word	0x00010004

0800732c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	4608      	mov	r0, r1
 8007336:	4611      	mov	r1, r2
 8007338:	461a      	mov	r2, r3
 800733a:	4603      	mov	r3, r0
 800733c:	817b      	strh	r3, [r7, #10]
 800733e:	460b      	mov	r3, r1
 8007340:	813b      	strh	r3, [r7, #8]
 8007342:	4613      	mov	r3, r2
 8007344:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007354:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	2200      	movs	r2, #0
 800735e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f960 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00d      	beq.n	800738a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800737c:	d103      	bne.n	8007386 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007384:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e05f      	b.n	800744a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800738a:	897b      	ldrh	r3, [r7, #10]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007398:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	6a3a      	ldr	r2, [r7, #32]
 800739e:	492d      	ldr	r1, [pc, #180]	; (8007454 <I2C_RequestMemoryWrite+0x128>)
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f998 	bl	80076d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e04c      	b.n	800744a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c8:	6a39      	ldr	r1, [r7, #32]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 fa02 	bl	80077d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00d      	beq.n	80073f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d107      	bne.n	80073ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e02b      	b.n	800744a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d105      	bne.n	8007404 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073f8:	893b      	ldrh	r3, [r7, #8]
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	611a      	str	r2, [r3, #16]
 8007402:	e021      	b.n	8007448 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007404:	893b      	ldrh	r3, [r7, #8]
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	b29b      	uxth	r3, r3
 800740a:	b2da      	uxtb	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007414:	6a39      	ldr	r1, [r7, #32]
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 f9dc 	bl	80077d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00d      	beq.n	800743e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	2b04      	cmp	r3, #4
 8007428:	d107      	bne.n	800743a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007438:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e005      	b.n	800744a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800743e:	893b      	ldrh	r3, [r7, #8]
 8007440:	b2da      	uxtb	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	00010002 	.word	0x00010002

08007458 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b088      	sub	sp, #32
 800745c:	af02      	add	r7, sp, #8
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	4608      	mov	r0, r1
 8007462:	4611      	mov	r1, r2
 8007464:	461a      	mov	r2, r3
 8007466:	4603      	mov	r3, r0
 8007468:	817b      	strh	r3, [r7, #10]
 800746a:	460b      	mov	r3, r1
 800746c:	813b      	strh	r3, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007480:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	2200      	movs	r2, #0
 800749a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 f8c2 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00d      	beq.n	80074c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b8:	d103      	bne.n	80074c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e0aa      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80074c6:	897b      	ldrh	r3, [r7, #10]
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	6a3a      	ldr	r2, [r7, #32]
 80074da:	4952      	ldr	r1, [pc, #328]	; (8007624 <I2C_RequestMemoryRead+0x1cc>)
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f8fa 	bl	80076d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e097      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007504:	6a39      	ldr	r1, [r7, #32]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f964 	bl	80077d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00d      	beq.n	800752e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	2b04      	cmp	r3, #4
 8007518:	d107      	bne.n	800752a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007528:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e076      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d105      	bne.n	8007540 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007534:	893b      	ldrh	r3, [r7, #8]
 8007536:	b2da      	uxtb	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	611a      	str	r2, [r3, #16]
 800753e:	e021      	b.n	8007584 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007540:	893b      	ldrh	r3, [r7, #8]
 8007542:	0a1b      	lsrs	r3, r3, #8
 8007544:	b29b      	uxth	r3, r3
 8007546:	b2da      	uxtb	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800754e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007550:	6a39      	ldr	r1, [r7, #32]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f93e 	bl	80077d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00d      	beq.n	800757a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	2b04      	cmp	r3, #4
 8007564:	d107      	bne.n	8007576 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007574:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e050      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800757a:	893b      	ldrh	r3, [r7, #8]
 800757c:	b2da      	uxtb	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007586:	6a39      	ldr	r1, [r7, #32]
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 f923 	bl	80077d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00d      	beq.n	80075b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	2b04      	cmp	r3, #4
 800759a:	d107      	bne.n	80075ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e035      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 f82b 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00d      	beq.n	80075f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e6:	d103      	bne.n	80075f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e013      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80075f4:	897b      	ldrh	r3, [r7, #10]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f043 0301 	orr.w	r3, r3, #1
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	6a3a      	ldr	r2, [r7, #32]
 8007608:	4906      	ldr	r1, [pc, #24]	; (8007624 <I2C_RequestMemoryRead+0x1cc>)
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f863 	bl	80076d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	00010002 	.word	0x00010002

08007628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	4613      	mov	r3, r2
 8007636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007638:	e025      	b.n	8007686 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007640:	d021      	beq.n	8007686 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007642:	f7fe fe2b 	bl	800629c <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d302      	bcc.n	8007658 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d116      	bne.n	8007686 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2220      	movs	r2, #32
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	f043 0220 	orr.w	r2, r3, #32
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e023      	b.n	80076ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	0c1b      	lsrs	r3, r3, #16
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b01      	cmp	r3, #1
 800768e:	d10d      	bne.n	80076ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	43da      	mvns	r2, r3
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4013      	ands	r3, r2
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bf0c      	ite	eq
 80076a2:	2301      	moveq	r3, #1
 80076a4:	2300      	movne	r3, #0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	e00c      	b.n	80076c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	43da      	mvns	r2, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4013      	ands	r3, r2
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	bf0c      	ite	eq
 80076be:	2301      	moveq	r3, #1
 80076c0:	2300      	movne	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d0b6      	beq.n	800763a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	607a      	str	r2, [r7, #4]
 80076e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076e4:	e051      	b.n	800778a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f4:	d123      	bne.n	800773e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007704:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800770e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	f043 0204 	orr.w	r2, r3, #4
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e046      	b.n	80077cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d021      	beq.n	800778a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007746:	f7fe fda9 	bl	800629c <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d302      	bcc.n	800775c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d116      	bne.n	800778a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2220      	movs	r2, #32
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	f043 0220 	orr.w	r2, r3, #32
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e020      	b.n	80077cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	0c1b      	lsrs	r3, r3, #16
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	d10c      	bne.n	80077ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	43da      	mvns	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4013      	ands	r3, r2
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bf14      	ite	ne
 80077a6:	2301      	movne	r3, #1
 80077a8:	2300      	moveq	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	e00b      	b.n	80077c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	43da      	mvns	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	4013      	ands	r3, r2
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	bf14      	ite	ne
 80077c0:	2301      	movne	r3, #1
 80077c2:	2300      	moveq	r3, #0
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d18d      	bne.n	80076e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077e0:	e02d      	b.n	800783e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f8ce 	bl	8007984 <I2C_IsAcknowledgeFailed>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e02d      	b.n	800784e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f8:	d021      	beq.n	800783e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077fa:	f7fe fd4f 	bl	800629c <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	429a      	cmp	r2, r3
 8007808:	d302      	bcc.n	8007810 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d116      	bne.n	800783e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2220      	movs	r2, #32
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	f043 0220 	orr.w	r2, r3, #32
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e007      	b.n	800784e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007848:	2b80      	cmp	r3, #128	; 0x80
 800784a:	d1ca      	bne.n	80077e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007862:	e02d      	b.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f88d 	bl	8007984 <I2C_IsAcknowledgeFailed>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e02d      	b.n	80078d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d021      	beq.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787c:	f7fe fd0e 	bl	800629c <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	429a      	cmp	r2, r3
 800788a:	d302      	bcc.n	8007892 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d116      	bne.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f043 0220 	orr.w	r2, r3, #32
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e007      	b.n	80078d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d1ca      	bne.n	8007864 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078e4:	e042      	b.n	800796c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b10      	cmp	r3, #16
 80078f2:	d119      	bne.n	8007928 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0210 	mvn.w	r2, #16
 80078fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e029      	b.n	800797c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007928:	f7fe fcb8 	bl	800629c <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	d302      	bcc.n	800793e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d116      	bne.n	800796c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2220      	movs	r2, #32
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	f043 0220 	orr.w	r2, r3, #32
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e007      	b.n	800797c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007976:	2b40      	cmp	r3, #64	; 0x40
 8007978:	d1b5      	bne.n	80078e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800799a:	d11b      	bne.n	80079d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	f043 0204 	orr.w	r2, r3, #4
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d129      	bne.n	8007a4c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2224      	movs	r2, #36	; 0x24
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0210 	bic.w	r2, r2, #16
 8007a1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0201 	orr.w	r2, r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	e000      	b.n	8007a4e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007a4c:	2302      	movs	r3, #2
  }
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d12a      	bne.n	8007aca <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2224      	movs	r2, #36	; 0x24
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0201 	bic.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007a94:	89fb      	ldrh	r3, [r7, #14]
 8007a96:	f023 030f 	bic.w	r3, r3, #15
 8007a9a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	89fb      	ldrh	r3, [r7, #14]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	89fa      	ldrh	r2, [r7, #14]
 8007aac:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f042 0201 	orr.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e000      	b.n	8007acc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007aca:	2302      	movs	r3, #2
  }
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e267      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d075      	beq.n	8007be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007af6:	4b88      	ldr	r3, [pc, #544]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 030c 	and.w	r3, r3, #12
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d00c      	beq.n	8007b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b02:	4b85      	ldr	r3, [pc, #532]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d112      	bne.n	8007b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b0e:	4b82      	ldr	r3, [pc, #520]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b1a:	d10b      	bne.n	8007b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b1c:	4b7e      	ldr	r3, [pc, #504]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d05b      	beq.n	8007be0 <HAL_RCC_OscConfig+0x108>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d157      	bne.n	8007be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e242      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3c:	d106      	bne.n	8007b4c <HAL_RCC_OscConfig+0x74>
 8007b3e:	4b76      	ldr	r3, [pc, #472]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a75      	ldr	r2, [pc, #468]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	e01d      	b.n	8007b88 <HAL_RCC_OscConfig+0xb0>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b54:	d10c      	bne.n	8007b70 <HAL_RCC_OscConfig+0x98>
 8007b56:	4b70      	ldr	r3, [pc, #448]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a6f      	ldr	r2, [pc, #444]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	4b6d      	ldr	r3, [pc, #436]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a6c      	ldr	r2, [pc, #432]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	e00b      	b.n	8007b88 <HAL_RCC_OscConfig+0xb0>
 8007b70:	4b69      	ldr	r3, [pc, #420]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a68      	ldr	r2, [pc, #416]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b7a:	6013      	str	r3, [r2, #0]
 8007b7c:	4b66      	ldr	r3, [pc, #408]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a65      	ldr	r2, [pc, #404]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d013      	beq.n	8007bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b90:	f7fe fb84 	bl	800629c <HAL_GetTick>
 8007b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b96:	e008      	b.n	8007baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b98:	f7fe fb80 	bl	800629c <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b64      	cmp	r3, #100	; 0x64
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e207      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007baa:	4b5b      	ldr	r3, [pc, #364]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0f0      	beq.n	8007b98 <HAL_RCC_OscConfig+0xc0>
 8007bb6:	e014      	b.n	8007be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bb8:	f7fe fb70 	bl	800629c <HAL_GetTick>
 8007bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bbe:	e008      	b.n	8007bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007bc0:	f7fe fb6c 	bl	800629c <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b64      	cmp	r3, #100	; 0x64
 8007bcc:	d901      	bls.n	8007bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e1f3      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bd2:	4b51      	ldr	r3, [pc, #324]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1f0      	bne.n	8007bc0 <HAL_RCC_OscConfig+0xe8>
 8007bde:	e000      	b.n	8007be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d063      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007bee:	4b4a      	ldr	r3, [pc, #296]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 030c 	and.w	r3, r3, #12
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00b      	beq.n	8007c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bfa:	4b47      	ldr	r3, [pc, #284]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c02:	2b08      	cmp	r3, #8
 8007c04:	d11c      	bne.n	8007c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c06:	4b44      	ldr	r3, [pc, #272]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d116      	bne.n	8007c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c12:	4b41      	ldr	r3, [pc, #260]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <HAL_RCC_OscConfig+0x152>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d001      	beq.n	8007c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e1c7      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c2a:	4b3b      	ldr	r3, [pc, #236]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	4937      	ldr	r1, [pc, #220]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c3e:	e03a      	b.n	8007cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d020      	beq.n	8007c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c48:	4b34      	ldr	r3, [pc, #208]	; (8007d1c <HAL_RCC_OscConfig+0x244>)
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c4e:	f7fe fb25 	bl	800629c <HAL_GetTick>
 8007c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c54:	e008      	b.n	8007c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c56:	f7fe fb21 	bl	800629c <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d901      	bls.n	8007c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e1a8      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c68:	4b2b      	ldr	r3, [pc, #172]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0f0      	beq.n	8007c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c74:	4b28      	ldr	r3, [pc, #160]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	4925      	ldr	r1, [pc, #148]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	600b      	str	r3, [r1, #0]
 8007c88:	e015      	b.n	8007cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c8a:	4b24      	ldr	r3, [pc, #144]	; (8007d1c <HAL_RCC_OscConfig+0x244>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c90:	f7fe fb04 	bl	800629c <HAL_GetTick>
 8007c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c96:	e008      	b.n	8007caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c98:	f7fe fb00 	bl	800629c <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e187      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007caa:	4b1b      	ldr	r3, [pc, #108]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1f0      	bne.n	8007c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d036      	beq.n	8007d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d016      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cca:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <HAL_RCC_OscConfig+0x248>)
 8007ccc:	2201      	movs	r2, #1
 8007cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd0:	f7fe fae4 	bl	800629c <HAL_GetTick>
 8007cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cd6:	e008      	b.n	8007cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cd8:	f7fe fae0 	bl	800629c <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d901      	bls.n	8007cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e167      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cea:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <HAL_RCC_OscConfig+0x240>)
 8007cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0f0      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x200>
 8007cf6:	e01b      	b.n	8007d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cf8:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <HAL_RCC_OscConfig+0x248>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cfe:	f7fe facd 	bl	800629c <HAL_GetTick>
 8007d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d04:	e00e      	b.n	8007d24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d06:	f7fe fac9 	bl	800629c <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d907      	bls.n	8007d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e150      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	42470000 	.word	0x42470000
 8007d20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d24:	4b88      	ldr	r3, [pc, #544]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1ea      	bne.n	8007d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 8097 	beq.w	8007e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d42:	4b81      	ldr	r3, [pc, #516]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10f      	bne.n	8007d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60bb      	str	r3, [r7, #8]
 8007d52:	4b7d      	ldr	r3, [pc, #500]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	4a7c      	ldr	r2, [pc, #496]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8007d5e:	4b7a      	ldr	r3, [pc, #488]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d66:	60bb      	str	r3, [r7, #8]
 8007d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d6e:	4b77      	ldr	r3, [pc, #476]	; (8007f4c <HAL_RCC_OscConfig+0x474>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d118      	bne.n	8007dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d7a:	4b74      	ldr	r3, [pc, #464]	; (8007f4c <HAL_RCC_OscConfig+0x474>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a73      	ldr	r2, [pc, #460]	; (8007f4c <HAL_RCC_OscConfig+0x474>)
 8007d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d86:	f7fe fa89 	bl	800629c <HAL_GetTick>
 8007d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d8c:	e008      	b.n	8007da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d8e:	f7fe fa85 	bl	800629c <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d901      	bls.n	8007da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e10c      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da0:	4b6a      	ldr	r3, [pc, #424]	; (8007f4c <HAL_RCC_OscConfig+0x474>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0f0      	beq.n	8007d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d106      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x2ea>
 8007db4:	4b64      	ldr	r3, [pc, #400]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db8:	4a63      	ldr	r2, [pc, #396]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007dba:	f043 0301 	orr.w	r3, r3, #1
 8007dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8007dc0:	e01c      	b.n	8007dfc <HAL_RCC_OscConfig+0x324>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	2b05      	cmp	r3, #5
 8007dc8:	d10c      	bne.n	8007de4 <HAL_RCC_OscConfig+0x30c>
 8007dca:	4b5f      	ldr	r3, [pc, #380]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dce:	4a5e      	ldr	r2, [pc, #376]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007dd0:	f043 0304 	orr.w	r3, r3, #4
 8007dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8007dd6:	4b5c      	ldr	r3, [pc, #368]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dda:	4a5b      	ldr	r2, [pc, #364]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007ddc:	f043 0301 	orr.w	r3, r3, #1
 8007de0:	6713      	str	r3, [r2, #112]	; 0x70
 8007de2:	e00b      	b.n	8007dfc <HAL_RCC_OscConfig+0x324>
 8007de4:	4b58      	ldr	r3, [pc, #352]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de8:	4a57      	ldr	r2, [pc, #348]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007dea:	f023 0301 	bic.w	r3, r3, #1
 8007dee:	6713      	str	r3, [r2, #112]	; 0x70
 8007df0:	4b55      	ldr	r3, [pc, #340]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df4:	4a54      	ldr	r2, [pc, #336]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007df6:	f023 0304 	bic.w	r3, r3, #4
 8007dfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d015      	beq.n	8007e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e04:	f7fe fa4a 	bl	800629c <HAL_GetTick>
 8007e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e0a:	e00a      	b.n	8007e22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e0c:	f7fe fa46 	bl	800629c <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e0cb      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e22:	4b49      	ldr	r3, [pc, #292]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d0ee      	beq.n	8007e0c <HAL_RCC_OscConfig+0x334>
 8007e2e:	e014      	b.n	8007e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e30:	f7fe fa34 	bl	800629c <HAL_GetTick>
 8007e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e36:	e00a      	b.n	8007e4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e38:	f7fe fa30 	bl	800629c <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e0b5      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e4e:	4b3e      	ldr	r3, [pc, #248]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1ee      	bne.n	8007e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d105      	bne.n	8007e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e60:	4b39      	ldr	r3, [pc, #228]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e64:	4a38      	ldr	r2, [pc, #224]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 80a1 	beq.w	8007fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e76:	4b34      	ldr	r3, [pc, #208]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f003 030c 	and.w	r3, r3, #12
 8007e7e:	2b08      	cmp	r3, #8
 8007e80:	d05c      	beq.n	8007f3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d141      	bne.n	8007f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e8a:	4b31      	ldr	r3, [pc, #196]	; (8007f50 <HAL_RCC_OscConfig+0x478>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e90:	f7fe fa04 	bl	800629c <HAL_GetTick>
 8007e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e96:	e008      	b.n	8007eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e98:	f7fe fa00 	bl	800629c <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e087      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eaa:	4b27      	ldr	r3, [pc, #156]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1f0      	bne.n	8007e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	69da      	ldr	r2, [r3, #28]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec4:	019b      	lsls	r3, r3, #6
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ecc:	085b      	lsrs	r3, r3, #1
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	041b      	lsls	r3, r3, #16
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	061b      	lsls	r3, r3, #24
 8007eda:	491b      	ldr	r1, [pc, #108]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ee0:	4b1b      	ldr	r3, [pc, #108]	; (8007f50 <HAL_RCC_OscConfig+0x478>)
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ee6:	f7fe f9d9 	bl	800629c <HAL_GetTick>
 8007eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eec:	e008      	b.n	8007f00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007eee:	f7fe f9d5 	bl	800629c <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d901      	bls.n	8007f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e05c      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f00:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d0f0      	beq.n	8007eee <HAL_RCC_OscConfig+0x416>
 8007f0c:	e054      	b.n	8007fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f0e:	4b10      	ldr	r3, [pc, #64]	; (8007f50 <HAL_RCC_OscConfig+0x478>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f14:	f7fe f9c2 	bl	800629c <HAL_GetTick>
 8007f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f1a:	e008      	b.n	8007f2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f1c:	f7fe f9be 	bl	800629c <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e045      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f2e:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <HAL_RCC_OscConfig+0x470>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1f0      	bne.n	8007f1c <HAL_RCC_OscConfig+0x444>
 8007f3a:	e03d      	b.n	8007fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d107      	bne.n	8007f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e038      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
 8007f48:	40023800 	.word	0x40023800
 8007f4c:	40007000 	.word	0x40007000
 8007f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f54:	4b1b      	ldr	r3, [pc, #108]	; (8007fc4 <HAL_RCC_OscConfig+0x4ec>)
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d028      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d121      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d11a      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f84:	4013      	ands	r3, r2
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d111      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	085b      	lsrs	r3, r3, #1
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d107      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d001      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e000      	b.n	8007fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	40023800 	.word	0x40023800

08007fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e0cc      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007fdc:	4b68      	ldr	r3, [pc, #416]	; (8008180 <HAL_RCC_ClockConfig+0x1b8>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 030f 	and.w	r3, r3, #15
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d90c      	bls.n	8008004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fea:	4b65      	ldr	r3, [pc, #404]	; (8008180 <HAL_RCC_ClockConfig+0x1b8>)
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	b2d2      	uxtb	r2, r2
 8007ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ff2:	4b63      	ldr	r3, [pc, #396]	; (8008180 <HAL_RCC_ClockConfig+0x1b8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d001      	beq.n	8008004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e0b8      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d020      	beq.n	8008052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800801c:	4b59      	ldr	r3, [pc, #356]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	4a58      	ldr	r2, [pc, #352]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 8008022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008034:	4b53      	ldr	r3, [pc, #332]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	4a52      	ldr	r2, [pc, #328]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 800803a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800803e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008040:	4b50      	ldr	r3, [pc, #320]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	494d      	ldr	r1, [pc, #308]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 800804e:	4313      	orrs	r3, r2
 8008050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d044      	beq.n	80080e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d107      	bne.n	8008076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008066:	4b47      	ldr	r3, [pc, #284]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d119      	bne.n	80080a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e07f      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d003      	beq.n	8008086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008082:	2b03      	cmp	r3, #3
 8008084:	d107      	bne.n	8008096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008086:	4b3f      	ldr	r3, [pc, #252]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d109      	bne.n	80080a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e06f      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008096:	4b3b      	ldr	r3, [pc, #236]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e067      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080a6:	4b37      	ldr	r3, [pc, #220]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f023 0203 	bic.w	r2, r3, #3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	4934      	ldr	r1, [pc, #208]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080b8:	f7fe f8f0 	bl	800629c <HAL_GetTick>
 80080bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080be:	e00a      	b.n	80080d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080c0:	f7fe f8ec 	bl	800629c <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e04f      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080d6:	4b2b      	ldr	r3, [pc, #172]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 020c 	and.w	r2, r3, #12
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d1eb      	bne.n	80080c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080e8:	4b25      	ldr	r3, [pc, #148]	; (8008180 <HAL_RCC_ClockConfig+0x1b8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d20c      	bcs.n	8008110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080f6:	4b22      	ldr	r3, [pc, #136]	; (8008180 <HAL_RCC_ClockConfig+0x1b8>)
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	b2d2      	uxtb	r2, r2
 80080fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080fe:	4b20      	ldr	r3, [pc, #128]	; (8008180 <HAL_RCC_ClockConfig+0x1b8>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d001      	beq.n	8008110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e032      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	d008      	beq.n	800812e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800811c:	4b19      	ldr	r3, [pc, #100]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	4916      	ldr	r1, [pc, #88]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 800812a:	4313      	orrs	r3, r2
 800812c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0308 	and.w	r3, r3, #8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800813a:	4b12      	ldr	r3, [pc, #72]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	490e      	ldr	r1, [pc, #56]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 800814a:	4313      	orrs	r3, r2
 800814c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800814e:	f000 f821 	bl	8008194 <HAL_RCC_GetSysClockFreq>
 8008152:	4602      	mov	r2, r0
 8008154:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <HAL_RCC_ClockConfig+0x1bc>)
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	091b      	lsrs	r3, r3, #4
 800815a:	f003 030f 	and.w	r3, r3, #15
 800815e:	490a      	ldr	r1, [pc, #40]	; (8008188 <HAL_RCC_ClockConfig+0x1c0>)
 8008160:	5ccb      	ldrb	r3, [r1, r3]
 8008162:	fa22 f303 	lsr.w	r3, r2, r3
 8008166:	4a09      	ldr	r2, [pc, #36]	; (800818c <HAL_RCC_ClockConfig+0x1c4>)
 8008168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800816a:	4b09      	ldr	r3, [pc, #36]	; (8008190 <HAL_RCC_ClockConfig+0x1c8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe f850 	bl	8006214 <HAL_InitTick>

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	40023c00 	.word	0x40023c00
 8008184:	40023800 	.word	0x40023800
 8008188:	0801584c 	.word	0x0801584c
 800818c:	20000070 	.word	0x20000070
 8008190:	200000cc 	.word	0x200000cc

08008194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008198:	b094      	sub	sp, #80	; 0x50
 800819a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	647b      	str	r3, [r7, #68]	; 0x44
 80081a0:	2300      	movs	r3, #0
 80081a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081a4:	2300      	movs	r3, #0
 80081a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081ac:	4b79      	ldr	r3, [pc, #484]	; (8008394 <HAL_RCC_GetSysClockFreq+0x200>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f003 030c 	and.w	r3, r3, #12
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d00d      	beq.n	80081d4 <HAL_RCC_GetSysClockFreq+0x40>
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	f200 80e1 	bhi.w	8008380 <HAL_RCC_GetSysClockFreq+0x1ec>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <HAL_RCC_GetSysClockFreq+0x34>
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d003      	beq.n	80081ce <HAL_RCC_GetSysClockFreq+0x3a>
 80081c6:	e0db      	b.n	8008380 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081c8:	4b73      	ldr	r3, [pc, #460]	; (8008398 <HAL_RCC_GetSysClockFreq+0x204>)
 80081ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80081cc:	e0db      	b.n	8008386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081ce:	4b73      	ldr	r3, [pc, #460]	; (800839c <HAL_RCC_GetSysClockFreq+0x208>)
 80081d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081d2:	e0d8      	b.n	8008386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081d4:	4b6f      	ldr	r3, [pc, #444]	; (8008394 <HAL_RCC_GetSysClockFreq+0x200>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081de:	4b6d      	ldr	r3, [pc, #436]	; (8008394 <HAL_RCC_GetSysClockFreq+0x200>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d063      	beq.n	80082b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081ea:	4b6a      	ldr	r3, [pc, #424]	; (8008394 <HAL_RCC_GetSysClockFreq+0x200>)
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	099b      	lsrs	r3, r3, #6
 80081f0:	2200      	movs	r2, #0
 80081f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80081f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fc:	633b      	str	r3, [r7, #48]	; 0x30
 80081fe:	2300      	movs	r3, #0
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
 8008202:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008206:	4622      	mov	r2, r4
 8008208:	462b      	mov	r3, r5
 800820a:	f04f 0000 	mov.w	r0, #0
 800820e:	f04f 0100 	mov.w	r1, #0
 8008212:	0159      	lsls	r1, r3, #5
 8008214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008218:	0150      	lsls	r0, r2, #5
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4621      	mov	r1, r4
 8008220:	1a51      	subs	r1, r2, r1
 8008222:	6139      	str	r1, [r7, #16]
 8008224:	4629      	mov	r1, r5
 8008226:	eb63 0301 	sbc.w	r3, r3, r1
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	f04f 0200 	mov.w	r2, #0
 8008230:	f04f 0300 	mov.w	r3, #0
 8008234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008238:	4659      	mov	r1, fp
 800823a:	018b      	lsls	r3, r1, #6
 800823c:	4651      	mov	r1, sl
 800823e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008242:	4651      	mov	r1, sl
 8008244:	018a      	lsls	r2, r1, #6
 8008246:	4651      	mov	r1, sl
 8008248:	ebb2 0801 	subs.w	r8, r2, r1
 800824c:	4659      	mov	r1, fp
 800824e:	eb63 0901 	sbc.w	r9, r3, r1
 8008252:	f04f 0200 	mov.w	r2, #0
 8008256:	f04f 0300 	mov.w	r3, #0
 800825a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800825e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008266:	4690      	mov	r8, r2
 8008268:	4699      	mov	r9, r3
 800826a:	4623      	mov	r3, r4
 800826c:	eb18 0303 	adds.w	r3, r8, r3
 8008270:	60bb      	str	r3, [r7, #8]
 8008272:	462b      	mov	r3, r5
 8008274:	eb49 0303 	adc.w	r3, r9, r3
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	f04f 0200 	mov.w	r2, #0
 800827e:	f04f 0300 	mov.w	r3, #0
 8008282:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008286:	4629      	mov	r1, r5
 8008288:	024b      	lsls	r3, r1, #9
 800828a:	4621      	mov	r1, r4
 800828c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008290:	4621      	mov	r1, r4
 8008292:	024a      	lsls	r2, r1, #9
 8008294:	4610      	mov	r0, r2
 8008296:	4619      	mov	r1, r3
 8008298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800829a:	2200      	movs	r2, #0
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
 800829e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082a4:	f7f8 fd00 	bl	8000ca8 <__aeabi_uldivmod>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	4613      	mov	r3, r2
 80082ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082b0:	e058      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082b2:	4b38      	ldr	r3, [pc, #224]	; (8008394 <HAL_RCC_GetSysClockFreq+0x200>)
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	099b      	lsrs	r3, r3, #6
 80082b8:	2200      	movs	r2, #0
 80082ba:	4618      	mov	r0, r3
 80082bc:	4611      	mov	r1, r2
 80082be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80082c2:	623b      	str	r3, [r7, #32]
 80082c4:	2300      	movs	r3, #0
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
 80082c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80082cc:	4642      	mov	r2, r8
 80082ce:	464b      	mov	r3, r9
 80082d0:	f04f 0000 	mov.w	r0, #0
 80082d4:	f04f 0100 	mov.w	r1, #0
 80082d8:	0159      	lsls	r1, r3, #5
 80082da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082de:	0150      	lsls	r0, r2, #5
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4641      	mov	r1, r8
 80082e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80082ea:	4649      	mov	r1, r9
 80082ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80082fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008300:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008304:	ebb2 040a 	subs.w	r4, r2, sl
 8008308:	eb63 050b 	sbc.w	r5, r3, fp
 800830c:	f04f 0200 	mov.w	r2, #0
 8008310:	f04f 0300 	mov.w	r3, #0
 8008314:	00eb      	lsls	r3, r5, #3
 8008316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800831a:	00e2      	lsls	r2, r4, #3
 800831c:	4614      	mov	r4, r2
 800831e:	461d      	mov	r5, r3
 8008320:	4643      	mov	r3, r8
 8008322:	18e3      	adds	r3, r4, r3
 8008324:	603b      	str	r3, [r7, #0]
 8008326:	464b      	mov	r3, r9
 8008328:	eb45 0303 	adc.w	r3, r5, r3
 800832c:	607b      	str	r3, [r7, #4]
 800832e:	f04f 0200 	mov.w	r2, #0
 8008332:	f04f 0300 	mov.w	r3, #0
 8008336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800833a:	4629      	mov	r1, r5
 800833c:	028b      	lsls	r3, r1, #10
 800833e:	4621      	mov	r1, r4
 8008340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008344:	4621      	mov	r1, r4
 8008346:	028a      	lsls	r2, r1, #10
 8008348:	4610      	mov	r0, r2
 800834a:	4619      	mov	r1, r3
 800834c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800834e:	2200      	movs	r2, #0
 8008350:	61bb      	str	r3, [r7, #24]
 8008352:	61fa      	str	r2, [r7, #28]
 8008354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008358:	f7f8 fca6 	bl	8000ca8 <__aeabi_uldivmod>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4613      	mov	r3, r2
 8008362:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008364:	4b0b      	ldr	r3, [pc, #44]	; (8008394 <HAL_RCC_GetSysClockFreq+0x200>)
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	0c1b      	lsrs	r3, r3, #16
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	3301      	adds	r3, #1
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008374:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008378:	fbb2 f3f3 	udiv	r3, r2, r3
 800837c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800837e:	e002      	b.n	8008386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008380:	4b05      	ldr	r3, [pc, #20]	; (8008398 <HAL_RCC_GetSysClockFreq+0x204>)
 8008382:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008388:	4618      	mov	r0, r3
 800838a:	3750      	adds	r7, #80	; 0x50
 800838c:	46bd      	mov	sp, r7
 800838e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008392:	bf00      	nop
 8008394:	40023800 	.word	0x40023800
 8008398:	00f42400 	.word	0x00f42400
 800839c:	007a1200 	.word	0x007a1200

080083a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083a0:	b480      	push	{r7}
 80083a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083a4:	4b03      	ldr	r3, [pc, #12]	; (80083b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80083a6:	681b      	ldr	r3, [r3, #0]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	20000070 	.word	0x20000070

080083b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80083bc:	f7ff fff0 	bl	80083a0 <HAL_RCC_GetHCLKFreq>
 80083c0:	4602      	mov	r2, r0
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	0a9b      	lsrs	r3, r3, #10
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	4903      	ldr	r1, [pc, #12]	; (80083dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80083ce:	5ccb      	ldrb	r3, [r1, r3]
 80083d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	40023800 	.word	0x40023800
 80083dc:	0801585c 	.word	0x0801585c

080083e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80083e4:	f7ff ffdc 	bl	80083a0 <HAL_RCC_GetHCLKFreq>
 80083e8:	4602      	mov	r2, r0
 80083ea:	4b05      	ldr	r3, [pc, #20]	; (8008400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	0b5b      	lsrs	r3, r3, #13
 80083f0:	f003 0307 	and.w	r3, r3, #7
 80083f4:	4903      	ldr	r1, [pc, #12]	; (8008404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083f6:	5ccb      	ldrb	r3, [r1, r3]
 80083f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	40023800 	.word	0x40023800
 8008404:	0801585c 	.word	0x0801585c

08008408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008414:	2300      	movs	r3, #0
 8008416:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10b      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800842c:	2b00      	cmp	r3, #0
 800842e:	d105      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008438:	2b00      	cmp	r3, #0
 800843a:	d075      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800843c:	4b91      	ldr	r3, [pc, #580]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008442:	f7fd ff2b 	bl	800629c <HAL_GetTick>
 8008446:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008448:	e008      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800844a:	f7fd ff27 	bl	800629c <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b02      	cmp	r3, #2
 8008456:	d901      	bls.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e189      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800845c:	4b8a      	ldr	r3, [pc, #552]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1f0      	bne.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	d009      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	019a      	lsls	r2, r3, #6
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	071b      	lsls	r3, r3, #28
 8008480:	4981      	ldr	r1, [pc, #516]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d01f      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008494:	4b7c      	ldr	r3, [pc, #496]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800849a:	0f1b      	lsrs	r3, r3, #28
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	019a      	lsls	r2, r3, #6
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	061b      	lsls	r3, r3, #24
 80084ae:	431a      	orrs	r2, r3
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	071b      	lsls	r3, r3, #28
 80084b4:	4974      	ldr	r1, [pc, #464]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80084bc:	4b72      	ldr	r3, [pc, #456]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084c2:	f023 021f 	bic.w	r2, r3, #31
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	496e      	ldr	r1, [pc, #440]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00d      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	019a      	lsls	r2, r3, #6
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	061b      	lsls	r3, r3, #24
 80084ec:	431a      	orrs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	071b      	lsls	r3, r3, #28
 80084f4:	4964      	ldr	r1, [pc, #400]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084fc:	4b61      	ldr	r3, [pc, #388]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80084fe:	2201      	movs	r2, #1
 8008500:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008502:	f7fd fecb 	bl	800629c <HAL_GetTick>
 8008506:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008508:	e008      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800850a:	f7fd fec7 	bl	800629c <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d901      	bls.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e129      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800851c:	4b5a      	ldr	r3, [pc, #360]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0f0      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b00      	cmp	r3, #0
 8008532:	d105      	bne.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800853c:	2b00      	cmp	r3, #0
 800853e:	d079      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008540:	4b52      	ldr	r3, [pc, #328]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008542:	2200      	movs	r2, #0
 8008544:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008546:	f7fd fea9 	bl	800629c <HAL_GetTick>
 800854a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800854c:	e008      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800854e:	f7fd fea5 	bl	800629c <HAL_GetTick>
 8008552:	4602      	mov	r2, r0
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	2b02      	cmp	r3, #2
 800855a:	d901      	bls.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800855c:	2303      	movs	r3, #3
 800855e:	e107      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008560:	4b49      	ldr	r3, [pc, #292]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800856c:	d0ef      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0304 	and.w	r3, r3, #4
 8008576:	2b00      	cmp	r3, #0
 8008578:	d020      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800857a:	4b43      	ldr	r3, [pc, #268]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800857c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008580:	0f1b      	lsrs	r3, r3, #28
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	019a      	lsls	r2, r3, #6
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	061b      	lsls	r3, r3, #24
 8008594:	431a      	orrs	r2, r3
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	071b      	lsls	r3, r3, #28
 800859a:	493b      	ldr	r1, [pc, #236]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800859c:	4313      	orrs	r3, r2
 800859e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80085a2:	4b39      	ldr	r3, [pc, #228]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80085a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	3b01      	subs	r3, #1
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	4934      	ldr	r1, [pc, #208]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d01e      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085c8:	4b2f      	ldr	r3, [pc, #188]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80085ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ce:	0e1b      	lsrs	r3, r3, #24
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	019a      	lsls	r2, r3, #6
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	061b      	lsls	r3, r3, #24
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	071b      	lsls	r3, r3, #28
 80085e8:	4927      	ldr	r1, [pc, #156]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80085f0:	4b25      	ldr	r3, [pc, #148]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80085f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	4922      	ldr	r1, [pc, #136]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008600:	4313      	orrs	r3, r2
 8008602:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008606:	4b21      	ldr	r3, [pc, #132]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008608:	2201      	movs	r2, #1
 800860a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800860c:	f7fd fe46 	bl	800629c <HAL_GetTick>
 8008610:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008612:	e008      	b.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008614:	f7fd fe42 	bl	800629c <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	2b02      	cmp	r3, #2
 8008620:	d901      	bls.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e0a4      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008626:	4b18      	ldr	r3, [pc, #96]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800862e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008632:	d1ef      	bne.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0320 	and.w	r3, r3, #32
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 808b 	beq.w	8008758 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]
 8008646:	4b10      	ldr	r3, [pc, #64]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	4a0f      	ldr	r2, [pc, #60]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800864c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008650:	6413      	str	r3, [r2, #64]	; 0x40
 8008652:	4b0d      	ldr	r3, [pc, #52]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800865e:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a0b      	ldr	r2, [pc, #44]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008668:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800866a:	f7fd fe17 	bl	800629c <HAL_GetTick>
 800866e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008670:	e010      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008672:	f7fd fe13 	bl	800629c <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d909      	bls.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e075      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008684:	42470068 	.word	0x42470068
 8008688:	40023800 	.word	0x40023800
 800868c:	42470070 	.word	0x42470070
 8008690:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008694:	4b38      	ldr	r3, [pc, #224]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0e8      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086a0:	4b36      	ldr	r3, [pc, #216]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d02f      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d028      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086be:	4b2f      	ldr	r3, [pc, #188]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086c8:	4b2d      	ldr	r3, [pc, #180]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80086ca:	2201      	movs	r2, #1
 80086cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086ce:	4b2c      	ldr	r3, [pc, #176]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80086d4:	4a29      	ldr	r2, [pc, #164]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086da:	4b28      	ldr	r3, [pc, #160]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d114      	bne.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80086e6:	f7fd fdd9 	bl	800629c <HAL_GetTick>
 80086ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086ec:	e00a      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086ee:	f7fd fdd5 	bl	800629c <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d901      	bls.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e035      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008704:	4b1d      	ldr	r3, [pc, #116]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008708:	f003 0302 	and.w	r3, r3, #2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0ee      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800871c:	d10d      	bne.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800871e:	4b17      	ldr	r3, [pc, #92]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800872e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008732:	4912      	ldr	r1, [pc, #72]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008734:	4313      	orrs	r3, r2
 8008736:	608b      	str	r3, [r1, #8]
 8008738:	e005      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800873a:	4b10      	ldr	r3, [pc, #64]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	4a0f      	ldr	r2, [pc, #60]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008740:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008744:	6093      	str	r3, [r2, #8]
 8008746:	4b0d      	ldr	r3, [pc, #52]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008748:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008752:	490a      	ldr	r1, [pc, #40]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008754:	4313      	orrs	r3, r2
 8008756:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0310 	and.w	r3, r3, #16
 8008760:	2b00      	cmp	r3, #0
 8008762:	d004      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800876a:	4b06      	ldr	r3, [pc, #24]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800876c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	40007000 	.word	0x40007000
 800877c:	40023800 	.word	0x40023800
 8008780:	42470e40 	.word	0x42470e40
 8008784:	424711e0 	.word	0x424711e0

08008788 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e066      	b.n	800886c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	7f5b      	ldrb	r3, [r3, #29]
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d105      	bne.n	80087b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7fb fcb6 	bl	8004120 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	22ca      	movs	r2, #202	; 0xca
 80087c0:	625a      	str	r2, [r3, #36]	; 0x24
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2253      	movs	r2, #83	; 0x53
 80087c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f927 	bl	8008a1e <RTC_EnterInitMode>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d12c      	bne.n	8008834 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6812      	ldr	r2, [r2, #0]
 80087e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ec:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6899      	ldr	r1, [r3, #8]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	68d2      	ldr	r2, [r2, #12]
 8008814:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6919      	ldr	r1, [r3, #16]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	041a      	lsls	r2, r3, #16
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	430a      	orrs	r2, r1
 8008828:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f92e 	bl	8008a8c <RTC_ExitInitMode>
 8008830:	4603      	mov	r3, r0
 8008832:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d113      	bne.n	8008862 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008848:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	699a      	ldr	r2, [r3, #24]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	22ff      	movs	r2, #255	; 0xff
 8008868:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800886a:	7bfb      	ldrb	r3, [r7, #15]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80088a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80088aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	0c1b      	lsrs	r3, r3, #16
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	0a1b      	lsrs	r3, r3, #8
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	0d9b      	lsrs	r3, r3, #22
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	f003 0301 	and.w	r3, r3, #1
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d11a      	bne.n	8008926 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 f8ee 	bl	8008ad6 <RTC_Bcd2ToByte>
 80088fa:	4603      	mov	r3, r0
 80088fc:	461a      	mov	r2, r3
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	785b      	ldrb	r3, [r3, #1]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 f8e5 	bl	8008ad6 <RTC_Bcd2ToByte>
 800890c:	4603      	mov	r3, r0
 800890e:	461a      	mov	r2, r3
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	789b      	ldrb	r3, [r3, #2]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 f8dc 	bl	8008ad6 <RTC_Bcd2ToByte>
 800891e:	4603      	mov	r3, r0
 8008920:	461a      	mov	r2, r3
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800894a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800894e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	0c1b      	lsrs	r3, r3, #16
 8008954:	b2da      	uxtb	r2, r3
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	0a1b      	lsrs	r3, r3, #8
 800895e:	b2db      	uxtb	r3, r3
 8008960:	f003 031f 	and.w	r3, r3, #31
 8008964:	b2da      	uxtb	r2, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008972:	b2da      	uxtb	r2, r3
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	0b5b      	lsrs	r3, r3, #13
 800897c:	b2db      	uxtb	r3, r3
 800897e:	f003 0307 	and.w	r3, r3, #7
 8008982:	b2da      	uxtb	r2, r3
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d11a      	bne.n	80089c4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	78db      	ldrb	r3, [r3, #3]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f89f 	bl	8008ad6 <RTC_Bcd2ToByte>
 8008998:	4603      	mov	r3, r0
 800899a:	461a      	mov	r2, r3
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	785b      	ldrb	r3, [r3, #1]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 f896 	bl	8008ad6 <RTC_Bcd2ToByte>
 80089aa:	4603      	mov	r3, r0
 80089ac:	461a      	mov	r2, r3
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	789b      	ldrb	r3, [r3, #2]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f88d 	bl	8008ad6 <RTC_Bcd2ToByte>
 80089bc:	4603      	mov	r3, r0
 80089be:	461a      	mov	r2, r3
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68da      	ldr	r2, [r3, #12]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80089e8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089ea:	f7fd fc57 	bl	800629c <HAL_GetTick>
 80089ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089f0:	e009      	b.n	8008a06 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80089f2:	f7fd fc53 	bl	800629c <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a00:	d901      	bls.n	8008a06 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e007      	b.n	8008a16 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f003 0320 	and.w	r3, r3, #32
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d0ee      	beq.n	80089f2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d122      	bne.n	8008a82 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68da      	ldr	r2, [r3, #12]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a4a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a4c:	f7fd fc26 	bl	800629c <HAL_GetTick>
 8008a50:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008a52:	e00c      	b.n	8008a6e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008a54:	f7fd fc22 	bl	800629c <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a62:	d904      	bls.n	8008a6e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2204      	movs	r2, #4
 8008a68:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d102      	bne.n	8008a82 <RTC_EnterInitMode+0x64>
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d1e8      	bne.n	8008a54 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008aa6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f003 0320 	and.w	r3, r3, #32
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10a      	bne.n	8008acc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff ff89 	bl	80089ce <HAL_RTC_WaitForSynchro>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d004      	beq.n	8008acc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2204      	movs	r2, #4
 8008ac6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b085      	sub	sp, #20
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	4603      	mov	r3, r0
 8008ade:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	091b      	lsrs	r3, r3, #4
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	461a      	mov	r2, r3
 8008aec:	0092      	lsls	r2, r2, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	f003 030f 	and.w	r3, r3, #15
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	4413      	add	r3, r2
 8008b00:	b2db      	uxtb	r3, r3
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b082      	sub	sp, #8
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e022      	b.n	8008b66 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7fb fb3e 	bl	80041b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2203      	movs	r2, #3
 8008b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f815 	bl	8008b70 <HAL_SD_InitCard>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e00a      	b.n	8008b66 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b70:	b5b0      	push	{r4, r5, r7, lr}
 8008b72:	b08e      	sub	sp, #56	; 0x38
 8008b74:	af04      	add	r7, sp, #16
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008b80:	2300      	movs	r3, #0
 8008b82:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008b8c:	2376      	movs	r3, #118	; 0x76
 8008b8e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681d      	ldr	r5, [r3, #0]
 8008b94:	466c      	mov	r4, sp
 8008b96:	f107 0314 	add.w	r3, r7, #20
 8008b9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ba2:	f107 0308 	add.w	r3, r7, #8
 8008ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f002 ffb9 	bl	800bb20 <SDIO_Init>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e04f      	b.n	8008c60 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008bc0:	4b29      	ldr	r3, [pc, #164]	; (8008c68 <HAL_SD_InitCard+0xf8>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f002 fff1 	bl	800bbb2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008bd0:	4b25      	ldr	r3, [pc, #148]	; (8008c68 <HAL_SD_InitCard+0xf8>)
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008bd6:	2002      	movs	r0, #2
 8008bd8:	f7fd fb6c 	bl	80062b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fe69 	bl	80098b4 <SD_PowerON>
 8008be2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00b      	beq.n	8008c02 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e02e      	b.n	8008c60 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fd88 	bl	8009718 <SD_InitCard>
 8008c08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00b      	beq.n	8008c28 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e01b      	b.n	8008c60 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c30:	4618      	mov	r0, r3
 8008c32:	f003 f850 	bl	800bcd6 <SDMMC_CmdBlockLength>
 8008c36:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00f      	beq.n	8008c5e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <HAL_SD_InitCard+0xfc>)
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3728      	adds	r7, #40	; 0x28
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bdb0      	pop	{r4, r5, r7, pc}
 8008c68:	422580a0 	.word	0x422580a0
 8008c6c:	004005ff 	.word	0x004005ff

08008c70 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b092      	sub	sp, #72	; 0x48
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
 8008c7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c7e:	f7fd fb0d 	bl	800629c <HAL_GetTick>
 8008c82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d107      	bne.n	8008ca2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e1bd      	b.n	800901e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	f040 81b0 	bne.w	8009010 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	441a      	add	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d907      	bls.n	8008cd4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e1a4      	b.n	800901e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2203      	movs	r2, #3
 8008cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d002      	beq.n	8008cf2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cee:	025b      	lsls	r3, r3, #9
 8008cf0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	025b      	lsls	r3, r3, #9
 8008cfc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008cfe:	2390      	movs	r3, #144	; 0x90
 8008d00:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008d02:	2302      	movs	r3, #2
 8008d04:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f107 0214 	add.w	r2, r7, #20
 8008d16:	4611      	mov	r1, r2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f002 ffb0 	bl	800bc7e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d90a      	bls.n	8008d3a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2202      	movs	r2, #2
 8008d28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d30:	4618      	mov	r0, r3
 8008d32:	f003 f814 	bl	800bd5e <SDMMC_CmdReadMultiBlock>
 8008d36:	6478      	str	r0, [r7, #68]	; 0x44
 8008d38:	e009      	b.n	8008d4e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d46:	4618      	mov	r0, r3
 8008d48:	f002 ffe7 	bl	800bd1a <SDMMC_CmdReadSingleBlock>
 8008d4c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d012      	beq.n	8008d7a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a7a      	ldr	r2, [pc, #488]	; (8008f44 <HAL_SD_ReadBlocks+0x2d4>)
 8008d5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d62:	431a      	orrs	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e151      	b.n	800901e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008d7e:	e061      	b.n	8008e44 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d03c      	beq.n	8008e08 <HAL_SD_ReadBlocks+0x198>
 8008d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d039      	beq.n	8008e08 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008d94:	2300      	movs	r3, #0
 8008d96:	643b      	str	r3, [r7, #64]	; 0x40
 8008d98:	e033      	b.n	8008e02 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f002 fee9 	bl	800bb76 <SDIO_ReadFIFO>
 8008da4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db0:	3301      	adds	r3, #1
 8008db2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db6:	3b01      	subs	r3, #1
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbc:	0a1b      	lsrs	r3, r3, #8
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd2:	0c1b      	lsrs	r3, r3, #16
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ddc:	3301      	adds	r3, #1
 8008dde:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de2:	3b01      	subs	r3, #1
 8008de4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de8:	0e1b      	lsrs	r3, r3, #24
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dee:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df2:	3301      	adds	r3, #1
 8008df4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dfe:	3301      	adds	r3, #1
 8008e00:	643b      	str	r3, [r7, #64]	; 0x40
 8008e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e04:	2b07      	cmp	r3, #7
 8008e06:	d9c8      	bls.n	8008d9a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008e08:	f7fd fa48 	bl	800629c <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d902      	bls.n	8008e1e <HAL_SD_ReadBlocks+0x1ae>
 8008e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d112      	bne.n	8008e44 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a48      	ldr	r2, [pc, #288]	; (8008f44 <HAL_SD_ReadBlocks+0x2d4>)
 8008e24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e0ec      	b.n	800901e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e4a:	f240 332a 	movw	r3, #810	; 0x32a
 8008e4e:	4013      	ands	r3, r2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d095      	beq.n	8008d80 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d022      	beq.n	8008ea8 <HAL_SD_ReadBlocks+0x238>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d91f      	bls.n	8008ea8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d01b      	beq.n	8008ea8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f002 ffd9 	bl	800be2c <SDMMC_CmdStopTransfer>
 8008e7a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d012      	beq.n	8008ea8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a2f      	ldr	r2, [pc, #188]	; (8008f44 <HAL_SD_ReadBlocks+0x2d4>)
 8008e88:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e90:	431a      	orrs	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e0ba      	b.n	800901e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eae:	f003 0308 	and.w	r3, r3, #8
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d012      	beq.n	8008edc <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a22      	ldr	r2, [pc, #136]	; (8008f44 <HAL_SD_ReadBlocks+0x2d4>)
 8008ebc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec2:	f043 0208 	orr.w	r2, r3, #8
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e0a0      	b.n	800901e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d012      	beq.n	8008f10 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a15      	ldr	r2, [pc, #84]	; (8008f44 <HAL_SD_ReadBlocks+0x2d4>)
 8008ef0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef6:	f043 0202 	orr.w	r2, r3, #2
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e086      	b.n	800901e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f16:	f003 0320 	and.w	r3, r3, #32
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d063      	beq.n	8008fe6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a08      	ldr	r2, [pc, #32]	; (8008f44 <HAL_SD_ReadBlocks+0x2d4>)
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	f043 0220 	orr.w	r2, r3, #32
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e06c      	b.n	800901e <HAL_SD_ReadBlocks+0x3ae>
 8008f44:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f002 fe12 	bl	800bb76 <SDIO_ReadFIFO>
 8008f52:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5e:	3301      	adds	r3, #1
 8008f60:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f64:	3b01      	subs	r3, #1
 8008f66:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6a:	0a1b      	lsrs	r3, r3, #8
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f70:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f74:	3301      	adds	r3, #1
 8008f76:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f80:	0c1b      	lsrs	r3, r3, #16
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f86:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f90:	3b01      	subs	r3, #1
 8008f92:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	0e1b      	lsrs	r3, r3, #24
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008faa:	f7fd f977 	bl	800629c <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d902      	bls.n	8008fc0 <HAL_SD_ReadBlocks+0x350>
 8008fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d112      	bne.n	8008fe6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a18      	ldr	r2, [pc, #96]	; (8009028 <HAL_SD_ReadBlocks+0x3b8>)
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e01b      	b.n	800901e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <HAL_SD_ReadBlocks+0x38a>
 8008ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1a6      	bne.n	8008f48 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f240 523a 	movw	r2, #1338	; 0x53a
 8009002:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	e006      	b.n	800901e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009014:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
  }
}
 800901e:	4618      	mov	r0, r3
 8009020:	3748      	adds	r7, #72	; 0x48
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	004005ff 	.word	0x004005ff

0800902c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b092      	sub	sp, #72	; 0x48
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800903a:	f7fd f92f 	bl	800629c <HAL_GetTick>
 800903e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d107      	bne.n	800905e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e166      	b.n	800932c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b01      	cmp	r3, #1
 8009068:	f040 8159 	bne.w	800931e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	441a      	add	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800907c:	429a      	cmp	r2, r3
 800907e:	d907      	bls.n	8009090 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e14d      	b.n	800932c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2203      	movs	r2, #3
 8009094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2200      	movs	r2, #0
 800909e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d002      	beq.n	80090ae <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	025b      	lsls	r3, r3, #9
 80090ac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090ae:	f04f 33ff 	mov.w	r3, #4294967295
 80090b2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	025b      	lsls	r3, r3, #9
 80090b8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80090ba:	2390      	movs	r3, #144	; 0x90
 80090bc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80090be:	2300      	movs	r3, #0
 80090c0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80090c6:	2301      	movs	r3, #1
 80090c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f107 0218 	add.w	r2, r7, #24
 80090d2:	4611      	mov	r1, r2
 80090d4:	4618      	mov	r0, r3
 80090d6:	f002 fdd2 	bl	800bc7e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d90a      	bls.n	80090f6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2220      	movs	r2, #32
 80090e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090ec:	4618      	mov	r0, r3
 80090ee:	f002 fe7a 	bl	800bde6 <SDMMC_CmdWriteMultiBlock>
 80090f2:	6478      	str	r0, [r7, #68]	; 0x44
 80090f4:	e009      	b.n	800910a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2210      	movs	r2, #16
 80090fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009102:	4618      	mov	r0, r3
 8009104:	f002 fe4d 	bl	800bda2 <SDMMC_CmdWriteSingleBlock>
 8009108:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800910a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800910c:	2b00      	cmp	r3, #0
 800910e:	d012      	beq.n	8009136 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a87      	ldr	r2, [pc, #540]	; (8009334 <HAL_SD_WriteBlocks+0x308>)
 8009116:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800911c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800911e:	431a      	orrs	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e0fa      	b.n	800932c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800913a:	e065      	b.n	8009208 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d040      	beq.n	80091cc <HAL_SD_WriteBlocks+0x1a0>
 800914a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d03d      	beq.n	80091cc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009150:	2300      	movs	r3, #0
 8009152:	643b      	str	r3, [r7, #64]	; 0x40
 8009154:	e037      	b.n	80091c6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800915c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915e:	3301      	adds	r3, #1
 8009160:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009164:	3b01      	subs	r3, #1
 8009166:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	021a      	lsls	r2, r3, #8
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	4313      	orrs	r3, r2
 8009172:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009176:	3301      	adds	r3, #1
 8009178:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800917a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800917c:	3b01      	subs	r3, #1
 800917e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	041a      	lsls	r2, r3, #16
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800918c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918e:	3301      	adds	r3, #1
 8009190:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009194:	3b01      	subs	r3, #1
 8009196:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	061a      	lsls	r2, r3, #24
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80091a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a6:	3301      	adds	r3, #1
 80091a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80091aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ac:	3b01      	subs	r3, #1
 80091ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f107 0214 	add.w	r2, r7, #20
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f002 fce8 	bl	800bb90 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80091c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c2:	3301      	adds	r3, #1
 80091c4:	643b      	str	r3, [r7, #64]	; 0x40
 80091c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c8:	2b07      	cmp	r3, #7
 80091ca:	d9c4      	bls.n	8009156 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80091cc:	f7fd f866 	bl	800629c <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091d8:	429a      	cmp	r2, r3
 80091da:	d902      	bls.n	80091e2 <HAL_SD_WriteBlocks+0x1b6>
 80091dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d112      	bne.n	8009208 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a53      	ldr	r2, [pc, #332]	; (8009334 <HAL_SD_WriteBlocks+0x308>)
 80091e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f0:	431a      	orrs	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e091      	b.n	800932c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800920e:	f240 331a 	movw	r3, #794	; 0x31a
 8009212:	4013      	ands	r3, r2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d091      	beq.n	800913c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009222:	2b00      	cmp	r3, #0
 8009224:	d022      	beq.n	800926c <HAL_SD_WriteBlocks+0x240>
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d91f      	bls.n	800926c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009230:	2b03      	cmp	r3, #3
 8009232:	d01b      	beq.n	800926c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4618      	mov	r0, r3
 800923a:	f002 fdf7 	bl	800be2c <SDMMC_CmdStopTransfer>
 800923e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009242:	2b00      	cmp	r3, #0
 8009244:	d012      	beq.n	800926c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a3a      	ldr	r2, [pc, #232]	; (8009334 <HAL_SD_WriteBlocks+0x308>)
 800924c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009254:	431a      	orrs	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e05f      	b.n	800932c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d012      	beq.n	80092a0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a2d      	ldr	r2, [pc, #180]	; (8009334 <HAL_SD_WriteBlocks+0x308>)
 8009280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009286:	f043 0208 	orr.w	r2, r3, #8
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e045      	b.n	800932c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d012      	beq.n	80092d4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a20      	ldr	r2, [pc, #128]	; (8009334 <HAL_SD_WriteBlocks+0x308>)
 80092b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	f043 0202 	orr.w	r2, r3, #2
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e02b      	b.n	800932c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092da:	f003 0310 	and.w	r3, r3, #16
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d012      	beq.n	8009308 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a13      	ldr	r2, [pc, #76]	; (8009334 <HAL_SD_WriteBlocks+0x308>)
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	f043 0210 	orr.w	r2, r3, #16
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e011      	b.n	800932c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009310:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	e006      	b.n	800932c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009322:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
  }
}
 800932c:	4618      	mov	r0, r3
 800932e:	3748      	adds	r7, #72	; 0x48
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	004005ff 	.word	0x004005ff

08009338 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009346:	0f9b      	lsrs	r3, r3, #30
 8009348:	b2da      	uxtb	r2, r3
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009352:	0e9b      	lsrs	r3, r3, #26
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f003 030f 	and.w	r3, r3, #15
 800935a:	b2da      	uxtb	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009364:	0e1b      	lsrs	r3, r3, #24
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f003 0303 	and.w	r3, r3, #3
 800936c:	b2da      	uxtb	r2, r3
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009376:	0c1b      	lsrs	r3, r3, #16
 8009378:	b2da      	uxtb	r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009382:	0a1b      	lsrs	r3, r3, #8
 8009384:	b2da      	uxtb	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800938e:	b2da      	uxtb	r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009398:	0d1b      	lsrs	r3, r3, #20
 800939a:	b29a      	uxth	r2, r3
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093a4:	0c1b      	lsrs	r3, r3, #16
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	f003 030f 	and.w	r3, r3, #15
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093b6:	0bdb      	lsrs	r3, r3, #15
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093c8:	0b9b      	lsrs	r3, r3, #14
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093da:	0b5b      	lsrs	r3, r3, #13
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093ec:	0b1b      	lsrs	r3, r3, #12
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	2200      	movs	r2, #0
 80093fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009404:	2b00      	cmp	r3, #0
 8009406:	d163      	bne.n	80094d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800940c:	009a      	lsls	r2, r3, #2
 800940e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009412:	4013      	ands	r3, r2
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009418:	0f92      	lsrs	r2, r2, #30
 800941a:	431a      	orrs	r2, r3
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009424:	0edb      	lsrs	r3, r3, #27
 8009426:	b2db      	uxtb	r3, r3
 8009428:	f003 0307 	and.w	r3, r3, #7
 800942c:	b2da      	uxtb	r2, r3
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009436:	0e1b      	lsrs	r3, r3, #24
 8009438:	b2db      	uxtb	r3, r3
 800943a:	f003 0307 	and.w	r3, r3, #7
 800943e:	b2da      	uxtb	r2, r3
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009448:	0d5b      	lsrs	r3, r3, #21
 800944a:	b2db      	uxtb	r3, r3
 800944c:	f003 0307 	and.w	r3, r3, #7
 8009450:	b2da      	uxtb	r2, r3
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800945a:	0c9b      	lsrs	r3, r3, #18
 800945c:	b2db      	uxtb	r3, r3
 800945e:	f003 0307 	and.w	r3, r3, #7
 8009462:	b2da      	uxtb	r2, r3
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800946c:	0bdb      	lsrs	r3, r3, #15
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f003 0307 	and.w	r3, r3, #7
 8009474:	b2da      	uxtb	r2, r3
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	7e1b      	ldrb	r3, [r3, #24]
 8009488:	b2db      	uxtb	r3, r3
 800948a:	f003 0307 	and.w	r3, r3, #7
 800948e:	3302      	adds	r3, #2
 8009490:	2201      	movs	r2, #1
 8009492:	fa02 f303 	lsl.w	r3, r2, r3
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800949a:	fb03 f202 	mul.w	r2, r3, r2
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	7a1b      	ldrb	r3, [r3, #8]
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	f003 030f 	and.w	r3, r3, #15
 80094ac:	2201      	movs	r2, #1
 80094ae:	409a      	lsls	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80094bc:	0a52      	lsrs	r2, r2, #9
 80094be:	fb03 f202 	mul.w	r2, r3, r2
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094cc:	661a      	str	r2, [r3, #96]	; 0x60
 80094ce:	e031      	b.n	8009534 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d11d      	bne.n	8009514 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094dc:	041b      	lsls	r3, r3, #16
 80094de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094e6:	0c1b      	lsrs	r3, r3, #16
 80094e8:	431a      	orrs	r2, r3
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	3301      	adds	r3, #1
 80094f4:	029a      	lsls	r2, r3, #10
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009508:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	661a      	str	r2, [r3, #96]	; 0x60
 8009512:	e00f      	b.n	8009534 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a58      	ldr	r2, [pc, #352]	; (800967c <HAL_SD_GetCardCSD+0x344>)
 800951a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009520:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e09d      	b.n	8009670 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009538:	0b9b      	lsrs	r3, r3, #14
 800953a:	b2db      	uxtb	r3, r3
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	b2da      	uxtb	r2, r3
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800954a:	09db      	lsrs	r3, r3, #7
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009552:	b2da      	uxtb	r2, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800955c:	b2db      	uxtb	r3, r3
 800955e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009562:	b2da      	uxtb	r2, r3
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800956c:	0fdb      	lsrs	r3, r3, #31
 800956e:	b2da      	uxtb	r2, r3
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009578:	0f5b      	lsrs	r3, r3, #29
 800957a:	b2db      	uxtb	r3, r3
 800957c:	f003 0303 	and.w	r3, r3, #3
 8009580:	b2da      	uxtb	r2, r3
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800958a:	0e9b      	lsrs	r3, r3, #26
 800958c:	b2db      	uxtb	r3, r3
 800958e:	f003 0307 	and.w	r3, r3, #7
 8009592:	b2da      	uxtb	r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959c:	0d9b      	lsrs	r3, r3, #22
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	f003 030f 	and.w	r3, r3, #15
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ae:	0d5b      	lsrs	r3, r3, #21
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ca:	0c1b      	lsrs	r3, r3, #16
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095de:	0bdb      	lsrs	r3, r3, #15
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f2:	0b9b      	lsrs	r3, r3, #14
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009606:	0b5b      	lsrs	r3, r3, #13
 8009608:	b2db      	uxtb	r3, r3
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	b2da      	uxtb	r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800961a:	0b1b      	lsrs	r3, r3, #12
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	b2da      	uxtb	r2, r3
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800962e:	0a9b      	lsrs	r3, r3, #10
 8009630:	b2db      	uxtb	r3, r3
 8009632:	f003 0303 	and.w	r3, r3, #3
 8009636:	b2da      	uxtb	r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009642:	0a1b      	lsrs	r3, r3, #8
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f003 0303 	and.w	r3, r3, #3
 800964a:	b2da      	uxtb	r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009656:	085b      	lsrs	r3, r3, #1
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800965e:	b2da      	uxtb	r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	004005ff 	.word	0x004005ff

08009680 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80096e4:	f107 030c 	add.w	r3, r7, #12
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f970 	bl	80099d0 <SD_SendStatus>
 80096f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d005      	beq.n	8009704 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	431a      	orrs	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	0a5b      	lsrs	r3, r3, #9
 8009708:	f003 030f 	and.w	r3, r3, #15
 800970c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800970e:	693b      	ldr	r3, [r7, #16]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009718:	b5b0      	push	{r4, r5, r7, lr}
 800971a:	b094      	sub	sp, #80	; 0x50
 800971c:	af04      	add	r7, sp, #16
 800971e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009720:	2301      	movs	r3, #1
 8009722:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4618      	mov	r0, r3
 800972a:	f002 fa50 	bl	800bbce <SDIO_GetPowerState>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d102      	bne.n	800973a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009734:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009738:	e0b8      	b.n	80098ac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973e:	2b03      	cmp	r3, #3
 8009740:	d02f      	beq.n	80097a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4618      	mov	r0, r3
 8009748:	f002 fc37 	bl	800bfba <SDMMC_CmdSendCID>
 800974c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800974e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <SD_InitCard+0x40>
    {
      return errorstate;
 8009754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009756:	e0a9      	b.n	80098ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2100      	movs	r1, #0
 800975e:	4618      	mov	r0, r3
 8009760:	f002 fa7a 	bl	800bc58 <SDIO_GetResponse>
 8009764:	4602      	mov	r2, r0
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2104      	movs	r1, #4
 8009770:	4618      	mov	r0, r3
 8009772:	f002 fa71 	bl	800bc58 <SDIO_GetResponse>
 8009776:	4602      	mov	r2, r0
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2108      	movs	r1, #8
 8009782:	4618      	mov	r0, r3
 8009784:	f002 fa68 	bl	800bc58 <SDIO_GetResponse>
 8009788:	4602      	mov	r2, r0
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	210c      	movs	r1, #12
 8009794:	4618      	mov	r0, r3
 8009796:	f002 fa5f 	bl	800bc58 <SDIO_GetResponse>
 800979a:	4602      	mov	r2, r0
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d00d      	beq.n	80097c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f107 020e 	add.w	r2, r7, #14
 80097b2:	4611      	mov	r1, r2
 80097b4:	4618      	mov	r0, r3
 80097b6:	f002 fc3d 	bl	800c034 <SDMMC_CmdSetRelAdd>
 80097ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80097bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <SD_InitCard+0xae>
    {
      return errorstate;
 80097c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c4:	e072      	b.n	80098ac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ca:	2b03      	cmp	r3, #3
 80097cc:	d036      	beq.n	800983c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80097ce:	89fb      	ldrh	r3, [r7, #14]
 80097d0:	461a      	mov	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097de:	041b      	lsls	r3, r3, #16
 80097e0:	4619      	mov	r1, r3
 80097e2:	4610      	mov	r0, r2
 80097e4:	f002 fc07 	bl	800bff6 <SDMMC_CmdSendCSD>
 80097e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80097ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80097f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f2:	e05b      	b.n	80098ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2100      	movs	r1, #0
 80097fa:	4618      	mov	r0, r3
 80097fc:	f002 fa2c 	bl	800bc58 <SDIO_GetResponse>
 8009800:	4602      	mov	r2, r0
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2104      	movs	r1, #4
 800980c:	4618      	mov	r0, r3
 800980e:	f002 fa23 	bl	800bc58 <SDIO_GetResponse>
 8009812:	4602      	mov	r2, r0
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2108      	movs	r1, #8
 800981e:	4618      	mov	r0, r3
 8009820:	f002 fa1a 	bl	800bc58 <SDIO_GetResponse>
 8009824:	4602      	mov	r2, r0
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	210c      	movs	r1, #12
 8009830:	4618      	mov	r0, r3
 8009832:	f002 fa11 	bl	800bc58 <SDIO_GetResponse>
 8009836:	4602      	mov	r2, r0
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2104      	movs	r1, #4
 8009842:	4618      	mov	r0, r3
 8009844:	f002 fa08 	bl	800bc58 <SDIO_GetResponse>
 8009848:	4603      	mov	r3, r0
 800984a:	0d1a      	lsrs	r2, r3, #20
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009850:	f107 0310 	add.w	r3, r7, #16
 8009854:	4619      	mov	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff fd6e 	bl	8009338 <HAL_SD_GetCardCSD>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d002      	beq.n	8009868 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009862:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009866:	e021      	b.n	80098ac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6819      	ldr	r1, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009870:	041b      	lsls	r3, r3, #16
 8009872:	2200      	movs	r2, #0
 8009874:	461c      	mov	r4, r3
 8009876:	4615      	mov	r5, r2
 8009878:	4622      	mov	r2, r4
 800987a:	462b      	mov	r3, r5
 800987c:	4608      	mov	r0, r1
 800987e:	f002 faf7 	bl	800be70 <SDMMC_CmdSelDesel>
 8009882:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <SD_InitCard+0x176>
  {
    return errorstate;
 800988a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800988c:	e00e      	b.n	80098ac <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681d      	ldr	r5, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	466c      	mov	r4, sp
 8009896:	f103 0210 	add.w	r2, r3, #16
 800989a:	ca07      	ldmia	r2, {r0, r1, r2}
 800989c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098a0:	3304      	adds	r3, #4
 80098a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098a4:	4628      	mov	r0, r5
 80098a6:	f002 f93b 	bl	800bb20 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3740      	adds	r7, #64	; 0x40
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bdb0      	pop	{r4, r5, r7, pc}

080098b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098bc:	2300      	movs	r3, #0
 80098be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	617b      	str	r3, [r7, #20]
 80098c4:	2300      	movs	r3, #0
 80098c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f002 faf2 	bl	800beb6 <SDMMC_CmdGoIdleState>
 80098d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <SD_PowerON+0x2a>
  {
    return errorstate;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	e072      	b.n	80099c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f002 fb05 	bl	800bef2 <SDMMC_CmdOperCond>
 80098e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00d      	beq.n	800990c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f002 fadb 	bl	800beb6 <SDMMC_CmdGoIdleState>
 8009900:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d004      	beq.n	8009912 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	e05b      	b.n	80099c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009916:	2b01      	cmp	r3, #1
 8009918:	d137      	bne.n	800998a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2100      	movs	r1, #0
 8009920:	4618      	mov	r0, r3
 8009922:	f002 fb05 	bl	800bf30 <SDMMC_CmdAppCommand>
 8009926:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d02d      	beq.n	800998a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800992e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009932:	e047      	b.n	80099c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2100      	movs	r1, #0
 800993a:	4618      	mov	r0, r3
 800993c:	f002 faf8 	bl	800bf30 <SDMMC_CmdAppCommand>
 8009940:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <SD_PowerON+0x98>
    {
      return errorstate;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	e03b      	b.n	80099c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	491e      	ldr	r1, [pc, #120]	; (80099cc <SD_PowerON+0x118>)
 8009952:	4618      	mov	r0, r3
 8009954:	f002 fb0e 	bl	800bf74 <SDMMC_CmdAppOperCommand>
 8009958:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009960:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009964:	e02e      	b.n	80099c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2100      	movs	r1, #0
 800996c:	4618      	mov	r0, r3
 800996e:	f002 f973 	bl	800bc58 <SDIO_GetResponse>
 8009972:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	0fdb      	lsrs	r3, r3, #31
 8009978:	2b01      	cmp	r3, #1
 800997a:	d101      	bne.n	8009980 <SD_PowerON+0xcc>
 800997c:	2301      	movs	r3, #1
 800997e:	e000      	b.n	8009982 <SD_PowerON+0xce>
 8009980:	2300      	movs	r3, #0
 8009982:	613b      	str	r3, [r7, #16]

    count++;
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	3301      	adds	r3, #1
 8009988:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009990:	4293      	cmp	r3, r2
 8009992:	d802      	bhi.n	800999a <SD_PowerON+0xe6>
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0cc      	beq.n	8009934 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d902      	bls.n	80099aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80099a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099a8:	e00c      	b.n	80099c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	645a      	str	r2, [r3, #68]	; 0x44
 80099ba:	e002      	b.n	80099c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3718      	adds	r7, #24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	c1100000 	.word	0xc1100000

080099d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d102      	bne.n	80099e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80099e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099e4:	e018      	b.n	8009a18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ee:	041b      	lsls	r3, r3, #16
 80099f0:	4619      	mov	r1, r3
 80099f2:	4610      	mov	r0, r2
 80099f4:	f002 fb3f 	bl	800c076 <SDMMC_CmdSendStatus>
 80099f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	e009      	b.n	8009a18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2100      	movs	r1, #0
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f002 f924 	bl	800bc58 <SDIO_GetResponse>
 8009a10:	4602      	mov	r2, r0
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d101      	bne.n	8009a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e07b      	b.n	8009b2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d108      	bne.n	8009a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a42:	d009      	beq.n	8009a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	61da      	str	r2, [r3, #28]
 8009a4a:	e005      	b.n	8009a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d106      	bne.n	8009a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7fa fc3c 	bl	80042f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009aa0:	431a      	orrs	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aaa:	431a      	orrs	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	431a      	orrs	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ac8:	431a      	orrs	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ad2:	431a      	orrs	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a1b      	ldr	r3, [r3, #32]
 8009ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009adc:	ea42 0103 	orr.w	r1, r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	430a      	orrs	r2, r1
 8009aee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	0c1b      	lsrs	r3, r3, #16
 8009af6:	f003 0104 	and.w	r1, r3, #4
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	f003 0210 	and.w	r2, r3, #16
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	69da      	ldr	r2, [r3, #28]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b088      	sub	sp, #32
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	60b9      	str	r1, [r7, #8]
 8009b3c:	603b      	str	r3, [r7, #0]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d101      	bne.n	8009b54 <HAL_SPI_Transmit+0x22>
 8009b50:	2302      	movs	r3, #2
 8009b52:	e126      	b.n	8009da2 <HAL_SPI_Transmit+0x270>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b5c:	f7fc fb9e 	bl	800629c <HAL_GetTick>
 8009b60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009b62:	88fb      	ldrh	r3, [r7, #6]
 8009b64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d002      	beq.n	8009b78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009b72:	2302      	movs	r3, #2
 8009b74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b76:	e10b      	b.n	8009d90 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <HAL_SPI_Transmit+0x52>
 8009b7e:	88fb      	ldrh	r3, [r7, #6]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d102      	bne.n	8009b8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b88:	e102      	b.n	8009d90 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	88fa      	ldrh	r2, [r7, #6]
 8009ba2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	88fa      	ldrh	r2, [r7, #6]
 8009ba8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bd0:	d10f      	bne.n	8009bf2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bf0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfc:	2b40      	cmp	r3, #64	; 0x40
 8009bfe:	d007      	beq.n	8009c10 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c18:	d14b      	bne.n	8009cb2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d002      	beq.n	8009c28 <HAL_SPI_Transmit+0xf6>
 8009c22:	8afb      	ldrh	r3, [r7, #22]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d13e      	bne.n	8009ca6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c2c:	881a      	ldrh	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c38:	1c9a      	adds	r2, r3, #2
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	3b01      	subs	r3, #1
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c4c:	e02b      	b.n	8009ca6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d112      	bne.n	8009c82 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c60:	881a      	ldrh	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c6c:	1c9a      	adds	r2, r3, #2
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c80:	e011      	b.n	8009ca6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c82:	f7fc fb0b 	bl	800629c <HAL_GetTick>
 8009c86:	4602      	mov	r2, r0
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d803      	bhi.n	8009c9a <HAL_SPI_Transmit+0x168>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c98:	d102      	bne.n	8009ca0 <HAL_SPI_Transmit+0x16e>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009ca4:	e074      	b.n	8009d90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1ce      	bne.n	8009c4e <HAL_SPI_Transmit+0x11c>
 8009cb0:	e04c      	b.n	8009d4c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <HAL_SPI_Transmit+0x18e>
 8009cba:	8afb      	ldrh	r3, [r7, #22]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d140      	bne.n	8009d42 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	330c      	adds	r3, #12
 8009cca:	7812      	ldrb	r2, [r2, #0]
 8009ccc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009ce6:	e02c      	b.n	8009d42 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f003 0302 	and.w	r3, r3, #2
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d113      	bne.n	8009d1e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	330c      	adds	r3, #12
 8009d00:	7812      	ldrb	r2, [r2, #0]
 8009d02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d08:	1c5a      	adds	r2, r3, #1
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	3b01      	subs	r3, #1
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d1c:	e011      	b.n	8009d42 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d1e:	f7fc fabd 	bl	800629c <HAL_GetTick>
 8009d22:	4602      	mov	r2, r0
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d803      	bhi.n	8009d36 <HAL_SPI_Transmit+0x204>
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d34:	d102      	bne.n	8009d3c <HAL_SPI_Transmit+0x20a>
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d102      	bne.n	8009d42 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d40:	e026      	b.n	8009d90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1cd      	bne.n	8009ce8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d4c:	69ba      	ldr	r2, [r7, #24]
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f000 f8b3 	bl	8009ebc <SPI_EndRxTxTransaction>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	613b      	str	r3, [r7, #16]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	613b      	str	r3, [r7, #16]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	613b      	str	r3, [r7, #16]
 8009d7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	77fb      	strb	r3, [r7, #31]
 8009d8c:	e000      	b.n	8009d90 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009d8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009da0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3720      	adds	r7, #32
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	4613      	mov	r3, r2
 8009dba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009dbc:	f7fc fa6e 	bl	800629c <HAL_GetTick>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc4:	1a9b      	subs	r3, r3, r2
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	4413      	add	r3, r2
 8009dca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009dcc:	f7fc fa66 	bl	800629c <HAL_GetTick>
 8009dd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009dd2:	4b39      	ldr	r3, [pc, #228]	; (8009eb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	015b      	lsls	r3, r3, #5
 8009dd8:	0d1b      	lsrs	r3, r3, #20
 8009dda:	69fa      	ldr	r2, [r7, #28]
 8009ddc:	fb02 f303 	mul.w	r3, r2, r3
 8009de0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009de2:	e054      	b.n	8009e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dea:	d050      	beq.n	8009e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009dec:	f7fc fa56 	bl	800629c <HAL_GetTick>
 8009df0:	4602      	mov	r2, r0
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	69fa      	ldr	r2, [r7, #28]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d902      	bls.n	8009e02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d13d      	bne.n	8009e7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e1a:	d111      	bne.n	8009e40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e24:	d004      	beq.n	8009e30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e2e:	d107      	bne.n	8009e40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e48:	d10f      	bne.n	8009e6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e58:	601a      	str	r2, [r3, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e017      	b.n	8009eae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	4013      	ands	r3, r2
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	bf0c      	ite	eq
 8009e9e:	2301      	moveq	r3, #1
 8009ea0:	2300      	movne	r3, #0
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	79fb      	ldrb	r3, [r7, #7]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d19b      	bne.n	8009de4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3720      	adds	r7, #32
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20000070 	.word	0x20000070

08009ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b088      	sub	sp, #32
 8009ec0:	af02      	add	r7, sp, #8
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ec8:	4b1b      	ldr	r3, [pc, #108]	; (8009f38 <SPI_EndRxTxTransaction+0x7c>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a1b      	ldr	r2, [pc, #108]	; (8009f3c <SPI_EndRxTxTransaction+0x80>)
 8009ece:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed2:	0d5b      	lsrs	r3, r3, #21
 8009ed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ed8:	fb02 f303 	mul.w	r3, r2, r3
 8009edc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ee6:	d112      	bne.n	8009f0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	2180      	movs	r1, #128	; 0x80
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f7ff ff5a 	bl	8009dac <SPI_WaitFlagStateUntilTimeout>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d016      	beq.n	8009f2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f02:	f043 0220 	orr.w	r2, r3, #32
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	e00f      	b.n	8009f2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00a      	beq.n	8009f2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f24:	2b80      	cmp	r3, #128	; 0x80
 8009f26:	d0f2      	beq.n	8009f0e <SPI_EndRxTxTransaction+0x52>
 8009f28:	e000      	b.n	8009f2c <SPI_EndRxTxTransaction+0x70>
        break;
 8009f2a:	bf00      	nop
  }

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3718      	adds	r7, #24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20000070 	.word	0x20000070
 8009f3c:	165e9f81 	.word	0x165e9f81

08009f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e041      	b.n	8009fd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d106      	bne.n	8009f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7fa fe74 	bl	8004c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2202      	movs	r2, #2
 8009f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	4610      	mov	r0, r2
 8009f80:	f000 fca8 	bl	800a8d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
	...

08009fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d001      	beq.n	8009ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e04e      	b.n	800a096 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68da      	ldr	r2, [r3, #12]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f042 0201 	orr.w	r2, r2, #1
 800a00e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a23      	ldr	r2, [pc, #140]	; (800a0a4 <HAL_TIM_Base_Start_IT+0xc4>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d022      	beq.n	800a060 <HAL_TIM_Base_Start_IT+0x80>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a022:	d01d      	beq.n	800a060 <HAL_TIM_Base_Start_IT+0x80>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a1f      	ldr	r2, [pc, #124]	; (800a0a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d018      	beq.n	800a060 <HAL_TIM_Base_Start_IT+0x80>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a1e      	ldr	r2, [pc, #120]	; (800a0ac <HAL_TIM_Base_Start_IT+0xcc>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d013      	beq.n	800a060 <HAL_TIM_Base_Start_IT+0x80>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a1c      	ldr	r2, [pc, #112]	; (800a0b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d00e      	beq.n	800a060 <HAL_TIM_Base_Start_IT+0x80>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a1b      	ldr	r2, [pc, #108]	; (800a0b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d009      	beq.n	800a060 <HAL_TIM_Base_Start_IT+0x80>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a19      	ldr	r2, [pc, #100]	; (800a0b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d004      	beq.n	800a060 <HAL_TIM_Base_Start_IT+0x80>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a18      	ldr	r2, [pc, #96]	; (800a0bc <HAL_TIM_Base_Start_IT+0xdc>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d111      	bne.n	800a084 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f003 0307 	and.w	r3, r3, #7
 800a06a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2b06      	cmp	r3, #6
 800a070:	d010      	beq.n	800a094 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f042 0201 	orr.w	r2, r2, #1
 800a080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a082:	e007      	b.n	800a094 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f042 0201 	orr.w	r2, r2, #1
 800a092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3714      	adds	r7, #20
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	40010000 	.word	0x40010000
 800a0a8:	40000400 	.word	0x40000400
 800a0ac:	40000800 	.word	0x40000800
 800a0b0:	40000c00 	.word	0x40000c00
 800a0b4:	40010400 	.word	0x40010400
 800a0b8:	40014000 	.word	0x40014000
 800a0bc:	40001800 	.word	0x40001800

0800a0c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68da      	ldr	r2, [r3, #12]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f022 0201 	bic.w	r2, r2, #1
 800a0d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6a1a      	ldr	r2, [r3, #32]
 800a0de:	f241 1311 	movw	r3, #4369	; 0x1111
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10f      	bne.n	800a108 <HAL_TIM_Base_Stop_IT+0x48>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6a1a      	ldr	r2, [r3, #32]
 800a0ee:	f240 4344 	movw	r3, #1092	; 0x444
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d107      	bne.n	800a108 <HAL_TIM_Base_Stop_IT+0x48>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f022 0201 	bic.w	r2, r2, #1
 800a106:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	370c      	adds	r7, #12
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b082      	sub	sp, #8
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e041      	b.n	800a1b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a136:	b2db      	uxtb	r3, r3
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f839 	bl	800a1bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2202      	movs	r2, #2
 800a14e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	3304      	adds	r3, #4
 800a15a:	4619      	mov	r1, r3
 800a15c:	4610      	mov	r0, r2
 800a15e:	f000 fbb9 	bl	800a8d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d109      	bne.n	800a1f4 <HAL_TIM_PWM_Start+0x24>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	bf14      	ite	ne
 800a1ec:	2301      	movne	r3, #1
 800a1ee:	2300      	moveq	r3, #0
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	e022      	b.n	800a23a <HAL_TIM_PWM_Start+0x6a>
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	d109      	bne.n	800a20e <HAL_TIM_PWM_Start+0x3e>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b01      	cmp	r3, #1
 800a204:	bf14      	ite	ne
 800a206:	2301      	movne	r3, #1
 800a208:	2300      	moveq	r3, #0
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	e015      	b.n	800a23a <HAL_TIM_PWM_Start+0x6a>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b08      	cmp	r3, #8
 800a212:	d109      	bne.n	800a228 <HAL_TIM_PWM_Start+0x58>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	bf14      	ite	ne
 800a220:	2301      	movne	r3, #1
 800a222:	2300      	moveq	r3, #0
 800a224:	b2db      	uxtb	r3, r3
 800a226:	e008      	b.n	800a23a <HAL_TIM_PWM_Start+0x6a>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	2b01      	cmp	r3, #1
 800a232:	bf14      	ite	ne
 800a234:	2301      	movne	r3, #1
 800a236:	2300      	moveq	r3, #0
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e07c      	b.n	800a33c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d104      	bne.n	800a252 <HAL_TIM_PWM_Start+0x82>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2202      	movs	r2, #2
 800a24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a250:	e013      	b.n	800a27a <HAL_TIM_PWM_Start+0xaa>
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b04      	cmp	r3, #4
 800a256:	d104      	bne.n	800a262 <HAL_TIM_PWM_Start+0x92>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2202      	movs	r2, #2
 800a25c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a260:	e00b      	b.n	800a27a <HAL_TIM_PWM_Start+0xaa>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b08      	cmp	r3, #8
 800a266:	d104      	bne.n	800a272 <HAL_TIM_PWM_Start+0xa2>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2202      	movs	r2, #2
 800a26c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a270:	e003      	b.n	800a27a <HAL_TIM_PWM_Start+0xaa>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2202      	movs	r2, #2
 800a276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2201      	movs	r2, #1
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	4618      	mov	r0, r3
 800a284:	f000 fe10 	bl	800aea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a2d      	ldr	r2, [pc, #180]	; (800a344 <HAL_TIM_PWM_Start+0x174>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d004      	beq.n	800a29c <HAL_TIM_PWM_Start+0xcc>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a2c      	ldr	r2, [pc, #176]	; (800a348 <HAL_TIM_PWM_Start+0x178>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d101      	bne.n	800a2a0 <HAL_TIM_PWM_Start+0xd0>
 800a29c:	2301      	movs	r3, #1
 800a29e:	e000      	b.n	800a2a2 <HAL_TIM_PWM_Start+0xd2>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d007      	beq.n	800a2b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a22      	ldr	r2, [pc, #136]	; (800a344 <HAL_TIM_PWM_Start+0x174>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d022      	beq.n	800a306 <HAL_TIM_PWM_Start+0x136>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2c8:	d01d      	beq.n	800a306 <HAL_TIM_PWM_Start+0x136>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a1f      	ldr	r2, [pc, #124]	; (800a34c <HAL_TIM_PWM_Start+0x17c>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d018      	beq.n	800a306 <HAL_TIM_PWM_Start+0x136>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a1d      	ldr	r2, [pc, #116]	; (800a350 <HAL_TIM_PWM_Start+0x180>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d013      	beq.n	800a306 <HAL_TIM_PWM_Start+0x136>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a1c      	ldr	r2, [pc, #112]	; (800a354 <HAL_TIM_PWM_Start+0x184>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d00e      	beq.n	800a306 <HAL_TIM_PWM_Start+0x136>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a16      	ldr	r2, [pc, #88]	; (800a348 <HAL_TIM_PWM_Start+0x178>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d009      	beq.n	800a306 <HAL_TIM_PWM_Start+0x136>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a18      	ldr	r2, [pc, #96]	; (800a358 <HAL_TIM_PWM_Start+0x188>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d004      	beq.n	800a306 <HAL_TIM_PWM_Start+0x136>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a16      	ldr	r2, [pc, #88]	; (800a35c <HAL_TIM_PWM_Start+0x18c>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d111      	bne.n	800a32a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	f003 0307 	and.w	r3, r3, #7
 800a310:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2b06      	cmp	r3, #6
 800a316:	d010      	beq.n	800a33a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f042 0201 	orr.w	r2, r2, #1
 800a326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a328:	e007      	b.n	800a33a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f042 0201 	orr.w	r2, r2, #1
 800a338:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	40010000 	.word	0x40010000
 800a348:	40010400 	.word	0x40010400
 800a34c:	40000400 	.word	0x40000400
 800a350:	40000800 	.word	0x40000800
 800a354:	40000c00 	.word	0x40000c00
 800a358:	40014000 	.word	0x40014000
 800a35c:	40001800 	.word	0x40001800

0800a360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b02      	cmp	r3, #2
 800a374:	d122      	bne.n	800a3bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f003 0302 	and.w	r3, r3, #2
 800a380:	2b02      	cmp	r3, #2
 800a382:	d11b      	bne.n	800a3bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f06f 0202 	mvn.w	r2, #2
 800a38c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	f003 0303 	and.w	r3, r3, #3
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fa77 	bl	800a896 <HAL_TIM_IC_CaptureCallback>
 800a3a8:	e005      	b.n	800a3b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fa69 	bl	800a882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fa7a 	bl	800a8aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	f003 0304 	and.w	r3, r3, #4
 800a3c6:	2b04      	cmp	r3, #4
 800a3c8:	d122      	bne.n	800a410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	f003 0304 	and.w	r3, r3, #4
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	d11b      	bne.n	800a410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f06f 0204 	mvn.w	r2, #4
 800a3e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 fa4d 	bl	800a896 <HAL_TIM_IC_CaptureCallback>
 800a3fc:	e005      	b.n	800a40a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fa3f 	bl	800a882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fa50 	bl	800a8aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	f003 0308 	and.w	r3, r3, #8
 800a41a:	2b08      	cmp	r3, #8
 800a41c:	d122      	bne.n	800a464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	f003 0308 	and.w	r3, r3, #8
 800a428:	2b08      	cmp	r3, #8
 800a42a:	d11b      	bne.n	800a464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f06f 0208 	mvn.w	r2, #8
 800a434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2204      	movs	r2, #4
 800a43a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	f003 0303 	and.w	r3, r3, #3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d003      	beq.n	800a452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fa23 	bl	800a896 <HAL_TIM_IC_CaptureCallback>
 800a450:	e005      	b.n	800a45e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fa15 	bl	800a882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fa26 	bl	800a8aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	f003 0310 	and.w	r3, r3, #16
 800a46e:	2b10      	cmp	r3, #16
 800a470:	d122      	bne.n	800a4b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f003 0310 	and.w	r3, r3, #16
 800a47c:	2b10      	cmp	r3, #16
 800a47e:	d11b      	bne.n	800a4b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f06f 0210 	mvn.w	r2, #16
 800a488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2208      	movs	r2, #8
 800a48e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	69db      	ldr	r3, [r3, #28]
 800a496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d003      	beq.n	800a4a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f9f9 	bl	800a896 <HAL_TIM_IC_CaptureCallback>
 800a4a4:	e005      	b.n	800a4b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f9eb 	bl	800a882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f9fc 	bl	800a8aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d10e      	bne.n	800a4e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	f003 0301 	and.w	r3, r3, #1
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d107      	bne.n	800a4e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f06f 0201 	mvn.w	r2, #1
 800a4dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7f9 fd08 	bl	8003ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ee:	2b80      	cmp	r3, #128	; 0x80
 800a4f0:	d10e      	bne.n	800a510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4fc:	2b80      	cmp	r3, #128	; 0x80
 800a4fe:	d107      	bne.n	800a510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fdca 	bl	800b0a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a51a:	2b40      	cmp	r3, #64	; 0x40
 800a51c:	d10e      	bne.n	800a53c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a528:	2b40      	cmp	r3, #64	; 0x40
 800a52a:	d107      	bne.n	800a53c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f9c1 	bl	800a8be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	f003 0320 	and.w	r3, r3, #32
 800a546:	2b20      	cmp	r3, #32
 800a548:	d10e      	bne.n	800a568 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	f003 0320 	and.w	r3, r3, #32
 800a554:	2b20      	cmp	r3, #32
 800a556:	d107      	bne.n	800a568 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f06f 0220 	mvn.w	r2, #32
 800a560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fd94 	bl	800b090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a568:	bf00      	nop
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a586:	2b01      	cmp	r3, #1
 800a588:	d101      	bne.n	800a58e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a58a:	2302      	movs	r3, #2
 800a58c:	e0ae      	b.n	800a6ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b0c      	cmp	r3, #12
 800a59a:	f200 809f 	bhi.w	800a6dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a59e:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a5d9 	.word	0x0800a5d9
 800a5a8:	0800a6dd 	.word	0x0800a6dd
 800a5ac:	0800a6dd 	.word	0x0800a6dd
 800a5b0:	0800a6dd 	.word	0x0800a6dd
 800a5b4:	0800a619 	.word	0x0800a619
 800a5b8:	0800a6dd 	.word	0x0800a6dd
 800a5bc:	0800a6dd 	.word	0x0800a6dd
 800a5c0:	0800a6dd 	.word	0x0800a6dd
 800a5c4:	0800a65b 	.word	0x0800a65b
 800a5c8:	0800a6dd 	.word	0x0800a6dd
 800a5cc:	0800a6dd 	.word	0x0800a6dd
 800a5d0:	0800a6dd 	.word	0x0800a6dd
 800a5d4:	0800a69b 	.word	0x0800a69b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68b9      	ldr	r1, [r7, #8]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 fa18 	bl	800aa14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	699a      	ldr	r2, [r3, #24]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f042 0208 	orr.w	r2, r2, #8
 800a5f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	699a      	ldr	r2, [r3, #24]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f022 0204 	bic.w	r2, r2, #4
 800a602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6999      	ldr	r1, [r3, #24]
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	691a      	ldr	r2, [r3, #16]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	430a      	orrs	r2, r1
 800a614:	619a      	str	r2, [r3, #24]
      break;
 800a616:	e064      	b.n	800a6e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68b9      	ldr	r1, [r7, #8]
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 fa68 	bl	800aaf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	699a      	ldr	r2, [r3, #24]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	699a      	ldr	r2, [r3, #24]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6999      	ldr	r1, [r3, #24]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	021a      	lsls	r2, r3, #8
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	430a      	orrs	r2, r1
 800a656:	619a      	str	r2, [r3, #24]
      break;
 800a658:	e043      	b.n	800a6e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	4618      	mov	r0, r3
 800a662:	f000 fabd 	bl	800abe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	69da      	ldr	r2, [r3, #28]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f042 0208 	orr.w	r2, r2, #8
 800a674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	69da      	ldr	r2, [r3, #28]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f022 0204 	bic.w	r2, r2, #4
 800a684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	69d9      	ldr	r1, [r3, #28]
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	691a      	ldr	r2, [r3, #16]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	430a      	orrs	r2, r1
 800a696:	61da      	str	r2, [r3, #28]
      break;
 800a698:	e023      	b.n	800a6e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68b9      	ldr	r1, [r7, #8]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f000 fb11 	bl	800acc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	69da      	ldr	r2, [r3, #28]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	69da      	ldr	r2, [r3, #28]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	69d9      	ldr	r1, [r3, #28]
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	021a      	lsls	r2, r3, #8
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	61da      	str	r2, [r3, #28]
      break;
 800a6da:	e002      	b.n	800a6e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	75fb      	strb	r3, [r7, #23]
      break;
 800a6e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d101      	bne.n	800a710 <HAL_TIM_ConfigClockSource+0x1c>
 800a70c:	2302      	movs	r3, #2
 800a70e:	e0b4      	b.n	800a87a <HAL_TIM_ConfigClockSource+0x186>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2202      	movs	r2, #2
 800a71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a72e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a748:	d03e      	beq.n	800a7c8 <HAL_TIM_ConfigClockSource+0xd4>
 800a74a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a74e:	f200 8087 	bhi.w	800a860 <HAL_TIM_ConfigClockSource+0x16c>
 800a752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a756:	f000 8086 	beq.w	800a866 <HAL_TIM_ConfigClockSource+0x172>
 800a75a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a75e:	d87f      	bhi.n	800a860 <HAL_TIM_ConfigClockSource+0x16c>
 800a760:	2b70      	cmp	r3, #112	; 0x70
 800a762:	d01a      	beq.n	800a79a <HAL_TIM_ConfigClockSource+0xa6>
 800a764:	2b70      	cmp	r3, #112	; 0x70
 800a766:	d87b      	bhi.n	800a860 <HAL_TIM_ConfigClockSource+0x16c>
 800a768:	2b60      	cmp	r3, #96	; 0x60
 800a76a:	d050      	beq.n	800a80e <HAL_TIM_ConfigClockSource+0x11a>
 800a76c:	2b60      	cmp	r3, #96	; 0x60
 800a76e:	d877      	bhi.n	800a860 <HAL_TIM_ConfigClockSource+0x16c>
 800a770:	2b50      	cmp	r3, #80	; 0x50
 800a772:	d03c      	beq.n	800a7ee <HAL_TIM_ConfigClockSource+0xfa>
 800a774:	2b50      	cmp	r3, #80	; 0x50
 800a776:	d873      	bhi.n	800a860 <HAL_TIM_ConfigClockSource+0x16c>
 800a778:	2b40      	cmp	r3, #64	; 0x40
 800a77a:	d058      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x13a>
 800a77c:	2b40      	cmp	r3, #64	; 0x40
 800a77e:	d86f      	bhi.n	800a860 <HAL_TIM_ConfigClockSource+0x16c>
 800a780:	2b30      	cmp	r3, #48	; 0x30
 800a782:	d064      	beq.n	800a84e <HAL_TIM_ConfigClockSource+0x15a>
 800a784:	2b30      	cmp	r3, #48	; 0x30
 800a786:	d86b      	bhi.n	800a860 <HAL_TIM_ConfigClockSource+0x16c>
 800a788:	2b20      	cmp	r3, #32
 800a78a:	d060      	beq.n	800a84e <HAL_TIM_ConfigClockSource+0x15a>
 800a78c:	2b20      	cmp	r3, #32
 800a78e:	d867      	bhi.n	800a860 <HAL_TIM_ConfigClockSource+0x16c>
 800a790:	2b00      	cmp	r3, #0
 800a792:	d05c      	beq.n	800a84e <HAL_TIM_ConfigClockSource+0x15a>
 800a794:	2b10      	cmp	r3, #16
 800a796:	d05a      	beq.n	800a84e <HAL_TIM_ConfigClockSource+0x15a>
 800a798:	e062      	b.n	800a860 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6818      	ldr	r0, [r3, #0]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	6899      	ldr	r1, [r3, #8]
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	685a      	ldr	r2, [r3, #4]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	f000 fb5d 	bl	800ae68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	609a      	str	r2, [r3, #8]
      break;
 800a7c6:	e04f      	b.n	800a868 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6818      	ldr	r0, [r3, #0]
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	6899      	ldr	r1, [r3, #8]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	f000 fb46 	bl	800ae68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7ea:	609a      	str	r2, [r3, #8]
      break;
 800a7ec:	e03c      	b.n	800a868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6818      	ldr	r0, [r3, #0]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	6859      	ldr	r1, [r3, #4]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	f000 faba 	bl	800ad74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2150      	movs	r1, #80	; 0x50
 800a806:	4618      	mov	r0, r3
 800a808:	f000 fb13 	bl	800ae32 <TIM_ITRx_SetConfig>
      break;
 800a80c:	e02c      	b.n	800a868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6818      	ldr	r0, [r3, #0]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	6859      	ldr	r1, [r3, #4]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	461a      	mov	r2, r3
 800a81c:	f000 fad9 	bl	800add2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2160      	movs	r1, #96	; 0x60
 800a826:	4618      	mov	r0, r3
 800a828:	f000 fb03 	bl	800ae32 <TIM_ITRx_SetConfig>
      break;
 800a82c:	e01c      	b.n	800a868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	6859      	ldr	r1, [r3, #4]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	461a      	mov	r2, r3
 800a83c:	f000 fa9a 	bl	800ad74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2140      	movs	r1, #64	; 0x40
 800a846:	4618      	mov	r0, r3
 800a848:	f000 faf3 	bl	800ae32 <TIM_ITRx_SetConfig>
      break;
 800a84c:	e00c      	b.n	800a868 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4619      	mov	r1, r3
 800a858:	4610      	mov	r0, r2
 800a85a:	f000 faea 	bl	800ae32 <TIM_ITRx_SetConfig>
      break;
 800a85e:	e003      	b.n	800a868 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	73fb      	strb	r3, [r7, #15]
      break;
 800a864:	e000      	b.n	800a868 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a878:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a882:	b480      	push	{r7}
 800a884:	b083      	sub	sp, #12
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a88a:	bf00      	nop
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a89e:	bf00      	nop
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8aa:	b480      	push	{r7}
 800a8ac:	b083      	sub	sp, #12
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8b2:	bf00      	nop
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8c6:	bf00      	nop
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a40      	ldr	r2, [pc, #256]	; (800a9e8 <TIM_Base_SetConfig+0x114>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d013      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8f2:	d00f      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a3d      	ldr	r2, [pc, #244]	; (800a9ec <TIM_Base_SetConfig+0x118>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d00b      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a3c      	ldr	r2, [pc, #240]	; (800a9f0 <TIM_Base_SetConfig+0x11c>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d007      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a3b      	ldr	r2, [pc, #236]	; (800a9f4 <TIM_Base_SetConfig+0x120>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d003      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a3a      	ldr	r2, [pc, #232]	; (800a9f8 <TIM_Base_SetConfig+0x124>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d108      	bne.n	800a926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a91a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	4313      	orrs	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a2f      	ldr	r2, [pc, #188]	; (800a9e8 <TIM_Base_SetConfig+0x114>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d02b      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a934:	d027      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a2c      	ldr	r2, [pc, #176]	; (800a9ec <TIM_Base_SetConfig+0x118>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d023      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a2b      	ldr	r2, [pc, #172]	; (800a9f0 <TIM_Base_SetConfig+0x11c>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d01f      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a2a      	ldr	r2, [pc, #168]	; (800a9f4 <TIM_Base_SetConfig+0x120>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d01b      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a29      	ldr	r2, [pc, #164]	; (800a9f8 <TIM_Base_SetConfig+0x124>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d017      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a28      	ldr	r2, [pc, #160]	; (800a9fc <TIM_Base_SetConfig+0x128>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d013      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a27      	ldr	r2, [pc, #156]	; (800aa00 <TIM_Base_SetConfig+0x12c>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d00f      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a26      	ldr	r2, [pc, #152]	; (800aa04 <TIM_Base_SetConfig+0x130>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d00b      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a25      	ldr	r2, [pc, #148]	; (800aa08 <TIM_Base_SetConfig+0x134>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d007      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a24      	ldr	r2, [pc, #144]	; (800aa0c <TIM_Base_SetConfig+0x138>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d003      	beq.n	800a986 <TIM_Base_SetConfig+0xb2>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a23      	ldr	r2, [pc, #140]	; (800aa10 <TIM_Base_SetConfig+0x13c>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d108      	bne.n	800a998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a98c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4313      	orrs	r3, r2
 800a996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	689a      	ldr	r2, [r3, #8]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a0a      	ldr	r2, [pc, #40]	; (800a9e8 <TIM_Base_SetConfig+0x114>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d003      	beq.n	800a9cc <TIM_Base_SetConfig+0xf8>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a0c      	ldr	r2, [pc, #48]	; (800a9f8 <TIM_Base_SetConfig+0x124>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d103      	bne.n	800a9d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	691a      	ldr	r2, [r3, #16]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	615a      	str	r2, [r3, #20]
}
 800a9da:	bf00      	nop
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	40010000 	.word	0x40010000
 800a9ec:	40000400 	.word	0x40000400
 800a9f0:	40000800 	.word	0x40000800
 800a9f4:	40000c00 	.word	0x40000c00
 800a9f8:	40010400 	.word	0x40010400
 800a9fc:	40014000 	.word	0x40014000
 800aa00:	40014400 	.word	0x40014400
 800aa04:	40014800 	.word	0x40014800
 800aa08:	40001800 	.word	0x40001800
 800aa0c:	40001c00 	.word	0x40001c00
 800aa10:	40002000 	.word	0x40002000

0800aa14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b087      	sub	sp, #28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	f023 0201 	bic.w	r2, r3, #1
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f023 0303 	bic.w	r3, r3, #3
 800aa4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f023 0302 	bic.w	r3, r3, #2
 800aa5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a20      	ldr	r2, [pc, #128]	; (800aaec <TIM_OC1_SetConfig+0xd8>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d003      	beq.n	800aa78 <TIM_OC1_SetConfig+0x64>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a1f      	ldr	r2, [pc, #124]	; (800aaf0 <TIM_OC1_SetConfig+0xdc>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d10c      	bne.n	800aa92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f023 0308 	bic.w	r3, r3, #8
 800aa7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	697a      	ldr	r2, [r7, #20]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f023 0304 	bic.w	r3, r3, #4
 800aa90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a15      	ldr	r2, [pc, #84]	; (800aaec <TIM_OC1_SetConfig+0xd8>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d003      	beq.n	800aaa2 <TIM_OC1_SetConfig+0x8e>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a14      	ldr	r2, [pc, #80]	; (800aaf0 <TIM_OC1_SetConfig+0xdc>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d111      	bne.n	800aac6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aaa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	685a      	ldr	r2, [r3, #4]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	621a      	str	r2, [r3, #32]
}
 800aae0:	bf00      	nop
 800aae2:	371c      	adds	r7, #28
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	40010000 	.word	0x40010000
 800aaf0:	40010400 	.word	0x40010400

0800aaf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b087      	sub	sp, #28
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	f023 0210 	bic.w	r2, r3, #16
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	021b      	lsls	r3, r3, #8
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f023 0320 	bic.w	r3, r3, #32
 800ab3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	011b      	lsls	r3, r3, #4
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a22      	ldr	r2, [pc, #136]	; (800abd8 <TIM_OC2_SetConfig+0xe4>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d003      	beq.n	800ab5c <TIM_OC2_SetConfig+0x68>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a21      	ldr	r2, [pc, #132]	; (800abdc <TIM_OC2_SetConfig+0xe8>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d10d      	bne.n	800ab78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	011b      	lsls	r3, r3, #4
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a17      	ldr	r2, [pc, #92]	; (800abd8 <TIM_OC2_SetConfig+0xe4>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d003      	beq.n	800ab88 <TIM_OC2_SetConfig+0x94>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a16      	ldr	r2, [pc, #88]	; (800abdc <TIM_OC2_SetConfig+0xe8>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d113      	bne.n	800abb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	4313      	orrs	r3, r2
 800abae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	685a      	ldr	r2, [r3, #4]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	697a      	ldr	r2, [r7, #20]
 800abc8:	621a      	str	r2, [r3, #32]
}
 800abca:	bf00      	nop
 800abcc:	371c      	adds	r7, #28
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	40010000 	.word	0x40010000
 800abdc:	40010400 	.word	0x40010400

0800abe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b087      	sub	sp, #28
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	69db      	ldr	r3, [r3, #28]
 800ac06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 0303 	bic.w	r3, r3, #3
 800ac16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	021b      	lsls	r3, r3, #8
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a21      	ldr	r2, [pc, #132]	; (800acc0 <TIM_OC3_SetConfig+0xe0>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d003      	beq.n	800ac46 <TIM_OC3_SetConfig+0x66>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a20      	ldr	r2, [pc, #128]	; (800acc4 <TIM_OC3_SetConfig+0xe4>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d10d      	bne.n	800ac62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	021b      	lsls	r3, r3, #8
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a16      	ldr	r2, [pc, #88]	; (800acc0 <TIM_OC3_SetConfig+0xe0>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d003      	beq.n	800ac72 <TIM_OC3_SetConfig+0x92>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a15      	ldr	r2, [pc, #84]	; (800acc4 <TIM_OC3_SetConfig+0xe4>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d113      	bne.n	800ac9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	011b      	lsls	r3, r3, #4
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	011b      	lsls	r3, r3, #4
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	697a      	ldr	r2, [r7, #20]
 800acb2:	621a      	str	r2, [r3, #32]
}
 800acb4:	bf00      	nop
 800acb6:	371c      	adds	r7, #28
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr
 800acc0:	40010000 	.word	0x40010000
 800acc4:	40010400 	.word	0x40010400

0800acc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acc8:	b480      	push	{r7}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	69db      	ldr	r3, [r3, #28]
 800acee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	021b      	lsls	r3, r3, #8
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	031b      	lsls	r3, r3, #12
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a12      	ldr	r2, [pc, #72]	; (800ad6c <TIM_OC4_SetConfig+0xa4>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d003      	beq.n	800ad30 <TIM_OC4_SetConfig+0x68>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a11      	ldr	r2, [pc, #68]	; (800ad70 <TIM_OC4_SetConfig+0xa8>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d109      	bne.n	800ad44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	695b      	ldr	r3, [r3, #20]
 800ad3c:	019b      	lsls	r3, r3, #6
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	685a      	ldr	r2, [r3, #4]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	621a      	str	r2, [r3, #32]
}
 800ad5e:	bf00      	nop
 800ad60:	371c      	adds	r7, #28
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	40010000 	.word	0x40010000
 800ad70:	40010400 	.word	0x40010400

0800ad74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b087      	sub	sp, #28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	f023 0201 	bic.w	r2, r3, #1
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	011b      	lsls	r3, r3, #4
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f023 030a 	bic.w	r3, r3, #10
 800adb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	697a      	ldr	r2, [r7, #20]
 800adc4:	621a      	str	r2, [r3, #32]
}
 800adc6:	bf00      	nop
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800add2:	b480      	push	{r7}
 800add4:	b087      	sub	sp, #28
 800add6:	af00      	add	r7, sp, #0
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	f023 0210 	bic.w	r2, r3, #16
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6a1b      	ldr	r3, [r3, #32]
 800adf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800adfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	031b      	lsls	r3, r3, #12
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	4313      	orrs	r3, r2
 800ae06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	011b      	lsls	r3, r3, #4
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	697a      	ldr	r2, [r7, #20]
 800ae1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	621a      	str	r2, [r3, #32]
}
 800ae26:	bf00      	nop
 800ae28:	371c      	adds	r7, #28
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b085      	sub	sp, #20
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae4a:	683a      	ldr	r2, [r7, #0]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	f043 0307 	orr.w	r3, r3, #7
 800ae54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	609a      	str	r2, [r3, #8]
}
 800ae5c:	bf00      	nop
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
 800ae74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	021a      	lsls	r2, r3, #8
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	431a      	orrs	r2, r3
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	609a      	str	r2, [r3, #8]
}
 800ae9c:	bf00      	nop
 800ae9e:	371c      	adds	r7, #28
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b087      	sub	sp, #28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f003 031f 	and.w	r3, r3, #31
 800aeba:	2201      	movs	r2, #1
 800aebc:	fa02 f303 	lsl.w	r3, r2, r3
 800aec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	6a1a      	ldr	r2, [r3, #32]
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	43db      	mvns	r3, r3
 800aeca:	401a      	ands	r2, r3
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6a1a      	ldr	r2, [r3, #32]
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	f003 031f 	and.w	r3, r3, #31
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	fa01 f303 	lsl.w	r3, r1, r3
 800aee0:	431a      	orrs	r2, r3
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	621a      	str	r2, [r3, #32]
}
 800aee6:	bf00      	nop
 800aee8:	371c      	adds	r7, #28
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
	...

0800aef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af04:	2b01      	cmp	r3, #1
 800af06:	d101      	bne.n	800af0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af08:	2302      	movs	r3, #2
 800af0a:	e05a      	b.n	800afc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2202      	movs	r2, #2
 800af18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a21      	ldr	r2, [pc, #132]	; (800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d022      	beq.n	800af96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af58:	d01d      	beq.n	800af96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a1d      	ldr	r2, [pc, #116]	; (800afd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d018      	beq.n	800af96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a1b      	ldr	r2, [pc, #108]	; (800afd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d013      	beq.n	800af96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a1a      	ldr	r2, [pc, #104]	; (800afdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d00e      	beq.n	800af96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a18      	ldr	r2, [pc, #96]	; (800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d009      	beq.n	800af96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a17      	ldr	r2, [pc, #92]	; (800afe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d004      	beq.n	800af96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a15      	ldr	r2, [pc, #84]	; (800afe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d10c      	bne.n	800afb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	40010000 	.word	0x40010000
 800afd4:	40000400 	.word	0x40000400
 800afd8:	40000800 	.word	0x40000800
 800afdc:	40000c00 	.word	0x40000c00
 800afe0:	40010400 	.word	0x40010400
 800afe4:	40014000 	.word	0x40014000
 800afe8:	40001800 	.word	0x40001800

0800afec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aff6:	2300      	movs	r3, #0
 800aff8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b000:	2b01      	cmp	r3, #1
 800b002:	d101      	bne.n	800b008 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b004:	2302      	movs	r3, #2
 800b006:	e03d      	b.n	800b084 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	4313      	orrs	r3, r2
 800b02a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	4313      	orrs	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4313      	orrs	r3, r2
 800b046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	4313      	orrs	r3, r2
 800b054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	695b      	ldr	r3, [r3, #20]
 800b060:	4313      	orrs	r3, r2
 800b062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	69db      	ldr	r3, [r3, #28]
 800b06e:	4313      	orrs	r3, r2
 800b070:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0ac:	bf00      	nop
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e03f      	b.n	800b14a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7f9 ff10 	bl	8004f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2224      	movs	r2, #36	; 0x24
 800b0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68da      	ldr	r2, [r3, #12]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b0fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fa9b 	bl	800b638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	691a      	ldr	r2, [r3, #16]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	695a      	ldr	r2, [r3, #20]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68da      	ldr	r2, [r3, #12]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2220      	movs	r2, #32
 800b13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2220      	movs	r2, #32
 800b144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b084      	sub	sp, #16
 800b156:	af00      	add	r7, sp, #0
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	4613      	mov	r3, r2
 800b15e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b20      	cmp	r3, #32
 800b16a:	d11d      	bne.n	800b1a8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d002      	beq.n	800b178 <HAL_UART_Receive_DMA+0x26>
 800b172:	88fb      	ldrh	r3, [r7, #6]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e016      	b.n	800b1aa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b182:	2b01      	cmp	r3, #1
 800b184:	d101      	bne.n	800b18a <HAL_UART_Receive_DMA+0x38>
 800b186:	2302      	movs	r3, #2
 800b188:	e00f      	b.n	800b1aa <HAL_UART_Receive_DMA+0x58>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b198:	88fb      	ldrh	r3, [r7, #6]
 800b19a:	461a      	mov	r2, r3
 800b19c:	68b9      	ldr	r1, [r7, #8]
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f000 f920 	bl	800b3e4 <UART_Start_Receive_DMA>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	e000      	b.n	800b1aa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b1a8:	2302      	movs	r3, #2
  }
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3710      	adds	r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b1ba:	bf00      	nop
 800b1bc:	370c      	adds	r7, #12
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b083      	sub	sp, #12
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b1ce:	bf00      	nop
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b083      	sub	sp, #12
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1e6:	bf00      	nop
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr

0800b1f2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b09c      	sub	sp, #112	; 0x70
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d172      	bne.n	800b2f4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b20e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b210:	2200      	movs	r2, #0
 800b212:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	330c      	adds	r3, #12
 800b21a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b21e:	e853 3f00 	ldrex	r3, [r3]
 800b222:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b22a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b22c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	330c      	adds	r3, #12
 800b232:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b234:	65ba      	str	r2, [r7, #88]	; 0x58
 800b236:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b238:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b23a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b23c:	e841 2300 	strex	r3, r2, [r1]
 800b240:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1e5      	bne.n	800b214 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3314      	adds	r3, #20
 800b24e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	e853 3f00 	ldrex	r3, [r3]
 800b256:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25a:	f023 0301 	bic.w	r3, r3, #1
 800b25e:	667b      	str	r3, [r7, #100]	; 0x64
 800b260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	3314      	adds	r3, #20
 800b266:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b268:	647a      	str	r2, [r7, #68]	; 0x44
 800b26a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b26e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b270:	e841 2300 	strex	r3, r2, [r1]
 800b274:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1e5      	bne.n	800b248 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b27c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	3314      	adds	r3, #20
 800b282:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	e853 3f00 	ldrex	r3, [r3]
 800b28a:	623b      	str	r3, [r7, #32]
   return(result);
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b292:	663b      	str	r3, [r7, #96]	; 0x60
 800b294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3314      	adds	r3, #20
 800b29a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b29c:	633a      	str	r2, [r7, #48]	; 0x30
 800b29e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2a4:	e841 2300 	strex	r3, r2, [r1]
 800b2a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1e5      	bne.n	800b27c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b2b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2b2:	2220      	movs	r2, #32
 800b2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d119      	bne.n	800b2f4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	330c      	adds	r3, #12
 800b2c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	e853 3f00 	ldrex	r3, [r3]
 800b2ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f023 0310 	bic.w	r3, r3, #16
 800b2d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	330c      	adds	r3, #12
 800b2de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2e0:	61fa      	str	r2, [r7, #28]
 800b2e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e4:	69b9      	ldr	r1, [r7, #24]
 800b2e6:	69fa      	ldr	r2, [r7, #28]
 800b2e8:	e841 2300 	strex	r3, r2, [r1]
 800b2ec:	617b      	str	r3, [r7, #20]
   return(result);
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1e5      	bne.n	800b2c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d106      	bne.n	800b30a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b300:	4619      	mov	r1, r3
 800b302:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b304:	f7ff ff69 	bl	800b1da <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b308:	e002      	b.n	800b310 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b30a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b30c:	f7f8 feb4 	bl	8004078 <HAL_UART_RxCpltCallback>
}
 800b310:	bf00      	nop
 800b312:	3770      	adds	r7, #112	; 0x70
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b324:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d108      	bne.n	800b340 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b332:	085b      	lsrs	r3, r3, #1
 800b334:	b29b      	uxth	r3, r3
 800b336:	4619      	mov	r1, r3
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f7ff ff4e 	bl	800b1da <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b33e:	e002      	b.n	800b346 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f7ff ff36 	bl	800b1b2 <HAL_UART_RxHalfCpltCallback>
}
 800b346:	bf00      	nop
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b084      	sub	sp, #16
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b356:	2300      	movs	r3, #0
 800b358:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	695b      	ldr	r3, [r3, #20]
 800b366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b36a:	2b80      	cmp	r3, #128	; 0x80
 800b36c:	bf0c      	ite	eq
 800b36e:	2301      	moveq	r3, #1
 800b370:	2300      	movne	r3, #0
 800b372:	b2db      	uxtb	r3, r3
 800b374:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b21      	cmp	r3, #33	; 0x21
 800b380:	d108      	bne.n	800b394 <UART_DMAError+0x46>
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d005      	beq.n	800b394 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	2200      	movs	r2, #0
 800b38c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b38e:	68b8      	ldr	r0, [r7, #8]
 800b390:	f000 f8c6 	bl	800b520 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39e:	2b40      	cmp	r3, #64	; 0x40
 800b3a0:	bf0c      	ite	eq
 800b3a2:	2301      	moveq	r3, #1
 800b3a4:	2300      	movne	r3, #0
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	2b22      	cmp	r3, #34	; 0x22
 800b3b4:	d108      	bne.n	800b3c8 <UART_DMAError+0x7a>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d005      	beq.n	800b3c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b3c2:	68b8      	ldr	r0, [r7, #8]
 800b3c4:	f000 f8d4 	bl	800b570 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3cc:	f043 0210 	orr.w	r2, r3, #16
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3d4:	68b8      	ldr	r0, [r7, #8]
 800b3d6:	f7ff fef6 	bl	800b1c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3da:	bf00      	nop
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
	...

0800b3e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b098      	sub	sp, #96	; 0x60
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	88fa      	ldrh	r2, [r7, #6]
 800b3fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2222      	movs	r2, #34	; 0x22
 800b408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b410:	4a40      	ldr	r2, [pc, #256]	; (800b514 <UART_Start_Receive_DMA+0x130>)
 800b412:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b418:	4a3f      	ldr	r2, [pc, #252]	; (800b518 <UART_Start_Receive_DMA+0x134>)
 800b41a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b420:	4a3e      	ldr	r2, [pc, #248]	; (800b51c <UART_Start_Receive_DMA+0x138>)
 800b422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b428:	2200      	movs	r2, #0
 800b42a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b42c:	f107 0308 	add.w	r3, r7, #8
 800b430:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3304      	adds	r3, #4
 800b43c:	4619      	mov	r1, r3
 800b43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	88fb      	ldrh	r3, [r7, #6]
 800b444:	f7fb f86b 	bl	800651e <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b448:	2300      	movs	r3, #0
 800b44a:	613b      	str	r3, [r7, #16]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	613b      	str	r3, [r7, #16]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	613b      	str	r3, [r7, #16]
 800b45c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d019      	beq.n	800b4a2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	330c      	adds	r3, #12
 800b474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b478:	e853 3f00 	ldrex	r3, [r3]
 800b47c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b484:	65bb      	str	r3, [r7, #88]	; 0x58
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	330c      	adds	r3, #12
 800b48c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b48e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b490:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b492:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b496:	e841 2300 	strex	r3, r2, [r1]
 800b49a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b49c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1e5      	bne.n	800b46e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	3314      	adds	r3, #20
 800b4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b4:	f043 0301 	orr.w	r3, r3, #1
 800b4b8:	657b      	str	r3, [r7, #84]	; 0x54
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3314      	adds	r3, #20
 800b4c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4c2:	63ba      	str	r2, [r7, #56]	; 0x38
 800b4c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b4c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1e5      	bne.n	800b4a2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3314      	adds	r3, #20
 800b4dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	617b      	str	r3, [r7, #20]
   return(result);
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ec:	653b      	str	r3, [r7, #80]	; 0x50
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3314      	adds	r3, #20
 800b4f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4f6:	627a      	str	r2, [r7, #36]	; 0x24
 800b4f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fa:	6a39      	ldr	r1, [r7, #32]
 800b4fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4fe:	e841 2300 	strex	r3, r2, [r1]
 800b502:	61fb      	str	r3, [r7, #28]
   return(result);
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1e5      	bne.n	800b4d6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3760      	adds	r7, #96	; 0x60
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	0800b1f3 	.word	0x0800b1f3
 800b518:	0800b319 	.word	0x0800b319
 800b51c:	0800b34f 	.word	0x0800b34f

0800b520 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b520:	b480      	push	{r7}
 800b522:	b089      	sub	sp, #36	; 0x24
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	330c      	adds	r3, #12
 800b52e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	e853 3f00 	ldrex	r3, [r3]
 800b536:	60bb      	str	r3, [r7, #8]
   return(result);
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b53e:	61fb      	str	r3, [r7, #28]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	330c      	adds	r3, #12
 800b546:	69fa      	ldr	r2, [r7, #28]
 800b548:	61ba      	str	r2, [r7, #24]
 800b54a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54c:	6979      	ldr	r1, [r7, #20]
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	e841 2300 	strex	r3, r2, [r1]
 800b554:	613b      	str	r3, [r7, #16]
   return(result);
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1e5      	bne.n	800b528 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2220      	movs	r2, #32
 800b560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b564:	bf00      	nop
 800b566:	3724      	adds	r7, #36	; 0x24
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b570:	b480      	push	{r7}
 800b572:	b095      	sub	sp, #84	; 0x54
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	330c      	adds	r3, #12
 800b57e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b582:	e853 3f00 	ldrex	r3, [r3]
 800b586:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b58e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	330c      	adds	r3, #12
 800b596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b598:	643a      	str	r2, [r7, #64]	; 0x40
 800b59a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b59e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5a0:	e841 2300 	strex	r3, r2, [r1]
 800b5a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1e5      	bne.n	800b578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3314      	adds	r3, #20
 800b5b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b4:	6a3b      	ldr	r3, [r7, #32]
 800b5b6:	e853 3f00 	ldrex	r3, [r3]
 800b5ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	f023 0301 	bic.w	r3, r3, #1
 800b5c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	3314      	adds	r3, #20
 800b5ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5d4:	e841 2300 	strex	r3, r2, [r1]
 800b5d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1e5      	bne.n	800b5ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d119      	bne.n	800b61c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	330c      	adds	r3, #12
 800b5ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	e853 3f00 	ldrex	r3, [r3]
 800b5f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	f023 0310 	bic.w	r3, r3, #16
 800b5fe:	647b      	str	r3, [r7, #68]	; 0x44
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	330c      	adds	r3, #12
 800b606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b608:	61ba      	str	r2, [r7, #24]
 800b60a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	6979      	ldr	r1, [r7, #20]
 800b60e:	69ba      	ldr	r2, [r7, #24]
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	613b      	str	r3, [r7, #16]
   return(result);
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e5      	bne.n	800b5e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2220      	movs	r2, #32
 800b620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b62a:	bf00      	nop
 800b62c:	3754      	adds	r7, #84	; 0x54
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr
	...

0800b638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b63c:	b0c0      	sub	sp, #256	; 0x100
 800b63e:	af00      	add	r7, sp, #0
 800b640:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b654:	68d9      	ldr	r1, [r3, #12]
 800b656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	ea40 0301 	orr.w	r3, r0, r1
 800b660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b666:	689a      	ldr	r2, [r3, #8]
 800b668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	431a      	orrs	r2, r3
 800b670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	431a      	orrs	r2, r3
 800b678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	4313      	orrs	r3, r2
 800b680:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b690:	f021 010c 	bic.w	r1, r1, #12
 800b694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b69e:	430b      	orrs	r3, r1
 800b6a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b6a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b6ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b2:	6999      	ldr	r1, [r3, #24]
 800b6b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	ea40 0301 	orr.w	r3, r0, r1
 800b6be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b6c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	4b8f      	ldr	r3, [pc, #572]	; (800b904 <UART_SetConfig+0x2cc>)
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d005      	beq.n	800b6d8 <UART_SetConfig+0xa0>
 800b6cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	4b8d      	ldr	r3, [pc, #564]	; (800b908 <UART_SetConfig+0x2d0>)
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d104      	bne.n	800b6e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b6d8:	f7fc fe82 	bl	80083e0 <HAL_RCC_GetPCLK2Freq>
 800b6dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b6e0:	e003      	b.n	800b6ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b6e2:	f7fc fe69 	bl	80083b8 <HAL_RCC_GetPCLK1Freq>
 800b6e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ee:	69db      	ldr	r3, [r3, #28]
 800b6f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6f4:	f040 810c 	bne.w	800b910 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b6f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b702:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b706:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b70a:	4622      	mov	r2, r4
 800b70c:	462b      	mov	r3, r5
 800b70e:	1891      	adds	r1, r2, r2
 800b710:	65b9      	str	r1, [r7, #88]	; 0x58
 800b712:	415b      	adcs	r3, r3
 800b714:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b716:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b71a:	4621      	mov	r1, r4
 800b71c:	eb12 0801 	adds.w	r8, r2, r1
 800b720:	4629      	mov	r1, r5
 800b722:	eb43 0901 	adc.w	r9, r3, r1
 800b726:	f04f 0200 	mov.w	r2, #0
 800b72a:	f04f 0300 	mov.w	r3, #0
 800b72e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b73a:	4690      	mov	r8, r2
 800b73c:	4699      	mov	r9, r3
 800b73e:	4623      	mov	r3, r4
 800b740:	eb18 0303 	adds.w	r3, r8, r3
 800b744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b748:	462b      	mov	r3, r5
 800b74a:	eb49 0303 	adc.w	r3, r9, r3
 800b74e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b75e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b766:	460b      	mov	r3, r1
 800b768:	18db      	adds	r3, r3, r3
 800b76a:	653b      	str	r3, [r7, #80]	; 0x50
 800b76c:	4613      	mov	r3, r2
 800b76e:	eb42 0303 	adc.w	r3, r2, r3
 800b772:	657b      	str	r3, [r7, #84]	; 0x54
 800b774:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b778:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b77c:	f7f5 fa94 	bl	8000ca8 <__aeabi_uldivmod>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	4b61      	ldr	r3, [pc, #388]	; (800b90c <UART_SetConfig+0x2d4>)
 800b786:	fba3 2302 	umull	r2, r3, r3, r2
 800b78a:	095b      	lsrs	r3, r3, #5
 800b78c:	011c      	lsls	r4, r3, #4
 800b78e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b792:	2200      	movs	r2, #0
 800b794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b798:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b79c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b7a0:	4642      	mov	r2, r8
 800b7a2:	464b      	mov	r3, r9
 800b7a4:	1891      	adds	r1, r2, r2
 800b7a6:	64b9      	str	r1, [r7, #72]	; 0x48
 800b7a8:	415b      	adcs	r3, r3
 800b7aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b7b0:	4641      	mov	r1, r8
 800b7b2:	eb12 0a01 	adds.w	sl, r2, r1
 800b7b6:	4649      	mov	r1, r9
 800b7b8:	eb43 0b01 	adc.w	fp, r3, r1
 800b7bc:	f04f 0200 	mov.w	r2, #0
 800b7c0:	f04f 0300 	mov.w	r3, #0
 800b7c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b7c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b7cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7d0:	4692      	mov	sl, r2
 800b7d2:	469b      	mov	fp, r3
 800b7d4:	4643      	mov	r3, r8
 800b7d6:	eb1a 0303 	adds.w	r3, sl, r3
 800b7da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7de:	464b      	mov	r3, r9
 800b7e0:	eb4b 0303 	adc.w	r3, fp, r3
 800b7e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b7f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	18db      	adds	r3, r3, r3
 800b800:	643b      	str	r3, [r7, #64]	; 0x40
 800b802:	4613      	mov	r3, r2
 800b804:	eb42 0303 	adc.w	r3, r2, r3
 800b808:	647b      	str	r3, [r7, #68]	; 0x44
 800b80a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b80e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b812:	f7f5 fa49 	bl	8000ca8 <__aeabi_uldivmod>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	4611      	mov	r1, r2
 800b81c:	4b3b      	ldr	r3, [pc, #236]	; (800b90c <UART_SetConfig+0x2d4>)
 800b81e:	fba3 2301 	umull	r2, r3, r3, r1
 800b822:	095b      	lsrs	r3, r3, #5
 800b824:	2264      	movs	r2, #100	; 0x64
 800b826:	fb02 f303 	mul.w	r3, r2, r3
 800b82a:	1acb      	subs	r3, r1, r3
 800b82c:	00db      	lsls	r3, r3, #3
 800b82e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b832:	4b36      	ldr	r3, [pc, #216]	; (800b90c <UART_SetConfig+0x2d4>)
 800b834:	fba3 2302 	umull	r2, r3, r3, r2
 800b838:	095b      	lsrs	r3, r3, #5
 800b83a:	005b      	lsls	r3, r3, #1
 800b83c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b840:	441c      	add	r4, r3
 800b842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b846:	2200      	movs	r2, #0
 800b848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b84c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b850:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b854:	4642      	mov	r2, r8
 800b856:	464b      	mov	r3, r9
 800b858:	1891      	adds	r1, r2, r2
 800b85a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b85c:	415b      	adcs	r3, r3
 800b85e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b864:	4641      	mov	r1, r8
 800b866:	1851      	adds	r1, r2, r1
 800b868:	6339      	str	r1, [r7, #48]	; 0x30
 800b86a:	4649      	mov	r1, r9
 800b86c:	414b      	adcs	r3, r1
 800b86e:	637b      	str	r3, [r7, #52]	; 0x34
 800b870:	f04f 0200 	mov.w	r2, #0
 800b874:	f04f 0300 	mov.w	r3, #0
 800b878:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b87c:	4659      	mov	r1, fp
 800b87e:	00cb      	lsls	r3, r1, #3
 800b880:	4651      	mov	r1, sl
 800b882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b886:	4651      	mov	r1, sl
 800b888:	00ca      	lsls	r2, r1, #3
 800b88a:	4610      	mov	r0, r2
 800b88c:	4619      	mov	r1, r3
 800b88e:	4603      	mov	r3, r0
 800b890:	4642      	mov	r2, r8
 800b892:	189b      	adds	r3, r3, r2
 800b894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b898:	464b      	mov	r3, r9
 800b89a:	460a      	mov	r2, r1
 800b89c:	eb42 0303 	adc.w	r3, r2, r3
 800b8a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b8b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b8b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	18db      	adds	r3, r3, r3
 800b8bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8be:	4613      	mov	r3, r2
 800b8c0:	eb42 0303 	adc.w	r3, r2, r3
 800b8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b8ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b8ce:	f7f5 f9eb 	bl	8000ca8 <__aeabi_uldivmod>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	4b0d      	ldr	r3, [pc, #52]	; (800b90c <UART_SetConfig+0x2d4>)
 800b8d8:	fba3 1302 	umull	r1, r3, r3, r2
 800b8dc:	095b      	lsrs	r3, r3, #5
 800b8de:	2164      	movs	r1, #100	; 0x64
 800b8e0:	fb01 f303 	mul.w	r3, r1, r3
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	00db      	lsls	r3, r3, #3
 800b8e8:	3332      	adds	r3, #50	; 0x32
 800b8ea:	4a08      	ldr	r2, [pc, #32]	; (800b90c <UART_SetConfig+0x2d4>)
 800b8ec:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f0:	095b      	lsrs	r3, r3, #5
 800b8f2:	f003 0207 	and.w	r2, r3, #7
 800b8f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4422      	add	r2, r4
 800b8fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b900:	e105      	b.n	800bb0e <UART_SetConfig+0x4d6>
 800b902:	bf00      	nop
 800b904:	40011000 	.word	0x40011000
 800b908:	40011400 	.word	0x40011400
 800b90c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b914:	2200      	movs	r2, #0
 800b916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b91a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b91e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b922:	4642      	mov	r2, r8
 800b924:	464b      	mov	r3, r9
 800b926:	1891      	adds	r1, r2, r2
 800b928:	6239      	str	r1, [r7, #32]
 800b92a:	415b      	adcs	r3, r3
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24
 800b92e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b932:	4641      	mov	r1, r8
 800b934:	1854      	adds	r4, r2, r1
 800b936:	4649      	mov	r1, r9
 800b938:	eb43 0501 	adc.w	r5, r3, r1
 800b93c:	f04f 0200 	mov.w	r2, #0
 800b940:	f04f 0300 	mov.w	r3, #0
 800b944:	00eb      	lsls	r3, r5, #3
 800b946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b94a:	00e2      	lsls	r2, r4, #3
 800b94c:	4614      	mov	r4, r2
 800b94e:	461d      	mov	r5, r3
 800b950:	4643      	mov	r3, r8
 800b952:	18e3      	adds	r3, r4, r3
 800b954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b958:	464b      	mov	r3, r9
 800b95a:	eb45 0303 	adc.w	r3, r5, r3
 800b95e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b96e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b972:	f04f 0200 	mov.w	r2, #0
 800b976:	f04f 0300 	mov.w	r3, #0
 800b97a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b97e:	4629      	mov	r1, r5
 800b980:	008b      	lsls	r3, r1, #2
 800b982:	4621      	mov	r1, r4
 800b984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b988:	4621      	mov	r1, r4
 800b98a:	008a      	lsls	r2, r1, #2
 800b98c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b990:	f7f5 f98a 	bl	8000ca8 <__aeabi_uldivmod>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4b60      	ldr	r3, [pc, #384]	; (800bb1c <UART_SetConfig+0x4e4>)
 800b99a:	fba3 2302 	umull	r2, r3, r3, r2
 800b99e:	095b      	lsrs	r3, r3, #5
 800b9a0:	011c      	lsls	r4, r3, #4
 800b9a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b9b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b9b4:	4642      	mov	r2, r8
 800b9b6:	464b      	mov	r3, r9
 800b9b8:	1891      	adds	r1, r2, r2
 800b9ba:	61b9      	str	r1, [r7, #24]
 800b9bc:	415b      	adcs	r3, r3
 800b9be:	61fb      	str	r3, [r7, #28]
 800b9c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9c4:	4641      	mov	r1, r8
 800b9c6:	1851      	adds	r1, r2, r1
 800b9c8:	6139      	str	r1, [r7, #16]
 800b9ca:	4649      	mov	r1, r9
 800b9cc:	414b      	adcs	r3, r1
 800b9ce:	617b      	str	r3, [r7, #20]
 800b9d0:	f04f 0200 	mov.w	r2, #0
 800b9d4:	f04f 0300 	mov.w	r3, #0
 800b9d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b9dc:	4659      	mov	r1, fp
 800b9de:	00cb      	lsls	r3, r1, #3
 800b9e0:	4651      	mov	r1, sl
 800b9e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9e6:	4651      	mov	r1, sl
 800b9e8:	00ca      	lsls	r2, r1, #3
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	189b      	adds	r3, r3, r2
 800b9f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b9f8:	464b      	mov	r3, r9
 800b9fa:	460a      	mov	r2, r1
 800b9fc:	eb42 0303 	adc.w	r3, r2, r3
 800ba00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ba10:	f04f 0200 	mov.w	r2, #0
 800ba14:	f04f 0300 	mov.w	r3, #0
 800ba18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba1c:	4649      	mov	r1, r9
 800ba1e:	008b      	lsls	r3, r1, #2
 800ba20:	4641      	mov	r1, r8
 800ba22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba26:	4641      	mov	r1, r8
 800ba28:	008a      	lsls	r2, r1, #2
 800ba2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba2e:	f7f5 f93b 	bl	8000ca8 <__aeabi_uldivmod>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	4b39      	ldr	r3, [pc, #228]	; (800bb1c <UART_SetConfig+0x4e4>)
 800ba38:	fba3 1302 	umull	r1, r3, r3, r2
 800ba3c:	095b      	lsrs	r3, r3, #5
 800ba3e:	2164      	movs	r1, #100	; 0x64
 800ba40:	fb01 f303 	mul.w	r3, r1, r3
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	011b      	lsls	r3, r3, #4
 800ba48:	3332      	adds	r3, #50	; 0x32
 800ba4a:	4a34      	ldr	r2, [pc, #208]	; (800bb1c <UART_SetConfig+0x4e4>)
 800ba4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba50:	095b      	lsrs	r3, r3, #5
 800ba52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba56:	441c      	add	r4, r3
 800ba58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	673b      	str	r3, [r7, #112]	; 0x70
 800ba60:	677a      	str	r2, [r7, #116]	; 0x74
 800ba62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ba66:	4642      	mov	r2, r8
 800ba68:	464b      	mov	r3, r9
 800ba6a:	1891      	adds	r1, r2, r2
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	415b      	adcs	r3, r3
 800ba70:	60fb      	str	r3, [r7, #12]
 800ba72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba76:	4641      	mov	r1, r8
 800ba78:	1851      	adds	r1, r2, r1
 800ba7a:	6039      	str	r1, [r7, #0]
 800ba7c:	4649      	mov	r1, r9
 800ba7e:	414b      	adcs	r3, r1
 800ba80:	607b      	str	r3, [r7, #4]
 800ba82:	f04f 0200 	mov.w	r2, #0
 800ba86:	f04f 0300 	mov.w	r3, #0
 800ba8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ba8e:	4659      	mov	r1, fp
 800ba90:	00cb      	lsls	r3, r1, #3
 800ba92:	4651      	mov	r1, sl
 800ba94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba98:	4651      	mov	r1, sl
 800ba9a:	00ca      	lsls	r2, r1, #3
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4603      	mov	r3, r0
 800baa2:	4642      	mov	r2, r8
 800baa4:	189b      	adds	r3, r3, r2
 800baa6:	66bb      	str	r3, [r7, #104]	; 0x68
 800baa8:	464b      	mov	r3, r9
 800baaa:	460a      	mov	r2, r1
 800baac:	eb42 0303 	adc.w	r3, r2, r3
 800bab0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	663b      	str	r3, [r7, #96]	; 0x60
 800babc:	667a      	str	r2, [r7, #100]	; 0x64
 800babe:	f04f 0200 	mov.w	r2, #0
 800bac2:	f04f 0300 	mov.w	r3, #0
 800bac6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800baca:	4649      	mov	r1, r9
 800bacc:	008b      	lsls	r3, r1, #2
 800bace:	4641      	mov	r1, r8
 800bad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bad4:	4641      	mov	r1, r8
 800bad6:	008a      	lsls	r2, r1, #2
 800bad8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800badc:	f7f5 f8e4 	bl	8000ca8 <__aeabi_uldivmod>
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	4b0d      	ldr	r3, [pc, #52]	; (800bb1c <UART_SetConfig+0x4e4>)
 800bae6:	fba3 1302 	umull	r1, r3, r3, r2
 800baea:	095b      	lsrs	r3, r3, #5
 800baec:	2164      	movs	r1, #100	; 0x64
 800baee:	fb01 f303 	mul.w	r3, r1, r3
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	011b      	lsls	r3, r3, #4
 800baf6:	3332      	adds	r3, #50	; 0x32
 800baf8:	4a08      	ldr	r2, [pc, #32]	; (800bb1c <UART_SetConfig+0x4e4>)
 800bafa:	fba2 2303 	umull	r2, r3, r2, r3
 800bafe:	095b      	lsrs	r3, r3, #5
 800bb00:	f003 020f 	and.w	r2, r3, #15
 800bb04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4422      	add	r2, r4
 800bb0c:	609a      	str	r2, [r3, #8]
}
 800bb0e:	bf00      	nop
 800bb10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb14:	46bd      	mov	sp, r7
 800bb16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb1a:	bf00      	nop
 800bb1c:	51eb851f 	.word	0x51eb851f

0800bb20 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800bb20:	b084      	sub	sp, #16
 800bb22:	b480      	push	{r7}
 800bb24:	b085      	sub	sp, #20
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	f107 001c 	add.w	r0, r7, #28
 800bb2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bb36:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bb38:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bb3a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bb3e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bb42:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bb46:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bb4a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800bb5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	431a      	orrs	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3714      	adds	r7, #20
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	b004      	add	sp, #16
 800bb74:	4770      	bx	lr

0800bb76 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2203      	movs	r2, #3
 800bbbe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b083      	sub	sp, #12
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 0303 	and.w	r3, r3, #3
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800bbea:	b480      	push	{r7}
 800bbec:	b085      	sub	sp, #20
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
 800bbf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc08:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bc0e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bc14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bc24:	f023 030f 	bic.w	r3, r3, #15
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b083      	sub	sp, #12
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	691b      	ldr	r3, [r3, #16]
 800bc4a:	b2db      	uxtb	r3, r3
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	3314      	adds	r3, #20
 800bc66:	461a      	mov	r2, r3
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
}  
 800bc72:	4618      	mov	r0, r3
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b085      	sub	sp, #20
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bca4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bcaa:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bcb0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcbc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	431a      	orrs	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bcc8:	2300      	movs	r3, #0

}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3714      	adds	r7, #20
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b088      	sub	sp, #32
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
 800bcde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bce4:	2310      	movs	r3, #16
 800bce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bce8:	2340      	movs	r3, #64	; 0x40
 800bcea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bcec:	2300      	movs	r3, #0
 800bcee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bcf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcf6:	f107 0308 	add.w	r3, r7, #8
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7ff ff74 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800bd02:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd06:	2110      	movs	r1, #16
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f9d7 	bl	800c0bc <SDMMC_GetCmdResp1>
 800bd0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd10:	69fb      	ldr	r3, [r7, #28]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3720      	adds	r7, #32
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b088      	sub	sp, #32
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bd28:	2311      	movs	r3, #17
 800bd2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd2c:	2340      	movs	r3, #64	; 0x40
 800bd2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd30:	2300      	movs	r3, #0
 800bd32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd3a:	f107 0308 	add.w	r3, r7, #8
 800bd3e:	4619      	mov	r1, r3
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7ff ff52 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bd46:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd4a:	2111      	movs	r1, #17
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f9b5 	bl	800c0bc <SDMMC_GetCmdResp1>
 800bd52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd54:	69fb      	ldr	r3, [r7, #28]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3720      	adds	r7, #32
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b088      	sub	sp, #32
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bd6c:	2312      	movs	r3, #18
 800bd6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd70:	2340      	movs	r3, #64	; 0x40
 800bd72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd74:	2300      	movs	r3, #0
 800bd76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd7e:	f107 0308 	add.w	r3, r7, #8
 800bd82:	4619      	mov	r1, r3
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f7ff ff30 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bd8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd8e:	2112      	movs	r1, #18
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 f993 	bl	800c0bc <SDMMC_GetCmdResp1>
 800bd96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd98:	69fb      	ldr	r3, [r7, #28]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3720      	adds	r7, #32
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b088      	sub	sp, #32
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bdb0:	2318      	movs	r3, #24
 800bdb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdb4:	2340      	movs	r3, #64	; 0x40
 800bdb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bdc2:	f107 0308 	add.w	r3, r7, #8
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7ff ff0e 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bdce:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdd2:	2118      	movs	r1, #24
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 f971 	bl	800c0bc <SDMMC_GetCmdResp1>
 800bdda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bddc:	69fb      	ldr	r3, [r7, #28]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3720      	adds	r7, #32
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b088      	sub	sp, #32
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bdf4:	2319      	movs	r3, #25
 800bdf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdf8:	2340      	movs	r3, #64	; 0x40
 800bdfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be06:	f107 0308 	add.w	r3, r7, #8
 800be0a:	4619      	mov	r1, r3
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f7ff feec 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800be12:	f241 3288 	movw	r2, #5000	; 0x1388
 800be16:	2119      	movs	r1, #25
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 f94f 	bl	800c0bc <SDMMC_GetCmdResp1>
 800be1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be20:	69fb      	ldr	r3, [r7, #28]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3720      	adds	r7, #32
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
	...

0800be2c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800be34:	2300      	movs	r3, #0
 800be36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800be38:	230c      	movs	r3, #12
 800be3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be3c:	2340      	movs	r3, #64	; 0x40
 800be3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be40:	2300      	movs	r3, #0
 800be42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be4a:	f107 0308 	add.w	r3, r7, #8
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7ff feca 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800be56:	4a05      	ldr	r2, [pc, #20]	; (800be6c <SDMMC_CmdStopTransfer+0x40>)
 800be58:	210c      	movs	r1, #12
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 f92e 	bl	800c0bc <SDMMC_GetCmdResp1>
 800be60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be62:	69fb      	ldr	r3, [r7, #28]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3720      	adds	r7, #32
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	05f5e100 	.word	0x05f5e100

0800be70 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b08a      	sub	sp, #40	; 0x28
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800be80:	2307      	movs	r3, #7
 800be82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be84:	2340      	movs	r3, #64	; 0x40
 800be86:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be88:	2300      	movs	r3, #0
 800be8a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be90:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be92:	f107 0310 	add.w	r3, r7, #16
 800be96:	4619      	mov	r1, r3
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f7ff fea6 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800be9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bea2:	2107      	movs	r1, #7
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f000 f909 	bl	800c0bc <SDMMC_GetCmdResp1>
 800beaa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3728      	adds	r7, #40	; 0x28
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b088      	sub	sp, #32
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bebe:	2300      	movs	r3, #0
 800bec0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bec2:	2300      	movs	r3, #0
 800bec4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800bec6:	2300      	movs	r3, #0
 800bec8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800beca:	2300      	movs	r3, #0
 800becc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bed2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bed4:	f107 0308 	add.w	r3, r7, #8
 800bed8:	4619      	mov	r1, r3
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f7ff fe85 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fb23 	bl	800c52c <SDMMC_GetCmdError>
 800bee6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bee8:	69fb      	ldr	r3, [r7, #28]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3720      	adds	r7, #32
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b088      	sub	sp, #32
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800befa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800befe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bf00:	2308      	movs	r3, #8
 800bf02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf04:	2340      	movs	r3, #64	; 0x40
 800bf06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf12:	f107 0308 	add.w	r3, r7, #8
 800bf16:	4619      	mov	r1, r3
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f7ff fe66 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fab6 	bl	800c490 <SDMMC_GetCmdResp7>
 800bf24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf26:	69fb      	ldr	r3, [r7, #28]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3720      	adds	r7, #32
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bf3e:	2337      	movs	r3, #55	; 0x37
 800bf40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf42:	2340      	movs	r3, #64	; 0x40
 800bf44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf46:	2300      	movs	r3, #0
 800bf48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf50:	f107 0308 	add.w	r3, r7, #8
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff fe47 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800bf5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf60:	2137      	movs	r1, #55	; 0x37
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 f8aa 	bl	800c0bc <SDMMC_GetCmdResp1>
 800bf68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf6a:	69fb      	ldr	r3, [r7, #28]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3720      	adds	r7, #32
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b088      	sub	sp, #32
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bf8a:	2329      	movs	r3, #41	; 0x29
 800bf8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf8e:	2340      	movs	r3, #64	; 0x40
 800bf90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf92:	2300      	movs	r3, #0
 800bf94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf9c:	f107 0308 	add.w	r3, r7, #8
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f7ff fe21 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 f9bd 	bl	800c328 <SDMMC_GetCmdResp3>
 800bfae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfb0:	69fb      	ldr	r3, [r7, #28]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3720      	adds	r7, #32
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b088      	sub	sp, #32
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bfc6:	2302      	movs	r3, #2
 800bfc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bfca:	23c0      	movs	r3, #192	; 0xc0
 800bfcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bfd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bfd8:	f107 0308 	add.w	r3, r7, #8
 800bfdc:	4619      	mov	r1, r3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7ff fe03 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f957 	bl	800c298 <SDMMC_GetCmdResp2>
 800bfea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfec:	69fb      	ldr	r3, [r7, #28]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3720      	adds	r7, #32
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b088      	sub	sp, #32
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c004:	2309      	movs	r3, #9
 800c006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c008:	23c0      	movs	r3, #192	; 0xc0
 800c00a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c00c:	2300      	movs	r3, #0
 800c00e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c014:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c016:	f107 0308 	add.w	r3, r7, #8
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff fde4 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 f938 	bl	800c298 <SDMMC_GetCmdResp2>
 800c028:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c02a:	69fb      	ldr	r3, [r7, #28]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3720      	adds	r7, #32
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b088      	sub	sp, #32
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c03e:	2300      	movs	r3, #0
 800c040:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c042:	2303      	movs	r3, #3
 800c044:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c046:	2340      	movs	r3, #64	; 0x40
 800c048:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c04a:	2300      	movs	r3, #0
 800c04c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c04e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c052:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c054:	f107 0308 	add.w	r3, r7, #8
 800c058:	4619      	mov	r1, r3
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f7ff fdc5 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	2103      	movs	r1, #3
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 f99d 	bl	800c3a4 <SDMMC_GetCmdResp6>
 800c06a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c06c:	69fb      	ldr	r3, [r7, #28]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3720      	adds	r7, #32
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b088      	sub	sp, #32
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c084:	230d      	movs	r3, #13
 800c086:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c088:	2340      	movs	r3, #64	; 0x40
 800c08a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c08c:	2300      	movs	r3, #0
 800c08e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c094:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c096:	f107 0308 	add.w	r3, r7, #8
 800c09a:	4619      	mov	r1, r3
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f7ff fda4 	bl	800bbea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c0a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0a6:	210d      	movs	r1, #13
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f807 	bl	800c0bc <SDMMC_GetCmdResp1>
 800c0ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0b0:	69fb      	ldr	r3, [r7, #28]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3720      	adds	r7, #32
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
	...

0800c0bc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b088      	sub	sp, #32
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	607a      	str	r2, [r7, #4]
 800c0c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c0ca:	4b70      	ldr	r3, [pc, #448]	; (800c28c <SDMMC_GetCmdResp1+0x1d0>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a70      	ldr	r2, [pc, #448]	; (800c290 <SDMMC_GetCmdResp1+0x1d4>)
 800c0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d4:	0a5a      	lsrs	r2, r3, #9
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	fb02 f303 	mul.w	r3, r2, r3
 800c0dc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	1e5a      	subs	r2, r3, #1
 800c0e2:	61fa      	str	r2, [r7, #28]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d102      	bne.n	800c0ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c0e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0ec:	e0c9      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0f2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d0ef      	beq.n	800c0de <SDMMC_GetCmdResp1+0x22>
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1ea      	bne.n	800c0de <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c10c:	f003 0304 	and.w	r3, r3, #4
 800c110:	2b00      	cmp	r3, #0
 800c112:	d004      	beq.n	800c11e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2204      	movs	r2, #4
 800c118:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c11a:	2304      	movs	r3, #4
 800c11c:	e0b1      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d004      	beq.n	800c134 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2201      	movs	r2, #1
 800c12e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c130:	2301      	movs	r3, #1
 800c132:	e0a6      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	22c5      	movs	r2, #197	; 0xc5
 800c138:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f7ff fd7f 	bl	800bc3e <SDIO_GetCommandResponse>
 800c140:	4603      	mov	r3, r0
 800c142:	461a      	mov	r2, r3
 800c144:	7afb      	ldrb	r3, [r7, #11]
 800c146:	4293      	cmp	r3, r2
 800c148:	d001      	beq.n	800c14e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e099      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c14e:	2100      	movs	r1, #0
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	f7ff fd81 	bl	800bc58 <SDIO_GetResponse>
 800c156:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c158:	697a      	ldr	r2, [r7, #20]
 800c15a:	4b4e      	ldr	r3, [pc, #312]	; (800c294 <SDMMC_GetCmdResp1+0x1d8>)
 800c15c:	4013      	ands	r3, r2
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d101      	bne.n	800c166 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c162:	2300      	movs	r3, #0
 800c164:	e08d      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	da02      	bge.n	800c172 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c16c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c170:	e087      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d001      	beq.n	800c180 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c17c:	2340      	movs	r3, #64	; 0x40
 800c17e:	e080      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c186:	2b00      	cmp	r3, #0
 800c188:	d001      	beq.n	800c18e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c18a:	2380      	movs	r3, #128	; 0x80
 800c18c:	e079      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c194:	2b00      	cmp	r3, #0
 800c196:	d002      	beq.n	800c19e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c19c:	e071      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c1a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1ac:	e069      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c1b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1bc:	e061      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c1c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c1cc:	e059      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d002      	beq.n	800c1de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c1d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1dc:	e051      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c1e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1ec:	e049      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d002      	beq.n	800c1fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c1f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c1fc:	e041      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c20c:	e039      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c21c:	e031      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c228:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c22c:	e029      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c238:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c23c:	e021      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c244:	2b00      	cmp	r3, #0
 800c246:	d002      	beq.n	800c24e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c248:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c24c:	e019      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c254:	2b00      	cmp	r3, #0
 800c256:	d002      	beq.n	800c25e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c258:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c25c:	e011      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c268:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c26c:	e009      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	f003 0308 	and.w	r3, r3, #8
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c278:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c27c:	e001      	b.n	800c282 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c27e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c282:	4618      	mov	r0, r3
 800c284:	3720      	adds	r7, #32
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	20000070 	.word	0x20000070
 800c290:	10624dd3 	.word	0x10624dd3
 800c294:	fdffe008 	.word	0xfdffe008

0800c298 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c298:	b480      	push	{r7}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2a0:	4b1f      	ldr	r3, [pc, #124]	; (800c320 <SDMMC_GetCmdResp2+0x88>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a1f      	ldr	r2, [pc, #124]	; (800c324 <SDMMC_GetCmdResp2+0x8c>)
 800c2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2aa:	0a5b      	lsrs	r3, r3, #9
 800c2ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2b0:	fb02 f303 	mul.w	r3, r2, r3
 800c2b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	1e5a      	subs	r2, r3, #1
 800c2ba:	60fa      	str	r2, [r7, #12]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d102      	bne.n	800c2c6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c2c4:	e026      	b.n	800c314 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d0ef      	beq.n	800c2b6 <SDMMC_GetCmdResp2+0x1e>
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1ea      	bne.n	800c2b6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e4:	f003 0304 	and.w	r3, r3, #4
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d004      	beq.n	800c2f6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2204      	movs	r2, #4
 800c2f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2f2:	2304      	movs	r3, #4
 800c2f4:	e00e      	b.n	800c314 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d004      	beq.n	800c30c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c308:	2301      	movs	r3, #1
 800c30a:	e003      	b.n	800c314 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	22c5      	movs	r2, #197	; 0xc5
 800c310:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr
 800c320:	20000070 	.word	0x20000070
 800c324:	10624dd3 	.word	0x10624dd3

0800c328 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c330:	4b1a      	ldr	r3, [pc, #104]	; (800c39c <SDMMC_GetCmdResp3+0x74>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a1a      	ldr	r2, [pc, #104]	; (800c3a0 <SDMMC_GetCmdResp3+0x78>)
 800c336:	fba2 2303 	umull	r2, r3, r2, r3
 800c33a:	0a5b      	lsrs	r3, r3, #9
 800c33c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c340:	fb02 f303 	mul.w	r3, r2, r3
 800c344:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	1e5a      	subs	r2, r3, #1
 800c34a:	60fa      	str	r2, [r7, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d102      	bne.n	800c356 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c350:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c354:	e01b      	b.n	800c38e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c35a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0ef      	beq.n	800c346 <SDMMC_GetCmdResp3+0x1e>
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1ea      	bne.n	800c346 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c374:	f003 0304 	and.w	r3, r3, #4
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d004      	beq.n	800c386 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2204      	movs	r2, #4
 800c380:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c382:	2304      	movs	r3, #4
 800c384:	e003      	b.n	800c38e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	22c5      	movs	r2, #197	; 0xc5
 800c38a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3714      	adds	r7, #20
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	20000070 	.word	0x20000070
 800c3a0:	10624dd3 	.word	0x10624dd3

0800c3a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b088      	sub	sp, #32
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c3b2:	4b35      	ldr	r3, [pc, #212]	; (800c488 <SDMMC_GetCmdResp6+0xe4>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a35      	ldr	r2, [pc, #212]	; (800c48c <SDMMC_GetCmdResp6+0xe8>)
 800c3b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3bc:	0a5b      	lsrs	r3, r3, #9
 800c3be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3c2:	fb02 f303 	mul.w	r3, r2, r3
 800c3c6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c3c8:	69fb      	ldr	r3, [r7, #28]
 800c3ca:	1e5a      	subs	r2, r3, #1
 800c3cc:	61fa      	str	r2, [r7, #28]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d102      	bne.n	800c3d8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3d6:	e052      	b.n	800c47e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3dc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d0ef      	beq.n	800c3c8 <SDMMC_GetCmdResp6+0x24>
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1ea      	bne.n	800c3c8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3f6:	f003 0304 	and.w	r3, r3, #4
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d004      	beq.n	800c408 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2204      	movs	r2, #4
 800c402:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c404:	2304      	movs	r3, #4
 800c406:	e03a      	b.n	800c47e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c40c:	f003 0301 	and.w	r3, r3, #1
 800c410:	2b00      	cmp	r3, #0
 800c412:	d004      	beq.n	800c41e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2201      	movs	r2, #1
 800c418:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c41a:	2301      	movs	r3, #1
 800c41c:	e02f      	b.n	800c47e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f7ff fc0d 	bl	800bc3e <SDIO_GetCommandResponse>
 800c424:	4603      	mov	r3, r0
 800c426:	461a      	mov	r2, r3
 800c428:	7afb      	ldrb	r3, [r7, #11]
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d001      	beq.n	800c432 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c42e:	2301      	movs	r3, #1
 800c430:	e025      	b.n	800c47e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	22c5      	movs	r2, #197	; 0xc5
 800c436:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c438:	2100      	movs	r1, #0
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f7ff fc0c 	bl	800bc58 <SDIO_GetResponse>
 800c440:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d106      	bne.n	800c45a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	0c1b      	lsrs	r3, r3, #16
 800c450:	b29a      	uxth	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c456:	2300      	movs	r3, #0
 800c458:	e011      	b.n	800c47e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c460:	2b00      	cmp	r3, #0
 800c462:	d002      	beq.n	800c46a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c468:	e009      	b.n	800c47e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c478:	e001      	b.n	800c47e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c47a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3720      	adds	r7, #32
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	20000070 	.word	0x20000070
 800c48c:	10624dd3 	.word	0x10624dd3

0800c490 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c498:	4b22      	ldr	r3, [pc, #136]	; (800c524 <SDMMC_GetCmdResp7+0x94>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a22      	ldr	r2, [pc, #136]	; (800c528 <SDMMC_GetCmdResp7+0x98>)
 800c49e:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a2:	0a5b      	lsrs	r3, r3, #9
 800c4a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4a8:	fb02 f303 	mul.w	r3, r2, r3
 800c4ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	1e5a      	subs	r2, r3, #1
 800c4b2:	60fa      	str	r2, [r7, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d102      	bne.n	800c4be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4bc:	e02c      	b.n	800c518 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d0ef      	beq.n	800c4ae <SDMMC_GetCmdResp7+0x1e>
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1ea      	bne.n	800c4ae <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4dc:	f003 0304 	and.w	r3, r3, #4
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d004      	beq.n	800c4ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2204      	movs	r2, #4
 800c4e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4ea:	2304      	movs	r3, #4
 800c4ec:	e014      	b.n	800c518 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d004      	beq.n	800c504 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c500:	2301      	movs	r3, #1
 800c502:	e009      	b.n	800c518 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2240      	movs	r2, #64	; 0x40
 800c514:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c516:	2300      	movs	r3, #0
  
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr
 800c524:	20000070 	.word	0x20000070
 800c528:	10624dd3 	.word	0x10624dd3

0800c52c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c534:	4b11      	ldr	r3, [pc, #68]	; (800c57c <SDMMC_GetCmdError+0x50>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a11      	ldr	r2, [pc, #68]	; (800c580 <SDMMC_GetCmdError+0x54>)
 800c53a:	fba2 2303 	umull	r2, r3, r2, r3
 800c53e:	0a5b      	lsrs	r3, r3, #9
 800c540:	f241 3288 	movw	r2, #5000	; 0x1388
 800c544:	fb02 f303 	mul.w	r3, r2, r3
 800c548:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	1e5a      	subs	r2, r3, #1
 800c54e:	60fa      	str	r2, [r7, #12]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d102      	bne.n	800c55a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c554:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c558:	e009      	b.n	800c56e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c562:	2b00      	cmp	r3, #0
 800c564:	d0f1      	beq.n	800c54a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	22c5      	movs	r2, #197	; 0xc5
 800c56a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3714      	adds	r7, #20
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	20000070 	.word	0x20000070
 800c580:	10624dd3 	.word	0x10624dd3

0800c584 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c588:	4904      	ldr	r1, [pc, #16]	; (800c59c <MX_FATFS_Init+0x18>)
 800c58a:	4805      	ldr	r0, [pc, #20]	; (800c5a0 <MX_FATFS_Init+0x1c>)
 800c58c:	f002 ff0e 	bl	800f3ac <FATFS_LinkDriver>
 800c590:	4603      	mov	r3, r0
 800c592:	461a      	mov	r2, r3
 800c594:	4b03      	ldr	r3, [pc, #12]	; (800c5a4 <MX_FATFS_Init+0x20>)
 800c596:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c598:	bf00      	nop
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	20005b58 	.word	0x20005b58
 800c5a0:	0802d4dc 	.word	0x0802d4dc
 800c5a4:	20005b54 	.word	0x20005b54

0800c5a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c5ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c5c2:	f000 f86b 	bl	800c69c <BSP_SD_IsDetected>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d001      	beq.n	800c5d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	e005      	b.n	800c5dc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c5d0:	4804      	ldr	r0, [pc, #16]	; (800c5e4 <BSP_SD_Init+0x2c>)
 800c5d2:	f7fc fa9c 	bl	8008b0e <HAL_SD_Init>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800c5da:	79fb      	ldrb	r3, [r7, #7]
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	2000575c 	.word	0x2000575c

0800c5e8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af02      	add	r7, sp, #8
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
 800c5f4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	68f9      	ldr	r1, [r7, #12]
 800c604:	4806      	ldr	r0, [pc, #24]	; (800c620 <BSP_SD_ReadBlocks+0x38>)
 800c606:	f7fc fb33 	bl	8008c70 <HAL_SD_ReadBlocks>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d001      	beq.n	800c614 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c614:	7dfb      	ldrb	r3, [r7, #23]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	2000575c 	.word	0x2000575c

0800c624 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b088      	sub	sp, #32
 800c628:	af02      	add	r7, sp, #8
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c632:	2300      	movs	r3, #0
 800c634:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	68ba      	ldr	r2, [r7, #8]
 800c63e:	68f9      	ldr	r1, [r7, #12]
 800c640:	4806      	ldr	r0, [pc, #24]	; (800c65c <BSP_SD_WriteBlocks+0x38>)
 800c642:	f7fc fcf3 	bl	800902c <HAL_SD_WriteBlocks>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d001      	beq.n	800c650 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c64c:	2301      	movs	r3, #1
 800c64e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c650:	7dfb      	ldrb	r3, [r7, #23]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3718      	adds	r7, #24
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	2000575c 	.word	0x2000575c

0800c660 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c664:	4805      	ldr	r0, [pc, #20]	; (800c67c <BSP_SD_GetCardState+0x1c>)
 800c666:	f7fd f837 	bl	80096d8 <HAL_SD_GetCardState>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b04      	cmp	r3, #4
 800c66e:	bf14      	ite	ne
 800c670:	2301      	movne	r3, #1
 800c672:	2300      	moveq	r3, #0
 800c674:	b2db      	uxtb	r3, r3
}
 800c676:	4618      	mov	r0, r3
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	2000575c 	.word	0x2000575c

0800c680 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c688:	6879      	ldr	r1, [r7, #4]
 800c68a:	4803      	ldr	r0, [pc, #12]	; (800c698 <BSP_SD_GetCardInfo+0x18>)
 800c68c:	f7fc fff8 	bl	8009680 <HAL_SD_GetCardInfo>
}
 800c690:	bf00      	nop
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	2000575c 	.word	0x2000575c

0800c69c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800c6a6:	79fb      	ldrb	r3, [r7, #7]
 800c6a8:	b2db      	uxtb	r3, r3
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	370c      	adds	r7, #12
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr
	...

0800c6b8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	4603      	mov	r3, r0
 800c6c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c6c2:	4b0b      	ldr	r3, [pc, #44]	; (800c6f0 <SD_CheckStatus+0x38>)
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c6c8:	f7ff ffca 	bl	800c660 <BSP_SD_GetCardState>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d107      	bne.n	800c6e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c6d2:	4b07      	ldr	r3, [pc, #28]	; (800c6f0 <SD_CheckStatus+0x38>)
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	f023 0301 	bic.w	r3, r3, #1
 800c6dc:	b2da      	uxtb	r2, r3
 800c6de:	4b04      	ldr	r3, [pc, #16]	; (800c6f0 <SD_CheckStatus+0x38>)
 800c6e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c6e2:	4b03      	ldr	r3, [pc, #12]	; (800c6f0 <SD_CheckStatus+0x38>)
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	b2db      	uxtb	r3, r3
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3708      	adds	r7, #8
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	200000d1 	.word	0x200000d1

0800c6f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c6fe:	4b0b      	ldr	r3, [pc, #44]	; (800c72c <SD_initialize+0x38>)
 800c700:	2201      	movs	r2, #1
 800c702:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c704:	f7ff ff58 	bl	800c5b8 <BSP_SD_Init>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d107      	bne.n	800c71e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c70e:	79fb      	ldrb	r3, [r7, #7]
 800c710:	4618      	mov	r0, r3
 800c712:	f7ff ffd1 	bl	800c6b8 <SD_CheckStatus>
 800c716:	4603      	mov	r3, r0
 800c718:	461a      	mov	r2, r3
 800c71a:	4b04      	ldr	r3, [pc, #16]	; (800c72c <SD_initialize+0x38>)
 800c71c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c71e:	4b03      	ldr	r3, [pc, #12]	; (800c72c <SD_initialize+0x38>)
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	b2db      	uxtb	r3, r3
}
 800c724:	4618      	mov	r0, r3
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	200000d1 	.word	0x200000d1

0800c730 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c73a:	79fb      	ldrb	r3, [r7, #7]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff ffbb 	bl	800c6b8 <SD_CheckStatus>
 800c742:	4603      	mov	r3, r0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	60b9      	str	r1, [r7, #8]
 800c754:	607a      	str	r2, [r7, #4]
 800c756:	603b      	str	r3, [r7, #0]
 800c758:	4603      	mov	r3, r0
 800c75a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c760:	f04f 33ff 	mov.w	r3, #4294967295
 800c764:	683a      	ldr	r2, [r7, #0]
 800c766:	6879      	ldr	r1, [r7, #4]
 800c768:	68b8      	ldr	r0, [r7, #8]
 800c76a:	f7ff ff3d 	bl	800c5e8 <BSP_SD_ReadBlocks>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d107      	bne.n	800c784 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c774:	bf00      	nop
 800c776:	f7ff ff73 	bl	800c660 <BSP_SD_GetCardState>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1fa      	bne.n	800c776 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c780:	2300      	movs	r3, #0
 800c782:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c784:	7dfb      	ldrb	r3, [r7, #23]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3718      	adds	r7, #24
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b086      	sub	sp, #24
 800c792:	af00      	add	r7, sp, #0
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
 800c798:	603b      	str	r3, [r7, #0]
 800c79a:	4603      	mov	r3, r0
 800c79c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	6879      	ldr	r1, [r7, #4]
 800c7aa:	68b8      	ldr	r0, [r7, #8]
 800c7ac:	f7ff ff3a 	bl	800c624 <BSP_SD_WriteBlocks>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d107      	bne.n	800c7c6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c7b6:	bf00      	nop
 800c7b8:	f7ff ff52 	bl	800c660 <BSP_SD_GetCardState>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1fa      	bne.n	800c7b8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3718      	adds	r7, #24
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b08c      	sub	sp, #48	; 0x30
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	603a      	str	r2, [r7, #0]
 800c7da:	71fb      	strb	r3, [r7, #7]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c7e6:	4b25      	ldr	r3, [pc, #148]	; (800c87c <SD_ioctl+0xac>)
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	f003 0301 	and.w	r3, r3, #1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d001      	beq.n	800c7f8 <SD_ioctl+0x28>
 800c7f4:	2303      	movs	r3, #3
 800c7f6:	e03c      	b.n	800c872 <SD_ioctl+0xa2>

  switch (cmd)
 800c7f8:	79bb      	ldrb	r3, [r7, #6]
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d834      	bhi.n	800c868 <SD_ioctl+0x98>
 800c7fe:	a201      	add	r2, pc, #4	; (adr r2, 800c804 <SD_ioctl+0x34>)
 800c800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c804:	0800c815 	.word	0x0800c815
 800c808:	0800c81d 	.word	0x0800c81d
 800c80c:	0800c835 	.word	0x0800c835
 800c810:	0800c84f 	.word	0x0800c84f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c814:	2300      	movs	r3, #0
 800c816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c81a:	e028      	b.n	800c86e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c81c:	f107 030c 	add.w	r3, r7, #12
 800c820:	4618      	mov	r0, r3
 800c822:	f7ff ff2d 	bl	800c680 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c82c:	2300      	movs	r3, #0
 800c82e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c832:	e01c      	b.n	800c86e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c834:	f107 030c 	add.w	r3, r7, #12
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff ff21 	bl	800c680 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c840:	b29a      	uxth	r2, r3
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c846:	2300      	movs	r3, #0
 800c848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c84c:	e00f      	b.n	800c86e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c84e:	f107 030c 	add.w	r3, r7, #12
 800c852:	4618      	mov	r0, r3
 800c854:	f7ff ff14 	bl	800c680 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85a:	0a5a      	lsrs	r2, r3, #9
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c860:	2300      	movs	r3, #0
 800c862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c866:	e002      	b.n	800c86e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c868:	2304      	movs	r3, #4
 800c86a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c86e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c872:	4618      	mov	r0, r3
 800c874:	3730      	adds	r7, #48	; 0x30
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	200000d1 	.word	0x200000d1

0800c880 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	4603      	mov	r3, r0
 800c888:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c88a:	79fb      	ldrb	r3, [r7, #7]
 800c88c:	4a08      	ldr	r2, [pc, #32]	; (800c8b0 <disk_status+0x30>)
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	79fa      	ldrb	r2, [r7, #7]
 800c898:	4905      	ldr	r1, [pc, #20]	; (800c8b0 <disk_status+0x30>)
 800c89a:	440a      	add	r2, r1
 800c89c:	7a12      	ldrb	r2, [r2, #8]
 800c89e:	4610      	mov	r0, r2
 800c8a0:	4798      	blx	r3
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	20005b84 	.word	0x20005b84

0800c8b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c8c2:	79fb      	ldrb	r3, [r7, #7]
 800c8c4:	4a0d      	ldr	r2, [pc, #52]	; (800c8fc <disk_initialize+0x48>)
 800c8c6:	5cd3      	ldrb	r3, [r2, r3]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d111      	bne.n	800c8f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c8cc:	79fb      	ldrb	r3, [r7, #7]
 800c8ce:	4a0b      	ldr	r2, [pc, #44]	; (800c8fc <disk_initialize+0x48>)
 800c8d0:	2101      	movs	r1, #1
 800c8d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c8d4:	79fb      	ldrb	r3, [r7, #7]
 800c8d6:	4a09      	ldr	r2, [pc, #36]	; (800c8fc <disk_initialize+0x48>)
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	79fa      	ldrb	r2, [r7, #7]
 800c8e2:	4906      	ldr	r1, [pc, #24]	; (800c8fc <disk_initialize+0x48>)
 800c8e4:	440a      	add	r2, r1
 800c8e6:	7a12      	ldrb	r2, [r2, #8]
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	4798      	blx	r3
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20005b84 	.word	0x20005b84

0800c900 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c900:	b590      	push	{r4, r7, lr}
 800c902:	b087      	sub	sp, #28
 800c904:	af00      	add	r7, sp, #0
 800c906:	60b9      	str	r1, [r7, #8]
 800c908:	607a      	str	r2, [r7, #4]
 800c90a:	603b      	str	r3, [r7, #0]
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c910:	7bfb      	ldrb	r3, [r7, #15]
 800c912:	4a0a      	ldr	r2, [pc, #40]	; (800c93c <disk_read+0x3c>)
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4413      	add	r3, r2
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	689c      	ldr	r4, [r3, #8]
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
 800c91e:	4a07      	ldr	r2, [pc, #28]	; (800c93c <disk_read+0x3c>)
 800c920:	4413      	add	r3, r2
 800c922:	7a18      	ldrb	r0, [r3, #8]
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	68b9      	ldr	r1, [r7, #8]
 800c92a:	47a0      	blx	r4
 800c92c:	4603      	mov	r3, r0
 800c92e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c930:	7dfb      	ldrb	r3, [r7, #23]
}
 800c932:	4618      	mov	r0, r3
 800c934:	371c      	adds	r7, #28
 800c936:	46bd      	mov	sp, r7
 800c938:	bd90      	pop	{r4, r7, pc}
 800c93a:	bf00      	nop
 800c93c:	20005b84 	.word	0x20005b84

0800c940 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c940:	b590      	push	{r4, r7, lr}
 800c942:	b087      	sub	sp, #28
 800c944:	af00      	add	r7, sp, #0
 800c946:	60b9      	str	r1, [r7, #8]
 800c948:	607a      	str	r2, [r7, #4]
 800c94a:	603b      	str	r3, [r7, #0]
 800c94c:	4603      	mov	r3, r0
 800c94e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c950:	7bfb      	ldrb	r3, [r7, #15]
 800c952:	4a0a      	ldr	r2, [pc, #40]	; (800c97c <disk_write+0x3c>)
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4413      	add	r3, r2
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	68dc      	ldr	r4, [r3, #12]
 800c95c:	7bfb      	ldrb	r3, [r7, #15]
 800c95e:	4a07      	ldr	r2, [pc, #28]	; (800c97c <disk_write+0x3c>)
 800c960:	4413      	add	r3, r2
 800c962:	7a18      	ldrb	r0, [r3, #8]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	68b9      	ldr	r1, [r7, #8]
 800c96a:	47a0      	blx	r4
 800c96c:	4603      	mov	r3, r0
 800c96e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c970:	7dfb      	ldrb	r3, [r7, #23]
}
 800c972:	4618      	mov	r0, r3
 800c974:	371c      	adds	r7, #28
 800c976:	46bd      	mov	sp, r7
 800c978:	bd90      	pop	{r4, r7, pc}
 800c97a:	bf00      	nop
 800c97c:	20005b84 	.word	0x20005b84

0800c980 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	603a      	str	r2, [r7, #0]
 800c98a:	71fb      	strb	r3, [r7, #7]
 800c98c:	460b      	mov	r3, r1
 800c98e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c990:	79fb      	ldrb	r3, [r7, #7]
 800c992:	4a09      	ldr	r2, [pc, #36]	; (800c9b8 <disk_ioctl+0x38>)
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4413      	add	r3, r2
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	79fa      	ldrb	r2, [r7, #7]
 800c99e:	4906      	ldr	r1, [pc, #24]	; (800c9b8 <disk_ioctl+0x38>)
 800c9a0:	440a      	add	r2, r1
 800c9a2:	7a10      	ldrb	r0, [r2, #8]
 800c9a4:	79b9      	ldrb	r1, [r7, #6]
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	4798      	blx	r3
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	73fb      	strb	r3, [r7, #15]
  return res;
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	20005b84 	.word	0x20005b84

0800c9bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c9cc:	89fb      	ldrh	r3, [r7, #14]
 800c9ce:	021b      	lsls	r3, r3, #8
 800c9d0:	b21a      	sxth	r2, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	b21b      	sxth	r3, r3
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	b21b      	sxth	r3, r3
 800c9dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c9de:	89fb      	ldrh	r3, [r7, #14]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3714      	adds	r7, #20
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	3303      	adds	r3, #3
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	021b      	lsls	r3, r3, #8
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	3202      	adds	r2, #2
 800ca04:	7812      	ldrb	r2, [r2, #0]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	021b      	lsls	r3, r3, #8
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	3201      	adds	r2, #1
 800ca12:	7812      	ldrb	r2, [r2, #0]
 800ca14:	4313      	orrs	r3, r2
 800ca16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	021b      	lsls	r3, r3, #8
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	7812      	ldrb	r2, [r2, #0]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	60fb      	str	r3, [r7, #12]
	return rv;
 800ca24:	68fb      	ldr	r3, [r7, #12]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr

0800ca32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ca32:	b480      	push	{r7}
 800ca34:	b083      	sub	sp, #12
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	1c5a      	adds	r2, r3, #1
 800ca42:	607a      	str	r2, [r7, #4]
 800ca44:	887a      	ldrh	r2, [r7, #2]
 800ca46:	b2d2      	uxtb	r2, r2
 800ca48:	701a      	strb	r2, [r3, #0]
 800ca4a:	887b      	ldrh	r3, [r7, #2]
 800ca4c:	0a1b      	lsrs	r3, r3, #8
 800ca4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	1c5a      	adds	r2, r3, #1
 800ca54:	607a      	str	r2, [r7, #4]
 800ca56:	887a      	ldrh	r2, [r7, #2]
 800ca58:	b2d2      	uxtb	r2, r2
 800ca5a:	701a      	strb	r2, [r3, #0]
}
 800ca5c:	bf00      	nop
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	1c5a      	adds	r2, r3, #1
 800ca76:	607a      	str	r2, [r7, #4]
 800ca78:	683a      	ldr	r2, [r7, #0]
 800ca7a:	b2d2      	uxtb	r2, r2
 800ca7c:	701a      	strb	r2, [r3, #0]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	0a1b      	lsrs	r3, r3, #8
 800ca82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	1c5a      	adds	r2, r3, #1
 800ca88:	607a      	str	r2, [r7, #4]
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	b2d2      	uxtb	r2, r2
 800ca8e:	701a      	strb	r2, [r3, #0]
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	0a1b      	lsrs	r3, r3, #8
 800ca94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	1c5a      	adds	r2, r3, #1
 800ca9a:	607a      	str	r2, [r7, #4]
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	b2d2      	uxtb	r2, r2
 800caa0:	701a      	strb	r2, [r3, #0]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	0a1b      	lsrs	r3, r3, #8
 800caa6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	607a      	str	r2, [r7, #4]
 800caae:	683a      	ldr	r2, [r7, #0]
 800cab0:	b2d2      	uxtb	r2, r2
 800cab2:	701a      	strb	r2, [r3, #0]
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cac0:	b480      	push	{r7}
 800cac2:	b087      	sub	sp, #28
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00d      	beq.n	800caf6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	1c53      	adds	r3, r2, #1
 800cade:	613b      	str	r3, [r7, #16]
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	1c59      	adds	r1, r3, #1
 800cae4:	6179      	str	r1, [r7, #20]
 800cae6:	7812      	ldrb	r2, [r2, #0]
 800cae8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	3b01      	subs	r3, #1
 800caee:	607b      	str	r3, [r7, #4]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1f1      	bne.n	800cada <mem_cpy+0x1a>
	}
}
 800caf6:	bf00      	nop
 800caf8:	371c      	adds	r7, #28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cb02:	b480      	push	{r7}
 800cb04:	b087      	sub	sp, #28
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	60f8      	str	r0, [r7, #12]
 800cb0a:	60b9      	str	r1, [r7, #8]
 800cb0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	617a      	str	r2, [r7, #20]
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	b2d2      	uxtb	r2, r2
 800cb1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	3b01      	subs	r3, #1
 800cb22:	607b      	str	r3, [r7, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1f3      	bne.n	800cb12 <mem_set+0x10>
}
 800cb2a:	bf00      	nop
 800cb2c:	bf00      	nop
 800cb2e:	371c      	adds	r7, #28
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cb38:	b480      	push	{r7}
 800cb3a:	b089      	sub	sp, #36	; 0x24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	61fb      	str	r3, [r7, #28]
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	1c5a      	adds	r2, r3, #1
 800cb54:	61fa      	str	r2, [r7, #28]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	1c5a      	adds	r2, r3, #1
 800cb5e:	61ba      	str	r2, [r7, #24]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	1acb      	subs	r3, r1, r3
 800cb64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	607b      	str	r3, [r7, #4]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d002      	beq.n	800cb78 <mem_cmp+0x40>
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d0eb      	beq.n	800cb50 <mem_cmp+0x18>

	return r;
 800cb78:	697b      	ldr	r3, [r7, #20]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3724      	adds	r7, #36	; 0x24
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr

0800cb86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cb86:	b480      	push	{r7}
 800cb88:	b083      	sub	sp, #12
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
 800cb8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cb90:	e002      	b.n	800cb98 <chk_chr+0x12>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	3301      	adds	r3, #1
 800cb96:	607b      	str	r3, [r7, #4]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d005      	beq.n	800cbac <chk_chr+0x26>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	461a      	mov	r2, r3
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d1f2      	bne.n	800cb92 <chk_chr+0xc>
	return *str;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	781b      	ldrb	r3, [r3, #0]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	60bb      	str	r3, [r7, #8]
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	60fb      	str	r3, [r7, #12]
 800cbce:	e029      	b.n	800cc24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cbd0:	4a27      	ldr	r2, [pc, #156]	; (800cc70 <chk_lock+0xb4>)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	011b      	lsls	r3, r3, #4
 800cbd6:	4413      	add	r3, r2
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d01d      	beq.n	800cc1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cbde:	4a24      	ldr	r2, [pc, #144]	; (800cc70 <chk_lock+0xb4>)
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	011b      	lsls	r3, r3, #4
 800cbe4:	4413      	add	r3, r2
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d116      	bne.n	800cc1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cbf0:	4a1f      	ldr	r2, [pc, #124]	; (800cc70 <chk_lock+0xb4>)
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	011b      	lsls	r3, r3, #4
 800cbf6:	4413      	add	r3, r2
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d10c      	bne.n	800cc1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cc04:	4a1a      	ldr	r2, [pc, #104]	; (800cc70 <chk_lock+0xb4>)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	011b      	lsls	r3, r3, #4
 800cc0a:	4413      	add	r3, r2
 800cc0c:	3308      	adds	r3, #8
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d102      	bne.n	800cc1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cc18:	e007      	b.n	800cc2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	3301      	adds	r3, #1
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d9d2      	bls.n	800cbd0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	d109      	bne.n	800cc44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d102      	bne.n	800cc3c <chk_lock+0x80>
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	2b02      	cmp	r3, #2
 800cc3a:	d101      	bne.n	800cc40 <chk_lock+0x84>
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	e010      	b.n	800cc62 <chk_lock+0xa6>
 800cc40:	2312      	movs	r3, #18
 800cc42:	e00e      	b.n	800cc62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d108      	bne.n	800cc5c <chk_lock+0xa0>
 800cc4a:	4a09      	ldr	r2, [pc, #36]	; (800cc70 <chk_lock+0xb4>)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	011b      	lsls	r3, r3, #4
 800cc50:	4413      	add	r3, r2
 800cc52:	330c      	adds	r3, #12
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc5a:	d101      	bne.n	800cc60 <chk_lock+0xa4>
 800cc5c:	2310      	movs	r3, #16
 800cc5e:	e000      	b.n	800cc62 <chk_lock+0xa6>
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3714      	adds	r7, #20
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	20005b64 	.word	0x20005b64

0800cc74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	607b      	str	r3, [r7, #4]
 800cc7e:	e002      	b.n	800cc86 <enq_lock+0x12>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	3301      	adds	r3, #1
 800cc84:	607b      	str	r3, [r7, #4]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d806      	bhi.n	800cc9a <enq_lock+0x26>
 800cc8c:	4a09      	ldr	r2, [pc, #36]	; (800ccb4 <enq_lock+0x40>)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	011b      	lsls	r3, r3, #4
 800cc92:	4413      	add	r3, r2
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1f2      	bne.n	800cc80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	bf14      	ite	ne
 800cca0:	2301      	movne	r3, #1
 800cca2:	2300      	moveq	r3, #0
 800cca4:	b2db      	uxtb	r3, r3
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	370c      	adds	r7, #12
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop
 800ccb4:	20005b64 	.word	0x20005b64

0800ccb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60fb      	str	r3, [r7, #12]
 800ccc6:	e01f      	b.n	800cd08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ccc8:	4a41      	ldr	r2, [pc, #260]	; (800cdd0 <inc_lock+0x118>)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	011b      	lsls	r3, r3, #4
 800ccce:	4413      	add	r3, r2
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d113      	bne.n	800cd02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ccda:	4a3d      	ldr	r2, [pc, #244]	; (800cdd0 <inc_lock+0x118>)
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	011b      	lsls	r3, r3, #4
 800cce0:	4413      	add	r3, r2
 800cce2:	3304      	adds	r3, #4
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d109      	bne.n	800cd02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ccee:	4a38      	ldr	r2, [pc, #224]	; (800cdd0 <inc_lock+0x118>)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	011b      	lsls	r3, r3, #4
 800ccf4:	4413      	add	r3, r2
 800ccf6:	3308      	adds	r3, #8
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d006      	beq.n	800cd10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	3301      	adds	r3, #1
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d9dc      	bls.n	800ccc8 <inc_lock+0x10>
 800cd0e:	e000      	b.n	800cd12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cd10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d132      	bne.n	800cd7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	60fb      	str	r3, [r7, #12]
 800cd1c:	e002      	b.n	800cd24 <inc_lock+0x6c>
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	3301      	adds	r3, #1
 800cd22:	60fb      	str	r3, [r7, #12]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d806      	bhi.n	800cd38 <inc_lock+0x80>
 800cd2a:	4a29      	ldr	r2, [pc, #164]	; (800cdd0 <inc_lock+0x118>)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	011b      	lsls	r3, r3, #4
 800cd30:	4413      	add	r3, r2
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1f2      	bne.n	800cd1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d101      	bne.n	800cd42 <inc_lock+0x8a>
 800cd3e:	2300      	movs	r3, #0
 800cd40:	e040      	b.n	800cdc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	4922      	ldr	r1, [pc, #136]	; (800cdd0 <inc_lock+0x118>)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	011b      	lsls	r3, r3, #4
 800cd4c:	440b      	add	r3, r1
 800cd4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	689a      	ldr	r2, [r3, #8]
 800cd54:	491e      	ldr	r1, [pc, #120]	; (800cdd0 <inc_lock+0x118>)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	011b      	lsls	r3, r3, #4
 800cd5a:	440b      	add	r3, r1
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	695a      	ldr	r2, [r3, #20]
 800cd64:	491a      	ldr	r1, [pc, #104]	; (800cdd0 <inc_lock+0x118>)
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	011b      	lsls	r3, r3, #4
 800cd6a:	440b      	add	r3, r1
 800cd6c:	3308      	adds	r3, #8
 800cd6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cd70:	4a17      	ldr	r2, [pc, #92]	; (800cdd0 <inc_lock+0x118>)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	011b      	lsls	r3, r3, #4
 800cd76:	4413      	add	r3, r2
 800cd78:	330c      	adds	r3, #12
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d009      	beq.n	800cd98 <inc_lock+0xe0>
 800cd84:	4a12      	ldr	r2, [pc, #72]	; (800cdd0 <inc_lock+0x118>)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	011b      	lsls	r3, r3, #4
 800cd8a:	4413      	add	r3, r2
 800cd8c:	330c      	adds	r3, #12
 800cd8e:	881b      	ldrh	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d001      	beq.n	800cd98 <inc_lock+0xe0>
 800cd94:	2300      	movs	r3, #0
 800cd96:	e015      	b.n	800cdc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d108      	bne.n	800cdb0 <inc_lock+0xf8>
 800cd9e:	4a0c      	ldr	r2, [pc, #48]	; (800cdd0 <inc_lock+0x118>)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	011b      	lsls	r3, r3, #4
 800cda4:	4413      	add	r3, r2
 800cda6:	330c      	adds	r3, #12
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	e001      	b.n	800cdb4 <inc_lock+0xfc>
 800cdb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdb4:	4906      	ldr	r1, [pc, #24]	; (800cdd0 <inc_lock+0x118>)
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	011b      	lsls	r3, r3, #4
 800cdba:	440b      	add	r3, r1
 800cdbc:	330c      	adds	r3, #12
 800cdbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	3301      	adds	r3, #1
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr
 800cdd0:	20005b64 	.word	0x20005b64

0800cdd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	607b      	str	r3, [r7, #4]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d825      	bhi.n	800ce34 <dec_lock+0x60>
		n = Files[i].ctr;
 800cde8:	4a17      	ldr	r2, [pc, #92]	; (800ce48 <dec_lock+0x74>)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	011b      	lsls	r3, r3, #4
 800cdee:	4413      	add	r3, r2
 800cdf0:	330c      	adds	r3, #12
 800cdf2:	881b      	ldrh	r3, [r3, #0]
 800cdf4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cdf6:	89fb      	ldrh	r3, [r7, #14]
 800cdf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdfc:	d101      	bne.n	800ce02 <dec_lock+0x2e>
 800cdfe:	2300      	movs	r3, #0
 800ce00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ce02:	89fb      	ldrh	r3, [r7, #14]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <dec_lock+0x3a>
 800ce08:	89fb      	ldrh	r3, [r7, #14]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ce0e:	4a0e      	ldr	r2, [pc, #56]	; (800ce48 <dec_lock+0x74>)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	011b      	lsls	r3, r3, #4
 800ce14:	4413      	add	r3, r2
 800ce16:	330c      	adds	r3, #12
 800ce18:	89fa      	ldrh	r2, [r7, #14]
 800ce1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ce1c:	89fb      	ldrh	r3, [r7, #14]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d105      	bne.n	800ce2e <dec_lock+0x5a>
 800ce22:	4a09      	ldr	r2, [pc, #36]	; (800ce48 <dec_lock+0x74>)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	011b      	lsls	r3, r3, #4
 800ce28:	4413      	add	r3, r2
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	737b      	strb	r3, [r7, #13]
 800ce32:	e001      	b.n	800ce38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ce34:	2302      	movs	r3, #2
 800ce36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ce38:	7b7b      	ldrb	r3, [r7, #13]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3714      	adds	r7, #20
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	20005b64 	.word	0x20005b64

0800ce4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ce54:	2300      	movs	r3, #0
 800ce56:	60fb      	str	r3, [r7, #12]
 800ce58:	e010      	b.n	800ce7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce5a:	4a0d      	ldr	r2, [pc, #52]	; (800ce90 <clear_lock+0x44>)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	011b      	lsls	r3, r3, #4
 800ce60:	4413      	add	r3, r2
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d105      	bne.n	800ce76 <clear_lock+0x2a>
 800ce6a:	4a09      	ldr	r2, [pc, #36]	; (800ce90 <clear_lock+0x44>)
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	011b      	lsls	r3, r3, #4
 800ce70:	4413      	add	r3, r2
 800ce72:	2200      	movs	r2, #0
 800ce74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	60fb      	str	r3, [r7, #12]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d9eb      	bls.n	800ce5a <clear_lock+0xe>
	}
}
 800ce82:	bf00      	nop
 800ce84:	bf00      	nop
 800ce86:	3714      	adds	r7, #20
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr
 800ce90:	20005b64 	.word	0x20005b64

0800ce94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	78db      	ldrb	r3, [r3, #3]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d034      	beq.n	800cf12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	7858      	ldrb	r0, [r3, #1]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ceb8:	2301      	movs	r3, #1
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	f7ff fd40 	bl	800c940 <disk_write>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <sync_window+0x38>
			res = FR_DISK_ERR;
 800cec6:	2301      	movs	r3, #1
 800cec8:	73fb      	strb	r3, [r7, #15]
 800ceca:	e022      	b.n	800cf12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	1ad2      	subs	r2, r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	69db      	ldr	r3, [r3, #28]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d217      	bcs.n	800cf12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	789b      	ldrb	r3, [r3, #2]
 800cee6:	613b      	str	r3, [r7, #16]
 800cee8:	e010      	b.n	800cf0c <sync_window+0x78>
					wsect += fs->fsize;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	69db      	ldr	r3, [r3, #28]
 800ceee:	697a      	ldr	r2, [r7, #20]
 800cef0:	4413      	add	r3, r2
 800cef2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	7858      	ldrb	r0, [r3, #1]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cefe:	2301      	movs	r3, #1
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	f7ff fd1d 	bl	800c940 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	613b      	str	r3, [r7, #16]
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d8eb      	bhi.n	800ceea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3718      	adds	r7, #24
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf2e:	683a      	ldr	r2, [r7, #0]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d01b      	beq.n	800cf6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7ff ffad 	bl	800ce94 <sync_window>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cf3e:	7bfb      	ldrb	r3, [r7, #15]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d113      	bne.n	800cf6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	7858      	ldrb	r0, [r3, #1]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cf4e:	2301      	movs	r3, #1
 800cf50:	683a      	ldr	r2, [r7, #0]
 800cf52:	f7ff fcd5 	bl	800c900 <disk_read>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d004      	beq.n	800cf66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cf5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
	...

0800cf78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7ff ff87 	bl	800ce94 <sync_window>
 800cf86:	4603      	mov	r3, r0
 800cf88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cf8a:	7bfb      	ldrb	r3, [r7, #15]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d159      	bne.n	800d044 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	2b03      	cmp	r3, #3
 800cf96:	d149      	bne.n	800d02c <sync_fs+0xb4>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	791b      	ldrb	r3, [r3, #4]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d145      	bne.n	800d02c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	899b      	ldrh	r3, [r3, #12]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	2100      	movs	r1, #0
 800cfae:	f7ff fda8 	bl	800cb02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	3334      	adds	r3, #52	; 0x34
 800cfb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cfba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7ff fd37 	bl	800ca32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	3334      	adds	r3, #52	; 0x34
 800cfc8:	4921      	ldr	r1, [pc, #132]	; (800d050 <sync_fs+0xd8>)
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7ff fd4c 	bl	800ca68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	3334      	adds	r3, #52	; 0x34
 800cfd4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cfd8:	491e      	ldr	r1, [pc, #120]	; (800d054 <sync_fs+0xdc>)
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7ff fd44 	bl	800ca68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	3334      	adds	r3, #52	; 0x34
 800cfe4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	695b      	ldr	r3, [r3, #20]
 800cfec:	4619      	mov	r1, r3
 800cfee:	4610      	mov	r0, r2
 800cff0:	f7ff fd3a 	bl	800ca68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	3334      	adds	r3, #52	; 0x34
 800cff8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	4619      	mov	r1, r3
 800d002:	4610      	mov	r0, r2
 800d004:	f7ff fd30 	bl	800ca68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6a1b      	ldr	r3, [r3, #32]
 800d00c:	1c5a      	adds	r2, r3, #1
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	7858      	ldrb	r0, [r3, #1]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d020:	2301      	movs	r3, #1
 800d022:	f7ff fc8d 	bl	800c940 <disk_write>
			fs->fsi_flag = 0;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	785b      	ldrb	r3, [r3, #1]
 800d030:	2200      	movs	r2, #0
 800d032:	2100      	movs	r1, #0
 800d034:	4618      	mov	r0, r3
 800d036:	f7ff fca3 	bl	800c980 <disk_ioctl>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <sync_fs+0xcc>
 800d040:	2301      	movs	r3, #1
 800d042:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d044:	7bfb      	ldrb	r3, [r7, #15]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3710      	adds	r7, #16
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	41615252 	.word	0x41615252
 800d054:	61417272 	.word	0x61417272

0800d058 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	3b02      	subs	r3, #2
 800d066:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	3b02      	subs	r3, #2
 800d06e:	683a      	ldr	r2, [r7, #0]
 800d070:	429a      	cmp	r2, r3
 800d072:	d301      	bcc.n	800d078 <clust2sect+0x20>
 800d074:	2300      	movs	r3, #0
 800d076:	e008      	b.n	800d08a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	895b      	ldrh	r3, [r3, #10]
 800d07c:	461a      	mov	r2, r3
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	fb03 f202 	mul.w	r2, r3, r2
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d088:	4413      	add	r3, r2
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	370c      	adds	r7, #12
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b086      	sub	sp, #24
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
 800d09e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d904      	bls.n	800d0b6 <get_fat+0x20>
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	699b      	ldr	r3, [r3, #24]
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d302      	bcc.n	800d0bc <get_fat+0x26>
		val = 1;	/* Internal error */
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	617b      	str	r3, [r7, #20]
 800d0ba:	e0bb      	b.n	800d234 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	f000 8083 	beq.w	800d1d2 <get_fat+0x13c>
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	f300 80a7 	bgt.w	800d220 <get_fat+0x18a>
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d002      	beq.n	800d0dc <get_fat+0x46>
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	d056      	beq.n	800d188 <get_fat+0xf2>
 800d0da:	e0a1      	b.n	800d220 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	60fb      	str	r3, [r7, #12]
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	085b      	lsrs	r3, r3, #1
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	899b      	ldrh	r3, [r3, #12]
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d0fa:	4413      	add	r3, r2
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6938      	ldr	r0, [r7, #16]
 800d100:	f7ff ff0c 	bl	800cf1c <move_window>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	f040 808d 	bne.w	800d226 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	1c5a      	adds	r2, r3, #1
 800d110:	60fa      	str	r2, [r7, #12]
 800d112:	693a      	ldr	r2, [r7, #16]
 800d114:	8992      	ldrh	r2, [r2, #12]
 800d116:	fbb3 f1f2 	udiv	r1, r3, r2
 800d11a:	fb01 f202 	mul.w	r2, r1, r2
 800d11e:	1a9b      	subs	r3, r3, r2
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	4413      	add	r3, r2
 800d124:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d128:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	899b      	ldrh	r3, [r3, #12]
 800d132:	4619      	mov	r1, r3
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	fbb3 f3f1 	udiv	r3, r3, r1
 800d13a:	4413      	add	r3, r2
 800d13c:	4619      	mov	r1, r3
 800d13e:	6938      	ldr	r0, [r7, #16]
 800d140:	f7ff feec 	bl	800cf1c <move_window>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	d16f      	bne.n	800d22a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	899b      	ldrh	r3, [r3, #12]
 800d14e:	461a      	mov	r2, r3
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	fbb3 f1f2 	udiv	r1, r3, r2
 800d156:	fb01 f202 	mul.w	r2, r1, r2
 800d15a:	1a9b      	subs	r3, r3, r2
 800d15c:	693a      	ldr	r2, [r7, #16]
 800d15e:	4413      	add	r3, r2
 800d160:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d164:	021b      	lsls	r3, r3, #8
 800d166:	461a      	mov	r2, r3
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	f003 0301 	and.w	r3, r3, #1
 800d174:	2b00      	cmp	r3, #0
 800d176:	d002      	beq.n	800d17e <get_fat+0xe8>
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	091b      	lsrs	r3, r3, #4
 800d17c:	e002      	b.n	800d184 <get_fat+0xee>
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d184:	617b      	str	r3, [r7, #20]
			break;
 800d186:	e055      	b.n	800d234 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	899b      	ldrh	r3, [r3, #12]
 800d190:	085b      	lsrs	r3, r3, #1
 800d192:	b29b      	uxth	r3, r3
 800d194:	4619      	mov	r1, r3
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	fbb3 f3f1 	udiv	r3, r3, r1
 800d19c:	4413      	add	r3, r2
 800d19e:	4619      	mov	r1, r3
 800d1a0:	6938      	ldr	r0, [r7, #16]
 800d1a2:	f7ff febb 	bl	800cf1c <move_window>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d140      	bne.n	800d22e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	005b      	lsls	r3, r3, #1
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	8992      	ldrh	r2, [r2, #12]
 800d1ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1be:	fb00 f202 	mul.w	r2, r0, r2
 800d1c2:	1a9b      	subs	r3, r3, r2
 800d1c4:	440b      	add	r3, r1
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff fbf8 	bl	800c9bc <ld_word>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	617b      	str	r3, [r7, #20]
			break;
 800d1d0:	e030      	b.n	800d234 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	899b      	ldrh	r3, [r3, #12]
 800d1da:	089b      	lsrs	r3, r3, #2
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	4619      	mov	r1, r3
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1e6:	4413      	add	r3, r2
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6938      	ldr	r0, [r7, #16]
 800d1ec:	f7ff fe96 	bl	800cf1c <move_window>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d11d      	bne.n	800d232 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	693a      	ldr	r2, [r7, #16]
 800d202:	8992      	ldrh	r2, [r2, #12]
 800d204:	fbb3 f0f2 	udiv	r0, r3, r2
 800d208:	fb00 f202 	mul.w	r2, r0, r2
 800d20c:	1a9b      	subs	r3, r3, r2
 800d20e:	440b      	add	r3, r1
 800d210:	4618      	mov	r0, r3
 800d212:	f7ff fbeb 	bl	800c9ec <ld_dword>
 800d216:	4603      	mov	r3, r0
 800d218:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d21c:	617b      	str	r3, [r7, #20]
			break;
 800d21e:	e009      	b.n	800d234 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d220:	2301      	movs	r3, #1
 800d222:	617b      	str	r3, [r7, #20]
 800d224:	e006      	b.n	800d234 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d226:	bf00      	nop
 800d228:	e004      	b.n	800d234 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d22a:	bf00      	nop
 800d22c:	e002      	b.n	800d234 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d22e:	bf00      	nop
 800d230:	e000      	b.n	800d234 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d232:	bf00      	nop
		}
	}

	return val;
 800d234:	697b      	ldr	r3, [r7, #20]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3718      	adds	r7, #24
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d23e:	b590      	push	{r4, r7, lr}
 800d240:	b089      	sub	sp, #36	; 0x24
 800d242:	af00      	add	r7, sp, #0
 800d244:	60f8      	str	r0, [r7, #12]
 800d246:	60b9      	str	r1, [r7, #8]
 800d248:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d24a:	2302      	movs	r3, #2
 800d24c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	2b01      	cmp	r3, #1
 800d252:	f240 8102 	bls.w	800d45a <put_fat+0x21c>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	699b      	ldr	r3, [r3, #24]
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	f080 80fc 	bcs.w	800d45a <put_fat+0x21c>
		switch (fs->fs_type) {
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	2b03      	cmp	r3, #3
 800d268:	f000 80b6 	beq.w	800d3d8 <put_fat+0x19a>
 800d26c:	2b03      	cmp	r3, #3
 800d26e:	f300 80fd 	bgt.w	800d46c <put_fat+0x22e>
 800d272:	2b01      	cmp	r3, #1
 800d274:	d003      	beq.n	800d27e <put_fat+0x40>
 800d276:	2b02      	cmp	r3, #2
 800d278:	f000 8083 	beq.w	800d382 <put_fat+0x144>
 800d27c:	e0f6      	b.n	800d46c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	61bb      	str	r3, [r7, #24]
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	085b      	lsrs	r3, r3, #1
 800d286:	69ba      	ldr	r2, [r7, #24]
 800d288:	4413      	add	r3, r2
 800d28a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	899b      	ldrh	r3, [r3, #12]
 800d294:	4619      	mov	r1, r3
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	fbb3 f3f1 	udiv	r3, r3, r1
 800d29c:	4413      	add	r3, r2
 800d29e:	4619      	mov	r1, r3
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	f7ff fe3b 	bl	800cf1c <move_window>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d2aa:	7ffb      	ldrb	r3, [r7, #31]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f040 80d6 	bne.w	800d45e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	61ba      	str	r2, [r7, #24]
 800d2be:	68fa      	ldr	r2, [r7, #12]
 800d2c0:	8992      	ldrh	r2, [r2, #12]
 800d2c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800d2c6:	fb00 f202 	mul.w	r2, r0, r2
 800d2ca:	1a9b      	subs	r3, r3, r2
 800d2cc:	440b      	add	r3, r1
 800d2ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	f003 0301 	and.w	r3, r3, #1
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00d      	beq.n	800d2f6 <put_fat+0xb8>
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	b25b      	sxtb	r3, r3
 800d2e0:	f003 030f 	and.w	r3, r3, #15
 800d2e4:	b25a      	sxtb	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	011b      	lsls	r3, r3, #4
 800d2ec:	b25b      	sxtb	r3, r3
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	b25b      	sxtb	r3, r3
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	e001      	b.n	800d2fa <put_fat+0xbc>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	697a      	ldr	r2, [r7, #20]
 800d2fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2201      	movs	r2, #1
 800d302:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	899b      	ldrh	r3, [r3, #12]
 800d30c:	4619      	mov	r1, r3
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	fbb3 f3f1 	udiv	r3, r3, r1
 800d314:	4413      	add	r3, r2
 800d316:	4619      	mov	r1, r3
 800d318:	68f8      	ldr	r0, [r7, #12]
 800d31a:	f7ff fdff 	bl	800cf1c <move_window>
 800d31e:	4603      	mov	r3, r0
 800d320:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d322:	7ffb      	ldrb	r3, [r7, #31]
 800d324:	2b00      	cmp	r3, #0
 800d326:	f040 809c 	bne.w	800d462 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	899b      	ldrh	r3, [r3, #12]
 800d334:	461a      	mov	r2, r3
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	fbb3 f0f2 	udiv	r0, r3, r2
 800d33c:	fb00 f202 	mul.w	r2, r0, r2
 800d340:	1a9b      	subs	r3, r3, r2
 800d342:	440b      	add	r3, r1
 800d344:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	f003 0301 	and.w	r3, r3, #1
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d003      	beq.n	800d358 <put_fat+0x11a>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	091b      	lsrs	r3, r3, #4
 800d354:	b2db      	uxtb	r3, r3
 800d356:	e00e      	b.n	800d376 <put_fat+0x138>
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	b25b      	sxtb	r3, r3
 800d35e:	f023 030f 	bic.w	r3, r3, #15
 800d362:	b25a      	sxtb	r2, r3
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	0a1b      	lsrs	r3, r3, #8
 800d368:	b25b      	sxtb	r3, r3
 800d36a:	f003 030f 	and.w	r3, r3, #15
 800d36e:	b25b      	sxtb	r3, r3
 800d370:	4313      	orrs	r3, r2
 800d372:	b25b      	sxtb	r3, r3
 800d374:	b2db      	uxtb	r3, r3
 800d376:	697a      	ldr	r2, [r7, #20]
 800d378:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2201      	movs	r2, #1
 800d37e:	70da      	strb	r2, [r3, #3]
			break;
 800d380:	e074      	b.n	800d46c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	899b      	ldrh	r3, [r3, #12]
 800d38a:	085b      	lsrs	r3, r3, #1
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	4619      	mov	r1, r3
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	fbb3 f3f1 	udiv	r3, r3, r1
 800d396:	4413      	add	r3, r2
 800d398:	4619      	mov	r1, r3
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	f7ff fdbe 	bl	800cf1c <move_window>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3a4:	7ffb      	ldrb	r3, [r7, #31]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d15d      	bne.n	800d466 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	005b      	lsls	r3, r3, #1
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	8992      	ldrh	r2, [r2, #12]
 800d3b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800d3bc:	fb00 f202 	mul.w	r2, r0, r2
 800d3c0:	1a9b      	subs	r3, r3, r2
 800d3c2:	440b      	add	r3, r1
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	b292      	uxth	r2, r2
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7ff fb31 	bl	800ca32 <st_word>
			fs->wflag = 1;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	70da      	strb	r2, [r3, #3]
			break;
 800d3d6:	e049      	b.n	800d46c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	899b      	ldrh	r3, [r3, #12]
 800d3e0:	089b      	lsrs	r3, r3, #2
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3ec:	4413      	add	r3, r2
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f7ff fd93 	bl	800cf1c <move_window>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3fa:	7ffb      	ldrb	r3, [r7, #31]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d134      	bne.n	800d46a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	8992      	ldrh	r2, [r2, #12]
 800d414:	fbb3 f0f2 	udiv	r0, r3, r2
 800d418:	fb00 f202 	mul.w	r2, r0, r2
 800d41c:	1a9b      	subs	r3, r3, r2
 800d41e:	440b      	add	r3, r1
 800d420:	4618      	mov	r0, r3
 800d422:	f7ff fae3 	bl	800c9ec <ld_dword>
 800d426:	4603      	mov	r3, r0
 800d428:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d42c:	4323      	orrs	r3, r4
 800d42e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	68fa      	ldr	r2, [r7, #12]
 800d43c:	8992      	ldrh	r2, [r2, #12]
 800d43e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d442:	fb00 f202 	mul.w	r2, r0, r2
 800d446:	1a9b      	subs	r3, r3, r2
 800d448:	440b      	add	r3, r1
 800d44a:	6879      	ldr	r1, [r7, #4]
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7ff fb0b 	bl	800ca68 <st_dword>
			fs->wflag = 1;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2201      	movs	r2, #1
 800d456:	70da      	strb	r2, [r3, #3]
			break;
 800d458:	e008      	b.n	800d46c <put_fat+0x22e>
		}
	}
 800d45a:	bf00      	nop
 800d45c:	e006      	b.n	800d46c <put_fat+0x22e>
			if (res != FR_OK) break;
 800d45e:	bf00      	nop
 800d460:	e004      	b.n	800d46c <put_fat+0x22e>
			if (res != FR_OK) break;
 800d462:	bf00      	nop
 800d464:	e002      	b.n	800d46c <put_fat+0x22e>
			if (res != FR_OK) break;
 800d466:	bf00      	nop
 800d468:	e000      	b.n	800d46c <put_fat+0x22e>
			if (res != FR_OK) break;
 800d46a:	bf00      	nop
	return res;
 800d46c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3724      	adds	r7, #36	; 0x24
 800d472:	46bd      	mov	sp, r7
 800d474:	bd90      	pop	{r4, r7, pc}

0800d476 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b088      	sub	sp, #32
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	60f8      	str	r0, [r7, #12]
 800d47e:	60b9      	str	r1, [r7, #8]
 800d480:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d482:	2300      	movs	r3, #0
 800d484:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d904      	bls.n	800d49c <remove_chain+0x26>
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	699b      	ldr	r3, [r3, #24]
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d301      	bcc.n	800d4a0 <remove_chain+0x2a>
 800d49c:	2302      	movs	r3, #2
 800d49e:	e04b      	b.n	800d538 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00c      	beq.n	800d4c0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d4aa:	6879      	ldr	r1, [r7, #4]
 800d4ac:	69b8      	ldr	r0, [r7, #24]
 800d4ae:	f7ff fec6 	bl	800d23e <put_fat>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d4b6:	7ffb      	ldrb	r3, [r7, #31]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d001      	beq.n	800d4c0 <remove_chain+0x4a>
 800d4bc:	7ffb      	ldrb	r3, [r7, #31]
 800d4be:	e03b      	b.n	800d538 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d4c0:	68b9      	ldr	r1, [r7, #8]
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7ff fde7 	bl	800d096 <get_fat>
 800d4c8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d031      	beq.n	800d534 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d101      	bne.n	800d4da <remove_chain+0x64>
 800d4d6:	2302      	movs	r3, #2
 800d4d8:	e02e      	b.n	800d538 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e0:	d101      	bne.n	800d4e6 <remove_chain+0x70>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e028      	b.n	800d538 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	68b9      	ldr	r1, [r7, #8]
 800d4ea:	69b8      	ldr	r0, [r7, #24]
 800d4ec:	f7ff fea7 	bl	800d23e <put_fat>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d4f4:	7ffb      	ldrb	r3, [r7, #31]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d001      	beq.n	800d4fe <remove_chain+0x88>
 800d4fa:	7ffb      	ldrb	r3, [r7, #31]
 800d4fc:	e01c      	b.n	800d538 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	695a      	ldr	r2, [r3, #20]
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	699b      	ldr	r3, [r3, #24]
 800d506:	3b02      	subs	r3, #2
 800d508:	429a      	cmp	r2, r3
 800d50a:	d20b      	bcs.n	800d524 <remove_chain+0xae>
			fs->free_clst++;
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	1c5a      	adds	r2, r3, #1
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	791b      	ldrb	r3, [r3, #4]
 800d51a:	f043 0301 	orr.w	r3, r3, #1
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	699b      	ldr	r3, [r3, #24]
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d3c6      	bcc.n	800d4c0 <remove_chain+0x4a>
 800d532:	e000      	b.n	800d536 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d534:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d536:	2300      	movs	r3, #0
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3720      	adds	r7, #32
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b088      	sub	sp, #32
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d10d      	bne.n	800d572 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	691b      	ldr	r3, [r3, #16]
 800d55a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d004      	beq.n	800d56c <create_chain+0x2c>
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	699b      	ldr	r3, [r3, #24]
 800d566:	69ba      	ldr	r2, [r7, #24]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d31b      	bcc.n	800d5a4 <create_chain+0x64>
 800d56c:	2301      	movs	r3, #1
 800d56e:	61bb      	str	r3, [r7, #24]
 800d570:	e018      	b.n	800d5a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d572:	6839      	ldr	r1, [r7, #0]
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff fd8e 	bl	800d096 <get_fat>
 800d57a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d801      	bhi.n	800d586 <create_chain+0x46>
 800d582:	2301      	movs	r3, #1
 800d584:	e070      	b.n	800d668 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58c:	d101      	bne.n	800d592 <create_chain+0x52>
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	e06a      	b.n	800d668 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	699b      	ldr	r3, [r3, #24]
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d201      	bcs.n	800d5a0 <create_chain+0x60>
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	e063      	b.n	800d668 <create_chain+0x128>
		scl = clst;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	699b      	ldr	r3, [r3, #24]
 800d5b2:	69fa      	ldr	r2, [r7, #28]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d307      	bcc.n	800d5c8 <create_chain+0x88>
				ncl = 2;
 800d5b8:	2302      	movs	r3, #2
 800d5ba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d5bc:	69fa      	ldr	r2, [r7, #28]
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d901      	bls.n	800d5c8 <create_chain+0x88>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	e04f      	b.n	800d668 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d5c8:	69f9      	ldr	r1, [r7, #28]
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f7ff fd63 	bl	800d096 <get_fat>
 800d5d0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00e      	beq.n	800d5f6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d003      	beq.n	800d5e6 <create_chain+0xa6>
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5e4:	d101      	bne.n	800d5ea <create_chain+0xaa>
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	e03e      	b.n	800d668 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d5ea:	69fa      	ldr	r2, [r7, #28]
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d1da      	bne.n	800d5a8 <create_chain+0x68>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	e038      	b.n	800d668 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d5f6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d5f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5fc:	69f9      	ldr	r1, [r7, #28]
 800d5fe:	6938      	ldr	r0, [r7, #16]
 800d600:	f7ff fe1d 	bl	800d23e <put_fat>
 800d604:	4603      	mov	r3, r0
 800d606:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d608:	7dfb      	ldrb	r3, [r7, #23]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d109      	bne.n	800d622 <create_chain+0xe2>
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d006      	beq.n	800d622 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d614:	69fa      	ldr	r2, [r7, #28]
 800d616:	6839      	ldr	r1, [r7, #0]
 800d618:	6938      	ldr	r0, [r7, #16]
 800d61a:	f7ff fe10 	bl	800d23e <put_fat>
 800d61e:	4603      	mov	r3, r0
 800d620:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d622:	7dfb      	ldrb	r3, [r7, #23]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d116      	bne.n	800d656 <create_chain+0x116>
		fs->last_clst = ncl;
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	69fa      	ldr	r2, [r7, #28]
 800d62c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	695a      	ldr	r2, [r3, #20]
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	699b      	ldr	r3, [r3, #24]
 800d636:	3b02      	subs	r3, #2
 800d638:	429a      	cmp	r2, r3
 800d63a:	d804      	bhi.n	800d646 <create_chain+0x106>
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	695b      	ldr	r3, [r3, #20]
 800d640:	1e5a      	subs	r2, r3, #1
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	791b      	ldrb	r3, [r3, #4]
 800d64a:	f043 0301 	orr.w	r3, r3, #1
 800d64e:	b2da      	uxtb	r2, r3
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	711a      	strb	r2, [r3, #4]
 800d654:	e007      	b.n	800d666 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d656:	7dfb      	ldrb	r3, [r7, #23]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d102      	bne.n	800d662 <create_chain+0x122>
 800d65c:	f04f 33ff 	mov.w	r3, #4294967295
 800d660:	e000      	b.n	800d664 <create_chain+0x124>
 800d662:	2301      	movs	r3, #1
 800d664:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d666:	69fb      	ldr	r3, [r7, #28]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3720      	adds	r7, #32
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d670:	b480      	push	{r7}
 800d672:	b087      	sub	sp, #28
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d684:	3304      	adds	r3, #4
 800d686:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	899b      	ldrh	r3, [r3, #12]
 800d68c:	461a      	mov	r2, r3
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	fbb3 f3f2 	udiv	r3, r3, r2
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	8952      	ldrh	r2, [r2, #10]
 800d698:	fbb3 f3f2 	udiv	r3, r3, r2
 800d69c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	1d1a      	adds	r2, r3, #4
 800d6a2:	613a      	str	r2, [r7, #16]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d101      	bne.n	800d6b2 <clmt_clust+0x42>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	e010      	b.n	800d6d4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800d6b2:	697a      	ldr	r2, [r7, #20]
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d307      	bcc.n	800d6ca <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800d6ba:	697a      	ldr	r2, [r7, #20]
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	1ad3      	subs	r3, r2, r3
 800d6c0:	617b      	str	r3, [r7, #20]
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d6c8:	e7e9      	b.n	800d69e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800d6ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	4413      	add	r3, r2
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	371c      	adds	r7, #28
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d6f6:	d204      	bcs.n	800d702 <dir_sdi+0x22>
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	f003 031f 	and.w	r3, r3, #31
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d001      	beq.n	800d706 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d702:	2302      	movs	r3, #2
 800d704:	e071      	b.n	800d7ea <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	683a      	ldr	r2, [r7, #0]
 800d70a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d106      	bne.n	800d726 <dir_sdi+0x46>
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d902      	bls.n	800d726 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d724:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d10c      	bne.n	800d746 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	095b      	lsrs	r3, r3, #5
 800d730:	693a      	ldr	r2, [r7, #16]
 800d732:	8912      	ldrh	r2, [r2, #8]
 800d734:	4293      	cmp	r3, r2
 800d736:	d301      	bcc.n	800d73c <dir_sdi+0x5c>
 800d738:	2302      	movs	r3, #2
 800d73a:	e056      	b.n	800d7ea <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	61da      	str	r2, [r3, #28]
 800d744:	e02d      	b.n	800d7a2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	895b      	ldrh	r3, [r3, #10]
 800d74a:	461a      	mov	r2, r3
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	899b      	ldrh	r3, [r3, #12]
 800d750:	fb02 f303 	mul.w	r3, r2, r3
 800d754:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d756:	e019      	b.n	800d78c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6979      	ldr	r1, [r7, #20]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff fc9a 	bl	800d096 <get_fat>
 800d762:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76a:	d101      	bne.n	800d770 <dir_sdi+0x90>
 800d76c:	2301      	movs	r3, #1
 800d76e:	e03c      	b.n	800d7ea <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	2b01      	cmp	r3, #1
 800d774:	d904      	bls.n	800d780 <dir_sdi+0xa0>
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	697a      	ldr	r2, [r7, #20]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d301      	bcc.n	800d784 <dir_sdi+0xa4>
 800d780:	2302      	movs	r3, #2
 800d782:	e032      	b.n	800d7ea <dir_sdi+0x10a>
			ofs -= csz;
 800d784:	683a      	ldr	r2, [r7, #0]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d78c:	683a      	ldr	r2, [r7, #0]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	429a      	cmp	r2, r3
 800d792:	d2e1      	bcs.n	800d758 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800d794:	6979      	ldr	r1, [r7, #20]
 800d796:	6938      	ldr	r0, [r7, #16]
 800d798:	f7ff fc5e 	bl	800d058 <clust2sect>
 800d79c:	4602      	mov	r2, r0
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	697a      	ldr	r2, [r7, #20]
 800d7a6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	69db      	ldr	r3, [r3, #28]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d101      	bne.n	800d7b4 <dir_sdi+0xd4>
 800d7b0:	2302      	movs	r3, #2
 800d7b2:	e01a      	b.n	800d7ea <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	69da      	ldr	r2, [r3, #28]
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	899b      	ldrh	r3, [r3, #12]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7c4:	441a      	add	r2, r3
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	899b      	ldrh	r3, [r3, #12]
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800d7dc:	fb00 f202 	mul.w	r2, r0, r2
 800d7e0:	1a9b      	subs	r3, r3, r2
 800d7e2:	18ca      	adds	r2, r1, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3718      	adds	r7, #24
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b086      	sub	sp, #24
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	695b      	ldr	r3, [r3, #20]
 800d806:	3320      	adds	r3, #32
 800d808:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	69db      	ldr	r3, [r3, #28]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d003      	beq.n	800d81a <dir_next+0x28>
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d818:	d301      	bcc.n	800d81e <dir_next+0x2c>
 800d81a:	2304      	movs	r3, #4
 800d81c:	e0bb      	b.n	800d996 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	899b      	ldrh	r3, [r3, #12]
 800d822:	461a      	mov	r2, r3
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	fbb3 f1f2 	udiv	r1, r3, r2
 800d82a:	fb01 f202 	mul.w	r2, r1, r2
 800d82e:	1a9b      	subs	r3, r3, r2
 800d830:	2b00      	cmp	r3, #0
 800d832:	f040 809d 	bne.w	800d970 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	69db      	ldr	r3, [r3, #28]
 800d83a:	1c5a      	adds	r2, r3, #1
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	699b      	ldr	r3, [r3, #24]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d10b      	bne.n	800d860 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	095b      	lsrs	r3, r3, #5
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	8912      	ldrh	r2, [r2, #8]
 800d850:	4293      	cmp	r3, r2
 800d852:	f0c0 808d 	bcc.w	800d970 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	61da      	str	r2, [r3, #28]
 800d85c:	2304      	movs	r3, #4
 800d85e:	e09a      	b.n	800d996 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	899b      	ldrh	r3, [r3, #12]
 800d864:	461a      	mov	r2, r3
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	fbb3 f3f2 	udiv	r3, r3, r2
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	8952      	ldrh	r2, [r2, #10]
 800d870:	3a01      	subs	r2, #1
 800d872:	4013      	ands	r3, r2
 800d874:	2b00      	cmp	r3, #0
 800d876:	d17b      	bne.n	800d970 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	699b      	ldr	r3, [r3, #24]
 800d87e:	4619      	mov	r1, r3
 800d880:	4610      	mov	r0, r2
 800d882:	f7ff fc08 	bl	800d096 <get_fat>
 800d886:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d801      	bhi.n	800d892 <dir_next+0xa0>
 800d88e:	2302      	movs	r3, #2
 800d890:	e081      	b.n	800d996 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d898:	d101      	bne.n	800d89e <dir_next+0xac>
 800d89a:	2301      	movs	r3, #1
 800d89c:	e07b      	b.n	800d996 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d359      	bcc.n	800d95c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d104      	bne.n	800d8b8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	61da      	str	r2, [r3, #28]
 800d8b4:	2304      	movs	r3, #4
 800d8b6:	e06e      	b.n	800d996 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	699b      	ldr	r3, [r3, #24]
 800d8be:	4619      	mov	r1, r3
 800d8c0:	4610      	mov	r0, r2
 800d8c2:	f7ff fe3d 	bl	800d540 <create_chain>
 800d8c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d101      	bne.n	800d8d2 <dir_next+0xe0>
 800d8ce:	2307      	movs	r3, #7
 800d8d0:	e061      	b.n	800d996 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d101      	bne.n	800d8dc <dir_next+0xea>
 800d8d8:	2302      	movs	r3, #2
 800d8da:	e05c      	b.n	800d996 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e2:	d101      	bne.n	800d8e8 <dir_next+0xf6>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	e056      	b.n	800d996 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d8e8:	68f8      	ldr	r0, [r7, #12]
 800d8ea:	f7ff fad3 	bl	800ce94 <sync_window>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <dir_next+0x106>
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e04e      	b.n	800d996 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	899b      	ldrh	r3, [r3, #12]
 800d902:	461a      	mov	r2, r3
 800d904:	2100      	movs	r1, #0
 800d906:	f7ff f8fc 	bl	800cb02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d90a:	2300      	movs	r3, #0
 800d90c:	613b      	str	r3, [r7, #16]
 800d90e:	6979      	ldr	r1, [r7, #20]
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f7ff fba1 	bl	800d058 <clust2sect>
 800d916:	4602      	mov	r2, r0
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	631a      	str	r2, [r3, #48]	; 0x30
 800d91c:	e012      	b.n	800d944 <dir_next+0x152>
						fs->wflag = 1;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2201      	movs	r2, #1
 800d922:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f7ff fab5 	bl	800ce94 <sync_window>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d001      	beq.n	800d934 <dir_next+0x142>
 800d930:	2301      	movs	r3, #1
 800d932:	e030      	b.n	800d996 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	3301      	adds	r3, #1
 800d938:	613b      	str	r3, [r7, #16]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d93e:	1c5a      	adds	r2, r3, #1
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	631a      	str	r2, [r3, #48]	; 0x30
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	895b      	ldrh	r3, [r3, #10]
 800d948:	461a      	mov	r2, r3
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d3e6      	bcc.n	800d91e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	1ad2      	subs	r2, r2, r3
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	697a      	ldr	r2, [r7, #20]
 800d960:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d962:	6979      	ldr	r1, [r7, #20]
 800d964:	68f8      	ldr	r0, [r7, #12]
 800d966:	f7ff fb77 	bl	800d058 <clust2sect>
 800d96a:	4602      	mov	r2, r0
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	68ba      	ldr	r2, [r7, #8]
 800d974:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	899b      	ldrh	r3, [r3, #12]
 800d980:	461a      	mov	r2, r3
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	fbb3 f0f2 	udiv	r0, r3, r2
 800d988:	fb00 f202 	mul.w	r2, r0, r2
 800d98c:	1a9b      	subs	r3, r3, r2
 800d98e:	18ca      	adds	r2, r1, r3
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d994:	2300      	movs	r3, #0
}
 800d996:	4618      	mov	r0, r3
 800d998:	3718      	adds	r7, #24
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b086      	sub	sp, #24
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f7ff fe95 	bl	800d6e0 <dir_sdi>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d12b      	bne.n	800da18 <dir_alloc+0x7a>
		n = 0;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	69db      	ldr	r3, [r3, #28]
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	68f8      	ldr	r0, [r7, #12]
 800d9cc:	f7ff faa6 	bl	800cf1c <move_window>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d9d4:	7dfb      	ldrb	r3, [r7, #23]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d11d      	bne.n	800da16 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6a1b      	ldr	r3, [r3, #32]
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	2be5      	cmp	r3, #229	; 0xe5
 800d9e2:	d004      	beq.n	800d9ee <dir_alloc+0x50>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6a1b      	ldr	r3, [r3, #32]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d107      	bne.n	800d9fe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	613b      	str	r3, [r7, #16]
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d102      	bne.n	800da02 <dir_alloc+0x64>
 800d9fc:	e00c      	b.n	800da18 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d9fe:	2300      	movs	r3, #0
 800da00:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800da02:	2101      	movs	r1, #1
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7ff fef4 	bl	800d7f2 <dir_next>
 800da0a:	4603      	mov	r3, r0
 800da0c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800da0e:	7dfb      	ldrb	r3, [r7, #23]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d0d7      	beq.n	800d9c4 <dir_alloc+0x26>
 800da14:	e000      	b.n	800da18 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800da16:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800da18:	7dfb      	ldrb	r3, [r7, #23]
 800da1a:	2b04      	cmp	r3, #4
 800da1c:	d101      	bne.n	800da22 <dir_alloc+0x84>
 800da1e:	2307      	movs	r3, #7
 800da20:	75fb      	strb	r3, [r7, #23]
	return res;
 800da22:	7dfb      	ldrb	r3, [r7, #23]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3718      	adds	r7, #24
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	331a      	adds	r3, #26
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fe ffbe 	bl	800c9bc <ld_word>
 800da40:	4603      	mov	r3, r0
 800da42:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	2b03      	cmp	r3, #3
 800da4a:	d109      	bne.n	800da60 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	3314      	adds	r3, #20
 800da50:	4618      	mov	r0, r3
 800da52:	f7fe ffb3 	bl	800c9bc <ld_word>
 800da56:	4603      	mov	r3, r0
 800da58:	041b      	lsls	r3, r3, #16
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800da60:	68fb      	ldr	r3, [r7, #12]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b084      	sub	sp, #16
 800da6e:	af00      	add	r7, sp, #0
 800da70:	60f8      	str	r0, [r7, #12]
 800da72:	60b9      	str	r1, [r7, #8]
 800da74:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	331a      	adds	r3, #26
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	b292      	uxth	r2, r2
 800da7e:	4611      	mov	r1, r2
 800da80:	4618      	mov	r0, r3
 800da82:	f7fe ffd6 	bl	800ca32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	2b03      	cmp	r3, #3
 800da8c:	d109      	bne.n	800daa2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	f103 0214 	add.w	r2, r3, #20
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	0c1b      	lsrs	r3, r3, #16
 800da98:	b29b      	uxth	r3, r3
 800da9a:	4619      	mov	r1, r3
 800da9c:	4610      	mov	r0, r2
 800da9e:	f7fe ffc8 	bl	800ca32 <st_word>
	}
}
 800daa2:	bf00      	nop
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b086      	sub	sp, #24
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dab8:	2100      	movs	r1, #0
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff fe10 	bl	800d6e0 <dir_sdi>
 800dac0:	4603      	mov	r3, r0
 800dac2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dac4:	7dfb      	ldrb	r3, [r7, #23]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d001      	beq.n	800dace <dir_find+0x24>
 800daca:	7dfb      	ldrb	r3, [r7, #23]
 800dacc:	e03e      	b.n	800db4c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	69db      	ldr	r3, [r3, #28]
 800dad2:	4619      	mov	r1, r3
 800dad4:	6938      	ldr	r0, [r7, #16]
 800dad6:	f7ff fa21 	bl	800cf1c <move_window>
 800dada:	4603      	mov	r3, r0
 800dadc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dade:	7dfb      	ldrb	r3, [r7, #23]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d12f      	bne.n	800db44 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6a1b      	ldr	r3, [r3, #32]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800daec:	7bfb      	ldrb	r3, [r7, #15]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d102      	bne.n	800daf8 <dir_find+0x4e>
 800daf2:	2304      	movs	r3, #4
 800daf4:	75fb      	strb	r3, [r7, #23]
 800daf6:	e028      	b.n	800db4a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6a1b      	ldr	r3, [r3, #32]
 800dafc:	330b      	adds	r3, #11
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db04:	b2da      	uxtb	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a1b      	ldr	r3, [r3, #32]
 800db0e:	330b      	adds	r3, #11
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	f003 0308 	and.w	r3, r3, #8
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10a      	bne.n	800db30 <dir_find+0x86>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a18      	ldr	r0, [r3, #32]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	3324      	adds	r3, #36	; 0x24
 800db22:	220b      	movs	r2, #11
 800db24:	4619      	mov	r1, r3
 800db26:	f7ff f807 	bl	800cb38 <mem_cmp>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00b      	beq.n	800db48 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800db30:	2100      	movs	r1, #0
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7ff fe5d 	bl	800d7f2 <dir_next>
 800db38:	4603      	mov	r3, r0
 800db3a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800db3c:	7dfb      	ldrb	r3, [r7, #23]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d0c5      	beq.n	800dace <dir_find+0x24>
 800db42:	e002      	b.n	800db4a <dir_find+0xa0>
		if (res != FR_OK) break;
 800db44:	bf00      	nop
 800db46:	e000      	b.n	800db4a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800db48:	bf00      	nop

	return res;
 800db4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3718      	adds	r7, #24
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800db62:	2101      	movs	r1, #1
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7ff ff1a 	bl	800d99e <dir_alloc>
 800db6a:	4603      	mov	r3, r0
 800db6c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d11c      	bne.n	800dbae <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	69db      	ldr	r3, [r3, #28]
 800db78:	4619      	mov	r1, r3
 800db7a:	68b8      	ldr	r0, [r7, #8]
 800db7c:	f7ff f9ce 	bl	800cf1c <move_window>
 800db80:	4603      	mov	r3, r0
 800db82:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800db84:	7bfb      	ldrb	r3, [r7, #15]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d111      	bne.n	800dbae <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6a1b      	ldr	r3, [r3, #32]
 800db8e:	2220      	movs	r2, #32
 800db90:	2100      	movs	r1, #0
 800db92:	4618      	mov	r0, r3
 800db94:	f7fe ffb5 	bl	800cb02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a18      	ldr	r0, [r3, #32]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	3324      	adds	r3, #36	; 0x24
 800dba0:	220b      	movs	r2, #11
 800dba2:	4619      	mov	r1, r3
 800dba4:	f7fe ff8c 	bl	800cac0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	2201      	movs	r2, #1
 800dbac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	69db      	ldr	r3, [r3, #28]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d04e      	beq.n	800dc6e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	613b      	str	r3, [r7, #16]
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800dbd8:	e021      	b.n	800dc1e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6a1a      	ldr	r2, [r3, #32]
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	1c59      	adds	r1, r3, #1
 800dbe2:	6179      	str	r1, [r7, #20]
 800dbe4:	4413      	add	r3, r2
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800dbea:	7bfb      	ldrb	r3, [r7, #15]
 800dbec:	2b20      	cmp	r3, #32
 800dbee:	d100      	bne.n	800dbf2 <get_fileinfo+0x3a>
 800dbf0:	e015      	b.n	800dc1e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800dbf2:	7bfb      	ldrb	r3, [r7, #15]
 800dbf4:	2b05      	cmp	r3, #5
 800dbf6:	d101      	bne.n	800dbfc <get_fileinfo+0x44>
 800dbf8:	23e5      	movs	r3, #229	; 0xe5
 800dbfa:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	2b09      	cmp	r3, #9
 800dc00:	d106      	bne.n	800dc10 <get_fileinfo+0x58>
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	1c5a      	adds	r2, r3, #1
 800dc06:	613a      	str	r2, [r7, #16]
 800dc08:	683a      	ldr	r2, [r7, #0]
 800dc0a:	4413      	add	r3, r2
 800dc0c:	222e      	movs	r2, #46	; 0x2e
 800dc0e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	1c5a      	adds	r2, r3, #1
 800dc14:	613a      	str	r2, [r7, #16]
 800dc16:	683a      	ldr	r2, [r7, #0]
 800dc18:	4413      	add	r3, r2
 800dc1a:	7bfa      	ldrb	r2, [r7, #15]
 800dc1c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	2b0a      	cmp	r3, #10
 800dc22:	d9da      	bls.n	800dbda <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800dc24:	683a      	ldr	r2, [r7, #0]
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	4413      	add	r3, r2
 800dc2a:	3309      	adds	r3, #9
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a1b      	ldr	r3, [r3, #32]
 800dc34:	7ada      	ldrb	r2, [r3, #11]
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6a1b      	ldr	r3, [r3, #32]
 800dc3e:	331c      	adds	r3, #28
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe fed3 	bl	800c9ec <ld_dword>
 800dc46:	4602      	mov	r2, r0
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a1b      	ldr	r3, [r3, #32]
 800dc50:	3316      	adds	r3, #22
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fe feca 	bl	800c9ec <ld_dword>
 800dc58:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	80da      	strh	r2, [r3, #6]
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	0c1b      	lsrs	r3, r3, #16
 800dc66:	b29a      	uxth	r2, r3
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	809a      	strh	r2, [r3, #4]
 800dc6c:	e000      	b.n	800dc70 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800dc6e:	bf00      	nop
}
 800dc70:	3718      	adds	r7, #24
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
	...

0800dc78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b088      	sub	sp, #32
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	60fb      	str	r3, [r7, #12]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	3324      	adds	r3, #36	; 0x24
 800dc8c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800dc8e:	220b      	movs	r2, #11
 800dc90:	2120      	movs	r1, #32
 800dc92:	68b8      	ldr	r0, [r7, #8]
 800dc94:	f7fe ff35 	bl	800cb02 <mem_set>
	si = i = 0; ni = 8;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	613b      	str	r3, [r7, #16]
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	61fb      	str	r3, [r7, #28]
 800dca0:	2308      	movs	r3, #8
 800dca2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	61fa      	str	r2, [r7, #28]
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	4413      	add	r3, r2
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dcb2:	7efb      	ldrb	r3, [r7, #27]
 800dcb4:	2b20      	cmp	r3, #32
 800dcb6:	d94e      	bls.n	800dd56 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800dcb8:	7efb      	ldrb	r3, [r7, #27]
 800dcba:	2b2f      	cmp	r3, #47	; 0x2f
 800dcbc:	d006      	beq.n	800dccc <create_name+0x54>
 800dcbe:	7efb      	ldrb	r3, [r7, #27]
 800dcc0:	2b5c      	cmp	r3, #92	; 0x5c
 800dcc2:	d110      	bne.n	800dce6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dcc4:	e002      	b.n	800dccc <create_name+0x54>
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	61fb      	str	r3, [r7, #28]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	4413      	add	r3, r2
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	2b2f      	cmp	r3, #47	; 0x2f
 800dcd6:	d0f6      	beq.n	800dcc6 <create_name+0x4e>
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	4413      	add	r3, r2
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	2b5c      	cmp	r3, #92	; 0x5c
 800dce2:	d0f0      	beq.n	800dcc6 <create_name+0x4e>
			break;
 800dce4:	e038      	b.n	800dd58 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800dce6:	7efb      	ldrb	r3, [r7, #27]
 800dce8:	2b2e      	cmp	r3, #46	; 0x2e
 800dcea:	d003      	beq.n	800dcf4 <create_name+0x7c>
 800dcec:	693a      	ldr	r2, [r7, #16]
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d30c      	bcc.n	800dd0e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	2b0b      	cmp	r3, #11
 800dcf8:	d002      	beq.n	800dd00 <create_name+0x88>
 800dcfa:	7efb      	ldrb	r3, [r7, #27]
 800dcfc:	2b2e      	cmp	r3, #46	; 0x2e
 800dcfe:	d001      	beq.n	800dd04 <create_name+0x8c>
 800dd00:	2306      	movs	r3, #6
 800dd02:	e044      	b.n	800dd8e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800dd04:	2308      	movs	r3, #8
 800dd06:	613b      	str	r3, [r7, #16]
 800dd08:	230b      	movs	r3, #11
 800dd0a:	617b      	str	r3, [r7, #20]
			continue;
 800dd0c:	e022      	b.n	800dd54 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800dd0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	da04      	bge.n	800dd20 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800dd16:	7efb      	ldrb	r3, [r7, #27]
 800dd18:	3b80      	subs	r3, #128	; 0x80
 800dd1a:	4a1f      	ldr	r2, [pc, #124]	; (800dd98 <create_name+0x120>)
 800dd1c:	5cd3      	ldrb	r3, [r2, r3]
 800dd1e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800dd20:	7efb      	ldrb	r3, [r7, #27]
 800dd22:	4619      	mov	r1, r3
 800dd24:	481d      	ldr	r0, [pc, #116]	; (800dd9c <create_name+0x124>)
 800dd26:	f7fe ff2e 	bl	800cb86 <chk_chr>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d001      	beq.n	800dd34 <create_name+0xbc>
 800dd30:	2306      	movs	r3, #6
 800dd32:	e02c      	b.n	800dd8e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dd34:	7efb      	ldrb	r3, [r7, #27]
 800dd36:	2b60      	cmp	r3, #96	; 0x60
 800dd38:	d905      	bls.n	800dd46 <create_name+0xce>
 800dd3a:	7efb      	ldrb	r3, [r7, #27]
 800dd3c:	2b7a      	cmp	r3, #122	; 0x7a
 800dd3e:	d802      	bhi.n	800dd46 <create_name+0xce>
 800dd40:	7efb      	ldrb	r3, [r7, #27]
 800dd42:	3b20      	subs	r3, #32
 800dd44:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	613a      	str	r2, [r7, #16]
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	4413      	add	r3, r2
 800dd50:	7efa      	ldrb	r2, [r7, #27]
 800dd52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dd54:	e7a6      	b.n	800dca4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dd56:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dd58:	68fa      	ldr	r2, [r7, #12]
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	441a      	add	r2, r3
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d101      	bne.n	800dd6c <create_name+0xf4>
 800dd68:	2306      	movs	r3, #6
 800dd6a:	e010      	b.n	800dd8e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2be5      	cmp	r3, #229	; 0xe5
 800dd72:	d102      	bne.n	800dd7a <create_name+0x102>
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	2205      	movs	r2, #5
 800dd78:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dd7a:	7efb      	ldrb	r3, [r7, #27]
 800dd7c:	2b20      	cmp	r3, #32
 800dd7e:	d801      	bhi.n	800dd84 <create_name+0x10c>
 800dd80:	2204      	movs	r2, #4
 800dd82:	e000      	b.n	800dd86 <create_name+0x10e>
 800dd84:	2200      	movs	r2, #0
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	330b      	adds	r3, #11
 800dd8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dd8c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3720      	adds	r7, #32
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	0802d4f0 	.word	0x0802d4f0
 800dd9c:	08013928 	.word	0x08013928

0800dda0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ddb4:	e002      	b.n	800ddbc <follow_path+0x1c>
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	603b      	str	r3, [r7, #0]
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	2b2f      	cmp	r3, #47	; 0x2f
 800ddc2:	d0f8      	beq.n	800ddb6 <follow_path+0x16>
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	2b5c      	cmp	r3, #92	; 0x5c
 800ddca:	d0f4      	beq.n	800ddb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	2b1f      	cmp	r3, #31
 800ddd8:	d80a      	bhi.n	800ddf0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2280      	movs	r2, #128	; 0x80
 800ddde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dde2:	2100      	movs	r1, #0
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f7ff fc7b 	bl	800d6e0 <dir_sdi>
 800ddea:	4603      	mov	r3, r0
 800ddec:	75fb      	strb	r3, [r7, #23]
 800ddee:	e048      	b.n	800de82 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ddf0:	463b      	mov	r3, r7
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7ff ff3f 	bl	800dc78 <create_name>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ddfe:	7dfb      	ldrb	r3, [r7, #23]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d139      	bne.n	800de78 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff fe50 	bl	800daaa <dir_find>
 800de0a:	4603      	mov	r3, r0
 800de0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800de16:	7dfb      	ldrb	r3, [r7, #23]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d00a      	beq.n	800de32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800de1c:	7dfb      	ldrb	r3, [r7, #23]
 800de1e:	2b04      	cmp	r3, #4
 800de20:	d12c      	bne.n	800de7c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800de22:	7afb      	ldrb	r3, [r7, #11]
 800de24:	f003 0304 	and.w	r3, r3, #4
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d127      	bne.n	800de7c <follow_path+0xdc>
 800de2c:	2305      	movs	r3, #5
 800de2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800de30:	e024      	b.n	800de7c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de32:	7afb      	ldrb	r3, [r7, #11]
 800de34:	f003 0304 	and.w	r3, r3, #4
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d121      	bne.n	800de80 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	799b      	ldrb	r3, [r3, #6]
 800de40:	f003 0310 	and.w	r3, r3, #16
 800de44:	2b00      	cmp	r3, #0
 800de46:	d102      	bne.n	800de4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800de48:	2305      	movs	r3, #5
 800de4a:	75fb      	strb	r3, [r7, #23]
 800de4c:	e019      	b.n	800de82 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	695b      	ldr	r3, [r3, #20]
 800de58:	68fa      	ldr	r2, [r7, #12]
 800de5a:	8992      	ldrh	r2, [r2, #12]
 800de5c:	fbb3 f0f2 	udiv	r0, r3, r2
 800de60:	fb00 f202 	mul.w	r2, r0, r2
 800de64:	1a9b      	subs	r3, r3, r2
 800de66:	440b      	add	r3, r1
 800de68:	4619      	mov	r1, r3
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f7ff fdde 	bl	800da2c <ld_clust>
 800de70:	4602      	mov	r2, r0
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de76:	e7bb      	b.n	800ddf0 <follow_path+0x50>
			if (res != FR_OK) break;
 800de78:	bf00      	nop
 800de7a:	e002      	b.n	800de82 <follow_path+0xe2>
				break;
 800de7c:	bf00      	nop
 800de7e:	e000      	b.n	800de82 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de80:	bf00      	nop
			}
		}
	}

	return res;
 800de82:	7dfb      	ldrb	r3, [r7, #23]
}
 800de84:	4618      	mov	r0, r3
 800de86:	3718      	adds	r7, #24
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b087      	sub	sp, #28
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800de94:	f04f 33ff 	mov.w	r3, #4294967295
 800de98:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d031      	beq.n	800df06 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	617b      	str	r3, [r7, #20]
 800dea8:	e002      	b.n	800deb0 <get_ldnumber+0x24>
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	3301      	adds	r3, #1
 800deae:	617b      	str	r3, [r7, #20]
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	2b20      	cmp	r3, #32
 800deb6:	d903      	bls.n	800dec0 <get_ldnumber+0x34>
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	2b3a      	cmp	r3, #58	; 0x3a
 800debe:	d1f4      	bne.n	800deaa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	2b3a      	cmp	r3, #58	; 0x3a
 800dec6:	d11c      	bne.n	800df02 <get_ldnumber+0x76>
			tp = *path;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	1c5a      	adds	r2, r3, #1
 800ded2:	60fa      	str	r2, [r7, #12]
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	3b30      	subs	r3, #48	; 0x30
 800ded8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	2b09      	cmp	r3, #9
 800dede:	d80e      	bhi.n	800defe <get_ldnumber+0x72>
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d10a      	bne.n	800defe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d107      	bne.n	800defe <get_ldnumber+0x72>
					vol = (int)i;
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	3301      	adds	r3, #1
 800def6:	617b      	str	r3, [r7, #20]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	697a      	ldr	r2, [r7, #20]
 800defc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	e002      	b.n	800df08 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800df02:	2300      	movs	r3, #0
 800df04:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800df06:	693b      	ldr	r3, [r7, #16]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	371c      	adds	r7, #28
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr

0800df14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	70da      	strb	r2, [r3, #3]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f04f 32ff 	mov.w	r2, #4294967295
 800df2a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7fe fff4 	bl	800cf1c <move_window>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	d001      	beq.n	800df3e <check_fs+0x2a>
 800df3a:	2304      	movs	r3, #4
 800df3c:	e038      	b.n	800dfb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	3334      	adds	r3, #52	; 0x34
 800df42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800df46:	4618      	mov	r0, r3
 800df48:	f7fe fd38 	bl	800c9bc <ld_word>
 800df4c:	4603      	mov	r3, r0
 800df4e:	461a      	mov	r2, r3
 800df50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800df54:	429a      	cmp	r2, r3
 800df56:	d001      	beq.n	800df5c <check_fs+0x48>
 800df58:	2303      	movs	r3, #3
 800df5a:	e029      	b.n	800dfb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df62:	2be9      	cmp	r3, #233	; 0xe9
 800df64:	d009      	beq.n	800df7a <check_fs+0x66>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df6c:	2beb      	cmp	r3, #235	; 0xeb
 800df6e:	d11e      	bne.n	800dfae <check_fs+0x9a>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800df76:	2b90      	cmp	r3, #144	; 0x90
 800df78:	d119      	bne.n	800dfae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	3334      	adds	r3, #52	; 0x34
 800df7e:	3336      	adds	r3, #54	; 0x36
 800df80:	4618      	mov	r0, r3
 800df82:	f7fe fd33 	bl	800c9ec <ld_dword>
 800df86:	4603      	mov	r3, r0
 800df88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800df8c:	4a0a      	ldr	r2, [pc, #40]	; (800dfb8 <check_fs+0xa4>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d101      	bne.n	800df96 <check_fs+0x82>
 800df92:	2300      	movs	r3, #0
 800df94:	e00c      	b.n	800dfb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	3334      	adds	r3, #52	; 0x34
 800df9a:	3352      	adds	r3, #82	; 0x52
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fe fd25 	bl	800c9ec <ld_dword>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	4a05      	ldr	r2, [pc, #20]	; (800dfbc <check_fs+0xa8>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d101      	bne.n	800dfae <check_fs+0x9a>
 800dfaa:	2300      	movs	r3, #0
 800dfac:	e000      	b.n	800dfb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dfae:	2302      	movs	r3, #2
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3708      	adds	r7, #8
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	00544146 	.word	0x00544146
 800dfbc:	33544146 	.word	0x33544146

0800dfc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b096      	sub	sp, #88	; 0x58
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f7ff ff59 	bl	800de8c <get_ldnumber>
 800dfda:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dfdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	da01      	bge.n	800dfe6 <find_volume+0x26>
 800dfe2:	230b      	movs	r3, #11
 800dfe4:	e262      	b.n	800e4ac <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dfe6:	4a9f      	ldr	r2, [pc, #636]	; (800e264 <find_volume+0x2a4>)
 800dfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d101      	bne.n	800dffa <find_volume+0x3a>
 800dff6:	230c      	movs	r3, #12
 800dff8:	e258      	b.n	800e4ac <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dffe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e000:	79fb      	ldrb	r3, [r7, #7]
 800e002:	f023 0301 	bic.w	r3, r3, #1
 800e006:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d01a      	beq.n	800e046 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e012:	785b      	ldrb	r3, [r3, #1]
 800e014:	4618      	mov	r0, r3
 800e016:	f7fe fc33 	bl	800c880 <disk_status>
 800e01a:	4603      	mov	r3, r0
 800e01c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e020:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e024:	f003 0301 	and.w	r3, r3, #1
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d10c      	bne.n	800e046 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e02c:	79fb      	ldrb	r3, [r7, #7]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d007      	beq.n	800e042 <find_volume+0x82>
 800e032:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e036:	f003 0304 	and.w	r3, r3, #4
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d001      	beq.n	800e042 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e03e:	230a      	movs	r3, #10
 800e040:	e234      	b.n	800e4ac <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800e042:	2300      	movs	r3, #0
 800e044:	e232      	b.n	800e4ac <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e048:	2200      	movs	r2, #0
 800e04a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e04e:	b2da      	uxtb	r2, r3
 800e050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e052:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e056:	785b      	ldrb	r3, [r3, #1]
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fe fc2b 	bl	800c8b4 <disk_initialize>
 800e05e:	4603      	mov	r3, r0
 800e060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e064:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e068:	f003 0301 	and.w	r3, r3, #1
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d001      	beq.n	800e074 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e070:	2303      	movs	r3, #3
 800e072:	e21b      	b.n	800e4ac <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e074:	79fb      	ldrb	r3, [r7, #7]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d007      	beq.n	800e08a <find_volume+0xca>
 800e07a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e07e:	f003 0304 	and.w	r3, r3, #4
 800e082:	2b00      	cmp	r3, #0
 800e084:	d001      	beq.n	800e08a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e086:	230a      	movs	r3, #10
 800e088:	e210      	b.n	800e4ac <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08c:	7858      	ldrb	r0, [r3, #1]
 800e08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e090:	330c      	adds	r3, #12
 800e092:	461a      	mov	r2, r3
 800e094:	2102      	movs	r1, #2
 800e096:	f7fe fc73 	bl	800c980 <disk_ioctl>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d001      	beq.n	800e0a4 <find_volume+0xe4>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e203      	b.n	800e4ac <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a6:	899b      	ldrh	r3, [r3, #12]
 800e0a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0ac:	d80d      	bhi.n	800e0ca <find_volume+0x10a>
 800e0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b0:	899b      	ldrh	r3, [r3, #12]
 800e0b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0b6:	d308      	bcc.n	800e0ca <find_volume+0x10a>
 800e0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ba:	899b      	ldrh	r3, [r3, #12]
 800e0bc:	461a      	mov	r2, r3
 800e0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c0:	899b      	ldrh	r3, [r3, #12]
 800e0c2:	3b01      	subs	r3, #1
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d001      	beq.n	800e0ce <find_volume+0x10e>
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e1ee      	b.n	800e4ac <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e0d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e0d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0d6:	f7ff ff1d 	bl	800df14 <check_fs>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e0e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0e4:	2b02      	cmp	r3, #2
 800e0e6:	d149      	bne.n	800e17c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	643b      	str	r3, [r7, #64]	; 0x40
 800e0ec:	e01e      	b.n	800e12c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0f6:	011b      	lsls	r3, r3, #4
 800e0f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e0fc:	4413      	add	r3, r2
 800e0fe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e102:	3304      	adds	r3, #4
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d006      	beq.n	800e118 <find_volume+0x158>
 800e10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10c:	3308      	adds	r3, #8
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fe fc6c 	bl	800c9ec <ld_dword>
 800e114:	4602      	mov	r2, r0
 800e116:	e000      	b.n	800e11a <find_volume+0x15a>
 800e118:	2200      	movs	r2, #0
 800e11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	3358      	adds	r3, #88	; 0x58
 800e120:	443b      	add	r3, r7
 800e122:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e128:	3301      	adds	r3, #1
 800e12a:	643b      	str	r3, [r7, #64]	; 0x40
 800e12c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e12e:	2b03      	cmp	r3, #3
 800e130:	d9dd      	bls.n	800e0ee <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e132:	2300      	movs	r3, #0
 800e134:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d002      	beq.n	800e142 <find_volume+0x182>
 800e13c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e13e:	3b01      	subs	r3, #1
 800e140:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	3358      	adds	r3, #88	; 0x58
 800e148:	443b      	add	r3, r7
 800e14a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e14e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e152:	2b00      	cmp	r3, #0
 800e154:	d005      	beq.n	800e162 <find_volume+0x1a2>
 800e156:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e15a:	f7ff fedb 	bl	800df14 <check_fs>
 800e15e:	4603      	mov	r3, r0
 800e160:	e000      	b.n	800e164 <find_volume+0x1a4>
 800e162:	2303      	movs	r3, #3
 800e164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d905      	bls.n	800e17c <find_volume+0x1bc>
 800e170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e172:	3301      	adds	r3, #1
 800e174:	643b      	str	r3, [r7, #64]	; 0x40
 800e176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e178:	2b03      	cmp	r3, #3
 800e17a:	d9e2      	bls.n	800e142 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e17c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e180:	2b04      	cmp	r3, #4
 800e182:	d101      	bne.n	800e188 <find_volume+0x1c8>
 800e184:	2301      	movs	r3, #1
 800e186:	e191      	b.n	800e4ac <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d901      	bls.n	800e194 <find_volume+0x1d4>
 800e190:	230d      	movs	r3, #13
 800e192:	e18b      	b.n	800e4ac <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e196:	3334      	adds	r3, #52	; 0x34
 800e198:	330b      	adds	r3, #11
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fe fc0e 	bl	800c9bc <ld_word>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a6:	899b      	ldrh	r3, [r3, #12]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d001      	beq.n	800e1b0 <find_volume+0x1f0>
 800e1ac:	230d      	movs	r3, #13
 800e1ae:	e17d      	b.n	800e4ac <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b2:	3334      	adds	r3, #52	; 0x34
 800e1b4:	3316      	adds	r3, #22
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fe fc00 	bl	800c9bc <ld_word>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d106      	bne.n	800e1d4 <find_volume+0x214>
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c8:	3334      	adds	r3, #52	; 0x34
 800e1ca:	3324      	adds	r3, #36	; 0x24
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7fe fc0d 	bl	800c9ec <ld_dword>
 800e1d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e1d8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1dc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e6:	789b      	ldrb	r3, [r3, #2]
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d005      	beq.n	800e1f8 <find_volume+0x238>
 800e1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ee:	789b      	ldrb	r3, [r3, #2]
 800e1f0:	2b02      	cmp	r3, #2
 800e1f2:	d001      	beq.n	800e1f8 <find_volume+0x238>
 800e1f4:	230d      	movs	r3, #13
 800e1f6:	e159      	b.n	800e4ac <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fa:	789b      	ldrb	r3, [r3, #2]
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e200:	fb02 f303 	mul.w	r3, r2, r3
 800e204:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e210:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e214:	895b      	ldrh	r3, [r3, #10]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d008      	beq.n	800e22c <find_volume+0x26c>
 800e21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21c:	895b      	ldrh	r3, [r3, #10]
 800e21e:	461a      	mov	r2, r3
 800e220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e222:	895b      	ldrh	r3, [r3, #10]
 800e224:	3b01      	subs	r3, #1
 800e226:	4013      	ands	r3, r2
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d001      	beq.n	800e230 <find_volume+0x270>
 800e22c:	230d      	movs	r3, #13
 800e22e:	e13d      	b.n	800e4ac <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e232:	3334      	adds	r3, #52	; 0x34
 800e234:	3311      	adds	r3, #17
 800e236:	4618      	mov	r0, r3
 800e238:	f7fe fbc0 	bl	800c9bc <ld_word>
 800e23c:	4603      	mov	r3, r0
 800e23e:	461a      	mov	r2, r3
 800e240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e242:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e246:	891b      	ldrh	r3, [r3, #8]
 800e248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e24a:	8992      	ldrh	r2, [r2, #12]
 800e24c:	0952      	lsrs	r2, r2, #5
 800e24e:	b292      	uxth	r2, r2
 800e250:	fbb3 f1f2 	udiv	r1, r3, r2
 800e254:	fb01 f202 	mul.w	r2, r1, r2
 800e258:	1a9b      	subs	r3, r3, r2
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d003      	beq.n	800e268 <find_volume+0x2a8>
 800e260:	230d      	movs	r3, #13
 800e262:	e123      	b.n	800e4ac <find_volume+0x4ec>
 800e264:	20005b5c 	.word	0x20005b5c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26a:	3334      	adds	r3, #52	; 0x34
 800e26c:	3313      	adds	r3, #19
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fe fba4 	bl	800c9bc <ld_word>
 800e274:	4603      	mov	r3, r0
 800e276:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d106      	bne.n	800e28c <find_volume+0x2cc>
 800e27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e280:	3334      	adds	r3, #52	; 0x34
 800e282:	3320      	adds	r3, #32
 800e284:	4618      	mov	r0, r3
 800e286:	f7fe fbb1 	bl	800c9ec <ld_dword>
 800e28a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28e:	3334      	adds	r3, #52	; 0x34
 800e290:	330e      	adds	r3, #14
 800e292:	4618      	mov	r0, r3
 800e294:	f7fe fb92 	bl	800c9bc <ld_word>
 800e298:	4603      	mov	r3, r0
 800e29a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e29c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d101      	bne.n	800e2a6 <find_volume+0x2e6>
 800e2a2:	230d      	movs	r3, #13
 800e2a4:	e102      	b.n	800e4ac <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e2a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e2a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2aa:	4413      	add	r3, r2
 800e2ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2ae:	8911      	ldrh	r1, [r2, #8]
 800e2b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2b2:	8992      	ldrh	r2, [r2, #12]
 800e2b4:	0952      	lsrs	r2, r2, #5
 800e2b6:	b292      	uxth	r2, r2
 800e2b8:	fbb1 f2f2 	udiv	r2, r1, r2
 800e2bc:	b292      	uxth	r2, r2
 800e2be:	4413      	add	r3, r2
 800e2c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e2c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d201      	bcs.n	800e2ce <find_volume+0x30e>
 800e2ca:	230d      	movs	r3, #13
 800e2cc:	e0ee      	b.n	800e4ac <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e2ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d2:	1ad3      	subs	r3, r2, r3
 800e2d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2d6:	8952      	ldrh	r2, [r2, #10]
 800e2d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d101      	bne.n	800e2e8 <find_volume+0x328>
 800e2e4:	230d      	movs	r3, #13
 800e2e6:	e0e1      	b.n	800e4ac <find_volume+0x4ec>
		fmt = FS_FAT32;
 800e2e8:	2303      	movs	r3, #3
 800e2ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d802      	bhi.n	800e2fe <find_volume+0x33e>
 800e2f8:	2302      	movs	r3, #2
 800e2fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e300:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e304:	4293      	cmp	r3, r2
 800e306:	d802      	bhi.n	800e30e <find_volume+0x34e>
 800e308:	2301      	movs	r3, #1
 800e30a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e310:	1c9a      	adds	r2, r3, #2
 800e312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e314:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e31a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e31c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e31e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e320:	441a      	add	r2, r3
 800e322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e324:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e326:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32a:	441a      	add	r2, r3
 800e32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e334:	2b03      	cmp	r3, #3
 800e336:	d11e      	bne.n	800e376 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e33a:	3334      	adds	r3, #52	; 0x34
 800e33c:	332a      	adds	r3, #42	; 0x2a
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fe fb3c 	bl	800c9bc <ld_word>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <find_volume+0x38e>
 800e34a:	230d      	movs	r3, #13
 800e34c:	e0ae      	b.n	800e4ac <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e350:	891b      	ldrh	r3, [r3, #8]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <find_volume+0x39a>
 800e356:	230d      	movs	r3, #13
 800e358:	e0a8      	b.n	800e4ac <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35c:	3334      	adds	r3, #52	; 0x34
 800e35e:	332c      	adds	r3, #44	; 0x2c
 800e360:	4618      	mov	r0, r3
 800e362:	f7fe fb43 	bl	800c9ec <ld_dword>
 800e366:	4602      	mov	r2, r0
 800e368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36e:	699b      	ldr	r3, [r3, #24]
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	647b      	str	r3, [r7, #68]	; 0x44
 800e374:	e01f      	b.n	800e3b6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e378:	891b      	ldrh	r3, [r3, #8]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d101      	bne.n	800e382 <find_volume+0x3c2>
 800e37e:	230d      	movs	r3, #13
 800e380:	e094      	b.n	800e4ac <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e388:	441a      	add	r2, r3
 800e38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e38e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e392:	2b02      	cmp	r3, #2
 800e394:	d103      	bne.n	800e39e <find_volume+0x3de>
 800e396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e398:	699b      	ldr	r3, [r3, #24]
 800e39a:	005b      	lsls	r3, r3, #1
 800e39c:	e00a      	b.n	800e3b4 <find_volume+0x3f4>
 800e39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a0:	699a      	ldr	r2, [r3, #24]
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	005b      	lsls	r3, r3, #1
 800e3a6:	4413      	add	r3, r2
 800e3a8:	085a      	lsrs	r2, r3, #1
 800e3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ac:	699b      	ldr	r3, [r3, #24]
 800e3ae:	f003 0301 	and.w	r3, r3, #1
 800e3b2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e3b4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b8:	69da      	ldr	r2, [r3, #28]
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3bc:	899b      	ldrh	r3, [r3, #12]
 800e3be:	4619      	mov	r1, r3
 800e3c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3c2:	440b      	add	r3, r1
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e3c8:	8989      	ldrh	r1, [r1, #12]
 800e3ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d201      	bcs.n	800e3d6 <find_volume+0x416>
 800e3d2:	230d      	movs	r3, #13
 800e3d4:	e06a      	b.n	800e4ac <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e3dc:	615a      	str	r2, [r3, #20]
 800e3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e0:	695a      	ldr	r2, [r3, #20]
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e8:	2280      	movs	r2, #128	; 0x80
 800e3ea:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e3ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3f0:	2b03      	cmp	r3, #3
 800e3f2:	d149      	bne.n	800e488 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f6:	3334      	adds	r3, #52	; 0x34
 800e3f8:	3330      	adds	r3, #48	; 0x30
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe fade 	bl	800c9bc <ld_word>
 800e400:	4603      	mov	r3, r0
 800e402:	2b01      	cmp	r3, #1
 800e404:	d140      	bne.n	800e488 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e408:	3301      	adds	r3, #1
 800e40a:	4619      	mov	r1, r3
 800e40c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e40e:	f7fe fd85 	bl	800cf1c <move_window>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d137      	bne.n	800e488 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800e418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41a:	2200      	movs	r2, #0
 800e41c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e420:	3334      	adds	r3, #52	; 0x34
 800e422:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe fac8 	bl	800c9bc <ld_word>
 800e42c:	4603      	mov	r3, r0
 800e42e:	461a      	mov	r2, r3
 800e430:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e434:	429a      	cmp	r2, r3
 800e436:	d127      	bne.n	800e488 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43a:	3334      	adds	r3, #52	; 0x34
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fe fad5 	bl	800c9ec <ld_dword>
 800e442:	4603      	mov	r3, r0
 800e444:	4a1b      	ldr	r2, [pc, #108]	; (800e4b4 <find_volume+0x4f4>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d11e      	bne.n	800e488 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44c:	3334      	adds	r3, #52	; 0x34
 800e44e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e452:	4618      	mov	r0, r3
 800e454:	f7fe faca 	bl	800c9ec <ld_dword>
 800e458:	4603      	mov	r3, r0
 800e45a:	4a17      	ldr	r2, [pc, #92]	; (800e4b8 <find_volume+0x4f8>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d113      	bne.n	800e488 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e462:	3334      	adds	r3, #52	; 0x34
 800e464:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fe fabf 	bl	800c9ec <ld_dword>
 800e46e:	4602      	mov	r2, r0
 800e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e472:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e476:	3334      	adds	r3, #52	; 0x34
 800e478:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fe fab5 	bl	800c9ec <ld_dword>
 800e482:	4602      	mov	r2, r0
 800e484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e486:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e48e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e490:	4b0a      	ldr	r3, [pc, #40]	; (800e4bc <find_volume+0x4fc>)
 800e492:	881b      	ldrh	r3, [r3, #0]
 800e494:	3301      	adds	r3, #1
 800e496:	b29a      	uxth	r2, r3
 800e498:	4b08      	ldr	r3, [pc, #32]	; (800e4bc <find_volume+0x4fc>)
 800e49a:	801a      	strh	r2, [r3, #0]
 800e49c:	4b07      	ldr	r3, [pc, #28]	; (800e4bc <find_volume+0x4fc>)
 800e49e:	881a      	ldrh	r2, [r3, #0]
 800e4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e4a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4a6:	f7fe fcd1 	bl	800ce4c <clear_lock>
#endif
	return FR_OK;
 800e4aa:	2300      	movs	r3, #0
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3758      	adds	r7, #88	; 0x58
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	41615252 	.word	0x41615252
 800e4b8:	61417272 	.word	0x61417272
 800e4bc:	20005b60 	.word	0x20005b60

0800e4c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e4ca:	2309      	movs	r3, #9
 800e4cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d01c      	beq.n	800e50e <validate+0x4e>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d018      	beq.n	800e50e <validate+0x4e>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d013      	beq.n	800e50e <validate+0x4e>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	889a      	ldrh	r2, [r3, #4]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	88db      	ldrh	r3, [r3, #6]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d10c      	bne.n	800e50e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	785b      	ldrb	r3, [r3, #1]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fe f9c0 	bl	800c880 <disk_status>
 800e500:	4603      	mov	r3, r0
 800e502:	f003 0301 	and.w	r3, r3, #1
 800e506:	2b00      	cmp	r3, #0
 800e508:	d101      	bne.n	800e50e <validate+0x4e>
			res = FR_OK;
 800e50a:	2300      	movs	r3, #0
 800e50c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e50e:	7bfb      	ldrb	r3, [r7, #15]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d102      	bne.n	800e51a <validate+0x5a>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	e000      	b.n	800e51c <validate+0x5c>
 800e51a:	2300      	movs	r3, #0
 800e51c:	683a      	ldr	r2, [r7, #0]
 800e51e:	6013      	str	r3, [r2, #0]
	return res;
 800e520:	7bfb      	ldrb	r3, [r7, #15]
}
 800e522:	4618      	mov	r0, r3
 800e524:	3710      	adds	r7, #16
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
	...

0800e52c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b088      	sub	sp, #32
 800e530:	af00      	add	r7, sp, #0
 800e532:	60f8      	str	r0, [r7, #12]
 800e534:	60b9      	str	r1, [r7, #8]
 800e536:	4613      	mov	r3, r2
 800e538:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e53e:	f107 0310 	add.w	r3, r7, #16
 800e542:	4618      	mov	r0, r3
 800e544:	f7ff fca2 	bl	800de8c <get_ldnumber>
 800e548:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e54a:	69fb      	ldr	r3, [r7, #28]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	da01      	bge.n	800e554 <f_mount+0x28>
 800e550:	230b      	movs	r3, #11
 800e552:	e02b      	b.n	800e5ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e554:	4a17      	ldr	r2, [pc, #92]	; (800e5b4 <f_mount+0x88>)
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e55c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e55e:	69bb      	ldr	r3, [r7, #24]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d005      	beq.n	800e570 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e564:	69b8      	ldr	r0, [r7, #24]
 800e566:	f7fe fc71 	bl	800ce4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e56a:	69bb      	ldr	r3, [r7, #24]
 800e56c:	2200      	movs	r2, #0
 800e56e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d002      	beq.n	800e57c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2200      	movs	r2, #0
 800e57a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e57c:	68fa      	ldr	r2, [r7, #12]
 800e57e:	490d      	ldr	r1, [pc, #52]	; (800e5b4 <f_mount+0x88>)
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <f_mount+0x66>
 800e58c:	79fb      	ldrb	r3, [r7, #7]
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d001      	beq.n	800e596 <f_mount+0x6a>
 800e592:	2300      	movs	r3, #0
 800e594:	e00a      	b.n	800e5ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e596:	f107 010c 	add.w	r1, r7, #12
 800e59a:	f107 0308 	add.w	r3, r7, #8
 800e59e:	2200      	movs	r2, #0
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7ff fd0d 	bl	800dfc0 <find_volume>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e5aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3720      	adds	r7, #32
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	20005b5c 	.word	0x20005b5c

0800e5b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b098      	sub	sp, #96	; 0x60
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d101      	bne.n	800e5d0 <f_open+0x18>
 800e5cc:	2309      	movs	r3, #9
 800e5ce:	e1bb      	b.n	800e948 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e5d0:	79fb      	ldrb	r3, [r7, #7]
 800e5d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e5d8:	79fa      	ldrb	r2, [r7, #7]
 800e5da:	f107 0110 	add.w	r1, r7, #16
 800e5de:	f107 0308 	add.w	r3, r7, #8
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7ff fcec 	bl	800dfc0 <find_volume>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e5ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f040 819f 	bne.w	800e936 <f_open+0x37e>
		dj.obj.fs = fs;
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	f107 0314 	add.w	r3, r7, #20
 800e602:	4611      	mov	r1, r2
 800e604:	4618      	mov	r0, r3
 800e606:	f7ff fbcb 	bl	800dda0 <follow_path>
 800e60a:	4603      	mov	r3, r0
 800e60c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e610:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e614:	2b00      	cmp	r3, #0
 800e616:	d11a      	bne.n	800e64e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e618:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e61c:	b25b      	sxtb	r3, r3
 800e61e:	2b00      	cmp	r3, #0
 800e620:	da03      	bge.n	800e62a <f_open+0x72>
				res = FR_INVALID_NAME;
 800e622:	2306      	movs	r3, #6
 800e624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e628:	e011      	b.n	800e64e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e62a:	79fb      	ldrb	r3, [r7, #7]
 800e62c:	f023 0301 	bic.w	r3, r3, #1
 800e630:	2b00      	cmp	r3, #0
 800e632:	bf14      	ite	ne
 800e634:	2301      	movne	r3, #1
 800e636:	2300      	moveq	r3, #0
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	461a      	mov	r2, r3
 800e63c:	f107 0314 	add.w	r3, r7, #20
 800e640:	4611      	mov	r1, r2
 800e642:	4618      	mov	r0, r3
 800e644:	f7fe faba 	bl	800cbbc <chk_lock>
 800e648:	4603      	mov	r3, r0
 800e64a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e64e:	79fb      	ldrb	r3, [r7, #7]
 800e650:	f003 031c 	and.w	r3, r3, #28
 800e654:	2b00      	cmp	r3, #0
 800e656:	d07f      	beq.n	800e758 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e658:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d017      	beq.n	800e690 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e660:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e664:	2b04      	cmp	r3, #4
 800e666:	d10e      	bne.n	800e686 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e668:	f7fe fb04 	bl	800cc74 <enq_lock>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d006      	beq.n	800e680 <f_open+0xc8>
 800e672:	f107 0314 	add.w	r3, r7, #20
 800e676:	4618      	mov	r0, r3
 800e678:	f7ff fa6c 	bl	800db54 <dir_register>
 800e67c:	4603      	mov	r3, r0
 800e67e:	e000      	b.n	800e682 <f_open+0xca>
 800e680:	2312      	movs	r3, #18
 800e682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e686:	79fb      	ldrb	r3, [r7, #7]
 800e688:	f043 0308 	orr.w	r3, r3, #8
 800e68c:	71fb      	strb	r3, [r7, #7]
 800e68e:	e010      	b.n	800e6b2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e690:	7ebb      	ldrb	r3, [r7, #26]
 800e692:	f003 0311 	and.w	r3, r3, #17
 800e696:	2b00      	cmp	r3, #0
 800e698:	d003      	beq.n	800e6a2 <f_open+0xea>
					res = FR_DENIED;
 800e69a:	2307      	movs	r3, #7
 800e69c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e6a0:	e007      	b.n	800e6b2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e6a2:	79fb      	ldrb	r3, [r7, #7]
 800e6a4:	f003 0304 	and.w	r3, r3, #4
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d002      	beq.n	800e6b2 <f_open+0xfa>
 800e6ac:	2308      	movs	r3, #8
 800e6ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e6b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d168      	bne.n	800e78c <f_open+0x1d4>
 800e6ba:	79fb      	ldrb	r3, [r7, #7]
 800e6bc:	f003 0308 	and.w	r3, r3, #8
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d063      	beq.n	800e78c <f_open+0x1d4>
				dw = GET_FATTIME();
 800e6c4:	f7fd ff70 	bl	800c5a8 <get_fattime>
 800e6c8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6cc:	330e      	adds	r3, #14
 800e6ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7fe f9c9 	bl	800ca68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6d8:	3316      	adds	r3, #22
 800e6da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7fe f9c3 	bl	800ca68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e4:	330b      	adds	r3, #11
 800e6e6:	2220      	movs	r2, #32
 800e6e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6ee:	4611      	mov	r1, r2
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7ff f99b 	bl	800da2c <ld_clust>
 800e6f6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7ff f9b3 	bl	800da6a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e706:	331c      	adds	r3, #28
 800e708:	2100      	movs	r1, #0
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fe f9ac 	bl	800ca68 <st_dword>
					fs->wflag = 1;
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	2201      	movs	r2, #1
 800e714:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d037      	beq.n	800e78c <f_open+0x1d4>
						dw = fs->winsect;
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e720:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e722:	f107 0314 	add.w	r3, r7, #20
 800e726:	2200      	movs	r2, #0
 800e728:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fe fea3 	bl	800d476 <remove_chain>
 800e730:	4603      	mov	r3, r0
 800e732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d126      	bne.n	800e78c <f_open+0x1d4>
							res = move_window(fs, dw);
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e742:	4618      	mov	r0, r3
 800e744:	f7fe fbea 	bl	800cf1c <move_window>
 800e748:	4603      	mov	r3, r0
 800e74a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e752:	3a01      	subs	r2, #1
 800e754:	611a      	str	r2, [r3, #16]
 800e756:	e019      	b.n	800e78c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d115      	bne.n	800e78c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e760:	7ebb      	ldrb	r3, [r7, #26]
 800e762:	f003 0310 	and.w	r3, r3, #16
 800e766:	2b00      	cmp	r3, #0
 800e768:	d003      	beq.n	800e772 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e76a:	2304      	movs	r3, #4
 800e76c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e770:	e00c      	b.n	800e78c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e772:	79fb      	ldrb	r3, [r7, #7]
 800e774:	f003 0302 	and.w	r3, r3, #2
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d007      	beq.n	800e78c <f_open+0x1d4>
 800e77c:	7ebb      	ldrb	r3, [r7, #26]
 800e77e:	f003 0301 	and.w	r3, r3, #1
 800e782:	2b00      	cmp	r3, #0
 800e784:	d002      	beq.n	800e78c <f_open+0x1d4>
						res = FR_DENIED;
 800e786:	2307      	movs	r3, #7
 800e788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e78c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e790:	2b00      	cmp	r3, #0
 800e792:	d128      	bne.n	800e7e6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e794:	79fb      	ldrb	r3, [r7, #7]
 800e796:	f003 0308 	and.w	r3, r3, #8
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d003      	beq.n	800e7a6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e79e:	79fb      	ldrb	r3, [r7, #7]
 800e7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e7b4:	79fb      	ldrb	r3, [r7, #7]
 800e7b6:	f023 0301 	bic.w	r3, r3, #1
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	bf14      	ite	ne
 800e7be:	2301      	movne	r3, #1
 800e7c0:	2300      	moveq	r3, #0
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	f107 0314 	add.w	r3, r7, #20
 800e7ca:	4611      	mov	r1, r2
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fe fa73 	bl	800ccb8 <inc_lock>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	691b      	ldr	r3, [r3, #16]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d102      	bne.n	800e7e6 <f_open+0x22e>
 800e7e0:	2302      	movs	r3, #2
 800e7e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e7e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f040 80a3 	bne.w	800e936 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7ff f918 	bl	800da2c <ld_clust>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e804:	331c      	adds	r3, #28
 800e806:	4618      	mov	r0, r3
 800e808:	f7fe f8f0 	bl	800c9ec <ld_dword>
 800e80c:	4602      	mov	r2, r0
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2200      	movs	r2, #0
 800e816:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e818:	693a      	ldr	r2, [r7, #16]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	88da      	ldrh	r2, [r3, #6]
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	79fa      	ldrb	r2, [r7, #7]
 800e82a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2200      	movs	r2, #0
 800e830:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2200      	movs	r2, #0
 800e836:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	3330      	adds	r3, #48	; 0x30
 800e842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e846:	2100      	movs	r1, #0
 800e848:	4618      	mov	r0, r3
 800e84a:	f7fe f95a 	bl	800cb02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e84e:	79fb      	ldrb	r3, [r7, #7]
 800e850:	f003 0320 	and.w	r3, r3, #32
 800e854:	2b00      	cmp	r3, #0
 800e856:	d06e      	beq.n	800e936 <f_open+0x37e>
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d06a      	beq.n	800e936 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	68da      	ldr	r2, [r3, #12]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	895b      	ldrh	r3, [r3, #10]
 800e86c:	461a      	mov	r2, r3
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	899b      	ldrh	r3, [r3, #12]
 800e872:	fb02 f303 	mul.w	r3, r2, r3
 800e876:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	689b      	ldr	r3, [r3, #8]
 800e87c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	657b      	str	r3, [r7, #84]	; 0x54
 800e884:	e016      	b.n	800e8b4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7fe fc03 	bl	800d096 <get_fat>
 800e890:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e894:	2b01      	cmp	r3, #1
 800e896:	d802      	bhi.n	800e89e <f_open+0x2e6>
 800e898:	2302      	movs	r3, #2
 800e89a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e89e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a4:	d102      	bne.n	800e8ac <f_open+0x2f4>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e8ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e8ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8b0:	1ad3      	subs	r3, r2, r3
 800e8b2:	657b      	str	r3, [r7, #84]	; 0x54
 800e8b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d103      	bne.n	800e8c4 <f_open+0x30c>
 800e8bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e8be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d8e0      	bhi.n	800e886 <f_open+0x2ce>
				}
				fp->clust = clst;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e8ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d131      	bne.n	800e936 <f_open+0x37e>
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	899b      	ldrh	r3, [r3, #12]
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8da:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8de:	fb01 f202 	mul.w	r2, r1, r2
 800e8e2:	1a9b      	subs	r3, r3, r2
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d026      	beq.n	800e936 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7fe fbb3 	bl	800d058 <clust2sect>
 800e8f2:	6478      	str	r0, [r7, #68]	; 0x44
 800e8f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d103      	bne.n	800e902 <f_open+0x34a>
						res = FR_INT_ERR;
 800e8fa:	2302      	movs	r3, #2
 800e8fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e900:	e019      	b.n	800e936 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	899b      	ldrh	r3, [r3, #12]
 800e906:	461a      	mov	r2, r3
 800e908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e90a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e90e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e910:	441a      	add	r2, r3
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	7858      	ldrb	r0, [r3, #1]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6a1a      	ldr	r2, [r3, #32]
 800e924:	2301      	movs	r3, #1
 800e926:	f7fd ffeb 	bl	800c900 <disk_read>
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d002      	beq.n	800e936 <f_open+0x37e>
 800e930:	2301      	movs	r3, #1
 800e932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e936:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d002      	beq.n	800e944 <f_open+0x38c>
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2200      	movs	r2, #0
 800e942:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3760      	adds	r7, #96	; 0x60
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b08e      	sub	sp, #56	; 0x38
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	607a      	str	r2, [r7, #4]
 800e95c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	2200      	movs	r2, #0
 800e966:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f107 0214 	add.w	r2, r7, #20
 800e96e:	4611      	mov	r1, r2
 800e970:	4618      	mov	r0, r3
 800e972:	f7ff fda5 	bl	800e4c0 <validate>
 800e976:	4603      	mov	r3, r0
 800e978:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e97c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e980:	2b00      	cmp	r3, #0
 800e982:	d107      	bne.n	800e994 <f_read+0x44>
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	7d5b      	ldrb	r3, [r3, #21]
 800e988:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e98c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e990:	2b00      	cmp	r3, #0
 800e992:	d002      	beq.n	800e99a <f_read+0x4a>
 800e994:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e998:	e135      	b.n	800ec06 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	7d1b      	ldrb	r3, [r3, #20]
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d101      	bne.n	800e9aa <f_read+0x5a>
 800e9a6:	2307      	movs	r3, #7
 800e9a8:	e12d      	b.n	800ec06 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	68da      	ldr	r2, [r3, #12]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	699b      	ldr	r3, [r3, #24]
 800e9b2:	1ad3      	subs	r3, r2, r3
 800e9b4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	6a3b      	ldr	r3, [r7, #32]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	f240 811e 	bls.w	800ebfc <f_read+0x2ac>
 800e9c0:	6a3b      	ldr	r3, [r7, #32]
 800e9c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e9c4:	e11a      	b.n	800ebfc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	699b      	ldr	r3, [r3, #24]
 800e9ca:	697a      	ldr	r2, [r7, #20]
 800e9cc:	8992      	ldrh	r2, [r2, #12]
 800e9ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9d2:	fb01 f202 	mul.w	r2, r1, r2
 800e9d6:	1a9b      	subs	r3, r3, r2
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	f040 80d5 	bne.w	800eb88 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	699b      	ldr	r3, [r3, #24]
 800e9e2:	697a      	ldr	r2, [r7, #20]
 800e9e4:	8992      	ldrh	r2, [r2, #12]
 800e9e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9ea:	697a      	ldr	r2, [r7, #20]
 800e9ec:	8952      	ldrh	r2, [r2, #10]
 800e9ee:	3a01      	subs	r2, #1
 800e9f0:	4013      	ands	r3, r2
 800e9f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d12f      	bne.n	800ea5a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d103      	bne.n	800ea0a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	633b      	str	r3, [r7, #48]	; 0x30
 800ea08:	e013      	b.n	800ea32 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d007      	beq.n	800ea22 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	4619      	mov	r1, r3
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f7fe fe29 	bl	800d670 <clmt_clust>
 800ea1e:	6338      	str	r0, [r7, #48]	; 0x30
 800ea20:	e007      	b.n	800ea32 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	69db      	ldr	r3, [r3, #28]
 800ea28:	4619      	mov	r1, r3
 800ea2a:	4610      	mov	r0, r2
 800ea2c:	f7fe fb33 	bl	800d096 <get_fat>
 800ea30:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ea32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d804      	bhi.n	800ea42 <f_read+0xf2>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2202      	movs	r2, #2
 800ea3c:	755a      	strb	r2, [r3, #21]
 800ea3e:	2302      	movs	r3, #2
 800ea40:	e0e1      	b.n	800ec06 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ea42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea48:	d104      	bne.n	800ea54 <f_read+0x104>
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	755a      	strb	r2, [r3, #21]
 800ea50:	2301      	movs	r3, #1
 800ea52:	e0d8      	b.n	800ec06 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea58:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	69db      	ldr	r3, [r3, #28]
 800ea60:	4619      	mov	r1, r3
 800ea62:	4610      	mov	r0, r2
 800ea64:	f7fe faf8 	bl	800d058 <clust2sect>
 800ea68:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d104      	bne.n	800ea7a <f_read+0x12a>
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2202      	movs	r2, #2
 800ea74:	755a      	strb	r2, [r3, #21]
 800ea76:	2302      	movs	r3, #2
 800ea78:	e0c5      	b.n	800ec06 <f_read+0x2b6>
			sect += csect;
 800ea7a:	69ba      	ldr	r2, [r7, #24]
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	4413      	add	r3, r2
 800ea80:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	899b      	ldrh	r3, [r3, #12]
 800ea86:	461a      	mov	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea8e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ea90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d041      	beq.n	800eb1a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ea96:	69fa      	ldr	r2, [r7, #28]
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	4413      	add	r3, r2
 800ea9c:	697a      	ldr	r2, [r7, #20]
 800ea9e:	8952      	ldrh	r2, [r2, #10]
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d905      	bls.n	800eab0 <f_read+0x160>
					cc = fs->csize - csect;
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	895b      	ldrh	r3, [r3, #10]
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	7858      	ldrb	r0, [r3, #1]
 800eab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab6:	69ba      	ldr	r2, [r7, #24]
 800eab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eaba:	f7fd ff21 	bl	800c900 <disk_read>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d004      	beq.n	800eace <f_read+0x17e>
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2201      	movs	r2, #1
 800eac8:	755a      	strb	r2, [r3, #21]
 800eaca:	2301      	movs	r3, #1
 800eacc:	e09b      	b.n	800ec06 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	7d1b      	ldrb	r3, [r3, #20]
 800ead2:	b25b      	sxtb	r3, r3
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	da18      	bge.n	800eb0a <f_read+0x1ba>
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	6a1a      	ldr	r2, [r3, #32]
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	1ad3      	subs	r3, r2, r3
 800eae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d911      	bls.n	800eb0a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	6a1a      	ldr	r2, [r3, #32]
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	697a      	ldr	r2, [r7, #20]
 800eaf0:	8992      	ldrh	r2, [r2, #12]
 800eaf2:	fb02 f303 	mul.w	r3, r2, r3
 800eaf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaf8:	18d0      	adds	r0, r2, r3
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	899b      	ldrh	r3, [r3, #12]
 800eb04:	461a      	mov	r2, r3
 800eb06:	f7fd ffdb 	bl	800cac0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	899b      	ldrh	r3, [r3, #12]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb12:	fb02 f303 	mul.w	r3, r2, r3
 800eb16:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800eb18:	e05c      	b.n	800ebd4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6a1b      	ldr	r3, [r3, #32]
 800eb1e:	69ba      	ldr	r2, [r7, #24]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d02e      	beq.n	800eb82 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	7d1b      	ldrb	r3, [r3, #20]
 800eb28:	b25b      	sxtb	r3, r3
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	da18      	bge.n	800eb60 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	7858      	ldrb	r0, [r3, #1]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6a1a      	ldr	r2, [r3, #32]
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	f7fd feff 	bl	800c940 <disk_write>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d004      	beq.n	800eb52 <f_read+0x202>
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	755a      	strb	r2, [r3, #21]
 800eb4e:	2301      	movs	r3, #1
 800eb50:	e059      	b.n	800ec06 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	7d1b      	ldrb	r3, [r3, #20]
 800eb56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb5a:	b2da      	uxtb	r2, r3
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	7858      	ldrb	r0, [r3, #1]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	69ba      	ldr	r2, [r7, #24]
 800eb6e:	f7fd fec7 	bl	800c900 <disk_read>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d004      	beq.n	800eb82 <f_read+0x232>
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	755a      	strb	r2, [r3, #21]
 800eb7e:	2301      	movs	r3, #1
 800eb80:	e041      	b.n	800ec06 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	69ba      	ldr	r2, [r7, #24]
 800eb86:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	899b      	ldrh	r3, [r3, #12]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	699b      	ldr	r3, [r3, #24]
 800eb92:	697a      	ldr	r2, [r7, #20]
 800eb94:	8992      	ldrh	r2, [r2, #12]
 800eb96:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb9a:	fb01 f202 	mul.w	r2, r1, r2
 800eb9e:	1a9b      	subs	r3, r3, r2
 800eba0:	1ac3      	subs	r3, r0, r3
 800eba2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800eba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d901      	bls.n	800ebb0 <f_read+0x260>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	699b      	ldr	r3, [r3, #24]
 800ebba:	697a      	ldr	r2, [r7, #20]
 800ebbc:	8992      	ldrh	r2, [r2, #12]
 800ebbe:	fbb3 f0f2 	udiv	r0, r3, r2
 800ebc2:	fb00 f202 	mul.w	r2, r0, r2
 800ebc6:	1a9b      	subs	r3, r3, r2
 800ebc8:	440b      	add	r3, r1
 800ebca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebcc:	4619      	mov	r1, r3
 800ebce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebd0:	f7fd ff76 	bl	800cac0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ebd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd8:	4413      	add	r3, r2
 800ebda:	627b      	str	r3, [r7, #36]	; 0x24
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	699a      	ldr	r2, [r3, #24]
 800ebe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe2:	441a      	add	r2, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	619a      	str	r2, [r3, #24]
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebee:	441a      	add	r2, r3
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	601a      	str	r2, [r3, #0]
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	f47f aee1 	bne.w	800e9c6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ec04:	2300      	movs	r3, #0
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3738      	adds	r7, #56	; 0x38
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b08c      	sub	sp, #48	; 0x30
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	60f8      	str	r0, [r7, #12]
 800ec16:	60b9      	str	r1, [r7, #8]
 800ec18:	607a      	str	r2, [r7, #4]
 800ec1a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	2200      	movs	r2, #0
 800ec24:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f107 0210 	add.w	r2, r7, #16
 800ec2c:	4611      	mov	r1, r2
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7ff fc46 	bl	800e4c0 <validate>
 800ec34:	4603      	mov	r3, r0
 800ec36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ec3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d107      	bne.n	800ec52 <f_write+0x44>
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	7d5b      	ldrb	r3, [r3, #21]
 800ec46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ec4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d002      	beq.n	800ec58 <f_write+0x4a>
 800ec52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec56:	e16a      	b.n	800ef2e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	7d1b      	ldrb	r3, [r3, #20]
 800ec5c:	f003 0302 	and.w	r3, r3, #2
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d101      	bne.n	800ec68 <f_write+0x5a>
 800ec64:	2307      	movs	r3, #7
 800ec66:	e162      	b.n	800ef2e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	699a      	ldr	r2, [r3, #24]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	441a      	add	r2, r3
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	699b      	ldr	r3, [r3, #24]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	f080 814c 	bcs.w	800ef12 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	699b      	ldr	r3, [r3, #24]
 800ec7e:	43db      	mvns	r3, r3
 800ec80:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ec82:	e146      	b.n	800ef12 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	699b      	ldr	r3, [r3, #24]
 800ec88:	693a      	ldr	r2, [r7, #16]
 800ec8a:	8992      	ldrh	r2, [r2, #12]
 800ec8c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec90:	fb01 f202 	mul.w	r2, r1, r2
 800ec94:	1a9b      	subs	r3, r3, r2
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	f040 80f1 	bne.w	800ee7e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	699b      	ldr	r3, [r3, #24]
 800eca0:	693a      	ldr	r2, [r7, #16]
 800eca2:	8992      	ldrh	r2, [r2, #12]
 800eca4:	fbb3 f3f2 	udiv	r3, r3, r2
 800eca8:	693a      	ldr	r2, [r7, #16]
 800ecaa:	8952      	ldrh	r2, [r2, #10]
 800ecac:	3a01      	subs	r2, #1
 800ecae:	4013      	ands	r3, r2
 800ecb0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d143      	bne.n	800ed40 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	699b      	ldr	r3, [r3, #24]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d10c      	bne.n	800ecda <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	689b      	ldr	r3, [r3, #8]
 800ecc4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ecc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d11a      	bne.n	800ed02 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2100      	movs	r1, #0
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7fe fc35 	bl	800d540 <create_chain>
 800ecd6:	62b8      	str	r0, [r7, #40]	; 0x28
 800ecd8:	e013      	b.n	800ed02 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d007      	beq.n	800ecf2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	699b      	ldr	r3, [r3, #24]
 800ece6:	4619      	mov	r1, r3
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f7fe fcc1 	bl	800d670 <clmt_clust>
 800ecee:	62b8      	str	r0, [r7, #40]	; 0x28
 800ecf0:	e007      	b.n	800ed02 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ecf2:	68fa      	ldr	r2, [r7, #12]
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	69db      	ldr	r3, [r3, #28]
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	4610      	mov	r0, r2
 800ecfc:	f7fe fc20 	bl	800d540 <create_chain>
 800ed00:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f000 8109 	beq.w	800ef1c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ed0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d104      	bne.n	800ed1a <f_write+0x10c>
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2202      	movs	r2, #2
 800ed14:	755a      	strb	r2, [r3, #21]
 800ed16:	2302      	movs	r3, #2
 800ed18:	e109      	b.n	800ef2e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed20:	d104      	bne.n	800ed2c <f_write+0x11e>
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2201      	movs	r2, #1
 800ed26:	755a      	strb	r2, [r3, #21]
 800ed28:	2301      	movs	r3, #1
 800ed2a:	e100      	b.n	800ef2e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed30:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	689b      	ldr	r3, [r3, #8]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d102      	bne.n	800ed40 <f_write+0x132>
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed3e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	7d1b      	ldrb	r3, [r3, #20]
 800ed44:	b25b      	sxtb	r3, r3
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	da18      	bge.n	800ed7c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	7858      	ldrb	r0, [r3, #1]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6a1a      	ldr	r2, [r3, #32]
 800ed58:	2301      	movs	r3, #1
 800ed5a:	f7fd fdf1 	bl	800c940 <disk_write>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d004      	beq.n	800ed6e <f_write+0x160>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2201      	movs	r2, #1
 800ed68:	755a      	strb	r2, [r3, #21]
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e0df      	b.n	800ef2e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	7d1b      	ldrb	r3, [r3, #20]
 800ed72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed76:	b2da      	uxtb	r2, r3
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ed7c:	693a      	ldr	r2, [r7, #16]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	69db      	ldr	r3, [r3, #28]
 800ed82:	4619      	mov	r1, r3
 800ed84:	4610      	mov	r0, r2
 800ed86:	f7fe f967 	bl	800d058 <clust2sect>
 800ed8a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d104      	bne.n	800ed9c <f_write+0x18e>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2202      	movs	r2, #2
 800ed96:	755a      	strb	r2, [r3, #21]
 800ed98:	2302      	movs	r3, #2
 800ed9a:	e0c8      	b.n	800ef2e <f_write+0x320>
			sect += csect;
 800ed9c:	697a      	ldr	r2, [r7, #20]
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	4413      	add	r3, r2
 800eda2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	899b      	ldrh	r3, [r3, #12]
 800eda8:	461a      	mov	r2, r3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	fbb3 f3f2 	udiv	r3, r3, r2
 800edb0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800edb2:	6a3b      	ldr	r3, [r7, #32]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d043      	beq.n	800ee40 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800edb8:	69ba      	ldr	r2, [r7, #24]
 800edba:	6a3b      	ldr	r3, [r7, #32]
 800edbc:	4413      	add	r3, r2
 800edbe:	693a      	ldr	r2, [r7, #16]
 800edc0:	8952      	ldrh	r2, [r2, #10]
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d905      	bls.n	800edd2 <f_write+0x1c4>
					cc = fs->csize - csect;
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	895b      	ldrh	r3, [r3, #10]
 800edca:	461a      	mov	r2, r3
 800edcc:	69bb      	ldr	r3, [r7, #24]
 800edce:	1ad3      	subs	r3, r2, r3
 800edd0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	7858      	ldrb	r0, [r3, #1]
 800edd6:	6a3b      	ldr	r3, [r7, #32]
 800edd8:	697a      	ldr	r2, [r7, #20]
 800edda:	69f9      	ldr	r1, [r7, #28]
 800eddc:	f7fd fdb0 	bl	800c940 <disk_write>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d004      	beq.n	800edf0 <f_write+0x1e2>
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2201      	movs	r2, #1
 800edea:	755a      	strb	r2, [r3, #21]
 800edec:	2301      	movs	r3, #1
 800edee:	e09e      	b.n	800ef2e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6a1a      	ldr	r2, [r3, #32]
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	6a3a      	ldr	r2, [r7, #32]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d918      	bls.n	800ee30 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6a1a      	ldr	r2, [r3, #32]
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	1ad3      	subs	r3, r2, r3
 800ee0c:	693a      	ldr	r2, [r7, #16]
 800ee0e:	8992      	ldrh	r2, [r2, #12]
 800ee10:	fb02 f303 	mul.w	r3, r2, r3
 800ee14:	69fa      	ldr	r2, [r7, #28]
 800ee16:	18d1      	adds	r1, r2, r3
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	899b      	ldrh	r3, [r3, #12]
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	f7fd fe4f 	bl	800cac0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	7d1b      	ldrb	r3, [r3, #20]
 800ee26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	899b      	ldrh	r3, [r3, #12]
 800ee34:	461a      	mov	r2, r3
 800ee36:	6a3b      	ldr	r3, [r7, #32]
 800ee38:	fb02 f303 	mul.w	r3, r2, r3
 800ee3c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ee3e:	e04b      	b.n	800eed8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6a1b      	ldr	r3, [r3, #32]
 800ee44:	697a      	ldr	r2, [r7, #20]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d016      	beq.n	800ee78 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	699a      	ldr	r2, [r3, #24]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d210      	bcs.n	800ee78 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	7858      	ldrb	r0, [r3, #1]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee60:	2301      	movs	r3, #1
 800ee62:	697a      	ldr	r2, [r7, #20]
 800ee64:	f7fd fd4c 	bl	800c900 <disk_read>
 800ee68:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d004      	beq.n	800ee78 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2201      	movs	r2, #1
 800ee72:	755a      	strb	r2, [r3, #21]
 800ee74:	2301      	movs	r3, #1
 800ee76:	e05a      	b.n	800ef2e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	697a      	ldr	r2, [r7, #20]
 800ee7c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	899b      	ldrh	r3, [r3, #12]
 800ee82:	4618      	mov	r0, r3
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	693a      	ldr	r2, [r7, #16]
 800ee8a:	8992      	ldrh	r2, [r2, #12]
 800ee8c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee90:	fb01 f202 	mul.w	r2, r1, r2
 800ee94:	1a9b      	subs	r3, r3, r2
 800ee96:	1ac3      	subs	r3, r0, r3
 800ee98:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ee9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d901      	bls.n	800eea6 <f_write+0x298>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	699b      	ldr	r3, [r3, #24]
 800eeb0:	693a      	ldr	r2, [r7, #16]
 800eeb2:	8992      	ldrh	r2, [r2, #12]
 800eeb4:	fbb3 f0f2 	udiv	r0, r3, r2
 800eeb8:	fb00 f202 	mul.w	r2, r0, r2
 800eebc:	1a9b      	subs	r3, r3, r2
 800eebe:	440b      	add	r3, r1
 800eec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eec2:	69f9      	ldr	r1, [r7, #28]
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7fd fdfb 	bl	800cac0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	7d1b      	ldrb	r3, [r3, #20]
 800eece:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800eed8:	69fa      	ldr	r2, [r7, #28]
 800eeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eedc:	4413      	add	r3, r2
 800eede:	61fb      	str	r3, [r7, #28]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	699a      	ldr	r2, [r3, #24]
 800eee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee6:	441a      	add	r2, r3
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	619a      	str	r2, [r3, #24]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	68da      	ldr	r2, [r3, #12]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	699b      	ldr	r3, [r3, #24]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	bf38      	it	cc
 800eef8:	461a      	movcc	r2, r3
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	60da      	str	r2, [r3, #12]
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef04:	441a      	add	r2, r3
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	601a      	str	r2, [r3, #0]
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0e:	1ad3      	subs	r3, r2, r3
 800ef10:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	f47f aeb5 	bne.w	800ec84 <f_write+0x76>
 800ef1a:	e000      	b.n	800ef1e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ef1c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	7d1b      	ldrb	r3, [r3, #20]
 800ef22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef26:	b2da      	uxtb	r2, r3
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3730      	adds	r7, #48	; 0x30
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b086      	sub	sp, #24
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f107 0208 	add.w	r2, r7, #8
 800ef44:	4611      	mov	r1, r2
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7ff faba 	bl	800e4c0 <validate>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ef50:	7dfb      	ldrb	r3, [r7, #23]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d168      	bne.n	800f028 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	7d1b      	ldrb	r3, [r3, #20]
 800ef5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d062      	beq.n	800f028 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	7d1b      	ldrb	r3, [r3, #20]
 800ef66:	b25b      	sxtb	r3, r3
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	da15      	bge.n	800ef98 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	7858      	ldrb	r0, [r3, #1]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6a1a      	ldr	r2, [r3, #32]
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	f7fd fce0 	bl	800c940 <disk_write>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d001      	beq.n	800ef8a <f_sync+0x54>
 800ef86:	2301      	movs	r3, #1
 800ef88:	e04f      	b.n	800f02a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	7d1b      	ldrb	r3, [r3, #20]
 800ef8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef92:	b2da      	uxtb	r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ef98:	f7fd fb06 	bl	800c5a8 <get_fattime>
 800ef9c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ef9e:	68ba      	ldr	r2, [r7, #8]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa4:	4619      	mov	r1, r3
 800efa6:	4610      	mov	r0, r2
 800efa8:	f7fd ffb8 	bl	800cf1c <move_window>
 800efac:	4603      	mov	r3, r0
 800efae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800efb0:	7dfb      	ldrb	r3, [r7, #23]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d138      	bne.n	800f028 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	330b      	adds	r3, #11
 800efc0:	781a      	ldrb	r2, [r3, #0]
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	330b      	adds	r3, #11
 800efc6:	f042 0220 	orr.w	r2, r2, #32
 800efca:	b2d2      	uxtb	r2, r2
 800efcc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6818      	ldr	r0, [r3, #0]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	689b      	ldr	r3, [r3, #8]
 800efd6:	461a      	mov	r2, r3
 800efd8:	68f9      	ldr	r1, [r7, #12]
 800efda:	f7fe fd46 	bl	800da6a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f103 021c 	add.w	r2, r3, #28
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	4619      	mov	r1, r3
 800efea:	4610      	mov	r0, r2
 800efec:	f7fd fd3c 	bl	800ca68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	3316      	adds	r3, #22
 800eff4:	6939      	ldr	r1, [r7, #16]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7fd fd36 	bl	800ca68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	3312      	adds	r3, #18
 800f000:	2100      	movs	r1, #0
 800f002:	4618      	mov	r0, r3
 800f004:	f7fd fd15 	bl	800ca32 <st_word>
					fs->wflag = 1;
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	2201      	movs	r2, #1
 800f00c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	4618      	mov	r0, r3
 800f012:	f7fd ffb1 	bl	800cf78 <sync_fs>
 800f016:	4603      	mov	r3, r0
 800f018:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	7d1b      	ldrb	r3, [r3, #20]
 800f01e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f022:	b2da      	uxtb	r2, r3
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f028:	7dfb      	ldrb	r3, [r7, #23]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3718      	adds	r7, #24
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b084      	sub	sp, #16
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7ff ff7b 	bl	800ef36 <f_sync>
 800f040:	4603      	mov	r3, r0
 800f042:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f044:	7bfb      	ldrb	r3, [r7, #15]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d118      	bne.n	800f07c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f107 0208 	add.w	r2, r7, #8
 800f050:	4611      	mov	r1, r2
 800f052:	4618      	mov	r0, r3
 800f054:	f7ff fa34 	bl	800e4c0 <validate>
 800f058:	4603      	mov	r3, r0
 800f05a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f05c:	7bfb      	ldrb	r3, [r7, #15]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d10c      	bne.n	800f07c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	691b      	ldr	r3, [r3, #16]
 800f066:	4618      	mov	r0, r3
 800f068:	f7fd feb4 	bl	800cdd4 <dec_lock>
 800f06c:	4603      	mov	r3, r0
 800f06e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f070:	7bfb      	ldrb	r3, [r7, #15]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d102      	bne.n	800f07c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2200      	movs	r2, #0
 800f07a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b090      	sub	sp, #64	; 0x40
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
 800f08e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f090:	f107 010c 	add.w	r1, r7, #12
 800f094:	1d3b      	adds	r3, r7, #4
 800f096:	2200      	movs	r2, #0
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fe ff91 	bl	800dfc0 <find_volume>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800f0a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d11f      	bne.n	800f0ec <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	f107 030c 	add.w	r3, r7, #12
 800f0b2:	4611      	mov	r1, r2
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7fe fe73 	bl	800dda0 <follow_path>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800f0c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d111      	bne.n	800f0ec <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f0c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f0cc:	b25b      	sxtb	r3, r3
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	da03      	bge.n	800f0da <f_stat+0x54>
				res = FR_INVALID_NAME;
 800f0d2:	2306      	movs	r3, #6
 800f0d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f0d8:	e008      	b.n	800f0ec <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d005      	beq.n	800f0ec <f_stat+0x66>
 800f0e0:	f107 030c 	add.w	r3, r7, #12
 800f0e4:	6839      	ldr	r1, [r7, #0]
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7fe fd66 	bl	800dbb8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800f0ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3740      	adds	r7, #64	; 0x40
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b096      	sub	sp, #88	; 0x58
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f100:	f107 0108 	add.w	r1, r7, #8
 800f104:	1d3b      	adds	r3, r7, #4
 800f106:	2202      	movs	r2, #2
 800f108:	4618      	mov	r0, r3
 800f10a:	f7fe ff59 	bl	800dfc0 <find_volume>
 800f10e:	4603      	mov	r3, r0
 800f110:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800f118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f040 80f2 	bne.w	800f306 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800f122:	687a      	ldr	r2, [r7, #4]
 800f124:	f107 030c 	add.w	r3, r7, #12
 800f128:	4611      	mov	r1, r2
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fe fe38 	bl	800dda0 <follow_path>
 800f130:	4603      	mov	r3, r0
 800f132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800f136:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d102      	bne.n	800f144 <f_mkdir+0x4c>
 800f13e:	2308      	movs	r3, #8
 800f140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800f144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f148:	2b04      	cmp	r3, #4
 800f14a:	f040 80dc 	bne.w	800f306 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800f14e:	f107 030c 	add.w	r3, r7, #12
 800f152:	2100      	movs	r1, #0
 800f154:	4618      	mov	r0, r3
 800f156:	f7fe f9f3 	bl	800d540 <create_chain>
 800f15a:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	895b      	ldrh	r3, [r3, #10]
 800f160:	461a      	mov	r2, r3
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	899b      	ldrh	r3, [r3, #12]
 800f166:	fb02 f303 	mul.w	r3, r2, r3
 800f16a:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800f16c:	2300      	movs	r3, #0
 800f16e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800f172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f174:	2b00      	cmp	r3, #0
 800f176:	d102      	bne.n	800f17e <f_mkdir+0x86>
 800f178:	2307      	movs	r3, #7
 800f17a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800f17e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f180:	2b01      	cmp	r3, #1
 800f182:	d102      	bne.n	800f18a <f_mkdir+0x92>
 800f184:	2302      	movs	r3, #2
 800f186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f18a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f190:	d102      	bne.n	800f198 <f_mkdir+0xa0>
 800f192:	2301      	movs	r3, #1
 800f194:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800f198:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d106      	bne.n	800f1ae <f_mkdir+0xb6>
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fd fe76 	bl	800ce94 <sync_window>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800f1ae:	f7fd f9fb 	bl	800c5a8 <get_fattime>
 800f1b2:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800f1b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d16c      	bne.n	800f296 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7fd ff49 	bl	800d058 <clust2sect>
 800f1c6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	3334      	adds	r3, #52	; 0x34
 800f1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	899b      	ldrh	r3, [r3, #12]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f1d8:	f7fd fc93 	bl	800cb02 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800f1dc:	220b      	movs	r2, #11
 800f1de:	2120      	movs	r1, #32
 800f1e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f1e2:	f7fd fc8e 	bl	800cb02 <mem_set>
					dir[DIR_Name] = '.';
 800f1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1e8:	222e      	movs	r2, #46	; 0x2e
 800f1ea:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800f1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ee:	330b      	adds	r3, #11
 800f1f0:	2210      	movs	r2, #16
 800f1f2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800f1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1f6:	3316      	adds	r3, #22
 800f1f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7fd fc34 	bl	800ca68 <st_dword>
					st_clust(fs, dir, dcl);
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f204:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f206:	4618      	mov	r0, r3
 800f208:	f7fe fc2f 	bl	800da6a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800f20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f20e:	3320      	adds	r3, #32
 800f210:	2220      	movs	r2, #32
 800f212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f214:	4618      	mov	r0, r3
 800f216:	f7fd fc53 	bl	800cac0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800f21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f21c:	3321      	adds	r3, #33	; 0x21
 800f21e:	222e      	movs	r2, #46	; 0x2e
 800f220:	701a      	strb	r2, [r3, #0]
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	2b03      	cmp	r3, #3
 800f22c:	d106      	bne.n	800f23c <f_mkdir+0x144>
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f234:	429a      	cmp	r2, r3
 800f236:	d101      	bne.n	800f23c <f_mkdir+0x144>
 800f238:	2300      	movs	r3, #0
 800f23a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800f23c:	68b8      	ldr	r0, [r7, #8]
 800f23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f240:	3320      	adds	r3, #32
 800f242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f244:	4619      	mov	r1, r3
 800f246:	f7fe fc10 	bl	800da6a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	895b      	ldrh	r3, [r3, #10]
 800f24e:	653b      	str	r3, [r7, #80]	; 0x50
 800f250:	e01c      	b.n	800f28c <f_mkdir+0x194>
					fs->winsect = dsc++;
 800f252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f254:	1c5a      	adds	r2, r3, #1
 800f256:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f258:	68ba      	ldr	r2, [r7, #8]
 800f25a:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	2201      	movs	r2, #1
 800f260:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	4618      	mov	r0, r3
 800f266:	f7fd fe15 	bl	800ce94 <sync_window>
 800f26a:	4603      	mov	r3, r0
 800f26c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800f270:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f274:	2b00      	cmp	r3, #0
 800f276:	d10d      	bne.n	800f294 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	899b      	ldrh	r3, [r3, #12]
 800f27c:	461a      	mov	r2, r3
 800f27e:	2100      	movs	r1, #0
 800f280:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f282:	f7fd fc3e 	bl	800cb02 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f288:	3b01      	subs	r3, #1
 800f28a:	653b      	str	r3, [r7, #80]	; 0x50
 800f28c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1df      	bne.n	800f252 <f_mkdir+0x15a>
 800f292:	e000      	b.n	800f296 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800f294:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800f296:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d107      	bne.n	800f2ae <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800f29e:	f107 030c 	add.w	r3, r7, #12
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7fe fc56 	bl	800db54 <dir_register>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800f2ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d120      	bne.n	800f2f8 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800f2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2bc:	3316      	adds	r3, #22
 800f2be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fd fbd1 	bl	800ca68 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7fe fbcc 	bl	800da6a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800f2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2d4:	330b      	adds	r3, #11
 800f2d6:	2210      	movs	r2, #16
 800f2d8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	2201      	movs	r2, #1
 800f2de:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800f2e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d10e      	bne.n	800f306 <f_mkdir+0x20e>
					res = sync_fs(fs);
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fd fe44 	bl	800cf78 <sync_fs>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800f2f6:	e006      	b.n	800f306 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800f2f8:	f107 030c 	add.w	r3, r7, #12
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f300:	4618      	mov	r0, r3
 800f302:	f7fe f8b8 	bl	800d476 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f306:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3758      	adds	r7, #88	; 0x58
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
	...

0800f314 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f314:	b480      	push	{r7}
 800f316:	b087      	sub	sp, #28
 800f318:	af00      	add	r7, sp, #0
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	4613      	mov	r3, r2
 800f320:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f322:	2301      	movs	r3, #1
 800f324:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f326:	2300      	movs	r3, #0
 800f328:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f32a:	4b1f      	ldr	r3, [pc, #124]	; (800f3a8 <FATFS_LinkDriverEx+0x94>)
 800f32c:	7a5b      	ldrb	r3, [r3, #9]
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	2b00      	cmp	r3, #0
 800f332:	d131      	bne.n	800f398 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f334:	4b1c      	ldr	r3, [pc, #112]	; (800f3a8 <FATFS_LinkDriverEx+0x94>)
 800f336:	7a5b      	ldrb	r3, [r3, #9]
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	461a      	mov	r2, r3
 800f33c:	4b1a      	ldr	r3, [pc, #104]	; (800f3a8 <FATFS_LinkDriverEx+0x94>)
 800f33e:	2100      	movs	r1, #0
 800f340:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f342:	4b19      	ldr	r3, [pc, #100]	; (800f3a8 <FATFS_LinkDriverEx+0x94>)
 800f344:	7a5b      	ldrb	r3, [r3, #9]
 800f346:	b2db      	uxtb	r3, r3
 800f348:	4a17      	ldr	r2, [pc, #92]	; (800f3a8 <FATFS_LinkDriverEx+0x94>)
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	4413      	add	r3, r2
 800f34e:	68fa      	ldr	r2, [r7, #12]
 800f350:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f352:	4b15      	ldr	r3, [pc, #84]	; (800f3a8 <FATFS_LinkDriverEx+0x94>)
 800f354:	7a5b      	ldrb	r3, [r3, #9]
 800f356:	b2db      	uxtb	r3, r3
 800f358:	461a      	mov	r2, r3
 800f35a:	4b13      	ldr	r3, [pc, #76]	; (800f3a8 <FATFS_LinkDriverEx+0x94>)
 800f35c:	4413      	add	r3, r2
 800f35e:	79fa      	ldrb	r2, [r7, #7]
 800f360:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f362:	4b11      	ldr	r3, [pc, #68]	; (800f3a8 <FATFS_LinkDriverEx+0x94>)
 800f364:	7a5b      	ldrb	r3, [r3, #9]
 800f366:	b2db      	uxtb	r3, r3
 800f368:	1c5a      	adds	r2, r3, #1
 800f36a:	b2d1      	uxtb	r1, r2
 800f36c:	4a0e      	ldr	r2, [pc, #56]	; (800f3a8 <FATFS_LinkDriverEx+0x94>)
 800f36e:	7251      	strb	r1, [r2, #9]
 800f370:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f372:	7dbb      	ldrb	r3, [r7, #22]
 800f374:	3330      	adds	r3, #48	; 0x30
 800f376:	b2da      	uxtb	r2, r3
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	3301      	adds	r3, #1
 800f380:	223a      	movs	r2, #58	; 0x3a
 800f382:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	3302      	adds	r3, #2
 800f388:	222f      	movs	r2, #47	; 0x2f
 800f38a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	3303      	adds	r3, #3
 800f390:	2200      	movs	r2, #0
 800f392:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f394:	2300      	movs	r3, #0
 800f396:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f398:	7dfb      	ldrb	r3, [r7, #23]
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	371c      	adds	r7, #28
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop
 800f3a8:	20005b84 	.word	0x20005b84

0800f3ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	6839      	ldr	r1, [r7, #0]
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7ff ffaa 	bl	800f314 <FATFS_LinkDriverEx>
 800f3c0:	4603      	mov	r3, r0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3708      	adds	r7, #8
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
	...

0800f3cc <__assert_func>:
 800f3cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3ce:	4614      	mov	r4, r2
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	4b09      	ldr	r3, [pc, #36]	; (800f3f8 <__assert_func+0x2c>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4605      	mov	r5, r0
 800f3d8:	68d8      	ldr	r0, [r3, #12]
 800f3da:	b14c      	cbz	r4, 800f3f0 <__assert_func+0x24>
 800f3dc:	4b07      	ldr	r3, [pc, #28]	; (800f3fc <__assert_func+0x30>)
 800f3de:	9100      	str	r1, [sp, #0]
 800f3e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f3e4:	4906      	ldr	r1, [pc, #24]	; (800f400 <__assert_func+0x34>)
 800f3e6:	462b      	mov	r3, r5
 800f3e8:	f000 f814 	bl	800f414 <fiprintf>
 800f3ec:	f001 f86a 	bl	80104c4 <abort>
 800f3f0:	4b04      	ldr	r3, [pc, #16]	; (800f404 <__assert_func+0x38>)
 800f3f2:	461c      	mov	r4, r3
 800f3f4:	e7f3      	b.n	800f3de <__assert_func+0x12>
 800f3f6:	bf00      	nop
 800f3f8:	200000d4 	.word	0x200000d4
 800f3fc:	0802d570 	.word	0x0802d570
 800f400:	0802d57d 	.word	0x0802d57d
 800f404:	0802d5ab 	.word	0x0802d5ab

0800f408 <__errno>:
 800f408:	4b01      	ldr	r3, [pc, #4]	; (800f410 <__errno+0x8>)
 800f40a:	6818      	ldr	r0, [r3, #0]
 800f40c:	4770      	bx	lr
 800f40e:	bf00      	nop
 800f410:	200000d4 	.word	0x200000d4

0800f414 <fiprintf>:
 800f414:	b40e      	push	{r1, r2, r3}
 800f416:	b503      	push	{r0, r1, lr}
 800f418:	4601      	mov	r1, r0
 800f41a:	ab03      	add	r3, sp, #12
 800f41c:	4805      	ldr	r0, [pc, #20]	; (800f434 <fiprintf+0x20>)
 800f41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f422:	6800      	ldr	r0, [r0, #0]
 800f424:	9301      	str	r3, [sp, #4]
 800f426:	f000 f95b 	bl	800f6e0 <_vfiprintf_r>
 800f42a:	b002      	add	sp, #8
 800f42c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f430:	b003      	add	sp, #12
 800f432:	4770      	bx	lr
 800f434:	200000d4 	.word	0x200000d4

0800f438 <__libc_init_array>:
 800f438:	b570      	push	{r4, r5, r6, lr}
 800f43a:	4d0d      	ldr	r5, [pc, #52]	; (800f470 <__libc_init_array+0x38>)
 800f43c:	4c0d      	ldr	r4, [pc, #52]	; (800f474 <__libc_init_array+0x3c>)
 800f43e:	1b64      	subs	r4, r4, r5
 800f440:	10a4      	asrs	r4, r4, #2
 800f442:	2600      	movs	r6, #0
 800f444:	42a6      	cmp	r6, r4
 800f446:	d109      	bne.n	800f45c <__libc_init_array+0x24>
 800f448:	4d0b      	ldr	r5, [pc, #44]	; (800f478 <__libc_init_array+0x40>)
 800f44a:	4c0c      	ldr	r4, [pc, #48]	; (800f47c <__libc_init_array+0x44>)
 800f44c:	f003 fe36 	bl	80130bc <_init>
 800f450:	1b64      	subs	r4, r4, r5
 800f452:	10a4      	asrs	r4, r4, #2
 800f454:	2600      	movs	r6, #0
 800f456:	42a6      	cmp	r6, r4
 800f458:	d105      	bne.n	800f466 <__libc_init_array+0x2e>
 800f45a:	bd70      	pop	{r4, r5, r6, pc}
 800f45c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f460:	4798      	blx	r3
 800f462:	3601      	adds	r6, #1
 800f464:	e7ee      	b.n	800f444 <__libc_init_array+0xc>
 800f466:	f855 3b04 	ldr.w	r3, [r5], #4
 800f46a:	4798      	blx	r3
 800f46c:	3601      	adds	r6, #1
 800f46e:	e7f2      	b.n	800f456 <__libc_init_array+0x1e>
 800f470:	0802d988 	.word	0x0802d988
 800f474:	0802d988 	.word	0x0802d988
 800f478:	0802d988 	.word	0x0802d988
 800f47c:	0802d98c 	.word	0x0802d98c

0800f480 <malloc>:
 800f480:	4b02      	ldr	r3, [pc, #8]	; (800f48c <malloc+0xc>)
 800f482:	4601      	mov	r1, r0
 800f484:	6818      	ldr	r0, [r3, #0]
 800f486:	f000 b88d 	b.w	800f5a4 <_malloc_r>
 800f48a:	bf00      	nop
 800f48c:	200000d4 	.word	0x200000d4

0800f490 <free>:
 800f490:	4b02      	ldr	r3, [pc, #8]	; (800f49c <free+0xc>)
 800f492:	4601      	mov	r1, r0
 800f494:	6818      	ldr	r0, [r3, #0]
 800f496:	f000 b819 	b.w	800f4cc <_free_r>
 800f49a:	bf00      	nop
 800f49c:	200000d4 	.word	0x200000d4

0800f4a0 <memcpy>:
 800f4a0:	440a      	add	r2, r1
 800f4a2:	4291      	cmp	r1, r2
 800f4a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4a8:	d100      	bne.n	800f4ac <memcpy+0xc>
 800f4aa:	4770      	bx	lr
 800f4ac:	b510      	push	{r4, lr}
 800f4ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4b6:	4291      	cmp	r1, r2
 800f4b8:	d1f9      	bne.n	800f4ae <memcpy+0xe>
 800f4ba:	bd10      	pop	{r4, pc}

0800f4bc <memset>:
 800f4bc:	4402      	add	r2, r0
 800f4be:	4603      	mov	r3, r0
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d100      	bne.n	800f4c6 <memset+0xa>
 800f4c4:	4770      	bx	lr
 800f4c6:	f803 1b01 	strb.w	r1, [r3], #1
 800f4ca:	e7f9      	b.n	800f4c0 <memset+0x4>

0800f4cc <_free_r>:
 800f4cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4ce:	2900      	cmp	r1, #0
 800f4d0:	d044      	beq.n	800f55c <_free_r+0x90>
 800f4d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4d6:	9001      	str	r0, [sp, #4]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	f1a1 0404 	sub.w	r4, r1, #4
 800f4de:	bfb8      	it	lt
 800f4e0:	18e4      	addlt	r4, r4, r3
 800f4e2:	f002 f8e7 	bl	80116b4 <__malloc_lock>
 800f4e6:	4a1e      	ldr	r2, [pc, #120]	; (800f560 <_free_r+0x94>)
 800f4e8:	9801      	ldr	r0, [sp, #4]
 800f4ea:	6813      	ldr	r3, [r2, #0]
 800f4ec:	b933      	cbnz	r3, 800f4fc <_free_r+0x30>
 800f4ee:	6063      	str	r3, [r4, #4]
 800f4f0:	6014      	str	r4, [r2, #0]
 800f4f2:	b003      	add	sp, #12
 800f4f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4f8:	f002 b8e2 	b.w	80116c0 <__malloc_unlock>
 800f4fc:	42a3      	cmp	r3, r4
 800f4fe:	d908      	bls.n	800f512 <_free_r+0x46>
 800f500:	6825      	ldr	r5, [r4, #0]
 800f502:	1961      	adds	r1, r4, r5
 800f504:	428b      	cmp	r3, r1
 800f506:	bf01      	itttt	eq
 800f508:	6819      	ldreq	r1, [r3, #0]
 800f50a:	685b      	ldreq	r3, [r3, #4]
 800f50c:	1949      	addeq	r1, r1, r5
 800f50e:	6021      	streq	r1, [r4, #0]
 800f510:	e7ed      	b.n	800f4ee <_free_r+0x22>
 800f512:	461a      	mov	r2, r3
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	b10b      	cbz	r3, 800f51c <_free_r+0x50>
 800f518:	42a3      	cmp	r3, r4
 800f51a:	d9fa      	bls.n	800f512 <_free_r+0x46>
 800f51c:	6811      	ldr	r1, [r2, #0]
 800f51e:	1855      	adds	r5, r2, r1
 800f520:	42a5      	cmp	r5, r4
 800f522:	d10b      	bne.n	800f53c <_free_r+0x70>
 800f524:	6824      	ldr	r4, [r4, #0]
 800f526:	4421      	add	r1, r4
 800f528:	1854      	adds	r4, r2, r1
 800f52a:	42a3      	cmp	r3, r4
 800f52c:	6011      	str	r1, [r2, #0]
 800f52e:	d1e0      	bne.n	800f4f2 <_free_r+0x26>
 800f530:	681c      	ldr	r4, [r3, #0]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	6053      	str	r3, [r2, #4]
 800f536:	4421      	add	r1, r4
 800f538:	6011      	str	r1, [r2, #0]
 800f53a:	e7da      	b.n	800f4f2 <_free_r+0x26>
 800f53c:	d902      	bls.n	800f544 <_free_r+0x78>
 800f53e:	230c      	movs	r3, #12
 800f540:	6003      	str	r3, [r0, #0]
 800f542:	e7d6      	b.n	800f4f2 <_free_r+0x26>
 800f544:	6825      	ldr	r5, [r4, #0]
 800f546:	1961      	adds	r1, r4, r5
 800f548:	428b      	cmp	r3, r1
 800f54a:	bf04      	itt	eq
 800f54c:	6819      	ldreq	r1, [r3, #0]
 800f54e:	685b      	ldreq	r3, [r3, #4]
 800f550:	6063      	str	r3, [r4, #4]
 800f552:	bf04      	itt	eq
 800f554:	1949      	addeq	r1, r1, r5
 800f556:	6021      	streq	r1, [r4, #0]
 800f558:	6054      	str	r4, [r2, #4]
 800f55a:	e7ca      	b.n	800f4f2 <_free_r+0x26>
 800f55c:	b003      	add	sp, #12
 800f55e:	bd30      	pop	{r4, r5, pc}
 800f560:	20005b90 	.word	0x20005b90

0800f564 <sbrk_aligned>:
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	4e0e      	ldr	r6, [pc, #56]	; (800f5a0 <sbrk_aligned+0x3c>)
 800f568:	460c      	mov	r4, r1
 800f56a:	6831      	ldr	r1, [r6, #0]
 800f56c:	4605      	mov	r5, r0
 800f56e:	b911      	cbnz	r1, 800f576 <sbrk_aligned+0x12>
 800f570:	f000 fe50 	bl	8010214 <_sbrk_r>
 800f574:	6030      	str	r0, [r6, #0]
 800f576:	4621      	mov	r1, r4
 800f578:	4628      	mov	r0, r5
 800f57a:	f000 fe4b 	bl	8010214 <_sbrk_r>
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	d00a      	beq.n	800f598 <sbrk_aligned+0x34>
 800f582:	1cc4      	adds	r4, r0, #3
 800f584:	f024 0403 	bic.w	r4, r4, #3
 800f588:	42a0      	cmp	r0, r4
 800f58a:	d007      	beq.n	800f59c <sbrk_aligned+0x38>
 800f58c:	1a21      	subs	r1, r4, r0
 800f58e:	4628      	mov	r0, r5
 800f590:	f000 fe40 	bl	8010214 <_sbrk_r>
 800f594:	3001      	adds	r0, #1
 800f596:	d101      	bne.n	800f59c <sbrk_aligned+0x38>
 800f598:	f04f 34ff 	mov.w	r4, #4294967295
 800f59c:	4620      	mov	r0, r4
 800f59e:	bd70      	pop	{r4, r5, r6, pc}
 800f5a0:	20005b94 	.word	0x20005b94

0800f5a4 <_malloc_r>:
 800f5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a8:	1ccd      	adds	r5, r1, #3
 800f5aa:	f025 0503 	bic.w	r5, r5, #3
 800f5ae:	3508      	adds	r5, #8
 800f5b0:	2d0c      	cmp	r5, #12
 800f5b2:	bf38      	it	cc
 800f5b4:	250c      	movcc	r5, #12
 800f5b6:	2d00      	cmp	r5, #0
 800f5b8:	4607      	mov	r7, r0
 800f5ba:	db01      	blt.n	800f5c0 <_malloc_r+0x1c>
 800f5bc:	42a9      	cmp	r1, r5
 800f5be:	d905      	bls.n	800f5cc <_malloc_r+0x28>
 800f5c0:	230c      	movs	r3, #12
 800f5c2:	603b      	str	r3, [r7, #0]
 800f5c4:	2600      	movs	r6, #0
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5cc:	4e2e      	ldr	r6, [pc, #184]	; (800f688 <_malloc_r+0xe4>)
 800f5ce:	f002 f871 	bl	80116b4 <__malloc_lock>
 800f5d2:	6833      	ldr	r3, [r6, #0]
 800f5d4:	461c      	mov	r4, r3
 800f5d6:	bb34      	cbnz	r4, 800f626 <_malloc_r+0x82>
 800f5d8:	4629      	mov	r1, r5
 800f5da:	4638      	mov	r0, r7
 800f5dc:	f7ff ffc2 	bl	800f564 <sbrk_aligned>
 800f5e0:	1c43      	adds	r3, r0, #1
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	d14d      	bne.n	800f682 <_malloc_r+0xde>
 800f5e6:	6834      	ldr	r4, [r6, #0]
 800f5e8:	4626      	mov	r6, r4
 800f5ea:	2e00      	cmp	r6, #0
 800f5ec:	d140      	bne.n	800f670 <_malloc_r+0xcc>
 800f5ee:	6823      	ldr	r3, [r4, #0]
 800f5f0:	4631      	mov	r1, r6
 800f5f2:	4638      	mov	r0, r7
 800f5f4:	eb04 0803 	add.w	r8, r4, r3
 800f5f8:	f000 fe0c 	bl	8010214 <_sbrk_r>
 800f5fc:	4580      	cmp	r8, r0
 800f5fe:	d13a      	bne.n	800f676 <_malloc_r+0xd2>
 800f600:	6821      	ldr	r1, [r4, #0]
 800f602:	3503      	adds	r5, #3
 800f604:	1a6d      	subs	r5, r5, r1
 800f606:	f025 0503 	bic.w	r5, r5, #3
 800f60a:	3508      	adds	r5, #8
 800f60c:	2d0c      	cmp	r5, #12
 800f60e:	bf38      	it	cc
 800f610:	250c      	movcc	r5, #12
 800f612:	4629      	mov	r1, r5
 800f614:	4638      	mov	r0, r7
 800f616:	f7ff ffa5 	bl	800f564 <sbrk_aligned>
 800f61a:	3001      	adds	r0, #1
 800f61c:	d02b      	beq.n	800f676 <_malloc_r+0xd2>
 800f61e:	6823      	ldr	r3, [r4, #0]
 800f620:	442b      	add	r3, r5
 800f622:	6023      	str	r3, [r4, #0]
 800f624:	e00e      	b.n	800f644 <_malloc_r+0xa0>
 800f626:	6822      	ldr	r2, [r4, #0]
 800f628:	1b52      	subs	r2, r2, r5
 800f62a:	d41e      	bmi.n	800f66a <_malloc_r+0xc6>
 800f62c:	2a0b      	cmp	r2, #11
 800f62e:	d916      	bls.n	800f65e <_malloc_r+0xba>
 800f630:	1961      	adds	r1, r4, r5
 800f632:	42a3      	cmp	r3, r4
 800f634:	6025      	str	r5, [r4, #0]
 800f636:	bf18      	it	ne
 800f638:	6059      	strne	r1, [r3, #4]
 800f63a:	6863      	ldr	r3, [r4, #4]
 800f63c:	bf08      	it	eq
 800f63e:	6031      	streq	r1, [r6, #0]
 800f640:	5162      	str	r2, [r4, r5]
 800f642:	604b      	str	r3, [r1, #4]
 800f644:	4638      	mov	r0, r7
 800f646:	f104 060b 	add.w	r6, r4, #11
 800f64a:	f002 f839 	bl	80116c0 <__malloc_unlock>
 800f64e:	f026 0607 	bic.w	r6, r6, #7
 800f652:	1d23      	adds	r3, r4, #4
 800f654:	1af2      	subs	r2, r6, r3
 800f656:	d0b6      	beq.n	800f5c6 <_malloc_r+0x22>
 800f658:	1b9b      	subs	r3, r3, r6
 800f65a:	50a3      	str	r3, [r4, r2]
 800f65c:	e7b3      	b.n	800f5c6 <_malloc_r+0x22>
 800f65e:	6862      	ldr	r2, [r4, #4]
 800f660:	42a3      	cmp	r3, r4
 800f662:	bf0c      	ite	eq
 800f664:	6032      	streq	r2, [r6, #0]
 800f666:	605a      	strne	r2, [r3, #4]
 800f668:	e7ec      	b.n	800f644 <_malloc_r+0xa0>
 800f66a:	4623      	mov	r3, r4
 800f66c:	6864      	ldr	r4, [r4, #4]
 800f66e:	e7b2      	b.n	800f5d6 <_malloc_r+0x32>
 800f670:	4634      	mov	r4, r6
 800f672:	6876      	ldr	r6, [r6, #4]
 800f674:	e7b9      	b.n	800f5ea <_malloc_r+0x46>
 800f676:	230c      	movs	r3, #12
 800f678:	603b      	str	r3, [r7, #0]
 800f67a:	4638      	mov	r0, r7
 800f67c:	f002 f820 	bl	80116c0 <__malloc_unlock>
 800f680:	e7a1      	b.n	800f5c6 <_malloc_r+0x22>
 800f682:	6025      	str	r5, [r4, #0]
 800f684:	e7de      	b.n	800f644 <_malloc_r+0xa0>
 800f686:	bf00      	nop
 800f688:	20005b90 	.word	0x20005b90

0800f68c <__sfputc_r>:
 800f68c:	6893      	ldr	r3, [r2, #8]
 800f68e:	3b01      	subs	r3, #1
 800f690:	2b00      	cmp	r3, #0
 800f692:	b410      	push	{r4}
 800f694:	6093      	str	r3, [r2, #8]
 800f696:	da08      	bge.n	800f6aa <__sfputc_r+0x1e>
 800f698:	6994      	ldr	r4, [r2, #24]
 800f69a:	42a3      	cmp	r3, r4
 800f69c:	db01      	blt.n	800f6a2 <__sfputc_r+0x16>
 800f69e:	290a      	cmp	r1, #10
 800f6a0:	d103      	bne.n	800f6aa <__sfputc_r+0x1e>
 800f6a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6a6:	f000 be3b 	b.w	8010320 <__swbuf_r>
 800f6aa:	6813      	ldr	r3, [r2, #0]
 800f6ac:	1c58      	adds	r0, r3, #1
 800f6ae:	6010      	str	r0, [r2, #0]
 800f6b0:	7019      	strb	r1, [r3, #0]
 800f6b2:	4608      	mov	r0, r1
 800f6b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6b8:	4770      	bx	lr

0800f6ba <__sfputs_r>:
 800f6ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6bc:	4606      	mov	r6, r0
 800f6be:	460f      	mov	r7, r1
 800f6c0:	4614      	mov	r4, r2
 800f6c2:	18d5      	adds	r5, r2, r3
 800f6c4:	42ac      	cmp	r4, r5
 800f6c6:	d101      	bne.n	800f6cc <__sfputs_r+0x12>
 800f6c8:	2000      	movs	r0, #0
 800f6ca:	e007      	b.n	800f6dc <__sfputs_r+0x22>
 800f6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6d0:	463a      	mov	r2, r7
 800f6d2:	4630      	mov	r0, r6
 800f6d4:	f7ff ffda 	bl	800f68c <__sfputc_r>
 800f6d8:	1c43      	adds	r3, r0, #1
 800f6da:	d1f3      	bne.n	800f6c4 <__sfputs_r+0xa>
 800f6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f6e0 <_vfiprintf_r>:
 800f6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e4:	460d      	mov	r5, r1
 800f6e6:	b09d      	sub	sp, #116	; 0x74
 800f6e8:	4614      	mov	r4, r2
 800f6ea:	4698      	mov	r8, r3
 800f6ec:	4606      	mov	r6, r0
 800f6ee:	b118      	cbz	r0, 800f6f8 <_vfiprintf_r+0x18>
 800f6f0:	6983      	ldr	r3, [r0, #24]
 800f6f2:	b90b      	cbnz	r3, 800f6f8 <_vfiprintf_r+0x18>
 800f6f4:	f001 fe94 	bl	8011420 <__sinit>
 800f6f8:	4b89      	ldr	r3, [pc, #548]	; (800f920 <_vfiprintf_r+0x240>)
 800f6fa:	429d      	cmp	r5, r3
 800f6fc:	d11b      	bne.n	800f736 <_vfiprintf_r+0x56>
 800f6fe:	6875      	ldr	r5, [r6, #4]
 800f700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f702:	07d9      	lsls	r1, r3, #31
 800f704:	d405      	bmi.n	800f712 <_vfiprintf_r+0x32>
 800f706:	89ab      	ldrh	r3, [r5, #12]
 800f708:	059a      	lsls	r2, r3, #22
 800f70a:	d402      	bmi.n	800f712 <_vfiprintf_r+0x32>
 800f70c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f70e:	f001 ff2a 	bl	8011566 <__retarget_lock_acquire_recursive>
 800f712:	89ab      	ldrh	r3, [r5, #12]
 800f714:	071b      	lsls	r3, r3, #28
 800f716:	d501      	bpl.n	800f71c <_vfiprintf_r+0x3c>
 800f718:	692b      	ldr	r3, [r5, #16]
 800f71a:	b9eb      	cbnz	r3, 800f758 <_vfiprintf_r+0x78>
 800f71c:	4629      	mov	r1, r5
 800f71e:	4630      	mov	r0, r6
 800f720:	f000 fe62 	bl	80103e8 <__swsetup_r>
 800f724:	b1c0      	cbz	r0, 800f758 <_vfiprintf_r+0x78>
 800f726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f728:	07dc      	lsls	r4, r3, #31
 800f72a:	d50e      	bpl.n	800f74a <_vfiprintf_r+0x6a>
 800f72c:	f04f 30ff 	mov.w	r0, #4294967295
 800f730:	b01d      	add	sp, #116	; 0x74
 800f732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f736:	4b7b      	ldr	r3, [pc, #492]	; (800f924 <_vfiprintf_r+0x244>)
 800f738:	429d      	cmp	r5, r3
 800f73a:	d101      	bne.n	800f740 <_vfiprintf_r+0x60>
 800f73c:	68b5      	ldr	r5, [r6, #8]
 800f73e:	e7df      	b.n	800f700 <_vfiprintf_r+0x20>
 800f740:	4b79      	ldr	r3, [pc, #484]	; (800f928 <_vfiprintf_r+0x248>)
 800f742:	429d      	cmp	r5, r3
 800f744:	bf08      	it	eq
 800f746:	68f5      	ldreq	r5, [r6, #12]
 800f748:	e7da      	b.n	800f700 <_vfiprintf_r+0x20>
 800f74a:	89ab      	ldrh	r3, [r5, #12]
 800f74c:	0598      	lsls	r0, r3, #22
 800f74e:	d4ed      	bmi.n	800f72c <_vfiprintf_r+0x4c>
 800f750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f752:	f001 ff09 	bl	8011568 <__retarget_lock_release_recursive>
 800f756:	e7e9      	b.n	800f72c <_vfiprintf_r+0x4c>
 800f758:	2300      	movs	r3, #0
 800f75a:	9309      	str	r3, [sp, #36]	; 0x24
 800f75c:	2320      	movs	r3, #32
 800f75e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f762:	f8cd 800c 	str.w	r8, [sp, #12]
 800f766:	2330      	movs	r3, #48	; 0x30
 800f768:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f92c <_vfiprintf_r+0x24c>
 800f76c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f770:	f04f 0901 	mov.w	r9, #1
 800f774:	4623      	mov	r3, r4
 800f776:	469a      	mov	sl, r3
 800f778:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f77c:	b10a      	cbz	r2, 800f782 <_vfiprintf_r+0xa2>
 800f77e:	2a25      	cmp	r2, #37	; 0x25
 800f780:	d1f9      	bne.n	800f776 <_vfiprintf_r+0x96>
 800f782:	ebba 0b04 	subs.w	fp, sl, r4
 800f786:	d00b      	beq.n	800f7a0 <_vfiprintf_r+0xc0>
 800f788:	465b      	mov	r3, fp
 800f78a:	4622      	mov	r2, r4
 800f78c:	4629      	mov	r1, r5
 800f78e:	4630      	mov	r0, r6
 800f790:	f7ff ff93 	bl	800f6ba <__sfputs_r>
 800f794:	3001      	adds	r0, #1
 800f796:	f000 80aa 	beq.w	800f8ee <_vfiprintf_r+0x20e>
 800f79a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f79c:	445a      	add	r2, fp
 800f79e:	9209      	str	r2, [sp, #36]	; 0x24
 800f7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	f000 80a2 	beq.w	800f8ee <_vfiprintf_r+0x20e>
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f7b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7b4:	f10a 0a01 	add.w	sl, sl, #1
 800f7b8:	9304      	str	r3, [sp, #16]
 800f7ba:	9307      	str	r3, [sp, #28]
 800f7bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7c0:	931a      	str	r3, [sp, #104]	; 0x68
 800f7c2:	4654      	mov	r4, sl
 800f7c4:	2205      	movs	r2, #5
 800f7c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7ca:	4858      	ldr	r0, [pc, #352]	; (800f92c <_vfiprintf_r+0x24c>)
 800f7cc:	f7f0 fd18 	bl	8000200 <memchr>
 800f7d0:	9a04      	ldr	r2, [sp, #16]
 800f7d2:	b9d8      	cbnz	r0, 800f80c <_vfiprintf_r+0x12c>
 800f7d4:	06d1      	lsls	r1, r2, #27
 800f7d6:	bf44      	itt	mi
 800f7d8:	2320      	movmi	r3, #32
 800f7da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7de:	0713      	lsls	r3, r2, #28
 800f7e0:	bf44      	itt	mi
 800f7e2:	232b      	movmi	r3, #43	; 0x2b
 800f7e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7e8:	f89a 3000 	ldrb.w	r3, [sl]
 800f7ec:	2b2a      	cmp	r3, #42	; 0x2a
 800f7ee:	d015      	beq.n	800f81c <_vfiprintf_r+0x13c>
 800f7f0:	9a07      	ldr	r2, [sp, #28]
 800f7f2:	4654      	mov	r4, sl
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	f04f 0c0a 	mov.w	ip, #10
 800f7fa:	4621      	mov	r1, r4
 800f7fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f800:	3b30      	subs	r3, #48	; 0x30
 800f802:	2b09      	cmp	r3, #9
 800f804:	d94e      	bls.n	800f8a4 <_vfiprintf_r+0x1c4>
 800f806:	b1b0      	cbz	r0, 800f836 <_vfiprintf_r+0x156>
 800f808:	9207      	str	r2, [sp, #28]
 800f80a:	e014      	b.n	800f836 <_vfiprintf_r+0x156>
 800f80c:	eba0 0308 	sub.w	r3, r0, r8
 800f810:	fa09 f303 	lsl.w	r3, r9, r3
 800f814:	4313      	orrs	r3, r2
 800f816:	9304      	str	r3, [sp, #16]
 800f818:	46a2      	mov	sl, r4
 800f81a:	e7d2      	b.n	800f7c2 <_vfiprintf_r+0xe2>
 800f81c:	9b03      	ldr	r3, [sp, #12]
 800f81e:	1d19      	adds	r1, r3, #4
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	9103      	str	r1, [sp, #12]
 800f824:	2b00      	cmp	r3, #0
 800f826:	bfbb      	ittet	lt
 800f828:	425b      	neglt	r3, r3
 800f82a:	f042 0202 	orrlt.w	r2, r2, #2
 800f82e:	9307      	strge	r3, [sp, #28]
 800f830:	9307      	strlt	r3, [sp, #28]
 800f832:	bfb8      	it	lt
 800f834:	9204      	strlt	r2, [sp, #16]
 800f836:	7823      	ldrb	r3, [r4, #0]
 800f838:	2b2e      	cmp	r3, #46	; 0x2e
 800f83a:	d10c      	bne.n	800f856 <_vfiprintf_r+0x176>
 800f83c:	7863      	ldrb	r3, [r4, #1]
 800f83e:	2b2a      	cmp	r3, #42	; 0x2a
 800f840:	d135      	bne.n	800f8ae <_vfiprintf_r+0x1ce>
 800f842:	9b03      	ldr	r3, [sp, #12]
 800f844:	1d1a      	adds	r2, r3, #4
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	9203      	str	r2, [sp, #12]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	bfb8      	it	lt
 800f84e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f852:	3402      	adds	r4, #2
 800f854:	9305      	str	r3, [sp, #20]
 800f856:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f93c <_vfiprintf_r+0x25c>
 800f85a:	7821      	ldrb	r1, [r4, #0]
 800f85c:	2203      	movs	r2, #3
 800f85e:	4650      	mov	r0, sl
 800f860:	f7f0 fcce 	bl	8000200 <memchr>
 800f864:	b140      	cbz	r0, 800f878 <_vfiprintf_r+0x198>
 800f866:	2340      	movs	r3, #64	; 0x40
 800f868:	eba0 000a 	sub.w	r0, r0, sl
 800f86c:	fa03 f000 	lsl.w	r0, r3, r0
 800f870:	9b04      	ldr	r3, [sp, #16]
 800f872:	4303      	orrs	r3, r0
 800f874:	3401      	adds	r4, #1
 800f876:	9304      	str	r3, [sp, #16]
 800f878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f87c:	482c      	ldr	r0, [pc, #176]	; (800f930 <_vfiprintf_r+0x250>)
 800f87e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f882:	2206      	movs	r2, #6
 800f884:	f7f0 fcbc 	bl	8000200 <memchr>
 800f888:	2800      	cmp	r0, #0
 800f88a:	d03f      	beq.n	800f90c <_vfiprintf_r+0x22c>
 800f88c:	4b29      	ldr	r3, [pc, #164]	; (800f934 <_vfiprintf_r+0x254>)
 800f88e:	bb1b      	cbnz	r3, 800f8d8 <_vfiprintf_r+0x1f8>
 800f890:	9b03      	ldr	r3, [sp, #12]
 800f892:	3307      	adds	r3, #7
 800f894:	f023 0307 	bic.w	r3, r3, #7
 800f898:	3308      	adds	r3, #8
 800f89a:	9303      	str	r3, [sp, #12]
 800f89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f89e:	443b      	add	r3, r7
 800f8a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f8a2:	e767      	b.n	800f774 <_vfiprintf_r+0x94>
 800f8a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8a8:	460c      	mov	r4, r1
 800f8aa:	2001      	movs	r0, #1
 800f8ac:	e7a5      	b.n	800f7fa <_vfiprintf_r+0x11a>
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	3401      	adds	r4, #1
 800f8b2:	9305      	str	r3, [sp, #20]
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	f04f 0c0a 	mov.w	ip, #10
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8c0:	3a30      	subs	r2, #48	; 0x30
 800f8c2:	2a09      	cmp	r2, #9
 800f8c4:	d903      	bls.n	800f8ce <_vfiprintf_r+0x1ee>
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d0c5      	beq.n	800f856 <_vfiprintf_r+0x176>
 800f8ca:	9105      	str	r1, [sp, #20]
 800f8cc:	e7c3      	b.n	800f856 <_vfiprintf_r+0x176>
 800f8ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8d2:	4604      	mov	r4, r0
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	e7f0      	b.n	800f8ba <_vfiprintf_r+0x1da>
 800f8d8:	ab03      	add	r3, sp, #12
 800f8da:	9300      	str	r3, [sp, #0]
 800f8dc:	462a      	mov	r2, r5
 800f8de:	4b16      	ldr	r3, [pc, #88]	; (800f938 <_vfiprintf_r+0x258>)
 800f8e0:	a904      	add	r1, sp, #16
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f000 f8cc 	bl	800fa80 <_printf_float>
 800f8e8:	4607      	mov	r7, r0
 800f8ea:	1c78      	adds	r0, r7, #1
 800f8ec:	d1d6      	bne.n	800f89c <_vfiprintf_r+0x1bc>
 800f8ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8f0:	07d9      	lsls	r1, r3, #31
 800f8f2:	d405      	bmi.n	800f900 <_vfiprintf_r+0x220>
 800f8f4:	89ab      	ldrh	r3, [r5, #12]
 800f8f6:	059a      	lsls	r2, r3, #22
 800f8f8:	d402      	bmi.n	800f900 <_vfiprintf_r+0x220>
 800f8fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8fc:	f001 fe34 	bl	8011568 <__retarget_lock_release_recursive>
 800f900:	89ab      	ldrh	r3, [r5, #12]
 800f902:	065b      	lsls	r3, r3, #25
 800f904:	f53f af12 	bmi.w	800f72c <_vfiprintf_r+0x4c>
 800f908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f90a:	e711      	b.n	800f730 <_vfiprintf_r+0x50>
 800f90c:	ab03      	add	r3, sp, #12
 800f90e:	9300      	str	r3, [sp, #0]
 800f910:	462a      	mov	r2, r5
 800f912:	4b09      	ldr	r3, [pc, #36]	; (800f938 <_vfiprintf_r+0x258>)
 800f914:	a904      	add	r1, sp, #16
 800f916:	4630      	mov	r0, r6
 800f918:	f000 fb56 	bl	800ffc8 <_printf_i>
 800f91c:	e7e4      	b.n	800f8e8 <_vfiprintf_r+0x208>
 800f91e:	bf00      	nop
 800f920:	0802d7a8 	.word	0x0802d7a8
 800f924:	0802d7c8 	.word	0x0802d7c8
 800f928:	0802d788 	.word	0x0802d788
 800f92c:	0802d5b0 	.word	0x0802d5b0
 800f930:	0802d5ba 	.word	0x0802d5ba
 800f934:	0800fa81 	.word	0x0800fa81
 800f938:	0800f6bb 	.word	0x0800f6bb
 800f93c:	0802d5b6 	.word	0x0802d5b6

0800f940 <__cvt>:
 800f940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f944:	ec55 4b10 	vmov	r4, r5, d0
 800f948:	2d00      	cmp	r5, #0
 800f94a:	460e      	mov	r6, r1
 800f94c:	4619      	mov	r1, r3
 800f94e:	462b      	mov	r3, r5
 800f950:	bfbb      	ittet	lt
 800f952:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f956:	461d      	movlt	r5, r3
 800f958:	2300      	movge	r3, #0
 800f95a:	232d      	movlt	r3, #45	; 0x2d
 800f95c:	700b      	strb	r3, [r1, #0]
 800f95e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f960:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f964:	4691      	mov	r9, r2
 800f966:	f023 0820 	bic.w	r8, r3, #32
 800f96a:	bfbc      	itt	lt
 800f96c:	4622      	movlt	r2, r4
 800f96e:	4614      	movlt	r4, r2
 800f970:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f974:	d005      	beq.n	800f982 <__cvt+0x42>
 800f976:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f97a:	d100      	bne.n	800f97e <__cvt+0x3e>
 800f97c:	3601      	adds	r6, #1
 800f97e:	2102      	movs	r1, #2
 800f980:	e000      	b.n	800f984 <__cvt+0x44>
 800f982:	2103      	movs	r1, #3
 800f984:	ab03      	add	r3, sp, #12
 800f986:	9301      	str	r3, [sp, #4]
 800f988:	ab02      	add	r3, sp, #8
 800f98a:	9300      	str	r3, [sp, #0]
 800f98c:	ec45 4b10 	vmov	d0, r4, r5
 800f990:	4653      	mov	r3, sl
 800f992:	4632      	mov	r2, r6
 800f994:	f000 fe3c 	bl	8010610 <_dtoa_r>
 800f998:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f99c:	4607      	mov	r7, r0
 800f99e:	d102      	bne.n	800f9a6 <__cvt+0x66>
 800f9a0:	f019 0f01 	tst.w	r9, #1
 800f9a4:	d022      	beq.n	800f9ec <__cvt+0xac>
 800f9a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f9aa:	eb07 0906 	add.w	r9, r7, r6
 800f9ae:	d110      	bne.n	800f9d2 <__cvt+0x92>
 800f9b0:	783b      	ldrb	r3, [r7, #0]
 800f9b2:	2b30      	cmp	r3, #48	; 0x30
 800f9b4:	d10a      	bne.n	800f9cc <__cvt+0x8c>
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	4629      	mov	r1, r5
 800f9be:	f7f1 f893 	bl	8000ae8 <__aeabi_dcmpeq>
 800f9c2:	b918      	cbnz	r0, 800f9cc <__cvt+0x8c>
 800f9c4:	f1c6 0601 	rsb	r6, r6, #1
 800f9c8:	f8ca 6000 	str.w	r6, [sl]
 800f9cc:	f8da 3000 	ldr.w	r3, [sl]
 800f9d0:	4499      	add	r9, r3
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	4629      	mov	r1, r5
 800f9da:	f7f1 f885 	bl	8000ae8 <__aeabi_dcmpeq>
 800f9de:	b108      	cbz	r0, 800f9e4 <__cvt+0xa4>
 800f9e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f9e4:	2230      	movs	r2, #48	; 0x30
 800f9e6:	9b03      	ldr	r3, [sp, #12]
 800f9e8:	454b      	cmp	r3, r9
 800f9ea:	d307      	bcc.n	800f9fc <__cvt+0xbc>
 800f9ec:	9b03      	ldr	r3, [sp, #12]
 800f9ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f9f0:	1bdb      	subs	r3, r3, r7
 800f9f2:	4638      	mov	r0, r7
 800f9f4:	6013      	str	r3, [r2, #0]
 800f9f6:	b004      	add	sp, #16
 800f9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9fc:	1c59      	adds	r1, r3, #1
 800f9fe:	9103      	str	r1, [sp, #12]
 800fa00:	701a      	strb	r2, [r3, #0]
 800fa02:	e7f0      	b.n	800f9e6 <__cvt+0xa6>

0800fa04 <__exponent>:
 800fa04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa06:	4603      	mov	r3, r0
 800fa08:	2900      	cmp	r1, #0
 800fa0a:	bfb8      	it	lt
 800fa0c:	4249      	neglt	r1, r1
 800fa0e:	f803 2b02 	strb.w	r2, [r3], #2
 800fa12:	bfb4      	ite	lt
 800fa14:	222d      	movlt	r2, #45	; 0x2d
 800fa16:	222b      	movge	r2, #43	; 0x2b
 800fa18:	2909      	cmp	r1, #9
 800fa1a:	7042      	strb	r2, [r0, #1]
 800fa1c:	dd2a      	ble.n	800fa74 <__exponent+0x70>
 800fa1e:	f10d 0407 	add.w	r4, sp, #7
 800fa22:	46a4      	mov	ip, r4
 800fa24:	270a      	movs	r7, #10
 800fa26:	46a6      	mov	lr, r4
 800fa28:	460a      	mov	r2, r1
 800fa2a:	fb91 f6f7 	sdiv	r6, r1, r7
 800fa2e:	fb07 1516 	mls	r5, r7, r6, r1
 800fa32:	3530      	adds	r5, #48	; 0x30
 800fa34:	2a63      	cmp	r2, #99	; 0x63
 800fa36:	f104 34ff 	add.w	r4, r4, #4294967295
 800fa3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fa3e:	4631      	mov	r1, r6
 800fa40:	dcf1      	bgt.n	800fa26 <__exponent+0x22>
 800fa42:	3130      	adds	r1, #48	; 0x30
 800fa44:	f1ae 0502 	sub.w	r5, lr, #2
 800fa48:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fa4c:	1c44      	adds	r4, r0, #1
 800fa4e:	4629      	mov	r1, r5
 800fa50:	4561      	cmp	r1, ip
 800fa52:	d30a      	bcc.n	800fa6a <__exponent+0x66>
 800fa54:	f10d 0209 	add.w	r2, sp, #9
 800fa58:	eba2 020e 	sub.w	r2, r2, lr
 800fa5c:	4565      	cmp	r5, ip
 800fa5e:	bf88      	it	hi
 800fa60:	2200      	movhi	r2, #0
 800fa62:	4413      	add	r3, r2
 800fa64:	1a18      	subs	r0, r3, r0
 800fa66:	b003      	add	sp, #12
 800fa68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fa72:	e7ed      	b.n	800fa50 <__exponent+0x4c>
 800fa74:	2330      	movs	r3, #48	; 0x30
 800fa76:	3130      	adds	r1, #48	; 0x30
 800fa78:	7083      	strb	r3, [r0, #2]
 800fa7a:	70c1      	strb	r1, [r0, #3]
 800fa7c:	1d03      	adds	r3, r0, #4
 800fa7e:	e7f1      	b.n	800fa64 <__exponent+0x60>

0800fa80 <_printf_float>:
 800fa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa84:	ed2d 8b02 	vpush	{d8}
 800fa88:	b08d      	sub	sp, #52	; 0x34
 800fa8a:	460c      	mov	r4, r1
 800fa8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fa90:	4616      	mov	r6, r2
 800fa92:	461f      	mov	r7, r3
 800fa94:	4605      	mov	r5, r0
 800fa96:	f001 fd61 	bl	801155c <_localeconv_r>
 800fa9a:	f8d0 a000 	ldr.w	sl, [r0]
 800fa9e:	4650      	mov	r0, sl
 800faa0:	f7f0 fba6 	bl	80001f0 <strlen>
 800faa4:	2300      	movs	r3, #0
 800faa6:	930a      	str	r3, [sp, #40]	; 0x28
 800faa8:	6823      	ldr	r3, [r4, #0]
 800faaa:	9305      	str	r3, [sp, #20]
 800faac:	f8d8 3000 	ldr.w	r3, [r8]
 800fab0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fab4:	3307      	adds	r3, #7
 800fab6:	f023 0307 	bic.w	r3, r3, #7
 800faba:	f103 0208 	add.w	r2, r3, #8
 800fabe:	f8c8 2000 	str.w	r2, [r8]
 800fac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800faca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800face:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fad2:	9307      	str	r3, [sp, #28]
 800fad4:	f8cd 8018 	str.w	r8, [sp, #24]
 800fad8:	ee08 0a10 	vmov	s16, r0
 800fadc:	4b9f      	ldr	r3, [pc, #636]	; (800fd5c <_printf_float+0x2dc>)
 800fade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fae2:	f04f 32ff 	mov.w	r2, #4294967295
 800fae6:	f7f1 f831 	bl	8000b4c <__aeabi_dcmpun>
 800faea:	bb88      	cbnz	r0, 800fb50 <_printf_float+0xd0>
 800faec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800faf0:	4b9a      	ldr	r3, [pc, #616]	; (800fd5c <_printf_float+0x2dc>)
 800faf2:	f04f 32ff 	mov.w	r2, #4294967295
 800faf6:	f7f1 f80b 	bl	8000b10 <__aeabi_dcmple>
 800fafa:	bb48      	cbnz	r0, 800fb50 <_printf_float+0xd0>
 800fafc:	2200      	movs	r2, #0
 800fafe:	2300      	movs	r3, #0
 800fb00:	4640      	mov	r0, r8
 800fb02:	4649      	mov	r1, r9
 800fb04:	f7f0 fffa 	bl	8000afc <__aeabi_dcmplt>
 800fb08:	b110      	cbz	r0, 800fb10 <_printf_float+0x90>
 800fb0a:	232d      	movs	r3, #45	; 0x2d
 800fb0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb10:	4b93      	ldr	r3, [pc, #588]	; (800fd60 <_printf_float+0x2e0>)
 800fb12:	4894      	ldr	r0, [pc, #592]	; (800fd64 <_printf_float+0x2e4>)
 800fb14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fb18:	bf94      	ite	ls
 800fb1a:	4698      	movls	r8, r3
 800fb1c:	4680      	movhi	r8, r0
 800fb1e:	2303      	movs	r3, #3
 800fb20:	6123      	str	r3, [r4, #16]
 800fb22:	9b05      	ldr	r3, [sp, #20]
 800fb24:	f023 0204 	bic.w	r2, r3, #4
 800fb28:	6022      	str	r2, [r4, #0]
 800fb2a:	f04f 0900 	mov.w	r9, #0
 800fb2e:	9700      	str	r7, [sp, #0]
 800fb30:	4633      	mov	r3, r6
 800fb32:	aa0b      	add	r2, sp, #44	; 0x2c
 800fb34:	4621      	mov	r1, r4
 800fb36:	4628      	mov	r0, r5
 800fb38:	f000 f9d8 	bl	800feec <_printf_common>
 800fb3c:	3001      	adds	r0, #1
 800fb3e:	f040 8090 	bne.w	800fc62 <_printf_float+0x1e2>
 800fb42:	f04f 30ff 	mov.w	r0, #4294967295
 800fb46:	b00d      	add	sp, #52	; 0x34
 800fb48:	ecbd 8b02 	vpop	{d8}
 800fb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb50:	4642      	mov	r2, r8
 800fb52:	464b      	mov	r3, r9
 800fb54:	4640      	mov	r0, r8
 800fb56:	4649      	mov	r1, r9
 800fb58:	f7f0 fff8 	bl	8000b4c <__aeabi_dcmpun>
 800fb5c:	b140      	cbz	r0, 800fb70 <_printf_float+0xf0>
 800fb5e:	464b      	mov	r3, r9
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	bfbc      	itt	lt
 800fb64:	232d      	movlt	r3, #45	; 0x2d
 800fb66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fb6a:	487f      	ldr	r0, [pc, #508]	; (800fd68 <_printf_float+0x2e8>)
 800fb6c:	4b7f      	ldr	r3, [pc, #508]	; (800fd6c <_printf_float+0x2ec>)
 800fb6e:	e7d1      	b.n	800fb14 <_printf_float+0x94>
 800fb70:	6863      	ldr	r3, [r4, #4]
 800fb72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fb76:	9206      	str	r2, [sp, #24]
 800fb78:	1c5a      	adds	r2, r3, #1
 800fb7a:	d13f      	bne.n	800fbfc <_printf_float+0x17c>
 800fb7c:	2306      	movs	r3, #6
 800fb7e:	6063      	str	r3, [r4, #4]
 800fb80:	9b05      	ldr	r3, [sp, #20]
 800fb82:	6861      	ldr	r1, [r4, #4]
 800fb84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fb88:	2300      	movs	r3, #0
 800fb8a:	9303      	str	r3, [sp, #12]
 800fb8c:	ab0a      	add	r3, sp, #40	; 0x28
 800fb8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fb92:	ab09      	add	r3, sp, #36	; 0x24
 800fb94:	ec49 8b10 	vmov	d0, r8, r9
 800fb98:	9300      	str	r3, [sp, #0]
 800fb9a:	6022      	str	r2, [r4, #0]
 800fb9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fba0:	4628      	mov	r0, r5
 800fba2:	f7ff fecd 	bl	800f940 <__cvt>
 800fba6:	9b06      	ldr	r3, [sp, #24]
 800fba8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbaa:	2b47      	cmp	r3, #71	; 0x47
 800fbac:	4680      	mov	r8, r0
 800fbae:	d108      	bne.n	800fbc2 <_printf_float+0x142>
 800fbb0:	1cc8      	adds	r0, r1, #3
 800fbb2:	db02      	blt.n	800fbba <_printf_float+0x13a>
 800fbb4:	6863      	ldr	r3, [r4, #4]
 800fbb6:	4299      	cmp	r1, r3
 800fbb8:	dd41      	ble.n	800fc3e <_printf_float+0x1be>
 800fbba:	f1ab 0b02 	sub.w	fp, fp, #2
 800fbbe:	fa5f fb8b 	uxtb.w	fp, fp
 800fbc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fbc6:	d820      	bhi.n	800fc0a <_printf_float+0x18a>
 800fbc8:	3901      	subs	r1, #1
 800fbca:	465a      	mov	r2, fp
 800fbcc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fbd0:	9109      	str	r1, [sp, #36]	; 0x24
 800fbd2:	f7ff ff17 	bl	800fa04 <__exponent>
 800fbd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbd8:	1813      	adds	r3, r2, r0
 800fbda:	2a01      	cmp	r2, #1
 800fbdc:	4681      	mov	r9, r0
 800fbde:	6123      	str	r3, [r4, #16]
 800fbe0:	dc02      	bgt.n	800fbe8 <_printf_float+0x168>
 800fbe2:	6822      	ldr	r2, [r4, #0]
 800fbe4:	07d2      	lsls	r2, r2, #31
 800fbe6:	d501      	bpl.n	800fbec <_printf_float+0x16c>
 800fbe8:	3301      	adds	r3, #1
 800fbea:	6123      	str	r3, [r4, #16]
 800fbec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d09c      	beq.n	800fb2e <_printf_float+0xae>
 800fbf4:	232d      	movs	r3, #45	; 0x2d
 800fbf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbfa:	e798      	b.n	800fb2e <_printf_float+0xae>
 800fbfc:	9a06      	ldr	r2, [sp, #24]
 800fbfe:	2a47      	cmp	r2, #71	; 0x47
 800fc00:	d1be      	bne.n	800fb80 <_printf_float+0x100>
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d1bc      	bne.n	800fb80 <_printf_float+0x100>
 800fc06:	2301      	movs	r3, #1
 800fc08:	e7b9      	b.n	800fb7e <_printf_float+0xfe>
 800fc0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fc0e:	d118      	bne.n	800fc42 <_printf_float+0x1c2>
 800fc10:	2900      	cmp	r1, #0
 800fc12:	6863      	ldr	r3, [r4, #4]
 800fc14:	dd0b      	ble.n	800fc2e <_printf_float+0x1ae>
 800fc16:	6121      	str	r1, [r4, #16]
 800fc18:	b913      	cbnz	r3, 800fc20 <_printf_float+0x1a0>
 800fc1a:	6822      	ldr	r2, [r4, #0]
 800fc1c:	07d0      	lsls	r0, r2, #31
 800fc1e:	d502      	bpl.n	800fc26 <_printf_float+0x1a6>
 800fc20:	3301      	adds	r3, #1
 800fc22:	440b      	add	r3, r1
 800fc24:	6123      	str	r3, [r4, #16]
 800fc26:	65a1      	str	r1, [r4, #88]	; 0x58
 800fc28:	f04f 0900 	mov.w	r9, #0
 800fc2c:	e7de      	b.n	800fbec <_printf_float+0x16c>
 800fc2e:	b913      	cbnz	r3, 800fc36 <_printf_float+0x1b6>
 800fc30:	6822      	ldr	r2, [r4, #0]
 800fc32:	07d2      	lsls	r2, r2, #31
 800fc34:	d501      	bpl.n	800fc3a <_printf_float+0x1ba>
 800fc36:	3302      	adds	r3, #2
 800fc38:	e7f4      	b.n	800fc24 <_printf_float+0x1a4>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e7f2      	b.n	800fc24 <_printf_float+0x1a4>
 800fc3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fc42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc44:	4299      	cmp	r1, r3
 800fc46:	db05      	blt.n	800fc54 <_printf_float+0x1d4>
 800fc48:	6823      	ldr	r3, [r4, #0]
 800fc4a:	6121      	str	r1, [r4, #16]
 800fc4c:	07d8      	lsls	r0, r3, #31
 800fc4e:	d5ea      	bpl.n	800fc26 <_printf_float+0x1a6>
 800fc50:	1c4b      	adds	r3, r1, #1
 800fc52:	e7e7      	b.n	800fc24 <_printf_float+0x1a4>
 800fc54:	2900      	cmp	r1, #0
 800fc56:	bfd4      	ite	le
 800fc58:	f1c1 0202 	rsble	r2, r1, #2
 800fc5c:	2201      	movgt	r2, #1
 800fc5e:	4413      	add	r3, r2
 800fc60:	e7e0      	b.n	800fc24 <_printf_float+0x1a4>
 800fc62:	6823      	ldr	r3, [r4, #0]
 800fc64:	055a      	lsls	r2, r3, #21
 800fc66:	d407      	bmi.n	800fc78 <_printf_float+0x1f8>
 800fc68:	6923      	ldr	r3, [r4, #16]
 800fc6a:	4642      	mov	r2, r8
 800fc6c:	4631      	mov	r1, r6
 800fc6e:	4628      	mov	r0, r5
 800fc70:	47b8      	blx	r7
 800fc72:	3001      	adds	r0, #1
 800fc74:	d12c      	bne.n	800fcd0 <_printf_float+0x250>
 800fc76:	e764      	b.n	800fb42 <_printf_float+0xc2>
 800fc78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fc7c:	f240 80e0 	bls.w	800fe40 <_printf_float+0x3c0>
 800fc80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fc84:	2200      	movs	r2, #0
 800fc86:	2300      	movs	r3, #0
 800fc88:	f7f0 ff2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	d034      	beq.n	800fcfa <_printf_float+0x27a>
 800fc90:	4a37      	ldr	r2, [pc, #220]	; (800fd70 <_printf_float+0x2f0>)
 800fc92:	2301      	movs	r3, #1
 800fc94:	4631      	mov	r1, r6
 800fc96:	4628      	mov	r0, r5
 800fc98:	47b8      	blx	r7
 800fc9a:	3001      	adds	r0, #1
 800fc9c:	f43f af51 	beq.w	800fb42 <_printf_float+0xc2>
 800fca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fca4:	429a      	cmp	r2, r3
 800fca6:	db02      	blt.n	800fcae <_printf_float+0x22e>
 800fca8:	6823      	ldr	r3, [r4, #0]
 800fcaa:	07d8      	lsls	r0, r3, #31
 800fcac:	d510      	bpl.n	800fcd0 <_printf_float+0x250>
 800fcae:	ee18 3a10 	vmov	r3, s16
 800fcb2:	4652      	mov	r2, sl
 800fcb4:	4631      	mov	r1, r6
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	47b8      	blx	r7
 800fcba:	3001      	adds	r0, #1
 800fcbc:	f43f af41 	beq.w	800fb42 <_printf_float+0xc2>
 800fcc0:	f04f 0800 	mov.w	r8, #0
 800fcc4:	f104 091a 	add.w	r9, r4, #26
 800fcc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcca:	3b01      	subs	r3, #1
 800fccc:	4543      	cmp	r3, r8
 800fcce:	dc09      	bgt.n	800fce4 <_printf_float+0x264>
 800fcd0:	6823      	ldr	r3, [r4, #0]
 800fcd2:	079b      	lsls	r3, r3, #30
 800fcd4:	f100 8105 	bmi.w	800fee2 <_printf_float+0x462>
 800fcd8:	68e0      	ldr	r0, [r4, #12]
 800fcda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcdc:	4298      	cmp	r0, r3
 800fcde:	bfb8      	it	lt
 800fce0:	4618      	movlt	r0, r3
 800fce2:	e730      	b.n	800fb46 <_printf_float+0xc6>
 800fce4:	2301      	movs	r3, #1
 800fce6:	464a      	mov	r2, r9
 800fce8:	4631      	mov	r1, r6
 800fcea:	4628      	mov	r0, r5
 800fcec:	47b8      	blx	r7
 800fcee:	3001      	adds	r0, #1
 800fcf0:	f43f af27 	beq.w	800fb42 <_printf_float+0xc2>
 800fcf4:	f108 0801 	add.w	r8, r8, #1
 800fcf8:	e7e6      	b.n	800fcc8 <_printf_float+0x248>
 800fcfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	dc39      	bgt.n	800fd74 <_printf_float+0x2f4>
 800fd00:	4a1b      	ldr	r2, [pc, #108]	; (800fd70 <_printf_float+0x2f0>)
 800fd02:	2301      	movs	r3, #1
 800fd04:	4631      	mov	r1, r6
 800fd06:	4628      	mov	r0, r5
 800fd08:	47b8      	blx	r7
 800fd0a:	3001      	adds	r0, #1
 800fd0c:	f43f af19 	beq.w	800fb42 <_printf_float+0xc2>
 800fd10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fd14:	4313      	orrs	r3, r2
 800fd16:	d102      	bne.n	800fd1e <_printf_float+0x29e>
 800fd18:	6823      	ldr	r3, [r4, #0]
 800fd1a:	07d9      	lsls	r1, r3, #31
 800fd1c:	d5d8      	bpl.n	800fcd0 <_printf_float+0x250>
 800fd1e:	ee18 3a10 	vmov	r3, s16
 800fd22:	4652      	mov	r2, sl
 800fd24:	4631      	mov	r1, r6
 800fd26:	4628      	mov	r0, r5
 800fd28:	47b8      	blx	r7
 800fd2a:	3001      	adds	r0, #1
 800fd2c:	f43f af09 	beq.w	800fb42 <_printf_float+0xc2>
 800fd30:	f04f 0900 	mov.w	r9, #0
 800fd34:	f104 0a1a 	add.w	sl, r4, #26
 800fd38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd3a:	425b      	negs	r3, r3
 800fd3c:	454b      	cmp	r3, r9
 800fd3e:	dc01      	bgt.n	800fd44 <_printf_float+0x2c4>
 800fd40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd42:	e792      	b.n	800fc6a <_printf_float+0x1ea>
 800fd44:	2301      	movs	r3, #1
 800fd46:	4652      	mov	r2, sl
 800fd48:	4631      	mov	r1, r6
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	47b8      	blx	r7
 800fd4e:	3001      	adds	r0, #1
 800fd50:	f43f aef7 	beq.w	800fb42 <_printf_float+0xc2>
 800fd54:	f109 0901 	add.w	r9, r9, #1
 800fd58:	e7ee      	b.n	800fd38 <_printf_float+0x2b8>
 800fd5a:	bf00      	nop
 800fd5c:	7fefffff 	.word	0x7fefffff
 800fd60:	0802d5c1 	.word	0x0802d5c1
 800fd64:	0802d5c5 	.word	0x0802d5c5
 800fd68:	0802d5cd 	.word	0x0802d5cd
 800fd6c:	0802d5c9 	.word	0x0802d5c9
 800fd70:	0802d5d1 	.word	0x0802d5d1
 800fd74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	bfa8      	it	ge
 800fd7c:	461a      	movge	r2, r3
 800fd7e:	2a00      	cmp	r2, #0
 800fd80:	4691      	mov	r9, r2
 800fd82:	dc37      	bgt.n	800fdf4 <_printf_float+0x374>
 800fd84:	f04f 0b00 	mov.w	fp, #0
 800fd88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd8c:	f104 021a 	add.w	r2, r4, #26
 800fd90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd92:	9305      	str	r3, [sp, #20]
 800fd94:	eba3 0309 	sub.w	r3, r3, r9
 800fd98:	455b      	cmp	r3, fp
 800fd9a:	dc33      	bgt.n	800fe04 <_printf_float+0x384>
 800fd9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fda0:	429a      	cmp	r2, r3
 800fda2:	db3b      	blt.n	800fe1c <_printf_float+0x39c>
 800fda4:	6823      	ldr	r3, [r4, #0]
 800fda6:	07da      	lsls	r2, r3, #31
 800fda8:	d438      	bmi.n	800fe1c <_printf_float+0x39c>
 800fdaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdac:	9a05      	ldr	r2, [sp, #20]
 800fdae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fdb0:	1a9a      	subs	r2, r3, r2
 800fdb2:	eba3 0901 	sub.w	r9, r3, r1
 800fdb6:	4591      	cmp	r9, r2
 800fdb8:	bfa8      	it	ge
 800fdba:	4691      	movge	r9, r2
 800fdbc:	f1b9 0f00 	cmp.w	r9, #0
 800fdc0:	dc35      	bgt.n	800fe2e <_printf_float+0x3ae>
 800fdc2:	f04f 0800 	mov.w	r8, #0
 800fdc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fdca:	f104 0a1a 	add.w	sl, r4, #26
 800fdce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fdd2:	1a9b      	subs	r3, r3, r2
 800fdd4:	eba3 0309 	sub.w	r3, r3, r9
 800fdd8:	4543      	cmp	r3, r8
 800fdda:	f77f af79 	ble.w	800fcd0 <_printf_float+0x250>
 800fdde:	2301      	movs	r3, #1
 800fde0:	4652      	mov	r2, sl
 800fde2:	4631      	mov	r1, r6
 800fde4:	4628      	mov	r0, r5
 800fde6:	47b8      	blx	r7
 800fde8:	3001      	adds	r0, #1
 800fdea:	f43f aeaa 	beq.w	800fb42 <_printf_float+0xc2>
 800fdee:	f108 0801 	add.w	r8, r8, #1
 800fdf2:	e7ec      	b.n	800fdce <_printf_float+0x34e>
 800fdf4:	4613      	mov	r3, r2
 800fdf6:	4631      	mov	r1, r6
 800fdf8:	4642      	mov	r2, r8
 800fdfa:	4628      	mov	r0, r5
 800fdfc:	47b8      	blx	r7
 800fdfe:	3001      	adds	r0, #1
 800fe00:	d1c0      	bne.n	800fd84 <_printf_float+0x304>
 800fe02:	e69e      	b.n	800fb42 <_printf_float+0xc2>
 800fe04:	2301      	movs	r3, #1
 800fe06:	4631      	mov	r1, r6
 800fe08:	4628      	mov	r0, r5
 800fe0a:	9205      	str	r2, [sp, #20]
 800fe0c:	47b8      	blx	r7
 800fe0e:	3001      	adds	r0, #1
 800fe10:	f43f ae97 	beq.w	800fb42 <_printf_float+0xc2>
 800fe14:	9a05      	ldr	r2, [sp, #20]
 800fe16:	f10b 0b01 	add.w	fp, fp, #1
 800fe1a:	e7b9      	b.n	800fd90 <_printf_float+0x310>
 800fe1c:	ee18 3a10 	vmov	r3, s16
 800fe20:	4652      	mov	r2, sl
 800fe22:	4631      	mov	r1, r6
 800fe24:	4628      	mov	r0, r5
 800fe26:	47b8      	blx	r7
 800fe28:	3001      	adds	r0, #1
 800fe2a:	d1be      	bne.n	800fdaa <_printf_float+0x32a>
 800fe2c:	e689      	b.n	800fb42 <_printf_float+0xc2>
 800fe2e:	9a05      	ldr	r2, [sp, #20]
 800fe30:	464b      	mov	r3, r9
 800fe32:	4442      	add	r2, r8
 800fe34:	4631      	mov	r1, r6
 800fe36:	4628      	mov	r0, r5
 800fe38:	47b8      	blx	r7
 800fe3a:	3001      	adds	r0, #1
 800fe3c:	d1c1      	bne.n	800fdc2 <_printf_float+0x342>
 800fe3e:	e680      	b.n	800fb42 <_printf_float+0xc2>
 800fe40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe42:	2a01      	cmp	r2, #1
 800fe44:	dc01      	bgt.n	800fe4a <_printf_float+0x3ca>
 800fe46:	07db      	lsls	r3, r3, #31
 800fe48:	d538      	bpl.n	800febc <_printf_float+0x43c>
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	4642      	mov	r2, r8
 800fe4e:	4631      	mov	r1, r6
 800fe50:	4628      	mov	r0, r5
 800fe52:	47b8      	blx	r7
 800fe54:	3001      	adds	r0, #1
 800fe56:	f43f ae74 	beq.w	800fb42 <_printf_float+0xc2>
 800fe5a:	ee18 3a10 	vmov	r3, s16
 800fe5e:	4652      	mov	r2, sl
 800fe60:	4631      	mov	r1, r6
 800fe62:	4628      	mov	r0, r5
 800fe64:	47b8      	blx	r7
 800fe66:	3001      	adds	r0, #1
 800fe68:	f43f ae6b 	beq.w	800fb42 <_printf_float+0xc2>
 800fe6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe70:	2200      	movs	r2, #0
 800fe72:	2300      	movs	r3, #0
 800fe74:	f7f0 fe38 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe78:	b9d8      	cbnz	r0, 800feb2 <_printf_float+0x432>
 800fe7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe7c:	f108 0201 	add.w	r2, r8, #1
 800fe80:	3b01      	subs	r3, #1
 800fe82:	4631      	mov	r1, r6
 800fe84:	4628      	mov	r0, r5
 800fe86:	47b8      	blx	r7
 800fe88:	3001      	adds	r0, #1
 800fe8a:	d10e      	bne.n	800feaa <_printf_float+0x42a>
 800fe8c:	e659      	b.n	800fb42 <_printf_float+0xc2>
 800fe8e:	2301      	movs	r3, #1
 800fe90:	4652      	mov	r2, sl
 800fe92:	4631      	mov	r1, r6
 800fe94:	4628      	mov	r0, r5
 800fe96:	47b8      	blx	r7
 800fe98:	3001      	adds	r0, #1
 800fe9a:	f43f ae52 	beq.w	800fb42 <_printf_float+0xc2>
 800fe9e:	f108 0801 	add.w	r8, r8, #1
 800fea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fea4:	3b01      	subs	r3, #1
 800fea6:	4543      	cmp	r3, r8
 800fea8:	dcf1      	bgt.n	800fe8e <_printf_float+0x40e>
 800feaa:	464b      	mov	r3, r9
 800feac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800feb0:	e6dc      	b.n	800fc6c <_printf_float+0x1ec>
 800feb2:	f04f 0800 	mov.w	r8, #0
 800feb6:	f104 0a1a 	add.w	sl, r4, #26
 800feba:	e7f2      	b.n	800fea2 <_printf_float+0x422>
 800febc:	2301      	movs	r3, #1
 800febe:	4642      	mov	r2, r8
 800fec0:	e7df      	b.n	800fe82 <_printf_float+0x402>
 800fec2:	2301      	movs	r3, #1
 800fec4:	464a      	mov	r2, r9
 800fec6:	4631      	mov	r1, r6
 800fec8:	4628      	mov	r0, r5
 800feca:	47b8      	blx	r7
 800fecc:	3001      	adds	r0, #1
 800fece:	f43f ae38 	beq.w	800fb42 <_printf_float+0xc2>
 800fed2:	f108 0801 	add.w	r8, r8, #1
 800fed6:	68e3      	ldr	r3, [r4, #12]
 800fed8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800feda:	1a5b      	subs	r3, r3, r1
 800fedc:	4543      	cmp	r3, r8
 800fede:	dcf0      	bgt.n	800fec2 <_printf_float+0x442>
 800fee0:	e6fa      	b.n	800fcd8 <_printf_float+0x258>
 800fee2:	f04f 0800 	mov.w	r8, #0
 800fee6:	f104 0919 	add.w	r9, r4, #25
 800feea:	e7f4      	b.n	800fed6 <_printf_float+0x456>

0800feec <_printf_common>:
 800feec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fef0:	4616      	mov	r6, r2
 800fef2:	4699      	mov	r9, r3
 800fef4:	688a      	ldr	r2, [r1, #8]
 800fef6:	690b      	ldr	r3, [r1, #16]
 800fef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fefc:	4293      	cmp	r3, r2
 800fefe:	bfb8      	it	lt
 800ff00:	4613      	movlt	r3, r2
 800ff02:	6033      	str	r3, [r6, #0]
 800ff04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff08:	4607      	mov	r7, r0
 800ff0a:	460c      	mov	r4, r1
 800ff0c:	b10a      	cbz	r2, 800ff12 <_printf_common+0x26>
 800ff0e:	3301      	adds	r3, #1
 800ff10:	6033      	str	r3, [r6, #0]
 800ff12:	6823      	ldr	r3, [r4, #0]
 800ff14:	0699      	lsls	r1, r3, #26
 800ff16:	bf42      	ittt	mi
 800ff18:	6833      	ldrmi	r3, [r6, #0]
 800ff1a:	3302      	addmi	r3, #2
 800ff1c:	6033      	strmi	r3, [r6, #0]
 800ff1e:	6825      	ldr	r5, [r4, #0]
 800ff20:	f015 0506 	ands.w	r5, r5, #6
 800ff24:	d106      	bne.n	800ff34 <_printf_common+0x48>
 800ff26:	f104 0a19 	add.w	sl, r4, #25
 800ff2a:	68e3      	ldr	r3, [r4, #12]
 800ff2c:	6832      	ldr	r2, [r6, #0]
 800ff2e:	1a9b      	subs	r3, r3, r2
 800ff30:	42ab      	cmp	r3, r5
 800ff32:	dc26      	bgt.n	800ff82 <_printf_common+0x96>
 800ff34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff38:	1e13      	subs	r3, r2, #0
 800ff3a:	6822      	ldr	r2, [r4, #0]
 800ff3c:	bf18      	it	ne
 800ff3e:	2301      	movne	r3, #1
 800ff40:	0692      	lsls	r2, r2, #26
 800ff42:	d42b      	bmi.n	800ff9c <_printf_common+0xb0>
 800ff44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff48:	4649      	mov	r1, r9
 800ff4a:	4638      	mov	r0, r7
 800ff4c:	47c0      	blx	r8
 800ff4e:	3001      	adds	r0, #1
 800ff50:	d01e      	beq.n	800ff90 <_printf_common+0xa4>
 800ff52:	6823      	ldr	r3, [r4, #0]
 800ff54:	68e5      	ldr	r5, [r4, #12]
 800ff56:	6832      	ldr	r2, [r6, #0]
 800ff58:	f003 0306 	and.w	r3, r3, #6
 800ff5c:	2b04      	cmp	r3, #4
 800ff5e:	bf08      	it	eq
 800ff60:	1aad      	subeq	r5, r5, r2
 800ff62:	68a3      	ldr	r3, [r4, #8]
 800ff64:	6922      	ldr	r2, [r4, #16]
 800ff66:	bf0c      	ite	eq
 800ff68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff6c:	2500      	movne	r5, #0
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	bfc4      	itt	gt
 800ff72:	1a9b      	subgt	r3, r3, r2
 800ff74:	18ed      	addgt	r5, r5, r3
 800ff76:	2600      	movs	r6, #0
 800ff78:	341a      	adds	r4, #26
 800ff7a:	42b5      	cmp	r5, r6
 800ff7c:	d11a      	bne.n	800ffb4 <_printf_common+0xc8>
 800ff7e:	2000      	movs	r0, #0
 800ff80:	e008      	b.n	800ff94 <_printf_common+0xa8>
 800ff82:	2301      	movs	r3, #1
 800ff84:	4652      	mov	r2, sl
 800ff86:	4649      	mov	r1, r9
 800ff88:	4638      	mov	r0, r7
 800ff8a:	47c0      	blx	r8
 800ff8c:	3001      	adds	r0, #1
 800ff8e:	d103      	bne.n	800ff98 <_printf_common+0xac>
 800ff90:	f04f 30ff 	mov.w	r0, #4294967295
 800ff94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff98:	3501      	adds	r5, #1
 800ff9a:	e7c6      	b.n	800ff2a <_printf_common+0x3e>
 800ff9c:	18e1      	adds	r1, r4, r3
 800ff9e:	1c5a      	adds	r2, r3, #1
 800ffa0:	2030      	movs	r0, #48	; 0x30
 800ffa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ffa6:	4422      	add	r2, r4
 800ffa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ffac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ffb0:	3302      	adds	r3, #2
 800ffb2:	e7c7      	b.n	800ff44 <_printf_common+0x58>
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	4622      	mov	r2, r4
 800ffb8:	4649      	mov	r1, r9
 800ffba:	4638      	mov	r0, r7
 800ffbc:	47c0      	blx	r8
 800ffbe:	3001      	adds	r0, #1
 800ffc0:	d0e6      	beq.n	800ff90 <_printf_common+0xa4>
 800ffc2:	3601      	adds	r6, #1
 800ffc4:	e7d9      	b.n	800ff7a <_printf_common+0x8e>
	...

0800ffc8 <_printf_i>:
 800ffc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ffcc:	7e0f      	ldrb	r7, [r1, #24]
 800ffce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ffd0:	2f78      	cmp	r7, #120	; 0x78
 800ffd2:	4691      	mov	r9, r2
 800ffd4:	4680      	mov	r8, r0
 800ffd6:	460c      	mov	r4, r1
 800ffd8:	469a      	mov	sl, r3
 800ffda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ffde:	d807      	bhi.n	800fff0 <_printf_i+0x28>
 800ffe0:	2f62      	cmp	r7, #98	; 0x62
 800ffe2:	d80a      	bhi.n	800fffa <_printf_i+0x32>
 800ffe4:	2f00      	cmp	r7, #0
 800ffe6:	f000 80d8 	beq.w	801019a <_printf_i+0x1d2>
 800ffea:	2f58      	cmp	r7, #88	; 0x58
 800ffec:	f000 80a3 	beq.w	8010136 <_printf_i+0x16e>
 800fff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fff8:	e03a      	b.n	8010070 <_printf_i+0xa8>
 800fffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fffe:	2b15      	cmp	r3, #21
 8010000:	d8f6      	bhi.n	800fff0 <_printf_i+0x28>
 8010002:	a101      	add	r1, pc, #4	; (adr r1, 8010008 <_printf_i+0x40>)
 8010004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010008:	08010061 	.word	0x08010061
 801000c:	08010075 	.word	0x08010075
 8010010:	0800fff1 	.word	0x0800fff1
 8010014:	0800fff1 	.word	0x0800fff1
 8010018:	0800fff1 	.word	0x0800fff1
 801001c:	0800fff1 	.word	0x0800fff1
 8010020:	08010075 	.word	0x08010075
 8010024:	0800fff1 	.word	0x0800fff1
 8010028:	0800fff1 	.word	0x0800fff1
 801002c:	0800fff1 	.word	0x0800fff1
 8010030:	0800fff1 	.word	0x0800fff1
 8010034:	08010181 	.word	0x08010181
 8010038:	080100a5 	.word	0x080100a5
 801003c:	08010163 	.word	0x08010163
 8010040:	0800fff1 	.word	0x0800fff1
 8010044:	0800fff1 	.word	0x0800fff1
 8010048:	080101a3 	.word	0x080101a3
 801004c:	0800fff1 	.word	0x0800fff1
 8010050:	080100a5 	.word	0x080100a5
 8010054:	0800fff1 	.word	0x0800fff1
 8010058:	0800fff1 	.word	0x0800fff1
 801005c:	0801016b 	.word	0x0801016b
 8010060:	682b      	ldr	r3, [r5, #0]
 8010062:	1d1a      	adds	r2, r3, #4
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	602a      	str	r2, [r5, #0]
 8010068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801006c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010070:	2301      	movs	r3, #1
 8010072:	e0a3      	b.n	80101bc <_printf_i+0x1f4>
 8010074:	6820      	ldr	r0, [r4, #0]
 8010076:	6829      	ldr	r1, [r5, #0]
 8010078:	0606      	lsls	r6, r0, #24
 801007a:	f101 0304 	add.w	r3, r1, #4
 801007e:	d50a      	bpl.n	8010096 <_printf_i+0xce>
 8010080:	680e      	ldr	r6, [r1, #0]
 8010082:	602b      	str	r3, [r5, #0]
 8010084:	2e00      	cmp	r6, #0
 8010086:	da03      	bge.n	8010090 <_printf_i+0xc8>
 8010088:	232d      	movs	r3, #45	; 0x2d
 801008a:	4276      	negs	r6, r6
 801008c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010090:	485e      	ldr	r0, [pc, #376]	; (801020c <_printf_i+0x244>)
 8010092:	230a      	movs	r3, #10
 8010094:	e019      	b.n	80100ca <_printf_i+0x102>
 8010096:	680e      	ldr	r6, [r1, #0]
 8010098:	602b      	str	r3, [r5, #0]
 801009a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801009e:	bf18      	it	ne
 80100a0:	b236      	sxthne	r6, r6
 80100a2:	e7ef      	b.n	8010084 <_printf_i+0xbc>
 80100a4:	682b      	ldr	r3, [r5, #0]
 80100a6:	6820      	ldr	r0, [r4, #0]
 80100a8:	1d19      	adds	r1, r3, #4
 80100aa:	6029      	str	r1, [r5, #0]
 80100ac:	0601      	lsls	r1, r0, #24
 80100ae:	d501      	bpl.n	80100b4 <_printf_i+0xec>
 80100b0:	681e      	ldr	r6, [r3, #0]
 80100b2:	e002      	b.n	80100ba <_printf_i+0xf2>
 80100b4:	0646      	lsls	r6, r0, #25
 80100b6:	d5fb      	bpl.n	80100b0 <_printf_i+0xe8>
 80100b8:	881e      	ldrh	r6, [r3, #0]
 80100ba:	4854      	ldr	r0, [pc, #336]	; (801020c <_printf_i+0x244>)
 80100bc:	2f6f      	cmp	r7, #111	; 0x6f
 80100be:	bf0c      	ite	eq
 80100c0:	2308      	moveq	r3, #8
 80100c2:	230a      	movne	r3, #10
 80100c4:	2100      	movs	r1, #0
 80100c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80100ca:	6865      	ldr	r5, [r4, #4]
 80100cc:	60a5      	str	r5, [r4, #8]
 80100ce:	2d00      	cmp	r5, #0
 80100d0:	bfa2      	ittt	ge
 80100d2:	6821      	ldrge	r1, [r4, #0]
 80100d4:	f021 0104 	bicge.w	r1, r1, #4
 80100d8:	6021      	strge	r1, [r4, #0]
 80100da:	b90e      	cbnz	r6, 80100e0 <_printf_i+0x118>
 80100dc:	2d00      	cmp	r5, #0
 80100de:	d04d      	beq.n	801017c <_printf_i+0x1b4>
 80100e0:	4615      	mov	r5, r2
 80100e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80100e6:	fb03 6711 	mls	r7, r3, r1, r6
 80100ea:	5dc7      	ldrb	r7, [r0, r7]
 80100ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80100f0:	4637      	mov	r7, r6
 80100f2:	42bb      	cmp	r3, r7
 80100f4:	460e      	mov	r6, r1
 80100f6:	d9f4      	bls.n	80100e2 <_printf_i+0x11a>
 80100f8:	2b08      	cmp	r3, #8
 80100fa:	d10b      	bne.n	8010114 <_printf_i+0x14c>
 80100fc:	6823      	ldr	r3, [r4, #0]
 80100fe:	07de      	lsls	r6, r3, #31
 8010100:	d508      	bpl.n	8010114 <_printf_i+0x14c>
 8010102:	6923      	ldr	r3, [r4, #16]
 8010104:	6861      	ldr	r1, [r4, #4]
 8010106:	4299      	cmp	r1, r3
 8010108:	bfde      	ittt	le
 801010a:	2330      	movle	r3, #48	; 0x30
 801010c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010110:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010114:	1b52      	subs	r2, r2, r5
 8010116:	6122      	str	r2, [r4, #16]
 8010118:	f8cd a000 	str.w	sl, [sp]
 801011c:	464b      	mov	r3, r9
 801011e:	aa03      	add	r2, sp, #12
 8010120:	4621      	mov	r1, r4
 8010122:	4640      	mov	r0, r8
 8010124:	f7ff fee2 	bl	800feec <_printf_common>
 8010128:	3001      	adds	r0, #1
 801012a:	d14c      	bne.n	80101c6 <_printf_i+0x1fe>
 801012c:	f04f 30ff 	mov.w	r0, #4294967295
 8010130:	b004      	add	sp, #16
 8010132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010136:	4835      	ldr	r0, [pc, #212]	; (801020c <_printf_i+0x244>)
 8010138:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801013c:	6829      	ldr	r1, [r5, #0]
 801013e:	6823      	ldr	r3, [r4, #0]
 8010140:	f851 6b04 	ldr.w	r6, [r1], #4
 8010144:	6029      	str	r1, [r5, #0]
 8010146:	061d      	lsls	r5, r3, #24
 8010148:	d514      	bpl.n	8010174 <_printf_i+0x1ac>
 801014a:	07df      	lsls	r7, r3, #31
 801014c:	bf44      	itt	mi
 801014e:	f043 0320 	orrmi.w	r3, r3, #32
 8010152:	6023      	strmi	r3, [r4, #0]
 8010154:	b91e      	cbnz	r6, 801015e <_printf_i+0x196>
 8010156:	6823      	ldr	r3, [r4, #0]
 8010158:	f023 0320 	bic.w	r3, r3, #32
 801015c:	6023      	str	r3, [r4, #0]
 801015e:	2310      	movs	r3, #16
 8010160:	e7b0      	b.n	80100c4 <_printf_i+0xfc>
 8010162:	6823      	ldr	r3, [r4, #0]
 8010164:	f043 0320 	orr.w	r3, r3, #32
 8010168:	6023      	str	r3, [r4, #0]
 801016a:	2378      	movs	r3, #120	; 0x78
 801016c:	4828      	ldr	r0, [pc, #160]	; (8010210 <_printf_i+0x248>)
 801016e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010172:	e7e3      	b.n	801013c <_printf_i+0x174>
 8010174:	0659      	lsls	r1, r3, #25
 8010176:	bf48      	it	mi
 8010178:	b2b6      	uxthmi	r6, r6
 801017a:	e7e6      	b.n	801014a <_printf_i+0x182>
 801017c:	4615      	mov	r5, r2
 801017e:	e7bb      	b.n	80100f8 <_printf_i+0x130>
 8010180:	682b      	ldr	r3, [r5, #0]
 8010182:	6826      	ldr	r6, [r4, #0]
 8010184:	6961      	ldr	r1, [r4, #20]
 8010186:	1d18      	adds	r0, r3, #4
 8010188:	6028      	str	r0, [r5, #0]
 801018a:	0635      	lsls	r5, r6, #24
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	d501      	bpl.n	8010194 <_printf_i+0x1cc>
 8010190:	6019      	str	r1, [r3, #0]
 8010192:	e002      	b.n	801019a <_printf_i+0x1d2>
 8010194:	0670      	lsls	r0, r6, #25
 8010196:	d5fb      	bpl.n	8010190 <_printf_i+0x1c8>
 8010198:	8019      	strh	r1, [r3, #0]
 801019a:	2300      	movs	r3, #0
 801019c:	6123      	str	r3, [r4, #16]
 801019e:	4615      	mov	r5, r2
 80101a0:	e7ba      	b.n	8010118 <_printf_i+0x150>
 80101a2:	682b      	ldr	r3, [r5, #0]
 80101a4:	1d1a      	adds	r2, r3, #4
 80101a6:	602a      	str	r2, [r5, #0]
 80101a8:	681d      	ldr	r5, [r3, #0]
 80101aa:	6862      	ldr	r2, [r4, #4]
 80101ac:	2100      	movs	r1, #0
 80101ae:	4628      	mov	r0, r5
 80101b0:	f7f0 f826 	bl	8000200 <memchr>
 80101b4:	b108      	cbz	r0, 80101ba <_printf_i+0x1f2>
 80101b6:	1b40      	subs	r0, r0, r5
 80101b8:	6060      	str	r0, [r4, #4]
 80101ba:	6863      	ldr	r3, [r4, #4]
 80101bc:	6123      	str	r3, [r4, #16]
 80101be:	2300      	movs	r3, #0
 80101c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101c4:	e7a8      	b.n	8010118 <_printf_i+0x150>
 80101c6:	6923      	ldr	r3, [r4, #16]
 80101c8:	462a      	mov	r2, r5
 80101ca:	4649      	mov	r1, r9
 80101cc:	4640      	mov	r0, r8
 80101ce:	47d0      	blx	sl
 80101d0:	3001      	adds	r0, #1
 80101d2:	d0ab      	beq.n	801012c <_printf_i+0x164>
 80101d4:	6823      	ldr	r3, [r4, #0]
 80101d6:	079b      	lsls	r3, r3, #30
 80101d8:	d413      	bmi.n	8010202 <_printf_i+0x23a>
 80101da:	68e0      	ldr	r0, [r4, #12]
 80101dc:	9b03      	ldr	r3, [sp, #12]
 80101de:	4298      	cmp	r0, r3
 80101e0:	bfb8      	it	lt
 80101e2:	4618      	movlt	r0, r3
 80101e4:	e7a4      	b.n	8010130 <_printf_i+0x168>
 80101e6:	2301      	movs	r3, #1
 80101e8:	4632      	mov	r2, r6
 80101ea:	4649      	mov	r1, r9
 80101ec:	4640      	mov	r0, r8
 80101ee:	47d0      	blx	sl
 80101f0:	3001      	adds	r0, #1
 80101f2:	d09b      	beq.n	801012c <_printf_i+0x164>
 80101f4:	3501      	adds	r5, #1
 80101f6:	68e3      	ldr	r3, [r4, #12]
 80101f8:	9903      	ldr	r1, [sp, #12]
 80101fa:	1a5b      	subs	r3, r3, r1
 80101fc:	42ab      	cmp	r3, r5
 80101fe:	dcf2      	bgt.n	80101e6 <_printf_i+0x21e>
 8010200:	e7eb      	b.n	80101da <_printf_i+0x212>
 8010202:	2500      	movs	r5, #0
 8010204:	f104 0619 	add.w	r6, r4, #25
 8010208:	e7f5      	b.n	80101f6 <_printf_i+0x22e>
 801020a:	bf00      	nop
 801020c:	0802d5d3 	.word	0x0802d5d3
 8010210:	0802d5e4 	.word	0x0802d5e4

08010214 <_sbrk_r>:
 8010214:	b538      	push	{r3, r4, r5, lr}
 8010216:	4d06      	ldr	r5, [pc, #24]	; (8010230 <_sbrk_r+0x1c>)
 8010218:	2300      	movs	r3, #0
 801021a:	4604      	mov	r4, r0
 801021c:	4608      	mov	r0, r1
 801021e:	602b      	str	r3, [r5, #0]
 8010220:	f7f4 fb7e 	bl	8004920 <_sbrk>
 8010224:	1c43      	adds	r3, r0, #1
 8010226:	d102      	bne.n	801022e <_sbrk_r+0x1a>
 8010228:	682b      	ldr	r3, [r5, #0]
 801022a:	b103      	cbz	r3, 801022e <_sbrk_r+0x1a>
 801022c:	6023      	str	r3, [r4, #0]
 801022e:	bd38      	pop	{r3, r4, r5, pc}
 8010230:	20005b9c 	.word	0x20005b9c

08010234 <siprintf>:
 8010234:	b40e      	push	{r1, r2, r3}
 8010236:	b500      	push	{lr}
 8010238:	b09c      	sub	sp, #112	; 0x70
 801023a:	ab1d      	add	r3, sp, #116	; 0x74
 801023c:	9002      	str	r0, [sp, #8]
 801023e:	9006      	str	r0, [sp, #24]
 8010240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010244:	4809      	ldr	r0, [pc, #36]	; (801026c <siprintf+0x38>)
 8010246:	9107      	str	r1, [sp, #28]
 8010248:	9104      	str	r1, [sp, #16]
 801024a:	4909      	ldr	r1, [pc, #36]	; (8010270 <siprintf+0x3c>)
 801024c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010250:	9105      	str	r1, [sp, #20]
 8010252:	6800      	ldr	r0, [r0, #0]
 8010254:	9301      	str	r3, [sp, #4]
 8010256:	a902      	add	r1, sp, #8
 8010258:	f001 fe5c 	bl	8011f14 <_svfiprintf_r>
 801025c:	9b02      	ldr	r3, [sp, #8]
 801025e:	2200      	movs	r2, #0
 8010260:	701a      	strb	r2, [r3, #0]
 8010262:	b01c      	add	sp, #112	; 0x70
 8010264:	f85d eb04 	ldr.w	lr, [sp], #4
 8010268:	b003      	add	sp, #12
 801026a:	4770      	bx	lr
 801026c:	200000d4 	.word	0x200000d4
 8010270:	ffff0208 	.word	0xffff0208

08010274 <__sread>:
 8010274:	b510      	push	{r4, lr}
 8010276:	460c      	mov	r4, r1
 8010278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801027c:	f001 ff4a 	bl	8012114 <_read_r>
 8010280:	2800      	cmp	r0, #0
 8010282:	bfab      	itete	ge
 8010284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010286:	89a3      	ldrhlt	r3, [r4, #12]
 8010288:	181b      	addge	r3, r3, r0
 801028a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801028e:	bfac      	ite	ge
 8010290:	6563      	strge	r3, [r4, #84]	; 0x54
 8010292:	81a3      	strhlt	r3, [r4, #12]
 8010294:	bd10      	pop	{r4, pc}

08010296 <__swrite>:
 8010296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801029a:	461f      	mov	r7, r3
 801029c:	898b      	ldrh	r3, [r1, #12]
 801029e:	05db      	lsls	r3, r3, #23
 80102a0:	4605      	mov	r5, r0
 80102a2:	460c      	mov	r4, r1
 80102a4:	4616      	mov	r6, r2
 80102a6:	d505      	bpl.n	80102b4 <__swrite+0x1e>
 80102a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102ac:	2302      	movs	r3, #2
 80102ae:	2200      	movs	r2, #0
 80102b0:	f001 f95c 	bl	801156c <_lseek_r>
 80102b4:	89a3      	ldrh	r3, [r4, #12]
 80102b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102be:	81a3      	strh	r3, [r4, #12]
 80102c0:	4632      	mov	r2, r6
 80102c2:	463b      	mov	r3, r7
 80102c4:	4628      	mov	r0, r5
 80102c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102ca:	f000 b87b 	b.w	80103c4 <_write_r>

080102ce <__sseek>:
 80102ce:	b510      	push	{r4, lr}
 80102d0:	460c      	mov	r4, r1
 80102d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d6:	f001 f949 	bl	801156c <_lseek_r>
 80102da:	1c43      	adds	r3, r0, #1
 80102dc:	89a3      	ldrh	r3, [r4, #12]
 80102de:	bf15      	itete	ne
 80102e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80102e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80102e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80102ea:	81a3      	strheq	r3, [r4, #12]
 80102ec:	bf18      	it	ne
 80102ee:	81a3      	strhne	r3, [r4, #12]
 80102f0:	bd10      	pop	{r4, pc}

080102f2 <__sclose>:
 80102f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102f6:	f000 b8ed 	b.w	80104d4 <_close_r>

080102fa <strncpy>:
 80102fa:	b510      	push	{r4, lr}
 80102fc:	3901      	subs	r1, #1
 80102fe:	4603      	mov	r3, r0
 8010300:	b132      	cbz	r2, 8010310 <strncpy+0x16>
 8010302:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010306:	f803 4b01 	strb.w	r4, [r3], #1
 801030a:	3a01      	subs	r2, #1
 801030c:	2c00      	cmp	r4, #0
 801030e:	d1f7      	bne.n	8010300 <strncpy+0x6>
 8010310:	441a      	add	r2, r3
 8010312:	2100      	movs	r1, #0
 8010314:	4293      	cmp	r3, r2
 8010316:	d100      	bne.n	801031a <strncpy+0x20>
 8010318:	bd10      	pop	{r4, pc}
 801031a:	f803 1b01 	strb.w	r1, [r3], #1
 801031e:	e7f9      	b.n	8010314 <strncpy+0x1a>

08010320 <__swbuf_r>:
 8010320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010322:	460e      	mov	r6, r1
 8010324:	4614      	mov	r4, r2
 8010326:	4605      	mov	r5, r0
 8010328:	b118      	cbz	r0, 8010332 <__swbuf_r+0x12>
 801032a:	6983      	ldr	r3, [r0, #24]
 801032c:	b90b      	cbnz	r3, 8010332 <__swbuf_r+0x12>
 801032e:	f001 f877 	bl	8011420 <__sinit>
 8010332:	4b21      	ldr	r3, [pc, #132]	; (80103b8 <__swbuf_r+0x98>)
 8010334:	429c      	cmp	r4, r3
 8010336:	d12b      	bne.n	8010390 <__swbuf_r+0x70>
 8010338:	686c      	ldr	r4, [r5, #4]
 801033a:	69a3      	ldr	r3, [r4, #24]
 801033c:	60a3      	str	r3, [r4, #8]
 801033e:	89a3      	ldrh	r3, [r4, #12]
 8010340:	071a      	lsls	r2, r3, #28
 8010342:	d52f      	bpl.n	80103a4 <__swbuf_r+0x84>
 8010344:	6923      	ldr	r3, [r4, #16]
 8010346:	b36b      	cbz	r3, 80103a4 <__swbuf_r+0x84>
 8010348:	6923      	ldr	r3, [r4, #16]
 801034a:	6820      	ldr	r0, [r4, #0]
 801034c:	1ac0      	subs	r0, r0, r3
 801034e:	6963      	ldr	r3, [r4, #20]
 8010350:	b2f6      	uxtb	r6, r6
 8010352:	4283      	cmp	r3, r0
 8010354:	4637      	mov	r7, r6
 8010356:	dc04      	bgt.n	8010362 <__swbuf_r+0x42>
 8010358:	4621      	mov	r1, r4
 801035a:	4628      	mov	r0, r5
 801035c:	f000 ffcc 	bl	80112f8 <_fflush_r>
 8010360:	bb30      	cbnz	r0, 80103b0 <__swbuf_r+0x90>
 8010362:	68a3      	ldr	r3, [r4, #8]
 8010364:	3b01      	subs	r3, #1
 8010366:	60a3      	str	r3, [r4, #8]
 8010368:	6823      	ldr	r3, [r4, #0]
 801036a:	1c5a      	adds	r2, r3, #1
 801036c:	6022      	str	r2, [r4, #0]
 801036e:	701e      	strb	r6, [r3, #0]
 8010370:	6963      	ldr	r3, [r4, #20]
 8010372:	3001      	adds	r0, #1
 8010374:	4283      	cmp	r3, r0
 8010376:	d004      	beq.n	8010382 <__swbuf_r+0x62>
 8010378:	89a3      	ldrh	r3, [r4, #12]
 801037a:	07db      	lsls	r3, r3, #31
 801037c:	d506      	bpl.n	801038c <__swbuf_r+0x6c>
 801037e:	2e0a      	cmp	r6, #10
 8010380:	d104      	bne.n	801038c <__swbuf_r+0x6c>
 8010382:	4621      	mov	r1, r4
 8010384:	4628      	mov	r0, r5
 8010386:	f000 ffb7 	bl	80112f8 <_fflush_r>
 801038a:	b988      	cbnz	r0, 80103b0 <__swbuf_r+0x90>
 801038c:	4638      	mov	r0, r7
 801038e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010390:	4b0a      	ldr	r3, [pc, #40]	; (80103bc <__swbuf_r+0x9c>)
 8010392:	429c      	cmp	r4, r3
 8010394:	d101      	bne.n	801039a <__swbuf_r+0x7a>
 8010396:	68ac      	ldr	r4, [r5, #8]
 8010398:	e7cf      	b.n	801033a <__swbuf_r+0x1a>
 801039a:	4b09      	ldr	r3, [pc, #36]	; (80103c0 <__swbuf_r+0xa0>)
 801039c:	429c      	cmp	r4, r3
 801039e:	bf08      	it	eq
 80103a0:	68ec      	ldreq	r4, [r5, #12]
 80103a2:	e7ca      	b.n	801033a <__swbuf_r+0x1a>
 80103a4:	4621      	mov	r1, r4
 80103a6:	4628      	mov	r0, r5
 80103a8:	f000 f81e 	bl	80103e8 <__swsetup_r>
 80103ac:	2800      	cmp	r0, #0
 80103ae:	d0cb      	beq.n	8010348 <__swbuf_r+0x28>
 80103b0:	f04f 37ff 	mov.w	r7, #4294967295
 80103b4:	e7ea      	b.n	801038c <__swbuf_r+0x6c>
 80103b6:	bf00      	nop
 80103b8:	0802d7a8 	.word	0x0802d7a8
 80103bc:	0802d7c8 	.word	0x0802d7c8
 80103c0:	0802d788 	.word	0x0802d788

080103c4 <_write_r>:
 80103c4:	b538      	push	{r3, r4, r5, lr}
 80103c6:	4d07      	ldr	r5, [pc, #28]	; (80103e4 <_write_r+0x20>)
 80103c8:	4604      	mov	r4, r0
 80103ca:	4608      	mov	r0, r1
 80103cc:	4611      	mov	r1, r2
 80103ce:	2200      	movs	r2, #0
 80103d0:	602a      	str	r2, [r5, #0]
 80103d2:	461a      	mov	r2, r3
 80103d4:	f7f4 fa53 	bl	800487e <_write>
 80103d8:	1c43      	adds	r3, r0, #1
 80103da:	d102      	bne.n	80103e2 <_write_r+0x1e>
 80103dc:	682b      	ldr	r3, [r5, #0]
 80103de:	b103      	cbz	r3, 80103e2 <_write_r+0x1e>
 80103e0:	6023      	str	r3, [r4, #0]
 80103e2:	bd38      	pop	{r3, r4, r5, pc}
 80103e4:	20005b9c 	.word	0x20005b9c

080103e8 <__swsetup_r>:
 80103e8:	4b32      	ldr	r3, [pc, #200]	; (80104b4 <__swsetup_r+0xcc>)
 80103ea:	b570      	push	{r4, r5, r6, lr}
 80103ec:	681d      	ldr	r5, [r3, #0]
 80103ee:	4606      	mov	r6, r0
 80103f0:	460c      	mov	r4, r1
 80103f2:	b125      	cbz	r5, 80103fe <__swsetup_r+0x16>
 80103f4:	69ab      	ldr	r3, [r5, #24]
 80103f6:	b913      	cbnz	r3, 80103fe <__swsetup_r+0x16>
 80103f8:	4628      	mov	r0, r5
 80103fa:	f001 f811 	bl	8011420 <__sinit>
 80103fe:	4b2e      	ldr	r3, [pc, #184]	; (80104b8 <__swsetup_r+0xd0>)
 8010400:	429c      	cmp	r4, r3
 8010402:	d10f      	bne.n	8010424 <__swsetup_r+0x3c>
 8010404:	686c      	ldr	r4, [r5, #4]
 8010406:	89a3      	ldrh	r3, [r4, #12]
 8010408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801040c:	0719      	lsls	r1, r3, #28
 801040e:	d42c      	bmi.n	801046a <__swsetup_r+0x82>
 8010410:	06dd      	lsls	r5, r3, #27
 8010412:	d411      	bmi.n	8010438 <__swsetup_r+0x50>
 8010414:	2309      	movs	r3, #9
 8010416:	6033      	str	r3, [r6, #0]
 8010418:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801041c:	81a3      	strh	r3, [r4, #12]
 801041e:	f04f 30ff 	mov.w	r0, #4294967295
 8010422:	e03e      	b.n	80104a2 <__swsetup_r+0xba>
 8010424:	4b25      	ldr	r3, [pc, #148]	; (80104bc <__swsetup_r+0xd4>)
 8010426:	429c      	cmp	r4, r3
 8010428:	d101      	bne.n	801042e <__swsetup_r+0x46>
 801042a:	68ac      	ldr	r4, [r5, #8]
 801042c:	e7eb      	b.n	8010406 <__swsetup_r+0x1e>
 801042e:	4b24      	ldr	r3, [pc, #144]	; (80104c0 <__swsetup_r+0xd8>)
 8010430:	429c      	cmp	r4, r3
 8010432:	bf08      	it	eq
 8010434:	68ec      	ldreq	r4, [r5, #12]
 8010436:	e7e6      	b.n	8010406 <__swsetup_r+0x1e>
 8010438:	0758      	lsls	r0, r3, #29
 801043a:	d512      	bpl.n	8010462 <__swsetup_r+0x7a>
 801043c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801043e:	b141      	cbz	r1, 8010452 <__swsetup_r+0x6a>
 8010440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010444:	4299      	cmp	r1, r3
 8010446:	d002      	beq.n	801044e <__swsetup_r+0x66>
 8010448:	4630      	mov	r0, r6
 801044a:	f7ff f83f 	bl	800f4cc <_free_r>
 801044e:	2300      	movs	r3, #0
 8010450:	6363      	str	r3, [r4, #52]	; 0x34
 8010452:	89a3      	ldrh	r3, [r4, #12]
 8010454:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010458:	81a3      	strh	r3, [r4, #12]
 801045a:	2300      	movs	r3, #0
 801045c:	6063      	str	r3, [r4, #4]
 801045e:	6923      	ldr	r3, [r4, #16]
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	89a3      	ldrh	r3, [r4, #12]
 8010464:	f043 0308 	orr.w	r3, r3, #8
 8010468:	81a3      	strh	r3, [r4, #12]
 801046a:	6923      	ldr	r3, [r4, #16]
 801046c:	b94b      	cbnz	r3, 8010482 <__swsetup_r+0x9a>
 801046e:	89a3      	ldrh	r3, [r4, #12]
 8010470:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010478:	d003      	beq.n	8010482 <__swsetup_r+0x9a>
 801047a:	4621      	mov	r1, r4
 801047c:	4630      	mov	r0, r6
 801047e:	f001 f8ad 	bl	80115dc <__smakebuf_r>
 8010482:	89a0      	ldrh	r0, [r4, #12]
 8010484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010488:	f010 0301 	ands.w	r3, r0, #1
 801048c:	d00a      	beq.n	80104a4 <__swsetup_r+0xbc>
 801048e:	2300      	movs	r3, #0
 8010490:	60a3      	str	r3, [r4, #8]
 8010492:	6963      	ldr	r3, [r4, #20]
 8010494:	425b      	negs	r3, r3
 8010496:	61a3      	str	r3, [r4, #24]
 8010498:	6923      	ldr	r3, [r4, #16]
 801049a:	b943      	cbnz	r3, 80104ae <__swsetup_r+0xc6>
 801049c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80104a0:	d1ba      	bne.n	8010418 <__swsetup_r+0x30>
 80104a2:	bd70      	pop	{r4, r5, r6, pc}
 80104a4:	0781      	lsls	r1, r0, #30
 80104a6:	bf58      	it	pl
 80104a8:	6963      	ldrpl	r3, [r4, #20]
 80104aa:	60a3      	str	r3, [r4, #8]
 80104ac:	e7f4      	b.n	8010498 <__swsetup_r+0xb0>
 80104ae:	2000      	movs	r0, #0
 80104b0:	e7f7      	b.n	80104a2 <__swsetup_r+0xba>
 80104b2:	bf00      	nop
 80104b4:	200000d4 	.word	0x200000d4
 80104b8:	0802d7a8 	.word	0x0802d7a8
 80104bc:	0802d7c8 	.word	0x0802d7c8
 80104c0:	0802d788 	.word	0x0802d788

080104c4 <abort>:
 80104c4:	b508      	push	{r3, lr}
 80104c6:	2006      	movs	r0, #6
 80104c8:	f001 fe5e 	bl	8012188 <raise>
 80104cc:	2001      	movs	r0, #1
 80104ce:	f7f4 f9af 	bl	8004830 <_exit>
	...

080104d4 <_close_r>:
 80104d4:	b538      	push	{r3, r4, r5, lr}
 80104d6:	4d06      	ldr	r5, [pc, #24]	; (80104f0 <_close_r+0x1c>)
 80104d8:	2300      	movs	r3, #0
 80104da:	4604      	mov	r4, r0
 80104dc:	4608      	mov	r0, r1
 80104de:	602b      	str	r3, [r5, #0]
 80104e0:	f7f4 f9e9 	bl	80048b6 <_close>
 80104e4:	1c43      	adds	r3, r0, #1
 80104e6:	d102      	bne.n	80104ee <_close_r+0x1a>
 80104e8:	682b      	ldr	r3, [r5, #0]
 80104ea:	b103      	cbz	r3, 80104ee <_close_r+0x1a>
 80104ec:	6023      	str	r3, [r4, #0]
 80104ee:	bd38      	pop	{r3, r4, r5, pc}
 80104f0:	20005b9c 	.word	0x20005b9c

080104f4 <quorem>:
 80104f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f8:	6903      	ldr	r3, [r0, #16]
 80104fa:	690c      	ldr	r4, [r1, #16]
 80104fc:	42a3      	cmp	r3, r4
 80104fe:	4607      	mov	r7, r0
 8010500:	f2c0 8081 	blt.w	8010606 <quorem+0x112>
 8010504:	3c01      	subs	r4, #1
 8010506:	f101 0814 	add.w	r8, r1, #20
 801050a:	f100 0514 	add.w	r5, r0, #20
 801050e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010512:	9301      	str	r3, [sp, #4]
 8010514:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801051c:	3301      	adds	r3, #1
 801051e:	429a      	cmp	r2, r3
 8010520:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010524:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010528:	fbb2 f6f3 	udiv	r6, r2, r3
 801052c:	d331      	bcc.n	8010592 <quorem+0x9e>
 801052e:	f04f 0e00 	mov.w	lr, #0
 8010532:	4640      	mov	r0, r8
 8010534:	46ac      	mov	ip, r5
 8010536:	46f2      	mov	sl, lr
 8010538:	f850 2b04 	ldr.w	r2, [r0], #4
 801053c:	b293      	uxth	r3, r2
 801053e:	fb06 e303 	mla	r3, r6, r3, lr
 8010542:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010546:	b29b      	uxth	r3, r3
 8010548:	ebaa 0303 	sub.w	r3, sl, r3
 801054c:	f8dc a000 	ldr.w	sl, [ip]
 8010550:	0c12      	lsrs	r2, r2, #16
 8010552:	fa13 f38a 	uxtah	r3, r3, sl
 8010556:	fb06 e202 	mla	r2, r6, r2, lr
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	9b00      	ldr	r3, [sp, #0]
 801055e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010562:	b292      	uxth	r2, r2
 8010564:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010568:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801056c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010570:	4581      	cmp	r9, r0
 8010572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010576:	f84c 3b04 	str.w	r3, [ip], #4
 801057a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801057e:	d2db      	bcs.n	8010538 <quorem+0x44>
 8010580:	f855 300b 	ldr.w	r3, [r5, fp]
 8010584:	b92b      	cbnz	r3, 8010592 <quorem+0x9e>
 8010586:	9b01      	ldr	r3, [sp, #4]
 8010588:	3b04      	subs	r3, #4
 801058a:	429d      	cmp	r5, r3
 801058c:	461a      	mov	r2, r3
 801058e:	d32e      	bcc.n	80105ee <quorem+0xfa>
 8010590:	613c      	str	r4, [r7, #16]
 8010592:	4638      	mov	r0, r7
 8010594:	f001 fb1c 	bl	8011bd0 <__mcmp>
 8010598:	2800      	cmp	r0, #0
 801059a:	db24      	blt.n	80105e6 <quorem+0xf2>
 801059c:	3601      	adds	r6, #1
 801059e:	4628      	mov	r0, r5
 80105a0:	f04f 0c00 	mov.w	ip, #0
 80105a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80105a8:	f8d0 e000 	ldr.w	lr, [r0]
 80105ac:	b293      	uxth	r3, r2
 80105ae:	ebac 0303 	sub.w	r3, ip, r3
 80105b2:	0c12      	lsrs	r2, r2, #16
 80105b4:	fa13 f38e 	uxtah	r3, r3, lr
 80105b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80105bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80105c6:	45c1      	cmp	r9, r8
 80105c8:	f840 3b04 	str.w	r3, [r0], #4
 80105cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80105d0:	d2e8      	bcs.n	80105a4 <quorem+0xb0>
 80105d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105da:	b922      	cbnz	r2, 80105e6 <quorem+0xf2>
 80105dc:	3b04      	subs	r3, #4
 80105de:	429d      	cmp	r5, r3
 80105e0:	461a      	mov	r2, r3
 80105e2:	d30a      	bcc.n	80105fa <quorem+0x106>
 80105e4:	613c      	str	r4, [r7, #16]
 80105e6:	4630      	mov	r0, r6
 80105e8:	b003      	add	sp, #12
 80105ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ee:	6812      	ldr	r2, [r2, #0]
 80105f0:	3b04      	subs	r3, #4
 80105f2:	2a00      	cmp	r2, #0
 80105f4:	d1cc      	bne.n	8010590 <quorem+0x9c>
 80105f6:	3c01      	subs	r4, #1
 80105f8:	e7c7      	b.n	801058a <quorem+0x96>
 80105fa:	6812      	ldr	r2, [r2, #0]
 80105fc:	3b04      	subs	r3, #4
 80105fe:	2a00      	cmp	r2, #0
 8010600:	d1f0      	bne.n	80105e4 <quorem+0xf0>
 8010602:	3c01      	subs	r4, #1
 8010604:	e7eb      	b.n	80105de <quorem+0xea>
 8010606:	2000      	movs	r0, #0
 8010608:	e7ee      	b.n	80105e8 <quorem+0xf4>
 801060a:	0000      	movs	r0, r0
 801060c:	0000      	movs	r0, r0
	...

08010610 <_dtoa_r>:
 8010610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010614:	ed2d 8b04 	vpush	{d8-d9}
 8010618:	ec57 6b10 	vmov	r6, r7, d0
 801061c:	b093      	sub	sp, #76	; 0x4c
 801061e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010620:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010624:	9106      	str	r1, [sp, #24]
 8010626:	ee10 aa10 	vmov	sl, s0
 801062a:	4604      	mov	r4, r0
 801062c:	9209      	str	r2, [sp, #36]	; 0x24
 801062e:	930c      	str	r3, [sp, #48]	; 0x30
 8010630:	46bb      	mov	fp, r7
 8010632:	b975      	cbnz	r5, 8010652 <_dtoa_r+0x42>
 8010634:	2010      	movs	r0, #16
 8010636:	f7fe ff23 	bl	800f480 <malloc>
 801063a:	4602      	mov	r2, r0
 801063c:	6260      	str	r0, [r4, #36]	; 0x24
 801063e:	b920      	cbnz	r0, 801064a <_dtoa_r+0x3a>
 8010640:	4ba7      	ldr	r3, [pc, #668]	; (80108e0 <_dtoa_r+0x2d0>)
 8010642:	21ea      	movs	r1, #234	; 0xea
 8010644:	48a7      	ldr	r0, [pc, #668]	; (80108e4 <_dtoa_r+0x2d4>)
 8010646:	f7fe fec1 	bl	800f3cc <__assert_func>
 801064a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801064e:	6005      	str	r5, [r0, #0]
 8010650:	60c5      	str	r5, [r0, #12]
 8010652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010654:	6819      	ldr	r1, [r3, #0]
 8010656:	b151      	cbz	r1, 801066e <_dtoa_r+0x5e>
 8010658:	685a      	ldr	r2, [r3, #4]
 801065a:	604a      	str	r2, [r1, #4]
 801065c:	2301      	movs	r3, #1
 801065e:	4093      	lsls	r3, r2
 8010660:	608b      	str	r3, [r1, #8]
 8010662:	4620      	mov	r0, r4
 8010664:	f001 f872 	bl	801174c <_Bfree>
 8010668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801066a:	2200      	movs	r2, #0
 801066c:	601a      	str	r2, [r3, #0]
 801066e:	1e3b      	subs	r3, r7, #0
 8010670:	bfaa      	itet	ge
 8010672:	2300      	movge	r3, #0
 8010674:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010678:	f8c8 3000 	strge.w	r3, [r8]
 801067c:	4b9a      	ldr	r3, [pc, #616]	; (80108e8 <_dtoa_r+0x2d8>)
 801067e:	bfbc      	itt	lt
 8010680:	2201      	movlt	r2, #1
 8010682:	f8c8 2000 	strlt.w	r2, [r8]
 8010686:	ea33 030b 	bics.w	r3, r3, fp
 801068a:	d11b      	bne.n	80106c4 <_dtoa_r+0xb4>
 801068c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801068e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010692:	6013      	str	r3, [r2, #0]
 8010694:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010698:	4333      	orrs	r3, r6
 801069a:	f000 8592 	beq.w	80111c2 <_dtoa_r+0xbb2>
 801069e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106a0:	b963      	cbnz	r3, 80106bc <_dtoa_r+0xac>
 80106a2:	4b92      	ldr	r3, [pc, #584]	; (80108ec <_dtoa_r+0x2dc>)
 80106a4:	e022      	b.n	80106ec <_dtoa_r+0xdc>
 80106a6:	4b92      	ldr	r3, [pc, #584]	; (80108f0 <_dtoa_r+0x2e0>)
 80106a8:	9301      	str	r3, [sp, #4]
 80106aa:	3308      	adds	r3, #8
 80106ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80106ae:	6013      	str	r3, [r2, #0]
 80106b0:	9801      	ldr	r0, [sp, #4]
 80106b2:	b013      	add	sp, #76	; 0x4c
 80106b4:	ecbd 8b04 	vpop	{d8-d9}
 80106b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106bc:	4b8b      	ldr	r3, [pc, #556]	; (80108ec <_dtoa_r+0x2dc>)
 80106be:	9301      	str	r3, [sp, #4]
 80106c0:	3303      	adds	r3, #3
 80106c2:	e7f3      	b.n	80106ac <_dtoa_r+0x9c>
 80106c4:	2200      	movs	r2, #0
 80106c6:	2300      	movs	r3, #0
 80106c8:	4650      	mov	r0, sl
 80106ca:	4659      	mov	r1, fp
 80106cc:	f7f0 fa0c 	bl	8000ae8 <__aeabi_dcmpeq>
 80106d0:	ec4b ab19 	vmov	d9, sl, fp
 80106d4:	4680      	mov	r8, r0
 80106d6:	b158      	cbz	r0, 80106f0 <_dtoa_r+0xe0>
 80106d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80106da:	2301      	movs	r3, #1
 80106dc:	6013      	str	r3, [r2, #0]
 80106de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f000 856b 	beq.w	80111bc <_dtoa_r+0xbac>
 80106e6:	4883      	ldr	r0, [pc, #524]	; (80108f4 <_dtoa_r+0x2e4>)
 80106e8:	6018      	str	r0, [r3, #0]
 80106ea:	1e43      	subs	r3, r0, #1
 80106ec:	9301      	str	r3, [sp, #4]
 80106ee:	e7df      	b.n	80106b0 <_dtoa_r+0xa0>
 80106f0:	ec4b ab10 	vmov	d0, sl, fp
 80106f4:	aa10      	add	r2, sp, #64	; 0x40
 80106f6:	a911      	add	r1, sp, #68	; 0x44
 80106f8:	4620      	mov	r0, r4
 80106fa:	f001 fb0f 	bl	8011d1c <__d2b>
 80106fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010702:	ee08 0a10 	vmov	s16, r0
 8010706:	2d00      	cmp	r5, #0
 8010708:	f000 8084 	beq.w	8010814 <_dtoa_r+0x204>
 801070c:	ee19 3a90 	vmov	r3, s19
 8010710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010714:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010718:	4656      	mov	r6, sl
 801071a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801071e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010722:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010726:	4b74      	ldr	r3, [pc, #464]	; (80108f8 <_dtoa_r+0x2e8>)
 8010728:	2200      	movs	r2, #0
 801072a:	4630      	mov	r0, r6
 801072c:	4639      	mov	r1, r7
 801072e:	f7ef fdbb 	bl	80002a8 <__aeabi_dsub>
 8010732:	a365      	add	r3, pc, #404	; (adr r3, 80108c8 <_dtoa_r+0x2b8>)
 8010734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010738:	f7ef ff6e 	bl	8000618 <__aeabi_dmul>
 801073c:	a364      	add	r3, pc, #400	; (adr r3, 80108d0 <_dtoa_r+0x2c0>)
 801073e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010742:	f7ef fdb3 	bl	80002ac <__adddf3>
 8010746:	4606      	mov	r6, r0
 8010748:	4628      	mov	r0, r5
 801074a:	460f      	mov	r7, r1
 801074c:	f7ef fefa 	bl	8000544 <__aeabi_i2d>
 8010750:	a361      	add	r3, pc, #388	; (adr r3, 80108d8 <_dtoa_r+0x2c8>)
 8010752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010756:	f7ef ff5f 	bl	8000618 <__aeabi_dmul>
 801075a:	4602      	mov	r2, r0
 801075c:	460b      	mov	r3, r1
 801075e:	4630      	mov	r0, r6
 8010760:	4639      	mov	r1, r7
 8010762:	f7ef fda3 	bl	80002ac <__adddf3>
 8010766:	4606      	mov	r6, r0
 8010768:	460f      	mov	r7, r1
 801076a:	f7f0 fa05 	bl	8000b78 <__aeabi_d2iz>
 801076e:	2200      	movs	r2, #0
 8010770:	9000      	str	r0, [sp, #0]
 8010772:	2300      	movs	r3, #0
 8010774:	4630      	mov	r0, r6
 8010776:	4639      	mov	r1, r7
 8010778:	f7f0 f9c0 	bl	8000afc <__aeabi_dcmplt>
 801077c:	b150      	cbz	r0, 8010794 <_dtoa_r+0x184>
 801077e:	9800      	ldr	r0, [sp, #0]
 8010780:	f7ef fee0 	bl	8000544 <__aeabi_i2d>
 8010784:	4632      	mov	r2, r6
 8010786:	463b      	mov	r3, r7
 8010788:	f7f0 f9ae 	bl	8000ae8 <__aeabi_dcmpeq>
 801078c:	b910      	cbnz	r0, 8010794 <_dtoa_r+0x184>
 801078e:	9b00      	ldr	r3, [sp, #0]
 8010790:	3b01      	subs	r3, #1
 8010792:	9300      	str	r3, [sp, #0]
 8010794:	9b00      	ldr	r3, [sp, #0]
 8010796:	2b16      	cmp	r3, #22
 8010798:	d85a      	bhi.n	8010850 <_dtoa_r+0x240>
 801079a:	9a00      	ldr	r2, [sp, #0]
 801079c:	4b57      	ldr	r3, [pc, #348]	; (80108fc <_dtoa_r+0x2ec>)
 801079e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a6:	ec51 0b19 	vmov	r0, r1, d9
 80107aa:	f7f0 f9a7 	bl	8000afc <__aeabi_dcmplt>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	d050      	beq.n	8010854 <_dtoa_r+0x244>
 80107b2:	9b00      	ldr	r3, [sp, #0]
 80107b4:	3b01      	subs	r3, #1
 80107b6:	9300      	str	r3, [sp, #0]
 80107b8:	2300      	movs	r3, #0
 80107ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80107bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80107be:	1b5d      	subs	r5, r3, r5
 80107c0:	1e6b      	subs	r3, r5, #1
 80107c2:	9305      	str	r3, [sp, #20]
 80107c4:	bf45      	ittet	mi
 80107c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80107ca:	9304      	strmi	r3, [sp, #16]
 80107cc:	2300      	movpl	r3, #0
 80107ce:	2300      	movmi	r3, #0
 80107d0:	bf4c      	ite	mi
 80107d2:	9305      	strmi	r3, [sp, #20]
 80107d4:	9304      	strpl	r3, [sp, #16]
 80107d6:	9b00      	ldr	r3, [sp, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	db3d      	blt.n	8010858 <_dtoa_r+0x248>
 80107dc:	9b05      	ldr	r3, [sp, #20]
 80107de:	9a00      	ldr	r2, [sp, #0]
 80107e0:	920a      	str	r2, [sp, #40]	; 0x28
 80107e2:	4413      	add	r3, r2
 80107e4:	9305      	str	r3, [sp, #20]
 80107e6:	2300      	movs	r3, #0
 80107e8:	9307      	str	r3, [sp, #28]
 80107ea:	9b06      	ldr	r3, [sp, #24]
 80107ec:	2b09      	cmp	r3, #9
 80107ee:	f200 8089 	bhi.w	8010904 <_dtoa_r+0x2f4>
 80107f2:	2b05      	cmp	r3, #5
 80107f4:	bfc4      	itt	gt
 80107f6:	3b04      	subgt	r3, #4
 80107f8:	9306      	strgt	r3, [sp, #24]
 80107fa:	9b06      	ldr	r3, [sp, #24]
 80107fc:	f1a3 0302 	sub.w	r3, r3, #2
 8010800:	bfcc      	ite	gt
 8010802:	2500      	movgt	r5, #0
 8010804:	2501      	movle	r5, #1
 8010806:	2b03      	cmp	r3, #3
 8010808:	f200 8087 	bhi.w	801091a <_dtoa_r+0x30a>
 801080c:	e8df f003 	tbb	[pc, r3]
 8010810:	59383a2d 	.word	0x59383a2d
 8010814:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010818:	441d      	add	r5, r3
 801081a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801081e:	2b20      	cmp	r3, #32
 8010820:	bfc1      	itttt	gt
 8010822:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010826:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801082a:	fa0b f303 	lslgt.w	r3, fp, r3
 801082e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010832:	bfda      	itte	le
 8010834:	f1c3 0320 	rsble	r3, r3, #32
 8010838:	fa06 f003 	lslle.w	r0, r6, r3
 801083c:	4318      	orrgt	r0, r3
 801083e:	f7ef fe71 	bl	8000524 <__aeabi_ui2d>
 8010842:	2301      	movs	r3, #1
 8010844:	4606      	mov	r6, r0
 8010846:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801084a:	3d01      	subs	r5, #1
 801084c:	930e      	str	r3, [sp, #56]	; 0x38
 801084e:	e76a      	b.n	8010726 <_dtoa_r+0x116>
 8010850:	2301      	movs	r3, #1
 8010852:	e7b2      	b.n	80107ba <_dtoa_r+0x1aa>
 8010854:	900b      	str	r0, [sp, #44]	; 0x2c
 8010856:	e7b1      	b.n	80107bc <_dtoa_r+0x1ac>
 8010858:	9b04      	ldr	r3, [sp, #16]
 801085a:	9a00      	ldr	r2, [sp, #0]
 801085c:	1a9b      	subs	r3, r3, r2
 801085e:	9304      	str	r3, [sp, #16]
 8010860:	4253      	negs	r3, r2
 8010862:	9307      	str	r3, [sp, #28]
 8010864:	2300      	movs	r3, #0
 8010866:	930a      	str	r3, [sp, #40]	; 0x28
 8010868:	e7bf      	b.n	80107ea <_dtoa_r+0x1da>
 801086a:	2300      	movs	r3, #0
 801086c:	9308      	str	r3, [sp, #32]
 801086e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010870:	2b00      	cmp	r3, #0
 8010872:	dc55      	bgt.n	8010920 <_dtoa_r+0x310>
 8010874:	2301      	movs	r3, #1
 8010876:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801087a:	461a      	mov	r2, r3
 801087c:	9209      	str	r2, [sp, #36]	; 0x24
 801087e:	e00c      	b.n	801089a <_dtoa_r+0x28a>
 8010880:	2301      	movs	r3, #1
 8010882:	e7f3      	b.n	801086c <_dtoa_r+0x25c>
 8010884:	2300      	movs	r3, #0
 8010886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010888:	9308      	str	r3, [sp, #32]
 801088a:	9b00      	ldr	r3, [sp, #0]
 801088c:	4413      	add	r3, r2
 801088e:	9302      	str	r3, [sp, #8]
 8010890:	3301      	adds	r3, #1
 8010892:	2b01      	cmp	r3, #1
 8010894:	9303      	str	r3, [sp, #12]
 8010896:	bfb8      	it	lt
 8010898:	2301      	movlt	r3, #1
 801089a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801089c:	2200      	movs	r2, #0
 801089e:	6042      	str	r2, [r0, #4]
 80108a0:	2204      	movs	r2, #4
 80108a2:	f102 0614 	add.w	r6, r2, #20
 80108a6:	429e      	cmp	r6, r3
 80108a8:	6841      	ldr	r1, [r0, #4]
 80108aa:	d93d      	bls.n	8010928 <_dtoa_r+0x318>
 80108ac:	4620      	mov	r0, r4
 80108ae:	f000 ff0d 	bl	80116cc <_Balloc>
 80108b2:	9001      	str	r0, [sp, #4]
 80108b4:	2800      	cmp	r0, #0
 80108b6:	d13b      	bne.n	8010930 <_dtoa_r+0x320>
 80108b8:	4b11      	ldr	r3, [pc, #68]	; (8010900 <_dtoa_r+0x2f0>)
 80108ba:	4602      	mov	r2, r0
 80108bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80108c0:	e6c0      	b.n	8010644 <_dtoa_r+0x34>
 80108c2:	2301      	movs	r3, #1
 80108c4:	e7df      	b.n	8010886 <_dtoa_r+0x276>
 80108c6:	bf00      	nop
 80108c8:	636f4361 	.word	0x636f4361
 80108cc:	3fd287a7 	.word	0x3fd287a7
 80108d0:	8b60c8b3 	.word	0x8b60c8b3
 80108d4:	3fc68a28 	.word	0x3fc68a28
 80108d8:	509f79fb 	.word	0x509f79fb
 80108dc:	3fd34413 	.word	0x3fd34413
 80108e0:	0802d703 	.word	0x0802d703
 80108e4:	0802d71a 	.word	0x0802d71a
 80108e8:	7ff00000 	.word	0x7ff00000
 80108ec:	0802d6ff 	.word	0x0802d6ff
 80108f0:	0802d6f6 	.word	0x0802d6f6
 80108f4:	0802d5d2 	.word	0x0802d5d2
 80108f8:	3ff80000 	.word	0x3ff80000
 80108fc:	0802d878 	.word	0x0802d878
 8010900:	0802d775 	.word	0x0802d775
 8010904:	2501      	movs	r5, #1
 8010906:	2300      	movs	r3, #0
 8010908:	9306      	str	r3, [sp, #24]
 801090a:	9508      	str	r5, [sp, #32]
 801090c:	f04f 33ff 	mov.w	r3, #4294967295
 8010910:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010914:	2200      	movs	r2, #0
 8010916:	2312      	movs	r3, #18
 8010918:	e7b0      	b.n	801087c <_dtoa_r+0x26c>
 801091a:	2301      	movs	r3, #1
 801091c:	9308      	str	r3, [sp, #32]
 801091e:	e7f5      	b.n	801090c <_dtoa_r+0x2fc>
 8010920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010922:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010926:	e7b8      	b.n	801089a <_dtoa_r+0x28a>
 8010928:	3101      	adds	r1, #1
 801092a:	6041      	str	r1, [r0, #4]
 801092c:	0052      	lsls	r2, r2, #1
 801092e:	e7b8      	b.n	80108a2 <_dtoa_r+0x292>
 8010930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010932:	9a01      	ldr	r2, [sp, #4]
 8010934:	601a      	str	r2, [r3, #0]
 8010936:	9b03      	ldr	r3, [sp, #12]
 8010938:	2b0e      	cmp	r3, #14
 801093a:	f200 809d 	bhi.w	8010a78 <_dtoa_r+0x468>
 801093e:	2d00      	cmp	r5, #0
 8010940:	f000 809a 	beq.w	8010a78 <_dtoa_r+0x468>
 8010944:	9b00      	ldr	r3, [sp, #0]
 8010946:	2b00      	cmp	r3, #0
 8010948:	dd32      	ble.n	80109b0 <_dtoa_r+0x3a0>
 801094a:	4ab7      	ldr	r2, [pc, #732]	; (8010c28 <_dtoa_r+0x618>)
 801094c:	f003 030f 	and.w	r3, r3, #15
 8010950:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010954:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010958:	9b00      	ldr	r3, [sp, #0]
 801095a:	05d8      	lsls	r0, r3, #23
 801095c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010960:	d516      	bpl.n	8010990 <_dtoa_r+0x380>
 8010962:	4bb2      	ldr	r3, [pc, #712]	; (8010c2c <_dtoa_r+0x61c>)
 8010964:	ec51 0b19 	vmov	r0, r1, d9
 8010968:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801096c:	f7ef ff7e 	bl	800086c <__aeabi_ddiv>
 8010970:	f007 070f 	and.w	r7, r7, #15
 8010974:	4682      	mov	sl, r0
 8010976:	468b      	mov	fp, r1
 8010978:	2503      	movs	r5, #3
 801097a:	4eac      	ldr	r6, [pc, #688]	; (8010c2c <_dtoa_r+0x61c>)
 801097c:	b957      	cbnz	r7, 8010994 <_dtoa_r+0x384>
 801097e:	4642      	mov	r2, r8
 8010980:	464b      	mov	r3, r9
 8010982:	4650      	mov	r0, sl
 8010984:	4659      	mov	r1, fp
 8010986:	f7ef ff71 	bl	800086c <__aeabi_ddiv>
 801098a:	4682      	mov	sl, r0
 801098c:	468b      	mov	fp, r1
 801098e:	e028      	b.n	80109e2 <_dtoa_r+0x3d2>
 8010990:	2502      	movs	r5, #2
 8010992:	e7f2      	b.n	801097a <_dtoa_r+0x36a>
 8010994:	07f9      	lsls	r1, r7, #31
 8010996:	d508      	bpl.n	80109aa <_dtoa_r+0x39a>
 8010998:	4640      	mov	r0, r8
 801099a:	4649      	mov	r1, r9
 801099c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80109a0:	f7ef fe3a 	bl	8000618 <__aeabi_dmul>
 80109a4:	3501      	adds	r5, #1
 80109a6:	4680      	mov	r8, r0
 80109a8:	4689      	mov	r9, r1
 80109aa:	107f      	asrs	r7, r7, #1
 80109ac:	3608      	adds	r6, #8
 80109ae:	e7e5      	b.n	801097c <_dtoa_r+0x36c>
 80109b0:	f000 809b 	beq.w	8010aea <_dtoa_r+0x4da>
 80109b4:	9b00      	ldr	r3, [sp, #0]
 80109b6:	4f9d      	ldr	r7, [pc, #628]	; (8010c2c <_dtoa_r+0x61c>)
 80109b8:	425e      	negs	r6, r3
 80109ba:	4b9b      	ldr	r3, [pc, #620]	; (8010c28 <_dtoa_r+0x618>)
 80109bc:	f006 020f 	and.w	r2, r6, #15
 80109c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c8:	ec51 0b19 	vmov	r0, r1, d9
 80109cc:	f7ef fe24 	bl	8000618 <__aeabi_dmul>
 80109d0:	1136      	asrs	r6, r6, #4
 80109d2:	4682      	mov	sl, r0
 80109d4:	468b      	mov	fp, r1
 80109d6:	2300      	movs	r3, #0
 80109d8:	2502      	movs	r5, #2
 80109da:	2e00      	cmp	r6, #0
 80109dc:	d17a      	bne.n	8010ad4 <_dtoa_r+0x4c4>
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d1d3      	bne.n	801098a <_dtoa_r+0x37a>
 80109e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	f000 8082 	beq.w	8010aee <_dtoa_r+0x4de>
 80109ea:	4b91      	ldr	r3, [pc, #580]	; (8010c30 <_dtoa_r+0x620>)
 80109ec:	2200      	movs	r2, #0
 80109ee:	4650      	mov	r0, sl
 80109f0:	4659      	mov	r1, fp
 80109f2:	f7f0 f883 	bl	8000afc <__aeabi_dcmplt>
 80109f6:	2800      	cmp	r0, #0
 80109f8:	d079      	beq.n	8010aee <_dtoa_r+0x4de>
 80109fa:	9b03      	ldr	r3, [sp, #12]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d076      	beq.n	8010aee <_dtoa_r+0x4de>
 8010a00:	9b02      	ldr	r3, [sp, #8]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	dd36      	ble.n	8010a74 <_dtoa_r+0x464>
 8010a06:	9b00      	ldr	r3, [sp, #0]
 8010a08:	4650      	mov	r0, sl
 8010a0a:	4659      	mov	r1, fp
 8010a0c:	1e5f      	subs	r7, r3, #1
 8010a0e:	2200      	movs	r2, #0
 8010a10:	4b88      	ldr	r3, [pc, #544]	; (8010c34 <_dtoa_r+0x624>)
 8010a12:	f7ef fe01 	bl	8000618 <__aeabi_dmul>
 8010a16:	9e02      	ldr	r6, [sp, #8]
 8010a18:	4682      	mov	sl, r0
 8010a1a:	468b      	mov	fp, r1
 8010a1c:	3501      	adds	r5, #1
 8010a1e:	4628      	mov	r0, r5
 8010a20:	f7ef fd90 	bl	8000544 <__aeabi_i2d>
 8010a24:	4652      	mov	r2, sl
 8010a26:	465b      	mov	r3, fp
 8010a28:	f7ef fdf6 	bl	8000618 <__aeabi_dmul>
 8010a2c:	4b82      	ldr	r3, [pc, #520]	; (8010c38 <_dtoa_r+0x628>)
 8010a2e:	2200      	movs	r2, #0
 8010a30:	f7ef fc3c 	bl	80002ac <__adddf3>
 8010a34:	46d0      	mov	r8, sl
 8010a36:	46d9      	mov	r9, fp
 8010a38:	4682      	mov	sl, r0
 8010a3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010a3e:	2e00      	cmp	r6, #0
 8010a40:	d158      	bne.n	8010af4 <_dtoa_r+0x4e4>
 8010a42:	4b7e      	ldr	r3, [pc, #504]	; (8010c3c <_dtoa_r+0x62c>)
 8010a44:	2200      	movs	r2, #0
 8010a46:	4640      	mov	r0, r8
 8010a48:	4649      	mov	r1, r9
 8010a4a:	f7ef fc2d 	bl	80002a8 <__aeabi_dsub>
 8010a4e:	4652      	mov	r2, sl
 8010a50:	465b      	mov	r3, fp
 8010a52:	4680      	mov	r8, r0
 8010a54:	4689      	mov	r9, r1
 8010a56:	f7f0 f86f 	bl	8000b38 <__aeabi_dcmpgt>
 8010a5a:	2800      	cmp	r0, #0
 8010a5c:	f040 8295 	bne.w	8010f8a <_dtoa_r+0x97a>
 8010a60:	4652      	mov	r2, sl
 8010a62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010a66:	4640      	mov	r0, r8
 8010a68:	4649      	mov	r1, r9
 8010a6a:	f7f0 f847 	bl	8000afc <__aeabi_dcmplt>
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	f040 8289 	bne.w	8010f86 <_dtoa_r+0x976>
 8010a74:	ec5b ab19 	vmov	sl, fp, d9
 8010a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	f2c0 8148 	blt.w	8010d10 <_dtoa_r+0x700>
 8010a80:	9a00      	ldr	r2, [sp, #0]
 8010a82:	2a0e      	cmp	r2, #14
 8010a84:	f300 8144 	bgt.w	8010d10 <_dtoa_r+0x700>
 8010a88:	4b67      	ldr	r3, [pc, #412]	; (8010c28 <_dtoa_r+0x618>)
 8010a8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	f280 80d5 	bge.w	8010c44 <_dtoa_r+0x634>
 8010a9a:	9b03      	ldr	r3, [sp, #12]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	f300 80d1 	bgt.w	8010c44 <_dtoa_r+0x634>
 8010aa2:	f040 826f 	bne.w	8010f84 <_dtoa_r+0x974>
 8010aa6:	4b65      	ldr	r3, [pc, #404]	; (8010c3c <_dtoa_r+0x62c>)
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	4640      	mov	r0, r8
 8010aac:	4649      	mov	r1, r9
 8010aae:	f7ef fdb3 	bl	8000618 <__aeabi_dmul>
 8010ab2:	4652      	mov	r2, sl
 8010ab4:	465b      	mov	r3, fp
 8010ab6:	f7f0 f835 	bl	8000b24 <__aeabi_dcmpge>
 8010aba:	9e03      	ldr	r6, [sp, #12]
 8010abc:	4637      	mov	r7, r6
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	f040 8245 	bne.w	8010f4e <_dtoa_r+0x93e>
 8010ac4:	9d01      	ldr	r5, [sp, #4]
 8010ac6:	2331      	movs	r3, #49	; 0x31
 8010ac8:	f805 3b01 	strb.w	r3, [r5], #1
 8010acc:	9b00      	ldr	r3, [sp, #0]
 8010ace:	3301      	adds	r3, #1
 8010ad0:	9300      	str	r3, [sp, #0]
 8010ad2:	e240      	b.n	8010f56 <_dtoa_r+0x946>
 8010ad4:	07f2      	lsls	r2, r6, #31
 8010ad6:	d505      	bpl.n	8010ae4 <_dtoa_r+0x4d4>
 8010ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010adc:	f7ef fd9c 	bl	8000618 <__aeabi_dmul>
 8010ae0:	3501      	adds	r5, #1
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	1076      	asrs	r6, r6, #1
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	e777      	b.n	80109da <_dtoa_r+0x3ca>
 8010aea:	2502      	movs	r5, #2
 8010aec:	e779      	b.n	80109e2 <_dtoa_r+0x3d2>
 8010aee:	9f00      	ldr	r7, [sp, #0]
 8010af0:	9e03      	ldr	r6, [sp, #12]
 8010af2:	e794      	b.n	8010a1e <_dtoa_r+0x40e>
 8010af4:	9901      	ldr	r1, [sp, #4]
 8010af6:	4b4c      	ldr	r3, [pc, #304]	; (8010c28 <_dtoa_r+0x618>)
 8010af8:	4431      	add	r1, r6
 8010afa:	910d      	str	r1, [sp, #52]	; 0x34
 8010afc:	9908      	ldr	r1, [sp, #32]
 8010afe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010b02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010b06:	2900      	cmp	r1, #0
 8010b08:	d043      	beq.n	8010b92 <_dtoa_r+0x582>
 8010b0a:	494d      	ldr	r1, [pc, #308]	; (8010c40 <_dtoa_r+0x630>)
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	f7ef fead 	bl	800086c <__aeabi_ddiv>
 8010b12:	4652      	mov	r2, sl
 8010b14:	465b      	mov	r3, fp
 8010b16:	f7ef fbc7 	bl	80002a8 <__aeabi_dsub>
 8010b1a:	9d01      	ldr	r5, [sp, #4]
 8010b1c:	4682      	mov	sl, r0
 8010b1e:	468b      	mov	fp, r1
 8010b20:	4649      	mov	r1, r9
 8010b22:	4640      	mov	r0, r8
 8010b24:	f7f0 f828 	bl	8000b78 <__aeabi_d2iz>
 8010b28:	4606      	mov	r6, r0
 8010b2a:	f7ef fd0b 	bl	8000544 <__aeabi_i2d>
 8010b2e:	4602      	mov	r2, r0
 8010b30:	460b      	mov	r3, r1
 8010b32:	4640      	mov	r0, r8
 8010b34:	4649      	mov	r1, r9
 8010b36:	f7ef fbb7 	bl	80002a8 <__aeabi_dsub>
 8010b3a:	3630      	adds	r6, #48	; 0x30
 8010b3c:	f805 6b01 	strb.w	r6, [r5], #1
 8010b40:	4652      	mov	r2, sl
 8010b42:	465b      	mov	r3, fp
 8010b44:	4680      	mov	r8, r0
 8010b46:	4689      	mov	r9, r1
 8010b48:	f7ef ffd8 	bl	8000afc <__aeabi_dcmplt>
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	d163      	bne.n	8010c18 <_dtoa_r+0x608>
 8010b50:	4642      	mov	r2, r8
 8010b52:	464b      	mov	r3, r9
 8010b54:	4936      	ldr	r1, [pc, #216]	; (8010c30 <_dtoa_r+0x620>)
 8010b56:	2000      	movs	r0, #0
 8010b58:	f7ef fba6 	bl	80002a8 <__aeabi_dsub>
 8010b5c:	4652      	mov	r2, sl
 8010b5e:	465b      	mov	r3, fp
 8010b60:	f7ef ffcc 	bl	8000afc <__aeabi_dcmplt>
 8010b64:	2800      	cmp	r0, #0
 8010b66:	f040 80b5 	bne.w	8010cd4 <_dtoa_r+0x6c4>
 8010b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b6c:	429d      	cmp	r5, r3
 8010b6e:	d081      	beq.n	8010a74 <_dtoa_r+0x464>
 8010b70:	4b30      	ldr	r3, [pc, #192]	; (8010c34 <_dtoa_r+0x624>)
 8010b72:	2200      	movs	r2, #0
 8010b74:	4650      	mov	r0, sl
 8010b76:	4659      	mov	r1, fp
 8010b78:	f7ef fd4e 	bl	8000618 <__aeabi_dmul>
 8010b7c:	4b2d      	ldr	r3, [pc, #180]	; (8010c34 <_dtoa_r+0x624>)
 8010b7e:	4682      	mov	sl, r0
 8010b80:	468b      	mov	fp, r1
 8010b82:	4640      	mov	r0, r8
 8010b84:	4649      	mov	r1, r9
 8010b86:	2200      	movs	r2, #0
 8010b88:	f7ef fd46 	bl	8000618 <__aeabi_dmul>
 8010b8c:	4680      	mov	r8, r0
 8010b8e:	4689      	mov	r9, r1
 8010b90:	e7c6      	b.n	8010b20 <_dtoa_r+0x510>
 8010b92:	4650      	mov	r0, sl
 8010b94:	4659      	mov	r1, fp
 8010b96:	f7ef fd3f 	bl	8000618 <__aeabi_dmul>
 8010b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b9c:	9d01      	ldr	r5, [sp, #4]
 8010b9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ba0:	4682      	mov	sl, r0
 8010ba2:	468b      	mov	fp, r1
 8010ba4:	4649      	mov	r1, r9
 8010ba6:	4640      	mov	r0, r8
 8010ba8:	f7ef ffe6 	bl	8000b78 <__aeabi_d2iz>
 8010bac:	4606      	mov	r6, r0
 8010bae:	f7ef fcc9 	bl	8000544 <__aeabi_i2d>
 8010bb2:	3630      	adds	r6, #48	; 0x30
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	4640      	mov	r0, r8
 8010bba:	4649      	mov	r1, r9
 8010bbc:	f7ef fb74 	bl	80002a8 <__aeabi_dsub>
 8010bc0:	f805 6b01 	strb.w	r6, [r5], #1
 8010bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bc6:	429d      	cmp	r5, r3
 8010bc8:	4680      	mov	r8, r0
 8010bca:	4689      	mov	r9, r1
 8010bcc:	f04f 0200 	mov.w	r2, #0
 8010bd0:	d124      	bne.n	8010c1c <_dtoa_r+0x60c>
 8010bd2:	4b1b      	ldr	r3, [pc, #108]	; (8010c40 <_dtoa_r+0x630>)
 8010bd4:	4650      	mov	r0, sl
 8010bd6:	4659      	mov	r1, fp
 8010bd8:	f7ef fb68 	bl	80002ac <__adddf3>
 8010bdc:	4602      	mov	r2, r0
 8010bde:	460b      	mov	r3, r1
 8010be0:	4640      	mov	r0, r8
 8010be2:	4649      	mov	r1, r9
 8010be4:	f7ef ffa8 	bl	8000b38 <__aeabi_dcmpgt>
 8010be8:	2800      	cmp	r0, #0
 8010bea:	d173      	bne.n	8010cd4 <_dtoa_r+0x6c4>
 8010bec:	4652      	mov	r2, sl
 8010bee:	465b      	mov	r3, fp
 8010bf0:	4913      	ldr	r1, [pc, #76]	; (8010c40 <_dtoa_r+0x630>)
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	f7ef fb58 	bl	80002a8 <__aeabi_dsub>
 8010bf8:	4602      	mov	r2, r0
 8010bfa:	460b      	mov	r3, r1
 8010bfc:	4640      	mov	r0, r8
 8010bfe:	4649      	mov	r1, r9
 8010c00:	f7ef ff7c 	bl	8000afc <__aeabi_dcmplt>
 8010c04:	2800      	cmp	r0, #0
 8010c06:	f43f af35 	beq.w	8010a74 <_dtoa_r+0x464>
 8010c0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010c0c:	1e6b      	subs	r3, r5, #1
 8010c0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010c14:	2b30      	cmp	r3, #48	; 0x30
 8010c16:	d0f8      	beq.n	8010c0a <_dtoa_r+0x5fa>
 8010c18:	9700      	str	r7, [sp, #0]
 8010c1a:	e049      	b.n	8010cb0 <_dtoa_r+0x6a0>
 8010c1c:	4b05      	ldr	r3, [pc, #20]	; (8010c34 <_dtoa_r+0x624>)
 8010c1e:	f7ef fcfb 	bl	8000618 <__aeabi_dmul>
 8010c22:	4680      	mov	r8, r0
 8010c24:	4689      	mov	r9, r1
 8010c26:	e7bd      	b.n	8010ba4 <_dtoa_r+0x594>
 8010c28:	0802d878 	.word	0x0802d878
 8010c2c:	0802d850 	.word	0x0802d850
 8010c30:	3ff00000 	.word	0x3ff00000
 8010c34:	40240000 	.word	0x40240000
 8010c38:	401c0000 	.word	0x401c0000
 8010c3c:	40140000 	.word	0x40140000
 8010c40:	3fe00000 	.word	0x3fe00000
 8010c44:	9d01      	ldr	r5, [sp, #4]
 8010c46:	4656      	mov	r6, sl
 8010c48:	465f      	mov	r7, fp
 8010c4a:	4642      	mov	r2, r8
 8010c4c:	464b      	mov	r3, r9
 8010c4e:	4630      	mov	r0, r6
 8010c50:	4639      	mov	r1, r7
 8010c52:	f7ef fe0b 	bl	800086c <__aeabi_ddiv>
 8010c56:	f7ef ff8f 	bl	8000b78 <__aeabi_d2iz>
 8010c5a:	4682      	mov	sl, r0
 8010c5c:	f7ef fc72 	bl	8000544 <__aeabi_i2d>
 8010c60:	4642      	mov	r2, r8
 8010c62:	464b      	mov	r3, r9
 8010c64:	f7ef fcd8 	bl	8000618 <__aeabi_dmul>
 8010c68:	4602      	mov	r2, r0
 8010c6a:	460b      	mov	r3, r1
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	4639      	mov	r1, r7
 8010c70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010c74:	f7ef fb18 	bl	80002a8 <__aeabi_dsub>
 8010c78:	f805 6b01 	strb.w	r6, [r5], #1
 8010c7c:	9e01      	ldr	r6, [sp, #4]
 8010c7e:	9f03      	ldr	r7, [sp, #12]
 8010c80:	1bae      	subs	r6, r5, r6
 8010c82:	42b7      	cmp	r7, r6
 8010c84:	4602      	mov	r2, r0
 8010c86:	460b      	mov	r3, r1
 8010c88:	d135      	bne.n	8010cf6 <_dtoa_r+0x6e6>
 8010c8a:	f7ef fb0f 	bl	80002ac <__adddf3>
 8010c8e:	4642      	mov	r2, r8
 8010c90:	464b      	mov	r3, r9
 8010c92:	4606      	mov	r6, r0
 8010c94:	460f      	mov	r7, r1
 8010c96:	f7ef ff4f 	bl	8000b38 <__aeabi_dcmpgt>
 8010c9a:	b9d0      	cbnz	r0, 8010cd2 <_dtoa_r+0x6c2>
 8010c9c:	4642      	mov	r2, r8
 8010c9e:	464b      	mov	r3, r9
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	4639      	mov	r1, r7
 8010ca4:	f7ef ff20 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ca8:	b110      	cbz	r0, 8010cb0 <_dtoa_r+0x6a0>
 8010caa:	f01a 0f01 	tst.w	sl, #1
 8010cae:	d110      	bne.n	8010cd2 <_dtoa_r+0x6c2>
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	ee18 1a10 	vmov	r1, s16
 8010cb6:	f000 fd49 	bl	801174c <_Bfree>
 8010cba:	2300      	movs	r3, #0
 8010cbc:	9800      	ldr	r0, [sp, #0]
 8010cbe:	702b      	strb	r3, [r5, #0]
 8010cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010cc2:	3001      	adds	r0, #1
 8010cc4:	6018      	str	r0, [r3, #0]
 8010cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f43f acf1 	beq.w	80106b0 <_dtoa_r+0xa0>
 8010cce:	601d      	str	r5, [r3, #0]
 8010cd0:	e4ee      	b.n	80106b0 <_dtoa_r+0xa0>
 8010cd2:	9f00      	ldr	r7, [sp, #0]
 8010cd4:	462b      	mov	r3, r5
 8010cd6:	461d      	mov	r5, r3
 8010cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010cdc:	2a39      	cmp	r2, #57	; 0x39
 8010cde:	d106      	bne.n	8010cee <_dtoa_r+0x6de>
 8010ce0:	9a01      	ldr	r2, [sp, #4]
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d1f7      	bne.n	8010cd6 <_dtoa_r+0x6c6>
 8010ce6:	9901      	ldr	r1, [sp, #4]
 8010ce8:	2230      	movs	r2, #48	; 0x30
 8010cea:	3701      	adds	r7, #1
 8010cec:	700a      	strb	r2, [r1, #0]
 8010cee:	781a      	ldrb	r2, [r3, #0]
 8010cf0:	3201      	adds	r2, #1
 8010cf2:	701a      	strb	r2, [r3, #0]
 8010cf4:	e790      	b.n	8010c18 <_dtoa_r+0x608>
 8010cf6:	4ba6      	ldr	r3, [pc, #664]	; (8010f90 <_dtoa_r+0x980>)
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f7ef fc8d 	bl	8000618 <__aeabi_dmul>
 8010cfe:	2200      	movs	r2, #0
 8010d00:	2300      	movs	r3, #0
 8010d02:	4606      	mov	r6, r0
 8010d04:	460f      	mov	r7, r1
 8010d06:	f7ef feef 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	d09d      	beq.n	8010c4a <_dtoa_r+0x63a>
 8010d0e:	e7cf      	b.n	8010cb0 <_dtoa_r+0x6a0>
 8010d10:	9a08      	ldr	r2, [sp, #32]
 8010d12:	2a00      	cmp	r2, #0
 8010d14:	f000 80d7 	beq.w	8010ec6 <_dtoa_r+0x8b6>
 8010d18:	9a06      	ldr	r2, [sp, #24]
 8010d1a:	2a01      	cmp	r2, #1
 8010d1c:	f300 80ba 	bgt.w	8010e94 <_dtoa_r+0x884>
 8010d20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d22:	2a00      	cmp	r2, #0
 8010d24:	f000 80b2 	beq.w	8010e8c <_dtoa_r+0x87c>
 8010d28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010d2c:	9e07      	ldr	r6, [sp, #28]
 8010d2e:	9d04      	ldr	r5, [sp, #16]
 8010d30:	9a04      	ldr	r2, [sp, #16]
 8010d32:	441a      	add	r2, r3
 8010d34:	9204      	str	r2, [sp, #16]
 8010d36:	9a05      	ldr	r2, [sp, #20]
 8010d38:	2101      	movs	r1, #1
 8010d3a:	441a      	add	r2, r3
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	9205      	str	r2, [sp, #20]
 8010d40:	f000 fdbc 	bl	80118bc <__i2b>
 8010d44:	4607      	mov	r7, r0
 8010d46:	2d00      	cmp	r5, #0
 8010d48:	dd0c      	ble.n	8010d64 <_dtoa_r+0x754>
 8010d4a:	9b05      	ldr	r3, [sp, #20]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	dd09      	ble.n	8010d64 <_dtoa_r+0x754>
 8010d50:	42ab      	cmp	r3, r5
 8010d52:	9a04      	ldr	r2, [sp, #16]
 8010d54:	bfa8      	it	ge
 8010d56:	462b      	movge	r3, r5
 8010d58:	1ad2      	subs	r2, r2, r3
 8010d5a:	9204      	str	r2, [sp, #16]
 8010d5c:	9a05      	ldr	r2, [sp, #20]
 8010d5e:	1aed      	subs	r5, r5, r3
 8010d60:	1ad3      	subs	r3, r2, r3
 8010d62:	9305      	str	r3, [sp, #20]
 8010d64:	9b07      	ldr	r3, [sp, #28]
 8010d66:	b31b      	cbz	r3, 8010db0 <_dtoa_r+0x7a0>
 8010d68:	9b08      	ldr	r3, [sp, #32]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	f000 80af 	beq.w	8010ece <_dtoa_r+0x8be>
 8010d70:	2e00      	cmp	r6, #0
 8010d72:	dd13      	ble.n	8010d9c <_dtoa_r+0x78c>
 8010d74:	4639      	mov	r1, r7
 8010d76:	4632      	mov	r2, r6
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f000 fe5f 	bl	8011a3c <__pow5mult>
 8010d7e:	ee18 2a10 	vmov	r2, s16
 8010d82:	4601      	mov	r1, r0
 8010d84:	4607      	mov	r7, r0
 8010d86:	4620      	mov	r0, r4
 8010d88:	f000 fdae 	bl	80118e8 <__multiply>
 8010d8c:	ee18 1a10 	vmov	r1, s16
 8010d90:	4680      	mov	r8, r0
 8010d92:	4620      	mov	r0, r4
 8010d94:	f000 fcda 	bl	801174c <_Bfree>
 8010d98:	ee08 8a10 	vmov	s16, r8
 8010d9c:	9b07      	ldr	r3, [sp, #28]
 8010d9e:	1b9a      	subs	r2, r3, r6
 8010da0:	d006      	beq.n	8010db0 <_dtoa_r+0x7a0>
 8010da2:	ee18 1a10 	vmov	r1, s16
 8010da6:	4620      	mov	r0, r4
 8010da8:	f000 fe48 	bl	8011a3c <__pow5mult>
 8010dac:	ee08 0a10 	vmov	s16, r0
 8010db0:	2101      	movs	r1, #1
 8010db2:	4620      	mov	r0, r4
 8010db4:	f000 fd82 	bl	80118bc <__i2b>
 8010db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	4606      	mov	r6, r0
 8010dbe:	f340 8088 	ble.w	8010ed2 <_dtoa_r+0x8c2>
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	4601      	mov	r1, r0
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	f000 fe38 	bl	8011a3c <__pow5mult>
 8010dcc:	9b06      	ldr	r3, [sp, #24]
 8010dce:	2b01      	cmp	r3, #1
 8010dd0:	4606      	mov	r6, r0
 8010dd2:	f340 8081 	ble.w	8010ed8 <_dtoa_r+0x8c8>
 8010dd6:	f04f 0800 	mov.w	r8, #0
 8010dda:	6933      	ldr	r3, [r6, #16]
 8010ddc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010de0:	6918      	ldr	r0, [r3, #16]
 8010de2:	f000 fd1b 	bl	801181c <__hi0bits>
 8010de6:	f1c0 0020 	rsb	r0, r0, #32
 8010dea:	9b05      	ldr	r3, [sp, #20]
 8010dec:	4418      	add	r0, r3
 8010dee:	f010 001f 	ands.w	r0, r0, #31
 8010df2:	f000 8092 	beq.w	8010f1a <_dtoa_r+0x90a>
 8010df6:	f1c0 0320 	rsb	r3, r0, #32
 8010dfa:	2b04      	cmp	r3, #4
 8010dfc:	f340 808a 	ble.w	8010f14 <_dtoa_r+0x904>
 8010e00:	f1c0 001c 	rsb	r0, r0, #28
 8010e04:	9b04      	ldr	r3, [sp, #16]
 8010e06:	4403      	add	r3, r0
 8010e08:	9304      	str	r3, [sp, #16]
 8010e0a:	9b05      	ldr	r3, [sp, #20]
 8010e0c:	4403      	add	r3, r0
 8010e0e:	4405      	add	r5, r0
 8010e10:	9305      	str	r3, [sp, #20]
 8010e12:	9b04      	ldr	r3, [sp, #16]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	dd07      	ble.n	8010e28 <_dtoa_r+0x818>
 8010e18:	ee18 1a10 	vmov	r1, s16
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	4620      	mov	r0, r4
 8010e20:	f000 fe66 	bl	8011af0 <__lshift>
 8010e24:	ee08 0a10 	vmov	s16, r0
 8010e28:	9b05      	ldr	r3, [sp, #20]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	dd05      	ble.n	8010e3a <_dtoa_r+0x82a>
 8010e2e:	4631      	mov	r1, r6
 8010e30:	461a      	mov	r2, r3
 8010e32:	4620      	mov	r0, r4
 8010e34:	f000 fe5c 	bl	8011af0 <__lshift>
 8010e38:	4606      	mov	r6, r0
 8010e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d06e      	beq.n	8010f1e <_dtoa_r+0x90e>
 8010e40:	ee18 0a10 	vmov	r0, s16
 8010e44:	4631      	mov	r1, r6
 8010e46:	f000 fec3 	bl	8011bd0 <__mcmp>
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	da67      	bge.n	8010f1e <_dtoa_r+0x90e>
 8010e4e:	9b00      	ldr	r3, [sp, #0]
 8010e50:	3b01      	subs	r3, #1
 8010e52:	ee18 1a10 	vmov	r1, s16
 8010e56:	9300      	str	r3, [sp, #0]
 8010e58:	220a      	movs	r2, #10
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f000 fc97 	bl	8011790 <__multadd>
 8010e62:	9b08      	ldr	r3, [sp, #32]
 8010e64:	ee08 0a10 	vmov	s16, r0
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	f000 81b1 	beq.w	80111d0 <_dtoa_r+0xbc0>
 8010e6e:	2300      	movs	r3, #0
 8010e70:	4639      	mov	r1, r7
 8010e72:	220a      	movs	r2, #10
 8010e74:	4620      	mov	r0, r4
 8010e76:	f000 fc8b 	bl	8011790 <__multadd>
 8010e7a:	9b02      	ldr	r3, [sp, #8]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	4607      	mov	r7, r0
 8010e80:	f300 808e 	bgt.w	8010fa0 <_dtoa_r+0x990>
 8010e84:	9b06      	ldr	r3, [sp, #24]
 8010e86:	2b02      	cmp	r3, #2
 8010e88:	dc51      	bgt.n	8010f2e <_dtoa_r+0x91e>
 8010e8a:	e089      	b.n	8010fa0 <_dtoa_r+0x990>
 8010e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010e92:	e74b      	b.n	8010d2c <_dtoa_r+0x71c>
 8010e94:	9b03      	ldr	r3, [sp, #12]
 8010e96:	1e5e      	subs	r6, r3, #1
 8010e98:	9b07      	ldr	r3, [sp, #28]
 8010e9a:	42b3      	cmp	r3, r6
 8010e9c:	bfbf      	itttt	lt
 8010e9e:	9b07      	ldrlt	r3, [sp, #28]
 8010ea0:	9607      	strlt	r6, [sp, #28]
 8010ea2:	1af2      	sublt	r2, r6, r3
 8010ea4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010ea6:	bfb6      	itet	lt
 8010ea8:	189b      	addlt	r3, r3, r2
 8010eaa:	1b9e      	subge	r6, r3, r6
 8010eac:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010eae:	9b03      	ldr	r3, [sp, #12]
 8010eb0:	bfb8      	it	lt
 8010eb2:	2600      	movlt	r6, #0
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	bfb7      	itett	lt
 8010eb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010ebc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010ec0:	1a9d      	sublt	r5, r3, r2
 8010ec2:	2300      	movlt	r3, #0
 8010ec4:	e734      	b.n	8010d30 <_dtoa_r+0x720>
 8010ec6:	9e07      	ldr	r6, [sp, #28]
 8010ec8:	9d04      	ldr	r5, [sp, #16]
 8010eca:	9f08      	ldr	r7, [sp, #32]
 8010ecc:	e73b      	b.n	8010d46 <_dtoa_r+0x736>
 8010ece:	9a07      	ldr	r2, [sp, #28]
 8010ed0:	e767      	b.n	8010da2 <_dtoa_r+0x792>
 8010ed2:	9b06      	ldr	r3, [sp, #24]
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	dc18      	bgt.n	8010f0a <_dtoa_r+0x8fa>
 8010ed8:	f1ba 0f00 	cmp.w	sl, #0
 8010edc:	d115      	bne.n	8010f0a <_dtoa_r+0x8fa>
 8010ede:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ee2:	b993      	cbnz	r3, 8010f0a <_dtoa_r+0x8fa>
 8010ee4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010ee8:	0d1b      	lsrs	r3, r3, #20
 8010eea:	051b      	lsls	r3, r3, #20
 8010eec:	b183      	cbz	r3, 8010f10 <_dtoa_r+0x900>
 8010eee:	9b04      	ldr	r3, [sp, #16]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	9304      	str	r3, [sp, #16]
 8010ef4:	9b05      	ldr	r3, [sp, #20]
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	9305      	str	r3, [sp, #20]
 8010efa:	f04f 0801 	mov.w	r8, #1
 8010efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f47f af6a 	bne.w	8010dda <_dtoa_r+0x7ca>
 8010f06:	2001      	movs	r0, #1
 8010f08:	e76f      	b.n	8010dea <_dtoa_r+0x7da>
 8010f0a:	f04f 0800 	mov.w	r8, #0
 8010f0e:	e7f6      	b.n	8010efe <_dtoa_r+0x8ee>
 8010f10:	4698      	mov	r8, r3
 8010f12:	e7f4      	b.n	8010efe <_dtoa_r+0x8ee>
 8010f14:	f43f af7d 	beq.w	8010e12 <_dtoa_r+0x802>
 8010f18:	4618      	mov	r0, r3
 8010f1a:	301c      	adds	r0, #28
 8010f1c:	e772      	b.n	8010e04 <_dtoa_r+0x7f4>
 8010f1e:	9b03      	ldr	r3, [sp, #12]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	dc37      	bgt.n	8010f94 <_dtoa_r+0x984>
 8010f24:	9b06      	ldr	r3, [sp, #24]
 8010f26:	2b02      	cmp	r3, #2
 8010f28:	dd34      	ble.n	8010f94 <_dtoa_r+0x984>
 8010f2a:	9b03      	ldr	r3, [sp, #12]
 8010f2c:	9302      	str	r3, [sp, #8]
 8010f2e:	9b02      	ldr	r3, [sp, #8]
 8010f30:	b96b      	cbnz	r3, 8010f4e <_dtoa_r+0x93e>
 8010f32:	4631      	mov	r1, r6
 8010f34:	2205      	movs	r2, #5
 8010f36:	4620      	mov	r0, r4
 8010f38:	f000 fc2a 	bl	8011790 <__multadd>
 8010f3c:	4601      	mov	r1, r0
 8010f3e:	4606      	mov	r6, r0
 8010f40:	ee18 0a10 	vmov	r0, s16
 8010f44:	f000 fe44 	bl	8011bd0 <__mcmp>
 8010f48:	2800      	cmp	r0, #0
 8010f4a:	f73f adbb 	bgt.w	8010ac4 <_dtoa_r+0x4b4>
 8010f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f50:	9d01      	ldr	r5, [sp, #4]
 8010f52:	43db      	mvns	r3, r3
 8010f54:	9300      	str	r3, [sp, #0]
 8010f56:	f04f 0800 	mov.w	r8, #0
 8010f5a:	4631      	mov	r1, r6
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	f000 fbf5 	bl	801174c <_Bfree>
 8010f62:	2f00      	cmp	r7, #0
 8010f64:	f43f aea4 	beq.w	8010cb0 <_dtoa_r+0x6a0>
 8010f68:	f1b8 0f00 	cmp.w	r8, #0
 8010f6c:	d005      	beq.n	8010f7a <_dtoa_r+0x96a>
 8010f6e:	45b8      	cmp	r8, r7
 8010f70:	d003      	beq.n	8010f7a <_dtoa_r+0x96a>
 8010f72:	4641      	mov	r1, r8
 8010f74:	4620      	mov	r0, r4
 8010f76:	f000 fbe9 	bl	801174c <_Bfree>
 8010f7a:	4639      	mov	r1, r7
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f000 fbe5 	bl	801174c <_Bfree>
 8010f82:	e695      	b.n	8010cb0 <_dtoa_r+0x6a0>
 8010f84:	2600      	movs	r6, #0
 8010f86:	4637      	mov	r7, r6
 8010f88:	e7e1      	b.n	8010f4e <_dtoa_r+0x93e>
 8010f8a:	9700      	str	r7, [sp, #0]
 8010f8c:	4637      	mov	r7, r6
 8010f8e:	e599      	b.n	8010ac4 <_dtoa_r+0x4b4>
 8010f90:	40240000 	.word	0x40240000
 8010f94:	9b08      	ldr	r3, [sp, #32]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	f000 80ca 	beq.w	8011130 <_dtoa_r+0xb20>
 8010f9c:	9b03      	ldr	r3, [sp, #12]
 8010f9e:	9302      	str	r3, [sp, #8]
 8010fa0:	2d00      	cmp	r5, #0
 8010fa2:	dd05      	ble.n	8010fb0 <_dtoa_r+0x9a0>
 8010fa4:	4639      	mov	r1, r7
 8010fa6:	462a      	mov	r2, r5
 8010fa8:	4620      	mov	r0, r4
 8010faa:	f000 fda1 	bl	8011af0 <__lshift>
 8010fae:	4607      	mov	r7, r0
 8010fb0:	f1b8 0f00 	cmp.w	r8, #0
 8010fb4:	d05b      	beq.n	801106e <_dtoa_r+0xa5e>
 8010fb6:	6879      	ldr	r1, [r7, #4]
 8010fb8:	4620      	mov	r0, r4
 8010fba:	f000 fb87 	bl	80116cc <_Balloc>
 8010fbe:	4605      	mov	r5, r0
 8010fc0:	b928      	cbnz	r0, 8010fce <_dtoa_r+0x9be>
 8010fc2:	4b87      	ldr	r3, [pc, #540]	; (80111e0 <_dtoa_r+0xbd0>)
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010fca:	f7ff bb3b 	b.w	8010644 <_dtoa_r+0x34>
 8010fce:	693a      	ldr	r2, [r7, #16]
 8010fd0:	3202      	adds	r2, #2
 8010fd2:	0092      	lsls	r2, r2, #2
 8010fd4:	f107 010c 	add.w	r1, r7, #12
 8010fd8:	300c      	adds	r0, #12
 8010fda:	f7fe fa61 	bl	800f4a0 <memcpy>
 8010fde:	2201      	movs	r2, #1
 8010fe0:	4629      	mov	r1, r5
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	f000 fd84 	bl	8011af0 <__lshift>
 8010fe8:	9b01      	ldr	r3, [sp, #4]
 8010fea:	f103 0901 	add.w	r9, r3, #1
 8010fee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010ff2:	4413      	add	r3, r2
 8010ff4:	9305      	str	r3, [sp, #20]
 8010ff6:	f00a 0301 	and.w	r3, sl, #1
 8010ffa:	46b8      	mov	r8, r7
 8010ffc:	9304      	str	r3, [sp, #16]
 8010ffe:	4607      	mov	r7, r0
 8011000:	4631      	mov	r1, r6
 8011002:	ee18 0a10 	vmov	r0, s16
 8011006:	f7ff fa75 	bl	80104f4 <quorem>
 801100a:	4641      	mov	r1, r8
 801100c:	9002      	str	r0, [sp, #8]
 801100e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011012:	ee18 0a10 	vmov	r0, s16
 8011016:	f000 fddb 	bl	8011bd0 <__mcmp>
 801101a:	463a      	mov	r2, r7
 801101c:	9003      	str	r0, [sp, #12]
 801101e:	4631      	mov	r1, r6
 8011020:	4620      	mov	r0, r4
 8011022:	f000 fdf1 	bl	8011c08 <__mdiff>
 8011026:	68c2      	ldr	r2, [r0, #12]
 8011028:	f109 3bff 	add.w	fp, r9, #4294967295
 801102c:	4605      	mov	r5, r0
 801102e:	bb02      	cbnz	r2, 8011072 <_dtoa_r+0xa62>
 8011030:	4601      	mov	r1, r0
 8011032:	ee18 0a10 	vmov	r0, s16
 8011036:	f000 fdcb 	bl	8011bd0 <__mcmp>
 801103a:	4602      	mov	r2, r0
 801103c:	4629      	mov	r1, r5
 801103e:	4620      	mov	r0, r4
 8011040:	9207      	str	r2, [sp, #28]
 8011042:	f000 fb83 	bl	801174c <_Bfree>
 8011046:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801104a:	ea43 0102 	orr.w	r1, r3, r2
 801104e:	9b04      	ldr	r3, [sp, #16]
 8011050:	430b      	orrs	r3, r1
 8011052:	464d      	mov	r5, r9
 8011054:	d10f      	bne.n	8011076 <_dtoa_r+0xa66>
 8011056:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801105a:	d02a      	beq.n	80110b2 <_dtoa_r+0xaa2>
 801105c:	9b03      	ldr	r3, [sp, #12]
 801105e:	2b00      	cmp	r3, #0
 8011060:	dd02      	ble.n	8011068 <_dtoa_r+0xa58>
 8011062:	9b02      	ldr	r3, [sp, #8]
 8011064:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011068:	f88b a000 	strb.w	sl, [fp]
 801106c:	e775      	b.n	8010f5a <_dtoa_r+0x94a>
 801106e:	4638      	mov	r0, r7
 8011070:	e7ba      	b.n	8010fe8 <_dtoa_r+0x9d8>
 8011072:	2201      	movs	r2, #1
 8011074:	e7e2      	b.n	801103c <_dtoa_r+0xa2c>
 8011076:	9b03      	ldr	r3, [sp, #12]
 8011078:	2b00      	cmp	r3, #0
 801107a:	db04      	blt.n	8011086 <_dtoa_r+0xa76>
 801107c:	9906      	ldr	r1, [sp, #24]
 801107e:	430b      	orrs	r3, r1
 8011080:	9904      	ldr	r1, [sp, #16]
 8011082:	430b      	orrs	r3, r1
 8011084:	d122      	bne.n	80110cc <_dtoa_r+0xabc>
 8011086:	2a00      	cmp	r2, #0
 8011088:	ddee      	ble.n	8011068 <_dtoa_r+0xa58>
 801108a:	ee18 1a10 	vmov	r1, s16
 801108e:	2201      	movs	r2, #1
 8011090:	4620      	mov	r0, r4
 8011092:	f000 fd2d 	bl	8011af0 <__lshift>
 8011096:	4631      	mov	r1, r6
 8011098:	ee08 0a10 	vmov	s16, r0
 801109c:	f000 fd98 	bl	8011bd0 <__mcmp>
 80110a0:	2800      	cmp	r0, #0
 80110a2:	dc03      	bgt.n	80110ac <_dtoa_r+0xa9c>
 80110a4:	d1e0      	bne.n	8011068 <_dtoa_r+0xa58>
 80110a6:	f01a 0f01 	tst.w	sl, #1
 80110aa:	d0dd      	beq.n	8011068 <_dtoa_r+0xa58>
 80110ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80110b0:	d1d7      	bne.n	8011062 <_dtoa_r+0xa52>
 80110b2:	2339      	movs	r3, #57	; 0x39
 80110b4:	f88b 3000 	strb.w	r3, [fp]
 80110b8:	462b      	mov	r3, r5
 80110ba:	461d      	mov	r5, r3
 80110bc:	3b01      	subs	r3, #1
 80110be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80110c2:	2a39      	cmp	r2, #57	; 0x39
 80110c4:	d071      	beq.n	80111aa <_dtoa_r+0xb9a>
 80110c6:	3201      	adds	r2, #1
 80110c8:	701a      	strb	r2, [r3, #0]
 80110ca:	e746      	b.n	8010f5a <_dtoa_r+0x94a>
 80110cc:	2a00      	cmp	r2, #0
 80110ce:	dd07      	ble.n	80110e0 <_dtoa_r+0xad0>
 80110d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80110d4:	d0ed      	beq.n	80110b2 <_dtoa_r+0xaa2>
 80110d6:	f10a 0301 	add.w	r3, sl, #1
 80110da:	f88b 3000 	strb.w	r3, [fp]
 80110de:	e73c      	b.n	8010f5a <_dtoa_r+0x94a>
 80110e0:	9b05      	ldr	r3, [sp, #20]
 80110e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80110e6:	4599      	cmp	r9, r3
 80110e8:	d047      	beq.n	801117a <_dtoa_r+0xb6a>
 80110ea:	ee18 1a10 	vmov	r1, s16
 80110ee:	2300      	movs	r3, #0
 80110f0:	220a      	movs	r2, #10
 80110f2:	4620      	mov	r0, r4
 80110f4:	f000 fb4c 	bl	8011790 <__multadd>
 80110f8:	45b8      	cmp	r8, r7
 80110fa:	ee08 0a10 	vmov	s16, r0
 80110fe:	f04f 0300 	mov.w	r3, #0
 8011102:	f04f 020a 	mov.w	r2, #10
 8011106:	4641      	mov	r1, r8
 8011108:	4620      	mov	r0, r4
 801110a:	d106      	bne.n	801111a <_dtoa_r+0xb0a>
 801110c:	f000 fb40 	bl	8011790 <__multadd>
 8011110:	4680      	mov	r8, r0
 8011112:	4607      	mov	r7, r0
 8011114:	f109 0901 	add.w	r9, r9, #1
 8011118:	e772      	b.n	8011000 <_dtoa_r+0x9f0>
 801111a:	f000 fb39 	bl	8011790 <__multadd>
 801111e:	4639      	mov	r1, r7
 8011120:	4680      	mov	r8, r0
 8011122:	2300      	movs	r3, #0
 8011124:	220a      	movs	r2, #10
 8011126:	4620      	mov	r0, r4
 8011128:	f000 fb32 	bl	8011790 <__multadd>
 801112c:	4607      	mov	r7, r0
 801112e:	e7f1      	b.n	8011114 <_dtoa_r+0xb04>
 8011130:	9b03      	ldr	r3, [sp, #12]
 8011132:	9302      	str	r3, [sp, #8]
 8011134:	9d01      	ldr	r5, [sp, #4]
 8011136:	ee18 0a10 	vmov	r0, s16
 801113a:	4631      	mov	r1, r6
 801113c:	f7ff f9da 	bl	80104f4 <quorem>
 8011140:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011144:	9b01      	ldr	r3, [sp, #4]
 8011146:	f805 ab01 	strb.w	sl, [r5], #1
 801114a:	1aea      	subs	r2, r5, r3
 801114c:	9b02      	ldr	r3, [sp, #8]
 801114e:	4293      	cmp	r3, r2
 8011150:	dd09      	ble.n	8011166 <_dtoa_r+0xb56>
 8011152:	ee18 1a10 	vmov	r1, s16
 8011156:	2300      	movs	r3, #0
 8011158:	220a      	movs	r2, #10
 801115a:	4620      	mov	r0, r4
 801115c:	f000 fb18 	bl	8011790 <__multadd>
 8011160:	ee08 0a10 	vmov	s16, r0
 8011164:	e7e7      	b.n	8011136 <_dtoa_r+0xb26>
 8011166:	9b02      	ldr	r3, [sp, #8]
 8011168:	2b00      	cmp	r3, #0
 801116a:	bfc8      	it	gt
 801116c:	461d      	movgt	r5, r3
 801116e:	9b01      	ldr	r3, [sp, #4]
 8011170:	bfd8      	it	le
 8011172:	2501      	movle	r5, #1
 8011174:	441d      	add	r5, r3
 8011176:	f04f 0800 	mov.w	r8, #0
 801117a:	ee18 1a10 	vmov	r1, s16
 801117e:	2201      	movs	r2, #1
 8011180:	4620      	mov	r0, r4
 8011182:	f000 fcb5 	bl	8011af0 <__lshift>
 8011186:	4631      	mov	r1, r6
 8011188:	ee08 0a10 	vmov	s16, r0
 801118c:	f000 fd20 	bl	8011bd0 <__mcmp>
 8011190:	2800      	cmp	r0, #0
 8011192:	dc91      	bgt.n	80110b8 <_dtoa_r+0xaa8>
 8011194:	d102      	bne.n	801119c <_dtoa_r+0xb8c>
 8011196:	f01a 0f01 	tst.w	sl, #1
 801119a:	d18d      	bne.n	80110b8 <_dtoa_r+0xaa8>
 801119c:	462b      	mov	r3, r5
 801119e:	461d      	mov	r5, r3
 80111a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111a4:	2a30      	cmp	r2, #48	; 0x30
 80111a6:	d0fa      	beq.n	801119e <_dtoa_r+0xb8e>
 80111a8:	e6d7      	b.n	8010f5a <_dtoa_r+0x94a>
 80111aa:	9a01      	ldr	r2, [sp, #4]
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d184      	bne.n	80110ba <_dtoa_r+0xaaa>
 80111b0:	9b00      	ldr	r3, [sp, #0]
 80111b2:	3301      	adds	r3, #1
 80111b4:	9300      	str	r3, [sp, #0]
 80111b6:	2331      	movs	r3, #49	; 0x31
 80111b8:	7013      	strb	r3, [r2, #0]
 80111ba:	e6ce      	b.n	8010f5a <_dtoa_r+0x94a>
 80111bc:	4b09      	ldr	r3, [pc, #36]	; (80111e4 <_dtoa_r+0xbd4>)
 80111be:	f7ff ba95 	b.w	80106ec <_dtoa_r+0xdc>
 80111c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	f47f aa6e 	bne.w	80106a6 <_dtoa_r+0x96>
 80111ca:	4b07      	ldr	r3, [pc, #28]	; (80111e8 <_dtoa_r+0xbd8>)
 80111cc:	f7ff ba8e 	b.w	80106ec <_dtoa_r+0xdc>
 80111d0:	9b02      	ldr	r3, [sp, #8]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	dcae      	bgt.n	8011134 <_dtoa_r+0xb24>
 80111d6:	9b06      	ldr	r3, [sp, #24]
 80111d8:	2b02      	cmp	r3, #2
 80111da:	f73f aea8 	bgt.w	8010f2e <_dtoa_r+0x91e>
 80111de:	e7a9      	b.n	8011134 <_dtoa_r+0xb24>
 80111e0:	0802d775 	.word	0x0802d775
 80111e4:	0802d5d1 	.word	0x0802d5d1
 80111e8:	0802d6f6 	.word	0x0802d6f6

080111ec <__sflush_r>:
 80111ec:	898a      	ldrh	r2, [r1, #12]
 80111ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f2:	4605      	mov	r5, r0
 80111f4:	0710      	lsls	r0, r2, #28
 80111f6:	460c      	mov	r4, r1
 80111f8:	d458      	bmi.n	80112ac <__sflush_r+0xc0>
 80111fa:	684b      	ldr	r3, [r1, #4]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	dc05      	bgt.n	801120c <__sflush_r+0x20>
 8011200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011202:	2b00      	cmp	r3, #0
 8011204:	dc02      	bgt.n	801120c <__sflush_r+0x20>
 8011206:	2000      	movs	r0, #0
 8011208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801120c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801120e:	2e00      	cmp	r6, #0
 8011210:	d0f9      	beq.n	8011206 <__sflush_r+0x1a>
 8011212:	2300      	movs	r3, #0
 8011214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011218:	682f      	ldr	r7, [r5, #0]
 801121a:	602b      	str	r3, [r5, #0]
 801121c:	d032      	beq.n	8011284 <__sflush_r+0x98>
 801121e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011220:	89a3      	ldrh	r3, [r4, #12]
 8011222:	075a      	lsls	r2, r3, #29
 8011224:	d505      	bpl.n	8011232 <__sflush_r+0x46>
 8011226:	6863      	ldr	r3, [r4, #4]
 8011228:	1ac0      	subs	r0, r0, r3
 801122a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801122c:	b10b      	cbz	r3, 8011232 <__sflush_r+0x46>
 801122e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011230:	1ac0      	subs	r0, r0, r3
 8011232:	2300      	movs	r3, #0
 8011234:	4602      	mov	r2, r0
 8011236:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011238:	6a21      	ldr	r1, [r4, #32]
 801123a:	4628      	mov	r0, r5
 801123c:	47b0      	blx	r6
 801123e:	1c43      	adds	r3, r0, #1
 8011240:	89a3      	ldrh	r3, [r4, #12]
 8011242:	d106      	bne.n	8011252 <__sflush_r+0x66>
 8011244:	6829      	ldr	r1, [r5, #0]
 8011246:	291d      	cmp	r1, #29
 8011248:	d82c      	bhi.n	80112a4 <__sflush_r+0xb8>
 801124a:	4a2a      	ldr	r2, [pc, #168]	; (80112f4 <__sflush_r+0x108>)
 801124c:	40ca      	lsrs	r2, r1
 801124e:	07d6      	lsls	r6, r2, #31
 8011250:	d528      	bpl.n	80112a4 <__sflush_r+0xb8>
 8011252:	2200      	movs	r2, #0
 8011254:	6062      	str	r2, [r4, #4]
 8011256:	04d9      	lsls	r1, r3, #19
 8011258:	6922      	ldr	r2, [r4, #16]
 801125a:	6022      	str	r2, [r4, #0]
 801125c:	d504      	bpl.n	8011268 <__sflush_r+0x7c>
 801125e:	1c42      	adds	r2, r0, #1
 8011260:	d101      	bne.n	8011266 <__sflush_r+0x7a>
 8011262:	682b      	ldr	r3, [r5, #0]
 8011264:	b903      	cbnz	r3, 8011268 <__sflush_r+0x7c>
 8011266:	6560      	str	r0, [r4, #84]	; 0x54
 8011268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801126a:	602f      	str	r7, [r5, #0]
 801126c:	2900      	cmp	r1, #0
 801126e:	d0ca      	beq.n	8011206 <__sflush_r+0x1a>
 8011270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011274:	4299      	cmp	r1, r3
 8011276:	d002      	beq.n	801127e <__sflush_r+0x92>
 8011278:	4628      	mov	r0, r5
 801127a:	f7fe f927 	bl	800f4cc <_free_r>
 801127e:	2000      	movs	r0, #0
 8011280:	6360      	str	r0, [r4, #52]	; 0x34
 8011282:	e7c1      	b.n	8011208 <__sflush_r+0x1c>
 8011284:	6a21      	ldr	r1, [r4, #32]
 8011286:	2301      	movs	r3, #1
 8011288:	4628      	mov	r0, r5
 801128a:	47b0      	blx	r6
 801128c:	1c41      	adds	r1, r0, #1
 801128e:	d1c7      	bne.n	8011220 <__sflush_r+0x34>
 8011290:	682b      	ldr	r3, [r5, #0]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d0c4      	beq.n	8011220 <__sflush_r+0x34>
 8011296:	2b1d      	cmp	r3, #29
 8011298:	d001      	beq.n	801129e <__sflush_r+0xb2>
 801129a:	2b16      	cmp	r3, #22
 801129c:	d101      	bne.n	80112a2 <__sflush_r+0xb6>
 801129e:	602f      	str	r7, [r5, #0]
 80112a0:	e7b1      	b.n	8011206 <__sflush_r+0x1a>
 80112a2:	89a3      	ldrh	r3, [r4, #12]
 80112a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112a8:	81a3      	strh	r3, [r4, #12]
 80112aa:	e7ad      	b.n	8011208 <__sflush_r+0x1c>
 80112ac:	690f      	ldr	r7, [r1, #16]
 80112ae:	2f00      	cmp	r7, #0
 80112b0:	d0a9      	beq.n	8011206 <__sflush_r+0x1a>
 80112b2:	0793      	lsls	r3, r2, #30
 80112b4:	680e      	ldr	r6, [r1, #0]
 80112b6:	bf08      	it	eq
 80112b8:	694b      	ldreq	r3, [r1, #20]
 80112ba:	600f      	str	r7, [r1, #0]
 80112bc:	bf18      	it	ne
 80112be:	2300      	movne	r3, #0
 80112c0:	eba6 0807 	sub.w	r8, r6, r7
 80112c4:	608b      	str	r3, [r1, #8]
 80112c6:	f1b8 0f00 	cmp.w	r8, #0
 80112ca:	dd9c      	ble.n	8011206 <__sflush_r+0x1a>
 80112cc:	6a21      	ldr	r1, [r4, #32]
 80112ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80112d0:	4643      	mov	r3, r8
 80112d2:	463a      	mov	r2, r7
 80112d4:	4628      	mov	r0, r5
 80112d6:	47b0      	blx	r6
 80112d8:	2800      	cmp	r0, #0
 80112da:	dc06      	bgt.n	80112ea <__sflush_r+0xfe>
 80112dc:	89a3      	ldrh	r3, [r4, #12]
 80112de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112e2:	81a3      	strh	r3, [r4, #12]
 80112e4:	f04f 30ff 	mov.w	r0, #4294967295
 80112e8:	e78e      	b.n	8011208 <__sflush_r+0x1c>
 80112ea:	4407      	add	r7, r0
 80112ec:	eba8 0800 	sub.w	r8, r8, r0
 80112f0:	e7e9      	b.n	80112c6 <__sflush_r+0xda>
 80112f2:	bf00      	nop
 80112f4:	20400001 	.word	0x20400001

080112f8 <_fflush_r>:
 80112f8:	b538      	push	{r3, r4, r5, lr}
 80112fa:	690b      	ldr	r3, [r1, #16]
 80112fc:	4605      	mov	r5, r0
 80112fe:	460c      	mov	r4, r1
 8011300:	b913      	cbnz	r3, 8011308 <_fflush_r+0x10>
 8011302:	2500      	movs	r5, #0
 8011304:	4628      	mov	r0, r5
 8011306:	bd38      	pop	{r3, r4, r5, pc}
 8011308:	b118      	cbz	r0, 8011312 <_fflush_r+0x1a>
 801130a:	6983      	ldr	r3, [r0, #24]
 801130c:	b90b      	cbnz	r3, 8011312 <_fflush_r+0x1a>
 801130e:	f000 f887 	bl	8011420 <__sinit>
 8011312:	4b14      	ldr	r3, [pc, #80]	; (8011364 <_fflush_r+0x6c>)
 8011314:	429c      	cmp	r4, r3
 8011316:	d11b      	bne.n	8011350 <_fflush_r+0x58>
 8011318:	686c      	ldr	r4, [r5, #4]
 801131a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d0ef      	beq.n	8011302 <_fflush_r+0xa>
 8011322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011324:	07d0      	lsls	r0, r2, #31
 8011326:	d404      	bmi.n	8011332 <_fflush_r+0x3a>
 8011328:	0599      	lsls	r1, r3, #22
 801132a:	d402      	bmi.n	8011332 <_fflush_r+0x3a>
 801132c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801132e:	f000 f91a 	bl	8011566 <__retarget_lock_acquire_recursive>
 8011332:	4628      	mov	r0, r5
 8011334:	4621      	mov	r1, r4
 8011336:	f7ff ff59 	bl	80111ec <__sflush_r>
 801133a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801133c:	07da      	lsls	r2, r3, #31
 801133e:	4605      	mov	r5, r0
 8011340:	d4e0      	bmi.n	8011304 <_fflush_r+0xc>
 8011342:	89a3      	ldrh	r3, [r4, #12]
 8011344:	059b      	lsls	r3, r3, #22
 8011346:	d4dd      	bmi.n	8011304 <_fflush_r+0xc>
 8011348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801134a:	f000 f90d 	bl	8011568 <__retarget_lock_release_recursive>
 801134e:	e7d9      	b.n	8011304 <_fflush_r+0xc>
 8011350:	4b05      	ldr	r3, [pc, #20]	; (8011368 <_fflush_r+0x70>)
 8011352:	429c      	cmp	r4, r3
 8011354:	d101      	bne.n	801135a <_fflush_r+0x62>
 8011356:	68ac      	ldr	r4, [r5, #8]
 8011358:	e7df      	b.n	801131a <_fflush_r+0x22>
 801135a:	4b04      	ldr	r3, [pc, #16]	; (801136c <_fflush_r+0x74>)
 801135c:	429c      	cmp	r4, r3
 801135e:	bf08      	it	eq
 8011360:	68ec      	ldreq	r4, [r5, #12]
 8011362:	e7da      	b.n	801131a <_fflush_r+0x22>
 8011364:	0802d7a8 	.word	0x0802d7a8
 8011368:	0802d7c8 	.word	0x0802d7c8
 801136c:	0802d788 	.word	0x0802d788

08011370 <std>:
 8011370:	2300      	movs	r3, #0
 8011372:	b510      	push	{r4, lr}
 8011374:	4604      	mov	r4, r0
 8011376:	e9c0 3300 	strd	r3, r3, [r0]
 801137a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801137e:	6083      	str	r3, [r0, #8]
 8011380:	8181      	strh	r1, [r0, #12]
 8011382:	6643      	str	r3, [r0, #100]	; 0x64
 8011384:	81c2      	strh	r2, [r0, #14]
 8011386:	6183      	str	r3, [r0, #24]
 8011388:	4619      	mov	r1, r3
 801138a:	2208      	movs	r2, #8
 801138c:	305c      	adds	r0, #92	; 0x5c
 801138e:	f7fe f895 	bl	800f4bc <memset>
 8011392:	4b05      	ldr	r3, [pc, #20]	; (80113a8 <std+0x38>)
 8011394:	6263      	str	r3, [r4, #36]	; 0x24
 8011396:	4b05      	ldr	r3, [pc, #20]	; (80113ac <std+0x3c>)
 8011398:	62a3      	str	r3, [r4, #40]	; 0x28
 801139a:	4b05      	ldr	r3, [pc, #20]	; (80113b0 <std+0x40>)
 801139c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801139e:	4b05      	ldr	r3, [pc, #20]	; (80113b4 <std+0x44>)
 80113a0:	6224      	str	r4, [r4, #32]
 80113a2:	6323      	str	r3, [r4, #48]	; 0x30
 80113a4:	bd10      	pop	{r4, pc}
 80113a6:	bf00      	nop
 80113a8:	08010275 	.word	0x08010275
 80113ac:	08010297 	.word	0x08010297
 80113b0:	080102cf 	.word	0x080102cf
 80113b4:	080102f3 	.word	0x080102f3

080113b8 <_cleanup_r>:
 80113b8:	4901      	ldr	r1, [pc, #4]	; (80113c0 <_cleanup_r+0x8>)
 80113ba:	f000 b8af 	b.w	801151c <_fwalk_reent>
 80113be:	bf00      	nop
 80113c0:	080112f9 	.word	0x080112f9

080113c4 <__sfmoreglue>:
 80113c4:	b570      	push	{r4, r5, r6, lr}
 80113c6:	2268      	movs	r2, #104	; 0x68
 80113c8:	1e4d      	subs	r5, r1, #1
 80113ca:	4355      	muls	r5, r2
 80113cc:	460e      	mov	r6, r1
 80113ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80113d2:	f7fe f8e7 	bl	800f5a4 <_malloc_r>
 80113d6:	4604      	mov	r4, r0
 80113d8:	b140      	cbz	r0, 80113ec <__sfmoreglue+0x28>
 80113da:	2100      	movs	r1, #0
 80113dc:	e9c0 1600 	strd	r1, r6, [r0]
 80113e0:	300c      	adds	r0, #12
 80113e2:	60a0      	str	r0, [r4, #8]
 80113e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80113e8:	f7fe f868 	bl	800f4bc <memset>
 80113ec:	4620      	mov	r0, r4
 80113ee:	bd70      	pop	{r4, r5, r6, pc}

080113f0 <__sfp_lock_acquire>:
 80113f0:	4801      	ldr	r0, [pc, #4]	; (80113f8 <__sfp_lock_acquire+0x8>)
 80113f2:	f000 b8b8 	b.w	8011566 <__retarget_lock_acquire_recursive>
 80113f6:	bf00      	nop
 80113f8:	20005b99 	.word	0x20005b99

080113fc <__sfp_lock_release>:
 80113fc:	4801      	ldr	r0, [pc, #4]	; (8011404 <__sfp_lock_release+0x8>)
 80113fe:	f000 b8b3 	b.w	8011568 <__retarget_lock_release_recursive>
 8011402:	bf00      	nop
 8011404:	20005b99 	.word	0x20005b99

08011408 <__sinit_lock_acquire>:
 8011408:	4801      	ldr	r0, [pc, #4]	; (8011410 <__sinit_lock_acquire+0x8>)
 801140a:	f000 b8ac 	b.w	8011566 <__retarget_lock_acquire_recursive>
 801140e:	bf00      	nop
 8011410:	20005b9a 	.word	0x20005b9a

08011414 <__sinit_lock_release>:
 8011414:	4801      	ldr	r0, [pc, #4]	; (801141c <__sinit_lock_release+0x8>)
 8011416:	f000 b8a7 	b.w	8011568 <__retarget_lock_release_recursive>
 801141a:	bf00      	nop
 801141c:	20005b9a 	.word	0x20005b9a

08011420 <__sinit>:
 8011420:	b510      	push	{r4, lr}
 8011422:	4604      	mov	r4, r0
 8011424:	f7ff fff0 	bl	8011408 <__sinit_lock_acquire>
 8011428:	69a3      	ldr	r3, [r4, #24]
 801142a:	b11b      	cbz	r3, 8011434 <__sinit+0x14>
 801142c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011430:	f7ff bff0 	b.w	8011414 <__sinit_lock_release>
 8011434:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011438:	6523      	str	r3, [r4, #80]	; 0x50
 801143a:	4b13      	ldr	r3, [pc, #76]	; (8011488 <__sinit+0x68>)
 801143c:	4a13      	ldr	r2, [pc, #76]	; (801148c <__sinit+0x6c>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	62a2      	str	r2, [r4, #40]	; 0x28
 8011442:	42a3      	cmp	r3, r4
 8011444:	bf04      	itt	eq
 8011446:	2301      	moveq	r3, #1
 8011448:	61a3      	streq	r3, [r4, #24]
 801144a:	4620      	mov	r0, r4
 801144c:	f000 f820 	bl	8011490 <__sfp>
 8011450:	6060      	str	r0, [r4, #4]
 8011452:	4620      	mov	r0, r4
 8011454:	f000 f81c 	bl	8011490 <__sfp>
 8011458:	60a0      	str	r0, [r4, #8]
 801145a:	4620      	mov	r0, r4
 801145c:	f000 f818 	bl	8011490 <__sfp>
 8011460:	2200      	movs	r2, #0
 8011462:	60e0      	str	r0, [r4, #12]
 8011464:	2104      	movs	r1, #4
 8011466:	6860      	ldr	r0, [r4, #4]
 8011468:	f7ff ff82 	bl	8011370 <std>
 801146c:	68a0      	ldr	r0, [r4, #8]
 801146e:	2201      	movs	r2, #1
 8011470:	2109      	movs	r1, #9
 8011472:	f7ff ff7d 	bl	8011370 <std>
 8011476:	68e0      	ldr	r0, [r4, #12]
 8011478:	2202      	movs	r2, #2
 801147a:	2112      	movs	r1, #18
 801147c:	f7ff ff78 	bl	8011370 <std>
 8011480:	2301      	movs	r3, #1
 8011482:	61a3      	str	r3, [r4, #24]
 8011484:	e7d2      	b.n	801142c <__sinit+0xc>
 8011486:	bf00      	nop
 8011488:	0802d5ac 	.word	0x0802d5ac
 801148c:	080113b9 	.word	0x080113b9

08011490 <__sfp>:
 8011490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011492:	4607      	mov	r7, r0
 8011494:	f7ff ffac 	bl	80113f0 <__sfp_lock_acquire>
 8011498:	4b1e      	ldr	r3, [pc, #120]	; (8011514 <__sfp+0x84>)
 801149a:	681e      	ldr	r6, [r3, #0]
 801149c:	69b3      	ldr	r3, [r6, #24]
 801149e:	b913      	cbnz	r3, 80114a6 <__sfp+0x16>
 80114a0:	4630      	mov	r0, r6
 80114a2:	f7ff ffbd 	bl	8011420 <__sinit>
 80114a6:	3648      	adds	r6, #72	; 0x48
 80114a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80114ac:	3b01      	subs	r3, #1
 80114ae:	d503      	bpl.n	80114b8 <__sfp+0x28>
 80114b0:	6833      	ldr	r3, [r6, #0]
 80114b2:	b30b      	cbz	r3, 80114f8 <__sfp+0x68>
 80114b4:	6836      	ldr	r6, [r6, #0]
 80114b6:	e7f7      	b.n	80114a8 <__sfp+0x18>
 80114b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80114bc:	b9d5      	cbnz	r5, 80114f4 <__sfp+0x64>
 80114be:	4b16      	ldr	r3, [pc, #88]	; (8011518 <__sfp+0x88>)
 80114c0:	60e3      	str	r3, [r4, #12]
 80114c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80114c6:	6665      	str	r5, [r4, #100]	; 0x64
 80114c8:	f000 f84c 	bl	8011564 <__retarget_lock_init_recursive>
 80114cc:	f7ff ff96 	bl	80113fc <__sfp_lock_release>
 80114d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80114d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80114d8:	6025      	str	r5, [r4, #0]
 80114da:	61a5      	str	r5, [r4, #24]
 80114dc:	2208      	movs	r2, #8
 80114de:	4629      	mov	r1, r5
 80114e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80114e4:	f7fd ffea 	bl	800f4bc <memset>
 80114e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80114ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80114f0:	4620      	mov	r0, r4
 80114f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114f4:	3468      	adds	r4, #104	; 0x68
 80114f6:	e7d9      	b.n	80114ac <__sfp+0x1c>
 80114f8:	2104      	movs	r1, #4
 80114fa:	4638      	mov	r0, r7
 80114fc:	f7ff ff62 	bl	80113c4 <__sfmoreglue>
 8011500:	4604      	mov	r4, r0
 8011502:	6030      	str	r0, [r6, #0]
 8011504:	2800      	cmp	r0, #0
 8011506:	d1d5      	bne.n	80114b4 <__sfp+0x24>
 8011508:	f7ff ff78 	bl	80113fc <__sfp_lock_release>
 801150c:	230c      	movs	r3, #12
 801150e:	603b      	str	r3, [r7, #0]
 8011510:	e7ee      	b.n	80114f0 <__sfp+0x60>
 8011512:	bf00      	nop
 8011514:	0802d5ac 	.word	0x0802d5ac
 8011518:	ffff0001 	.word	0xffff0001

0801151c <_fwalk_reent>:
 801151c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011520:	4606      	mov	r6, r0
 8011522:	4688      	mov	r8, r1
 8011524:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011528:	2700      	movs	r7, #0
 801152a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801152e:	f1b9 0901 	subs.w	r9, r9, #1
 8011532:	d505      	bpl.n	8011540 <_fwalk_reent+0x24>
 8011534:	6824      	ldr	r4, [r4, #0]
 8011536:	2c00      	cmp	r4, #0
 8011538:	d1f7      	bne.n	801152a <_fwalk_reent+0xe>
 801153a:	4638      	mov	r0, r7
 801153c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011540:	89ab      	ldrh	r3, [r5, #12]
 8011542:	2b01      	cmp	r3, #1
 8011544:	d907      	bls.n	8011556 <_fwalk_reent+0x3a>
 8011546:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801154a:	3301      	adds	r3, #1
 801154c:	d003      	beq.n	8011556 <_fwalk_reent+0x3a>
 801154e:	4629      	mov	r1, r5
 8011550:	4630      	mov	r0, r6
 8011552:	47c0      	blx	r8
 8011554:	4307      	orrs	r7, r0
 8011556:	3568      	adds	r5, #104	; 0x68
 8011558:	e7e9      	b.n	801152e <_fwalk_reent+0x12>
	...

0801155c <_localeconv_r>:
 801155c:	4800      	ldr	r0, [pc, #0]	; (8011560 <_localeconv_r+0x4>)
 801155e:	4770      	bx	lr
 8011560:	20000228 	.word	0x20000228

08011564 <__retarget_lock_init_recursive>:
 8011564:	4770      	bx	lr

08011566 <__retarget_lock_acquire_recursive>:
 8011566:	4770      	bx	lr

08011568 <__retarget_lock_release_recursive>:
 8011568:	4770      	bx	lr
	...

0801156c <_lseek_r>:
 801156c:	b538      	push	{r3, r4, r5, lr}
 801156e:	4d07      	ldr	r5, [pc, #28]	; (801158c <_lseek_r+0x20>)
 8011570:	4604      	mov	r4, r0
 8011572:	4608      	mov	r0, r1
 8011574:	4611      	mov	r1, r2
 8011576:	2200      	movs	r2, #0
 8011578:	602a      	str	r2, [r5, #0]
 801157a:	461a      	mov	r2, r3
 801157c:	f7f3 f9c2 	bl	8004904 <_lseek>
 8011580:	1c43      	adds	r3, r0, #1
 8011582:	d102      	bne.n	801158a <_lseek_r+0x1e>
 8011584:	682b      	ldr	r3, [r5, #0]
 8011586:	b103      	cbz	r3, 801158a <_lseek_r+0x1e>
 8011588:	6023      	str	r3, [r4, #0]
 801158a:	bd38      	pop	{r3, r4, r5, pc}
 801158c:	20005b9c 	.word	0x20005b9c

08011590 <__swhatbuf_r>:
 8011590:	b570      	push	{r4, r5, r6, lr}
 8011592:	460e      	mov	r6, r1
 8011594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011598:	2900      	cmp	r1, #0
 801159a:	b096      	sub	sp, #88	; 0x58
 801159c:	4614      	mov	r4, r2
 801159e:	461d      	mov	r5, r3
 80115a0:	da08      	bge.n	80115b4 <__swhatbuf_r+0x24>
 80115a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80115a6:	2200      	movs	r2, #0
 80115a8:	602a      	str	r2, [r5, #0]
 80115aa:	061a      	lsls	r2, r3, #24
 80115ac:	d410      	bmi.n	80115d0 <__swhatbuf_r+0x40>
 80115ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115b2:	e00e      	b.n	80115d2 <__swhatbuf_r+0x42>
 80115b4:	466a      	mov	r2, sp
 80115b6:	f000 fe11 	bl	80121dc <_fstat_r>
 80115ba:	2800      	cmp	r0, #0
 80115bc:	dbf1      	blt.n	80115a2 <__swhatbuf_r+0x12>
 80115be:	9a01      	ldr	r2, [sp, #4]
 80115c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80115c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80115c8:	425a      	negs	r2, r3
 80115ca:	415a      	adcs	r2, r3
 80115cc:	602a      	str	r2, [r5, #0]
 80115ce:	e7ee      	b.n	80115ae <__swhatbuf_r+0x1e>
 80115d0:	2340      	movs	r3, #64	; 0x40
 80115d2:	2000      	movs	r0, #0
 80115d4:	6023      	str	r3, [r4, #0]
 80115d6:	b016      	add	sp, #88	; 0x58
 80115d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080115dc <__smakebuf_r>:
 80115dc:	898b      	ldrh	r3, [r1, #12]
 80115de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80115e0:	079d      	lsls	r5, r3, #30
 80115e2:	4606      	mov	r6, r0
 80115e4:	460c      	mov	r4, r1
 80115e6:	d507      	bpl.n	80115f8 <__smakebuf_r+0x1c>
 80115e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80115ec:	6023      	str	r3, [r4, #0]
 80115ee:	6123      	str	r3, [r4, #16]
 80115f0:	2301      	movs	r3, #1
 80115f2:	6163      	str	r3, [r4, #20]
 80115f4:	b002      	add	sp, #8
 80115f6:	bd70      	pop	{r4, r5, r6, pc}
 80115f8:	ab01      	add	r3, sp, #4
 80115fa:	466a      	mov	r2, sp
 80115fc:	f7ff ffc8 	bl	8011590 <__swhatbuf_r>
 8011600:	9900      	ldr	r1, [sp, #0]
 8011602:	4605      	mov	r5, r0
 8011604:	4630      	mov	r0, r6
 8011606:	f7fd ffcd 	bl	800f5a4 <_malloc_r>
 801160a:	b948      	cbnz	r0, 8011620 <__smakebuf_r+0x44>
 801160c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011610:	059a      	lsls	r2, r3, #22
 8011612:	d4ef      	bmi.n	80115f4 <__smakebuf_r+0x18>
 8011614:	f023 0303 	bic.w	r3, r3, #3
 8011618:	f043 0302 	orr.w	r3, r3, #2
 801161c:	81a3      	strh	r3, [r4, #12]
 801161e:	e7e3      	b.n	80115e8 <__smakebuf_r+0xc>
 8011620:	4b0d      	ldr	r3, [pc, #52]	; (8011658 <__smakebuf_r+0x7c>)
 8011622:	62b3      	str	r3, [r6, #40]	; 0x28
 8011624:	89a3      	ldrh	r3, [r4, #12]
 8011626:	6020      	str	r0, [r4, #0]
 8011628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801162c:	81a3      	strh	r3, [r4, #12]
 801162e:	9b00      	ldr	r3, [sp, #0]
 8011630:	6163      	str	r3, [r4, #20]
 8011632:	9b01      	ldr	r3, [sp, #4]
 8011634:	6120      	str	r0, [r4, #16]
 8011636:	b15b      	cbz	r3, 8011650 <__smakebuf_r+0x74>
 8011638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801163c:	4630      	mov	r0, r6
 801163e:	f000 fddf 	bl	8012200 <_isatty_r>
 8011642:	b128      	cbz	r0, 8011650 <__smakebuf_r+0x74>
 8011644:	89a3      	ldrh	r3, [r4, #12]
 8011646:	f023 0303 	bic.w	r3, r3, #3
 801164a:	f043 0301 	orr.w	r3, r3, #1
 801164e:	81a3      	strh	r3, [r4, #12]
 8011650:	89a0      	ldrh	r0, [r4, #12]
 8011652:	4305      	orrs	r5, r0
 8011654:	81a5      	strh	r5, [r4, #12]
 8011656:	e7cd      	b.n	80115f4 <__smakebuf_r+0x18>
 8011658:	080113b9 	.word	0x080113b9

0801165c <__ascii_mbtowc>:
 801165c:	b082      	sub	sp, #8
 801165e:	b901      	cbnz	r1, 8011662 <__ascii_mbtowc+0x6>
 8011660:	a901      	add	r1, sp, #4
 8011662:	b142      	cbz	r2, 8011676 <__ascii_mbtowc+0x1a>
 8011664:	b14b      	cbz	r3, 801167a <__ascii_mbtowc+0x1e>
 8011666:	7813      	ldrb	r3, [r2, #0]
 8011668:	600b      	str	r3, [r1, #0]
 801166a:	7812      	ldrb	r2, [r2, #0]
 801166c:	1e10      	subs	r0, r2, #0
 801166e:	bf18      	it	ne
 8011670:	2001      	movne	r0, #1
 8011672:	b002      	add	sp, #8
 8011674:	4770      	bx	lr
 8011676:	4610      	mov	r0, r2
 8011678:	e7fb      	b.n	8011672 <__ascii_mbtowc+0x16>
 801167a:	f06f 0001 	mvn.w	r0, #1
 801167e:	e7f8      	b.n	8011672 <__ascii_mbtowc+0x16>

08011680 <memmove>:
 8011680:	4288      	cmp	r0, r1
 8011682:	b510      	push	{r4, lr}
 8011684:	eb01 0402 	add.w	r4, r1, r2
 8011688:	d902      	bls.n	8011690 <memmove+0x10>
 801168a:	4284      	cmp	r4, r0
 801168c:	4623      	mov	r3, r4
 801168e:	d807      	bhi.n	80116a0 <memmove+0x20>
 8011690:	1e43      	subs	r3, r0, #1
 8011692:	42a1      	cmp	r1, r4
 8011694:	d008      	beq.n	80116a8 <memmove+0x28>
 8011696:	f811 2b01 	ldrb.w	r2, [r1], #1
 801169a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801169e:	e7f8      	b.n	8011692 <memmove+0x12>
 80116a0:	4402      	add	r2, r0
 80116a2:	4601      	mov	r1, r0
 80116a4:	428a      	cmp	r2, r1
 80116a6:	d100      	bne.n	80116aa <memmove+0x2a>
 80116a8:	bd10      	pop	{r4, pc}
 80116aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80116b2:	e7f7      	b.n	80116a4 <memmove+0x24>

080116b4 <__malloc_lock>:
 80116b4:	4801      	ldr	r0, [pc, #4]	; (80116bc <__malloc_lock+0x8>)
 80116b6:	f7ff bf56 	b.w	8011566 <__retarget_lock_acquire_recursive>
 80116ba:	bf00      	nop
 80116bc:	20005b98 	.word	0x20005b98

080116c0 <__malloc_unlock>:
 80116c0:	4801      	ldr	r0, [pc, #4]	; (80116c8 <__malloc_unlock+0x8>)
 80116c2:	f7ff bf51 	b.w	8011568 <__retarget_lock_release_recursive>
 80116c6:	bf00      	nop
 80116c8:	20005b98 	.word	0x20005b98

080116cc <_Balloc>:
 80116cc:	b570      	push	{r4, r5, r6, lr}
 80116ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80116d0:	4604      	mov	r4, r0
 80116d2:	460d      	mov	r5, r1
 80116d4:	b976      	cbnz	r6, 80116f4 <_Balloc+0x28>
 80116d6:	2010      	movs	r0, #16
 80116d8:	f7fd fed2 	bl	800f480 <malloc>
 80116dc:	4602      	mov	r2, r0
 80116de:	6260      	str	r0, [r4, #36]	; 0x24
 80116e0:	b920      	cbnz	r0, 80116ec <_Balloc+0x20>
 80116e2:	4b18      	ldr	r3, [pc, #96]	; (8011744 <_Balloc+0x78>)
 80116e4:	4818      	ldr	r0, [pc, #96]	; (8011748 <_Balloc+0x7c>)
 80116e6:	2166      	movs	r1, #102	; 0x66
 80116e8:	f7fd fe70 	bl	800f3cc <__assert_func>
 80116ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116f0:	6006      	str	r6, [r0, #0]
 80116f2:	60c6      	str	r6, [r0, #12]
 80116f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80116f6:	68f3      	ldr	r3, [r6, #12]
 80116f8:	b183      	cbz	r3, 801171c <_Balloc+0x50>
 80116fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011702:	b9b8      	cbnz	r0, 8011734 <_Balloc+0x68>
 8011704:	2101      	movs	r1, #1
 8011706:	fa01 f605 	lsl.w	r6, r1, r5
 801170a:	1d72      	adds	r2, r6, #5
 801170c:	0092      	lsls	r2, r2, #2
 801170e:	4620      	mov	r0, r4
 8011710:	f000 fb60 	bl	8011dd4 <_calloc_r>
 8011714:	b160      	cbz	r0, 8011730 <_Balloc+0x64>
 8011716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801171a:	e00e      	b.n	801173a <_Balloc+0x6e>
 801171c:	2221      	movs	r2, #33	; 0x21
 801171e:	2104      	movs	r1, #4
 8011720:	4620      	mov	r0, r4
 8011722:	f000 fb57 	bl	8011dd4 <_calloc_r>
 8011726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011728:	60f0      	str	r0, [r6, #12]
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d1e4      	bne.n	80116fa <_Balloc+0x2e>
 8011730:	2000      	movs	r0, #0
 8011732:	bd70      	pop	{r4, r5, r6, pc}
 8011734:	6802      	ldr	r2, [r0, #0]
 8011736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801173a:	2300      	movs	r3, #0
 801173c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011740:	e7f7      	b.n	8011732 <_Balloc+0x66>
 8011742:	bf00      	nop
 8011744:	0802d703 	.word	0x0802d703
 8011748:	0802d7f2 	.word	0x0802d7f2

0801174c <_Bfree>:
 801174c:	b570      	push	{r4, r5, r6, lr}
 801174e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011750:	4605      	mov	r5, r0
 8011752:	460c      	mov	r4, r1
 8011754:	b976      	cbnz	r6, 8011774 <_Bfree+0x28>
 8011756:	2010      	movs	r0, #16
 8011758:	f7fd fe92 	bl	800f480 <malloc>
 801175c:	4602      	mov	r2, r0
 801175e:	6268      	str	r0, [r5, #36]	; 0x24
 8011760:	b920      	cbnz	r0, 801176c <_Bfree+0x20>
 8011762:	4b09      	ldr	r3, [pc, #36]	; (8011788 <_Bfree+0x3c>)
 8011764:	4809      	ldr	r0, [pc, #36]	; (801178c <_Bfree+0x40>)
 8011766:	218a      	movs	r1, #138	; 0x8a
 8011768:	f7fd fe30 	bl	800f3cc <__assert_func>
 801176c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011770:	6006      	str	r6, [r0, #0]
 8011772:	60c6      	str	r6, [r0, #12]
 8011774:	b13c      	cbz	r4, 8011786 <_Bfree+0x3a>
 8011776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011778:	6862      	ldr	r2, [r4, #4]
 801177a:	68db      	ldr	r3, [r3, #12]
 801177c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011780:	6021      	str	r1, [r4, #0]
 8011782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011786:	bd70      	pop	{r4, r5, r6, pc}
 8011788:	0802d703 	.word	0x0802d703
 801178c:	0802d7f2 	.word	0x0802d7f2

08011790 <__multadd>:
 8011790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011794:	690d      	ldr	r5, [r1, #16]
 8011796:	4607      	mov	r7, r0
 8011798:	460c      	mov	r4, r1
 801179a:	461e      	mov	r6, r3
 801179c:	f101 0c14 	add.w	ip, r1, #20
 80117a0:	2000      	movs	r0, #0
 80117a2:	f8dc 3000 	ldr.w	r3, [ip]
 80117a6:	b299      	uxth	r1, r3
 80117a8:	fb02 6101 	mla	r1, r2, r1, r6
 80117ac:	0c1e      	lsrs	r6, r3, #16
 80117ae:	0c0b      	lsrs	r3, r1, #16
 80117b0:	fb02 3306 	mla	r3, r2, r6, r3
 80117b4:	b289      	uxth	r1, r1
 80117b6:	3001      	adds	r0, #1
 80117b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80117bc:	4285      	cmp	r5, r0
 80117be:	f84c 1b04 	str.w	r1, [ip], #4
 80117c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80117c6:	dcec      	bgt.n	80117a2 <__multadd+0x12>
 80117c8:	b30e      	cbz	r6, 801180e <__multadd+0x7e>
 80117ca:	68a3      	ldr	r3, [r4, #8]
 80117cc:	42ab      	cmp	r3, r5
 80117ce:	dc19      	bgt.n	8011804 <__multadd+0x74>
 80117d0:	6861      	ldr	r1, [r4, #4]
 80117d2:	4638      	mov	r0, r7
 80117d4:	3101      	adds	r1, #1
 80117d6:	f7ff ff79 	bl	80116cc <_Balloc>
 80117da:	4680      	mov	r8, r0
 80117dc:	b928      	cbnz	r0, 80117ea <__multadd+0x5a>
 80117de:	4602      	mov	r2, r0
 80117e0:	4b0c      	ldr	r3, [pc, #48]	; (8011814 <__multadd+0x84>)
 80117e2:	480d      	ldr	r0, [pc, #52]	; (8011818 <__multadd+0x88>)
 80117e4:	21b5      	movs	r1, #181	; 0xb5
 80117e6:	f7fd fdf1 	bl	800f3cc <__assert_func>
 80117ea:	6922      	ldr	r2, [r4, #16]
 80117ec:	3202      	adds	r2, #2
 80117ee:	f104 010c 	add.w	r1, r4, #12
 80117f2:	0092      	lsls	r2, r2, #2
 80117f4:	300c      	adds	r0, #12
 80117f6:	f7fd fe53 	bl	800f4a0 <memcpy>
 80117fa:	4621      	mov	r1, r4
 80117fc:	4638      	mov	r0, r7
 80117fe:	f7ff ffa5 	bl	801174c <_Bfree>
 8011802:	4644      	mov	r4, r8
 8011804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011808:	3501      	adds	r5, #1
 801180a:	615e      	str	r6, [r3, #20]
 801180c:	6125      	str	r5, [r4, #16]
 801180e:	4620      	mov	r0, r4
 8011810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011814:	0802d775 	.word	0x0802d775
 8011818:	0802d7f2 	.word	0x0802d7f2

0801181c <__hi0bits>:
 801181c:	0c03      	lsrs	r3, r0, #16
 801181e:	041b      	lsls	r3, r3, #16
 8011820:	b9d3      	cbnz	r3, 8011858 <__hi0bits+0x3c>
 8011822:	0400      	lsls	r0, r0, #16
 8011824:	2310      	movs	r3, #16
 8011826:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801182a:	bf04      	itt	eq
 801182c:	0200      	lsleq	r0, r0, #8
 801182e:	3308      	addeq	r3, #8
 8011830:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011834:	bf04      	itt	eq
 8011836:	0100      	lsleq	r0, r0, #4
 8011838:	3304      	addeq	r3, #4
 801183a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801183e:	bf04      	itt	eq
 8011840:	0080      	lsleq	r0, r0, #2
 8011842:	3302      	addeq	r3, #2
 8011844:	2800      	cmp	r0, #0
 8011846:	db05      	blt.n	8011854 <__hi0bits+0x38>
 8011848:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801184c:	f103 0301 	add.w	r3, r3, #1
 8011850:	bf08      	it	eq
 8011852:	2320      	moveq	r3, #32
 8011854:	4618      	mov	r0, r3
 8011856:	4770      	bx	lr
 8011858:	2300      	movs	r3, #0
 801185a:	e7e4      	b.n	8011826 <__hi0bits+0xa>

0801185c <__lo0bits>:
 801185c:	6803      	ldr	r3, [r0, #0]
 801185e:	f013 0207 	ands.w	r2, r3, #7
 8011862:	4601      	mov	r1, r0
 8011864:	d00b      	beq.n	801187e <__lo0bits+0x22>
 8011866:	07da      	lsls	r2, r3, #31
 8011868:	d423      	bmi.n	80118b2 <__lo0bits+0x56>
 801186a:	0798      	lsls	r0, r3, #30
 801186c:	bf49      	itett	mi
 801186e:	085b      	lsrmi	r3, r3, #1
 8011870:	089b      	lsrpl	r3, r3, #2
 8011872:	2001      	movmi	r0, #1
 8011874:	600b      	strmi	r3, [r1, #0]
 8011876:	bf5c      	itt	pl
 8011878:	600b      	strpl	r3, [r1, #0]
 801187a:	2002      	movpl	r0, #2
 801187c:	4770      	bx	lr
 801187e:	b298      	uxth	r0, r3
 8011880:	b9a8      	cbnz	r0, 80118ae <__lo0bits+0x52>
 8011882:	0c1b      	lsrs	r3, r3, #16
 8011884:	2010      	movs	r0, #16
 8011886:	b2da      	uxtb	r2, r3
 8011888:	b90a      	cbnz	r2, 801188e <__lo0bits+0x32>
 801188a:	3008      	adds	r0, #8
 801188c:	0a1b      	lsrs	r3, r3, #8
 801188e:	071a      	lsls	r2, r3, #28
 8011890:	bf04      	itt	eq
 8011892:	091b      	lsreq	r3, r3, #4
 8011894:	3004      	addeq	r0, #4
 8011896:	079a      	lsls	r2, r3, #30
 8011898:	bf04      	itt	eq
 801189a:	089b      	lsreq	r3, r3, #2
 801189c:	3002      	addeq	r0, #2
 801189e:	07da      	lsls	r2, r3, #31
 80118a0:	d403      	bmi.n	80118aa <__lo0bits+0x4e>
 80118a2:	085b      	lsrs	r3, r3, #1
 80118a4:	f100 0001 	add.w	r0, r0, #1
 80118a8:	d005      	beq.n	80118b6 <__lo0bits+0x5a>
 80118aa:	600b      	str	r3, [r1, #0]
 80118ac:	4770      	bx	lr
 80118ae:	4610      	mov	r0, r2
 80118b0:	e7e9      	b.n	8011886 <__lo0bits+0x2a>
 80118b2:	2000      	movs	r0, #0
 80118b4:	4770      	bx	lr
 80118b6:	2020      	movs	r0, #32
 80118b8:	4770      	bx	lr
	...

080118bc <__i2b>:
 80118bc:	b510      	push	{r4, lr}
 80118be:	460c      	mov	r4, r1
 80118c0:	2101      	movs	r1, #1
 80118c2:	f7ff ff03 	bl	80116cc <_Balloc>
 80118c6:	4602      	mov	r2, r0
 80118c8:	b928      	cbnz	r0, 80118d6 <__i2b+0x1a>
 80118ca:	4b05      	ldr	r3, [pc, #20]	; (80118e0 <__i2b+0x24>)
 80118cc:	4805      	ldr	r0, [pc, #20]	; (80118e4 <__i2b+0x28>)
 80118ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80118d2:	f7fd fd7b 	bl	800f3cc <__assert_func>
 80118d6:	2301      	movs	r3, #1
 80118d8:	6144      	str	r4, [r0, #20]
 80118da:	6103      	str	r3, [r0, #16]
 80118dc:	bd10      	pop	{r4, pc}
 80118de:	bf00      	nop
 80118e0:	0802d775 	.word	0x0802d775
 80118e4:	0802d7f2 	.word	0x0802d7f2

080118e8 <__multiply>:
 80118e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ec:	4691      	mov	r9, r2
 80118ee:	690a      	ldr	r2, [r1, #16]
 80118f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	bfb8      	it	lt
 80118f8:	460b      	movlt	r3, r1
 80118fa:	460c      	mov	r4, r1
 80118fc:	bfbc      	itt	lt
 80118fe:	464c      	movlt	r4, r9
 8011900:	4699      	movlt	r9, r3
 8011902:	6927      	ldr	r7, [r4, #16]
 8011904:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011908:	68a3      	ldr	r3, [r4, #8]
 801190a:	6861      	ldr	r1, [r4, #4]
 801190c:	eb07 060a 	add.w	r6, r7, sl
 8011910:	42b3      	cmp	r3, r6
 8011912:	b085      	sub	sp, #20
 8011914:	bfb8      	it	lt
 8011916:	3101      	addlt	r1, #1
 8011918:	f7ff fed8 	bl	80116cc <_Balloc>
 801191c:	b930      	cbnz	r0, 801192c <__multiply+0x44>
 801191e:	4602      	mov	r2, r0
 8011920:	4b44      	ldr	r3, [pc, #272]	; (8011a34 <__multiply+0x14c>)
 8011922:	4845      	ldr	r0, [pc, #276]	; (8011a38 <__multiply+0x150>)
 8011924:	f240 115d 	movw	r1, #349	; 0x15d
 8011928:	f7fd fd50 	bl	800f3cc <__assert_func>
 801192c:	f100 0514 	add.w	r5, r0, #20
 8011930:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011934:	462b      	mov	r3, r5
 8011936:	2200      	movs	r2, #0
 8011938:	4543      	cmp	r3, r8
 801193a:	d321      	bcc.n	8011980 <__multiply+0x98>
 801193c:	f104 0314 	add.w	r3, r4, #20
 8011940:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011944:	f109 0314 	add.w	r3, r9, #20
 8011948:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801194c:	9202      	str	r2, [sp, #8]
 801194e:	1b3a      	subs	r2, r7, r4
 8011950:	3a15      	subs	r2, #21
 8011952:	f022 0203 	bic.w	r2, r2, #3
 8011956:	3204      	adds	r2, #4
 8011958:	f104 0115 	add.w	r1, r4, #21
 801195c:	428f      	cmp	r7, r1
 801195e:	bf38      	it	cc
 8011960:	2204      	movcc	r2, #4
 8011962:	9201      	str	r2, [sp, #4]
 8011964:	9a02      	ldr	r2, [sp, #8]
 8011966:	9303      	str	r3, [sp, #12]
 8011968:	429a      	cmp	r2, r3
 801196a:	d80c      	bhi.n	8011986 <__multiply+0x9e>
 801196c:	2e00      	cmp	r6, #0
 801196e:	dd03      	ble.n	8011978 <__multiply+0x90>
 8011970:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011974:	2b00      	cmp	r3, #0
 8011976:	d05a      	beq.n	8011a2e <__multiply+0x146>
 8011978:	6106      	str	r6, [r0, #16]
 801197a:	b005      	add	sp, #20
 801197c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011980:	f843 2b04 	str.w	r2, [r3], #4
 8011984:	e7d8      	b.n	8011938 <__multiply+0x50>
 8011986:	f8b3 a000 	ldrh.w	sl, [r3]
 801198a:	f1ba 0f00 	cmp.w	sl, #0
 801198e:	d024      	beq.n	80119da <__multiply+0xf2>
 8011990:	f104 0e14 	add.w	lr, r4, #20
 8011994:	46a9      	mov	r9, r5
 8011996:	f04f 0c00 	mov.w	ip, #0
 801199a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801199e:	f8d9 1000 	ldr.w	r1, [r9]
 80119a2:	fa1f fb82 	uxth.w	fp, r2
 80119a6:	b289      	uxth	r1, r1
 80119a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80119ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80119b0:	f8d9 2000 	ldr.w	r2, [r9]
 80119b4:	4461      	add	r1, ip
 80119b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80119ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80119be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80119c2:	b289      	uxth	r1, r1
 80119c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80119c8:	4577      	cmp	r7, lr
 80119ca:	f849 1b04 	str.w	r1, [r9], #4
 80119ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80119d2:	d8e2      	bhi.n	801199a <__multiply+0xb2>
 80119d4:	9a01      	ldr	r2, [sp, #4]
 80119d6:	f845 c002 	str.w	ip, [r5, r2]
 80119da:	9a03      	ldr	r2, [sp, #12]
 80119dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80119e0:	3304      	adds	r3, #4
 80119e2:	f1b9 0f00 	cmp.w	r9, #0
 80119e6:	d020      	beq.n	8011a2a <__multiply+0x142>
 80119e8:	6829      	ldr	r1, [r5, #0]
 80119ea:	f104 0c14 	add.w	ip, r4, #20
 80119ee:	46ae      	mov	lr, r5
 80119f0:	f04f 0a00 	mov.w	sl, #0
 80119f4:	f8bc b000 	ldrh.w	fp, [ip]
 80119f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80119fc:	fb09 220b 	mla	r2, r9, fp, r2
 8011a00:	4492      	add	sl, r2
 8011a02:	b289      	uxth	r1, r1
 8011a04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011a08:	f84e 1b04 	str.w	r1, [lr], #4
 8011a0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011a10:	f8be 1000 	ldrh.w	r1, [lr]
 8011a14:	0c12      	lsrs	r2, r2, #16
 8011a16:	fb09 1102 	mla	r1, r9, r2, r1
 8011a1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011a1e:	4567      	cmp	r7, ip
 8011a20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a24:	d8e6      	bhi.n	80119f4 <__multiply+0x10c>
 8011a26:	9a01      	ldr	r2, [sp, #4]
 8011a28:	50a9      	str	r1, [r5, r2]
 8011a2a:	3504      	adds	r5, #4
 8011a2c:	e79a      	b.n	8011964 <__multiply+0x7c>
 8011a2e:	3e01      	subs	r6, #1
 8011a30:	e79c      	b.n	801196c <__multiply+0x84>
 8011a32:	bf00      	nop
 8011a34:	0802d775 	.word	0x0802d775
 8011a38:	0802d7f2 	.word	0x0802d7f2

08011a3c <__pow5mult>:
 8011a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a40:	4615      	mov	r5, r2
 8011a42:	f012 0203 	ands.w	r2, r2, #3
 8011a46:	4606      	mov	r6, r0
 8011a48:	460f      	mov	r7, r1
 8011a4a:	d007      	beq.n	8011a5c <__pow5mult+0x20>
 8011a4c:	4c25      	ldr	r4, [pc, #148]	; (8011ae4 <__pow5mult+0xa8>)
 8011a4e:	3a01      	subs	r2, #1
 8011a50:	2300      	movs	r3, #0
 8011a52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a56:	f7ff fe9b 	bl	8011790 <__multadd>
 8011a5a:	4607      	mov	r7, r0
 8011a5c:	10ad      	asrs	r5, r5, #2
 8011a5e:	d03d      	beq.n	8011adc <__pow5mult+0xa0>
 8011a60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011a62:	b97c      	cbnz	r4, 8011a84 <__pow5mult+0x48>
 8011a64:	2010      	movs	r0, #16
 8011a66:	f7fd fd0b 	bl	800f480 <malloc>
 8011a6a:	4602      	mov	r2, r0
 8011a6c:	6270      	str	r0, [r6, #36]	; 0x24
 8011a6e:	b928      	cbnz	r0, 8011a7c <__pow5mult+0x40>
 8011a70:	4b1d      	ldr	r3, [pc, #116]	; (8011ae8 <__pow5mult+0xac>)
 8011a72:	481e      	ldr	r0, [pc, #120]	; (8011aec <__pow5mult+0xb0>)
 8011a74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011a78:	f7fd fca8 	bl	800f3cc <__assert_func>
 8011a7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a80:	6004      	str	r4, [r0, #0]
 8011a82:	60c4      	str	r4, [r0, #12]
 8011a84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011a88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a8c:	b94c      	cbnz	r4, 8011aa2 <__pow5mult+0x66>
 8011a8e:	f240 2171 	movw	r1, #625	; 0x271
 8011a92:	4630      	mov	r0, r6
 8011a94:	f7ff ff12 	bl	80118bc <__i2b>
 8011a98:	2300      	movs	r3, #0
 8011a9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	6003      	str	r3, [r0, #0]
 8011aa2:	f04f 0900 	mov.w	r9, #0
 8011aa6:	07eb      	lsls	r3, r5, #31
 8011aa8:	d50a      	bpl.n	8011ac0 <__pow5mult+0x84>
 8011aaa:	4639      	mov	r1, r7
 8011aac:	4622      	mov	r2, r4
 8011aae:	4630      	mov	r0, r6
 8011ab0:	f7ff ff1a 	bl	80118e8 <__multiply>
 8011ab4:	4639      	mov	r1, r7
 8011ab6:	4680      	mov	r8, r0
 8011ab8:	4630      	mov	r0, r6
 8011aba:	f7ff fe47 	bl	801174c <_Bfree>
 8011abe:	4647      	mov	r7, r8
 8011ac0:	106d      	asrs	r5, r5, #1
 8011ac2:	d00b      	beq.n	8011adc <__pow5mult+0xa0>
 8011ac4:	6820      	ldr	r0, [r4, #0]
 8011ac6:	b938      	cbnz	r0, 8011ad8 <__pow5mult+0x9c>
 8011ac8:	4622      	mov	r2, r4
 8011aca:	4621      	mov	r1, r4
 8011acc:	4630      	mov	r0, r6
 8011ace:	f7ff ff0b 	bl	80118e8 <__multiply>
 8011ad2:	6020      	str	r0, [r4, #0]
 8011ad4:	f8c0 9000 	str.w	r9, [r0]
 8011ad8:	4604      	mov	r4, r0
 8011ada:	e7e4      	b.n	8011aa6 <__pow5mult+0x6a>
 8011adc:	4638      	mov	r0, r7
 8011ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ae2:	bf00      	nop
 8011ae4:	0802d940 	.word	0x0802d940
 8011ae8:	0802d703 	.word	0x0802d703
 8011aec:	0802d7f2 	.word	0x0802d7f2

08011af0 <__lshift>:
 8011af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011af4:	460c      	mov	r4, r1
 8011af6:	6849      	ldr	r1, [r1, #4]
 8011af8:	6923      	ldr	r3, [r4, #16]
 8011afa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011afe:	68a3      	ldr	r3, [r4, #8]
 8011b00:	4607      	mov	r7, r0
 8011b02:	4691      	mov	r9, r2
 8011b04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b08:	f108 0601 	add.w	r6, r8, #1
 8011b0c:	42b3      	cmp	r3, r6
 8011b0e:	db0b      	blt.n	8011b28 <__lshift+0x38>
 8011b10:	4638      	mov	r0, r7
 8011b12:	f7ff fddb 	bl	80116cc <_Balloc>
 8011b16:	4605      	mov	r5, r0
 8011b18:	b948      	cbnz	r0, 8011b2e <__lshift+0x3e>
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	4b2a      	ldr	r3, [pc, #168]	; (8011bc8 <__lshift+0xd8>)
 8011b1e:	482b      	ldr	r0, [pc, #172]	; (8011bcc <__lshift+0xdc>)
 8011b20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011b24:	f7fd fc52 	bl	800f3cc <__assert_func>
 8011b28:	3101      	adds	r1, #1
 8011b2a:	005b      	lsls	r3, r3, #1
 8011b2c:	e7ee      	b.n	8011b0c <__lshift+0x1c>
 8011b2e:	2300      	movs	r3, #0
 8011b30:	f100 0114 	add.w	r1, r0, #20
 8011b34:	f100 0210 	add.w	r2, r0, #16
 8011b38:	4618      	mov	r0, r3
 8011b3a:	4553      	cmp	r3, sl
 8011b3c:	db37      	blt.n	8011bae <__lshift+0xbe>
 8011b3e:	6920      	ldr	r0, [r4, #16]
 8011b40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b44:	f104 0314 	add.w	r3, r4, #20
 8011b48:	f019 091f 	ands.w	r9, r9, #31
 8011b4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011b54:	d02f      	beq.n	8011bb6 <__lshift+0xc6>
 8011b56:	f1c9 0e20 	rsb	lr, r9, #32
 8011b5a:	468a      	mov	sl, r1
 8011b5c:	f04f 0c00 	mov.w	ip, #0
 8011b60:	681a      	ldr	r2, [r3, #0]
 8011b62:	fa02 f209 	lsl.w	r2, r2, r9
 8011b66:	ea42 020c 	orr.w	r2, r2, ip
 8011b6a:	f84a 2b04 	str.w	r2, [sl], #4
 8011b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b72:	4298      	cmp	r0, r3
 8011b74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011b78:	d8f2      	bhi.n	8011b60 <__lshift+0x70>
 8011b7a:	1b03      	subs	r3, r0, r4
 8011b7c:	3b15      	subs	r3, #21
 8011b7e:	f023 0303 	bic.w	r3, r3, #3
 8011b82:	3304      	adds	r3, #4
 8011b84:	f104 0215 	add.w	r2, r4, #21
 8011b88:	4290      	cmp	r0, r2
 8011b8a:	bf38      	it	cc
 8011b8c:	2304      	movcc	r3, #4
 8011b8e:	f841 c003 	str.w	ip, [r1, r3]
 8011b92:	f1bc 0f00 	cmp.w	ip, #0
 8011b96:	d001      	beq.n	8011b9c <__lshift+0xac>
 8011b98:	f108 0602 	add.w	r6, r8, #2
 8011b9c:	3e01      	subs	r6, #1
 8011b9e:	4638      	mov	r0, r7
 8011ba0:	612e      	str	r6, [r5, #16]
 8011ba2:	4621      	mov	r1, r4
 8011ba4:	f7ff fdd2 	bl	801174c <_Bfree>
 8011ba8:	4628      	mov	r0, r5
 8011baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bae:	f842 0f04 	str.w	r0, [r2, #4]!
 8011bb2:	3301      	adds	r3, #1
 8011bb4:	e7c1      	b.n	8011b3a <__lshift+0x4a>
 8011bb6:	3904      	subs	r1, #4
 8011bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8011bc0:	4298      	cmp	r0, r3
 8011bc2:	d8f9      	bhi.n	8011bb8 <__lshift+0xc8>
 8011bc4:	e7ea      	b.n	8011b9c <__lshift+0xac>
 8011bc6:	bf00      	nop
 8011bc8:	0802d775 	.word	0x0802d775
 8011bcc:	0802d7f2 	.word	0x0802d7f2

08011bd0 <__mcmp>:
 8011bd0:	b530      	push	{r4, r5, lr}
 8011bd2:	6902      	ldr	r2, [r0, #16]
 8011bd4:	690c      	ldr	r4, [r1, #16]
 8011bd6:	1b12      	subs	r2, r2, r4
 8011bd8:	d10e      	bne.n	8011bf8 <__mcmp+0x28>
 8011bda:	f100 0314 	add.w	r3, r0, #20
 8011bde:	3114      	adds	r1, #20
 8011be0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011be4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011be8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011bec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011bf0:	42a5      	cmp	r5, r4
 8011bf2:	d003      	beq.n	8011bfc <__mcmp+0x2c>
 8011bf4:	d305      	bcc.n	8011c02 <__mcmp+0x32>
 8011bf6:	2201      	movs	r2, #1
 8011bf8:	4610      	mov	r0, r2
 8011bfa:	bd30      	pop	{r4, r5, pc}
 8011bfc:	4283      	cmp	r3, r0
 8011bfe:	d3f3      	bcc.n	8011be8 <__mcmp+0x18>
 8011c00:	e7fa      	b.n	8011bf8 <__mcmp+0x28>
 8011c02:	f04f 32ff 	mov.w	r2, #4294967295
 8011c06:	e7f7      	b.n	8011bf8 <__mcmp+0x28>

08011c08 <__mdiff>:
 8011c08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c0c:	460c      	mov	r4, r1
 8011c0e:	4606      	mov	r6, r0
 8011c10:	4611      	mov	r1, r2
 8011c12:	4620      	mov	r0, r4
 8011c14:	4690      	mov	r8, r2
 8011c16:	f7ff ffdb 	bl	8011bd0 <__mcmp>
 8011c1a:	1e05      	subs	r5, r0, #0
 8011c1c:	d110      	bne.n	8011c40 <__mdiff+0x38>
 8011c1e:	4629      	mov	r1, r5
 8011c20:	4630      	mov	r0, r6
 8011c22:	f7ff fd53 	bl	80116cc <_Balloc>
 8011c26:	b930      	cbnz	r0, 8011c36 <__mdiff+0x2e>
 8011c28:	4b3a      	ldr	r3, [pc, #232]	; (8011d14 <__mdiff+0x10c>)
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	f240 2132 	movw	r1, #562	; 0x232
 8011c30:	4839      	ldr	r0, [pc, #228]	; (8011d18 <__mdiff+0x110>)
 8011c32:	f7fd fbcb 	bl	800f3cc <__assert_func>
 8011c36:	2301      	movs	r3, #1
 8011c38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c40:	bfa4      	itt	ge
 8011c42:	4643      	movge	r3, r8
 8011c44:	46a0      	movge	r8, r4
 8011c46:	4630      	mov	r0, r6
 8011c48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011c4c:	bfa6      	itte	ge
 8011c4e:	461c      	movge	r4, r3
 8011c50:	2500      	movge	r5, #0
 8011c52:	2501      	movlt	r5, #1
 8011c54:	f7ff fd3a 	bl	80116cc <_Balloc>
 8011c58:	b920      	cbnz	r0, 8011c64 <__mdiff+0x5c>
 8011c5a:	4b2e      	ldr	r3, [pc, #184]	; (8011d14 <__mdiff+0x10c>)
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011c62:	e7e5      	b.n	8011c30 <__mdiff+0x28>
 8011c64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011c68:	6926      	ldr	r6, [r4, #16]
 8011c6a:	60c5      	str	r5, [r0, #12]
 8011c6c:	f104 0914 	add.w	r9, r4, #20
 8011c70:	f108 0514 	add.w	r5, r8, #20
 8011c74:	f100 0e14 	add.w	lr, r0, #20
 8011c78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011c7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011c80:	f108 0210 	add.w	r2, r8, #16
 8011c84:	46f2      	mov	sl, lr
 8011c86:	2100      	movs	r1, #0
 8011c88:	f859 3b04 	ldr.w	r3, [r9], #4
 8011c8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011c90:	fa1f f883 	uxth.w	r8, r3
 8011c94:	fa11 f18b 	uxtah	r1, r1, fp
 8011c98:	0c1b      	lsrs	r3, r3, #16
 8011c9a:	eba1 0808 	sub.w	r8, r1, r8
 8011c9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011ca2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011ca6:	fa1f f888 	uxth.w	r8, r8
 8011caa:	1419      	asrs	r1, r3, #16
 8011cac:	454e      	cmp	r6, r9
 8011cae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011cb2:	f84a 3b04 	str.w	r3, [sl], #4
 8011cb6:	d8e7      	bhi.n	8011c88 <__mdiff+0x80>
 8011cb8:	1b33      	subs	r3, r6, r4
 8011cba:	3b15      	subs	r3, #21
 8011cbc:	f023 0303 	bic.w	r3, r3, #3
 8011cc0:	3304      	adds	r3, #4
 8011cc2:	3415      	adds	r4, #21
 8011cc4:	42a6      	cmp	r6, r4
 8011cc6:	bf38      	it	cc
 8011cc8:	2304      	movcc	r3, #4
 8011cca:	441d      	add	r5, r3
 8011ccc:	4473      	add	r3, lr
 8011cce:	469e      	mov	lr, r3
 8011cd0:	462e      	mov	r6, r5
 8011cd2:	4566      	cmp	r6, ip
 8011cd4:	d30e      	bcc.n	8011cf4 <__mdiff+0xec>
 8011cd6:	f10c 0203 	add.w	r2, ip, #3
 8011cda:	1b52      	subs	r2, r2, r5
 8011cdc:	f022 0203 	bic.w	r2, r2, #3
 8011ce0:	3d03      	subs	r5, #3
 8011ce2:	45ac      	cmp	ip, r5
 8011ce4:	bf38      	it	cc
 8011ce6:	2200      	movcc	r2, #0
 8011ce8:	441a      	add	r2, r3
 8011cea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011cee:	b17b      	cbz	r3, 8011d10 <__mdiff+0x108>
 8011cf0:	6107      	str	r7, [r0, #16]
 8011cf2:	e7a3      	b.n	8011c3c <__mdiff+0x34>
 8011cf4:	f856 8b04 	ldr.w	r8, [r6], #4
 8011cf8:	fa11 f288 	uxtah	r2, r1, r8
 8011cfc:	1414      	asrs	r4, r2, #16
 8011cfe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011d02:	b292      	uxth	r2, r2
 8011d04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011d08:	f84e 2b04 	str.w	r2, [lr], #4
 8011d0c:	1421      	asrs	r1, r4, #16
 8011d0e:	e7e0      	b.n	8011cd2 <__mdiff+0xca>
 8011d10:	3f01      	subs	r7, #1
 8011d12:	e7ea      	b.n	8011cea <__mdiff+0xe2>
 8011d14:	0802d775 	.word	0x0802d775
 8011d18:	0802d7f2 	.word	0x0802d7f2

08011d1c <__d2b>:
 8011d1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d20:	4689      	mov	r9, r1
 8011d22:	2101      	movs	r1, #1
 8011d24:	ec57 6b10 	vmov	r6, r7, d0
 8011d28:	4690      	mov	r8, r2
 8011d2a:	f7ff fccf 	bl	80116cc <_Balloc>
 8011d2e:	4604      	mov	r4, r0
 8011d30:	b930      	cbnz	r0, 8011d40 <__d2b+0x24>
 8011d32:	4602      	mov	r2, r0
 8011d34:	4b25      	ldr	r3, [pc, #148]	; (8011dcc <__d2b+0xb0>)
 8011d36:	4826      	ldr	r0, [pc, #152]	; (8011dd0 <__d2b+0xb4>)
 8011d38:	f240 310a 	movw	r1, #778	; 0x30a
 8011d3c:	f7fd fb46 	bl	800f3cc <__assert_func>
 8011d40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011d44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011d48:	bb35      	cbnz	r5, 8011d98 <__d2b+0x7c>
 8011d4a:	2e00      	cmp	r6, #0
 8011d4c:	9301      	str	r3, [sp, #4]
 8011d4e:	d028      	beq.n	8011da2 <__d2b+0x86>
 8011d50:	4668      	mov	r0, sp
 8011d52:	9600      	str	r6, [sp, #0]
 8011d54:	f7ff fd82 	bl	801185c <__lo0bits>
 8011d58:	9900      	ldr	r1, [sp, #0]
 8011d5a:	b300      	cbz	r0, 8011d9e <__d2b+0x82>
 8011d5c:	9a01      	ldr	r2, [sp, #4]
 8011d5e:	f1c0 0320 	rsb	r3, r0, #32
 8011d62:	fa02 f303 	lsl.w	r3, r2, r3
 8011d66:	430b      	orrs	r3, r1
 8011d68:	40c2      	lsrs	r2, r0
 8011d6a:	6163      	str	r3, [r4, #20]
 8011d6c:	9201      	str	r2, [sp, #4]
 8011d6e:	9b01      	ldr	r3, [sp, #4]
 8011d70:	61a3      	str	r3, [r4, #24]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	bf14      	ite	ne
 8011d76:	2202      	movne	r2, #2
 8011d78:	2201      	moveq	r2, #1
 8011d7a:	6122      	str	r2, [r4, #16]
 8011d7c:	b1d5      	cbz	r5, 8011db4 <__d2b+0x98>
 8011d7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011d82:	4405      	add	r5, r0
 8011d84:	f8c9 5000 	str.w	r5, [r9]
 8011d88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011d8c:	f8c8 0000 	str.w	r0, [r8]
 8011d90:	4620      	mov	r0, r4
 8011d92:	b003      	add	sp, #12
 8011d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d9c:	e7d5      	b.n	8011d4a <__d2b+0x2e>
 8011d9e:	6161      	str	r1, [r4, #20]
 8011da0:	e7e5      	b.n	8011d6e <__d2b+0x52>
 8011da2:	a801      	add	r0, sp, #4
 8011da4:	f7ff fd5a 	bl	801185c <__lo0bits>
 8011da8:	9b01      	ldr	r3, [sp, #4]
 8011daa:	6163      	str	r3, [r4, #20]
 8011dac:	2201      	movs	r2, #1
 8011dae:	6122      	str	r2, [r4, #16]
 8011db0:	3020      	adds	r0, #32
 8011db2:	e7e3      	b.n	8011d7c <__d2b+0x60>
 8011db4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011db8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011dbc:	f8c9 0000 	str.w	r0, [r9]
 8011dc0:	6918      	ldr	r0, [r3, #16]
 8011dc2:	f7ff fd2b 	bl	801181c <__hi0bits>
 8011dc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011dca:	e7df      	b.n	8011d8c <__d2b+0x70>
 8011dcc:	0802d775 	.word	0x0802d775
 8011dd0:	0802d7f2 	.word	0x0802d7f2

08011dd4 <_calloc_r>:
 8011dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011dd6:	fba1 2402 	umull	r2, r4, r1, r2
 8011dda:	b94c      	cbnz	r4, 8011df0 <_calloc_r+0x1c>
 8011ddc:	4611      	mov	r1, r2
 8011dde:	9201      	str	r2, [sp, #4]
 8011de0:	f7fd fbe0 	bl	800f5a4 <_malloc_r>
 8011de4:	9a01      	ldr	r2, [sp, #4]
 8011de6:	4605      	mov	r5, r0
 8011de8:	b930      	cbnz	r0, 8011df8 <_calloc_r+0x24>
 8011dea:	4628      	mov	r0, r5
 8011dec:	b003      	add	sp, #12
 8011dee:	bd30      	pop	{r4, r5, pc}
 8011df0:	220c      	movs	r2, #12
 8011df2:	6002      	str	r2, [r0, #0]
 8011df4:	2500      	movs	r5, #0
 8011df6:	e7f8      	b.n	8011dea <_calloc_r+0x16>
 8011df8:	4621      	mov	r1, r4
 8011dfa:	f7fd fb5f 	bl	800f4bc <memset>
 8011dfe:	e7f4      	b.n	8011dea <_calloc_r+0x16>

08011e00 <_realloc_r>:
 8011e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e04:	4680      	mov	r8, r0
 8011e06:	4614      	mov	r4, r2
 8011e08:	460e      	mov	r6, r1
 8011e0a:	b921      	cbnz	r1, 8011e16 <_realloc_r+0x16>
 8011e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e10:	4611      	mov	r1, r2
 8011e12:	f7fd bbc7 	b.w	800f5a4 <_malloc_r>
 8011e16:	b92a      	cbnz	r2, 8011e24 <_realloc_r+0x24>
 8011e18:	f7fd fb58 	bl	800f4cc <_free_r>
 8011e1c:	4625      	mov	r5, r4
 8011e1e:	4628      	mov	r0, r5
 8011e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e24:	f000 f9fc 	bl	8012220 <_malloc_usable_size_r>
 8011e28:	4284      	cmp	r4, r0
 8011e2a:	4607      	mov	r7, r0
 8011e2c:	d802      	bhi.n	8011e34 <_realloc_r+0x34>
 8011e2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011e32:	d812      	bhi.n	8011e5a <_realloc_r+0x5a>
 8011e34:	4621      	mov	r1, r4
 8011e36:	4640      	mov	r0, r8
 8011e38:	f7fd fbb4 	bl	800f5a4 <_malloc_r>
 8011e3c:	4605      	mov	r5, r0
 8011e3e:	2800      	cmp	r0, #0
 8011e40:	d0ed      	beq.n	8011e1e <_realloc_r+0x1e>
 8011e42:	42bc      	cmp	r4, r7
 8011e44:	4622      	mov	r2, r4
 8011e46:	4631      	mov	r1, r6
 8011e48:	bf28      	it	cs
 8011e4a:	463a      	movcs	r2, r7
 8011e4c:	f7fd fb28 	bl	800f4a0 <memcpy>
 8011e50:	4631      	mov	r1, r6
 8011e52:	4640      	mov	r0, r8
 8011e54:	f7fd fb3a 	bl	800f4cc <_free_r>
 8011e58:	e7e1      	b.n	8011e1e <_realloc_r+0x1e>
 8011e5a:	4635      	mov	r5, r6
 8011e5c:	e7df      	b.n	8011e1e <_realloc_r+0x1e>

08011e5e <__ssputs_r>:
 8011e5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e62:	688e      	ldr	r6, [r1, #8]
 8011e64:	429e      	cmp	r6, r3
 8011e66:	4682      	mov	sl, r0
 8011e68:	460c      	mov	r4, r1
 8011e6a:	4690      	mov	r8, r2
 8011e6c:	461f      	mov	r7, r3
 8011e6e:	d838      	bhi.n	8011ee2 <__ssputs_r+0x84>
 8011e70:	898a      	ldrh	r2, [r1, #12]
 8011e72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e76:	d032      	beq.n	8011ede <__ssputs_r+0x80>
 8011e78:	6825      	ldr	r5, [r4, #0]
 8011e7a:	6909      	ldr	r1, [r1, #16]
 8011e7c:	eba5 0901 	sub.w	r9, r5, r1
 8011e80:	6965      	ldr	r5, [r4, #20]
 8011e82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	444b      	add	r3, r9
 8011e8e:	106d      	asrs	r5, r5, #1
 8011e90:	429d      	cmp	r5, r3
 8011e92:	bf38      	it	cc
 8011e94:	461d      	movcc	r5, r3
 8011e96:	0553      	lsls	r3, r2, #21
 8011e98:	d531      	bpl.n	8011efe <__ssputs_r+0xa0>
 8011e9a:	4629      	mov	r1, r5
 8011e9c:	f7fd fb82 	bl	800f5a4 <_malloc_r>
 8011ea0:	4606      	mov	r6, r0
 8011ea2:	b950      	cbnz	r0, 8011eba <__ssputs_r+0x5c>
 8011ea4:	230c      	movs	r3, #12
 8011ea6:	f8ca 3000 	str.w	r3, [sl]
 8011eaa:	89a3      	ldrh	r3, [r4, #12]
 8011eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eb0:	81a3      	strh	r3, [r4, #12]
 8011eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8011eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eba:	6921      	ldr	r1, [r4, #16]
 8011ebc:	464a      	mov	r2, r9
 8011ebe:	f7fd faef 	bl	800f4a0 <memcpy>
 8011ec2:	89a3      	ldrh	r3, [r4, #12]
 8011ec4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ecc:	81a3      	strh	r3, [r4, #12]
 8011ece:	6126      	str	r6, [r4, #16]
 8011ed0:	6165      	str	r5, [r4, #20]
 8011ed2:	444e      	add	r6, r9
 8011ed4:	eba5 0509 	sub.w	r5, r5, r9
 8011ed8:	6026      	str	r6, [r4, #0]
 8011eda:	60a5      	str	r5, [r4, #8]
 8011edc:	463e      	mov	r6, r7
 8011ede:	42be      	cmp	r6, r7
 8011ee0:	d900      	bls.n	8011ee4 <__ssputs_r+0x86>
 8011ee2:	463e      	mov	r6, r7
 8011ee4:	6820      	ldr	r0, [r4, #0]
 8011ee6:	4632      	mov	r2, r6
 8011ee8:	4641      	mov	r1, r8
 8011eea:	f7ff fbc9 	bl	8011680 <memmove>
 8011eee:	68a3      	ldr	r3, [r4, #8]
 8011ef0:	1b9b      	subs	r3, r3, r6
 8011ef2:	60a3      	str	r3, [r4, #8]
 8011ef4:	6823      	ldr	r3, [r4, #0]
 8011ef6:	4433      	add	r3, r6
 8011ef8:	6023      	str	r3, [r4, #0]
 8011efa:	2000      	movs	r0, #0
 8011efc:	e7db      	b.n	8011eb6 <__ssputs_r+0x58>
 8011efe:	462a      	mov	r2, r5
 8011f00:	f7ff ff7e 	bl	8011e00 <_realloc_r>
 8011f04:	4606      	mov	r6, r0
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d1e1      	bne.n	8011ece <__ssputs_r+0x70>
 8011f0a:	6921      	ldr	r1, [r4, #16]
 8011f0c:	4650      	mov	r0, sl
 8011f0e:	f7fd fadd 	bl	800f4cc <_free_r>
 8011f12:	e7c7      	b.n	8011ea4 <__ssputs_r+0x46>

08011f14 <_svfiprintf_r>:
 8011f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f18:	4698      	mov	r8, r3
 8011f1a:	898b      	ldrh	r3, [r1, #12]
 8011f1c:	061b      	lsls	r3, r3, #24
 8011f1e:	b09d      	sub	sp, #116	; 0x74
 8011f20:	4607      	mov	r7, r0
 8011f22:	460d      	mov	r5, r1
 8011f24:	4614      	mov	r4, r2
 8011f26:	d50e      	bpl.n	8011f46 <_svfiprintf_r+0x32>
 8011f28:	690b      	ldr	r3, [r1, #16]
 8011f2a:	b963      	cbnz	r3, 8011f46 <_svfiprintf_r+0x32>
 8011f2c:	2140      	movs	r1, #64	; 0x40
 8011f2e:	f7fd fb39 	bl	800f5a4 <_malloc_r>
 8011f32:	6028      	str	r0, [r5, #0]
 8011f34:	6128      	str	r0, [r5, #16]
 8011f36:	b920      	cbnz	r0, 8011f42 <_svfiprintf_r+0x2e>
 8011f38:	230c      	movs	r3, #12
 8011f3a:	603b      	str	r3, [r7, #0]
 8011f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f40:	e0d1      	b.n	80120e6 <_svfiprintf_r+0x1d2>
 8011f42:	2340      	movs	r3, #64	; 0x40
 8011f44:	616b      	str	r3, [r5, #20]
 8011f46:	2300      	movs	r3, #0
 8011f48:	9309      	str	r3, [sp, #36]	; 0x24
 8011f4a:	2320      	movs	r3, #32
 8011f4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f54:	2330      	movs	r3, #48	; 0x30
 8011f56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012100 <_svfiprintf_r+0x1ec>
 8011f5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f5e:	f04f 0901 	mov.w	r9, #1
 8011f62:	4623      	mov	r3, r4
 8011f64:	469a      	mov	sl, r3
 8011f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f6a:	b10a      	cbz	r2, 8011f70 <_svfiprintf_r+0x5c>
 8011f6c:	2a25      	cmp	r2, #37	; 0x25
 8011f6e:	d1f9      	bne.n	8011f64 <_svfiprintf_r+0x50>
 8011f70:	ebba 0b04 	subs.w	fp, sl, r4
 8011f74:	d00b      	beq.n	8011f8e <_svfiprintf_r+0x7a>
 8011f76:	465b      	mov	r3, fp
 8011f78:	4622      	mov	r2, r4
 8011f7a:	4629      	mov	r1, r5
 8011f7c:	4638      	mov	r0, r7
 8011f7e:	f7ff ff6e 	bl	8011e5e <__ssputs_r>
 8011f82:	3001      	adds	r0, #1
 8011f84:	f000 80aa 	beq.w	80120dc <_svfiprintf_r+0x1c8>
 8011f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f8a:	445a      	add	r2, fp
 8011f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8011f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	f000 80a2 	beq.w	80120dc <_svfiprintf_r+0x1c8>
 8011f98:	2300      	movs	r3, #0
 8011f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fa2:	f10a 0a01 	add.w	sl, sl, #1
 8011fa6:	9304      	str	r3, [sp, #16]
 8011fa8:	9307      	str	r3, [sp, #28]
 8011faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fae:	931a      	str	r3, [sp, #104]	; 0x68
 8011fb0:	4654      	mov	r4, sl
 8011fb2:	2205      	movs	r2, #5
 8011fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fb8:	4851      	ldr	r0, [pc, #324]	; (8012100 <_svfiprintf_r+0x1ec>)
 8011fba:	f7ee f921 	bl	8000200 <memchr>
 8011fbe:	9a04      	ldr	r2, [sp, #16]
 8011fc0:	b9d8      	cbnz	r0, 8011ffa <_svfiprintf_r+0xe6>
 8011fc2:	06d0      	lsls	r0, r2, #27
 8011fc4:	bf44      	itt	mi
 8011fc6:	2320      	movmi	r3, #32
 8011fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fcc:	0711      	lsls	r1, r2, #28
 8011fce:	bf44      	itt	mi
 8011fd0:	232b      	movmi	r3, #43	; 0x2b
 8011fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8011fda:	2b2a      	cmp	r3, #42	; 0x2a
 8011fdc:	d015      	beq.n	801200a <_svfiprintf_r+0xf6>
 8011fde:	9a07      	ldr	r2, [sp, #28]
 8011fe0:	4654      	mov	r4, sl
 8011fe2:	2000      	movs	r0, #0
 8011fe4:	f04f 0c0a 	mov.w	ip, #10
 8011fe8:	4621      	mov	r1, r4
 8011fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fee:	3b30      	subs	r3, #48	; 0x30
 8011ff0:	2b09      	cmp	r3, #9
 8011ff2:	d94e      	bls.n	8012092 <_svfiprintf_r+0x17e>
 8011ff4:	b1b0      	cbz	r0, 8012024 <_svfiprintf_r+0x110>
 8011ff6:	9207      	str	r2, [sp, #28]
 8011ff8:	e014      	b.n	8012024 <_svfiprintf_r+0x110>
 8011ffa:	eba0 0308 	sub.w	r3, r0, r8
 8011ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8012002:	4313      	orrs	r3, r2
 8012004:	9304      	str	r3, [sp, #16]
 8012006:	46a2      	mov	sl, r4
 8012008:	e7d2      	b.n	8011fb0 <_svfiprintf_r+0x9c>
 801200a:	9b03      	ldr	r3, [sp, #12]
 801200c:	1d19      	adds	r1, r3, #4
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	9103      	str	r1, [sp, #12]
 8012012:	2b00      	cmp	r3, #0
 8012014:	bfbb      	ittet	lt
 8012016:	425b      	neglt	r3, r3
 8012018:	f042 0202 	orrlt.w	r2, r2, #2
 801201c:	9307      	strge	r3, [sp, #28]
 801201e:	9307      	strlt	r3, [sp, #28]
 8012020:	bfb8      	it	lt
 8012022:	9204      	strlt	r2, [sp, #16]
 8012024:	7823      	ldrb	r3, [r4, #0]
 8012026:	2b2e      	cmp	r3, #46	; 0x2e
 8012028:	d10c      	bne.n	8012044 <_svfiprintf_r+0x130>
 801202a:	7863      	ldrb	r3, [r4, #1]
 801202c:	2b2a      	cmp	r3, #42	; 0x2a
 801202e:	d135      	bne.n	801209c <_svfiprintf_r+0x188>
 8012030:	9b03      	ldr	r3, [sp, #12]
 8012032:	1d1a      	adds	r2, r3, #4
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	9203      	str	r2, [sp, #12]
 8012038:	2b00      	cmp	r3, #0
 801203a:	bfb8      	it	lt
 801203c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012040:	3402      	adds	r4, #2
 8012042:	9305      	str	r3, [sp, #20]
 8012044:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012110 <_svfiprintf_r+0x1fc>
 8012048:	7821      	ldrb	r1, [r4, #0]
 801204a:	2203      	movs	r2, #3
 801204c:	4650      	mov	r0, sl
 801204e:	f7ee f8d7 	bl	8000200 <memchr>
 8012052:	b140      	cbz	r0, 8012066 <_svfiprintf_r+0x152>
 8012054:	2340      	movs	r3, #64	; 0x40
 8012056:	eba0 000a 	sub.w	r0, r0, sl
 801205a:	fa03 f000 	lsl.w	r0, r3, r0
 801205e:	9b04      	ldr	r3, [sp, #16]
 8012060:	4303      	orrs	r3, r0
 8012062:	3401      	adds	r4, #1
 8012064:	9304      	str	r3, [sp, #16]
 8012066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801206a:	4826      	ldr	r0, [pc, #152]	; (8012104 <_svfiprintf_r+0x1f0>)
 801206c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012070:	2206      	movs	r2, #6
 8012072:	f7ee f8c5 	bl	8000200 <memchr>
 8012076:	2800      	cmp	r0, #0
 8012078:	d038      	beq.n	80120ec <_svfiprintf_r+0x1d8>
 801207a:	4b23      	ldr	r3, [pc, #140]	; (8012108 <_svfiprintf_r+0x1f4>)
 801207c:	bb1b      	cbnz	r3, 80120c6 <_svfiprintf_r+0x1b2>
 801207e:	9b03      	ldr	r3, [sp, #12]
 8012080:	3307      	adds	r3, #7
 8012082:	f023 0307 	bic.w	r3, r3, #7
 8012086:	3308      	adds	r3, #8
 8012088:	9303      	str	r3, [sp, #12]
 801208a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801208c:	4433      	add	r3, r6
 801208e:	9309      	str	r3, [sp, #36]	; 0x24
 8012090:	e767      	b.n	8011f62 <_svfiprintf_r+0x4e>
 8012092:	fb0c 3202 	mla	r2, ip, r2, r3
 8012096:	460c      	mov	r4, r1
 8012098:	2001      	movs	r0, #1
 801209a:	e7a5      	b.n	8011fe8 <_svfiprintf_r+0xd4>
 801209c:	2300      	movs	r3, #0
 801209e:	3401      	adds	r4, #1
 80120a0:	9305      	str	r3, [sp, #20]
 80120a2:	4619      	mov	r1, r3
 80120a4:	f04f 0c0a 	mov.w	ip, #10
 80120a8:	4620      	mov	r0, r4
 80120aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120ae:	3a30      	subs	r2, #48	; 0x30
 80120b0:	2a09      	cmp	r2, #9
 80120b2:	d903      	bls.n	80120bc <_svfiprintf_r+0x1a8>
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d0c5      	beq.n	8012044 <_svfiprintf_r+0x130>
 80120b8:	9105      	str	r1, [sp, #20]
 80120ba:	e7c3      	b.n	8012044 <_svfiprintf_r+0x130>
 80120bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80120c0:	4604      	mov	r4, r0
 80120c2:	2301      	movs	r3, #1
 80120c4:	e7f0      	b.n	80120a8 <_svfiprintf_r+0x194>
 80120c6:	ab03      	add	r3, sp, #12
 80120c8:	9300      	str	r3, [sp, #0]
 80120ca:	462a      	mov	r2, r5
 80120cc:	4b0f      	ldr	r3, [pc, #60]	; (801210c <_svfiprintf_r+0x1f8>)
 80120ce:	a904      	add	r1, sp, #16
 80120d0:	4638      	mov	r0, r7
 80120d2:	f7fd fcd5 	bl	800fa80 <_printf_float>
 80120d6:	1c42      	adds	r2, r0, #1
 80120d8:	4606      	mov	r6, r0
 80120da:	d1d6      	bne.n	801208a <_svfiprintf_r+0x176>
 80120dc:	89ab      	ldrh	r3, [r5, #12]
 80120de:	065b      	lsls	r3, r3, #25
 80120e0:	f53f af2c 	bmi.w	8011f3c <_svfiprintf_r+0x28>
 80120e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120e6:	b01d      	add	sp, #116	; 0x74
 80120e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ec:	ab03      	add	r3, sp, #12
 80120ee:	9300      	str	r3, [sp, #0]
 80120f0:	462a      	mov	r2, r5
 80120f2:	4b06      	ldr	r3, [pc, #24]	; (801210c <_svfiprintf_r+0x1f8>)
 80120f4:	a904      	add	r1, sp, #16
 80120f6:	4638      	mov	r0, r7
 80120f8:	f7fd ff66 	bl	800ffc8 <_printf_i>
 80120fc:	e7eb      	b.n	80120d6 <_svfiprintf_r+0x1c2>
 80120fe:	bf00      	nop
 8012100:	0802d5b0 	.word	0x0802d5b0
 8012104:	0802d5ba 	.word	0x0802d5ba
 8012108:	0800fa81 	.word	0x0800fa81
 801210c:	08011e5f 	.word	0x08011e5f
 8012110:	0802d5b6 	.word	0x0802d5b6

08012114 <_read_r>:
 8012114:	b538      	push	{r3, r4, r5, lr}
 8012116:	4d07      	ldr	r5, [pc, #28]	; (8012134 <_read_r+0x20>)
 8012118:	4604      	mov	r4, r0
 801211a:	4608      	mov	r0, r1
 801211c:	4611      	mov	r1, r2
 801211e:	2200      	movs	r2, #0
 8012120:	602a      	str	r2, [r5, #0]
 8012122:	461a      	mov	r2, r3
 8012124:	f7f2 fb8e 	bl	8004844 <_read>
 8012128:	1c43      	adds	r3, r0, #1
 801212a:	d102      	bne.n	8012132 <_read_r+0x1e>
 801212c:	682b      	ldr	r3, [r5, #0]
 801212e:	b103      	cbz	r3, 8012132 <_read_r+0x1e>
 8012130:	6023      	str	r3, [r4, #0]
 8012132:	bd38      	pop	{r3, r4, r5, pc}
 8012134:	20005b9c 	.word	0x20005b9c

08012138 <_raise_r>:
 8012138:	291f      	cmp	r1, #31
 801213a:	b538      	push	{r3, r4, r5, lr}
 801213c:	4604      	mov	r4, r0
 801213e:	460d      	mov	r5, r1
 8012140:	d904      	bls.n	801214c <_raise_r+0x14>
 8012142:	2316      	movs	r3, #22
 8012144:	6003      	str	r3, [r0, #0]
 8012146:	f04f 30ff 	mov.w	r0, #4294967295
 801214a:	bd38      	pop	{r3, r4, r5, pc}
 801214c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801214e:	b112      	cbz	r2, 8012156 <_raise_r+0x1e>
 8012150:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012154:	b94b      	cbnz	r3, 801216a <_raise_r+0x32>
 8012156:	4620      	mov	r0, r4
 8012158:	f000 f830 	bl	80121bc <_getpid_r>
 801215c:	462a      	mov	r2, r5
 801215e:	4601      	mov	r1, r0
 8012160:	4620      	mov	r0, r4
 8012162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012166:	f000 b817 	b.w	8012198 <_kill_r>
 801216a:	2b01      	cmp	r3, #1
 801216c:	d00a      	beq.n	8012184 <_raise_r+0x4c>
 801216e:	1c59      	adds	r1, r3, #1
 8012170:	d103      	bne.n	801217a <_raise_r+0x42>
 8012172:	2316      	movs	r3, #22
 8012174:	6003      	str	r3, [r0, #0]
 8012176:	2001      	movs	r0, #1
 8012178:	e7e7      	b.n	801214a <_raise_r+0x12>
 801217a:	2400      	movs	r4, #0
 801217c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012180:	4628      	mov	r0, r5
 8012182:	4798      	blx	r3
 8012184:	2000      	movs	r0, #0
 8012186:	e7e0      	b.n	801214a <_raise_r+0x12>

08012188 <raise>:
 8012188:	4b02      	ldr	r3, [pc, #8]	; (8012194 <raise+0xc>)
 801218a:	4601      	mov	r1, r0
 801218c:	6818      	ldr	r0, [r3, #0]
 801218e:	f7ff bfd3 	b.w	8012138 <_raise_r>
 8012192:	bf00      	nop
 8012194:	200000d4 	.word	0x200000d4

08012198 <_kill_r>:
 8012198:	b538      	push	{r3, r4, r5, lr}
 801219a:	4d07      	ldr	r5, [pc, #28]	; (80121b8 <_kill_r+0x20>)
 801219c:	2300      	movs	r3, #0
 801219e:	4604      	mov	r4, r0
 80121a0:	4608      	mov	r0, r1
 80121a2:	4611      	mov	r1, r2
 80121a4:	602b      	str	r3, [r5, #0]
 80121a6:	f7f2 fb33 	bl	8004810 <_kill>
 80121aa:	1c43      	adds	r3, r0, #1
 80121ac:	d102      	bne.n	80121b4 <_kill_r+0x1c>
 80121ae:	682b      	ldr	r3, [r5, #0]
 80121b0:	b103      	cbz	r3, 80121b4 <_kill_r+0x1c>
 80121b2:	6023      	str	r3, [r4, #0]
 80121b4:	bd38      	pop	{r3, r4, r5, pc}
 80121b6:	bf00      	nop
 80121b8:	20005b9c 	.word	0x20005b9c

080121bc <_getpid_r>:
 80121bc:	f7f2 bb20 	b.w	8004800 <_getpid>

080121c0 <__ascii_wctomb>:
 80121c0:	b149      	cbz	r1, 80121d6 <__ascii_wctomb+0x16>
 80121c2:	2aff      	cmp	r2, #255	; 0xff
 80121c4:	bf85      	ittet	hi
 80121c6:	238a      	movhi	r3, #138	; 0x8a
 80121c8:	6003      	strhi	r3, [r0, #0]
 80121ca:	700a      	strbls	r2, [r1, #0]
 80121cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80121d0:	bf98      	it	ls
 80121d2:	2001      	movls	r0, #1
 80121d4:	4770      	bx	lr
 80121d6:	4608      	mov	r0, r1
 80121d8:	4770      	bx	lr
	...

080121dc <_fstat_r>:
 80121dc:	b538      	push	{r3, r4, r5, lr}
 80121de:	4d07      	ldr	r5, [pc, #28]	; (80121fc <_fstat_r+0x20>)
 80121e0:	2300      	movs	r3, #0
 80121e2:	4604      	mov	r4, r0
 80121e4:	4608      	mov	r0, r1
 80121e6:	4611      	mov	r1, r2
 80121e8:	602b      	str	r3, [r5, #0]
 80121ea:	f7f2 fb70 	bl	80048ce <_fstat>
 80121ee:	1c43      	adds	r3, r0, #1
 80121f0:	d102      	bne.n	80121f8 <_fstat_r+0x1c>
 80121f2:	682b      	ldr	r3, [r5, #0]
 80121f4:	b103      	cbz	r3, 80121f8 <_fstat_r+0x1c>
 80121f6:	6023      	str	r3, [r4, #0]
 80121f8:	bd38      	pop	{r3, r4, r5, pc}
 80121fa:	bf00      	nop
 80121fc:	20005b9c 	.word	0x20005b9c

08012200 <_isatty_r>:
 8012200:	b538      	push	{r3, r4, r5, lr}
 8012202:	4d06      	ldr	r5, [pc, #24]	; (801221c <_isatty_r+0x1c>)
 8012204:	2300      	movs	r3, #0
 8012206:	4604      	mov	r4, r0
 8012208:	4608      	mov	r0, r1
 801220a:	602b      	str	r3, [r5, #0]
 801220c:	f7f2 fb6f 	bl	80048ee <_isatty>
 8012210:	1c43      	adds	r3, r0, #1
 8012212:	d102      	bne.n	801221a <_isatty_r+0x1a>
 8012214:	682b      	ldr	r3, [r5, #0]
 8012216:	b103      	cbz	r3, 801221a <_isatty_r+0x1a>
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	bd38      	pop	{r3, r4, r5, pc}
 801221c:	20005b9c 	.word	0x20005b9c

08012220 <_malloc_usable_size_r>:
 8012220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012224:	1f18      	subs	r0, r3, #4
 8012226:	2b00      	cmp	r3, #0
 8012228:	bfbc      	itt	lt
 801222a:	580b      	ldrlt	r3, [r1, r0]
 801222c:	18c0      	addlt	r0, r0, r3
 801222e:	4770      	bx	lr

08012230 <pow>:
 8012230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012232:	ed2d 8b02 	vpush	{d8}
 8012236:	eeb0 8a40 	vmov.f32	s16, s0
 801223a:	eef0 8a60 	vmov.f32	s17, s1
 801223e:	ec55 4b11 	vmov	r4, r5, d1
 8012242:	f000 f891 	bl	8012368 <__ieee754_pow>
 8012246:	4622      	mov	r2, r4
 8012248:	462b      	mov	r3, r5
 801224a:	4620      	mov	r0, r4
 801224c:	4629      	mov	r1, r5
 801224e:	ec57 6b10 	vmov	r6, r7, d0
 8012252:	f7ee fc7b 	bl	8000b4c <__aeabi_dcmpun>
 8012256:	2800      	cmp	r0, #0
 8012258:	d13b      	bne.n	80122d2 <pow+0xa2>
 801225a:	ec51 0b18 	vmov	r0, r1, d8
 801225e:	2200      	movs	r2, #0
 8012260:	2300      	movs	r3, #0
 8012262:	f7ee fc41 	bl	8000ae8 <__aeabi_dcmpeq>
 8012266:	b1b8      	cbz	r0, 8012298 <pow+0x68>
 8012268:	2200      	movs	r2, #0
 801226a:	2300      	movs	r3, #0
 801226c:	4620      	mov	r0, r4
 801226e:	4629      	mov	r1, r5
 8012270:	f7ee fc3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8012274:	2800      	cmp	r0, #0
 8012276:	d146      	bne.n	8012306 <pow+0xd6>
 8012278:	ec45 4b10 	vmov	d0, r4, r5
 801227c:	f000 fe8d 	bl	8012f9a <finite>
 8012280:	b338      	cbz	r0, 80122d2 <pow+0xa2>
 8012282:	2200      	movs	r2, #0
 8012284:	2300      	movs	r3, #0
 8012286:	4620      	mov	r0, r4
 8012288:	4629      	mov	r1, r5
 801228a:	f7ee fc37 	bl	8000afc <__aeabi_dcmplt>
 801228e:	b300      	cbz	r0, 80122d2 <pow+0xa2>
 8012290:	f7fd f8ba 	bl	800f408 <__errno>
 8012294:	2322      	movs	r3, #34	; 0x22
 8012296:	e01b      	b.n	80122d0 <pow+0xa0>
 8012298:	ec47 6b10 	vmov	d0, r6, r7
 801229c:	f000 fe7d 	bl	8012f9a <finite>
 80122a0:	b9e0      	cbnz	r0, 80122dc <pow+0xac>
 80122a2:	eeb0 0a48 	vmov.f32	s0, s16
 80122a6:	eef0 0a68 	vmov.f32	s1, s17
 80122aa:	f000 fe76 	bl	8012f9a <finite>
 80122ae:	b1a8      	cbz	r0, 80122dc <pow+0xac>
 80122b0:	ec45 4b10 	vmov	d0, r4, r5
 80122b4:	f000 fe71 	bl	8012f9a <finite>
 80122b8:	b180      	cbz	r0, 80122dc <pow+0xac>
 80122ba:	4632      	mov	r2, r6
 80122bc:	463b      	mov	r3, r7
 80122be:	4630      	mov	r0, r6
 80122c0:	4639      	mov	r1, r7
 80122c2:	f7ee fc43 	bl	8000b4c <__aeabi_dcmpun>
 80122c6:	2800      	cmp	r0, #0
 80122c8:	d0e2      	beq.n	8012290 <pow+0x60>
 80122ca:	f7fd f89d 	bl	800f408 <__errno>
 80122ce:	2321      	movs	r3, #33	; 0x21
 80122d0:	6003      	str	r3, [r0, #0]
 80122d2:	ecbd 8b02 	vpop	{d8}
 80122d6:	ec47 6b10 	vmov	d0, r6, r7
 80122da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122dc:	2200      	movs	r2, #0
 80122de:	2300      	movs	r3, #0
 80122e0:	4630      	mov	r0, r6
 80122e2:	4639      	mov	r1, r7
 80122e4:	f7ee fc00 	bl	8000ae8 <__aeabi_dcmpeq>
 80122e8:	2800      	cmp	r0, #0
 80122ea:	d0f2      	beq.n	80122d2 <pow+0xa2>
 80122ec:	eeb0 0a48 	vmov.f32	s0, s16
 80122f0:	eef0 0a68 	vmov.f32	s1, s17
 80122f4:	f000 fe51 	bl	8012f9a <finite>
 80122f8:	2800      	cmp	r0, #0
 80122fa:	d0ea      	beq.n	80122d2 <pow+0xa2>
 80122fc:	ec45 4b10 	vmov	d0, r4, r5
 8012300:	f000 fe4b 	bl	8012f9a <finite>
 8012304:	e7c3      	b.n	801228e <pow+0x5e>
 8012306:	4f01      	ldr	r7, [pc, #4]	; (801230c <pow+0xdc>)
 8012308:	2600      	movs	r6, #0
 801230a:	e7e2      	b.n	80122d2 <pow+0xa2>
 801230c:	3ff00000 	.word	0x3ff00000

08012310 <sqrt>:
 8012310:	b538      	push	{r3, r4, r5, lr}
 8012312:	ed2d 8b02 	vpush	{d8}
 8012316:	ec55 4b10 	vmov	r4, r5, d0
 801231a:	f000 fd53 	bl	8012dc4 <__ieee754_sqrt>
 801231e:	4622      	mov	r2, r4
 8012320:	462b      	mov	r3, r5
 8012322:	4620      	mov	r0, r4
 8012324:	4629      	mov	r1, r5
 8012326:	eeb0 8a40 	vmov.f32	s16, s0
 801232a:	eef0 8a60 	vmov.f32	s17, s1
 801232e:	f7ee fc0d 	bl	8000b4c <__aeabi_dcmpun>
 8012332:	b990      	cbnz	r0, 801235a <sqrt+0x4a>
 8012334:	2200      	movs	r2, #0
 8012336:	2300      	movs	r3, #0
 8012338:	4620      	mov	r0, r4
 801233a:	4629      	mov	r1, r5
 801233c:	f7ee fbde 	bl	8000afc <__aeabi_dcmplt>
 8012340:	b158      	cbz	r0, 801235a <sqrt+0x4a>
 8012342:	f7fd f861 	bl	800f408 <__errno>
 8012346:	2321      	movs	r3, #33	; 0x21
 8012348:	6003      	str	r3, [r0, #0]
 801234a:	2200      	movs	r2, #0
 801234c:	2300      	movs	r3, #0
 801234e:	4610      	mov	r0, r2
 8012350:	4619      	mov	r1, r3
 8012352:	f7ee fa8b 	bl	800086c <__aeabi_ddiv>
 8012356:	ec41 0b18 	vmov	d8, r0, r1
 801235a:	eeb0 0a48 	vmov.f32	s0, s16
 801235e:	eef0 0a68 	vmov.f32	s1, s17
 8012362:	ecbd 8b02 	vpop	{d8}
 8012366:	bd38      	pop	{r3, r4, r5, pc}

08012368 <__ieee754_pow>:
 8012368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801236c:	ed2d 8b06 	vpush	{d8-d10}
 8012370:	b089      	sub	sp, #36	; 0x24
 8012372:	ed8d 1b00 	vstr	d1, [sp]
 8012376:	e9dd 2900 	ldrd	r2, r9, [sp]
 801237a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801237e:	ea58 0102 	orrs.w	r1, r8, r2
 8012382:	ec57 6b10 	vmov	r6, r7, d0
 8012386:	d115      	bne.n	80123b4 <__ieee754_pow+0x4c>
 8012388:	19b3      	adds	r3, r6, r6
 801238a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801238e:	4152      	adcs	r2, r2
 8012390:	4299      	cmp	r1, r3
 8012392:	4b89      	ldr	r3, [pc, #548]	; (80125b8 <__ieee754_pow+0x250>)
 8012394:	4193      	sbcs	r3, r2
 8012396:	f080 84d2 	bcs.w	8012d3e <__ieee754_pow+0x9d6>
 801239a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801239e:	4630      	mov	r0, r6
 80123a0:	4639      	mov	r1, r7
 80123a2:	f7ed ff83 	bl	80002ac <__adddf3>
 80123a6:	ec41 0b10 	vmov	d0, r0, r1
 80123aa:	b009      	add	sp, #36	; 0x24
 80123ac:	ecbd 8b06 	vpop	{d8-d10}
 80123b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b4:	4b81      	ldr	r3, [pc, #516]	; (80125bc <__ieee754_pow+0x254>)
 80123b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80123ba:	429c      	cmp	r4, r3
 80123bc:	ee10 aa10 	vmov	sl, s0
 80123c0:	463d      	mov	r5, r7
 80123c2:	dc06      	bgt.n	80123d2 <__ieee754_pow+0x6a>
 80123c4:	d101      	bne.n	80123ca <__ieee754_pow+0x62>
 80123c6:	2e00      	cmp	r6, #0
 80123c8:	d1e7      	bne.n	801239a <__ieee754_pow+0x32>
 80123ca:	4598      	cmp	r8, r3
 80123cc:	dc01      	bgt.n	80123d2 <__ieee754_pow+0x6a>
 80123ce:	d10f      	bne.n	80123f0 <__ieee754_pow+0x88>
 80123d0:	b172      	cbz	r2, 80123f0 <__ieee754_pow+0x88>
 80123d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80123d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80123da:	ea55 050a 	orrs.w	r5, r5, sl
 80123de:	d1dc      	bne.n	801239a <__ieee754_pow+0x32>
 80123e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80123e4:	18db      	adds	r3, r3, r3
 80123e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80123ea:	4152      	adcs	r2, r2
 80123ec:	429d      	cmp	r5, r3
 80123ee:	e7d0      	b.n	8012392 <__ieee754_pow+0x2a>
 80123f0:	2d00      	cmp	r5, #0
 80123f2:	da3b      	bge.n	801246c <__ieee754_pow+0x104>
 80123f4:	4b72      	ldr	r3, [pc, #456]	; (80125c0 <__ieee754_pow+0x258>)
 80123f6:	4598      	cmp	r8, r3
 80123f8:	dc51      	bgt.n	801249e <__ieee754_pow+0x136>
 80123fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80123fe:	4598      	cmp	r8, r3
 8012400:	f340 84ac 	ble.w	8012d5c <__ieee754_pow+0x9f4>
 8012404:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012408:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801240c:	2b14      	cmp	r3, #20
 801240e:	dd0f      	ble.n	8012430 <__ieee754_pow+0xc8>
 8012410:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012414:	fa22 f103 	lsr.w	r1, r2, r3
 8012418:	fa01 f303 	lsl.w	r3, r1, r3
 801241c:	4293      	cmp	r3, r2
 801241e:	f040 849d 	bne.w	8012d5c <__ieee754_pow+0x9f4>
 8012422:	f001 0101 	and.w	r1, r1, #1
 8012426:	f1c1 0302 	rsb	r3, r1, #2
 801242a:	9304      	str	r3, [sp, #16]
 801242c:	b182      	cbz	r2, 8012450 <__ieee754_pow+0xe8>
 801242e:	e05f      	b.n	80124f0 <__ieee754_pow+0x188>
 8012430:	2a00      	cmp	r2, #0
 8012432:	d15b      	bne.n	80124ec <__ieee754_pow+0x184>
 8012434:	f1c3 0314 	rsb	r3, r3, #20
 8012438:	fa48 f103 	asr.w	r1, r8, r3
 801243c:	fa01 f303 	lsl.w	r3, r1, r3
 8012440:	4543      	cmp	r3, r8
 8012442:	f040 8488 	bne.w	8012d56 <__ieee754_pow+0x9ee>
 8012446:	f001 0101 	and.w	r1, r1, #1
 801244a:	f1c1 0302 	rsb	r3, r1, #2
 801244e:	9304      	str	r3, [sp, #16]
 8012450:	4b5c      	ldr	r3, [pc, #368]	; (80125c4 <__ieee754_pow+0x25c>)
 8012452:	4598      	cmp	r8, r3
 8012454:	d132      	bne.n	80124bc <__ieee754_pow+0x154>
 8012456:	f1b9 0f00 	cmp.w	r9, #0
 801245a:	f280 8478 	bge.w	8012d4e <__ieee754_pow+0x9e6>
 801245e:	4959      	ldr	r1, [pc, #356]	; (80125c4 <__ieee754_pow+0x25c>)
 8012460:	4632      	mov	r2, r6
 8012462:	463b      	mov	r3, r7
 8012464:	2000      	movs	r0, #0
 8012466:	f7ee fa01 	bl	800086c <__aeabi_ddiv>
 801246a:	e79c      	b.n	80123a6 <__ieee754_pow+0x3e>
 801246c:	2300      	movs	r3, #0
 801246e:	9304      	str	r3, [sp, #16]
 8012470:	2a00      	cmp	r2, #0
 8012472:	d13d      	bne.n	80124f0 <__ieee754_pow+0x188>
 8012474:	4b51      	ldr	r3, [pc, #324]	; (80125bc <__ieee754_pow+0x254>)
 8012476:	4598      	cmp	r8, r3
 8012478:	d1ea      	bne.n	8012450 <__ieee754_pow+0xe8>
 801247a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801247e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012482:	ea53 030a 	orrs.w	r3, r3, sl
 8012486:	f000 845a 	beq.w	8012d3e <__ieee754_pow+0x9d6>
 801248a:	4b4f      	ldr	r3, [pc, #316]	; (80125c8 <__ieee754_pow+0x260>)
 801248c:	429c      	cmp	r4, r3
 801248e:	dd08      	ble.n	80124a2 <__ieee754_pow+0x13a>
 8012490:	f1b9 0f00 	cmp.w	r9, #0
 8012494:	f2c0 8457 	blt.w	8012d46 <__ieee754_pow+0x9de>
 8012498:	e9dd 0100 	ldrd	r0, r1, [sp]
 801249c:	e783      	b.n	80123a6 <__ieee754_pow+0x3e>
 801249e:	2302      	movs	r3, #2
 80124a0:	e7e5      	b.n	801246e <__ieee754_pow+0x106>
 80124a2:	f1b9 0f00 	cmp.w	r9, #0
 80124a6:	f04f 0000 	mov.w	r0, #0
 80124aa:	f04f 0100 	mov.w	r1, #0
 80124ae:	f6bf af7a 	bge.w	80123a6 <__ieee754_pow+0x3e>
 80124b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80124b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80124ba:	e774      	b.n	80123a6 <__ieee754_pow+0x3e>
 80124bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80124c0:	d106      	bne.n	80124d0 <__ieee754_pow+0x168>
 80124c2:	4632      	mov	r2, r6
 80124c4:	463b      	mov	r3, r7
 80124c6:	4630      	mov	r0, r6
 80124c8:	4639      	mov	r1, r7
 80124ca:	f7ee f8a5 	bl	8000618 <__aeabi_dmul>
 80124ce:	e76a      	b.n	80123a6 <__ieee754_pow+0x3e>
 80124d0:	4b3e      	ldr	r3, [pc, #248]	; (80125cc <__ieee754_pow+0x264>)
 80124d2:	4599      	cmp	r9, r3
 80124d4:	d10c      	bne.n	80124f0 <__ieee754_pow+0x188>
 80124d6:	2d00      	cmp	r5, #0
 80124d8:	db0a      	blt.n	80124f0 <__ieee754_pow+0x188>
 80124da:	ec47 6b10 	vmov	d0, r6, r7
 80124de:	b009      	add	sp, #36	; 0x24
 80124e0:	ecbd 8b06 	vpop	{d8-d10}
 80124e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e8:	f000 bc6c 	b.w	8012dc4 <__ieee754_sqrt>
 80124ec:	2300      	movs	r3, #0
 80124ee:	9304      	str	r3, [sp, #16]
 80124f0:	ec47 6b10 	vmov	d0, r6, r7
 80124f4:	f000 fd48 	bl	8012f88 <fabs>
 80124f8:	ec51 0b10 	vmov	r0, r1, d0
 80124fc:	f1ba 0f00 	cmp.w	sl, #0
 8012500:	d129      	bne.n	8012556 <__ieee754_pow+0x1ee>
 8012502:	b124      	cbz	r4, 801250e <__ieee754_pow+0x1a6>
 8012504:	4b2f      	ldr	r3, [pc, #188]	; (80125c4 <__ieee754_pow+0x25c>)
 8012506:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801250a:	429a      	cmp	r2, r3
 801250c:	d123      	bne.n	8012556 <__ieee754_pow+0x1ee>
 801250e:	f1b9 0f00 	cmp.w	r9, #0
 8012512:	da05      	bge.n	8012520 <__ieee754_pow+0x1b8>
 8012514:	4602      	mov	r2, r0
 8012516:	460b      	mov	r3, r1
 8012518:	2000      	movs	r0, #0
 801251a:	492a      	ldr	r1, [pc, #168]	; (80125c4 <__ieee754_pow+0x25c>)
 801251c:	f7ee f9a6 	bl	800086c <__aeabi_ddiv>
 8012520:	2d00      	cmp	r5, #0
 8012522:	f6bf af40 	bge.w	80123a6 <__ieee754_pow+0x3e>
 8012526:	9b04      	ldr	r3, [sp, #16]
 8012528:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801252c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012530:	4323      	orrs	r3, r4
 8012532:	d108      	bne.n	8012546 <__ieee754_pow+0x1de>
 8012534:	4602      	mov	r2, r0
 8012536:	460b      	mov	r3, r1
 8012538:	4610      	mov	r0, r2
 801253a:	4619      	mov	r1, r3
 801253c:	f7ed feb4 	bl	80002a8 <__aeabi_dsub>
 8012540:	4602      	mov	r2, r0
 8012542:	460b      	mov	r3, r1
 8012544:	e78f      	b.n	8012466 <__ieee754_pow+0xfe>
 8012546:	9b04      	ldr	r3, [sp, #16]
 8012548:	2b01      	cmp	r3, #1
 801254a:	f47f af2c 	bne.w	80123a6 <__ieee754_pow+0x3e>
 801254e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012552:	4619      	mov	r1, r3
 8012554:	e727      	b.n	80123a6 <__ieee754_pow+0x3e>
 8012556:	0feb      	lsrs	r3, r5, #31
 8012558:	3b01      	subs	r3, #1
 801255a:	9306      	str	r3, [sp, #24]
 801255c:	9a06      	ldr	r2, [sp, #24]
 801255e:	9b04      	ldr	r3, [sp, #16]
 8012560:	4313      	orrs	r3, r2
 8012562:	d102      	bne.n	801256a <__ieee754_pow+0x202>
 8012564:	4632      	mov	r2, r6
 8012566:	463b      	mov	r3, r7
 8012568:	e7e6      	b.n	8012538 <__ieee754_pow+0x1d0>
 801256a:	4b19      	ldr	r3, [pc, #100]	; (80125d0 <__ieee754_pow+0x268>)
 801256c:	4598      	cmp	r8, r3
 801256e:	f340 80fb 	ble.w	8012768 <__ieee754_pow+0x400>
 8012572:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012576:	4598      	cmp	r8, r3
 8012578:	4b13      	ldr	r3, [pc, #76]	; (80125c8 <__ieee754_pow+0x260>)
 801257a:	dd0c      	ble.n	8012596 <__ieee754_pow+0x22e>
 801257c:	429c      	cmp	r4, r3
 801257e:	dc0f      	bgt.n	80125a0 <__ieee754_pow+0x238>
 8012580:	f1b9 0f00 	cmp.w	r9, #0
 8012584:	da0f      	bge.n	80125a6 <__ieee754_pow+0x23e>
 8012586:	2000      	movs	r0, #0
 8012588:	b009      	add	sp, #36	; 0x24
 801258a:	ecbd 8b06 	vpop	{d8-d10}
 801258e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012592:	f000 bcf0 	b.w	8012f76 <__math_oflow>
 8012596:	429c      	cmp	r4, r3
 8012598:	dbf2      	blt.n	8012580 <__ieee754_pow+0x218>
 801259a:	4b0a      	ldr	r3, [pc, #40]	; (80125c4 <__ieee754_pow+0x25c>)
 801259c:	429c      	cmp	r4, r3
 801259e:	dd19      	ble.n	80125d4 <__ieee754_pow+0x26c>
 80125a0:	f1b9 0f00 	cmp.w	r9, #0
 80125a4:	dcef      	bgt.n	8012586 <__ieee754_pow+0x21e>
 80125a6:	2000      	movs	r0, #0
 80125a8:	b009      	add	sp, #36	; 0x24
 80125aa:	ecbd 8b06 	vpop	{d8-d10}
 80125ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b2:	f000 bcd7 	b.w	8012f64 <__math_uflow>
 80125b6:	bf00      	nop
 80125b8:	fff00000 	.word	0xfff00000
 80125bc:	7ff00000 	.word	0x7ff00000
 80125c0:	433fffff 	.word	0x433fffff
 80125c4:	3ff00000 	.word	0x3ff00000
 80125c8:	3fefffff 	.word	0x3fefffff
 80125cc:	3fe00000 	.word	0x3fe00000
 80125d0:	41e00000 	.word	0x41e00000
 80125d4:	4b60      	ldr	r3, [pc, #384]	; (8012758 <__ieee754_pow+0x3f0>)
 80125d6:	2200      	movs	r2, #0
 80125d8:	f7ed fe66 	bl	80002a8 <__aeabi_dsub>
 80125dc:	a354      	add	r3, pc, #336	; (adr r3, 8012730 <__ieee754_pow+0x3c8>)
 80125de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e2:	4604      	mov	r4, r0
 80125e4:	460d      	mov	r5, r1
 80125e6:	f7ee f817 	bl	8000618 <__aeabi_dmul>
 80125ea:	a353      	add	r3, pc, #332	; (adr r3, 8012738 <__ieee754_pow+0x3d0>)
 80125ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f0:	4606      	mov	r6, r0
 80125f2:	460f      	mov	r7, r1
 80125f4:	4620      	mov	r0, r4
 80125f6:	4629      	mov	r1, r5
 80125f8:	f7ee f80e 	bl	8000618 <__aeabi_dmul>
 80125fc:	4b57      	ldr	r3, [pc, #348]	; (801275c <__ieee754_pow+0x3f4>)
 80125fe:	4682      	mov	sl, r0
 8012600:	468b      	mov	fp, r1
 8012602:	2200      	movs	r2, #0
 8012604:	4620      	mov	r0, r4
 8012606:	4629      	mov	r1, r5
 8012608:	f7ee f806 	bl	8000618 <__aeabi_dmul>
 801260c:	4602      	mov	r2, r0
 801260e:	460b      	mov	r3, r1
 8012610:	a14b      	add	r1, pc, #300	; (adr r1, 8012740 <__ieee754_pow+0x3d8>)
 8012612:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012616:	f7ed fe47 	bl	80002a8 <__aeabi_dsub>
 801261a:	4622      	mov	r2, r4
 801261c:	462b      	mov	r3, r5
 801261e:	f7ed fffb 	bl	8000618 <__aeabi_dmul>
 8012622:	4602      	mov	r2, r0
 8012624:	460b      	mov	r3, r1
 8012626:	2000      	movs	r0, #0
 8012628:	494d      	ldr	r1, [pc, #308]	; (8012760 <__ieee754_pow+0x3f8>)
 801262a:	f7ed fe3d 	bl	80002a8 <__aeabi_dsub>
 801262e:	4622      	mov	r2, r4
 8012630:	4680      	mov	r8, r0
 8012632:	4689      	mov	r9, r1
 8012634:	462b      	mov	r3, r5
 8012636:	4620      	mov	r0, r4
 8012638:	4629      	mov	r1, r5
 801263a:	f7ed ffed 	bl	8000618 <__aeabi_dmul>
 801263e:	4602      	mov	r2, r0
 8012640:	460b      	mov	r3, r1
 8012642:	4640      	mov	r0, r8
 8012644:	4649      	mov	r1, r9
 8012646:	f7ed ffe7 	bl	8000618 <__aeabi_dmul>
 801264a:	a33f      	add	r3, pc, #252	; (adr r3, 8012748 <__ieee754_pow+0x3e0>)
 801264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012650:	f7ed ffe2 	bl	8000618 <__aeabi_dmul>
 8012654:	4602      	mov	r2, r0
 8012656:	460b      	mov	r3, r1
 8012658:	4650      	mov	r0, sl
 801265a:	4659      	mov	r1, fp
 801265c:	f7ed fe24 	bl	80002a8 <__aeabi_dsub>
 8012660:	4602      	mov	r2, r0
 8012662:	460b      	mov	r3, r1
 8012664:	4680      	mov	r8, r0
 8012666:	4689      	mov	r9, r1
 8012668:	4630      	mov	r0, r6
 801266a:	4639      	mov	r1, r7
 801266c:	f7ed fe1e 	bl	80002ac <__adddf3>
 8012670:	2000      	movs	r0, #0
 8012672:	4632      	mov	r2, r6
 8012674:	463b      	mov	r3, r7
 8012676:	4604      	mov	r4, r0
 8012678:	460d      	mov	r5, r1
 801267a:	f7ed fe15 	bl	80002a8 <__aeabi_dsub>
 801267e:	4602      	mov	r2, r0
 8012680:	460b      	mov	r3, r1
 8012682:	4640      	mov	r0, r8
 8012684:	4649      	mov	r1, r9
 8012686:	f7ed fe0f 	bl	80002a8 <__aeabi_dsub>
 801268a:	9b04      	ldr	r3, [sp, #16]
 801268c:	9a06      	ldr	r2, [sp, #24]
 801268e:	3b01      	subs	r3, #1
 8012690:	4313      	orrs	r3, r2
 8012692:	4682      	mov	sl, r0
 8012694:	468b      	mov	fp, r1
 8012696:	f040 81e7 	bne.w	8012a68 <__ieee754_pow+0x700>
 801269a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012750 <__ieee754_pow+0x3e8>
 801269e:	eeb0 8a47 	vmov.f32	s16, s14
 80126a2:	eef0 8a67 	vmov.f32	s17, s15
 80126a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80126aa:	2600      	movs	r6, #0
 80126ac:	4632      	mov	r2, r6
 80126ae:	463b      	mov	r3, r7
 80126b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126b4:	f7ed fdf8 	bl	80002a8 <__aeabi_dsub>
 80126b8:	4622      	mov	r2, r4
 80126ba:	462b      	mov	r3, r5
 80126bc:	f7ed ffac 	bl	8000618 <__aeabi_dmul>
 80126c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126c4:	4680      	mov	r8, r0
 80126c6:	4689      	mov	r9, r1
 80126c8:	4650      	mov	r0, sl
 80126ca:	4659      	mov	r1, fp
 80126cc:	f7ed ffa4 	bl	8000618 <__aeabi_dmul>
 80126d0:	4602      	mov	r2, r0
 80126d2:	460b      	mov	r3, r1
 80126d4:	4640      	mov	r0, r8
 80126d6:	4649      	mov	r1, r9
 80126d8:	f7ed fde8 	bl	80002ac <__adddf3>
 80126dc:	4632      	mov	r2, r6
 80126de:	463b      	mov	r3, r7
 80126e0:	4680      	mov	r8, r0
 80126e2:	4689      	mov	r9, r1
 80126e4:	4620      	mov	r0, r4
 80126e6:	4629      	mov	r1, r5
 80126e8:	f7ed ff96 	bl	8000618 <__aeabi_dmul>
 80126ec:	460b      	mov	r3, r1
 80126ee:	4604      	mov	r4, r0
 80126f0:	460d      	mov	r5, r1
 80126f2:	4602      	mov	r2, r0
 80126f4:	4649      	mov	r1, r9
 80126f6:	4640      	mov	r0, r8
 80126f8:	f7ed fdd8 	bl	80002ac <__adddf3>
 80126fc:	4b19      	ldr	r3, [pc, #100]	; (8012764 <__ieee754_pow+0x3fc>)
 80126fe:	4299      	cmp	r1, r3
 8012700:	ec45 4b19 	vmov	d9, r4, r5
 8012704:	4606      	mov	r6, r0
 8012706:	460f      	mov	r7, r1
 8012708:	468b      	mov	fp, r1
 801270a:	f340 82f1 	ble.w	8012cf0 <__ieee754_pow+0x988>
 801270e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012712:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012716:	4303      	orrs	r3, r0
 8012718:	f000 81e4 	beq.w	8012ae4 <__ieee754_pow+0x77c>
 801271c:	ec51 0b18 	vmov	r0, r1, d8
 8012720:	2200      	movs	r2, #0
 8012722:	2300      	movs	r3, #0
 8012724:	f7ee f9ea 	bl	8000afc <__aeabi_dcmplt>
 8012728:	3800      	subs	r0, #0
 801272a:	bf18      	it	ne
 801272c:	2001      	movne	r0, #1
 801272e:	e72b      	b.n	8012588 <__ieee754_pow+0x220>
 8012730:	60000000 	.word	0x60000000
 8012734:	3ff71547 	.word	0x3ff71547
 8012738:	f85ddf44 	.word	0xf85ddf44
 801273c:	3e54ae0b 	.word	0x3e54ae0b
 8012740:	55555555 	.word	0x55555555
 8012744:	3fd55555 	.word	0x3fd55555
 8012748:	652b82fe 	.word	0x652b82fe
 801274c:	3ff71547 	.word	0x3ff71547
 8012750:	00000000 	.word	0x00000000
 8012754:	bff00000 	.word	0xbff00000
 8012758:	3ff00000 	.word	0x3ff00000
 801275c:	3fd00000 	.word	0x3fd00000
 8012760:	3fe00000 	.word	0x3fe00000
 8012764:	408fffff 	.word	0x408fffff
 8012768:	4bd5      	ldr	r3, [pc, #852]	; (8012ac0 <__ieee754_pow+0x758>)
 801276a:	402b      	ands	r3, r5
 801276c:	2200      	movs	r2, #0
 801276e:	b92b      	cbnz	r3, 801277c <__ieee754_pow+0x414>
 8012770:	4bd4      	ldr	r3, [pc, #848]	; (8012ac4 <__ieee754_pow+0x75c>)
 8012772:	f7ed ff51 	bl	8000618 <__aeabi_dmul>
 8012776:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801277a:	460c      	mov	r4, r1
 801277c:	1523      	asrs	r3, r4, #20
 801277e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012782:	4413      	add	r3, r2
 8012784:	9305      	str	r3, [sp, #20]
 8012786:	4bd0      	ldr	r3, [pc, #832]	; (8012ac8 <__ieee754_pow+0x760>)
 8012788:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801278c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012790:	429c      	cmp	r4, r3
 8012792:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012796:	dd08      	ble.n	80127aa <__ieee754_pow+0x442>
 8012798:	4bcc      	ldr	r3, [pc, #816]	; (8012acc <__ieee754_pow+0x764>)
 801279a:	429c      	cmp	r4, r3
 801279c:	f340 8162 	ble.w	8012a64 <__ieee754_pow+0x6fc>
 80127a0:	9b05      	ldr	r3, [sp, #20]
 80127a2:	3301      	adds	r3, #1
 80127a4:	9305      	str	r3, [sp, #20]
 80127a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80127aa:	2400      	movs	r4, #0
 80127ac:	00e3      	lsls	r3, r4, #3
 80127ae:	9307      	str	r3, [sp, #28]
 80127b0:	4bc7      	ldr	r3, [pc, #796]	; (8012ad0 <__ieee754_pow+0x768>)
 80127b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80127b6:	ed93 7b00 	vldr	d7, [r3]
 80127ba:	4629      	mov	r1, r5
 80127bc:	ec53 2b17 	vmov	r2, r3, d7
 80127c0:	eeb0 9a47 	vmov.f32	s18, s14
 80127c4:	eef0 9a67 	vmov.f32	s19, s15
 80127c8:	4682      	mov	sl, r0
 80127ca:	f7ed fd6d 	bl	80002a8 <__aeabi_dsub>
 80127ce:	4652      	mov	r2, sl
 80127d0:	4606      	mov	r6, r0
 80127d2:	460f      	mov	r7, r1
 80127d4:	462b      	mov	r3, r5
 80127d6:	ec51 0b19 	vmov	r0, r1, d9
 80127da:	f7ed fd67 	bl	80002ac <__adddf3>
 80127de:	4602      	mov	r2, r0
 80127e0:	460b      	mov	r3, r1
 80127e2:	2000      	movs	r0, #0
 80127e4:	49bb      	ldr	r1, [pc, #748]	; (8012ad4 <__ieee754_pow+0x76c>)
 80127e6:	f7ee f841 	bl	800086c <__aeabi_ddiv>
 80127ea:	ec41 0b1a 	vmov	d10, r0, r1
 80127ee:	4602      	mov	r2, r0
 80127f0:	460b      	mov	r3, r1
 80127f2:	4630      	mov	r0, r6
 80127f4:	4639      	mov	r1, r7
 80127f6:	f7ed ff0f 	bl	8000618 <__aeabi_dmul>
 80127fa:	2300      	movs	r3, #0
 80127fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012800:	9302      	str	r3, [sp, #8]
 8012802:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012806:	46ab      	mov	fp, r5
 8012808:	106d      	asrs	r5, r5, #1
 801280a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801280e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012812:	ec41 0b18 	vmov	d8, r0, r1
 8012816:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801281a:	2200      	movs	r2, #0
 801281c:	4640      	mov	r0, r8
 801281e:	4649      	mov	r1, r9
 8012820:	4614      	mov	r4, r2
 8012822:	461d      	mov	r5, r3
 8012824:	f7ed fef8 	bl	8000618 <__aeabi_dmul>
 8012828:	4602      	mov	r2, r0
 801282a:	460b      	mov	r3, r1
 801282c:	4630      	mov	r0, r6
 801282e:	4639      	mov	r1, r7
 8012830:	f7ed fd3a 	bl	80002a8 <__aeabi_dsub>
 8012834:	ec53 2b19 	vmov	r2, r3, d9
 8012838:	4606      	mov	r6, r0
 801283a:	460f      	mov	r7, r1
 801283c:	4620      	mov	r0, r4
 801283e:	4629      	mov	r1, r5
 8012840:	f7ed fd32 	bl	80002a8 <__aeabi_dsub>
 8012844:	4602      	mov	r2, r0
 8012846:	460b      	mov	r3, r1
 8012848:	4650      	mov	r0, sl
 801284a:	4659      	mov	r1, fp
 801284c:	f7ed fd2c 	bl	80002a8 <__aeabi_dsub>
 8012850:	4642      	mov	r2, r8
 8012852:	464b      	mov	r3, r9
 8012854:	f7ed fee0 	bl	8000618 <__aeabi_dmul>
 8012858:	4602      	mov	r2, r0
 801285a:	460b      	mov	r3, r1
 801285c:	4630      	mov	r0, r6
 801285e:	4639      	mov	r1, r7
 8012860:	f7ed fd22 	bl	80002a8 <__aeabi_dsub>
 8012864:	ec53 2b1a 	vmov	r2, r3, d10
 8012868:	f7ed fed6 	bl	8000618 <__aeabi_dmul>
 801286c:	ec53 2b18 	vmov	r2, r3, d8
 8012870:	ec41 0b19 	vmov	d9, r0, r1
 8012874:	ec51 0b18 	vmov	r0, r1, d8
 8012878:	f7ed fece 	bl	8000618 <__aeabi_dmul>
 801287c:	a37c      	add	r3, pc, #496	; (adr r3, 8012a70 <__ieee754_pow+0x708>)
 801287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012882:	4604      	mov	r4, r0
 8012884:	460d      	mov	r5, r1
 8012886:	f7ed fec7 	bl	8000618 <__aeabi_dmul>
 801288a:	a37b      	add	r3, pc, #492	; (adr r3, 8012a78 <__ieee754_pow+0x710>)
 801288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012890:	f7ed fd0c 	bl	80002ac <__adddf3>
 8012894:	4622      	mov	r2, r4
 8012896:	462b      	mov	r3, r5
 8012898:	f7ed febe 	bl	8000618 <__aeabi_dmul>
 801289c:	a378      	add	r3, pc, #480	; (adr r3, 8012a80 <__ieee754_pow+0x718>)
 801289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a2:	f7ed fd03 	bl	80002ac <__adddf3>
 80128a6:	4622      	mov	r2, r4
 80128a8:	462b      	mov	r3, r5
 80128aa:	f7ed feb5 	bl	8000618 <__aeabi_dmul>
 80128ae:	a376      	add	r3, pc, #472	; (adr r3, 8012a88 <__ieee754_pow+0x720>)
 80128b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b4:	f7ed fcfa 	bl	80002ac <__adddf3>
 80128b8:	4622      	mov	r2, r4
 80128ba:	462b      	mov	r3, r5
 80128bc:	f7ed feac 	bl	8000618 <__aeabi_dmul>
 80128c0:	a373      	add	r3, pc, #460	; (adr r3, 8012a90 <__ieee754_pow+0x728>)
 80128c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c6:	f7ed fcf1 	bl	80002ac <__adddf3>
 80128ca:	4622      	mov	r2, r4
 80128cc:	462b      	mov	r3, r5
 80128ce:	f7ed fea3 	bl	8000618 <__aeabi_dmul>
 80128d2:	a371      	add	r3, pc, #452	; (adr r3, 8012a98 <__ieee754_pow+0x730>)
 80128d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d8:	f7ed fce8 	bl	80002ac <__adddf3>
 80128dc:	4622      	mov	r2, r4
 80128de:	4606      	mov	r6, r0
 80128e0:	460f      	mov	r7, r1
 80128e2:	462b      	mov	r3, r5
 80128e4:	4620      	mov	r0, r4
 80128e6:	4629      	mov	r1, r5
 80128e8:	f7ed fe96 	bl	8000618 <__aeabi_dmul>
 80128ec:	4602      	mov	r2, r0
 80128ee:	460b      	mov	r3, r1
 80128f0:	4630      	mov	r0, r6
 80128f2:	4639      	mov	r1, r7
 80128f4:	f7ed fe90 	bl	8000618 <__aeabi_dmul>
 80128f8:	4642      	mov	r2, r8
 80128fa:	4604      	mov	r4, r0
 80128fc:	460d      	mov	r5, r1
 80128fe:	464b      	mov	r3, r9
 8012900:	ec51 0b18 	vmov	r0, r1, d8
 8012904:	f7ed fcd2 	bl	80002ac <__adddf3>
 8012908:	ec53 2b19 	vmov	r2, r3, d9
 801290c:	f7ed fe84 	bl	8000618 <__aeabi_dmul>
 8012910:	4622      	mov	r2, r4
 8012912:	462b      	mov	r3, r5
 8012914:	f7ed fcca 	bl	80002ac <__adddf3>
 8012918:	4642      	mov	r2, r8
 801291a:	4682      	mov	sl, r0
 801291c:	468b      	mov	fp, r1
 801291e:	464b      	mov	r3, r9
 8012920:	4640      	mov	r0, r8
 8012922:	4649      	mov	r1, r9
 8012924:	f7ed fe78 	bl	8000618 <__aeabi_dmul>
 8012928:	4b6b      	ldr	r3, [pc, #428]	; (8012ad8 <__ieee754_pow+0x770>)
 801292a:	2200      	movs	r2, #0
 801292c:	4606      	mov	r6, r0
 801292e:	460f      	mov	r7, r1
 8012930:	f7ed fcbc 	bl	80002ac <__adddf3>
 8012934:	4652      	mov	r2, sl
 8012936:	465b      	mov	r3, fp
 8012938:	f7ed fcb8 	bl	80002ac <__adddf3>
 801293c:	2000      	movs	r0, #0
 801293e:	4604      	mov	r4, r0
 8012940:	460d      	mov	r5, r1
 8012942:	4602      	mov	r2, r0
 8012944:	460b      	mov	r3, r1
 8012946:	4640      	mov	r0, r8
 8012948:	4649      	mov	r1, r9
 801294a:	f7ed fe65 	bl	8000618 <__aeabi_dmul>
 801294e:	4b62      	ldr	r3, [pc, #392]	; (8012ad8 <__ieee754_pow+0x770>)
 8012950:	4680      	mov	r8, r0
 8012952:	4689      	mov	r9, r1
 8012954:	2200      	movs	r2, #0
 8012956:	4620      	mov	r0, r4
 8012958:	4629      	mov	r1, r5
 801295a:	f7ed fca5 	bl	80002a8 <__aeabi_dsub>
 801295e:	4632      	mov	r2, r6
 8012960:	463b      	mov	r3, r7
 8012962:	f7ed fca1 	bl	80002a8 <__aeabi_dsub>
 8012966:	4602      	mov	r2, r0
 8012968:	460b      	mov	r3, r1
 801296a:	4650      	mov	r0, sl
 801296c:	4659      	mov	r1, fp
 801296e:	f7ed fc9b 	bl	80002a8 <__aeabi_dsub>
 8012972:	ec53 2b18 	vmov	r2, r3, d8
 8012976:	f7ed fe4f 	bl	8000618 <__aeabi_dmul>
 801297a:	4622      	mov	r2, r4
 801297c:	4606      	mov	r6, r0
 801297e:	460f      	mov	r7, r1
 8012980:	462b      	mov	r3, r5
 8012982:	ec51 0b19 	vmov	r0, r1, d9
 8012986:	f7ed fe47 	bl	8000618 <__aeabi_dmul>
 801298a:	4602      	mov	r2, r0
 801298c:	460b      	mov	r3, r1
 801298e:	4630      	mov	r0, r6
 8012990:	4639      	mov	r1, r7
 8012992:	f7ed fc8b 	bl	80002ac <__adddf3>
 8012996:	4606      	mov	r6, r0
 8012998:	460f      	mov	r7, r1
 801299a:	4602      	mov	r2, r0
 801299c:	460b      	mov	r3, r1
 801299e:	4640      	mov	r0, r8
 80129a0:	4649      	mov	r1, r9
 80129a2:	f7ed fc83 	bl	80002ac <__adddf3>
 80129a6:	a33e      	add	r3, pc, #248	; (adr r3, 8012aa0 <__ieee754_pow+0x738>)
 80129a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ac:	2000      	movs	r0, #0
 80129ae:	4604      	mov	r4, r0
 80129b0:	460d      	mov	r5, r1
 80129b2:	f7ed fe31 	bl	8000618 <__aeabi_dmul>
 80129b6:	4642      	mov	r2, r8
 80129b8:	ec41 0b18 	vmov	d8, r0, r1
 80129bc:	464b      	mov	r3, r9
 80129be:	4620      	mov	r0, r4
 80129c0:	4629      	mov	r1, r5
 80129c2:	f7ed fc71 	bl	80002a8 <__aeabi_dsub>
 80129c6:	4602      	mov	r2, r0
 80129c8:	460b      	mov	r3, r1
 80129ca:	4630      	mov	r0, r6
 80129cc:	4639      	mov	r1, r7
 80129ce:	f7ed fc6b 	bl	80002a8 <__aeabi_dsub>
 80129d2:	a335      	add	r3, pc, #212	; (adr r3, 8012aa8 <__ieee754_pow+0x740>)
 80129d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d8:	f7ed fe1e 	bl	8000618 <__aeabi_dmul>
 80129dc:	a334      	add	r3, pc, #208	; (adr r3, 8012ab0 <__ieee754_pow+0x748>)
 80129de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e2:	4606      	mov	r6, r0
 80129e4:	460f      	mov	r7, r1
 80129e6:	4620      	mov	r0, r4
 80129e8:	4629      	mov	r1, r5
 80129ea:	f7ed fe15 	bl	8000618 <__aeabi_dmul>
 80129ee:	4602      	mov	r2, r0
 80129f0:	460b      	mov	r3, r1
 80129f2:	4630      	mov	r0, r6
 80129f4:	4639      	mov	r1, r7
 80129f6:	f7ed fc59 	bl	80002ac <__adddf3>
 80129fa:	9a07      	ldr	r2, [sp, #28]
 80129fc:	4b37      	ldr	r3, [pc, #220]	; (8012adc <__ieee754_pow+0x774>)
 80129fe:	4413      	add	r3, r2
 8012a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a04:	f7ed fc52 	bl	80002ac <__adddf3>
 8012a08:	4682      	mov	sl, r0
 8012a0a:	9805      	ldr	r0, [sp, #20]
 8012a0c:	468b      	mov	fp, r1
 8012a0e:	f7ed fd99 	bl	8000544 <__aeabi_i2d>
 8012a12:	9a07      	ldr	r2, [sp, #28]
 8012a14:	4b32      	ldr	r3, [pc, #200]	; (8012ae0 <__ieee754_pow+0x778>)
 8012a16:	4413      	add	r3, r2
 8012a18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012a1c:	4606      	mov	r6, r0
 8012a1e:	460f      	mov	r7, r1
 8012a20:	4652      	mov	r2, sl
 8012a22:	465b      	mov	r3, fp
 8012a24:	ec51 0b18 	vmov	r0, r1, d8
 8012a28:	f7ed fc40 	bl	80002ac <__adddf3>
 8012a2c:	4642      	mov	r2, r8
 8012a2e:	464b      	mov	r3, r9
 8012a30:	f7ed fc3c 	bl	80002ac <__adddf3>
 8012a34:	4632      	mov	r2, r6
 8012a36:	463b      	mov	r3, r7
 8012a38:	f7ed fc38 	bl	80002ac <__adddf3>
 8012a3c:	2000      	movs	r0, #0
 8012a3e:	4632      	mov	r2, r6
 8012a40:	463b      	mov	r3, r7
 8012a42:	4604      	mov	r4, r0
 8012a44:	460d      	mov	r5, r1
 8012a46:	f7ed fc2f 	bl	80002a8 <__aeabi_dsub>
 8012a4a:	4642      	mov	r2, r8
 8012a4c:	464b      	mov	r3, r9
 8012a4e:	f7ed fc2b 	bl	80002a8 <__aeabi_dsub>
 8012a52:	ec53 2b18 	vmov	r2, r3, d8
 8012a56:	f7ed fc27 	bl	80002a8 <__aeabi_dsub>
 8012a5a:	4602      	mov	r2, r0
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	4650      	mov	r0, sl
 8012a60:	4659      	mov	r1, fp
 8012a62:	e610      	b.n	8012686 <__ieee754_pow+0x31e>
 8012a64:	2401      	movs	r4, #1
 8012a66:	e6a1      	b.n	80127ac <__ieee754_pow+0x444>
 8012a68:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012ab8 <__ieee754_pow+0x750>
 8012a6c:	e617      	b.n	801269e <__ieee754_pow+0x336>
 8012a6e:	bf00      	nop
 8012a70:	4a454eef 	.word	0x4a454eef
 8012a74:	3fca7e28 	.word	0x3fca7e28
 8012a78:	93c9db65 	.word	0x93c9db65
 8012a7c:	3fcd864a 	.word	0x3fcd864a
 8012a80:	a91d4101 	.word	0xa91d4101
 8012a84:	3fd17460 	.word	0x3fd17460
 8012a88:	518f264d 	.word	0x518f264d
 8012a8c:	3fd55555 	.word	0x3fd55555
 8012a90:	db6fabff 	.word	0xdb6fabff
 8012a94:	3fdb6db6 	.word	0x3fdb6db6
 8012a98:	33333303 	.word	0x33333303
 8012a9c:	3fe33333 	.word	0x3fe33333
 8012aa0:	e0000000 	.word	0xe0000000
 8012aa4:	3feec709 	.word	0x3feec709
 8012aa8:	dc3a03fd 	.word	0xdc3a03fd
 8012aac:	3feec709 	.word	0x3feec709
 8012ab0:	145b01f5 	.word	0x145b01f5
 8012ab4:	be3e2fe0 	.word	0xbe3e2fe0
 8012ab8:	00000000 	.word	0x00000000
 8012abc:	3ff00000 	.word	0x3ff00000
 8012ac0:	7ff00000 	.word	0x7ff00000
 8012ac4:	43400000 	.word	0x43400000
 8012ac8:	0003988e 	.word	0x0003988e
 8012acc:	000bb679 	.word	0x000bb679
 8012ad0:	0802d950 	.word	0x0802d950
 8012ad4:	3ff00000 	.word	0x3ff00000
 8012ad8:	40080000 	.word	0x40080000
 8012adc:	0802d970 	.word	0x0802d970
 8012ae0:	0802d960 	.word	0x0802d960
 8012ae4:	a3b5      	add	r3, pc, #724	; (adr r3, 8012dbc <__ieee754_pow+0xa54>)
 8012ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aea:	4640      	mov	r0, r8
 8012aec:	4649      	mov	r1, r9
 8012aee:	f7ed fbdd 	bl	80002ac <__adddf3>
 8012af2:	4622      	mov	r2, r4
 8012af4:	ec41 0b1a 	vmov	d10, r0, r1
 8012af8:	462b      	mov	r3, r5
 8012afa:	4630      	mov	r0, r6
 8012afc:	4639      	mov	r1, r7
 8012afe:	f7ed fbd3 	bl	80002a8 <__aeabi_dsub>
 8012b02:	4602      	mov	r2, r0
 8012b04:	460b      	mov	r3, r1
 8012b06:	ec51 0b1a 	vmov	r0, r1, d10
 8012b0a:	f7ee f815 	bl	8000b38 <__aeabi_dcmpgt>
 8012b0e:	2800      	cmp	r0, #0
 8012b10:	f47f ae04 	bne.w	801271c <__ieee754_pow+0x3b4>
 8012b14:	4aa4      	ldr	r2, [pc, #656]	; (8012da8 <__ieee754_pow+0xa40>)
 8012b16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	f340 8108 	ble.w	8012d30 <__ieee754_pow+0x9c8>
 8012b20:	151b      	asrs	r3, r3, #20
 8012b22:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012b26:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012b2a:	fa4a f303 	asr.w	r3, sl, r3
 8012b2e:	445b      	add	r3, fp
 8012b30:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012b34:	4e9d      	ldr	r6, [pc, #628]	; (8012dac <__ieee754_pow+0xa44>)
 8012b36:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012b3a:	4116      	asrs	r6, r2
 8012b3c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012b40:	2000      	movs	r0, #0
 8012b42:	ea23 0106 	bic.w	r1, r3, r6
 8012b46:	f1c2 0214 	rsb	r2, r2, #20
 8012b4a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012b4e:	fa4a fa02 	asr.w	sl, sl, r2
 8012b52:	f1bb 0f00 	cmp.w	fp, #0
 8012b56:	4602      	mov	r2, r0
 8012b58:	460b      	mov	r3, r1
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	4629      	mov	r1, r5
 8012b5e:	bfb8      	it	lt
 8012b60:	f1ca 0a00 	rsblt	sl, sl, #0
 8012b64:	f7ed fba0 	bl	80002a8 <__aeabi_dsub>
 8012b68:	ec41 0b19 	vmov	d9, r0, r1
 8012b6c:	4642      	mov	r2, r8
 8012b6e:	464b      	mov	r3, r9
 8012b70:	ec51 0b19 	vmov	r0, r1, d9
 8012b74:	f7ed fb9a 	bl	80002ac <__adddf3>
 8012b78:	a37b      	add	r3, pc, #492	; (adr r3, 8012d68 <__ieee754_pow+0xa00>)
 8012b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7e:	2000      	movs	r0, #0
 8012b80:	4604      	mov	r4, r0
 8012b82:	460d      	mov	r5, r1
 8012b84:	f7ed fd48 	bl	8000618 <__aeabi_dmul>
 8012b88:	ec53 2b19 	vmov	r2, r3, d9
 8012b8c:	4606      	mov	r6, r0
 8012b8e:	460f      	mov	r7, r1
 8012b90:	4620      	mov	r0, r4
 8012b92:	4629      	mov	r1, r5
 8012b94:	f7ed fb88 	bl	80002a8 <__aeabi_dsub>
 8012b98:	4602      	mov	r2, r0
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	4640      	mov	r0, r8
 8012b9e:	4649      	mov	r1, r9
 8012ba0:	f7ed fb82 	bl	80002a8 <__aeabi_dsub>
 8012ba4:	a372      	add	r3, pc, #456	; (adr r3, 8012d70 <__ieee754_pow+0xa08>)
 8012ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012baa:	f7ed fd35 	bl	8000618 <__aeabi_dmul>
 8012bae:	a372      	add	r3, pc, #456	; (adr r3, 8012d78 <__ieee754_pow+0xa10>)
 8012bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb4:	4680      	mov	r8, r0
 8012bb6:	4689      	mov	r9, r1
 8012bb8:	4620      	mov	r0, r4
 8012bba:	4629      	mov	r1, r5
 8012bbc:	f7ed fd2c 	bl	8000618 <__aeabi_dmul>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	460b      	mov	r3, r1
 8012bc4:	4640      	mov	r0, r8
 8012bc6:	4649      	mov	r1, r9
 8012bc8:	f7ed fb70 	bl	80002ac <__adddf3>
 8012bcc:	4604      	mov	r4, r0
 8012bce:	460d      	mov	r5, r1
 8012bd0:	4602      	mov	r2, r0
 8012bd2:	460b      	mov	r3, r1
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	4639      	mov	r1, r7
 8012bd8:	f7ed fb68 	bl	80002ac <__adddf3>
 8012bdc:	4632      	mov	r2, r6
 8012bde:	463b      	mov	r3, r7
 8012be0:	4680      	mov	r8, r0
 8012be2:	4689      	mov	r9, r1
 8012be4:	f7ed fb60 	bl	80002a8 <__aeabi_dsub>
 8012be8:	4602      	mov	r2, r0
 8012bea:	460b      	mov	r3, r1
 8012bec:	4620      	mov	r0, r4
 8012bee:	4629      	mov	r1, r5
 8012bf0:	f7ed fb5a 	bl	80002a8 <__aeabi_dsub>
 8012bf4:	4642      	mov	r2, r8
 8012bf6:	4606      	mov	r6, r0
 8012bf8:	460f      	mov	r7, r1
 8012bfa:	464b      	mov	r3, r9
 8012bfc:	4640      	mov	r0, r8
 8012bfe:	4649      	mov	r1, r9
 8012c00:	f7ed fd0a 	bl	8000618 <__aeabi_dmul>
 8012c04:	a35e      	add	r3, pc, #376	; (adr r3, 8012d80 <__ieee754_pow+0xa18>)
 8012c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	460d      	mov	r5, r1
 8012c0e:	f7ed fd03 	bl	8000618 <__aeabi_dmul>
 8012c12:	a35d      	add	r3, pc, #372	; (adr r3, 8012d88 <__ieee754_pow+0xa20>)
 8012c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c18:	f7ed fb46 	bl	80002a8 <__aeabi_dsub>
 8012c1c:	4622      	mov	r2, r4
 8012c1e:	462b      	mov	r3, r5
 8012c20:	f7ed fcfa 	bl	8000618 <__aeabi_dmul>
 8012c24:	a35a      	add	r3, pc, #360	; (adr r3, 8012d90 <__ieee754_pow+0xa28>)
 8012c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c2a:	f7ed fb3f 	bl	80002ac <__adddf3>
 8012c2e:	4622      	mov	r2, r4
 8012c30:	462b      	mov	r3, r5
 8012c32:	f7ed fcf1 	bl	8000618 <__aeabi_dmul>
 8012c36:	a358      	add	r3, pc, #352	; (adr r3, 8012d98 <__ieee754_pow+0xa30>)
 8012c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c3c:	f7ed fb34 	bl	80002a8 <__aeabi_dsub>
 8012c40:	4622      	mov	r2, r4
 8012c42:	462b      	mov	r3, r5
 8012c44:	f7ed fce8 	bl	8000618 <__aeabi_dmul>
 8012c48:	a355      	add	r3, pc, #340	; (adr r3, 8012da0 <__ieee754_pow+0xa38>)
 8012c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4e:	f7ed fb2d 	bl	80002ac <__adddf3>
 8012c52:	4622      	mov	r2, r4
 8012c54:	462b      	mov	r3, r5
 8012c56:	f7ed fcdf 	bl	8000618 <__aeabi_dmul>
 8012c5a:	4602      	mov	r2, r0
 8012c5c:	460b      	mov	r3, r1
 8012c5e:	4640      	mov	r0, r8
 8012c60:	4649      	mov	r1, r9
 8012c62:	f7ed fb21 	bl	80002a8 <__aeabi_dsub>
 8012c66:	4604      	mov	r4, r0
 8012c68:	460d      	mov	r5, r1
 8012c6a:	4602      	mov	r2, r0
 8012c6c:	460b      	mov	r3, r1
 8012c6e:	4640      	mov	r0, r8
 8012c70:	4649      	mov	r1, r9
 8012c72:	f7ed fcd1 	bl	8000618 <__aeabi_dmul>
 8012c76:	2200      	movs	r2, #0
 8012c78:	ec41 0b19 	vmov	d9, r0, r1
 8012c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012c80:	4620      	mov	r0, r4
 8012c82:	4629      	mov	r1, r5
 8012c84:	f7ed fb10 	bl	80002a8 <__aeabi_dsub>
 8012c88:	4602      	mov	r2, r0
 8012c8a:	460b      	mov	r3, r1
 8012c8c:	ec51 0b19 	vmov	r0, r1, d9
 8012c90:	f7ed fdec 	bl	800086c <__aeabi_ddiv>
 8012c94:	4632      	mov	r2, r6
 8012c96:	4604      	mov	r4, r0
 8012c98:	460d      	mov	r5, r1
 8012c9a:	463b      	mov	r3, r7
 8012c9c:	4640      	mov	r0, r8
 8012c9e:	4649      	mov	r1, r9
 8012ca0:	f7ed fcba 	bl	8000618 <__aeabi_dmul>
 8012ca4:	4632      	mov	r2, r6
 8012ca6:	463b      	mov	r3, r7
 8012ca8:	f7ed fb00 	bl	80002ac <__adddf3>
 8012cac:	4602      	mov	r2, r0
 8012cae:	460b      	mov	r3, r1
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	4629      	mov	r1, r5
 8012cb4:	f7ed faf8 	bl	80002a8 <__aeabi_dsub>
 8012cb8:	4642      	mov	r2, r8
 8012cba:	464b      	mov	r3, r9
 8012cbc:	f7ed faf4 	bl	80002a8 <__aeabi_dsub>
 8012cc0:	460b      	mov	r3, r1
 8012cc2:	4602      	mov	r2, r0
 8012cc4:	493a      	ldr	r1, [pc, #232]	; (8012db0 <__ieee754_pow+0xa48>)
 8012cc6:	2000      	movs	r0, #0
 8012cc8:	f7ed faee 	bl	80002a8 <__aeabi_dsub>
 8012ccc:	ec41 0b10 	vmov	d0, r0, r1
 8012cd0:	ee10 3a90 	vmov	r3, s1
 8012cd4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012cdc:	da2b      	bge.n	8012d36 <__ieee754_pow+0x9ce>
 8012cde:	4650      	mov	r0, sl
 8012ce0:	f000 f966 	bl	8012fb0 <scalbn>
 8012ce4:	ec51 0b10 	vmov	r0, r1, d0
 8012ce8:	ec53 2b18 	vmov	r2, r3, d8
 8012cec:	f7ff bbed 	b.w	80124ca <__ieee754_pow+0x162>
 8012cf0:	4b30      	ldr	r3, [pc, #192]	; (8012db4 <__ieee754_pow+0xa4c>)
 8012cf2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012cf6:	429e      	cmp	r6, r3
 8012cf8:	f77f af0c 	ble.w	8012b14 <__ieee754_pow+0x7ac>
 8012cfc:	4b2e      	ldr	r3, [pc, #184]	; (8012db8 <__ieee754_pow+0xa50>)
 8012cfe:	440b      	add	r3, r1
 8012d00:	4303      	orrs	r3, r0
 8012d02:	d009      	beq.n	8012d18 <__ieee754_pow+0x9b0>
 8012d04:	ec51 0b18 	vmov	r0, r1, d8
 8012d08:	2200      	movs	r2, #0
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	f7ed fef6 	bl	8000afc <__aeabi_dcmplt>
 8012d10:	3800      	subs	r0, #0
 8012d12:	bf18      	it	ne
 8012d14:	2001      	movne	r0, #1
 8012d16:	e447      	b.n	80125a8 <__ieee754_pow+0x240>
 8012d18:	4622      	mov	r2, r4
 8012d1a:	462b      	mov	r3, r5
 8012d1c:	f7ed fac4 	bl	80002a8 <__aeabi_dsub>
 8012d20:	4642      	mov	r2, r8
 8012d22:	464b      	mov	r3, r9
 8012d24:	f7ed fefe 	bl	8000b24 <__aeabi_dcmpge>
 8012d28:	2800      	cmp	r0, #0
 8012d2a:	f43f aef3 	beq.w	8012b14 <__ieee754_pow+0x7ac>
 8012d2e:	e7e9      	b.n	8012d04 <__ieee754_pow+0x99c>
 8012d30:	f04f 0a00 	mov.w	sl, #0
 8012d34:	e71a      	b.n	8012b6c <__ieee754_pow+0x804>
 8012d36:	ec51 0b10 	vmov	r0, r1, d0
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	e7d4      	b.n	8012ce8 <__ieee754_pow+0x980>
 8012d3e:	491c      	ldr	r1, [pc, #112]	; (8012db0 <__ieee754_pow+0xa48>)
 8012d40:	2000      	movs	r0, #0
 8012d42:	f7ff bb30 	b.w	80123a6 <__ieee754_pow+0x3e>
 8012d46:	2000      	movs	r0, #0
 8012d48:	2100      	movs	r1, #0
 8012d4a:	f7ff bb2c 	b.w	80123a6 <__ieee754_pow+0x3e>
 8012d4e:	4630      	mov	r0, r6
 8012d50:	4639      	mov	r1, r7
 8012d52:	f7ff bb28 	b.w	80123a6 <__ieee754_pow+0x3e>
 8012d56:	9204      	str	r2, [sp, #16]
 8012d58:	f7ff bb7a 	b.w	8012450 <__ieee754_pow+0xe8>
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	f7ff bb64 	b.w	801242a <__ieee754_pow+0xc2>
 8012d62:	bf00      	nop
 8012d64:	f3af 8000 	nop.w
 8012d68:	00000000 	.word	0x00000000
 8012d6c:	3fe62e43 	.word	0x3fe62e43
 8012d70:	fefa39ef 	.word	0xfefa39ef
 8012d74:	3fe62e42 	.word	0x3fe62e42
 8012d78:	0ca86c39 	.word	0x0ca86c39
 8012d7c:	be205c61 	.word	0xbe205c61
 8012d80:	72bea4d0 	.word	0x72bea4d0
 8012d84:	3e663769 	.word	0x3e663769
 8012d88:	c5d26bf1 	.word	0xc5d26bf1
 8012d8c:	3ebbbd41 	.word	0x3ebbbd41
 8012d90:	af25de2c 	.word	0xaf25de2c
 8012d94:	3f11566a 	.word	0x3f11566a
 8012d98:	16bebd93 	.word	0x16bebd93
 8012d9c:	3f66c16c 	.word	0x3f66c16c
 8012da0:	5555553e 	.word	0x5555553e
 8012da4:	3fc55555 	.word	0x3fc55555
 8012da8:	3fe00000 	.word	0x3fe00000
 8012dac:	000fffff 	.word	0x000fffff
 8012db0:	3ff00000 	.word	0x3ff00000
 8012db4:	4090cbff 	.word	0x4090cbff
 8012db8:	3f6f3400 	.word	0x3f6f3400
 8012dbc:	652b82fe 	.word	0x652b82fe
 8012dc0:	3c971547 	.word	0x3c971547

08012dc4 <__ieee754_sqrt>:
 8012dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dc8:	ec55 4b10 	vmov	r4, r5, d0
 8012dcc:	4e55      	ldr	r6, [pc, #340]	; (8012f24 <__ieee754_sqrt+0x160>)
 8012dce:	43ae      	bics	r6, r5
 8012dd0:	ee10 0a10 	vmov	r0, s0
 8012dd4:	ee10 3a10 	vmov	r3, s0
 8012dd8:	462a      	mov	r2, r5
 8012dda:	4629      	mov	r1, r5
 8012ddc:	d110      	bne.n	8012e00 <__ieee754_sqrt+0x3c>
 8012dde:	ee10 2a10 	vmov	r2, s0
 8012de2:	462b      	mov	r3, r5
 8012de4:	f7ed fc18 	bl	8000618 <__aeabi_dmul>
 8012de8:	4602      	mov	r2, r0
 8012dea:	460b      	mov	r3, r1
 8012dec:	4620      	mov	r0, r4
 8012dee:	4629      	mov	r1, r5
 8012df0:	f7ed fa5c 	bl	80002ac <__adddf3>
 8012df4:	4604      	mov	r4, r0
 8012df6:	460d      	mov	r5, r1
 8012df8:	ec45 4b10 	vmov	d0, r4, r5
 8012dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e00:	2d00      	cmp	r5, #0
 8012e02:	dc10      	bgt.n	8012e26 <__ieee754_sqrt+0x62>
 8012e04:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012e08:	4330      	orrs	r0, r6
 8012e0a:	d0f5      	beq.n	8012df8 <__ieee754_sqrt+0x34>
 8012e0c:	b15d      	cbz	r5, 8012e26 <__ieee754_sqrt+0x62>
 8012e0e:	ee10 2a10 	vmov	r2, s0
 8012e12:	462b      	mov	r3, r5
 8012e14:	ee10 0a10 	vmov	r0, s0
 8012e18:	f7ed fa46 	bl	80002a8 <__aeabi_dsub>
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	460b      	mov	r3, r1
 8012e20:	f7ed fd24 	bl	800086c <__aeabi_ddiv>
 8012e24:	e7e6      	b.n	8012df4 <__ieee754_sqrt+0x30>
 8012e26:	1512      	asrs	r2, r2, #20
 8012e28:	d074      	beq.n	8012f14 <__ieee754_sqrt+0x150>
 8012e2a:	07d4      	lsls	r4, r2, #31
 8012e2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012e30:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012e34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012e38:	bf5e      	ittt	pl
 8012e3a:	0fda      	lsrpl	r2, r3, #31
 8012e3c:	005b      	lslpl	r3, r3, #1
 8012e3e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012e42:	2400      	movs	r4, #0
 8012e44:	0fda      	lsrs	r2, r3, #31
 8012e46:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012e4a:	107f      	asrs	r7, r7, #1
 8012e4c:	005b      	lsls	r3, r3, #1
 8012e4e:	2516      	movs	r5, #22
 8012e50:	4620      	mov	r0, r4
 8012e52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012e56:	1886      	adds	r6, r0, r2
 8012e58:	428e      	cmp	r6, r1
 8012e5a:	bfde      	ittt	le
 8012e5c:	1b89      	suble	r1, r1, r6
 8012e5e:	18b0      	addle	r0, r6, r2
 8012e60:	18a4      	addle	r4, r4, r2
 8012e62:	0049      	lsls	r1, r1, #1
 8012e64:	3d01      	subs	r5, #1
 8012e66:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012e6a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012e6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012e72:	d1f0      	bne.n	8012e56 <__ieee754_sqrt+0x92>
 8012e74:	462a      	mov	r2, r5
 8012e76:	f04f 0e20 	mov.w	lr, #32
 8012e7a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012e7e:	4281      	cmp	r1, r0
 8012e80:	eb06 0c05 	add.w	ip, r6, r5
 8012e84:	dc02      	bgt.n	8012e8c <__ieee754_sqrt+0xc8>
 8012e86:	d113      	bne.n	8012eb0 <__ieee754_sqrt+0xec>
 8012e88:	459c      	cmp	ip, r3
 8012e8a:	d811      	bhi.n	8012eb0 <__ieee754_sqrt+0xec>
 8012e8c:	f1bc 0f00 	cmp.w	ip, #0
 8012e90:	eb0c 0506 	add.w	r5, ip, r6
 8012e94:	da43      	bge.n	8012f1e <__ieee754_sqrt+0x15a>
 8012e96:	2d00      	cmp	r5, #0
 8012e98:	db41      	blt.n	8012f1e <__ieee754_sqrt+0x15a>
 8012e9a:	f100 0801 	add.w	r8, r0, #1
 8012e9e:	1a09      	subs	r1, r1, r0
 8012ea0:	459c      	cmp	ip, r3
 8012ea2:	bf88      	it	hi
 8012ea4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012ea8:	eba3 030c 	sub.w	r3, r3, ip
 8012eac:	4432      	add	r2, r6
 8012eae:	4640      	mov	r0, r8
 8012eb0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012eb4:	f1be 0e01 	subs.w	lr, lr, #1
 8012eb8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012ebc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012ec0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012ec4:	d1db      	bne.n	8012e7e <__ieee754_sqrt+0xba>
 8012ec6:	430b      	orrs	r3, r1
 8012ec8:	d006      	beq.n	8012ed8 <__ieee754_sqrt+0x114>
 8012eca:	1c50      	adds	r0, r2, #1
 8012ecc:	bf13      	iteet	ne
 8012ece:	3201      	addne	r2, #1
 8012ed0:	3401      	addeq	r4, #1
 8012ed2:	4672      	moveq	r2, lr
 8012ed4:	f022 0201 	bicne.w	r2, r2, #1
 8012ed8:	1063      	asrs	r3, r4, #1
 8012eda:	0852      	lsrs	r2, r2, #1
 8012edc:	07e1      	lsls	r1, r4, #31
 8012ede:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012ee2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012ee6:	bf48      	it	mi
 8012ee8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012eec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012ef0:	4614      	mov	r4, r2
 8012ef2:	e781      	b.n	8012df8 <__ieee754_sqrt+0x34>
 8012ef4:	0ad9      	lsrs	r1, r3, #11
 8012ef6:	3815      	subs	r0, #21
 8012ef8:	055b      	lsls	r3, r3, #21
 8012efa:	2900      	cmp	r1, #0
 8012efc:	d0fa      	beq.n	8012ef4 <__ieee754_sqrt+0x130>
 8012efe:	02cd      	lsls	r5, r1, #11
 8012f00:	d50a      	bpl.n	8012f18 <__ieee754_sqrt+0x154>
 8012f02:	f1c2 0420 	rsb	r4, r2, #32
 8012f06:	fa23 f404 	lsr.w	r4, r3, r4
 8012f0a:	1e55      	subs	r5, r2, #1
 8012f0c:	4093      	lsls	r3, r2
 8012f0e:	4321      	orrs	r1, r4
 8012f10:	1b42      	subs	r2, r0, r5
 8012f12:	e78a      	b.n	8012e2a <__ieee754_sqrt+0x66>
 8012f14:	4610      	mov	r0, r2
 8012f16:	e7f0      	b.n	8012efa <__ieee754_sqrt+0x136>
 8012f18:	0049      	lsls	r1, r1, #1
 8012f1a:	3201      	adds	r2, #1
 8012f1c:	e7ef      	b.n	8012efe <__ieee754_sqrt+0x13a>
 8012f1e:	4680      	mov	r8, r0
 8012f20:	e7bd      	b.n	8012e9e <__ieee754_sqrt+0xda>
 8012f22:	bf00      	nop
 8012f24:	7ff00000 	.word	0x7ff00000

08012f28 <with_errno>:
 8012f28:	b570      	push	{r4, r5, r6, lr}
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	460d      	mov	r5, r1
 8012f2e:	4616      	mov	r6, r2
 8012f30:	f7fc fa6a 	bl	800f408 <__errno>
 8012f34:	4629      	mov	r1, r5
 8012f36:	6006      	str	r6, [r0, #0]
 8012f38:	4620      	mov	r0, r4
 8012f3a:	bd70      	pop	{r4, r5, r6, pc}

08012f3c <xflow>:
 8012f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f3e:	4614      	mov	r4, r2
 8012f40:	461d      	mov	r5, r3
 8012f42:	b108      	cbz	r0, 8012f48 <xflow+0xc>
 8012f44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012f48:	e9cd 2300 	strd	r2, r3, [sp]
 8012f4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f50:	4620      	mov	r0, r4
 8012f52:	4629      	mov	r1, r5
 8012f54:	f7ed fb60 	bl	8000618 <__aeabi_dmul>
 8012f58:	2222      	movs	r2, #34	; 0x22
 8012f5a:	b003      	add	sp, #12
 8012f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f60:	f7ff bfe2 	b.w	8012f28 <with_errno>

08012f64 <__math_uflow>:
 8012f64:	b508      	push	{r3, lr}
 8012f66:	2200      	movs	r2, #0
 8012f68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012f6c:	f7ff ffe6 	bl	8012f3c <xflow>
 8012f70:	ec41 0b10 	vmov	d0, r0, r1
 8012f74:	bd08      	pop	{r3, pc}

08012f76 <__math_oflow>:
 8012f76:	b508      	push	{r3, lr}
 8012f78:	2200      	movs	r2, #0
 8012f7a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012f7e:	f7ff ffdd 	bl	8012f3c <xflow>
 8012f82:	ec41 0b10 	vmov	d0, r0, r1
 8012f86:	bd08      	pop	{r3, pc}

08012f88 <fabs>:
 8012f88:	ec51 0b10 	vmov	r0, r1, d0
 8012f8c:	ee10 2a10 	vmov	r2, s0
 8012f90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f94:	ec43 2b10 	vmov	d0, r2, r3
 8012f98:	4770      	bx	lr

08012f9a <finite>:
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	ed8d 0b00 	vstr	d0, [sp]
 8012fa0:	9801      	ldr	r0, [sp, #4]
 8012fa2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012fa6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012faa:	0fc0      	lsrs	r0, r0, #31
 8012fac:	b002      	add	sp, #8
 8012fae:	4770      	bx	lr

08012fb0 <scalbn>:
 8012fb0:	b570      	push	{r4, r5, r6, lr}
 8012fb2:	ec55 4b10 	vmov	r4, r5, d0
 8012fb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012fba:	4606      	mov	r6, r0
 8012fbc:	462b      	mov	r3, r5
 8012fbe:	b99a      	cbnz	r2, 8012fe8 <scalbn+0x38>
 8012fc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012fc4:	4323      	orrs	r3, r4
 8012fc6:	d036      	beq.n	8013036 <scalbn+0x86>
 8012fc8:	4b39      	ldr	r3, [pc, #228]	; (80130b0 <scalbn+0x100>)
 8012fca:	4629      	mov	r1, r5
 8012fcc:	ee10 0a10 	vmov	r0, s0
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	f7ed fb21 	bl	8000618 <__aeabi_dmul>
 8012fd6:	4b37      	ldr	r3, [pc, #220]	; (80130b4 <scalbn+0x104>)
 8012fd8:	429e      	cmp	r6, r3
 8012fda:	4604      	mov	r4, r0
 8012fdc:	460d      	mov	r5, r1
 8012fde:	da10      	bge.n	8013002 <scalbn+0x52>
 8012fe0:	a32b      	add	r3, pc, #172	; (adr r3, 8013090 <scalbn+0xe0>)
 8012fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe6:	e03a      	b.n	801305e <scalbn+0xae>
 8012fe8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012fec:	428a      	cmp	r2, r1
 8012fee:	d10c      	bne.n	801300a <scalbn+0x5a>
 8012ff0:	ee10 2a10 	vmov	r2, s0
 8012ff4:	4620      	mov	r0, r4
 8012ff6:	4629      	mov	r1, r5
 8012ff8:	f7ed f958 	bl	80002ac <__adddf3>
 8012ffc:	4604      	mov	r4, r0
 8012ffe:	460d      	mov	r5, r1
 8013000:	e019      	b.n	8013036 <scalbn+0x86>
 8013002:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013006:	460b      	mov	r3, r1
 8013008:	3a36      	subs	r2, #54	; 0x36
 801300a:	4432      	add	r2, r6
 801300c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013010:	428a      	cmp	r2, r1
 8013012:	dd08      	ble.n	8013026 <scalbn+0x76>
 8013014:	2d00      	cmp	r5, #0
 8013016:	a120      	add	r1, pc, #128	; (adr r1, 8013098 <scalbn+0xe8>)
 8013018:	e9d1 0100 	ldrd	r0, r1, [r1]
 801301c:	da1c      	bge.n	8013058 <scalbn+0xa8>
 801301e:	a120      	add	r1, pc, #128	; (adr r1, 80130a0 <scalbn+0xf0>)
 8013020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013024:	e018      	b.n	8013058 <scalbn+0xa8>
 8013026:	2a00      	cmp	r2, #0
 8013028:	dd08      	ble.n	801303c <scalbn+0x8c>
 801302a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801302e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013032:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013036:	ec45 4b10 	vmov	d0, r4, r5
 801303a:	bd70      	pop	{r4, r5, r6, pc}
 801303c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013040:	da19      	bge.n	8013076 <scalbn+0xc6>
 8013042:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013046:	429e      	cmp	r6, r3
 8013048:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801304c:	dd0a      	ble.n	8013064 <scalbn+0xb4>
 801304e:	a112      	add	r1, pc, #72	; (adr r1, 8013098 <scalbn+0xe8>)
 8013050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d1e2      	bne.n	801301e <scalbn+0x6e>
 8013058:	a30f      	add	r3, pc, #60	; (adr r3, 8013098 <scalbn+0xe8>)
 801305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305e:	f7ed fadb 	bl	8000618 <__aeabi_dmul>
 8013062:	e7cb      	b.n	8012ffc <scalbn+0x4c>
 8013064:	a10a      	add	r1, pc, #40	; (adr r1, 8013090 <scalbn+0xe0>)
 8013066:	e9d1 0100 	ldrd	r0, r1, [r1]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d0b8      	beq.n	8012fe0 <scalbn+0x30>
 801306e:	a10e      	add	r1, pc, #56	; (adr r1, 80130a8 <scalbn+0xf8>)
 8013070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013074:	e7b4      	b.n	8012fe0 <scalbn+0x30>
 8013076:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801307a:	3236      	adds	r2, #54	; 0x36
 801307c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013080:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013084:	4620      	mov	r0, r4
 8013086:	4b0c      	ldr	r3, [pc, #48]	; (80130b8 <scalbn+0x108>)
 8013088:	2200      	movs	r2, #0
 801308a:	e7e8      	b.n	801305e <scalbn+0xae>
 801308c:	f3af 8000 	nop.w
 8013090:	c2f8f359 	.word	0xc2f8f359
 8013094:	01a56e1f 	.word	0x01a56e1f
 8013098:	8800759c 	.word	0x8800759c
 801309c:	7e37e43c 	.word	0x7e37e43c
 80130a0:	8800759c 	.word	0x8800759c
 80130a4:	fe37e43c 	.word	0xfe37e43c
 80130a8:	c2f8f359 	.word	0xc2f8f359
 80130ac:	81a56e1f 	.word	0x81a56e1f
 80130b0:	43500000 	.word	0x43500000
 80130b4:	ffff3cb0 	.word	0xffff3cb0
 80130b8:	3c900000 	.word	0x3c900000

080130bc <_init>:
 80130bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130be:	bf00      	nop
 80130c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130c2:	bc08      	pop	{r3}
 80130c4:	469e      	mov	lr, r3
 80130c6:	4770      	bx	lr

080130c8 <_fini>:
 80130c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ca:	bf00      	nop
 80130cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130ce:	bc08      	pop	{r3}
 80130d0:	469e      	mov	lr, r3
 80130d2:	4770      	bx	lr
