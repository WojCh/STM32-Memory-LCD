
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007058  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000232c  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009534  08009534  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009534  08009534  00019534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800953c  0800953c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009540  08009540  00019540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00003088  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003100  20003100  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014bea  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc4  00000000  00000000  00034c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00037c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff0  00000000  00000000  00038d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025728  00000000  00000000  00039d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014be0  00000000  00000000  0005f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddc5b  00000000  00000000  00074060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00151cbb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053c4  00000000  00000000  00151d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080071f0 	.word	0x080071f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080071f0 	.word	0x080071f0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08c      	sub	sp, #48	; 0x30
 80005a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
 80005be:	4b5c      	ldr	r3, [pc, #368]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a5b      	ldr	r2, [pc, #364]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b59      	ldr	r3, [pc, #356]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	61bb      	str	r3, [r7, #24]
 80005d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	4b55      	ldr	r3, [pc, #340]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a54      	ldr	r2, [pc, #336]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b52      	ldr	r3, [pc, #328]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	4b4e      	ldr	r3, [pc, #312]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a4d      	ldr	r2, [pc, #308]	; (8000730 <MX_GPIO_Init+0x18c>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b4b      	ldr	r3, [pc, #300]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	4b47      	ldr	r3, [pc, #284]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a46      	ldr	r2, [pc, #280]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b44      	ldr	r3, [pc, #272]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4b40      	ldr	r3, [pc, #256]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a3f      	ldr	r2, [pc, #252]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000634:	f043 0310 	orr.w	r3, r3, #16
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b3d      	ldr	r3, [pc, #244]	; (8000730 <MX_GPIO_Init+0x18c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0310 	and.w	r3, r3, #16
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b39      	ldr	r3, [pc, #228]	; (8000730 <MX_GPIO_Init+0x18c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a38      	ldr	r2, [pc, #224]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b36      	ldr	r3, [pc, #216]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a31      	ldr	r2, [pc, #196]	; (8000730 <MX_GPIO_Init+0x18c>)
 800066c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <MX_GPIO_Init+0x18c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	482c      	ldr	r0, [pc, #176]	; (8000734 <MX_GPIO_Init+0x190>)
 8000684:	f001 fe98 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f244 0181 	movw	r1, #16513	; 0x4081
 800068e:	482a      	ldr	r0, [pc, #168]	; (8000738 <MX_GPIO_Init+0x194>)
 8000690:	f001 fe92 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	4828      	ldr	r0, [pc, #160]	; (800073c <MX_GPIO_Init+0x198>)
 800069a:	f001 fe8d 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800069e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	4822      	ldr	r0, [pc, #136]	; (8000740 <MX_GPIO_Init+0x19c>)
 80006b6:	f001 fcd3 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	4818      	ldr	r0, [pc, #96]	; (8000734 <MX_GPIO_Init+0x190>)
 80006d2:	f001 fcc5 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006d6:	f244 0381 	movw	r3, #16513	; 0x4081
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <MX_GPIO_Init+0x194>)
 80006f0:	f001 fcb6 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006f4:	2340      	movs	r3, #64	; 0x40
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	480c      	ldr	r0, [pc, #48]	; (800073c <MX_GPIO_Init+0x198>)
 800070c:	f001 fca8 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_GPIO_Init+0x198>)
 8000724:	f001 fc9c 	bl	8002060 <HAL_GPIO_Init>

}
 8000728:	bf00      	nop
 800072a:	3730      	adds	r7, #48	; 0x30
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000
 8000738:	40020400 	.word	0x40020400
 800073c:	40021800 	.word	0x40021800
 8000740:	40020800 	.word	0x40020800

08000744 <getDataFromUart>:
#include "gps.h"

//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};
char gpsBuffer[600] = {0};

void getDataFromUart(gpsDevice* gps){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	1d19      	adds	r1, r3, #4
 8000750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000754:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <getDataFromUart+0x24>)
 800075a:	f003 fe64 	bl	8004426 <HAL_UART_Receive>
//	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200030a8 	.word	0x200030a8

0800076c <initGps>:
// Initialization of gpsDefice struct
gpsDevice initGps(UART_HandleTypeDef* uartPort){
 800076c:	b580      	push	{r7, lr}
 800076e:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8000772:	af00      	add	r7, sp, #0
 8000774:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000778:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800077c:	6018      	str	r0, [r3, #0]
 800077e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8000782:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8000786:	6019      	str	r1, [r3, #0]
	gpsDevice gpsModule;
	gpsModule.uartPort = uartPort;
 8000788:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800078c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000790:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8000794:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 8000798:	6812      	ldr	r2, [r2, #0]
 800079a:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	3304      	adds	r3, #4
 80007a2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f004 ff89 	bl	80056c0 <strncpy>
	gpsModule.getData = &getDataFromUart;
 80007ae:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80007b2:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80007b6:	4a11      	ldr	r2, [pc, #68]	; (80007fc <initGps+0x90>)
 80007b8:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	gpsModule.updateStatus = &gpsUpdateStatus;
 80007bc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80007c0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80007c4:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <initGps+0x94>)
 80007c6:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	return(gpsModule);
 80007ca:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80007ce:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80007d8:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80007dc:	4610      	mov	r0, r2
 80007de:	4619      	mov	r1, r3
 80007e0:	f44f 7321 	mov.w	r3, #644	; 0x284
 80007e4:	461a      	mov	r2, r3
 80007e6:	f004 fe15 	bl	8005414 <memcpy>
}
 80007ea:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80007ee:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	f507 7724 	add.w	r7, r7, #656	; 0x290
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	08000745 	.word	0x08000745
 8000800:	08000ab5 	.word	0x08000ab5

08000804 <hexCharToInt>:

int hexCharToInt(char* value){
 8000804:	b480      	push	{r7}
 8000806:	b087      	sub	sp, #28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	int msb = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
	if((*value >= 48) &(*value <= 57)){
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b2f      	cmp	r3, #47	; 0x2f
 8000816:	bf8c      	ite	hi
 8000818:	2301      	movhi	r3, #1
 800081a:	2300      	movls	r3, #0
 800081c:	b2da      	uxtb	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b39      	cmp	r3, #57	; 0x39
 8000824:	bf94      	ite	ls
 8000826:	2301      	movls	r3, #1
 8000828:	2300      	movhi	r3, #0
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4013      	ands	r3, r2
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d004      	beq.n	800083e <hexCharToInt+0x3a>
		msb = *value - 48;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	3b30      	subs	r3, #48	; 0x30
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e003      	b.n	8000846 <hexCharToInt+0x42>
	} else {
		msb = *value - 48 - 7;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	3b37      	subs	r3, #55	; 0x37
 8000844:	617b      	str	r3, [r7, #20]
	}
	int lsb = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
	if((*(value+1) >= 48) &(*(value+1) <= 57)){
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3301      	adds	r3, #1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b2f      	cmp	r3, #47	; 0x2f
 8000852:	bf8c      	ite	hi
 8000854:	2301      	movhi	r3, #1
 8000856:	2300      	movls	r3, #0
 8000858:	b2da      	uxtb	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3301      	adds	r3, #1
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b39      	cmp	r3, #57	; 0x39
 8000862:	bf94      	ite	ls
 8000864:	2301      	movls	r3, #1
 8000866:	2300      	movhi	r3, #0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4013      	ands	r3, r2
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d005      	beq.n	800087e <hexCharToInt+0x7a>
		lsb = *(value+1) - 48;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3301      	adds	r3, #1
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	3b30      	subs	r3, #48	; 0x30
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	e004      	b.n	8000888 <hexCharToInt+0x84>
	} else {
		lsb = *(value+1) - 48 - 7;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3301      	adds	r3, #1
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	3b37      	subs	r3, #55	; 0x37
 8000886:	613b      	str	r3, [r7, #16]
	}
	int result = lsb | (msb << 4);
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4313      	orrs	r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
	return(result)
 8000892:	68fb      	ldr	r3, [r7, #12]
;}
 8000894:	4618      	mov	r0, r3
 8000896:	371c      	adds	r7, #28
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <readSentence>:
//	char code[] = "GNZDA";
//	char code[] = "GPGSV";
//	char code[] = "GNGSA";
//	char code[] = "GPTXT";
//	char code[6] = "GNGGA";
void readSentence(char* buffer, gpsSentence* sentence, char code[6]){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0a2      	sub	sp, #136	; 0x88
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
	// word terminator
	// beginning of the sentence
	char* pos = strstr(buffer, code);
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f004 ff19 	bl	80056e6 <strstr>
 80008b4:	67b8      	str	r0, [r7, #120]	; 0x78
	if(pos != NULL){					// if found
 80008b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	f000 80e6 	beq.w	8000a8a <readSentence+0x1ea>
		char* end = strchr(pos, 13); 	// end of buffer on /r carriage return
 80008be:	210d      	movs	r1, #13
 80008c0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80008c2:	f004 fedc 	bl	800567e <strchr>
 80008c6:	6778      	str	r0, [r7, #116]	; 0x74
//		uint8_t strl = end - pos;		// string length - might be used for malloc
		char myStr[84] = {0};
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2250      	movs	r2, #80	; 0x50
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f004 fdab 	bl	8005430 <memset>
		strncpy(myStr, pos, 83);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	2253      	movs	r2, #83	; 0x53
 80008e0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80008e2:	4618      	mov	r0, r3
 80008e4:	f004 feec 	bl	80056c0 <strncpy>
		// Checksum control
		char chksum = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		uint8_t j = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		printf("b ");
 80008f4:	4867      	ldr	r0, [pc, #412]	; (8000a94 <readSentence+0x1f4>)
 80008f6:	f004 fda3 	bl	8005440 <iprintf>
		while((myStr[j] != '*') & (myStr[j] != NULL)){
 80008fa:	e02c      	b.n	8000956 <readSentence+0xb6>
			printf("c ");
 80008fc:	4866      	ldr	r0, [pc, #408]	; (8000a98 <readSentence+0x1f8>)
 80008fe:	f004 fd9f 	bl	8005440 <iprintf>
				if(j < 84){
 8000902:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000906:	2b53      	cmp	r3, #83	; 0x53
 8000908:	d840      	bhi.n	800098c <readSentence+0xec>
				printf("j: %d\n", j);
 800090a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800090e:	4619      	mov	r1, r3
 8000910:	4862      	ldr	r0, [pc, #392]	; (8000a9c <readSentence+0x1fc>)
 8000912:	f004 fd95 	bl	8005440 <iprintf>
				printf("mystr[j] %c\n", myStr[j]);
 8000916:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800091a:	3388      	adds	r3, #136	; 0x88
 800091c:	443b      	add	r3, r7
 800091e:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8000922:	4619      	mov	r1, r3
 8000924:	485e      	ldr	r0, [pc, #376]	; (8000aa0 <readSentence+0x200>)
 8000926:	f004 fd8b 	bl	8005440 <iprintf>
				chksum ^= myStr[j];
 800092a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800092e:	3388      	adds	r3, #136	; 0x88
 8000930:	443b      	add	r3, r7
 8000932:	f813 2c78 	ldrb.w	r2, [r3, #-120]
 8000936:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800093a:	4053      	eors	r3, r2
 800093c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				printf("d ");
 8000940:	4858      	ldr	r0, [pc, #352]	; (8000aa4 <readSentence+0x204>)
 8000942:	f004 fd7d 	bl	8005440 <iprintf>
				j++;
 8000946:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800094a:	3301      	adds	r3, #1
 800094c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				printf("e ");
 8000950:	4855      	ldr	r0, [pc, #340]	; (8000aa8 <readSentence+0x208>)
 8000952:	f004 fd75 	bl	8005440 <iprintf>
		while((myStr[j] != '*') & (myStr[j] != NULL)){
 8000956:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800095a:	3388      	adds	r3, #136	; 0x88
 800095c:	443b      	add	r3, r7
 800095e:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8000962:	2b2a      	cmp	r3, #42	; 0x2a
 8000964:	bf14      	ite	ne
 8000966:	2301      	movne	r3, #1
 8000968:	2300      	moveq	r3, #0
 800096a:	b2da      	uxtb	r2, r3
 800096c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000970:	3388      	adds	r3, #136	; 0x88
 8000972:	443b      	add	r3, r7
 8000974:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8000978:	2b00      	cmp	r3, #0
 800097a:	bf14      	ite	ne
 800097c:	2301      	movne	r3, #1
 800097e:	2300      	moveq	r3, #0
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4013      	ands	r3, r2
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1b8      	bne.n	80008fc <readSentence+0x5c>
 800098a:	e000      	b.n	800098e <readSentence+0xee>
					} else {
				break;
 800098c:	bf00      	nop
			}
		}
		printf("f\n");
 800098e:	4847      	ldr	r0, [pc, #284]	; (8000aac <readSentence+0x20c>)
 8000990:	f004 fddc 	bl	800554c <puts>
		char* chkPos = strchr(pos, '*')+1;
 8000994:	212a      	movs	r1, #42	; 0x2a
 8000996:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000998:	f004 fe71 	bl	800567e <strchr>
 800099c:	4603      	mov	r3, r0
 800099e:	3301      	adds	r3, #1
 80009a0:	673b      	str	r3, [r7, #112]	; 0x70
		char readChkSum = hexCharToInt(chkPos);
 80009a2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80009a4:	f7ff ff2e 	bl	8000804 <hexCharToInt>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if(readChkSum == chksum){
 80009ae:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80009b2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d163      	bne.n	8000a82 <readSentence+0x1e2>
			sentence->valid = 1;
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	2201      	movs	r2, #1
 80009be:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb
			int wordLen = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	66bb      	str	r3, [r7, #104]	; 0x68
			char* position = myStr;
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			int i = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	67fb      	str	r3, [r7, #124]	; 0x7c
			while((*position != 10) & (i < 24)){
 80009d2:	e035      	b.n	8000a40 <readSentence+0x1a0>
				int res = sscanf(position, "%[^,\r*]", sentence->words[i]);
 80009d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	4413      	add	r3, r2
 80009e2:	3306      	adds	r3, #6
 80009e4:	461a      	mov	r2, r3
 80009e6:	4932      	ldr	r1, [pc, #200]	; (8000ab0 <readSentence+0x210>)
 80009e8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80009ec:	f004 fdd6 	bl	800559c <siscanf>
 80009f0:	6678      	str	r0, [r7, #100]	; 0x64
				if(res==0){
 80009f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d10c      	bne.n	8000a12 <readSentence+0x172>
					memset(sentence->words[i], 0, sizeof(sentence->words[i]));
 80009f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	4413      	add	r3, r2
 8000a06:	3306      	adds	r3, #6
 8000a08:	2214      	movs	r2, #20
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 fd0f 	bl	8005430 <memset>
				}
//				printf("iter: %d: %s, res: %d\n", i, sentence->words[i], res);
				wordLen = strlen(sentence->words[i]);
 8000a12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000a14:	4613      	mov	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	4413      	add	r3, r2
 8000a20:	3306      	adds	r3, #6
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fbe4 	bl	80001f0 <strlen>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	66bb      	str	r3, [r7, #104]	; 0x68
				position = position + wordLen + 1;
 8000a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a2e:	3301      	adds	r3, #1
 8000a30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a34:	4413      	add	r3, r2
 8000a36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				i++;
 8000a3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
			while((*position != 10) & (i < 24)){
 8000a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b0a      	cmp	r3, #10
 8000a48:	bf14      	ite	ne
 8000a4a:	2301      	movne	r3, #1
 8000a4c:	2300      	moveq	r3, #0
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a52:	2b17      	cmp	r3, #23
 8000a54:	bfd4      	ite	le
 8000a56:	2301      	movle	r3, #1
 8000a58:	2300      	movgt	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1b7      	bne.n	80009d4 <readSentence+0x134>
			}
			sentence->wordNum = i-1;
 8000a64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
			strncpy(&sentence->msgId, sentence->words[0], 5);
 8000a72:	68b8      	ldr	r0, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	3306      	adds	r3, #6
 8000a78:	2205      	movs	r2, #5
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f004 fe20 	bl	80056c0 <strncpy>
		} else {
			sentence->valid = 0;
		}

	}
}
 8000a80:	e003      	b.n	8000a8a <readSentence+0x1ea>
			sentence->valid = 0;
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb
}
 8000a8a:	bf00      	nop
 8000a8c:	3788      	adds	r7, #136	; 0x88
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	08007208 	.word	0x08007208
 8000a98:	0800720c 	.word	0x0800720c
 8000a9c:	08007210 	.word	0x08007210
 8000aa0:	08007218 	.word	0x08007218
 8000aa4:	08007228 	.word	0x08007228
 8000aa8:	0800722c 	.word	0x0800722c
 8000aac:	08007230 	.word	0x08007230
 8000ab0:	08007234 	.word	0x08007234

08000ab4 <gpsUpdateStatus>:

void gpsUpdateStatus(gpsDevice* gpsModule){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	gpsParseTime(&gpsModule->status, &gpsModule->buffer);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f503 7219 	add.w	r2, r3, #612	; 0x264
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4610      	mov	r0, r2
 8000aca:	f000 f80d 	bl	8000ae8 <gpsParseTime>
	gpsParsePosition(&gpsModule->status, &gpsModule->buffer);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f503 7219 	add.w	r2, r3, #612	; 0x264
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4610      	mov	r0, r2
 8000adc:	f000 f8da 	bl	8000c94 <gpsParsePosition>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <gpsParseTime>:

void gpsParseTime(gpsStatus* status, char* buffer){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000af4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000af8:	6018      	str	r0, [r3, #0]
 8000afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000afe:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000b02:	6019      	str	r1, [r3, #0]
	gpsSentence sentence;
	readSentence(buffer, &sentence, "GNZDA");
 8000b04:	f107 010c 	add.w	r1, r7, #12
 8000b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b0c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000b10:	4a5f      	ldr	r2, [pc, #380]	; (8000c90 <gpsParseTime+0x1a8>)
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	f7ff fec4 	bl	80008a0 <readSentence>
// 		Check correctness
//		Add return value to indicate need for re-reading data
	if((strncmp(sentence.msgId, "GNZDA", 6)==0) & sentence.valid){
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2206      	movs	r2, #6
 8000b1e:	495c      	ldr	r1, [pc, #368]	; (8000c90 <gpsParseTime+0x1a8>)
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 fdb9 	bl	8005698 <strncmp>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	bf0c      	ite	eq
 8000b2c:	2301      	moveq	r3, #1
 8000b2e:	2300      	movne	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	461a      	mov	r2, r3
 8000b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b3c:	f893 31fb 	ldrb.w	r3, [r3, #507]	; 0x1fb
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 809f 	beq.w	8000c86 <gpsParseTime+0x19e>
//		Set valid flag
			memset(&status->time.isValid, 1, sizeof(char));
 8000b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	331c      	adds	r3, #28
 8000b54:	2201      	movs	r2, #1
 8000b56:	2101      	movs	r1, #1
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 fc69 	bl	8005430 <memset>
//		Set time fields
			strncpy(&status->time.hour, (sentence.words[1]), 2);
 8000b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	331a      	adds	r3, #26
 8000b6e:	2202      	movs	r2, #2
 8000b70:	4619      	mov	r1, r3
 8000b72:	f004 fda5 	bl	80056c0 <strncpy>
			memset(&status->time.hour[2], NULL, sizeof(char));
 8000b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3302      	adds	r3, #2
 8000b82:	2201      	movs	r2, #1
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f004 fc52 	bl	8005430 <memset>
			strncpy(&status->time.minute, (sentence.words[1])+2, 2);
 8000b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	1cd8      	adds	r0, r3, #3
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	331a      	adds	r3, #26
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f004 fd8c 	bl	80056c0 <strncpy>
			memset(&status->time.minute[2], NULL, sizeof(char));
 8000ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000bac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3305      	adds	r3, #5
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 fc39 	bl	8005430 <memset>
			strncpy(&status->time.second, (sentence.words[1])+4, 2);
 8000bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000bc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	1d98      	adds	r0, r3, #6
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	331a      	adds	r3, #26
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f004 fd73 	bl	80056c0 <strncpy>
			memset(&status->time.second[2], NULL, sizeof(char));
 8000bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000bde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3308      	adds	r3, #8
 8000be6:	2201      	movs	r2, #1
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 fc20 	bl	8005430 <memset>
//		Set date fields
			strncpy(&status->time.day, (sentence.words[2]), 2);
 8000bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000bf4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f103 0009 	add.w	r0, r3, #9
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	332e      	adds	r3, #46	; 0x2e
 8000c04:	2202      	movs	r2, #2
 8000c06:	4619      	mov	r1, r3
 8000c08:	f004 fd5a 	bl	80056c0 <strncpy>
			memset(&status->time.day[2], NULL, sizeof(char));
 8000c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	330b      	adds	r3, #11
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 fc07 	bl	8005430 <memset>
			strncpy(&status->time.month, (sentence.words[3]), 2);
 8000c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f103 000c 	add.w	r0, r3, #12
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	3342      	adds	r3, #66	; 0x42
 8000c36:	2202      	movs	r2, #2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f004 fd41 	bl	80056c0 <strncpy>
			memset(&status->time.month[2], NULL, sizeof(char));
 8000c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	330e      	adds	r3, #14
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f004 fbee 	bl	8005430 <memset>
			strncpy(&status->time.year, (sentence.words[4]), 4);
 8000c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f103 000f 	add.w	r0, r3, #15
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	3356      	adds	r3, #86	; 0x56
 8000c68:	2204      	movs	r2, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f004 fd28 	bl	80056c0 <strncpy>
			memset(&status->time.year[4], NULL, sizeof(char));
 8000c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000c74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3313      	adds	r3, #19
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fbd5 	bl	8005430 <memset>
		}
}
 8000c86:	bf00      	nop
 8000c88:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	0800723c 	.word	0x0800723c

08000c94 <gpsParsePosition>:

void gpsParsePosition(gpsStatus* status, char* buffer){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ca0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ca4:	6018      	str	r0, [r3, #0]
 8000ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000caa:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000cae:	6019      	str	r1, [r3, #0]
	gpsSentence sentence;
		readSentence(buffer, &sentence, "GNRMC");
 8000cb0:	f107 010c 	add.w	r1, r7, #12
 8000cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cb8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <gpsParsePosition+0x4c>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	f7ff fdee 	bl	80008a0 <readSentence>
	// 		Check correctness
		if((strncmp(sentence.msgId, "GNRMC", 6)==0) & sentence.valid){
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	2206      	movs	r2, #6
 8000cca:	4905      	ldr	r1, [pc, #20]	; (8000ce0 <gpsParsePosition+0x4c>)
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 fce3 	bl	8005698 <strncmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0

		}
}
 8000cd6:	bf00      	nop
 8000cd8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	08007244 	.word	0x08007244

08000ce4 <gpsTestSentence>:
#include "gps.h"
#include "font13.h"

#define LCD_ROWS 10

void gpsTestSentence(gpsDevice* gpsModule, char cmd[6]){
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000cf0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8000cf4:	6018      	str	r0, [r3, #0]
 8000cf6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000cfa:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000cfe:	6019      	str	r1, [r3, #0]
	char text[50] = { 0 };
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d0a:	222e      	movs	r2, #46	; 0x2e
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f004 fb8e 	bl	8005430 <memset>

	gpsSentence testSentence;
	readSentence(&gpsModule->buffer, &testSentence, cmd);
 8000d14:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000d18:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	1d18      	adds	r0, r3, #4
 8000d20:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000d24:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000d28:	f107 0108 	add.w	r1, r7, #8
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	f7ff fdb7 	bl	80008a0 <readSentence>
	if(testSentence.valid == 1){
 8000d32:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000d36:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8000d3a:	f893 31fb 	ldrb.w	r3, [r3, #507]	; 0x1fb
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d140      	bne.n	8000dc4 <gpsTestSentence+0xe0>
		  for(uint8_t i = 0; i <= testSentence.wordNum; i++){
 8000d42:	2300      	movs	r3, #0
 8000d44:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 8000d48:	e031      	b.n	8000dae <gpsTestSentence+0xca>
			  sprintf(text, "W#%d %s", i, testSentence.words[i]);
 8000d4a:	f897 4237 	ldrb.w	r4, [r7, #567]	; 0x237
 8000d4e:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 8000d52:	f107 0108 	add.w	r1, r7, #8
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	3306      	adds	r3, #6
 8000d62:	f507 7001 	add.w	r0, r7, #516	; 0x204
 8000d66:	4622      	mov	r2, r4
 8000d68:	491c      	ldr	r1, [pc, #112]	; (8000ddc <gpsTestSentence+0xf8>)
 8000d6a:	f004 fbf7 	bl	800555c <siprintf>
//			  printf("W#%d: %s\n", i, testSentence.words[i]);
			  if(i < LCD_ROWS) lcdPutStr(0,i+1, text ,font13);
 8000d6e:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000d72:	2b09      	cmp	r3, #9
 8000d74:	d808      	bhi.n	8000d88 <gpsTestSentence+0xa4>
 8000d76:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000d7a:	1c59      	adds	r1, r3, #1
 8000d7c:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <gpsTestSentence+0xfc>)
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f96c 	bl	8001060 <lcdPutStr>
			  // only 11 lines can be displayed with this font
			  if(i >= LCD_ROWS) lcdPutStr(200,i+1-LCD_ROWS, text ,font13);
 8000d88:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000d8c:	2b09      	cmp	r3, #9
 8000d8e:	d909      	bls.n	8000da4 <gpsTestSentence+0xc0>
 8000d90:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000d94:	f1a3 0109 	sub.w	r1, r3, #9
 8000d98:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <gpsTestSentence+0xfc>)
 8000d9e:	20c8      	movs	r0, #200	; 0xc8
 8000da0:	f000 f95e 	bl	8001060 <lcdPutStr>
		  for(uint8_t i = 0; i <= testSentence.wordNum; i++){
 8000da4:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8000da8:	3301      	adds	r3, #1
 8000daa:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
 8000dae:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000db2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8000db6:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
 8000dba:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d9c3      	bls.n	8000d4a <gpsTestSentence+0x66>
//			  if(i >= LCD_ROWS) break;
		  }
		  } else {
			  lcdPutStr(0,1, "Checksum invalid!!!" ,font13);
		  }
}
 8000dc2:	e005      	b.n	8000dd0 <gpsTestSentence+0xec>
			  lcdPutStr(0,1, "Checksum invalid!!!" ,font13);
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <gpsTestSentence+0xfc>)
 8000dc6:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <gpsTestSentence+0x100>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 f948 	bl	8001060 <lcdPutStr>
}
 8000dd0:	bf00      	nop
 8000dd2:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd90      	pop	{r4, r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	0800724c 	.word	0x0800724c
 8000de0:	080072b0 	.word	0x080072b0
 8000de4:	08007254 	.word	0x08007254

08000de8 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8000df2:	2307      	movs	r3, #7
 8000df4:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8000e02:	e010      	b.n	8000e26 <reverse_uint8+0x3e>
		result = result << 1;
 8000e04:	7bbb      	ldrb	r3, [r7, #14]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	085b      	lsrs	r3, r3, #1
 8000e0e:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8000e18:	7bba      	ldrb	r2, [r7, #14]
 8000e1a:	7b7b      	ldrb	r3, [r7, #13]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	73bb      	strb	r3, [r7, #14]
		times--;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1eb      	bne.n	8000e04 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8000e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
	updateSetting(0);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f824 	bl	8000e90 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8000e48:	2300      	movs	r3, #0
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	e014      	b.n	8000e78 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8000e4e:	2300      	movs	r3, #0
 8000e50:	80bb      	strh	r3, [r7, #4]
 8000e52:	e00b      	b.n	8000e6c <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2232      	movs	r2, #50	; 0x32
 8000e58:	fb03 f202 	mul.w	r2, r3, r2
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <lcdClearBuffer+0x50>)
 8000e62:	21ff      	movs	r1, #255	; 0xff
 8000e64:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	80bb      	strh	r3, [r7, #4]
 8000e6c:	88bb      	ldrh	r3, [r7, #4]
 8000e6e:	2b31      	cmp	r3, #49	; 0x31
 8000e70:	d9f0      	bls.n	8000e54 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	3301      	adds	r3, #1
 8000e76:	71fb      	strb	r3, [r7, #7]
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2bef      	cmp	r3, #239	; 0xef
 8000e7c:	d9e7      	bls.n	8000e4e <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f000 f806 	bl	8000e90 <updateSetting>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000098 	.word	0x20000098

08000e90 <updateSetting>:

void updateSetting(uint8_t state){
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <updateSetting+0x1c>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	7013      	strb	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	20000000 	.word	0x20000000

08000eb0 <lcdPutChar>:
//		lcdBuffer[bufferLoc + 2] &= ~((dataBlock2 << (8 - offset)) | (dataBlock3 >> offset));
//		lcdBuffer[bufferLoc + 3] &= ~(dataBlock3 << (8 - offset));
//	}
//
//}
void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8000eb0:	b480      	push	{r7}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	80fb      	strh	r3, [r7, #6]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	717b      	strb	r3, [r7, #5]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	795b      	ldrb	r3, [r3, #5]
 8000ec8:	793a      	ldrb	r2, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d304      	bcc.n	8000ed8 <lcdPutChar+0x28>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	799b      	ldrb	r3, [r3, #6]
 8000ed2:	793a      	ldrb	r2, [r7, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d902      	bls.n	8000ede <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	79db      	ldrb	r3, [r3, #7]
 8000edc:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	885b      	ldrh	r3, [r3, #2]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	785b      	ldrb	r3, [r3, #1]
 8000efa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000efe:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8000f00:	2300      	movs	r3, #0
 8000f02:	75fb      	strb	r3, [r7, #23]
 8000f04:	e09d      	b.n	8001042 <lcdPutChar+0x192>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8000f06:	797a      	ldrb	r2, [r7, #5]
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	461a      	mov	r2, r3
 8000f16:	0091      	lsls	r1, r2, #2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	7cfb      	ldrb	r3, [r7, #19]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	4413      	add	r3, r2
 8000f28:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8000f2a:	793b      	ldrb	r3, [r7, #4]
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	7952      	ldrb	r2, [r2, #5]
 8000f30:	1a9b      	subs	r3, r3, r2
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	8852      	ldrh	r2, [r2, #2]
 8000f36:	fb03 f202 	mul.w	r2, r3, r2
 8000f3a:	7dfb      	ldrb	r3, [r7, #23]
 8000f3c:	7cb9      	ldrb	r1, [r7, #18]
 8000f3e:	fb01 f303 	mul.w	r3, r1, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3308      	adds	r3, #8
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	7d3b      	ldrb	r3, [r7, #20]
 8000f54:	fa42 f303 	asr.w	r3, r2, r3
 8000f58:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8000f5a:	8a3b      	ldrh	r3, [r7, #16]
 8000f5c:	4a3f      	ldr	r2, [pc, #252]	; (800105c <lcdPutChar+0x1ac>)
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	b25a      	sxtb	r2, r3
 8000f62:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	b25a      	sxtb	r2, r3
 8000f6e:	8a3b      	ldrh	r3, [r7, #16]
 8000f70:	b2d1      	uxtb	r1, r2
 8000f72:	4a3a      	ldr	r2, [pc, #232]	; (800105c <lcdPutChar+0x1ac>)
 8000f74:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b25a      	sxtb	r2, r3
 8000f82:	7d3b      	ldrb	r3, [r7, #20]
 8000f84:	f1c3 0308 	rsb	r3, r3, #8
 8000f88:	21ff      	movs	r1, #255	; 0xff
 8000f8a:	fa41 f303 	asr.w	r3, r1, r3
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	4013      	ands	r3, r2
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i <= (font->font_Width)>>3; i++){
 8000f96:	2301      	movs	r3, #1
 8000f98:	757b      	strb	r3, [r7, #21]
 8000f9a:	e029      	b.n	8000ff0 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 8000f9c:	7d7a      	ldrb	r2, [r7, #21]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	7a1b      	ldrb	r3, [r3, #8]
 8000fa8:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8000faa:	8a3a      	ldrh	r2, [r7, #16]
 8000fac:	7d7b      	ldrb	r3, [r7, #21]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a2a      	ldr	r2, [pc, #168]	; (800105c <lcdPutChar+0x1ac>)
 8000fb2:	5cd3      	ldrb	r3, [r2, r3]
 8000fb4:	b25a      	sxtb	r2, r3
 8000fb6:	7db9      	ldrb	r1, [r7, #22]
 8000fb8:	7d3b      	ldrb	r3, [r7, #20]
 8000fba:	f1c3 0308 	rsb	r3, r3, #8
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	b259      	sxtb	r1, r3
 8000fc4:	7af8      	ldrb	r0, [r7, #11]
 8000fc6:	7d3b      	ldrb	r3, [r7, #20]
 8000fc8:	fa40 f303 	asr.w	r3, r0, r3
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	430b      	orrs	r3, r1
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b259      	sxtb	r1, r3
 8000fda:	8a3a      	ldrh	r2, [r7, #16]
 8000fdc:	7d7b      	ldrb	r3, [r7, #21]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b2c9      	uxtb	r1, r1
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	; (800105c <lcdPutChar+0x1ac>)
 8000fe4:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8000fe6:	7afb      	ldrb	r3, [r7, #11]
 8000fe8:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i <= (font->font_Width)>>3; i++){
 8000fea:	7d7b      	ldrb	r3, [r7, #21]
 8000fec:	3301      	adds	r3, #1
 8000fee:	757b      	strb	r3, [r7, #21]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	7d7a      	ldrb	r2, [r7, #21]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d9ce      	bls.n	8000f9c <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width)>>3) + 1] &= ~(dataBlock << (8-offset));
 8000ffe:	8a3b      	ldrh	r3, [r7, #16]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	7812      	ldrb	r2, [r2, #0]
 8001004:	08d2      	lsrs	r2, r2, #3
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	4413      	add	r3, r2
 800100a:	3301      	adds	r3, #1
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <lcdPutChar+0x1ac>)
 800100e:	5cd3      	ldrb	r3, [r2, r3]
 8001010:	b25a      	sxtb	r2, r3
 8001012:	7db9      	ldrb	r1, [r7, #22]
 8001014:	7d3b      	ldrb	r3, [r7, #20]
 8001016:	f1c3 0308 	rsb	r3, r3, #8
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	b25b      	sxtb	r3, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	b25b      	sxtb	r3, r3
 8001024:	4013      	ands	r3, r2
 8001026:	b259      	sxtb	r1, r3
 8001028:	8a3b      	ldrh	r3, [r7, #16]
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	7812      	ldrb	r2, [r2, #0]
 800102e:	08d2      	lsrs	r2, r2, #3
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	4413      	add	r3, r2
 8001034:	3301      	adds	r3, #1
 8001036:	b2c9      	uxtb	r1, r1
 8001038:	4a08      	ldr	r2, [pc, #32]	; (800105c <lcdPutChar+0x1ac>)
 800103a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	3301      	adds	r3, #1
 8001040:	75fb      	strb	r3, [r7, #23]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	7dfa      	ldrb	r2, [r7, #23]
 8001048:	429a      	cmp	r2, r3
 800104a:	f4ff af5c 	bcc.w	8000f06 <lcdPutChar+0x56>
	}

}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	371c      	adds	r7, #28
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20000098 	.word	0x20000098

08001060 <lcdPutStr>:

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	60ba      	str	r2, [r7, #8]
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4603      	mov	r3, r0
 800106c:	81fb      	strh	r3, [r7, #14]
 800106e:	460b      	mov	r3, r1
 8001070:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8001072:	2300      	movs	r3, #0
 8001074:	75fb      	strb	r3, [r7, #23]
 8001076:	e01a      	b.n	80010ae <lcdPutStr+0x4e>
		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b29a      	uxth	r2, r3
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	b29b      	uxth	r3, r3
 8001082:	fb12 f303 	smulbb	r3, r2, r3
 8001086:	b29a      	uxth	r2, r3
 8001088:	89fb      	ldrh	r3, [r7, #14]
 800108a:	4413      	add	r3, r2
 800108c:	b298      	uxth	r0, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	785b      	ldrb	r3, [r3, #1]
 8001092:	7b7a      	ldrb	r2, [r7, #13]
 8001094:	fb12 f303 	smulbb	r3, r2, r3
 8001098:	b2d9      	uxtb	r1, r3
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	4413      	add	r3, r2
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f7ff ff04 	bl	8000eb0 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	3301      	adds	r3, #1
 80010ac:	75fb      	strb	r3, [r7, #23]
 80010ae:	7dfc      	ldrb	r4, [r7, #23]
 80010b0:	68b8      	ldr	r0, [r7, #8]
 80010b2:	f7ff f89d 	bl	80001f0 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	429c      	cmp	r4, r3
 80010ba:	d3dd      	bcc.n	8001078 <lcdPutStr+0x18>
//		  HAL_Delay(1);
		  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
	...

080010c8 <lcdRefresh>:
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;

}
void lcdRefresh(void){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	if(allowUpdate){
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <lcdRefresh+0x7c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d032      	beq.n	800113c <lcdRefresh+0x74>
		SMLCD_SCS_H;
 80010d6:	2201      	movs	r2, #1
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	481b      	ldr	r0, [pc, #108]	; (8001148 <lcdRefresh+0x80>)
 80010dc:	f001 f96c 	bl	80023b8 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 80010e0:	2301      	movs	r3, #1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	e01c      	b.n	8001120 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fe7d 	bl	8000de8 <reverse_uint8>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <lcdRefresh+0x84>)
 80010f4:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 80010f6:	2396      	movs	r3, #150	; 0x96
 80010f8:	2202      	movs	r2, #2
 80010fa:	4914      	ldr	r1, [pc, #80]	; (800114c <lcdRefresh+0x84>)
 80010fc:	4814      	ldr	r0, [pc, #80]	; (8001150 <lcdRefresh+0x88>)
 80010fe:	f001 feb0 	bl	8002e62 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	3b01      	subs	r3, #1
 8001106:	2232      	movs	r2, #50	; 0x32
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <lcdRefresh+0x8c>)
 800110e:	1899      	adds	r1, r3, r2
 8001110:	2396      	movs	r3, #150	; 0x96
 8001112:	2232      	movs	r2, #50	; 0x32
 8001114:	480e      	ldr	r0, [pc, #56]	; (8001150 <lcdRefresh+0x88>)
 8001116:	f001 fea4 	bl	8002e62 <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	3301      	adds	r3, #1
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2bf1      	cmp	r3, #241	; 0xf1
 8001124:	d9df      	bls.n	80010e6 <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8001126:	2396      	movs	r3, #150	; 0x96
 8001128:	2202      	movs	r2, #2
 800112a:	490b      	ldr	r1, [pc, #44]	; (8001158 <lcdRefresh+0x90>)
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <lcdRefresh+0x88>)
 800112e:	f001 fe98 	bl	8002e62 <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8001132:	2200      	movs	r2, #0
 8001134:	2140      	movs	r1, #64	; 0x40
 8001136:	4804      	ldr	r0, [pc, #16]	; (8001148 <lcdRefresh+0x80>)
 8001138:	f001 f93e 	bl	80023b8 <HAL_GPIO_WritePin>
	}
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000000 	.word	0x20000000
 8001148:	40020000 	.word	0x40020000
 800114c:	20000004 	.word	0x20000004
 8001150:	20002f78 	.word	0x20002f78
 8001154:	20000098 	.word	0x20000098
 8001158:	20000094 	.word	0x20000094

0800115c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800117c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00b      	beq.n	800119c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001184:	e000      	b.n	8001188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f9      	beq.n	8001186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <__io_putchar>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ffd1 	bl	800115c <ITM_SendChar>
	return(ch);
 80011ba:	687b      	ldr	r3, [r7, #4]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 80011ca:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011cc:	f000 fd32 	bl	8001c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d0:	f000 f8ae 	bl	8001330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d4:	f7ff f9e6 	bl	80005a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80011d8:	f000 fc28 	bl	8001a2c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80011dc:	f000 f940 	bl	8001460 <MX_SPI1_Init>
  MX_TIM1_Init();
 80011e0:	f000 fade 	bl	80017a0 <MX_TIM1_Init>
  MX_TIM10_Init();
 80011e4:	f000 fb7e 	bl	80018e4 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 80011e8:	f000 fc4a 	bl	8001a80 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart6, &znak, 1);

  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 80011ec:	4848      	ldr	r0, [pc, #288]	; (8001310 <main+0x14c>)
 80011ee:	f002 f83f 	bl	8003270 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80011f2:	4847      	ldr	r0, [pc, #284]	; (8001310 <main+0x14c>)
 80011f4:	f002 f88c 	bl	8003310 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011f8:	2100      	movs	r1, #0
 80011fa:	4845      	ldr	r0, [pc, #276]	; (8001310 <main+0x14c>)
 80011fc:	f002 f952 	bl	80034a4 <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 8001200:	4844      	ldr	r0, [pc, #272]	; (8001314 <main+0x150>)
 8001202:	f002 f885 	bl	8003310 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  gpsDevice gpsModule = initGps(&huart6);
 8001206:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800120a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800120e:	4942      	ldr	r1, [pc, #264]	; (8001318 <main+0x154>)
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff faab 	bl	800076c <initGps>
  gpsStatus gpsState;

  // Clear lcd
  lcdClearBuffer();
 8001216:	f7ff fe11 	bl	8000e3c <lcdClearBuffer>
  lcdRefresh();
 800121a:	f7ff ff55 	bl	80010c8 <lcdRefresh>
  while (1)
  {
	  // Get data from gpsModule
	  gpsModule.getData(&gpsModule);
 800121e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001222:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001226:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800122a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800122e:	4610      	mov	r0, r2
 8001230:	4798      	blx	r3
	  // Parse sentence from module buffer
//	  readSentence(&gpsModule.buffer, &testSentence, "GNZDA");
	  // Parse info to time
	  gpsModule.updateStatus(&gpsModule);
 8001232:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001236:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800123a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800123e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001242:	4610      	mov	r0, r2
 8001244:	4798      	blx	r3
	  lcdClearBuffer();
 8001246:	f7ff fdf9 	bl	8000e3c <lcdClearBuffer>
	  char timeText[50] = { 0 };
 800124a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800124e:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	3304      	adds	r3, #4
 8001258:	222e      	movs	r2, #46	; 0x2e
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f004 f8e7 	bl	8005430 <memset>
	  char dateText[50] = { 0 };
 8001262:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001266:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	3304      	adds	r3, #4
 8001270:	222e      	movs	r2, #46	; 0x2e
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f004 f8db 	bl	8005430 <memset>
	  sprintf(timeText, "Time:%s:%s:%s", gpsModule.status.time.hour, gpsModule.status.time.minute, gpsModule.status.time.second);
 800127a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800127e:	f203 2167 	addw	r1, r3, #615	; 0x267
 8001282:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001286:	f503 7219 	add.w	r2, r3, #612	; 0x264
 800128a:	1d38      	adds	r0, r7, #4
 800128c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001290:	f203 236a 	addw	r3, r3, #618	; 0x26a
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	460b      	mov	r3, r1
 8001298:	4920      	ldr	r1, [pc, #128]	; (800131c <main+0x158>)
 800129a:	f004 f95f 	bl	800555c <siprintf>
	  sprintf(dateText, "Date:%s-%s-%s", gpsModule.status.time.day, gpsModule.status.time.month, gpsModule.status.time.year);
 800129e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012a2:	f503 711c 	add.w	r1, r3, #624	; 0x270
 80012a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012aa:	f203 226d 	addw	r2, r3, #621	; 0x26d
 80012ae:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80012b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012b6:	f203 2373 	addw	r3, r3, #627	; 0x273
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	460b      	mov	r3, r1
 80012be:	4918      	ldr	r1, [pc, #96]	; (8001320 <main+0x15c>)
 80012c0:	f004 f94c 	bl	800555c <siprintf>
	  if(gpsModule.status.time.isValid == 1){
 80012c4:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80012c8:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80012cc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d10d      	bne.n	80012f0 <main+0x12c>
		  lcdPutStr(0,0, timeText ,font13);
 80012d4:	1d3a      	adds	r2, r7, #4
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <main+0x160>)
 80012d8:	2100      	movs	r1, #0
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff fec0 	bl	8001060 <lcdPutStr>
		  lcdPutStr(200,0, dateText ,font13);
 80012e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <main+0x160>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	20c8      	movs	r0, #200	; 0xc8
 80012ea:	f7ff feb9 	bl	8001060 <lcdPutStr>
 80012ee:	e005      	b.n	80012fc <main+0x138>
//		  }
	  } else {
		  lcdPutStr(0,0, "Checksum invalid!!!" ,font13);
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <main+0x160>)
 80012f2:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <main+0x164>)
 80012f4:	2100      	movs	r1, #0
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff feb2 	bl	8001060 <lcdPutStr>
	  }
	  gpsTestSentence(&gpsModule, "GNRMC");
 80012fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001300:	490a      	ldr	r1, [pc, #40]	; (800132c <main+0x168>)
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fcee 	bl	8000ce4 <gpsTestSentence>
	  lcdRefresh();
 8001308:	f7ff fede 	bl	80010c8 <lcdRefresh>
  {
 800130c:	e787      	b.n	800121e <main+0x5a>
 800130e:	bf00      	nop
 8001310:	20002fd4 	.word	0x20002fd4
 8001314:	2000301c 	.word	0x2000301c
 8001318:	200030a8 	.word	0x200030a8
 800131c:	08007268 	.word	0x08007268
 8001320:	08007278 	.word	0x08007278
 8001324:	0800830c 	.word	0x0800830c
 8001328:	08007288 	.word	0x08007288
 800132c:	0800729c 	.word	0x0800729c

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b094      	sub	sp, #80	; 0x50
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	2230      	movs	r2, #48	; 0x30
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f004 f876 	bl	8005430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <SystemClock_Config+0xcc>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a27      	ldr	r2, [pc, #156]	; (80013fc <SystemClock_Config+0xcc>)
 800135e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
 8001364:	4b25      	ldr	r3, [pc, #148]	; (80013fc <SystemClock_Config+0xcc>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	4b22      	ldr	r3, [pc, #136]	; (8001400 <SystemClock_Config+0xd0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a21      	ldr	r2, [pc, #132]	; (8001400 <SystemClock_Config+0xd0>)
 800137a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <SystemClock_Config+0xd0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800138c:	2301      	movs	r3, #1
 800138e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001390:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001396:	2302      	movs	r3, #2
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013a0:	2304      	movs	r3, #4
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013a4:	23a8      	movs	r3, #168	; 0xa8
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ac:	2307      	movs	r3, #7
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 f833 	bl	8002420 <HAL_RCC_OscConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013c0:	f000 f840 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c4:	230f      	movs	r3, #15
 80013c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c8:	2302      	movs	r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2105      	movs	r1, #5
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fa94 	bl	8002910 <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013ee:	f000 f829 	bl	8001444 <Error_Handler>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3750      	adds	r7, #80	; 0x50
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000

08001404 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a05      	ldr	r2, [pc, #20]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d103      	bne.n	800141e <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001416:	2101      	movs	r1, #1
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800141a:	f000 ffe6 	bl	80023ea <HAL_GPIO_TogglePin>
//		lcdRefresh();

	}
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40014400 	.word	0x40014400
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_UART_RxCpltCallback>:
char currChar, index;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
//		} else {
////			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//			HAL_UART_Receive_IT(&huart6, &znak,1);
//		}
	}
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001452:	4802      	ldr	r0, [pc, #8]	; (800145c <Error_Handler+0x18>)
 8001454:	f000 ffb0 	bl	80023b8 <HAL_GPIO_WritePin>
  while (1)
 8001458:	e7fe      	b.n	8001458 <Error_Handler+0x14>
 800145a:	bf00      	nop
 800145c:	40020400 	.word	0x40020400

08001460 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_SPI1_Init+0x64>)
 8001466:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <MX_SPI1_Init+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <MX_SPI1_Init+0x64>)
 800146c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001470:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_SPI1_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_SPI1_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_SPI1_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_SPI1_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_SPI1_Init+0x64>)
 800148c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001490:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_SPI1_Init+0x64>)
 8001494:	2220      	movs	r2, #32
 8001496:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_SPI1_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_SPI1_Init+0x64>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_SPI1_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_SPI1_Init+0x64>)
 80014ac:	220a      	movs	r2, #10
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_SPI1_Init+0x64>)
 80014b2:	f001 fc4d 	bl	8002d50 <HAL_SPI_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014bc:	f7ff ffc2 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20002f78 	.word	0x20002f78
 80014c8:	40013000 	.word	0x40013000

080014cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_SPI_MspInit+0x84>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d12b      	bne.n	8001546 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_SPI_MspInit+0x88>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_SPI_MspInit+0x88>)
 80014f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_SPI_MspInit+0x88>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_SPI_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a10      	ldr	r2, [pc, #64]	; (8001554 <HAL_SPI_MspInit+0x88>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_SPI_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001526:	23a0      	movs	r3, #160	; 0xa0
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001536:	2305      	movs	r3, #5
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <HAL_SPI_MspInit+0x8c>)
 8001542:	f000 fd8d 	bl	8002060 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40013000 	.word	0x40013000
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_MspInit+0x4c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <HAL_MspInit+0x4c>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <HAL_MspInit+0x4c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_MspInit+0x4c>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_MspInit+0x4c>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_MspInit+0x4c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	Error_Handler();
 80015b6:	f7ff ff45 	bl	8001444 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x8>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 fb6c 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800160a:	f002 f813 	bl	8003634 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001610:	f002 f810 	bl	8003634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20002fd4 	.word	0x20002fd4
 800161c:	2000301c 	.word	0x2000301c

08001620 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <USART6_IRQHandler+0x10>)
 8001626:	f002 ffa1 	bl	800456c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200030a8 	.word	0x200030a8

08001634 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	e00a      	b.n	800165c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001646:	f3af 8000 	nop.w
 800164a:	4601      	mov	r1, r0
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	60ba      	str	r2, [r7, #8]
 8001652:	b2ca      	uxtb	r2, r1
 8001654:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbf0      	blt.n	8001646 <_read+0x12>
	}

return len;
 8001664:	687b      	ldr	r3, [r7, #4]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e009      	b.n	8001694 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	60ba      	str	r2, [r7, #8]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fd8e 	bl	80011aa <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	dbf1      	blt.n	8001680 <_write+0x12>
	}
	return len;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_close>:

int _close(int file)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	return -1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ce:	605a      	str	r2, [r3, #4]
	return 0;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_isatty>:

int _isatty(int file)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
	return 1;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <_sbrk+0x5c>)
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <_sbrk+0x60>)
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <_sbrk+0x64>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <_sbrk+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	429a      	cmp	r2, r3
 800173e:	d207      	bcs.n	8001750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001740:	f003 fe3e 	bl	80053c0 <__errno>
 8001744:	4603      	mov	r3, r0
 8001746:	220c      	movs	r2, #12
 8001748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	e009      	b.n	8001764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <_sbrk+0x64>)
 8001760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20030000 	.word	0x20030000
 8001770:	00000400 	.word	0x00000400
 8001774:	20002fd0 	.word	0x20002fd0
 8001778:	20003100 	.word	0x20003100

0800177c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <SystemInit+0x20>)
 8001782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <SystemInit+0x20>)
 8001788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800178c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b096      	sub	sp, #88	; 0x58
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2220      	movs	r2, #32
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 fe29 	bl	8005430 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <MX_TIM1_Init+0x13c>)
 80017e0:	4a3f      	ldr	r2, [pc, #252]	; (80018e0 <MX_TIM1_Init+0x140>)
 80017e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 80017e4:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <MX_TIM1_Init+0x13c>)
 80017e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80017ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <MX_TIM1_Init+0x13c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 80017f2:	4b3a      	ldr	r3, [pc, #232]	; (80018dc <MX_TIM1_Init+0x13c>)
 80017f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b38      	ldr	r3, [pc, #224]	; (80018dc <MX_TIM1_Init+0x13c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001800:	4b36      	ldr	r3, [pc, #216]	; (80018dc <MX_TIM1_Init+0x13c>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <MX_TIM1_Init+0x13c>)
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800180c:	4833      	ldr	r0, [pc, #204]	; (80018dc <MX_TIM1_Init+0x13c>)
 800180e:	f001 fd2f 	bl	8003270 <HAL_TIM_Base_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001818:	f7ff fe14 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001820:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001822:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001826:	4619      	mov	r1, r3
 8001828:	482c      	ldr	r0, [pc, #176]	; (80018dc <MX_TIM1_Init+0x13c>)
 800182a:	f002 f8cd 	bl	80039c8 <HAL_TIM_ConfigClockSource>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001834:	f7ff fe06 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001838:	4828      	ldr	r0, [pc, #160]	; (80018dc <MX_TIM1_Init+0x13c>)
 800183a:	f001 fdd9 	bl	80033f0 <HAL_TIM_PWM_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001844:	f7ff fdfe 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001854:	4619      	mov	r1, r3
 8001856:	4821      	ldr	r0, [pc, #132]	; (80018dc <MX_TIM1_Init+0x13c>)
 8001858:	f002 fcb6 	bl	80041c8 <HAL_TIMEx_MasterConfigSynchronization>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001862:	f7ff fdef 	bl	8001444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001866:	2360      	movs	r3, #96	; 0x60
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 800186a:	2302      	movs	r3, #2
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186e:	2300      	movs	r3, #0
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001872:	2300      	movs	r3, #0
 8001874:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001886:	2200      	movs	r2, #0
 8001888:	4619      	mov	r1, r3
 800188a:	4814      	ldr	r0, [pc, #80]	; (80018dc <MX_TIM1_Init+0x13c>)
 800188c:	f001 ffda 	bl	8003844 <HAL_TIM_PWM_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001896:	f7ff fdd5 	bl	8001444 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	4619      	mov	r1, r3
 80018bc:	4807      	ldr	r0, [pc, #28]	; (80018dc <MX_TIM1_Init+0x13c>)
 80018be:	f002 fcff 	bl	80042c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80018c8:	f7ff fdbc 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018cc:	4803      	ldr	r0, [pc, #12]	; (80018dc <MX_TIM1_Init+0x13c>)
 80018ce:	f000 f873 	bl	80019b8 <HAL_TIM_MspPostInit>

}
 80018d2:	bf00      	nop
 80018d4:	3758      	adds	r7, #88	; 0x58
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20002fd4 	.word	0x20002fd4
 80018e0:	40010000 	.word	0x40010000

080018e4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_TIM10_Init+0x40>)
 80018ea:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <MX_TIM10_Init+0x44>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <MX_TIM10_Init+0x40>)
 80018f0:	f244 129f 	movw	r2, #16799	; 0x419f
 80018f4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_TIM10_Init+0x40>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 499;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_TIM10_Init+0x40>)
 80018fe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001902:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <MX_TIM10_Init+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_TIM10_Init+0x40>)
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <MX_TIM10_Init+0x40>)
 8001912:	f001 fcad 	bl	8003270 <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800191c:	f7ff fd92 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000301c 	.word	0x2000301c
 8001928:	40014400 	.word	0x40014400

0800192c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_TIM_Base_MspInit+0x80>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d116      	bne.n	800196c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_TIM_Base_MspInit+0x84>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <HAL_TIM_Base_MspInit+0x84>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_TIM_Base_MspInit+0x84>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	2019      	movs	r0, #25
 8001960:	f000 fab5 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001964:	2019      	movs	r0, #25
 8001966:	f000 face 	bl	8001f06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800196a:	e01a      	b.n	80019a2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM10)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <HAL_TIM_Base_MspInit+0x88>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d115      	bne.n	80019a2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_TIM_Base_MspInit+0x84>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <HAL_TIM_Base_MspInit+0x84>)
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_TIM_Base_MspInit+0x84>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2019      	movs	r0, #25
 8001998:	f000 fa99 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800199c:	2019      	movs	r0, #25
 800199e:	f000 fab2 	bl	8001f06 <HAL_NVIC_EnableIRQ>
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40010000 	.word	0x40010000
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40014400 	.word	0x40014400

080019b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_TIM_MspPostInit+0x68>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d11e      	bne.n	8001a18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_TIM_MspPostInit+0x6c>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <HAL_TIM_MspPostInit+0x6c>)
 80019e4:	f043 0310 	orr.w	r3, r3, #16
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_TIM_MspPostInit+0x6c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	4619      	mov	r1, r3
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <HAL_TIM_MspPostInit+0x70>)
 8001a14:	f000 fb24 	bl	8002060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a18:	bf00      	nop
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40010000 	.word	0x40010000
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40021000 	.word	0x40021000

08001a2c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_USART3_UART_Init+0x4c>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <MX_USART3_UART_Init+0x50>)
 8001a34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <MX_USART3_UART_Init+0x4c>)
 8001a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_USART3_UART_Init+0x4c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_USART3_UART_Init+0x4c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <MX_USART3_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_USART3_UART_Init+0x4c>)
 8001a52:	220c      	movs	r2, #12
 8001a54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <MX_USART3_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_USART3_UART_Init+0x4c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_USART3_UART_Init+0x4c>)
 8001a64:	f002 fc92 	bl	800438c <HAL_UART_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a6e:	f7ff fce9 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20003064 	.word	0x20003064
 8001a7c:	40004800 	.word	0x40004800

08001a80 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_USART6_UART_Init+0x4c>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <MX_USART6_UART_Init+0x50>)
 8001a88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_USART6_UART_Init+0x4c>)
 8001a8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_USART6_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_USART6_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_USART6_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_USART6_UART_Init+0x4c>)
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_USART6_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_USART6_UART_Init+0x4c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_USART6_UART_Init+0x4c>)
 8001ab8:	f002 fc68 	bl	800438c <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ac2:	f7ff fcbf 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200030a8 	.word	0x200030a8
 8001ad0:	40011400 	.word	0x40011400

08001ad4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a36      	ldr	r2, [pc, #216]	; (8001bcc <HAL_UART_MspInit+0xf8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d12d      	bne.n	8001b52 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a34      	ldr	r2, [pc, #208]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a2d      	ldr	r2, [pc, #180]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b40:	2307      	movs	r3, #7
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4822      	ldr	r0, [pc, #136]	; (8001bd4 <HAL_UART_MspInit+0x100>)
 8001b4c:	f000 fa88 	bl	8002060 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001b50:	e038      	b.n	8001bc4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <HAL_UART_MspInit+0x104>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d133      	bne.n	8001bc4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b64:	4a1a      	ldr	r2, [pc, #104]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001b66:	f043 0320 	orr.w	r3, r3, #32
 8001b6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b70:	f003 0320 	and.w	r3, r3, #32
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b94:	23c0      	movs	r3, #192	; 0xc0
 8001b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	4619      	mov	r1, r3
 8001bae:	480b      	ldr	r0, [pc, #44]	; (8001bdc <HAL_UART_MspInit+0x108>)
 8001bb0:	f000 fa56 	bl	8002060 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2047      	movs	r0, #71	; 0x47
 8001bba:	f000 f988 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bbe:	2047      	movs	r0, #71	; 0x47
 8001bc0:	f000 f9a1 	bl	8001f06 <HAL_NVIC_EnableIRQ>
}
 8001bc4:	bf00      	nop
 8001bc6:	3730      	adds	r7, #48	; 0x30
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40004800 	.word	0x40004800
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	40011400 	.word	0x40011400
 8001bdc:	40020800 	.word	0x40020800

08001be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c18 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001be6:	490e      	ldr	r1, [pc, #56]	; (8001c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bfc:	4c0b      	ldr	r4, [pc, #44]	; (8001c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c0a:	f7ff fdb7 	bl	800177c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f003 fbdd 	bl	80053cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c12:	f7ff fad7 	bl	80011c4 <main>
  bx  lr    
 8001c16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c20:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001c24:	08009544 	.word	0x08009544
  ldr r2, =_sbss
 8001c28:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001c2c:	20003100 	.word	0x20003100

08001c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC_IRQHandler>
	...

08001c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_Init+0x40>)
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_Init+0x40>)
 8001c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_Init+0x40>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 f92b 	bl	8001eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c62:	2000      	movs	r0, #0
 8001c64:	f000 f808 	bl	8001c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c68:	f7ff fc78 	bl	800155c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x54>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x58>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f943 	bl	8001f22 <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f000 f90b 	bl	8001ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_InitTick+0x5c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	20000010 	.word	0x20000010
 8001cd4:	2000000c 	.word	0x2000000c

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000010 	.word	0x20000010
 8001cfc:	200030ec 	.word	0x200030ec

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200030ec 	.word	0x200030ec

08001d18 <__NVIC_SetPriorityGrouping>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_GetPriorityGrouping>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_EnableIRQ>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db0b      	blt.n	8001da6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4907      	ldr	r1, [pc, #28]	; (8001db4 <__NVIC_EnableIRQ+0x38>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000e100 	.word	0xe000e100

08001db8 <__NVIC_SetPriority>:
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db0a      	blt.n	8001de2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	490c      	ldr	r1, [pc, #48]	; (8001e04 <__NVIC_SetPriority+0x4c>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001de0:	e00a      	b.n	8001df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4908      	ldr	r1, [pc, #32]	; (8001e08 <__NVIC_SetPriority+0x50>)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3b04      	subs	r3, #4
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	761a      	strb	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <NVIC_EncodePriority>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f1c3 0307 	rsb	r3, r3, #7
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	bf28      	it	cs
 8001e2a:	2304      	movcs	r3, #4
 8001e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3304      	adds	r3, #4
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d902      	bls.n	8001e3c <NVIC_EncodePriority+0x30>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b03      	subs	r3, #3
 8001e3a:	e000      	b.n	8001e3e <NVIC_EncodePriority+0x32>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	4313      	orrs	r3, r2
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <SysTick_Config>:
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e84:	d301      	bcc.n	8001e8a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00f      	b.n	8001eaa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <SysTick_Config+0x40>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e92:	210f      	movs	r1, #15
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f7ff ff8e 	bl	8001db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <SysTick_Config+0x40>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <SysTick_Config+0x40>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff29 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee0:	f7ff ff3e 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f7ff ff8e 	bl	8001e0c <NVIC_EncodePriority>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff5d 	bl	8001db8 <__NVIC_SetPriority>
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff31 	bl	8001d7c <__NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffa2 	bl	8001e74 <SysTick_Config>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff feda 	bl	8001d00 <HAL_GetTick>
 8001f4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d008      	beq.n	8001f6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e052      	b.n	8002012 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0216 	bic.w	r2, r2, #22
 8001f7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d103      	bne.n	8001f9c <HAL_DMA_Abort+0x62>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0208 	bic.w	r2, r2, #8
 8001faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fbc:	e013      	b.n	8001fe6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fbe:	f7ff fe9f 	bl	8001d00 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d90c      	bls.n	8001fe6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e015      	b.n	8002012 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1e4      	bne.n	8001fbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	223f      	movs	r2, #63	; 0x3f
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d004      	beq.n	8002038 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2280      	movs	r2, #128	; 0x80
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e00c      	b.n	8002052 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2205      	movs	r2, #5
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	e177      	b.n	800236c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800207c:	2201      	movs	r2, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 8166 	bne.w	8002366 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d005      	beq.n	80020b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d130      	bne.n	8002114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2203      	movs	r2, #3
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 0201 	and.w	r2, r3, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b03      	cmp	r3, #3
 800211e:	d017      	beq.n	8002150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d123      	bne.n	80021a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	08da      	lsrs	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80c0 	beq.w	8002366 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b66      	ldr	r3, [pc, #408]	; (8002384 <HAL_GPIO_Init+0x324>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4a65      	ldr	r2, [pc, #404]	; (8002384 <HAL_GPIO_Init+0x324>)
 80021f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f4:	6453      	str	r3, [r2, #68]	; 0x44
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_GPIO_Init+0x324>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002202:	4a61      	ldr	r2, [pc, #388]	; (8002388 <HAL_GPIO_Init+0x328>)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	3302      	adds	r3, #2
 800220a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	220f      	movs	r2, #15
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a58      	ldr	r2, [pc, #352]	; (800238c <HAL_GPIO_Init+0x32c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d037      	beq.n	800229e <HAL_GPIO_Init+0x23e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a57      	ldr	r2, [pc, #348]	; (8002390 <HAL_GPIO_Init+0x330>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_GPIO_Init+0x23a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a56      	ldr	r2, [pc, #344]	; (8002394 <HAL_GPIO_Init+0x334>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d02b      	beq.n	8002296 <HAL_GPIO_Init+0x236>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a55      	ldr	r2, [pc, #340]	; (8002398 <HAL_GPIO_Init+0x338>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d025      	beq.n	8002292 <HAL_GPIO_Init+0x232>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a54      	ldr	r2, [pc, #336]	; (800239c <HAL_GPIO_Init+0x33c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01f      	beq.n	800228e <HAL_GPIO_Init+0x22e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a53      	ldr	r2, [pc, #332]	; (80023a0 <HAL_GPIO_Init+0x340>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d019      	beq.n	800228a <HAL_GPIO_Init+0x22a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a52      	ldr	r2, [pc, #328]	; (80023a4 <HAL_GPIO_Init+0x344>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_GPIO_Init+0x226>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a51      	ldr	r2, [pc, #324]	; (80023a8 <HAL_GPIO_Init+0x348>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00d      	beq.n	8002282 <HAL_GPIO_Init+0x222>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a50      	ldr	r2, [pc, #320]	; (80023ac <HAL_GPIO_Init+0x34c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <HAL_GPIO_Init+0x21e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4f      	ldr	r2, [pc, #316]	; (80023b0 <HAL_GPIO_Init+0x350>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_GPIO_Init+0x21a>
 8002276:	2309      	movs	r3, #9
 8002278:	e012      	b.n	80022a0 <HAL_GPIO_Init+0x240>
 800227a:	230a      	movs	r3, #10
 800227c:	e010      	b.n	80022a0 <HAL_GPIO_Init+0x240>
 800227e:	2308      	movs	r3, #8
 8002280:	e00e      	b.n	80022a0 <HAL_GPIO_Init+0x240>
 8002282:	2307      	movs	r3, #7
 8002284:	e00c      	b.n	80022a0 <HAL_GPIO_Init+0x240>
 8002286:	2306      	movs	r3, #6
 8002288:	e00a      	b.n	80022a0 <HAL_GPIO_Init+0x240>
 800228a:	2305      	movs	r3, #5
 800228c:	e008      	b.n	80022a0 <HAL_GPIO_Init+0x240>
 800228e:	2304      	movs	r3, #4
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x240>
 8002292:	2303      	movs	r3, #3
 8002294:	e004      	b.n	80022a0 <HAL_GPIO_Init+0x240>
 8002296:	2302      	movs	r3, #2
 8002298:	e002      	b.n	80022a0 <HAL_GPIO_Init+0x240>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_GPIO_Init+0x240>
 800229e:	2300      	movs	r3, #0
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	f002 0203 	and.w	r2, r2, #3
 80022a6:	0092      	lsls	r2, r2, #2
 80022a8:	4093      	lsls	r3, r2
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b0:	4935      	ldr	r1, [pc, #212]	; (8002388 <HAL_GPIO_Init+0x328>)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_GPIO_Init+0x354>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e2:	4a34      	ldr	r2, [pc, #208]	; (80023b4 <HAL_GPIO_Init+0x354>)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e8:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <HAL_GPIO_Init+0x354>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800230c:	4a29      	ldr	r2, [pc, #164]	; (80023b4 <HAL_GPIO_Init+0x354>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002312:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <HAL_GPIO_Init+0x354>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002336:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <HAL_GPIO_Init+0x354>)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_GPIO_Init+0x354>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002360:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <HAL_GPIO_Init+0x354>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3301      	adds	r3, #1
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2b0f      	cmp	r3, #15
 8002370:	f67f ae84 	bls.w	800207c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	40013800 	.word	0x40013800
 800238c:	40020000 	.word	0x40020000
 8002390:	40020400 	.word	0x40020400
 8002394:	40020800 	.word	0x40020800
 8002398:	40020c00 	.word	0x40020c00
 800239c:	40021000 	.word	0x40021000
 80023a0:	40021400 	.word	0x40021400
 80023a4:	40021800 	.word	0x40021800
 80023a8:	40021c00 	.word	0x40021c00
 80023ac:	40022000 	.word	0x40022000
 80023b0:	40022400 	.word	0x40022400
 80023b4:	40013c00 	.word	0x40013c00

080023b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d4:	e003      	b.n	80023de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	619a      	str	r2, [r3, #24]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b085      	sub	sp, #20
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023fc:	887a      	ldrh	r2, [r7, #2]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	041a      	lsls	r2, r3, #16
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43d9      	mvns	r1, r3
 8002408:	887b      	ldrh	r3, [r7, #2]
 800240a:	400b      	ands	r3, r1
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	619a      	str	r2, [r3, #24]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e267      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d075      	beq.n	800252a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243e:	4b88      	ldr	r3, [pc, #544]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b04      	cmp	r3, #4
 8002448:	d00c      	beq.n	8002464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244a:	4b85      	ldr	r3, [pc, #532]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002452:	2b08      	cmp	r3, #8
 8002454:	d112      	bne.n	800247c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002456:	4b82      	ldr	r3, [pc, #520]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002462:	d10b      	bne.n	800247c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	4b7e      	ldr	r3, [pc, #504]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d05b      	beq.n	8002528 <HAL_RCC_OscConfig+0x108>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d157      	bne.n	8002528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e242      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002484:	d106      	bne.n	8002494 <HAL_RCC_OscConfig+0x74>
 8002486:	4b76      	ldr	r3, [pc, #472]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a75      	ldr	r2, [pc, #468]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e01d      	b.n	80024d0 <HAL_RCC_OscConfig+0xb0>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x98>
 800249e:	4b70      	ldr	r3, [pc, #448]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6f      	ldr	r2, [pc, #444]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a6c      	ldr	r2, [pc, #432]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0xb0>
 80024b8:	4b69      	ldr	r3, [pc, #420]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a68      	ldr	r2, [pc, #416]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b66      	ldr	r3, [pc, #408]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a65      	ldr	r2, [pc, #404]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff fc12 	bl	8001d00 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff fc0e 	bl	8001d00 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e207      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0xc0>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff fbfe 	bl	8001d00 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff fbfa 	bl	8001d00 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1f3      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	4b51      	ldr	r3, [pc, #324]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0xe8>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d063      	beq.n	80025fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002536:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254a:	2b08      	cmp	r3, #8
 800254c:	d11c      	bne.n	8002588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254e:	4b44      	ldr	r3, [pc, #272]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d116      	bne.n	8002588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x152>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e1c7      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b3b      	ldr	r3, [pc, #236]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4937      	ldr	r1, [pc, #220]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	e03a      	b.n	80025fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002590:	4b34      	ldr	r3, [pc, #208]	; (8002664 <HAL_RCC_OscConfig+0x244>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7ff fbb3 	bl	8001d00 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259e:	f7ff fbaf 	bl	8001d00 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e1a8      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b28      	ldr	r3, [pc, #160]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4925      	ldr	r1, [pc, #148]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_RCC_OscConfig+0x244>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7ff fb92 	bl	8001d00 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e0:	f7ff fb8e 	bl	8001d00 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e187      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d036      	beq.n	8002678 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <HAL_RCC_OscConfig+0x248>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7ff fb72 	bl	8001d00 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002620:	f7ff fb6e 	bl	8001d00 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e167      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_OscConfig+0x240>)
 8002634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x200>
 800263e:	e01b      	b.n	8002678 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_OscConfig+0x248>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7ff fb5b 	bl	8001d00 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	e00e      	b.n	800266c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264e:	f7ff fb57 	bl	8001d00 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d907      	bls.n	800266c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e150      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
 8002660:	40023800 	.word	0x40023800
 8002664:	42470000 	.word	0x42470000
 8002668:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	4b88      	ldr	r3, [pc, #544]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800266e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ea      	bne.n	800264e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8097 	beq.w	80027b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b81      	ldr	r3, [pc, #516]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	4b7d      	ldr	r3, [pc, #500]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a7c      	ldr	r2, [pc, #496]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b7a      	ldr	r3, [pc, #488]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	4b77      	ldr	r3, [pc, #476]	; (8002894 <HAL_RCC_OscConfig+0x474>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d118      	bne.n	80026f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c2:	4b74      	ldr	r3, [pc, #464]	; (8002894 <HAL_RCC_OscConfig+0x474>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a73      	ldr	r2, [pc, #460]	; (8002894 <HAL_RCC_OscConfig+0x474>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ce:	f7ff fb17 	bl	8001d00 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d6:	f7ff fb13 	bl	8001d00 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e10c      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <HAL_RCC_OscConfig+0x474>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x2ea>
 80026fc:	4b64      	ldr	r3, [pc, #400]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	4a63      	ldr	r2, [pc, #396]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	; 0x70
 8002708:	e01c      	b.n	8002744 <HAL_RCC_OscConfig+0x324>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b05      	cmp	r3, #5
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0x30c>
 8002712:	4b5f      	ldr	r3, [pc, #380]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	4a5e      	ldr	r2, [pc, #376]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6713      	str	r3, [r2, #112]	; 0x70
 800271e:	4b5c      	ldr	r3, [pc, #368]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	4a5b      	ldr	r2, [pc, #364]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6713      	str	r3, [r2, #112]	; 0x70
 800272a:	e00b      	b.n	8002744 <HAL_RCC_OscConfig+0x324>
 800272c:	4b58      	ldr	r3, [pc, #352]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a57      	ldr	r2, [pc, #348]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	4b55      	ldr	r3, [pc, #340]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a54      	ldr	r2, [pc, #336]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800273e:	f023 0304 	bic.w	r3, r3, #4
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d015      	beq.n	8002778 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7ff fad8 	bl	8001d00 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7ff fad4 	bl	8001d00 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0cb      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276a:	4b49      	ldr	r3, [pc, #292]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0ee      	beq.n	8002754 <HAL_RCC_OscConfig+0x334>
 8002776:	e014      	b.n	80027a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002778:	f7ff fac2 	bl	8001d00 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277e:	e00a      	b.n	8002796 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7ff fabe 	bl	8001d00 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e0b5      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002796:	4b3e      	ldr	r3, [pc, #248]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1ee      	bne.n	8002780 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4b39      	ldr	r3, [pc, #228]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	4a38      	ldr	r2, [pc, #224]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80027ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a1 	beq.w	8002900 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027be:	4b34      	ldr	r3, [pc, #208]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d05c      	beq.n	8002884 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d141      	bne.n	8002856 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b31      	ldr	r3, [pc, #196]	; (8002898 <HAL_RCC_OscConfig+0x478>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff fa92 	bl	8001d00 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e0:	f7ff fa8e 	bl	8001d00 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e087      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b27      	ldr	r3, [pc, #156]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	3b01      	subs	r3, #1
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	491b      	ldr	r1, [pc, #108]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x478>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7ff fa67 	bl	8001d00 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002836:	f7ff fa63 	bl	8001d00 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e05c      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x416>
 8002854:	e054      	b.n	8002900 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_RCC_OscConfig+0x478>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7ff fa50 	bl	8001d00 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7ff fa4c 	bl	8001d00 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e045      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_OscConfig+0x470>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x444>
 8002882:	e03d      	b.n	8002900 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d107      	bne.n	800289c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e038      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
 8002890:	40023800 	.word	0x40023800
 8002894:	40007000 	.word	0x40007000
 8002898:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x4ec>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d028      	beq.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d121      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d11a      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d111      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	3b01      	subs	r3, #1
 80028e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0cc      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002924:	4b68      	ldr	r3, [pc, #416]	; (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d90c      	bls.n	800294c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b65      	ldr	r3, [pc, #404]	; (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b63      	ldr	r3, [pc, #396]	; (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0b8      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d020      	beq.n	800299a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002964:	4b59      	ldr	r3, [pc, #356]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a58      	ldr	r2, [pc, #352]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800296e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800297c:	4b53      	ldr	r3, [pc, #332]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a52      	ldr	r2, [pc, #328]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002988:	4b50      	ldr	r3, [pc, #320]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	494d      	ldr	r1, [pc, #308]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d044      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d119      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e07f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d003      	beq.n	80029ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ce:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e06f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e067      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ee:	4b37      	ldr	r3, [pc, #220]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4934      	ldr	r1, [pc, #208]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a00:	f7ff f97e 	bl	8001d00 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7ff f97a 	bl	8001d00 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e04f      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 020c 	and.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d1eb      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a30:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d20c      	bcs.n	8002a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b22      	ldr	r3, [pc, #136]	; (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e032      	b.n	8002abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4916      	ldr	r1, [pc, #88]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	490e      	ldr	r1, [pc, #56]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a96:	f000 f821 	bl	8002adc <HAL_RCC_GetSysClockFreq>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	490a      	ldr	r1, [pc, #40]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	5ccb      	ldrb	r3, [r1, r3]
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff f8de 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023c00 	.word	0x40023c00
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	08009368 	.word	0x08009368
 8002ad4:	20000008 	.word	0x20000008
 8002ad8:	2000000c 	.word	0x2000000c

08002adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae0:	b094      	sub	sp, #80	; 0x50
 8002ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae8:	2300      	movs	r3, #0
 8002aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aec:	2300      	movs	r3, #0
 8002aee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af4:	4b79      	ldr	r3, [pc, #484]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d00d      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x40>
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	f200 80e1 	bhi.w	8002cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x34>
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b0e:	e0db      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4b73      	ldr	r3, [pc, #460]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b14:	e0db      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b16:	4b73      	ldr	r3, [pc, #460]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b1a:	e0d8      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b1c:	4b6f      	ldr	r3, [pc, #444]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b26:	4b6d      	ldr	r3, [pc, #436]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d063      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b32:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	2200      	movs	r2, #0
 8002b3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b44:	633b      	str	r3, [r7, #48]	; 0x30
 8002b46:	2300      	movs	r3, #0
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b4e:	4622      	mov	r2, r4
 8002b50:	462b      	mov	r3, r5
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	0159      	lsls	r1, r3, #5
 8002b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b60:	0150      	lsls	r0, r2, #5
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4621      	mov	r1, r4
 8002b68:	1a51      	subs	r1, r2, r1
 8002b6a:	6139      	str	r1, [r7, #16]
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b80:	4659      	mov	r1, fp
 8002b82:	018b      	lsls	r3, r1, #6
 8002b84:	4651      	mov	r1, sl
 8002b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b8a:	4651      	mov	r1, sl
 8002b8c:	018a      	lsls	r2, r1, #6
 8002b8e:	4651      	mov	r1, sl
 8002b90:	ebb2 0801 	subs.w	r8, r2, r1
 8002b94:	4659      	mov	r1, fp
 8002b96:	eb63 0901 	sbc.w	r9, r3, r1
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bae:	4690      	mov	r8, r2
 8002bb0:	4699      	mov	r9, r3
 8002bb2:	4623      	mov	r3, r4
 8002bb4:	eb18 0303 	adds.w	r3, r8, r3
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	462b      	mov	r3, r5
 8002bbc:	eb49 0303 	adc.w	r3, r9, r3
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bce:	4629      	mov	r1, r5
 8002bd0:	024b      	lsls	r3, r1, #9
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bd8:	4621      	mov	r1, r4
 8002bda:	024a      	lsls	r2, r1, #9
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be2:	2200      	movs	r2, #0
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bec:	f7fd fb58 	bl	80002a0 <__aeabi_uldivmod>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf8:	e058      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfa:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	099b      	lsrs	r3, r3, #6
 8002c00:	2200      	movs	r2, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	4611      	mov	r1, r2
 8002c06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c0a:	623b      	str	r3, [r7, #32]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c14:	4642      	mov	r2, r8
 8002c16:	464b      	mov	r3, r9
 8002c18:	f04f 0000 	mov.w	r0, #0
 8002c1c:	f04f 0100 	mov.w	r1, #0
 8002c20:	0159      	lsls	r1, r3, #5
 8002c22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c26:	0150      	lsls	r0, r2, #5
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c32:	4649      	mov	r1, r9
 8002c34:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c4c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c50:	eb63 050b 	sbc.w	r5, r3, fp
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	00eb      	lsls	r3, r5, #3
 8002c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c62:	00e2      	lsls	r2, r4, #3
 8002c64:	4614      	mov	r4, r2
 8002c66:	461d      	mov	r5, r3
 8002c68:	4643      	mov	r3, r8
 8002c6a:	18e3      	adds	r3, r4, r3
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	464b      	mov	r3, r9
 8002c70:	eb45 0303 	adc.w	r3, r5, r3
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c82:	4629      	mov	r1, r5
 8002c84:	028b      	lsls	r3, r1, #10
 8002c86:	4621      	mov	r1, r4
 8002c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	028a      	lsls	r2, r1, #10
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c96:	2200      	movs	r2, #0
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	61fa      	str	r2, [r7, #28]
 8002c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca0:	f7fd fafe 	bl	80002a0 <__aeabi_uldivmod>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4613      	mov	r3, r2
 8002caa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	0c1b      	lsrs	r3, r3, #16
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cc6:	e002      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3750      	adds	r7, #80	; 0x50
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	00f42400 	.word	0x00f42400
 8002ce4:	007a1200 	.word	0x007a1200

08002ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000008 	.word	0x20000008

08002d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d04:	f7ff fff0 	bl	8002ce8 <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	0a9b      	lsrs	r3, r3, #10
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4903      	ldr	r1, [pc, #12]	; (8002d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40023800 	.word	0x40023800
 8002d24:	08009378 	.word	0x08009378

08002d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d2c:	f7ff ffdc 	bl	8002ce8 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	0b5b      	lsrs	r3, r3, #13
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4903      	ldr	r1, [pc, #12]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	08009378 	.word	0x08009378

08002d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e07b      	b.n	8002e5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d108      	bne.n	8002d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d72:	d009      	beq.n	8002d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
 8002d7a:	e005      	b.n	8002d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fe fb92 	bl	80014cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0c:	ea42 0103 	orr.w	r1, r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	0c1b      	lsrs	r3, r3, #16
 8002e26:	f003 0104 	and.w	r1, r3, #4
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	f003 0210 	and.w	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b088      	sub	sp, #32
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_SPI_Transmit+0x22>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e126      	b.n	80030d2 <HAL_SPI_Transmit+0x270>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e8c:	f7fe ff38 	bl	8001d00 <HAL_GetTick>
 8002e90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d002      	beq.n	8002ea8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ea6:	e10b      	b.n	80030c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_SPI_Transmit+0x52>
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002eb8:	e102      	b.n	80030c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	88fa      	ldrh	r2, [r7, #6]
 8002ed2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	88fa      	ldrh	r2, [r7, #6]
 8002ed8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f00:	d10f      	bne.n	8002f22 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	d007      	beq.n	8002f40 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f48:	d14b      	bne.n	8002fe2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_SPI_Transmit+0xf6>
 8002f52:	8afb      	ldrh	r3, [r7, #22]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d13e      	bne.n	8002fd6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	881a      	ldrh	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	1c9a      	adds	r2, r3, #2
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f7c:	e02b      	b.n	8002fd6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d112      	bne.n	8002fb2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	881a      	ldrh	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	1c9a      	adds	r2, r3, #2
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fb0:	e011      	b.n	8002fd6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fb2:	f7fe fea5 	bl	8001d00 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d803      	bhi.n	8002fca <HAL_SPI_Transmit+0x168>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d102      	bne.n	8002fd0 <HAL_SPI_Transmit+0x16e>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fd4:	e074      	b.n	80030c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ce      	bne.n	8002f7e <HAL_SPI_Transmit+0x11c>
 8002fe0:	e04c      	b.n	800307c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_SPI_Transmit+0x18e>
 8002fea:	8afb      	ldrh	r3, [r7, #22]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d140      	bne.n	8003072 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003016:	e02c      	b.n	8003072 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b02      	cmp	r3, #2
 8003024:	d113      	bne.n	800304e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	330c      	adds	r3, #12
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	86da      	strh	r2, [r3, #54]	; 0x36
 800304c:	e011      	b.n	8003072 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800304e:	f7fe fe57 	bl	8001d00 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d803      	bhi.n	8003066 <HAL_SPI_Transmit+0x204>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d102      	bne.n	800306c <HAL_SPI_Transmit+0x20a>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d102      	bne.n	8003072 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003070:	e026      	b.n	80030c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1cd      	bne.n	8003018 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	6839      	ldr	r1, [r7, #0]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f8b3 	bl	80031ec <SPI_EndRxTxTransaction>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e000      	b.n	80030c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80030be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030ec:	f7fe fe08 	bl	8001d00 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	4413      	add	r3, r2
 80030fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030fc:	f7fe fe00 	bl	8001d00 <HAL_GetTick>
 8003100:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	015b      	lsls	r3, r3, #5
 8003108:	0d1b      	lsrs	r3, r3, #20
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003112:	e054      	b.n	80031be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d050      	beq.n	80031be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800311c:	f7fe fdf0 	bl	8001d00 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	429a      	cmp	r2, r3
 800312a:	d902      	bls.n	8003132 <SPI_WaitFlagStateUntilTimeout+0x56>
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d13d      	bne.n	80031ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314a:	d111      	bne.n	8003170 <SPI_WaitFlagStateUntilTimeout+0x94>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003154:	d004      	beq.n	8003160 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d107      	bne.n	8003170 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003178:	d10f      	bne.n	800319a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003198:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e017      	b.n	80031de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4013      	ands	r3, r2
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	bf0c      	ite	eq
 80031ce:	2301      	moveq	r3, #1
 80031d0:	2300      	movne	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d19b      	bne.n	8003114 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000008 	.word	0x20000008

080031ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <SPI_EndRxTxTransaction+0x7c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1b      	ldr	r2, [pc, #108]	; (800326c <SPI_EndRxTxTransaction+0x80>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	0d5b      	lsrs	r3, r3, #21
 8003204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003208:	fb02 f303 	mul.w	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003216:	d112      	bne.n	800323e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2200      	movs	r2, #0
 8003220:	2180      	movs	r1, #128	; 0x80
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff ff5a 	bl	80030dc <SPI_WaitFlagStateUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d016      	beq.n	800325c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	f043 0220 	orr.w	r2, r3, #32
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e00f      	b.n	800325e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3b01      	subs	r3, #1
 8003248:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b80      	cmp	r3, #128	; 0x80
 8003256:	d0f2      	beq.n	800323e <SPI_EndRxTxTransaction+0x52>
 8003258:	e000      	b.n	800325c <SPI_EndRxTxTransaction+0x70>
        break;
 800325a:	bf00      	nop
  }

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000008 	.word	0x20000008
 800326c:	165e9f81 	.word	0x165e9f81

08003270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e041      	b.n	8003306 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe fb48 	bl	800192c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3304      	adds	r3, #4
 80032ac:	4619      	mov	r1, r3
 80032ae:	4610      	mov	r0, r2
 80032b0:	f000 fc7a 	bl	8003ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d001      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e04e      	b.n	80033c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a23      	ldr	r2, [pc, #140]	; (80033d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d022      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003352:	d01d      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d018      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d013      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00e      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1b      	ldr	r2, [pc, #108]	; (80033e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d009      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d004      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x80>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_TIM_Base_Start_IT+0xdc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d111      	bne.n	80033b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d010      	beq.n	80033c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b2:	e007      	b.n	80033c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40000800 	.word	0x40000800
 80033e0:	40000c00 	.word	0x40000c00
 80033e4:	40010400 	.word	0x40010400
 80033e8:	40014000 	.word	0x40014000
 80033ec:	40001800 	.word	0x40001800

080033f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e041      	b.n	8003486 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f839 	bl	800348e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f000 fbba 	bl	8003ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_TIM_PWM_Start+0x24>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	e022      	b.n	800350e <HAL_TIM_PWM_Start+0x6a>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d109      	bne.n	80034e2 <HAL_TIM_PWM_Start+0x3e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	bf14      	ite	ne
 80034da:	2301      	movne	r3, #1
 80034dc:	2300      	moveq	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	e015      	b.n	800350e <HAL_TIM_PWM_Start+0x6a>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d109      	bne.n	80034fc <HAL_TIM_PWM_Start+0x58>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	bf14      	ite	ne
 80034f4:	2301      	movne	r3, #1
 80034f6:	2300      	moveq	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e008      	b.n	800350e <HAL_TIM_PWM_Start+0x6a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e07c      	b.n	8003610 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d104      	bne.n	8003526 <HAL_TIM_PWM_Start+0x82>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003524:	e013      	b.n	800354e <HAL_TIM_PWM_Start+0xaa>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Start+0x92>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003534:	e00b      	b.n	800354e <HAL_TIM_PWM_Start+0xaa>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d104      	bne.n	8003546 <HAL_TIM_PWM_Start+0xa2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003544:	e003      	b.n	800354e <HAL_TIM_PWM_Start+0xaa>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2201      	movs	r2, #1
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fe10 	bl	800417c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2d      	ldr	r2, [pc, #180]	; (8003618 <HAL_TIM_PWM_Start+0x174>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_TIM_PWM_Start+0xcc>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a2c      	ldr	r2, [pc, #176]	; (800361c <HAL_TIM_PWM_Start+0x178>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_TIM_PWM_Start+0xd0>
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_TIM_PWM_Start+0xd2>
 8003574:	2300      	movs	r3, #0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a22      	ldr	r2, [pc, #136]	; (8003618 <HAL_TIM_PWM_Start+0x174>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d022      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359c:	d01d      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1f      	ldr	r2, [pc, #124]	; (8003620 <HAL_TIM_PWM_Start+0x17c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d018      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <HAL_TIM_PWM_Start+0x180>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <HAL_TIM_PWM_Start+0x184>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00e      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a16      	ldr	r2, [pc, #88]	; (800361c <HAL_TIM_PWM_Start+0x178>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d009      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a18      	ldr	r2, [pc, #96]	; (800362c <HAL_TIM_PWM_Start+0x188>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_TIM_PWM_Start+0x136>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a16      	ldr	r2, [pc, #88]	; (8003630 <HAL_TIM_PWM_Start+0x18c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d111      	bne.n	80035fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b06      	cmp	r3, #6
 80035ea:	d010      	beq.n	800360e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fc:	e007      	b.n	800360e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40010000 	.word	0x40010000
 800361c:	40010400 	.word	0x40010400
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800
 8003628:	40000c00 	.word	0x40000c00
 800362c:	40014000 	.word	0x40014000
 8003630:	40001800 	.word	0x40001800

08003634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b02      	cmp	r3, #2
 8003648:	d122      	bne.n	8003690 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b02      	cmp	r3, #2
 8003656:	d11b      	bne.n	8003690 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0202 	mvn.w	r2, #2
 8003660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fa77 	bl	8003b6a <HAL_TIM_IC_CaptureCallback>
 800367c:	e005      	b.n	800368a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fa69 	bl	8003b56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fa7a 	bl	8003b7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d122      	bne.n	80036e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d11b      	bne.n	80036e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0204 	mvn.w	r2, #4
 80036b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fa4d 	bl	8003b6a <HAL_TIM_IC_CaptureCallback>
 80036d0:	e005      	b.n	80036de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa3f 	bl	8003b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fa50 	bl	8003b7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d122      	bne.n	8003738 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d11b      	bne.n	8003738 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0208 	mvn.w	r2, #8
 8003708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2204      	movs	r2, #4
 800370e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fa23 	bl	8003b6a <HAL_TIM_IC_CaptureCallback>
 8003724:	e005      	b.n	8003732 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa15 	bl	8003b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fa26 	bl	8003b7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b10      	cmp	r3, #16
 8003744:	d122      	bne.n	800378c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b10      	cmp	r3, #16
 8003752:	d11b      	bne.n	800378c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0210 	mvn.w	r2, #16
 800375c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2208      	movs	r2, #8
 8003762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f9f9 	bl	8003b6a <HAL_TIM_IC_CaptureCallback>
 8003778:	e005      	b.n	8003786 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9eb 	bl	8003b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f9fc 	bl	8003b7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d10e      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d107      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0201 	mvn.w	r2, #1
 80037b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd fe26 	bl	8001404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d10e      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	2b80      	cmp	r3, #128	; 0x80
 80037d2:	d107      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fdca 	bl	8004378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d10e      	bne.n	8003810 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d107      	bne.n	8003810 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f9c1 	bl	8003b92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b20      	cmp	r3, #32
 800381c:	d10e      	bne.n	800383c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b20      	cmp	r3, #32
 800382a:	d107      	bne.n	800383c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0220 	mvn.w	r2, #32
 8003834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fd94 	bl	8004364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800385e:	2302      	movs	r3, #2
 8003860:	e0ae      	b.n	80039c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	f200 809f 	bhi.w	80039b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	080038ad 	.word	0x080038ad
 800387c:	080039b1 	.word	0x080039b1
 8003880:	080039b1 	.word	0x080039b1
 8003884:	080039b1 	.word	0x080039b1
 8003888:	080038ed 	.word	0x080038ed
 800388c:	080039b1 	.word	0x080039b1
 8003890:	080039b1 	.word	0x080039b1
 8003894:	080039b1 	.word	0x080039b1
 8003898:	0800392f 	.word	0x0800392f
 800389c:	080039b1 	.word	0x080039b1
 80038a0:	080039b1 	.word	0x080039b1
 80038a4:	080039b1 	.word	0x080039b1
 80038a8:	0800396f 	.word	0x0800396f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fa18 	bl	8003ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0208 	orr.w	r2, r2, #8
 80038c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0204 	bic.w	r2, r2, #4
 80038d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6999      	ldr	r1, [r3, #24]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	619a      	str	r2, [r3, #24]
      break;
 80038ea:	e064      	b.n	80039b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fa68 	bl	8003dc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6999      	ldr	r1, [r3, #24]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	021a      	lsls	r2, r3, #8
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	619a      	str	r2, [r3, #24]
      break;
 800392c:	e043      	b.n	80039b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	4618      	mov	r0, r3
 8003936:	f000 fabd 	bl	8003eb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0208 	orr.w	r2, r2, #8
 8003948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0204 	bic.w	r2, r2, #4
 8003958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69d9      	ldr	r1, [r3, #28]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	61da      	str	r2, [r3, #28]
      break;
 800396c:	e023      	b.n	80039b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fb11 	bl	8003f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69d9      	ldr	r1, [r3, #28]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	021a      	lsls	r2, r3, #8
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	61da      	str	r2, [r3, #28]
      break;
 80039ae:	e002      	b.n	80039b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	75fb      	strb	r3, [r7, #23]
      break;
 80039b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039be:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_ConfigClockSource+0x1c>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0b4      	b.n	8003b4e <HAL_TIM_ConfigClockSource+0x186>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1c:	d03e      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0xd4>
 8003a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a22:	f200 8087 	bhi.w	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	f000 8086 	beq.w	8003b3a <HAL_TIM_ConfigClockSource+0x172>
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	d87f      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b70      	cmp	r3, #112	; 0x70
 8003a36:	d01a      	beq.n	8003a6e <HAL_TIM_ConfigClockSource+0xa6>
 8003a38:	2b70      	cmp	r3, #112	; 0x70
 8003a3a:	d87b      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b60      	cmp	r3, #96	; 0x60
 8003a3e:	d050      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a40:	2b60      	cmp	r3, #96	; 0x60
 8003a42:	d877      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b50      	cmp	r3, #80	; 0x50
 8003a46:	d03c      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0xfa>
 8003a48:	2b50      	cmp	r3, #80	; 0x50
 8003a4a:	d873      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d058      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x13a>
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d86f      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b30      	cmp	r3, #48	; 0x30
 8003a56:	d064      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x15a>
 8003a58:	2b30      	cmp	r3, #48	; 0x30
 8003a5a:	d86b      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d060      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x15a>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d867      	bhi.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d05c      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x15a>
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d05a      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0x15a>
 8003a6c:	e062      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6899      	ldr	r1, [r3, #8]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f000 fb5d 	bl	800413c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	609a      	str	r2, [r3, #8]
      break;
 8003a9a:	e04f      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	6899      	ldr	r1, [r3, #8]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f000 fb46 	bl	800413c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003abe:	609a      	str	r2, [r3, #8]
      break;
 8003ac0:	e03c      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f000 faba 	bl	8004048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2150      	movs	r1, #80	; 0x50
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fb13 	bl	8004106 <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e02c      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6859      	ldr	r1, [r3, #4]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	461a      	mov	r2, r3
 8003af0:	f000 fad9 	bl	80040a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2160      	movs	r1, #96	; 0x60
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fb03 	bl	8004106 <TIM_ITRx_SetConfig>
      break;
 8003b00:	e01c      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6859      	ldr	r1, [r3, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f000 fa9a 	bl	8004048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2140      	movs	r1, #64	; 0x40
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 faf3 	bl	8004106 <TIM_ITRx_SetConfig>
      break;
 8003b20:	e00c      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f000 faea 	bl	8004106 <TIM_ITRx_SetConfig>
      break;
 8003b32:	e003      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      break;
 8003b38:	e000      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a40      	ldr	r2, [pc, #256]	; (8003cbc <TIM_Base_SetConfig+0x114>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d013      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d00f      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3d      	ldr	r2, [pc, #244]	; (8003cc0 <TIM_Base_SetConfig+0x118>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00b      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3c      	ldr	r2, [pc, #240]	; (8003cc4 <TIM_Base_SetConfig+0x11c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3b      	ldr	r2, [pc, #236]	; (8003cc8 <TIM_Base_SetConfig+0x120>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3a      	ldr	r2, [pc, #232]	; (8003ccc <TIM_Base_SetConfig+0x124>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d108      	bne.n	8003bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2f      	ldr	r2, [pc, #188]	; (8003cbc <TIM_Base_SetConfig+0x114>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d02b      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c08:	d027      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2c      	ldr	r2, [pc, #176]	; (8003cc0 <TIM_Base_SetConfig+0x118>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d023      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2b      	ldr	r2, [pc, #172]	; (8003cc4 <TIM_Base_SetConfig+0x11c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2a      	ldr	r2, [pc, #168]	; (8003cc8 <TIM_Base_SetConfig+0x120>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01b      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <TIM_Base_SetConfig+0x124>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d017      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a28      	ldr	r2, [pc, #160]	; (8003cd0 <TIM_Base_SetConfig+0x128>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <TIM_Base_SetConfig+0x12c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00f      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <TIM_Base_SetConfig+0x130>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00b      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <TIM_Base_SetConfig+0x134>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d007      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <TIM_Base_SetConfig+0x138>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <TIM_Base_SetConfig+0x13c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d108      	bne.n	8003c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <TIM_Base_SetConfig+0x114>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_Base_SetConfig+0xf8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a0c      	ldr	r2, [pc, #48]	; (8003ccc <TIM_Base_SetConfig+0x124>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d103      	bne.n	8003ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	615a      	str	r2, [r3, #20]
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40010400 	.word	0x40010400
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	40014400 	.word	0x40014400
 8003cd8:	40014800 	.word	0x40014800
 8003cdc:	40001800 	.word	0x40001800
 8003ce0:	40001c00 	.word	0x40001c00
 8003ce4:	40002000 	.word	0x40002000

08003ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0303 	bic.w	r3, r3, #3
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f023 0302 	bic.w	r3, r3, #2
 8003d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <TIM_OC1_SetConfig+0xd8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_OC1_SetConfig+0x64>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <TIM_OC1_SetConfig+0xdc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10c      	bne.n	8003d66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0308 	bic.w	r3, r3, #8
 8003d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <TIM_OC1_SetConfig+0xd8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <TIM_OC1_SetConfig+0x8e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <TIM_OC1_SetConfig+0xdc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d111      	bne.n	8003d9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	621a      	str	r2, [r3, #32]
}
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	40010400 	.word	0x40010400

08003dc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f023 0210 	bic.w	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 0320 	bic.w	r3, r3, #32
 8003e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a22      	ldr	r2, [pc, #136]	; (8003eac <TIM_OC2_SetConfig+0xe4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d003      	beq.n	8003e30 <TIM_OC2_SetConfig+0x68>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a21      	ldr	r2, [pc, #132]	; (8003eb0 <TIM_OC2_SetConfig+0xe8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d10d      	bne.n	8003e4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a17      	ldr	r2, [pc, #92]	; (8003eac <TIM_OC2_SetConfig+0xe4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_OC2_SetConfig+0x94>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a16      	ldr	r2, [pc, #88]	; (8003eb0 <TIM_OC2_SetConfig+0xe8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d113      	bne.n	8003e84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	621a      	str	r2, [r3, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40010400 	.word	0x40010400

08003eb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0303 	bic.w	r3, r3, #3
 8003eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a21      	ldr	r2, [pc, #132]	; (8003f94 <TIM_OC3_SetConfig+0xe0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_OC3_SetConfig+0x66>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a20      	ldr	r2, [pc, #128]	; (8003f98 <TIM_OC3_SetConfig+0xe4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10d      	bne.n	8003f36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a16      	ldr	r2, [pc, #88]	; (8003f94 <TIM_OC3_SetConfig+0xe0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_OC3_SetConfig+0x92>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <TIM_OC3_SetConfig+0xe4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d113      	bne.n	8003f6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	621a      	str	r2, [r3, #32]
}
 8003f88:	bf00      	nop
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40010400 	.word	0x40010400

08003f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	031b      	lsls	r3, r3, #12
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <TIM_OC4_SetConfig+0xa4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_OC4_SetConfig+0x68>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a11      	ldr	r2, [pc, #68]	; (8004044 <TIM_OC4_SetConfig+0xa8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d109      	bne.n	8004018 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800400a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40010400 	.word	0x40010400

08004048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f023 0201 	bic.w	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 030a 	bic.w	r3, r3, #10
 8004084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	621a      	str	r2, [r3, #32]
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b087      	sub	sp, #28
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f023 0210 	bic.w	r2, r3, #16
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	031b      	lsls	r3, r3, #12
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	f043 0307 	orr.w	r3, r3, #7
 8004128:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	609a      	str	r2, [r3, #8]
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004156:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	021a      	lsls	r2, r3, #8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	431a      	orrs	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4313      	orrs	r3, r2
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	2201      	movs	r2, #1
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1a      	ldr	r2, [r3, #32]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	43db      	mvns	r3, r3
 800419e:	401a      	ands	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1a      	ldr	r2, [r3, #32]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	fa01 f303 	lsl.w	r3, r1, r3
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041dc:	2302      	movs	r3, #2
 80041de:	e05a      	b.n	8004296 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a21      	ldr	r2, [pc, #132]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d022      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422c:	d01d      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d018      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d013      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1a      	ldr	r2, [pc, #104]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00e      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d009      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d004      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a15      	ldr	r2, [pc, #84]	; (80042bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d10c      	bne.n	8004284 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	4313      	orrs	r3, r2
 800427a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40010000 	.word	0x40010000
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40000800 	.word	0x40000800
 80042b0:	40000c00 	.word	0x40000c00
 80042b4:	40010400 	.word	0x40010400
 80042b8:	40014000 	.word	0x40014000
 80042bc:	40001800 	.word	0x40001800

080042c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042d8:	2302      	movs	r3, #2
 80042da:	e03d      	b.n	8004358 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e03f      	b.n	800441e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fd fb8e 	bl	8001ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2224      	movs	r2, #36	; 0x24
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fd81 	bl	8004ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695a      	ldr	r2, [r3, #20]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b08a      	sub	sp, #40	; 0x28
 800442a:	af02      	add	r7, sp, #8
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b20      	cmp	r3, #32
 8004444:	f040 808c 	bne.w	8004560 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_UART_Receive+0x2e>
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e084      	b.n	8004562 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_UART_Receive+0x40>
 8004462:	2302      	movs	r3, #2
 8004464:	e07d      	b.n	8004562 <HAL_UART_Receive+0x13c>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2222      	movs	r2, #34	; 0x22
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004482:	f7fd fc3d 	bl	8001d00 <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	88fa      	ldrh	r2, [r7, #6]
 8004492:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449c:	d108      	bne.n	80044b0 <HAL_UART_Receive+0x8a>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	e003      	b.n	80044b8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80044c0:	e043      	b.n	800454a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2120      	movs	r1, #32
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fafb 	bl	8004ac8 <UART_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e042      	b.n	8004562 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10c      	bne.n	80044fc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	3302      	adds	r3, #2
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	e01f      	b.n	800453c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004504:	d007      	beq.n	8004516 <HAL_UART_Receive+0xf0>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10a      	bne.n	8004524 <HAL_UART_Receive+0xfe>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e008      	b.n	8004536 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004530:	b2da      	uxtb	r2, r3
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	3301      	adds	r3, #1
 800453a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1b6      	bne.n	80044c2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	e000      	b.n	8004562 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004560:	2302      	movs	r3, #2
  }
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b0ba      	sub	sp, #232	; 0xe8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800459e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10f      	bne.n	80045d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_UART_IRQHandler+0x66>
 80045be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fbc9 	bl	8004d62 <UART_Receive_IT>
      return;
 80045d0:	e256      	b.n	8004a80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80de 	beq.w	8004798 <HAL_UART_IRQHandler+0x22c>
 80045dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80d1 	beq.w	8004798 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <HAL_UART_IRQHandler+0xae>
 8004602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f043 0201 	orr.w	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800461a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_UART_IRQHandler+0xd2>
 8004626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f043 0202 	orr.w	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800463e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_UART_IRQHandler+0xf6>
 800464a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f043 0204 	orr.w	r2, r3, #4
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d011      	beq.n	8004692 <HAL_UART_IRQHandler+0x126>
 800466e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800467a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f043 0208 	orr.w	r2, r3, #8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 81ed 	beq.w	8004a76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800469c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_UART_IRQHandler+0x14e>
 80046a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fb54 	bl	8004d62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <HAL_UART_IRQHandler+0x17a>
 80046de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d04f      	beq.n	8004786 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa5c 	bl	8004ba4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d141      	bne.n	800477e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3314      	adds	r3, #20
 8004700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3314      	adds	r3, #20
 8004722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004726:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800472a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800473e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1d9      	bne.n	80046fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	2b00      	cmp	r3, #0
 800474c:	d013      	beq.n	8004776 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	4a7d      	ldr	r2, [pc, #500]	; (8004948 <HAL_UART_IRQHandler+0x3dc>)
 8004754:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	4618      	mov	r0, r3
 800475c:	f7fd fc5d 	bl	800201a <HAL_DMA_Abort_IT>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d016      	beq.n	8004794 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004770:	4610      	mov	r0, r2
 8004772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	e00e      	b.n	8004794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f990 	bl	8004a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477c:	e00a      	b.n	8004794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f98c 	bl	8004a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	e006      	b.n	8004794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f988 	bl	8004a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004792:	e170      	b.n	8004a76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	bf00      	nop
    return;
 8004796:	e16e      	b.n	8004a76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	2b01      	cmp	r3, #1
 800479e:	f040 814a 	bne.w	8004a36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8143 	beq.w	8004a36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 813c 	beq.w	8004a36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047be:	2300      	movs	r3, #0
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b40      	cmp	r3, #64	; 0x40
 80047e0:	f040 80b4 	bne.w	800494c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8140 	beq.w	8004a7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004802:	429a      	cmp	r2, r3
 8004804:	f080 8139 	bcs.w	8004a7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800480e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481a:	f000 8088 	beq.w	800492e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	330c      	adds	r3, #12
 8004824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800483c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800484a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800484e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004856:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1d9      	bne.n	800481e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3314      	adds	r3, #20
 8004870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800487a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800487c:	f023 0301 	bic.w	r3, r3, #1
 8004880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3314      	adds	r3, #20
 800488a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800488e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004892:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004896:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e1      	bne.n	800486a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3314      	adds	r3, #20
 80048ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3314      	adds	r3, #20
 80048c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e3      	bne.n	80048a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fe:	f023 0310 	bic.w	r3, r3, #16
 8004902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004910:	65ba      	str	r2, [r7, #88]	; 0x58
 8004912:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004916:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800491e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e3      	bne.n	80048ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	4618      	mov	r0, r3
 800492a:	f7fd fb06 	bl	8001f3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004936:	b29b      	uxth	r3, r3
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	b29b      	uxth	r3, r3
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8b6 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004944:	e099      	b.n	8004a7a <HAL_UART_IRQHandler+0x50e>
 8004946:	bf00      	nop
 8004948:	08004c6b 	.word	0x08004c6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004954:	b29b      	uxth	r3, r3
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 808b 	beq.w	8004a7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 8086 	beq.w	8004a7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004988:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004996:	647a      	str	r2, [r7, #68]	; 0x44
 8004998:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800499c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e3      	bne.n	8004972 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3314      	adds	r3, #20
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	623b      	str	r3, [r7, #32]
   return(result);
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	f023 0301 	bic.w	r3, r3, #1
 80049c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3314      	adds	r3, #20
 80049ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049ce:	633a      	str	r2, [r7, #48]	; 0x30
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e3      	bne.n	80049aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0310 	bic.w	r3, r3, #16
 8004a06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a14:	61fa      	str	r2, [r7, #28]
 8004a16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	69b9      	ldr	r1, [r7, #24]
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	617b      	str	r3, [r7, #20]
   return(result);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e3      	bne.n	80049f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f83e 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a34:	e023      	b.n	8004a7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <HAL_UART_IRQHandler+0x4ea>
 8004a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f91f 	bl	8004c92 <UART_Transmit_IT>
    return;
 8004a54:	e014      	b.n	8004a80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00e      	beq.n	8004a80 <HAL_UART_IRQHandler+0x514>
 8004a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f95f 	bl	8004d32 <UART_EndTransmit_IT>
    return;
 8004a74:	e004      	b.n	8004a80 <HAL_UART_IRQHandler+0x514>
    return;
 8004a76:	bf00      	nop
 8004a78:	e002      	b.n	8004a80 <HAL_UART_IRQHandler+0x514>
      return;
 8004a7a:	bf00      	nop
 8004a7c:	e000      	b.n	8004a80 <HAL_UART_IRQHandler+0x514>
      return;
 8004a7e:	bf00      	nop
  }
}
 8004a80:	37e8      	adds	r7, #232	; 0xe8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop

08004a88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b090      	sub	sp, #64	; 0x40
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad8:	e050      	b.n	8004b7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d04c      	beq.n	8004b7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ae8:	f7fd f90a 	bl	8001d00 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d241      	bcs.n	8004b7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b18:	637a      	str	r2, [r7, #52]	; 0x34
 8004b1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e5      	bne.n	8004af8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3314      	adds	r3, #20
 8004b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3314      	adds	r3, #20
 8004b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b4c:	623a      	str	r2, [r7, #32]
 8004b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	69f9      	ldr	r1, [r7, #28]
 8004b52:	6a3a      	ldr	r2, [r7, #32]
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e5      	bne.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e00f      	b.n	8004b9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4013      	ands	r3, r2
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d09f      	beq.n	8004ada <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3740      	adds	r7, #64	; 0x40
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b095      	sub	sp, #84	; 0x54
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bcc:	643a      	str	r2, [r7, #64]	; 0x40
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e5      	bne.n	8004bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f023 0301 	bic.w	r3, r3, #1
 8004bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c08:	e841 2300 	strex	r3, r2, [r1]
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e5      	bne.n	8004be0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d119      	bne.n	8004c50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	330c      	adds	r3, #12
 8004c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f023 0310 	bic.w	r3, r3, #16
 8004c32:	647b      	str	r3, [r7, #68]	; 0x44
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c3c:	61ba      	str	r2, [r7, #24]
 8004c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6979      	ldr	r1, [r7, #20]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	613b      	str	r3, [r7, #16]
   return(result);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c5e:	bf00      	nop
 8004c60:	3754      	adds	r7, #84	; 0x54
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7ff ff09 	bl	8004a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b21      	cmp	r3, #33	; 0x21
 8004ca4:	d13e      	bne.n	8004d24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cae:	d114      	bne.n	8004cda <UART_Transmit_IT+0x48>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d110      	bne.n	8004cda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ccc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	1c9a      	adds	r2, r3, #2
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	621a      	str	r2, [r3, #32]
 8004cd8:	e008      	b.n	8004cec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	1c59      	adds	r1, r3, #1
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6211      	str	r1, [r2, #32]
 8004ce4:	781a      	ldrb	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10f      	bne.n	8004d20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e000      	b.n	8004d26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d24:	2302      	movs	r3, #2
  }
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff fe98 	bl	8004a88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b08c      	sub	sp, #48	; 0x30
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b22      	cmp	r3, #34	; 0x22
 8004d74:	f040 80ab 	bne.w	8004ece <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d80:	d117      	bne.n	8004db2 <UART_Receive_IT+0x50>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d113      	bne.n	8004db2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	1c9a      	adds	r2, r3, #2
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28
 8004db0:	e026      	b.n	8004e00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc4:	d007      	beq.n	8004dd6 <UART_Receive_IT+0x74>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <UART_Receive_IT+0x82>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	e008      	b.n	8004df6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d15a      	bne.n	8004eca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0220 	bic.w	r2, r2, #32
 8004e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695a      	ldr	r2, [r3, #20]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d135      	bne.n	8004ec0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f023 0310 	bic.w	r3, r3, #16
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7a:	623a      	str	r2, [r7, #32]
 8004e7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	69f9      	ldr	r1, [r7, #28]
 8004e80:	6a3a      	ldr	r2, [r7, #32]
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e5      	bne.n	8004e5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d10a      	bne.n	8004eb2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff fdf9 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
 8004ebe:	e002      	b.n	8004ec6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fc fab5 	bl	8001430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e002      	b.n	8004ed0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e000      	b.n	8004ed0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ece:	2302      	movs	r3, #2
  }
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3730      	adds	r7, #48	; 0x30
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004edc:	b0c0      	sub	sp, #256	; 0x100
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef4:	68d9      	ldr	r1, [r3, #12]
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	ea40 0301 	orr.w	r3, r0, r1
 8004f00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f30:	f021 010c 	bic.w	r1, r1, #12
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f52:	6999      	ldr	r1, [r3, #24]
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	ea40 0301 	orr.w	r3, r0, r1
 8004f5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b8f      	ldr	r3, [pc, #572]	; (80051a4 <UART_SetConfig+0x2cc>)
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d005      	beq.n	8004f78 <UART_SetConfig+0xa0>
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	4b8d      	ldr	r3, [pc, #564]	; (80051a8 <UART_SetConfig+0x2d0>)
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d104      	bne.n	8004f82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f78:	f7fd fed6 	bl	8002d28 <HAL_RCC_GetPCLK2Freq>
 8004f7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f80:	e003      	b.n	8004f8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f82:	f7fd febd 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
 8004f86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f94:	f040 810c 	bne.w	80051b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fa2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004faa:	4622      	mov	r2, r4
 8004fac:	462b      	mov	r3, r5
 8004fae:	1891      	adds	r1, r2, r2
 8004fb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fb2:	415b      	adcs	r3, r3
 8004fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fba:	4621      	mov	r1, r4
 8004fbc:	eb12 0801 	adds.w	r8, r2, r1
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	eb43 0901 	adc.w	r9, r3, r1
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fda:	4690      	mov	r8, r2
 8004fdc:	4699      	mov	r9, r3
 8004fde:	4623      	mov	r3, r4
 8004fe0:	eb18 0303 	adds.w	r3, r8, r3
 8004fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fe8:	462b      	mov	r3, r5
 8004fea:	eb49 0303 	adc.w	r3, r9, r3
 8004fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ffe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005002:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005006:	460b      	mov	r3, r1
 8005008:	18db      	adds	r3, r3, r3
 800500a:	653b      	str	r3, [r7, #80]	; 0x50
 800500c:	4613      	mov	r3, r2
 800500e:	eb42 0303 	adc.w	r3, r2, r3
 8005012:	657b      	str	r3, [r7, #84]	; 0x54
 8005014:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005018:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800501c:	f7fb f940 	bl	80002a0 <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4b61      	ldr	r3, [pc, #388]	; (80051ac <UART_SetConfig+0x2d4>)
 8005026:	fba3 2302 	umull	r2, r3, r3, r2
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	011c      	lsls	r4, r3, #4
 800502e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005032:	2200      	movs	r2, #0
 8005034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005038:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800503c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005040:	4642      	mov	r2, r8
 8005042:	464b      	mov	r3, r9
 8005044:	1891      	adds	r1, r2, r2
 8005046:	64b9      	str	r1, [r7, #72]	; 0x48
 8005048:	415b      	adcs	r3, r3
 800504a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800504c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005050:	4641      	mov	r1, r8
 8005052:	eb12 0a01 	adds.w	sl, r2, r1
 8005056:	4649      	mov	r1, r9
 8005058:	eb43 0b01 	adc.w	fp, r3, r1
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005068:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800506c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005070:	4692      	mov	sl, r2
 8005072:	469b      	mov	fp, r3
 8005074:	4643      	mov	r3, r8
 8005076:	eb1a 0303 	adds.w	r3, sl, r3
 800507a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800507e:	464b      	mov	r3, r9
 8005080:	eb4b 0303 	adc.w	r3, fp, r3
 8005084:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005094:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005098:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800509c:	460b      	mov	r3, r1
 800509e:	18db      	adds	r3, r3, r3
 80050a0:	643b      	str	r3, [r7, #64]	; 0x40
 80050a2:	4613      	mov	r3, r2
 80050a4:	eb42 0303 	adc.w	r3, r2, r3
 80050a8:	647b      	str	r3, [r7, #68]	; 0x44
 80050aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050b2:	f7fb f8f5 	bl	80002a0 <__aeabi_uldivmod>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	4b3b      	ldr	r3, [pc, #236]	; (80051ac <UART_SetConfig+0x2d4>)
 80050be:	fba3 2301 	umull	r2, r3, r3, r1
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	2264      	movs	r2, #100	; 0x64
 80050c6:	fb02 f303 	mul.w	r3, r2, r3
 80050ca:	1acb      	subs	r3, r1, r3
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050d2:	4b36      	ldr	r3, [pc, #216]	; (80051ac <UART_SetConfig+0x2d4>)
 80050d4:	fba3 2302 	umull	r2, r3, r3, r2
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050e0:	441c      	add	r4, r3
 80050e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050f4:	4642      	mov	r2, r8
 80050f6:	464b      	mov	r3, r9
 80050f8:	1891      	adds	r1, r2, r2
 80050fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80050fc:	415b      	adcs	r3, r3
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005100:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005104:	4641      	mov	r1, r8
 8005106:	1851      	adds	r1, r2, r1
 8005108:	6339      	str	r1, [r7, #48]	; 0x30
 800510a:	4649      	mov	r1, r9
 800510c:	414b      	adcs	r3, r1
 800510e:	637b      	str	r3, [r7, #52]	; 0x34
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800511c:	4659      	mov	r1, fp
 800511e:	00cb      	lsls	r3, r1, #3
 8005120:	4651      	mov	r1, sl
 8005122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005126:	4651      	mov	r1, sl
 8005128:	00ca      	lsls	r2, r1, #3
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	4603      	mov	r3, r0
 8005130:	4642      	mov	r2, r8
 8005132:	189b      	adds	r3, r3, r2
 8005134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005138:	464b      	mov	r3, r9
 800513a:	460a      	mov	r2, r1
 800513c:	eb42 0303 	adc.w	r3, r2, r3
 8005140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005150:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005154:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005158:	460b      	mov	r3, r1
 800515a:	18db      	adds	r3, r3, r3
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
 800515e:	4613      	mov	r3, r2
 8005160:	eb42 0303 	adc.w	r3, r2, r3
 8005164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800516a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800516e:	f7fb f897 	bl	80002a0 <__aeabi_uldivmod>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <UART_SetConfig+0x2d4>)
 8005178:	fba3 1302 	umull	r1, r3, r3, r2
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	2164      	movs	r1, #100	; 0x64
 8005180:	fb01 f303 	mul.w	r3, r1, r3
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	3332      	adds	r3, #50	; 0x32
 800518a:	4a08      	ldr	r2, [pc, #32]	; (80051ac <UART_SetConfig+0x2d4>)
 800518c:	fba2 2303 	umull	r2, r3, r2, r3
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	f003 0207 	and.w	r2, r3, #7
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4422      	add	r2, r4
 800519e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051a0:	e105      	b.n	80053ae <UART_SetConfig+0x4d6>
 80051a2:	bf00      	nop
 80051a4:	40011000 	.word	0x40011000
 80051a8:	40011400 	.word	0x40011400
 80051ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051c2:	4642      	mov	r2, r8
 80051c4:	464b      	mov	r3, r9
 80051c6:	1891      	adds	r1, r2, r2
 80051c8:	6239      	str	r1, [r7, #32]
 80051ca:	415b      	adcs	r3, r3
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
 80051ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051d2:	4641      	mov	r1, r8
 80051d4:	1854      	adds	r4, r2, r1
 80051d6:	4649      	mov	r1, r9
 80051d8:	eb43 0501 	adc.w	r5, r3, r1
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	00eb      	lsls	r3, r5, #3
 80051e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ea:	00e2      	lsls	r2, r4, #3
 80051ec:	4614      	mov	r4, r2
 80051ee:	461d      	mov	r5, r3
 80051f0:	4643      	mov	r3, r8
 80051f2:	18e3      	adds	r3, r4, r3
 80051f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051f8:	464b      	mov	r3, r9
 80051fa:	eb45 0303 	adc.w	r3, r5, r3
 80051fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800520e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800521e:	4629      	mov	r1, r5
 8005220:	008b      	lsls	r3, r1, #2
 8005222:	4621      	mov	r1, r4
 8005224:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005228:	4621      	mov	r1, r4
 800522a:	008a      	lsls	r2, r1, #2
 800522c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005230:	f7fb f836 	bl	80002a0 <__aeabi_uldivmod>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4b60      	ldr	r3, [pc, #384]	; (80053bc <UART_SetConfig+0x4e4>)
 800523a:	fba3 2302 	umull	r2, r3, r3, r2
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	011c      	lsls	r4, r3, #4
 8005242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005246:	2200      	movs	r2, #0
 8005248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800524c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005250:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005254:	4642      	mov	r2, r8
 8005256:	464b      	mov	r3, r9
 8005258:	1891      	adds	r1, r2, r2
 800525a:	61b9      	str	r1, [r7, #24]
 800525c:	415b      	adcs	r3, r3
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005264:	4641      	mov	r1, r8
 8005266:	1851      	adds	r1, r2, r1
 8005268:	6139      	str	r1, [r7, #16]
 800526a:	4649      	mov	r1, r9
 800526c:	414b      	adcs	r3, r1
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800527c:	4659      	mov	r1, fp
 800527e:	00cb      	lsls	r3, r1, #3
 8005280:	4651      	mov	r1, sl
 8005282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005286:	4651      	mov	r1, sl
 8005288:	00ca      	lsls	r2, r1, #3
 800528a:	4610      	mov	r0, r2
 800528c:	4619      	mov	r1, r3
 800528e:	4603      	mov	r3, r0
 8005290:	4642      	mov	r2, r8
 8005292:	189b      	adds	r3, r3, r2
 8005294:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005298:	464b      	mov	r3, r9
 800529a:	460a      	mov	r2, r1
 800529c:	eb42 0303 	adc.w	r3, r2, r3
 80052a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80052ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052bc:	4649      	mov	r1, r9
 80052be:	008b      	lsls	r3, r1, #2
 80052c0:	4641      	mov	r1, r8
 80052c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052c6:	4641      	mov	r1, r8
 80052c8:	008a      	lsls	r2, r1, #2
 80052ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052ce:	f7fa ffe7 	bl	80002a0 <__aeabi_uldivmod>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4b39      	ldr	r3, [pc, #228]	; (80053bc <UART_SetConfig+0x4e4>)
 80052d8:	fba3 1302 	umull	r1, r3, r3, r2
 80052dc:	095b      	lsrs	r3, r3, #5
 80052de:	2164      	movs	r1, #100	; 0x64
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	3332      	adds	r3, #50	; 0x32
 80052ea:	4a34      	ldr	r2, [pc, #208]	; (80053bc <UART_SetConfig+0x4e4>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052f6:	441c      	add	r4, r3
 80052f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052fc:	2200      	movs	r2, #0
 80052fe:	673b      	str	r3, [r7, #112]	; 0x70
 8005300:	677a      	str	r2, [r7, #116]	; 0x74
 8005302:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005306:	4642      	mov	r2, r8
 8005308:	464b      	mov	r3, r9
 800530a:	1891      	adds	r1, r2, r2
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	415b      	adcs	r3, r3
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005316:	4641      	mov	r1, r8
 8005318:	1851      	adds	r1, r2, r1
 800531a:	6039      	str	r1, [r7, #0]
 800531c:	4649      	mov	r1, r9
 800531e:	414b      	adcs	r3, r1
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800532e:	4659      	mov	r1, fp
 8005330:	00cb      	lsls	r3, r1, #3
 8005332:	4651      	mov	r1, sl
 8005334:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005338:	4651      	mov	r1, sl
 800533a:	00ca      	lsls	r2, r1, #3
 800533c:	4610      	mov	r0, r2
 800533e:	4619      	mov	r1, r3
 8005340:	4603      	mov	r3, r0
 8005342:	4642      	mov	r2, r8
 8005344:	189b      	adds	r3, r3, r2
 8005346:	66bb      	str	r3, [r7, #104]	; 0x68
 8005348:	464b      	mov	r3, r9
 800534a:	460a      	mov	r2, r1
 800534c:	eb42 0303 	adc.w	r3, r2, r3
 8005350:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	663b      	str	r3, [r7, #96]	; 0x60
 800535c:	667a      	str	r2, [r7, #100]	; 0x64
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800536a:	4649      	mov	r1, r9
 800536c:	008b      	lsls	r3, r1, #2
 800536e:	4641      	mov	r1, r8
 8005370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005374:	4641      	mov	r1, r8
 8005376:	008a      	lsls	r2, r1, #2
 8005378:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800537c:	f7fa ff90 	bl	80002a0 <__aeabi_uldivmod>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <UART_SetConfig+0x4e4>)
 8005386:	fba3 1302 	umull	r1, r3, r3, r2
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	2164      	movs	r1, #100	; 0x64
 800538e:	fb01 f303 	mul.w	r3, r1, r3
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	3332      	adds	r3, #50	; 0x32
 8005398:	4a08      	ldr	r2, [pc, #32]	; (80053bc <UART_SetConfig+0x4e4>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	f003 020f 	and.w	r2, r3, #15
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4422      	add	r2, r4
 80053ac:	609a      	str	r2, [r3, #8]
}
 80053ae:	bf00      	nop
 80053b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053b4:	46bd      	mov	sp, r7
 80053b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ba:	bf00      	nop
 80053bc:	51eb851f 	.word	0x51eb851f

080053c0 <__errno>:
 80053c0:	4b01      	ldr	r3, [pc, #4]	; (80053c8 <__errno+0x8>)
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000014 	.word	0x20000014

080053cc <__libc_init_array>:
 80053cc:	b570      	push	{r4, r5, r6, lr}
 80053ce:	4d0d      	ldr	r5, [pc, #52]	; (8005404 <__libc_init_array+0x38>)
 80053d0:	4c0d      	ldr	r4, [pc, #52]	; (8005408 <__libc_init_array+0x3c>)
 80053d2:	1b64      	subs	r4, r4, r5
 80053d4:	10a4      	asrs	r4, r4, #2
 80053d6:	2600      	movs	r6, #0
 80053d8:	42a6      	cmp	r6, r4
 80053da:	d109      	bne.n	80053f0 <__libc_init_array+0x24>
 80053dc:	4d0b      	ldr	r5, [pc, #44]	; (800540c <__libc_init_array+0x40>)
 80053de:	4c0c      	ldr	r4, [pc, #48]	; (8005410 <__libc_init_array+0x44>)
 80053e0:	f001 ff06 	bl	80071f0 <_init>
 80053e4:	1b64      	subs	r4, r4, r5
 80053e6:	10a4      	asrs	r4, r4, #2
 80053e8:	2600      	movs	r6, #0
 80053ea:	42a6      	cmp	r6, r4
 80053ec:	d105      	bne.n	80053fa <__libc_init_array+0x2e>
 80053ee:	bd70      	pop	{r4, r5, r6, pc}
 80053f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f4:	4798      	blx	r3
 80053f6:	3601      	adds	r6, #1
 80053f8:	e7ee      	b.n	80053d8 <__libc_init_array+0xc>
 80053fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fe:	4798      	blx	r3
 8005400:	3601      	adds	r6, #1
 8005402:	e7f2      	b.n	80053ea <__libc_init_array+0x1e>
 8005404:	0800953c 	.word	0x0800953c
 8005408:	0800953c 	.word	0x0800953c
 800540c:	0800953c 	.word	0x0800953c
 8005410:	08009540 	.word	0x08009540

08005414 <memcpy>:
 8005414:	440a      	add	r2, r1
 8005416:	4291      	cmp	r1, r2
 8005418:	f100 33ff 	add.w	r3, r0, #4294967295
 800541c:	d100      	bne.n	8005420 <memcpy+0xc>
 800541e:	4770      	bx	lr
 8005420:	b510      	push	{r4, lr}
 8005422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800542a:	4291      	cmp	r1, r2
 800542c:	d1f9      	bne.n	8005422 <memcpy+0xe>
 800542e:	bd10      	pop	{r4, pc}

08005430 <memset>:
 8005430:	4402      	add	r2, r0
 8005432:	4603      	mov	r3, r0
 8005434:	4293      	cmp	r3, r2
 8005436:	d100      	bne.n	800543a <memset+0xa>
 8005438:	4770      	bx	lr
 800543a:	f803 1b01 	strb.w	r1, [r3], #1
 800543e:	e7f9      	b.n	8005434 <memset+0x4>

08005440 <iprintf>:
 8005440:	b40f      	push	{r0, r1, r2, r3}
 8005442:	4b0a      	ldr	r3, [pc, #40]	; (800546c <iprintf+0x2c>)
 8005444:	b513      	push	{r0, r1, r4, lr}
 8005446:	681c      	ldr	r4, [r3, #0]
 8005448:	b124      	cbz	r4, 8005454 <iprintf+0x14>
 800544a:	69a3      	ldr	r3, [r4, #24]
 800544c:	b913      	cbnz	r3, 8005454 <iprintf+0x14>
 800544e:	4620      	mov	r0, r4
 8005450:	f000 fb5c 	bl	8005b0c <__sinit>
 8005454:	ab05      	add	r3, sp, #20
 8005456:	9a04      	ldr	r2, [sp, #16]
 8005458:	68a1      	ldr	r1, [r4, #8]
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	4620      	mov	r0, r4
 800545e:	f001 f8a5 	bl	80065ac <_vfiprintf_r>
 8005462:	b002      	add	sp, #8
 8005464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005468:	b004      	add	sp, #16
 800546a:	4770      	bx	lr
 800546c:	20000014 	.word	0x20000014

08005470 <_puts_r>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	460e      	mov	r6, r1
 8005474:	4605      	mov	r5, r0
 8005476:	b118      	cbz	r0, 8005480 <_puts_r+0x10>
 8005478:	6983      	ldr	r3, [r0, #24]
 800547a:	b90b      	cbnz	r3, 8005480 <_puts_r+0x10>
 800547c:	f000 fb46 	bl	8005b0c <__sinit>
 8005480:	69ab      	ldr	r3, [r5, #24]
 8005482:	68ac      	ldr	r4, [r5, #8]
 8005484:	b913      	cbnz	r3, 800548c <_puts_r+0x1c>
 8005486:	4628      	mov	r0, r5
 8005488:	f000 fb40 	bl	8005b0c <__sinit>
 800548c:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <_puts_r+0xd0>)
 800548e:	429c      	cmp	r4, r3
 8005490:	d120      	bne.n	80054d4 <_puts_r+0x64>
 8005492:	686c      	ldr	r4, [r5, #4]
 8005494:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005496:	07db      	lsls	r3, r3, #31
 8005498:	d405      	bmi.n	80054a6 <_puts_r+0x36>
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	0598      	lsls	r0, r3, #22
 800549e:	d402      	bmi.n	80054a6 <_puts_r+0x36>
 80054a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054a2:	f000 fbd1 	bl	8005c48 <__retarget_lock_acquire_recursive>
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	0719      	lsls	r1, r3, #28
 80054aa:	d51d      	bpl.n	80054e8 <_puts_r+0x78>
 80054ac:	6923      	ldr	r3, [r4, #16]
 80054ae:	b1db      	cbz	r3, 80054e8 <_puts_r+0x78>
 80054b0:	3e01      	subs	r6, #1
 80054b2:	68a3      	ldr	r3, [r4, #8]
 80054b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054b8:	3b01      	subs	r3, #1
 80054ba:	60a3      	str	r3, [r4, #8]
 80054bc:	bb39      	cbnz	r1, 800550e <_puts_r+0x9e>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	da38      	bge.n	8005534 <_puts_r+0xc4>
 80054c2:	4622      	mov	r2, r4
 80054c4:	210a      	movs	r1, #10
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 f924 	bl	8005714 <__swbuf_r>
 80054cc:	3001      	adds	r0, #1
 80054ce:	d011      	beq.n	80054f4 <_puts_r+0x84>
 80054d0:	250a      	movs	r5, #10
 80054d2:	e011      	b.n	80054f8 <_puts_r+0x88>
 80054d4:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <_puts_r+0xd4>)
 80054d6:	429c      	cmp	r4, r3
 80054d8:	d101      	bne.n	80054de <_puts_r+0x6e>
 80054da:	68ac      	ldr	r4, [r5, #8]
 80054dc:	e7da      	b.n	8005494 <_puts_r+0x24>
 80054de:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <_puts_r+0xd8>)
 80054e0:	429c      	cmp	r4, r3
 80054e2:	bf08      	it	eq
 80054e4:	68ec      	ldreq	r4, [r5, #12]
 80054e6:	e7d5      	b.n	8005494 <_puts_r+0x24>
 80054e8:	4621      	mov	r1, r4
 80054ea:	4628      	mov	r0, r5
 80054ec:	f000 f976 	bl	80057dc <__swsetup_r>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d0dd      	beq.n	80054b0 <_puts_r+0x40>
 80054f4:	f04f 35ff 	mov.w	r5, #4294967295
 80054f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054fa:	07da      	lsls	r2, r3, #31
 80054fc:	d405      	bmi.n	800550a <_puts_r+0x9a>
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	059b      	lsls	r3, r3, #22
 8005502:	d402      	bmi.n	800550a <_puts_r+0x9a>
 8005504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005506:	f000 fba0 	bl	8005c4a <__retarget_lock_release_recursive>
 800550a:	4628      	mov	r0, r5
 800550c:	bd70      	pop	{r4, r5, r6, pc}
 800550e:	2b00      	cmp	r3, #0
 8005510:	da04      	bge.n	800551c <_puts_r+0xac>
 8005512:	69a2      	ldr	r2, [r4, #24]
 8005514:	429a      	cmp	r2, r3
 8005516:	dc06      	bgt.n	8005526 <_puts_r+0xb6>
 8005518:	290a      	cmp	r1, #10
 800551a:	d004      	beq.n	8005526 <_puts_r+0xb6>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	6022      	str	r2, [r4, #0]
 8005522:	7019      	strb	r1, [r3, #0]
 8005524:	e7c5      	b.n	80054b2 <_puts_r+0x42>
 8005526:	4622      	mov	r2, r4
 8005528:	4628      	mov	r0, r5
 800552a:	f000 f8f3 	bl	8005714 <__swbuf_r>
 800552e:	3001      	adds	r0, #1
 8005530:	d1bf      	bne.n	80054b2 <_puts_r+0x42>
 8005532:	e7df      	b.n	80054f4 <_puts_r+0x84>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	250a      	movs	r5, #10
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	6022      	str	r2, [r4, #0]
 800553c:	701d      	strb	r5, [r3, #0]
 800553e:	e7db      	b.n	80054f8 <_puts_r+0x88>
 8005540:	080093a4 	.word	0x080093a4
 8005544:	080093c4 	.word	0x080093c4
 8005548:	08009384 	.word	0x08009384

0800554c <puts>:
 800554c:	4b02      	ldr	r3, [pc, #8]	; (8005558 <puts+0xc>)
 800554e:	4601      	mov	r1, r0
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	f7ff bf8d 	b.w	8005470 <_puts_r>
 8005556:	bf00      	nop
 8005558:	20000014 	.word	0x20000014

0800555c <siprintf>:
 800555c:	b40e      	push	{r1, r2, r3}
 800555e:	b500      	push	{lr}
 8005560:	b09c      	sub	sp, #112	; 0x70
 8005562:	ab1d      	add	r3, sp, #116	; 0x74
 8005564:	9002      	str	r0, [sp, #8]
 8005566:	9006      	str	r0, [sp, #24]
 8005568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800556c:	4809      	ldr	r0, [pc, #36]	; (8005594 <siprintf+0x38>)
 800556e:	9107      	str	r1, [sp, #28]
 8005570:	9104      	str	r1, [sp, #16]
 8005572:	4909      	ldr	r1, [pc, #36]	; (8005598 <siprintf+0x3c>)
 8005574:	f853 2b04 	ldr.w	r2, [r3], #4
 8005578:	9105      	str	r1, [sp, #20]
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	9301      	str	r3, [sp, #4]
 800557e:	a902      	add	r1, sp, #8
 8005580:	f000 fd18 	bl	8005fb4 <_svfiprintf_r>
 8005584:	9b02      	ldr	r3, [sp, #8]
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	b01c      	add	sp, #112	; 0x70
 800558c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005590:	b003      	add	sp, #12
 8005592:	4770      	bx	lr
 8005594:	20000014 	.word	0x20000014
 8005598:	ffff0208 	.word	0xffff0208

0800559c <siscanf>:
 800559c:	b40e      	push	{r1, r2, r3}
 800559e:	b510      	push	{r4, lr}
 80055a0:	b09f      	sub	sp, #124	; 0x7c
 80055a2:	ac21      	add	r4, sp, #132	; 0x84
 80055a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80055a8:	f854 2b04 	ldr.w	r2, [r4], #4
 80055ac:	9201      	str	r2, [sp, #4]
 80055ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 80055b2:	9004      	str	r0, [sp, #16]
 80055b4:	9008      	str	r0, [sp, #32]
 80055b6:	f7fa fe1b 	bl	80001f0 <strlen>
 80055ba:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <siscanf+0x50>)
 80055bc:	9005      	str	r0, [sp, #20]
 80055be:	9009      	str	r0, [sp, #36]	; 0x24
 80055c0:	930d      	str	r3, [sp, #52]	; 0x34
 80055c2:	480b      	ldr	r0, [pc, #44]	; (80055f0 <siscanf+0x54>)
 80055c4:	9a01      	ldr	r2, [sp, #4]
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	9403      	str	r4, [sp, #12]
 80055ca:	2300      	movs	r3, #0
 80055cc:	9311      	str	r3, [sp, #68]	; 0x44
 80055ce:	9316      	str	r3, [sp, #88]	; 0x58
 80055d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80055d8:	a904      	add	r1, sp, #16
 80055da:	4623      	mov	r3, r4
 80055dc:	f000 fe44 	bl	8006268 <__ssvfiscanf_r>
 80055e0:	b01f      	add	sp, #124	; 0x7c
 80055e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e6:	b003      	add	sp, #12
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	08005617 	.word	0x08005617
 80055f0:	20000014 	.word	0x20000014

080055f4 <__sread>:
 80055f4:	b510      	push	{r4, lr}
 80055f6:	460c      	mov	r4, r1
 80055f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055fc:	f001 fbec 	bl	8006dd8 <_read_r>
 8005600:	2800      	cmp	r0, #0
 8005602:	bfab      	itete	ge
 8005604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005606:	89a3      	ldrhlt	r3, [r4, #12]
 8005608:	181b      	addge	r3, r3, r0
 800560a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800560e:	bfac      	ite	ge
 8005610:	6563      	strge	r3, [r4, #84]	; 0x54
 8005612:	81a3      	strhlt	r3, [r4, #12]
 8005614:	bd10      	pop	{r4, pc}

08005616 <__seofread>:
 8005616:	2000      	movs	r0, #0
 8005618:	4770      	bx	lr

0800561a <__swrite>:
 800561a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800561e:	461f      	mov	r7, r3
 8005620:	898b      	ldrh	r3, [r1, #12]
 8005622:	05db      	lsls	r3, r3, #23
 8005624:	4605      	mov	r5, r0
 8005626:	460c      	mov	r4, r1
 8005628:	4616      	mov	r6, r2
 800562a:	d505      	bpl.n	8005638 <__swrite+0x1e>
 800562c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005630:	2302      	movs	r3, #2
 8005632:	2200      	movs	r2, #0
 8005634:	f000 fb0a 	bl	8005c4c <_lseek_r>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800563e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	4632      	mov	r2, r6
 8005646:	463b      	mov	r3, r7
 8005648:	4628      	mov	r0, r5
 800564a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800564e:	f000 b8b3 	b.w	80057b8 <_write_r>

08005652 <__sseek>:
 8005652:	b510      	push	{r4, lr}
 8005654:	460c      	mov	r4, r1
 8005656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800565a:	f000 faf7 	bl	8005c4c <_lseek_r>
 800565e:	1c43      	adds	r3, r0, #1
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	bf15      	itete	ne
 8005664:	6560      	strne	r0, [r4, #84]	; 0x54
 8005666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800566a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800566e:	81a3      	strheq	r3, [r4, #12]
 8005670:	bf18      	it	ne
 8005672:	81a3      	strhne	r3, [r4, #12]
 8005674:	bd10      	pop	{r4, pc}

08005676 <__sclose>:
 8005676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567a:	f000 b91d 	b.w	80058b8 <_close_r>

0800567e <strchr>:
 800567e:	b2c9      	uxtb	r1, r1
 8005680:	4603      	mov	r3, r0
 8005682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005686:	b11a      	cbz	r2, 8005690 <strchr+0x12>
 8005688:	428a      	cmp	r2, r1
 800568a:	d1f9      	bne.n	8005680 <strchr+0x2>
 800568c:	4618      	mov	r0, r3
 800568e:	4770      	bx	lr
 8005690:	2900      	cmp	r1, #0
 8005692:	bf18      	it	ne
 8005694:	2300      	movne	r3, #0
 8005696:	e7f9      	b.n	800568c <strchr+0xe>

08005698 <strncmp>:
 8005698:	b510      	push	{r4, lr}
 800569a:	b17a      	cbz	r2, 80056bc <strncmp+0x24>
 800569c:	4603      	mov	r3, r0
 800569e:	3901      	subs	r1, #1
 80056a0:	1884      	adds	r4, r0, r2
 80056a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80056a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80056aa:	4290      	cmp	r0, r2
 80056ac:	d101      	bne.n	80056b2 <strncmp+0x1a>
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	d101      	bne.n	80056b6 <strncmp+0x1e>
 80056b2:	1a80      	subs	r0, r0, r2
 80056b4:	bd10      	pop	{r4, pc}
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d1f3      	bne.n	80056a2 <strncmp+0xa>
 80056ba:	e7fa      	b.n	80056b2 <strncmp+0x1a>
 80056bc:	4610      	mov	r0, r2
 80056be:	e7f9      	b.n	80056b4 <strncmp+0x1c>

080056c0 <strncpy>:
 80056c0:	b510      	push	{r4, lr}
 80056c2:	3901      	subs	r1, #1
 80056c4:	4603      	mov	r3, r0
 80056c6:	b132      	cbz	r2, 80056d6 <strncpy+0x16>
 80056c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80056cc:	f803 4b01 	strb.w	r4, [r3], #1
 80056d0:	3a01      	subs	r2, #1
 80056d2:	2c00      	cmp	r4, #0
 80056d4:	d1f7      	bne.n	80056c6 <strncpy+0x6>
 80056d6:	441a      	add	r2, r3
 80056d8:	2100      	movs	r1, #0
 80056da:	4293      	cmp	r3, r2
 80056dc:	d100      	bne.n	80056e0 <strncpy+0x20>
 80056de:	bd10      	pop	{r4, pc}
 80056e0:	f803 1b01 	strb.w	r1, [r3], #1
 80056e4:	e7f9      	b.n	80056da <strncpy+0x1a>

080056e6 <strstr>:
 80056e6:	780a      	ldrb	r2, [r1, #0]
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	b96a      	cbnz	r2, 8005708 <strstr+0x22>
 80056ec:	bd70      	pop	{r4, r5, r6, pc}
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d109      	bne.n	8005706 <strstr+0x20>
 80056f2:	460c      	mov	r4, r1
 80056f4:	4605      	mov	r5, r0
 80056f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f6      	beq.n	80056ec <strstr+0x6>
 80056fe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005702:	429e      	cmp	r6, r3
 8005704:	d0f7      	beq.n	80056f6 <strstr+0x10>
 8005706:	3001      	adds	r0, #1
 8005708:	7803      	ldrb	r3, [r0, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1ef      	bne.n	80056ee <strstr+0x8>
 800570e:	4618      	mov	r0, r3
 8005710:	e7ec      	b.n	80056ec <strstr+0x6>
	...

08005714 <__swbuf_r>:
 8005714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005716:	460e      	mov	r6, r1
 8005718:	4614      	mov	r4, r2
 800571a:	4605      	mov	r5, r0
 800571c:	b118      	cbz	r0, 8005726 <__swbuf_r+0x12>
 800571e:	6983      	ldr	r3, [r0, #24]
 8005720:	b90b      	cbnz	r3, 8005726 <__swbuf_r+0x12>
 8005722:	f000 f9f3 	bl	8005b0c <__sinit>
 8005726:	4b21      	ldr	r3, [pc, #132]	; (80057ac <__swbuf_r+0x98>)
 8005728:	429c      	cmp	r4, r3
 800572a:	d12b      	bne.n	8005784 <__swbuf_r+0x70>
 800572c:	686c      	ldr	r4, [r5, #4]
 800572e:	69a3      	ldr	r3, [r4, #24]
 8005730:	60a3      	str	r3, [r4, #8]
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	071a      	lsls	r2, r3, #28
 8005736:	d52f      	bpl.n	8005798 <__swbuf_r+0x84>
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	b36b      	cbz	r3, 8005798 <__swbuf_r+0x84>
 800573c:	6923      	ldr	r3, [r4, #16]
 800573e:	6820      	ldr	r0, [r4, #0]
 8005740:	1ac0      	subs	r0, r0, r3
 8005742:	6963      	ldr	r3, [r4, #20]
 8005744:	b2f6      	uxtb	r6, r6
 8005746:	4283      	cmp	r3, r0
 8005748:	4637      	mov	r7, r6
 800574a:	dc04      	bgt.n	8005756 <__swbuf_r+0x42>
 800574c:	4621      	mov	r1, r4
 800574e:	4628      	mov	r0, r5
 8005750:	f000 f948 	bl	80059e4 <_fflush_r>
 8005754:	bb30      	cbnz	r0, 80057a4 <__swbuf_r+0x90>
 8005756:	68a3      	ldr	r3, [r4, #8]
 8005758:	3b01      	subs	r3, #1
 800575a:	60a3      	str	r3, [r4, #8]
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	6022      	str	r2, [r4, #0]
 8005762:	701e      	strb	r6, [r3, #0]
 8005764:	6963      	ldr	r3, [r4, #20]
 8005766:	3001      	adds	r0, #1
 8005768:	4283      	cmp	r3, r0
 800576a:	d004      	beq.n	8005776 <__swbuf_r+0x62>
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	07db      	lsls	r3, r3, #31
 8005770:	d506      	bpl.n	8005780 <__swbuf_r+0x6c>
 8005772:	2e0a      	cmp	r6, #10
 8005774:	d104      	bne.n	8005780 <__swbuf_r+0x6c>
 8005776:	4621      	mov	r1, r4
 8005778:	4628      	mov	r0, r5
 800577a:	f000 f933 	bl	80059e4 <_fflush_r>
 800577e:	b988      	cbnz	r0, 80057a4 <__swbuf_r+0x90>
 8005780:	4638      	mov	r0, r7
 8005782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <__swbuf_r+0x9c>)
 8005786:	429c      	cmp	r4, r3
 8005788:	d101      	bne.n	800578e <__swbuf_r+0x7a>
 800578a:	68ac      	ldr	r4, [r5, #8]
 800578c:	e7cf      	b.n	800572e <__swbuf_r+0x1a>
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <__swbuf_r+0xa0>)
 8005790:	429c      	cmp	r4, r3
 8005792:	bf08      	it	eq
 8005794:	68ec      	ldreq	r4, [r5, #12]
 8005796:	e7ca      	b.n	800572e <__swbuf_r+0x1a>
 8005798:	4621      	mov	r1, r4
 800579a:	4628      	mov	r0, r5
 800579c:	f000 f81e 	bl	80057dc <__swsetup_r>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d0cb      	beq.n	800573c <__swbuf_r+0x28>
 80057a4:	f04f 37ff 	mov.w	r7, #4294967295
 80057a8:	e7ea      	b.n	8005780 <__swbuf_r+0x6c>
 80057aa:	bf00      	nop
 80057ac:	080093a4 	.word	0x080093a4
 80057b0:	080093c4 	.word	0x080093c4
 80057b4:	08009384 	.word	0x08009384

080057b8 <_write_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4d07      	ldr	r5, [pc, #28]	; (80057d8 <_write_r+0x20>)
 80057bc:	4604      	mov	r4, r0
 80057be:	4608      	mov	r0, r1
 80057c0:	4611      	mov	r1, r2
 80057c2:	2200      	movs	r2, #0
 80057c4:	602a      	str	r2, [r5, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f7fb ff51 	bl	800166e <_write>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d102      	bne.n	80057d6 <_write_r+0x1e>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	b103      	cbz	r3, 80057d6 <_write_r+0x1e>
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	bd38      	pop	{r3, r4, r5, pc}
 80057d8:	200030fc 	.word	0x200030fc

080057dc <__swsetup_r>:
 80057dc:	4b32      	ldr	r3, [pc, #200]	; (80058a8 <__swsetup_r+0xcc>)
 80057de:	b570      	push	{r4, r5, r6, lr}
 80057e0:	681d      	ldr	r5, [r3, #0]
 80057e2:	4606      	mov	r6, r0
 80057e4:	460c      	mov	r4, r1
 80057e6:	b125      	cbz	r5, 80057f2 <__swsetup_r+0x16>
 80057e8:	69ab      	ldr	r3, [r5, #24]
 80057ea:	b913      	cbnz	r3, 80057f2 <__swsetup_r+0x16>
 80057ec:	4628      	mov	r0, r5
 80057ee:	f000 f98d 	bl	8005b0c <__sinit>
 80057f2:	4b2e      	ldr	r3, [pc, #184]	; (80058ac <__swsetup_r+0xd0>)
 80057f4:	429c      	cmp	r4, r3
 80057f6:	d10f      	bne.n	8005818 <__swsetup_r+0x3c>
 80057f8:	686c      	ldr	r4, [r5, #4]
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005800:	0719      	lsls	r1, r3, #28
 8005802:	d42c      	bmi.n	800585e <__swsetup_r+0x82>
 8005804:	06dd      	lsls	r5, r3, #27
 8005806:	d411      	bmi.n	800582c <__swsetup_r+0x50>
 8005808:	2309      	movs	r3, #9
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005810:	81a3      	strh	r3, [r4, #12]
 8005812:	f04f 30ff 	mov.w	r0, #4294967295
 8005816:	e03e      	b.n	8005896 <__swsetup_r+0xba>
 8005818:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <__swsetup_r+0xd4>)
 800581a:	429c      	cmp	r4, r3
 800581c:	d101      	bne.n	8005822 <__swsetup_r+0x46>
 800581e:	68ac      	ldr	r4, [r5, #8]
 8005820:	e7eb      	b.n	80057fa <__swsetup_r+0x1e>
 8005822:	4b24      	ldr	r3, [pc, #144]	; (80058b4 <__swsetup_r+0xd8>)
 8005824:	429c      	cmp	r4, r3
 8005826:	bf08      	it	eq
 8005828:	68ec      	ldreq	r4, [r5, #12]
 800582a:	e7e6      	b.n	80057fa <__swsetup_r+0x1e>
 800582c:	0758      	lsls	r0, r3, #29
 800582e:	d512      	bpl.n	8005856 <__swsetup_r+0x7a>
 8005830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005832:	b141      	cbz	r1, 8005846 <__swsetup_r+0x6a>
 8005834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005838:	4299      	cmp	r1, r3
 800583a:	d002      	beq.n	8005842 <__swsetup_r+0x66>
 800583c:	4630      	mov	r0, r6
 800583e:	f000 fa7d 	bl	8005d3c <_free_r>
 8005842:	2300      	movs	r3, #0
 8005844:	6363      	str	r3, [r4, #52]	; 0x34
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800584c:	81a3      	strh	r3, [r4, #12]
 800584e:	2300      	movs	r3, #0
 8005850:	6063      	str	r3, [r4, #4]
 8005852:	6923      	ldr	r3, [r4, #16]
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	f043 0308 	orr.w	r3, r3, #8
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	b94b      	cbnz	r3, 8005876 <__swsetup_r+0x9a>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800586c:	d003      	beq.n	8005876 <__swsetup_r+0x9a>
 800586e:	4621      	mov	r1, r4
 8005870:	4630      	mov	r0, r6
 8005872:	f000 fa23 	bl	8005cbc <__smakebuf_r>
 8005876:	89a0      	ldrh	r0, [r4, #12]
 8005878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800587c:	f010 0301 	ands.w	r3, r0, #1
 8005880:	d00a      	beq.n	8005898 <__swsetup_r+0xbc>
 8005882:	2300      	movs	r3, #0
 8005884:	60a3      	str	r3, [r4, #8]
 8005886:	6963      	ldr	r3, [r4, #20]
 8005888:	425b      	negs	r3, r3
 800588a:	61a3      	str	r3, [r4, #24]
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	b943      	cbnz	r3, 80058a2 <__swsetup_r+0xc6>
 8005890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005894:	d1ba      	bne.n	800580c <__swsetup_r+0x30>
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	0781      	lsls	r1, r0, #30
 800589a:	bf58      	it	pl
 800589c:	6963      	ldrpl	r3, [r4, #20]
 800589e:	60a3      	str	r3, [r4, #8]
 80058a0:	e7f4      	b.n	800588c <__swsetup_r+0xb0>
 80058a2:	2000      	movs	r0, #0
 80058a4:	e7f7      	b.n	8005896 <__swsetup_r+0xba>
 80058a6:	bf00      	nop
 80058a8:	20000014 	.word	0x20000014
 80058ac:	080093a4 	.word	0x080093a4
 80058b0:	080093c4 	.word	0x080093c4
 80058b4:	08009384 	.word	0x08009384

080058b8 <_close_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4d06      	ldr	r5, [pc, #24]	; (80058d4 <_close_r+0x1c>)
 80058bc:	2300      	movs	r3, #0
 80058be:	4604      	mov	r4, r0
 80058c0:	4608      	mov	r0, r1
 80058c2:	602b      	str	r3, [r5, #0]
 80058c4:	f7fb feef 	bl	80016a6 <_close>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d102      	bne.n	80058d2 <_close_r+0x1a>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	b103      	cbz	r3, 80058d2 <_close_r+0x1a>
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	200030fc 	.word	0x200030fc

080058d8 <__sflush_r>:
 80058d8:	898a      	ldrh	r2, [r1, #12]
 80058da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058de:	4605      	mov	r5, r0
 80058e0:	0710      	lsls	r0, r2, #28
 80058e2:	460c      	mov	r4, r1
 80058e4:	d458      	bmi.n	8005998 <__sflush_r+0xc0>
 80058e6:	684b      	ldr	r3, [r1, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	dc05      	bgt.n	80058f8 <__sflush_r+0x20>
 80058ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dc02      	bgt.n	80058f8 <__sflush_r+0x20>
 80058f2:	2000      	movs	r0, #0
 80058f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058fa:	2e00      	cmp	r6, #0
 80058fc:	d0f9      	beq.n	80058f2 <__sflush_r+0x1a>
 80058fe:	2300      	movs	r3, #0
 8005900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005904:	682f      	ldr	r7, [r5, #0]
 8005906:	602b      	str	r3, [r5, #0]
 8005908:	d032      	beq.n	8005970 <__sflush_r+0x98>
 800590a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	075a      	lsls	r2, r3, #29
 8005910:	d505      	bpl.n	800591e <__sflush_r+0x46>
 8005912:	6863      	ldr	r3, [r4, #4]
 8005914:	1ac0      	subs	r0, r0, r3
 8005916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005918:	b10b      	cbz	r3, 800591e <__sflush_r+0x46>
 800591a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800591c:	1ac0      	subs	r0, r0, r3
 800591e:	2300      	movs	r3, #0
 8005920:	4602      	mov	r2, r0
 8005922:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005924:	6a21      	ldr	r1, [r4, #32]
 8005926:	4628      	mov	r0, r5
 8005928:	47b0      	blx	r6
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	d106      	bne.n	800593e <__sflush_r+0x66>
 8005930:	6829      	ldr	r1, [r5, #0]
 8005932:	291d      	cmp	r1, #29
 8005934:	d82c      	bhi.n	8005990 <__sflush_r+0xb8>
 8005936:	4a2a      	ldr	r2, [pc, #168]	; (80059e0 <__sflush_r+0x108>)
 8005938:	40ca      	lsrs	r2, r1
 800593a:	07d6      	lsls	r6, r2, #31
 800593c:	d528      	bpl.n	8005990 <__sflush_r+0xb8>
 800593e:	2200      	movs	r2, #0
 8005940:	6062      	str	r2, [r4, #4]
 8005942:	04d9      	lsls	r1, r3, #19
 8005944:	6922      	ldr	r2, [r4, #16]
 8005946:	6022      	str	r2, [r4, #0]
 8005948:	d504      	bpl.n	8005954 <__sflush_r+0x7c>
 800594a:	1c42      	adds	r2, r0, #1
 800594c:	d101      	bne.n	8005952 <__sflush_r+0x7a>
 800594e:	682b      	ldr	r3, [r5, #0]
 8005950:	b903      	cbnz	r3, 8005954 <__sflush_r+0x7c>
 8005952:	6560      	str	r0, [r4, #84]	; 0x54
 8005954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005956:	602f      	str	r7, [r5, #0]
 8005958:	2900      	cmp	r1, #0
 800595a:	d0ca      	beq.n	80058f2 <__sflush_r+0x1a>
 800595c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005960:	4299      	cmp	r1, r3
 8005962:	d002      	beq.n	800596a <__sflush_r+0x92>
 8005964:	4628      	mov	r0, r5
 8005966:	f000 f9e9 	bl	8005d3c <_free_r>
 800596a:	2000      	movs	r0, #0
 800596c:	6360      	str	r0, [r4, #52]	; 0x34
 800596e:	e7c1      	b.n	80058f4 <__sflush_r+0x1c>
 8005970:	6a21      	ldr	r1, [r4, #32]
 8005972:	2301      	movs	r3, #1
 8005974:	4628      	mov	r0, r5
 8005976:	47b0      	blx	r6
 8005978:	1c41      	adds	r1, r0, #1
 800597a:	d1c7      	bne.n	800590c <__sflush_r+0x34>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0c4      	beq.n	800590c <__sflush_r+0x34>
 8005982:	2b1d      	cmp	r3, #29
 8005984:	d001      	beq.n	800598a <__sflush_r+0xb2>
 8005986:	2b16      	cmp	r3, #22
 8005988:	d101      	bne.n	800598e <__sflush_r+0xb6>
 800598a:	602f      	str	r7, [r5, #0]
 800598c:	e7b1      	b.n	80058f2 <__sflush_r+0x1a>
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	e7ad      	b.n	80058f4 <__sflush_r+0x1c>
 8005998:	690f      	ldr	r7, [r1, #16]
 800599a:	2f00      	cmp	r7, #0
 800599c:	d0a9      	beq.n	80058f2 <__sflush_r+0x1a>
 800599e:	0793      	lsls	r3, r2, #30
 80059a0:	680e      	ldr	r6, [r1, #0]
 80059a2:	bf08      	it	eq
 80059a4:	694b      	ldreq	r3, [r1, #20]
 80059a6:	600f      	str	r7, [r1, #0]
 80059a8:	bf18      	it	ne
 80059aa:	2300      	movne	r3, #0
 80059ac:	eba6 0807 	sub.w	r8, r6, r7
 80059b0:	608b      	str	r3, [r1, #8]
 80059b2:	f1b8 0f00 	cmp.w	r8, #0
 80059b6:	dd9c      	ble.n	80058f2 <__sflush_r+0x1a>
 80059b8:	6a21      	ldr	r1, [r4, #32]
 80059ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059bc:	4643      	mov	r3, r8
 80059be:	463a      	mov	r2, r7
 80059c0:	4628      	mov	r0, r5
 80059c2:	47b0      	blx	r6
 80059c4:	2800      	cmp	r0, #0
 80059c6:	dc06      	bgt.n	80059d6 <__sflush_r+0xfe>
 80059c8:	89a3      	ldrh	r3, [r4, #12]
 80059ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ce:	81a3      	strh	r3, [r4, #12]
 80059d0:	f04f 30ff 	mov.w	r0, #4294967295
 80059d4:	e78e      	b.n	80058f4 <__sflush_r+0x1c>
 80059d6:	4407      	add	r7, r0
 80059d8:	eba8 0800 	sub.w	r8, r8, r0
 80059dc:	e7e9      	b.n	80059b2 <__sflush_r+0xda>
 80059de:	bf00      	nop
 80059e0:	20400001 	.word	0x20400001

080059e4 <_fflush_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	690b      	ldr	r3, [r1, #16]
 80059e8:	4605      	mov	r5, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	b913      	cbnz	r3, 80059f4 <_fflush_r+0x10>
 80059ee:	2500      	movs	r5, #0
 80059f0:	4628      	mov	r0, r5
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	b118      	cbz	r0, 80059fe <_fflush_r+0x1a>
 80059f6:	6983      	ldr	r3, [r0, #24]
 80059f8:	b90b      	cbnz	r3, 80059fe <_fflush_r+0x1a>
 80059fa:	f000 f887 	bl	8005b0c <__sinit>
 80059fe:	4b14      	ldr	r3, [pc, #80]	; (8005a50 <_fflush_r+0x6c>)
 8005a00:	429c      	cmp	r4, r3
 8005a02:	d11b      	bne.n	8005a3c <_fflush_r+0x58>
 8005a04:	686c      	ldr	r4, [r5, #4]
 8005a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0ef      	beq.n	80059ee <_fflush_r+0xa>
 8005a0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a10:	07d0      	lsls	r0, r2, #31
 8005a12:	d404      	bmi.n	8005a1e <_fflush_r+0x3a>
 8005a14:	0599      	lsls	r1, r3, #22
 8005a16:	d402      	bmi.n	8005a1e <_fflush_r+0x3a>
 8005a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a1a:	f000 f915 	bl	8005c48 <__retarget_lock_acquire_recursive>
 8005a1e:	4628      	mov	r0, r5
 8005a20:	4621      	mov	r1, r4
 8005a22:	f7ff ff59 	bl	80058d8 <__sflush_r>
 8005a26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a28:	07da      	lsls	r2, r3, #31
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	d4e0      	bmi.n	80059f0 <_fflush_r+0xc>
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	059b      	lsls	r3, r3, #22
 8005a32:	d4dd      	bmi.n	80059f0 <_fflush_r+0xc>
 8005a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a36:	f000 f908 	bl	8005c4a <__retarget_lock_release_recursive>
 8005a3a:	e7d9      	b.n	80059f0 <_fflush_r+0xc>
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <_fflush_r+0x70>)
 8005a3e:	429c      	cmp	r4, r3
 8005a40:	d101      	bne.n	8005a46 <_fflush_r+0x62>
 8005a42:	68ac      	ldr	r4, [r5, #8]
 8005a44:	e7df      	b.n	8005a06 <_fflush_r+0x22>
 8005a46:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <_fflush_r+0x74>)
 8005a48:	429c      	cmp	r4, r3
 8005a4a:	bf08      	it	eq
 8005a4c:	68ec      	ldreq	r4, [r5, #12]
 8005a4e:	e7da      	b.n	8005a06 <_fflush_r+0x22>
 8005a50:	080093a4 	.word	0x080093a4
 8005a54:	080093c4 	.word	0x080093c4
 8005a58:	08009384 	.word	0x08009384

08005a5c <std>:
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	b510      	push	{r4, lr}
 8005a60:	4604      	mov	r4, r0
 8005a62:	e9c0 3300 	strd	r3, r3, [r0]
 8005a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a6a:	6083      	str	r3, [r0, #8]
 8005a6c:	8181      	strh	r1, [r0, #12]
 8005a6e:	6643      	str	r3, [r0, #100]	; 0x64
 8005a70:	81c2      	strh	r2, [r0, #14]
 8005a72:	6183      	str	r3, [r0, #24]
 8005a74:	4619      	mov	r1, r3
 8005a76:	2208      	movs	r2, #8
 8005a78:	305c      	adds	r0, #92	; 0x5c
 8005a7a:	f7ff fcd9 	bl	8005430 <memset>
 8005a7e:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <std+0x38>)
 8005a80:	6263      	str	r3, [r4, #36]	; 0x24
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <std+0x3c>)
 8005a84:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <std+0x40>)
 8005a88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <std+0x44>)
 8005a8c:	6224      	str	r4, [r4, #32]
 8005a8e:	6323      	str	r3, [r4, #48]	; 0x30
 8005a90:	bd10      	pop	{r4, pc}
 8005a92:	bf00      	nop
 8005a94:	080055f5 	.word	0x080055f5
 8005a98:	0800561b 	.word	0x0800561b
 8005a9c:	08005653 	.word	0x08005653
 8005aa0:	08005677 	.word	0x08005677

08005aa4 <_cleanup_r>:
 8005aa4:	4901      	ldr	r1, [pc, #4]	; (8005aac <_cleanup_r+0x8>)
 8005aa6:	f000 b8af 	b.w	8005c08 <_fwalk_reent>
 8005aaa:	bf00      	nop
 8005aac:	080059e5 	.word	0x080059e5

08005ab0 <__sfmoreglue>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	2268      	movs	r2, #104	; 0x68
 8005ab4:	1e4d      	subs	r5, r1, #1
 8005ab6:	4355      	muls	r5, r2
 8005ab8:	460e      	mov	r6, r1
 8005aba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005abe:	f000 f9a9 	bl	8005e14 <_malloc_r>
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	b140      	cbz	r0, 8005ad8 <__sfmoreglue+0x28>
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	e9c0 1600 	strd	r1, r6, [r0]
 8005acc:	300c      	adds	r0, #12
 8005ace:	60a0      	str	r0, [r4, #8]
 8005ad0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ad4:	f7ff fcac 	bl	8005430 <memset>
 8005ad8:	4620      	mov	r0, r4
 8005ada:	bd70      	pop	{r4, r5, r6, pc}

08005adc <__sfp_lock_acquire>:
 8005adc:	4801      	ldr	r0, [pc, #4]	; (8005ae4 <__sfp_lock_acquire+0x8>)
 8005ade:	f000 b8b3 	b.w	8005c48 <__retarget_lock_acquire_recursive>
 8005ae2:	bf00      	nop
 8005ae4:	200030f1 	.word	0x200030f1

08005ae8 <__sfp_lock_release>:
 8005ae8:	4801      	ldr	r0, [pc, #4]	; (8005af0 <__sfp_lock_release+0x8>)
 8005aea:	f000 b8ae 	b.w	8005c4a <__retarget_lock_release_recursive>
 8005aee:	bf00      	nop
 8005af0:	200030f1 	.word	0x200030f1

08005af4 <__sinit_lock_acquire>:
 8005af4:	4801      	ldr	r0, [pc, #4]	; (8005afc <__sinit_lock_acquire+0x8>)
 8005af6:	f000 b8a7 	b.w	8005c48 <__retarget_lock_acquire_recursive>
 8005afa:	bf00      	nop
 8005afc:	200030f2 	.word	0x200030f2

08005b00 <__sinit_lock_release>:
 8005b00:	4801      	ldr	r0, [pc, #4]	; (8005b08 <__sinit_lock_release+0x8>)
 8005b02:	f000 b8a2 	b.w	8005c4a <__retarget_lock_release_recursive>
 8005b06:	bf00      	nop
 8005b08:	200030f2 	.word	0x200030f2

08005b0c <__sinit>:
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	4604      	mov	r4, r0
 8005b10:	f7ff fff0 	bl	8005af4 <__sinit_lock_acquire>
 8005b14:	69a3      	ldr	r3, [r4, #24]
 8005b16:	b11b      	cbz	r3, 8005b20 <__sinit+0x14>
 8005b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b1c:	f7ff bff0 	b.w	8005b00 <__sinit_lock_release>
 8005b20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b24:	6523      	str	r3, [r4, #80]	; 0x50
 8005b26:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <__sinit+0x68>)
 8005b28:	4a13      	ldr	r2, [pc, #76]	; (8005b78 <__sinit+0x6c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b2e:	42a3      	cmp	r3, r4
 8005b30:	bf04      	itt	eq
 8005b32:	2301      	moveq	r3, #1
 8005b34:	61a3      	streq	r3, [r4, #24]
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 f820 	bl	8005b7c <__sfp>
 8005b3c:	6060      	str	r0, [r4, #4]
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 f81c 	bl	8005b7c <__sfp>
 8005b44:	60a0      	str	r0, [r4, #8]
 8005b46:	4620      	mov	r0, r4
 8005b48:	f000 f818 	bl	8005b7c <__sfp>
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	60e0      	str	r0, [r4, #12]
 8005b50:	2104      	movs	r1, #4
 8005b52:	6860      	ldr	r0, [r4, #4]
 8005b54:	f7ff ff82 	bl	8005a5c <std>
 8005b58:	68a0      	ldr	r0, [r4, #8]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	2109      	movs	r1, #9
 8005b5e:	f7ff ff7d 	bl	8005a5c <std>
 8005b62:	68e0      	ldr	r0, [r4, #12]
 8005b64:	2202      	movs	r2, #2
 8005b66:	2112      	movs	r1, #18
 8005b68:	f7ff ff78 	bl	8005a5c <std>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	61a3      	str	r3, [r4, #24]
 8005b70:	e7d2      	b.n	8005b18 <__sinit+0xc>
 8005b72:	bf00      	nop
 8005b74:	08009380 	.word	0x08009380
 8005b78:	08005aa5 	.word	0x08005aa5

08005b7c <__sfp>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	4607      	mov	r7, r0
 8005b80:	f7ff ffac 	bl	8005adc <__sfp_lock_acquire>
 8005b84:	4b1e      	ldr	r3, [pc, #120]	; (8005c00 <__sfp+0x84>)
 8005b86:	681e      	ldr	r6, [r3, #0]
 8005b88:	69b3      	ldr	r3, [r6, #24]
 8005b8a:	b913      	cbnz	r3, 8005b92 <__sfp+0x16>
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f7ff ffbd 	bl	8005b0c <__sinit>
 8005b92:	3648      	adds	r6, #72	; 0x48
 8005b94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	d503      	bpl.n	8005ba4 <__sfp+0x28>
 8005b9c:	6833      	ldr	r3, [r6, #0]
 8005b9e:	b30b      	cbz	r3, 8005be4 <__sfp+0x68>
 8005ba0:	6836      	ldr	r6, [r6, #0]
 8005ba2:	e7f7      	b.n	8005b94 <__sfp+0x18>
 8005ba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ba8:	b9d5      	cbnz	r5, 8005be0 <__sfp+0x64>
 8005baa:	4b16      	ldr	r3, [pc, #88]	; (8005c04 <__sfp+0x88>)
 8005bac:	60e3      	str	r3, [r4, #12]
 8005bae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bb2:	6665      	str	r5, [r4, #100]	; 0x64
 8005bb4:	f000 f847 	bl	8005c46 <__retarget_lock_init_recursive>
 8005bb8:	f7ff ff96 	bl	8005ae8 <__sfp_lock_release>
 8005bbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005bc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005bc4:	6025      	str	r5, [r4, #0]
 8005bc6:	61a5      	str	r5, [r4, #24]
 8005bc8:	2208      	movs	r2, #8
 8005bca:	4629      	mov	r1, r5
 8005bcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005bd0:	f7ff fc2e 	bl	8005430 <memset>
 8005bd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005bd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005bdc:	4620      	mov	r0, r4
 8005bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be0:	3468      	adds	r4, #104	; 0x68
 8005be2:	e7d9      	b.n	8005b98 <__sfp+0x1c>
 8005be4:	2104      	movs	r1, #4
 8005be6:	4638      	mov	r0, r7
 8005be8:	f7ff ff62 	bl	8005ab0 <__sfmoreglue>
 8005bec:	4604      	mov	r4, r0
 8005bee:	6030      	str	r0, [r6, #0]
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d1d5      	bne.n	8005ba0 <__sfp+0x24>
 8005bf4:	f7ff ff78 	bl	8005ae8 <__sfp_lock_release>
 8005bf8:	230c      	movs	r3, #12
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	e7ee      	b.n	8005bdc <__sfp+0x60>
 8005bfe:	bf00      	nop
 8005c00:	08009380 	.word	0x08009380
 8005c04:	ffff0001 	.word	0xffff0001

08005c08 <_fwalk_reent>:
 8005c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	4688      	mov	r8, r1
 8005c10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c14:	2700      	movs	r7, #0
 8005c16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c1a:	f1b9 0901 	subs.w	r9, r9, #1
 8005c1e:	d505      	bpl.n	8005c2c <_fwalk_reent+0x24>
 8005c20:	6824      	ldr	r4, [r4, #0]
 8005c22:	2c00      	cmp	r4, #0
 8005c24:	d1f7      	bne.n	8005c16 <_fwalk_reent+0xe>
 8005c26:	4638      	mov	r0, r7
 8005c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c2c:	89ab      	ldrh	r3, [r5, #12]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d907      	bls.n	8005c42 <_fwalk_reent+0x3a>
 8005c32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c36:	3301      	adds	r3, #1
 8005c38:	d003      	beq.n	8005c42 <_fwalk_reent+0x3a>
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	47c0      	blx	r8
 8005c40:	4307      	orrs	r7, r0
 8005c42:	3568      	adds	r5, #104	; 0x68
 8005c44:	e7e9      	b.n	8005c1a <_fwalk_reent+0x12>

08005c46 <__retarget_lock_init_recursive>:
 8005c46:	4770      	bx	lr

08005c48 <__retarget_lock_acquire_recursive>:
 8005c48:	4770      	bx	lr

08005c4a <__retarget_lock_release_recursive>:
 8005c4a:	4770      	bx	lr

08005c4c <_lseek_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	4d07      	ldr	r5, [pc, #28]	; (8005c6c <_lseek_r+0x20>)
 8005c50:	4604      	mov	r4, r0
 8005c52:	4608      	mov	r0, r1
 8005c54:	4611      	mov	r1, r2
 8005c56:	2200      	movs	r2, #0
 8005c58:	602a      	str	r2, [r5, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f7fb fd4a 	bl	80016f4 <_lseek>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d102      	bne.n	8005c6a <_lseek_r+0x1e>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	b103      	cbz	r3, 8005c6a <_lseek_r+0x1e>
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	200030fc 	.word	0x200030fc

08005c70 <__swhatbuf_r>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	460e      	mov	r6, r1
 8005c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	b096      	sub	sp, #88	; 0x58
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	461d      	mov	r5, r3
 8005c80:	da08      	bge.n	8005c94 <__swhatbuf_r+0x24>
 8005c82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	602a      	str	r2, [r5, #0]
 8005c8a:	061a      	lsls	r2, r3, #24
 8005c8c:	d410      	bmi.n	8005cb0 <__swhatbuf_r+0x40>
 8005c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c92:	e00e      	b.n	8005cb2 <__swhatbuf_r+0x42>
 8005c94:	466a      	mov	r2, sp
 8005c96:	f001 fa2b 	bl	80070f0 <_fstat_r>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	dbf1      	blt.n	8005c82 <__swhatbuf_r+0x12>
 8005c9e:	9a01      	ldr	r2, [sp, #4]
 8005ca0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ca4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ca8:	425a      	negs	r2, r3
 8005caa:	415a      	adcs	r2, r3
 8005cac:	602a      	str	r2, [r5, #0]
 8005cae:	e7ee      	b.n	8005c8e <__swhatbuf_r+0x1e>
 8005cb0:	2340      	movs	r3, #64	; 0x40
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	b016      	add	sp, #88	; 0x58
 8005cb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005cbc <__smakebuf_r>:
 8005cbc:	898b      	ldrh	r3, [r1, #12]
 8005cbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cc0:	079d      	lsls	r5, r3, #30
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	d507      	bpl.n	8005cd8 <__smakebuf_r+0x1c>
 8005cc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	6123      	str	r3, [r4, #16]
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	6163      	str	r3, [r4, #20]
 8005cd4:	b002      	add	sp, #8
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	ab01      	add	r3, sp, #4
 8005cda:	466a      	mov	r2, sp
 8005cdc:	f7ff ffc8 	bl	8005c70 <__swhatbuf_r>
 8005ce0:	9900      	ldr	r1, [sp, #0]
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	f000 f895 	bl	8005e14 <_malloc_r>
 8005cea:	b948      	cbnz	r0, 8005d00 <__smakebuf_r+0x44>
 8005cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf0:	059a      	lsls	r2, r3, #22
 8005cf2:	d4ef      	bmi.n	8005cd4 <__smakebuf_r+0x18>
 8005cf4:	f023 0303 	bic.w	r3, r3, #3
 8005cf8:	f043 0302 	orr.w	r3, r3, #2
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	e7e3      	b.n	8005cc8 <__smakebuf_r+0xc>
 8005d00:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <__smakebuf_r+0x7c>)
 8005d02:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	6020      	str	r0, [r4, #0]
 8005d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0c:	81a3      	strh	r3, [r4, #12]
 8005d0e:	9b00      	ldr	r3, [sp, #0]
 8005d10:	6163      	str	r3, [r4, #20]
 8005d12:	9b01      	ldr	r3, [sp, #4]
 8005d14:	6120      	str	r0, [r4, #16]
 8005d16:	b15b      	cbz	r3, 8005d30 <__smakebuf_r+0x74>
 8005d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f001 f9f9 	bl	8007114 <_isatty_r>
 8005d22:	b128      	cbz	r0, 8005d30 <__smakebuf_r+0x74>
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	89a0      	ldrh	r0, [r4, #12]
 8005d32:	4305      	orrs	r5, r0
 8005d34:	81a5      	strh	r5, [r4, #12]
 8005d36:	e7cd      	b.n	8005cd4 <__smakebuf_r+0x18>
 8005d38:	08005aa5 	.word	0x08005aa5

08005d3c <_free_r>:
 8005d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	d044      	beq.n	8005dcc <_free_r+0x90>
 8005d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d46:	9001      	str	r0, [sp, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d4e:	bfb8      	it	lt
 8005d50:	18e4      	addlt	r4, r4, r3
 8005d52:	f001 fa09 	bl	8007168 <__malloc_lock>
 8005d56:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <_free_r+0x94>)
 8005d58:	9801      	ldr	r0, [sp, #4]
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	b933      	cbnz	r3, 8005d6c <_free_r+0x30>
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	6014      	str	r4, [r2, #0]
 8005d62:	b003      	add	sp, #12
 8005d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d68:	f001 ba04 	b.w	8007174 <__malloc_unlock>
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d908      	bls.n	8005d82 <_free_r+0x46>
 8005d70:	6825      	ldr	r5, [r4, #0]
 8005d72:	1961      	adds	r1, r4, r5
 8005d74:	428b      	cmp	r3, r1
 8005d76:	bf01      	itttt	eq
 8005d78:	6819      	ldreq	r1, [r3, #0]
 8005d7a:	685b      	ldreq	r3, [r3, #4]
 8005d7c:	1949      	addeq	r1, r1, r5
 8005d7e:	6021      	streq	r1, [r4, #0]
 8005d80:	e7ed      	b.n	8005d5e <_free_r+0x22>
 8005d82:	461a      	mov	r2, r3
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	b10b      	cbz	r3, 8005d8c <_free_r+0x50>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d9fa      	bls.n	8005d82 <_free_r+0x46>
 8005d8c:	6811      	ldr	r1, [r2, #0]
 8005d8e:	1855      	adds	r5, r2, r1
 8005d90:	42a5      	cmp	r5, r4
 8005d92:	d10b      	bne.n	8005dac <_free_r+0x70>
 8005d94:	6824      	ldr	r4, [r4, #0]
 8005d96:	4421      	add	r1, r4
 8005d98:	1854      	adds	r4, r2, r1
 8005d9a:	42a3      	cmp	r3, r4
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	d1e0      	bne.n	8005d62 <_free_r+0x26>
 8005da0:	681c      	ldr	r4, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	6053      	str	r3, [r2, #4]
 8005da6:	4421      	add	r1, r4
 8005da8:	6011      	str	r1, [r2, #0]
 8005daa:	e7da      	b.n	8005d62 <_free_r+0x26>
 8005dac:	d902      	bls.n	8005db4 <_free_r+0x78>
 8005dae:	230c      	movs	r3, #12
 8005db0:	6003      	str	r3, [r0, #0]
 8005db2:	e7d6      	b.n	8005d62 <_free_r+0x26>
 8005db4:	6825      	ldr	r5, [r4, #0]
 8005db6:	1961      	adds	r1, r4, r5
 8005db8:	428b      	cmp	r3, r1
 8005dba:	bf04      	itt	eq
 8005dbc:	6819      	ldreq	r1, [r3, #0]
 8005dbe:	685b      	ldreq	r3, [r3, #4]
 8005dc0:	6063      	str	r3, [r4, #4]
 8005dc2:	bf04      	itt	eq
 8005dc4:	1949      	addeq	r1, r1, r5
 8005dc6:	6021      	streq	r1, [r4, #0]
 8005dc8:	6054      	str	r4, [r2, #4]
 8005dca:	e7ca      	b.n	8005d62 <_free_r+0x26>
 8005dcc:	b003      	add	sp, #12
 8005dce:	bd30      	pop	{r4, r5, pc}
 8005dd0:	200030f4 	.word	0x200030f4

08005dd4 <sbrk_aligned>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	4e0e      	ldr	r6, [pc, #56]	; (8005e10 <sbrk_aligned+0x3c>)
 8005dd8:	460c      	mov	r4, r1
 8005dda:	6831      	ldr	r1, [r6, #0]
 8005ddc:	4605      	mov	r5, r0
 8005dde:	b911      	cbnz	r1, 8005de6 <sbrk_aligned+0x12>
 8005de0:	f001 f80c 	bl	8006dfc <_sbrk_r>
 8005de4:	6030      	str	r0, [r6, #0]
 8005de6:	4621      	mov	r1, r4
 8005de8:	4628      	mov	r0, r5
 8005dea:	f001 f807 	bl	8006dfc <_sbrk_r>
 8005dee:	1c43      	adds	r3, r0, #1
 8005df0:	d00a      	beq.n	8005e08 <sbrk_aligned+0x34>
 8005df2:	1cc4      	adds	r4, r0, #3
 8005df4:	f024 0403 	bic.w	r4, r4, #3
 8005df8:	42a0      	cmp	r0, r4
 8005dfa:	d007      	beq.n	8005e0c <sbrk_aligned+0x38>
 8005dfc:	1a21      	subs	r1, r4, r0
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 fffc 	bl	8006dfc <_sbrk_r>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d101      	bne.n	8005e0c <sbrk_aligned+0x38>
 8005e08:	f04f 34ff 	mov.w	r4, #4294967295
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	200030f8 	.word	0x200030f8

08005e14 <_malloc_r>:
 8005e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e18:	1ccd      	adds	r5, r1, #3
 8005e1a:	f025 0503 	bic.w	r5, r5, #3
 8005e1e:	3508      	adds	r5, #8
 8005e20:	2d0c      	cmp	r5, #12
 8005e22:	bf38      	it	cc
 8005e24:	250c      	movcc	r5, #12
 8005e26:	2d00      	cmp	r5, #0
 8005e28:	4607      	mov	r7, r0
 8005e2a:	db01      	blt.n	8005e30 <_malloc_r+0x1c>
 8005e2c:	42a9      	cmp	r1, r5
 8005e2e:	d905      	bls.n	8005e3c <_malloc_r+0x28>
 8005e30:	230c      	movs	r3, #12
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	2600      	movs	r6, #0
 8005e36:	4630      	mov	r0, r6
 8005e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e3c:	4e2e      	ldr	r6, [pc, #184]	; (8005ef8 <_malloc_r+0xe4>)
 8005e3e:	f001 f993 	bl	8007168 <__malloc_lock>
 8005e42:	6833      	ldr	r3, [r6, #0]
 8005e44:	461c      	mov	r4, r3
 8005e46:	bb34      	cbnz	r4, 8005e96 <_malloc_r+0x82>
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	f7ff ffc2 	bl	8005dd4 <sbrk_aligned>
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	4604      	mov	r4, r0
 8005e54:	d14d      	bne.n	8005ef2 <_malloc_r+0xde>
 8005e56:	6834      	ldr	r4, [r6, #0]
 8005e58:	4626      	mov	r6, r4
 8005e5a:	2e00      	cmp	r6, #0
 8005e5c:	d140      	bne.n	8005ee0 <_malloc_r+0xcc>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	4631      	mov	r1, r6
 8005e62:	4638      	mov	r0, r7
 8005e64:	eb04 0803 	add.w	r8, r4, r3
 8005e68:	f000 ffc8 	bl	8006dfc <_sbrk_r>
 8005e6c:	4580      	cmp	r8, r0
 8005e6e:	d13a      	bne.n	8005ee6 <_malloc_r+0xd2>
 8005e70:	6821      	ldr	r1, [r4, #0]
 8005e72:	3503      	adds	r5, #3
 8005e74:	1a6d      	subs	r5, r5, r1
 8005e76:	f025 0503 	bic.w	r5, r5, #3
 8005e7a:	3508      	adds	r5, #8
 8005e7c:	2d0c      	cmp	r5, #12
 8005e7e:	bf38      	it	cc
 8005e80:	250c      	movcc	r5, #12
 8005e82:	4629      	mov	r1, r5
 8005e84:	4638      	mov	r0, r7
 8005e86:	f7ff ffa5 	bl	8005dd4 <sbrk_aligned>
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d02b      	beq.n	8005ee6 <_malloc_r+0xd2>
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	442b      	add	r3, r5
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	e00e      	b.n	8005eb4 <_malloc_r+0xa0>
 8005e96:	6822      	ldr	r2, [r4, #0]
 8005e98:	1b52      	subs	r2, r2, r5
 8005e9a:	d41e      	bmi.n	8005eda <_malloc_r+0xc6>
 8005e9c:	2a0b      	cmp	r2, #11
 8005e9e:	d916      	bls.n	8005ece <_malloc_r+0xba>
 8005ea0:	1961      	adds	r1, r4, r5
 8005ea2:	42a3      	cmp	r3, r4
 8005ea4:	6025      	str	r5, [r4, #0]
 8005ea6:	bf18      	it	ne
 8005ea8:	6059      	strne	r1, [r3, #4]
 8005eaa:	6863      	ldr	r3, [r4, #4]
 8005eac:	bf08      	it	eq
 8005eae:	6031      	streq	r1, [r6, #0]
 8005eb0:	5162      	str	r2, [r4, r5]
 8005eb2:	604b      	str	r3, [r1, #4]
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	f104 060b 	add.w	r6, r4, #11
 8005eba:	f001 f95b 	bl	8007174 <__malloc_unlock>
 8005ebe:	f026 0607 	bic.w	r6, r6, #7
 8005ec2:	1d23      	adds	r3, r4, #4
 8005ec4:	1af2      	subs	r2, r6, r3
 8005ec6:	d0b6      	beq.n	8005e36 <_malloc_r+0x22>
 8005ec8:	1b9b      	subs	r3, r3, r6
 8005eca:	50a3      	str	r3, [r4, r2]
 8005ecc:	e7b3      	b.n	8005e36 <_malloc_r+0x22>
 8005ece:	6862      	ldr	r2, [r4, #4]
 8005ed0:	42a3      	cmp	r3, r4
 8005ed2:	bf0c      	ite	eq
 8005ed4:	6032      	streq	r2, [r6, #0]
 8005ed6:	605a      	strne	r2, [r3, #4]
 8005ed8:	e7ec      	b.n	8005eb4 <_malloc_r+0xa0>
 8005eda:	4623      	mov	r3, r4
 8005edc:	6864      	ldr	r4, [r4, #4]
 8005ede:	e7b2      	b.n	8005e46 <_malloc_r+0x32>
 8005ee0:	4634      	mov	r4, r6
 8005ee2:	6876      	ldr	r6, [r6, #4]
 8005ee4:	e7b9      	b.n	8005e5a <_malloc_r+0x46>
 8005ee6:	230c      	movs	r3, #12
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	4638      	mov	r0, r7
 8005eec:	f001 f942 	bl	8007174 <__malloc_unlock>
 8005ef0:	e7a1      	b.n	8005e36 <_malloc_r+0x22>
 8005ef2:	6025      	str	r5, [r4, #0]
 8005ef4:	e7de      	b.n	8005eb4 <_malloc_r+0xa0>
 8005ef6:	bf00      	nop
 8005ef8:	200030f4 	.word	0x200030f4

08005efc <__ssputs_r>:
 8005efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	688e      	ldr	r6, [r1, #8]
 8005f02:	429e      	cmp	r6, r3
 8005f04:	4682      	mov	sl, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	4690      	mov	r8, r2
 8005f0a:	461f      	mov	r7, r3
 8005f0c:	d838      	bhi.n	8005f80 <__ssputs_r+0x84>
 8005f0e:	898a      	ldrh	r2, [r1, #12]
 8005f10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f14:	d032      	beq.n	8005f7c <__ssputs_r+0x80>
 8005f16:	6825      	ldr	r5, [r4, #0]
 8005f18:	6909      	ldr	r1, [r1, #16]
 8005f1a:	eba5 0901 	sub.w	r9, r5, r1
 8005f1e:	6965      	ldr	r5, [r4, #20]
 8005f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f28:	3301      	adds	r3, #1
 8005f2a:	444b      	add	r3, r9
 8005f2c:	106d      	asrs	r5, r5, #1
 8005f2e:	429d      	cmp	r5, r3
 8005f30:	bf38      	it	cc
 8005f32:	461d      	movcc	r5, r3
 8005f34:	0553      	lsls	r3, r2, #21
 8005f36:	d531      	bpl.n	8005f9c <__ssputs_r+0xa0>
 8005f38:	4629      	mov	r1, r5
 8005f3a:	f7ff ff6b 	bl	8005e14 <_malloc_r>
 8005f3e:	4606      	mov	r6, r0
 8005f40:	b950      	cbnz	r0, 8005f58 <__ssputs_r+0x5c>
 8005f42:	230c      	movs	r3, #12
 8005f44:	f8ca 3000 	str.w	r3, [sl]
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f4e:	81a3      	strh	r3, [r4, #12]
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f58:	6921      	ldr	r1, [r4, #16]
 8005f5a:	464a      	mov	r2, r9
 8005f5c:	f7ff fa5a 	bl	8005414 <memcpy>
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6a:	81a3      	strh	r3, [r4, #12]
 8005f6c:	6126      	str	r6, [r4, #16]
 8005f6e:	6165      	str	r5, [r4, #20]
 8005f70:	444e      	add	r6, r9
 8005f72:	eba5 0509 	sub.w	r5, r5, r9
 8005f76:	6026      	str	r6, [r4, #0]
 8005f78:	60a5      	str	r5, [r4, #8]
 8005f7a:	463e      	mov	r6, r7
 8005f7c:	42be      	cmp	r6, r7
 8005f7e:	d900      	bls.n	8005f82 <__ssputs_r+0x86>
 8005f80:	463e      	mov	r6, r7
 8005f82:	6820      	ldr	r0, [r4, #0]
 8005f84:	4632      	mov	r2, r6
 8005f86:	4641      	mov	r1, r8
 8005f88:	f001 f8d4 	bl	8007134 <memmove>
 8005f8c:	68a3      	ldr	r3, [r4, #8]
 8005f8e:	1b9b      	subs	r3, r3, r6
 8005f90:	60a3      	str	r3, [r4, #8]
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	4433      	add	r3, r6
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	2000      	movs	r0, #0
 8005f9a:	e7db      	b.n	8005f54 <__ssputs_r+0x58>
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	f001 f8ef 	bl	8007180 <_realloc_r>
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d1e1      	bne.n	8005f6c <__ssputs_r+0x70>
 8005fa8:	6921      	ldr	r1, [r4, #16]
 8005faa:	4650      	mov	r0, sl
 8005fac:	f7ff fec6 	bl	8005d3c <_free_r>
 8005fb0:	e7c7      	b.n	8005f42 <__ssputs_r+0x46>
	...

08005fb4 <_svfiprintf_r>:
 8005fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb8:	4698      	mov	r8, r3
 8005fba:	898b      	ldrh	r3, [r1, #12]
 8005fbc:	061b      	lsls	r3, r3, #24
 8005fbe:	b09d      	sub	sp, #116	; 0x74
 8005fc0:	4607      	mov	r7, r0
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	4614      	mov	r4, r2
 8005fc6:	d50e      	bpl.n	8005fe6 <_svfiprintf_r+0x32>
 8005fc8:	690b      	ldr	r3, [r1, #16]
 8005fca:	b963      	cbnz	r3, 8005fe6 <_svfiprintf_r+0x32>
 8005fcc:	2140      	movs	r1, #64	; 0x40
 8005fce:	f7ff ff21 	bl	8005e14 <_malloc_r>
 8005fd2:	6028      	str	r0, [r5, #0]
 8005fd4:	6128      	str	r0, [r5, #16]
 8005fd6:	b920      	cbnz	r0, 8005fe2 <_svfiprintf_r+0x2e>
 8005fd8:	230c      	movs	r3, #12
 8005fda:	603b      	str	r3, [r7, #0]
 8005fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe0:	e0d1      	b.n	8006186 <_svfiprintf_r+0x1d2>
 8005fe2:	2340      	movs	r3, #64	; 0x40
 8005fe4:	616b      	str	r3, [r5, #20]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fea:	2320      	movs	r3, #32
 8005fec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ff4:	2330      	movs	r3, #48	; 0x30
 8005ff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80061a0 <_svfiprintf_r+0x1ec>
 8005ffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ffe:	f04f 0901 	mov.w	r9, #1
 8006002:	4623      	mov	r3, r4
 8006004:	469a      	mov	sl, r3
 8006006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800600a:	b10a      	cbz	r2, 8006010 <_svfiprintf_r+0x5c>
 800600c:	2a25      	cmp	r2, #37	; 0x25
 800600e:	d1f9      	bne.n	8006004 <_svfiprintf_r+0x50>
 8006010:	ebba 0b04 	subs.w	fp, sl, r4
 8006014:	d00b      	beq.n	800602e <_svfiprintf_r+0x7a>
 8006016:	465b      	mov	r3, fp
 8006018:	4622      	mov	r2, r4
 800601a:	4629      	mov	r1, r5
 800601c:	4638      	mov	r0, r7
 800601e:	f7ff ff6d 	bl	8005efc <__ssputs_r>
 8006022:	3001      	adds	r0, #1
 8006024:	f000 80aa 	beq.w	800617c <_svfiprintf_r+0x1c8>
 8006028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800602a:	445a      	add	r2, fp
 800602c:	9209      	str	r2, [sp, #36]	; 0x24
 800602e:	f89a 3000 	ldrb.w	r3, [sl]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 80a2 	beq.w	800617c <_svfiprintf_r+0x1c8>
 8006038:	2300      	movs	r3, #0
 800603a:	f04f 32ff 	mov.w	r2, #4294967295
 800603e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006042:	f10a 0a01 	add.w	sl, sl, #1
 8006046:	9304      	str	r3, [sp, #16]
 8006048:	9307      	str	r3, [sp, #28]
 800604a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800604e:	931a      	str	r3, [sp, #104]	; 0x68
 8006050:	4654      	mov	r4, sl
 8006052:	2205      	movs	r2, #5
 8006054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006058:	4851      	ldr	r0, [pc, #324]	; (80061a0 <_svfiprintf_r+0x1ec>)
 800605a:	f7fa f8d1 	bl	8000200 <memchr>
 800605e:	9a04      	ldr	r2, [sp, #16]
 8006060:	b9d8      	cbnz	r0, 800609a <_svfiprintf_r+0xe6>
 8006062:	06d0      	lsls	r0, r2, #27
 8006064:	bf44      	itt	mi
 8006066:	2320      	movmi	r3, #32
 8006068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800606c:	0711      	lsls	r1, r2, #28
 800606e:	bf44      	itt	mi
 8006070:	232b      	movmi	r3, #43	; 0x2b
 8006072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006076:	f89a 3000 	ldrb.w	r3, [sl]
 800607a:	2b2a      	cmp	r3, #42	; 0x2a
 800607c:	d015      	beq.n	80060aa <_svfiprintf_r+0xf6>
 800607e:	9a07      	ldr	r2, [sp, #28]
 8006080:	4654      	mov	r4, sl
 8006082:	2000      	movs	r0, #0
 8006084:	f04f 0c0a 	mov.w	ip, #10
 8006088:	4621      	mov	r1, r4
 800608a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800608e:	3b30      	subs	r3, #48	; 0x30
 8006090:	2b09      	cmp	r3, #9
 8006092:	d94e      	bls.n	8006132 <_svfiprintf_r+0x17e>
 8006094:	b1b0      	cbz	r0, 80060c4 <_svfiprintf_r+0x110>
 8006096:	9207      	str	r2, [sp, #28]
 8006098:	e014      	b.n	80060c4 <_svfiprintf_r+0x110>
 800609a:	eba0 0308 	sub.w	r3, r0, r8
 800609e:	fa09 f303 	lsl.w	r3, r9, r3
 80060a2:	4313      	orrs	r3, r2
 80060a4:	9304      	str	r3, [sp, #16]
 80060a6:	46a2      	mov	sl, r4
 80060a8:	e7d2      	b.n	8006050 <_svfiprintf_r+0x9c>
 80060aa:	9b03      	ldr	r3, [sp, #12]
 80060ac:	1d19      	adds	r1, r3, #4
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	9103      	str	r1, [sp, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	bfbb      	ittet	lt
 80060b6:	425b      	neglt	r3, r3
 80060b8:	f042 0202 	orrlt.w	r2, r2, #2
 80060bc:	9307      	strge	r3, [sp, #28]
 80060be:	9307      	strlt	r3, [sp, #28]
 80060c0:	bfb8      	it	lt
 80060c2:	9204      	strlt	r2, [sp, #16]
 80060c4:	7823      	ldrb	r3, [r4, #0]
 80060c6:	2b2e      	cmp	r3, #46	; 0x2e
 80060c8:	d10c      	bne.n	80060e4 <_svfiprintf_r+0x130>
 80060ca:	7863      	ldrb	r3, [r4, #1]
 80060cc:	2b2a      	cmp	r3, #42	; 0x2a
 80060ce:	d135      	bne.n	800613c <_svfiprintf_r+0x188>
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	1d1a      	adds	r2, r3, #4
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	9203      	str	r2, [sp, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	bfb8      	it	lt
 80060dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80060e0:	3402      	adds	r4, #2
 80060e2:	9305      	str	r3, [sp, #20]
 80060e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061b0 <_svfiprintf_r+0x1fc>
 80060e8:	7821      	ldrb	r1, [r4, #0]
 80060ea:	2203      	movs	r2, #3
 80060ec:	4650      	mov	r0, sl
 80060ee:	f7fa f887 	bl	8000200 <memchr>
 80060f2:	b140      	cbz	r0, 8006106 <_svfiprintf_r+0x152>
 80060f4:	2340      	movs	r3, #64	; 0x40
 80060f6:	eba0 000a 	sub.w	r0, r0, sl
 80060fa:	fa03 f000 	lsl.w	r0, r3, r0
 80060fe:	9b04      	ldr	r3, [sp, #16]
 8006100:	4303      	orrs	r3, r0
 8006102:	3401      	adds	r4, #1
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800610a:	4826      	ldr	r0, [pc, #152]	; (80061a4 <_svfiprintf_r+0x1f0>)
 800610c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006110:	2206      	movs	r2, #6
 8006112:	f7fa f875 	bl	8000200 <memchr>
 8006116:	2800      	cmp	r0, #0
 8006118:	d038      	beq.n	800618c <_svfiprintf_r+0x1d8>
 800611a:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <_svfiprintf_r+0x1f4>)
 800611c:	bb1b      	cbnz	r3, 8006166 <_svfiprintf_r+0x1b2>
 800611e:	9b03      	ldr	r3, [sp, #12]
 8006120:	3307      	adds	r3, #7
 8006122:	f023 0307 	bic.w	r3, r3, #7
 8006126:	3308      	adds	r3, #8
 8006128:	9303      	str	r3, [sp, #12]
 800612a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800612c:	4433      	add	r3, r6
 800612e:	9309      	str	r3, [sp, #36]	; 0x24
 8006130:	e767      	b.n	8006002 <_svfiprintf_r+0x4e>
 8006132:	fb0c 3202 	mla	r2, ip, r2, r3
 8006136:	460c      	mov	r4, r1
 8006138:	2001      	movs	r0, #1
 800613a:	e7a5      	b.n	8006088 <_svfiprintf_r+0xd4>
 800613c:	2300      	movs	r3, #0
 800613e:	3401      	adds	r4, #1
 8006140:	9305      	str	r3, [sp, #20]
 8006142:	4619      	mov	r1, r3
 8006144:	f04f 0c0a 	mov.w	ip, #10
 8006148:	4620      	mov	r0, r4
 800614a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800614e:	3a30      	subs	r2, #48	; 0x30
 8006150:	2a09      	cmp	r2, #9
 8006152:	d903      	bls.n	800615c <_svfiprintf_r+0x1a8>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0c5      	beq.n	80060e4 <_svfiprintf_r+0x130>
 8006158:	9105      	str	r1, [sp, #20]
 800615a:	e7c3      	b.n	80060e4 <_svfiprintf_r+0x130>
 800615c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006160:	4604      	mov	r4, r0
 8006162:	2301      	movs	r3, #1
 8006164:	e7f0      	b.n	8006148 <_svfiprintf_r+0x194>
 8006166:	ab03      	add	r3, sp, #12
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	462a      	mov	r2, r5
 800616c:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <_svfiprintf_r+0x1f8>)
 800616e:	a904      	add	r1, sp, #16
 8006170:	4638      	mov	r0, r7
 8006172:	f3af 8000 	nop.w
 8006176:	1c42      	adds	r2, r0, #1
 8006178:	4606      	mov	r6, r0
 800617a:	d1d6      	bne.n	800612a <_svfiprintf_r+0x176>
 800617c:	89ab      	ldrh	r3, [r5, #12]
 800617e:	065b      	lsls	r3, r3, #25
 8006180:	f53f af2c 	bmi.w	8005fdc <_svfiprintf_r+0x28>
 8006184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006186:	b01d      	add	sp, #116	; 0x74
 8006188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618c:	ab03      	add	r3, sp, #12
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	462a      	mov	r2, r5
 8006192:	4b06      	ldr	r3, [pc, #24]	; (80061ac <_svfiprintf_r+0x1f8>)
 8006194:	a904      	add	r1, sp, #16
 8006196:	4638      	mov	r0, r7
 8006198:	f000 fba6 	bl	80068e8 <_printf_i>
 800619c:	e7eb      	b.n	8006176 <_svfiprintf_r+0x1c2>
 800619e:	bf00      	nop
 80061a0:	080093e4 	.word	0x080093e4
 80061a4:	080093ee 	.word	0x080093ee
 80061a8:	00000000 	.word	0x00000000
 80061ac:	08005efd 	.word	0x08005efd
 80061b0:	080093ea 	.word	0x080093ea

080061b4 <_sungetc_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	1c4b      	adds	r3, r1, #1
 80061b8:	4614      	mov	r4, r2
 80061ba:	d103      	bne.n	80061c4 <_sungetc_r+0x10>
 80061bc:	f04f 35ff 	mov.w	r5, #4294967295
 80061c0:	4628      	mov	r0, r5
 80061c2:	bd38      	pop	{r3, r4, r5, pc}
 80061c4:	8993      	ldrh	r3, [r2, #12]
 80061c6:	f023 0320 	bic.w	r3, r3, #32
 80061ca:	8193      	strh	r3, [r2, #12]
 80061cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061ce:	6852      	ldr	r2, [r2, #4]
 80061d0:	b2cd      	uxtb	r5, r1
 80061d2:	b18b      	cbz	r3, 80061f8 <_sungetc_r+0x44>
 80061d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061d6:	4293      	cmp	r3, r2
 80061d8:	dd08      	ble.n	80061ec <_sungetc_r+0x38>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	1e5a      	subs	r2, r3, #1
 80061de:	6022      	str	r2, [r4, #0]
 80061e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80061e4:	6863      	ldr	r3, [r4, #4]
 80061e6:	3301      	adds	r3, #1
 80061e8:	6063      	str	r3, [r4, #4]
 80061ea:	e7e9      	b.n	80061c0 <_sungetc_r+0xc>
 80061ec:	4621      	mov	r1, r4
 80061ee:	f000 ff45 	bl	800707c <__submore>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	d0f1      	beq.n	80061da <_sungetc_r+0x26>
 80061f6:	e7e1      	b.n	80061bc <_sungetc_r+0x8>
 80061f8:	6921      	ldr	r1, [r4, #16]
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	b151      	cbz	r1, 8006214 <_sungetc_r+0x60>
 80061fe:	4299      	cmp	r1, r3
 8006200:	d208      	bcs.n	8006214 <_sungetc_r+0x60>
 8006202:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006206:	42a9      	cmp	r1, r5
 8006208:	d104      	bne.n	8006214 <_sungetc_r+0x60>
 800620a:	3b01      	subs	r3, #1
 800620c:	3201      	adds	r2, #1
 800620e:	6023      	str	r3, [r4, #0]
 8006210:	6062      	str	r2, [r4, #4]
 8006212:	e7d5      	b.n	80061c0 <_sungetc_r+0xc>
 8006214:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800621c:	6363      	str	r3, [r4, #52]	; 0x34
 800621e:	2303      	movs	r3, #3
 8006220:	63a3      	str	r3, [r4, #56]	; 0x38
 8006222:	4623      	mov	r3, r4
 8006224:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	2301      	movs	r3, #1
 800622c:	e7dc      	b.n	80061e8 <_sungetc_r+0x34>

0800622e <__ssrefill_r>:
 800622e:	b510      	push	{r4, lr}
 8006230:	460c      	mov	r4, r1
 8006232:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006234:	b169      	cbz	r1, 8006252 <__ssrefill_r+0x24>
 8006236:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800623a:	4299      	cmp	r1, r3
 800623c:	d001      	beq.n	8006242 <__ssrefill_r+0x14>
 800623e:	f7ff fd7d 	bl	8005d3c <_free_r>
 8006242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006244:	6063      	str	r3, [r4, #4]
 8006246:	2000      	movs	r0, #0
 8006248:	6360      	str	r0, [r4, #52]	; 0x34
 800624a:	b113      	cbz	r3, 8006252 <__ssrefill_r+0x24>
 800624c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	bd10      	pop	{r4, pc}
 8006252:	6923      	ldr	r3, [r4, #16]
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	2300      	movs	r3, #0
 8006258:	6063      	str	r3, [r4, #4]
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	f043 0320 	orr.w	r3, r3, #32
 8006260:	81a3      	strh	r3, [r4, #12]
 8006262:	f04f 30ff 	mov.w	r0, #4294967295
 8006266:	e7f3      	b.n	8006250 <__ssrefill_r+0x22>

08006268 <__ssvfiscanf_r>:
 8006268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800626c:	460c      	mov	r4, r1
 800626e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006272:	2100      	movs	r1, #0
 8006274:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006278:	49a6      	ldr	r1, [pc, #664]	; (8006514 <__ssvfiscanf_r+0x2ac>)
 800627a:	91a0      	str	r1, [sp, #640]	; 0x280
 800627c:	f10d 0804 	add.w	r8, sp, #4
 8006280:	49a5      	ldr	r1, [pc, #660]	; (8006518 <__ssvfiscanf_r+0x2b0>)
 8006282:	4fa6      	ldr	r7, [pc, #664]	; (800651c <__ssvfiscanf_r+0x2b4>)
 8006284:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006520 <__ssvfiscanf_r+0x2b8>
 8006288:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800628c:	4606      	mov	r6, r0
 800628e:	91a1      	str	r1, [sp, #644]	; 0x284
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	7813      	ldrb	r3, [r2, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 815a 	beq.w	800654e <__ssvfiscanf_r+0x2e6>
 800629a:	5dd9      	ldrb	r1, [r3, r7]
 800629c:	f011 0108 	ands.w	r1, r1, #8
 80062a0:	f102 0501 	add.w	r5, r2, #1
 80062a4:	d019      	beq.n	80062da <__ssvfiscanf_r+0x72>
 80062a6:	6863      	ldr	r3, [r4, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	dd0f      	ble.n	80062cc <__ssvfiscanf_r+0x64>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	781a      	ldrb	r2, [r3, #0]
 80062b0:	5cba      	ldrb	r2, [r7, r2]
 80062b2:	0712      	lsls	r2, r2, #28
 80062b4:	d401      	bmi.n	80062ba <__ssvfiscanf_r+0x52>
 80062b6:	462a      	mov	r2, r5
 80062b8:	e7eb      	b.n	8006292 <__ssvfiscanf_r+0x2a>
 80062ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80062bc:	3201      	adds	r2, #1
 80062be:	9245      	str	r2, [sp, #276]	; 0x114
 80062c0:	6862      	ldr	r2, [r4, #4]
 80062c2:	3301      	adds	r3, #1
 80062c4:	3a01      	subs	r2, #1
 80062c6:	6062      	str	r2, [r4, #4]
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	e7ec      	b.n	80062a6 <__ssvfiscanf_r+0x3e>
 80062cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80062ce:	4621      	mov	r1, r4
 80062d0:	4630      	mov	r0, r6
 80062d2:	4798      	blx	r3
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d0e9      	beq.n	80062ac <__ssvfiscanf_r+0x44>
 80062d8:	e7ed      	b.n	80062b6 <__ssvfiscanf_r+0x4e>
 80062da:	2b25      	cmp	r3, #37	; 0x25
 80062dc:	d012      	beq.n	8006304 <__ssvfiscanf_r+0x9c>
 80062de:	469a      	mov	sl, r3
 80062e0:	6863      	ldr	r3, [r4, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f340 8091 	ble.w	800640a <__ssvfiscanf_r+0x1a2>
 80062e8:	6822      	ldr	r2, [r4, #0]
 80062ea:	7813      	ldrb	r3, [r2, #0]
 80062ec:	4553      	cmp	r3, sl
 80062ee:	f040 812e 	bne.w	800654e <__ssvfiscanf_r+0x2e6>
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	6063      	str	r3, [r4, #4]
 80062f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80062fa:	3201      	adds	r2, #1
 80062fc:	3301      	adds	r3, #1
 80062fe:	6022      	str	r2, [r4, #0]
 8006300:	9345      	str	r3, [sp, #276]	; 0x114
 8006302:	e7d8      	b.n	80062b6 <__ssvfiscanf_r+0x4e>
 8006304:	9141      	str	r1, [sp, #260]	; 0x104
 8006306:	9143      	str	r1, [sp, #268]	; 0x10c
 8006308:	7853      	ldrb	r3, [r2, #1]
 800630a:	2b2a      	cmp	r3, #42	; 0x2a
 800630c:	bf02      	ittt	eq
 800630e:	2310      	moveq	r3, #16
 8006310:	1c95      	addeq	r5, r2, #2
 8006312:	9341      	streq	r3, [sp, #260]	; 0x104
 8006314:	220a      	movs	r2, #10
 8006316:	46aa      	mov	sl, r5
 8006318:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800631c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006320:	2b09      	cmp	r3, #9
 8006322:	d91d      	bls.n	8006360 <__ssvfiscanf_r+0xf8>
 8006324:	487e      	ldr	r0, [pc, #504]	; (8006520 <__ssvfiscanf_r+0x2b8>)
 8006326:	2203      	movs	r2, #3
 8006328:	f7f9 ff6a 	bl	8000200 <memchr>
 800632c:	b140      	cbz	r0, 8006340 <__ssvfiscanf_r+0xd8>
 800632e:	2301      	movs	r3, #1
 8006330:	eba0 0009 	sub.w	r0, r0, r9
 8006334:	fa03 f000 	lsl.w	r0, r3, r0
 8006338:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800633a:	4318      	orrs	r0, r3
 800633c:	9041      	str	r0, [sp, #260]	; 0x104
 800633e:	4655      	mov	r5, sl
 8006340:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006344:	2b78      	cmp	r3, #120	; 0x78
 8006346:	d806      	bhi.n	8006356 <__ssvfiscanf_r+0xee>
 8006348:	2b57      	cmp	r3, #87	; 0x57
 800634a:	d810      	bhi.n	800636e <__ssvfiscanf_r+0x106>
 800634c:	2b25      	cmp	r3, #37	; 0x25
 800634e:	d0c6      	beq.n	80062de <__ssvfiscanf_r+0x76>
 8006350:	d856      	bhi.n	8006400 <__ssvfiscanf_r+0x198>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d064      	beq.n	8006420 <__ssvfiscanf_r+0x1b8>
 8006356:	2303      	movs	r3, #3
 8006358:	9347      	str	r3, [sp, #284]	; 0x11c
 800635a:	230a      	movs	r3, #10
 800635c:	9342      	str	r3, [sp, #264]	; 0x108
 800635e:	e071      	b.n	8006444 <__ssvfiscanf_r+0x1dc>
 8006360:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006362:	fb02 1103 	mla	r1, r2, r3, r1
 8006366:	3930      	subs	r1, #48	; 0x30
 8006368:	9143      	str	r1, [sp, #268]	; 0x10c
 800636a:	4655      	mov	r5, sl
 800636c:	e7d3      	b.n	8006316 <__ssvfiscanf_r+0xae>
 800636e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006372:	2a20      	cmp	r2, #32
 8006374:	d8ef      	bhi.n	8006356 <__ssvfiscanf_r+0xee>
 8006376:	a101      	add	r1, pc, #4	; (adr r1, 800637c <__ssvfiscanf_r+0x114>)
 8006378:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800637c:	0800642f 	.word	0x0800642f
 8006380:	08006357 	.word	0x08006357
 8006384:	08006357 	.word	0x08006357
 8006388:	0800648d 	.word	0x0800648d
 800638c:	08006357 	.word	0x08006357
 8006390:	08006357 	.word	0x08006357
 8006394:	08006357 	.word	0x08006357
 8006398:	08006357 	.word	0x08006357
 800639c:	08006357 	.word	0x08006357
 80063a0:	08006357 	.word	0x08006357
 80063a4:	08006357 	.word	0x08006357
 80063a8:	080064a3 	.word	0x080064a3
 80063ac:	08006479 	.word	0x08006479
 80063b0:	08006407 	.word	0x08006407
 80063b4:	08006407 	.word	0x08006407
 80063b8:	08006407 	.word	0x08006407
 80063bc:	08006357 	.word	0x08006357
 80063c0:	0800647d 	.word	0x0800647d
 80063c4:	08006357 	.word	0x08006357
 80063c8:	08006357 	.word	0x08006357
 80063cc:	08006357 	.word	0x08006357
 80063d0:	08006357 	.word	0x08006357
 80063d4:	080064b3 	.word	0x080064b3
 80063d8:	08006485 	.word	0x08006485
 80063dc:	08006427 	.word	0x08006427
 80063e0:	08006357 	.word	0x08006357
 80063e4:	08006357 	.word	0x08006357
 80063e8:	080064af 	.word	0x080064af
 80063ec:	08006357 	.word	0x08006357
 80063f0:	08006479 	.word	0x08006479
 80063f4:	08006357 	.word	0x08006357
 80063f8:	08006357 	.word	0x08006357
 80063fc:	0800642f 	.word	0x0800642f
 8006400:	3b45      	subs	r3, #69	; 0x45
 8006402:	2b02      	cmp	r3, #2
 8006404:	d8a7      	bhi.n	8006356 <__ssvfiscanf_r+0xee>
 8006406:	2305      	movs	r3, #5
 8006408:	e01b      	b.n	8006442 <__ssvfiscanf_r+0x1da>
 800640a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800640c:	4621      	mov	r1, r4
 800640e:	4630      	mov	r0, r6
 8006410:	4798      	blx	r3
 8006412:	2800      	cmp	r0, #0
 8006414:	f43f af68 	beq.w	80062e8 <__ssvfiscanf_r+0x80>
 8006418:	9844      	ldr	r0, [sp, #272]	; 0x110
 800641a:	2800      	cmp	r0, #0
 800641c:	f040 808d 	bne.w	800653a <__ssvfiscanf_r+0x2d2>
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	e08f      	b.n	8006546 <__ssvfiscanf_r+0x2de>
 8006426:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006428:	f042 0220 	orr.w	r2, r2, #32
 800642c:	9241      	str	r2, [sp, #260]	; 0x104
 800642e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006434:	9241      	str	r2, [sp, #260]	; 0x104
 8006436:	2210      	movs	r2, #16
 8006438:	2b6f      	cmp	r3, #111	; 0x6f
 800643a:	9242      	str	r2, [sp, #264]	; 0x108
 800643c:	bf34      	ite	cc
 800643e:	2303      	movcc	r3, #3
 8006440:	2304      	movcs	r3, #4
 8006442:	9347      	str	r3, [sp, #284]	; 0x11c
 8006444:	6863      	ldr	r3, [r4, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	dd42      	ble.n	80064d0 <__ssvfiscanf_r+0x268>
 800644a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800644c:	0659      	lsls	r1, r3, #25
 800644e:	d404      	bmi.n	800645a <__ssvfiscanf_r+0x1f2>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	781a      	ldrb	r2, [r3, #0]
 8006454:	5cba      	ldrb	r2, [r7, r2]
 8006456:	0712      	lsls	r2, r2, #28
 8006458:	d441      	bmi.n	80064de <__ssvfiscanf_r+0x276>
 800645a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800645c:	2b02      	cmp	r3, #2
 800645e:	dc50      	bgt.n	8006502 <__ssvfiscanf_r+0x29a>
 8006460:	466b      	mov	r3, sp
 8006462:	4622      	mov	r2, r4
 8006464:	a941      	add	r1, sp, #260	; 0x104
 8006466:	4630      	mov	r0, r6
 8006468:	f000 fb64 	bl	8006b34 <_scanf_chars>
 800646c:	2801      	cmp	r0, #1
 800646e:	d06e      	beq.n	800654e <__ssvfiscanf_r+0x2e6>
 8006470:	2802      	cmp	r0, #2
 8006472:	f47f af20 	bne.w	80062b6 <__ssvfiscanf_r+0x4e>
 8006476:	e7cf      	b.n	8006418 <__ssvfiscanf_r+0x1b0>
 8006478:	220a      	movs	r2, #10
 800647a:	e7dd      	b.n	8006438 <__ssvfiscanf_r+0x1d0>
 800647c:	2300      	movs	r3, #0
 800647e:	9342      	str	r3, [sp, #264]	; 0x108
 8006480:	2303      	movs	r3, #3
 8006482:	e7de      	b.n	8006442 <__ssvfiscanf_r+0x1da>
 8006484:	2308      	movs	r3, #8
 8006486:	9342      	str	r3, [sp, #264]	; 0x108
 8006488:	2304      	movs	r3, #4
 800648a:	e7da      	b.n	8006442 <__ssvfiscanf_r+0x1da>
 800648c:	4629      	mov	r1, r5
 800648e:	4640      	mov	r0, r8
 8006490:	f000 fcc4 	bl	8006e1c <__sccl>
 8006494:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800649a:	9341      	str	r3, [sp, #260]	; 0x104
 800649c:	4605      	mov	r5, r0
 800649e:	2301      	movs	r3, #1
 80064a0:	e7cf      	b.n	8006442 <__ssvfiscanf_r+0x1da>
 80064a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80064a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a8:	9341      	str	r3, [sp, #260]	; 0x104
 80064aa:	2300      	movs	r3, #0
 80064ac:	e7c9      	b.n	8006442 <__ssvfiscanf_r+0x1da>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e7c7      	b.n	8006442 <__ssvfiscanf_r+0x1da>
 80064b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80064b4:	06c3      	lsls	r3, r0, #27
 80064b6:	f53f aefe 	bmi.w	80062b6 <__ssvfiscanf_r+0x4e>
 80064ba:	9b00      	ldr	r3, [sp, #0]
 80064bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80064be:	1d19      	adds	r1, r3, #4
 80064c0:	9100      	str	r1, [sp, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f010 0f01 	tst.w	r0, #1
 80064c8:	bf14      	ite	ne
 80064ca:	801a      	strhne	r2, [r3, #0]
 80064cc:	601a      	streq	r2, [r3, #0]
 80064ce:	e6f2      	b.n	80062b6 <__ssvfiscanf_r+0x4e>
 80064d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80064d2:	4621      	mov	r1, r4
 80064d4:	4630      	mov	r0, r6
 80064d6:	4798      	blx	r3
 80064d8:	2800      	cmp	r0, #0
 80064da:	d0b6      	beq.n	800644a <__ssvfiscanf_r+0x1e2>
 80064dc:	e79c      	b.n	8006418 <__ssvfiscanf_r+0x1b0>
 80064de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80064e0:	3201      	adds	r2, #1
 80064e2:	9245      	str	r2, [sp, #276]	; 0x114
 80064e4:	6862      	ldr	r2, [r4, #4]
 80064e6:	3a01      	subs	r2, #1
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	6062      	str	r2, [r4, #4]
 80064ec:	dd02      	ble.n	80064f4 <__ssvfiscanf_r+0x28c>
 80064ee:	3301      	adds	r3, #1
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	e7ad      	b.n	8006450 <__ssvfiscanf_r+0x1e8>
 80064f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80064f6:	4621      	mov	r1, r4
 80064f8:	4630      	mov	r0, r6
 80064fa:	4798      	blx	r3
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d0a7      	beq.n	8006450 <__ssvfiscanf_r+0x1e8>
 8006500:	e78a      	b.n	8006418 <__ssvfiscanf_r+0x1b0>
 8006502:	2b04      	cmp	r3, #4
 8006504:	dc0e      	bgt.n	8006524 <__ssvfiscanf_r+0x2bc>
 8006506:	466b      	mov	r3, sp
 8006508:	4622      	mov	r2, r4
 800650a:	a941      	add	r1, sp, #260	; 0x104
 800650c:	4630      	mov	r0, r6
 800650e:	f000 fb6b 	bl	8006be8 <_scanf_i>
 8006512:	e7ab      	b.n	800646c <__ssvfiscanf_r+0x204>
 8006514:	080061b5 	.word	0x080061b5
 8006518:	0800622f 	.word	0x0800622f
 800651c:	08009433 	.word	0x08009433
 8006520:	080093ea 	.word	0x080093ea
 8006524:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <__ssvfiscanf_r+0x2ec>)
 8006526:	2b00      	cmp	r3, #0
 8006528:	f43f aec5 	beq.w	80062b6 <__ssvfiscanf_r+0x4e>
 800652c:	466b      	mov	r3, sp
 800652e:	4622      	mov	r2, r4
 8006530:	a941      	add	r1, sp, #260	; 0x104
 8006532:	4630      	mov	r0, r6
 8006534:	f3af 8000 	nop.w
 8006538:	e798      	b.n	800646c <__ssvfiscanf_r+0x204>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006540:	bf18      	it	ne
 8006542:	f04f 30ff 	movne.w	r0, #4294967295
 8006546:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800654a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006550:	e7f9      	b.n	8006546 <__ssvfiscanf_r+0x2de>
 8006552:	bf00      	nop
 8006554:	00000000 	.word	0x00000000

08006558 <__sfputc_r>:
 8006558:	6893      	ldr	r3, [r2, #8]
 800655a:	3b01      	subs	r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	b410      	push	{r4}
 8006560:	6093      	str	r3, [r2, #8]
 8006562:	da08      	bge.n	8006576 <__sfputc_r+0x1e>
 8006564:	6994      	ldr	r4, [r2, #24]
 8006566:	42a3      	cmp	r3, r4
 8006568:	db01      	blt.n	800656e <__sfputc_r+0x16>
 800656a:	290a      	cmp	r1, #10
 800656c:	d103      	bne.n	8006576 <__sfputc_r+0x1e>
 800656e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006572:	f7ff b8cf 	b.w	8005714 <__swbuf_r>
 8006576:	6813      	ldr	r3, [r2, #0]
 8006578:	1c58      	adds	r0, r3, #1
 800657a:	6010      	str	r0, [r2, #0]
 800657c:	7019      	strb	r1, [r3, #0]
 800657e:	4608      	mov	r0, r1
 8006580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006584:	4770      	bx	lr

08006586 <__sfputs_r>:
 8006586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006588:	4606      	mov	r6, r0
 800658a:	460f      	mov	r7, r1
 800658c:	4614      	mov	r4, r2
 800658e:	18d5      	adds	r5, r2, r3
 8006590:	42ac      	cmp	r4, r5
 8006592:	d101      	bne.n	8006598 <__sfputs_r+0x12>
 8006594:	2000      	movs	r0, #0
 8006596:	e007      	b.n	80065a8 <__sfputs_r+0x22>
 8006598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800659c:	463a      	mov	r2, r7
 800659e:	4630      	mov	r0, r6
 80065a0:	f7ff ffda 	bl	8006558 <__sfputc_r>
 80065a4:	1c43      	adds	r3, r0, #1
 80065a6:	d1f3      	bne.n	8006590 <__sfputs_r+0xa>
 80065a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065ac <_vfiprintf_r>:
 80065ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b0:	460d      	mov	r5, r1
 80065b2:	b09d      	sub	sp, #116	; 0x74
 80065b4:	4614      	mov	r4, r2
 80065b6:	4698      	mov	r8, r3
 80065b8:	4606      	mov	r6, r0
 80065ba:	b118      	cbz	r0, 80065c4 <_vfiprintf_r+0x18>
 80065bc:	6983      	ldr	r3, [r0, #24]
 80065be:	b90b      	cbnz	r3, 80065c4 <_vfiprintf_r+0x18>
 80065c0:	f7ff faa4 	bl	8005b0c <__sinit>
 80065c4:	4b89      	ldr	r3, [pc, #548]	; (80067ec <_vfiprintf_r+0x240>)
 80065c6:	429d      	cmp	r5, r3
 80065c8:	d11b      	bne.n	8006602 <_vfiprintf_r+0x56>
 80065ca:	6875      	ldr	r5, [r6, #4]
 80065cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065ce:	07d9      	lsls	r1, r3, #31
 80065d0:	d405      	bmi.n	80065de <_vfiprintf_r+0x32>
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	059a      	lsls	r2, r3, #22
 80065d6:	d402      	bmi.n	80065de <_vfiprintf_r+0x32>
 80065d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065da:	f7ff fb35 	bl	8005c48 <__retarget_lock_acquire_recursive>
 80065de:	89ab      	ldrh	r3, [r5, #12]
 80065e0:	071b      	lsls	r3, r3, #28
 80065e2:	d501      	bpl.n	80065e8 <_vfiprintf_r+0x3c>
 80065e4:	692b      	ldr	r3, [r5, #16]
 80065e6:	b9eb      	cbnz	r3, 8006624 <_vfiprintf_r+0x78>
 80065e8:	4629      	mov	r1, r5
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7ff f8f6 	bl	80057dc <__swsetup_r>
 80065f0:	b1c0      	cbz	r0, 8006624 <_vfiprintf_r+0x78>
 80065f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065f4:	07dc      	lsls	r4, r3, #31
 80065f6:	d50e      	bpl.n	8006616 <_vfiprintf_r+0x6a>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	b01d      	add	sp, #116	; 0x74
 80065fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006602:	4b7b      	ldr	r3, [pc, #492]	; (80067f0 <_vfiprintf_r+0x244>)
 8006604:	429d      	cmp	r5, r3
 8006606:	d101      	bne.n	800660c <_vfiprintf_r+0x60>
 8006608:	68b5      	ldr	r5, [r6, #8]
 800660a:	e7df      	b.n	80065cc <_vfiprintf_r+0x20>
 800660c:	4b79      	ldr	r3, [pc, #484]	; (80067f4 <_vfiprintf_r+0x248>)
 800660e:	429d      	cmp	r5, r3
 8006610:	bf08      	it	eq
 8006612:	68f5      	ldreq	r5, [r6, #12]
 8006614:	e7da      	b.n	80065cc <_vfiprintf_r+0x20>
 8006616:	89ab      	ldrh	r3, [r5, #12]
 8006618:	0598      	lsls	r0, r3, #22
 800661a:	d4ed      	bmi.n	80065f8 <_vfiprintf_r+0x4c>
 800661c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800661e:	f7ff fb14 	bl	8005c4a <__retarget_lock_release_recursive>
 8006622:	e7e9      	b.n	80065f8 <_vfiprintf_r+0x4c>
 8006624:	2300      	movs	r3, #0
 8006626:	9309      	str	r3, [sp, #36]	; 0x24
 8006628:	2320      	movs	r3, #32
 800662a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800662e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006632:	2330      	movs	r3, #48	; 0x30
 8006634:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80067f8 <_vfiprintf_r+0x24c>
 8006638:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800663c:	f04f 0901 	mov.w	r9, #1
 8006640:	4623      	mov	r3, r4
 8006642:	469a      	mov	sl, r3
 8006644:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006648:	b10a      	cbz	r2, 800664e <_vfiprintf_r+0xa2>
 800664a:	2a25      	cmp	r2, #37	; 0x25
 800664c:	d1f9      	bne.n	8006642 <_vfiprintf_r+0x96>
 800664e:	ebba 0b04 	subs.w	fp, sl, r4
 8006652:	d00b      	beq.n	800666c <_vfiprintf_r+0xc0>
 8006654:	465b      	mov	r3, fp
 8006656:	4622      	mov	r2, r4
 8006658:	4629      	mov	r1, r5
 800665a:	4630      	mov	r0, r6
 800665c:	f7ff ff93 	bl	8006586 <__sfputs_r>
 8006660:	3001      	adds	r0, #1
 8006662:	f000 80aa 	beq.w	80067ba <_vfiprintf_r+0x20e>
 8006666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006668:	445a      	add	r2, fp
 800666a:	9209      	str	r2, [sp, #36]	; 0x24
 800666c:	f89a 3000 	ldrb.w	r3, [sl]
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 80a2 	beq.w	80067ba <_vfiprintf_r+0x20e>
 8006676:	2300      	movs	r3, #0
 8006678:	f04f 32ff 	mov.w	r2, #4294967295
 800667c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006680:	f10a 0a01 	add.w	sl, sl, #1
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	9307      	str	r3, [sp, #28]
 8006688:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800668c:	931a      	str	r3, [sp, #104]	; 0x68
 800668e:	4654      	mov	r4, sl
 8006690:	2205      	movs	r2, #5
 8006692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006696:	4858      	ldr	r0, [pc, #352]	; (80067f8 <_vfiprintf_r+0x24c>)
 8006698:	f7f9 fdb2 	bl	8000200 <memchr>
 800669c:	9a04      	ldr	r2, [sp, #16]
 800669e:	b9d8      	cbnz	r0, 80066d8 <_vfiprintf_r+0x12c>
 80066a0:	06d1      	lsls	r1, r2, #27
 80066a2:	bf44      	itt	mi
 80066a4:	2320      	movmi	r3, #32
 80066a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066aa:	0713      	lsls	r3, r2, #28
 80066ac:	bf44      	itt	mi
 80066ae:	232b      	movmi	r3, #43	; 0x2b
 80066b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066b4:	f89a 3000 	ldrb.w	r3, [sl]
 80066b8:	2b2a      	cmp	r3, #42	; 0x2a
 80066ba:	d015      	beq.n	80066e8 <_vfiprintf_r+0x13c>
 80066bc:	9a07      	ldr	r2, [sp, #28]
 80066be:	4654      	mov	r4, sl
 80066c0:	2000      	movs	r0, #0
 80066c2:	f04f 0c0a 	mov.w	ip, #10
 80066c6:	4621      	mov	r1, r4
 80066c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066cc:	3b30      	subs	r3, #48	; 0x30
 80066ce:	2b09      	cmp	r3, #9
 80066d0:	d94e      	bls.n	8006770 <_vfiprintf_r+0x1c4>
 80066d2:	b1b0      	cbz	r0, 8006702 <_vfiprintf_r+0x156>
 80066d4:	9207      	str	r2, [sp, #28]
 80066d6:	e014      	b.n	8006702 <_vfiprintf_r+0x156>
 80066d8:	eba0 0308 	sub.w	r3, r0, r8
 80066dc:	fa09 f303 	lsl.w	r3, r9, r3
 80066e0:	4313      	orrs	r3, r2
 80066e2:	9304      	str	r3, [sp, #16]
 80066e4:	46a2      	mov	sl, r4
 80066e6:	e7d2      	b.n	800668e <_vfiprintf_r+0xe2>
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	1d19      	adds	r1, r3, #4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	9103      	str	r1, [sp, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	bfbb      	ittet	lt
 80066f4:	425b      	neglt	r3, r3
 80066f6:	f042 0202 	orrlt.w	r2, r2, #2
 80066fa:	9307      	strge	r3, [sp, #28]
 80066fc:	9307      	strlt	r3, [sp, #28]
 80066fe:	bfb8      	it	lt
 8006700:	9204      	strlt	r2, [sp, #16]
 8006702:	7823      	ldrb	r3, [r4, #0]
 8006704:	2b2e      	cmp	r3, #46	; 0x2e
 8006706:	d10c      	bne.n	8006722 <_vfiprintf_r+0x176>
 8006708:	7863      	ldrb	r3, [r4, #1]
 800670a:	2b2a      	cmp	r3, #42	; 0x2a
 800670c:	d135      	bne.n	800677a <_vfiprintf_r+0x1ce>
 800670e:	9b03      	ldr	r3, [sp, #12]
 8006710:	1d1a      	adds	r2, r3, #4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	9203      	str	r2, [sp, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	bfb8      	it	lt
 800671a:	f04f 33ff 	movlt.w	r3, #4294967295
 800671e:	3402      	adds	r4, #2
 8006720:	9305      	str	r3, [sp, #20]
 8006722:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006808 <_vfiprintf_r+0x25c>
 8006726:	7821      	ldrb	r1, [r4, #0]
 8006728:	2203      	movs	r2, #3
 800672a:	4650      	mov	r0, sl
 800672c:	f7f9 fd68 	bl	8000200 <memchr>
 8006730:	b140      	cbz	r0, 8006744 <_vfiprintf_r+0x198>
 8006732:	2340      	movs	r3, #64	; 0x40
 8006734:	eba0 000a 	sub.w	r0, r0, sl
 8006738:	fa03 f000 	lsl.w	r0, r3, r0
 800673c:	9b04      	ldr	r3, [sp, #16]
 800673e:	4303      	orrs	r3, r0
 8006740:	3401      	adds	r4, #1
 8006742:	9304      	str	r3, [sp, #16]
 8006744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006748:	482c      	ldr	r0, [pc, #176]	; (80067fc <_vfiprintf_r+0x250>)
 800674a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800674e:	2206      	movs	r2, #6
 8006750:	f7f9 fd56 	bl	8000200 <memchr>
 8006754:	2800      	cmp	r0, #0
 8006756:	d03f      	beq.n	80067d8 <_vfiprintf_r+0x22c>
 8006758:	4b29      	ldr	r3, [pc, #164]	; (8006800 <_vfiprintf_r+0x254>)
 800675a:	bb1b      	cbnz	r3, 80067a4 <_vfiprintf_r+0x1f8>
 800675c:	9b03      	ldr	r3, [sp, #12]
 800675e:	3307      	adds	r3, #7
 8006760:	f023 0307 	bic.w	r3, r3, #7
 8006764:	3308      	adds	r3, #8
 8006766:	9303      	str	r3, [sp, #12]
 8006768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800676a:	443b      	add	r3, r7
 800676c:	9309      	str	r3, [sp, #36]	; 0x24
 800676e:	e767      	b.n	8006640 <_vfiprintf_r+0x94>
 8006770:	fb0c 3202 	mla	r2, ip, r2, r3
 8006774:	460c      	mov	r4, r1
 8006776:	2001      	movs	r0, #1
 8006778:	e7a5      	b.n	80066c6 <_vfiprintf_r+0x11a>
 800677a:	2300      	movs	r3, #0
 800677c:	3401      	adds	r4, #1
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	4619      	mov	r1, r3
 8006782:	f04f 0c0a 	mov.w	ip, #10
 8006786:	4620      	mov	r0, r4
 8006788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800678c:	3a30      	subs	r2, #48	; 0x30
 800678e:	2a09      	cmp	r2, #9
 8006790:	d903      	bls.n	800679a <_vfiprintf_r+0x1ee>
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0c5      	beq.n	8006722 <_vfiprintf_r+0x176>
 8006796:	9105      	str	r1, [sp, #20]
 8006798:	e7c3      	b.n	8006722 <_vfiprintf_r+0x176>
 800679a:	fb0c 2101 	mla	r1, ip, r1, r2
 800679e:	4604      	mov	r4, r0
 80067a0:	2301      	movs	r3, #1
 80067a2:	e7f0      	b.n	8006786 <_vfiprintf_r+0x1da>
 80067a4:	ab03      	add	r3, sp, #12
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	462a      	mov	r2, r5
 80067aa:	4b16      	ldr	r3, [pc, #88]	; (8006804 <_vfiprintf_r+0x258>)
 80067ac:	a904      	add	r1, sp, #16
 80067ae:	4630      	mov	r0, r6
 80067b0:	f3af 8000 	nop.w
 80067b4:	4607      	mov	r7, r0
 80067b6:	1c78      	adds	r0, r7, #1
 80067b8:	d1d6      	bne.n	8006768 <_vfiprintf_r+0x1bc>
 80067ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067bc:	07d9      	lsls	r1, r3, #31
 80067be:	d405      	bmi.n	80067cc <_vfiprintf_r+0x220>
 80067c0:	89ab      	ldrh	r3, [r5, #12]
 80067c2:	059a      	lsls	r2, r3, #22
 80067c4:	d402      	bmi.n	80067cc <_vfiprintf_r+0x220>
 80067c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067c8:	f7ff fa3f 	bl	8005c4a <__retarget_lock_release_recursive>
 80067cc:	89ab      	ldrh	r3, [r5, #12]
 80067ce:	065b      	lsls	r3, r3, #25
 80067d0:	f53f af12 	bmi.w	80065f8 <_vfiprintf_r+0x4c>
 80067d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067d6:	e711      	b.n	80065fc <_vfiprintf_r+0x50>
 80067d8:	ab03      	add	r3, sp, #12
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	462a      	mov	r2, r5
 80067de:	4b09      	ldr	r3, [pc, #36]	; (8006804 <_vfiprintf_r+0x258>)
 80067e0:	a904      	add	r1, sp, #16
 80067e2:	4630      	mov	r0, r6
 80067e4:	f000 f880 	bl	80068e8 <_printf_i>
 80067e8:	e7e4      	b.n	80067b4 <_vfiprintf_r+0x208>
 80067ea:	bf00      	nop
 80067ec:	080093a4 	.word	0x080093a4
 80067f0:	080093c4 	.word	0x080093c4
 80067f4:	08009384 	.word	0x08009384
 80067f8:	080093e4 	.word	0x080093e4
 80067fc:	080093ee 	.word	0x080093ee
 8006800:	00000000 	.word	0x00000000
 8006804:	08006587 	.word	0x08006587
 8006808:	080093ea 	.word	0x080093ea

0800680c <_printf_common>:
 800680c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006810:	4616      	mov	r6, r2
 8006812:	4699      	mov	r9, r3
 8006814:	688a      	ldr	r2, [r1, #8]
 8006816:	690b      	ldr	r3, [r1, #16]
 8006818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800681c:	4293      	cmp	r3, r2
 800681e:	bfb8      	it	lt
 8006820:	4613      	movlt	r3, r2
 8006822:	6033      	str	r3, [r6, #0]
 8006824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006828:	4607      	mov	r7, r0
 800682a:	460c      	mov	r4, r1
 800682c:	b10a      	cbz	r2, 8006832 <_printf_common+0x26>
 800682e:	3301      	adds	r3, #1
 8006830:	6033      	str	r3, [r6, #0]
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	0699      	lsls	r1, r3, #26
 8006836:	bf42      	ittt	mi
 8006838:	6833      	ldrmi	r3, [r6, #0]
 800683a:	3302      	addmi	r3, #2
 800683c:	6033      	strmi	r3, [r6, #0]
 800683e:	6825      	ldr	r5, [r4, #0]
 8006840:	f015 0506 	ands.w	r5, r5, #6
 8006844:	d106      	bne.n	8006854 <_printf_common+0x48>
 8006846:	f104 0a19 	add.w	sl, r4, #25
 800684a:	68e3      	ldr	r3, [r4, #12]
 800684c:	6832      	ldr	r2, [r6, #0]
 800684e:	1a9b      	subs	r3, r3, r2
 8006850:	42ab      	cmp	r3, r5
 8006852:	dc26      	bgt.n	80068a2 <_printf_common+0x96>
 8006854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006858:	1e13      	subs	r3, r2, #0
 800685a:	6822      	ldr	r2, [r4, #0]
 800685c:	bf18      	it	ne
 800685e:	2301      	movne	r3, #1
 8006860:	0692      	lsls	r2, r2, #26
 8006862:	d42b      	bmi.n	80068bc <_printf_common+0xb0>
 8006864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006868:	4649      	mov	r1, r9
 800686a:	4638      	mov	r0, r7
 800686c:	47c0      	blx	r8
 800686e:	3001      	adds	r0, #1
 8006870:	d01e      	beq.n	80068b0 <_printf_common+0xa4>
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	68e5      	ldr	r5, [r4, #12]
 8006876:	6832      	ldr	r2, [r6, #0]
 8006878:	f003 0306 	and.w	r3, r3, #6
 800687c:	2b04      	cmp	r3, #4
 800687e:	bf08      	it	eq
 8006880:	1aad      	subeq	r5, r5, r2
 8006882:	68a3      	ldr	r3, [r4, #8]
 8006884:	6922      	ldr	r2, [r4, #16]
 8006886:	bf0c      	ite	eq
 8006888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800688c:	2500      	movne	r5, #0
 800688e:	4293      	cmp	r3, r2
 8006890:	bfc4      	itt	gt
 8006892:	1a9b      	subgt	r3, r3, r2
 8006894:	18ed      	addgt	r5, r5, r3
 8006896:	2600      	movs	r6, #0
 8006898:	341a      	adds	r4, #26
 800689a:	42b5      	cmp	r5, r6
 800689c:	d11a      	bne.n	80068d4 <_printf_common+0xc8>
 800689e:	2000      	movs	r0, #0
 80068a0:	e008      	b.n	80068b4 <_printf_common+0xa8>
 80068a2:	2301      	movs	r3, #1
 80068a4:	4652      	mov	r2, sl
 80068a6:	4649      	mov	r1, r9
 80068a8:	4638      	mov	r0, r7
 80068aa:	47c0      	blx	r8
 80068ac:	3001      	adds	r0, #1
 80068ae:	d103      	bne.n	80068b8 <_printf_common+0xac>
 80068b0:	f04f 30ff 	mov.w	r0, #4294967295
 80068b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b8:	3501      	adds	r5, #1
 80068ba:	e7c6      	b.n	800684a <_printf_common+0x3e>
 80068bc:	18e1      	adds	r1, r4, r3
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	2030      	movs	r0, #48	; 0x30
 80068c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068c6:	4422      	add	r2, r4
 80068c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068d0:	3302      	adds	r3, #2
 80068d2:	e7c7      	b.n	8006864 <_printf_common+0x58>
 80068d4:	2301      	movs	r3, #1
 80068d6:	4622      	mov	r2, r4
 80068d8:	4649      	mov	r1, r9
 80068da:	4638      	mov	r0, r7
 80068dc:	47c0      	blx	r8
 80068de:	3001      	adds	r0, #1
 80068e0:	d0e6      	beq.n	80068b0 <_printf_common+0xa4>
 80068e2:	3601      	adds	r6, #1
 80068e4:	e7d9      	b.n	800689a <_printf_common+0x8e>
	...

080068e8 <_printf_i>:
 80068e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068ec:	7e0f      	ldrb	r7, [r1, #24]
 80068ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068f0:	2f78      	cmp	r7, #120	; 0x78
 80068f2:	4691      	mov	r9, r2
 80068f4:	4680      	mov	r8, r0
 80068f6:	460c      	mov	r4, r1
 80068f8:	469a      	mov	sl, r3
 80068fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068fe:	d807      	bhi.n	8006910 <_printf_i+0x28>
 8006900:	2f62      	cmp	r7, #98	; 0x62
 8006902:	d80a      	bhi.n	800691a <_printf_i+0x32>
 8006904:	2f00      	cmp	r7, #0
 8006906:	f000 80d8 	beq.w	8006aba <_printf_i+0x1d2>
 800690a:	2f58      	cmp	r7, #88	; 0x58
 800690c:	f000 80a3 	beq.w	8006a56 <_printf_i+0x16e>
 8006910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006918:	e03a      	b.n	8006990 <_printf_i+0xa8>
 800691a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800691e:	2b15      	cmp	r3, #21
 8006920:	d8f6      	bhi.n	8006910 <_printf_i+0x28>
 8006922:	a101      	add	r1, pc, #4	; (adr r1, 8006928 <_printf_i+0x40>)
 8006924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006928:	08006981 	.word	0x08006981
 800692c:	08006995 	.word	0x08006995
 8006930:	08006911 	.word	0x08006911
 8006934:	08006911 	.word	0x08006911
 8006938:	08006911 	.word	0x08006911
 800693c:	08006911 	.word	0x08006911
 8006940:	08006995 	.word	0x08006995
 8006944:	08006911 	.word	0x08006911
 8006948:	08006911 	.word	0x08006911
 800694c:	08006911 	.word	0x08006911
 8006950:	08006911 	.word	0x08006911
 8006954:	08006aa1 	.word	0x08006aa1
 8006958:	080069c5 	.word	0x080069c5
 800695c:	08006a83 	.word	0x08006a83
 8006960:	08006911 	.word	0x08006911
 8006964:	08006911 	.word	0x08006911
 8006968:	08006ac3 	.word	0x08006ac3
 800696c:	08006911 	.word	0x08006911
 8006970:	080069c5 	.word	0x080069c5
 8006974:	08006911 	.word	0x08006911
 8006978:	08006911 	.word	0x08006911
 800697c:	08006a8b 	.word	0x08006a8b
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	1d1a      	adds	r2, r3, #4
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	602a      	str	r2, [r5, #0]
 8006988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800698c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006990:	2301      	movs	r3, #1
 8006992:	e0a3      	b.n	8006adc <_printf_i+0x1f4>
 8006994:	6820      	ldr	r0, [r4, #0]
 8006996:	6829      	ldr	r1, [r5, #0]
 8006998:	0606      	lsls	r6, r0, #24
 800699a:	f101 0304 	add.w	r3, r1, #4
 800699e:	d50a      	bpl.n	80069b6 <_printf_i+0xce>
 80069a0:	680e      	ldr	r6, [r1, #0]
 80069a2:	602b      	str	r3, [r5, #0]
 80069a4:	2e00      	cmp	r6, #0
 80069a6:	da03      	bge.n	80069b0 <_printf_i+0xc8>
 80069a8:	232d      	movs	r3, #45	; 0x2d
 80069aa:	4276      	negs	r6, r6
 80069ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b0:	485e      	ldr	r0, [pc, #376]	; (8006b2c <_printf_i+0x244>)
 80069b2:	230a      	movs	r3, #10
 80069b4:	e019      	b.n	80069ea <_printf_i+0x102>
 80069b6:	680e      	ldr	r6, [r1, #0]
 80069b8:	602b      	str	r3, [r5, #0]
 80069ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069be:	bf18      	it	ne
 80069c0:	b236      	sxthne	r6, r6
 80069c2:	e7ef      	b.n	80069a4 <_printf_i+0xbc>
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	6820      	ldr	r0, [r4, #0]
 80069c8:	1d19      	adds	r1, r3, #4
 80069ca:	6029      	str	r1, [r5, #0]
 80069cc:	0601      	lsls	r1, r0, #24
 80069ce:	d501      	bpl.n	80069d4 <_printf_i+0xec>
 80069d0:	681e      	ldr	r6, [r3, #0]
 80069d2:	e002      	b.n	80069da <_printf_i+0xf2>
 80069d4:	0646      	lsls	r6, r0, #25
 80069d6:	d5fb      	bpl.n	80069d0 <_printf_i+0xe8>
 80069d8:	881e      	ldrh	r6, [r3, #0]
 80069da:	4854      	ldr	r0, [pc, #336]	; (8006b2c <_printf_i+0x244>)
 80069dc:	2f6f      	cmp	r7, #111	; 0x6f
 80069de:	bf0c      	ite	eq
 80069e0:	2308      	moveq	r3, #8
 80069e2:	230a      	movne	r3, #10
 80069e4:	2100      	movs	r1, #0
 80069e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069ea:	6865      	ldr	r5, [r4, #4]
 80069ec:	60a5      	str	r5, [r4, #8]
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	bfa2      	ittt	ge
 80069f2:	6821      	ldrge	r1, [r4, #0]
 80069f4:	f021 0104 	bicge.w	r1, r1, #4
 80069f8:	6021      	strge	r1, [r4, #0]
 80069fa:	b90e      	cbnz	r6, 8006a00 <_printf_i+0x118>
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	d04d      	beq.n	8006a9c <_printf_i+0x1b4>
 8006a00:	4615      	mov	r5, r2
 8006a02:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a06:	fb03 6711 	mls	r7, r3, r1, r6
 8006a0a:	5dc7      	ldrb	r7, [r0, r7]
 8006a0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a10:	4637      	mov	r7, r6
 8006a12:	42bb      	cmp	r3, r7
 8006a14:	460e      	mov	r6, r1
 8006a16:	d9f4      	bls.n	8006a02 <_printf_i+0x11a>
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d10b      	bne.n	8006a34 <_printf_i+0x14c>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	07de      	lsls	r6, r3, #31
 8006a20:	d508      	bpl.n	8006a34 <_printf_i+0x14c>
 8006a22:	6923      	ldr	r3, [r4, #16]
 8006a24:	6861      	ldr	r1, [r4, #4]
 8006a26:	4299      	cmp	r1, r3
 8006a28:	bfde      	ittt	le
 8006a2a:	2330      	movle	r3, #48	; 0x30
 8006a2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a34:	1b52      	subs	r2, r2, r5
 8006a36:	6122      	str	r2, [r4, #16]
 8006a38:	f8cd a000 	str.w	sl, [sp]
 8006a3c:	464b      	mov	r3, r9
 8006a3e:	aa03      	add	r2, sp, #12
 8006a40:	4621      	mov	r1, r4
 8006a42:	4640      	mov	r0, r8
 8006a44:	f7ff fee2 	bl	800680c <_printf_common>
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d14c      	bne.n	8006ae6 <_printf_i+0x1fe>
 8006a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a50:	b004      	add	sp, #16
 8006a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a56:	4835      	ldr	r0, [pc, #212]	; (8006b2c <_printf_i+0x244>)
 8006a58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a5c:	6829      	ldr	r1, [r5, #0]
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a64:	6029      	str	r1, [r5, #0]
 8006a66:	061d      	lsls	r5, r3, #24
 8006a68:	d514      	bpl.n	8006a94 <_printf_i+0x1ac>
 8006a6a:	07df      	lsls	r7, r3, #31
 8006a6c:	bf44      	itt	mi
 8006a6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a72:	6023      	strmi	r3, [r4, #0]
 8006a74:	b91e      	cbnz	r6, 8006a7e <_printf_i+0x196>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	f023 0320 	bic.w	r3, r3, #32
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	2310      	movs	r3, #16
 8006a80:	e7b0      	b.n	80069e4 <_printf_i+0xfc>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	f043 0320 	orr.w	r3, r3, #32
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	2378      	movs	r3, #120	; 0x78
 8006a8c:	4828      	ldr	r0, [pc, #160]	; (8006b30 <_printf_i+0x248>)
 8006a8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a92:	e7e3      	b.n	8006a5c <_printf_i+0x174>
 8006a94:	0659      	lsls	r1, r3, #25
 8006a96:	bf48      	it	mi
 8006a98:	b2b6      	uxthmi	r6, r6
 8006a9a:	e7e6      	b.n	8006a6a <_printf_i+0x182>
 8006a9c:	4615      	mov	r5, r2
 8006a9e:	e7bb      	b.n	8006a18 <_printf_i+0x130>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	6826      	ldr	r6, [r4, #0]
 8006aa4:	6961      	ldr	r1, [r4, #20]
 8006aa6:	1d18      	adds	r0, r3, #4
 8006aa8:	6028      	str	r0, [r5, #0]
 8006aaa:	0635      	lsls	r5, r6, #24
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	d501      	bpl.n	8006ab4 <_printf_i+0x1cc>
 8006ab0:	6019      	str	r1, [r3, #0]
 8006ab2:	e002      	b.n	8006aba <_printf_i+0x1d2>
 8006ab4:	0670      	lsls	r0, r6, #25
 8006ab6:	d5fb      	bpl.n	8006ab0 <_printf_i+0x1c8>
 8006ab8:	8019      	strh	r1, [r3, #0]
 8006aba:	2300      	movs	r3, #0
 8006abc:	6123      	str	r3, [r4, #16]
 8006abe:	4615      	mov	r5, r2
 8006ac0:	e7ba      	b.n	8006a38 <_printf_i+0x150>
 8006ac2:	682b      	ldr	r3, [r5, #0]
 8006ac4:	1d1a      	adds	r2, r3, #4
 8006ac6:	602a      	str	r2, [r5, #0]
 8006ac8:	681d      	ldr	r5, [r3, #0]
 8006aca:	6862      	ldr	r2, [r4, #4]
 8006acc:	2100      	movs	r1, #0
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f7f9 fb96 	bl	8000200 <memchr>
 8006ad4:	b108      	cbz	r0, 8006ada <_printf_i+0x1f2>
 8006ad6:	1b40      	subs	r0, r0, r5
 8006ad8:	6060      	str	r0, [r4, #4]
 8006ada:	6863      	ldr	r3, [r4, #4]
 8006adc:	6123      	str	r3, [r4, #16]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae4:	e7a8      	b.n	8006a38 <_printf_i+0x150>
 8006ae6:	6923      	ldr	r3, [r4, #16]
 8006ae8:	462a      	mov	r2, r5
 8006aea:	4649      	mov	r1, r9
 8006aec:	4640      	mov	r0, r8
 8006aee:	47d0      	blx	sl
 8006af0:	3001      	adds	r0, #1
 8006af2:	d0ab      	beq.n	8006a4c <_printf_i+0x164>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	079b      	lsls	r3, r3, #30
 8006af8:	d413      	bmi.n	8006b22 <_printf_i+0x23a>
 8006afa:	68e0      	ldr	r0, [r4, #12]
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	4298      	cmp	r0, r3
 8006b00:	bfb8      	it	lt
 8006b02:	4618      	movlt	r0, r3
 8006b04:	e7a4      	b.n	8006a50 <_printf_i+0x168>
 8006b06:	2301      	movs	r3, #1
 8006b08:	4632      	mov	r2, r6
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	47d0      	blx	sl
 8006b10:	3001      	adds	r0, #1
 8006b12:	d09b      	beq.n	8006a4c <_printf_i+0x164>
 8006b14:	3501      	adds	r5, #1
 8006b16:	68e3      	ldr	r3, [r4, #12]
 8006b18:	9903      	ldr	r1, [sp, #12]
 8006b1a:	1a5b      	subs	r3, r3, r1
 8006b1c:	42ab      	cmp	r3, r5
 8006b1e:	dcf2      	bgt.n	8006b06 <_printf_i+0x21e>
 8006b20:	e7eb      	b.n	8006afa <_printf_i+0x212>
 8006b22:	2500      	movs	r5, #0
 8006b24:	f104 0619 	add.w	r6, r4, #25
 8006b28:	e7f5      	b.n	8006b16 <_printf_i+0x22e>
 8006b2a:	bf00      	nop
 8006b2c:	080093f5 	.word	0x080093f5
 8006b30:	08009406 	.word	0x08009406

08006b34 <_scanf_chars>:
 8006b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b38:	4615      	mov	r5, r2
 8006b3a:	688a      	ldr	r2, [r1, #8]
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	b932      	cbnz	r2, 8006b50 <_scanf_chars+0x1c>
 8006b42:	698a      	ldr	r2, [r1, #24]
 8006b44:	2a00      	cmp	r2, #0
 8006b46:	bf0c      	ite	eq
 8006b48:	2201      	moveq	r2, #1
 8006b4a:	f04f 32ff 	movne.w	r2, #4294967295
 8006b4e:	608a      	str	r2, [r1, #8]
 8006b50:	6822      	ldr	r2, [r4, #0]
 8006b52:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006be4 <_scanf_chars+0xb0>
 8006b56:	06d1      	lsls	r1, r2, #27
 8006b58:	bf5f      	itttt	pl
 8006b5a:	681a      	ldrpl	r2, [r3, #0]
 8006b5c:	1d11      	addpl	r1, r2, #4
 8006b5e:	6019      	strpl	r1, [r3, #0]
 8006b60:	6816      	ldrpl	r6, [r2, #0]
 8006b62:	2700      	movs	r7, #0
 8006b64:	69a0      	ldr	r0, [r4, #24]
 8006b66:	b188      	cbz	r0, 8006b8c <_scanf_chars+0x58>
 8006b68:	2801      	cmp	r0, #1
 8006b6a:	d107      	bne.n	8006b7c <_scanf_chars+0x48>
 8006b6c:	682a      	ldr	r2, [r5, #0]
 8006b6e:	7811      	ldrb	r1, [r2, #0]
 8006b70:	6962      	ldr	r2, [r4, #20]
 8006b72:	5c52      	ldrb	r2, [r2, r1]
 8006b74:	b952      	cbnz	r2, 8006b8c <_scanf_chars+0x58>
 8006b76:	2f00      	cmp	r7, #0
 8006b78:	d031      	beq.n	8006bde <_scanf_chars+0xaa>
 8006b7a:	e022      	b.n	8006bc2 <_scanf_chars+0x8e>
 8006b7c:	2802      	cmp	r0, #2
 8006b7e:	d120      	bne.n	8006bc2 <_scanf_chars+0x8e>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006b88:	071b      	lsls	r3, r3, #28
 8006b8a:	d41a      	bmi.n	8006bc2 <_scanf_chars+0x8e>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	06da      	lsls	r2, r3, #27
 8006b90:	bf5e      	ittt	pl
 8006b92:	682b      	ldrpl	r3, [r5, #0]
 8006b94:	781b      	ldrbpl	r3, [r3, #0]
 8006b96:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006b9a:	682a      	ldr	r2, [r5, #0]
 8006b9c:	686b      	ldr	r3, [r5, #4]
 8006b9e:	3201      	adds	r2, #1
 8006ba0:	602a      	str	r2, [r5, #0]
 8006ba2:	68a2      	ldr	r2, [r4, #8]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	3a01      	subs	r2, #1
 8006ba8:	606b      	str	r3, [r5, #4]
 8006baa:	3701      	adds	r7, #1
 8006bac:	60a2      	str	r2, [r4, #8]
 8006bae:	b142      	cbz	r2, 8006bc2 <_scanf_chars+0x8e>
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	dcd7      	bgt.n	8006b64 <_scanf_chars+0x30>
 8006bb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4640      	mov	r0, r8
 8006bbc:	4798      	blx	r3
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d0d0      	beq.n	8006b64 <_scanf_chars+0x30>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	f013 0310 	ands.w	r3, r3, #16
 8006bc8:	d105      	bne.n	8006bd6 <_scanf_chars+0xa2>
 8006bca:	68e2      	ldr	r2, [r4, #12]
 8006bcc:	3201      	adds	r2, #1
 8006bce:	60e2      	str	r2, [r4, #12]
 8006bd0:	69a2      	ldr	r2, [r4, #24]
 8006bd2:	b102      	cbz	r2, 8006bd6 <_scanf_chars+0xa2>
 8006bd4:	7033      	strb	r3, [r6, #0]
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	443b      	add	r3, r7
 8006bda:	6123      	str	r3, [r4, #16]
 8006bdc:	2000      	movs	r0, #0
 8006bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006be2:	bf00      	nop
 8006be4:	08009433 	.word	0x08009433

08006be8 <_scanf_i>:
 8006be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bec:	4698      	mov	r8, r3
 8006bee:	4b76      	ldr	r3, [pc, #472]	; (8006dc8 <_scanf_i+0x1e0>)
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	4682      	mov	sl, r0
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	ab03      	add	r3, sp, #12
 8006bfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006c02:	4b72      	ldr	r3, [pc, #456]	; (8006dcc <_scanf_i+0x1e4>)
 8006c04:	69a1      	ldr	r1, [r4, #24]
 8006c06:	4a72      	ldr	r2, [pc, #456]	; (8006dd0 <_scanf_i+0x1e8>)
 8006c08:	2903      	cmp	r1, #3
 8006c0a:	bf18      	it	ne
 8006c0c:	461a      	movne	r2, r3
 8006c0e:	68a3      	ldr	r3, [r4, #8]
 8006c10:	9201      	str	r2, [sp, #4]
 8006c12:	1e5a      	subs	r2, r3, #1
 8006c14:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c18:	bf88      	it	hi
 8006c1a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006c1e:	4627      	mov	r7, r4
 8006c20:	bf82      	ittt	hi
 8006c22:	eb03 0905 	addhi.w	r9, r3, r5
 8006c26:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c2a:	60a3      	strhi	r3, [r4, #8]
 8006c2c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006c30:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006c34:	bf98      	it	ls
 8006c36:	f04f 0900 	movls.w	r9, #0
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	463d      	mov	r5, r7
 8006c3e:	f04f 0b00 	mov.w	fp, #0
 8006c42:	6831      	ldr	r1, [r6, #0]
 8006c44:	ab03      	add	r3, sp, #12
 8006c46:	7809      	ldrb	r1, [r1, #0]
 8006c48:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f7f9 fad7 	bl	8000200 <memchr>
 8006c52:	b328      	cbz	r0, 8006ca0 <_scanf_i+0xb8>
 8006c54:	f1bb 0f01 	cmp.w	fp, #1
 8006c58:	d159      	bne.n	8006d0e <_scanf_i+0x126>
 8006c5a:	6862      	ldr	r2, [r4, #4]
 8006c5c:	b92a      	cbnz	r2, 8006c6a <_scanf_i+0x82>
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	2308      	movs	r3, #8
 8006c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c66:	6063      	str	r3, [r4, #4]
 8006c68:	6022      	str	r2, [r4, #0]
 8006c6a:	6822      	ldr	r2, [r4, #0]
 8006c6c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006c70:	6022      	str	r2, [r4, #0]
 8006c72:	68a2      	ldr	r2, [r4, #8]
 8006c74:	1e51      	subs	r1, r2, #1
 8006c76:	60a1      	str	r1, [r4, #8]
 8006c78:	b192      	cbz	r2, 8006ca0 <_scanf_i+0xb8>
 8006c7a:	6832      	ldr	r2, [r6, #0]
 8006c7c:	1c51      	adds	r1, r2, #1
 8006c7e:	6031      	str	r1, [r6, #0]
 8006c80:	7812      	ldrb	r2, [r2, #0]
 8006c82:	f805 2b01 	strb.w	r2, [r5], #1
 8006c86:	6872      	ldr	r2, [r6, #4]
 8006c88:	3a01      	subs	r2, #1
 8006c8a:	2a00      	cmp	r2, #0
 8006c8c:	6072      	str	r2, [r6, #4]
 8006c8e:	dc07      	bgt.n	8006ca0 <_scanf_i+0xb8>
 8006c90:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006c94:	4631      	mov	r1, r6
 8006c96:	4650      	mov	r0, sl
 8006c98:	4790      	blx	r2
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	f040 8085 	bne.w	8006daa <_scanf_i+0x1c2>
 8006ca0:	f10b 0b01 	add.w	fp, fp, #1
 8006ca4:	f1bb 0f03 	cmp.w	fp, #3
 8006ca8:	d1cb      	bne.n	8006c42 <_scanf_i+0x5a>
 8006caa:	6863      	ldr	r3, [r4, #4]
 8006cac:	b90b      	cbnz	r3, 8006cb2 <_scanf_i+0xca>
 8006cae:	230a      	movs	r3, #10
 8006cb0:	6063      	str	r3, [r4, #4]
 8006cb2:	6863      	ldr	r3, [r4, #4]
 8006cb4:	4947      	ldr	r1, [pc, #284]	; (8006dd4 <_scanf_i+0x1ec>)
 8006cb6:	6960      	ldr	r0, [r4, #20]
 8006cb8:	1ac9      	subs	r1, r1, r3
 8006cba:	f000 f8af 	bl	8006e1c <__sccl>
 8006cbe:	f04f 0b00 	mov.w	fp, #0
 8006cc2:	68a3      	ldr	r3, [r4, #8]
 8006cc4:	6822      	ldr	r2, [r4, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d03d      	beq.n	8006d46 <_scanf_i+0x15e>
 8006cca:	6831      	ldr	r1, [r6, #0]
 8006ccc:	6960      	ldr	r0, [r4, #20]
 8006cce:	f891 c000 	ldrb.w	ip, [r1]
 8006cd2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d035      	beq.n	8006d46 <_scanf_i+0x15e>
 8006cda:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006cde:	d124      	bne.n	8006d2a <_scanf_i+0x142>
 8006ce0:	0510      	lsls	r0, r2, #20
 8006ce2:	d522      	bpl.n	8006d2a <_scanf_i+0x142>
 8006ce4:	f10b 0b01 	add.w	fp, fp, #1
 8006ce8:	f1b9 0f00 	cmp.w	r9, #0
 8006cec:	d003      	beq.n	8006cf6 <_scanf_i+0x10e>
 8006cee:	3301      	adds	r3, #1
 8006cf0:	f109 39ff 	add.w	r9, r9, #4294967295
 8006cf4:	60a3      	str	r3, [r4, #8]
 8006cf6:	6873      	ldr	r3, [r6, #4]
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	6073      	str	r3, [r6, #4]
 8006cfe:	dd1b      	ble.n	8006d38 <_scanf_i+0x150>
 8006d00:	6833      	ldr	r3, [r6, #0]
 8006d02:	3301      	adds	r3, #1
 8006d04:	6033      	str	r3, [r6, #0]
 8006d06:	68a3      	ldr	r3, [r4, #8]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	60a3      	str	r3, [r4, #8]
 8006d0c:	e7d9      	b.n	8006cc2 <_scanf_i+0xda>
 8006d0e:	f1bb 0f02 	cmp.w	fp, #2
 8006d12:	d1ae      	bne.n	8006c72 <_scanf_i+0x8a>
 8006d14:	6822      	ldr	r2, [r4, #0]
 8006d16:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006d1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006d1e:	d1bf      	bne.n	8006ca0 <_scanf_i+0xb8>
 8006d20:	2310      	movs	r3, #16
 8006d22:	6063      	str	r3, [r4, #4]
 8006d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d28:	e7a2      	b.n	8006c70 <_scanf_i+0x88>
 8006d2a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006d2e:	6022      	str	r2, [r4, #0]
 8006d30:	780b      	ldrb	r3, [r1, #0]
 8006d32:	f805 3b01 	strb.w	r3, [r5], #1
 8006d36:	e7de      	b.n	8006cf6 <_scanf_i+0x10e>
 8006d38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	4650      	mov	r0, sl
 8006d40:	4798      	blx	r3
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d0df      	beq.n	8006d06 <_scanf_i+0x11e>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	05db      	lsls	r3, r3, #23
 8006d4a:	d50d      	bpl.n	8006d68 <_scanf_i+0x180>
 8006d4c:	42bd      	cmp	r5, r7
 8006d4e:	d909      	bls.n	8006d64 <_scanf_i+0x17c>
 8006d50:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006d54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d58:	4632      	mov	r2, r6
 8006d5a:	4650      	mov	r0, sl
 8006d5c:	4798      	blx	r3
 8006d5e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006d62:	464d      	mov	r5, r9
 8006d64:	42bd      	cmp	r5, r7
 8006d66:	d02d      	beq.n	8006dc4 <_scanf_i+0x1dc>
 8006d68:	6822      	ldr	r2, [r4, #0]
 8006d6a:	f012 0210 	ands.w	r2, r2, #16
 8006d6e:	d113      	bne.n	8006d98 <_scanf_i+0x1b0>
 8006d70:	702a      	strb	r2, [r5, #0]
 8006d72:	6863      	ldr	r3, [r4, #4]
 8006d74:	9e01      	ldr	r6, [sp, #4]
 8006d76:	4639      	mov	r1, r7
 8006d78:	4650      	mov	r0, sl
 8006d7a:	47b0      	blx	r6
 8006d7c:	6821      	ldr	r1, [r4, #0]
 8006d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d82:	f011 0f20 	tst.w	r1, #32
 8006d86:	d013      	beq.n	8006db0 <_scanf_i+0x1c8>
 8006d88:	1d1a      	adds	r2, r3, #4
 8006d8a:	f8c8 2000 	str.w	r2, [r8]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6018      	str	r0, [r3, #0]
 8006d92:	68e3      	ldr	r3, [r4, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60e3      	str	r3, [r4, #12]
 8006d98:	1bed      	subs	r5, r5, r7
 8006d9a:	44ab      	add	fp, r5
 8006d9c:	6925      	ldr	r5, [r4, #16]
 8006d9e:	445d      	add	r5, fp
 8006da0:	6125      	str	r5, [r4, #16]
 8006da2:	2000      	movs	r0, #0
 8006da4:	b007      	add	sp, #28
 8006da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006daa:	f04f 0b00 	mov.w	fp, #0
 8006dae:	e7ca      	b.n	8006d46 <_scanf_i+0x15e>
 8006db0:	1d1a      	adds	r2, r3, #4
 8006db2:	f8c8 2000 	str.w	r2, [r8]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f011 0f01 	tst.w	r1, #1
 8006dbc:	bf14      	ite	ne
 8006dbe:	8018      	strhne	r0, [r3, #0]
 8006dc0:	6018      	streq	r0, [r3, #0]
 8006dc2:	e7e6      	b.n	8006d92 <_scanf_i+0x1aa>
 8006dc4:	2001      	movs	r0, #1
 8006dc6:	e7ed      	b.n	8006da4 <_scanf_i+0x1bc>
 8006dc8:	080072a4 	.word	0x080072a4
 8006dcc:	08007079 	.word	0x08007079
 8006dd0:	08006f91 	.word	0x08006f91
 8006dd4:	08009430 	.word	0x08009430

08006dd8 <_read_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d07      	ldr	r5, [pc, #28]	; (8006df8 <_read_r+0x20>)
 8006ddc:	4604      	mov	r4, r0
 8006dde:	4608      	mov	r0, r1
 8006de0:	4611      	mov	r1, r2
 8006de2:	2200      	movs	r2, #0
 8006de4:	602a      	str	r2, [r5, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f7fa fc24 	bl	8001634 <_read>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_read_r+0x1e>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_read_r+0x1e>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	200030fc 	.word	0x200030fc

08006dfc <_sbrk_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d06      	ldr	r5, [pc, #24]	; (8006e18 <_sbrk_r+0x1c>)
 8006e00:	2300      	movs	r3, #0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	602b      	str	r3, [r5, #0]
 8006e08:	f7fa fc82 	bl	8001710 <_sbrk>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d102      	bne.n	8006e16 <_sbrk_r+0x1a>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	b103      	cbz	r3, 8006e16 <_sbrk_r+0x1a>
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	200030fc 	.word	0x200030fc

08006e1c <__sccl>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	780b      	ldrb	r3, [r1, #0]
 8006e20:	4604      	mov	r4, r0
 8006e22:	2b5e      	cmp	r3, #94	; 0x5e
 8006e24:	bf0b      	itete	eq
 8006e26:	784b      	ldrbeq	r3, [r1, #1]
 8006e28:	1c48      	addne	r0, r1, #1
 8006e2a:	1c88      	addeq	r0, r1, #2
 8006e2c:	2200      	movne	r2, #0
 8006e2e:	bf08      	it	eq
 8006e30:	2201      	moveq	r2, #1
 8006e32:	1e61      	subs	r1, r4, #1
 8006e34:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006e38:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006e3c:	42a9      	cmp	r1, r5
 8006e3e:	d1fb      	bne.n	8006e38 <__sccl+0x1c>
 8006e40:	b90b      	cbnz	r3, 8006e46 <__sccl+0x2a>
 8006e42:	3801      	subs	r0, #1
 8006e44:	bd70      	pop	{r4, r5, r6, pc}
 8006e46:	f082 0201 	eor.w	r2, r2, #1
 8006e4a:	54e2      	strb	r2, [r4, r3]
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006e54:	292d      	cmp	r1, #45	; 0x2d
 8006e56:	d006      	beq.n	8006e66 <__sccl+0x4a>
 8006e58:	295d      	cmp	r1, #93	; 0x5d
 8006e5a:	d0f3      	beq.n	8006e44 <__sccl+0x28>
 8006e5c:	b909      	cbnz	r1, 8006e62 <__sccl+0x46>
 8006e5e:	4628      	mov	r0, r5
 8006e60:	e7f0      	b.n	8006e44 <__sccl+0x28>
 8006e62:	460b      	mov	r3, r1
 8006e64:	e7f1      	b.n	8006e4a <__sccl+0x2e>
 8006e66:	786e      	ldrb	r6, [r5, #1]
 8006e68:	2e5d      	cmp	r6, #93	; 0x5d
 8006e6a:	d0fa      	beq.n	8006e62 <__sccl+0x46>
 8006e6c:	42b3      	cmp	r3, r6
 8006e6e:	dcf8      	bgt.n	8006e62 <__sccl+0x46>
 8006e70:	3502      	adds	r5, #2
 8006e72:	4619      	mov	r1, r3
 8006e74:	3101      	adds	r1, #1
 8006e76:	428e      	cmp	r6, r1
 8006e78:	5462      	strb	r2, [r4, r1]
 8006e7a:	dcfb      	bgt.n	8006e74 <__sccl+0x58>
 8006e7c:	1af1      	subs	r1, r6, r3
 8006e7e:	3901      	subs	r1, #1
 8006e80:	1c58      	adds	r0, r3, #1
 8006e82:	42b3      	cmp	r3, r6
 8006e84:	bfa8      	it	ge
 8006e86:	2100      	movge	r1, #0
 8006e88:	1843      	adds	r3, r0, r1
 8006e8a:	e7e0      	b.n	8006e4e <__sccl+0x32>

08006e8c <_strtol_l.constprop.0>:
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e92:	d001      	beq.n	8006e98 <_strtol_l.constprop.0+0xc>
 8006e94:	2b24      	cmp	r3, #36	; 0x24
 8006e96:	d906      	bls.n	8006ea6 <_strtol_l.constprop.0+0x1a>
 8006e98:	f7fe fa92 	bl	80053c0 <__errno>
 8006e9c:	2316      	movs	r3, #22
 8006e9e:	6003      	str	r3, [r0, #0]
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006f8c <_strtol_l.constprop.0+0x100>
 8006eaa:	460d      	mov	r5, r1
 8006eac:	462e      	mov	r6, r5
 8006eae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006eb2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006eb6:	f017 0708 	ands.w	r7, r7, #8
 8006eba:	d1f7      	bne.n	8006eac <_strtol_l.constprop.0+0x20>
 8006ebc:	2c2d      	cmp	r4, #45	; 0x2d
 8006ebe:	d132      	bne.n	8006f26 <_strtol_l.constprop.0+0x9a>
 8006ec0:	782c      	ldrb	r4, [r5, #0]
 8006ec2:	2701      	movs	r7, #1
 8006ec4:	1cb5      	adds	r5, r6, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d05b      	beq.n	8006f82 <_strtol_l.constprop.0+0xf6>
 8006eca:	2b10      	cmp	r3, #16
 8006ecc:	d109      	bne.n	8006ee2 <_strtol_l.constprop.0+0x56>
 8006ece:	2c30      	cmp	r4, #48	; 0x30
 8006ed0:	d107      	bne.n	8006ee2 <_strtol_l.constprop.0+0x56>
 8006ed2:	782c      	ldrb	r4, [r5, #0]
 8006ed4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006ed8:	2c58      	cmp	r4, #88	; 0x58
 8006eda:	d14d      	bne.n	8006f78 <_strtol_l.constprop.0+0xec>
 8006edc:	786c      	ldrb	r4, [r5, #1]
 8006ede:	2310      	movs	r3, #16
 8006ee0:	3502      	adds	r5, #2
 8006ee2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006ee6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006eea:	f04f 0c00 	mov.w	ip, #0
 8006eee:	fbb8 f9f3 	udiv	r9, r8, r3
 8006ef2:	4666      	mov	r6, ip
 8006ef4:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ef8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006efc:	f1be 0f09 	cmp.w	lr, #9
 8006f00:	d816      	bhi.n	8006f30 <_strtol_l.constprop.0+0xa4>
 8006f02:	4674      	mov	r4, lr
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	dd24      	ble.n	8006f52 <_strtol_l.constprop.0+0xc6>
 8006f08:	f1bc 0f00 	cmp.w	ip, #0
 8006f0c:	db1e      	blt.n	8006f4c <_strtol_l.constprop.0+0xc0>
 8006f0e:	45b1      	cmp	r9, r6
 8006f10:	d31c      	bcc.n	8006f4c <_strtol_l.constprop.0+0xc0>
 8006f12:	d101      	bne.n	8006f18 <_strtol_l.constprop.0+0x8c>
 8006f14:	45a2      	cmp	sl, r4
 8006f16:	db19      	blt.n	8006f4c <_strtol_l.constprop.0+0xc0>
 8006f18:	fb06 4603 	mla	r6, r6, r3, r4
 8006f1c:	f04f 0c01 	mov.w	ip, #1
 8006f20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f24:	e7e8      	b.n	8006ef8 <_strtol_l.constprop.0+0x6c>
 8006f26:	2c2b      	cmp	r4, #43	; 0x2b
 8006f28:	bf04      	itt	eq
 8006f2a:	782c      	ldrbeq	r4, [r5, #0]
 8006f2c:	1cb5      	addeq	r5, r6, #2
 8006f2e:	e7ca      	b.n	8006ec6 <_strtol_l.constprop.0+0x3a>
 8006f30:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006f34:	f1be 0f19 	cmp.w	lr, #25
 8006f38:	d801      	bhi.n	8006f3e <_strtol_l.constprop.0+0xb2>
 8006f3a:	3c37      	subs	r4, #55	; 0x37
 8006f3c:	e7e2      	b.n	8006f04 <_strtol_l.constprop.0+0x78>
 8006f3e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006f42:	f1be 0f19 	cmp.w	lr, #25
 8006f46:	d804      	bhi.n	8006f52 <_strtol_l.constprop.0+0xc6>
 8006f48:	3c57      	subs	r4, #87	; 0x57
 8006f4a:	e7db      	b.n	8006f04 <_strtol_l.constprop.0+0x78>
 8006f4c:	f04f 3cff 	mov.w	ip, #4294967295
 8006f50:	e7e6      	b.n	8006f20 <_strtol_l.constprop.0+0x94>
 8006f52:	f1bc 0f00 	cmp.w	ip, #0
 8006f56:	da05      	bge.n	8006f64 <_strtol_l.constprop.0+0xd8>
 8006f58:	2322      	movs	r3, #34	; 0x22
 8006f5a:	6003      	str	r3, [r0, #0]
 8006f5c:	4646      	mov	r6, r8
 8006f5e:	b942      	cbnz	r2, 8006f72 <_strtol_l.constprop.0+0xe6>
 8006f60:	4630      	mov	r0, r6
 8006f62:	e79e      	b.n	8006ea2 <_strtol_l.constprop.0+0x16>
 8006f64:	b107      	cbz	r7, 8006f68 <_strtol_l.constprop.0+0xdc>
 8006f66:	4276      	negs	r6, r6
 8006f68:	2a00      	cmp	r2, #0
 8006f6a:	d0f9      	beq.n	8006f60 <_strtol_l.constprop.0+0xd4>
 8006f6c:	f1bc 0f00 	cmp.w	ip, #0
 8006f70:	d000      	beq.n	8006f74 <_strtol_l.constprop.0+0xe8>
 8006f72:	1e69      	subs	r1, r5, #1
 8006f74:	6011      	str	r1, [r2, #0]
 8006f76:	e7f3      	b.n	8006f60 <_strtol_l.constprop.0+0xd4>
 8006f78:	2430      	movs	r4, #48	; 0x30
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1b1      	bne.n	8006ee2 <_strtol_l.constprop.0+0x56>
 8006f7e:	2308      	movs	r3, #8
 8006f80:	e7af      	b.n	8006ee2 <_strtol_l.constprop.0+0x56>
 8006f82:	2c30      	cmp	r4, #48	; 0x30
 8006f84:	d0a5      	beq.n	8006ed2 <_strtol_l.constprop.0+0x46>
 8006f86:	230a      	movs	r3, #10
 8006f88:	e7ab      	b.n	8006ee2 <_strtol_l.constprop.0+0x56>
 8006f8a:	bf00      	nop
 8006f8c:	08009433 	.word	0x08009433

08006f90 <_strtol_r>:
 8006f90:	f7ff bf7c 	b.w	8006e8c <_strtol_l.constprop.0>

08006f94 <_strtoul_l.constprop.0>:
 8006f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f98:	4f36      	ldr	r7, [pc, #216]	; (8007074 <_strtoul_l.constprop.0+0xe0>)
 8006f9a:	4686      	mov	lr, r0
 8006f9c:	460d      	mov	r5, r1
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fa4:	5de6      	ldrb	r6, [r4, r7]
 8006fa6:	f016 0608 	ands.w	r6, r6, #8
 8006faa:	d1f8      	bne.n	8006f9e <_strtoul_l.constprop.0+0xa>
 8006fac:	2c2d      	cmp	r4, #45	; 0x2d
 8006fae:	d12f      	bne.n	8007010 <_strtoul_l.constprop.0+0x7c>
 8006fb0:	782c      	ldrb	r4, [r5, #0]
 8006fb2:	2601      	movs	r6, #1
 8006fb4:	1c85      	adds	r5, r0, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d057      	beq.n	800706a <_strtoul_l.constprop.0+0xd6>
 8006fba:	2b10      	cmp	r3, #16
 8006fbc:	d109      	bne.n	8006fd2 <_strtoul_l.constprop.0+0x3e>
 8006fbe:	2c30      	cmp	r4, #48	; 0x30
 8006fc0:	d107      	bne.n	8006fd2 <_strtoul_l.constprop.0+0x3e>
 8006fc2:	7828      	ldrb	r0, [r5, #0]
 8006fc4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006fc8:	2858      	cmp	r0, #88	; 0x58
 8006fca:	d149      	bne.n	8007060 <_strtoul_l.constprop.0+0xcc>
 8006fcc:	786c      	ldrb	r4, [r5, #1]
 8006fce:	2310      	movs	r3, #16
 8006fd0:	3502      	adds	r5, #2
 8006fd2:	f04f 38ff 	mov.w	r8, #4294967295
 8006fd6:	2700      	movs	r7, #0
 8006fd8:	fbb8 f8f3 	udiv	r8, r8, r3
 8006fdc:	fb03 f908 	mul.w	r9, r3, r8
 8006fe0:	ea6f 0909 	mvn.w	r9, r9
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006fea:	f1bc 0f09 	cmp.w	ip, #9
 8006fee:	d814      	bhi.n	800701a <_strtoul_l.constprop.0+0x86>
 8006ff0:	4664      	mov	r4, ip
 8006ff2:	42a3      	cmp	r3, r4
 8006ff4:	dd22      	ble.n	800703c <_strtoul_l.constprop.0+0xa8>
 8006ff6:	2f00      	cmp	r7, #0
 8006ff8:	db1d      	blt.n	8007036 <_strtoul_l.constprop.0+0xa2>
 8006ffa:	4580      	cmp	r8, r0
 8006ffc:	d31b      	bcc.n	8007036 <_strtoul_l.constprop.0+0xa2>
 8006ffe:	d101      	bne.n	8007004 <_strtoul_l.constprop.0+0x70>
 8007000:	45a1      	cmp	r9, r4
 8007002:	db18      	blt.n	8007036 <_strtoul_l.constprop.0+0xa2>
 8007004:	fb00 4003 	mla	r0, r0, r3, r4
 8007008:	2701      	movs	r7, #1
 800700a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800700e:	e7ea      	b.n	8006fe6 <_strtoul_l.constprop.0+0x52>
 8007010:	2c2b      	cmp	r4, #43	; 0x2b
 8007012:	bf04      	itt	eq
 8007014:	782c      	ldrbeq	r4, [r5, #0]
 8007016:	1c85      	addeq	r5, r0, #2
 8007018:	e7cd      	b.n	8006fb6 <_strtoul_l.constprop.0+0x22>
 800701a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800701e:	f1bc 0f19 	cmp.w	ip, #25
 8007022:	d801      	bhi.n	8007028 <_strtoul_l.constprop.0+0x94>
 8007024:	3c37      	subs	r4, #55	; 0x37
 8007026:	e7e4      	b.n	8006ff2 <_strtoul_l.constprop.0+0x5e>
 8007028:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800702c:	f1bc 0f19 	cmp.w	ip, #25
 8007030:	d804      	bhi.n	800703c <_strtoul_l.constprop.0+0xa8>
 8007032:	3c57      	subs	r4, #87	; 0x57
 8007034:	e7dd      	b.n	8006ff2 <_strtoul_l.constprop.0+0x5e>
 8007036:	f04f 37ff 	mov.w	r7, #4294967295
 800703a:	e7e6      	b.n	800700a <_strtoul_l.constprop.0+0x76>
 800703c:	2f00      	cmp	r7, #0
 800703e:	da07      	bge.n	8007050 <_strtoul_l.constprop.0+0xbc>
 8007040:	2322      	movs	r3, #34	; 0x22
 8007042:	f8ce 3000 	str.w	r3, [lr]
 8007046:	f04f 30ff 	mov.w	r0, #4294967295
 800704a:	b932      	cbnz	r2, 800705a <_strtoul_l.constprop.0+0xc6>
 800704c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007050:	b106      	cbz	r6, 8007054 <_strtoul_l.constprop.0+0xc0>
 8007052:	4240      	negs	r0, r0
 8007054:	2a00      	cmp	r2, #0
 8007056:	d0f9      	beq.n	800704c <_strtoul_l.constprop.0+0xb8>
 8007058:	b107      	cbz	r7, 800705c <_strtoul_l.constprop.0+0xc8>
 800705a:	1e69      	subs	r1, r5, #1
 800705c:	6011      	str	r1, [r2, #0]
 800705e:	e7f5      	b.n	800704c <_strtoul_l.constprop.0+0xb8>
 8007060:	2430      	movs	r4, #48	; 0x30
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1b5      	bne.n	8006fd2 <_strtoul_l.constprop.0+0x3e>
 8007066:	2308      	movs	r3, #8
 8007068:	e7b3      	b.n	8006fd2 <_strtoul_l.constprop.0+0x3e>
 800706a:	2c30      	cmp	r4, #48	; 0x30
 800706c:	d0a9      	beq.n	8006fc2 <_strtoul_l.constprop.0+0x2e>
 800706e:	230a      	movs	r3, #10
 8007070:	e7af      	b.n	8006fd2 <_strtoul_l.constprop.0+0x3e>
 8007072:	bf00      	nop
 8007074:	08009433 	.word	0x08009433

08007078 <_strtoul_r>:
 8007078:	f7ff bf8c 	b.w	8006f94 <_strtoul_l.constprop.0>

0800707c <__submore>:
 800707c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007080:	460c      	mov	r4, r1
 8007082:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007088:	4299      	cmp	r1, r3
 800708a:	d11d      	bne.n	80070c8 <__submore+0x4c>
 800708c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007090:	f7fe fec0 	bl	8005e14 <_malloc_r>
 8007094:	b918      	cbnz	r0, 800709e <__submore+0x22>
 8007096:	f04f 30ff 	mov.w	r0, #4294967295
 800709a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800709e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80070a4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80070a8:	6360      	str	r0, [r4, #52]	; 0x34
 80070aa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80070ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80070b2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80070b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80070ba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80070be:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80070c2:	6020      	str	r0, [r4, #0]
 80070c4:	2000      	movs	r0, #0
 80070c6:	e7e8      	b.n	800709a <__submore+0x1e>
 80070c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80070ca:	0077      	lsls	r7, r6, #1
 80070cc:	463a      	mov	r2, r7
 80070ce:	f000 f857 	bl	8007180 <_realloc_r>
 80070d2:	4605      	mov	r5, r0
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d0de      	beq.n	8007096 <__submore+0x1a>
 80070d8:	eb00 0806 	add.w	r8, r0, r6
 80070dc:	4601      	mov	r1, r0
 80070de:	4632      	mov	r2, r6
 80070e0:	4640      	mov	r0, r8
 80070e2:	f7fe f997 	bl	8005414 <memcpy>
 80070e6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80070ea:	f8c4 8000 	str.w	r8, [r4]
 80070ee:	e7e9      	b.n	80070c4 <__submore+0x48>

080070f0 <_fstat_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4d07      	ldr	r5, [pc, #28]	; (8007110 <_fstat_r+0x20>)
 80070f4:	2300      	movs	r3, #0
 80070f6:	4604      	mov	r4, r0
 80070f8:	4608      	mov	r0, r1
 80070fa:	4611      	mov	r1, r2
 80070fc:	602b      	str	r3, [r5, #0]
 80070fe:	f7fa fade 	bl	80016be <_fstat>
 8007102:	1c43      	adds	r3, r0, #1
 8007104:	d102      	bne.n	800710c <_fstat_r+0x1c>
 8007106:	682b      	ldr	r3, [r5, #0]
 8007108:	b103      	cbz	r3, 800710c <_fstat_r+0x1c>
 800710a:	6023      	str	r3, [r4, #0]
 800710c:	bd38      	pop	{r3, r4, r5, pc}
 800710e:	bf00      	nop
 8007110:	200030fc 	.word	0x200030fc

08007114 <_isatty_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4d06      	ldr	r5, [pc, #24]	; (8007130 <_isatty_r+0x1c>)
 8007118:	2300      	movs	r3, #0
 800711a:	4604      	mov	r4, r0
 800711c:	4608      	mov	r0, r1
 800711e:	602b      	str	r3, [r5, #0]
 8007120:	f7fa fadd 	bl	80016de <_isatty>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d102      	bne.n	800712e <_isatty_r+0x1a>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	b103      	cbz	r3, 800712e <_isatty_r+0x1a>
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	200030fc 	.word	0x200030fc

08007134 <memmove>:
 8007134:	4288      	cmp	r0, r1
 8007136:	b510      	push	{r4, lr}
 8007138:	eb01 0402 	add.w	r4, r1, r2
 800713c:	d902      	bls.n	8007144 <memmove+0x10>
 800713e:	4284      	cmp	r4, r0
 8007140:	4623      	mov	r3, r4
 8007142:	d807      	bhi.n	8007154 <memmove+0x20>
 8007144:	1e43      	subs	r3, r0, #1
 8007146:	42a1      	cmp	r1, r4
 8007148:	d008      	beq.n	800715c <memmove+0x28>
 800714a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800714e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007152:	e7f8      	b.n	8007146 <memmove+0x12>
 8007154:	4402      	add	r2, r0
 8007156:	4601      	mov	r1, r0
 8007158:	428a      	cmp	r2, r1
 800715a:	d100      	bne.n	800715e <memmove+0x2a>
 800715c:	bd10      	pop	{r4, pc}
 800715e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007166:	e7f7      	b.n	8007158 <memmove+0x24>

08007168 <__malloc_lock>:
 8007168:	4801      	ldr	r0, [pc, #4]	; (8007170 <__malloc_lock+0x8>)
 800716a:	f7fe bd6d 	b.w	8005c48 <__retarget_lock_acquire_recursive>
 800716e:	bf00      	nop
 8007170:	200030f0 	.word	0x200030f0

08007174 <__malloc_unlock>:
 8007174:	4801      	ldr	r0, [pc, #4]	; (800717c <__malloc_unlock+0x8>)
 8007176:	f7fe bd68 	b.w	8005c4a <__retarget_lock_release_recursive>
 800717a:	bf00      	nop
 800717c:	200030f0 	.word	0x200030f0

08007180 <_realloc_r>:
 8007180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007184:	4680      	mov	r8, r0
 8007186:	4614      	mov	r4, r2
 8007188:	460e      	mov	r6, r1
 800718a:	b921      	cbnz	r1, 8007196 <_realloc_r+0x16>
 800718c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007190:	4611      	mov	r1, r2
 8007192:	f7fe be3f 	b.w	8005e14 <_malloc_r>
 8007196:	b92a      	cbnz	r2, 80071a4 <_realloc_r+0x24>
 8007198:	f7fe fdd0 	bl	8005d3c <_free_r>
 800719c:	4625      	mov	r5, r4
 800719e:	4628      	mov	r0, r5
 80071a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a4:	f000 f81b 	bl	80071de <_malloc_usable_size_r>
 80071a8:	4284      	cmp	r4, r0
 80071aa:	4607      	mov	r7, r0
 80071ac:	d802      	bhi.n	80071b4 <_realloc_r+0x34>
 80071ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071b2:	d812      	bhi.n	80071da <_realloc_r+0x5a>
 80071b4:	4621      	mov	r1, r4
 80071b6:	4640      	mov	r0, r8
 80071b8:	f7fe fe2c 	bl	8005e14 <_malloc_r>
 80071bc:	4605      	mov	r5, r0
 80071be:	2800      	cmp	r0, #0
 80071c0:	d0ed      	beq.n	800719e <_realloc_r+0x1e>
 80071c2:	42bc      	cmp	r4, r7
 80071c4:	4622      	mov	r2, r4
 80071c6:	4631      	mov	r1, r6
 80071c8:	bf28      	it	cs
 80071ca:	463a      	movcs	r2, r7
 80071cc:	f7fe f922 	bl	8005414 <memcpy>
 80071d0:	4631      	mov	r1, r6
 80071d2:	4640      	mov	r0, r8
 80071d4:	f7fe fdb2 	bl	8005d3c <_free_r>
 80071d8:	e7e1      	b.n	800719e <_realloc_r+0x1e>
 80071da:	4635      	mov	r5, r6
 80071dc:	e7df      	b.n	800719e <_realloc_r+0x1e>

080071de <_malloc_usable_size_r>:
 80071de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e2:	1f18      	subs	r0, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	bfbc      	itt	lt
 80071e8:	580b      	ldrlt	r3, [r1, r0]
 80071ea:	18c0      	addlt	r0, r0, r3
 80071ec:	4770      	bx	lr
	...

080071f0 <_init>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr

080071fc <_fini>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr
