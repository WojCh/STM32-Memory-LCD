
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013004  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002a858  080131b8  080131b8  000231b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803da10  0803da10  000504f0  2**0
                  CONTENTS
  4 .ARM          00000008  0803da10  0803da10  0004da10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803da18  0803da18  000504f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803da18  0803da18  0004da18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803da1c  0803da1c  0004da1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f0  20000000  0803da20  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000504f0  2**0
                  CONTENTS
 10 .bss          00003308  200004f0  200004f0  000504f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200037f8  200037f8  000504f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000504f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000203db  00000000  00000000  00050520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005780  00000000  00000000  000708fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001910  00000000  00000000  00076080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016d8  00000000  00000000  00077990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a454  00000000  00000000  00079068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025d28  00000000  00000000  000a34bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6ce4  00000000  00000000  000c91e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001afec8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083f8  00000000  00000000  001aff18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  001b8310  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001b83dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200004f0 	.word	0x200004f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801319c 	.word	0x0801319c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200004f4 	.word	0x200004f4
 80001ec:	0801319c 	.word	0x0801319c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c90:	f000 b974 	b.w	8000f7c <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9d08      	ldr	r5, [sp, #32]
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	468e      	mov	lr, r1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d14d      	bne.n	8000d56 <__udivmoddi4+0xaa>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	d969      	bls.n	8000d94 <__udivmoddi4+0xe8>
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	b152      	cbz	r2, 8000cdc <__udivmoddi4+0x30>
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	f1c2 0120 	rsb	r1, r2, #32
 8000cce:	fa20 f101 	lsr.w	r1, r0, r1
 8000cd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cda:	4094      	lsls	r4, r2
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	0c21      	lsrs	r1, r4, #16
 8000ce2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce6:	fa1f f78c 	uxth.w	r7, ip
 8000cea:	fb08 e316 	mls	r3, r8, r6, lr
 8000cee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cf2:	fb06 f107 	mul.w	r1, r6, r7
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x64>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d02:	f080 811f 	bcs.w	8000f44 <__udivmoddi4+0x298>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 811c 	bls.w	8000f44 <__udivmoddi4+0x298>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d18:	fb08 3310 	mls	r3, r8, r0, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb00 f707 	mul.w	r7, r0, r7
 8000d24:	42a7      	cmp	r7, r4
 8000d26:	d90a      	bls.n	8000d3e <__udivmoddi4+0x92>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d30:	f080 810a 	bcs.w	8000f48 <__udivmoddi4+0x29c>
 8000d34:	42a7      	cmp	r7, r4
 8000d36:	f240 8107 	bls.w	8000f48 <__udivmoddi4+0x29c>
 8000d3a:	4464      	add	r4, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d42:	1be4      	subs	r4, r4, r7
 8000d44:	2600      	movs	r6, #0
 8000d46:	b11d      	cbz	r5, 8000d50 <__udivmoddi4+0xa4>
 8000d48:	40d4      	lsrs	r4, r2
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0xc2>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	f000 80ef 	beq.w	8000f3e <__udivmoddi4+0x292>
 8000d60:	2600      	movs	r6, #0
 8000d62:	e9c5 0100 	strd	r0, r1, [r5]
 8000d66:	4630      	mov	r0, r6
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	fab3 f683 	clz	r6, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d14a      	bne.n	8000e0c <__udivmoddi4+0x160>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xd4>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80f9 	bhi.w	8000f72 <__udivmoddi4+0x2c6>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb61 0303 	sbc.w	r3, r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	469e      	mov	lr, r3
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e0      	beq.n	8000d50 <__udivmoddi4+0xa4>
 8000d8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d92:	e7dd      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000d94:	b902      	cbnz	r2, 8000d98 <__udivmoddi4+0xec>
 8000d96:	deff      	udf	#255	; 0xff
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	f040 8092 	bne.w	8000ec6 <__udivmoddi4+0x21a>
 8000da2:	eba1 010c 	sub.w	r1, r1, ip
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f fe8c 	uxth.w	lr, ip
 8000dae:	2601      	movs	r6, #1
 8000db0:	0c20      	lsrs	r0, r4, #16
 8000db2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db6:	fb07 1113 	mls	r1, r7, r3, r1
 8000dba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbe:	fb0e f003 	mul.w	r0, lr, r3
 8000dc2:	4288      	cmp	r0, r1
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x12c>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x12a>
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	f200 80cb 	bhi.w	8000f6c <__udivmoddi4+0x2c0>
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	1a09      	subs	r1, r1, r0
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de0:	fb07 1110 	mls	r1, r7, r0, r1
 8000de4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x156>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d202      	bcs.n	8000e00 <__udivmoddi4+0x154>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	f200 80bb 	bhi.w	8000f76 <__udivmoddi4+0x2ca>
 8000e00:	4608      	mov	r0, r1
 8000e02:	eba4 040e 	sub.w	r4, r4, lr
 8000e06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e0a:	e79c      	b.n	8000d46 <__udivmoddi4+0x9a>
 8000e0c:	f1c6 0720 	rsb	r7, r6, #32
 8000e10:	40b3      	lsls	r3, r6
 8000e12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e22:	431c      	orrs	r4, r3
 8000e24:	40f9      	lsrs	r1, r7
 8000e26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e32:	0c20      	lsrs	r0, r4, #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fb09 1118 	mls	r1, r9, r8, r1
 8000e3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e40:	fb08 f00e 	mul.w	r0, r8, lr
 8000e44:	4288      	cmp	r0, r1
 8000e46:	fa02 f206 	lsl.w	r2, r2, r6
 8000e4a:	d90b      	bls.n	8000e64 <__udivmoddi4+0x1b8>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e54:	f080 8088 	bcs.w	8000f68 <__udivmoddi4+0x2bc>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f240 8085 	bls.w	8000f68 <__udivmoddi4+0x2bc>
 8000e5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1a09      	subs	r1, r1, r0
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	458e      	cmp	lr, r1
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x1e2>
 8000e7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e84:	d26c      	bcs.n	8000f60 <__udivmoddi4+0x2b4>
 8000e86:	458e      	cmp	lr, r1
 8000e88:	d96a      	bls.n	8000f60 <__udivmoddi4+0x2b4>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4461      	add	r1, ip
 8000e8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e92:	fba0 9402 	umull	r9, r4, r0, r2
 8000e96:	eba1 010e 	sub.w	r1, r1, lr
 8000e9a:	42a1      	cmp	r1, r4
 8000e9c:	46c8      	mov	r8, r9
 8000e9e:	46a6      	mov	lr, r4
 8000ea0:	d356      	bcc.n	8000f50 <__udivmoddi4+0x2a4>
 8000ea2:	d053      	beq.n	8000f4c <__udivmoddi4+0x2a0>
 8000ea4:	b15d      	cbz	r5, 8000ebe <__udivmoddi4+0x212>
 8000ea6:	ebb3 0208 	subs.w	r2, r3, r8
 8000eaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000eae:	fa01 f707 	lsl.w	r7, r1, r7
 8000eb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb6:	40f1      	lsrs	r1, r6
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	e9c5 7100 	strd	r7, r1, [r5]
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	f1c2 0320 	rsb	r3, r2, #32
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	4301      	orrs	r1, r0
 8000ed8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee8:	0c0b      	lsrs	r3, r1, #16
 8000eea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eee:	fb00 f60e 	mul.w	r6, r0, lr
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x260>
 8000efa:	eb1c 0303 	adds.w	r3, ip, r3
 8000efe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f02:	d22f      	bcs.n	8000f64 <__udivmoddi4+0x2b8>
 8000f04:	429e      	cmp	r6, r3
 8000f06:	d92d      	bls.n	8000f64 <__udivmoddi4+0x2b8>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	1b9b      	subs	r3, r3, r6
 8000f0e:	b289      	uxth	r1, r1
 8000f10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f14:	fb07 3316 	mls	r3, r7, r6, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x28a>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f2c:	d216      	bcs.n	8000f5c <__udivmoddi4+0x2b0>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d914      	bls.n	8000f5c <__udivmoddi4+0x2b0>
 8000f32:	3e02      	subs	r6, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f3c:	e738      	b.n	8000db0 <__udivmoddi4+0x104>
 8000f3e:	462e      	mov	r6, r5
 8000f40:	4628      	mov	r0, r5
 8000f42:	e705      	b.n	8000d50 <__udivmoddi4+0xa4>
 8000f44:	4606      	mov	r6, r0
 8000f46:	e6e3      	b.n	8000d10 <__udivmoddi4+0x64>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6f8      	b.n	8000d3e <__udivmoddi4+0x92>
 8000f4c:	454b      	cmp	r3, r9
 8000f4e:	d2a9      	bcs.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f50:	ebb9 0802 	subs.w	r8, r9, r2
 8000f54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f58:	3801      	subs	r0, #1
 8000f5a:	e7a3      	b.n	8000ea4 <__udivmoddi4+0x1f8>
 8000f5c:	4646      	mov	r6, r8
 8000f5e:	e7ea      	b.n	8000f36 <__udivmoddi4+0x28a>
 8000f60:	4620      	mov	r0, r4
 8000f62:	e794      	b.n	8000e8e <__udivmoddi4+0x1e2>
 8000f64:	4640      	mov	r0, r8
 8000f66:	e7d1      	b.n	8000f0c <__udivmoddi4+0x260>
 8000f68:	46d0      	mov	r8, sl
 8000f6a:	e77b      	b.n	8000e64 <__udivmoddi4+0x1b8>
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	e732      	b.n	8000dd8 <__udivmoddi4+0x12c>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e709      	b.n	8000d8a <__udivmoddi4+0xde>
 8000f76:	4464      	add	r4, ip
 8000f78:	3802      	subs	r0, #2
 8000f7a:	e742      	b.n	8000e02 <__udivmoddi4+0x156>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8000f8e:	2332      	movs	r3, #50	; 0x32
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	22d0      	movs	r2, #208	; 0xd0
 8000f9e:	21ef      	movs	r1, #239	; 0xef
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <read_chip_id+0x3c>)
 8000fa2:	f006 faff 	bl	80075a4 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8000fa6:	79bb      	ldrb	r3, [r7, #6]
 8000fa8:	2b55      	cmp	r3, #85	; 0x55
 8000faa:	d001      	beq.n	8000fb0 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000063c 	.word	0x2000063c

08000fc0 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af04      	add	r7, sp, #16
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 8000fcc:	2300      	movs	r3, #0
 8000fce:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d81a      	bhi.n	800100c <set_oss+0x4c>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <set_oss+0x1c>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	08000ff5 	.word	0x08000ff5
 8000fe4:	08000ffd 	.word	0x08000ffd
 8000fe8:	08001005 	.word	0x08001005
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	705a      	strb	r2, [r3, #1]
			break;
 8000ff2:	e00f      	b.n	8001014 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	705a      	strb	r2, [r3, #1]
			break;
 8000ffa:	e00b      	b.n	8001014 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	220e      	movs	r2, #14
 8001000:	705a      	strb	r2, [r3, #1]
			break;
 8001002:	e007      	b.n	8001014 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	221a      	movs	r2, #26
 8001008:	705a      	strb	r2, [r3, #1]
			break;
 800100a:	e003      	b.n	8001014 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2208      	movs	r2, #8
 8001010:	705a      	strb	r2, [r3, #1]
			break;
 8001012:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	78fa      	ldrb	r2, [r7, #3]
 8001018:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	70fb      	strb	r3, [r7, #3]
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001024:	2332      	movs	r3, #50	; 0x32
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2302      	movs	r3, #2
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	22f4      	movs	r2, #244	; 0xf4
 8001036:	21ee      	movs	r1, #238	; 0xee
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <set_oss+0x88>)
 800103a:	f006 f9b9 	bl	80073b0 <HAL_I2C_Mem_Write>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000063c 	.word	0x2000063c

0800104c <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af04      	add	r7, sp, #16
 8001052:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800107a:	2332      	movs	r3, #50	; 0x32
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2316      	movs	r3, #22
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	22aa      	movs	r2, #170	; 0xaa
 800108c:	21ef      	movs	r1, #239	; 0xef
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <read_calib_data+0xe0>)
 8001090:	f006 fa88 	bl	80075a4 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800109a:	e03c      	b.n	8001116 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800109c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	3328      	adds	r3, #40	; 0x28
 80010a4:	443b      	add	r3, r7
 80010a6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b219      	sxth	r1, r3
 80010ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010b2:	3328      	adds	r3, #40	; 0x28
 80010b4:	443b      	add	r3, r7
 80010b6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	4403      	add	r3, r0
 80010c6:	430a      	orrs	r2, r1
 80010c8:	b212      	sxth	r2, r2
 80010ca:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80010cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf0c      	ite	eq
 80010de:	2301      	moveq	r3, #1
 80010e0:	2300      	movne	r3, #0
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	440b      	add	r3, r1
 80010ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 8001106:	2302      	movs	r3, #2
 8001108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800110c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001110:	3301      	adds	r3, #1
 8001112:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001116:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800111a:	2b0b      	cmp	r3, #11
 800111c:	d9be      	bls.n	800109c <read_calib_data+0x50>
		}
	}

	return ret_val;
 800111e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001122:	4618      	mov	r0, r3
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000063c 	.word	0x2000063c

08001130 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2204      	movs	r2, #4
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00a fd74 	bl	800bc2c <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001144:	687c      	ldr	r4, [r7, #4]
 8001146:	f7ff ff1b 	bl	8000f80 <read_chip_id>
 800114a:	4603      	mov	r3, r0
 800114c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	687c      	ldr	r4, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff79 	bl	800104c <read_calib_data>
 800115a:	4603      	mov	r3, r0
 800115c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3340      	adds	r3, #64	; 0x40
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff2a 	bl	8000fc0 <set_oss>
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800117a:	232e      	movs	r3, #46	; 0x2e
 800117c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800117e:	2332      	movs	r3, #50	; 0x32
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	22f4      	movs	r2, #244	; 0xf4
 800118e:	21ee      	movs	r1, #238	; 0xee
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <get_ut+0x50>)
 8001192:	f006 f90d 	bl	80073b0 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001196:	2005      	movs	r0, #5
 8001198:	f005 fbe2 	bl	8006960 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800119c:	2332      	movs	r3, #50	; 0x32
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2302      	movs	r3, #2
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	22f6      	movs	r2, #246	; 0xf6
 80011ac:	21ef      	movs	r1, #239	; 0xef
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <get_ut+0x50>)
 80011b0:	f006 f9f8 	bl	80075a4 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 80011b4:	793b      	ldrb	r3, [r7, #4]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	797a      	ldrb	r2, [r7, #5]
 80011ba:	4313      	orrs	r3, r2
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000063c 	.word	0x2000063c

080011c8 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 2a90 	vmov	r2, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	895b      	ldrh	r3, [r3, #10]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	8912      	ldrh	r2, [r2, #8]
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	13db      	asrs	r3, r3, #15
 80011fc:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001204:	02da      	lsls	r2, r3, #11
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800120c:	4619      	mov	r1, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	440b      	add	r3, r1
 8001212:	fb92 f3f3 	sdiv	r3, r2, r3
 8001216:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	441a      	add	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001226:	3308      	adds	r3, #8
 8001228:	111b      	asrs	r3, r3, #4
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001280 <get_temp+0xb8>
 8001236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123a:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800123e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001242:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001284 <get_temp+0xbc>
 8001246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	d908      	bls.n	8001262 <get_temp+0x9a>
 8001250:	edd7 7a03 	vldr	s15, [r7, #12]
 8001254:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001288 <get_temp+0xc0>
 8001258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	db03      	blt.n	800126a <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2203      	movs	r2, #3
 8001266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	ee07 3a90 	vmov	s15, r3
}
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	3dcccccd 	.word	0x3dcccccd
 8001284:	c2200000 	.word	0xc2200000
 8001288:	42aa0000 	.word	0x42aa0000

0800128c <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <get_up+0x7c>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	813b      	strh	r3, [r7, #8]
 800129a:	2300      	movs	r3, #0
 800129c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 80012a2:	2334      	movs	r3, #52	; 0x34
 80012a4:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 80012a6:	2332      	movs	r3, #50	; 0x32
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2301      	movs	r3, #1
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	22f4      	movs	r2, #244	; 0xf4
 80012b8:	21ee      	movs	r1, #238	; 0xee
 80012ba:	4814      	ldr	r0, [pc, #80]	; (800130c <get_up+0x80>)
 80012bc:	f006 f878 	bl	80073b0 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 fb4c 	bl	8006960 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80012c8:	2332      	movs	r3, #50	; 0x32
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	2303      	movs	r3, #3
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	f107 0308 	add.w	r3, r7, #8
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	22f6      	movs	r2, #246	; 0xf6
 80012da:	21ef      	movs	r1, #239	; 0xef
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <get_up+0x80>)
 80012de:	f006 f961 	bl	80075a4 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80012e2:	7a3b      	ldrb	r3, [r7, #8]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	7a7b      	ldrb	r3, [r7, #9]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	4413      	add	r3, r2
 80012ec:	7aba      	ldrb	r2, [r7, #10]
 80012ee:	441a      	add	r2, r3
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	f1c3 0308 	rsb	r3, r3, #8
 80012f6:	fa42 f303 	asr.w	r3, r2, r3
 80012fa:	60fb      	str	r3, [r7, #12]
	return up;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	080131b8 	.word	0x080131b8
 800130c:	2000063c 	.word	0x2000063c

08001310 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 8001310:	b084      	sub	sp, #16
 8001312:	b480      	push	{r7}
 8001314:	b089      	sub	sp, #36	; 0x24
 8001316:	af00      	add	r7, sp, #0
 8001318:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800131c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800132e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001330:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001334:	461a      	mov	r2, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	fb03 f303 	mul.w	r3, r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	da01      	bge.n	8001344 <get_pressure+0x34>
 8001340:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001344:	131b      	asrs	r3, r3, #12
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	da01      	bge.n	8001352 <get_pressure+0x42>
 800134e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001352:	12db      	asrs	r3, r3, #11
 8001354:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001356:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800135a:	461a      	mov	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	da01      	bge.n	800136a <get_pressure+0x5a>
 8001366:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800136a:	12db      	asrs	r3, r3, #11
 800136c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001376:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800137a:	009a      	lsls	r2, r3, #2
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4413      	add	r3, r2
 8001380:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001384:	4093      	lsls	r3, r2
 8001386:	3302      	adds	r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	da00      	bge.n	800138e <get_pressure+0x7e>
 800138c:	3303      	adds	r3, #3
 800138e:	109b      	asrs	r3, r3, #2
 8001390:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001392:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001396:	461a      	mov	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da02      	bge.n	80013a8 <get_pressure+0x98>
 80013a2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80013a6:	331f      	adds	r3, #31
 80013a8:	135b      	asrs	r3, r3, #13
 80013aa:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 80013ac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80013b0:	461a      	mov	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fb03 f303 	mul.w	r3, r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da01      	bge.n	80013c0 <get_pressure+0xb0>
 80013bc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80013c0:	131b      	asrs	r3, r3, #12
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da02      	bge.n	80013d0 <get_pressure+0xc0>
 80013ca:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80013ce:	33ff      	adds	r3, #255	; 0xff
 80013d0:	141b      	asrs	r3, r3, #16
 80013d2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	3302      	adds	r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da00      	bge.n	80013e2 <get_pressure+0xd2>
 80013e0:	3303      	adds	r3, #3
 80013e2:	109b      	asrs	r3, r3, #2
 80013e4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80013e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	0bdb      	lsrs	r3, r3, #15
 80013f6:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80013f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001404:	4611      	mov	r1, r2
 8001406:	f24c 3250 	movw	r2, #50000	; 0xc350
 800140a:	410a      	asrs	r2, r1
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db06      	blt.n	8001426 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	005a      	lsls	r2, r3, #1
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	e005      	b.n	8001432 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b00      	cmp	r3, #0
 8001436:	da00      	bge.n	800143a <get_pressure+0x12a>
 8001438:	33ff      	adds	r3, #255	; 0xff
 800143a:	121b      	asrs	r3, r3, #8
 800143c:	461a      	mov	r2, r3
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2b00      	cmp	r3, #0
 8001442:	da00      	bge.n	8001446 <get_pressure+0x136>
 8001444:	33ff      	adds	r3, #255	; 0xff
 8001446:	121b      	asrs	r3, r3, #8
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f640 32de 	movw	r2, #3038	; 0xbde
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	da02      	bge.n	8001462 <get_pressure+0x152>
 800145c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001460:	33ff      	adds	r3, #255	; 0xff
 8001462:	141b      	asrs	r3, r3, #16
 8001464:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <get_pressure+0x198>)
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	da02      	bge.n	8001478 <get_pressure+0x168>
 8001472:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001476:	33ff      	adds	r3, #255	; 0xff
 8001478:	141b      	asrs	r3, r3, #16
 800147a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001486:	2b00      	cmp	r3, #0
 8001488:	da00      	bge.n	800148c <get_pressure+0x17c>
 800148a:	330f      	adds	r3, #15
 800148c:	111b      	asrs	r3, r3, #4
 800148e:	461a      	mov	r2, r3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	61fb      	str	r3, [r7, #28]

	return p;
 8001496:	69fb      	ldr	r3, [r7, #28]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	b004      	add	sp, #16
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	ffffe343 	.word	0xffffe343
 80014ac:	00000000 	.word	0x00000000

080014b0 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <get_altitude+0xb8>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014d4:	ee16 0a90 	vmov	r0, s13
 80014d8:	f7ff f850 	bl	800057c <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001558 <get_altitude+0xa8>
 80014e4:	ec43 2b10 	vmov	d0, r2, r3
 80014e8:	f00f fae6 	bl	8010ab8 <pow>
 80014ec:	ec53 2b10 	vmov	r2, r3, d0
 80014f0:	f04f 0000 	mov.w	r0, #0
 80014f4:	491d      	ldr	r1, [pc, #116]	; (800156c <get_altitude+0xbc>)
 80014f6:	f7fe fee1 	bl	80002bc <__aeabi_dsub>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a317      	add	r3, pc, #92	; (adr r3, 8001560 <get_altitude+0xb0>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f890 	bl	800062c <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb62 	bl	8000bdc <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 800151c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001520:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001570 <get_altitude+0xc0>
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d908      	bls.n	8001540 <get_altitude+0x90>
 800152e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001532:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001574 <get_altitude+0xc4>
 8001536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	db03      	blt.n	8001548 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2205      	movs	r2, #5
 8001544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	ee07 3a90 	vmov	s15, r3
}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	ccd9456c 	.word	0xccd9456c
 800155c:	3fc85b95 	.word	0x3fc85b95
 8001560:	00000000 	.word	0x00000000
 8001564:	40e5a540 	.word	0x40e5a540
 8001568:	20000000 	.word	0x20000000
 800156c:	3ff00000 	.word	0x3ff00000
 8001570:	c3fa0000 	.word	0xc3fa0000
 8001574:	460ca000 	.word	0x460ca000

08001578 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffe4 	bl	8000558 <__aeabi_i2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <get_slp+0x80>)
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80015fc <get_slp+0x84>
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	ee17 0a90 	vmov	r0, s15
 80015ae:	f7fe ffe5 	bl	800057c <__aeabi_f2d>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80015f0 <get_slp+0x78>
 80015ba:	ec43 2b10 	vmov	d0, r2, r3
 80015be:	f00f fa7b 	bl	8010ab8 <pow>
 80015c2:	ec53 2b10 	vmov	r2, r3, d0
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7ff f959 	bl	8000880 <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fb01 	bl	8000bdc <__aeabi_d2f>
 80015da:	4603      	mov	r3, r0
 80015dc:	60fb      	str	r3, [r7, #12]

	return slp;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	ee07 3a90 	vmov	s15, r3
}
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdb0      	pop	{r4, r5, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	b851eb85 	.word	0xb851eb85
 80015f4:	4015051e 	.word	0x4015051e
 80015f8:	20000004 	.word	0x20000004
 80015fc:	472d2a00 	.word	0x472d2a00

08001600 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b095      	sub	sp, #84	; 0x54
 8001604:	af0e      	add	r7, sp, #56	; 0x38
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 800160a:	f7ff fdb3 	bl	8001174 <get_ut>
 800160e:	ee07 0a90 	vmov	s15, r0
 8001612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f7ff fdd3 	bl	80011c8 <get_temp>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001630:	f7ff fe2c 	bl	800128c <get_up>
 8001634:	4602      	mov	r2, r0
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 800163a:	683e      	ldr	r6, [r7, #0]
 800163c:	466d      	mov	r5, sp
 800163e:	f106 0410 	add.w	r4, r6, #16
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	602b      	str	r3, [r5, #0]
 8001652:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001656:	f7ff fe5b 	bl	8001310 <get_pressure>
 800165a:	4602      	mov	r2, r0
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f7ff ff89 	bl	8001578 <get_slp>
 8001666:	eef0 7a40 	vmov.f32	s15, s0
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f7ff ff1d 	bl	80014b0 <get_altitude>
 8001676:	eef0 7a40 	vmov.f32	s15, s0
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	617b      	str	r3, [r7, #20]
	return result;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	461c      	mov	r4, r3
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016b0 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80016bc:	e083      	b.n	80017c6 <initButtons+0x116>
		btns[i]->pin = pins[i];
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	440b      	add	r3, r1
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4944      	ldr	r1, [pc, #272]	; (80017dc <initButtons+0x12c>)
 80016cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80016d0:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	440b      	add	r3, r1
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4940      	ldr	r1, [pc, #256]	; (80017e0 <initButtons+0x130>)
 80016e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016e4:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	7993      	ldrb	r3, [r2, #6]
 80016f2:	f36f 0300 	bfc	r3, #0, #1
 80016f6:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	7993      	ldrb	r3, [r2, #6]
 8001704:	f36f 0341 	bfc	r3, #1, #1
 8001708:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2200      	movs	r2, #0
 8001716:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2200      	movs	r2, #0
 800176a:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	3301      	adds	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	f67f af78 	bls.w	80016be <initButtons+0xe>
	}
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000020 	.word	0x20000020
 80017e0:	20000008 	.word	0x20000008

080017e4 <resetButtonHandlers>:

void resetButtonHandlers(void){
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 80017ee:	e020      	b.n	8001832 <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <resetButtonHandlers+0x64>)
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a12      	ldr	r2, [pc, #72]	; (8001848 <resetButtonHandlers+0x64>)
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <resetButtonHandlers+0x64>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <resetButtonHandlers+0x64>)
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <resetButtonHandlers+0x64>)
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
		i++;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3301      	adds	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d9db      	bls.n	80017f0 <resetButtonHandlers+0xc>
	}
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000002c 	.word	0x2000002c

0800184c <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	889b      	ldrh	r3, [r3, #4]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f005 fbf2 	bl	8007048 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf0c      	ite	eq
 800186a:	2301      	moveq	r3, #1
 800186c:	2300      	movne	r3, #0
 800186e:	b2db      	uxtb	r3, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <scanButton>:

void scanButton(Button* btn){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	799b      	ldrb	r3, [r3, #6]
 8001884:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	b2d9      	uxtb	r1, r3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	7993      	ldrb	r3, [r2, #6]
 8001898:	f361 0300 	bfi	r3, r1, #0, #1
 800189c:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffd4 	bl	800184c <readButton>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 80018a8:	7bbb      	ldrb	r3, [r7, #14]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	b2d9      	uxtb	r1, r3
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	7993      	ldrb	r3, [r2, #6]
 80018b4:	f361 0341 	bfi	r3, r1, #1, #1
 80018b8:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 80018ba:	7bba      	ldrb	r2, [r7, #14]
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d150      	bne.n	8001964 <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 80018c2:	7bbb      	ldrb	r3, [r7, #14]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d146      	bne.n	8001956 <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7a9b      	ldrb	r3, [r3, #10]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2000      	movs	r0, #0
 80018e2:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7a9b      	ldrb	r3, [r3, #10]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b3a      	ldr	r3, [pc, #232]	; (80019d4 <scanButton+0x15c>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d32d      	bcc.n	800194e <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7b5b      	ldrb	r3, [r3, #13]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d110      	bne.n	800191c <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2000      	movs	r0, #0
 8001908:	4798      	blx	r3
					}
					btn->longSingleOn++;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7a5b      	ldrb	r3, [r3, #9]
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7a9b      	ldrb	r3, [r3, #10]
 8001920:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <scanButton+0x15c>)
 8001922:	8852      	ldrh	r2, [r2, #2]
 8001924:	fb93 f1f2 	sdiv	r1, r3, r2
 8001928:	fb01 f202 	mul.w	r2, r1, r2
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2000      	movs	r0, #0
 8001940:	4798      	blx	r3
					}
					btn->longContinuous++;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7adb      	ldrb	r3, [r3, #11]
 8001946:	3301      	adds	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8001954:	e03a      	b.n	80019cc <scanButton+0x154>
			btn->shortSingleHandled = 0;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	735a      	strb	r2, [r3, #13]
}
 8001962:	e033      	b.n	80019cc <scanButton+0x154>
		if(currStatus == 1){
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d11b      	bne.n	80019a2 <scanButton+0x12a>
			btn->shortContinuous = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7b1b      	ldrb	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d126      	bne.n	80019cc <scanButton+0x154>
				if(btn->onSinglePressHandler != NULL){
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <scanButton+0x116>
					btn->onSinglePressHandler(NULL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2000      	movs	r0, #0
 800198c:	4798      	blx	r3
				btn->shortSingleOn++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	79db      	ldrb	r3, [r3, #7]
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	731a      	strb	r2, [r3, #12]
}
 80019a0:	e014      	b.n	80019cc <scanButton+0x154>
			if(btn->releaseHandled == 0){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b9b      	ldrb	r3, [r3, #14]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d110      	bne.n	80019cc <scanButton+0x154>
				if(btn->onReleaseHandler != NULL){
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <scanButton+0x142>
					btn->onReleaseHandler(NULL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	2000      	movs	r0, #0
 80019b8:	4798      	blx	r3
				btn->shortSingleOff++;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7a1b      	ldrb	r3, [r3, #8]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	739a      	strb	r2, [r3, #14]
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000044 	.word	0x20000044

080019d8 <scanButtons>:

void scanButtons(Button* btns[6]){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019e4:	e00a      	b.n	80019fc <scanButtons+0x24>
		scanButton(btns[i]);
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff41 	bl	8001878 <scanButton>
		i++;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	3301      	adds	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d9f1      	bls.n	80019e6 <scanButtons+0xe>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <initTimer>:
 *  Created on: Apr 11, 2022
 *      Author: wojch
 */
#include "customTimer.h"

void initTimer(void){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim11);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <initTimer+0x10>)
 8001a12:	f007 ffa9 	bl	8009968 <HAL_TIM_Base_Init>
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200036a4 	.word	0x200036a4

08001a20 <setTimeout>:

void setTimeout(int count){
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	htim11.Init.Period = 65000;
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <setTimeout+0x1c>)
 8001a2a:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001a2e:	60da      	str	r2, [r3, #12]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	200036a4 	.word	0x200036a4

08001a40 <startClock>:
void timerFunction(void){
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//	stopMeasure();
}

void startClock(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <startClock+0x10>)
 8001a46:	f007 ffdf 	bl	8009a08 <HAL_TIM_Base_Start_IT>
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200036a4 	.word	0x200036a4

08001a54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	; 0x30
 8001a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a5f      	ldr	r2, [pc, #380]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b52      	ldr	r3, [pc, #328]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a51      	ldr	r2, [pc, #324]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b4f      	ldr	r3, [pc, #316]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a4a      	ldr	r2, [pc, #296]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a43      	ldr	r2, [pc, #268]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a3c      	ldr	r2, [pc, #240]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <MX_GPIO_Init+0x19c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2140      	movs	r1, #64	; 0x40
 8001b32:	4830      	ldr	r0, [pc, #192]	; (8001bf4 <MX_GPIO_Init+0x1a0>)
 8001b34:	f005 faa0 	bl	8007078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b3e:	482e      	ldr	r0, [pc, #184]	; (8001bf8 <MX_GPIO_Init+0x1a4>)
 8001b40:	f005 fa9a 	bl	8007078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2140      	movs	r1, #64	; 0x40
 8001b48:	482c      	ldr	r0, [pc, #176]	; (8001bfc <MX_GPIO_Init+0x1a8>)
 8001b4a:	f005 fa95 	bl	8007078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001b4e:	2340      	movs	r3, #64	; 0x40
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4823      	ldr	r0, [pc, #140]	; (8001bf4 <MX_GPIO_Init+0x1a0>)
 8001b66:	f005 f8c3 	bl	8006cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b6a:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	481d      	ldr	r0, [pc, #116]	; (8001bf8 <MX_GPIO_Init+0x1a4>)
 8001b84:	f005 f8b4 	bl	8006cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 8001b88:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b8c:	61fb      	str	r3, [r7, #28]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b8e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4818      	ldr	r0, [pc, #96]	; (8001c00 <MX_GPIO_Init+0x1ac>)
 8001ba0:	f005 f8a6 	bl	8006cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ba4:	2340      	movs	r3, #64	; 0x40
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4810      	ldr	r0, [pc, #64]	; (8001bfc <MX_GPIO_Init+0x1a8>)
 8001bbc:	f005 f898 	bl	8006cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480a      	ldr	r0, [pc, #40]	; (8001bfc <MX_GPIO_Init+0x1a8>)
 8001bd4:	f005 f88c 	bl	8006cf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2028      	movs	r0, #40	; 0x28
 8001bde:	f004 ffbe 	bl	8006b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001be2:	2028      	movs	r0, #40	; 0x28
 8001be4:	f004 ffd7 	bl	8006b96 <HAL_NVIC_EnableIRQ>

}
 8001be8:	bf00      	nop
 8001bea:	3730      	adds	r7, #48	; 0x30
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40021000 	.word	0x40021000

08001c04 <getDataFromUart>:


//const uint8_t gpsCmds[] = {"GNGSA", "GNGLL", "GNGGA", "GPTXT", "GNZDA", "GNVTG", "GNRMC", "GPGSV", "BDGSV"};
char gpsBuffer[600] = {0};

void getDataFromUart(gpsDevice* gps){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive(&huart6, &gps->buffer, 600, 1000);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1d19      	adds	r1, r3, #4
 8001c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c14:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <getDataFromUart+0x24>)
 8001c1a:	f008 ff80 	bl	800ab1e <HAL_UART_Receive>
//	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20003730 	.word	0x20003730

08001c2c <initGps>:

gpsDevice initGps(UART_HandleTypeDef* uartPort){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c38:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c3c:	6018      	str	r0, [r3, #0]
 8001c3e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c42:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001c46:	6019      	str	r1, [r3, #0]
	gpsDevice gpsModule;
	gpsModule.uartPort = uartPort;
 8001c48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c4c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c50:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8001c54:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, 600);
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	3304      	adds	r3, #4
 8001c62:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00b fed9 	bl	800da20 <strncpy>
	gpsModule.getData = &getDataFromUart;
 8001c6e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c72:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <initGps+0x84>)
 8001c78:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	return(gpsModule);
 8001c7c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c80:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001c8a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f44f 7318 	mov.w	r3, #608	; 0x260
 8001c96:	461a      	mov	r2, r3
 8001c98:	f009 ffba 	bl	800bc10 <memcpy>
}
 8001c9c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001ca0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	08001c05 	.word	0x08001c05

08001cb4 <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	if(position>0){
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <prevPos+0x2c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <prevPos+0x1a>
		position--;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <prevPos+0x2c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <prevPos+0x2c>)
 8001cca:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8001ccc:	e002      	b.n	8001cd4 <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <prevPos+0x2c>)
 8001cd0:	2205      	movs	r2, #5
 8001cd2:	701a      	strb	r2, [r3, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000638 	.word	0x20000638

08001ce4 <nextPos>:

void nextPos(void){
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <nextPos+0x2c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d806      	bhi.n	8001cfe <nextPos+0x1a>
		position++;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <nextPos+0x2c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <nextPos+0x2c>)
 8001cfa:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8001cfc:	e002      	b.n	8001d04 <nextPos+0x20>
		position=0;
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <nextPos+0x2c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000638 	.word	0x20000638

08001d14 <nextScreen>:

void nextScreen(void){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	nextPos();
 8001d18:	f7ff ffe4 	bl	8001ce4 <nextPos>
	applySelectedScreen();
 8001d1c:	f000 f82c 	bl	8001d78 <applySelectedScreen>
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <prevScreen>:
void prevScreen(void){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	prevPos();
 8001d28:	f7ff ffc4 	bl	8001cb4 <prevPos>
	applySelectedScreen();
 8001d2c:	f000 f824 	bl	8001d78 <applySelectedScreen>
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <resetPos>:
void resetPos(void){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	position=0;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <resetPos+0x14>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8001d3e:	f000 f81b 	bl	8001d78 <applySelectedScreen>
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000638 	.word	0x20000638

08001d4c <guiApplyView>:

void guiApplyView(struct Module *module){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <guiApplyView+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <guiApplyView+0x28>)
 8001d62:	6013      	str	r3, [r2, #0]
	selectScreen();
 8001d64:	f000 f830 	bl	8001dc8 <selectScreen>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000013c 	.word	0x2000013c
 8001d74:	20000138 	.word	0x20000138

08001d78 <applySelectedScreen>:

void applySelectedScreen(void){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <applySelectedScreen+0x40>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <applySelectedScreen+0x44>)
 8001d84:	460b      	mov	r3, r1
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3320      	adds	r3, #32
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <applySelectedScreen+0x48>)
 8001d94:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <applySelectedScreen+0x40>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <applySelectedScreen+0x44>)
 8001d9e:	460b      	mov	r3, r1
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	3324      	adds	r3, #36	; 0x24
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <applySelectedScreen+0x4c>)
 8001dae:	6013      	str	r3, [r2, #0]
	selectScreen();
 8001db0:	f000 f80a 	bl	8001dc8 <selectScreen>
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000638 	.word	0x20000638
 8001dbc:	20000048 	.word	0x20000048
 8001dc0:	2000013c 	.word	0x2000013c
 8001dc4:	20000138 	.word	0x20000138

08001dc8 <selectScreen>:

void selectScreen(void){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8001dcc:	f7ff fd0a 	bl	80017e4 <resetButtonHandlers>
	isModuleSet = 0;
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <selectScreen+0x1c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <selectScreen+0x20>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <selectScreen+0x24>)
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000639 	.word	0x20000639
 8001de8:	20000138 	.word	0x20000138
 8001dec:	20000140 	.word	0x20000140

08001df0 <showGui>:
// function to display alert message over current gui
void showAlert(){

}

void showGui(void){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <showGui+0x30>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <showGui+0x18>
		moduleSetupPtr();
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <showGui+0x34>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4798      	blx	r3
		isModuleSet = 1;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <showGui+0x30>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <showGui+0x38>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <showGui+0x26>
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <showGui+0x38>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4798      	blx	r3
	lcdRefresh();
 8001e16:	f000 ff41 	bl	8002c9c <lcdRefresh>
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000639 	.word	0x20000639
 8001e24:	2000013c 	.word	0x2000013c
 8001e28:	20000140 	.word	0x20000140

08001e2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e32:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <MX_I2C1_Init+0x78>)
 8001e34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e38:	4a1b      	ldr	r2, [pc, #108]	; (8001ea8 <MX_I2C1_Init+0x7c>)
 8001e3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e6a:	f005 f95d 	bl	8007128 <HAL_I2C_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e74:	f001 f908 	bl	8003088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e7c:	f006 f913 	bl	80080a6 <HAL_I2CEx_ConfigAnalogFilter>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001e86:	f001 f8ff 	bl	8003088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <MX_I2C1_Init+0x74>)
 8001e8e:	f006 f946 	bl	800811e <HAL_I2CEx_ConfigDigitalFilter>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001e98:	f001 f8f6 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	2000063c 	.word	0x2000063c
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	000186a0 	.word	0x000186a0

08001eac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_I2C_MspInit+0x84>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d12c      	bne.n	8001f28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_I2C_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <HAL_I2C_MspInit+0x88>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_I2C_MspInit+0x88>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef0:	2312      	movs	r3, #18
 8001ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001efc:	2304      	movs	r3, #4
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	480c      	ldr	r0, [pc, #48]	; (8001f38 <HAL_I2C_MspInit+0x8c>)
 8001f08:	f004 fef2 	bl	8006cf0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_I2C_MspInit+0x88>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <HAL_I2C_MspInit+0x88>)
 8001f16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_I2C_MspInit+0x88>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40005400 	.word	0x40005400
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020400 	.word	0x40020400

08001f3c <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8001f46:	2307      	movs	r3, #7
 8001f48:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8001f56:	e010      	b.n	8001f7a <reverse_uint8+0x3e>
		result = result << 1;
 8001f58:	7bbb      	ldrb	r3, [r7, #14]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8001f6c:	7bba      	ldrb	r2, [r7, #14]
 8001f6e:	7b7b      	ldrb	r3, [r7, #13]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	73bb      	strb	r3, [r7, #14]
		times--;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1eb      	bne.n	8001f58 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8001f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
	updateSetting(0);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f824 	bl	8001fe4 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	e014      	b.n	8001fcc <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	80bb      	strh	r3, [r7, #4]
 8001fa6:	e00b      	b.n	8001fc0 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	2232      	movs	r2, #50	; 0x32
 8001fac:	fb03 f202 	mul.w	r2, r3, r2
 8001fb0:	88bb      	ldrh	r3, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <lcdClearBuffer+0x50>)
 8001fb6:	21ff      	movs	r1, #255	; 0xff
 8001fb8:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8001fba:	88bb      	ldrh	r3, [r7, #4]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	80bb      	strh	r3, [r7, #4]
 8001fc0:	88bb      	ldrh	r3, [r7, #4]
 8001fc2:	2b31      	cmp	r3, #49	; 0x31
 8001fc4:	d9f0      	bls.n	8001fa8 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2bef      	cmp	r3, #239	; 0xef
 8001fd0:	d9e7      	bls.n	8001fa2 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f000 f806 	bl	8001fe4 <updateSetting>
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000694 	.word	0x20000694

08001fe4 <updateSetting>:

void updateSetting(uint8_t state){
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <updateSetting+0x1c>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	7013      	strb	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20000144 	.word	0x20000144

08002004 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	4603      	mov	r3, r0
 800200e:	80fb      	strh	r3, [r7, #6]
 8002010:	460b      	mov	r3, r1
 8002012:	717b      	strb	r3, [r7, #5]
 8002014:	4613      	mov	r3, r2
 8002016:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	795b      	ldrb	r3, [r3, #5]
 800201c:	793a      	ldrb	r2, [r7, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	d304      	bcc.n	800202c <lcdPutChar+0x28>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	799b      	ldrb	r3, [r3, #6]
 8002026:	793a      	ldrb	r2, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	d902      	bls.n	8002032 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	79db      	ldrb	r3, [r3, #7]
 8002030:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	08db      	lsrs	r3, r3, #3
 8002040:	b29b      	uxth	r3, r3
 8002042:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	885b      	ldrh	r3, [r3, #2]
 8002048:	461a      	mov	r2, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	785b      	ldrb	r3, [r3, #1]
 800204e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002052:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002054:	2300      	movs	r3, #0
 8002056:	75fb      	strb	r3, [r7, #23]
 8002058:	e09b      	b.n	8002192 <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 800205a:	797a      	ldrb	r2, [r7, #5]
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	4413      	add	r3, r2
 8002060:	b29b      	uxth	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	4413      	add	r3, r2
 8002068:	461a      	mov	r2, r3
 800206a:	0091      	lsls	r1, r2, #2
 800206c:	461a      	mov	r2, r3
 800206e:	460b      	mov	r3, r1
 8002070:	4413      	add	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	7cfb      	ldrb	r3, [r7, #19]
 8002078:	b29b      	uxth	r3, r3
 800207a:	4413      	add	r3, r2
 800207c:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 800207e:	793b      	ldrb	r3, [r7, #4]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	7952      	ldrb	r2, [r2, #5]
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	8852      	ldrh	r2, [r2, #2]
 800208a:	fb03 f202 	mul.w	r2, r3, r2
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	7cb9      	ldrb	r1, [r7, #18]
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	3308      	adds	r3, #8
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	7d3b      	ldrb	r3, [r7, #20]
 80020a8:	fa42 f303 	asr.w	r3, r2, r3
 80020ac:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 80020ae:	8a3b      	ldrh	r3, [r7, #16]
 80020b0:	4a3e      	ldr	r2, [pc, #248]	; (80021ac <lcdPutChar+0x1a8>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	b25a      	sxtb	r2, r3
 80020b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	b25b      	sxtb	r3, r3
 80020be:	4013      	ands	r3, r2
 80020c0:	b25a      	sxtb	r2, r3
 80020c2:	8a3b      	ldrh	r3, [r7, #16]
 80020c4:	b2d1      	uxtb	r1, r2
 80020c6:	4a39      	ldr	r2, [pc, #228]	; (80021ac <lcdPutChar+0x1a8>)
 80020c8:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	3308      	adds	r3, #8
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	b25a      	sxtb	r2, r3
 80020d6:	7d3b      	ldrb	r3, [r7, #20]
 80020d8:	f1c3 0308 	rsb	r3, r3, #8
 80020dc:	21ff      	movs	r1, #255	; 0xff
 80020de:	fa41 f303 	asr.w	r3, r1, r3
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	4013      	ands	r3, r2
 80020e6:	b25b      	sxtb	r3, r3
 80020e8:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 80020ea:	2301      	movs	r3, #1
 80020ec:	757b      	strb	r3, [r7, #21]
 80020ee:	e029      	b.n	8002144 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 80020f0:	7d7a      	ldrb	r2, [r7, #21]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4413      	add	r3, r2
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	7a1b      	ldrb	r3, [r3, #8]
 80020fc:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 80020fe:	8a3a      	ldrh	r2, [r7, #16]
 8002100:	7d7b      	ldrb	r3, [r7, #21]
 8002102:	4413      	add	r3, r2
 8002104:	4a29      	ldr	r2, [pc, #164]	; (80021ac <lcdPutChar+0x1a8>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	b25a      	sxtb	r2, r3
 800210a:	7db9      	ldrb	r1, [r7, #22]
 800210c:	7d3b      	ldrb	r3, [r7, #20]
 800210e:	f1c3 0308 	rsb	r3, r3, #8
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	b259      	sxtb	r1, r3
 8002118:	7af8      	ldrb	r0, [r7, #11]
 800211a:	7d3b      	ldrb	r3, [r7, #20]
 800211c:	fa40 f303 	asr.w	r3, r0, r3
 8002120:	b25b      	sxtb	r3, r3
 8002122:	430b      	orrs	r3, r1
 8002124:	b25b      	sxtb	r3, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	b25b      	sxtb	r3, r3
 800212a:	4013      	ands	r3, r2
 800212c:	b259      	sxtb	r1, r3
 800212e:	8a3a      	ldrh	r2, [r7, #16]
 8002130:	7d7b      	ldrb	r3, [r7, #21]
 8002132:	4413      	add	r3, r2
 8002134:	b2c9      	uxtb	r1, r1
 8002136:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <lcdPutChar+0x1a8>)
 8002138:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 800213e:	7d7b      	ldrb	r3, [r7, #21]
 8002140:	3301      	adds	r3, #1
 8002142:	757b      	strb	r3, [r7, #21]
 8002144:	7d7a      	ldrb	r2, [r7, #21]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	3307      	adds	r3, #7
 800214c:	10db      	asrs	r3, r3, #3
 800214e:	429a      	cmp	r2, r3
 8002150:	dbce      	blt.n	80020f0 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002152:	8a3a      	ldrh	r2, [r7, #16]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	3307      	adds	r3, #7
 800215a:	10db      	asrs	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	4a13      	ldr	r2, [pc, #76]	; (80021ac <lcdPutChar+0x1a8>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	b25a      	sxtb	r2, r3
 8002164:	7db9      	ldrb	r1, [r7, #22]
 8002166:	7d3b      	ldrb	r3, [r7, #20]
 8002168:	f1c3 0308 	rsb	r3, r3, #8
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	b25b      	sxtb	r3, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	b25b      	sxtb	r3, r3
 8002176:	4013      	ands	r3, r2
 8002178:	b259      	sxtb	r1, r3
 800217a:	8a3a      	ldrh	r2, [r7, #16]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	3307      	adds	r3, #7
 8002182:	10db      	asrs	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	b2c9      	uxtb	r1, r1
 8002188:	4a08      	ldr	r2, [pc, #32]	; (80021ac <lcdPutChar+0x1a8>)
 800218a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	3301      	adds	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	785b      	ldrb	r3, [r3, #1]
 8002196:	7dfa      	ldrb	r2, [r7, #23]
 8002198:	429a      	cmp	r2, r3
 800219a:	f4ff af5e 	bcc.w	800205a <lcdPutChar+0x56>
	}
}
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	20000694 	.word	0x20000694

080021b0 <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60ba      	str	r2, [r7, #8]
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	4603      	mov	r3, r0
 80021bc:	81fb      	strh	r3, [r7, #14]
 80021be:	460b      	mov	r3, r1
 80021c0:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
 80021c6:	e015      	b.n	80021f4 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	fb12 f303 	smulbb	r3, r2, r3
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	89fb      	ldrh	r3, [r7, #14]
 80021da:	4413      	add	r3, r2
 80021dc:	b298      	uxth	r0, r3
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	4413      	add	r3, r2
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	7b79      	ldrb	r1, [r7, #13]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f7ff ff0b 	bl	8002004 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
 80021f0:	3301      	adds	r3, #1
 80021f2:	75fb      	strb	r3, [r7, #23]
 80021f4:	7dfc      	ldrb	r4, [r7, #23]
 80021f6:	68b8      	ldr	r0, [r7, #8]
 80021f8:	f7fd fffa 	bl	80001f0 <strlen>
 80021fc:	4603      	mov	r3, r0
 80021fe:	429c      	cmp	r4, r3
 8002200:	d3e2      	bcc.n	80021c8 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 8002202:	bf00      	nop
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd90      	pop	{r4, r7, pc}

0800220c <lcdVLine>:
void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 800220c:	b490      	push	{r4, r7}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4604      	mov	r4, r0
 8002214:	4608      	mov	r0, r1
 8002216:	4611      	mov	r1, r2
 8002218:	461a      	mov	r2, r3
 800221a:	4623      	mov	r3, r4
 800221c:	80fb      	strh	r3, [r7, #6]
 800221e:	4603      	mov	r3, r0
 8002220:	80bb      	strh	r3, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	70fb      	strb	r3, [r7, #3]
 8002226:	4613      	mov	r3, r2
 8002228:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	b29b      	uxth	r3, r3
 8002230:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	733b      	strb	r3, [r7, #12]
	for(uint8_t y = y1; y <= y2; y++){
 800223c:	88bb      	ldrh	r3, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e04e      	b.n	80022e0 <lcdVLine+0xd4>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	2232      	movs	r2, #50	; 0x32
 8002246:	fb03 f202 	mul.w	r2, r3, r2
 800224a:	7b7b      	ldrb	r3, [r7, #13]
 800224c:	4413      	add	r3, r2
 800224e:	4a29      	ldr	r2, [pc, #164]	; (80022f4 <lcdVLine+0xe8>)
 8002250:	5cd3      	ldrb	r3, [r2, r3]
 8002252:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 8002254:	78bb      	ldrb	r3, [r7, #2]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d01e      	beq.n	8002298 <lcdVLine+0x8c>
 800225a:	2b02      	cmp	r3, #2
 800225c:	dc27      	bgt.n	80022ae <lcdVLine+0xa2>
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <lcdVLine+0x5c>
 8002262:	2b01      	cmp	r3, #1
 8002264:	d00b      	beq.n	800227e <lcdVLine+0x72>
 8002266:	e022      	b.n	80022ae <lcdVLine+0xa2>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 8002268:	7b3b      	ldrb	r3, [r7, #12]
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	fa42 f303 	asr.w	r3, r2, r3
 8002270:	b25a      	sxtb	r2, r3
 8002272:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002276:	4313      	orrs	r3, r2
 8002278:	b25b      	sxtb	r3, r3
 800227a:	73bb      	strb	r3, [r7, #14]
				break;
 800227c:	e024      	b.n	80022c8 <lcdVLine+0xbc>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 800227e:	7b3b      	ldrb	r3, [r7, #12]
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	fa42 f303 	asr.w	r3, r2, r3
 8002286:	b25b      	sxtb	r3, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	b25a      	sxtb	r2, r3
 800228c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002290:	4013      	ands	r3, r2
 8002292:	b25b      	sxtb	r3, r3
 8002294:	73bb      	strb	r3, [r7, #14]
				break;
 8002296:	e017      	b.n	80022c8 <lcdVLine+0xbc>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8002298:	7b3b      	ldrb	r3, [r7, #12]
 800229a:	2280      	movs	r2, #128	; 0x80
 800229c:	fa42 f303 	asr.w	r3, r2, r3
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022a6:	4053      	eors	r3, r2
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	73bb      	strb	r3, [r7, #14]
				break;
 80022ac:	e00c      	b.n	80022c8 <lcdVLine+0xbc>
			default:
				content &= ~(0b10000000 >> offset);
 80022ae:	7b3b      	ldrb	r3, [r7, #12]
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	fa42 f303 	asr.w	r3, r2, r3
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	b25a      	sxtb	r2, r3
 80022bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022c0:	4013      	ands	r3, r2
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	73bb      	strb	r3, [r7, #14]
				break;
 80022c6:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	2232      	movs	r2, #50	; 0x32
 80022cc:	fb03 f202 	mul.w	r2, r3, r2
 80022d0:	7b7b      	ldrb	r3, [r7, #13]
 80022d2:	4413      	add	r3, r2
 80022d4:	4907      	ldr	r1, [pc, #28]	; (80022f4 <lcdVLine+0xe8>)
 80022d6:	7bba      	ldrb	r2, [r7, #14]
 80022d8:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	3301      	adds	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d9ac      	bls.n	8002242 <lcdVLine+0x36>
	}
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc90      	pop	{r4, r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000694 	.word	0x20000694

080022f8 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 80022f8:	b490      	push	{r4, r7}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4604      	mov	r4, r0
 8002300:	4608      	mov	r0, r1
 8002302:	4611      	mov	r1, r2
 8002304:	461a      	mov	r2, r3
 8002306:	4623      	mov	r3, r4
 8002308:	80fb      	strh	r3, [r7, #6]
 800230a:	4603      	mov	r3, r0
 800230c:	80bb      	strh	r3, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	70fb      	strb	r3, [r7, #3]
 8002312:	4613      	mov	r3, r2
 8002314:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 8002316:	23ff      	movs	r3, #255	; 0xff
 8002318:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 800231a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800231e:	2b14      	cmp	r3, #20
 8002320:	f200 8208 	bhi.w	8002734 <lcdHLine2+0x43c>
 8002324:	a201      	add	r2, pc, #4	; (adr r2, 800232c <lcdHLine2+0x34>)
 8002326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232a:	bf00      	nop
 800232c:	08002381 	.word	0x08002381
 8002330:	08002387 	.word	0x08002387
 8002334:	0800238d 	.word	0x0800238d
 8002338:	08002393 	.word	0x08002393
 800233c:	080023ab 	.word	0x080023ab
 8002340:	080023c3 	.word	0x080023c3
 8002344:	080023db 	.word	0x080023db
 8002348:	08002425 	.word	0x08002425
 800234c:	08002469 	.word	0x08002469
 8002350:	080024ad 	.word	0x080024ad
 8002354:	080024eb 	.word	0x080024eb
 8002358:	08002511 	.word	0x08002511
 800235c:	0800253b 	.word	0x0800253b
 8002360:	08002571 	.word	0x08002571
 8002364:	08002589 	.word	0x08002589
 8002368:	080025af 	.word	0x080025af
 800236c:	080025e5 	.word	0x080025e5
 8002370:	0800261b 	.word	0x0800261b
 8002374:	0800265d 	.word	0x0800265d
 8002378:	080026b7 	.word	0x080026b7
 800237c:	080026f3 	.word	0x080026f3
		case 0:	// clear
			pattern = 0x00;
 8002380:	2300      	movs	r3, #0
 8002382:	75fb      	strb	r3, [r7, #23]
			break;
 8002384:	e1ea      	b.n	800275c <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 8002386:	23ff      	movs	r3, #255	; 0xff
 8002388:	75fb      	strb	r3, [r7, #23]
			break;
 800238a:	e1e7      	b.n	800275c <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 800238c:	2355      	movs	r3, #85	; 0x55
 800238e:	75fb      	strb	r3, [r7, #23]
			break;
 8002390:	e1e4      	b.n	800275c <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <lcdHLine2+0xac>
 800239e:	2300      	movs	r3, #0
 80023a0:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 80023a2:	e1db      	b.n	800275c <lcdHLine2+0x464>
			else pattern = 0xFF;
 80023a4:	23ff      	movs	r3, #255	; 0xff
 80023a6:	75fb      	strb	r3, [r7, #23]
			break;
 80023a8:	e1d8      	b.n	800275c <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <lcdHLine2+0xc4>
 80023b6:	23aa      	movs	r3, #170	; 0xaa
 80023b8:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 80023ba:	e1cf      	b.n	800275c <lcdHLine2+0x464>
			else pattern = 0x55;
 80023bc:	2355      	movs	r3, #85	; 0x55
 80023be:	75fb      	strb	r3, [r7, #23]
			break;
 80023c0:	e1cc      	b.n	800275c <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <lcdHLine2+0xdc>
 80023ce:	2388      	movs	r3, #136	; 0x88
 80023d0:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 80023d2:	e1c3      	b.n	800275c <lcdHLine2+0x464>
			else pattern = 0b00100010;
 80023d4:	2322      	movs	r3, #34	; 0x22
 80023d6:	75fb      	strb	r3, [r7, #23]
			break;
 80023d8:	e1c0      	b.n	800275c <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <lcdHLine2+0xf4>
 80023e6:	2388      	movs	r3, #136	; 0x88
 80023e8:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80023ea:	e1a6      	b.n	800273a <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d102      	bne.n	80023fe <lcdHLine2+0x106>
 80023f8:	2344      	movs	r3, #68	; 0x44
 80023fa:	75fb      	strb	r3, [r7, #23]
			break;
 80023fc:	e19d      	b.n	800273a <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d102      	bne.n	8002410 <lcdHLine2+0x118>
 800240a:	2322      	movs	r3, #34	; 0x22
 800240c:	75fb      	strb	r3, [r7, #23]
			break;
 800240e:	e194      	b.n	800273a <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b03      	cmp	r3, #3
 800241a:	f040 818e 	bne.w	800273a <lcdHLine2+0x442>
 800241e:	2311      	movs	r3, #17
 8002420:	75fb      	strb	r3, [r7, #23]
			break;
 8002422:	e18a      	b.n	800273a <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <lcdHLine2+0x144>
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d102      	bne.n	8002442 <lcdHLine2+0x14a>
 800243c:	23aa      	movs	r3, #170	; 0xaa
 800243e:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8002440:	e17d      	b.n	800273e <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d102      	bne.n	8002454 <lcdHLine2+0x15c>
 800244e:	2322      	movs	r3, #34	; 0x22
 8002450:	75fb      	strb	r3, [r7, #23]
			break;
 8002452:	e174      	b.n	800273e <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b03      	cmp	r3, #3
 800245e:	f040 816e 	bne.w	800273e <lcdHLine2+0x446>
 8002462:	2388      	movs	r3, #136	; 0x88
 8002464:	75fb      	strb	r3, [r7, #23]
			break;
 8002466:	e16a      	b.n	800273e <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d005      	beq.n	8002480 <lcdHLine2+0x188>
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b03      	cmp	r3, #3
 800247e:	d102      	bne.n	8002486 <lcdHLine2+0x18e>
 8002480:	2355      	movs	r3, #85	; 0x55
 8002482:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 8002484:	e15d      	b.n	8002742 <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <lcdHLine2+0x1a0>
 8002492:	2388      	movs	r3, #136	; 0x88
 8002494:	75fb      	strb	r3, [r7, #23]
			break;
 8002496:	e154      	b.n	8002742 <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	f040 814e 	bne.w	8002742 <lcdHLine2+0x44a>
 80024a6:	2322      	movs	r3, #34	; 0x22
 80024a8:	75fb      	strb	r3, [r7, #23]
			break;
 80024aa:	e14a      	b.n	8002742 <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <lcdHLine2+0x1cc>
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d102      	bne.n	80024ca <lcdHLine2+0x1d2>
 80024c4:	23cc      	movs	r3, #204	; 0xcc
 80024c6:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 80024c8:	e13d      	b.n	8002746 <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d006      	beq.n	80024e4 <lcdHLine2+0x1ec>
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b03      	cmp	r3, #3
 80024e0:	f040 8131 	bne.w	8002746 <lcdHLine2+0x44e>
 80024e4:	2333      	movs	r3, #51	; 0x33
 80024e6:	75fb      	strb	r3, [r7, #23]
			break;
 80024e8:	e12d      	b.n	8002746 <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <lcdHLine2+0x204>
 80024f6:	2355      	movs	r3, #85	; 0x55
 80024f8:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 80024fa:	e126      	b.n	800274a <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8120 	beq.w	800274a <lcdHLine2+0x452>
 800250a:	23ff      	movs	r3, #255	; 0xff
 800250c:	75fb      	strb	r3, [r7, #23]
			break;
 800250e:	e11c      	b.n	800274a <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <lcdHLine2+0x22a>
 800251c:	23cc      	movs	r3, #204	; 0xcc
 800251e:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8002520:	e11c      	b.n	800275c <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b01      	cmp	r3, #1
 800252c:	d102      	bne.n	8002534 <lcdHLine2+0x23c>
 800252e:	2344      	movs	r3, #68	; 0x44
 8002530:	75fb      	strb	r3, [r7, #23]
			break;
 8002532:	e113      	b.n	800275c <lcdHLine2+0x464>
			else pattern = 0x00;
 8002534:	2300      	movs	r3, #0
 8002536:	75fb      	strb	r3, [r7, #23]
			break;
 8002538:	e110      	b.n	800275c <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <lcdHLine2+0x254>
 8002546:	23ee      	movs	r3, #238	; 0xee
 8002548:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 800254a:	e107      	b.n	800275c <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d005      	beq.n	8002564 <lcdHLine2+0x26c>
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d102      	bne.n	800256a <lcdHLine2+0x272>
 8002564:	2322      	movs	r3, #34	; 0x22
 8002566:	75fb      	strb	r3, [r7, #23]
			break;
 8002568:	e0f8      	b.n	800275c <lcdHLine2+0x464>
			else pattern = 0x00;
 800256a:	2300      	movs	r3, #0
 800256c:	75fb      	strb	r3, [r7, #23]
			break;
 800256e:	e0f5      	b.n	800275c <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <lcdHLine2+0x28a>
 800257c:	23ff      	movs	r3, #255	; 0xff
 800257e:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8002580:	e0ec      	b.n	800275c <lcdHLine2+0x464>
			else pattern = 0b10001000;
 8002582:	2388      	movs	r3, #136	; 0x88
 8002584:	75fb      	strb	r3, [r7, #23]
			break;
 8002586:	e0e9      	b.n	800275c <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <lcdHLine2+0x2a2>
 8002594:	23aa      	movs	r3, #170	; 0xaa
 8002596:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 8002598:	e0d9      	b.n	800274e <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80d3 	beq.w	800274e <lcdHLine2+0x456>
 80025a8:	2300      	movs	r3, #0
 80025aa:	75fb      	strb	r3, [r7, #23]
			break;
 80025ac:	e0cf      	b.n	800274e <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <lcdHLine2+0x2ce>
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d102      	bne.n	80025cc <lcdHLine2+0x2d4>
 80025c6:	23aa      	movs	r3, #170	; 0xaa
 80025c8:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 80025ca:	e0c7      	b.n	800275c <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d102      	bne.n	80025de <lcdHLine2+0x2e6>
 80025d8:	2344      	movs	r3, #68	; 0x44
 80025da:	75fb      	strb	r3, [r7, #23]
			break;
 80025dc:	e0be      	b.n	800275c <lcdHLine2+0x464>
			else pattern = 0x00;
 80025de:	2300      	movs	r3, #0
 80025e0:	75fb      	strb	r3, [r7, #23]
			break;
 80025e2:	e0bb      	b.n	800275c <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <lcdHLine2+0x304>
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d102      	bne.n	8002602 <lcdHLine2+0x30a>
 80025fc:	23ee      	movs	r3, #238	; 0xee
 80025fe:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 8002600:	e0ac      	b.n	800275c <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d102      	bne.n	8002614 <lcdHLine2+0x31c>
 800260e:	23aa      	movs	r3, #170	; 0xaa
 8002610:	75fb      	strb	r3, [r7, #23]
			break;
 8002612:	e0a3      	b.n	800275c <lcdHLine2+0x464>
			else pattern = 0x00;
 8002614:	2300      	movs	r3, #0
 8002616:	75fb      	strb	r3, [r7, #23]
			break;
 8002618:	e0a0      	b.n	800275c <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <lcdHLine2+0x33a>
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d102      	bne.n	8002638 <lcdHLine2+0x340>
 8002632:	2344      	movs	r3, #68	; 0x44
 8002634:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 8002636:	e08c      	b.n	8002752 <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d102      	bne.n	800264a <lcdHLine2+0x352>
 8002644:	23aa      	movs	r3, #170	; 0xaa
 8002646:	75fb      	strb	r3, [r7, #23]
			break;
 8002648:	e083      	b.n	8002752 <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b03      	cmp	r3, #3
 8002654:	d17d      	bne.n	8002752 <lcdHLine2+0x45a>
 8002656:	2311      	movs	r3, #17
 8002658:	75fb      	strb	r3, [r7, #23]
			break;
 800265a:	e07a      	b.n	8002752 <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	4baf      	ldr	r3, [pc, #700]	; (800291c <lcdHLine2+0x624>)
 8002660:	fba3 1302 	umull	r1, r3, r3, r2
 8002664:	0859      	lsrs	r1, r3, #1
 8002666:	460b      	mov	r3, r1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	440b      	add	r3, r1
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <lcdHLine2+0x382>
 8002674:	2355      	movs	r3, #85	; 0x55
 8002676:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 8002678:	e06d      	b.n	8002756 <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	4ba7      	ldr	r3, [pc, #668]	; (800291c <lcdHLine2+0x624>)
 800267e:	fba3 1302 	umull	r1, r3, r3, r2
 8002682:	0859      	lsrs	r1, r3, #1
 8002684:	460b      	mov	r3, r1
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	440b      	add	r3, r1
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d102      	bne.n	8002698 <lcdHLine2+0x3a0>
 8002692:	23aa      	movs	r3, #170	; 0xaa
 8002694:	75fb      	strb	r3, [r7, #23]
			break;
 8002696:	e05e      	b.n	8002756 <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	4ba0      	ldr	r3, [pc, #640]	; (800291c <lcdHLine2+0x624>)
 800269c:	fba3 1302 	umull	r1, r3, r3, r2
 80026a0:	0859      	lsrs	r1, r3, #1
 80026a2:	460b      	mov	r3, r1
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	440b      	add	r3, r1
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d152      	bne.n	8002756 <lcdHLine2+0x45e>
 80026b0:	2300      	movs	r3, #0
 80026b2:	75fb      	strb	r3, [r7, #23]
			break;
 80026b4:	e04f      	b.n	8002756 <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <lcdHLine2+0x3d0>
 80026c2:	2322      	movs	r3, #34	; 0x22
 80026c4:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 80026c6:	e049      	b.n	800275c <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d102      	bne.n	80026da <lcdHLine2+0x3e2>
 80026d4:	2355      	movs	r3, #85	; 0x55
 80026d6:	75fb      	strb	r3, [r7, #23]
			break;
 80026d8:	e040      	b.n	800275c <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d102      	bne.n	80026ec <lcdHLine2+0x3f4>
 80026e6:	2388      	movs	r3, #136	; 0x88
 80026e8:	75fb      	strb	r3, [r7, #23]
			break;
 80026ea:	e037      	b.n	800275c <lcdHLine2+0x464>
			else pattern = 0x00;
 80026ec:	2300      	movs	r3, #0
 80026ee:	75fb      	strb	r3, [r7, #23]
			break;
 80026f0:	e034      	b.n	800275c <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d005      	beq.n	800270a <lcdHLine2+0x412>
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b03      	cmp	r3, #3
 8002708:	d102      	bne.n	8002710 <lcdHLine2+0x418>
 800270a:	2388      	movs	r3, #136	; 0x88
 800270c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 800270e:	e024      	b.n	800275a <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <lcdHLine2+0x42a>
 800271c:	2377      	movs	r3, #119	; 0x77
 800271e:	75fb      	strb	r3, [r7, #23]
			break;
 8002720:	e01b      	b.n	800275a <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d115      	bne.n	800275a <lcdHLine2+0x462>
 800272e:	23aa      	movs	r3, #170	; 0xaa
 8002730:	75fb      	strb	r3, [r7, #23]
			break;
 8002732:	e012      	b.n	800275a <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 8002734:	2300      	movs	r3, #0
 8002736:	75fb      	strb	r3, [r7, #23]
			break;
 8002738:	e010      	b.n	800275c <lcdHLine2+0x464>
			break;
 800273a:	bf00      	nop
 800273c:	e00e      	b.n	800275c <lcdHLine2+0x464>
			break;
 800273e:	bf00      	nop
 8002740:	e00c      	b.n	800275c <lcdHLine2+0x464>
			break;
 8002742:	bf00      	nop
 8002744:	e00a      	b.n	800275c <lcdHLine2+0x464>
			break;
 8002746:	bf00      	nop
 8002748:	e008      	b.n	800275c <lcdHLine2+0x464>
			break;
 800274a:	bf00      	nop
 800274c:	e006      	b.n	800275c <lcdHLine2+0x464>
			break;
 800274e:	bf00      	nop
 8002750:	e004      	b.n	800275c <lcdHLine2+0x464>
			break;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <lcdHLine2+0x464>
			break;
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <lcdHLine2+0x464>
			break;
 800275a:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	08db      	lsrs	r3, r3, #3
 8002760:	b29b      	uxth	r3, r3
 8002762:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 800276e:	88bb      	ldrh	r3, [r7, #4]
 8002770:	08db      	lsrs	r3, r3, #3
 8002772:	b29b      	uxth	r3, r3
 8002774:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 8002776:	88bb      	ldrh	r3, [r7, #4]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	2232      	movs	r2, #50	; 0x32
 8002784:	fb03 f202 	mul.w	r2, r3, r2
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	4413      	add	r3, r2
 800278c:	4a64      	ldr	r2, [pc, #400]	; (8002920 <lcdHLine2+0x628>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	2232      	movs	r2, #50	; 0x32
 8002796:	fb03 f202 	mul.w	r2, r3, r2
 800279a:	7b7b      	ldrb	r3, [r7, #13]
 800279c:	4413      	add	r3, r2
 800279e:	4a60      	ldr	r2, [pc, #384]	; (8002920 <lcdHLine2+0x628>)
 80027a0:	5cd3      	ldrb	r3, [r2, r3]
 80027a2:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 80027a4:	23ff      	movs	r3, #255	; 0xff
 80027a6:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
 80027aa:	f1c3 0208 	rsb	r2, r3, #8
 80027ae:	88b9      	ldrh	r1, [r7, #4]
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	1acb      	subs	r3, r1, r3
 80027b4:	3301      	adds	r3, #1
 80027b6:	429a      	cmp	r2, r3
 80027b8:	dd11      	ble.n	80027de <lcdHLine2+0x4e6>
 80027ba:	88ba      	ldrh	r2, [r7, #4]
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	22ff      	movs	r2, #255	; 0xff
 80027c4:	fa42 f303 	asr.w	r3, r2, r3
 80027c8:	43da      	mvns	r2, r3
 80027ca:	7bbb      	ldrb	r3, [r7, #14]
 80027cc:	fa42 f303 	asr.w	r3, r2, r3
 80027d0:	b25a      	sxtb	r2, r3
 80027d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027d6:	4013      	ands	r3, r2
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	753b      	strb	r3, [r7, #20]
 80027dc:	e001      	b.n	80027e2 <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	753b      	strb	r3, [r7, #20]
		switch(mode){
 80027e2:	78bb      	ldrb	r3, [r7, #2]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	f200 8130 	bhi.w	8002a4a <lcdHLine2+0x752>
 80027ea:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <lcdHLine2+0x4f8>)
 80027ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f0:	08002801 	.word	0x08002801
 80027f4:	08002885 	.word	0x08002885
 80027f8:	08002925 	.word	0x08002925
 80027fc:	080029a9 	.word	0x080029a9
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 8002800:	7bbb      	ldrb	r3, [r7, #14]
 8002802:	22ff      	movs	r2, #255	; 0xff
 8002804:	fa42 f303 	asr.w	r3, r2, r3
 8002808:	b25a      	sxtb	r2, r3
 800280a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800280e:	4013      	ands	r3, r2
 8002810:	b25a      	sxtb	r2, r3
 8002812:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002816:	4313      	orrs	r3, r2
 8002818:	b25b      	sxtb	r3, r3
 800281a:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 800281c:	7b3b      	ldrb	r3, [r7, #12]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	22ff      	movs	r2, #255	; 0xff
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	b25a      	sxtb	r2, r3
 800282a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800282e:	4013      	ands	r3, r2
 8002830:	b25a      	sxtb	r2, r3
 8002832:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002836:	4313      	orrs	r3, r2
 8002838:	b25b      	sxtb	r3, r3
 800283a:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800283c:	2301      	movs	r3, #1
 800283e:	74fb      	strb	r3, [r7, #19]
 8002840:	e019      	b.n	8002876 <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	2232      	movs	r2, #50	; 0x32
 8002846:	fb03 f202 	mul.w	r2, r3, r2
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	441a      	add	r2, r3
 800284e:	7cfb      	ldrb	r3, [r7, #19]
 8002850:	4413      	add	r3, r2
 8002852:	4a33      	ldr	r2, [pc, #204]	; (8002920 <lcdHLine2+0x628>)
 8002854:	5cd1      	ldrb	r1, [r2, r3]
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	2232      	movs	r2, #50	; 0x32
 800285a:	fb03 f202 	mul.w	r2, r3, r2
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	441a      	add	r2, r3
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	4413      	add	r3, r2
 8002866:	7dfa      	ldrb	r2, [r7, #23]
 8002868:	430a      	orrs	r2, r1
 800286a:	b2d1      	uxtb	r1, r2
 800286c:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <lcdHLine2+0x628>)
 800286e:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	3301      	adds	r3, #1
 8002874:	74fb      	strb	r3, [r7, #19]
 8002876:	7cfa      	ldrb	r2, [r7, #19]
 8002878:	7b79      	ldrb	r1, [r7, #13]
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	1acb      	subs	r3, r1, r3
 800287e:	429a      	cmp	r2, r3
 8002880:	dbdf      	blt.n	8002842 <lcdHLine2+0x54a>
			}
			break;
 8002882:	e0e2      	b.n	8002a4a <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	22ff      	movs	r2, #255	; 0xff
 8002888:	fa42 f303 	asr.w	r3, r2, r3
 800288c:	b25a      	sxtb	r2, r3
 800288e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002892:	4013      	ands	r3, r2
 8002894:	b25b      	sxtb	r3, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	b25a      	sxtb	r2, r3
 800289a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800289e:	4013      	ands	r3, r2
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 80028a4:	7b3b      	ldrb	r3, [r7, #12]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	22ff      	movs	r2, #255	; 0xff
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	b25a      	sxtb	r2, r3
 80028b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028b6:	4013      	ands	r3, r2
 80028b8:	b25b      	sxtb	r3, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	b25a      	sxtb	r2, r3
 80028be:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80028c2:	4013      	ands	r3, r2
 80028c4:	b25b      	sxtb	r3, r3
 80028c6:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80028c8:	2301      	movs	r3, #1
 80028ca:	74bb      	strb	r3, [r7, #18]
 80028cc:	e01e      	b.n	800290c <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	2232      	movs	r2, #50	; 0x32
 80028d2:	fb03 f202 	mul.w	r2, r3, r2
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	441a      	add	r2, r3
 80028da:	7cbb      	ldrb	r3, [r7, #18]
 80028dc:	4413      	add	r3, r2
 80028de:	4a10      	ldr	r2, [pc, #64]	; (8002920 <lcdHLine2+0x628>)
 80028e0:	5cd3      	ldrb	r3, [r2, r3]
 80028e2:	b25a      	sxtb	r2, r3
 80028e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	4013      	ands	r3, r2
 80028ee:	b259      	sxtb	r1, r3
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	2232      	movs	r2, #50	; 0x32
 80028f4:	fb03 f202 	mul.w	r2, r3, r2
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	441a      	add	r2, r3
 80028fc:	7cbb      	ldrb	r3, [r7, #18]
 80028fe:	4413      	add	r3, r2
 8002900:	b2c9      	uxtb	r1, r1
 8002902:	4a07      	ldr	r2, [pc, #28]	; (8002920 <lcdHLine2+0x628>)
 8002904:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002906:	7cbb      	ldrb	r3, [r7, #18]
 8002908:	3301      	adds	r3, #1
 800290a:	74bb      	strb	r3, [r7, #18]
 800290c:	7cba      	ldrb	r2, [r7, #18]
 800290e:	7b79      	ldrb	r1, [r7, #13]
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	1acb      	subs	r3, r1, r3
 8002914:	429a      	cmp	r2, r3
 8002916:	dbda      	blt.n	80028ce <lcdHLine2+0x5d6>
			}
			break;
 8002918:	e097      	b.n	8002a4a <lcdHLine2+0x752>
 800291a:	bf00      	nop
 800291c:	aaaaaaab 	.word	0xaaaaaaab
 8002920:	20000694 	.word	0x20000694
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 8002924:	7bbb      	ldrb	r3, [r7, #14]
 8002926:	22ff      	movs	r2, #255	; 0xff
 8002928:	fa42 f303 	asr.w	r3, r2, r3
 800292c:	b25a      	sxtb	r2, r3
 800292e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002932:	4013      	ands	r3, r2
 8002934:	b25a      	sxtb	r2, r3
 8002936:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800293a:	4053      	eors	r3, r2
 800293c:	b25b      	sxtb	r3, r3
 800293e:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8002940:	7b3b      	ldrb	r3, [r7, #12]
 8002942:	f1c3 0307 	rsb	r3, r3, #7
 8002946:	22ff      	movs	r2, #255	; 0xff
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	b25a      	sxtb	r2, r3
 800294e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002952:	4013      	ands	r3, r2
 8002954:	b25a      	sxtb	r2, r3
 8002956:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800295a:	4053      	eors	r3, r2
 800295c:	b25b      	sxtb	r3, r3
 800295e:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002960:	2301      	movs	r3, #1
 8002962:	747b      	strb	r3, [r7, #17]
 8002964:	e019      	b.n	800299a <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	2232      	movs	r2, #50	; 0x32
 800296a:	fb03 f202 	mul.w	r2, r3, r2
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	441a      	add	r2, r3
 8002972:	7c7b      	ldrb	r3, [r7, #17]
 8002974:	4413      	add	r3, r2
 8002976:	4a42      	ldr	r2, [pc, #264]	; (8002a80 <lcdHLine2+0x788>)
 8002978:	5cd1      	ldrb	r1, [r2, r3]
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	2232      	movs	r2, #50	; 0x32
 800297e:	fb03 f202 	mul.w	r2, r3, r2
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	441a      	add	r2, r3
 8002986:	7c7b      	ldrb	r3, [r7, #17]
 8002988:	4413      	add	r3, r2
 800298a:	7dfa      	ldrb	r2, [r7, #23]
 800298c:	404a      	eors	r2, r1
 800298e:	b2d1      	uxtb	r1, r2
 8002990:	4a3b      	ldr	r2, [pc, #236]	; (8002a80 <lcdHLine2+0x788>)
 8002992:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002994:	7c7b      	ldrb	r3, [r7, #17]
 8002996:	3301      	adds	r3, #1
 8002998:	747b      	strb	r3, [r7, #17]
 800299a:	7c7a      	ldrb	r2, [r7, #17]
 800299c:	7b79      	ldrb	r1, [r7, #13]
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	1acb      	subs	r3, r1, r3
 80029a2:	429a      	cmp	r2, r3
 80029a4:	dbdf      	blt.n	8002966 <lcdHLine2+0x66e>
			}
			break;
 80029a6:	e050      	b.n	8002a4a <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 80029a8:	7bbb      	ldrb	r3, [r7, #14]
 80029aa:	22ff      	movs	r2, #255	; 0xff
 80029ac:	fa42 f303 	asr.w	r3, r2, r3
 80029b0:	b25a      	sxtb	r2, r3
 80029b2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80029b6:	4013      	ands	r3, r2
 80029b8:	b25a      	sxtb	r2, r3
 80029ba:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80029be:	43db      	mvns	r3, r3
 80029c0:	b259      	sxtb	r1, r3
 80029c2:	7bbb      	ldrb	r3, [r7, #14]
 80029c4:	f1c3 0308 	rsb	r3, r3, #8
 80029c8:	20ff      	movs	r0, #255	; 0xff
 80029ca:	fa00 f303 	lsl.w	r3, r0, r3
 80029ce:	b25b      	sxtb	r3, r3
 80029d0:	400b      	ands	r3, r1
 80029d2:	b25b      	sxtb	r3, r3
 80029d4:	4313      	orrs	r3, r2
 80029d6:	b25b      	sxtb	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 80029de:	7b3b      	ldrb	r3, [r7, #12]
 80029e0:	f1c3 0307 	rsb	r3, r3, #7
 80029e4:	22ff      	movs	r2, #255	; 0xff
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	b25a      	sxtb	r2, r3
 80029ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029f0:	4013      	ands	r3, r2
 80029f2:	b25a      	sxtb	r2, r3
 80029f4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	b259      	sxtb	r1, r3
 80029fc:	7b3b      	ldrb	r3, [r7, #12]
 80029fe:	3301      	adds	r3, #1
 8002a00:	20ff      	movs	r0, #255	; 0xff
 8002a02:	fa40 f303 	asr.w	r3, r0, r3
 8002a06:	b25b      	sxtb	r3, r3
 8002a08:	400b      	ands	r3, r1
 8002a0a:	b25b      	sxtb	r3, r3
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002a16:	2301      	movs	r3, #1
 8002a18:	743b      	strb	r3, [r7, #16]
 8002a1a:	e00f      	b.n	8002a3c <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	2232      	movs	r2, #50	; 0x32
 8002a20:	fb03 f202 	mul.w	r2, r3, r2
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	441a      	add	r2, r3
 8002a28:	7c3b      	ldrb	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	7dfa      	ldrb	r2, [r7, #23]
 8002a2e:	43d2      	mvns	r2, r2
 8002a30:	b2d1      	uxtb	r1, r2
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <lcdHLine2+0x788>)
 8002a34:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002a36:	7c3b      	ldrb	r3, [r7, #16]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	743b      	strb	r3, [r7, #16]
 8002a3c:	7c3a      	ldrb	r2, [r7, #16]
 8002a3e:	7b79      	ldrb	r1, [r7, #13]
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	1acb      	subs	r3, r1, r3
 8002a44:	429a      	cmp	r2, r3
 8002a46:	dbe9      	blt.n	8002a1c <lcdHLine2+0x724>
			}
			break;
 8002a48:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	2232      	movs	r2, #50	; 0x32
 8002a4e:	fb03 f202 	mul.w	r2, r3, r2
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	4413      	add	r3, r2
 8002a56:	490a      	ldr	r1, [pc, #40]	; (8002a80 <lcdHLine2+0x788>)
 8002a58:	7dba      	ldrb	r2, [r7, #22]
 8002a5a:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8002a5c:	7b7a      	ldrb	r2, [r7, #13]
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d908      	bls.n	8002a76 <lcdHLine2+0x77e>
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	2232      	movs	r2, #50	; 0x32
 8002a68:	fb03 f202 	mul.w	r2, r3, r2
 8002a6c:	7b7b      	ldrb	r3, [r7, #13]
 8002a6e:	4413      	add	r3, r2
 8002a70:	4903      	ldr	r1, [pc, #12]	; (8002a80 <lcdHLine2+0x788>)
 8002a72:	7d7a      	ldrb	r2, [r7, #21]
 8002a74:	54ca      	strb	r2, [r1, r3]
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc90      	pop	{r4, r7}
 8002a7e:	4770      	bx	lr
 8002a80:	20000694 	.word	0x20000694

08002a84 <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 8002a84:	b490      	push	{r4, r7}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4623      	mov	r3, r4
 8002a94:	80fb      	strh	r3, [r7, #6]
 8002a96:	4603      	mov	r3, r0
 8002a98:	80bb      	strh	r3, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	70fb      	strb	r3, [r7, #3]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	08db      	lsrs	r3, r3, #3
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 8002ab4:	88bb      	ldrh	r3, [r7, #4]
 8002ab6:	08db      	lsrs	r3, r3, #3
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 8002abc:	88bb      	ldrh	r3, [r7, #4]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	2232      	movs	r2, #50	; 0x32
 8002aca:	fb03 f202 	mul.w	r2, r3, r2
 8002ace:	7c7b      	ldrb	r3, [r7, #17]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4a71      	ldr	r2, [pc, #452]	; (8002c98 <lcdHLine+0x214>)
 8002ad4:	5cd3      	ldrb	r3, [r2, r3]
 8002ad6:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	2232      	movs	r2, #50	; 0x32
 8002adc:	fb03 f202 	mul.w	r2, r3, r2
 8002ae0:	7c7b      	ldrb	r3, [r7, #17]
 8002ae2:	441a      	add	r2, r3
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4a6b      	ldr	r2, [pc, #428]	; (8002c98 <lcdHLine+0x214>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 8002aee:	23ff      	movs	r3, #255	; 0xff
 8002af0:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 8002af2:	7c3b      	ldrb	r3, [r7, #16]
 8002af4:	f1c3 0208 	rsb	r2, r3, #8
 8002af8:	88b9      	ldrh	r1, [r7, #4]
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	1acb      	subs	r3, r1, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	429a      	cmp	r2, r3
 8002b02:	dd09      	ble.n	8002b18 <lcdHLine+0x94>
 8002b04:	88ba      	ldrh	r2, [r7, #4]
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	22ff      	movs	r2, #255	; 0xff
 8002b0e:	fa42 f303 	asr.w	r3, r2, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	757b      	strb	r3, [r7, #21]
	switch(mode){
 8002b18:	78bb      	ldrb	r3, [r7, #2]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d067      	beq.n	8002bee <lcdHLine+0x16a>
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	f300 809e 	bgt.w	8002c60 <lcdHLine+0x1dc>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <lcdHLine+0xaa>
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d02e      	beq.n	8002b8a <lcdHLine+0x106>
 8002b2c:	e098      	b.n	8002c60 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 8002b2e:	7d7a      	ldrb	r2, [r7, #21]
 8002b30:	7c3b      	ldrb	r3, [r7, #16]
 8002b32:	fa42 f303 	asr.w	r3, r2, r3
 8002b36:	b25a      	sxtb	r2, r3
 8002b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	b25b      	sxtb	r3, r3
 8002b40:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8002b42:	7bbb      	ldrb	r3, [r7, #14]
 8002b44:	f1c3 0307 	rsb	r3, r3, #7
 8002b48:	22ff      	movs	r2, #255	; 0xff
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	b25a      	sxtb	r2, r3
 8002b50:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	753b      	strb	r3, [r7, #20]
 8002b5e:	e00d      	b.n	8002b7c <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	2232      	movs	r2, #50	; 0x32
 8002b64:	fb03 f202 	mul.w	r2, r3, r2
 8002b68:	7c7b      	ldrb	r3, [r7, #17]
 8002b6a:	441a      	add	r2, r3
 8002b6c:	7d3b      	ldrb	r3, [r7, #20]
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a49      	ldr	r2, [pc, #292]	; (8002c98 <lcdHLine+0x214>)
 8002b72:	21ff      	movs	r1, #255	; 0xff
 8002b74:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002b76:	7d3b      	ldrb	r3, [r7, #20]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	753b      	strb	r3, [r7, #20]
 8002b7c:	7d3a      	ldrb	r2, [r7, #20]
 8002b7e:	7bf9      	ldrb	r1, [r7, #15]
 8002b80:	7c7b      	ldrb	r3, [r7, #17]
 8002b82:	1acb      	subs	r3, r1, r3
 8002b84:	429a      	cmp	r2, r3
 8002b86:	dbeb      	blt.n	8002b60 <lcdHLine+0xdc>
		}
		break;
 8002b88:	e06a      	b.n	8002c60 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 8002b8a:	7d7a      	ldrb	r2, [r7, #21]
 8002b8c:	7c3b      	ldrb	r3, [r7, #16]
 8002b8e:	fa42 f303 	asr.w	r3, r2, r3
 8002b92:	b25b      	sxtb	r3, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	b25a      	sxtb	r2, r3
 8002b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 8002ba2:	7bbb      	ldrb	r3, [r7, #14]
 8002ba4:	f1c3 0307 	rsb	r3, r3, #7
 8002ba8:	22ff      	movs	r2, #255	; 0xff
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	b25b      	sxtb	r3, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	b25a      	sxtb	r2, r3
 8002bb4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b25b      	sxtb	r3, r3
 8002bbc:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	74fb      	strb	r3, [r7, #19]
 8002bc2:	e00d      	b.n	8002be0 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	2232      	movs	r2, #50	; 0x32
 8002bc8:	fb03 f202 	mul.w	r2, r3, r2
 8002bcc:	7c7b      	ldrb	r3, [r7, #17]
 8002bce:	441a      	add	r2, r3
 8002bd0:	7cfb      	ldrb	r3, [r7, #19]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4a30      	ldr	r2, [pc, #192]	; (8002c98 <lcdHLine+0x214>)
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	74fb      	strb	r3, [r7, #19]
 8002be0:	7cfa      	ldrb	r2, [r7, #19]
 8002be2:	7bf9      	ldrb	r1, [r7, #15]
 8002be4:	7c7b      	ldrb	r3, [r7, #17]
 8002be6:	1acb      	subs	r3, r1, r3
 8002be8:	429a      	cmp	r2, r3
 8002bea:	dbeb      	blt.n	8002bc4 <lcdHLine+0x140>
		}
		break;
 8002bec:	e038      	b.n	8002c60 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 8002bee:	7d7a      	ldrb	r2, [r7, #21]
 8002bf0:	7c3b      	ldrb	r3, [r7, #16]
 8002bf2:	fa42 f303 	asr.w	r3, r2, r3
 8002bf6:	b25a      	sxtb	r2, r3
 8002bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bfc:	4053      	eors	r3, r2
 8002bfe:	b25b      	sxtb	r3, r3
 8002c00:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 8002c02:	7bbb      	ldrb	r3, [r7, #14]
 8002c04:	f1c3 0307 	rsb	r3, r3, #7
 8002c08:	22ff      	movs	r2, #255	; 0xff
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	b25a      	sxtb	r2, r3
 8002c10:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c14:	4053      	eors	r3, r2
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	74bb      	strb	r3, [r7, #18]
 8002c1e:	e018      	b.n	8002c52 <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	2232      	movs	r2, #50	; 0x32
 8002c24:	fb03 f202 	mul.w	r2, r3, r2
 8002c28:	7c7b      	ldrb	r3, [r7, #17]
 8002c2a:	441a      	add	r2, r3
 8002c2c:	7cbb      	ldrb	r3, [r7, #18]
 8002c2e:	4413      	add	r3, r2
 8002c30:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <lcdHLine+0x214>)
 8002c32:	5cd2      	ldrb	r2, [r2, r3]
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	2132      	movs	r1, #50	; 0x32
 8002c38:	fb03 f101 	mul.w	r1, r3, r1
 8002c3c:	7c7b      	ldrb	r3, [r7, #17]
 8002c3e:	4419      	add	r1, r3
 8002c40:	7cbb      	ldrb	r3, [r7, #18]
 8002c42:	440b      	add	r3, r1
 8002c44:	43d2      	mvns	r2, r2
 8002c46:	b2d1      	uxtb	r1, r2
 8002c48:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <lcdHLine+0x214>)
 8002c4a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8002c4c:	7cbb      	ldrb	r3, [r7, #18]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	74bb      	strb	r3, [r7, #18]
 8002c52:	7cba      	ldrb	r2, [r7, #18]
 8002c54:	7bf9      	ldrb	r1, [r7, #15]
 8002c56:	7c7b      	ldrb	r3, [r7, #17]
 8002c58:	1acb      	subs	r3, r1, r3
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	dbe0      	blt.n	8002c20 <lcdHLine+0x19c>
		}
		break;
 8002c5e:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	2232      	movs	r2, #50	; 0x32
 8002c64:	fb03 f202 	mul.w	r2, r3, r2
 8002c68:	7c7b      	ldrb	r3, [r7, #17]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	490a      	ldr	r1, [pc, #40]	; (8002c98 <lcdHLine+0x214>)
 8002c6e:	7dfa      	ldrb	r2, [r7, #23]
 8002c70:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	7c7b      	ldrb	r3, [r7, #17]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d908      	bls.n	8002c8c <lcdHLine+0x208>
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	2232      	movs	r2, #50	; 0x32
 8002c7e:	fb03 f202 	mul.w	r2, r3, r2
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	4413      	add	r3, r2
 8002c86:	4904      	ldr	r1, [pc, #16]	; (8002c98 <lcdHLine+0x214>)
 8002c88:	7dba      	ldrb	r2, [r7, #22]
 8002c8a:	54ca      	strb	r2, [r1, r3]
}
 8002c8c:	bf00      	nop
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc90      	pop	{r4, r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000694 	.word	0x20000694

08002c9c <lcdRefresh>:

void lcdRefresh(void){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <lcdRefresh+0x7c>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d032      	beq.n	8002d10 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8002caa:	2201      	movs	r2, #1
 8002cac:	2140      	movs	r1, #64	; 0x40
 8002cae:	481b      	ldr	r0, [pc, #108]	; (8002d1c <lcdRefresh+0x80>)
 8002cb0:	f004 f9e2 	bl	8007078 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	71fb      	strb	r3, [r7, #7]
 8002cb8:	e01c      	b.n	8002cf4 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f93d 	bl	8001f3c <reverse_uint8>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <lcdRefresh+0x84>)
 8002cc8:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8002cca:	2396      	movs	r3, #150	; 0x96
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4914      	ldr	r1, [pc, #80]	; (8002d20 <lcdRefresh+0x84>)
 8002cd0:	4814      	ldr	r0, [pc, #80]	; (8002d24 <lcdRefresh+0x88>)
 8002cd2:	f006 fc42 	bl	800955a <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	2232      	movs	r2, #50	; 0x32
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <lcdRefresh+0x8c>)
 8002ce2:	1899      	adds	r1, r3, r2
 8002ce4:	2396      	movs	r3, #150	; 0x96
 8002ce6:	2232      	movs	r2, #50	; 0x32
 8002ce8:	480e      	ldr	r0, [pc, #56]	; (8002d24 <lcdRefresh+0x88>)
 8002cea:	f006 fc36 	bl	800955a <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	71fb      	strb	r3, [r7, #7]
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	2bf1      	cmp	r3, #241	; 0xf1
 8002cf8:	d9df      	bls.n	8002cba <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8002cfa:	2396      	movs	r3, #150	; 0x96
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	490b      	ldr	r1, [pc, #44]	; (8002d2c <lcdRefresh+0x90>)
 8002d00:	4808      	ldr	r0, [pc, #32]	; (8002d24 <lcdRefresh+0x88>)
 8002d02:	f006 fc2a 	bl	800955a <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8002d06:	2200      	movs	r2, #0
 8002d08:	2140      	movs	r1, #64	; 0x40
 8002d0a:	4804      	ldr	r0, [pc, #16]	; (8002d1c <lcdRefresh+0x80>)
 8002d0c:	f004 f9b4 	bl	8007078 <HAL_GPIO_WritePin>
	}
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000144 	.word	0x20000144
 8002d1c:	40020000 	.word	0x40020000
 8002d20:	20000148 	.word	0x20000148
 8002d24:	200035b8 	.word	0x200035b8
 8002d28:	20000694 	.word	0x20000694
 8002d2c:	20000690 	.word	0x20000690

08002d30 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4604      	mov	r4, r0
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4623      	mov	r3, r4
 8002d40:	80fb      	strh	r3, [r7, #6]
 8002d42:	4603      	mov	r3, r0
 8002d44:	80bb      	strh	r3, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	70fb      	strb	r3, [r7, #3]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	e009      	b.n	8002d68 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8002d54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	88b9      	ldrh	r1, [r7, #4]
 8002d5c:	88f8      	ldrh	r0, [r7, #6]
 8002d5e:	f7ff fe91 	bl	8002a84 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	3301      	adds	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	78bb      	ldrb	r3, [r7, #2]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d9f1      	bls.n	8002d54 <lcdRect+0x24>
	}
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd90      	pop	{r4, r7, pc}

08002d7a <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8002d7a:	b590      	push	{r4, r7, lr}
 8002d7c:	b087      	sub	sp, #28
 8002d7e:	af02      	add	r7, sp, #8
 8002d80:	4604      	mov	r4, r0
 8002d82:	4608      	mov	r0, r1
 8002d84:	4611      	mov	r1, r2
 8002d86:	461a      	mov	r2, r3
 8002d88:	4623      	mov	r3, r4
 8002d8a:	80fb      	strh	r3, [r7, #6]
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	80bb      	strh	r3, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
 8002d94:	4613      	mov	r3, r2
 8002d96:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8002d98:	88fa      	ldrh	r2, [r7, #6]
 8002d9a:	88bb      	ldrh	r3, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d046      	beq.n	8002e2e <lcdRect2+0xb4>
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	78bb      	ldrb	r3, [r7, #2]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d042      	beq.n	8002e2e <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e00d      	b.n	8002dca <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8002dae:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	88b9      	ldrh	r1, [r7, #4]
 8002db6:	88f8      	ldrh	r0, [r7, #6]
 8002db8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	f7ff fa9a 	bl	80022f8 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	78bb      	ldrb	r3, [r7, #2]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d9ed      	bls.n	8002dae <lcdRect2+0x34>
		}
		if(outline){
 8002dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d029      	beq.n	8002e2e <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8002dda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	88b9      	ldrh	r1, [r7, #4]
 8002de2:	88f8      	ldrh	r0, [r7, #6]
 8002de4:	2401      	movs	r4, #1
 8002de6:	9400      	str	r4, [sp, #0]
 8002de8:	f7ff fa86 	bl	80022f8 <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8002dec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002df0:	78ba      	ldrb	r2, [r7, #2]
 8002df2:	88b9      	ldrh	r1, [r7, #4]
 8002df4:	88f8      	ldrh	r0, [r7, #6]
 8002df6:	2401      	movs	r4, #1
 8002df8:	9400      	str	r4, [sp, #0]
 8002dfa:	f7ff fa7d 	bl	80022f8 <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	b299      	uxth	r1, r3
 8002e06:	78bb      	ldrb	r3, [r7, #2]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e10:	88f8      	ldrh	r0, [r7, #6]
 8002e12:	f7ff f9fb 	bl	800220c <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	b299      	uxth	r1, r3
 8002e1e:	78bb      	ldrb	r3, [r7, #2]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e28:	88b8      	ldrh	r0, [r7, #4]
 8002e2a:	f7ff f9ef 	bl	800220c <lcdVLine>
		}
	}
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd90      	pop	{r4, r7, pc}
	...

08002e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e40:	f003 fd1c 	bl	800687c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e44:	f000 f87e 	bl	8002f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e48:	f7fe fe04 	bl	8001a54 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002e4c:	f000 fcb8 	bl	80037c0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002e50:	f000 f982 	bl	8003158 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002e54:	f000 fb24 	bl	80034a0 <MX_TIM1_Init>
  MX_TIM10_Init();
 8002e58:	f000 fbc4 	bl	80035e4 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 8002e5c:	f000 fcda 	bl	8003814 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8002e60:	f7fe ffe4 	bl	8001e2c <MX_I2C1_Init>
  MX_TIM11_Init();
 8002e64:	f000 fbe2 	bl	800362c <MX_TIM11_Init>
  MX_RTC_Init();
 8002e68:	f000 f91c 	bl	80030a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart6, &znak, 1);

  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8002e6c:	482b      	ldr	r0, [pc, #172]	; (8002f1c <main+0xe4>)
 8002e6e:	f006 fd7b 	bl	8009968 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8002e72:	482a      	ldr	r0, [pc, #168]	; (8002f1c <main+0xe4>)
 8002e74:	f006 fdc8 	bl	8009a08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4828      	ldr	r0, [pc, #160]	; (8002f1c <main+0xe4>)
 8002e7c:	f006 fe8e 	bl	8009b9c <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
  HAL_TIM_Base_Start_IT(&htim10);
 8002e80:	4827      	ldr	r0, [pc, #156]	; (8002f20 <main+0xe8>)
 8002e82:	f006 fdc1 	bl	8009a08 <HAL_TIM_Base_Start_IT>

  gpsDevice gpsModule;
  gpsModule = initGps(&huart6);
 8002e86:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002e8a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002e8e:	4925      	ldr	r1, [pc, #148]	; (8002f24 <main+0xec>)
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe fecb 	bl	8001c2c <initGps>

//  bmp_t bmp180module;
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8002e96:	4824      	ldr	r0, [pc, #144]	; (8002f28 <main+0xf0>)
 8002e98:	f7fe f94a 	bl	8001130 <bmp_init>

  initButtons(btnsPtrs);
 8002e9c:	4823      	ldr	r0, [pc, #140]	; (8002f2c <main+0xf4>)
 8002e9e:	f7fe fc07 	bl	80016b0 <initButtons>

  initTimer();
 8002ea2:	f7fe fdb3 	bl	8001a0c <initTimer>
  setTimeout(1);
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	f7fe fdba 	bl	8001a20 <setTimeout>
  startClock();
 8002eac:	f7fe fdc8 	bl	8001a40 <startClock>

  init_ring_buffer(&baroRing, 399);
 8002eb0:	f240 118f 	movw	r1, #399	; 0x18f
 8002eb4:	481e      	ldr	r0, [pc, #120]	; (8002f30 <main+0xf8>)
 8002eb6:	f003 fb9d 	bl	80065f4 <init_ring_buffer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 8002eba:	f7ff f869 	bl	8001f90 <lcdClearBuffer>
  lcdRefresh();
 8002ebe:	f7ff feed 	bl	8002c9c <lcdRefresh>
  while (1)
  {
	  // functions executed along with the menu
		bmpData = getBmpData(&bmp180module);
 8002ec2:	4c1c      	ldr	r4, [pc, #112]	; (8002f34 <main+0xfc>)
 8002ec4:	463b      	mov	r3, r7
 8002ec6:	4918      	ldr	r1, [pc, #96]	; (8002f28 <main+0xf0>)
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fb99 	bl	8001600 <getBmpData>
 8002ece:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002ed2:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8002ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		// option to be moved into ring buffer lib - overwriting values
//		if(baroRing.num_entries>=baroRing.size)remove_ring_buffer(&baroRing);
//		add_ring_buffer(&baroRing, (int)bmpData.temperature);
		add_ovw_ring_buffer(&baroRing, (int)(10*bmpData.temperature));
 8002edc:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <main+0xfc>)
 8002ede:	edd3 7a00 	vldr	s15, [r3]
 8002ee2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eee:	ee17 1a90 	vmov	r1, s15
 8002ef2:	480f      	ldr	r0, [pc, #60]	; (8002f30 <main+0xf8>)
 8002ef4:	f003 fbb1 	bl	800665a <add_ovw_ring_buffer>
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	490f      	ldr	r1, [pc, #60]	; (8002f38 <main+0x100>)
 8002efc:	480f      	ldr	r0, [pc, #60]	; (8002f3c <main+0x104>)
 8002efe:	f006 f8b5 	bl	800906c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8002f02:	2200      	movs	r2, #0
 8002f04:	490e      	ldr	r1, [pc, #56]	; (8002f40 <main+0x108>)
 8002f06:	480d      	ldr	r0, [pc, #52]	; (8002f3c <main+0x104>)
 8002f08:	f006 f992 	bl	8009230 <HAL_RTC_GetDate>
	  lcdClearBuffer();
 8002f0c:	f7ff f840 	bl	8001f90 <lcdClearBuffer>

	  // functions executed through GUI
	  showGui();
 8002f10:	f7fe ff6e 	bl	8001df0 <showGui>

	  lcdRefresh();
 8002f14:	f7ff fec2 	bl	8002c9c <lcdRefresh>
  {
 8002f18:	e7d3      	b.n	8002ec2 <main+0x8a>
 8002f1a:	bf00      	nop
 8002f1c:	20003614 	.word	0x20003614
 8002f20:	2000365c 	.word	0x2000365c
 8002f24:	20003730 	.word	0x20003730
 8002f28:	2000050c 	.word	0x2000050c
 8002f2c:	2000002c 	.word	0x2000002c
 8002f30:	2000358c 	.word	0x2000358c
 8002f34:	20000550 	.word	0x20000550
 8002f38:	20003574 	.word	0x20003574
 8002f3c:	20003598 	.word	0x20003598
 8002f40:	20003588 	.word	0x20003588

08002f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b094      	sub	sp, #80	; 0x50
 8002f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f4a:	f107 0320 	add.w	r3, r7, #32
 8002f4e:	2230      	movs	r2, #48	; 0x30
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f008 fe6a 	bl	800bc2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	4b29      	ldr	r3, [pc, #164]	; (8003014 <SystemClock_Config+0xd0>)
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	4a28      	ldr	r2, [pc, #160]	; (8003014 <SystemClock_Config+0xd0>)
 8002f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f76:	6413      	str	r3, [r2, #64]	; 0x40
 8002f78:	4b26      	ldr	r3, [pc, #152]	; (8003014 <SystemClock_Config+0xd0>)
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f84:	2300      	movs	r3, #0
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	4b23      	ldr	r3, [pc, #140]	; (8003018 <SystemClock_Config+0xd4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a22      	ldr	r2, [pc, #136]	; (8003018 <SystemClock_Config+0xd4>)
 8002f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b20      	ldr	r3, [pc, #128]	; (8003018 <SystemClock_Config+0xd4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002fa0:	2305      	movs	r3, #5
 8002fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002fa4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002faa:	2301      	movs	r3, #1
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002fb8:	2304      	movs	r3, #4
 8002fba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002fbc:	23a8      	movs	r3, #168	; 0xa8
 8002fbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002fc4:	2307      	movs	r3, #7
 8002fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fc8:	f107 0320 	add.w	r3, r7, #32
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f005 f8e5 	bl	800819c <HAL_RCC_OscConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002fd8:	f000 f856 	bl	8003088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fdc:	230f      	movs	r3, #15
 8002fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fe8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	2105      	movs	r1, #5
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f005 fb46 	bl	800868c <HAL_RCC_ClockConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003006:	f000 f83f 	bl	8003088 <Error_Handler>
  }
}
 800300a:	bf00      	nop
 800300c:	3750      	adds	r7, #80	; 0x50
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40007000 	.word	0x40007000

0800301c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM10){
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d10c      	bne.n	8003048 <HAL_TIM_PeriodElapsedCallback+0x2c>
		if(stwS.state){
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003030:	78db      	ldrb	r3, [r3, #3]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_TIM_PeriodElapsedCallback+0x2c>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800303c:	2101      	movs	r1, #1
 800303e:	480a      	ldr	r0, [pc, #40]	; (8003068 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003040:	f004 f833 	bl	80070aa <HAL_GPIO_TogglePin>
			stwTick();
 8003044:	f000 f9d8 	bl	80033f8 <stwTick>
		}
	}
	if(htim->Instance == TIM11){
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a07      	ldr	r2, [pc, #28]	; (800306c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d102      	bne.n	8003058 <HAL_TIM_PeriodElapsedCallback+0x3c>
		scanButtons(btnsPtrs);
 8003052:	4807      	ldr	r0, [pc, #28]	; (8003070 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003054:	f7fe fcc0 	bl	80019d8 <scanButtons>
	}
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40014400 	.word	0x40014400
 8003064:	20003610 	.word	0x20003610
 8003068:	40020400 	.word	0x40020400
 800306c:	40014800 	.word	0x40014800
 8003070:	2000002c 	.word	0x2000002c

08003074 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){

	}
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800308c:	b672      	cpsid	i
}
 800308e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003090:	2201      	movs	r2, #1
 8003092:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003096:	4802      	ldr	r0, [pc, #8]	; (80030a0 <Error_Handler+0x18>)
 8003098:	f003 ffee 	bl	8007078 <HAL_GPIO_WritePin>
  while (1)
 800309c:	e7fe      	b.n	800309c <Error_Handler+0x14>
 800309e:	bf00      	nop
 80030a0:	40020400 	.word	0x40020400

080030a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80030b8:	2300      	movs	r3, #0
 80030ba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <MX_RTC_Init+0x58>)
 80030be:	4a10      	ldr	r2, [pc, #64]	; (8003100 <MX_RTC_Init+0x5c>)
 80030c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <MX_RTC_Init+0x58>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <MX_RTC_Init+0x58>)
 80030ca:	227f      	movs	r2, #127	; 0x7f
 80030cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <MX_RTC_Init+0x58>)
 80030d0:	22ff      	movs	r2, #255	; 0xff
 80030d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <MX_RTC_Init+0x58>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <MX_RTC_Init+0x58>)
 80030dc:	2200      	movs	r2, #0
 80030de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <MX_RTC_Init+0x58>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030e6:	4805      	ldr	r0, [pc, #20]	; (80030fc <MX_RTC_Init+0x58>)
 80030e8:	f005 feb0 	bl	8008e4c <HAL_RTC_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80030f2:	f7ff ffc9 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20003598 	.word	0x20003598
 8003100:	40002800 	.word	0x40002800

08003104 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08e      	sub	sp, #56	; 0x38
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800310c:	f107 0308 	add.w	r3, r7, #8
 8003110:	2230      	movs	r2, #48	; 0x30
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f008 fd89 	bl	800bc2c <memset>
  if(rtcHandle->Instance==RTC)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <HAL_RTC_MspInit+0x4c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d111      	bne.n	8003148 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003124:	2320      	movs	r3, #32
 8003126:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800312c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800312e:	f107 0308 	add.w	r3, r7, #8
 8003132:	4618      	mov	r0, r3
 8003134:	f005 fcca 	bl	8008acc <HAL_RCCEx_PeriphCLKConfig>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800313e:	f7ff ffa3 	bl	8003088 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003142:	4b04      	ldr	r3, [pc, #16]	; (8003154 <HAL_RTC_MspInit+0x50>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003148:	bf00      	nop
 800314a:	3738      	adds	r7, #56	; 0x38
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40002800 	.word	0x40002800
 8003154:	42470e3c 	.word	0x42470e3c

08003158 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800315c:	4b17      	ldr	r3, [pc, #92]	; (80031bc <MX_SPI1_Init+0x64>)
 800315e:	4a18      	ldr	r2, [pc, #96]	; (80031c0 <MX_SPI1_Init+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <MX_SPI1_Init+0x64>)
 8003164:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003168:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800316a:	4b14      	ldr	r3, [pc, #80]	; (80031bc <MX_SPI1_Init+0x64>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <MX_SPI1_Init+0x64>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003176:	4b11      	ldr	r3, [pc, #68]	; (80031bc <MX_SPI1_Init+0x64>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <MX_SPI1_Init+0x64>)
 800317e:	2200      	movs	r2, #0
 8003180:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003182:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <MX_SPI1_Init+0x64>)
 8003184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003188:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800318a:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <MX_SPI1_Init+0x64>)
 800318c:	2220      	movs	r2, #32
 800318e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <MX_SPI1_Init+0x64>)
 8003192:	2200      	movs	r2, #0
 8003194:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <MX_SPI1_Init+0x64>)
 8003198:	2200      	movs	r2, #0
 800319a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319c:	4b07      	ldr	r3, [pc, #28]	; (80031bc <MX_SPI1_Init+0x64>)
 800319e:	2200      	movs	r2, #0
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <MX_SPI1_Init+0x64>)
 80031a4:	220a      	movs	r2, #10
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031a8:	4804      	ldr	r0, [pc, #16]	; (80031bc <MX_SPI1_Init+0x64>)
 80031aa:	f006 f94d 	bl	8009448 <HAL_SPI_Init>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80031b4:	f7ff ff68 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	200035b8 	.word	0x200035b8
 80031c0:	40013000 	.word	0x40013000

080031c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	f107 0314 	add.w	r3, r7, #20
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a19      	ldr	r2, [pc, #100]	; (8003248 <HAL_SPI_MspInit+0x84>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d12b      	bne.n	800323e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_SPI_MspInit+0x88>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <HAL_SPI_MspInit+0x88>)
 80031f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031f4:	6453      	str	r3, [r2, #68]	; 0x44
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_SPI_MspInit+0x88>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	4b11      	ldr	r3, [pc, #68]	; (800324c <HAL_SPI_MspInit+0x88>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a10      	ldr	r2, [pc, #64]	; (800324c <HAL_SPI_MspInit+0x88>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_SPI_MspInit+0x88>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800321e:	23a0      	movs	r3, #160	; 0xa0
 8003220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322a:	2303      	movs	r3, #3
 800322c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800322e:	2305      	movs	r3, #5
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003232:	f107 0314 	add.w	r3, r7, #20
 8003236:	4619      	mov	r1, r3
 8003238:	4805      	ldr	r0, [pc, #20]	; (8003250 <HAL_SPI_MspInit+0x8c>)
 800323a:	f003 fd59 	bl	8006cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800323e:	bf00      	nop
 8003240:	3728      	adds	r7, #40	; 0x28
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40013000 	.word	0x40013000
 800324c:	40023800 	.word	0x40023800
 8003250:	40020000 	.word	0x40020000

08003254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_MspInit+0x4c>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	4a0f      	ldr	r2, [pc, #60]	; (80032a0 <HAL_MspInit+0x4c>)
 8003264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003268:	6453      	str	r3, [r2, #68]	; 0x44
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_MspInit+0x4c>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_MspInit+0x4c>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a08      	ldr	r2, [pc, #32]	; (80032a0 <HAL_MspInit+0x4c>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_MspInit+0x4c>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800

080032a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032a8:	e7fe      	b.n	80032a8 <NMI_Handler+0x4>

080032aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 80032ae:	f7ff feeb 	bl	8003088 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032b2:	e7fe      	b.n	80032b2 <HardFault_Handler+0x8>

080032b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b8:	e7fe      	b.n	80032b8 <MemManage_Handler+0x4>

080032ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032be:	e7fe      	b.n	80032be <BusFault_Handler+0x4>

080032c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c4:	e7fe      	b.n	80032c4 <UsageFault_Handler+0x4>

080032c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f4:	f003 fb14 	bl	8006920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}

080032fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003300:	4803      	ldr	r0, [pc, #12]	; (8003310 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003302:	f006 fd13 	bl	8009d2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003306:	4803      	ldr	r0, [pc, #12]	; (8003314 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003308:	f006 fd10 	bl	8009d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20003614 	.word	0x20003614
 8003314:	2000365c 	.word	0x2000365c

08003318 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800331c:	4803      	ldr	r0, [pc, #12]	; (800332c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800331e:	f006 fd05 	bl	8009d2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003322:	4803      	ldr	r0, [pc, #12]	; (8003330 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003324:	f006 fd02 	bl	8009d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003328:	bf00      	nop
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20003614 	.word	0x20003614
 8003330:	200036a4 	.word	0x200036a4

08003334 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 8003338:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800333c:	f003 fed0 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 8003340:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003344:	f003 fecc 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003348:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800334c:	f003 fec8 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 8003350:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003354:	f003 fec4 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8003358:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800335c:	f003 fec0 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8003360:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003364:	f003 febc 	bl	80070e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003368:	bf00      	nop
 800336a:	bd80      	pop	{r7, pc}

0800336c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003370:	4802      	ldr	r0, [pc, #8]	; (800337c <USART6_IRQHandler+0x10>)
 8003372:	f007 fc77 	bl	800ac64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20003730 	.word	0x20003730

08003380 <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 8003384:	2228      	movs	r2, #40	; 0x28
 8003386:	2100      	movs	r1, #0
 8003388:	4804      	ldr	r0, [pc, #16]	; (800339c <clearTable+0x1c>)
 800338a:	f008 fc4f 	bl	800bc2c <memset>
	stwT.position = 0;
 800338e:	4b03      	ldr	r3, [pc, #12]	; (800339c <clearTable+0x1c>)
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	2000014c 	.word	0x2000014c

080033a0 <addItem>:
void addItem(stw_struct stwS){
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f3c3 0117 	ubfx	r1, r3, #0, #24
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <addItem+0x38>)
 80033b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033b4:	461a      	mov	r2, r3
 80033b6:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <addItem+0x38>)
 80033b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <addItem+0x38>)
 80033be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033c2:	3301      	adds	r3, #1
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <addItem+0x38>)
 80033c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	2000014c 	.word	0x2000014c

080033dc <stwStart>:

void stwStart(void){
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_ENABLED;
 80033e0:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <stwStart+0x18>)
 80033e2:	78d3      	ldrb	r3, [r2, #3]
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	70d3      	strb	r3, [r2, #3]
}
 80033ea:	bf00      	nop
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	20003610 	.word	0x20003610

080033f8 <stwTick>:
void stwTick(void){
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
	stwS.cnt++;
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <stwTick+0x28>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800340a:	4905      	ldr	r1, [pc, #20]	; (8003420 <stwTick+0x28>)
 800340c:	680b      	ldr	r3, [r1, #0]
 800340e:	f362 0317 	bfi	r3, r2, #0, #24
 8003412:	600b      	str	r3, [r1, #0]
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20003610 	.word	0x20003610

08003424 <stwStop>:
void stwStop(void){
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 8003428:	4a04      	ldr	r2, [pc, #16]	; (800343c <stwStop+0x18>)
 800342a:	78d3      	ldrb	r3, [r2, #3]
 800342c:	f36f 0300 	bfc	r3, #0, #1
 8003430:	70d3      	strb	r3, [r2, #3]
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	20003610 	.word	0x20003610

08003440 <stwClear>:
void stwClear(void){
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
	stwS.cnt = 0;
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <stwClear+0x18>)
 8003446:	6813      	ldr	r3, [r2, #0]
 8003448:	f36f 0317 	bfc	r3, #0, #24
 800344c:	6013      	str	r3, [r2, #0]
}
 800344e:	bf00      	nop
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	20003610 	.word	0x20003610

0800345c <stwSave>:
void stwSave(void){
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <stwSave+0x18>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	4a04      	ldr	r2, [pc, #16]	; (8003478 <stwSave+0x1c>)
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	f3c2 0217 	ubfx	r2, r2, #0, #24
 800346c:	4610      	mov	r0, r2
 800346e:	4798      	blx	r3
}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}
 8003474:	2000014c 	.word	0x2000014c
 8003478:	20003610 	.word	0x20003610

0800347c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <SystemInit+0x20>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	4a05      	ldr	r2, [pc, #20]	; (800349c <SystemInit+0x20>)
 8003488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800348c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b096      	sub	sp, #88	; 0x58
 80034a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	60da      	str	r2, [r3, #12]
 80034cc:	611a      	str	r2, [r3, #16]
 80034ce:	615a      	str	r2, [r3, #20]
 80034d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034d2:	1d3b      	adds	r3, r7, #4
 80034d4:	2220      	movs	r2, #32
 80034d6:	2100      	movs	r1, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	f008 fba7 	bl	800bc2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034de:	4b3f      	ldr	r3, [pc, #252]	; (80035dc <MX_TIM1_Init+0x13c>)
 80034e0:	4a3f      	ldr	r2, [pc, #252]	; (80035e0 <MX_TIM1_Init+0x140>)
 80034e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 80034e4:	4b3d      	ldr	r3, [pc, #244]	; (80035dc <MX_TIM1_Init+0x13c>)
 80034e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80034ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ec:	4b3b      	ldr	r3, [pc, #236]	; (80035dc <MX_TIM1_Init+0x13c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 80034f2:	4b3a      	ldr	r3, [pc, #232]	; (80035dc <MX_TIM1_Init+0x13c>)
 80034f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80034f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <MX_TIM1_Init+0x13c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003500:	4b36      	ldr	r3, [pc, #216]	; (80035dc <MX_TIM1_Init+0x13c>)
 8003502:	2200      	movs	r2, #0
 8003504:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003506:	4b35      	ldr	r3, [pc, #212]	; (80035dc <MX_TIM1_Init+0x13c>)
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800350c:	4833      	ldr	r0, [pc, #204]	; (80035dc <MX_TIM1_Init+0x13c>)
 800350e:	f006 fa2b 	bl	8009968 <HAL_TIM_Base_Init>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003518:	f7ff fdb6 	bl	8003088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800351c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003520:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003526:	4619      	mov	r1, r3
 8003528:	482c      	ldr	r0, [pc, #176]	; (80035dc <MX_TIM1_Init+0x13c>)
 800352a:	f006 fdc9 	bl	800a0c0 <HAL_TIM_ConfigClockSource>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003534:	f7ff fda8 	bl	8003088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003538:	4828      	ldr	r0, [pc, #160]	; (80035dc <MX_TIM1_Init+0x13c>)
 800353a:	f006 fad5 	bl	8009ae8 <HAL_TIM_PWM_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003544:	f7ff fda0 	bl	8003088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003548:	2300      	movs	r3, #0
 800354a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800354c:	2300      	movs	r3, #0
 800354e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003550:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003554:	4619      	mov	r1, r3
 8003556:	4821      	ldr	r0, [pc, #132]	; (80035dc <MX_TIM1_Init+0x13c>)
 8003558:	f007 f9b2 	bl	800a8c0 <HAL_TIMEx_MasterConfigSynchronization>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003562:	f7ff fd91 	bl	8003088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003566:	2360      	movs	r3, #96	; 0x60
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 800356a:	2302      	movs	r3, #2
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800356e:	2300      	movs	r3, #0
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003572:	2300      	movs	r3, #0
 8003574:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003576:	2300      	movs	r3, #0
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800357a:	2300      	movs	r3, #0
 800357c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003586:	2200      	movs	r2, #0
 8003588:	4619      	mov	r1, r3
 800358a:	4814      	ldr	r0, [pc, #80]	; (80035dc <MX_TIM1_Init+0x13c>)
 800358c:	f006 fcd6 	bl	8009f3c <HAL_TIM_PWM_ConfigChannel>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8003596:	f7ff fd77 	bl	8003088 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800359a:	2300      	movs	r3, #0
 800359c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	4807      	ldr	r0, [pc, #28]	; (80035dc <MX_TIM1_Init+0x13c>)
 80035be:	f007 f9fb 	bl	800a9b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80035c8:	f7ff fd5e 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80035cc:	4803      	ldr	r0, [pc, #12]	; (80035dc <MX_TIM1_Init+0x13c>)
 80035ce:	f000 f8bd 	bl	800374c <HAL_TIM_MspPostInit>

}
 80035d2:	bf00      	nop
 80035d4:	3758      	adds	r7, #88	; 0x58
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20003614 	.word	0x20003614
 80035e0:	40010000 	.word	0x40010000

080035e4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <MX_TIM10_Init+0x40>)
 80035ea:	4a0f      	ldr	r2, [pc, #60]	; (8003628 <MX_TIM10_Init+0x44>)
 80035ec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <MX_TIM10_Init+0x40>)
 80035f0:	f244 129f 	movw	r2, #16799	; 0x419f
 80035f4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <MX_TIM10_Init+0x40>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <MX_TIM10_Init+0x40>)
 80035fe:	2263      	movs	r2, #99	; 0x63
 8003600:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003602:	4b08      	ldr	r3, [pc, #32]	; (8003624 <MX_TIM10_Init+0x40>)
 8003604:	2200      	movs	r2, #0
 8003606:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <MX_TIM10_Init+0x40>)
 800360a:	2280      	movs	r2, #128	; 0x80
 800360c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800360e:	4805      	ldr	r0, [pc, #20]	; (8003624 <MX_TIM10_Init+0x40>)
 8003610:	f006 f9aa 	bl	8009968 <HAL_TIM_Base_Init>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800361a:	f7ff fd35 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2000365c 	.word	0x2000365c
 8003628:	40014400 	.word	0x40014400

0800362c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003630:	4b0e      	ldr	r3, [pc, #56]	; (800366c <MX_TIM11_Init+0x40>)
 8003632:	4a0f      	ldr	r2, [pc, #60]	; (8003670 <MX_TIM11_Init+0x44>)
 8003634:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 8003636:	4b0d      	ldr	r3, [pc, #52]	; (800366c <MX_TIM11_Init+0x40>)
 8003638:	f244 129f 	movw	r2, #16799	; 0x419f
 800363c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <MX_TIM11_Init+0x40>)
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 499;
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <MX_TIM11_Init+0x40>)
 8003646:	f240 12f3 	movw	r2, #499	; 0x1f3
 800364a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <MX_TIM11_Init+0x40>)
 800364e:	2200      	movs	r2, #0
 8003650:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <MX_TIM11_Init+0x40>)
 8003654:	2280      	movs	r2, #128	; 0x80
 8003656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003658:	4804      	ldr	r0, [pc, #16]	; (800366c <MX_TIM11_Init+0x40>)
 800365a:	f006 f985 	bl	8009968 <HAL_TIM_Base_Init>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8003664:	f7ff fd10 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}
 800366c:	200036a4 	.word	0x200036a4
 8003670:	40014800 	.word	0x40014800

08003674 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2e      	ldr	r2, [pc, #184]	; (800373c <HAL_TIM_Base_MspInit+0xc8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d11e      	bne.n	80036c4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_TIM_Base_MspInit+0xcc>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	4a2c      	ldr	r2, [pc, #176]	; (8003740 <HAL_TIM_Base_MspInit+0xcc>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6453      	str	r3, [r2, #68]	; 0x44
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_TIM_Base_MspInit+0xcc>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2100      	movs	r1, #0
 80036a6:	2019      	movs	r0, #25
 80036a8:	f003 fa59 	bl	8006b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80036ac:	2019      	movs	r0, #25
 80036ae:	f003 fa72 	bl	8006b96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2100      	movs	r1, #0
 80036b6:	201a      	movs	r0, #26
 80036b8:	f003 fa51 	bl	8006b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80036bc:	201a      	movs	r0, #26
 80036be:	f003 fa6a 	bl	8006b96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80036c2:	e036      	b.n	8003732 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM10)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1e      	ldr	r2, [pc, #120]	; (8003744 <HAL_TIM_Base_MspInit+0xd0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d116      	bne.n	80036fc <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <HAL_TIM_Base_MspInit+0xcc>)
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	4a1a      	ldr	r2, [pc, #104]	; (8003740 <HAL_TIM_Base_MspInit+0xcc>)
 80036d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036dc:	6453      	str	r3, [r2, #68]	; 0x44
 80036de:	4b18      	ldr	r3, [pc, #96]	; (8003740 <HAL_TIM_Base_MspInit+0xcc>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80036ea:	2200      	movs	r2, #0
 80036ec:	2100      	movs	r1, #0
 80036ee:	2019      	movs	r0, #25
 80036f0:	f003 fa35 	bl	8006b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80036f4:	2019      	movs	r0, #25
 80036f6:	f003 fa4e 	bl	8006b96 <HAL_NVIC_EnableIRQ>
}
 80036fa:	e01a      	b.n	8003732 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a11      	ldr	r2, [pc, #68]	; (8003748 <HAL_TIM_Base_MspInit+0xd4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d115      	bne.n	8003732 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <HAL_TIM_Base_MspInit+0xcc>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <HAL_TIM_Base_MspInit+0xcc>)
 8003710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003714:	6453      	str	r3, [r2, #68]	; 0x44
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_TIM_Base_MspInit+0xcc>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	201a      	movs	r0, #26
 8003728:	f003 fa19 	bl	8006b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800372c:	201a      	movs	r0, #26
 800372e:	f003 fa32 	bl	8006b96 <HAL_NVIC_EnableIRQ>
}
 8003732:	bf00      	nop
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40010000 	.word	0x40010000
 8003740:	40023800 	.word	0x40023800
 8003744:	40014400 	.word	0x40014400
 8003748:	40014800 	.word	0x40014800

0800374c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	f107 030c 	add.w	r3, r7, #12
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <HAL_TIM_MspPostInit+0x68>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d11e      	bne.n	80037ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <HAL_TIM_MspPostInit+0x6c>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	4a10      	ldr	r2, [pc, #64]	; (80037b8 <HAL_TIM_MspPostInit+0x6c>)
 8003778:	f043 0310 	orr.w	r3, r3, #16
 800377c:	6313      	str	r3, [r2, #48]	; 0x30
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <HAL_TIM_MspPostInit+0x6c>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800378a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800378e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800379c:	2301      	movs	r3, #1
 800379e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037a0:	f107 030c 	add.w	r3, r7, #12
 80037a4:	4619      	mov	r1, r3
 80037a6:	4805      	ldr	r0, [pc, #20]	; (80037bc <HAL_TIM_MspPostInit+0x70>)
 80037a8:	f003 faa2 	bl	8006cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80037ac:	bf00      	nop
 80037ae:	3720      	adds	r7, #32
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40021000 	.word	0x40021000

080037c0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <MX_USART3_UART_Init+0x4c>)
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <MX_USART3_UART_Init+0x50>)
 80037c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <MX_USART3_UART_Init+0x4c>)
 80037cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037d2:	4b0e      	ldr	r3, [pc, #56]	; (800380c <MX_USART3_UART_Init+0x4c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <MX_USART3_UART_Init+0x4c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <MX_USART3_UART_Init+0x4c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <MX_USART3_UART_Init+0x4c>)
 80037e6:	220c      	movs	r2, #12
 80037e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <MX_USART3_UART_Init+0x4c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <MX_USART3_UART_Init+0x4c>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037f6:	4805      	ldr	r0, [pc, #20]	; (800380c <MX_USART3_UART_Init+0x4c>)
 80037f8:	f007 f944 	bl	800aa84 <HAL_UART_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003802:	f7ff fc41 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200036ec 	.word	0x200036ec
 8003810:	40004800 	.word	0x40004800

08003814 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <MX_USART6_UART_Init+0x4c>)
 800381a:	4a12      	ldr	r2, [pc, #72]	; (8003864 <MX_USART6_UART_Init+0x50>)
 800381c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <MX_USART6_UART_Init+0x4c>)
 8003820:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003824:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <MX_USART6_UART_Init+0x4c>)
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <MX_USART6_UART_Init+0x4c>)
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <MX_USART6_UART_Init+0x4c>)
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <MX_USART6_UART_Init+0x4c>)
 800383a:	2204      	movs	r2, #4
 800383c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <MX_USART6_UART_Init+0x4c>)
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <MX_USART6_UART_Init+0x4c>)
 8003846:	2200      	movs	r2, #0
 8003848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800384a:	4805      	ldr	r0, [pc, #20]	; (8003860 <MX_USART6_UART_Init+0x4c>)
 800384c:	f007 f91a 	bl	800aa84 <HAL_UART_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003856:	f7ff fc17 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20003730 	.word	0x20003730
 8003864:	40011400 	.word	0x40011400

08003868 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	; 0x30
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 031c 	add.w	r3, r7, #28
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a36      	ldr	r2, [pc, #216]	; (8003960 <HAL_UART_MspInit+0xf8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d12d      	bne.n	80038e6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	4b35      	ldr	r3, [pc, #212]	; (8003964 <HAL_UART_MspInit+0xfc>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	4a34      	ldr	r2, [pc, #208]	; (8003964 <HAL_UART_MspInit+0xfc>)
 8003894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003898:	6413      	str	r3, [r2, #64]	; 0x40
 800389a:	4b32      	ldr	r3, [pc, #200]	; (8003964 <HAL_UART_MspInit+0xfc>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <HAL_UART_MspInit+0xfc>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4a2d      	ldr	r2, [pc, #180]	; (8003964 <HAL_UART_MspInit+0xfc>)
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	6313      	str	r3, [r2, #48]	; 0x30
 80038b6:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <HAL_UART_MspInit+0xfc>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80038c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c8:	2302      	movs	r3, #2
 80038ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d0:	2303      	movs	r3, #3
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038d4:	2307      	movs	r3, #7
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038d8:	f107 031c 	add.w	r3, r7, #28
 80038dc:	4619      	mov	r1, r3
 80038de:	4822      	ldr	r0, [pc, #136]	; (8003968 <HAL_UART_MspInit+0x100>)
 80038e0:	f003 fa06 	bl	8006cf0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80038e4:	e038      	b.n	8003958 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a20      	ldr	r2, [pc, #128]	; (800396c <HAL_UART_MspInit+0x104>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d133      	bne.n	8003958 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <HAL_UART_MspInit+0xfc>)
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_UART_MspInit+0xfc>)
 80038fa:	f043 0320 	orr.w	r3, r3, #32
 80038fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003900:	4b18      	ldr	r3, [pc, #96]	; (8003964 <HAL_UART_MspInit+0xfc>)
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	4b14      	ldr	r3, [pc, #80]	; (8003964 <HAL_UART_MspInit+0xfc>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	4a13      	ldr	r2, [pc, #76]	; (8003964 <HAL_UART_MspInit+0xfc>)
 8003916:	f043 0304 	orr.w	r3, r3, #4
 800391a:	6313      	str	r3, [r2, #48]	; 0x30
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_UART_MspInit+0xfc>)
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003928:	23c0      	movs	r3, #192	; 0xc0
 800392a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392c:	2302      	movs	r3, #2
 800392e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003934:	2303      	movs	r3, #3
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003938:	2308      	movs	r3, #8
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393c:	f107 031c 	add.w	r3, r7, #28
 8003940:	4619      	mov	r1, r3
 8003942:	480b      	ldr	r0, [pc, #44]	; (8003970 <HAL_UART_MspInit+0x108>)
 8003944:	f003 f9d4 	bl	8006cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003948:	2200      	movs	r2, #0
 800394a:	2100      	movs	r1, #0
 800394c:	2047      	movs	r0, #71	; 0x47
 800394e:	f003 f906 	bl	8006b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003952:	2047      	movs	r0, #71	; 0x47
 8003954:	f003 f91f 	bl	8006b96 <HAL_NVIC_EnableIRQ>
}
 8003958:	bf00      	nop
 800395a:	3730      	adds	r7, #48	; 0x30
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40004800 	.word	0x40004800
 8003964:	40023800 	.word	0x40023800
 8003968:	40020c00 	.word	0x40020c00
 800396c:	40011400 	.word	0x40011400
 8003970:	40020800 	.word	0x40020800

08003974 <setDefaultClbcks>:
#include "fonts/zekton14b.h"

// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <setDefaultClbcks+0x34>)
 800397a:	4a0c      	ldr	r2, [pc, #48]	; (80039ac <setDefaultClbcks+0x38>)
 800397c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <setDefaultClbcks+0x3c>)
 8003980:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <setDefaultClbcks+0x40>)
 8003982:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <setDefaultClbcks+0x44>)
 8003986:	4a0d      	ldr	r2, [pc, #52]	; (80039bc <setDefaultClbcks+0x48>)
 8003988:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <setDefaultClbcks+0x4c>)
 800398c:	4a0d      	ldr	r2, [pc, #52]	; (80039c4 <setDefaultClbcks+0x50>)
 800398e:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 8003990:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <setDefaultClbcks+0x54>)
 8003992:	4a0e      	ldr	r2, [pc, #56]	; (80039cc <setDefaultClbcks+0x58>)
 8003994:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = NULL;
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <setDefaultClbcks+0x5c>)
 8003998:	2200      	movs	r2, #0
 800399a:	611a      	str	r2, [r3, #16]
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000560 	.word	0x20000560
 80039ac:	08001d15 	.word	0x08001d15
 80039b0:	200005a8 	.word	0x200005a8
 80039b4:	08001d25 	.word	0x08001d25
 80039b8:	20000584 	.word	0x20000584
 80039bc:	08003ca9 	.word	0x08003ca9
 80039c0:	20000614 	.word	0x20000614
 80039c4:	08003ced 	.word	0x08003ced
 80039c8:	200005cc 	.word	0x200005cc
 80039cc:	08003d39 	.word	0x08003d39
 80039d0:	200005f0 	.word	0x200005f0

080039d4 <baroSetup>:

// function executed once on module load
void baroSetup(void){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80039d8:	f7ff ffcc 	bl	8003974 <setDefaultClbcks>
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}

080039e0 <baroMain>:

// main function
void baroMain(void){
 80039e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e4:	b0ae      	sub	sp, #184	; 0xb8
 80039e6:	af04      	add	r7, sp, #16
	char str1[50] = {0};
 80039e8:	2300      	movs	r3, #0
 80039ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80039ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039f0:	222e      	movs	r2, #46	; 0x2e
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f008 f919 	bl	800bc2c <memset>
	char str3[50] = {0};
 80039fa:	2300      	movs	r3, #0
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
 80039fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a02:	222e      	movs	r2, #46	; 0x2e
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f008 f910 	bl	800bc2c <memset>
	char str4[50] = {0};
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	222e      	movs	r2, #46	; 0x2e
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f008 f908 	bl	800bc2c <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 8003a1c:	4b93      	ldr	r3, [pc, #588]	; (8003c6c <baroMain+0x28c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fc fdab 	bl	800057c <__aeabi_f2d>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003a2e:	4990      	ldr	r1, [pc, #576]	; (8003c70 <baroMain+0x290>)
 8003a30:	f009 fa2a 	bl	800ce88 <siprintf>
	lcdPutStr(10, 14, str1, zekton12font);
 8003a34:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003a38:	4b8e      	ldr	r3, [pc, #568]	; (8003c74 <baroMain+0x294>)
 8003a3a:	210e      	movs	r1, #14
 8003a3c:	200a      	movs	r0, #10
 8003a3e:	f7fe fbb7 	bl	80021b0 <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 8003a42:	4b8a      	ldr	r3, [pc, #552]	; (8003c6c <baroMain+0x28c>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003c78 <baroMain+0x298>
 8003a52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a56:	ee16 0a90 	vmov	r0, s13
 8003a5a:	f7fc fd8f 	bl	800057c <__aeabi_f2d>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003a66:	4985      	ldr	r1, [pc, #532]	; (8003c7c <baroMain+0x29c>)
 8003a68:	f009 fa0e 	bl	800ce88 <siprintf>
	lcdPutStr(10, 30, str1, zekton12font);
 8003a6c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003a70:	4b80      	ldr	r3, [pc, #512]	; (8003c74 <baroMain+0x294>)
 8003a72:	211e      	movs	r1, #30
 8003a74:	200a      	movs	r0, #10
 8003a76:	f7fe fb9b 	bl	80021b0 <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8003a7a:	4b81      	ldr	r3, [pc, #516]	; (8003c80 <baroMain+0x2a0>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d123      	bne.n	8003aca <baroMain+0xea>
		sprintf(&str4, "Fixed altitude mode");
 8003a82:	463b      	mov	r3, r7
 8003a84:	497f      	ldr	r1, [pc, #508]	; (8003c84 <baroMain+0x2a4>)
 8003a86:	4618      	mov	r0, r3
 8003a88:	f009 f9fe 	bl	800ce88 <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 8003a8c:	4b77      	ldr	r3, [pc, #476]	; (8003c6c <baroMain+0x28c>)
 8003a8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a92:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8003c78 <baroMain+0x298>
 8003a96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a9a:	ee16 0a90 	vmov	r0, s13
 8003a9e:	f7fc fd6d 	bl	800057c <__aeabi_f2d>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003aaa:	4977      	ldr	r1, [pc, #476]	; (8003c88 <baroMain+0x2a8>)
 8003aac:	f009 f9ec 	bl	800ce88 <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 8003ab0:	4b76      	ldr	r3, [pc, #472]	; (8003c8c <baroMain+0x2ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fc fd61 	bl	800057c <__aeabi_f2d>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003ac2:	4973      	ldr	r1, [pc, #460]	; (8003c90 <baroMain+0x2b0>)
 8003ac4:	f009 f9e0 	bl	800ce88 <siprintf>
 8003ac8:	e022      	b.n	8003b10 <baroMain+0x130>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 8003aca:	463b      	mov	r3, r7
 8003acc:	4971      	ldr	r1, [pc, #452]	; (8003c94 <baroMain+0x2b4>)
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f009 f9da 	bl	800ce88 <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 8003ad4:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <baroMain+0x28c>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fc fd4f 	bl	800057c <__aeabi_f2d>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003ae6:	496c      	ldr	r1, [pc, #432]	; (8003c98 <baroMain+0x2b8>)
 8003ae8:	f009 f9ce 	bl	800ce88 <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8003aec:	4b6b      	ldr	r3, [pc, #428]	; (8003c9c <baroMain+0x2bc>)
 8003aee:	edd3 7a00 	vldr	s15, [r3]
 8003af2:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003c78 <baroMain+0x298>
 8003af6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003afa:	ee16 0a90 	vmov	r0, s13
 8003afe:	f7fc fd3d 	bl	800057c <__aeabi_f2d>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003b0a:	4965      	ldr	r1, [pc, #404]	; (8003ca0 <baroMain+0x2c0>)
 8003b0c:	f009 f9bc 	bl	800ce88 <siprintf>
	}
	lcdPutStr(10, 50, str4, zekton12font);
 8003b10:	463a      	mov	r2, r7
 8003b12:	4b58      	ldr	r3, [pc, #352]	; (8003c74 <baroMain+0x294>)
 8003b14:	2132      	movs	r1, #50	; 0x32
 8003b16:	200a      	movs	r0, #10
 8003b18:	f7fe fb4a 	bl	80021b0 <lcdPutStr>
	lcdPutStr(10, 66, str1, zekton12font);
 8003b1c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003b20:	4b54      	ldr	r3, [pc, #336]	; (8003c74 <baroMain+0x294>)
 8003b22:	2142      	movs	r1, #66	; 0x42
 8003b24:	200a      	movs	r0, #10
 8003b26:	f7fe fb43 	bl	80021b0 <lcdPutStr>
	lcdPutStr(10, 82, str3, zekton12font);
 8003b2a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003b2e:	4b51      	ldr	r3, [pc, #324]	; (8003c74 <baroMain+0x294>)
 8003b30:	2152      	movs	r1, #82	; 0x52
 8003b32:	200a      	movs	r0, #10
 8003b34:	f7fe fb3c 	bl	80021b0 <lcdPutStr>
	uint16_t minTemp = 275;
 8003b38:	f240 1313 	movw	r3, #275	; 0x113
 8003b3c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint16_t maxTemp = 325;
 8003b40:	f240 1345 	movw	r3, #325	; 0x145
 8003b44:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	uint16_t minX = 10;
 8003b48:	230a      	movs	r3, #10
 8003b4a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	uint16_t maxX = 390;
 8003b4e:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8003b52:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint8_t maxHeight = 230;
 8003b56:	23e6      	movs	r3, #230	; 0xe6
 8003b58:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	uint8_t minHeight = 100;
 8003b5c:	2364      	movs	r3, #100	; 0x64
 8003b5e:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	for(uint16_t i=0; i<baroRing.num_entries; i++){
 8003b62:	2300      	movs	r3, #0
 8003b64:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003b68:	e074      	b.n	8003c54 <baroMain+0x274>
//		lcdRect2(400/baroRing.size*i, 400/baroRing.size*i+1, maxHeight-(maxHeight-minHeight)*(baroRing.values[i]-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
		lcdRect2(400/baroRing.size*i, 400/baroRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&baroRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
 8003b6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ca4 <baroMain+0x2c4>)
 8003b6c:	895b      	ldrh	r3, [r3, #10]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003b74:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b78:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8003b7c:	fb02 f603 	mul.w	r6, r2, r3
 8003b80:	4b48      	ldr	r3, [pc, #288]	; (8003ca4 <baroMain+0x2c4>)
 8003b82:	895b      	ldrh	r3, [r3, #10]
 8003b84:	461a      	mov	r2, r3
 8003b86:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003b8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b8e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	f103 0801 	add.w	r8, r3, #1
 8003b9a:	f897 409d 	ldrb.w	r4, [r7, #157]	; 0x9d
 8003b9e:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8003ba2:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8003ba6:	1ad5      	subs	r5, r2, r3
 8003ba8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8003bac:	4619      	mov	r1, r3
 8003bae:	483d      	ldr	r0, [pc, #244]	; (8003ca4 <baroMain+0x2c4>)
 8003bb0:	f002 fda1 	bl	80066f6 <read_nth_ring_buffer>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	fb03 f205 	mul.w	r2, r3, r5
 8003bc0:	f8b7 10a2 	ldrh.w	r1, [r7, #162]	; 0xa2
 8003bc4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003bc8:	1acb      	subs	r3, r1, r3
 8003bca:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bce:	1ae2      	subs	r2, r4, r3
 8003bd0:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	9102      	str	r1, [sp, #8]
 8003bd8:	210e      	movs	r1, #14
 8003bda:	9101      	str	r1, [sp, #4]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	9100      	str	r1, [sp, #0]
 8003be0:	4641      	mov	r1, r8
 8003be2:	4630      	mov	r0, r6
 8003be4:	f7ff f8c9 	bl	8002d7a <lcdRect2>

		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(maxTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8003be8:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 8003bec:	2302      	movs	r3, #2
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f240 118f 	movw	r1, #399	; 0x18f
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f7fe fb7e 	bl	80022f8 <lcdHLine2>
		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(minTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8003bfc:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8003c00:	2302      	movs	r3, #2
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	2301      	movs	r3, #1
 8003c06:	f240 118f 	movw	r1, #399	; 0x18f
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f7fe fb74 	bl	80022f8 <lcdHLine2>
		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(300-minTemp)/(maxTemp-minTemp), 1, 2);
 8003c10:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8003c14:	f897 109d 	ldrb.w	r1, [r7, #157]	; 0x9d
 8003c18:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8003c1c:	1acb      	subs	r3, r1, r3
 8003c1e:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8003c22:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8003c26:	fb03 f101 	mul.w	r1, r3, r1
 8003c2a:	f8b7 00a2 	ldrh.w	r0, [r7, #162]	; 0xa2
 8003c2e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003c32:	1ac3      	subs	r3, r0, r3
 8003c34:	fb91 f3f3 	sdiv	r3, r1, r3
 8003c38:	1ad2      	subs	r2, r2, r3
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f240 118f 	movw	r1, #399	; 0x18f
 8003c44:	2000      	movs	r0, #0
 8003c46:	f7fe fb57 	bl	80022f8 <lcdHLine2>
	for(uint16_t i=0; i<baroRing.num_entries; i++){
 8003c4a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <baroMain+0x2c4>)
 8003c56:	891b      	ldrh	r3, [r3, #8]
 8003c58:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d384      	bcc.n	8003b6a <baroMain+0x18a>
	}
//	lcdVLine(baroRing.tail, minHeight, maxHeight, 1);
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	37a8      	adds	r7, #168	; 0xa8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c6c:	20000550 	.word	0x20000550
 8003c70:	08013274 	.word	0x08013274
 8003c74:	080139dc 	.word	0x080139dc
 8003c78:	42c80000 	.word	0x42c80000
 8003c7c:	0801328c 	.word	0x0801328c
 8003c80:	20003774 	.word	0x20003774
 8003c84:	080132a8 	.word	0x080132a8
 8003c88:	080132bc 	.word	0x080132bc
 8003c8c:	20000004 	.word	0x20000004
 8003c90:	080132e0 	.word	0x080132e0
 8003c94:	08013300 	.word	0x08013300
 8003c98:	08013314 	.word	0x08013314
 8003c9c:	20000000 	.word	0x20000000
 8003ca0:	08013334 	.word	0x08013334
 8003ca4:	2000358c 	.word	0x2000358c

08003ca8 <changeBaroMode>:

void changeBaroMode(void){
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <changeBaroMode+0x34>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <changeBaroMode+0x38>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <changeBaroMode+0x3c>)
 8003cba:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <changeBaroMode+0x34>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = BARO_MODE_FIXED_ALTITUDE;
	}
}
 8003cc2:	e006      	b.n	8003cd2 <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <changeBaroMode+0x38>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a07      	ldr	r2, [pc, #28]	; (8003ce8 <changeBaroMode+0x40>)
 8003cca:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <changeBaroMode+0x34>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	20003774 	.word	0x20003774
 8003ce0:	20000550 	.word	0x20000550
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	20000004 	.word	0x20000004

08003cec <addBaro>:
void addBaro(void){
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <addBaro+0x40>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <addBaro+0x22>
			fixedAltitude += 1;
 8003cf8:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <addBaro+0x44>)
 8003cfa:	edd3 7a00 	vldr	s15, [r3]
 8003cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d06:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <addBaro+0x44>)
 8003d08:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 8003d0c:	e009      	b.n	8003d22 <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <addBaro+0x48>)
 8003d10:	edd3 7a00 	vldr	s15, [r3]
 8003d14:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <addBaro+0x48>)
 8003d1e:	edc3 7a00 	vstr	s15, [r3]
}
 8003d22:	bf00      	nop
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20003774 	.word	0x20003774
 8003d30:	20000004 	.word	0x20000004
 8003d34:	20000000 	.word	0x20000000

08003d38 <remBaro>:
void remBaro(void){
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <remBaro+0x40>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <remBaro+0x22>
			fixedAltitude -= 1;
 8003d44:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <remBaro+0x44>)
 8003d46:	edd3 7a00 	vldr	s15, [r3]
 8003d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <remBaro+0x44>)
 8003d54:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 8003d58:	e009      	b.n	8003d6e <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <remBaro+0x48>)
 8003d5c:	edd3 7a00 	vldr	s15, [r3]
 8003d60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <remBaro+0x48>)
 8003d6a:	edc3 7a00 	vstr	s15, [r3]
}
 8003d6e:	bf00      	nop
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	20003774 	.word	0x20003774
 8003d7c:	20000004 	.word	0x20000004
 8003d80:	20000000 	.word	0x20000000

08003d84 <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 8003d8c:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <setupCntxMenu+0x1c>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6013      	str	r3, [r2, #0]
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20003778 	.word	0x20003778

08003da4 <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
	hideCntxMenu();
 8003da8:	f000 f87e 	bl	8003ea8 <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <cntxSelect+0x1c>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <cntxSelect+0x20>)
 8003db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4798      	blx	r3
}
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20003776 	.word	0x20003776
 8003dc4:	200001dc 	.word	0x200001dc

08003dc8 <nextItem>:

void nextItem(void){
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <nextItem+0x34>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <nextItem+0x38>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	da06      	bge.n	8003dea <nextItem+0x22>
		cntxPosition++;
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <nextItem+0x34>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <nextItem+0x34>)
 8003de6:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 8003de8:	e002      	b.n	8003df0 <nextItem+0x28>
		cntxPosition = 0;
 8003dea:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <nextItem+0x34>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20003776 	.word	0x20003776
 8003e00:	20000184 	.word	0x20000184

08003e04 <prevItem>:
void prevItem(void){
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <prevItem+0x30>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d006      	beq.n	8003e1e <prevItem+0x1a>
		cntxPosition--;
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <prevItem+0x30>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <prevItem+0x30>)
 8003e1a:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 8003e1c:	e005      	b.n	8003e2a <prevItem+0x26>
		cntxPosition = actionsNum-1;
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <prevItem+0x34>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <prevItem+0x30>)
 8003e28:	701a      	strb	r2, [r3, #0]
}
 8003e2a:	bf00      	nop
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	20003776 	.word	0x20003776
 8003e38:	20000184 	.word	0x20000184

08003e3c <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <setDefaultClbcks+0x34>)
 8003e42:	4a0c      	ldr	r2, [pc, #48]	; (8003e74 <setDefaultClbcks+0x38>)
 8003e44:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <setDefaultClbcks+0x3c>)
 8003e48:	4a0c      	ldr	r2, [pc, #48]	; (8003e7c <setDefaultClbcks+0x40>)
 8003e4a:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <setDefaultClbcks+0x3c>)
 8003e4e:	4a0b      	ldr	r2, [pc, #44]	; (8003e7c <setDefaultClbcks+0x40>)
 8003e50:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <setDefaultClbcks+0x44>)
 8003e54:	4a0b      	ldr	r2, [pc, #44]	; (8003e84 <setDefaultClbcks+0x48>)
 8003e56:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <setDefaultClbcks+0x4c>)
 8003e5a:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <setDefaultClbcks+0x50>)
 8003e5c:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <setDefaultClbcks+0x4c>)
 8003e60:	4a0a      	ldr	r2, [pc, #40]	; (8003e8c <setDefaultClbcks+0x50>)
 8003e62:	61da      	str	r2, [r3, #28]
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000614 	.word	0x20000614
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	200005a8 	.word	0x200005a8
 8003e7c:	08003e05 	.word	0x08003e05
 8003e80:	20000584 	.word	0x20000584
 8003e84:	08003da5 	.word	0x08003da5
 8003e88:	20000560 	.word	0x20000560
 8003e8c:	08003dc9 	.word	0x08003dc9

08003e90 <showCntxMenu>:

void showCntxMenu(void){
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 8003e94:	f7ff ffd2 	bl	8003e3c <setDefaultClbcks>
	isCntxOpen = 1;
 8003e98:	4b02      	ldr	r3, [pc, #8]	; (8003ea4 <showCntxMenu+0x14>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20003775 	.word	0x20003775

08003ea8 <hideCntxMenu>:
void hideCntxMenu(void){
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 8003eac:	f7fd fc9a 	bl	80017e4 <resetButtonHandlers>
	(*prevClbcks)();
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <hideCntxMenu+0x18>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4798      	blx	r3
	isCntxOpen = 0;
 8003eb6:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <hideCntxMenu+0x1c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20003778 	.word	0x20003778
 8003ec4:	20003775 	.word	0x20003775

08003ec8 <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 8003ece:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <enableCntxMenu+0xe0>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d063      	beq.n	8003f9e <enableCntxMenu+0xd6>
//		clear rect
		lcdRect(0, 200, 5, 8+(*zekton24font.font_Height)*(actionsNum-1)+28, 0);
 8003ed6:	231b      	movs	r3, #27
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b34      	ldr	r3, [pc, #208]	; (8003fac <enableCntxMenu+0xe4>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
 8003ee4:	3324      	adds	r3, #36	; 0x24
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	9200      	str	r2, [sp, #0]
 8003eea:	2205      	movs	r2, #5
 8003eec:	21c8      	movs	r1, #200	; 0xc8
 8003eee:	2000      	movs	r0, #0
 8003ef0:	f7fe ff1e 	bl	8002d30 <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	2206      	movs	r2, #6
 8003ef8:	21c8      	movs	r1, #200	; 0xc8
 8003efa:	2000      	movs	r0, #0
 8003efc:	f7fe fdc2 	bl	8002a84 <lcdHLine>
		lcdHLine(0, 200, 8+(*zekton24font.font_Height)*(actionsNum-1)+28, 1);
 8003f00:	231b      	movs	r3, #27
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b29      	ldr	r3, [pc, #164]	; (8003fac <enableCntxMenu+0xe4>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003f12:	2301      	movs	r3, #1
 8003f14:	21c8      	movs	r1, #200	; 0xc8
 8003f16:	2000      	movs	r0, #0
 8003f18:	f7fe fdb4 	bl	8002a84 <lcdHLine>
//		create list
		char item[30] = {0};
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	1d3b      	adds	r3, r7, #4
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	609a      	str	r2, [r3, #8]
 8003f2a:	60da      	str	r2, [r3, #12]
 8003f2c:	611a      	str	r2, [r3, #16]
 8003f2e:	615a      	str	r2, [r3, #20]
 8003f30:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 8003f32:	2300      	movs	r3, #0
 8003f34:	77fb      	strb	r3, [r7, #31]
 8003f36:	e018      	b.n	8003f6a <enableCntxMenu+0xa2>
			sprintf(&item, ContextActions[i]->name);
 8003f38:	7ffb      	ldrb	r3, [r7, #31]
 8003f3a:	4a1d      	ldr	r2, [pc, #116]	; (8003fb0 <enableCntxMenu+0xe8>)
 8003f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f40:	461a      	mov	r2, r3
 8003f42:	463b      	mov	r3, r7
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f008 ff9e 	bl	800ce88 <siprintf>
			lcdPutStr(5, 10+(*zekton24font.font_Height)*i, item, zekton24font);
 8003f4c:	221b      	movs	r2, #27
 8003f4e:	7ffb      	ldrb	r3, [r7, #31]
 8003f50:	fb13 f302 	smulbb	r3, r3, r2
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	330a      	adds	r3, #10
 8003f58:	b2d9      	uxtb	r1, r3
 8003f5a:	463a      	mov	r2, r7
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <enableCntxMenu+0xec>)
 8003f5e:	2005      	movs	r0, #5
 8003f60:	f7fe f926 	bl	80021b0 <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 8003f64:	7ffb      	ldrb	r3, [r7, #31]
 8003f66:	3301      	adds	r3, #1
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	4b10      	ldr	r3, [pc, #64]	; (8003fac <enableCntxMenu+0xe4>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	7ffa      	ldrb	r2, [r7, #31]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d3e1      	bcc.n	8003f38 <enableCntxMenu+0x70>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*zekton24font.font_Height)*cntxPosition, 33+(*zekton24font.font_Height)*cntxPosition, 2);
 8003f74:	231b      	movs	r3, #27
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <enableCntxMenu+0xf0>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	fb02 f303 	mul.w	r3, r2, r3
 8003f80:	f103 0208 	add.w	r2, r3, #8
 8003f84:	231b      	movs	r3, #27
 8003f86:	4619      	mov	r1, r3
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <enableCntxMenu+0xf0>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	3321      	adds	r3, #33	; 0x21
 8003f92:	2102      	movs	r1, #2
 8003f94:	9100      	str	r1, [sp, #0]
 8003f96:	21c8      	movs	r1, #200	; 0xc8
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f7fe fec9 	bl	8002d30 <lcdRect>

	}
}
 8003f9e:	bf00      	nop
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20003775 	.word	0x20003775
 8003fac:	20000184 	.word	0x20000184
 8003fb0:	200001dc 	.word	0x200001dc
 8003fb4:	08014464 	.word	0x08014464
 8003fb8:	20003776 	.word	0x20003776

08003fbc <setDefaultClbcks>:

#include "gpsModule.h"
#include "font13.h"
#include "digits5x9.h"

static void setDefaultClbcks(void){
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <setDefaultClbcks+0x1c>)
 8003fc2:	4a06      	ldr	r2, [pc, #24]	; (8003fdc <setDefaultClbcks+0x20>)
 8003fc4:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <setDefaultClbcks+0x24>)
 8003fc8:	4a06      	ldr	r2, [pc, #24]	; (8003fe4 <setDefaultClbcks+0x28>)
 8003fca:	611a      	str	r2, [r3, #16]
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000560 	.word	0x20000560
 8003fdc:	08001d15 	.word	0x08001d15
 8003fe0:	200005a8 	.word	0x200005a8
 8003fe4:	08001d25 	.word	0x08001d25

08003fe8 <gpsSetup>:

void gpsSetup(void){
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8003fec:	f7ff ffe6 	bl	8003fbc <setDefaultClbcks>

}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <gpsMain>:

void gpsMain(void){
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af04      	add	r7, sp, #16
//	for(i=0; i<12; i++){
//		for(j=0; j<20; j++){
//			lcdHLine2(i, i+j, i*20+j, 1, 3);
//		}
//	}
lcdRect(0,399,25,80,1);
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	2350      	movs	r3, #80	; 0x50
 8004000:	2219      	movs	r2, #25
 8004002:	f240 118f 	movw	r1, #399	; 0x18f
 8004006:	2000      	movs	r0, #0
 8004008:	f7fe fe92 	bl	8002d30 <lcdRect>
lcdRect(0,399,120,180,1);
 800400c:	2301      	movs	r3, #1
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	23b4      	movs	r3, #180	; 0xb4
 8004012:	2278      	movs	r2, #120	; 0x78
 8004014:	f240 118f 	movw	r1, #399	; 0x18f
 8004018:	2000      	movs	r0, #0
 800401a:	f7fe fe89 	bl	8002d30 <lcdRect>
	lcdRect2(10, 50, 10, 50,     3, 0, 1);
 800401e:	2301      	movs	r3, #1
 8004020:	9302      	str	r3, [sp, #8]
 8004022:	2300      	movs	r3, #0
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	2303      	movs	r3, #3
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	2332      	movs	r3, #50	; 0x32
 800402c:	220a      	movs	r2, #10
 800402e:	2132      	movs	r1, #50	; 0x32
 8004030:	200a      	movs	r0, #10
 8004032:	f7fe fea2 	bl	8002d7a <lcdRect2>
	lcdRect2(60, 100, 10, 50,    3, 1, 1);
 8004036:	2301      	movs	r3, #1
 8004038:	9302      	str	r3, [sp, #8]
 800403a:	2301      	movs	r3, #1
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	2303      	movs	r3, #3
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2332      	movs	r3, #50	; 0x32
 8004044:	220a      	movs	r2, #10
 8004046:	2164      	movs	r1, #100	; 0x64
 8004048:	203c      	movs	r0, #60	; 0x3c
 800404a:	f7fe fe96 	bl	8002d7a <lcdRect2>
	lcdRect2(110, 150, 10, 50,   3, 2, 1);
 800404e:	2301      	movs	r3, #1
 8004050:	9302      	str	r3, [sp, #8]
 8004052:	2302      	movs	r3, #2
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	2303      	movs	r3, #3
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2332      	movs	r3, #50	; 0x32
 800405c:	220a      	movs	r2, #10
 800405e:	2196      	movs	r1, #150	; 0x96
 8004060:	206e      	movs	r0, #110	; 0x6e
 8004062:	f7fe fe8a 	bl	8002d7a <lcdRect2>
	lcdRect2(160, 200, 10, 50,   3, 3, 1);
 8004066:	2301      	movs	r3, #1
 8004068:	9302      	str	r3, [sp, #8]
 800406a:	2303      	movs	r3, #3
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	2303      	movs	r3, #3
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2332      	movs	r3, #50	; 0x32
 8004074:	220a      	movs	r2, #10
 8004076:	21c8      	movs	r1, #200	; 0xc8
 8004078:	20a0      	movs	r0, #160	; 0xa0
 800407a:	f7fe fe7e 	bl	8002d7a <lcdRect2>
	lcdRect2(210, 250, 10, 50,   3, 4, 1);
 800407e:	2301      	movs	r3, #1
 8004080:	9302      	str	r3, [sp, #8]
 8004082:	2304      	movs	r3, #4
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	2303      	movs	r3, #3
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2332      	movs	r3, #50	; 0x32
 800408c:	220a      	movs	r2, #10
 800408e:	21fa      	movs	r1, #250	; 0xfa
 8004090:	20d2      	movs	r0, #210	; 0xd2
 8004092:	f7fe fe72 	bl	8002d7a <lcdRect2>
	lcdRect2(260, 300, 10, 50,   3, 5, 1);
 8004096:	2301      	movs	r3, #1
 8004098:	9302      	str	r3, [sp, #8]
 800409a:	2305      	movs	r3, #5
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	2303      	movs	r3, #3
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	2332      	movs	r3, #50	; 0x32
 80040a4:	220a      	movs	r2, #10
 80040a6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80040aa:	f44f 7082 	mov.w	r0, #260	; 0x104
 80040ae:	f7fe fe64 	bl	8002d7a <lcdRect2>
	lcdRect2(310, 350, 10, 50,   3, 6, 1);
 80040b2:	2301      	movs	r3, #1
 80040b4:	9302      	str	r3, [sp, #8]
 80040b6:	2306      	movs	r3, #6
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	2303      	movs	r3, #3
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	2332      	movs	r3, #50	; 0x32
 80040c0:	220a      	movs	r2, #10
 80040c2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80040c6:	f44f 709b 	mov.w	r0, #310	; 0x136
 80040ca:	f7fe fe56 	bl	8002d7a <lcdRect2>
	lcdRect2(10, 50, 60, 100,    3, 7, 1);
 80040ce:	2301      	movs	r3, #1
 80040d0:	9302      	str	r3, [sp, #8]
 80040d2:	2307      	movs	r3, #7
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	2303      	movs	r3, #3
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2364      	movs	r3, #100	; 0x64
 80040dc:	223c      	movs	r2, #60	; 0x3c
 80040de:	2132      	movs	r1, #50	; 0x32
 80040e0:	200a      	movs	r0, #10
 80040e2:	f7fe fe4a 	bl	8002d7a <lcdRect2>
	lcdRect2(60, 100, 60, 100,   3, 8, 1);
 80040e6:	2301      	movs	r3, #1
 80040e8:	9302      	str	r3, [sp, #8]
 80040ea:	2308      	movs	r3, #8
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	2303      	movs	r3, #3
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2364      	movs	r3, #100	; 0x64
 80040f4:	223c      	movs	r2, #60	; 0x3c
 80040f6:	2164      	movs	r1, #100	; 0x64
 80040f8:	203c      	movs	r0, #60	; 0x3c
 80040fa:	f7fe fe3e 	bl	8002d7a <lcdRect2>
	lcdRect2(110, 150, 60, 100,  3, 9, 1);
 80040fe:	2301      	movs	r3, #1
 8004100:	9302      	str	r3, [sp, #8]
 8004102:	2309      	movs	r3, #9
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	2303      	movs	r3, #3
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	2364      	movs	r3, #100	; 0x64
 800410c:	223c      	movs	r2, #60	; 0x3c
 800410e:	2196      	movs	r1, #150	; 0x96
 8004110:	206e      	movs	r0, #110	; 0x6e
 8004112:	f7fe fe32 	bl	8002d7a <lcdRect2>
	lcdRect2(160, 200, 60, 100,  3, 10, 1);
 8004116:	2301      	movs	r3, #1
 8004118:	9302      	str	r3, [sp, #8]
 800411a:	230a      	movs	r3, #10
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	2303      	movs	r3, #3
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	2364      	movs	r3, #100	; 0x64
 8004124:	223c      	movs	r2, #60	; 0x3c
 8004126:	21c8      	movs	r1, #200	; 0xc8
 8004128:	20a0      	movs	r0, #160	; 0xa0
 800412a:	f7fe fe26 	bl	8002d7a <lcdRect2>
	lcdRect2(210, 250, 60, 100,  3, 11, 1);
 800412e:	2301      	movs	r3, #1
 8004130:	9302      	str	r3, [sp, #8]
 8004132:	230b      	movs	r3, #11
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	2303      	movs	r3, #3
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2364      	movs	r3, #100	; 0x64
 800413c:	223c      	movs	r2, #60	; 0x3c
 800413e:	21fa      	movs	r1, #250	; 0xfa
 8004140:	20d2      	movs	r0, #210	; 0xd2
 8004142:	f7fe fe1a 	bl	8002d7a <lcdRect2>
	lcdRect2(260, 300, 60, 100,  3, 12, 1);
 8004146:	2301      	movs	r3, #1
 8004148:	9302      	str	r3, [sp, #8]
 800414a:	230c      	movs	r3, #12
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	2303      	movs	r3, #3
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	2364      	movs	r3, #100	; 0x64
 8004154:	223c      	movs	r2, #60	; 0x3c
 8004156:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800415a:	f44f 7082 	mov.w	r0, #260	; 0x104
 800415e:	f7fe fe0c 	bl	8002d7a <lcdRect2>
	lcdRect2(310, 350, 60, 100,  3, 13, 1);
 8004162:	2301      	movs	r3, #1
 8004164:	9302      	str	r3, [sp, #8]
 8004166:	230d      	movs	r3, #13
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	2303      	movs	r3, #3
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	2364      	movs	r3, #100	; 0x64
 8004170:	223c      	movs	r2, #60	; 0x3c
 8004172:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004176:	f44f 709b 	mov.w	r0, #310	; 0x136
 800417a:	f7fe fdfe 	bl	8002d7a <lcdRect2>
	lcdRect2(10, 50, 110, 150,   3, 14, 1);
 800417e:	2301      	movs	r3, #1
 8004180:	9302      	str	r3, [sp, #8]
 8004182:	230e      	movs	r3, #14
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	2303      	movs	r3, #3
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	2396      	movs	r3, #150	; 0x96
 800418c:	226e      	movs	r2, #110	; 0x6e
 800418e:	2132      	movs	r1, #50	; 0x32
 8004190:	200a      	movs	r0, #10
 8004192:	f7fe fdf2 	bl	8002d7a <lcdRect2>
	lcdRect2(60, 100, 110, 150,  3, 15, 1);
 8004196:	2301      	movs	r3, #1
 8004198:	9302      	str	r3, [sp, #8]
 800419a:	230f      	movs	r3, #15
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	2303      	movs	r3, #3
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	2396      	movs	r3, #150	; 0x96
 80041a4:	226e      	movs	r2, #110	; 0x6e
 80041a6:	2164      	movs	r1, #100	; 0x64
 80041a8:	203c      	movs	r0, #60	; 0x3c
 80041aa:	f7fe fde6 	bl	8002d7a <lcdRect2>
	lcdRect2(110, 150, 110, 150, 3, 16, 1);
 80041ae:	2301      	movs	r3, #1
 80041b0:	9302      	str	r3, [sp, #8]
 80041b2:	2310      	movs	r3, #16
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	2303      	movs	r3, #3
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	2396      	movs	r3, #150	; 0x96
 80041bc:	226e      	movs	r2, #110	; 0x6e
 80041be:	2196      	movs	r1, #150	; 0x96
 80041c0:	206e      	movs	r0, #110	; 0x6e
 80041c2:	f7fe fdda 	bl	8002d7a <lcdRect2>
	lcdRect2(160, 200, 110, 150, 3, 17, 1);
 80041c6:	2301      	movs	r3, #1
 80041c8:	9302      	str	r3, [sp, #8]
 80041ca:	2311      	movs	r3, #17
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	2303      	movs	r3, #3
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	2396      	movs	r3, #150	; 0x96
 80041d4:	226e      	movs	r2, #110	; 0x6e
 80041d6:	21c8      	movs	r1, #200	; 0xc8
 80041d8:	20a0      	movs	r0, #160	; 0xa0
 80041da:	f7fe fdce 	bl	8002d7a <lcdRect2>
	lcdRect2(210, 250, 110, 150, 3, 18, 1);
 80041de:	2301      	movs	r3, #1
 80041e0:	9302      	str	r3, [sp, #8]
 80041e2:	2312      	movs	r3, #18
 80041e4:	9301      	str	r3, [sp, #4]
 80041e6:	2303      	movs	r3, #3
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	2396      	movs	r3, #150	; 0x96
 80041ec:	226e      	movs	r2, #110	; 0x6e
 80041ee:	21fa      	movs	r1, #250	; 0xfa
 80041f0:	20d2      	movs	r0, #210	; 0xd2
 80041f2:	f7fe fdc2 	bl	8002d7a <lcdRect2>
	lcdRect2(260, 300, 110, 150, 3, 19, 1);
 80041f6:	2301      	movs	r3, #1
 80041f8:	9302      	str	r3, [sp, #8]
 80041fa:	2313      	movs	r3, #19
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	2303      	movs	r3, #3
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	2396      	movs	r3, #150	; 0x96
 8004204:	226e      	movs	r2, #110	; 0x6e
 8004206:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800420a:	f44f 7082 	mov.w	r0, #260	; 0x104
 800420e:	f7fe fdb4 	bl	8002d7a <lcdRect2>
	lcdRect2(310, 350, 110, 150, 3, 20, 1);
 8004212:	2301      	movs	r3, #1
 8004214:	9302      	str	r3, [sp, #8]
 8004216:	2314      	movs	r3, #20
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	2303      	movs	r3, #3
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2396      	movs	r3, #150	; 0x96
 8004220:	226e      	movs	r2, #110	; 0x6e
 8004222:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004226:	f44f 709b 	mov.w	r0, #310	; 0x136
 800422a:	f7fe fda6 	bl	8002d7a <lcdRect2>
//	lcdRect2(50, 120, 40, 120, 1, 1);
	lcdRect2(10, 350, 160, 200, 1, 4);
 800422e:	2304      	movs	r3, #4
 8004230:	9301      	str	r3, [sp, #4]
 8004232:	2301      	movs	r3, #1
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	23c8      	movs	r3, #200	; 0xc8
 8004238:	22a0      	movs	r2, #160	; 0xa0
 800423a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800423e:	200a      	movs	r0, #10
 8004240:	f7fe fd9b 	bl	8002d7a <lcdRect2>

//	for(pix=0; pix<=200; pix++){
//		lcdHLine(pix, 2*pix, pix, 1);
//	}
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <setDefaultClbcks>:
	testTime.tm_mday--;
	mktime(&testTime);

}

static void setDefaultClbcks(void){
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <setDefaultClbcks+0x1c>)
 8004252:	4a06      	ldr	r2, [pc, #24]	; (800426c <setDefaultClbcks+0x20>)
 8004254:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <setDefaultClbcks+0x24>)
 8004258:	4a06      	ldr	r2, [pc, #24]	; (8004274 <setDefaultClbcks+0x28>)
 800425a:	611a      	str	r2, [r3, #16]
//	btn_B1.onContinuousShortPressHandler = &addDay;
//	btn_B3.onContinuousShortPressHandler = &remDay;
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000560 	.word	0x20000560
 800426c:	08001d15 	.word	0x08001d15
 8004270:	200005a8 	.word	0x200005a8
 8004274:	08001d25 	.word	0x08001d25

08004278 <localSetup>:
void localSetup(void){
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 800427c:	f7ff ffe6 	bl	800424c <setDefaultClbcks>
	testTime.tm_hour = RtcTime.Hours;
 8004280:	4b11      	ldr	r3, [pc, #68]	; (80042c8 <localSetup+0x50>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	4b11      	ldr	r3, [pc, #68]	; (80042cc <localSetup+0x54>)
 8004288:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 800428a:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <localSetup+0x50>)
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	461a      	mov	r2, r3
 8004290:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <localSetup+0x54>)
 8004292:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <localSetup+0x50>)
 8004296:	789b      	ldrb	r3, [r3, #2]
 8004298:	461a      	mov	r2, r3
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <localSetup+0x54>)
 800429c:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 800429e:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <localSetup+0x58>)
 80042a0:	789b      	ldrb	r3, [r3, #2]
 80042a2:	461a      	mov	r2, r3
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <localSetup+0x54>)
 80042a6:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 80042a8:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <localSetup+0x58>)
 80042aa:	785b      	ldrb	r3, [r3, #1]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	4a07      	ldr	r2, [pc, #28]	; (80042cc <localSetup+0x54>)
 80042b0:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 80042b2:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <localSetup+0x58>)
 80042b4:	78db      	ldrb	r3, [r3, #3]
 80042b6:	3364      	adds	r3, #100	; 0x64
 80042b8:	4a04      	ldr	r2, [pc, #16]	; (80042cc <localSetup+0x54>)
 80042ba:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 80042bc:	4803      	ldr	r0, [pc, #12]	; (80042cc <localSetup+0x54>)
 80042be:	f007 fd95 	bl	800bdec <mktime>
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20003574 	.word	0x20003574
 80042cc:	2000377c 	.word	0x2000377c
 80042d0:	20003588 	.word	0x20003588
 80042d4:	00000000 	.word	0x00000000

080042d8 <localMain>:


void localMain(void){
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b0c2      	sub	sp, #264	; 0x108
 80042de:	af00      	add	r7, sp, #0
	testTime.tm_hour = RtcTime.Hours;
 80042e0:	4bdd      	ldr	r3, [pc, #884]	; (8004658 <localMain+0x380>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	4bdd      	ldr	r3, [pc, #884]	; (800465c <localMain+0x384>)
 80042e8:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 80042ea:	4bdb      	ldr	r3, [pc, #876]	; (8004658 <localMain+0x380>)
 80042ec:	785b      	ldrb	r3, [r3, #1]
 80042ee:	461a      	mov	r2, r3
 80042f0:	4bda      	ldr	r3, [pc, #872]	; (800465c <localMain+0x384>)
 80042f2:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 80042f4:	4bd8      	ldr	r3, [pc, #864]	; (8004658 <localMain+0x380>)
 80042f6:	789b      	ldrb	r3, [r3, #2]
 80042f8:	461a      	mov	r2, r3
 80042fa:	4bd8      	ldr	r3, [pc, #864]	; (800465c <localMain+0x384>)
 80042fc:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 80042fe:	4bd8      	ldr	r3, [pc, #864]	; (8004660 <localMain+0x388>)
 8004300:	789b      	ldrb	r3, [r3, #2]
 8004302:	461a      	mov	r2, r3
 8004304:	4bd5      	ldr	r3, [pc, #852]	; (800465c <localMain+0x384>)
 8004306:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8004308:	4bd5      	ldr	r3, [pc, #852]	; (8004660 <localMain+0x388>)
 800430a:	785b      	ldrb	r3, [r3, #1]
 800430c:	3b01      	subs	r3, #1
 800430e:	4ad3      	ldr	r2, [pc, #844]	; (800465c <localMain+0x384>)
 8004310:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 8004312:	4bd3      	ldr	r3, [pc, #844]	; (8004660 <localMain+0x388>)
 8004314:	78db      	ldrb	r3, [r3, #3]
 8004316:	3364      	adds	r3, #100	; 0x64
 8004318:	4ad0      	ldr	r2, [pc, #832]	; (800465c <localMain+0x384>)
 800431a:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 800431c:	48cf      	ldr	r0, [pc, #828]	; (800465c <localMain+0x384>)
 800431e:	f007 fd65 	bl	800bdec <mktime>

	char textBuffer[50] = {0};
 8004322:	2300      	movs	r3, #0
 8004324:	657b      	str	r3, [r7, #84]	; 0x54
 8004326:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800432a:	222e      	movs	r2, #46	; 0x2e
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f007 fc7c 	bl	800bc2c <memset>
	char textBuffer2[50] = {0};
 8004334:	2300      	movs	r3, #0
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800433c:	222e      	movs	r2, #46	; 0x2e
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f007 fc73 	bl	800bc2c <memset>
	uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 8004346:	4bc5      	ldr	r3, [pc, #788]	; (800465c <localMain+0x384>)
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	1d9a      	adds	r2, r3, #6
 800434c:	4bc5      	ldr	r3, [pc, #788]	; (8004664 <localMain+0x38c>)
 800434e:	fb83 1302 	smull	r1, r3, r3, r2
 8004352:	4413      	add	r3, r2
 8004354:	1099      	asrs	r1, r3, #2
 8004356:	17d3      	asrs	r3, r2, #31
 8004358:	1ac9      	subs	r1, r1, r3
 800435a:	460b      	mov	r3, r1
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	1a5b      	subs	r3, r3, r1
 8004360:	1ad1      	subs	r1, r2, r3
 8004362:	b2cb      	uxtb	r3, r1
 8004364:	3301      	adds	r3, #1
 8004366:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 800436a:	4bbc      	ldr	r3, [pc, #752]	; (800465c <localMain+0x384>)
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f103 0208 	add.w	r2, r3, #8
 8004372:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	4aba      	ldr	r2, [pc, #744]	; (8004664 <localMain+0x38c>)
 800437a:	fb82 1203 	smull	r1, r2, r2, r3
 800437e:	441a      	add	r2, r3
 8004380:	1092      	asrs	r2, r2, #2
 8004382:	17db      	asrs	r3, r3, #31
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
	sprintf(&textBuffer, "week %d day %d", weekOfTheYear, testTime.tm_yday+1);
 800438a:	f897 20fe 	ldrb.w	r2, [r7, #254]	; 0xfe
 800438e:	4bb3      	ldr	r3, [pc, #716]	; (800465c <localMain+0x384>)
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	3301      	adds	r3, #1
 8004394:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004398:	49b3      	ldr	r1, [pc, #716]	; (8004668 <localMain+0x390>)
 800439a:	f008 fd75 	bl	800ce88 <siprintf>
	lcdPutStr(10, 10, textBuffer, zekton12font);
 800439e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80043a2:	4bb2      	ldr	r3, [pc, #712]	; (800466c <localMain+0x394>)
 80043a4:	210a      	movs	r1, #10
 80043a6:	200a      	movs	r0, #10
 80043a8:	f7fd ff02 	bl	80021b0 <lcdPutStr>

	sprintf(&textBuffer, asctime(&testTime));
 80043ac:	48ab      	ldr	r0, [pc, #684]	; (800465c <localMain+0x384>)
 80043ae:	f007 fb83 	bl	800bab8 <asctime>
 80043b2:	4602      	mov	r2, r0
 80043b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f008 fd64 	bl	800ce88 <siprintf>
	lcdPutStr(170, 10, textBuffer, smallestFont);
 80043c0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80043c4:	4baa      	ldr	r3, [pc, #680]	; (8004670 <localMain+0x398>)
 80043c6:	210a      	movs	r1, #10
 80043c8:	20aa      	movs	r0, #170	; 0xaa
 80043ca:	f7fd fef1 	bl	80021b0 <lcdPutStr>
	strftime(&textBuffer, 40, "%Z day:%j week:%U", &testTime);
 80043ce:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80043d2:	4ba2      	ldr	r3, [pc, #648]	; (800465c <localMain+0x384>)
 80043d4:	4aa7      	ldr	r2, [pc, #668]	; (8004674 <localMain+0x39c>)
 80043d6:	2128      	movs	r1, #40	; 0x28
 80043d8:	f009 fb20 	bl	800da1c <strftime>
	lcdPutStr(170, 22, textBuffer, smallestFont);
 80043dc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80043e0:	4ba3      	ldr	r3, [pc, #652]	; (8004670 <localMain+0x398>)
 80043e2:	2116      	movs	r1, #22
 80043e4:	20aa      	movs	r0, #170	; 0xaa
 80043e6:	f7fd fee3 	bl	80021b0 <lcdPutStr>

	uint8_t hhour = testTime.tm_hour;
 80043ea:	4b9c      	ldr	r3, [pc, #624]	; (800465c <localMain+0x384>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	uint8_t mmin = testTime.tm_min;
 80043f2:	4b9a      	ldr	r3, [pc, #616]	; (800465c <localMain+0x384>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t ssec = testTime.tm_sec;
 80043fa:	4b98      	ldr	r3, [pc, #608]	; (800465c <localMain+0x384>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	int timezone = 2;		// [h] east+ west-
 8004402:	2302      	movs	r3, #2
 8004404:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int dayOfTheYear = testTime.tm_yday+1;
 8004408:	4b94      	ldr	r3, [pc, #592]	; (800465c <localMain+0x384>)
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	3301      	adds	r3, #1
 800440e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	// fractional year = gamma [rad]
	float fyear = (2*M_PI/365)*(dayOfTheYear-1+(hhour-timezone-12)/24);
 8004412:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004416:	1e5a      	subs	r2, r3, #1
 8004418:	f897 10fd 	ldrb.w	r1, [r7, #253]	; 0xfd
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	1acb      	subs	r3, r1, r3
 8004422:	3b0c      	subs	r3, #12
 8004424:	4994      	ldr	r1, [pc, #592]	; (8004678 <localMain+0x3a0>)
 8004426:	fb81 0103 	smull	r0, r1, r1, r3
 800442a:	1089      	asrs	r1, r1, #2
 800442c:	17db      	asrs	r3, r3, #31
 800442e:	1acb      	subs	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc f890 	bl	8000558 <__aeabi_i2d>
 8004438:	a371      	add	r3, pc, #452	; (adr r3, 8004600 <localMain+0x328>)
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	f7fc f8f5 	bl	800062c <__aeabi_dmul>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4610      	mov	r0, r2
 8004448:	4619      	mov	r1, r3
 800444a:	f7fc fbc7 	bl	8000bdc <__aeabi_d2f>
 800444e:	4603      	mov	r3, r0
 8004450:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// equation of time [min]
	float eqtime = 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 8004454:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8004458:	f7fc f890 	bl	800057c <__aeabi_f2d>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	ec43 2b10 	vmov	d0, r2, r3
 8004464:	f00c fa14 	bl	8010890 <cos>
 8004468:	ec51 0b10 	vmov	r0, r1, d0
 800446c:	a366      	add	r3, pc, #408	; (adr r3, 8004608 <localMain+0x330>)
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	f7fc f8db 	bl	800062c <__aeabi_dmul>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	a364      	add	r3, pc, #400	; (adr r3, 8004610 <localMain+0x338>)
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f7fb ff1c 	bl	80002c0 <__adddf3>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4690      	mov	r8, r2
 800448e:	4699      	mov	r9, r3
 8004490:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8004494:	f7fc f872 	bl	800057c <__aeabi_f2d>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	ec43 2b10 	vmov	d0, r2, r3
 80044a0:	f00c fa4a 	bl	8010938 <sin>
 80044a4:	ec51 0b10 	vmov	r0, r1, d0
 80044a8:	a35b      	add	r3, pc, #364	; (adr r3, 8004618 <localMain+0x340>)
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	f7fc f8bd 	bl	800062c <__aeabi_dmul>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4640      	mov	r0, r8
 80044b8:	4649      	mov	r1, r9
 80044ba:	f7fb feff 	bl	80002bc <__aeabi_dsub>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4690      	mov	r8, r2
 80044c4:	4699      	mov	r9, r3
 80044c6:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80044ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80044ce:	ee17 0a90 	vmov	r0, s15
 80044d2:	f7fc f853 	bl	800057c <__aeabi_f2d>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	ec43 2b10 	vmov	d0, r2, r3
 80044de:	f00c f9d7 	bl	8010890 <cos>
 80044e2:	ec51 0b10 	vmov	r0, r1, d0
 80044e6:	a34e      	add	r3, pc, #312	; (adr r3, 8004620 <localMain+0x348>)
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f7fc f89e 	bl	800062c <__aeabi_dmul>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4640      	mov	r0, r8
 80044f6:	4649      	mov	r1, r9
 80044f8:	f7fb fee0 	bl	80002bc <__aeabi_dsub>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4690      	mov	r8, r2
 8004502:	4699      	mov	r9, r3
 8004504:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004508:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800450c:	ee17 0a90 	vmov	r0, s15
 8004510:	f7fc f834 	bl	800057c <__aeabi_f2d>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	ec43 2b10 	vmov	d0, r2, r3
 800451c:	f00c fa0c 	bl	8010938 <sin>
 8004520:	ec51 0b10 	vmov	r0, r1, d0
 8004524:	a340      	add	r3, pc, #256	; (adr r3, 8004628 <localMain+0x350>)
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	f7fc f87f 	bl	800062c <__aeabi_dmul>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4640      	mov	r0, r8
 8004534:	4649      	mov	r1, r9
 8004536:	f7fb fec1 	bl	80002bc <__aeabi_dsub>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	a33b      	add	r3, pc, #236	; (adr r3, 8004630 <localMain+0x358>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f7fc f870 	bl	800062c <__aeabi_dmul>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4610      	mov	r0, r2
 8004552:	4619      	mov	r1, r3
 8004554:	f7fc fb42 	bl	8000bdc <__aeabi_d2f>
 8004558:	4603      	mov	r3, r0
 800455a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	// solar declination angle [rad]
	float decl = 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 800455e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8004562:	f7fc f80b 	bl	800057c <__aeabi_f2d>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	ec43 2b10 	vmov	d0, r2, r3
 800456e:	f00c f98f 	bl	8010890 <cos>
 8004572:	ec51 0b10 	vmov	r0, r1, d0
 8004576:	a330      	add	r3, pc, #192	; (adr r3, 8004638 <localMain+0x360>)
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	f7fc f856 	bl	800062c <__aeabi_dmul>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	a12e      	add	r1, pc, #184	; (adr r1, 8004640 <localMain+0x368>)
 8004586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800458a:	f7fb fe97 	bl	80002bc <__aeabi_dsub>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4690      	mov	r8, r2
 8004594:	4699      	mov	r9, r3
 8004596:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800459a:	f7fb ffef 	bl	800057c <__aeabi_f2d>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	ec43 2b10 	vmov	d0, r2, r3
 80045a6:	f00c f9c7 	bl	8010938 <sin>
 80045aa:	ec51 0b10 	vmov	r0, r1, d0
 80045ae:	a326      	add	r3, pc, #152	; (adr r3, 8004648 <localMain+0x370>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fc f83a 	bl	800062c <__aeabi_dmul>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4640      	mov	r0, r8
 80045be:	4649      	mov	r1, r9
 80045c0:	f7fb fe7e 	bl	80002c0 <__adddf3>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4690      	mov	r8, r2
 80045ca:	4699      	mov	r9, r3
 80045cc:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80045d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80045d4:	ee17 0a90 	vmov	r0, s15
 80045d8:	f7fb ffd0 	bl	800057c <__aeabi_f2d>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	ec43 2b10 	vmov	d0, r2, r3
 80045e4:	f00c f954 	bl	8010890 <cos>
 80045e8:	ec51 0b10 	vmov	r0, r1, d0
 80045ec:	a318      	add	r3, pc, #96	; (adr r3, 8004650 <localMain+0x378>)
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f7fc f81b 	bl	800062c <__aeabi_dmul>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	e03f      	b.n	800467c <localMain+0x3a4>
 80045fc:	f3af 8000 	nop.w
 8004600:	d4b3ac9a 	.word	0xd4b3ac9a
 8004604:	3f91a099 	.word	0x3f91a099
 8004608:	ba2be059 	.word	0xba2be059
 800460c:	3f5e9af5 	.word	0x3f5e9af5
 8004610:	30553261 	.word	0x30553261
 8004614:	3f13a92a 	.word	0x3f13a92a
 8004618:	83e8576d 	.word	0x83e8576d
 800461c:	3fa06c65 	.word	0x3fa06c65
 8004620:	183f91e6 	.word	0x183f91e6
 8004624:	3f8dee78 	.word	0x3f8dee78
 8004628:	fe260b2d 	.word	0xfe260b2d
 800462c:	3fa4ea28 	.word	0x3fa4ea28
 8004630:	8f5c28f6 	.word	0x8f5c28f6
 8004634:	406ca5c2 	.word	0x406ca5c2
 8004638:	8051c9f7 	.word	0x8051c9f7
 800463c:	3fd99828 	.word	0x3fd99828
 8004640:	7c0f4517 	.word	0x7c0f4517
 8004644:	3f7c560c 	.word	0x3f7c560c
 8004648:	dd50a88f 	.word	0xdd50a88f
 800464c:	3fb1fc5c 	.word	0x3fb1fc5c
 8004650:	cfc829d0 	.word	0xcfc829d0
 8004654:	3f7bae46 	.word	0x3f7bae46
 8004658:	20003574 	.word	0x20003574
 800465c:	2000377c 	.word	0x2000377c
 8004660:	20003588 	.word	0x20003588
 8004664:	92492493 	.word	0x92492493
 8004668:	08013410 	.word	0x08013410
 800466c:	08016748 	.word	0x08016748
 8004670:	080162cc 	.word	0x080162cc
 8004674:	08013420 	.word	0x08013420
 8004678:	2aaaaaab 	.word	0x2aaaaaab
 800467c:	4640      	mov	r0, r8
 800467e:	4649      	mov	r1, r9
 8004680:	f7fb fe1c 	bl	80002bc <__aeabi_dsub>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4690      	mov	r8, r2
 800468a:	4699      	mov	r9, r3
 800468c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004690:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004694:	ee17 0a90 	vmov	r0, s15
 8004698:	f7fb ff70 	bl	800057c <__aeabi_f2d>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	ec43 2b10 	vmov	d0, r2, r3
 80046a4:	f00c f948 	bl	8010938 <sin>
 80046a8:	ec51 0b10 	vmov	r0, r1, d0
 80046ac:	f20f 4378 	addw	r3, pc, #1144	; 0x478
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	f7fb ffba 	bl	800062c <__aeabi_dmul>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4640      	mov	r0, r8
 80046be:	4649      	mov	r1, r9
 80046c0:	f7fb fdfe 	bl	80002c0 <__adddf3>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4690      	mov	r8, r2
 80046ca:	4699      	mov	r9, r3
 80046cc:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80046d0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80046d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046d8:	ee17 0a90 	vmov	r0, s15
 80046dc:	f7fb ff4e 	bl	800057c <__aeabi_f2d>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	ec43 2b10 	vmov	d0, r2, r3
 80046e8:	f00c f8d2 	bl	8010890 <cos>
 80046ec:	ec51 0b10 	vmov	r0, r1, d0
 80046f0:	f20f 433c 	addw	r3, pc, #1084	; 0x43c
 80046f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f8:	f7fb ff98 	bl	800062c <__aeabi_dmul>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4640      	mov	r0, r8
 8004702:	4649      	mov	r1, r9
 8004704:	f7fb fdda 	bl	80002bc <__aeabi_dsub>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4690      	mov	r8, r2
 800470e:	4699      	mov	r9, r3
 8004710:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8004714:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800471c:	ee17 0a90 	vmov	r0, s15
 8004720:	f7fb ff2c 	bl	800057c <__aeabi_f2d>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	ec43 2b10 	vmov	d0, r2, r3
 800472c:	f00c f904 	bl	8010938 <sin>
 8004730:	ec51 0b10 	vmov	r0, r1, d0
 8004734:	f20f 4300 	addw	r3, pc, #1024	; 0x400
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f7fb ff76 	bl	800062c <__aeabi_dmul>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4640      	mov	r0, r8
 8004746:	4649      	mov	r1, r9
 8004748:	f7fb fdba 	bl	80002c0 <__adddf3>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	f7fc fa42 	bl	8000bdc <__aeabi_d2f>
 8004758:	4603      	mov	r3, r0
 800475a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4


	double longitude = 17; 	// [deg]
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	4be9      	ldr	r3, [pc, #932]	; (8004b08 <localMain+0x830>)
 8004764:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	double latitude = 51;	// [deg]
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	4be7      	ldr	r3, [pc, #924]	; (8004b0c <localMain+0x834>)
 800476e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	float time_off = eqtime+4*longitude-60*timezone; // time offset [min]
 8004772:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004776:	f7fb ff01 	bl	800057c <__aeabi_f2d>
 800477a:	4680      	mov	r8, r0
 800477c:	4689      	mov	r9, r1
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	4be3      	ldr	r3, [pc, #908]	; (8004b10 <localMain+0x838>)
 8004784:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004788:	f7fb ff50 	bl	800062c <__aeabi_dmul>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4640      	mov	r0, r8
 8004792:	4649      	mov	r1, r9
 8004794:	f7fb fd94 	bl	80002c0 <__adddf3>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4690      	mov	r8, r2
 800479e:	4699      	mov	r9, r3
 80047a0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80047a4:	4613      	mov	r3, r2
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fb fed3 	bl	8000558 <__aeabi_i2d>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4640      	mov	r0, r8
 80047b8:	4649      	mov	r1, r9
 80047ba:	f7fb fd7f 	bl	80002bc <__aeabi_dsub>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	f7fc fa09 	bl	8000bdc <__aeabi_d2f>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float tst = hhour*60+mmin+(float)ssec/60+time_off; // true solar time [min]
 80047d0:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 80047d4:	4613      	mov	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	461a      	mov	r2, r3
 80047de:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047e2:	4413      	add	r3, r2
 80047e4:	ee07 3a90 	vmov	s15, r3
 80047e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047ec:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80047f0:	ee07 3a90 	vmov	s15, r3
 80047f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f8:	ed9f 6ac6 	vldr	s12, [pc, #792]	; 8004b14 <localMain+0x83c>
 80047fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004804:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8004808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800480c:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 8004810:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8004814:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800481c:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8004b18 <localMain+0x840>
 8004820:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004824:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 8004828:	a3b5      	add	r3, pc, #724	; (adr r3, 8004b00 <localMain+0x828>)
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004832:	f7fb fefb 	bl	800062c <__aeabi_dmul>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	4bb6      	ldr	r3, [pc, #728]	; (8004b1c <localMain+0x844>)
 8004844:	f7fc f81c 	bl	8000880 <__aeabi_ddiv>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	ec43 2b17 	vmov	d7, r2, r3
 8004850:	eeb0 0a47 	vmov.f32	s0, s14
 8004854:	eef0 0a67 	vmov.f32	s1, s15
 8004858:	f00c f86e 	bl	8010938 <sin>
 800485c:	ec59 8b10 	vmov	r8, r9, d0
 8004860:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004864:	f7fb fe8a 	bl	800057c <__aeabi_f2d>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	ec43 2b10 	vmov	d0, r2, r3
 8004870:	f00c f862 	bl	8010938 <sin>
 8004874:	ec53 2b10 	vmov	r2, r3, d0
 8004878:	4640      	mov	r0, r8
 800487a:	4649      	mov	r1, r9
 800487c:	f7fb fed6 	bl	800062c <__aeabi_dmul>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4690      	mov	r8, r2
 8004886:	4699      	mov	r9, r3
 8004888:	a39d      	add	r3, pc, #628	; (adr r3, 8004b00 <localMain+0x828>)
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004892:	f7fb fecb 	bl	800062c <__aeabi_dmul>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4610      	mov	r0, r2
 800489c:	4619      	mov	r1, r3
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	4b9e      	ldr	r3, [pc, #632]	; (8004b1c <localMain+0x844>)
 80048a4:	f7fb ffec 	bl	8000880 <__aeabi_ddiv>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	ec43 2b17 	vmov	d7, r2, r3
 80048b0:	eeb0 0a47 	vmov.f32	s0, s14
 80048b4:	eef0 0a67 	vmov.f32	s1, s15
 80048b8:	f00b ffea 	bl	8010890 <cos>
 80048bc:	ec5b ab10 	vmov	sl, fp, d0
 80048c0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80048c4:	f7fb fe5a 	bl	800057c <__aeabi_f2d>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	ec43 2b10 	vmov	d0, r2, r3
 80048d0:	f00b ffde 	bl	8010890 <cos>
 80048d4:	ec53 2b10 	vmov	r2, r3, d0
 80048d8:	4650      	mov	r0, sl
 80048da:	4659      	mov	r1, fp
 80048dc:	f7fb fea6 	bl	800062c <__aeabi_dmul>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4692      	mov	sl, r2
 80048e6:	469b      	mov	fp, r3
 80048e8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80048ec:	f7fb fe46 	bl	800057c <__aeabi_f2d>
 80048f0:	a383      	add	r3, pc, #524	; (adr r3, 8004b00 <localMain+0x828>)
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f7fb fe99 	bl	800062c <__aeabi_dmul>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	4b85      	ldr	r3, [pc, #532]	; (8004b1c <localMain+0x844>)
 8004908:	f7fb ffba 	bl	8000880 <__aeabi_ddiv>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	ec43 2b17 	vmov	d7, r2, r3
 8004914:	eeb0 0a47 	vmov.f32	s0, s14
 8004918:	eef0 0a67 	vmov.f32	s1, s15
 800491c:	f00b ffb8 	bl	8010890 <cos>
 8004920:	ec53 2b10 	vmov	r2, r3, d0
 8004924:	4650      	mov	r0, sl
 8004926:	4659      	mov	r1, fp
 8004928:	f7fb fe80 	bl	800062c <__aeabi_dmul>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4640      	mov	r0, r8
 8004932:	4649      	mov	r1, r9
 8004934:	f7fb fcc4 	bl	80002c0 <__adddf3>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	f7fc f94c 	bl	8000bdc <__aeabi_d2f>
 8004944:	4603      	mov	r3, r0
 8004946:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float phi = acos(cosphi);
 800494a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800494e:	f7fb fe15 	bl	800057c <__aeabi_f2d>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	ec43 2b10 	vmov	d0, r2, r3
 800495a:	f00c f879 	bl	8010a50 <acos>
 800495e:	ec53 2b10 	vmov	r2, r3, d0
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	f7fc f939 	bl	8000bdc <__aeabi_d2f>
 800496a:	4603      	mov	r3, r0
 800496c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float sinphi = sqrt(1-cosphi*cosphi);
 8004970:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004974:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800497c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004980:	ee17 0a90 	vmov	r0, s15
 8004984:	f7fb fdfa 	bl	800057c <__aeabi_f2d>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	ec43 2b10 	vmov	d0, r2, r3
 8004990:	f00c f902 	bl	8010b98 <sqrt>
 8004994:	ec53 2b10 	vmov	r2, r3, d0
 8004998:	4610      	mov	r0, r2
 800499a:	4619      	mov	r1, r3
 800499c:	f7fc f91e 	bl	8000bdc <__aeabi_d2f>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 80049a6:	a356      	add	r3, pc, #344	; (adr r3, 8004b00 <localMain+0x828>)
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80049b0:	f7fb fe3c 	bl	800062c <__aeabi_dmul>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4610      	mov	r0, r2
 80049ba:	4619      	mov	r1, r3
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	4b56      	ldr	r3, [pc, #344]	; (8004b1c <localMain+0x844>)
 80049c2:	f7fb ff5d 	bl	8000880 <__aeabi_ddiv>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	ec43 2b17 	vmov	d7, r2, r3
 80049ce:	eeb0 0a47 	vmov.f32	s0, s14
 80049d2:	eef0 0a67 	vmov.f32	s1, s15
 80049d6:	f00b ffaf 	bl	8010938 <sin>
 80049da:	ec59 8b10 	vmov	r8, r9, d0
 80049de:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80049e2:	f7fb fdcb 	bl	800057c <__aeabi_f2d>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4640      	mov	r0, r8
 80049ec:	4649      	mov	r1, r9
 80049ee:	f7fb fe1d 	bl	800062c <__aeabi_dmul>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4690      	mov	r8, r2
 80049f8:	4699      	mov	r9, r3
 80049fa:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80049fe:	f7fb fdbd 	bl	800057c <__aeabi_f2d>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	ec43 2b10 	vmov	d0, r2, r3
 8004a0a:	f00b ff95 	bl	8010938 <sin>
 8004a0e:	ec53 2b10 	vmov	r2, r3, d0
 8004a12:	4640      	mov	r0, r8
 8004a14:	4649      	mov	r1, r9
 8004a16:	f7fb fc51 	bl	80002bc <__aeabi_dsub>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4614      	mov	r4, r2
 8004a20:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004a24:	a336      	add	r3, pc, #216	; (adr r3, 8004b00 <localMain+0x828>)
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004a2e:	f7fb fdfd 	bl	800062c <__aeabi_dmul>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4610      	mov	r0, r2
 8004a38:	4619      	mov	r1, r3
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	4b37      	ldr	r3, [pc, #220]	; (8004b1c <localMain+0x844>)
 8004a40:	f7fb ff1e 	bl	8000880 <__aeabi_ddiv>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	ec43 2b17 	vmov	d7, r2, r3
 8004a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8004a50:	eef0 0a67 	vmov.f32	s1, s15
 8004a54:	f00b ff1c 	bl	8010890 <cos>
 8004a58:	ec59 8b10 	vmov	r8, r9, d0
 8004a5c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004a60:	f7fb fd8c 	bl	800057c <__aeabi_f2d>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4640      	mov	r0, r8
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	f7fb fdde 	bl	800062c <__aeabi_dmul>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4620      	mov	r0, r4
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7fb ff02 	bl	8000880 <__aeabi_ddiv>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	ec43 2b17 	vmov	d7, r2, r3
 8004a84:	eeb0 0a47 	vmov.f32	s0, s14
 8004a88:	eef0 0a67 	vmov.f32	s1, s15
 8004a8c:	f00b ffe0 	bl	8010a50 <acos>
 8004a90:	ec53 2b10 	vmov	r2, r3, d0
 8004a94:	4610      	mov	r0, r2
 8004a96:	4619      	mov	r1, r3
 8004a98:	f7fc f8a0 	bl	8000bdc <__aeabi_d2f>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef1 7a67 	vneg.f32	s15, s15
 8004aa6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4

	// setting for sunrise/sunset zenith angle [rad]
	double twilightType[] = {0.833, 6, 12, 18}; // twilight, civil, nautical, astronomical
 8004aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ab2:	4a1b      	ldr	r2, [pc, #108]	; (8004b20 <localMain+0x848>)
 8004ab4:	461c      	mov	r4, r3
 8004ab6:	4615      	mov	r5, r2
 8004ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004abc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double zenith = (90+twilightType[0])*M_PI/180;
 8004ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004acc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <localMain+0x84c>)
 8004ad6:	f7fb fbf3 	bl	80002c0 <__adddf3>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	a307      	add	r3, pc, #28	; (adr r3, 8004b00 <localMain+0x828>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f7fb fda0 	bl	800062c <__aeabi_dmul>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4610      	mov	r0, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <localMain+0x844>)
 8004afa:	f7fb fec1 	bl	8000880 <__aeabi_ddiv>
 8004afe:	e01f      	b.n	8004b40 <localMain+0x868>
 8004b00:	54442d18 	.word	0x54442d18
 8004b04:	400921fb 	.word	0x400921fb
 8004b08:	40310000 	.word	0x40310000
 8004b0c:	40498000 	.word	0x40498000
 8004b10:	40100000 	.word	0x40100000
 8004b14:	42700000 	.word	0x42700000
 8004b18:	43340000 	.word	0x43340000
 8004b1c:	40668000 	.word	0x40668000
 8004b20:	080134f8 	.word	0x080134f8
 8004b24:	40568000 	.word	0x40568000
 8004b28:	ab324852 	.word	0xab324852
 8004b2c:	3f4db877 	.word	0x3f4db877
 8004b30:	d9839475 	.word	0xd9839475
 8004b34:	3f661804 	.word	0x3f661804
 8004b38:	e646f156 	.word	0xe646f156
 8004b3c:	3f583f91 	.word	0x3f583f91
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8004b48:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 8004b4c:	f00b fea0 	bl	8010890 <cos>
 8004b50:	ec55 4b10 	vmov	r4, r5, d0
 8004b54:	a3f0      	add	r3, pc, #960	; (adr r3, 8004f18 <localMain+0xc40>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004b5e:	f7fb fd65 	bl	800062c <__aeabi_dmul>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	4bec      	ldr	r3, [pc, #944]	; (8004f20 <localMain+0xc48>)
 8004b70:	f7fb fe86 	bl	8000880 <__aeabi_ddiv>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	ec43 2b17 	vmov	d7, r2, r3
 8004b7c:	eeb0 0a47 	vmov.f32	s0, s14
 8004b80:	eef0 0a67 	vmov.f32	s1, s15
 8004b84:	f00b fe84 	bl	8010890 <cos>
 8004b88:	ec59 8b10 	vmov	r8, r9, d0
 8004b8c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004b90:	f7fb fcf4 	bl	800057c <__aeabi_f2d>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	ec43 2b10 	vmov	d0, r2, r3
 8004b9c:	f00b fe78 	bl	8010890 <cos>
 8004ba0:	ec53 2b10 	vmov	r2, r3, d0
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	f7fb fd40 	bl	800062c <__aeabi_dmul>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	f7fb fe64 	bl	8000880 <__aeabi_ddiv>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4614      	mov	r4, r2
 8004bbe:	461d      	mov	r5, r3
 8004bc0:	a3d5      	add	r3, pc, #852	; (adr r3, 8004f18 <localMain+0xc40>)
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004bca:	f7fb fd2f 	bl	800062c <__aeabi_dmul>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	4bd1      	ldr	r3, [pc, #836]	; (8004f20 <localMain+0xc48>)
 8004bdc:	f7fb fe50 	bl	8000880 <__aeabi_ddiv>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	ec43 2b17 	vmov	d7, r2, r3
 8004be8:	eeb0 0a47 	vmov.f32	s0, s14
 8004bec:	eef0 0a67 	vmov.f32	s1, s15
 8004bf0:	f00b fefa 	bl	80109e8 <tan>
 8004bf4:	ec59 8b10 	vmov	r8, r9, d0
 8004bf8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8004bfc:	f7fb fcbe 	bl	800057c <__aeabi_f2d>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	ec43 2b10 	vmov	d0, r2, r3
 8004c08:	f00b feee 	bl	80109e8 <tan>
 8004c0c:	ec53 2b10 	vmov	r2, r3, d0
 8004c10:	4640      	mov	r0, r8
 8004c12:	4649      	mov	r1, r9
 8004c14:	f7fb fd0a 	bl	800062c <__aeabi_dmul>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	4629      	mov	r1, r5
 8004c20:	f7fb fb4c 	bl	80002bc <__aeabi_dsub>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	ec43 2b17 	vmov	d7, r2, r3
 8004c2c:	eeb0 0a47 	vmov.f32	s0, s14
 8004c30:	eef0 0a67 	vmov.f32	s1, s15
 8004c34:	f00b ff0c 	bl	8010a50 <acos>
 8004c38:	ec53 2b10 	vmov	r2, r3, d0
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f7fb ffcc 	bl	8000bdc <__aeabi_d2f>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//sunrise/sunset/noon times [min]
	int sunrise = 720-4*(longitude+cha*180/M_PI)-eqtime+60*timezone;
 8004c4a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004c4e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8004f24 <localMain+0xc4c>
 8004c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c56:	ee17 0a90 	vmov	r0, s15
 8004c5a:	f7fb fc8f 	bl	800057c <__aeabi_f2d>
 8004c5e:	a3ae      	add	r3, pc, #696	; (adr r3, 8004f18 <localMain+0xc40>)
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f7fb fe0c 	bl	8000880 <__aeabi_ddiv>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4619      	mov	r1, r3
 8004c70:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8004c74:	f7fb fb24 	bl	80002c0 <__adddf3>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	4ba8      	ldr	r3, [pc, #672]	; (8004f28 <localMain+0xc50>)
 8004c86:	f7fb fcd1 	bl	800062c <__aeabi_dmul>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	f04f 0000 	mov.w	r0, #0
 8004c92:	49a6      	ldr	r1, [pc, #664]	; (8004f2c <localMain+0xc54>)
 8004c94:	f7fb fb12 	bl	80002bc <__aeabi_dsub>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	461d      	mov	r5, r3
 8004ca0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004ca4:	f7fb fc6a 	bl	800057c <__aeabi_f2d>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4620      	mov	r0, r4
 8004cae:	4629      	mov	r1, r5
 8004cb0:	f7fb fb04 	bl	80002bc <__aeabi_dsub>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4614      	mov	r4, r2
 8004cba:	461d      	mov	r5, r3
 8004cbc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fb fc45 	bl	8000558 <__aeabi_i2d>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	f7fb faf3 	bl	80002c0 <__adddf3>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4610      	mov	r0, r2
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f7fb ff53 	bl	8000b8c <__aeabi_d2iz>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int sunset = 720-4*(longitude-cha*180/M_PI)-eqtime+60*timezone;
 8004cec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004cf0:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004f24 <localMain+0xc4c>
 8004cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cf8:	ee17 0a90 	vmov	r0, s15
 8004cfc:	f7fb fc3e 	bl	800057c <__aeabi_f2d>
 8004d00:	a385      	add	r3, pc, #532	; (adr r3, 8004f18 <localMain+0xc40>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fdbb 	bl	8000880 <__aeabi_ddiv>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004d12:	f7fb fad3 	bl	80002bc <__aeabi_dsub>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	4b81      	ldr	r3, [pc, #516]	; (8004f28 <localMain+0xc50>)
 8004d24:	f7fb fc82 	bl	800062c <__aeabi_dmul>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	f04f 0000 	mov.w	r0, #0
 8004d30:	497e      	ldr	r1, [pc, #504]	; (8004f2c <localMain+0xc54>)
 8004d32:	f7fb fac3 	bl	80002bc <__aeabi_dsub>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4614      	mov	r4, r2
 8004d3c:	461d      	mov	r5, r3
 8004d3e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004d42:	f7fb fc1b 	bl	800057c <__aeabi_f2d>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	f7fb fab5 	bl	80002bc <__aeabi_dsub>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4614      	mov	r4, r2
 8004d58:	461d      	mov	r5, r3
 8004d5a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004d5e:	4613      	mov	r3, r2
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fb fbf6 	bl	8000558 <__aeabi_i2d>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4620      	mov	r0, r4
 8004d72:	4629      	mov	r1, r5
 8004d74:	f7fb faa4 	bl	80002c0 <__adddf3>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	f7fb ff04 	bl	8000b8c <__aeabi_d2iz>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	int noon = 720-4*longitude-eqtime+60*timezone;
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	4b66      	ldr	r3, [pc, #408]	; (8004f28 <localMain+0xc50>)
 8004d90:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004d94:	f7fb fc4a 	bl	800062c <__aeabi_dmul>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	f04f 0000 	mov.w	r0, #0
 8004da0:	4962      	ldr	r1, [pc, #392]	; (8004f2c <localMain+0xc54>)
 8004da2:	f7fb fa8b 	bl	80002bc <__aeabi_dsub>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4614      	mov	r4, r2
 8004dac:	461d      	mov	r5, r3
 8004dae:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004db2:	f7fb fbe3 	bl	800057c <__aeabi_f2d>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4620      	mov	r0, r4
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	f7fb fa7d 	bl	80002bc <__aeabi_dsub>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4614      	mov	r4, r2
 8004dc8:	461d      	mov	r5, r3
 8004dca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004dce:	4613      	mov	r3, r2
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fb fbbe 	bl	8000558 <__aeabi_i2d>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4620      	mov	r0, r4
 8004de2:	4629      	mov	r1, r5
 8004de4:	f7fb fa6c 	bl	80002c0 <__adddf3>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	f7fb fecc 	bl	8000b8c <__aeabi_d2iz>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
//	sprintf(&textBuffer, "sa:%f cha:%f", sa, cha);
//	lcdPutStr(0, 210, textBuffer, smallestFont);

	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	sprintf(&textBuffer, "Sunrise: %02d:%02d", sunrise/60, sunrise%60);
 8004dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dfe:	4a4c      	ldr	r2, [pc, #304]	; (8004f30 <localMain+0xc58>)
 8004e00:	fb82 1203 	smull	r1, r2, r2, r3
 8004e04:	441a      	add	r2, r3
 8004e06:	1152      	asrs	r2, r2, #5
 8004e08:	17db      	asrs	r3, r3, #31
 8004e0a:	1ad4      	subs	r4, r2, r3
 8004e0c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004e10:	4b47      	ldr	r3, [pc, #284]	; (8004f30 <localMain+0xc58>)
 8004e12:	fb83 1302 	smull	r1, r3, r3, r2
 8004e16:	4413      	add	r3, r2
 8004e18:	1159      	asrs	r1, r3, #5
 8004e1a:	17d3      	asrs	r3, r2, #31
 8004e1c:	1ac9      	subs	r1, r1, r3
 8004e1e:	460b      	mov	r3, r1
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	1a5b      	subs	r3, r3, r1
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	1ad1      	subs	r1, r2, r3
 8004e28:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4622      	mov	r2, r4
 8004e30:	4940      	ldr	r1, [pc, #256]	; (8004f34 <localMain+0xc5c>)
 8004e32:	f008 f829 	bl	800ce88 <siprintf>
	lcdPutStr(10, 28, textBuffer, zekton12font_bold);
 8004e36:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004e3a:	4b3f      	ldr	r3, [pc, #252]	; (8004f38 <localMain+0xc60>)
 8004e3c:	211c      	movs	r1, #28
 8004e3e:	200a      	movs	r0, #10
 8004e40:	f7fd f9b6 	bl	80021b0 <lcdPutStr>
	sprintf(&textBuffer, "Noon: %02d:%02d", noon/60, noon%60);
 8004e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e48:	4a39      	ldr	r2, [pc, #228]	; (8004f30 <localMain+0xc58>)
 8004e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8004e4e:	441a      	add	r2, r3
 8004e50:	1152      	asrs	r2, r2, #5
 8004e52:	17db      	asrs	r3, r3, #31
 8004e54:	1ad4      	subs	r4, r2, r3
 8004e56:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004e5a:	4b35      	ldr	r3, [pc, #212]	; (8004f30 <localMain+0xc58>)
 8004e5c:	fb83 1302 	smull	r1, r3, r3, r2
 8004e60:	4413      	add	r3, r2
 8004e62:	1159      	asrs	r1, r3, #5
 8004e64:	17d3      	asrs	r3, r2, #31
 8004e66:	1ac9      	subs	r1, r1, r3
 8004e68:	460b      	mov	r3, r1
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	1a5b      	subs	r3, r3, r1
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	1ad1      	subs	r1, r2, r3
 8004e72:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004e76:	460b      	mov	r3, r1
 8004e78:	4622      	mov	r2, r4
 8004e7a:	4930      	ldr	r1, [pc, #192]	; (8004f3c <localMain+0xc64>)
 8004e7c:	f008 f804 	bl	800ce88 <siprintf>
	lcdPutStr(10, 44, textBuffer, zekton12font_bold);
 8004e80:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004e84:	4b2c      	ldr	r3, [pc, #176]	; (8004f38 <localMain+0xc60>)
 8004e86:	212c      	movs	r1, #44	; 0x2c
 8004e88:	200a      	movs	r0, #10
 8004e8a:	f7fd f991 	bl	80021b0 <lcdPutStr>
	sprintf(&textBuffer, "Sunset: %02d:%02d", sunset/60, sunset%60);
 8004e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e92:	4a27      	ldr	r2, [pc, #156]	; (8004f30 <localMain+0xc58>)
 8004e94:	fb82 1203 	smull	r1, r2, r2, r3
 8004e98:	441a      	add	r2, r3
 8004e9a:	1152      	asrs	r2, r2, #5
 8004e9c:	17db      	asrs	r3, r3, #31
 8004e9e:	1ad4      	subs	r4, r2, r3
 8004ea0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004ea4:	4b22      	ldr	r3, [pc, #136]	; (8004f30 <localMain+0xc58>)
 8004ea6:	fb83 1302 	smull	r1, r3, r3, r2
 8004eaa:	4413      	add	r3, r2
 8004eac:	1159      	asrs	r1, r3, #5
 8004eae:	17d3      	asrs	r3, r2, #31
 8004eb0:	1ac9      	subs	r1, r1, r3
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	1a5b      	subs	r3, r3, r1
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	1ad1      	subs	r1, r2, r3
 8004ebc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	491e      	ldr	r1, [pc, #120]	; (8004f40 <localMain+0xc68>)
 8004ec6:	f007 ffdf 	bl	800ce88 <siprintf>
	lcdPutStr(10, 60, textBuffer, zekton12font_bold);
 8004eca:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004ece:	4b1a      	ldr	r3, [pc, #104]	; (8004f38 <localMain+0xc60>)
 8004ed0:	213c      	movs	r1, #60	; 0x3c
 8004ed2:	200a      	movs	r0, #10
 8004ed4:	f7fd f96c 	bl	80021b0 <lcdPutStr>

	sprintf(&textBuffer, "solar elevation angle: %02.3f deg", 90-phi*180/M_PI);
 8004ed8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004edc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004f24 <localMain+0xc4c>
 8004ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ee4:	ee17 0a90 	vmov	r0, s15
 8004ee8:	f7fb fb48 	bl	800057c <__aeabi_f2d>
 8004eec:	a30a      	add	r3, pc, #40	; (adr r3, 8004f18 <localMain+0xc40>)
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f7fb fcc5 	bl	8000880 <__aeabi_ddiv>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	f04f 0000 	mov.w	r0, #0
 8004efe:	4911      	ldr	r1, [pc, #68]	; (8004f44 <localMain+0xc6c>)
 8004f00:	f7fb f9dc 	bl	80002bc <__aeabi_dsub>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004f0c:	490e      	ldr	r1, [pc, #56]	; (8004f48 <localMain+0xc70>)
 8004f0e:	f007 ffbb 	bl	800ce88 <siprintf>
 8004f12:	e01b      	b.n	8004f4c <localMain+0xc74>
 8004f14:	f3af 8000 	nop.w
 8004f18:	54442d18 	.word	0x54442d18
 8004f1c:	400921fb 	.word	0x400921fb
 8004f20:	40668000 	.word	0x40668000
 8004f24:	43340000 	.word	0x43340000
 8004f28:	40100000 	.word	0x40100000
 8004f2c:	40868000 	.word	0x40868000
 8004f30:	88888889 	.word	0x88888889
 8004f34:	08013434 	.word	0x08013434
 8004f38:	080171d0 	.word	0x080171d0
 8004f3c:	08013448 	.word	0x08013448
 8004f40:	08013458 	.word	0x08013458
 8004f44:	40568000 	.word	0x40568000
 8004f48:	0801346c 	.word	0x0801346c
	lcdPutStr(10, 80, textBuffer, zekton12font_bold);
 8004f4c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004f50:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <localMain+0xcc8>)
 8004f52:	2150      	movs	r1, #80	; 0x50
 8004f54:	200a      	movs	r0, #10
 8004f56:	f7fd f92b 	bl	80021b0 <lcdPutStr>

	double saDeg;
	if(cha<0) saDeg = -sa*180/M_PI;
 8004f5a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004f5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f66:	d51f      	bpl.n	8004fa8 <localMain+0xcd0>
 8004f68:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004f6c:	eef1 7a67 	vneg.f32	s15, s15
 8004f70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004fa4 <localMain+0xccc>
 8004f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f78:	ee17 0a90 	vmov	r0, s15
 8004f7c:	f7fb fafe 	bl	800057c <__aeabi_f2d>
 8004f80:	a305      	add	r3, pc, #20	; (adr r3, 8004f98 <localMain+0xcc0>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f7fb fc7b 	bl	8000880 <__aeabi_ddiv>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 8004f92:	e025      	b.n	8004fe0 <localMain+0xd08>
 8004f94:	f3af 8000 	nop.w
 8004f98:	54442d18 	.word	0x54442d18
 8004f9c:	400921fb 	.word	0x400921fb
 8004fa0:	080171d0 	.word	0x080171d0
 8004fa4:	43340000 	.word	0x43340000
	else saDeg = 360+sa*180/M_PI;
 8004fa8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004fac:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8004fa4 <localMain+0xccc>
 8004fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fb4:	ee17 0a90 	vmov	r0, s15
 8004fb8:	f7fb fae0 	bl	800057c <__aeabi_f2d>
 8004fbc:	a3db      	add	r3, pc, #876	; (adr r3, 800532c <localMain+0x1054>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f7fb fc5d 	bl	8000880 <__aeabi_ddiv>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4610      	mov	r0, r2
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	4bcb      	ldr	r3, [pc, #812]	; (8005300 <localMain+0x1028>)
 8004fd4:	f7fb f974 	bl	80002c0 <__adddf3>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", saDeg);
 8004fe0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8004fe4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8004fe8:	49c6      	ldr	r1, [pc, #792]	; (8005304 <localMain+0x102c>)
 8004fea:	f007 ff4d 	bl	800ce88 <siprintf>
//	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", fmod(360+sa*180/M_PI, 360));
	lcdPutStr(10, 96, textBuffer, zekton12font_bold);
 8004fee:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004ff2:	4bc5      	ldr	r3, [pc, #788]	; (8005308 <localMain+0x1030>)
 8004ff4:	2160      	movs	r1, #96	; 0x60
 8004ff6:	200a      	movs	r0, #10
 8004ff8:	f7fd f8da 	bl	80021b0 <lcdPutStr>

	double perc = (hhour*60+mmin+(double)ssec/60-sunrise)*100/(sunset-sunrise);
 8004ffc:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005000:	4613      	mov	r3, r2
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	461a      	mov	r2, r3
 800500a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800500e:	4413      	add	r3, r2
 8005010:	4618      	mov	r0, r3
 8005012:	f7fb faa1 	bl	8000558 <__aeabi_i2d>
 8005016:	4604      	mov	r4, r0
 8005018:	460d      	mov	r5, r1
 800501a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800501e:	4618      	mov	r0, r3
 8005020:	f7fb fa8a 	bl	8000538 <__aeabi_ui2d>
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	4bb8      	ldr	r3, [pc, #736]	; (800530c <localMain+0x1034>)
 800502a:	f7fb fc29 	bl	8000880 <__aeabi_ddiv>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4620      	mov	r0, r4
 8005034:	4629      	mov	r1, r5
 8005036:	f7fb f943 	bl	80002c0 <__adddf3>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4614      	mov	r4, r2
 8005040:	461d      	mov	r5, r3
 8005042:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8005046:	f7fb fa87 	bl	8000558 <__aeabi_i2d>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4620      	mov	r0, r4
 8005050:	4629      	mov	r1, r5
 8005052:	f7fb f933 	bl	80002bc <__aeabi_dsub>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4610      	mov	r0, r2
 800505c:	4619      	mov	r1, r3
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	4bab      	ldr	r3, [pc, #684]	; (8005310 <localMain+0x1038>)
 8005064:	f7fb fae2 	bl	800062c <__aeabi_dmul>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4614      	mov	r4, r2
 800506e:	461d      	mov	r5, r3
 8005070:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005074:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	4618      	mov	r0, r3
 800507c:	f7fb fa6c 	bl	8000558 <__aeabi_i2d>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4620      	mov	r0, r4
 8005086:	4629      	mov	r1, r5
 8005088:	f7fb fbfa 	bl	8000880 <__aeabi_ddiv>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	sprintf(&textBuffer, "percentage daylight: %2.3f%%", perc);
 8005094:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005098:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800509c:	499d      	ldr	r1, [pc, #628]	; (8005314 <localMain+0x103c>)
 800509e:	f007 fef3 	bl	800ce88 <siprintf>
	lcdPutStr(10, 116, textBuffer, zekton12font_bold);
 80050a2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80050a6:	4b98      	ldr	r3, [pc, #608]	; (8005308 <localMain+0x1030>)
 80050a8:	2174      	movs	r1, #116	; 0x74
 80050aa:	200a      	movs	r0, #10
 80050ac:	f7fd f880 	bl	80021b0 <lcdPutStr>
	sprintf(&textBuffer, "day length: %02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 80050b0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80050b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	4a97      	ldr	r2, [pc, #604]	; (8005318 <localMain+0x1040>)
 80050bc:	fb82 1203 	smull	r1, r2, r2, r3
 80050c0:	441a      	add	r2, r3
 80050c2:	1152      	asrs	r2, r2, #5
 80050c4:	17db      	asrs	r3, r3, #31
 80050c6:	1ad4      	subs	r4, r2, r3
 80050c8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80050cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050d0:	1ad2      	subs	r2, r2, r3
 80050d2:	4b91      	ldr	r3, [pc, #580]	; (8005318 <localMain+0x1040>)
 80050d4:	fb83 1302 	smull	r1, r3, r3, r2
 80050d8:	4413      	add	r3, r2
 80050da:	1159      	asrs	r1, r3, #5
 80050dc:	17d3      	asrs	r3, r2, #31
 80050de:	1ac9      	subs	r1, r1, r3
 80050e0:	460b      	mov	r3, r1
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	1a5b      	subs	r3, r3, r1
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	1ad1      	subs	r1, r2, r3
 80050ea:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80050ee:	460b      	mov	r3, r1
 80050f0:	4622      	mov	r2, r4
 80050f2:	498a      	ldr	r1, [pc, #552]	; (800531c <localMain+0x1044>)
 80050f4:	f007 fec8 	bl	800ce88 <siprintf>
	lcdPutStr(10, 132, textBuffer, zekton12font_bold);
 80050f8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80050fc:	4b82      	ldr	r3, [pc, #520]	; (8005308 <localMain+0x1030>)
 80050fe:	2184      	movs	r1, #132	; 0x84
 8005100:	200a      	movs	r0, #10
 8005102:	f7fd f855 	bl	80021b0 <lcdPutStr>

	uint16_t scaleXrise = 10+380*sunrise/(24*60-0);
 8005106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800510a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800510e:	fb02 f303 	mul.w	r3, r2, r3
 8005112:	4a83      	ldr	r2, [pc, #524]	; (8005320 <localMain+0x1048>)
 8005114:	fb82 1203 	smull	r1, r2, r2, r3
 8005118:	441a      	add	r2, r3
 800511a:	1292      	asrs	r2, r2, #10
 800511c:	17db      	asrs	r3, r3, #31
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	b29b      	uxth	r3, r3
 8005122:	330a      	adds	r3, #10
 8005124:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint16_t scaleXset = 10+380*sunset/(24*60-0);
 8005128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800512c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005130:	fb02 f303 	mul.w	r3, r2, r3
 8005134:	4a7a      	ldr	r2, [pc, #488]	; (8005320 <localMain+0x1048>)
 8005136:	fb82 1203 	smull	r1, r2, r2, r3
 800513a:	441a      	add	r2, r3
 800513c:	1292      	asrs	r2, r2, #10
 800513e:	17db      	asrs	r3, r3, #31
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	b29b      	uxth	r3, r3
 8005144:	330a      	adds	r3, #10
 8005146:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t scaleXnoon = 10+380*noon/(24*60-0);
 800514a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800514e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005152:	fb02 f303 	mul.w	r3, r2, r3
 8005156:	4a72      	ldr	r2, [pc, #456]	; (8005320 <localMain+0x1048>)
 8005158:	fb82 1203 	smull	r1, r2, r2, r3
 800515c:	441a      	add	r2, r3
 800515e:	1292      	asrs	r2, r2, #10
 8005160:	17db      	asrs	r3, r3, #31
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	b29b      	uxth	r3, r3
 8005166:	330a      	adds	r3, #10
 8005168:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t scaleXnow = 10+380*(hhour*60+mmin)/(24*60-0);
 800516c:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005170:	4613      	mov	r3, r2
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	461a      	mov	r2, r3
 800517a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800517e:	4413      	add	r3, r2
 8005180:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8005184:	fb02 f303 	mul.w	r3, r2, r3
 8005188:	4a65      	ldr	r2, [pc, #404]	; (8005320 <localMain+0x1048>)
 800518a:	fb82 1203 	smull	r1, r2, r2, r3
 800518e:	441a      	add	r2, r3
 8005190:	1292      	asrs	r2, r2, #10
 8005192:	17db      	asrs	r3, r3, #31
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	b29b      	uxth	r3, r3
 8005198:	330a      	adds	r3, #10
 800519a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	lcdHLine(10,399-10,165,1);
 800519e:	2301      	movs	r3, #1
 80051a0:	22a5      	movs	r2, #165	; 0xa5
 80051a2:	f240 1185 	movw	r1, #389	; 0x185
 80051a6:	200a      	movs	r0, #10
 80051a8:	f7fd fc6c 	bl	8002a84 <lcdHLine>
	lcdVLine(10, 163, 167, 1);
 80051ac:	2301      	movs	r3, #1
 80051ae:	22a7      	movs	r2, #167	; 0xa7
 80051b0:	21a3      	movs	r1, #163	; 0xa3
 80051b2:	200a      	movs	r0, #10
 80051b4:	f7fd f82a 	bl	800220c <lcdVLine>
	lcdVLine(399-10, 163, 167, 1);
 80051b8:	2301      	movs	r3, #1
 80051ba:	22a7      	movs	r2, #167	; 0xa7
 80051bc:	21a3      	movs	r1, #163	; 0xa3
 80051be:	f240 1085 	movw	r0, #389	; 0x185
 80051c2:	f7fd f823 	bl	800220c <lcdVLine>
	lcdVLine(scaleXrise, 160, 170, 2);
 80051c6:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 80051ca:	2302      	movs	r3, #2
 80051cc:	22aa      	movs	r2, #170	; 0xaa
 80051ce:	21a0      	movs	r1, #160	; 0xa0
 80051d0:	f7fd f81c 	bl	800220c <lcdVLine>
	lcdVLine(scaleXset, 160, 170, 2);
 80051d4:	f8b7 008c 	ldrh.w	r0, [r7, #140]	; 0x8c
 80051d8:	2302      	movs	r3, #2
 80051da:	22aa      	movs	r2, #170	; 0xaa
 80051dc:	21a0      	movs	r1, #160	; 0xa0
 80051de:	f7fd f815 	bl	800220c <lcdVLine>
	lcdVLine(scaleXnoon, 160, 170, 2);
 80051e2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80051e6:	2302      	movs	r3, #2
 80051e8:	22aa      	movs	r2, #170	; 0xaa
 80051ea:	21a0      	movs	r1, #160	; 0xa0
 80051ec:	f7fd f80e 	bl	800220c <lcdVLine>
	lcdVLine(scaleXnow, 155, 175, 2);
 80051f0:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 80051f4:	2302      	movs	r3, #2
 80051f6:	22af      	movs	r2, #175	; 0xaf
 80051f8:	219b      	movs	r1, #155	; 0x9b
 80051fa:	f7fd f807 	bl	800220c <lcdVLine>

	sprintf(&textBuffer, "%02d:%02d", sunrise/60, sunrise%60);
 80051fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005202:	4a45      	ldr	r2, [pc, #276]	; (8005318 <localMain+0x1040>)
 8005204:	fb82 1203 	smull	r1, r2, r2, r3
 8005208:	441a      	add	r2, r3
 800520a:	1152      	asrs	r2, r2, #5
 800520c:	17db      	asrs	r3, r3, #31
 800520e:	1ad4      	subs	r4, r2, r3
 8005210:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005214:	4b40      	ldr	r3, [pc, #256]	; (8005318 <localMain+0x1040>)
 8005216:	fb83 1302 	smull	r1, r3, r3, r2
 800521a:	4413      	add	r3, r2
 800521c:	1159      	asrs	r1, r3, #5
 800521e:	17d3      	asrs	r3, r2, #31
 8005220:	1ac9      	subs	r1, r1, r3
 8005222:	460b      	mov	r3, r1
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	1a5b      	subs	r3, r3, r1
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	1ad1      	subs	r1, r2, r3
 800522c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005230:	460b      	mov	r3, r1
 8005232:	4622      	mov	r2, r4
 8005234:	493b      	ldr	r1, [pc, #236]	; (8005324 <localMain+0x104c>)
 8005236:	f007 fe27 	bl	800ce88 <siprintf>
	lcdPutStr(scaleXrise-19, 170, textBuffer, smallestFont);
 800523a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800523e:	3b13      	subs	r3, #19
 8005240:	b298      	uxth	r0, r3
 8005242:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005246:	4b38      	ldr	r3, [pc, #224]	; (8005328 <localMain+0x1050>)
 8005248:	21aa      	movs	r1, #170	; 0xaa
 800524a:	f7fc ffb1 	bl	80021b0 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", sunset/60, sunset%60);
 800524e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005252:	4a31      	ldr	r2, [pc, #196]	; (8005318 <localMain+0x1040>)
 8005254:	fb82 1203 	smull	r1, r2, r2, r3
 8005258:	441a      	add	r2, r3
 800525a:	1152      	asrs	r2, r2, #5
 800525c:	17db      	asrs	r3, r3, #31
 800525e:	1ad4      	subs	r4, r2, r3
 8005260:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005264:	4b2c      	ldr	r3, [pc, #176]	; (8005318 <localMain+0x1040>)
 8005266:	fb83 1302 	smull	r1, r3, r3, r2
 800526a:	4413      	add	r3, r2
 800526c:	1159      	asrs	r1, r3, #5
 800526e:	17d3      	asrs	r3, r2, #31
 8005270:	1ac9      	subs	r1, r1, r3
 8005272:	460b      	mov	r3, r1
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	1a5b      	subs	r3, r3, r1
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	1ad1      	subs	r1, r2, r3
 800527c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005280:	460b      	mov	r3, r1
 8005282:	4622      	mov	r2, r4
 8005284:	4927      	ldr	r1, [pc, #156]	; (8005324 <localMain+0x104c>)
 8005286:	f007 fdff 	bl	800ce88 <siprintf>
	lcdPutStr(scaleXset-19, 170, textBuffer, smallestFont);
 800528a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800528e:	3b13      	subs	r3, #19
 8005290:	b298      	uxth	r0, r3
 8005292:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005296:	4b24      	ldr	r3, [pc, #144]	; (8005328 <localMain+0x1050>)
 8005298:	21aa      	movs	r1, #170	; 0xaa
 800529a:	f7fc ff89 	bl	80021b0 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", noon/60, noon%60);
 800529e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052a2:	4a1d      	ldr	r2, [pc, #116]	; (8005318 <localMain+0x1040>)
 80052a4:	fb82 1203 	smull	r1, r2, r2, r3
 80052a8:	441a      	add	r2, r3
 80052aa:	1152      	asrs	r2, r2, #5
 80052ac:	17db      	asrs	r3, r3, #31
 80052ae:	1ad4      	subs	r4, r2, r3
 80052b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80052b4:	4b18      	ldr	r3, [pc, #96]	; (8005318 <localMain+0x1040>)
 80052b6:	fb83 1302 	smull	r1, r3, r3, r2
 80052ba:	4413      	add	r3, r2
 80052bc:	1159      	asrs	r1, r3, #5
 80052be:	17d3      	asrs	r3, r2, #31
 80052c0:	1ac9      	subs	r1, r1, r3
 80052c2:	460b      	mov	r3, r1
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	1a5b      	subs	r3, r3, r1
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	1ad1      	subs	r1, r2, r3
 80052cc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80052d0:	460b      	mov	r3, r1
 80052d2:	4622      	mov	r2, r4
 80052d4:	4913      	ldr	r1, [pc, #76]	; (8005324 <localMain+0x104c>)
 80052d6:	f007 fdd7 	bl	800ce88 <siprintf>
	lcdPutStr(scaleXnoon-19, 170, textBuffer, smallestFont);
 80052da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80052de:	3b13      	subs	r3, #19
 80052e0:	b298      	uxth	r0, r3
 80052e2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80052e6:	4b10      	ldr	r3, [pc, #64]	; (8005328 <localMain+0x1050>)
 80052e8:	21aa      	movs	r1, #170	; 0xaa
 80052ea:	f7fc ff61 	bl	80021b0 <lcdPutStr>
}
 80052ee:	bf00      	nop
 80052f0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80052f4:	46bd      	mov	sp, r7
 80052f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052fa:	bf00      	nop
 80052fc:	f3af 8000 	nop.w
 8005300:	40768000 	.word	0x40768000
 8005304:	08013490 	.word	0x08013490
 8005308:	080171d0 	.word	0x080171d0
 800530c:	404e0000 	.word	0x404e0000
 8005310:	40590000 	.word	0x40590000
 8005314:	080134b0 	.word	0x080134b0
 8005318:	88888889 	.word	0x88888889
 800531c:	080134d0 	.word	0x080134d0
 8005320:	b60b60b7 	.word	0xb60b60b7
 8005324:	080134ec 	.word	0x080134ec
 8005328:	080162cc 	.word	0x080162cc
 800532c:	54442d18 	.word	0x54442d18
 8005330:	400921fb 	.word	0x400921fb

08005334 <prevPage>:
#include "fonts/ocrFont.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
	if(currentPage>0){
 8005338:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <prevPage+0x30>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d006      	beq.n	800534e <prevPage+0x1a>
		currentPage--;
 8005340:	4b08      	ldr	r3, [pc, #32]	; (8005364 <prevPage+0x30>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	3b01      	subs	r3, #1
 8005346:	b2da      	uxtb	r2, r3
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <prevPage+0x30>)
 800534a:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 800534c:	e005      	b.n	800535a <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 800534e:	4b06      	ldr	r3, [pc, #24]	; (8005368 <prevPage+0x34>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	3b01      	subs	r3, #1
 8005354:	b2da      	uxtb	r2, r3
 8005356:	4b03      	ldr	r3, [pc, #12]	; (8005364 <prevPage+0x30>)
 8005358:	701a      	strb	r2, [r3, #0]
}
 800535a:	bf00      	nop
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	200037a0 	.word	0x200037a0
 8005368:	20000185 	.word	0x20000185

0800536c <nextPage>:
void nextPage(void){
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <nextPage+0x34>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <nextPage+0x38>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	3b01      	subs	r3, #1
 800537c:	429a      	cmp	r2, r3
 800537e:	da06      	bge.n	800538e <nextPage+0x22>
		currentPage++;
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <nextPage+0x34>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	b2da      	uxtb	r2, r3
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <nextPage+0x34>)
 800538a:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 800538c:	e002      	b.n	8005394 <nextPage+0x28>
		currentPage=0;
 800538e:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <nextPage+0x34>)
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	200037a0 	.word	0x200037a0
 80053a4:	20000185 	.word	0x20000185

080053a8 <showPage1>:

void showPage1(void){
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b090      	sub	sp, #64	; 0x40
 80053ac:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80053ae:	2300      	movs	r3, #0
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	605a      	str	r2, [r3, #4]
 80053bc:	609a      	str	r2, [r3, #8]
 80053be:	60da      	str	r2, [r3, #12]
 80053c0:	611a      	str	r2, [r3, #16]
 80053c2:	615a      	str	r2, [r3, #20]
 80053c4:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 80053c6:	2300      	movs	r3, #0
 80053c8:	603b      	str	r3, [r7, #0]
 80053ca:	1d3b      	adds	r3, r7, #4
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	609a      	str	r2, [r3, #8]
 80053d4:	60da      	str	r2, [r3, #12]
 80053d6:	611a      	str	r2, [r3, #16]
 80053d8:	615a      	str	r2, [r3, #20]
 80053da:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d%02d", RtcTime.Hours, RtcTime.Minutes);
 80053dc:	4b11      	ldr	r3, [pc, #68]	; (8005424 <showPage1+0x7c>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	4b10      	ldr	r3, [pc, #64]	; (8005424 <showPage1+0x7c>)
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	4638      	mov	r0, r7
 80053e8:	490f      	ldr	r1, [pc, #60]	; (8005428 <showPage1+0x80>)
 80053ea:	f007 fd4d 	bl	800ce88 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		sprintf(&fracStr, "%02d", RtcTime.Seconds);
 80053ee:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <showPage1+0x7c>)
 80053f0:	789b      	ldrb	r3, [r3, #2]
 80053f2:	461a      	mov	r2, r3
 80053f4:	f107 0320 	add.w	r3, r7, #32
 80053f8:	490c      	ldr	r1, [pc, #48]	; (800542c <showPage1+0x84>)
 80053fa:	4618      	mov	r0, r3
 80053fc:	f007 fd44 	bl	800ce88 <siprintf>
		lcdPutStr(0, 0, timeStr, bigDigitsLarabie);
 8005400:	463a      	mov	r2, r7
 8005402:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <showPage1+0x88>)
 8005404:	2100      	movs	r1, #0
 8005406:	2000      	movs	r0, #0
 8005408:	f7fc fed2 	bl	80021b0 <lcdPutStr>
		lcdPutStr(300, 0, fracStr, fontLarabieMedium);
 800540c:	f107 0220 	add.w	r2, r7, #32
 8005410:	4b08      	ldr	r3, [pc, #32]	; (8005434 <showPage1+0x8c>)
 8005412:	2100      	movs	r1, #0
 8005414:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005418:	f7fc feca 	bl	80021b0 <lcdPutStr>
}
 800541c:	bf00      	nop
 800541e:	3740      	adds	r7, #64	; 0x40
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20003574 	.word	0x20003574
 8005428:	080135d0 	.word	0x080135d0
 800542c:	080135dc 	.word	0x080135dc
 8005430:	08018cb4 	.word	0x08018cb4
 8005434:	0801cdd0 	.word	0x0801cdd0

08005438 <showPage2>:
void showPage2(void){
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800543e:	2300      	movs	r3, #0
 8005440:	603b      	str	r3, [r7, #0]
 8005442:	1d3b      	adds	r3, r7, #4
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	611a      	str	r2, [r3, #16]
 8005450:	615a      	str	r2, [r3, #20]
 8005452:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 2: STW");
 8005454:	463b      	mov	r3, r7
 8005456:	4907      	ldr	r1, [pc, #28]	; (8005474 <showPage2+0x3c>)
 8005458:	4618      	mov	r0, r3
 800545a:	f007 fd15 	bl	800ce88 <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 800545e:	463a      	mov	r2, r7
 8005460:	4b05      	ldr	r3, [pc, #20]	; (8005478 <showPage2+0x40>)
 8005462:	2100      	movs	r1, #0
 8005464:	2000      	movs	r0, #0
 8005466:	f7fc fea3 	bl	80021b0 <lcdPutStr>
}
 800546a:	bf00      	nop
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	080135e4 	.word	0x080135e4
 8005478:	0801cdd0 	.word	0x0801cdd0

0800547c <showPage3>:
void showPage3(void){
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8005482:	2300      	movs	r3, #0
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	605a      	str	r2, [r3, #4]
 800548e:	609a      	str	r2, [r3, #8]
 8005490:	60da      	str	r2, [r3, #12]
 8005492:	611a      	str	r2, [r3, #16]
 8005494:	615a      	str	r2, [r3, #20]
 8005496:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 8005498:	463b      	mov	r3, r7
 800549a:	4907      	ldr	r1, [pc, #28]	; (80054b8 <showPage3+0x3c>)
 800549c:	4618      	mov	r0, r3
 800549e:	f007 fcf3 	bl	800ce88 <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 80054a2:	463a      	mov	r2, r7
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <showPage3+0x40>)
 80054a6:	2100      	movs	r1, #0
 80054a8:	2000      	movs	r0, #0
 80054aa:	f7fc fe81 	bl	80021b0 <lcdPutStr>
}
 80054ae:	bf00      	nop
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	080135f0 	.word	0x080135f0
 80054bc:	0801cdd0 	.word	0x0801cdd0

080054c0 <showPage4>:
void showPage4(void){
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80054c6:	2300      	movs	r3, #0
 80054c8:	603b      	str	r3, [r7, #0]
 80054ca:	1d3b      	adds	r3, r7, #4
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	609a      	str	r2, [r3, #8]
 80054d4:	60da      	str	r2, [r3, #12]
 80054d6:	611a      	str	r2, [r3, #16]
 80054d8:	615a      	str	r2, [r3, #20]
 80054da:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 80054dc:	463b      	mov	r3, r7
 80054de:	4907      	ldr	r1, [pc, #28]	; (80054fc <showPage4+0x3c>)
 80054e0:	4618      	mov	r0, r3
 80054e2:	f007 fcd1 	bl	800ce88 <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 80054e6:	463a      	mov	r2, r7
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <showPage4+0x40>)
 80054ea:	2100      	movs	r1, #0
 80054ec:	2000      	movs	r0, #0
 80054ee:	f7fc fe5f 	bl	80021b0 <lcdPutStr>
}
 80054f2:	bf00      	nop
 80054f4:	3720      	adds	r7, #32
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	080135fc 	.word	0x080135fc
 8005500:	0801cdd0 	.word	0x0801cdd0

08005504 <showPage5>:
void showPage5(void){
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800550a:	2300      	movs	r3, #0
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	1d3b      	adds	r3, r7, #4
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	609a      	str	r2, [r3, #8]
 8005518:	60da      	str	r2, [r3, #12]
 800551a:	611a      	str	r2, [r3, #16]
 800551c:	615a      	str	r2, [r3, #20]
 800551e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 5: WRLD");
 8005520:	463b      	mov	r3, r7
 8005522:	4907      	ldr	r1, [pc, #28]	; (8005540 <showPage5+0x3c>)
 8005524:	4618      	mov	r0, r3
 8005526:	f007 fcaf 	bl	800ce88 <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 800552a:	463a      	mov	r2, r7
 800552c:	4b05      	ldr	r3, [pc, #20]	; (8005544 <showPage5+0x40>)
 800552e:	2100      	movs	r1, #0
 8005530:	2000      	movs	r0, #0
 8005532:	f7fc fe3d 	bl	80021b0 <lcdPutStr>
}
 8005536:	bf00      	nop
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	08013608 	.word	0x08013608
 8005544:	0801cdd0 	.word	0x0801cdd0

08005548 <showPage6>:
void showPage6(void){
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800554e:	2300      	movs	r3, #0
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	1d3b      	adds	r3, r7, #4
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	611a      	str	r2, [r3, #16]
 8005560:	615a      	str	r2, [r3, #20]
 8005562:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 6: DLT");
 8005564:	463b      	mov	r3, r7
 8005566:	4907      	ldr	r1, [pc, #28]	; (8005584 <showPage6+0x3c>)
 8005568:	4618      	mov	r0, r3
 800556a:	f007 fc8d 	bl	800ce88 <siprintf>
		lcdPutStr(0, 0, fracStr, fontLarabieMedium);
 800556e:	463a      	mov	r2, r7
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <showPage6+0x40>)
 8005572:	2100      	movs	r1, #0
 8005574:	2000      	movs	r0, #0
 8005576:	f7fc fe1b 	bl	80021b0 <lcdPutStr>
}
 800557a:	bf00      	nop
 800557c:	3720      	adds	r7, #32
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	08013618 	.word	0x08013618
 8005588:	0801cdd0 	.word	0x0801cdd0

0800558c <showPage>:

void showPage(uint8_t pageNum){
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	2b05      	cmp	r3, #5
 800559a:	d821      	bhi.n	80055e0 <showPage+0x54>
 800559c:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <showPage+0x18>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055bd 	.word	0x080055bd
 80055a8:	080055c3 	.word	0x080055c3
 80055ac:	080055c9 	.word	0x080055c9
 80055b0:	080055cf 	.word	0x080055cf
 80055b4:	080055d5 	.word	0x080055d5
 80055b8:	080055db 	.word	0x080055db
	case 0:
		showPage1();
 80055bc:	f7ff fef4 	bl	80053a8 <showPage1>
		break;
 80055c0:	e00e      	b.n	80055e0 <showPage+0x54>
	case 1:
		showPage2();
 80055c2:	f7ff ff39 	bl	8005438 <showPage2>
		break;
 80055c6:	e00b      	b.n	80055e0 <showPage+0x54>
	case 2:
		showPage3();
 80055c8:	f7ff ff58 	bl	800547c <showPage3>
		break;
 80055cc:	e008      	b.n	80055e0 <showPage+0x54>
	case 3:
		showPage4();
 80055ce:	f7ff ff77 	bl	80054c0 <showPage4>
		break;
 80055d2:	e005      	b.n	80055e0 <showPage+0x54>
	case 4:
		showPage5();
 80055d4:	f7ff ff96 	bl	8005504 <showPage5>
		break;
 80055d8:	e002      	b.n	80055e0 <showPage+0x54>
	case 5:
		showPage6();
 80055da:	f7ff ffb5 	bl	8005548 <showPage6>
		break;
 80055de:	bf00      	nop
	}
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 80055ec:	4b08      	ldr	r3, [pc, #32]	; (8005610 <setDefaultClbcks+0x28>)
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <setDefaultClbcks+0x2c>)
 80055f0:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <setDefaultClbcks+0x30>)
 80055f4:	4a09      	ldr	r2, [pc, #36]	; (800561c <setDefaultClbcks+0x34>)
 80055f6:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 80055f8:	4b09      	ldr	r3, [pc, #36]	; (8005620 <setDefaultClbcks+0x38>)
 80055fa:	4a0a      	ldr	r2, [pc, #40]	; (8005624 <setDefaultClbcks+0x3c>)
 80055fc:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 80055fe:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <setDefaultClbcks+0x40>)
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <setDefaultClbcks+0x44>)
 8005602:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 8005604:	bf00      	nop
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20000560 	.word	0x20000560
 8005614:	08001d15 	.word	0x08001d15
 8005618:	200005a8 	.word	0x200005a8
 800561c:	08001d25 	.word	0x08001d25
 8005620:	20000614 	.word	0x20000614
 8005624:	08005335 	.word	0x08005335
 8005628:	200005cc 	.word	0x200005cc
 800562c:	0800536d 	.word	0x0800536d

08005630 <settingsSetup>:


void settingsSetup(void){
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005634:	f7ff ffd8 	bl	80055e8 <setDefaultClbcks>
}
 8005638:	bf00      	nop
 800563a:	bd80      	pop	{r7, pc}

0800563c <settingsMain>:

void settingsMain(void){
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8005642:	2300      	movs	r3, #0
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	1d3b      	adds	r3, r7, #4
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	609a      	str	r2, [r3, #8]
 8005650:	60da      	str	r2, [r3, #12]
 8005652:	611a      	str	r2, [r3, #16]
 8005654:	615a      	str	r2, [r3, #20]
 8005656:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr, "Settings will be shown");
 8005658:	463b      	mov	r3, r7
 800565a:	4909      	ldr	r1, [pc, #36]	; (8005680 <settingsMain+0x44>)
 800565c:	4618      	mov	r0, r3
 800565e:	f007 fc13 	bl	800ce88 <siprintf>
	lcdPutStr(0, 0, tempStr, font13);
 8005662:	463a      	mov	r2, r7
 8005664:	4b07      	ldr	r3, [pc, #28]	; (8005684 <settingsMain+0x48>)
 8005666:	2100      	movs	r1, #0
 8005668:	2000      	movs	r0, #0
 800566a:	f7fc fda1 	bl	80021b0 <lcdPutStr>
	showPage(currentPage);
 800566e:	4b06      	ldr	r3, [pc, #24]	; (8005688 <settingsMain+0x4c>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff ff8a 	bl	800558c <showPage>

}
 8005678:	bf00      	nop
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	08013624 	.word	0x08013624
 8005684:	08017c58 	.word	0x08017c58
 8005688:	200037a0 	.word	0x200037a0

0800568c <startStopwatch>:
#include "fonts/zekton24.h"

#include <fonts/zekton45.h>
#include "stopwatchModule.h"

void startStopwatch(){
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
	stwStart();
 8005690:	f7fd fea4 	bl	80033dc <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <startStopwatch+0x18>)
 8005696:	4a04      	ldr	r2, [pc, #16]	; (80056a8 <startStopwatch+0x1c>)
 8005698:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 800569a:	4b04      	ldr	r3, [pc, #16]	; (80056ac <startStopwatch+0x20>)
 800569c:	4a04      	ldr	r2, [pc, #16]	; (80056b0 <startStopwatch+0x24>)
 800569e:	611a      	str	r2, [r3, #16]
}
 80056a0:	bf00      	nop
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000584 	.word	0x20000584
 80056a8:	080056b5 	.word	0x080056b5
 80056ac:	200005f0 	.word	0x200005f0
 80056b0:	080056f5 	.word	0x080056f5

080056b4 <stopStopwatch>:
void stopStopwatch(){
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
	stwStop();
 80056b8:	f7fd feb4 	bl	8003424 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 80056bc:	4b03      	ldr	r3, [pc, #12]	; (80056cc <stopStopwatch+0x18>)
 80056be:	4a04      	ldr	r2, [pc, #16]	; (80056d0 <stopStopwatch+0x1c>)
 80056c0:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 80056c2:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <stopStopwatch+0x20>)
 80056c4:	4a04      	ldr	r2, [pc, #16]	; (80056d8 <stopStopwatch+0x24>)
 80056c6:	611a      	str	r2, [r3, #16]
}
 80056c8:	bf00      	nop
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20000584 	.word	0x20000584
 80056d0:	0800568d 	.word	0x0800568d
 80056d4:	200005f0 	.word	0x200005f0
 80056d8:	080056dd 	.word	0x080056dd

080056dc <resetStopwatch>:
void resetStopwatch(){
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
	stwClear();
 80056e0:	f7fd feae 	bl	8003440 <stwClear>
	stwT.clear();
 80056e4:	4b02      	ldr	r3, [pc, #8]	; (80056f0 <resetStopwatch+0x14>)
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	4798      	blx	r3
}
 80056ea:	bf00      	nop
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	2000014c 	.word	0x2000014c

080056f4 <saveStopwatch>:
void saveStopwatch(){
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
	stwSave();
 80056f8:	f7fd feb0 	bl	800345c <stwSave>
}
 80056fc:	bf00      	nop
 80056fe:	bd80      	pop	{r7, pc}

08005700 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
//	btn_B3.onSingleLongPressHandler = &returnToMenu;
	btn_B3.onSinglePressHandler = &resetPos;
 8005704:	4b10      	ldr	r3, [pc, #64]	; (8005748 <setDefaultClbcks+0x48>)
 8005706:	4a11      	ldr	r2, [pc, #68]	; (800574c <setDefaultClbcks+0x4c>)
 8005708:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 800570a:	4b11      	ldr	r3, [pc, #68]	; (8005750 <setDefaultClbcks+0x50>)
 800570c:	4a11      	ldr	r2, [pc, #68]	; (8005754 <setDefaultClbcks+0x54>)
 800570e:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005710:	4b11      	ldr	r3, [pc, #68]	; (8005758 <setDefaultClbcks+0x58>)
 8005712:	4a12      	ldr	r2, [pc, #72]	; (800575c <setDefaultClbcks+0x5c>)
 8005714:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8005716:	4b12      	ldr	r3, [pc, #72]	; (8005760 <setDefaultClbcks+0x60>)
 8005718:	78db      	ldrb	r3, [r3, #3]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d006      	beq.n	8005732 <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8005724:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <setDefaultClbcks+0x64>)
 8005726:	4a10      	ldr	r2, [pc, #64]	; (8005768 <setDefaultClbcks+0x68>)
 8005728:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 800572a:	4b10      	ldr	r3, [pc, #64]	; (800576c <setDefaultClbcks+0x6c>)
 800572c:	4a10      	ldr	r2, [pc, #64]	; (8005770 <setDefaultClbcks+0x70>)
 800572e:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8005730:	e005      	b.n	800573e <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8005732:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <setDefaultClbcks+0x64>)
 8005734:	4a0f      	ldr	r2, [pc, #60]	; (8005774 <setDefaultClbcks+0x74>)
 8005736:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <setDefaultClbcks+0x6c>)
 800573a:	4a0f      	ldr	r2, [pc, #60]	; (8005778 <setDefaultClbcks+0x78>)
 800573c:	611a      	str	r2, [r3, #16]
}
 800573e:	bf00      	nop
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	20000614 	.word	0x20000614
 800574c:	08001d35 	.word	0x08001d35
 8005750:	20000560 	.word	0x20000560
 8005754:	08001d15 	.word	0x08001d15
 8005758:	200005a8 	.word	0x200005a8
 800575c:	08001d25 	.word	0x08001d25
 8005760:	20003610 	.word	0x20003610
 8005764:	20000584 	.word	0x20000584
 8005768:	080056b5 	.word	0x080056b5
 800576c:	200005f0 	.word	0x200005f0
 8005770:	080056f5 	.word	0x080056f5
 8005774:	0800568d 	.word	0x0800568d
 8005778:	080056dd 	.word	0x080056dd

0800577c <convertTicks>:

struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	099b      	lsrs	r3, r3, #6
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <convertTicks+0x98>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 8005790:	b2db      	uxtb	r3, r3
 8005792:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	0993      	lsrs	r3, r2, #6
 8005798:	491e      	ldr	r1, [pc, #120]	; (8005814 <convertTicks+0x98>)
 800579a:	fba1 1303 	umull	r1, r3, r1, r3
 800579e:	089b      	lsrs	r3, r3, #2
 80057a0:	491d      	ldr	r1, [pc, #116]	; (8005818 <convertTicks+0x9c>)
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	4a1c      	ldr	r2, [pc, #112]	; (800581c <convertTicks+0xa0>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4b19      	ldr	r3, [pc, #100]	; (800581c <convertTicks+0xa0>)
 80057b8:	fba3 1302 	umull	r1, r3, r3, r2
 80057bc:	09db      	lsrs	r3, r3, #7
 80057be:	f241 7170 	movw	r1, #6000	; 0x1770
 80057c2:	fb01 f303 	mul.w	r3, r1, r3
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	4a15      	ldr	r2, [pc, #84]	; (8005820 <convertTicks+0xa4>)
 80057ca:	fba2 2303 	umull	r2, r3, r2, r3
 80057ce:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	72bb      	strb	r3, [r7, #10]
		ticks%100
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4b12      	ldr	r3, [pc, #72]	; (8005820 <convertTicks+0xa4>)
 80057d8:	fba3 1302 	umull	r1, r3, r3, r2
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	2164      	movs	r1, #100	; 0x64
 80057e0:	fb01 f303 	mul.w	r3, r1, r3
 80057e4:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	2300      	movs	r3, #0
 80057f0:	7b3a      	ldrb	r2, [r7, #12]
 80057f2:	f362 0307 	bfi	r3, r2, #0, #8
 80057f6:	7b7a      	ldrb	r2, [r7, #13]
 80057f8:	f362 230f 	bfi	r3, r2, #8, #8
 80057fc:	7bba      	ldrb	r2, [r7, #14]
 80057fe:	f362 4317 	bfi	r3, r2, #16, #8
 8005802:	7bfa      	ldrb	r2, [r7, #15]
 8005804:	f362 631f 	bfi	r3, r2, #24, #8
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	002e9a77 	.word	0x002e9a77
 8005818:	00057e40 	.word	0x00057e40
 800581c:	057619f1 	.word	0x057619f1
 8005820:	51eb851f 	.word	0x51eb851f

08005824 <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af02      	add	r7, sp, #8
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 800582e:	793b      	ldrb	r3, [r7, #4]
 8005830:	4619      	mov	r1, r3
 8005832:	797b      	ldrb	r3, [r7, #5]
 8005834:	4618      	mov	r0, r3
 8005836:	79bb      	ldrb	r3, [r7, #6]
 8005838:	79fa      	ldrb	r2, [r7, #7]
 800583a:	9201      	str	r2, [sp, #4]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	4603      	mov	r3, r0
 8005840:	460a      	mov	r2, r1
 8005842:	4904      	ldr	r1, [pc, #16]	; (8005854 <stwString+0x30>)
 8005844:	6838      	ldr	r0, [r7, #0]
 8005846:	f007 fb1f 	bl	800ce88 <siprintf>
	return str;
 800584a:	683b      	ldr	r3, [r7, #0]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	080136f4 	.word	0x080136f4

08005858 <updateStopwatch>:
void updateStopwatch(void){
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
	stw_val.hours = stwS.cnt/(100*60*60);
 800585c:	4b2a      	ldr	r3, [pc, #168]	; (8005908 <updateStopwatch+0xb0>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8005864:	4a29      	ldr	r2, [pc, #164]	; (800590c <updateStopwatch+0xb4>)
 8005866:	fb82 1203 	smull	r1, r2, r2, r3
 800586a:	1452      	asrs	r2, r2, #17
 800586c:	17db      	asrs	r3, r3, #31
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	b2da      	uxtb	r2, r3
 8005872:	4b27      	ldr	r3, [pc, #156]	; (8005910 <updateStopwatch+0xb8>)
 8005874:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
 8005876:	4b24      	ldr	r3, [pc, #144]	; (8005908 <updateStopwatch+0xb0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800587e:	461a      	mov	r2, r3
 8005880:	4b22      	ldr	r3, [pc, #136]	; (800590c <updateStopwatch+0xb4>)
 8005882:	fb83 1302 	smull	r1, r3, r3, r2
 8005886:	1459      	asrs	r1, r3, #17
 8005888:	17d3      	asrs	r3, r2, #31
 800588a:	1acb      	subs	r3, r1, r3
 800588c:	4921      	ldr	r1, [pc, #132]	; (8005914 <updateStopwatch+0xbc>)
 800588e:	fb01 f303 	mul.w	r3, r1, r3
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	4a20      	ldr	r2, [pc, #128]	; (8005918 <updateStopwatch+0xc0>)
 8005896:	fb82 1203 	smull	r1, r2, r2, r3
 800589a:	11d2      	asrs	r2, r2, #7
 800589c:	17db      	asrs	r3, r3, #31
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <updateStopwatch+0xb8>)
 80058a4:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%(60*100)/(100);
 80058a6:	4b18      	ldr	r3, [pc, #96]	; (8005908 <updateStopwatch+0xb0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80058ae:	461a      	mov	r2, r3
 80058b0:	4b19      	ldr	r3, [pc, #100]	; (8005918 <updateStopwatch+0xc0>)
 80058b2:	fb83 1302 	smull	r1, r3, r3, r2
 80058b6:	11d9      	asrs	r1, r3, #7
 80058b8:	17d3      	asrs	r3, r2, #31
 80058ba:	1acb      	subs	r3, r1, r3
 80058bc:	f241 7170 	movw	r1, #6000	; 0x1770
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	4a15      	ldr	r2, [pc, #84]	; (800591c <updateStopwatch+0xc4>)
 80058c8:	fb82 1203 	smull	r1, r2, r2, r3
 80058cc:	1152      	asrs	r2, r2, #5
 80058ce:	17db      	asrs	r3, r3, #31
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <updateStopwatch+0xb8>)
 80058d6:	709a      	strb	r2, [r3, #2]
	stw_val.csec = stwS.cnt%100;
 80058d8:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <updateStopwatch+0xb0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80058e0:	461a      	mov	r2, r3
 80058e2:	4b0e      	ldr	r3, [pc, #56]	; (800591c <updateStopwatch+0xc4>)
 80058e4:	fb83 1302 	smull	r1, r3, r3, r2
 80058e8:	1159      	asrs	r1, r3, #5
 80058ea:	17d3      	asrs	r3, r2, #31
 80058ec:	1acb      	subs	r3, r1, r3
 80058ee:	2164      	movs	r1, #100	; 0x64
 80058f0:	fb01 f303 	mul.w	r3, r1, r3
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <updateStopwatch+0xb8>)
 80058fa:	70da      	strb	r2, [r3, #3]
}
 80058fc:	bf00      	nop
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	20003610 	.word	0x20003610
 800590c:	5d34edef 	.word	0x5d34edef
 8005910:	200037a4 	.word	0x200037a4
 8005914:	00057e40 	.word	0x00057e40
 8005918:	057619f1 	.word	0x057619f1
 800591c:	51eb851f 	.word	0x51eb851f

08005920 <stwSetup>:

void stwSetup(void){
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005924:	f7ff feec 	bl	8005700 <setDefaultClbcks>
}
 8005928:	bf00      	nop
 800592a:	bd80      	pop	{r7, pc}

0800592c <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 800592c:	b590      	push	{r4, r7, lr}
 800592e:	b091      	sub	sp, #68	; 0x44
 8005930:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 8005932:	2300      	movs	r3, #0
 8005934:	623b      	str	r3, [r7, #32]
 8005936:	2300      	movs	r3, #0
 8005938:	84bb      	strh	r3, [r7, #36]	; 0x24
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 800593a:	4b7c      	ldr	r3, [pc, #496]	; (8005b2c <stwMain+0x200>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	4b7a      	ldr	r3, [pc, #488]	; (8005b2c <stwMain+0x200>)
 8005942:	785b      	ldrb	r3, [r3, #1]
 8005944:	f107 0020 	add.w	r0, r7, #32
 8005948:	4979      	ldr	r1, [pc, #484]	; (8005b30 <stwMain+0x204>)
 800594a:	f007 fa9d 	bl	800ce88 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 800594e:	2314      	movs	r3, #20
 8005950:	b29c      	uxth	r4, r3
 8005952:	f107 0320 	add.w	r3, r7, #32
 8005956:	4618      	mov	r0, r3
 8005958:	f7fa fc4a 	bl	80001f0 <strlen>
 800595c:	4603      	mov	r3, r0
 800595e:	b29b      	uxth	r3, r3
 8005960:	fb14 f303 	smulbb	r3, r4, r3
 8005964:	b29b      	uxth	r3, r3
 8005966:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 800596a:	b298      	uxth	r0, r3
 800596c:	f107 0220 	add.w	r2, r7, #32
 8005970:	4b70      	ldr	r3, [pc, #448]	; (8005b34 <stwMain+0x208>)
 8005972:	210a      	movs	r1, #10
 8005974:	f7fc fc1c 	bl	80021b0 <lcdPutStr>

	updateStopwatch();
 8005978:	f7ff ff6e 	bl	8005858 <updateStopwatch>
	char tempStr2[30] = {0};
 800597c:	2300      	movs	r3, #0
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	605a      	str	r2, [r3, #4]
 8005988:	609a      	str	r2, [r3, #8]
 800598a:	60da      	str	r2, [r3, #12]
 800598c:	611a      	str	r2, [r3, #16]
 800598e:	615a      	str	r2, [r3, #20]
 8005990:	831a      	strh	r2, [r3, #24]
	if(stw_val.hours != 0){
 8005992:	4b69      	ldr	r3, [pc, #420]	; (8005b38 <stwMain+0x20c>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <stwMain+0x7e>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 800599a:	4b67      	ldr	r3, [pc, #412]	; (8005b38 <stwMain+0x20c>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	463b      	mov	r3, r7
 80059a2:	4966      	ldr	r1, [pc, #408]	; (8005b3c <stwMain+0x210>)
 80059a4:	4618      	mov	r0, r3
 80059a6:	f007 fa6f 	bl	800ce88 <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 80059aa:	463a      	mov	r2, r7
 80059ac:	4b61      	ldr	r3, [pc, #388]	; (8005b34 <stwMain+0x208>)
 80059ae:	215f      	movs	r1, #95	; 0x5f
 80059b0:	2014      	movs	r0, #20
 80059b2:	f7fc fbfd 	bl	80021b0 <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 80059b6:	4b60      	ldr	r3, [pc, #384]	; (8005b38 <stwMain+0x20c>)
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	461a      	mov	r2, r3
 80059bc:	4b5e      	ldr	r3, [pc, #376]	; (8005b38 <stwMain+0x20c>)
 80059be:	789b      	ldrb	r3, [r3, #2]
 80059c0:	4619      	mov	r1, r3
 80059c2:	4b5d      	ldr	r3, [pc, #372]	; (8005b38 <stwMain+0x20c>)
 80059c4:	78db      	ldrb	r3, [r3, #3]
 80059c6:	4638      	mov	r0, r7
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	460b      	mov	r3, r1
 80059cc:	495c      	ldr	r1, [pc, #368]	; (8005b40 <stwMain+0x214>)
 80059ce:	f007 fa5b 	bl	800ce88 <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 80059d2:	2322      	movs	r3, #34	; 0x22
 80059d4:	b29c      	uxth	r4, r3
 80059d6:	463b      	mov	r3, r7
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fa fc09 	bl	80001f0 <strlen>
 80059de:	4603      	mov	r3, r0
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	fb14 f303 	smulbb	r3, r4, r3
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 80059ec:	b298      	uxth	r0, r3
 80059ee:	463a      	mov	r2, r7
 80059f0:	4b54      	ldr	r3, [pc, #336]	; (8005b44 <stwMain+0x218>)
 80059f2:	214c      	movs	r1, #76	; 0x4c
 80059f4:	f7fc fbdc 	bl	80021b0 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80059fe:	e08b      	b.n	8005b18 <stwMain+0x1ec>
//		sprintf(&tempStr2, "%d. %d\"", i, stwT.stwArray[i]%(60*100)/100);
//		sprintf(&tempStr2, "%d. %s", i, stwString(convertTicks(stwT.stwArray[i])));
		if(stwT.stwArray[i] != 0){
 8005a00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a04:	4a50      	ldr	r2, [pc, #320]	; (8005b48 <stwMain+0x21c>)
 8005a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d07f      	beq.n	8005b0e <stwMain+0x1e2>
			sprintf(&tempStr2, "Lap %d:", i+1);
 8005a0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	463b      	mov	r3, r7
 8005a16:	494d      	ldr	r1, [pc, #308]	; (8005b4c <stwMain+0x220>)
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f007 fa35 	bl	800ce88 <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, zekton12font);
 8005a1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	3b7e      	subs	r3, #126	; 0x7e
 8005a28:	b2d9      	uxtb	r1, r3
 8005a2a:	463a      	mov	r2, r7
 8005a2c:	4b48      	ldr	r3, [pc, #288]	; (8005b50 <stwMain+0x224>)
 8005a2e:	2000      	movs	r0, #0
 8005a30:	f7fc fbbe 	bl	80021b0 <lcdPutStr>
			if(i>0){
 8005a34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d022      	beq.n	8005a82 <stwMain+0x156>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), zekton12font);
 8005a3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	3b7e      	subs	r3, #126	; 0x7e
 8005a46:	b2dc      	uxtb	r4, r3
 8005a48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a4c:	4a3e      	ldr	r2, [pc, #248]	; (8005b48 <stwMain+0x21c>)
 8005a4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a56:	3b01      	subs	r3, #1
 8005a58:	493b      	ldr	r1, [pc, #236]	; (8005b48 <stwMain+0x21c>)
 8005a5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fe8b 	bl	800577c <convertTicks>
 8005a66:	4603      	mov	r3, r0
 8005a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a70:	f7ff fed8 	bl	8005824 <stwString>
 8005a74:	4602      	mov	r2, r0
 8005a76:	4b36      	ldr	r3, [pc, #216]	; (8005b50 <stwMain+0x224>)
 8005a78:	4621      	mov	r1, r4
 8005a7a:	2037      	movs	r0, #55	; 0x37
 8005a7c:	f7fc fb98 	bl	80021b0 <lcdPutStr>
 8005a80:	e01a      	b.n	8005ab8 <stwMain+0x18c>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), zekton12font);
 8005a82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	3b7e      	subs	r3, #126	; 0x7e
 8005a8c:	b2dc      	uxtb	r4, r3
 8005a8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a92:	4a2d      	ldr	r2, [pc, #180]	; (8005b48 <stwMain+0x21c>)
 8005a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff fe6f 	bl	800577c <convertTicks>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005aa8:	f7ff febc 	bl	8005824 <stwString>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b28      	ldr	r3, [pc, #160]	; (8005b50 <stwMain+0x224>)
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	2037      	movs	r0, #55	; 0x37
 8005ab4:	f7fc fb7c 	bl	80021b0 <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 8005ab8:	463b      	mov	r3, r7
 8005aba:	4926      	ldr	r1, [pc, #152]	; (8005b54 <stwMain+0x228>)
 8005abc:	4618      	mov	r0, r3
 8005abe:	f007 f9e3 	bl	800ce88 <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, zekton12font);
 8005ac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	3b7e      	subs	r3, #126	; 0x7e
 8005acc:	b2d9      	uxtb	r1, r3
 8005ace:	463a      	mov	r2, r7
 8005ad0:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <stwMain+0x224>)
 8005ad2:	20a5      	movs	r0, #165	; 0xa5
 8005ad4:	f7fc fb6c 	bl	80021b0 <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), zekton12font);
 8005ad8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	3b7e      	subs	r3, #126	; 0x7e
 8005ae2:	b2dc      	uxtb	r4, r3
 8005ae4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ae8:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <stwMain+0x21c>)
 8005aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fe44 	bl	800577c <convertTicks>
 8005af4:	4603      	mov	r3, r0
 8005af6:	633b      	str	r3, [r7, #48]	; 0x30
 8005af8:	463b      	mov	r3, r7
 8005afa:	4619      	mov	r1, r3
 8005afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005afe:	f7ff fe91 	bl	8005824 <stwString>
 8005b02:	4602      	mov	r2, r0
 8005b04:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <stwMain+0x224>)
 8005b06:	4621      	mov	r1, r4
 8005b08:	20e1      	movs	r0, #225	; 0xe1
 8005b0a:	f7fc fb51 	bl	80021b0 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8005b0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b12:	3301      	adds	r3, #1
 8005b14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b1c:	2b06      	cmp	r3, #6
 8005b1e:	f67f af6f 	bls.w	8005a00 <stwMain+0xd4>

//	sprintf(&tempStr2, "%d", stwS.cnt);
//	lcdPutStr(0, 130, tempStr2, zecton45font);
//	sprintf(&tempStr2, "%d", stwS.state);
//	lcdPutStr(0, 184, tempStr2, zecton45font);
}
 8005b22:	bf00      	nop
 8005b24:	bf00      	nop
 8005b26:	373c      	adds	r7, #60	; 0x3c
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd90      	pop	{r4, r7, pc}
 8005b2c:	20003574 	.word	0x20003574
 8005b30:	08013708 	.word	0x08013708
 8005b34:	0802334c 	.word	0x0802334c
 8005b38:	200037a4 	.word	0x200037a4
 8005b3c:	08013714 	.word	0x08013714
 8005b40:	0801371c 	.word	0x0801371c
 8005b44:	080251b4 	.word	0x080251b4
 8005b48:	2000014c 	.word	0x2000014c
 8005b4c:	0801372c 	.word	0x0801372c
 8005b50:	080228c4 	.word	0x080228c4
 8005b54:	08013734 	.word	0x08013734

08005b58 <setDefaultClbcks>:
#include "fonts/zekton14.h"
#include "fonts/zekton24.h"
#include "fonts/zekton84.h"
#include <fonts/zekton45.h>

static void setDefaultClbcks(void){
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 8005b5c:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <setDefaultClbcks+0x20>)
 8005b5e:	4a07      	ldr	r2, [pc, #28]	; (8005b7c <setDefaultClbcks+0x24>)
 8005b60:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8005b62:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <setDefaultClbcks+0x28>)
 8005b64:	4a07      	ldr	r2, [pc, #28]	; (8005b84 <setDefaultClbcks+0x2c>)
 8005b66:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005b68:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <setDefaultClbcks+0x30>)
 8005b6a:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <setDefaultClbcks+0x34>)
 8005b6c:	611a      	str	r2, [r3, #16]
}
 8005b6e:	bf00      	nop
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	200005f0 	.word	0x200005f0
 8005b7c:	08003e91 	.word	0x08003e91
 8005b80:	20000560 	.word	0x20000560
 8005b84:	08001d15 	.word	0x08001d15
 8005b88:	200005a8 	.word	0x200005a8
 8005b8c:	08001d25 	.word	0x08001d25

08005b90 <setTimeAction>:

static void setTimeAction(void){
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 8005b94:	4802      	ldr	r0, [pc, #8]	; (8005ba0 <setTimeAction+0x10>)
 8005b96:	f7fc f8d9 	bl	8001d4c <guiApplyView>
}
 8005b9a:	bf00      	nop
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	2000028c 	.word	0x2000028c

08005ba4 <setDateAction>:
static void setDateAction(void){
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 8005ba8:	4802      	ldr	r0, [pc, #8]	; (8005bb4 <setDateAction+0x10>)
 8005baa:	f7fc f8cf 	bl	8001d4c <guiApplyView>
}
 8005bae:	bf00      	nop
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000258 	.word	0x20000258

08005bb8 <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005bbc:	f7ff ffcc 	bl	8005b58 <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 8005bc0:	4802      	ldr	r0, [pc, #8]	; (8005bcc <faceSetup+0x14>)
 8005bc2:	f7fe f8df 	bl	8003d84 <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	08005b59 	.word	0x08005b59

08005bd0 <faceMain>:

void faceMain(void){
 8005bd0:	b590      	push	{r4, r7, lr}
 8005bd2:	b0b1      	sub	sp, #196	; 0xc4
 8005bd4:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	609a      	str	r2, [r3, #8]
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	611a      	str	r2, [r3, #16]
 8005bec:	615a      	str	r2, [r3, #20]
 8005bee:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 8005bf0:	4b83      	ldr	r3, [pc, #524]	; (8005e00 <faceMain+0x230>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fa fcc1 	bl	800057c <__aeabi_f2d>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8005c02:	4980      	ldr	r1, [pc, #512]	; (8005e04 <faceMain+0x234>)
 8005c04:	f007 f940 	bl	800ce88 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8005c08:	2314      	movs	r3, #20
 8005c0a:	b29c      	uxth	r4, r3
 8005c0c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fa faed 	bl	80001f0 <strlen>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f1c3 030d 	rsb	r3, r3, #13
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	fb14 f303 	smulbb	r3, r4, r3
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3323      	adds	r3, #35	; 0x23
 8005c26:	b298      	uxth	r0, r3
 8005c28:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005c2c:	4b76      	ldr	r3, [pc, #472]	; (8005e08 <faceMain+0x238>)
 8005c2e:	210e      	movs	r1, #14
 8005c30:	f7fc fabe 	bl	80021b0 <lcdPutStr>
	char baroStr[30] = {0};
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c3a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	605a      	str	r2, [r3, #4]
 8005c44:	609a      	str	r2, [r3, #8]
 8005c46:	60da      	str	r2, [r3, #12]
 8005c48:	611a      	str	r2, [r3, #16]
 8005c4a:	615a      	str	r2, [r3, #20]
 8005c4c:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 8005c4e:	4b6c      	ldr	r3, [pc, #432]	; (8005e00 <faceMain+0x230>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8005e0c <faceMain+0x23c>
 8005c5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c62:	ee16 0a90 	vmov	r0, s13
 8005c66:	f7fa fc89 	bl	800057c <__aeabi_f2d>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8005c72:	4967      	ldr	r1, [pc, #412]	; (8005e10 <faceMain+0x240>)
 8005c74:	f007 f908 	bl	800ce88 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 8005c78:	2314      	movs	r3, #20
 8005c7a:	b29c      	uxth	r4, r3
 8005c7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fa fab5 	bl	80001f0 <strlen>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f1c3 030d 	rsb	r3, r3, #13
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	fb14 f303 	smulbb	r3, r4, r3
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3323      	adds	r3, #35	; 0x23
 8005c96:	b298      	uxth	r0, r3
 8005c98:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005c9c:	4b5a      	ldr	r3, [pc, #360]	; (8005e08 <faceMain+0x238>)
 8005c9e:	212a      	movs	r1, #42	; 0x2a
 8005ca0:	f7fc fa86 	bl	80021b0 <lcdPutStr>

	char fracStr[30] = {0};
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	605a      	str	r2, [r3, #4]
 8005cb2:	609a      	str	r2, [r3, #8]
 8005cb4:	60da      	str	r2, [r3, #12]
 8005cb6:	611a      	str	r2, [r3, #16]
 8005cb8:	615a      	str	r2, [r3, #20]
 8005cba:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	605a      	str	r2, [r3, #4]
 8005cca:	609a      	str	r2, [r3, #8]
 8005ccc:	60da      	str	r2, [r3, #12]
 8005cce:	611a      	str	r2, [r3, #16]
 8005cd0:	615a      	str	r2, [r3, #20]
 8005cd2:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	623b      	str	r3, [r7, #32]
 8005cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	605a      	str	r2, [r3, #4]
 8005ce2:	609a      	str	r2, [r3, #8]
 8005ce4:	60da      	str	r2, [r3, #12]
 8005ce6:	611a      	str	r2, [r3, #16]
 8005ce8:	615a      	str	r2, [r3, #20]
 8005cea:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 8005cec:	4b49      	ldr	r3, [pc, #292]	; (8005e14 <faceMain+0x244>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cf6:	4948      	ldr	r1, [pc, #288]	; (8005e18 <faceMain+0x248>)
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f007 f8c5 	bl	800ce88 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 8005cfe:	4b45      	ldr	r3, [pc, #276]	; (8005e14 <faceMain+0x244>)
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f107 0320 	add.w	r3, r7, #32
 8005d08:	4943      	ldr	r1, [pc, #268]	; (8005e18 <faceMain+0x248>)
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f007 f8bc 	bl	800ce88 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 8005d10:	4b40      	ldr	r3, [pc, #256]	; (8005e14 <faceMain+0x244>)
 8005d12:	789b      	ldrb	r3, [r3, #2]
 8005d14:	461a      	mov	r2, r3
 8005d16:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005d1a:	493f      	ldr	r1, [pc, #252]	; (8005e18 <faceMain+0x248>)
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f007 f8b3 	bl	800ce88 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 8005d22:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005d26:	4b3d      	ldr	r3, [pc, #244]	; (8005e1c <faceMain+0x24c>)
 8005d28:	214c      	movs	r1, #76	; 0x4c
 8005d2a:	2014      	movs	r0, #20
 8005d2c:	f7fc fa40 	bl	80021b0 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 8005d30:	f107 0220 	add.w	r2, r7, #32
 8005d34:	4b39      	ldr	r3, [pc, #228]	; (8005e1c <faceMain+0x24c>)
 8005d36:	214c      	movs	r1, #76	; 0x4c
 8005d38:	20aa      	movs	r0, #170	; 0xaa
 8005d3a:	f7fc fa39 	bl	80021b0 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 8005d3e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005d42:	4b37      	ldr	r3, [pc, #220]	; (8005e20 <faceMain+0x250>)
 8005d44:	214c      	movs	r1, #76	; 0x4c
 8005d46:	f240 103b 	movw	r0, #315	; 0x13b
 8005d4a:	f7fc fa31 	bl	80021b0 <lcdPutStr>

	char buffString[30] = {0};
 8005d4e:	2300      	movs	r3, #0
 8005d50:	603b      	str	r3, [r7, #0]
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	611a      	str	r2, [r3, #16]
 8005d60:	615a      	str	r2, [r3, #20]
 8005d62:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8005d64:	463b      	mov	r3, r7
 8005d66:	492f      	ldr	r1, [pc, #188]	; (8005e24 <faceMain+0x254>)
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f007 f88d 	bl	800ce88 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 8005d6e:	4b2e      	ldr	r3, [pc, #184]	; (8005e28 <faceMain+0x258>)
 8005d70:	785b      	ldrb	r3, [r3, #1]
 8005d72:	461a      	mov	r2, r3
 8005d74:	4b2d      	ldr	r3, [pc, #180]	; (8005e2c <faceMain+0x25c>)
 8005d76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d7a:	4b2b      	ldr	r3, [pc, #172]	; (8005e28 <faceMain+0x258>)
 8005d7c:	78db      	ldrb	r3, [r3, #3]
 8005d7e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005d82:	4638      	mov	r0, r7
 8005d84:	492a      	ldr	r1, [pc, #168]	; (8005e30 <faceMain+0x260>)
 8005d86:	f007 f87f 	bl	800ce88 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8005d8a:	2314      	movs	r3, #20
 8005d8c:	b29c      	uxth	r4, r3
 8005d8e:	463b      	mov	r3, r7
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fa fa2d 	bl	80001f0 <strlen>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f1c3 030d 	rsb	r3, r3, #13
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	fb14 f303 	smulbb	r3, r4, r3
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3323      	adds	r3, #35	; 0x23
 8005da6:	b298      	uxth	r0, r3
 8005da8:	463a      	mov	r2, r7
 8005daa:	4b17      	ldr	r3, [pc, #92]	; (8005e08 <faceMain+0x238>)
 8005dac:	21ae      	movs	r1, #174	; 0xae
 8005dae:	f7fc f9ff 	bl	80021b0 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 8005db2:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <faceMain+0x258>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	4b1e      	ldr	r3, [pc, #120]	; (8005e34 <faceMain+0x264>)
 8005dba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005dbe:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <faceMain+0x258>)
 8005dc0:	789b      	ldrb	r3, [r3, #2]
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	491a      	ldr	r1, [pc, #104]	; (8005e30 <faceMain+0x260>)
 8005dc6:	f007 f85f 	bl	800ce88 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8005dca:	2314      	movs	r3, #20
 8005dcc:	b29c      	uxth	r4, r3
 8005dce:	463b      	mov	r3, r7
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fa fa0d 	bl	80001f0 <strlen>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f1c3 030d 	rsb	r3, r3, #13
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	fb14 f303 	smulbb	r3, r4, r3
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3323      	adds	r3, #35	; 0x23
 8005de6:	b298      	uxth	r0, r3
 8005de8:	463a      	mov	r2, r7
 8005dea:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <faceMain+0x238>)
 8005dec:	21ca      	movs	r1, #202	; 0xca
 8005dee:	f7fc f9df 	bl	80021b0 <lcdPutStr>

	enableCntxMenu();
 8005df2:	f7fe f869 	bl	8003ec8 <enableCntxMenu>
}
 8005df6:	bf00      	nop
 8005df8:	37c4      	adds	r7, #196	; 0xc4
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd90      	pop	{r4, r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000550 	.word	0x20000550
 8005e04:	080137f4 	.word	0x080137f4
 8005e08:	0802a7fc 	.word	0x0802a7fc
 8005e0c:	42c80000 	.word	0x42c80000
 8005e10:	080137fc 	.word	0x080137fc
 8005e14:	20003574 	.word	0x20003574
 8005e18:	08013808 	.word	0x08013808
 8005e1c:	0802c664 	.word	0x0802c664
 8005e20:	0802e55c 	.word	0x0802e55c
 8005e24:	08013810 	.word	0x08013810
 8005e28:	20003588 	.word	0x20003588
 8005e2c:	200001a8 	.word	0x200001a8
 8005e30:	08013820 	.word	0x08013820
 8005e34:	20000188 	.word	0x20000188

08005e38 <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 8005e3c:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <setDefaultClbcks+0x34>)
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <setDefaultClbcks+0x38>)
 8005e40:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 8005e42:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <setDefaultClbcks+0x3c>)
 8005e44:	4a0c      	ldr	r2, [pc, #48]	; (8005e78 <setDefaultClbcks+0x40>)
 8005e46:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <setDefaultClbcks+0x44>)
 8005e4a:	4a0d      	ldr	r2, [pc, #52]	; (8005e80 <setDefaultClbcks+0x48>)
 8005e4c:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	; (8005e84 <setDefaultClbcks+0x4c>)
 8005e50:	4a0d      	ldr	r2, [pc, #52]	; (8005e88 <setDefaultClbcks+0x50>)
 8005e52:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8005e54:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <setDefaultClbcks+0x54>)
 8005e56:	4a0e      	ldr	r2, [pc, #56]	; (8005e90 <setDefaultClbcks+0x58>)
 8005e58:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8005e5a:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <setDefaultClbcks+0x5c>)
 8005e5c:	4a0e      	ldr	r2, [pc, #56]	; (8005e98 <setDefaultClbcks+0x60>)
 8005e5e:	611a      	str	r2, [r3, #16]
}
 8005e60:	bf00      	nop
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	20000614 	.word	0x20000614
 8005e70:	080061a9 	.word	0x080061a9
 8005e74:	200005f0 	.word	0x200005f0
 8005e78:	08006069 	.word	0x08006069
 8005e7c:	200005cc 	.word	0x200005cc
 8005e80:	080061b5 	.word	0x080061b5
 8005e84:	20000560 	.word	0x20000560
 8005e88:	08006121 	.word	0x08006121
 8005e8c:	20000584 	.word	0x20000584
 8005e90:	08006039 	.word	0x08006039
 8005e94:	200005a8 	.word	0x200005a8
 8005e98:	08006099 	.word	0x08006099

08005e9c <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005ea0:	f7ff ffca 	bl	8005e38 <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 8005ea4:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <dateInputSetup+0x24>)
 8005ea6:	789a      	ldrb	r2, [r3, #2]
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <dateInputSetup+0x28>)
 8005eaa:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 8005eac:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <dateInputSetup+0x24>)
 8005eae:	785a      	ldrb	r2, [r3, #1]
 8005eb0:	4b04      	ldr	r3, [pc, #16]	; (8005ec4 <dateInputSetup+0x28>)
 8005eb2:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 8005eb4:	4b02      	ldr	r3, [pc, #8]	; (8005ec0 <dateInputSetup+0x24>)
 8005eb6:	78da      	ldrb	r2, [r3, #3]
 8005eb8:	4b02      	ldr	r3, [pc, #8]	; (8005ec4 <dateInputSetup+0x28>)
 8005eba:	709a      	strb	r2, [r3, #2]
}
 8005ebc:	bf00      	nop
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20003588 	.word	0x20003588
 8005ec4:	200037ac 	.word	0x200037ac

08005ec8 <dateInputMain>:

void dateInputMain(void){
 8005ec8:	b590      	push	{r4, r7, lr}
 8005eca:	b089      	sub	sp, #36	; 0x24
 8005ecc:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 8005ece:	2300      	movs	r3, #0
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	1d3b      	adds	r3, r7, #4
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	605a      	str	r2, [r3, #4]
 8005eda:	609a      	str	r2, [r3, #8]
 8005edc:	60da      	str	r2, [r3, #12]
 8005ede:	611a      	str	r2, [r3, #16]
 8005ee0:	615a      	str	r2, [r3, #20]
 8005ee2:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	494a      	ldr	r1, [pc, #296]	; (8006010 <dateInputMain+0x148>)
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f006 ffcd 	bl	800ce88 <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 8005eee:	4b49      	ldr	r3, [pc, #292]	; (8006014 <dateInputMain+0x14c>)
 8005ef0:	785b      	ldrb	r3, [r3, #1]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4b48      	ldr	r3, [pc, #288]	; (8006018 <dateInputMain+0x150>)
 8005ef6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005efa:	4b46      	ldr	r3, [pc, #280]	; (8006014 <dateInputMain+0x14c>)
 8005efc:	789b      	ldrb	r3, [r3, #2]
 8005efe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005f02:	4638      	mov	r0, r7
 8005f04:	4945      	ldr	r1, [pc, #276]	; (800601c <dateInputMain+0x154>)
 8005f06:	f006 ffbf 	bl	800ce88 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8005f0a:	2314      	movs	r3, #20
 8005f0c:	b29c      	uxth	r4, r3
 8005f0e:	463b      	mov	r3, r7
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fa f96d 	bl	80001f0 <strlen>
 8005f16:	4603      	mov	r3, r0
 8005f18:	f1c3 030d 	rsb	r3, r3, #13
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	fb14 f303 	smulbb	r3, r4, r3
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3323      	adds	r3, #35	; 0x23
 8005f26:	b298      	uxth	r0, r3
 8005f28:	463a      	mov	r2, r7
 8005f2a:	4b3d      	ldr	r3, [pc, #244]	; (8006020 <dateInputMain+0x158>)
 8005f2c:	21ae      	movs	r1, #174	; 0xae
 8005f2e:	f7fc f93f 	bl	80021b0 <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 8005f32:	4b38      	ldr	r3, [pc, #224]	; (8006014 <dateInputMain+0x14c>)
 8005f34:	7818      	ldrb	r0, [r3, #0]
 8005f36:	4b37      	ldr	r3, [pc, #220]	; (8006014 <dateInputMain+0x14c>)
 8005f38:	7859      	ldrb	r1, [r3, #1]
 8005f3a:	4b36      	ldr	r3, [pc, #216]	; (8006014 <dateInputMain+0x14c>)
 8005f3c:	789b      	ldrb	r3, [r3, #2]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	f000 fbf6 	bl	8006738 <zellerCongruence>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4b34      	ldr	r3, [pc, #208]	; (8006024 <dateInputMain+0x15c>)
 8005f52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f56:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <dateInputMain+0x14c>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	492f      	ldr	r1, [pc, #188]	; (800601c <dateInputMain+0x154>)
 8005f5e:	f006 ff93 	bl	800ce88 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8005f62:	2314      	movs	r3, #20
 8005f64:	b29c      	uxth	r4, r3
 8005f66:	463b      	mov	r3, r7
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fa f941 	bl	80001f0 <strlen>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	f1c3 030d 	rsb	r3, r3, #13
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	fb14 f303 	smulbb	r3, r4, r3
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3323      	adds	r3, #35	; 0x23
 8005f7e:	b298      	uxth	r0, r3
 8005f80:	463a      	mov	r2, r7
 8005f82:	4b27      	ldr	r3, [pc, #156]	; (8006020 <dateInputMain+0x158>)
 8005f84:	21ca      	movs	r1, #202	; 0xca
 8005f86:	f7fc f913 	bl	80021b0 <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 8005f8a:	4b27      	ldr	r3, [pc, #156]	; (8006028 <dateInputMain+0x160>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	4b26      	ldr	r3, [pc, #152]	; (800602c <dateInputMain+0x164>)
 8005f92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005f96:	4618      	mov	r0, r3
 8005f98:	4b23      	ldr	r3, [pc, #140]	; (8006028 <dateInputMain+0x160>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4b23      	ldr	r3, [pc, #140]	; (800602c <dateInputMain+0x164>)
 8005fa0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4b20      	ldr	r3, [pc, #128]	; (8006028 <dateInputMain+0x160>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	4619      	mov	r1, r3
 8005fac:	4b20      	ldr	r3, [pc, #128]	; (8006030 <dateInputMain+0x168>)
 8005fae:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005fb2:	18d1      	adds	r1, r2, r3
 8005fb4:	4b1c      	ldr	r3, [pc, #112]	; (8006028 <dateInputMain+0x160>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <dateInputMain+0x16c>)
 8005fbc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f7fc fd5e 	bl	8002a84 <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 8005fc8:	4b17      	ldr	r3, [pc, #92]	; (8006028 <dateInputMain+0x160>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4b17      	ldr	r3, [pc, #92]	; (800602c <dateInputMain+0x164>)
 8005fd0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	4b14      	ldr	r3, [pc, #80]	; (8006028 <dateInputMain+0x160>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4b13      	ldr	r3, [pc, #76]	; (800602c <dateInputMain+0x164>)
 8005fde:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4b10      	ldr	r3, [pc, #64]	; (8006028 <dateInputMain+0x160>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4b11      	ldr	r3, [pc, #68]	; (8006030 <dateInputMain+0x168>)
 8005fec:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ff0:	18d1      	adds	r1, r2, r3
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <dateInputMain+0x160>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <dateInputMain+0x16c>)
 8005ffa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	2301      	movs	r3, #1
 8006002:	f7fc fd3f 	bl	8002a84 <lcdHLine>
}
 8006006:	bf00      	nop
 8006008:	3724      	adds	r7, #36	; 0x24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd90      	pop	{r4, r7, pc}
 800600e:	bf00      	nop
 8006010:	080138e0 	.word	0x080138e0
 8006014:	200037ac 	.word	0x200037ac
 8006018:	2000020c 	.word	0x2000020c
 800601c:	080138f0 	.word	0x080138f0
 8006020:	08033c34 	.word	0x08033c34
 8006024:	200001ec 	.word	0x200001ec
 8006028:	200037a8 	.word	0x200037a8
 800602c:	20000240 	.word	0x20000240
 8006030:	20000250 	.word	0x20000250
 8006034:	20000248 	.word	0x20000248

08006038 <cursorNext>:

static void cursorNext(void){
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 800603c:	4b09      	ldr	r3, [pc, #36]	; (8006064 <cursorNext+0x2c>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d806      	bhi.n	8006052 <cursorNext+0x1a>
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <cursorNext+0x2c>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	3301      	adds	r3, #1
 800604a:	b2da      	uxtb	r2, r3
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <cursorNext+0x2c>)
 800604e:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 8006050:	e002      	b.n	8006058 <cursorNext+0x20>
	else curPosition = 0;
 8006052:	4b04      	ldr	r3, [pc, #16]	; (8006064 <cursorNext+0x2c>)
 8006054:	2200      	movs	r2, #0
 8006056:	701a      	strb	r2, [r3, #0]
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	200037a8 	.word	0x200037a8

08006068 <cursorPrev>:
static void cursorPrev(void){
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <cursorPrev+0x2c>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d006      	beq.n	8006082 <cursorPrev+0x1a>
 8006074:	4b07      	ldr	r3, [pc, #28]	; (8006094 <cursorPrev+0x2c>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	3b01      	subs	r3, #1
 800607a:	b2da      	uxtb	r2, r3
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <cursorPrev+0x2c>)
 800607e:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 8006080:	e002      	b.n	8006088 <cursorPrev+0x20>
	else curPosition = 2;
 8006082:	4b04      	ldr	r3, [pc, #16]	; (8006094 <cursorPrev+0x2c>)
 8006084:	2202      	movs	r2, #2
 8006086:	701a      	strb	r2, [r3, #0]
}
 8006088:	bf00      	nop
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	200037a8 	.word	0x200037a8

08006098 <increment>:
static void increment(void){
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
	switch(curPosition){
 800609c:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <increment+0x80>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d024      	beq.n	80060ee <increment+0x56>
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	dc31      	bgt.n	800610c <increment+0x74>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <increment+0x1a>
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d00f      	beq.n	80060d0 <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 80060b0:	e02c      	b.n	800610c <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 80060b2:	4b1a      	ldr	r3, [pc, #104]	; (800611c <increment+0x84>)
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	2b0b      	cmp	r3, #11
 80060b8:	d806      	bhi.n	80060c8 <increment+0x30>
 80060ba:	4b18      	ldr	r3, [pc, #96]	; (800611c <increment+0x84>)
 80060bc:	785b      	ldrb	r3, [r3, #1]
 80060be:	3301      	adds	r3, #1
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	4b16      	ldr	r3, [pc, #88]	; (800611c <increment+0x84>)
 80060c4:	705a      	strb	r2, [r3, #1]
			break;
 80060c6:	e021      	b.n	800610c <increment+0x74>
			else valDatePos[1] = 1;
 80060c8:	4b14      	ldr	r3, [pc, #80]	; (800611c <increment+0x84>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	705a      	strb	r2, [r3, #1]
			break;
 80060ce:	e01d      	b.n	800610c <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 80060d0:	4b12      	ldr	r3, [pc, #72]	; (800611c <increment+0x84>)
 80060d2:	789b      	ldrb	r3, [r3, #2]
 80060d4:	2b63      	cmp	r3, #99	; 0x63
 80060d6:	d806      	bhi.n	80060e6 <increment+0x4e>
 80060d8:	4b10      	ldr	r3, [pc, #64]	; (800611c <increment+0x84>)
 80060da:	789b      	ldrb	r3, [r3, #2]
 80060dc:	3301      	adds	r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b0e      	ldr	r3, [pc, #56]	; (800611c <increment+0x84>)
 80060e2:	709a      	strb	r2, [r3, #2]
			break;
 80060e4:	e012      	b.n	800610c <increment+0x74>
			else valDatePos[2] = 0;
 80060e6:	4b0d      	ldr	r3, [pc, #52]	; (800611c <increment+0x84>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	709a      	strb	r2, [r3, #2]
			break;
 80060ec:	e00e      	b.n	800610c <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 80060ee:	4b0b      	ldr	r3, [pc, #44]	; (800611c <increment+0x84>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b1e      	cmp	r3, #30
 80060f4:	d806      	bhi.n	8006104 <increment+0x6c>
 80060f6:	4b09      	ldr	r3, [pc, #36]	; (800611c <increment+0x84>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	3301      	adds	r3, #1
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	4b07      	ldr	r3, [pc, #28]	; (800611c <increment+0x84>)
 8006100:	701a      	strb	r2, [r3, #0]
			break;
 8006102:	e002      	b.n	800610a <increment+0x72>
			else valDatePos[0] = 1;
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <increment+0x84>)
 8006106:	2201      	movs	r2, #1
 8006108:	701a      	strb	r2, [r3, #0]
			break;
 800610a:	bf00      	nop
}
 800610c:	bf00      	nop
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	200037a8 	.word	0x200037a8
 800611c:	200037ac 	.word	0x200037ac

08006120 <decrement>:
static void decrement(void){
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
	switch(curPosition){
 8006124:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <decrement+0x80>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d024      	beq.n	8006176 <decrement+0x56>
 800612c:	2b02      	cmp	r3, #2
 800612e:	dc31      	bgt.n	8006194 <decrement+0x74>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <decrement+0x1a>
 8006134:	2b01      	cmp	r3, #1
 8006136:	d00f      	beq.n	8006158 <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 8006138:	e02c      	b.n	8006194 <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 800613a:	4b1a      	ldr	r3, [pc, #104]	; (80061a4 <decrement+0x84>)
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d006      	beq.n	8006150 <decrement+0x30>
 8006142:	4b18      	ldr	r3, [pc, #96]	; (80061a4 <decrement+0x84>)
 8006144:	785b      	ldrb	r3, [r3, #1]
 8006146:	3b01      	subs	r3, #1
 8006148:	b2da      	uxtb	r2, r3
 800614a:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <decrement+0x84>)
 800614c:	705a      	strb	r2, [r3, #1]
				break;
 800614e:	e021      	b.n	8006194 <decrement+0x74>
				else valDatePos[1] = 12;
 8006150:	4b14      	ldr	r3, [pc, #80]	; (80061a4 <decrement+0x84>)
 8006152:	220c      	movs	r2, #12
 8006154:	705a      	strb	r2, [r3, #1]
				break;
 8006156:	e01d      	b.n	8006194 <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 8006158:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <decrement+0x84>)
 800615a:	789b      	ldrb	r3, [r3, #2]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d006      	beq.n	800616e <decrement+0x4e>
 8006160:	4b10      	ldr	r3, [pc, #64]	; (80061a4 <decrement+0x84>)
 8006162:	789b      	ldrb	r3, [r3, #2]
 8006164:	3b01      	subs	r3, #1
 8006166:	b2da      	uxtb	r2, r3
 8006168:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <decrement+0x84>)
 800616a:	709a      	strb	r2, [r3, #2]
				break;
 800616c:	e012      	b.n	8006194 <decrement+0x74>
				else valDatePos[2] = 100;
 800616e:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <decrement+0x84>)
 8006170:	2264      	movs	r2, #100	; 0x64
 8006172:	709a      	strb	r2, [r3, #2]
				break;
 8006174:	e00e      	b.n	8006194 <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 8006176:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <decrement+0x84>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d906      	bls.n	800618c <decrement+0x6c>
 800617e:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <decrement+0x84>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	3b01      	subs	r3, #1
 8006184:	b2da      	uxtb	r2, r3
 8006186:	4b07      	ldr	r3, [pc, #28]	; (80061a4 <decrement+0x84>)
 8006188:	701a      	strb	r2, [r3, #0]
				break;
 800618a:	e002      	b.n	8006192 <decrement+0x72>
				else valDatePos[0] = 31;
 800618c:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <decrement+0x84>)
 800618e:	221f      	movs	r2, #31
 8006190:	701a      	strb	r2, [r3, #0]
				break;
 8006192:	bf00      	nop
}
 8006194:	bf00      	nop
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	200037a8 	.word	0x200037a8
 80061a4:	200037ac 	.word	0x200037ac

080061a8 <exit>:
static void exit(void){
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
	applySelectedScreen();
 80061ac:	f7fb fde4 	bl	8001d78 <applySelectedScreen>
}
 80061b0:	bf00      	nop
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <accept>:
static void accept(void){
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 80061b8:	4b15      	ldr	r3, [pc, #84]	; (8006210 <accept+0x5c>)
 80061ba:	785a      	ldrb	r2, [r3, #1]
 80061bc:	4b15      	ldr	r3, [pc, #84]	; (8006214 <accept+0x60>)
 80061be:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 80061c0:	4b13      	ldr	r3, [pc, #76]	; (8006210 <accept+0x5c>)
 80061c2:	781a      	ldrb	r2, [r3, #0]
 80061c4:	4b13      	ldr	r3, [pc, #76]	; (8006214 <accept+0x60>)
 80061c6:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 80061c8:	4b11      	ldr	r3, [pc, #68]	; (8006210 <accept+0x5c>)
 80061ca:	789a      	ldrb	r2, [r3, #2]
 80061cc:	4b11      	ldr	r3, [pc, #68]	; (8006214 <accept+0x60>)
 80061ce:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 80061d0:	4b0f      	ldr	r3, [pc, #60]	; (8006210 <accept+0x5c>)
 80061d2:	7818      	ldrb	r0, [r3, #0]
 80061d4:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <accept+0x5c>)
 80061d6:	7859      	ldrb	r1, [r3, #1]
 80061d8:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <accept+0x5c>)
 80061da:	789b      	ldrb	r3, [r3, #2]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	f000 faa7 	bl	8006738 <zellerCongruence>
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	4b09      	ldr	r3, [pc, #36]	; (8006214 <accept+0x60>)
 80061f0:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 80061f2:	2200      	movs	r2, #0
 80061f4:	4907      	ldr	r1, [pc, #28]	; (8006214 <accept+0x60>)
 80061f6:	4808      	ldr	r0, [pc, #32]	; (8006218 <accept+0x64>)
 80061f8:	f002 ff96 	bl	8009128 <HAL_RTC_SetDate>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <accept+0x52>
	{
	Error_Handler();
 8006202:	f7fc ff41 	bl	8003088 <Error_Handler>
	}
	exit();
 8006206:	f7ff ffcf 	bl	80061a8 <exit>
}
 800620a:	bf00      	nop
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	200037ac 	.word	0x200037ac
 8006214:	20003588 	.word	0x20003588
 8006218:	20003598 	.word	0x20003598

0800621c <setDefaultClbcks>:
#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exit;
 8006220:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <setDefaultClbcks+0x34>)
 8006222:	4a0c      	ldr	r2, [pc, #48]	; (8006254 <setDefaultClbcks+0x38>)
 8006224:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <setDefaultClbcks+0x3c>)
 8006228:	4a0c      	ldr	r2, [pc, #48]	; (800625c <setDefaultClbcks+0x40>)
 800622a:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 800622c:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <setDefaultClbcks+0x44>)
 800622e:	4a0d      	ldr	r2, [pc, #52]	; (8006264 <setDefaultClbcks+0x48>)
 8006230:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 8006232:	4b0d      	ldr	r3, [pc, #52]	; (8006268 <setDefaultClbcks+0x4c>)
 8006234:	4a0d      	ldr	r2, [pc, #52]	; (800626c <setDefaultClbcks+0x50>)
 8006236:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8006238:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <setDefaultClbcks+0x54>)
 800623a:	4a0e      	ldr	r2, [pc, #56]	; (8006274 <setDefaultClbcks+0x58>)
 800623c:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 800623e:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <setDefaultClbcks+0x5c>)
 8006240:	4a0e      	ldr	r2, [pc, #56]	; (800627c <setDefaultClbcks+0x60>)
 8006242:	611a      	str	r2, [r3, #16]
}
 8006244:	bf00      	nop
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	20000614 	.word	0x20000614
 8006254:	080065a1 	.word	0x080065a1
 8006258:	200005f0 	.word	0x200005f0
 800625c:	080063e5 	.word	0x080063e5
 8006260:	200005cc 	.word	0x200005cc
 8006264:	080065ad 	.word	0x080065ad
 8006268:	20000560 	.word	0x20000560
 800626c:	080064d1 	.word	0x080064d1
 8006270:	20000584 	.word	0x20000584
 8006274:	080063b5 	.word	0x080063b5
 8006278:	200005a8 	.word	0x200005a8
 800627c:	08006415 	.word	0x08006415

08006280 <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006284:	f7ff ffca 	bl	800621c <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 8006288:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <timeInputSetup+0x24>)
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <timeInputSetup+0x28>)
 800628e:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 8006290:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <timeInputSetup+0x24>)
 8006292:	785a      	ldrb	r2, [r3, #1]
 8006294:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <timeInputSetup+0x28>)
 8006296:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 8006298:	4b02      	ldr	r3, [pc, #8]	; (80062a4 <timeInputSetup+0x24>)
 800629a:	789a      	ldrb	r2, [r3, #2]
 800629c:	4b02      	ldr	r3, [pc, #8]	; (80062a8 <timeInputSetup+0x28>)
 800629e:	709a      	strb	r2, [r3, #2]
}
 80062a0:	bf00      	nop
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20003574 	.word	0x20003574
 80062a8:	200037b0 	.word	0x200037b0

080062ac <timeInputMain>:

void timeInputMain(void){
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 80062b2:	2300      	movs	r3, #0
 80062b4:	603b      	str	r3, [r7, #0]
 80062b6:	1d3b      	adds	r3, r7, #4
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	609a      	str	r2, [r3, #8]
 80062c0:	60da      	str	r2, [r3, #12]
 80062c2:	611a      	str	r2, [r3, #16]
 80062c4:	615a      	str	r2, [r3, #20]
 80062c6:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 80062c8:	4b33      	ldr	r3, [pc, #204]	; (8006398 <timeInputMain+0xec>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	463b      	mov	r3, r7
 80062d0:	4932      	ldr	r1, [pc, #200]	; (800639c <timeInputMain+0xf0>)
 80062d2:	4618      	mov	r0, r3
 80062d4:	f006 fdd8 	bl	800ce88 <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 80062d8:	463a      	mov	r2, r7
 80062da:	4b31      	ldr	r3, [pc, #196]	; (80063a0 <timeInputMain+0xf4>)
 80062dc:	214c      	movs	r1, #76	; 0x4c
 80062de:	2014      	movs	r0, #20
 80062e0:	f7fb ff66 	bl	80021b0 <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 80062e4:	4b2c      	ldr	r3, [pc, #176]	; (8006398 <timeInputMain+0xec>)
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	461a      	mov	r2, r3
 80062ea:	463b      	mov	r3, r7
 80062ec:	492b      	ldr	r1, [pc, #172]	; (800639c <timeInputMain+0xf0>)
 80062ee:	4618      	mov	r0, r3
 80062f0:	f006 fdca 	bl	800ce88 <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 80062f4:	463a      	mov	r2, r7
 80062f6:	4b2a      	ldr	r3, [pc, #168]	; (80063a0 <timeInputMain+0xf4>)
 80062f8:	214c      	movs	r1, #76	; 0x4c
 80062fa:	20aa      	movs	r0, #170	; 0xaa
 80062fc:	f7fb ff58 	bl	80021b0 <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 8006300:	4b28      	ldr	r3, [pc, #160]	; (80063a4 <timeInputMain+0xf8>)
 8006302:	789b      	ldrb	r3, [r3, #2]
 8006304:	461a      	mov	r2, r3
 8006306:	463b      	mov	r3, r7
 8006308:	4924      	ldr	r1, [pc, #144]	; (800639c <timeInputMain+0xf0>)
 800630a:	4618      	mov	r0, r3
 800630c:	f006 fdbc 	bl	800ce88 <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 8006310:	463a      	mov	r2, r7
 8006312:	4b25      	ldr	r3, [pc, #148]	; (80063a8 <timeInputMain+0xfc>)
 8006314:	214c      	movs	r1, #76	; 0x4c
 8006316:	f240 103b 	movw	r0, #315	; 0x13b
 800631a:	f7fb ff49 	bl	80021b0 <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 800631e:	4b23      	ldr	r3, [pc, #140]	; (80063ac <timeInputMain+0x100>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	4b22      	ldr	r3, [pc, #136]	; (80063b0 <timeInputMain+0x104>)
 8006326:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800632a:	4618      	mov	r0, r3
 800632c:	4b1f      	ldr	r3, [pc, #124]	; (80063ac <timeInputMain+0x100>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	4b1f      	ldr	r3, [pc, #124]	; (80063b0 <timeInputMain+0x104>)
 8006334:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006338:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800633c:	2301      	movs	r3, #1
 800633e:	22af      	movs	r2, #175	; 0xaf
 8006340:	f7fc fba0 	bl	8002a84 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 8006344:	4b19      	ldr	r3, [pc, #100]	; (80063ac <timeInputMain+0x100>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <timeInputMain+0x104>)
 800634c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006350:	4618      	mov	r0, r3
 8006352:	4b16      	ldr	r3, [pc, #88]	; (80063ac <timeInputMain+0x100>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <timeInputMain+0x104>)
 800635a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800635e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006362:	2301      	movs	r3, #1
 8006364:	22b0      	movs	r2, #176	; 0xb0
 8006366:	f7fc fb8d 	bl	8002a84 <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 800636a:	4b10      	ldr	r3, [pc, #64]	; (80063ac <timeInputMain+0x100>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <timeInputMain+0x104>)
 8006372:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006376:	4618      	mov	r0, r3
 8006378:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <timeInputMain+0x100>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <timeInputMain+0x104>)
 8006380:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006384:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006388:	2301      	movs	r3, #1
 800638a:	22b1      	movs	r2, #177	; 0xb1
 800638c:	f7fc fb7a 	bl	8002a84 <lcdHLine>
}
 8006390:	bf00      	nop
 8006392:	3720      	adds	r7, #32
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	200037b0 	.word	0x200037b0
 800639c:	080139b0 	.word	0x080139b0
 80063a0:	08035a9c 	.word	0x08035a9c
 80063a4:	20003574 	.word	0x20003574
 80063a8:	08037994 	.word	0x08037994
 80063ac:	200037af 	.word	0x200037af
 80063b0:	20000280 	.word	0x20000280

080063b4 <cursorNext>:

static void cursorNext(void){
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 80063b8:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <cursorNext+0x2c>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d806      	bhi.n	80063ce <cursorNext+0x1a>
 80063c0:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <cursorNext+0x2c>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <cursorNext+0x2c>)
 80063ca:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 80063cc:	e002      	b.n	80063d4 <cursorNext+0x20>
	else curPosition = 0;
 80063ce:	4b04      	ldr	r3, [pc, #16]	; (80063e0 <cursorNext+0x2c>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	701a      	strb	r2, [r3, #0]
}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	200037af 	.word	0x200037af

080063e4 <cursorPrev>:
static void cursorPrev(void){
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 80063e8:	4b09      	ldr	r3, [pc, #36]	; (8006410 <cursorPrev+0x2c>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d006      	beq.n	80063fe <cursorPrev+0x1a>
 80063f0:	4b07      	ldr	r3, [pc, #28]	; (8006410 <cursorPrev+0x2c>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <cursorPrev+0x2c>)
 80063fa:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 80063fc:	e002      	b.n	8006404 <cursorPrev+0x20>
	else curPosition = 4;
 80063fe:	4b04      	ldr	r3, [pc, #16]	; (8006410 <cursorPrev+0x2c>)
 8006400:	2204      	movs	r2, #4
 8006402:	701a      	strb	r2, [r3, #0]
}
 8006404:	bf00      	nop
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	200037af 	.word	0x200037af

08006414 <increment>:
static void increment(void){
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
	switch(curPosition){
 8006418:	4b2b      	ldr	r3, [pc, #172]	; (80064c8 <increment+0xb4>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d84d      	bhi.n	80064bc <increment+0xa8>
 8006420:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <increment+0x14>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	0800643d 	.word	0x0800643d
 800642c:	0800645b 	.word	0x0800645b
 8006430:	08006479 	.word	0x08006479
 8006434:	08006497 	.word	0x08006497
 8006438:	080064b5 	.word	0x080064b5
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 800643c:	4b23      	ldr	r3, [pc, #140]	; (80064cc <increment+0xb8>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b0c      	cmp	r3, #12
 8006442:	d806      	bhi.n	8006452 <increment+0x3e>
 8006444:	4b21      	ldr	r3, [pc, #132]	; (80064cc <increment+0xb8>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	330a      	adds	r3, #10
 800644a:	b2da      	uxtb	r2, r3
 800644c:	4b1f      	ldr	r3, [pc, #124]	; (80064cc <increment+0xb8>)
 800644e:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 8006450:	e034      	b.n	80064bc <increment+0xa8>
			else valTimePos[0] = 20;
 8006452:	4b1e      	ldr	r3, [pc, #120]	; (80064cc <increment+0xb8>)
 8006454:	2214      	movs	r2, #20
 8006456:	701a      	strb	r2, [r3, #0]
			break;
 8006458:	e030      	b.n	80064bc <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 800645a:	4b1c      	ldr	r3, [pc, #112]	; (80064cc <increment+0xb8>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b17      	cmp	r3, #23
 8006460:	d806      	bhi.n	8006470 <increment+0x5c>
 8006462:	4b1a      	ldr	r3, [pc, #104]	; (80064cc <increment+0xb8>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	3301      	adds	r3, #1
 8006468:	b2da      	uxtb	r2, r3
 800646a:	4b18      	ldr	r3, [pc, #96]	; (80064cc <increment+0xb8>)
 800646c:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 800646e:	e025      	b.n	80064bc <increment+0xa8>
			else valTimePos[0] = 0;
 8006470:	4b16      	ldr	r3, [pc, #88]	; (80064cc <increment+0xb8>)
 8006472:	2200      	movs	r2, #0
 8006474:	701a      	strb	r2, [r3, #0]
			break;
 8006476:	e021      	b.n	80064bc <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 8006478:	4b14      	ldr	r3, [pc, #80]	; (80064cc <increment+0xb8>)
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	d806      	bhi.n	800648e <increment+0x7a>
 8006480:	4b12      	ldr	r3, [pc, #72]	; (80064cc <increment+0xb8>)
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	330a      	adds	r3, #10
 8006486:	b2da      	uxtb	r2, r3
 8006488:	4b10      	ldr	r3, [pc, #64]	; (80064cc <increment+0xb8>)
 800648a:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 800648c:	e016      	b.n	80064bc <increment+0xa8>
			else valTimePos[1] = 0;
 800648e:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <increment+0xb8>)
 8006490:	2200      	movs	r2, #0
 8006492:	705a      	strb	r2, [r3, #1]
			break;
 8006494:	e012      	b.n	80064bc <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 8006496:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <increment+0xb8>)
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2b3a      	cmp	r3, #58	; 0x3a
 800649c:	d806      	bhi.n	80064ac <increment+0x98>
 800649e:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <increment+0xb8>)
 80064a0:	785b      	ldrb	r3, [r3, #1]
 80064a2:	3301      	adds	r3, #1
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	4b09      	ldr	r3, [pc, #36]	; (80064cc <increment+0xb8>)
 80064a8:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 80064aa:	e007      	b.n	80064bc <increment+0xa8>
			else valTimePos[1] = 0;
 80064ac:	4b07      	ldr	r3, [pc, #28]	; (80064cc <increment+0xb8>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	705a      	strb	r2, [r3, #1]
			break;
 80064b2:	e003      	b.n	80064bc <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 80064b4:	4b05      	ldr	r3, [pc, #20]	; (80064cc <increment+0xb8>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	709a      	strb	r2, [r3, #2]
			break;
 80064ba:	bf00      	nop
	}
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	200037af 	.word	0x200037af
 80064cc:	200037b0 	.word	0x200037b0

080064d0 <decrement>:
static void decrement(void){
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
	switch(curPosition){
 80064d4:	4b2e      	ldr	r3, [pc, #184]	; (8006590 <decrement+0xc0>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d857      	bhi.n	800658c <decrement+0xbc>
 80064dc:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <decrement+0x14>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	080064f9 	.word	0x080064f9
 80064e8:	08006517 	.word	0x08006517
 80064ec:	08006535 	.word	0x08006535
 80064f0:	08006553 	.word	0x08006553
 80064f4:	08006571 	.word	0x08006571
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 80064f8:	4b26      	ldr	r3, [pc, #152]	; (8006594 <decrement+0xc4>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b09      	cmp	r3, #9
 80064fe:	d906      	bls.n	800650e <decrement+0x3e>
 8006500:	4b24      	ldr	r3, [pc, #144]	; (8006594 <decrement+0xc4>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	3b0a      	subs	r3, #10
 8006506:	b2da      	uxtb	r2, r3
 8006508:	4b22      	ldr	r3, [pc, #136]	; (8006594 <decrement+0xc4>)
 800650a:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 800650c:	e03e      	b.n	800658c <decrement+0xbc>
				else valTimePos[0] = 0;
 800650e:	4b21      	ldr	r3, [pc, #132]	; (8006594 <decrement+0xc4>)
 8006510:	2200      	movs	r2, #0
 8006512:	701a      	strb	r2, [r3, #0]
				break;
 8006514:	e03a      	b.n	800658c <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 8006516:	4b1f      	ldr	r3, [pc, #124]	; (8006594 <decrement+0xc4>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d006      	beq.n	800652c <decrement+0x5c>
 800651e:	4b1d      	ldr	r3, [pc, #116]	; (8006594 <decrement+0xc4>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	3b01      	subs	r3, #1
 8006524:	b2da      	uxtb	r2, r3
 8006526:	4b1b      	ldr	r3, [pc, #108]	; (8006594 <decrement+0xc4>)
 8006528:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 800652a:	e02f      	b.n	800658c <decrement+0xbc>
				else valTimePos[0] = 23;
 800652c:	4b19      	ldr	r3, [pc, #100]	; (8006594 <decrement+0xc4>)
 800652e:	2217      	movs	r2, #23
 8006530:	701a      	strb	r2, [r3, #0]
				break;
 8006532:	e02b      	b.n	800658c <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 8006534:	4b17      	ldr	r3, [pc, #92]	; (8006594 <decrement+0xc4>)
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b09      	cmp	r3, #9
 800653a:	d906      	bls.n	800654a <decrement+0x7a>
 800653c:	4b15      	ldr	r3, [pc, #84]	; (8006594 <decrement+0xc4>)
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	3b0a      	subs	r3, #10
 8006542:	b2da      	uxtb	r2, r3
 8006544:	4b13      	ldr	r3, [pc, #76]	; (8006594 <decrement+0xc4>)
 8006546:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 8006548:	e020      	b.n	800658c <decrement+0xbc>
				else valTimePos[1] = 0;
 800654a:	4b12      	ldr	r3, [pc, #72]	; (8006594 <decrement+0xc4>)
 800654c:	2200      	movs	r2, #0
 800654e:	705a      	strb	r2, [r3, #1]
				break;
 8006550:	e01c      	b.n	800658c <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 8006552:	4b10      	ldr	r3, [pc, #64]	; (8006594 <decrement+0xc4>)
 8006554:	785b      	ldrb	r3, [r3, #1]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d006      	beq.n	8006568 <decrement+0x98>
 800655a:	4b0e      	ldr	r3, [pc, #56]	; (8006594 <decrement+0xc4>)
 800655c:	785b      	ldrb	r3, [r3, #1]
 800655e:	3b01      	subs	r3, #1
 8006560:	b2da      	uxtb	r2, r3
 8006562:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <decrement+0xc4>)
 8006564:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 8006566:	e011      	b.n	800658c <decrement+0xbc>
				else valTimePos[1] = 59;
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <decrement+0xc4>)
 800656a:	223b      	movs	r2, #59	; 0x3b
 800656c:	705a      	strb	r2, [r3, #1]
				break;
 800656e:	e00d      	b.n	800658c <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 8006570:	4b09      	ldr	r3, [pc, #36]	; (8006598 <decrement+0xc8>)
 8006572:	2200      	movs	r2, #0
 8006574:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8006576:	2200      	movs	r2, #0
 8006578:	4907      	ldr	r1, [pc, #28]	; (8006598 <decrement+0xc8>)
 800657a:	4808      	ldr	r0, [pc, #32]	; (800659c <decrement+0xcc>)
 800657c:	f002 fcdc 	bl	8008f38 <HAL_RTC_SetTime>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <decrement+0xba>
					{
						Error_Handler();
 8006586:	f7fc fd7f 	bl	8003088 <Error_Handler>
					}
				break;
 800658a:	bf00      	nop
		}
}
 800658c:	bf00      	nop
 800658e:	bd80      	pop	{r7, pc}
 8006590:	200037af 	.word	0x200037af
 8006594:	200037b0 	.word	0x200037b0
 8006598:	20003574 	.word	0x20003574
 800659c:	20003598 	.word	0x20003598

080065a0 <exit>:
static void exit(void){
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
	applySelectedScreen();
 80065a4:	f7fb fbe8 	bl	8001d78 <applySelectedScreen>
}
 80065a8:	bf00      	nop
 80065aa:	bd80      	pop	{r7, pc}

080065ac <accept>:
static void accept(void){
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 80065b0:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <accept+0x3c>)
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <accept+0x40>)
 80065b6:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 80065b8:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <accept+0x3c>)
 80065ba:	785a      	ldrb	r2, [r3, #1]
 80065bc:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <accept+0x40>)
 80065be:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80065c0:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <accept+0x40>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80065c6:	4b09      	ldr	r3, [pc, #36]	; (80065ec <accept+0x40>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 80065cc:	2200      	movs	r2, #0
 80065ce:	4907      	ldr	r1, [pc, #28]	; (80065ec <accept+0x40>)
 80065d0:	4807      	ldr	r0, [pc, #28]	; (80065f0 <accept+0x44>)
 80065d2:	f002 fcb1 	bl	8008f38 <HAL_RTC_SetTime>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <accept+0x34>
	{
	Error_Handler();
 80065dc:	f7fc fd54 	bl	8003088 <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exit();
 80065e0:	f7ff ffde 	bl	80065a0 <exit>
}
 80065e4:	bf00      	nop
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	200037b0 	.word	0x200037b0
 80065ec:	20003574 	.word	0x20003574
 80065f0:	20003598 	.word	0x20003598

080065f4 <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	887a      	ldrh	r2, [r7, #2]
 8006604:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	895b      	ldrh	r3, [r3, #10]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4618      	mov	r0, r3
 800660e:	f005 faef 	bl	800bbf0 <malloc>
 8006612:	4603      	mov	r3, r0
 8006614:	461a      	mov	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	80da      	strh	r2, [r3, #6]
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	891a      	ldrh	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	895b      	ldrh	r3, [r3, #10]
 8006644:	429a      	cmp	r2, r3
 8006646:	bf0c      	ite	eq
 8006648:	2301      	moveq	r3, #1
 800664a:	2300      	movne	r3, #0
 800664c:	b2db      	uxtb	r3, r3
}
 800664e:	4618      	mov	r0, r3
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff ffe5 	bl	8006634 <ring_buffer_full>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d022      	beq.n	80066b6 <add_ovw_ring_buffer+0x5c>
		b->values[b->tail] = value;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	88db      	ldrh	r3, [r3, #6]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	88db      	ldrh	r3, [r3, #6]
 8006684:	3301      	adds	r3, #1
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	8952      	ldrh	r2, [r2, #10]
 800668a:	fb93 f1f2 	sdiv	r1, r3, r2
 800668e:	fb01 f202 	mul.w	r2, r1, r2
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	b29a      	uxth	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	889b      	ldrh	r3, [r3, #4]
 800669e:	3301      	adds	r3, #1
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	8952      	ldrh	r2, [r2, #10]
 80066a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80066a8:	fb01 f202 	mul.w	r2, r1, r2
 80066ac:	1a9b      	subs	r3, r3, r2
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	809a      	strh	r2, [r3, #4]
		b->values[b->tail] = value;
		b->num_entries++;
		b->tail = (b->tail + 1) % b->size;
		return 1;
	}
}
 80066b4:	e01b      	b.n	80066ee <add_ovw_ring_buffer+0x94>
		b->values[b->tail] = value;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	88db      	ldrh	r3, [r3, #6]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	891b      	ldrh	r3, [r3, #8]
 80066ca:	3301      	adds	r3, #1
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	88db      	ldrh	r3, [r3, #6]
 80066d6:	3301      	adds	r3, #1
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	8952      	ldrh	r2, [r2, #10]
 80066dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80066e0:	fb01 f202 	mul.w	r2, r1, r2
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	80da      	strh	r2, [r3, #6]
		return 1;
 80066ec:	2301      	movs	r3, #1
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <read_nth_ring_buffer>:
int read_nth_ring_buffer(RingBuffer_t* b, uint16_t position){
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	807b      	strh	r3, [r7, #2]
	position += b->head;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	889a      	ldrh	r2, [r3, #4]
 8006706:	887b      	ldrh	r3, [r7, #2]
 8006708:	4413      	add	r3, r2
 800670a:	807b      	strh	r3, [r7, #2]
	position = position % b->size;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	895a      	ldrh	r2, [r3, #10]
 8006710:	887b      	ldrh	r3, [r7, #2]
 8006712:	fbb3 f1f2 	udiv	r1, r3, r2
 8006716:	fb01 f202 	mul.w	r2, r1, r2
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	807b      	strh	r3, [r7, #2]
	return(b->values[position]);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	887b      	ldrh	r3, [r7, #2]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	681b      	ldr	r3, [r3, #0]
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <zellerCongruence>:
 *      Author: wojch
 */

#include "timeUtils.h"

uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	4603      	mov	r3, r0
 8006740:	71fb      	strb	r3, [r7, #7]
 8006742:	460b      	mov	r3, r1
 8006744:	71bb      	strb	r3, [r7, #6]
 8006746:	4613      	mov	r3, r2
 8006748:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 800674a:	79bb      	ldrb	r3, [r7, #6]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d104      	bne.n	800675a <zellerCongruence+0x22>
	        month = 13;
 8006750:	230d      	movs	r3, #13
 8006752:	71bb      	strb	r3, [r7, #6]
	        year--;
 8006754:	88bb      	ldrh	r3, [r7, #4]
 8006756:	3b01      	subs	r3, #1
 8006758:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 800675a:	79bb      	ldrb	r3, [r7, #6]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d104      	bne.n	800676a <zellerCongruence+0x32>
	        month = 14;
 8006760:	230e      	movs	r3, #14
 8006762:	71bb      	strb	r3, [r7, #6]
	        year--;
 8006764:	88bb      	ldrh	r3, [r7, #4]
 8006766:	3b01      	subs	r3, #1
 8006768:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 800676e:	79bb      	ldrb	r3, [r7, #6]
 8006770:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 8006772:	88bb      	ldrh	r3, [r7, #4]
 8006774:	4a29      	ldr	r2, [pc, #164]	; (800681c <zellerCongruence+0xe4>)
 8006776:	fba2 1203 	umull	r1, r2, r2, r3
 800677a:	0952      	lsrs	r2, r2, #5
 800677c:	2164      	movs	r1, #100	; 0x64
 800677e:	fb01 f202 	mul.w	r2, r1, r2
 8006782:	1a9b      	subs	r3, r3, r2
 8006784:	b29b      	uxth	r3, r3
 8006786:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 8006788:	88bb      	ldrh	r3, [r7, #4]
 800678a:	4a24      	ldr	r2, [pc, #144]	; (800681c <zellerCongruence+0xe4>)
 800678c:	fba2 2303 	umull	r2, r3, r2, r3
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	b29b      	uxth	r3, r3
 8006794:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8006796:	7bf9      	ldrb	r1, [r7, #15]
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	4613      	mov	r3, r2
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	4a1e      	ldr	r2, [pc, #120]	; (8006820 <zellerCongruence+0xe8>)
 80067a8:	fb82 0203 	smull	r0, r2, r2, r3
 80067ac:	1052      	asrs	r2, r2, #1
 80067ae:	17db      	asrs	r3, r3, #31
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	18ca      	adds	r2, r1, r3
 80067b4:	7b7b      	ldrb	r3, [r7, #13]
 80067b6:	4413      	add	r3, r2
 80067b8:	7b7a      	ldrb	r2, [r7, #13]
 80067ba:	0892      	lsrs	r2, r2, #2
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 80067c0:	7b3a      	ldrb	r2, [r7, #12]
 80067c2:	0892      	lsrs	r2, r2, #2
 80067c4:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 80067c6:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 80067c8:	7b3a      	ldrb	r2, [r7, #12]
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 80067d0:	440b      	add	r3, r1
 80067d2:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	4b13      	ldr	r3, [pc, #76]	; (8006824 <zellerCongruence+0xec>)
 80067d8:	fb83 1302 	smull	r1, r3, r3, r2
 80067dc:	4413      	add	r3, r2
 80067de:	1099      	asrs	r1, r3, #2
 80067e0:	17d3      	asrs	r3, r2, #31
 80067e2:	1ac9      	subs	r1, r1, r3
 80067e4:	460b      	mov	r3, r1
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	1a5b      	subs	r3, r3, r1
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	1d5a      	adds	r2, r3, #5
 80067f2:	4b0c      	ldr	r3, [pc, #48]	; (8006824 <zellerCongruence+0xec>)
 80067f4:	fb83 1302 	smull	r1, r3, r3, r2
 80067f8:	4413      	add	r3, r2
 80067fa:	1099      	asrs	r1, r3, #2
 80067fc:	17d3      	asrs	r3, r2, #31
 80067fe:	1ac9      	subs	r1, r1, r3
 8006800:	460b      	mov	r3, r1
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	1a5b      	subs	r3, r3, r1
 8006806:	1ad1      	subs	r1, r2, r3
 8006808:	b2cb      	uxtb	r3, r1
 800680a:	3301      	adds	r3, #1
 800680c:	b2db      	uxtb	r3, r3
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	51eb851f 	.word	0x51eb851f
 8006820:	66666667 	.word	0x66666667
 8006824:	92492493 	.word	0x92492493

08006828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006860 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800682c:	480d      	ldr	r0, [pc, #52]	; (8006864 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800682e:	490e      	ldr	r1, [pc, #56]	; (8006868 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006830:	4a0e      	ldr	r2, [pc, #56]	; (800686c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006834:	e002      	b.n	800683c <LoopCopyDataInit>

08006836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800683a:	3304      	adds	r3, #4

0800683c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800683c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800683e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006840:	d3f9      	bcc.n	8006836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006842:	4a0b      	ldr	r2, [pc, #44]	; (8006870 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006844:	4c0b      	ldr	r4, [pc, #44]	; (8006874 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006848:	e001      	b.n	800684e <LoopFillZerobss>

0800684a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800684a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800684c:	3204      	adds	r2, #4

0800684e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800684e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006850:	d3fb      	bcc.n	800684a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006852:	f7fc fe13 	bl	800347c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006856:	f005 f9a7 	bl	800bba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800685a:	f7fc faed 	bl	8002e38 <main>
  bx  lr    
 800685e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006860:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006868:	200004f0 	.word	0x200004f0
  ldr r2, =_sidata
 800686c:	0803da20 	.word	0x0803da20
  ldr r2, =_sbss
 8006870:	200004f0 	.word	0x200004f0
  ldr r4, =_ebss
 8006874:	200037f8 	.word	0x200037f8

08006878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006878:	e7fe      	b.n	8006878 <ADC_IRQHandler>
	...

0800687c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006880:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <HAL_Init+0x40>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a0d      	ldr	r2, [pc, #52]	; (80068bc <HAL_Init+0x40>)
 8006886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800688a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800688c:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <HAL_Init+0x40>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <HAL_Init+0x40>)
 8006892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006898:	4b08      	ldr	r3, [pc, #32]	; (80068bc <HAL_Init+0x40>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a07      	ldr	r2, [pc, #28]	; (80068bc <HAL_Init+0x40>)
 800689e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068a4:	2003      	movs	r0, #3
 80068a6:	f000 f94f 	bl	8006b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068aa:	2000      	movs	r0, #0
 80068ac:	f000 f808 	bl	80068c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068b0:	f7fc fcd0 	bl	8003254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40023c00 	.word	0x40023c00

080068c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80068c8:	4b12      	ldr	r3, [pc, #72]	; (8006914 <HAL_InitTick+0x54>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	4b12      	ldr	r3, [pc, #72]	; (8006918 <HAL_InitTick+0x58>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	4619      	mov	r1, r3
 80068d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80068da:	fbb2 f3f3 	udiv	r3, r2, r3
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 f967 	bl	8006bb2 <HAL_SYSTICK_Config>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e00e      	b.n	800690c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b0f      	cmp	r3, #15
 80068f2:	d80a      	bhi.n	800690a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068f4:	2200      	movs	r2, #0
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295
 80068fc:	f000 f92f 	bl	8006b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006900:	4a06      	ldr	r2, [pc, #24]	; (800691c <HAL_InitTick+0x5c>)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	e000      	b.n	800690c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20000180 	.word	0x20000180
 8006918:	200002b8 	.word	0x200002b8
 800691c:	200002b4 	.word	0x200002b4

08006920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006924:	4b06      	ldr	r3, [pc, #24]	; (8006940 <HAL_IncTick+0x20>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	4b06      	ldr	r3, [pc, #24]	; (8006944 <HAL_IncTick+0x24>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4413      	add	r3, r2
 8006930:	4a04      	ldr	r2, [pc, #16]	; (8006944 <HAL_IncTick+0x24>)
 8006932:	6013      	str	r3, [r2, #0]
}
 8006934:	bf00      	nop
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	200002b8 	.word	0x200002b8
 8006944:	200037b4 	.word	0x200037b4

08006948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  return uwTick;
 800694c:	4b03      	ldr	r3, [pc, #12]	; (800695c <HAL_GetTick+0x14>)
 800694e:	681b      	ldr	r3, [r3, #0]
}
 8006950:	4618      	mov	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	200037b4 	.word	0x200037b4

08006960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006968:	f7ff ffee 	bl	8006948 <HAL_GetTick>
 800696c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d005      	beq.n	8006986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800697a:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <HAL_Delay+0x44>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006986:	bf00      	nop
 8006988:	f7ff ffde 	bl	8006948 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	429a      	cmp	r2, r3
 8006996:	d8f7      	bhi.n	8006988 <HAL_Delay+0x28>
  {
  }
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	200002b8 	.word	0x200002b8

080069a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069b8:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <__NVIC_SetPriorityGrouping+0x44>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069c4:	4013      	ands	r3, r2
 80069c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069da:	4a04      	ldr	r2, [pc, #16]	; (80069ec <__NVIC_SetPriorityGrouping+0x44>)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	60d3      	str	r3, [r2, #12]
}
 80069e0:	bf00      	nop
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	e000ed00 	.word	0xe000ed00

080069f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069f4:	4b04      	ldr	r3, [pc, #16]	; (8006a08 <__NVIC_GetPriorityGrouping+0x18>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	0a1b      	lsrs	r3, r3, #8
 80069fa:	f003 0307 	and.w	r3, r3, #7
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	e000ed00 	.word	0xe000ed00

08006a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	db0b      	blt.n	8006a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	f003 021f 	and.w	r2, r3, #31
 8006a24:	4907      	ldr	r1, [pc, #28]	; (8006a44 <__NVIC_EnableIRQ+0x38>)
 8006a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	2001      	movs	r0, #1
 8006a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8006a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	e000e100 	.word	0xe000e100

08006a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	6039      	str	r1, [r7, #0]
 8006a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	db0a      	blt.n	8006a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	490c      	ldr	r1, [pc, #48]	; (8006a94 <__NVIC_SetPriority+0x4c>)
 8006a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a66:	0112      	lsls	r2, r2, #4
 8006a68:	b2d2      	uxtb	r2, r2
 8006a6a:	440b      	add	r3, r1
 8006a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a70:	e00a      	b.n	8006a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	4908      	ldr	r1, [pc, #32]	; (8006a98 <__NVIC_SetPriority+0x50>)
 8006a78:	79fb      	ldrb	r3, [r7, #7]
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	3b04      	subs	r3, #4
 8006a80:	0112      	lsls	r2, r2, #4
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	440b      	add	r3, r1
 8006a86:	761a      	strb	r2, [r3, #24]
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	e000e100 	.word	0xe000e100
 8006a98:	e000ed00 	.word	0xe000ed00

08006a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b089      	sub	sp, #36	; 0x24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	f1c3 0307 	rsb	r3, r3, #7
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	bf28      	it	cs
 8006aba:	2304      	movcs	r3, #4
 8006abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	2b06      	cmp	r3, #6
 8006ac4:	d902      	bls.n	8006acc <NVIC_EncodePriority+0x30>
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	3b03      	subs	r3, #3
 8006aca:	e000      	b.n	8006ace <NVIC_EncodePriority+0x32>
 8006acc:	2300      	movs	r3, #0
 8006ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	43da      	mvns	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	401a      	ands	r2, r3
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	fa01 f303 	lsl.w	r3, r1, r3
 8006aee:	43d9      	mvns	r1, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006af4:	4313      	orrs	r3, r2
         );
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3724      	adds	r7, #36	; 0x24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
	...

08006b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b14:	d301      	bcc.n	8006b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b16:	2301      	movs	r3, #1
 8006b18:	e00f      	b.n	8006b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b1a:	4a0a      	ldr	r2, [pc, #40]	; (8006b44 <SysTick_Config+0x40>)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b22:	210f      	movs	r1, #15
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	f7ff ff8e 	bl	8006a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <SysTick_Config+0x40>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b32:	4b04      	ldr	r3, [pc, #16]	; (8006b44 <SysTick_Config+0x40>)
 8006b34:	2207      	movs	r2, #7
 8006b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	e000e010 	.word	0xe000e010

08006b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff ff29 	bl	80069a8 <__NVIC_SetPriorityGrouping>
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b086      	sub	sp, #24
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	4603      	mov	r3, r0
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]
 8006b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b70:	f7ff ff3e 	bl	80069f0 <__NVIC_GetPriorityGrouping>
 8006b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	6978      	ldr	r0, [r7, #20]
 8006b7c:	f7ff ff8e 	bl	8006a9c <NVIC_EncodePriority>
 8006b80:	4602      	mov	r2, r0
 8006b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b86:	4611      	mov	r1, r2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff ff5d 	bl	8006a48 <__NVIC_SetPriority>
}
 8006b8e:	bf00      	nop
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff ff31 	bl	8006a0c <__NVIC_EnableIRQ>
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff ffa2 	bl	8006b04 <SysTick_Config>
 8006bc0:	4603      	mov	r3, r0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006bd8:	f7ff feb6 	bl	8006948 <HAL_GetTick>
 8006bdc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d008      	beq.n	8006bfc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2280      	movs	r2, #128	; 0x80
 8006bee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e052      	b.n	8006ca2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0216 	bic.w	r2, r2, #22
 8006c0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695a      	ldr	r2, [r3, #20]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d103      	bne.n	8006c2c <HAL_DMA_Abort+0x62>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d007      	beq.n	8006c3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 0208 	bic.w	r2, r2, #8
 8006c3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0201 	bic.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c4c:	e013      	b.n	8006c76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c4e:	f7ff fe7b 	bl	8006948 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b05      	cmp	r3, #5
 8006c5a:	d90c      	bls.n	8006c76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2203      	movs	r2, #3
 8006c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e015      	b.n	8006ca2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e4      	bne.n	8006c4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c88:	223f      	movs	r2, #63	; 0x3f
 8006c8a:	409a      	lsls	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d004      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2280      	movs	r2, #128	; 0x80
 8006cc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e00c      	b.n	8006ce2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2205      	movs	r2, #5
 8006ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0201 	bic.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b089      	sub	sp, #36	; 0x24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	e177      	b.n	8006ffc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	fa02 f303 	lsl.w	r3, r2, r3
 8006d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	f040 8166 	bne.w	8006ff6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d005      	beq.n	8006d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d130      	bne.n	8006da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d52:	43db      	mvns	r3, r3
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	4013      	ands	r3, r2
 8006d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	fa02 f303 	lsl.w	r3, r2, r3
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d78:	2201      	movs	r2, #1
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d80:	43db      	mvns	r3, r3
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	4013      	ands	r3, r2
 8006d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	091b      	lsrs	r3, r3, #4
 8006d8e:	f003 0201 	and.w	r2, r3, #1
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	fa02 f303 	lsl.w	r3, r2, r3
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d017      	beq.n	8006de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	2203      	movs	r2, #3
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f003 0303 	and.w	r3, r3, #3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d123      	bne.n	8006e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	08da      	lsrs	r2, r3, #3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3208      	adds	r2, #8
 8006df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	220f      	movs	r2, #15
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	43db      	mvns	r3, r3
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	08da      	lsrs	r2, r3, #3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3208      	adds	r2, #8
 8006e2e:	69b9      	ldr	r1, [r7, #24]
 8006e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	2203      	movs	r2, #3
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	43db      	mvns	r3, r3
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f003 0203 	and.w	r2, r3, #3
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 80c0 	beq.w	8006ff6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	4b66      	ldr	r3, [pc, #408]	; (8007014 <HAL_GPIO_Init+0x324>)
 8006e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7e:	4a65      	ldr	r2, [pc, #404]	; (8007014 <HAL_GPIO_Init+0x324>)
 8006e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e84:	6453      	str	r3, [r2, #68]	; 0x44
 8006e86:	4b63      	ldr	r3, [pc, #396]	; (8007014 <HAL_GPIO_Init+0x324>)
 8006e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e92:	4a61      	ldr	r2, [pc, #388]	; (8007018 <HAL_GPIO_Init+0x328>)
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	089b      	lsrs	r3, r3, #2
 8006e98:	3302      	adds	r3, #2
 8006e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	220f      	movs	r2, #15
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	43db      	mvns	r3, r3
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a58      	ldr	r2, [pc, #352]	; (800701c <HAL_GPIO_Init+0x32c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d037      	beq.n	8006f2e <HAL_GPIO_Init+0x23e>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a57      	ldr	r2, [pc, #348]	; (8007020 <HAL_GPIO_Init+0x330>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d031      	beq.n	8006f2a <HAL_GPIO_Init+0x23a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a56      	ldr	r2, [pc, #344]	; (8007024 <HAL_GPIO_Init+0x334>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d02b      	beq.n	8006f26 <HAL_GPIO_Init+0x236>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a55      	ldr	r2, [pc, #340]	; (8007028 <HAL_GPIO_Init+0x338>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d025      	beq.n	8006f22 <HAL_GPIO_Init+0x232>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a54      	ldr	r2, [pc, #336]	; (800702c <HAL_GPIO_Init+0x33c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01f      	beq.n	8006f1e <HAL_GPIO_Init+0x22e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a53      	ldr	r2, [pc, #332]	; (8007030 <HAL_GPIO_Init+0x340>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d019      	beq.n	8006f1a <HAL_GPIO_Init+0x22a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a52      	ldr	r2, [pc, #328]	; (8007034 <HAL_GPIO_Init+0x344>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d013      	beq.n	8006f16 <HAL_GPIO_Init+0x226>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a51      	ldr	r2, [pc, #324]	; (8007038 <HAL_GPIO_Init+0x348>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d00d      	beq.n	8006f12 <HAL_GPIO_Init+0x222>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a50      	ldr	r2, [pc, #320]	; (800703c <HAL_GPIO_Init+0x34c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d007      	beq.n	8006f0e <HAL_GPIO_Init+0x21e>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a4f      	ldr	r2, [pc, #316]	; (8007040 <HAL_GPIO_Init+0x350>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d101      	bne.n	8006f0a <HAL_GPIO_Init+0x21a>
 8006f06:	2309      	movs	r3, #9
 8006f08:	e012      	b.n	8006f30 <HAL_GPIO_Init+0x240>
 8006f0a:	230a      	movs	r3, #10
 8006f0c:	e010      	b.n	8006f30 <HAL_GPIO_Init+0x240>
 8006f0e:	2308      	movs	r3, #8
 8006f10:	e00e      	b.n	8006f30 <HAL_GPIO_Init+0x240>
 8006f12:	2307      	movs	r3, #7
 8006f14:	e00c      	b.n	8006f30 <HAL_GPIO_Init+0x240>
 8006f16:	2306      	movs	r3, #6
 8006f18:	e00a      	b.n	8006f30 <HAL_GPIO_Init+0x240>
 8006f1a:	2305      	movs	r3, #5
 8006f1c:	e008      	b.n	8006f30 <HAL_GPIO_Init+0x240>
 8006f1e:	2304      	movs	r3, #4
 8006f20:	e006      	b.n	8006f30 <HAL_GPIO_Init+0x240>
 8006f22:	2303      	movs	r3, #3
 8006f24:	e004      	b.n	8006f30 <HAL_GPIO_Init+0x240>
 8006f26:	2302      	movs	r3, #2
 8006f28:	e002      	b.n	8006f30 <HAL_GPIO_Init+0x240>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <HAL_GPIO_Init+0x240>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	f002 0203 	and.w	r2, r2, #3
 8006f36:	0092      	lsls	r2, r2, #2
 8006f38:	4093      	lsls	r3, r2
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f40:	4935      	ldr	r1, [pc, #212]	; (8007018 <HAL_GPIO_Init+0x328>)
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	089b      	lsrs	r3, r3, #2
 8006f46:	3302      	adds	r3, #2
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f4e:	4b3d      	ldr	r3, [pc, #244]	; (8007044 <HAL_GPIO_Init+0x354>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	43db      	mvns	r3, r3
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f72:	4a34      	ldr	r2, [pc, #208]	; (8007044 <HAL_GPIO_Init+0x354>)
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f78:	4b32      	ldr	r3, [pc, #200]	; (8007044 <HAL_GPIO_Init+0x354>)
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	43db      	mvns	r3, r3
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	4013      	ands	r3, r2
 8006f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f9c:	4a29      	ldr	r2, [pc, #164]	; (8007044 <HAL_GPIO_Init+0x354>)
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006fa2:	4b28      	ldr	r3, [pc, #160]	; (8007044 <HAL_GPIO_Init+0x354>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	43db      	mvns	r3, r3
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006fc6:	4a1f      	ldr	r2, [pc, #124]	; (8007044 <HAL_GPIO_Init+0x354>)
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006fcc:	4b1d      	ldr	r3, [pc, #116]	; (8007044 <HAL_GPIO_Init+0x354>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	43db      	mvns	r3, r3
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ff0:	4a14      	ldr	r2, [pc, #80]	; (8007044 <HAL_GPIO_Init+0x354>)
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	61fb      	str	r3, [r7, #28]
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	2b0f      	cmp	r3, #15
 8007000:	f67f ae84 	bls.w	8006d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007004:	bf00      	nop
 8007006:	bf00      	nop
 8007008:	3724      	adds	r7, #36	; 0x24
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	40023800 	.word	0x40023800
 8007018:	40013800 	.word	0x40013800
 800701c:	40020000 	.word	0x40020000
 8007020:	40020400 	.word	0x40020400
 8007024:	40020800 	.word	0x40020800
 8007028:	40020c00 	.word	0x40020c00
 800702c:	40021000 	.word	0x40021000
 8007030:	40021400 	.word	0x40021400
 8007034:	40021800 	.word	0x40021800
 8007038:	40021c00 	.word	0x40021c00
 800703c:	40022000 	.word	0x40022000
 8007040:	40022400 	.word	0x40022400
 8007044:	40013c00 	.word	0x40013c00

08007048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	887b      	ldrh	r3, [r7, #2]
 800705a:	4013      	ands	r3, r2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007060:	2301      	movs	r3, #1
 8007062:	73fb      	strb	r3, [r7, #15]
 8007064:	e001      	b.n	800706a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800706a:	7bfb      	ldrb	r3, [r7, #15]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	807b      	strh	r3, [r7, #2]
 8007084:	4613      	mov	r3, r2
 8007086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007088:	787b      	ldrb	r3, [r7, #1]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800708e:	887a      	ldrh	r2, [r7, #2]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007094:	e003      	b.n	800709e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007096:	887b      	ldrh	r3, [r7, #2]
 8007098:	041a      	lsls	r2, r3, #16
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	619a      	str	r2, [r3, #24]
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	460b      	mov	r3, r1
 80070b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80070bc:	887a      	ldrh	r2, [r7, #2]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4013      	ands	r3, r2
 80070c2:	041a      	lsls	r2, r3, #16
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	43d9      	mvns	r1, r3
 80070c8:	887b      	ldrh	r3, [r7, #2]
 80070ca:	400b      	ands	r3, r1
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	619a      	str	r2, [r3, #24]
}
 80070d2:	bf00      	nop
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
	...

080070e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	4603      	mov	r3, r0
 80070e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80070ea:	4b08      	ldr	r3, [pc, #32]	; (800710c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070ec:	695a      	ldr	r2, [r3, #20]
 80070ee:	88fb      	ldrh	r3, [r7, #6]
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d006      	beq.n	8007104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80070f6:	4a05      	ldr	r2, [pc, #20]	; (800710c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070f8:	88fb      	ldrh	r3, [r7, #6]
 80070fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80070fc:	88fb      	ldrh	r3, [r7, #6]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 f806 	bl	8007110 <HAL_GPIO_EXTI_Callback>
  }
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40013c00 	.word	0x40013c00

08007110 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
	...

08007128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e12b      	b.n	8007392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fa feac 	bl	8001eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2224      	movs	r2, #36	; 0x24
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800717a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800718a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800718c:	f001 fc76 	bl	8008a7c <HAL_RCC_GetPCLK1Freq>
 8007190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	4a81      	ldr	r2, [pc, #516]	; (800739c <HAL_I2C_Init+0x274>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d807      	bhi.n	80071ac <HAL_I2C_Init+0x84>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4a80      	ldr	r2, [pc, #512]	; (80073a0 <HAL_I2C_Init+0x278>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	bf94      	ite	ls
 80071a4:	2301      	movls	r3, #1
 80071a6:	2300      	movhi	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	e006      	b.n	80071ba <HAL_I2C_Init+0x92>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4a7d      	ldr	r2, [pc, #500]	; (80073a4 <HAL_I2C_Init+0x27c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	bf94      	ite	ls
 80071b4:	2301      	movls	r3, #1
 80071b6:	2300      	movhi	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e0e7      	b.n	8007392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4a78      	ldr	r2, [pc, #480]	; (80073a8 <HAL_I2C_Init+0x280>)
 80071c6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ca:	0c9b      	lsrs	r3, r3, #18
 80071cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	430a      	orrs	r2, r1
 80071e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	4a6a      	ldr	r2, [pc, #424]	; (800739c <HAL_I2C_Init+0x274>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d802      	bhi.n	80071fc <HAL_I2C_Init+0xd4>
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	3301      	adds	r3, #1
 80071fa:	e009      	b.n	8007210 <HAL_I2C_Init+0xe8>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007202:	fb02 f303 	mul.w	r3, r2, r3
 8007206:	4a69      	ldr	r2, [pc, #420]	; (80073ac <HAL_I2C_Init+0x284>)
 8007208:	fba2 2303 	umull	r2, r3, r2, r3
 800720c:	099b      	lsrs	r3, r3, #6
 800720e:	3301      	adds	r3, #1
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6812      	ldr	r2, [r2, #0]
 8007214:	430b      	orrs	r3, r1
 8007216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007222:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	495c      	ldr	r1, [pc, #368]	; (800739c <HAL_I2C_Init+0x274>)
 800722c:	428b      	cmp	r3, r1
 800722e:	d819      	bhi.n	8007264 <HAL_I2C_Init+0x13c>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	1e59      	subs	r1, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	fbb1 f3f3 	udiv	r3, r1, r3
 800723e:	1c59      	adds	r1, r3, #1
 8007240:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007244:	400b      	ands	r3, r1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <HAL_I2C_Init+0x138>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	1e59      	subs	r1, r3, #1
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	fbb1 f3f3 	udiv	r3, r1, r3
 8007258:	3301      	adds	r3, #1
 800725a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800725e:	e051      	b.n	8007304 <HAL_I2C_Init+0x1dc>
 8007260:	2304      	movs	r3, #4
 8007262:	e04f      	b.n	8007304 <HAL_I2C_Init+0x1dc>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d111      	bne.n	8007290 <HAL_I2C_Init+0x168>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	1e58      	subs	r0, r3, #1
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6859      	ldr	r1, [r3, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	440b      	add	r3, r1
 800727a:	fbb0 f3f3 	udiv	r3, r0, r3
 800727e:	3301      	adds	r3, #1
 8007280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007284:	2b00      	cmp	r3, #0
 8007286:	bf0c      	ite	eq
 8007288:	2301      	moveq	r3, #1
 800728a:	2300      	movne	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	e012      	b.n	80072b6 <HAL_I2C_Init+0x18e>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	1e58      	subs	r0, r3, #1
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6859      	ldr	r1, [r3, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	440b      	add	r3, r1
 800729e:	0099      	lsls	r1, r3, #2
 80072a0:	440b      	add	r3, r1
 80072a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80072a6:	3301      	adds	r3, #1
 80072a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	bf0c      	ite	eq
 80072b0:	2301      	moveq	r3, #1
 80072b2:	2300      	movne	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <HAL_I2C_Init+0x196>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e022      	b.n	8007304 <HAL_I2C_Init+0x1dc>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10e      	bne.n	80072e4 <HAL_I2C_Init+0x1bc>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	1e58      	subs	r0, r3, #1
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6859      	ldr	r1, [r3, #4]
 80072ce:	460b      	mov	r3, r1
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	440b      	add	r3, r1
 80072d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80072d8:	3301      	adds	r3, #1
 80072da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e2:	e00f      	b.n	8007304 <HAL_I2C_Init+0x1dc>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	1e58      	subs	r0, r3, #1
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6859      	ldr	r1, [r3, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	0099      	lsls	r1, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80072fa:	3301      	adds	r3, #1
 80072fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	6809      	ldr	r1, [r1, #0]
 8007308:	4313      	orrs	r3, r2
 800730a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	69da      	ldr	r2, [r3, #28]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	6911      	ldr	r1, [r2, #16]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	68d2      	ldr	r2, [r2, #12]
 800733e:	4311      	orrs	r1, r2
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6812      	ldr	r2, [r2, #0]
 8007344:	430b      	orrs	r3, r1
 8007346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695a      	ldr	r2, [r3, #20]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0201 	orr.w	r2, r2, #1
 8007372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	000186a0 	.word	0x000186a0
 80073a0:	001e847f 	.word	0x001e847f
 80073a4:	003d08ff 	.word	0x003d08ff
 80073a8:	431bde83 	.word	0x431bde83
 80073ac:	10624dd3 	.word	0x10624dd3

080073b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	4608      	mov	r0, r1
 80073ba:	4611      	mov	r1, r2
 80073bc:	461a      	mov	r2, r3
 80073be:	4603      	mov	r3, r0
 80073c0:	817b      	strh	r3, [r7, #10]
 80073c2:	460b      	mov	r3, r1
 80073c4:	813b      	strh	r3, [r7, #8]
 80073c6:	4613      	mov	r3, r2
 80073c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073ca:	f7ff fabd 	bl	8006948 <HAL_GetTick>
 80073ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b20      	cmp	r3, #32
 80073da:	f040 80d9 	bne.w	8007590 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	2319      	movs	r3, #25
 80073e4:	2201      	movs	r2, #1
 80073e6:	496d      	ldr	r1, [pc, #436]	; (800759c <HAL_I2C_Mem_Write+0x1ec>)
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fc7f 	bl	8007cec <I2C_WaitOnFlagUntilTimeout>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80073f4:	2302      	movs	r3, #2
 80073f6:	e0cc      	b.n	8007592 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d101      	bne.n	8007406 <HAL_I2C_Mem_Write+0x56>
 8007402:	2302      	movs	r3, #2
 8007404:	e0c5      	b.n	8007592 <HAL_I2C_Mem_Write+0x1e2>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b01      	cmp	r3, #1
 800741a:	d007      	beq.n	800742c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0201 	orr.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800743a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2221      	movs	r2, #33	; 0x21
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2240      	movs	r2, #64	; 0x40
 8007448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6a3a      	ldr	r2, [r7, #32]
 8007456:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800745c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007462:	b29a      	uxth	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4a4d      	ldr	r2, [pc, #308]	; (80075a0 <HAL_I2C_Mem_Write+0x1f0>)
 800746c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800746e:	88f8      	ldrh	r0, [r7, #6]
 8007470:	893a      	ldrh	r2, [r7, #8]
 8007472:	8979      	ldrh	r1, [r7, #10]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	9301      	str	r3, [sp, #4]
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	4603      	mov	r3, r0
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 fab6 	bl	80079f0 <I2C_RequestMemoryWrite>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d052      	beq.n	8007530 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e081      	b.n	8007592 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 fd00 	bl	8007e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00d      	beq.n	80074ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d107      	bne.n	80074b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e06b      	b.n	8007592 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	781a      	ldrb	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d11b      	bne.n	8007530 <HAL_I2C_Mem_Write+0x180>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d017      	beq.n	8007530 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	781a      	ldrb	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751a:	3b01      	subs	r3, #1
 800751c:	b29a      	uxth	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007526:	b29b      	uxth	r3, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1aa      	bne.n	800748e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 fcec 	bl	8007f1a <I2C_WaitOnBTFFlagUntilTimeout>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00d      	beq.n	8007564 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754c:	2b04      	cmp	r3, #4
 800754e:	d107      	bne.n	8007560 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800755e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e016      	b.n	8007592 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	e000      	b.n	8007592 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007590:	2302      	movs	r3, #2
  }
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	00100002 	.word	0x00100002
 80075a0:	ffff0000 	.word	0xffff0000

080075a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08c      	sub	sp, #48	; 0x30
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	4608      	mov	r0, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	461a      	mov	r2, r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	817b      	strh	r3, [r7, #10]
 80075b6:	460b      	mov	r3, r1
 80075b8:	813b      	strh	r3, [r7, #8]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075be:	f7ff f9c3 	bl	8006948 <HAL_GetTick>
 80075c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	f040 8208 	bne.w	80079e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	2319      	movs	r3, #25
 80075d8:	2201      	movs	r2, #1
 80075da:	497b      	ldr	r1, [pc, #492]	; (80077c8 <HAL_I2C_Mem_Read+0x224>)
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 fb85 	bl	8007cec <I2C_WaitOnFlagUntilTimeout>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80075e8:	2302      	movs	r3, #2
 80075ea:	e1fb      	b.n	80079e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d101      	bne.n	80075fa <HAL_I2C_Mem_Read+0x56>
 80075f6:	2302      	movs	r3, #2
 80075f8:	e1f4      	b.n	80079e4 <HAL_I2C_Mem_Read+0x440>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b01      	cmp	r3, #1
 800760e:	d007      	beq.n	8007620 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800762e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2222      	movs	r2, #34	; 0x22
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2240      	movs	r2, #64	; 0x40
 800763c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800764a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007650:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007656:	b29a      	uxth	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4a5b      	ldr	r2, [pc, #364]	; (80077cc <HAL_I2C_Mem_Read+0x228>)
 8007660:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007662:	88f8      	ldrh	r0, [r7, #6]
 8007664:	893a      	ldrh	r2, [r7, #8]
 8007666:	8979      	ldrh	r1, [r7, #10]
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	4603      	mov	r3, r0
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fa52 	bl	8007b1c <I2C_RequestMemoryRead>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e1b0      	b.n	80079e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007686:	2b00      	cmp	r3, #0
 8007688:	d113      	bne.n	80076b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800768a:	2300      	movs	r3, #0
 800768c:	623b      	str	r3, [r7, #32]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	623b      	str	r3, [r7, #32]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	623b      	str	r3, [r7, #32]
 800769e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	e184      	b.n	80079bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d11b      	bne.n	80076f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ca:	2300      	movs	r3, #0
 80076cc:	61fb      	str	r3, [r7, #28]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	61fb      	str	r3, [r7, #28]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	61fb      	str	r3, [r7, #28]
 80076de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e164      	b.n	80079bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d11b      	bne.n	8007732 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007708:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007718:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800771a:	2300      	movs	r3, #0
 800771c:	61bb      	str	r3, [r7, #24]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	61bb      	str	r3, [r7, #24]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	e144      	b.n	80079bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007748:	e138      	b.n	80079bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800774e:	2b03      	cmp	r3, #3
 8007750:	f200 80f1 	bhi.w	8007936 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007758:	2b01      	cmp	r3, #1
 800775a:	d123      	bne.n	80077a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800775c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 fc1b 	bl	8007f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e139      	b.n	80079e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778c:	3b01      	subs	r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077a2:	e10b      	b.n	80079bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d14e      	bne.n	800784a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	2200      	movs	r2, #0
 80077b4:	4906      	ldr	r1, [pc, #24]	; (80077d0 <HAL_I2C_Mem_Read+0x22c>)
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fa98 	bl	8007cec <I2C_WaitOnFlagUntilTimeout>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d008      	beq.n	80077d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e10e      	b.n	80079e4 <HAL_I2C_Mem_Read+0x440>
 80077c6:	bf00      	nop
 80077c8:	00100002 	.word	0x00100002
 80077cc:	ffff0000 	.word	0xffff0000
 80077d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	691a      	ldr	r2, [r3, #16]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	b2d2      	uxtb	r2, r2
 80077f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780c:	b29b      	uxth	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	b29a      	uxth	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007820:	b2d2      	uxtb	r2, r2
 8007822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007832:	3b01      	subs	r3, #1
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800783e:	b29b      	uxth	r3, r3
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007848:	e0b8      	b.n	80079bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	2200      	movs	r2, #0
 8007852:	4966      	ldr	r1, [pc, #408]	; (80079ec <HAL_I2C_Mem_Read+0x448>)
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 fa49 	bl	8007cec <I2C_WaitOnFlagUntilTimeout>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e0bf      	b.n	80079e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007890:	3b01      	subs	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789c:	b29b      	uxth	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	2200      	movs	r2, #0
 80078ae:	494f      	ldr	r1, [pc, #316]	; (80079ec <HAL_I2C_Mem_Read+0x448>)
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fa1b 	bl	8007cec <I2C_WaitOnFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e091      	b.n	80079e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	b2d2      	uxtb	r2, r2
 80078dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ec:	3b01      	subs	r3, #1
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	691a      	ldr	r2, [r3, #16]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	b2d2      	uxtb	r2, r2
 800790e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800791e:	3b01      	subs	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792a:	b29b      	uxth	r3, r3
 800792c:	3b01      	subs	r3, #1
 800792e:	b29a      	uxth	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007934:	e042      	b.n	80079bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 fb2e 	bl	8007f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e04c      	b.n	80079e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	691a      	ldr	r2, [r3, #16]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007966:	3b01      	subs	r3, #1
 8007968:	b29a      	uxth	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	f003 0304 	and.w	r3, r3, #4
 8007986:	2b04      	cmp	r3, #4
 8007988:	d118      	bne.n	80079bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	691a      	ldr	r2, [r3, #16]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	b2d2      	uxtb	r2, r2
 8007996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f47f aec2 	bne.w	800774a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	e000      	b.n	80079e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80079e2:	2302      	movs	r3, #2
  }
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3728      	adds	r7, #40	; 0x28
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	00010004 	.word	0x00010004

080079f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b088      	sub	sp, #32
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	461a      	mov	r2, r3
 80079fe:	4603      	mov	r3, r0
 8007a00:	817b      	strh	r3, [r7, #10]
 8007a02:	460b      	mov	r3, r1
 8007a04:	813b      	strh	r3, [r7, #8]
 8007a06:	4613      	mov	r3, r2
 8007a08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 f960 	bl	8007cec <I2C_WaitOnFlagUntilTimeout>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00d      	beq.n	8007a4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a40:	d103      	bne.n	8007a4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e05f      	b.n	8007b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a4e:	897b      	ldrh	r3, [r7, #10]
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	6a3a      	ldr	r2, [r7, #32]
 8007a62:	492d      	ldr	r1, [pc, #180]	; (8007b18 <I2C_RequestMemoryWrite+0x128>)
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 f998 	bl	8007d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e04c      	b.n	8007b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a74:	2300      	movs	r3, #0
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a8c:	6a39      	ldr	r1, [r7, #32]
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fa02 	bl	8007e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00d      	beq.n	8007ab6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d107      	bne.n	8007ab2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e02b      	b.n	8007b0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ab6:	88fb      	ldrh	r3, [r7, #6]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d105      	bne.n	8007ac8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007abc:	893b      	ldrh	r3, [r7, #8]
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	611a      	str	r2, [r3, #16]
 8007ac6:	e021      	b.n	8007b0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ac8:	893b      	ldrh	r3, [r7, #8]
 8007aca:	0a1b      	lsrs	r3, r3, #8
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad8:	6a39      	ldr	r1, [r7, #32]
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 f9dc 	bl	8007e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00d      	beq.n	8007b02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d107      	bne.n	8007afe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007afc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e005      	b.n	8007b0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b02:	893b      	ldrh	r3, [r7, #8]
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	00010002 	.word	0x00010002

08007b1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	4608      	mov	r0, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	817b      	strh	r3, [r7, #10]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	813b      	strh	r3, [r7, #8]
 8007b32:	4613      	mov	r3, r2
 8007b34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f8c2 	bl	8007cec <I2C_WaitOnFlagUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00d      	beq.n	8007b8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b7c:	d103      	bne.n	8007b86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e0aa      	b.n	8007ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b8a:	897b      	ldrh	r3, [r7, #10]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	461a      	mov	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	6a3a      	ldr	r2, [r7, #32]
 8007b9e:	4952      	ldr	r1, [pc, #328]	; (8007ce8 <I2C_RequestMemoryRead+0x1cc>)
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f8fa 	bl	8007d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e097      	b.n	8007ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc8:	6a39      	ldr	r1, [r7, #32]
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 f964 	bl	8007e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00d      	beq.n	8007bf2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d107      	bne.n	8007bee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e076      	b.n	8007ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bf2:	88fb      	ldrh	r3, [r7, #6]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d105      	bne.n	8007c04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf8:	893b      	ldrh	r3, [r7, #8]
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	611a      	str	r2, [r3, #16]
 8007c02:	e021      	b.n	8007c48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c04:	893b      	ldrh	r3, [r7, #8]
 8007c06:	0a1b      	lsrs	r3, r3, #8
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c14:	6a39      	ldr	r1, [r7, #32]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f93e 	bl	8007e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00d      	beq.n	8007c3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d107      	bne.n	8007c3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e050      	b.n	8007ce0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c3e:	893b      	ldrh	r3, [r7, #8]
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4a:	6a39      	ldr	r1, [r7, #32]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f923 	bl	8007e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00d      	beq.n	8007c74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d107      	bne.n	8007c70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e035      	b.n	8007ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 f82b 	bl	8007cec <I2C_WaitOnFlagUntilTimeout>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00d      	beq.n	8007cb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007caa:	d103      	bne.n	8007cb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e013      	b.n	8007ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007cb8:	897b      	ldrh	r3, [r7, #10]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	6a3a      	ldr	r2, [r7, #32]
 8007ccc:	4906      	ldr	r1, [pc, #24]	; (8007ce8 <I2C_RequestMemoryRead+0x1cc>)
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f863 	bl	8007d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e000      	b.n	8007ce0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	00010002 	.word	0x00010002

08007cec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	603b      	str	r3, [r7, #0]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cfc:	e025      	b.n	8007d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d021      	beq.n	8007d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d06:	f7fe fe1f 	bl	8006948 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d302      	bcc.n	8007d1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d116      	bne.n	8007d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	f043 0220 	orr.w	r2, r3, #32
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e023      	b.n	8007d92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	0c1b      	lsrs	r3, r3, #16
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d10d      	bne.n	8007d70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	43da      	mvns	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	4013      	ands	r3, r2
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bf0c      	ite	eq
 8007d66:	2301      	moveq	r3, #1
 8007d68:	2300      	movne	r3, #0
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	e00c      	b.n	8007d8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	43da      	mvns	r2, r3
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	bf0c      	ite	eq
 8007d82:	2301      	moveq	r3, #1
 8007d84:	2300      	movne	r3, #0
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	461a      	mov	r2, r3
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d0b6      	beq.n	8007cfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	607a      	str	r2, [r7, #4]
 8007da6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007da8:	e051      	b.n	8007e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db8:	d123      	bne.n	8007e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	f043 0204 	orr.w	r2, r3, #4
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e046      	b.n	8007e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e08:	d021      	beq.n	8007e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e0a:	f7fe fd9d 	bl	8006948 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d302      	bcc.n	8007e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d116      	bne.n	8007e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	f043 0220 	orr.w	r2, r3, #32
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e020      	b.n	8007e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	0c1b      	lsrs	r3, r3, #16
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d10c      	bne.n	8007e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	43da      	mvns	r2, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4013      	ands	r3, r2
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bf14      	ite	ne
 8007e6a:	2301      	movne	r3, #1
 8007e6c:	2300      	moveq	r3, #0
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	e00b      	b.n	8007e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	43da      	mvns	r2, r3
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	bf14      	ite	ne
 8007e84:	2301      	movne	r3, #1
 8007e86:	2300      	moveq	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d18d      	bne.n	8007daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ea4:	e02d      	b.n	8007f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 f8ce 	bl	8008048 <I2C_IsAcknowledgeFailed>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e02d      	b.n	8007f12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebc:	d021      	beq.n	8007f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ebe:	f7fe fd43 	bl	8006948 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d302      	bcc.n	8007ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d116      	bne.n	8007f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	f043 0220 	orr.w	r2, r3, #32
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e007      	b.n	8007f12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0c:	2b80      	cmp	r3, #128	; 0x80
 8007f0e:	d1ca      	bne.n	8007ea6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f26:	e02d      	b.n	8007f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 f88d 	bl	8008048 <I2C_IsAcknowledgeFailed>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e02d      	b.n	8007f94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3e:	d021      	beq.n	8007f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f40:	f7fe fd02 	bl	8006948 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d302      	bcc.n	8007f56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d116      	bne.n	8007f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f70:	f043 0220 	orr.w	r2, r3, #32
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e007      	b.n	8007f94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d1ca      	bne.n	8007f28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007fa8:	e042      	b.n	8008030 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	f003 0310 	and.w	r3, r3, #16
 8007fb4:	2b10      	cmp	r3, #16
 8007fb6:	d119      	bne.n	8007fec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f06f 0210 	mvn.w	r2, #16
 8007fc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e029      	b.n	8008040 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fec:	f7fe fcac 	bl	8006948 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d302      	bcc.n	8008002 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d116      	bne.n	8008030 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2220      	movs	r2, #32
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	f043 0220 	orr.w	r2, r3, #32
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e007      	b.n	8008040 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803a:	2b40      	cmp	r3, #64	; 0x40
 800803c:	d1b5      	bne.n	8007faa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800805a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800805e:	d11b      	bne.n	8008098 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008068:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2220      	movs	r2, #32
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008084:	f043 0204 	orr.w	r2, r3, #4
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e000      	b.n	800809a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b20      	cmp	r3, #32
 80080ba:	d129      	bne.n	8008110 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2224      	movs	r2, #36	; 0x24
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0201 	bic.w	r2, r2, #1
 80080d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0210 	bic.w	r2, r2, #16
 80080e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0201 	orr.w	r2, r2, #1
 8008102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2220      	movs	r2, #32
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	e000      	b.n	8008112 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008110:	2302      	movs	r3, #2
  }
}
 8008112:	4618      	mov	r0, r3
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b20      	cmp	r3, #32
 8008136:	d12a      	bne.n	800818e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2224      	movs	r2, #36	; 0x24
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 0201 	bic.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008158:	89fb      	ldrh	r3, [r7, #14]
 800815a:	f023 030f 	bic.w	r3, r3, #15
 800815e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	b29a      	uxth	r2, r3
 8008164:	89fb      	ldrh	r3, [r7, #14]
 8008166:	4313      	orrs	r3, r2
 8008168:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	89fa      	ldrh	r2, [r7, #14]
 8008170:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f042 0201 	orr.w	r2, r2, #1
 8008180:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2220      	movs	r2, #32
 8008186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	e000      	b.n	8008190 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800818e:	2302      	movs	r3, #2
  }
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e267      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d075      	beq.n	80082a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80081ba:	4b88      	ldr	r3, [pc, #544]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f003 030c 	and.w	r3, r3, #12
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d00c      	beq.n	80081e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081c6:	4b85      	ldr	r3, [pc, #532]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80081ce:	2b08      	cmp	r3, #8
 80081d0:	d112      	bne.n	80081f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081d2:	4b82      	ldr	r3, [pc, #520]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081de:	d10b      	bne.n	80081f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081e0:	4b7e      	ldr	r3, [pc, #504]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d05b      	beq.n	80082a4 <HAL_RCC_OscConfig+0x108>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d157      	bne.n	80082a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e242      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008200:	d106      	bne.n	8008210 <HAL_RCC_OscConfig+0x74>
 8008202:	4b76      	ldr	r3, [pc, #472]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a75      	ldr	r2, [pc, #468]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 8008208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800820c:	6013      	str	r3, [r2, #0]
 800820e:	e01d      	b.n	800824c <HAL_RCC_OscConfig+0xb0>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008218:	d10c      	bne.n	8008234 <HAL_RCC_OscConfig+0x98>
 800821a:	4b70      	ldr	r3, [pc, #448]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a6f      	ldr	r2, [pc, #444]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 8008220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	4b6d      	ldr	r3, [pc, #436]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a6c      	ldr	r2, [pc, #432]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 800822c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	e00b      	b.n	800824c <HAL_RCC_OscConfig+0xb0>
 8008234:	4b69      	ldr	r3, [pc, #420]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a68      	ldr	r2, [pc, #416]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 800823a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	4b66      	ldr	r3, [pc, #408]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a65      	ldr	r2, [pc, #404]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 8008246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800824a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d013      	beq.n	800827c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008254:	f7fe fb78 	bl	8006948 <HAL_GetTick>
 8008258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800825a:	e008      	b.n	800826e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800825c:	f7fe fb74 	bl	8006948 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b64      	cmp	r3, #100	; 0x64
 8008268:	d901      	bls.n	800826e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e207      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800826e:	4b5b      	ldr	r3, [pc, #364]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0f0      	beq.n	800825c <HAL_RCC_OscConfig+0xc0>
 800827a:	e014      	b.n	80082a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800827c:	f7fe fb64 	bl	8006948 <HAL_GetTick>
 8008280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008284:	f7fe fb60 	bl	8006948 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b64      	cmp	r3, #100	; 0x64
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e1f3      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008296:	4b51      	ldr	r3, [pc, #324]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1f0      	bne.n	8008284 <HAL_RCC_OscConfig+0xe8>
 80082a2:	e000      	b.n	80082a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d063      	beq.n	800837a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80082b2:	4b4a      	ldr	r3, [pc, #296]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f003 030c 	and.w	r3, r3, #12
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00b      	beq.n	80082d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082be:	4b47      	ldr	r3, [pc, #284]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80082c6:	2b08      	cmp	r3, #8
 80082c8:	d11c      	bne.n	8008304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082ca:	4b44      	ldr	r3, [pc, #272]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d116      	bne.n	8008304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082d6:	4b41      	ldr	r3, [pc, #260]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_RCC_OscConfig+0x152>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d001      	beq.n	80082ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e1c7      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082ee:	4b3b      	ldr	r3, [pc, #236]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	4937      	ldr	r1, [pc, #220]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008302:	e03a      	b.n	800837a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d020      	beq.n	800834e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800830c:	4b34      	ldr	r3, [pc, #208]	; (80083e0 <HAL_RCC_OscConfig+0x244>)
 800830e:	2201      	movs	r2, #1
 8008310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008312:	f7fe fb19 	bl	8006948 <HAL_GetTick>
 8008316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008318:	e008      	b.n	800832c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800831a:	f7fe fb15 	bl	8006948 <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	2b02      	cmp	r3, #2
 8008326:	d901      	bls.n	800832c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e1a8      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800832c:	4b2b      	ldr	r3, [pc, #172]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0f0      	beq.n	800831a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008338:	4b28      	ldr	r3, [pc, #160]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	4925      	ldr	r1, [pc, #148]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 8008348:	4313      	orrs	r3, r2
 800834a:	600b      	str	r3, [r1, #0]
 800834c:	e015      	b.n	800837a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800834e:	4b24      	ldr	r3, [pc, #144]	; (80083e0 <HAL_RCC_OscConfig+0x244>)
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008354:	f7fe faf8 	bl	8006948 <HAL_GetTick>
 8008358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800835a:	e008      	b.n	800836e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800835c:	f7fe faf4 	bl	8006948 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b02      	cmp	r3, #2
 8008368:	d901      	bls.n	800836e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e187      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800836e:	4b1b      	ldr	r3, [pc, #108]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1f0      	bne.n	800835c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0308 	and.w	r3, r3, #8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d036      	beq.n	80083f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d016      	beq.n	80083bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800838e:	4b15      	ldr	r3, [pc, #84]	; (80083e4 <HAL_RCC_OscConfig+0x248>)
 8008390:	2201      	movs	r2, #1
 8008392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008394:	f7fe fad8 	bl	8006948 <HAL_GetTick>
 8008398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800839a:	e008      	b.n	80083ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800839c:	f7fe fad4 	bl	8006948 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e167      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083ae:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <HAL_RCC_OscConfig+0x240>)
 80083b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0f0      	beq.n	800839c <HAL_RCC_OscConfig+0x200>
 80083ba:	e01b      	b.n	80083f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083bc:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <HAL_RCC_OscConfig+0x248>)
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083c2:	f7fe fac1 	bl	8006948 <HAL_GetTick>
 80083c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083c8:	e00e      	b.n	80083e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083ca:	f7fe fabd 	bl	8006948 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d907      	bls.n	80083e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e150      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
 80083dc:	40023800 	.word	0x40023800
 80083e0:	42470000 	.word	0x42470000
 80083e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083e8:	4b88      	ldr	r3, [pc, #544]	; (800860c <HAL_RCC_OscConfig+0x470>)
 80083ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ec:	f003 0302 	and.w	r3, r3, #2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1ea      	bne.n	80083ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 8097 	beq.w	8008530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008402:	2300      	movs	r3, #0
 8008404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008406:	4b81      	ldr	r3, [pc, #516]	; (800860c <HAL_RCC_OscConfig+0x470>)
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10f      	bne.n	8008432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008412:	2300      	movs	r3, #0
 8008414:	60bb      	str	r3, [r7, #8]
 8008416:	4b7d      	ldr	r3, [pc, #500]	; (800860c <HAL_RCC_OscConfig+0x470>)
 8008418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841a:	4a7c      	ldr	r2, [pc, #496]	; (800860c <HAL_RCC_OscConfig+0x470>)
 800841c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008420:	6413      	str	r3, [r2, #64]	; 0x40
 8008422:	4b7a      	ldr	r3, [pc, #488]	; (800860c <HAL_RCC_OscConfig+0x470>)
 8008424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800842a:	60bb      	str	r3, [r7, #8]
 800842c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800842e:	2301      	movs	r3, #1
 8008430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008432:	4b77      	ldr	r3, [pc, #476]	; (8008610 <HAL_RCC_OscConfig+0x474>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843a:	2b00      	cmp	r3, #0
 800843c:	d118      	bne.n	8008470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800843e:	4b74      	ldr	r3, [pc, #464]	; (8008610 <HAL_RCC_OscConfig+0x474>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a73      	ldr	r2, [pc, #460]	; (8008610 <HAL_RCC_OscConfig+0x474>)
 8008444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800844a:	f7fe fa7d 	bl	8006948 <HAL_GetTick>
 800844e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008450:	e008      	b.n	8008464 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008452:	f7fe fa79 	bl	8006948 <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	2b02      	cmp	r3, #2
 800845e:	d901      	bls.n	8008464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e10c      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008464:	4b6a      	ldr	r3, [pc, #424]	; (8008610 <HAL_RCC_OscConfig+0x474>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0f0      	beq.n	8008452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d106      	bne.n	8008486 <HAL_RCC_OscConfig+0x2ea>
 8008478:	4b64      	ldr	r3, [pc, #400]	; (800860c <HAL_RCC_OscConfig+0x470>)
 800847a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800847c:	4a63      	ldr	r2, [pc, #396]	; (800860c <HAL_RCC_OscConfig+0x470>)
 800847e:	f043 0301 	orr.w	r3, r3, #1
 8008482:	6713      	str	r3, [r2, #112]	; 0x70
 8008484:	e01c      	b.n	80084c0 <HAL_RCC_OscConfig+0x324>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	2b05      	cmp	r3, #5
 800848c:	d10c      	bne.n	80084a8 <HAL_RCC_OscConfig+0x30c>
 800848e:	4b5f      	ldr	r3, [pc, #380]	; (800860c <HAL_RCC_OscConfig+0x470>)
 8008490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008492:	4a5e      	ldr	r2, [pc, #376]	; (800860c <HAL_RCC_OscConfig+0x470>)
 8008494:	f043 0304 	orr.w	r3, r3, #4
 8008498:	6713      	str	r3, [r2, #112]	; 0x70
 800849a:	4b5c      	ldr	r3, [pc, #368]	; (800860c <HAL_RCC_OscConfig+0x470>)
 800849c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849e:	4a5b      	ldr	r2, [pc, #364]	; (800860c <HAL_RCC_OscConfig+0x470>)
 80084a0:	f043 0301 	orr.w	r3, r3, #1
 80084a4:	6713      	str	r3, [r2, #112]	; 0x70
 80084a6:	e00b      	b.n	80084c0 <HAL_RCC_OscConfig+0x324>
 80084a8:	4b58      	ldr	r3, [pc, #352]	; (800860c <HAL_RCC_OscConfig+0x470>)
 80084aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ac:	4a57      	ldr	r2, [pc, #348]	; (800860c <HAL_RCC_OscConfig+0x470>)
 80084ae:	f023 0301 	bic.w	r3, r3, #1
 80084b2:	6713      	str	r3, [r2, #112]	; 0x70
 80084b4:	4b55      	ldr	r3, [pc, #340]	; (800860c <HAL_RCC_OscConfig+0x470>)
 80084b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b8:	4a54      	ldr	r2, [pc, #336]	; (800860c <HAL_RCC_OscConfig+0x470>)
 80084ba:	f023 0304 	bic.w	r3, r3, #4
 80084be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d015      	beq.n	80084f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c8:	f7fe fa3e 	bl	8006948 <HAL_GetTick>
 80084cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084ce:	e00a      	b.n	80084e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084d0:	f7fe fa3a 	bl	8006948 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	f241 3288 	movw	r2, #5000	; 0x1388
 80084de:	4293      	cmp	r3, r2
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e0cb      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084e6:	4b49      	ldr	r3, [pc, #292]	; (800860c <HAL_RCC_OscConfig+0x470>)
 80084e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0ee      	beq.n	80084d0 <HAL_RCC_OscConfig+0x334>
 80084f2:	e014      	b.n	800851e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084f4:	f7fe fa28 	bl	8006948 <HAL_GetTick>
 80084f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084fa:	e00a      	b.n	8008512 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084fc:	f7fe fa24 	bl	8006948 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	f241 3288 	movw	r2, #5000	; 0x1388
 800850a:	4293      	cmp	r3, r2
 800850c:	d901      	bls.n	8008512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e0b5      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008512:	4b3e      	ldr	r3, [pc, #248]	; (800860c <HAL_RCC_OscConfig+0x470>)
 8008514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1ee      	bne.n	80084fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800851e:	7dfb      	ldrb	r3, [r7, #23]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d105      	bne.n	8008530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008524:	4b39      	ldr	r3, [pc, #228]	; (800860c <HAL_RCC_OscConfig+0x470>)
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	4a38      	ldr	r2, [pc, #224]	; (800860c <HAL_RCC_OscConfig+0x470>)
 800852a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800852e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 80a1 	beq.w	800867c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800853a:	4b34      	ldr	r3, [pc, #208]	; (800860c <HAL_RCC_OscConfig+0x470>)
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f003 030c 	and.w	r3, r3, #12
 8008542:	2b08      	cmp	r3, #8
 8008544:	d05c      	beq.n	8008600 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	2b02      	cmp	r3, #2
 800854c:	d141      	bne.n	80085d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800854e:	4b31      	ldr	r3, [pc, #196]	; (8008614 <HAL_RCC_OscConfig+0x478>)
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008554:	f7fe f9f8 	bl	8006948 <HAL_GetTick>
 8008558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800855a:	e008      	b.n	800856e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800855c:	f7fe f9f4 	bl	8006948 <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	2b02      	cmp	r3, #2
 8008568:	d901      	bls.n	800856e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e087      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800856e:	4b27      	ldr	r3, [pc, #156]	; (800860c <HAL_RCC_OscConfig+0x470>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1f0      	bne.n	800855c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69da      	ldr	r2, [r3, #28]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	431a      	orrs	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	019b      	lsls	r3, r3, #6
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008590:	085b      	lsrs	r3, r3, #1
 8008592:	3b01      	subs	r3, #1
 8008594:	041b      	lsls	r3, r3, #16
 8008596:	431a      	orrs	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	061b      	lsls	r3, r3, #24
 800859e:	491b      	ldr	r1, [pc, #108]	; (800860c <HAL_RCC_OscConfig+0x470>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085a4:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <HAL_RCC_OscConfig+0x478>)
 80085a6:	2201      	movs	r2, #1
 80085a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085aa:	f7fe f9cd 	bl	8006948 <HAL_GetTick>
 80085ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085b0:	e008      	b.n	80085c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085b2:	f7fe f9c9 	bl	8006948 <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d901      	bls.n	80085c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e05c      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085c4:	4b11      	ldr	r3, [pc, #68]	; (800860c <HAL_RCC_OscConfig+0x470>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0f0      	beq.n	80085b2 <HAL_RCC_OscConfig+0x416>
 80085d0:	e054      	b.n	800867c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085d2:	4b10      	ldr	r3, [pc, #64]	; (8008614 <HAL_RCC_OscConfig+0x478>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085d8:	f7fe f9b6 	bl	8006948 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085e0:	f7fe f9b2 	bl	8006948 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e045      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085f2:	4b06      	ldr	r3, [pc, #24]	; (800860c <HAL_RCC_OscConfig+0x470>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1f0      	bne.n	80085e0 <HAL_RCC_OscConfig+0x444>
 80085fe:	e03d      	b.n	800867c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d107      	bne.n	8008618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e038      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
 800860c:	40023800 	.word	0x40023800
 8008610:	40007000 	.word	0x40007000
 8008614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008618:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <HAL_RCC_OscConfig+0x4ec>)
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d028      	beq.n	8008678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008630:	429a      	cmp	r2, r3
 8008632:	d121      	bne.n	8008678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800863e:	429a      	cmp	r2, r3
 8008640:	d11a      	bne.n	8008678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008648:	4013      	ands	r3, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800864e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008650:	4293      	cmp	r3, r2
 8008652:	d111      	bne.n	8008678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865e:	085b      	lsrs	r3, r3, #1
 8008660:	3b01      	subs	r3, #1
 8008662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008664:	429a      	cmp	r2, r3
 8008666:	d107      	bne.n	8008678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008674:	429a      	cmp	r2, r3
 8008676:	d001      	beq.n	800867c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e000      	b.n	800867e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	40023800 	.word	0x40023800

0800868c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e0cc      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086a0:	4b68      	ldr	r3, [pc, #416]	; (8008844 <HAL_RCC_ClockConfig+0x1b8>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 030f 	and.w	r3, r3, #15
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d90c      	bls.n	80086c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ae:	4b65      	ldr	r3, [pc, #404]	; (8008844 <HAL_RCC_ClockConfig+0x1b8>)
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	b2d2      	uxtb	r2, r2
 80086b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086b6:	4b63      	ldr	r3, [pc, #396]	; (8008844 <HAL_RCC_ClockConfig+0x1b8>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 030f 	and.w	r3, r3, #15
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d001      	beq.n	80086c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e0b8      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d020      	beq.n	8008716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d005      	beq.n	80086ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086e0:	4b59      	ldr	r3, [pc, #356]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	4a58      	ldr	r2, [pc, #352]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 80086e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80086ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0308 	and.w	r3, r3, #8
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086f8:	4b53      	ldr	r3, [pc, #332]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	4a52      	ldr	r2, [pc, #328]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 80086fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008704:	4b50      	ldr	r3, [pc, #320]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	494d      	ldr	r1, [pc, #308]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 8008712:	4313      	orrs	r3, r2
 8008714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d044      	beq.n	80087ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d107      	bne.n	800873a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800872a:	4b47      	ldr	r3, [pc, #284]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d119      	bne.n	800876a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e07f      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	2b02      	cmp	r3, #2
 8008740:	d003      	beq.n	800874a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008746:	2b03      	cmp	r3, #3
 8008748:	d107      	bne.n	800875a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800874a:	4b3f      	ldr	r3, [pc, #252]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d109      	bne.n	800876a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e06f      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800875a:	4b3b      	ldr	r3, [pc, #236]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e067      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800876a:	4b37      	ldr	r3, [pc, #220]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f023 0203 	bic.w	r2, r3, #3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	4934      	ldr	r1, [pc, #208]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 8008778:	4313      	orrs	r3, r2
 800877a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800877c:	f7fe f8e4 	bl	8006948 <HAL_GetTick>
 8008780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008782:	e00a      	b.n	800879a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008784:	f7fe f8e0 	bl	8006948 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008792:	4293      	cmp	r3, r2
 8008794:	d901      	bls.n	800879a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e04f      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800879a:	4b2b      	ldr	r3, [pc, #172]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f003 020c 	and.w	r2, r3, #12
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d1eb      	bne.n	8008784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087ac:	4b25      	ldr	r3, [pc, #148]	; (8008844 <HAL_RCC_ClockConfig+0x1b8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 030f 	and.w	r3, r3, #15
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d20c      	bcs.n	80087d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ba:	4b22      	ldr	r3, [pc, #136]	; (8008844 <HAL_RCC_ClockConfig+0x1b8>)
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	b2d2      	uxtb	r2, r2
 80087c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087c2:	4b20      	ldr	r3, [pc, #128]	; (8008844 <HAL_RCC_ClockConfig+0x1b8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 030f 	and.w	r3, r3, #15
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d001      	beq.n	80087d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e032      	b.n	800883a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d008      	beq.n	80087f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087e0:	4b19      	ldr	r3, [pc, #100]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	4916      	ldr	r1, [pc, #88]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0308 	and.w	r3, r3, #8
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d009      	beq.n	8008812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087fe:	4b12      	ldr	r3, [pc, #72]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	490e      	ldr	r1, [pc, #56]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800880e:	4313      	orrs	r3, r2
 8008810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008812:	f000 f821 	bl	8008858 <HAL_RCC_GetSysClockFreq>
 8008816:	4602      	mov	r2, r0
 8008818:	4b0b      	ldr	r3, [pc, #44]	; (8008848 <HAL_RCC_ClockConfig+0x1bc>)
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	091b      	lsrs	r3, r3, #4
 800881e:	f003 030f 	and.w	r3, r3, #15
 8008822:	490a      	ldr	r1, [pc, #40]	; (800884c <HAL_RCC_ClockConfig+0x1c0>)
 8008824:	5ccb      	ldrb	r3, [r1, r3]
 8008826:	fa22 f303 	lsr.w	r3, r2, r3
 800882a:	4a09      	ldr	r2, [pc, #36]	; (8008850 <HAL_RCC_ClockConfig+0x1c4>)
 800882c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800882e:	4b09      	ldr	r3, [pc, #36]	; (8008854 <HAL_RCC_ClockConfig+0x1c8>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe f844 	bl	80068c0 <HAL_InitTick>

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	40023c00 	.word	0x40023c00
 8008848:	40023800 	.word	0x40023800
 800884c:	080139c4 	.word	0x080139c4
 8008850:	20000180 	.word	0x20000180
 8008854:	200002b4 	.word	0x200002b4

08008858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800885c:	b094      	sub	sp, #80	; 0x50
 800885e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008860:	2300      	movs	r3, #0
 8008862:	647b      	str	r3, [r7, #68]	; 0x44
 8008864:	2300      	movs	r3, #0
 8008866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008868:	2300      	movs	r3, #0
 800886a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800886c:	2300      	movs	r3, #0
 800886e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008870:	4b79      	ldr	r3, [pc, #484]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f003 030c 	and.w	r3, r3, #12
 8008878:	2b08      	cmp	r3, #8
 800887a:	d00d      	beq.n	8008898 <HAL_RCC_GetSysClockFreq+0x40>
 800887c:	2b08      	cmp	r3, #8
 800887e:	f200 80e1 	bhi.w	8008a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008882:	2b00      	cmp	r3, #0
 8008884:	d002      	beq.n	800888c <HAL_RCC_GetSysClockFreq+0x34>
 8008886:	2b04      	cmp	r3, #4
 8008888:	d003      	beq.n	8008892 <HAL_RCC_GetSysClockFreq+0x3a>
 800888a:	e0db      	b.n	8008a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800888c:	4b73      	ldr	r3, [pc, #460]	; (8008a5c <HAL_RCC_GetSysClockFreq+0x204>)
 800888e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008890:	e0db      	b.n	8008a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008892:	4b73      	ldr	r3, [pc, #460]	; (8008a60 <HAL_RCC_GetSysClockFreq+0x208>)
 8008894:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008896:	e0d8      	b.n	8008a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008898:	4b6f      	ldr	r3, [pc, #444]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x200>)
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80088a2:	4b6d      	ldr	r3, [pc, #436]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d063      	beq.n	8008976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088ae:	4b6a      	ldr	r3, [pc, #424]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	099b      	lsrs	r3, r3, #6
 80088b4:	2200      	movs	r2, #0
 80088b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80088b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80088ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c0:	633b      	str	r3, [r7, #48]	; 0x30
 80088c2:	2300      	movs	r3, #0
 80088c4:	637b      	str	r3, [r7, #52]	; 0x34
 80088c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80088ca:	4622      	mov	r2, r4
 80088cc:	462b      	mov	r3, r5
 80088ce:	f04f 0000 	mov.w	r0, #0
 80088d2:	f04f 0100 	mov.w	r1, #0
 80088d6:	0159      	lsls	r1, r3, #5
 80088d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088dc:	0150      	lsls	r0, r2, #5
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	4621      	mov	r1, r4
 80088e4:	1a51      	subs	r1, r2, r1
 80088e6:	6139      	str	r1, [r7, #16]
 80088e8:	4629      	mov	r1, r5
 80088ea:	eb63 0301 	sbc.w	r3, r3, r1
 80088ee:	617b      	str	r3, [r7, #20]
 80088f0:	f04f 0200 	mov.w	r2, #0
 80088f4:	f04f 0300 	mov.w	r3, #0
 80088f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088fc:	4659      	mov	r1, fp
 80088fe:	018b      	lsls	r3, r1, #6
 8008900:	4651      	mov	r1, sl
 8008902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008906:	4651      	mov	r1, sl
 8008908:	018a      	lsls	r2, r1, #6
 800890a:	4651      	mov	r1, sl
 800890c:	ebb2 0801 	subs.w	r8, r2, r1
 8008910:	4659      	mov	r1, fp
 8008912:	eb63 0901 	sbc.w	r9, r3, r1
 8008916:	f04f 0200 	mov.w	r2, #0
 800891a:	f04f 0300 	mov.w	r3, #0
 800891e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800892a:	4690      	mov	r8, r2
 800892c:	4699      	mov	r9, r3
 800892e:	4623      	mov	r3, r4
 8008930:	eb18 0303 	adds.w	r3, r8, r3
 8008934:	60bb      	str	r3, [r7, #8]
 8008936:	462b      	mov	r3, r5
 8008938:	eb49 0303 	adc.w	r3, r9, r3
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	f04f 0200 	mov.w	r2, #0
 8008942:	f04f 0300 	mov.w	r3, #0
 8008946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800894a:	4629      	mov	r1, r5
 800894c:	024b      	lsls	r3, r1, #9
 800894e:	4621      	mov	r1, r4
 8008950:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008954:	4621      	mov	r1, r4
 8008956:	024a      	lsls	r2, r1, #9
 8008958:	4610      	mov	r0, r2
 800895a:	4619      	mov	r1, r3
 800895c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800895e:	2200      	movs	r2, #0
 8008960:	62bb      	str	r3, [r7, #40]	; 0x28
 8008962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008968:	f7f8 f988 	bl	8000c7c <__aeabi_uldivmod>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4613      	mov	r3, r2
 8008972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008974:	e058      	b.n	8008a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008976:	4b38      	ldr	r3, [pc, #224]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	099b      	lsrs	r3, r3, #6
 800897c:	2200      	movs	r2, #0
 800897e:	4618      	mov	r0, r3
 8008980:	4611      	mov	r1, r2
 8008982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008986:	623b      	str	r3, [r7, #32]
 8008988:	2300      	movs	r3, #0
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
 800898c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008990:	4642      	mov	r2, r8
 8008992:	464b      	mov	r3, r9
 8008994:	f04f 0000 	mov.w	r0, #0
 8008998:	f04f 0100 	mov.w	r1, #0
 800899c:	0159      	lsls	r1, r3, #5
 800899e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089a2:	0150      	lsls	r0, r2, #5
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4641      	mov	r1, r8
 80089aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80089ae:	4649      	mov	r1, r9
 80089b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80089b4:	f04f 0200 	mov.w	r2, #0
 80089b8:	f04f 0300 	mov.w	r3, #0
 80089bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80089c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80089c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80089c8:	ebb2 040a 	subs.w	r4, r2, sl
 80089cc:	eb63 050b 	sbc.w	r5, r3, fp
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	f04f 0300 	mov.w	r3, #0
 80089d8:	00eb      	lsls	r3, r5, #3
 80089da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089de:	00e2      	lsls	r2, r4, #3
 80089e0:	4614      	mov	r4, r2
 80089e2:	461d      	mov	r5, r3
 80089e4:	4643      	mov	r3, r8
 80089e6:	18e3      	adds	r3, r4, r3
 80089e8:	603b      	str	r3, [r7, #0]
 80089ea:	464b      	mov	r3, r9
 80089ec:	eb45 0303 	adc.w	r3, r5, r3
 80089f0:	607b      	str	r3, [r7, #4]
 80089f2:	f04f 0200 	mov.w	r2, #0
 80089f6:	f04f 0300 	mov.w	r3, #0
 80089fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80089fe:	4629      	mov	r1, r5
 8008a00:	028b      	lsls	r3, r1, #10
 8008a02:	4621      	mov	r1, r4
 8008a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a08:	4621      	mov	r1, r4
 8008a0a:	028a      	lsls	r2, r1, #10
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a12:	2200      	movs	r2, #0
 8008a14:	61bb      	str	r3, [r7, #24]
 8008a16:	61fa      	str	r2, [r7, #28]
 8008a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a1c:	f7f8 f92e 	bl	8000c7c <__aeabi_uldivmod>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4613      	mov	r3, r2
 8008a26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a28:	4b0b      	ldr	r3, [pc, #44]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	0c1b      	lsrs	r3, r3, #16
 8008a2e:	f003 0303 	and.w	r3, r3, #3
 8008a32:	3301      	adds	r3, #1
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a42:	e002      	b.n	8008a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a44:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8008a46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3750      	adds	r7, #80	; 0x50
 8008a50:	46bd      	mov	sp, r7
 8008a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a56:	bf00      	nop
 8008a58:	40023800 	.word	0x40023800
 8008a5c:	00f42400 	.word	0x00f42400
 8008a60:	007a1200 	.word	0x007a1200

08008a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a68:	4b03      	ldr	r3, [pc, #12]	; (8008a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	20000180 	.word	0x20000180

08008a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008a80:	f7ff fff0 	bl	8008a64 <HAL_RCC_GetHCLKFreq>
 8008a84:	4602      	mov	r2, r0
 8008a86:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	0a9b      	lsrs	r3, r3, #10
 8008a8c:	f003 0307 	and.w	r3, r3, #7
 8008a90:	4903      	ldr	r1, [pc, #12]	; (8008aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a92:	5ccb      	ldrb	r3, [r1, r3]
 8008a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	40023800 	.word	0x40023800
 8008aa0:	080139d4 	.word	0x080139d4

08008aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008aa8:	f7ff ffdc 	bl	8008a64 <HAL_RCC_GetHCLKFreq>
 8008aac:	4602      	mov	r2, r0
 8008aae:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	0b5b      	lsrs	r3, r3, #13
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	4903      	ldr	r1, [pc, #12]	; (8008ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008aba:	5ccb      	ldrb	r3, [r1, r3]
 8008abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	40023800 	.word	0x40023800
 8008ac8:	080139d4 	.word	0x080139d4

08008acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10b      	bne.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d105      	bne.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d075      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008b00:	4b91      	ldr	r3, [pc, #580]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008b06:	f7fd ff1f 	bl	8006948 <HAL_GetTick>
 8008b0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b0c:	e008      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008b0e:	f7fd ff1b 	bl	8006948 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d901      	bls.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e189      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b20:	4b8a      	ldr	r3, [pc, #552]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1f0      	bne.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d009      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	019a      	lsls	r2, r3, #6
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	071b      	lsls	r3, r3, #28
 8008b44:	4981      	ldr	r1, [pc, #516]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0302 	and.w	r3, r3, #2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d01f      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008b58:	4b7c      	ldr	r3, [pc, #496]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b5e:	0f1b      	lsrs	r3, r3, #28
 8008b60:	f003 0307 	and.w	r3, r3, #7
 8008b64:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	019a      	lsls	r2, r3, #6
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	061b      	lsls	r3, r3, #24
 8008b72:	431a      	orrs	r2, r3
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	071b      	lsls	r3, r3, #28
 8008b78:	4974      	ldr	r1, [pc, #464]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008b80:	4b72      	ldr	r3, [pc, #456]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b86:	f023 021f 	bic.w	r2, r3, #31
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	496e      	ldr	r1, [pc, #440]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00d      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	019a      	lsls	r2, r3, #6
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	061b      	lsls	r3, r3, #24
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	071b      	lsls	r3, r3, #28
 8008bb8:	4964      	ldr	r1, [pc, #400]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008bc0:	4b61      	ldr	r3, [pc, #388]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008bc6:	f7fd febf 	bl	8006948 <HAL_GetTick>
 8008bca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008bcc:	e008      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008bce:	f7fd febb 	bl	8006948 <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d901      	bls.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e129      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008be0:	4b5a      	ldr	r3, [pc, #360]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0f0      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d105      	bne.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d079      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008c04:	4b52      	ldr	r3, [pc, #328]	; (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c0a:	f7fd fe9d 	bl	8006948 <HAL_GetTick>
 8008c0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c10:	e008      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008c12:	f7fd fe99 	bl	8006948 <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d901      	bls.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e107      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c24:	4b49      	ldr	r3, [pc, #292]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c30:	d0ef      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0304 	and.w	r3, r3, #4
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d020      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008c3e:	4b43      	ldr	r3, [pc, #268]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c44:	0f1b      	lsrs	r3, r3, #28
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	019a      	lsls	r2, r3, #6
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	061b      	lsls	r3, r3, #24
 8008c58:	431a      	orrs	r2, r3
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	071b      	lsls	r3, r3, #28
 8008c5e:	493b      	ldr	r1, [pc, #236]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008c66:	4b39      	ldr	r3, [pc, #228]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	3b01      	subs	r3, #1
 8008c76:	021b      	lsls	r3, r3, #8
 8008c78:	4934      	ldr	r1, [pc, #208]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0308 	and.w	r3, r3, #8
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01e      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008c8c:	4b2f      	ldr	r3, [pc, #188]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c92:	0e1b      	lsrs	r3, r3, #24
 8008c94:	f003 030f 	and.w	r3, r3, #15
 8008c98:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	019a      	lsls	r2, r3, #6
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	061b      	lsls	r3, r3, #24
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	071b      	lsls	r3, r3, #28
 8008cac:	4927      	ldr	r1, [pc, #156]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008cb4:	4b25      	ldr	r3, [pc, #148]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc2:	4922      	ldr	r1, [pc, #136]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008cca:	4b21      	ldr	r3, [pc, #132]	; (8008d50 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008ccc:	2201      	movs	r2, #1
 8008cce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008cd0:	f7fd fe3a 	bl	8006948 <HAL_GetTick>
 8008cd4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008cd6:	e008      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008cd8:	f7fd fe36 	bl	8006948 <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d901      	bls.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e0a4      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008cea:	4b18      	ldr	r3, [pc, #96]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cf6:	d1ef      	bne.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 808b 	beq.w	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	4b10      	ldr	r3, [pc, #64]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0e:	4a0f      	ldr	r2, [pc, #60]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d14:	6413      	str	r3, [r2, #64]	; 0x40
 8008d16:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008d22:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a0b      	ldr	r2, [pc, #44]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d2e:	f7fd fe0b 	bl	8006948 <HAL_GetTick>
 8008d32:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008d34:	e010      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008d36:	f7fd fe07 	bl	8006948 <HAL_GetTick>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d909      	bls.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e075      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008d48:	42470068 	.word	0x42470068
 8008d4c:	40023800 	.word	0x40023800
 8008d50:	42470070 	.word	0x42470070
 8008d54:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008d58:	4b38      	ldr	r3, [pc, #224]	; (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d0e8      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008d64:	4b36      	ldr	r3, [pc, #216]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d02f      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d028      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d82:	4b2f      	ldr	r3, [pc, #188]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d8c:	4b2d      	ldr	r3, [pc, #180]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008d8e:	2201      	movs	r2, #1
 8008d90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d92:	4b2c      	ldr	r3, [pc, #176]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008d98:	4a29      	ldr	r2, [pc, #164]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008d9e:	4b28      	ldr	r3, [pc, #160]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d114      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008daa:	f7fd fdcd 	bl	8006948 <HAL_GetTick>
 8008dae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008db0:	e00a      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008db2:	f7fd fdc9 	bl	8006948 <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d901      	bls.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e035      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dc8:	4b1d      	ldr	r3, [pc, #116]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dcc:	f003 0302 	and.w	r3, r3, #2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d0ee      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008de0:	d10d      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008de2:	4b17      	ldr	r3, [pc, #92]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008df6:	4912      	ldr	r1, [pc, #72]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	608b      	str	r3, [r1, #8]
 8008dfc:	e005      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008dfe:	4b10      	ldr	r3, [pc, #64]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	4a0f      	ldr	r2, [pc, #60]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008e04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008e08:	6093      	str	r3, [r2, #8]
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e16:	490a      	ldr	r1, [pc, #40]	; (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0310 	and.w	r3, r3, #16
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008e2e:	4b06      	ldr	r3, [pc, #24]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008e30:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	40007000 	.word	0x40007000
 8008e40:	40023800 	.word	0x40023800
 8008e44:	42470e40 	.word	0x42470e40
 8008e48:	424711e0 	.word	0x424711e0

08008e4c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e066      	b.n	8008f30 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7f5b      	ldrb	r3, [r3, #29]
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d105      	bne.n	8008e78 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7fa f946 	bl	8003104 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	22ca      	movs	r2, #202	; 0xca
 8008e84:	625a      	str	r2, [r3, #36]	; 0x24
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2253      	movs	r2, #83	; 0x53
 8008e8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fa45 	bl	800931e <RTC_EnterInitMode>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d12c      	bne.n	8008ef8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	6812      	ldr	r2, [r2, #0]
 8008ea8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eb0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6899      	ldr	r1, [r3, #8]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	68d2      	ldr	r2, [r2, #12]
 8008ed8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6919      	ldr	r1, [r3, #16]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	041a      	lsls	r2, r3, #16
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa4c 	bl	800938c <RTC_ExitInitMode>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d113      	bne.n	8008f26 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f0c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	699a      	ldr	r2, [r3, #24]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	22ff      	movs	r2, #255	; 0xff
 8008f2c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f38:	b590      	push	{r4, r7, lr}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	7f1b      	ldrb	r3, [r3, #28]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d101      	bne.n	8008f54 <HAL_RTC_SetTime+0x1c>
 8008f50:	2302      	movs	r3, #2
 8008f52:	e087      	b.n	8009064 <HAL_RTC_SetTime+0x12c>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2201      	movs	r2, #1
 8008f58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d126      	bne.n	8008fb4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2200      	movs	r2, #0
 8008f78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 fa29 	bl	80093d6 <RTC_ByteToBcd2>
 8008f84:	4603      	mov	r3, r0
 8008f86:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	785b      	ldrb	r3, [r3, #1]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fa22 	bl	80093d6 <RTC_ByteToBcd2>
 8008f92:	4603      	mov	r3, r0
 8008f94:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f96:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	789b      	ldrb	r3, [r3, #2]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 fa1a 	bl	80093d6 <RTC_ByteToBcd2>
 8008fa2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008fa4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	78db      	ldrb	r3, [r3, #3]
 8008fac:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]
 8008fb2:	e018      	b.n	8008fe6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d102      	bne.n	8008fc8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	785b      	ldrb	r3, [r3, #1]
 8008fd2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008fd4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008fda:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	78db      	ldrb	r3, [r3, #3]
 8008fe0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	22ca      	movs	r2, #202	; 0xca
 8008fec:	625a      	str	r2, [r3, #36]	; 0x24
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2253      	movs	r2, #83	; 0x53
 8008ff4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 f991 	bl	800931e <RTC_EnterInitMode>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009000:	7cfb      	ldrb	r3, [r7, #19]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d120      	bne.n	8009048 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009010:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009014:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009024:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6899      	ldr	r1, [r3, #8]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	431a      	orrs	r2, r3
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 f9a4 	bl	800938c <RTC_ExitInitMode>
 8009044:	4603      	mov	r3, r0
 8009046:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009048:	7cfb      	ldrb	r3, [r7, #19]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d102      	bne.n	8009054 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	22ff      	movs	r2, #255	; 0xff
 800905a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	771a      	strb	r2, [r3, #28]

  return status;
 8009062:	7cfb      	ldrb	r3, [r7, #19]
}
 8009064:	4618      	mov	r0, r3
 8009066:	371c      	adds	r7, #28
 8009068:	46bd      	mov	sp, r7
 800906a:	bd90      	pop	{r4, r7, pc}

0800906c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800909e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80090a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	0c1b      	lsrs	r3, r3, #16
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	0a1b      	lsrs	r3, r3, #8
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	0d9b      	lsrs	r3, r3, #22
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d11a      	bne.n	800911e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f98f 	bl	8009410 <RTC_Bcd2ToByte>
 80090f2:	4603      	mov	r3, r0
 80090f4:	461a      	mov	r2, r3
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	785b      	ldrb	r3, [r3, #1]
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 f986 	bl	8009410 <RTC_Bcd2ToByte>
 8009104:	4603      	mov	r3, r0
 8009106:	461a      	mov	r2, r3
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	789b      	ldrb	r3, [r3, #2]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 f97d 	bl	8009410 <RTC_Bcd2ToByte>
 8009116:	4603      	mov	r3, r0
 8009118:	461a      	mov	r2, r3
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009128:	b590      	push	{r4, r7, lr}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	7f1b      	ldrb	r3, [r3, #28]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d101      	bne.n	8009144 <HAL_RTC_SetDate+0x1c>
 8009140:	2302      	movs	r3, #2
 8009142:	e071      	b.n	8009228 <HAL_RTC_SetDate+0x100>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2201      	movs	r2, #1
 8009148:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2202      	movs	r2, #2
 800914e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10e      	bne.n	8009174 <HAL_RTC_SetDate+0x4c>
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	785b      	ldrb	r3, [r3, #1]
 800915a:	f003 0310 	and.w	r3, r3, #16
 800915e:	2b00      	cmp	r3, #0
 8009160:	d008      	beq.n	8009174 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	f023 0310 	bic.w	r3, r3, #16
 800916a:	b2db      	uxtb	r3, r3
 800916c:	330a      	adds	r3, #10
 800916e:	b2da      	uxtb	r2, r3
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d11c      	bne.n	80091b4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	78db      	ldrb	r3, [r3, #3]
 800917e:	4618      	mov	r0, r3
 8009180:	f000 f929 	bl	80093d6 <RTC_ByteToBcd2>
 8009184:	4603      	mov	r3, r0
 8009186:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f922 	bl	80093d6 <RTC_ByteToBcd2>
 8009192:	4603      	mov	r3, r0
 8009194:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009196:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	789b      	ldrb	r3, [r3, #2]
 800919c:	4618      	mov	r0, r3
 800919e:	f000 f91a 	bl	80093d6 <RTC_ByteToBcd2>
 80091a2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80091a4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091ae:	4313      	orrs	r3, r2
 80091b0:	617b      	str	r3, [r7, #20]
 80091b2:	e00e      	b.n	80091d2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	78db      	ldrb	r3, [r3, #3]
 80091b8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	785b      	ldrb	r3, [r3, #1]
 80091be:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80091c0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80091c6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80091ce:	4313      	orrs	r3, r2
 80091d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	22ca      	movs	r2, #202	; 0xca
 80091d8:	625a      	str	r2, [r3, #36]	; 0x24
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2253      	movs	r2, #83	; 0x53
 80091e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 f89b 	bl	800931e <RTC_EnterInitMode>
 80091e8:	4603      	mov	r3, r0
 80091ea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80091ec:	7cfb      	ldrb	r3, [r7, #19]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10c      	bne.n	800920c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80091fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009200:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 f8c2 	bl	800938c <RTC_ExitInitMode>
 8009208:	4603      	mov	r3, r0
 800920a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800920c:	7cfb      	ldrb	r3, [r7, #19]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d102      	bne.n	8009218 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	22ff      	movs	r2, #255	; 0xff
 800921e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	771a      	strb	r2, [r3, #28]

  return status;
 8009226:	7cfb      	ldrb	r3, [r7, #19]
}
 8009228:	4618      	mov	r0, r3
 800922a:	371c      	adds	r7, #28
 800922c:	46bd      	mov	sp, r7
 800922e:	bd90      	pop	{r4, r7, pc}

08009230 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800923c:	2300      	movs	r3, #0
 800923e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800924a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800924e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	0c1b      	lsrs	r3, r3, #16
 8009254:	b2da      	uxtb	r2, r3
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	0a1b      	lsrs	r3, r3, #8
 800925e:	b2db      	uxtb	r3, r3
 8009260:	f003 031f 	and.w	r3, r3, #31
 8009264:	b2da      	uxtb	r2, r3
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009272:	b2da      	uxtb	r2, r3
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	0b5b      	lsrs	r3, r3, #13
 800927c:	b2db      	uxtb	r3, r3
 800927e:	f003 0307 	and.w	r3, r3, #7
 8009282:	b2da      	uxtb	r2, r3
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d11a      	bne.n	80092c4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	78db      	ldrb	r3, [r3, #3]
 8009292:	4618      	mov	r0, r3
 8009294:	f000 f8bc 	bl	8009410 <RTC_Bcd2ToByte>
 8009298:	4603      	mov	r3, r0
 800929a:	461a      	mov	r2, r3
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	785b      	ldrb	r3, [r3, #1]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 f8b3 	bl	8009410 <RTC_Bcd2ToByte>
 80092aa:	4603      	mov	r3, r0
 80092ac:	461a      	mov	r2, r3
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	789b      	ldrb	r3, [r3, #2]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 f8aa 	bl	8009410 <RTC_Bcd2ToByte>
 80092bc:	4603      	mov	r3, r0
 80092be:	461a      	mov	r2, r3
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80092e8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092ea:	f7fd fb2d 	bl	8006948 <HAL_GetTick>
 80092ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80092f0:	e009      	b.n	8009306 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80092f2:	f7fd fb29 	bl	8006948 <HAL_GetTick>
 80092f6:	4602      	mov	r2, r0
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009300:	d901      	bls.n	8009306 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e007      	b.n	8009316 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	f003 0320 	and.w	r3, r3, #32
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0ee      	beq.n	80092f2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009326:	2300      	movs	r3, #0
 8009328:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009338:	2b00      	cmp	r3, #0
 800933a:	d122      	bne.n	8009382 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800934a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800934c:	f7fd fafc 	bl	8006948 <HAL_GetTick>
 8009350:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009352:	e00c      	b.n	800936e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009354:	f7fd faf8 	bl	8006948 <HAL_GetTick>
 8009358:	4602      	mov	r2, r0
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009362:	d904      	bls.n	800936e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2204      	movs	r2, #4
 8009368:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009378:	2b00      	cmp	r3, #0
 800937a:	d102      	bne.n	8009382 <RTC_EnterInitMode+0x64>
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d1e8      	bne.n	8009354 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009382:	7bfb      	ldrb	r3, [r7, #15]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68da      	ldr	r2, [r3, #12]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093a6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f003 0320 	and.w	r3, r3, #32
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff ff89 	bl	80092ce <HAL_RTC_WaitForSynchro>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d004      	beq.n	80093cc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2204      	movs	r2, #4
 80093c6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b085      	sub	sp, #20
 80093da:	af00      	add	r7, sp, #0
 80093dc:	4603      	mov	r3, r0
 80093de:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80093e4:	e005      	b.n	80093f2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	3301      	adds	r3, #1
 80093ea:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	3b0a      	subs	r3, #10
 80093f0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	2b09      	cmp	r3, #9
 80093f6:	d8f6      	bhi.n	80093e6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	79fb      	ldrb	r3, [r7, #7]
 8009400:	4313      	orrs	r3, r2
 8009402:	b2db      	uxtb	r3, r3
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800941a:	2300      	movs	r3, #0
 800941c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	091b      	lsrs	r3, r3, #4
 8009422:	b2db      	uxtb	r3, r3
 8009424:	461a      	mov	r2, r3
 8009426:	0092      	lsls	r2, r2, #2
 8009428:	4413      	add	r3, r2
 800942a:	005b      	lsls	r3, r3, #1
 800942c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800942e:	79fb      	ldrb	r3, [r7, #7]
 8009430:	f003 030f 	and.w	r3, r3, #15
 8009434:	b2da      	uxtb	r2, r3
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	4413      	add	r3, r2
 800943a:	b2db      	uxtb	r3, r3
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e07b      	b.n	8009552 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	d108      	bne.n	8009474 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800946a:	d009      	beq.n	8009480 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	61da      	str	r2, [r3, #28]
 8009472:	e005      	b.n	8009480 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d106      	bne.n	80094a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7f9 fe92 	bl	80031c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2202      	movs	r2, #2
 80094a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094d2:	431a      	orrs	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	f003 0302 	and.w	r3, r3, #2
 80094dc:	431a      	orrs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	431a      	orrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094f0:	431a      	orrs	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094fa:	431a      	orrs	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a1b      	ldr	r3, [r3, #32]
 8009500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009504:	ea42 0103 	orr.w	r1, r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	0c1b      	lsrs	r3, r3, #16
 800951e:	f003 0104 	and.w	r1, r3, #4
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	f003 0210 	and.w	r2, r3, #16
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	69da      	ldr	r2, [r3, #28]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009540:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b088      	sub	sp, #32
 800955e:	af00      	add	r7, sp, #0
 8009560:	60f8      	str	r0, [r7, #12]
 8009562:	60b9      	str	r1, [r7, #8]
 8009564:	603b      	str	r3, [r7, #0]
 8009566:	4613      	mov	r3, r2
 8009568:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009574:	2b01      	cmp	r3, #1
 8009576:	d101      	bne.n	800957c <HAL_SPI_Transmit+0x22>
 8009578:	2302      	movs	r3, #2
 800957a:	e126      	b.n	80097ca <HAL_SPI_Transmit+0x270>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009584:	f7fd f9e0 	bl	8006948 <HAL_GetTick>
 8009588:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800958a:	88fb      	ldrh	r3, [r7, #6]
 800958c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b01      	cmp	r3, #1
 8009598:	d002      	beq.n	80095a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800959a:	2302      	movs	r3, #2
 800959c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800959e:	e10b      	b.n	80097b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d002      	beq.n	80095ac <HAL_SPI_Transmit+0x52>
 80095a6:	88fb      	ldrh	r3, [r7, #6]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d102      	bne.n	80095b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095b0:	e102      	b.n	80097b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2203      	movs	r2, #3
 80095b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	88fa      	ldrh	r2, [r7, #6]
 80095ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	88fa      	ldrh	r2, [r7, #6]
 80095d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095f8:	d10f      	bne.n	800961a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009608:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009618:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009624:	2b40      	cmp	r3, #64	; 0x40
 8009626:	d007      	beq.n	8009638 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009636:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009640:	d14b      	bne.n	80096da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <HAL_SPI_Transmit+0xf6>
 800964a:	8afb      	ldrh	r3, [r7, #22]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d13e      	bne.n	80096ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009654:	881a      	ldrh	r2, [r3, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009660:	1c9a      	adds	r2, r3, #2
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800966a:	b29b      	uxth	r3, r3
 800966c:	3b01      	subs	r3, #1
 800966e:	b29a      	uxth	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009674:	e02b      	b.n	80096ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b02      	cmp	r3, #2
 8009682:	d112      	bne.n	80096aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009688:	881a      	ldrh	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009694:	1c9a      	adds	r2, r3, #2
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800969e:	b29b      	uxth	r3, r3
 80096a0:	3b01      	subs	r3, #1
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80096a8:	e011      	b.n	80096ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096aa:	f7fd f94d 	bl	8006948 <HAL_GetTick>
 80096ae:	4602      	mov	r2, r0
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d803      	bhi.n	80096c2 <HAL_SPI_Transmit+0x168>
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c0:	d102      	bne.n	80096c8 <HAL_SPI_Transmit+0x16e>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d102      	bne.n	80096ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096cc:	e074      	b.n	80097b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1ce      	bne.n	8009676 <HAL_SPI_Transmit+0x11c>
 80096d8:	e04c      	b.n	8009774 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <HAL_SPI_Transmit+0x18e>
 80096e2:	8afb      	ldrh	r3, [r7, #22]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d140      	bne.n	800976a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	330c      	adds	r3, #12
 80096f2:	7812      	ldrb	r2, [r2, #0]
 80096f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009704:	b29b      	uxth	r3, r3
 8009706:	3b01      	subs	r3, #1
 8009708:	b29a      	uxth	r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800970e:	e02c      	b.n	800976a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f003 0302 	and.w	r3, r3, #2
 800971a:	2b02      	cmp	r3, #2
 800971c:	d113      	bne.n	8009746 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	330c      	adds	r3, #12
 8009728:	7812      	ldrb	r2, [r2, #0]
 800972a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009730:	1c5a      	adds	r2, r3, #1
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800973a:	b29b      	uxth	r3, r3
 800973c:	3b01      	subs	r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	86da      	strh	r2, [r3, #54]	; 0x36
 8009744:	e011      	b.n	800976a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009746:	f7fd f8ff 	bl	8006948 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	429a      	cmp	r2, r3
 8009754:	d803      	bhi.n	800975e <HAL_SPI_Transmit+0x204>
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975c:	d102      	bne.n	8009764 <HAL_SPI_Transmit+0x20a>
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d102      	bne.n	800976a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009764:	2303      	movs	r3, #3
 8009766:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009768:	e026      	b.n	80097b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800976e:	b29b      	uxth	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1cd      	bne.n	8009710 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009774:	69ba      	ldr	r2, [r7, #24]
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f000 f8b3 	bl	80098e4 <SPI_EndRxTxTransaction>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2220      	movs	r2, #32
 8009788:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10a      	bne.n	80097a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009792:	2300      	movs	r3, #0
 8009794:	613b      	str	r3, [r7, #16]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	613b      	str	r3, [r7, #16]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	613b      	str	r3, [r7, #16]
 80097a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	77fb      	strb	r3, [r7, #31]
 80097b4:	e000      	b.n	80097b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80097b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3720      	adds	r7, #32
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
	...

080097d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b088      	sub	sp, #32
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	4613      	mov	r3, r2
 80097e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097e4:	f7fd f8b0 	bl	8006948 <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ec:	1a9b      	subs	r3, r3, r2
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	4413      	add	r3, r2
 80097f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097f4:	f7fd f8a8 	bl	8006948 <HAL_GetTick>
 80097f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097fa:	4b39      	ldr	r3, [pc, #228]	; (80098e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	015b      	lsls	r3, r3, #5
 8009800:	0d1b      	lsrs	r3, r3, #20
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	fb02 f303 	mul.w	r3, r2, r3
 8009808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800980a:	e054      	b.n	80098b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009812:	d050      	beq.n	80098b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009814:	f7fd f898 	bl	8006948 <HAL_GetTick>
 8009818:	4602      	mov	r2, r0
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	69fa      	ldr	r2, [r7, #28]
 8009820:	429a      	cmp	r2, r3
 8009822:	d902      	bls.n	800982a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d13d      	bne.n	80098a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009842:	d111      	bne.n	8009868 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800984c:	d004      	beq.n	8009858 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009856:	d107      	bne.n	8009868 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009870:	d10f      	bne.n	8009892 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009890:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e017      	b.n	80098d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d101      	bne.n	80098b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689a      	ldr	r2, [r3, #8]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	4013      	ands	r3, r2
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	bf0c      	ite	eq
 80098c6:	2301      	moveq	r3, #1
 80098c8:	2300      	movne	r3, #0
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	461a      	mov	r2, r3
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d19b      	bne.n	800980c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3720      	adds	r7, #32
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20000180 	.word	0x20000180

080098e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af02      	add	r7, sp, #8
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80098f0:	4b1b      	ldr	r3, [pc, #108]	; (8009960 <SPI_EndRxTxTransaction+0x7c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a1b      	ldr	r2, [pc, #108]	; (8009964 <SPI_EndRxTxTransaction+0x80>)
 80098f6:	fba2 2303 	umull	r2, r3, r2, r3
 80098fa:	0d5b      	lsrs	r3, r3, #21
 80098fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009900:	fb02 f303 	mul.w	r3, r2, r3
 8009904:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800990e:	d112      	bne.n	8009936 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2200      	movs	r2, #0
 8009918:	2180      	movs	r1, #128	; 0x80
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f7ff ff5a 	bl	80097d4 <SPI_WaitFlagStateUntilTimeout>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d016      	beq.n	8009954 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800992a:	f043 0220 	orr.w	r2, r3, #32
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e00f      	b.n	8009956 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00a      	beq.n	8009952 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	3b01      	subs	r3, #1
 8009940:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994c:	2b80      	cmp	r3, #128	; 0x80
 800994e:	d0f2      	beq.n	8009936 <SPI_EndRxTxTransaction+0x52>
 8009950:	e000      	b.n	8009954 <SPI_EndRxTxTransaction+0x70>
        break;
 8009952:	bf00      	nop
  }

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20000180 	.word	0x20000180
 8009964:	165e9f81 	.word	0x165e9f81

08009968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e041      	b.n	80099fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d106      	bne.n	8009994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7f9 fe70 	bl	8003674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	3304      	adds	r3, #4
 80099a4:	4619      	mov	r1, r3
 80099a6:	4610      	mov	r0, r2
 80099a8:	f000 fc7a 	bl	800a2a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d001      	beq.n	8009a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e04e      	b.n	8009abe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2202      	movs	r2, #2
 8009a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f042 0201 	orr.w	r2, r2, #1
 8009a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a23      	ldr	r2, [pc, #140]	; (8009acc <HAL_TIM_Base_Start_IT+0xc4>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d022      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a4a:	d01d      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a1f      	ldr	r2, [pc, #124]	; (8009ad0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d018      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a1e      	ldr	r2, [pc, #120]	; (8009ad4 <HAL_TIM_Base_Start_IT+0xcc>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d013      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a1c      	ldr	r2, [pc, #112]	; (8009ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d00e      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a1b      	ldr	r2, [pc, #108]	; (8009adc <HAL_TIM_Base_Start_IT+0xd4>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d009      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a19      	ldr	r2, [pc, #100]	; (8009ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d004      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a18      	ldr	r2, [pc, #96]	; (8009ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d111      	bne.n	8009aac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f003 0307 	and.w	r3, r3, #7
 8009a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b06      	cmp	r3, #6
 8009a98:	d010      	beq.n	8009abc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f042 0201 	orr.w	r2, r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aaa:	e007      	b.n	8009abc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f042 0201 	orr.w	r2, r2, #1
 8009aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	40010000 	.word	0x40010000
 8009ad0:	40000400 	.word	0x40000400
 8009ad4:	40000800 	.word	0x40000800
 8009ad8:	40000c00 	.word	0x40000c00
 8009adc:	40010400 	.word	0x40010400
 8009ae0:	40014000 	.word	0x40014000
 8009ae4:	40001800 	.word	0x40001800

08009ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e041      	b.n	8009b7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d106      	bne.n	8009b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f839 	bl	8009b86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2202      	movs	r2, #2
 8009b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4619      	mov	r1, r3
 8009b26:	4610      	mov	r0, r2
 8009b28:	f000 fbba 	bl	800a2a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b86:	b480      	push	{r7}
 8009b88:	b083      	sub	sp, #12
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b8e:	bf00      	nop
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
	...

08009b9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d109      	bne.n	8009bc0 <HAL_TIM_PWM_Start+0x24>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	bf14      	ite	ne
 8009bb8:	2301      	movne	r3, #1
 8009bba:	2300      	moveq	r3, #0
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	e022      	b.n	8009c06 <HAL_TIM_PWM_Start+0x6a>
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2b04      	cmp	r3, #4
 8009bc4:	d109      	bne.n	8009bda <HAL_TIM_PWM_Start+0x3e>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	bf14      	ite	ne
 8009bd2:	2301      	movne	r3, #1
 8009bd4:	2300      	moveq	r3, #0
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	e015      	b.n	8009c06 <HAL_TIM_PWM_Start+0x6a>
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2b08      	cmp	r3, #8
 8009bde:	d109      	bne.n	8009bf4 <HAL_TIM_PWM_Start+0x58>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	bf14      	ite	ne
 8009bec:	2301      	movne	r3, #1
 8009bee:	2300      	moveq	r3, #0
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	e008      	b.n	8009c06 <HAL_TIM_PWM_Start+0x6a>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	bf14      	ite	ne
 8009c00:	2301      	movne	r3, #1
 8009c02:	2300      	moveq	r3, #0
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e07c      	b.n	8009d08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d104      	bne.n	8009c1e <HAL_TIM_PWM_Start+0x82>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2202      	movs	r2, #2
 8009c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c1c:	e013      	b.n	8009c46 <HAL_TIM_PWM_Start+0xaa>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d104      	bne.n	8009c2e <HAL_TIM_PWM_Start+0x92>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2202      	movs	r2, #2
 8009c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c2c:	e00b      	b.n	8009c46 <HAL_TIM_PWM_Start+0xaa>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d104      	bne.n	8009c3e <HAL_TIM_PWM_Start+0xa2>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2202      	movs	r2, #2
 8009c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c3c:	e003      	b.n	8009c46 <HAL_TIM_PWM_Start+0xaa>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2202      	movs	r2, #2
 8009c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 fe10 	bl	800a874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a2d      	ldr	r2, [pc, #180]	; (8009d10 <HAL_TIM_PWM_Start+0x174>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d004      	beq.n	8009c68 <HAL_TIM_PWM_Start+0xcc>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a2c      	ldr	r2, [pc, #176]	; (8009d14 <HAL_TIM_PWM_Start+0x178>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d101      	bne.n	8009c6c <HAL_TIM_PWM_Start+0xd0>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e000      	b.n	8009c6e <HAL_TIM_PWM_Start+0xd2>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d007      	beq.n	8009c82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a22      	ldr	r2, [pc, #136]	; (8009d10 <HAL_TIM_PWM_Start+0x174>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d022      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x136>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c94:	d01d      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x136>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a1f      	ldr	r2, [pc, #124]	; (8009d18 <HAL_TIM_PWM_Start+0x17c>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d018      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x136>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a1d      	ldr	r2, [pc, #116]	; (8009d1c <HAL_TIM_PWM_Start+0x180>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d013      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x136>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a1c      	ldr	r2, [pc, #112]	; (8009d20 <HAL_TIM_PWM_Start+0x184>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d00e      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x136>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a16      	ldr	r2, [pc, #88]	; (8009d14 <HAL_TIM_PWM_Start+0x178>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d009      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x136>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a18      	ldr	r2, [pc, #96]	; (8009d24 <HAL_TIM_PWM_Start+0x188>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d004      	beq.n	8009cd2 <HAL_TIM_PWM_Start+0x136>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a16      	ldr	r2, [pc, #88]	; (8009d28 <HAL_TIM_PWM_Start+0x18c>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d111      	bne.n	8009cf6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f003 0307 	and.w	r3, r3, #7
 8009cdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b06      	cmp	r3, #6
 8009ce2:	d010      	beq.n	8009d06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0201 	orr.w	r2, r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cf4:	e007      	b.n	8009d06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f042 0201 	orr.w	r2, r2, #1
 8009d04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	40010000 	.word	0x40010000
 8009d14:	40010400 	.word	0x40010400
 8009d18:	40000400 	.word	0x40000400
 8009d1c:	40000800 	.word	0x40000800
 8009d20:	40000c00 	.word	0x40000c00
 8009d24:	40014000 	.word	0x40014000
 8009d28:	40001800 	.word	0x40001800

08009d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d122      	bne.n	8009d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f003 0302 	and.w	r3, r3, #2
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d11b      	bne.n	8009d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f06f 0202 	mvn.w	r2, #2
 8009d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	699b      	ldr	r3, [r3, #24]
 8009d66:	f003 0303 	and.w	r3, r3, #3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fa77 	bl	800a262 <HAL_TIM_IC_CaptureCallback>
 8009d74:	e005      	b.n	8009d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fa69 	bl	800a24e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fa7a 	bl	800a276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	f003 0304 	and.w	r3, r3, #4
 8009d92:	2b04      	cmp	r3, #4
 8009d94:	d122      	bne.n	8009ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f003 0304 	and.w	r3, r3, #4
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	d11b      	bne.n	8009ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f06f 0204 	mvn.w	r2, #4
 8009dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2202      	movs	r2, #2
 8009db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fa4d 	bl	800a262 <HAL_TIM_IC_CaptureCallback>
 8009dc8:	e005      	b.n	8009dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fa3f 	bl	800a24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fa50 	bl	800a276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	f003 0308 	and.w	r3, r3, #8
 8009de6:	2b08      	cmp	r3, #8
 8009de8:	d122      	bne.n	8009e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	f003 0308 	and.w	r3, r3, #8
 8009df4:	2b08      	cmp	r3, #8
 8009df6:	d11b      	bne.n	8009e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f06f 0208 	mvn.w	r2, #8
 8009e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2204      	movs	r2, #4
 8009e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	f003 0303 	and.w	r3, r3, #3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fa23 	bl	800a262 <HAL_TIM_IC_CaptureCallback>
 8009e1c:	e005      	b.n	8009e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fa15 	bl	800a24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fa26 	bl	800a276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	f003 0310 	and.w	r3, r3, #16
 8009e3a:	2b10      	cmp	r3, #16
 8009e3c:	d122      	bne.n	8009e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	2b10      	cmp	r3, #16
 8009e4a:	d11b      	bne.n	8009e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f06f 0210 	mvn.w	r2, #16
 8009e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2208      	movs	r2, #8
 8009e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f9f9 	bl	800a262 <HAL_TIM_IC_CaptureCallback>
 8009e70:	e005      	b.n	8009e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f9eb 	bl	800a24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f9fc 	bl	800a276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d10e      	bne.n	8009eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f003 0301 	and.w	r3, r3, #1
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d107      	bne.n	8009eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f06f 0201 	mvn.w	r2, #1
 8009ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7f9 f8b6 	bl	800301c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eba:	2b80      	cmp	r3, #128	; 0x80
 8009ebc:	d10e      	bne.n	8009edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ec8:	2b80      	cmp	r3, #128	; 0x80
 8009eca:	d107      	bne.n	8009edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fdca 	bl	800aa70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee6:	2b40      	cmp	r3, #64	; 0x40
 8009ee8:	d10e      	bne.n	8009f08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef4:	2b40      	cmp	r3, #64	; 0x40
 8009ef6:	d107      	bne.n	8009f08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f9c1 	bl	800a28a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	f003 0320 	and.w	r3, r3, #32
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	d10e      	bne.n	8009f34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	f003 0320 	and.w	r3, r3, #32
 8009f20:	2b20      	cmp	r3, #32
 8009f22:	d107      	bne.n	8009f34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f06f 0220 	mvn.w	r2, #32
 8009f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fd94 	bl	800aa5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f34:	bf00      	nop
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d101      	bne.n	8009f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f56:	2302      	movs	r3, #2
 8009f58:	e0ae      	b.n	800a0b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b0c      	cmp	r3, #12
 8009f66:	f200 809f 	bhi.w	800a0a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009fa5 	.word	0x08009fa5
 8009f74:	0800a0a9 	.word	0x0800a0a9
 8009f78:	0800a0a9 	.word	0x0800a0a9
 8009f7c:	0800a0a9 	.word	0x0800a0a9
 8009f80:	08009fe5 	.word	0x08009fe5
 8009f84:	0800a0a9 	.word	0x0800a0a9
 8009f88:	0800a0a9 	.word	0x0800a0a9
 8009f8c:	0800a0a9 	.word	0x0800a0a9
 8009f90:	0800a027 	.word	0x0800a027
 8009f94:	0800a0a9 	.word	0x0800a0a9
 8009f98:	0800a0a9 	.word	0x0800a0a9
 8009f9c:	0800a0a9 	.word	0x0800a0a9
 8009fa0:	0800a067 	.word	0x0800a067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68b9      	ldr	r1, [r7, #8]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 fa18 	bl	800a3e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	699a      	ldr	r2, [r3, #24]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f042 0208 	orr.w	r2, r2, #8
 8009fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	699a      	ldr	r2, [r3, #24]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f022 0204 	bic.w	r2, r2, #4
 8009fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6999      	ldr	r1, [r3, #24]
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	691a      	ldr	r2, [r3, #16]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	619a      	str	r2, [r3, #24]
      break;
 8009fe2:	e064      	b.n	800a0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68b9      	ldr	r1, [r7, #8]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 fa68 	bl	800a4c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	699a      	ldr	r2, [r3, #24]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	699a      	ldr	r2, [r3, #24]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a00e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6999      	ldr	r1, [r3, #24]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	021a      	lsls	r2, r3, #8
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	430a      	orrs	r2, r1
 800a022:	619a      	str	r2, [r3, #24]
      break;
 800a024:	e043      	b.n	800a0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68b9      	ldr	r1, [r7, #8]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fabd 	bl	800a5ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	69da      	ldr	r2, [r3, #28]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f042 0208 	orr.w	r2, r2, #8
 800a040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	69da      	ldr	r2, [r3, #28]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f022 0204 	bic.w	r2, r2, #4
 800a050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	69d9      	ldr	r1, [r3, #28]
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	691a      	ldr	r2, [r3, #16]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	430a      	orrs	r2, r1
 800a062:	61da      	str	r2, [r3, #28]
      break;
 800a064:	e023      	b.n	800a0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68b9      	ldr	r1, [r7, #8]
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 fb11 	bl	800a694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	69da      	ldr	r2, [r3, #28]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	69da      	ldr	r2, [r3, #28]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	69d9      	ldr	r1, [r3, #28]
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	021a      	lsls	r2, r3, #8
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	61da      	str	r2, [r3, #28]
      break;
 800a0a6:	e002      	b.n	800a0ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d101      	bne.n	800a0dc <HAL_TIM_ConfigClockSource+0x1c>
 800a0d8:	2302      	movs	r3, #2
 800a0da:	e0b4      	b.n	800a246 <HAL_TIM_ConfigClockSource+0x186>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a0fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a114:	d03e      	beq.n	800a194 <HAL_TIM_ConfigClockSource+0xd4>
 800a116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a11a:	f200 8087 	bhi.w	800a22c <HAL_TIM_ConfigClockSource+0x16c>
 800a11e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a122:	f000 8086 	beq.w	800a232 <HAL_TIM_ConfigClockSource+0x172>
 800a126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a12a:	d87f      	bhi.n	800a22c <HAL_TIM_ConfigClockSource+0x16c>
 800a12c:	2b70      	cmp	r3, #112	; 0x70
 800a12e:	d01a      	beq.n	800a166 <HAL_TIM_ConfigClockSource+0xa6>
 800a130:	2b70      	cmp	r3, #112	; 0x70
 800a132:	d87b      	bhi.n	800a22c <HAL_TIM_ConfigClockSource+0x16c>
 800a134:	2b60      	cmp	r3, #96	; 0x60
 800a136:	d050      	beq.n	800a1da <HAL_TIM_ConfigClockSource+0x11a>
 800a138:	2b60      	cmp	r3, #96	; 0x60
 800a13a:	d877      	bhi.n	800a22c <HAL_TIM_ConfigClockSource+0x16c>
 800a13c:	2b50      	cmp	r3, #80	; 0x50
 800a13e:	d03c      	beq.n	800a1ba <HAL_TIM_ConfigClockSource+0xfa>
 800a140:	2b50      	cmp	r3, #80	; 0x50
 800a142:	d873      	bhi.n	800a22c <HAL_TIM_ConfigClockSource+0x16c>
 800a144:	2b40      	cmp	r3, #64	; 0x40
 800a146:	d058      	beq.n	800a1fa <HAL_TIM_ConfigClockSource+0x13a>
 800a148:	2b40      	cmp	r3, #64	; 0x40
 800a14a:	d86f      	bhi.n	800a22c <HAL_TIM_ConfigClockSource+0x16c>
 800a14c:	2b30      	cmp	r3, #48	; 0x30
 800a14e:	d064      	beq.n	800a21a <HAL_TIM_ConfigClockSource+0x15a>
 800a150:	2b30      	cmp	r3, #48	; 0x30
 800a152:	d86b      	bhi.n	800a22c <HAL_TIM_ConfigClockSource+0x16c>
 800a154:	2b20      	cmp	r3, #32
 800a156:	d060      	beq.n	800a21a <HAL_TIM_ConfigClockSource+0x15a>
 800a158:	2b20      	cmp	r3, #32
 800a15a:	d867      	bhi.n	800a22c <HAL_TIM_ConfigClockSource+0x16c>
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d05c      	beq.n	800a21a <HAL_TIM_ConfigClockSource+0x15a>
 800a160:	2b10      	cmp	r3, #16
 800a162:	d05a      	beq.n	800a21a <HAL_TIM_ConfigClockSource+0x15a>
 800a164:	e062      	b.n	800a22c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	6899      	ldr	r1, [r3, #8]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	f000 fb5d 	bl	800a834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	609a      	str	r2, [r3, #8]
      break;
 800a192:	e04f      	b.n	800a234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6818      	ldr	r0, [r3, #0]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	6899      	ldr	r1, [r3, #8]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f000 fb46 	bl	800a834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689a      	ldr	r2, [r3, #8]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1b6:	609a      	str	r2, [r3, #8]
      break;
 800a1b8:	e03c      	b.n	800a234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	6859      	ldr	r1, [r3, #4]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f000 faba 	bl	800a740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2150      	movs	r1, #80	; 0x50
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 fb13 	bl	800a7fe <TIM_ITRx_SetConfig>
      break;
 800a1d8:	e02c      	b.n	800a234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6818      	ldr	r0, [r3, #0]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	6859      	ldr	r1, [r3, #4]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	f000 fad9 	bl	800a79e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2160      	movs	r1, #96	; 0x60
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fb03 	bl	800a7fe <TIM_ITRx_SetConfig>
      break;
 800a1f8:	e01c      	b.n	800a234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	6859      	ldr	r1, [r3, #4]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	461a      	mov	r2, r3
 800a208:	f000 fa9a 	bl	800a740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2140      	movs	r1, #64	; 0x40
 800a212:	4618      	mov	r0, r3
 800a214:	f000 faf3 	bl	800a7fe <TIM_ITRx_SetConfig>
      break;
 800a218:	e00c      	b.n	800a234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4619      	mov	r1, r3
 800a224:	4610      	mov	r0, r2
 800a226:	f000 faea 	bl	800a7fe <TIM_ITRx_SetConfig>
      break;
 800a22a:	e003      	b.n	800a234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	73fb      	strb	r3, [r7, #15]
      break;
 800a230:	e000      	b.n	800a234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a244:	7bfb      	ldrb	r3, [r7, #15]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a24e:	b480      	push	{r7}
 800a250:	b083      	sub	sp, #12
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a256:	bf00      	nop
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a262:	b480      	push	{r7}
 800a264:	b083      	sub	sp, #12
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a26a:	bf00      	nop
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a27e:	bf00      	nop
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b083      	sub	sp, #12
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a292:	bf00      	nop
 800a294:	370c      	adds	r7, #12
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
	...

0800a2a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a40      	ldr	r2, [pc, #256]	; (800a3b4 <TIM_Base_SetConfig+0x114>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d013      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2be:	d00f      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a3d      	ldr	r2, [pc, #244]	; (800a3b8 <TIM_Base_SetConfig+0x118>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d00b      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a3c      	ldr	r2, [pc, #240]	; (800a3bc <TIM_Base_SetConfig+0x11c>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d007      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a3b      	ldr	r2, [pc, #236]	; (800a3c0 <TIM_Base_SetConfig+0x120>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d003      	beq.n	800a2e0 <TIM_Base_SetConfig+0x40>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a3a      	ldr	r2, [pc, #232]	; (800a3c4 <TIM_Base_SetConfig+0x124>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d108      	bne.n	800a2f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a2f      	ldr	r2, [pc, #188]	; (800a3b4 <TIM_Base_SetConfig+0x114>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d02b      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a300:	d027      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a2c      	ldr	r2, [pc, #176]	; (800a3b8 <TIM_Base_SetConfig+0x118>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d023      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a2b      	ldr	r2, [pc, #172]	; (800a3bc <TIM_Base_SetConfig+0x11c>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d01f      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a2a      	ldr	r2, [pc, #168]	; (800a3c0 <TIM_Base_SetConfig+0x120>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d01b      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a29      	ldr	r2, [pc, #164]	; (800a3c4 <TIM_Base_SetConfig+0x124>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d017      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a28      	ldr	r2, [pc, #160]	; (800a3c8 <TIM_Base_SetConfig+0x128>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d013      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a27      	ldr	r2, [pc, #156]	; (800a3cc <TIM_Base_SetConfig+0x12c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d00f      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a26      	ldr	r2, [pc, #152]	; (800a3d0 <TIM_Base_SetConfig+0x130>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d00b      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a25      	ldr	r2, [pc, #148]	; (800a3d4 <TIM_Base_SetConfig+0x134>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d007      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a24      	ldr	r2, [pc, #144]	; (800a3d8 <TIM_Base_SetConfig+0x138>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d003      	beq.n	800a352 <TIM_Base_SetConfig+0xb2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a23      	ldr	r2, [pc, #140]	; (800a3dc <TIM_Base_SetConfig+0x13c>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d108      	bne.n	800a364 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	4313      	orrs	r3, r2
 800a362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	4313      	orrs	r3, r2
 800a370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	689a      	ldr	r2, [r3, #8]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a0a      	ldr	r2, [pc, #40]	; (800a3b4 <TIM_Base_SetConfig+0x114>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d003      	beq.n	800a398 <TIM_Base_SetConfig+0xf8>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a0c      	ldr	r2, [pc, #48]	; (800a3c4 <TIM_Base_SetConfig+0x124>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d103      	bne.n	800a3a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	691a      	ldr	r2, [r3, #16]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	615a      	str	r2, [r3, #20]
}
 800a3a6:	bf00      	nop
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	40010000 	.word	0x40010000
 800a3b8:	40000400 	.word	0x40000400
 800a3bc:	40000800 	.word	0x40000800
 800a3c0:	40000c00 	.word	0x40000c00
 800a3c4:	40010400 	.word	0x40010400
 800a3c8:	40014000 	.word	0x40014000
 800a3cc:	40014400 	.word	0x40014400
 800a3d0:	40014800 	.word	0x40014800
 800a3d4:	40001800 	.word	0x40001800
 800a3d8:	40001c00 	.word	0x40001c00
 800a3dc:	40002000 	.word	0x40002000

0800a3e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	f023 0201 	bic.w	r2, r3, #1
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a40e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f023 0303 	bic.w	r3, r3, #3
 800a416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	4313      	orrs	r3, r2
 800a420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f023 0302 	bic.w	r3, r3, #2
 800a428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	4313      	orrs	r3, r2
 800a432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a20      	ldr	r2, [pc, #128]	; (800a4b8 <TIM_OC1_SetConfig+0xd8>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d003      	beq.n	800a444 <TIM_OC1_SetConfig+0x64>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a1f      	ldr	r2, [pc, #124]	; (800a4bc <TIM_OC1_SetConfig+0xdc>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d10c      	bne.n	800a45e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	f023 0308 	bic.w	r3, r3, #8
 800a44a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	4313      	orrs	r3, r2
 800a454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f023 0304 	bic.w	r3, r3, #4
 800a45c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a15      	ldr	r2, [pc, #84]	; (800a4b8 <TIM_OC1_SetConfig+0xd8>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d003      	beq.n	800a46e <TIM_OC1_SetConfig+0x8e>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4a14      	ldr	r2, [pc, #80]	; (800a4bc <TIM_OC1_SetConfig+0xdc>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d111      	bne.n	800a492 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a47c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	4313      	orrs	r3, r2
 800a486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	4313      	orrs	r3, r2
 800a490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	621a      	str	r2, [r3, #32]
}
 800a4ac:	bf00      	nop
 800a4ae:	371c      	adds	r7, #28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	40010000 	.word	0x40010000
 800a4bc:	40010400 	.word	0x40010400

0800a4c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	f023 0210 	bic.w	r2, r3, #16
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	021b      	lsls	r3, r3, #8
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4313      	orrs	r3, r2
 800a502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f023 0320 	bic.w	r3, r3, #32
 800a50a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	011b      	lsls	r3, r3, #4
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	4313      	orrs	r3, r2
 800a516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a22      	ldr	r2, [pc, #136]	; (800a5a4 <TIM_OC2_SetConfig+0xe4>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d003      	beq.n	800a528 <TIM_OC2_SetConfig+0x68>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a21      	ldr	r2, [pc, #132]	; (800a5a8 <TIM_OC2_SetConfig+0xe8>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d10d      	bne.n	800a544 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	011b      	lsls	r3, r3, #4
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	4313      	orrs	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a17      	ldr	r2, [pc, #92]	; (800a5a4 <TIM_OC2_SetConfig+0xe4>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d003      	beq.n	800a554 <TIM_OC2_SetConfig+0x94>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a16      	ldr	r2, [pc, #88]	; (800a5a8 <TIM_OC2_SetConfig+0xe8>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d113      	bne.n	800a57c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a55a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	4313      	orrs	r3, r2
 800a57a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	621a      	str	r2, [r3, #32]
}
 800a596:	bf00      	nop
 800a598:	371c      	adds	r7, #28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	40010000 	.word	0x40010000
 800a5a8:	40010400 	.word	0x40010400

0800a5ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a1b      	ldr	r3, [r3, #32]
 800a5c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	69db      	ldr	r3, [r3, #28]
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f023 0303 	bic.w	r3, r3, #3
 800a5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	021b      	lsls	r3, r3, #8
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a21      	ldr	r2, [pc, #132]	; (800a68c <TIM_OC3_SetConfig+0xe0>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d003      	beq.n	800a612 <TIM_OC3_SetConfig+0x66>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a20      	ldr	r2, [pc, #128]	; (800a690 <TIM_OC3_SetConfig+0xe4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d10d      	bne.n	800a62e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	021b      	lsls	r3, r3, #8
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	4313      	orrs	r3, r2
 800a624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a62c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a16      	ldr	r2, [pc, #88]	; (800a68c <TIM_OC3_SetConfig+0xe0>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d003      	beq.n	800a63e <TIM_OC3_SetConfig+0x92>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a15      	ldr	r2, [pc, #84]	; (800a690 <TIM_OC3_SetConfig+0xe4>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d113      	bne.n	800a666 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a64c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	011b      	lsls	r3, r3, #4
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	4313      	orrs	r3, r2
 800a658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	011b      	lsls	r3, r3, #4
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	4313      	orrs	r3, r2
 800a664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	621a      	str	r2, [r3, #32]
}
 800a680:	bf00      	nop
 800a682:	371c      	adds	r7, #28
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	40010000 	.word	0x40010000
 800a690:	40010400 	.word	0x40010400

0800a694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a694:	b480      	push	{r7}
 800a696:	b087      	sub	sp, #28
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	69db      	ldr	r3, [r3, #28]
 800a6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	021b      	lsls	r3, r3, #8
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	031b      	lsls	r3, r3, #12
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a12      	ldr	r2, [pc, #72]	; (800a738 <TIM_OC4_SetConfig+0xa4>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d003      	beq.n	800a6fc <TIM_OC4_SetConfig+0x68>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a11      	ldr	r2, [pc, #68]	; (800a73c <TIM_OC4_SetConfig+0xa8>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d109      	bne.n	800a710 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	019b      	lsls	r3, r3, #6
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	697a      	ldr	r2, [r7, #20]
 800a714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	693a      	ldr	r2, [r7, #16]
 800a728:	621a      	str	r2, [r3, #32]
}
 800a72a:	bf00      	nop
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	40010000 	.word	0x40010000
 800a73c:	40010400 	.word	0x40010400

0800a740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a740:	b480      	push	{r7}
 800a742:	b087      	sub	sp, #28
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6a1b      	ldr	r3, [r3, #32]
 800a750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f023 0201 	bic.w	r2, r3, #1
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a76a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	011b      	lsls	r3, r3, #4
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	4313      	orrs	r3, r2
 800a774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f023 030a 	bic.w	r3, r3, #10
 800a77c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	4313      	orrs	r3, r2
 800a784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	621a      	str	r2, [r3, #32]
}
 800a792:	bf00      	nop
 800a794:	371c      	adds	r7, #28
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b087      	sub	sp, #28
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	60b9      	str	r1, [r7, #8]
 800a7a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	f023 0210 	bic.w	r2, r3, #16
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	031b      	lsls	r3, r3, #12
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	011b      	lsls	r3, r3, #4
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	621a      	str	r2, [r3, #32]
}
 800a7f2:	bf00      	nop
 800a7f4:	371c      	adds	r7, #28
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b085      	sub	sp, #20
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	f043 0307 	orr.w	r3, r3, #7
 800a820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	609a      	str	r2, [r3, #8]
}
 800a828:	bf00      	nop
 800a82a:	3714      	adds	r7, #20
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
 800a840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a84e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	021a      	lsls	r2, r3, #8
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	431a      	orrs	r2, r3
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	4313      	orrs	r3, r2
 800a860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	609a      	str	r2, [r3, #8]
}
 800a868:	bf00      	nop
 800a86a:	371c      	adds	r7, #28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a874:	b480      	push	{r7}
 800a876:	b087      	sub	sp, #28
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	f003 031f 	and.w	r3, r3, #31
 800a886:	2201      	movs	r2, #1
 800a888:	fa02 f303 	lsl.w	r3, r2, r3
 800a88c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6a1a      	ldr	r2, [r3, #32]
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	43db      	mvns	r3, r3
 800a896:	401a      	ands	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6a1a      	ldr	r2, [r3, #32]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f003 031f 	and.w	r3, r3, #31
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ac:	431a      	orrs	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	621a      	str	r2, [r3, #32]
}
 800a8b2:	bf00      	nop
 800a8b4:	371c      	adds	r7, #28
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
	...

0800a8c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d101      	bne.n	800a8d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	e05a      	b.n	800a98e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2202      	movs	r2, #2
 800a8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	4313      	orrs	r3, r2
 800a908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a21      	ldr	r2, [pc, #132]	; (800a99c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d022      	beq.n	800a962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a924:	d01d      	beq.n	800a962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a1d      	ldr	r2, [pc, #116]	; (800a9a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d018      	beq.n	800a962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a1b      	ldr	r2, [pc, #108]	; (800a9a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d013      	beq.n	800a962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a1a      	ldr	r2, [pc, #104]	; (800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d00e      	beq.n	800a962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a18      	ldr	r2, [pc, #96]	; (800a9ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d009      	beq.n	800a962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a17      	ldr	r2, [pc, #92]	; (800a9b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d004      	beq.n	800a962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a15      	ldr	r2, [pc, #84]	; (800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d10c      	bne.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	4313      	orrs	r3, r2
 800a972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	40010000 	.word	0x40010000
 800a9a0:	40000400 	.word	0x40000400
 800a9a4:	40000800 	.word	0x40000800
 800a9a8:	40000c00 	.word	0x40000c00
 800a9ac:	40010400 	.word	0x40010400
 800a9b0:	40014000 	.word	0x40014000
 800a9b4:	40001800 	.word	0x40001800

0800a9b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d101      	bne.n	800a9d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	e03d      	b.n	800aa50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3714      	adds	r7, #20
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d101      	bne.n	800aa96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e03f      	b.n	800ab16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d106      	bne.n	800aab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f7f8 fedc 	bl	8003868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2224      	movs	r2, #36	; 0x24
 800aab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68da      	ldr	r2, [r3, #12]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fd81 	bl	800b5d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	691a      	ldr	r2, [r3, #16]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aadc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	695a      	ldr	r2, [r3, #20]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aaec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68da      	ldr	r2, [r3, #12]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aafc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2220      	movs	r2, #32
 800ab08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2220      	movs	r2, #32
 800ab10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b08a      	sub	sp, #40	; 0x28
 800ab22:	af02      	add	r7, sp, #8
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	603b      	str	r3, [r7, #0]
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b20      	cmp	r3, #32
 800ab3c:	f040 808c 	bne.w	800ac58 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <HAL_UART_Receive+0x2e>
 800ab46:	88fb      	ldrh	r3, [r7, #6]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e084      	b.n	800ac5a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d101      	bne.n	800ab5e <HAL_UART_Receive+0x40>
 800ab5a:	2302      	movs	r3, #2
 800ab5c:	e07d      	b.n	800ac5a <HAL_UART_Receive+0x13c>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2201      	movs	r2, #1
 800ab62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2222      	movs	r2, #34	; 0x22
 800ab70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2200      	movs	r2, #0
 800ab78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab7a:	f7fb fee5 	bl	8006948 <HAL_GetTick>
 800ab7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	88fa      	ldrh	r2, [r7, #6]
 800ab84:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	88fa      	ldrh	r2, [r7, #6]
 800ab8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab94:	d108      	bne.n	800aba8 <HAL_UART_Receive+0x8a>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d104      	bne.n	800aba8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	61bb      	str	r3, [r7, #24]
 800aba6:	e003      	b.n	800abb0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abac:	2300      	movs	r3, #0
 800abae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800abb8:	e043      	b.n	800ac42 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2200      	movs	r2, #0
 800abc2:	2120      	movs	r1, #32
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f000 fafb 	bl	800b1c0 <UART_WaitOnFlagUntilTimeout>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d001      	beq.n	800abd4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e042      	b.n	800ac5a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10c      	bne.n	800abf4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	3302      	adds	r3, #2
 800abf0:	61bb      	str	r3, [r7, #24]
 800abf2:	e01f      	b.n	800ac34 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abfc:	d007      	beq.n	800ac0e <HAL_UART_Receive+0xf0>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10a      	bne.n	800ac1c <HAL_UART_Receive+0xfe>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d106      	bne.n	800ac1c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	701a      	strb	r2, [r3, #0]
 800ac1a:	e008      	b.n	800ac2e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	3301      	adds	r3, #1
 800ac32:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1b6      	bne.n	800abba <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2220      	movs	r2, #32
 800ac50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800ac54:	2300      	movs	r3, #0
 800ac56:	e000      	b.n	800ac5a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800ac58:	2302      	movs	r3, #2
  }
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3720      	adds	r7, #32
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
	...

0800ac64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b0ba      	sub	sp, #232	; 0xe8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ac96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac9a:	f003 030f 	and.w	r3, r3, #15
 800ac9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800aca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10f      	bne.n	800acca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800acaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acae:	f003 0320 	and.w	r3, r3, #32
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d009      	beq.n	800acca <HAL_UART_IRQHandler+0x66>
 800acb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acba:	f003 0320 	and.w	r3, r3, #32
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d003      	beq.n	800acca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fbc9 	bl	800b45a <UART_Receive_IT>
      return;
 800acc8:	e256      	b.n	800b178 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800acca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f000 80de 	beq.w	800ae90 <HAL_UART_IRQHandler+0x22c>
 800acd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d106      	bne.n	800acee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ace0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ace4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f000 80d1 	beq.w	800ae90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800acee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00b      	beq.n	800ad12 <HAL_UART_IRQHandler+0xae>
 800acfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d005      	beq.n	800ad12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0a:	f043 0201 	orr.w	r2, r3, #1
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00b      	beq.n	800ad36 <HAL_UART_IRQHandler+0xd2>
 800ad1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d005      	beq.n	800ad36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2e:	f043 0202 	orr.w	r2, r3, #2
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad3a:	f003 0302 	and.w	r3, r3, #2
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00b      	beq.n	800ad5a <HAL_UART_IRQHandler+0xf6>
 800ad42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d005      	beq.n	800ad5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad52:	f043 0204 	orr.w	r2, r3, #4
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ad5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad5e:	f003 0308 	and.w	r3, r3, #8
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d011      	beq.n	800ad8a <HAL_UART_IRQHandler+0x126>
 800ad66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad6a:	f003 0320 	and.w	r3, r3, #32
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d105      	bne.n	800ad7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad76:	f003 0301 	and.w	r3, r3, #1
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d005      	beq.n	800ad8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad82:	f043 0208 	orr.w	r2, r3, #8
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f000 81ed 	beq.w	800b16e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad98:	f003 0320 	and.w	r3, r3, #32
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d008      	beq.n	800adb2 <HAL_UART_IRQHandler+0x14e>
 800ada0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ada4:	f003 0320 	and.w	r3, r3, #32
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fb54 	bl	800b45a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	695b      	ldr	r3, [r3, #20]
 800adb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adbc:	2b40      	cmp	r3, #64	; 0x40
 800adbe:	bf0c      	ite	eq
 800adc0:	2301      	moveq	r3, #1
 800adc2:	2300      	movne	r3, #0
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adce:	f003 0308 	and.w	r3, r3, #8
 800add2:	2b00      	cmp	r3, #0
 800add4:	d103      	bne.n	800adde <HAL_UART_IRQHandler+0x17a>
 800add6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adda:	2b00      	cmp	r3, #0
 800addc:	d04f      	beq.n	800ae7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fa5c 	bl	800b29c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	695b      	ldr	r3, [r3, #20]
 800adea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adee:	2b40      	cmp	r3, #64	; 0x40
 800adf0:	d141      	bne.n	800ae76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	3314      	adds	r3, #20
 800adf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae00:	e853 3f00 	ldrex	r3, [r3]
 800ae04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3314      	adds	r3, #20
 800ae1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae2e:	e841 2300 	strex	r3, r2, [r1]
 800ae32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1d9      	bne.n	800adf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d013      	beq.n	800ae6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4a:	4a7d      	ldr	r2, [pc, #500]	; (800b040 <HAL_UART_IRQHandler+0x3dc>)
 800ae4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fb ff29 	bl	8006caa <HAL_DMA_Abort_IT>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d016      	beq.n	800ae8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae68:	4610      	mov	r0, r2
 800ae6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae6c:	e00e      	b.n	800ae8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f990 	bl	800b194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae74:	e00a      	b.n	800ae8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f98c 	bl	800b194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae7c:	e006      	b.n	800ae8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f988 	bl	800b194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ae8a:	e170      	b.n	800b16e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae8c:	bf00      	nop
    return;
 800ae8e:	e16e      	b.n	800b16e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	f040 814a 	bne.w	800b12e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ae9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae9e:	f003 0310 	and.w	r3, r3, #16
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 8143 	beq.w	800b12e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeac:	f003 0310 	and.w	r3, r3, #16
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 813c 	beq.w	800b12e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	60bb      	str	r3, [r7, #8]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	60bb      	str	r3, [r7, #8]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	60bb      	str	r3, [r7, #8]
 800aeca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	695b      	ldr	r3, [r3, #20]
 800aed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed6:	2b40      	cmp	r3, #64	; 0x40
 800aed8:	f040 80b4 	bne.w	800b044 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aee8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 8140 	beq.w	800b172 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aefa:	429a      	cmp	r2, r3
 800aefc:	f080 8139 	bcs.w	800b172 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af12:	f000 8088 	beq.w	800b026 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	330c      	adds	r3, #12
 800af1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af24:	e853 3f00 	ldrex	r3, [r3]
 800af28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	330c      	adds	r3, #12
 800af3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800af42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af52:	e841 2300 	strex	r3, r2, [r1]
 800af56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1d9      	bne.n	800af16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3314      	adds	r3, #20
 800af68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af6c:	e853 3f00 	ldrex	r3, [r3]
 800af70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800af72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af74:	f023 0301 	bic.w	r3, r3, #1
 800af78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3314      	adds	r3, #20
 800af82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800af86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800af8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800af92:	e841 2300 	strex	r3, r2, [r1]
 800af96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800af98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1e1      	bne.n	800af62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3314      	adds	r3, #20
 800afa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afa8:	e853 3f00 	ldrex	r3, [r3]
 800afac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800afae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	3314      	adds	r3, #20
 800afbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800afc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800afc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800afc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800afca:	e841 2300 	strex	r3, r2, [r1]
 800afce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800afd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1e3      	bne.n	800af9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2220      	movs	r2, #32
 800afda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	330c      	adds	r3, #12
 800afea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afee:	e853 3f00 	ldrex	r3, [r3]
 800aff2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aff6:	f023 0310 	bic.w	r3, r3, #16
 800affa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	330c      	adds	r3, #12
 800b004:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b008:	65ba      	str	r2, [r7, #88]	; 0x58
 800b00a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b00e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b010:	e841 2300 	strex	r3, r2, [r1]
 800b014:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1e3      	bne.n	800afe4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b020:	4618      	mov	r0, r3
 800b022:	f7fb fdd2 	bl	8006bca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b02e:	b29b      	uxth	r3, r3
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	b29b      	uxth	r3, r3
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f8b6 	bl	800b1a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b03c:	e099      	b.n	800b172 <HAL_UART_IRQHandler+0x50e>
 800b03e:	bf00      	nop
 800b040:	0800b363 	.word	0x0800b363
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b058:	b29b      	uxth	r3, r3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f000 808b 	beq.w	800b176 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 8086 	beq.w	800b176 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	330c      	adds	r3, #12
 800b070:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b074:	e853 3f00 	ldrex	r3, [r3]
 800b078:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b080:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	330c      	adds	r3, #12
 800b08a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b08e:	647a      	str	r2, [r7, #68]	; 0x44
 800b090:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b092:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b096:	e841 2300 	strex	r3, r2, [r1]
 800b09a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1e3      	bne.n	800b06a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	3314      	adds	r3, #20
 800b0a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	e853 3f00 	ldrex	r3, [r3]
 800b0b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	f023 0301 	bic.w	r3, r3, #1
 800b0b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	3314      	adds	r3, #20
 800b0c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0c6:	633a      	str	r2, [r7, #48]	; 0x30
 800b0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0ce:	e841 2300 	strex	r3, r2, [r1]
 800b0d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1e3      	bne.n	800b0a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2220      	movs	r2, #32
 800b0de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	330c      	adds	r3, #12
 800b0ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	e853 3f00 	ldrex	r3, [r3]
 800b0f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f023 0310 	bic.w	r3, r3, #16
 800b0fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	330c      	adds	r3, #12
 800b108:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b10c:	61fa      	str	r2, [r7, #28]
 800b10e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b110:	69b9      	ldr	r1, [r7, #24]
 800b112:	69fa      	ldr	r2, [r7, #28]
 800b114:	e841 2300 	strex	r3, r2, [r1]
 800b118:	617b      	str	r3, [r7, #20]
   return(result);
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1e3      	bne.n	800b0e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b120:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f83e 	bl	800b1a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b12c:	e023      	b.n	800b176 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b136:	2b00      	cmp	r3, #0
 800b138:	d009      	beq.n	800b14e <HAL_UART_IRQHandler+0x4ea>
 800b13a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f91f 	bl	800b38a <UART_Transmit_IT>
    return;
 800b14c:	e014      	b.n	800b178 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b14e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00e      	beq.n	800b178 <HAL_UART_IRQHandler+0x514>
 800b15a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b15e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b162:	2b00      	cmp	r3, #0
 800b164:	d008      	beq.n	800b178 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f95f 	bl	800b42a <UART_EndTransmit_IT>
    return;
 800b16c:	e004      	b.n	800b178 <HAL_UART_IRQHandler+0x514>
    return;
 800b16e:	bf00      	nop
 800b170:	e002      	b.n	800b178 <HAL_UART_IRQHandler+0x514>
      return;
 800b172:	bf00      	nop
 800b174:	e000      	b.n	800b178 <HAL_UART_IRQHandler+0x514>
      return;
 800b176:	bf00      	nop
  }
}
 800b178:	37e8      	adds	r7, #232	; 0xe8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop

0800b180 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b090      	sub	sp, #64	; 0x40
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	603b      	str	r3, [r7, #0]
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1d0:	e050      	b.n	800b274 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d8:	d04c      	beq.n	800b274 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b1da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d007      	beq.n	800b1f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1e0:	f7fb fbb2 	bl	8006948 <HAL_GetTick>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d241      	bcs.n	800b274 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	330c      	adds	r3, #12
 800b1f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fa:	e853 3f00 	ldrex	r3, [r3]
 800b1fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b206:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	330c      	adds	r3, #12
 800b20e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b210:	637a      	str	r2, [r7, #52]	; 0x34
 800b212:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b214:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b218:	e841 2300 	strex	r3, r2, [r1]
 800b21c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1e5      	bne.n	800b1f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	3314      	adds	r3, #20
 800b22a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	e853 3f00 	ldrex	r3, [r3]
 800b232:	613b      	str	r3, [r7, #16]
   return(result);
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	f023 0301 	bic.w	r3, r3, #1
 800b23a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3314      	adds	r3, #20
 800b242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b244:	623a      	str	r2, [r7, #32]
 800b246:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b248:	69f9      	ldr	r1, [r7, #28]
 800b24a:	6a3a      	ldr	r2, [r7, #32]
 800b24c:	e841 2300 	strex	r3, r2, [r1]
 800b250:	61bb      	str	r3, [r7, #24]
   return(result);
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1e5      	bne.n	800b224 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2220      	movs	r2, #32
 800b25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2220      	movs	r2, #32
 800b264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b270:	2303      	movs	r3, #3
 800b272:	e00f      	b.n	800b294 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	4013      	ands	r3, r2
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	429a      	cmp	r2, r3
 800b282:	bf0c      	ite	eq
 800b284:	2301      	moveq	r3, #1
 800b286:	2300      	movne	r3, #0
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	461a      	mov	r2, r3
 800b28c:	79fb      	ldrb	r3, [r7, #7]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d09f      	beq.n	800b1d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3740      	adds	r7, #64	; 0x40
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b095      	sub	sp, #84	; 0x54
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	330c      	adds	r3, #12
 800b2aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ae:	e853 3f00 	ldrex	r3, [r3]
 800b2b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	330c      	adds	r3, #12
 800b2c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2c4:	643a      	str	r2, [r7, #64]	; 0x40
 800b2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2cc:	e841 2300 	strex	r3, r2, [r1]
 800b2d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1e5      	bne.n	800b2a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	3314      	adds	r3, #20
 800b2de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e0:	6a3b      	ldr	r3, [r7, #32]
 800b2e2:	e853 3f00 	ldrex	r3, [r3]
 800b2e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	f023 0301 	bic.w	r3, r3, #1
 800b2ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3314      	adds	r3, #20
 800b2f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b300:	e841 2300 	strex	r3, r2, [r1]
 800b304:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1e5      	bne.n	800b2d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b310:	2b01      	cmp	r3, #1
 800b312:	d119      	bne.n	800b348 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	330c      	adds	r3, #12
 800b31a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	e853 3f00 	ldrex	r3, [r3]
 800b322:	60bb      	str	r3, [r7, #8]
   return(result);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f023 0310 	bic.w	r3, r3, #16
 800b32a:	647b      	str	r3, [r7, #68]	; 0x44
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	330c      	adds	r3, #12
 800b332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b334:	61ba      	str	r2, [r7, #24]
 800b336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b338:	6979      	ldr	r1, [r7, #20]
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	e841 2300 	strex	r3, r2, [r1]
 800b340:	613b      	str	r3, [r7, #16]
   return(result);
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1e5      	bne.n	800b314 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2220      	movs	r2, #32
 800b34c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b356:	bf00      	nop
 800b358:	3754      	adds	r7, #84	; 0x54
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b084      	sub	sp, #16
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b36e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f7ff ff09 	bl	800b194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b382:	bf00      	nop
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b085      	sub	sp, #20
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b21      	cmp	r3, #33	; 0x21
 800b39c:	d13e      	bne.n	800b41c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3a6:	d114      	bne.n	800b3d2 <UART_Transmit_IT+0x48>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d110      	bne.n	800b3d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6a1b      	ldr	r3, [r3, #32]
 800b3b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	1c9a      	adds	r2, r3, #2
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	621a      	str	r2, [r3, #32]
 800b3d0:	e008      	b.n	800b3e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a1b      	ldr	r3, [r3, #32]
 800b3d6:	1c59      	adds	r1, r3, #1
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	6211      	str	r1, [r2, #32]
 800b3dc:	781a      	ldrb	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10f      	bne.n	800b418 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	68da      	ldr	r2, [r3, #12]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b406:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68da      	ldr	r2, [r3, #12]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b416:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	e000      	b.n	800b41e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b41c:	2302      	movs	r3, #2
  }
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3714      	adds	r7, #20
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b082      	sub	sp, #8
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68da      	ldr	r2, [r3, #12]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b440:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2220      	movs	r2, #32
 800b446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7ff fe98 	bl	800b180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b08c      	sub	sp, #48	; 0x30
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	2b22      	cmp	r3, #34	; 0x22
 800b46c:	f040 80ab 	bne.w	800b5c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b478:	d117      	bne.n	800b4aa <UART_Receive_IT+0x50>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d113      	bne.n	800b4aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b482:	2300      	movs	r3, #0
 800b484:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	b29b      	uxth	r3, r3
 800b494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b498:	b29a      	uxth	r2, r3
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a2:	1c9a      	adds	r2, r3, #2
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	629a      	str	r2, [r3, #40]	; 0x28
 800b4a8:	e026      	b.n	800b4f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4bc:	d007      	beq.n	800b4ce <UART_Receive_IT+0x74>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10a      	bne.n	800b4dc <UART_Receive_IT+0x82>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d106      	bne.n	800b4dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d8:	701a      	strb	r2, [r3, #0]
 800b4da:	e008      	b.n	800b4ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4e8:	b2da      	uxtb	r2, r3
 800b4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f2:	1c5a      	adds	r2, r3, #1
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	3b01      	subs	r3, #1
 800b500:	b29b      	uxth	r3, r3
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	4619      	mov	r1, r3
 800b506:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d15a      	bne.n	800b5c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	68da      	ldr	r2, [r3, #12]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f022 0220 	bic.w	r2, r2, #32
 800b51a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	68da      	ldr	r2, [r3, #12]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b52a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	695a      	ldr	r2, [r3, #20]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f022 0201 	bic.w	r2, r2, #1
 800b53a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2220      	movs	r2, #32
 800b540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d135      	bne.n	800b5b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	330c      	adds	r3, #12
 800b558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	e853 3f00 	ldrex	r3, [r3]
 800b560:	613b      	str	r3, [r7, #16]
   return(result);
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	f023 0310 	bic.w	r3, r3, #16
 800b568:	627b      	str	r3, [r7, #36]	; 0x24
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	330c      	adds	r3, #12
 800b570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b572:	623a      	str	r2, [r7, #32]
 800b574:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b576:	69f9      	ldr	r1, [r7, #28]
 800b578:	6a3a      	ldr	r2, [r7, #32]
 800b57a:	e841 2300 	strex	r3, r2, [r1]
 800b57e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1e5      	bne.n	800b552 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 0310 	and.w	r3, r3, #16
 800b590:	2b10      	cmp	r3, #16
 800b592:	d10a      	bne.n	800b5aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b594:	2300      	movs	r3, #0
 800b596:	60fb      	str	r3, [r7, #12]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	60fb      	str	r3, [r7, #12]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	60fb      	str	r3, [r7, #12]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7ff fdf9 	bl	800b1a8 <HAL_UARTEx_RxEventCallback>
 800b5b6:	e002      	b.n	800b5be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7f7 fd5b 	bl	8003074 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	e002      	b.n	800b5c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e000      	b.n	800b5c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b5c6:	2302      	movs	r3, #2
  }
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3730      	adds	r7, #48	; 0x30
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5d4:	b0c0      	sub	sp, #256	; 0x100
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ec:	68d9      	ldr	r1, [r3, #12]
 800b5ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	ea40 0301 	orr.w	r3, r0, r1
 800b5f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b5fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5fe:	689a      	ldr	r2, [r3, #8]
 800b600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	431a      	orrs	r2, r3
 800b608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b60c:	695b      	ldr	r3, [r3, #20]
 800b60e:	431a      	orrs	r2, r3
 800b610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b614:	69db      	ldr	r3, [r3, #28]
 800b616:	4313      	orrs	r3, r2
 800b618:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b628:	f021 010c 	bic.w	r1, r1, #12
 800b62c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b636:	430b      	orrs	r3, r1
 800b638:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b63a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b64a:	6999      	ldr	r1, [r3, #24]
 800b64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	ea40 0301 	orr.w	r3, r0, r1
 800b656:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	4b8f      	ldr	r3, [pc, #572]	; (800b89c <UART_SetConfig+0x2cc>)
 800b660:	429a      	cmp	r2, r3
 800b662:	d005      	beq.n	800b670 <UART_SetConfig+0xa0>
 800b664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	4b8d      	ldr	r3, [pc, #564]	; (800b8a0 <UART_SetConfig+0x2d0>)
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d104      	bne.n	800b67a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b670:	f7fd fa18 	bl	8008aa4 <HAL_RCC_GetPCLK2Freq>
 800b674:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b678:	e003      	b.n	800b682 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b67a:	f7fd f9ff 	bl	8008a7c <HAL_RCC_GetPCLK1Freq>
 800b67e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b686:	69db      	ldr	r3, [r3, #28]
 800b688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b68c:	f040 810c 	bne.w	800b8a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b694:	2200      	movs	r2, #0
 800b696:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b69a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b69e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	462b      	mov	r3, r5
 800b6a6:	1891      	adds	r1, r2, r2
 800b6a8:	65b9      	str	r1, [r7, #88]	; 0x58
 800b6aa:	415b      	adcs	r3, r3
 800b6ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	eb12 0801 	adds.w	r8, r2, r1
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	eb43 0901 	adc.w	r9, r3, r1
 800b6be:	f04f 0200 	mov.w	r2, #0
 800b6c2:	f04f 0300 	mov.w	r3, #0
 800b6c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b6ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b6ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b6d2:	4690      	mov	r8, r2
 800b6d4:	4699      	mov	r9, r3
 800b6d6:	4623      	mov	r3, r4
 800b6d8:	eb18 0303 	adds.w	r3, r8, r3
 800b6dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	eb49 0303 	adc.w	r3, r9, r3
 800b6e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b6ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b6fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b6fe:	460b      	mov	r3, r1
 800b700:	18db      	adds	r3, r3, r3
 800b702:	653b      	str	r3, [r7, #80]	; 0x50
 800b704:	4613      	mov	r3, r2
 800b706:	eb42 0303 	adc.w	r3, r2, r3
 800b70a:	657b      	str	r3, [r7, #84]	; 0x54
 800b70c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b710:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b714:	f7f5 fab2 	bl	8000c7c <__aeabi_uldivmod>
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	4b61      	ldr	r3, [pc, #388]	; (800b8a4 <UART_SetConfig+0x2d4>)
 800b71e:	fba3 2302 	umull	r2, r3, r3, r2
 800b722:	095b      	lsrs	r3, r3, #5
 800b724:	011c      	lsls	r4, r3, #4
 800b726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b730:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b734:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b738:	4642      	mov	r2, r8
 800b73a:	464b      	mov	r3, r9
 800b73c:	1891      	adds	r1, r2, r2
 800b73e:	64b9      	str	r1, [r7, #72]	; 0x48
 800b740:	415b      	adcs	r3, r3
 800b742:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b744:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b748:	4641      	mov	r1, r8
 800b74a:	eb12 0a01 	adds.w	sl, r2, r1
 800b74e:	4649      	mov	r1, r9
 800b750:	eb43 0b01 	adc.w	fp, r3, r1
 800b754:	f04f 0200 	mov.w	r2, #0
 800b758:	f04f 0300 	mov.w	r3, #0
 800b75c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b760:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b764:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b768:	4692      	mov	sl, r2
 800b76a:	469b      	mov	fp, r3
 800b76c:	4643      	mov	r3, r8
 800b76e:	eb1a 0303 	adds.w	r3, sl, r3
 800b772:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b776:	464b      	mov	r3, r9
 800b778:	eb4b 0303 	adc.w	r3, fp, r3
 800b77c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b78c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b790:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b794:	460b      	mov	r3, r1
 800b796:	18db      	adds	r3, r3, r3
 800b798:	643b      	str	r3, [r7, #64]	; 0x40
 800b79a:	4613      	mov	r3, r2
 800b79c:	eb42 0303 	adc.w	r3, r2, r3
 800b7a0:	647b      	str	r3, [r7, #68]	; 0x44
 800b7a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b7a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b7aa:	f7f5 fa67 	bl	8000c7c <__aeabi_uldivmod>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	4b3b      	ldr	r3, [pc, #236]	; (800b8a4 <UART_SetConfig+0x2d4>)
 800b7b6:	fba3 2301 	umull	r2, r3, r3, r1
 800b7ba:	095b      	lsrs	r3, r3, #5
 800b7bc:	2264      	movs	r2, #100	; 0x64
 800b7be:	fb02 f303 	mul.w	r3, r2, r3
 800b7c2:	1acb      	subs	r3, r1, r3
 800b7c4:	00db      	lsls	r3, r3, #3
 800b7c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b7ca:	4b36      	ldr	r3, [pc, #216]	; (800b8a4 <UART_SetConfig+0x2d4>)
 800b7cc:	fba3 2302 	umull	r2, r3, r3, r2
 800b7d0:	095b      	lsrs	r3, r3, #5
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b7d8:	441c      	add	r4, r3
 800b7da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b7e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b7ec:	4642      	mov	r2, r8
 800b7ee:	464b      	mov	r3, r9
 800b7f0:	1891      	adds	r1, r2, r2
 800b7f2:	63b9      	str	r1, [r7, #56]	; 0x38
 800b7f4:	415b      	adcs	r3, r3
 800b7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b7fc:	4641      	mov	r1, r8
 800b7fe:	1851      	adds	r1, r2, r1
 800b800:	6339      	str	r1, [r7, #48]	; 0x30
 800b802:	4649      	mov	r1, r9
 800b804:	414b      	adcs	r3, r1
 800b806:	637b      	str	r3, [r7, #52]	; 0x34
 800b808:	f04f 0200 	mov.w	r2, #0
 800b80c:	f04f 0300 	mov.w	r3, #0
 800b810:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b814:	4659      	mov	r1, fp
 800b816:	00cb      	lsls	r3, r1, #3
 800b818:	4651      	mov	r1, sl
 800b81a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b81e:	4651      	mov	r1, sl
 800b820:	00ca      	lsls	r2, r1, #3
 800b822:	4610      	mov	r0, r2
 800b824:	4619      	mov	r1, r3
 800b826:	4603      	mov	r3, r0
 800b828:	4642      	mov	r2, r8
 800b82a:	189b      	adds	r3, r3, r2
 800b82c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b830:	464b      	mov	r3, r9
 800b832:	460a      	mov	r2, r1
 800b834:	eb42 0303 	adc.w	r3, r2, r3
 800b838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b848:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b84c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b850:	460b      	mov	r3, r1
 800b852:	18db      	adds	r3, r3, r3
 800b854:	62bb      	str	r3, [r7, #40]	; 0x28
 800b856:	4613      	mov	r3, r2
 800b858:	eb42 0303 	adc.w	r3, r2, r3
 800b85c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b85e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b862:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b866:	f7f5 fa09 	bl	8000c7c <__aeabi_uldivmod>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	4b0d      	ldr	r3, [pc, #52]	; (800b8a4 <UART_SetConfig+0x2d4>)
 800b870:	fba3 1302 	umull	r1, r3, r3, r2
 800b874:	095b      	lsrs	r3, r3, #5
 800b876:	2164      	movs	r1, #100	; 0x64
 800b878:	fb01 f303 	mul.w	r3, r1, r3
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	00db      	lsls	r3, r3, #3
 800b880:	3332      	adds	r3, #50	; 0x32
 800b882:	4a08      	ldr	r2, [pc, #32]	; (800b8a4 <UART_SetConfig+0x2d4>)
 800b884:	fba2 2303 	umull	r2, r3, r2, r3
 800b888:	095b      	lsrs	r3, r3, #5
 800b88a:	f003 0207 	and.w	r2, r3, #7
 800b88e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4422      	add	r2, r4
 800b896:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b898:	e105      	b.n	800baa6 <UART_SetConfig+0x4d6>
 800b89a:	bf00      	nop
 800b89c:	40011000 	.word	0x40011000
 800b8a0:	40011400 	.word	0x40011400
 800b8a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b8b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b8b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b8ba:	4642      	mov	r2, r8
 800b8bc:	464b      	mov	r3, r9
 800b8be:	1891      	adds	r1, r2, r2
 800b8c0:	6239      	str	r1, [r7, #32]
 800b8c2:	415b      	adcs	r3, r3
 800b8c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b8ca:	4641      	mov	r1, r8
 800b8cc:	1854      	adds	r4, r2, r1
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	eb43 0501 	adc.w	r5, r3, r1
 800b8d4:	f04f 0200 	mov.w	r2, #0
 800b8d8:	f04f 0300 	mov.w	r3, #0
 800b8dc:	00eb      	lsls	r3, r5, #3
 800b8de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b8e2:	00e2      	lsls	r2, r4, #3
 800b8e4:	4614      	mov	r4, r2
 800b8e6:	461d      	mov	r5, r3
 800b8e8:	4643      	mov	r3, r8
 800b8ea:	18e3      	adds	r3, r4, r3
 800b8ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b8f0:	464b      	mov	r3, r9
 800b8f2:	eb45 0303 	adc.w	r3, r5, r3
 800b8f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b8fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b906:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b90a:	f04f 0200 	mov.w	r2, #0
 800b90e:	f04f 0300 	mov.w	r3, #0
 800b912:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b916:	4629      	mov	r1, r5
 800b918:	008b      	lsls	r3, r1, #2
 800b91a:	4621      	mov	r1, r4
 800b91c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b920:	4621      	mov	r1, r4
 800b922:	008a      	lsls	r2, r1, #2
 800b924:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b928:	f7f5 f9a8 	bl	8000c7c <__aeabi_uldivmod>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4b60      	ldr	r3, [pc, #384]	; (800bab4 <UART_SetConfig+0x4e4>)
 800b932:	fba3 2302 	umull	r2, r3, r3, r2
 800b936:	095b      	lsrs	r3, r3, #5
 800b938:	011c      	lsls	r4, r3, #4
 800b93a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b93e:	2200      	movs	r2, #0
 800b940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b944:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b948:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b94c:	4642      	mov	r2, r8
 800b94e:	464b      	mov	r3, r9
 800b950:	1891      	adds	r1, r2, r2
 800b952:	61b9      	str	r1, [r7, #24]
 800b954:	415b      	adcs	r3, r3
 800b956:	61fb      	str	r3, [r7, #28]
 800b958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b95c:	4641      	mov	r1, r8
 800b95e:	1851      	adds	r1, r2, r1
 800b960:	6139      	str	r1, [r7, #16]
 800b962:	4649      	mov	r1, r9
 800b964:	414b      	adcs	r3, r1
 800b966:	617b      	str	r3, [r7, #20]
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	f04f 0300 	mov.w	r3, #0
 800b970:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b974:	4659      	mov	r1, fp
 800b976:	00cb      	lsls	r3, r1, #3
 800b978:	4651      	mov	r1, sl
 800b97a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b97e:	4651      	mov	r1, sl
 800b980:	00ca      	lsls	r2, r1, #3
 800b982:	4610      	mov	r0, r2
 800b984:	4619      	mov	r1, r3
 800b986:	4603      	mov	r3, r0
 800b988:	4642      	mov	r2, r8
 800b98a:	189b      	adds	r3, r3, r2
 800b98c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b990:	464b      	mov	r3, r9
 800b992:	460a      	mov	r2, r1
 800b994:	eb42 0303 	adc.w	r3, r2, r3
 800b998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b99c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b9a8:	f04f 0200 	mov.w	r2, #0
 800b9ac:	f04f 0300 	mov.w	r3, #0
 800b9b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b9b4:	4649      	mov	r1, r9
 800b9b6:	008b      	lsls	r3, r1, #2
 800b9b8:	4641      	mov	r1, r8
 800b9ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9be:	4641      	mov	r1, r8
 800b9c0:	008a      	lsls	r2, r1, #2
 800b9c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b9c6:	f7f5 f959 	bl	8000c7c <__aeabi_uldivmod>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	4b39      	ldr	r3, [pc, #228]	; (800bab4 <UART_SetConfig+0x4e4>)
 800b9d0:	fba3 1302 	umull	r1, r3, r3, r2
 800b9d4:	095b      	lsrs	r3, r3, #5
 800b9d6:	2164      	movs	r1, #100	; 0x64
 800b9d8:	fb01 f303 	mul.w	r3, r1, r3
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	011b      	lsls	r3, r3, #4
 800b9e0:	3332      	adds	r3, #50	; 0x32
 800b9e2:	4a34      	ldr	r2, [pc, #208]	; (800bab4 <UART_SetConfig+0x4e4>)
 800b9e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b9e8:	095b      	lsrs	r3, r3, #5
 800b9ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9ee:	441c      	add	r4, r3
 800b9f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	673b      	str	r3, [r7, #112]	; 0x70
 800b9f8:	677a      	str	r2, [r7, #116]	; 0x74
 800b9fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b9fe:	4642      	mov	r2, r8
 800ba00:	464b      	mov	r3, r9
 800ba02:	1891      	adds	r1, r2, r2
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	415b      	adcs	r3, r3
 800ba08:	60fb      	str	r3, [r7, #12]
 800ba0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba0e:	4641      	mov	r1, r8
 800ba10:	1851      	adds	r1, r2, r1
 800ba12:	6039      	str	r1, [r7, #0]
 800ba14:	4649      	mov	r1, r9
 800ba16:	414b      	adcs	r3, r1
 800ba18:	607b      	str	r3, [r7, #4]
 800ba1a:	f04f 0200 	mov.w	r2, #0
 800ba1e:	f04f 0300 	mov.w	r3, #0
 800ba22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ba26:	4659      	mov	r1, fp
 800ba28:	00cb      	lsls	r3, r1, #3
 800ba2a:	4651      	mov	r1, sl
 800ba2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba30:	4651      	mov	r1, sl
 800ba32:	00ca      	lsls	r2, r1, #3
 800ba34:	4610      	mov	r0, r2
 800ba36:	4619      	mov	r1, r3
 800ba38:	4603      	mov	r3, r0
 800ba3a:	4642      	mov	r2, r8
 800ba3c:	189b      	adds	r3, r3, r2
 800ba3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba40:	464b      	mov	r3, r9
 800ba42:	460a      	mov	r2, r1
 800ba44:	eb42 0303 	adc.w	r3, r2, r3
 800ba48:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	663b      	str	r3, [r7, #96]	; 0x60
 800ba54:	667a      	str	r2, [r7, #100]	; 0x64
 800ba56:	f04f 0200 	mov.w	r2, #0
 800ba5a:	f04f 0300 	mov.w	r3, #0
 800ba5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ba62:	4649      	mov	r1, r9
 800ba64:	008b      	lsls	r3, r1, #2
 800ba66:	4641      	mov	r1, r8
 800ba68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba6c:	4641      	mov	r1, r8
 800ba6e:	008a      	lsls	r2, r1, #2
 800ba70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ba74:	f7f5 f902 	bl	8000c7c <__aeabi_uldivmod>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	4b0d      	ldr	r3, [pc, #52]	; (800bab4 <UART_SetConfig+0x4e4>)
 800ba7e:	fba3 1302 	umull	r1, r3, r3, r2
 800ba82:	095b      	lsrs	r3, r3, #5
 800ba84:	2164      	movs	r1, #100	; 0x64
 800ba86:	fb01 f303 	mul.w	r3, r1, r3
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	011b      	lsls	r3, r3, #4
 800ba8e:	3332      	adds	r3, #50	; 0x32
 800ba90:	4a08      	ldr	r2, [pc, #32]	; (800bab4 <UART_SetConfig+0x4e4>)
 800ba92:	fba2 2303 	umull	r2, r3, r2, r3
 800ba96:	095b      	lsrs	r3, r3, #5
 800ba98:	f003 020f 	and.w	r2, r3, #15
 800ba9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4422      	add	r2, r4
 800baa4:	609a      	str	r2, [r3, #8]
}
 800baa6:	bf00      	nop
 800baa8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800baac:	46bd      	mov	sp, r7
 800baae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bab2:	bf00      	nop
 800bab4:	51eb851f 	.word	0x51eb851f

0800bab8 <asctime>:
 800bab8:	4b0d      	ldr	r3, [pc, #52]	; (800baf0 <asctime+0x38>)
 800baba:	b570      	push	{r4, r5, r6, lr}
 800babc:	681d      	ldr	r5, [r3, #0]
 800babe:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800bac0:	4604      	mov	r4, r0
 800bac2:	b976      	cbnz	r6, 800bae2 <asctime+0x2a>
 800bac4:	201a      	movs	r0, #26
 800bac6:	f000 f893 	bl	800bbf0 <malloc>
 800baca:	4602      	mov	r2, r0
 800bacc:	6428      	str	r0, [r5, #64]	; 0x40
 800bace:	b920      	cbnz	r0, 800bada <asctime+0x22>
 800bad0:	4b08      	ldr	r3, [pc, #32]	; (800baf4 <asctime+0x3c>)
 800bad2:	4809      	ldr	r0, [pc, #36]	; (800baf8 <asctime+0x40>)
 800bad4:	2137      	movs	r1, #55	; 0x37
 800bad6:	f000 f837 	bl	800bb48 <__assert_func>
 800bada:	221a      	movs	r2, #26
 800badc:	4631      	mov	r1, r6
 800bade:	f000 f8a5 	bl	800bc2c <memset>
 800bae2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800bae4:	4620      	mov	r0, r4
 800bae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800baea:	f000 b807 	b.w	800bafc <asctime_r>
 800baee:	bf00      	nop
 800baf0:	200002bc 	.word	0x200002bc
 800baf4:	0803cfdc 	.word	0x0803cfdc
 800baf8:	0803cff3 	.word	0x0803cff3

0800bafc <asctime_r>:
 800bafc:	b510      	push	{r4, lr}
 800bafe:	460c      	mov	r4, r1
 800bb00:	6941      	ldr	r1, [r0, #20]
 800bb02:	6903      	ldr	r3, [r0, #16]
 800bb04:	6982      	ldr	r2, [r0, #24]
 800bb06:	b086      	sub	sp, #24
 800bb08:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800bb0c:	9104      	str	r1, [sp, #16]
 800bb0e:	6801      	ldr	r1, [r0, #0]
 800bb10:	9103      	str	r1, [sp, #12]
 800bb12:	6841      	ldr	r1, [r0, #4]
 800bb14:	9102      	str	r1, [sp, #8]
 800bb16:	6881      	ldr	r1, [r0, #8]
 800bb18:	9101      	str	r1, [sp, #4]
 800bb1a:	68c1      	ldr	r1, [r0, #12]
 800bb1c:	9100      	str	r1, [sp, #0]
 800bb1e:	4907      	ldr	r1, [pc, #28]	; (800bb3c <asctime_r+0x40>)
 800bb20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bb24:	440b      	add	r3, r1
 800bb26:	4906      	ldr	r1, [pc, #24]	; (800bb40 <asctime_r+0x44>)
 800bb28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800bb2c:	440a      	add	r2, r1
 800bb2e:	4620      	mov	r0, r4
 800bb30:	4904      	ldr	r1, [pc, #16]	; (800bb44 <asctime_r+0x48>)
 800bb32:	f001 f9a9 	bl	800ce88 <siprintf>
 800bb36:	4620      	mov	r0, r4
 800bb38:	b006      	add	sp, #24
 800bb3a:	bd10      	pop	{r4, pc}
 800bb3c:	0803d084 	.word	0x0803d084
 800bb40:	0803d06f 	.word	0x0803d06f
 800bb44:	0803d04f 	.word	0x0803d04f

0800bb48 <__assert_func>:
 800bb48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb4a:	4614      	mov	r4, r2
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	4b09      	ldr	r3, [pc, #36]	; (800bb74 <__assert_func+0x2c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4605      	mov	r5, r0
 800bb54:	68d8      	ldr	r0, [r3, #12]
 800bb56:	b14c      	cbz	r4, 800bb6c <__assert_func+0x24>
 800bb58:	4b07      	ldr	r3, [pc, #28]	; (800bb78 <__assert_func+0x30>)
 800bb5a:	9100      	str	r1, [sp, #0]
 800bb5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb60:	4906      	ldr	r1, [pc, #24]	; (800bb7c <__assert_func+0x34>)
 800bb62:	462b      	mov	r3, r5
 800bb64:	f000 f80e 	bl	800bb84 <fiprintf>
 800bb68:	f002 fafa 	bl	800e160 <abort>
 800bb6c:	4b04      	ldr	r3, [pc, #16]	; (800bb80 <__assert_func+0x38>)
 800bb6e:	461c      	mov	r4, r3
 800bb70:	e7f3      	b.n	800bb5a <__assert_func+0x12>
 800bb72:	bf00      	nop
 800bb74:	200002bc 	.word	0x200002bc
 800bb78:	0803d0a8 	.word	0x0803d0a8
 800bb7c:	0803d0b5 	.word	0x0803d0b5
 800bb80:	0803d06e 	.word	0x0803d06e

0800bb84 <fiprintf>:
 800bb84:	b40e      	push	{r1, r2, r3}
 800bb86:	b503      	push	{r0, r1, lr}
 800bb88:	4601      	mov	r1, r0
 800bb8a:	ab03      	add	r3, sp, #12
 800bb8c:	4805      	ldr	r0, [pc, #20]	; (800bba4 <fiprintf+0x20>)
 800bb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb92:	6800      	ldr	r0, [r0, #0]
 800bb94:	9301      	str	r3, [sp, #4]
 800bb96:	f000 fbcd 	bl	800c334 <_vfiprintf_r>
 800bb9a:	b002      	add	sp, #8
 800bb9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bba0:	b003      	add	sp, #12
 800bba2:	4770      	bx	lr
 800bba4:	200002bc 	.word	0x200002bc

0800bba8 <__libc_init_array>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	4d0d      	ldr	r5, [pc, #52]	; (800bbe0 <__libc_init_array+0x38>)
 800bbac:	4c0d      	ldr	r4, [pc, #52]	; (800bbe4 <__libc_init_array+0x3c>)
 800bbae:	1b64      	subs	r4, r4, r5
 800bbb0:	10a4      	asrs	r4, r4, #2
 800bbb2:	2600      	movs	r6, #0
 800bbb4:	42a6      	cmp	r6, r4
 800bbb6:	d109      	bne.n	800bbcc <__libc_init_array+0x24>
 800bbb8:	4d0b      	ldr	r5, [pc, #44]	; (800bbe8 <__libc_init_array+0x40>)
 800bbba:	4c0c      	ldr	r4, [pc, #48]	; (800bbec <__libc_init_array+0x44>)
 800bbbc:	f007 faee 	bl	801319c <_init>
 800bbc0:	1b64      	subs	r4, r4, r5
 800bbc2:	10a4      	asrs	r4, r4, #2
 800bbc4:	2600      	movs	r6, #0
 800bbc6:	42a6      	cmp	r6, r4
 800bbc8:	d105      	bne.n	800bbd6 <__libc_init_array+0x2e>
 800bbca:	bd70      	pop	{r4, r5, r6, pc}
 800bbcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbd0:	4798      	blx	r3
 800bbd2:	3601      	adds	r6, #1
 800bbd4:	e7ee      	b.n	800bbb4 <__libc_init_array+0xc>
 800bbd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbda:	4798      	blx	r3
 800bbdc:	3601      	adds	r6, #1
 800bbde:	e7f2      	b.n	800bbc6 <__libc_init_array+0x1e>
 800bbe0:	0803da18 	.word	0x0803da18
 800bbe4:	0803da18 	.word	0x0803da18
 800bbe8:	0803da18 	.word	0x0803da18
 800bbec:	0803da1c 	.word	0x0803da1c

0800bbf0 <malloc>:
 800bbf0:	4b02      	ldr	r3, [pc, #8]	; (800bbfc <malloc+0xc>)
 800bbf2:	4601      	mov	r1, r0
 800bbf4:	6818      	ldr	r0, [r3, #0]
 800bbf6:	f000 baff 	b.w	800c1f8 <_malloc_r>
 800bbfa:	bf00      	nop
 800bbfc:	200002bc 	.word	0x200002bc

0800bc00 <free>:
 800bc00:	4b02      	ldr	r3, [pc, #8]	; (800bc0c <free+0xc>)
 800bc02:	4601      	mov	r1, r0
 800bc04:	6818      	ldr	r0, [r3, #0]
 800bc06:	f000 ba8b 	b.w	800c120 <_free_r>
 800bc0a:	bf00      	nop
 800bc0c:	200002bc 	.word	0x200002bc

0800bc10 <memcpy>:
 800bc10:	440a      	add	r2, r1
 800bc12:	4291      	cmp	r1, r2
 800bc14:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc18:	d100      	bne.n	800bc1c <memcpy+0xc>
 800bc1a:	4770      	bx	lr
 800bc1c:	b510      	push	{r4, lr}
 800bc1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc26:	4291      	cmp	r1, r2
 800bc28:	d1f9      	bne.n	800bc1e <memcpy+0xe>
 800bc2a:	bd10      	pop	{r4, pc}

0800bc2c <memset>:
 800bc2c:	4402      	add	r2, r0
 800bc2e:	4603      	mov	r3, r0
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d100      	bne.n	800bc36 <memset+0xa>
 800bc34:	4770      	bx	lr
 800bc36:	f803 1b01 	strb.w	r1, [r3], #1
 800bc3a:	e7f9      	b.n	800bc30 <memset+0x4>

0800bc3c <validate_structure>:
 800bc3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc3e:	6801      	ldr	r1, [r0, #0]
 800bc40:	293b      	cmp	r1, #59	; 0x3b
 800bc42:	4604      	mov	r4, r0
 800bc44:	d911      	bls.n	800bc6a <validate_structure+0x2e>
 800bc46:	223c      	movs	r2, #60	; 0x3c
 800bc48:	4668      	mov	r0, sp
 800bc4a:	f002 faa5 	bl	800e198 <div>
 800bc4e:	9a01      	ldr	r2, [sp, #4]
 800bc50:	6863      	ldr	r3, [r4, #4]
 800bc52:	9900      	ldr	r1, [sp, #0]
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	440b      	add	r3, r1
 800bc58:	6063      	str	r3, [r4, #4]
 800bc5a:	bfbb      	ittet	lt
 800bc5c:	323c      	addlt	r2, #60	; 0x3c
 800bc5e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bc62:	6022      	strge	r2, [r4, #0]
 800bc64:	6022      	strlt	r2, [r4, #0]
 800bc66:	bfb8      	it	lt
 800bc68:	6063      	strlt	r3, [r4, #4]
 800bc6a:	6861      	ldr	r1, [r4, #4]
 800bc6c:	293b      	cmp	r1, #59	; 0x3b
 800bc6e:	d911      	bls.n	800bc94 <validate_structure+0x58>
 800bc70:	223c      	movs	r2, #60	; 0x3c
 800bc72:	4668      	mov	r0, sp
 800bc74:	f002 fa90 	bl	800e198 <div>
 800bc78:	9a01      	ldr	r2, [sp, #4]
 800bc7a:	68a3      	ldr	r3, [r4, #8]
 800bc7c:	9900      	ldr	r1, [sp, #0]
 800bc7e:	2a00      	cmp	r2, #0
 800bc80:	440b      	add	r3, r1
 800bc82:	60a3      	str	r3, [r4, #8]
 800bc84:	bfbb      	ittet	lt
 800bc86:	323c      	addlt	r2, #60	; 0x3c
 800bc88:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bc8c:	6062      	strge	r2, [r4, #4]
 800bc8e:	6062      	strlt	r2, [r4, #4]
 800bc90:	bfb8      	it	lt
 800bc92:	60a3      	strlt	r3, [r4, #8]
 800bc94:	68a1      	ldr	r1, [r4, #8]
 800bc96:	2917      	cmp	r1, #23
 800bc98:	d911      	bls.n	800bcbe <validate_structure+0x82>
 800bc9a:	2218      	movs	r2, #24
 800bc9c:	4668      	mov	r0, sp
 800bc9e:	f002 fa7b 	bl	800e198 <div>
 800bca2:	9a01      	ldr	r2, [sp, #4]
 800bca4:	68e3      	ldr	r3, [r4, #12]
 800bca6:	9900      	ldr	r1, [sp, #0]
 800bca8:	2a00      	cmp	r2, #0
 800bcaa:	440b      	add	r3, r1
 800bcac:	60e3      	str	r3, [r4, #12]
 800bcae:	bfbb      	ittet	lt
 800bcb0:	3218      	addlt	r2, #24
 800bcb2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bcb6:	60a2      	strge	r2, [r4, #8]
 800bcb8:	60a2      	strlt	r2, [r4, #8]
 800bcba:	bfb8      	it	lt
 800bcbc:	60e3      	strlt	r3, [r4, #12]
 800bcbe:	6921      	ldr	r1, [r4, #16]
 800bcc0:	290b      	cmp	r1, #11
 800bcc2:	d911      	bls.n	800bce8 <validate_structure+0xac>
 800bcc4:	220c      	movs	r2, #12
 800bcc6:	4668      	mov	r0, sp
 800bcc8:	f002 fa66 	bl	800e198 <div>
 800bccc:	9a01      	ldr	r2, [sp, #4]
 800bcce:	6963      	ldr	r3, [r4, #20]
 800bcd0:	9900      	ldr	r1, [sp, #0]
 800bcd2:	2a00      	cmp	r2, #0
 800bcd4:	440b      	add	r3, r1
 800bcd6:	6163      	str	r3, [r4, #20]
 800bcd8:	bfbb      	ittet	lt
 800bcda:	320c      	addlt	r2, #12
 800bcdc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bce0:	6122      	strge	r2, [r4, #16]
 800bce2:	6122      	strlt	r2, [r4, #16]
 800bce4:	bfb8      	it	lt
 800bce6:	6163      	strlt	r3, [r4, #20]
 800bce8:	6963      	ldr	r3, [r4, #20]
 800bcea:	0798      	lsls	r0, r3, #30
 800bcec:	d120      	bne.n	800bd30 <validate_structure+0xf4>
 800bcee:	2164      	movs	r1, #100	; 0x64
 800bcf0:	fb93 f2f1 	sdiv	r2, r3, r1
 800bcf4:	fb01 3212 	mls	r2, r1, r2, r3
 800bcf8:	b9e2      	cbnz	r2, 800bd34 <validate_structure+0xf8>
 800bcfa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800bcfe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bd02:	fb93 f1f2 	sdiv	r1, r3, r2
 800bd06:	fb02 3311 	mls	r3, r2, r1, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	bf14      	ite	ne
 800bd0e:	231c      	movne	r3, #28
 800bd10:	231d      	moveq	r3, #29
 800bd12:	68e2      	ldr	r2, [r4, #12]
 800bd14:	2a00      	cmp	r2, #0
 800bd16:	dc0f      	bgt.n	800bd38 <validate_structure+0xfc>
 800bd18:	4f33      	ldr	r7, [pc, #204]	; (800bde8 <validate_structure+0x1ac>)
 800bd1a:	260b      	movs	r6, #11
 800bd1c:	2064      	movs	r0, #100	; 0x64
 800bd1e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800bd22:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800bd26:	f1bc 0f00 	cmp.w	ip, #0
 800bd2a:	dd31      	ble.n	800bd90 <validate_structure+0x154>
 800bd2c:	b003      	add	sp, #12
 800bd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd30:	231c      	movs	r3, #28
 800bd32:	e7ee      	b.n	800bd12 <validate_structure+0xd6>
 800bd34:	231d      	movs	r3, #29
 800bd36:	e7ec      	b.n	800bd12 <validate_structure+0xd6>
 800bd38:	4e2b      	ldr	r6, [pc, #172]	; (800bde8 <validate_structure+0x1ac>)
 800bd3a:	2700      	movs	r7, #0
 800bd3c:	2064      	movs	r0, #100	; 0x64
 800bd3e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800bd42:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800bd46:	2a01      	cmp	r2, #1
 800bd48:	bf14      	ite	ne
 800bd4a:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800bd4e:	469c      	moveq	ip, r3
 800bd50:	4561      	cmp	r1, ip
 800bd52:	ddeb      	ble.n	800bd2c <validate_structure+0xf0>
 800bd54:	3201      	adds	r2, #1
 800bd56:	eba1 010c 	sub.w	r1, r1, ip
 800bd5a:	2a0c      	cmp	r2, #12
 800bd5c:	60e1      	str	r1, [r4, #12]
 800bd5e:	6122      	str	r2, [r4, #16]
 800bd60:	d1ef      	bne.n	800bd42 <validate_structure+0x106>
 800bd62:	6963      	ldr	r3, [r4, #20]
 800bd64:	1c5a      	adds	r2, r3, #1
 800bd66:	0791      	lsls	r1, r2, #30
 800bd68:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800bd6c:	d137      	bne.n	800bdde <validate_structure+0x1a2>
 800bd6e:	fb92 f1f0 	sdiv	r1, r2, r0
 800bd72:	fb00 2211 	mls	r2, r0, r1, r2
 800bd76:	2a00      	cmp	r2, #0
 800bd78:	d133      	bne.n	800bde2 <validate_structure+0x1a6>
 800bd7a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800bd7e:	fb93 f2f5 	sdiv	r2, r3, r5
 800bd82:	fb05 3312 	mls	r3, r5, r2, r3
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	bf14      	ite	ne
 800bd8a:	231c      	movne	r3, #28
 800bd8c:	231d      	moveq	r3, #29
 800bd8e:	e7d8      	b.n	800bd42 <validate_structure+0x106>
 800bd90:	6921      	ldr	r1, [r4, #16]
 800bd92:	3901      	subs	r1, #1
 800bd94:	6121      	str	r1, [r4, #16]
 800bd96:	3101      	adds	r1, #1
 800bd98:	d114      	bne.n	800bdc4 <validate_structure+0x188>
 800bd9a:	6963      	ldr	r3, [r4, #20]
 800bd9c:	1e5a      	subs	r2, r3, #1
 800bd9e:	0791      	lsls	r1, r2, #30
 800bda0:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800bda4:	d117      	bne.n	800bdd6 <validate_structure+0x19a>
 800bda6:	fb92 f1f0 	sdiv	r1, r2, r0
 800bdaa:	fb00 2211 	mls	r2, r0, r1, r2
 800bdae:	b9a2      	cbnz	r2, 800bdda <validate_structure+0x19e>
 800bdb0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800bdb4:	fb93 f2f5 	sdiv	r2, r3, r5
 800bdb8:	fb05 3312 	mls	r3, r5, r2, r3
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	bf14      	ite	ne
 800bdc0:	231c      	movne	r3, #28
 800bdc2:	231d      	moveq	r3, #29
 800bdc4:	6922      	ldr	r2, [r4, #16]
 800bdc6:	2a01      	cmp	r2, #1
 800bdc8:	bf14      	ite	ne
 800bdca:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800bdce:	461a      	moveq	r2, r3
 800bdd0:	4462      	add	r2, ip
 800bdd2:	60e2      	str	r2, [r4, #12]
 800bdd4:	e7a5      	b.n	800bd22 <validate_structure+0xe6>
 800bdd6:	231c      	movs	r3, #28
 800bdd8:	e7f4      	b.n	800bdc4 <validate_structure+0x188>
 800bdda:	231d      	movs	r3, #29
 800bddc:	e7f2      	b.n	800bdc4 <validate_structure+0x188>
 800bdde:	231c      	movs	r3, #28
 800bde0:	e7af      	b.n	800bd42 <validate_structure+0x106>
 800bde2:	231d      	movs	r3, #29
 800bde4:	e7ad      	b.n	800bd42 <validate_structure+0x106>
 800bde6:	bf00      	nop
 800bde8:	0803d0e8 	.word	0x0803d0e8

0800bdec <mktime>:
 800bdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf0:	b085      	sub	sp, #20
 800bdf2:	4607      	mov	r7, r0
 800bdf4:	f003 fa5a 	bl	800f2ac <__gettzinfo>
 800bdf8:	4681      	mov	r9, r0
 800bdfa:	4638      	mov	r0, r7
 800bdfc:	f7ff ff1e 	bl	800bc3c <validate_structure>
 800be00:	e9d7 4000 	ldrd	r4, r0, [r7]
 800be04:	233c      	movs	r3, #60	; 0x3c
 800be06:	fb03 4400 	mla	r4, r3, r0, r4
 800be0a:	68b8      	ldr	r0, [r7, #8]
 800be0c:	4abc      	ldr	r2, [pc, #752]	; (800c100 <mktime+0x314>)
 800be0e:	697e      	ldr	r6, [r7, #20]
 800be10:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800be14:	fb03 4400 	mla	r4, r3, r0, r4
 800be18:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800be1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800be20:	3d01      	subs	r5, #1
 800be22:	2b01      	cmp	r3, #1
 800be24:	4415      	add	r5, r2
 800be26:	dd11      	ble.n	800be4c <mktime+0x60>
 800be28:	07b1      	lsls	r1, r6, #30
 800be2a:	d10f      	bne.n	800be4c <mktime+0x60>
 800be2c:	2264      	movs	r2, #100	; 0x64
 800be2e:	fb96 f3f2 	sdiv	r3, r6, r2
 800be32:	fb02 6313 	mls	r3, r2, r3, r6
 800be36:	b943      	cbnz	r3, 800be4a <mktime+0x5e>
 800be38:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800be3c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800be40:	fb93 f1f2 	sdiv	r1, r3, r2
 800be44:	fb02 3311 	mls	r3, r2, r1, r3
 800be48:	b903      	cbnz	r3, 800be4c <mktime+0x60>
 800be4a:	3501      	adds	r5, #1
 800be4c:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800be50:	3310      	adds	r3, #16
 800be52:	f644 6220 	movw	r2, #20000	; 0x4e20
 800be56:	4293      	cmp	r3, r2
 800be58:	61fd      	str	r5, [r7, #28]
 800be5a:	f200 815d 	bhi.w	800c118 <mktime+0x32c>
 800be5e:	2e46      	cmp	r6, #70	; 0x46
 800be60:	dd71      	ble.n	800bf46 <mktime+0x15a>
 800be62:	2346      	movs	r3, #70	; 0x46
 800be64:	f240 1c6d 	movw	ip, #365	; 0x16d
 800be68:	2164      	movs	r1, #100	; 0x64
 800be6a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800be6e:	079a      	lsls	r2, r3, #30
 800be70:	d163      	bne.n	800bf3a <mktime+0x14e>
 800be72:	fb93 f2f1 	sdiv	r2, r3, r1
 800be76:	fb01 3212 	mls	r2, r1, r2, r3
 800be7a:	2a00      	cmp	r2, #0
 800be7c:	d160      	bne.n	800bf40 <mktime+0x154>
 800be7e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800be82:	fb92 fef0 	sdiv	lr, r2, r0
 800be86:	fb00 221e 	mls	r2, r0, lr, r2
 800be8a:	2a00      	cmp	r2, #0
 800be8c:	bf14      	ite	ne
 800be8e:	4662      	movne	r2, ip
 800be90:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800be94:	3301      	adds	r3, #1
 800be96:	429e      	cmp	r6, r3
 800be98:	4415      	add	r5, r2
 800be9a:	d1e8      	bne.n	800be6e <mktime+0x82>
 800be9c:	4b99      	ldr	r3, [pc, #612]	; (800c104 <mktime+0x318>)
 800be9e:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800bea2:	fbc5 4803 	smlal	r4, r8, r5, r3
 800bea6:	f001 fef7 	bl	800dc98 <__tz_lock>
 800beaa:	f001 ff01 	bl	800dcb0 <_tzset_unlocked>
 800beae:	4b96      	ldr	r3, [pc, #600]	; (800c108 <mktime+0x31c>)
 800beb0:	f8d3 b000 	ldr.w	fp, [r3]
 800beb4:	f1bb 0f00 	cmp.w	fp, #0
 800beb8:	d039      	beq.n	800bf2e <mktime+0x142>
 800beba:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800bebe:	6978      	ldr	r0, [r7, #20]
 800bec0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bec4:	f1bb 0f01 	cmp.w	fp, #1
 800bec8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800becc:	46da      	mov	sl, fp
 800bece:	bfa8      	it	ge
 800bed0:	f04f 0a01 	movge.w	sl, #1
 800bed4:	4283      	cmp	r3, r0
 800bed6:	d178      	bne.n	800bfca <mktime+0x1de>
 800bed8:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800bedc:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800bee0:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800bee4:	1a5b      	subs	r3, r3, r1
 800bee6:	9302      	str	r3, [sp, #8]
 800bee8:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800beec:	9303      	str	r3, [sp, #12]
 800beee:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800bef2:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800bef6:	9301      	str	r3, [sp, #4]
 800bef8:	ebb3 0c02 	subs.w	ip, r3, r2
 800befc:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800bf00:	4564      	cmp	r4, ip
 800bf02:	eb78 0300 	sbcs.w	r3, r8, r0
 800bf06:	da66      	bge.n	800bfd6 <mktime+0x1ea>
 800bf08:	f8d9 3000 	ldr.w	r3, [r9]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d06f      	beq.n	800bff0 <mktime+0x204>
 800bf10:	9b02      	ldr	r3, [sp, #8]
 800bf12:	429c      	cmp	r4, r3
 800bf14:	9b03      	ldr	r3, [sp, #12]
 800bf16:	eb78 0303 	sbcs.w	r3, r8, r3
 800bf1a:	db03      	blt.n	800bf24 <mktime+0x138>
 800bf1c:	4564      	cmp	r4, ip
 800bf1e:	eb78 0300 	sbcs.w	r3, r8, r0
 800bf22:	db6b      	blt.n	800bffc <mktime+0x210>
 800bf24:	f1bb 0f00 	cmp.w	fp, #0
 800bf28:	f04f 0b00 	mov.w	fp, #0
 800bf2c:	da6b      	bge.n	800c006 <mktime+0x21a>
 800bf2e:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800bf32:	190c      	adds	r4, r1, r4
 800bf34:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800bf38:	e0a9      	b.n	800c08e <mktime+0x2a2>
 800bf3a:	f240 126d 	movw	r2, #365	; 0x16d
 800bf3e:	e7a9      	b.n	800be94 <mktime+0xa8>
 800bf40:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800bf44:	e7a6      	b.n	800be94 <mktime+0xa8>
 800bf46:	d0a9      	beq.n	800be9c <mktime+0xb0>
 800bf48:	2345      	movs	r3, #69	; 0x45
 800bf4a:	f240 1c6d 	movw	ip, #365	; 0x16d
 800bf4e:	2164      	movs	r1, #100	; 0x64
 800bf50:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800bf54:	e012      	b.n	800bf7c <mktime+0x190>
 800bf56:	bb62      	cbnz	r2, 800bfb2 <mktime+0x1c6>
 800bf58:	fb93 f2f1 	sdiv	r2, r3, r1
 800bf5c:	fb01 3212 	mls	r2, r1, r2, r3
 800bf60:	bb52      	cbnz	r2, 800bfb8 <mktime+0x1cc>
 800bf62:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800bf66:	fb92 fef0 	sdiv	lr, r2, r0
 800bf6a:	fb00 221e 	mls	r2, r0, lr, r2
 800bf6e:	2a00      	cmp	r2, #0
 800bf70:	bf14      	ite	ne
 800bf72:	4662      	movne	r2, ip
 800bf74:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800bf78:	1aad      	subs	r5, r5, r2
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	429e      	cmp	r6, r3
 800bf7e:	f003 0203 	and.w	r2, r3, #3
 800bf82:	dbe8      	blt.n	800bf56 <mktime+0x16a>
 800bf84:	b9da      	cbnz	r2, 800bfbe <mktime+0x1d2>
 800bf86:	2264      	movs	r2, #100	; 0x64
 800bf88:	fb96 f3f2 	sdiv	r3, r6, r2
 800bf8c:	fb02 6313 	mls	r3, r2, r3, r6
 800bf90:	b9c3      	cbnz	r3, 800bfc4 <mktime+0x1d8>
 800bf92:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800bf96:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bf9a:	fb93 f1f2 	sdiv	r1, r3, r2
 800bf9e:	fb02 3311 	mls	r3, r2, r1, r3
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f240 136d 	movw	r3, #365	; 0x16d
 800bfa8:	bf08      	it	eq
 800bfaa:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800bfae:	1aed      	subs	r5, r5, r3
 800bfb0:	e774      	b.n	800be9c <mktime+0xb0>
 800bfb2:	f240 126d 	movw	r2, #365	; 0x16d
 800bfb6:	e7df      	b.n	800bf78 <mktime+0x18c>
 800bfb8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800bfbc:	e7dc      	b.n	800bf78 <mktime+0x18c>
 800bfbe:	f240 136d 	movw	r3, #365	; 0x16d
 800bfc2:	e7f4      	b.n	800bfae <mktime+0x1c2>
 800bfc4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800bfc8:	e7f1      	b.n	800bfae <mktime+0x1c2>
 800bfca:	f001 fdbb 	bl	800db44 <__tzcalc_limits>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d182      	bne.n	800bed8 <mktime+0xec>
 800bfd2:	46d3      	mov	fp, sl
 800bfd4:	e050      	b.n	800c078 <mktime+0x28c>
 800bfd6:	9b01      	ldr	r3, [sp, #4]
 800bfd8:	1a5b      	subs	r3, r3, r1
 800bfda:	9301      	str	r3, [sp, #4]
 800bfdc:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800bfe0:	eb6e 0e03 	sbc.w	lr, lr, r3
 800bfe4:	9b01      	ldr	r3, [sp, #4]
 800bfe6:	429c      	cmp	r4, r3
 800bfe8:	eb78 030e 	sbcs.w	r3, r8, lr
 800bfec:	dbf1      	blt.n	800bfd2 <mktime+0x1e6>
 800bfee:	e78b      	b.n	800bf08 <mktime+0x11c>
 800bff0:	9b02      	ldr	r3, [sp, #8]
 800bff2:	429c      	cmp	r4, r3
 800bff4:	9b03      	ldr	r3, [sp, #12]
 800bff6:	eb78 0303 	sbcs.w	r3, r8, r3
 800bffa:	db8f      	blt.n	800bf1c <mktime+0x130>
 800bffc:	f1bb 0f00 	cmp.w	fp, #0
 800c000:	db3e      	blt.n	800c080 <mktime+0x294>
 800c002:	f04f 0b01 	mov.w	fp, #1
 800c006:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c00a:	f1ba 0f01 	cmp.w	sl, #1
 800c00e:	d133      	bne.n	800c078 <mktime+0x28c>
 800c010:	f1bb 0f00 	cmp.w	fp, #0
 800c014:	d04e      	beq.n	800c0b4 <mktime+0x2c8>
 800c016:	1a52      	subs	r2, r2, r1
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c01e:	4413      	add	r3, r2
 800c020:	1914      	adds	r4, r2, r4
 800c022:	603b      	str	r3, [r7, #0]
 800c024:	4638      	mov	r0, r7
 800c026:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800c02a:	f7ff fe07 	bl	800bc3c <validate_structure>
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	ebb2 020a 	subs.w	r2, r2, sl
 800c034:	d020      	beq.n	800c078 <mktime+0x28c>
 800c036:	2a01      	cmp	r2, #1
 800c038:	dc3e      	bgt.n	800c0b8 <mktime+0x2cc>
 800c03a:	1c90      	adds	r0, r2, #2
 800c03c:	bfd8      	it	le
 800c03e:	2201      	movle	r2, #1
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	18d3      	adds	r3, r2, r3
 800c044:	4415      	add	r5, r2
 800c046:	d540      	bpl.n	800c0ca <mktime+0x2de>
 800c048:	1e73      	subs	r3, r6, #1
 800c04a:	0799      	lsls	r1, r3, #30
 800c04c:	d137      	bne.n	800c0be <mktime+0x2d2>
 800c04e:	2264      	movs	r2, #100	; 0x64
 800c050:	fb93 f1f2 	sdiv	r1, r3, r2
 800c054:	fb02 3311 	mls	r3, r2, r1, r3
 800c058:	bba3      	cbnz	r3, 800c0c4 <mktime+0x2d8>
 800c05a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c05e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c062:	fb96 f2f3 	sdiv	r2, r6, r3
 800c066:	fb03 6612 	mls	r6, r3, r2, r6
 800c06a:	2e00      	cmp	r6, #0
 800c06c:	f240 136d 	movw	r3, #365	; 0x16d
 800c070:	bf18      	it	ne
 800c072:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c076:	61fb      	str	r3, [r7, #28]
 800c078:	f1bb 0f01 	cmp.w	fp, #1
 800c07c:	f47f af57 	bne.w	800bf2e <mktime+0x142>
 800c080:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c084:	190c      	adds	r4, r1, r4
 800c086:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c08a:	f04f 0b01 	mov.w	fp, #1
 800c08e:	f001 fe09 	bl	800dca4 <__tz_unlock>
 800c092:	3504      	adds	r5, #4
 800c094:	2307      	movs	r3, #7
 800c096:	fb95 f3f3 	sdiv	r3, r5, r3
 800c09a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c09e:	1aed      	subs	r5, r5, r3
 800c0a0:	bf48      	it	mi
 800c0a2:	3507      	addmi	r5, #7
 800c0a4:	f8c7 b020 	str.w	fp, [r7, #32]
 800c0a8:	61bd      	str	r5, [r7, #24]
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	4641      	mov	r1, r8
 800c0ae:	b005      	add	sp, #20
 800c0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b4:	1a8a      	subs	r2, r1, r2
 800c0b6:	e7af      	b.n	800c018 <mktime+0x22c>
 800c0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0bc:	e7c0      	b.n	800c040 <mktime+0x254>
 800c0be:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c0c2:	e7d8      	b.n	800c076 <mktime+0x28a>
 800c0c4:	f240 136d 	movw	r3, #365	; 0x16d
 800c0c8:	e7d5      	b.n	800c076 <mktime+0x28a>
 800c0ca:	07b2      	lsls	r2, r6, #30
 800c0cc:	d11e      	bne.n	800c10c <mktime+0x320>
 800c0ce:	2164      	movs	r1, #100	; 0x64
 800c0d0:	fb96 f2f1 	sdiv	r2, r6, r1
 800c0d4:	fb01 6212 	mls	r2, r1, r2, r6
 800c0d8:	b9da      	cbnz	r2, 800c112 <mktime+0x326>
 800c0da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c0de:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800c0e2:	fb96 f1f2 	sdiv	r1, r6, r2
 800c0e6:	fb02 6611 	mls	r6, r2, r1, r6
 800c0ea:	2e00      	cmp	r6, #0
 800c0ec:	f240 126d 	movw	r2, #365	; 0x16d
 800c0f0:	bf08      	it	eq
 800c0f2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	bfa8      	it	ge
 800c0fa:	1a9b      	subge	r3, r3, r2
 800c0fc:	e7bb      	b.n	800c076 <mktime+0x28a>
 800c0fe:	bf00      	nop
 800c100:	0803d118 	.word	0x0803d118
 800c104:	00015180 	.word	0x00015180
 800c108:	200037dc 	.word	0x200037dc
 800c10c:	f240 126d 	movw	r2, #365	; 0x16d
 800c110:	e7f1      	b.n	800c0f6 <mktime+0x30a>
 800c112:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c116:	e7ee      	b.n	800c0f6 <mktime+0x30a>
 800c118:	f04f 34ff 	mov.w	r4, #4294967295
 800c11c:	46a0      	mov	r8, r4
 800c11e:	e7c4      	b.n	800c0aa <mktime+0x2be>

0800c120 <_free_r>:
 800c120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c122:	2900      	cmp	r1, #0
 800c124:	d044      	beq.n	800c1b0 <_free_r+0x90>
 800c126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c12a:	9001      	str	r0, [sp, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f1a1 0404 	sub.w	r4, r1, #4
 800c132:	bfb8      	it	lt
 800c134:	18e4      	addlt	r4, r4, r3
 800c136:	f003 f95d 	bl	800f3f4 <__malloc_lock>
 800c13a:	4a1e      	ldr	r2, [pc, #120]	; (800c1b4 <_free_r+0x94>)
 800c13c:	9801      	ldr	r0, [sp, #4]
 800c13e:	6813      	ldr	r3, [r2, #0]
 800c140:	b933      	cbnz	r3, 800c150 <_free_r+0x30>
 800c142:	6063      	str	r3, [r4, #4]
 800c144:	6014      	str	r4, [r2, #0]
 800c146:	b003      	add	sp, #12
 800c148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c14c:	f003 b958 	b.w	800f400 <__malloc_unlock>
 800c150:	42a3      	cmp	r3, r4
 800c152:	d908      	bls.n	800c166 <_free_r+0x46>
 800c154:	6825      	ldr	r5, [r4, #0]
 800c156:	1961      	adds	r1, r4, r5
 800c158:	428b      	cmp	r3, r1
 800c15a:	bf01      	itttt	eq
 800c15c:	6819      	ldreq	r1, [r3, #0]
 800c15e:	685b      	ldreq	r3, [r3, #4]
 800c160:	1949      	addeq	r1, r1, r5
 800c162:	6021      	streq	r1, [r4, #0]
 800c164:	e7ed      	b.n	800c142 <_free_r+0x22>
 800c166:	461a      	mov	r2, r3
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	b10b      	cbz	r3, 800c170 <_free_r+0x50>
 800c16c:	42a3      	cmp	r3, r4
 800c16e:	d9fa      	bls.n	800c166 <_free_r+0x46>
 800c170:	6811      	ldr	r1, [r2, #0]
 800c172:	1855      	adds	r5, r2, r1
 800c174:	42a5      	cmp	r5, r4
 800c176:	d10b      	bne.n	800c190 <_free_r+0x70>
 800c178:	6824      	ldr	r4, [r4, #0]
 800c17a:	4421      	add	r1, r4
 800c17c:	1854      	adds	r4, r2, r1
 800c17e:	42a3      	cmp	r3, r4
 800c180:	6011      	str	r1, [r2, #0]
 800c182:	d1e0      	bne.n	800c146 <_free_r+0x26>
 800c184:	681c      	ldr	r4, [r3, #0]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	6053      	str	r3, [r2, #4]
 800c18a:	4421      	add	r1, r4
 800c18c:	6011      	str	r1, [r2, #0]
 800c18e:	e7da      	b.n	800c146 <_free_r+0x26>
 800c190:	d902      	bls.n	800c198 <_free_r+0x78>
 800c192:	230c      	movs	r3, #12
 800c194:	6003      	str	r3, [r0, #0]
 800c196:	e7d6      	b.n	800c146 <_free_r+0x26>
 800c198:	6825      	ldr	r5, [r4, #0]
 800c19a:	1961      	adds	r1, r4, r5
 800c19c:	428b      	cmp	r3, r1
 800c19e:	bf04      	itt	eq
 800c1a0:	6819      	ldreq	r1, [r3, #0]
 800c1a2:	685b      	ldreq	r3, [r3, #4]
 800c1a4:	6063      	str	r3, [r4, #4]
 800c1a6:	bf04      	itt	eq
 800c1a8:	1949      	addeq	r1, r1, r5
 800c1aa:	6021      	streq	r1, [r4, #0]
 800c1ac:	6054      	str	r4, [r2, #4]
 800c1ae:	e7ca      	b.n	800c146 <_free_r+0x26>
 800c1b0:	b003      	add	sp, #12
 800c1b2:	bd30      	pop	{r4, r5, pc}
 800c1b4:	200037b8 	.word	0x200037b8

0800c1b8 <sbrk_aligned>:
 800c1b8:	b570      	push	{r4, r5, r6, lr}
 800c1ba:	4e0e      	ldr	r6, [pc, #56]	; (800c1f4 <sbrk_aligned+0x3c>)
 800c1bc:	460c      	mov	r4, r1
 800c1be:	6831      	ldr	r1, [r6, #0]
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	b911      	cbnz	r1, 800c1ca <sbrk_aligned+0x12>
 800c1c4:	f000 fe50 	bl	800ce68 <_sbrk_r>
 800c1c8:	6030      	str	r0, [r6, #0]
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	f000 fe4b 	bl	800ce68 <_sbrk_r>
 800c1d2:	1c43      	adds	r3, r0, #1
 800c1d4:	d00a      	beq.n	800c1ec <sbrk_aligned+0x34>
 800c1d6:	1cc4      	adds	r4, r0, #3
 800c1d8:	f024 0403 	bic.w	r4, r4, #3
 800c1dc:	42a0      	cmp	r0, r4
 800c1de:	d007      	beq.n	800c1f0 <sbrk_aligned+0x38>
 800c1e0:	1a21      	subs	r1, r4, r0
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f000 fe40 	bl	800ce68 <_sbrk_r>
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	d101      	bne.n	800c1f0 <sbrk_aligned+0x38>
 800c1ec:	f04f 34ff 	mov.w	r4, #4294967295
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	bd70      	pop	{r4, r5, r6, pc}
 800c1f4:	200037bc 	.word	0x200037bc

0800c1f8 <_malloc_r>:
 800c1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fc:	1ccd      	adds	r5, r1, #3
 800c1fe:	f025 0503 	bic.w	r5, r5, #3
 800c202:	3508      	adds	r5, #8
 800c204:	2d0c      	cmp	r5, #12
 800c206:	bf38      	it	cc
 800c208:	250c      	movcc	r5, #12
 800c20a:	2d00      	cmp	r5, #0
 800c20c:	4607      	mov	r7, r0
 800c20e:	db01      	blt.n	800c214 <_malloc_r+0x1c>
 800c210:	42a9      	cmp	r1, r5
 800c212:	d905      	bls.n	800c220 <_malloc_r+0x28>
 800c214:	230c      	movs	r3, #12
 800c216:	603b      	str	r3, [r7, #0]
 800c218:	2600      	movs	r6, #0
 800c21a:	4630      	mov	r0, r6
 800c21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c220:	4e2e      	ldr	r6, [pc, #184]	; (800c2dc <_malloc_r+0xe4>)
 800c222:	f003 f8e7 	bl	800f3f4 <__malloc_lock>
 800c226:	6833      	ldr	r3, [r6, #0]
 800c228:	461c      	mov	r4, r3
 800c22a:	bb34      	cbnz	r4, 800c27a <_malloc_r+0x82>
 800c22c:	4629      	mov	r1, r5
 800c22e:	4638      	mov	r0, r7
 800c230:	f7ff ffc2 	bl	800c1b8 <sbrk_aligned>
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	4604      	mov	r4, r0
 800c238:	d14d      	bne.n	800c2d6 <_malloc_r+0xde>
 800c23a:	6834      	ldr	r4, [r6, #0]
 800c23c:	4626      	mov	r6, r4
 800c23e:	2e00      	cmp	r6, #0
 800c240:	d140      	bne.n	800c2c4 <_malloc_r+0xcc>
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	4631      	mov	r1, r6
 800c246:	4638      	mov	r0, r7
 800c248:	eb04 0803 	add.w	r8, r4, r3
 800c24c:	f000 fe0c 	bl	800ce68 <_sbrk_r>
 800c250:	4580      	cmp	r8, r0
 800c252:	d13a      	bne.n	800c2ca <_malloc_r+0xd2>
 800c254:	6821      	ldr	r1, [r4, #0]
 800c256:	3503      	adds	r5, #3
 800c258:	1a6d      	subs	r5, r5, r1
 800c25a:	f025 0503 	bic.w	r5, r5, #3
 800c25e:	3508      	adds	r5, #8
 800c260:	2d0c      	cmp	r5, #12
 800c262:	bf38      	it	cc
 800c264:	250c      	movcc	r5, #12
 800c266:	4629      	mov	r1, r5
 800c268:	4638      	mov	r0, r7
 800c26a:	f7ff ffa5 	bl	800c1b8 <sbrk_aligned>
 800c26e:	3001      	adds	r0, #1
 800c270:	d02b      	beq.n	800c2ca <_malloc_r+0xd2>
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	442b      	add	r3, r5
 800c276:	6023      	str	r3, [r4, #0]
 800c278:	e00e      	b.n	800c298 <_malloc_r+0xa0>
 800c27a:	6822      	ldr	r2, [r4, #0]
 800c27c:	1b52      	subs	r2, r2, r5
 800c27e:	d41e      	bmi.n	800c2be <_malloc_r+0xc6>
 800c280:	2a0b      	cmp	r2, #11
 800c282:	d916      	bls.n	800c2b2 <_malloc_r+0xba>
 800c284:	1961      	adds	r1, r4, r5
 800c286:	42a3      	cmp	r3, r4
 800c288:	6025      	str	r5, [r4, #0]
 800c28a:	bf18      	it	ne
 800c28c:	6059      	strne	r1, [r3, #4]
 800c28e:	6863      	ldr	r3, [r4, #4]
 800c290:	bf08      	it	eq
 800c292:	6031      	streq	r1, [r6, #0]
 800c294:	5162      	str	r2, [r4, r5]
 800c296:	604b      	str	r3, [r1, #4]
 800c298:	4638      	mov	r0, r7
 800c29a:	f104 060b 	add.w	r6, r4, #11
 800c29e:	f003 f8af 	bl	800f400 <__malloc_unlock>
 800c2a2:	f026 0607 	bic.w	r6, r6, #7
 800c2a6:	1d23      	adds	r3, r4, #4
 800c2a8:	1af2      	subs	r2, r6, r3
 800c2aa:	d0b6      	beq.n	800c21a <_malloc_r+0x22>
 800c2ac:	1b9b      	subs	r3, r3, r6
 800c2ae:	50a3      	str	r3, [r4, r2]
 800c2b0:	e7b3      	b.n	800c21a <_malloc_r+0x22>
 800c2b2:	6862      	ldr	r2, [r4, #4]
 800c2b4:	42a3      	cmp	r3, r4
 800c2b6:	bf0c      	ite	eq
 800c2b8:	6032      	streq	r2, [r6, #0]
 800c2ba:	605a      	strne	r2, [r3, #4]
 800c2bc:	e7ec      	b.n	800c298 <_malloc_r+0xa0>
 800c2be:	4623      	mov	r3, r4
 800c2c0:	6864      	ldr	r4, [r4, #4]
 800c2c2:	e7b2      	b.n	800c22a <_malloc_r+0x32>
 800c2c4:	4634      	mov	r4, r6
 800c2c6:	6876      	ldr	r6, [r6, #4]
 800c2c8:	e7b9      	b.n	800c23e <_malloc_r+0x46>
 800c2ca:	230c      	movs	r3, #12
 800c2cc:	603b      	str	r3, [r7, #0]
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	f003 f896 	bl	800f400 <__malloc_unlock>
 800c2d4:	e7a1      	b.n	800c21a <_malloc_r+0x22>
 800c2d6:	6025      	str	r5, [r4, #0]
 800c2d8:	e7de      	b.n	800c298 <_malloc_r+0xa0>
 800c2da:	bf00      	nop
 800c2dc:	200037b8 	.word	0x200037b8

0800c2e0 <__sfputc_r>:
 800c2e0:	6893      	ldr	r3, [r2, #8]
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	b410      	push	{r4}
 800c2e8:	6093      	str	r3, [r2, #8]
 800c2ea:	da08      	bge.n	800c2fe <__sfputc_r+0x1e>
 800c2ec:	6994      	ldr	r4, [r2, #24]
 800c2ee:	42a3      	cmp	r3, r4
 800c2f0:	db01      	blt.n	800c2f6 <__sfputc_r+0x16>
 800c2f2:	290a      	cmp	r1, #10
 800c2f4:	d103      	bne.n	800c2fe <__sfputc_r+0x1e>
 800c2f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2fa:	f001 be5f 	b.w	800dfbc <__swbuf_r>
 800c2fe:	6813      	ldr	r3, [r2, #0]
 800c300:	1c58      	adds	r0, r3, #1
 800c302:	6010      	str	r0, [r2, #0]
 800c304:	7019      	strb	r1, [r3, #0]
 800c306:	4608      	mov	r0, r1
 800c308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <__sfputs_r>:
 800c30e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c310:	4606      	mov	r6, r0
 800c312:	460f      	mov	r7, r1
 800c314:	4614      	mov	r4, r2
 800c316:	18d5      	adds	r5, r2, r3
 800c318:	42ac      	cmp	r4, r5
 800c31a:	d101      	bne.n	800c320 <__sfputs_r+0x12>
 800c31c:	2000      	movs	r0, #0
 800c31e:	e007      	b.n	800c330 <__sfputs_r+0x22>
 800c320:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c324:	463a      	mov	r2, r7
 800c326:	4630      	mov	r0, r6
 800c328:	f7ff ffda 	bl	800c2e0 <__sfputc_r>
 800c32c:	1c43      	adds	r3, r0, #1
 800c32e:	d1f3      	bne.n	800c318 <__sfputs_r+0xa>
 800c330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c334 <_vfiprintf_r>:
 800c334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c338:	460d      	mov	r5, r1
 800c33a:	b09d      	sub	sp, #116	; 0x74
 800c33c:	4614      	mov	r4, r2
 800c33e:	4698      	mov	r8, r3
 800c340:	4606      	mov	r6, r0
 800c342:	b118      	cbz	r0, 800c34c <_vfiprintf_r+0x18>
 800c344:	6983      	ldr	r3, [r0, #24]
 800c346:	b90b      	cbnz	r3, 800c34c <_vfiprintf_r+0x18>
 800c348:	f002 fece 	bl	800f0e8 <__sinit>
 800c34c:	4b89      	ldr	r3, [pc, #548]	; (800c574 <_vfiprintf_r+0x240>)
 800c34e:	429d      	cmp	r5, r3
 800c350:	d11b      	bne.n	800c38a <_vfiprintf_r+0x56>
 800c352:	6875      	ldr	r5, [r6, #4]
 800c354:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c356:	07d9      	lsls	r1, r3, #31
 800c358:	d405      	bmi.n	800c366 <_vfiprintf_r+0x32>
 800c35a:	89ab      	ldrh	r3, [r5, #12]
 800c35c:	059a      	lsls	r2, r3, #22
 800c35e:	d402      	bmi.n	800c366 <_vfiprintf_r+0x32>
 800c360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c362:	f002 ffb1 	bl	800f2c8 <__retarget_lock_acquire_recursive>
 800c366:	89ab      	ldrh	r3, [r5, #12]
 800c368:	071b      	lsls	r3, r3, #28
 800c36a:	d501      	bpl.n	800c370 <_vfiprintf_r+0x3c>
 800c36c:	692b      	ldr	r3, [r5, #16]
 800c36e:	b9eb      	cbnz	r3, 800c3ac <_vfiprintf_r+0x78>
 800c370:	4629      	mov	r1, r5
 800c372:	4630      	mov	r0, r6
 800c374:	f001 fe86 	bl	800e084 <__swsetup_r>
 800c378:	b1c0      	cbz	r0, 800c3ac <_vfiprintf_r+0x78>
 800c37a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c37c:	07dc      	lsls	r4, r3, #31
 800c37e:	d50e      	bpl.n	800c39e <_vfiprintf_r+0x6a>
 800c380:	f04f 30ff 	mov.w	r0, #4294967295
 800c384:	b01d      	add	sp, #116	; 0x74
 800c386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38a:	4b7b      	ldr	r3, [pc, #492]	; (800c578 <_vfiprintf_r+0x244>)
 800c38c:	429d      	cmp	r5, r3
 800c38e:	d101      	bne.n	800c394 <_vfiprintf_r+0x60>
 800c390:	68b5      	ldr	r5, [r6, #8]
 800c392:	e7df      	b.n	800c354 <_vfiprintf_r+0x20>
 800c394:	4b79      	ldr	r3, [pc, #484]	; (800c57c <_vfiprintf_r+0x248>)
 800c396:	429d      	cmp	r5, r3
 800c398:	bf08      	it	eq
 800c39a:	68f5      	ldreq	r5, [r6, #12]
 800c39c:	e7da      	b.n	800c354 <_vfiprintf_r+0x20>
 800c39e:	89ab      	ldrh	r3, [r5, #12]
 800c3a0:	0598      	lsls	r0, r3, #22
 800c3a2:	d4ed      	bmi.n	800c380 <_vfiprintf_r+0x4c>
 800c3a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3a6:	f002 ff91 	bl	800f2cc <__retarget_lock_release_recursive>
 800c3aa:	e7e9      	b.n	800c380 <_vfiprintf_r+0x4c>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c3b0:	2320      	movs	r3, #32
 800c3b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3ba:	2330      	movs	r3, #48	; 0x30
 800c3bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c580 <_vfiprintf_r+0x24c>
 800c3c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3c4:	f04f 0901 	mov.w	r9, #1
 800c3c8:	4623      	mov	r3, r4
 800c3ca:	469a      	mov	sl, r3
 800c3cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3d0:	b10a      	cbz	r2, 800c3d6 <_vfiprintf_r+0xa2>
 800c3d2:	2a25      	cmp	r2, #37	; 0x25
 800c3d4:	d1f9      	bne.n	800c3ca <_vfiprintf_r+0x96>
 800c3d6:	ebba 0b04 	subs.w	fp, sl, r4
 800c3da:	d00b      	beq.n	800c3f4 <_vfiprintf_r+0xc0>
 800c3dc:	465b      	mov	r3, fp
 800c3de:	4622      	mov	r2, r4
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	f7ff ff93 	bl	800c30e <__sfputs_r>
 800c3e8:	3001      	adds	r0, #1
 800c3ea:	f000 80aa 	beq.w	800c542 <_vfiprintf_r+0x20e>
 800c3ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3f0:	445a      	add	r2, fp
 800c3f2:	9209      	str	r2, [sp, #36]	; 0x24
 800c3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f000 80a2 	beq.w	800c542 <_vfiprintf_r+0x20e>
 800c3fe:	2300      	movs	r3, #0
 800c400:	f04f 32ff 	mov.w	r2, #4294967295
 800c404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c408:	f10a 0a01 	add.w	sl, sl, #1
 800c40c:	9304      	str	r3, [sp, #16]
 800c40e:	9307      	str	r3, [sp, #28]
 800c410:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c414:	931a      	str	r3, [sp, #104]	; 0x68
 800c416:	4654      	mov	r4, sl
 800c418:	2205      	movs	r2, #5
 800c41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c41e:	4858      	ldr	r0, [pc, #352]	; (800c580 <_vfiprintf_r+0x24c>)
 800c420:	f7f3 feee 	bl	8000200 <memchr>
 800c424:	9a04      	ldr	r2, [sp, #16]
 800c426:	b9d8      	cbnz	r0, 800c460 <_vfiprintf_r+0x12c>
 800c428:	06d1      	lsls	r1, r2, #27
 800c42a:	bf44      	itt	mi
 800c42c:	2320      	movmi	r3, #32
 800c42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c432:	0713      	lsls	r3, r2, #28
 800c434:	bf44      	itt	mi
 800c436:	232b      	movmi	r3, #43	; 0x2b
 800c438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c43c:	f89a 3000 	ldrb.w	r3, [sl]
 800c440:	2b2a      	cmp	r3, #42	; 0x2a
 800c442:	d015      	beq.n	800c470 <_vfiprintf_r+0x13c>
 800c444:	9a07      	ldr	r2, [sp, #28]
 800c446:	4654      	mov	r4, sl
 800c448:	2000      	movs	r0, #0
 800c44a:	f04f 0c0a 	mov.w	ip, #10
 800c44e:	4621      	mov	r1, r4
 800c450:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c454:	3b30      	subs	r3, #48	; 0x30
 800c456:	2b09      	cmp	r3, #9
 800c458:	d94e      	bls.n	800c4f8 <_vfiprintf_r+0x1c4>
 800c45a:	b1b0      	cbz	r0, 800c48a <_vfiprintf_r+0x156>
 800c45c:	9207      	str	r2, [sp, #28]
 800c45e:	e014      	b.n	800c48a <_vfiprintf_r+0x156>
 800c460:	eba0 0308 	sub.w	r3, r0, r8
 800c464:	fa09 f303 	lsl.w	r3, r9, r3
 800c468:	4313      	orrs	r3, r2
 800c46a:	9304      	str	r3, [sp, #16]
 800c46c:	46a2      	mov	sl, r4
 800c46e:	e7d2      	b.n	800c416 <_vfiprintf_r+0xe2>
 800c470:	9b03      	ldr	r3, [sp, #12]
 800c472:	1d19      	adds	r1, r3, #4
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	9103      	str	r1, [sp, #12]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	bfbb      	ittet	lt
 800c47c:	425b      	neglt	r3, r3
 800c47e:	f042 0202 	orrlt.w	r2, r2, #2
 800c482:	9307      	strge	r3, [sp, #28]
 800c484:	9307      	strlt	r3, [sp, #28]
 800c486:	bfb8      	it	lt
 800c488:	9204      	strlt	r2, [sp, #16]
 800c48a:	7823      	ldrb	r3, [r4, #0]
 800c48c:	2b2e      	cmp	r3, #46	; 0x2e
 800c48e:	d10c      	bne.n	800c4aa <_vfiprintf_r+0x176>
 800c490:	7863      	ldrb	r3, [r4, #1]
 800c492:	2b2a      	cmp	r3, #42	; 0x2a
 800c494:	d135      	bne.n	800c502 <_vfiprintf_r+0x1ce>
 800c496:	9b03      	ldr	r3, [sp, #12]
 800c498:	1d1a      	adds	r2, r3, #4
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	9203      	str	r2, [sp, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	bfb8      	it	lt
 800c4a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4a6:	3402      	adds	r4, #2
 800c4a8:	9305      	str	r3, [sp, #20]
 800c4aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c590 <_vfiprintf_r+0x25c>
 800c4ae:	7821      	ldrb	r1, [r4, #0]
 800c4b0:	2203      	movs	r2, #3
 800c4b2:	4650      	mov	r0, sl
 800c4b4:	f7f3 fea4 	bl	8000200 <memchr>
 800c4b8:	b140      	cbz	r0, 800c4cc <_vfiprintf_r+0x198>
 800c4ba:	2340      	movs	r3, #64	; 0x40
 800c4bc:	eba0 000a 	sub.w	r0, r0, sl
 800c4c0:	fa03 f000 	lsl.w	r0, r3, r0
 800c4c4:	9b04      	ldr	r3, [sp, #16]
 800c4c6:	4303      	orrs	r3, r0
 800c4c8:	3401      	adds	r4, #1
 800c4ca:	9304      	str	r3, [sp, #16]
 800c4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4d0:	482c      	ldr	r0, [pc, #176]	; (800c584 <_vfiprintf_r+0x250>)
 800c4d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4d6:	2206      	movs	r2, #6
 800c4d8:	f7f3 fe92 	bl	8000200 <memchr>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	d03f      	beq.n	800c560 <_vfiprintf_r+0x22c>
 800c4e0:	4b29      	ldr	r3, [pc, #164]	; (800c588 <_vfiprintf_r+0x254>)
 800c4e2:	bb1b      	cbnz	r3, 800c52c <_vfiprintf_r+0x1f8>
 800c4e4:	9b03      	ldr	r3, [sp, #12]
 800c4e6:	3307      	adds	r3, #7
 800c4e8:	f023 0307 	bic.w	r3, r3, #7
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	9303      	str	r3, [sp, #12]
 800c4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f2:	443b      	add	r3, r7
 800c4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c4f6:	e767      	b.n	800c3c8 <_vfiprintf_r+0x94>
 800c4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4fc:	460c      	mov	r4, r1
 800c4fe:	2001      	movs	r0, #1
 800c500:	e7a5      	b.n	800c44e <_vfiprintf_r+0x11a>
 800c502:	2300      	movs	r3, #0
 800c504:	3401      	adds	r4, #1
 800c506:	9305      	str	r3, [sp, #20]
 800c508:	4619      	mov	r1, r3
 800c50a:	f04f 0c0a 	mov.w	ip, #10
 800c50e:	4620      	mov	r0, r4
 800c510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c514:	3a30      	subs	r2, #48	; 0x30
 800c516:	2a09      	cmp	r2, #9
 800c518:	d903      	bls.n	800c522 <_vfiprintf_r+0x1ee>
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d0c5      	beq.n	800c4aa <_vfiprintf_r+0x176>
 800c51e:	9105      	str	r1, [sp, #20]
 800c520:	e7c3      	b.n	800c4aa <_vfiprintf_r+0x176>
 800c522:	fb0c 2101 	mla	r1, ip, r1, r2
 800c526:	4604      	mov	r4, r0
 800c528:	2301      	movs	r3, #1
 800c52a:	e7f0      	b.n	800c50e <_vfiprintf_r+0x1da>
 800c52c:	ab03      	add	r3, sp, #12
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	462a      	mov	r2, r5
 800c532:	4b16      	ldr	r3, [pc, #88]	; (800c58c <_vfiprintf_r+0x258>)
 800c534:	a904      	add	r1, sp, #16
 800c536:	4630      	mov	r0, r6
 800c538:	f000 f8cc 	bl	800c6d4 <_printf_float>
 800c53c:	4607      	mov	r7, r0
 800c53e:	1c78      	adds	r0, r7, #1
 800c540:	d1d6      	bne.n	800c4f0 <_vfiprintf_r+0x1bc>
 800c542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c544:	07d9      	lsls	r1, r3, #31
 800c546:	d405      	bmi.n	800c554 <_vfiprintf_r+0x220>
 800c548:	89ab      	ldrh	r3, [r5, #12]
 800c54a:	059a      	lsls	r2, r3, #22
 800c54c:	d402      	bmi.n	800c554 <_vfiprintf_r+0x220>
 800c54e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c550:	f002 febc 	bl	800f2cc <__retarget_lock_release_recursive>
 800c554:	89ab      	ldrh	r3, [r5, #12]
 800c556:	065b      	lsls	r3, r3, #25
 800c558:	f53f af12 	bmi.w	800c380 <_vfiprintf_r+0x4c>
 800c55c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c55e:	e711      	b.n	800c384 <_vfiprintf_r+0x50>
 800c560:	ab03      	add	r3, sp, #12
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	462a      	mov	r2, r5
 800c566:	4b09      	ldr	r3, [pc, #36]	; (800c58c <_vfiprintf_r+0x258>)
 800c568:	a904      	add	r1, sp, #16
 800c56a:	4630      	mov	r0, r6
 800c56c:	f000 fb56 	bl	800cc1c <_printf_i>
 800c570:	e7e4      	b.n	800c53c <_vfiprintf_r+0x208>
 800c572:	bf00      	nop
 800c574:	0803d5e4 	.word	0x0803d5e4
 800c578:	0803d604 	.word	0x0803d604
 800c57c:	0803d5c4 	.word	0x0803d5c4
 800c580:	0803d148 	.word	0x0803d148
 800c584:	0803d152 	.word	0x0803d152
 800c588:	0800c6d5 	.word	0x0800c6d5
 800c58c:	0800c30f 	.word	0x0800c30f
 800c590:	0803d14e 	.word	0x0803d14e

0800c594 <__cvt>:
 800c594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c598:	ec55 4b10 	vmov	r4, r5, d0
 800c59c:	2d00      	cmp	r5, #0
 800c59e:	460e      	mov	r6, r1
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	462b      	mov	r3, r5
 800c5a4:	bfbb      	ittet	lt
 800c5a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c5aa:	461d      	movlt	r5, r3
 800c5ac:	2300      	movge	r3, #0
 800c5ae:	232d      	movlt	r3, #45	; 0x2d
 800c5b0:	700b      	strb	r3, [r1, #0]
 800c5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c5b8:	4691      	mov	r9, r2
 800c5ba:	f023 0820 	bic.w	r8, r3, #32
 800c5be:	bfbc      	itt	lt
 800c5c0:	4622      	movlt	r2, r4
 800c5c2:	4614      	movlt	r4, r2
 800c5c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c5c8:	d005      	beq.n	800c5d6 <__cvt+0x42>
 800c5ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c5ce:	d100      	bne.n	800c5d2 <__cvt+0x3e>
 800c5d0:	3601      	adds	r6, #1
 800c5d2:	2102      	movs	r1, #2
 800c5d4:	e000      	b.n	800c5d8 <__cvt+0x44>
 800c5d6:	2103      	movs	r1, #3
 800c5d8:	ab03      	add	r3, sp, #12
 800c5da:	9301      	str	r3, [sp, #4]
 800c5dc:	ab02      	add	r3, sp, #8
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	ec45 4b10 	vmov	d0, r4, r5
 800c5e4:	4653      	mov	r3, sl
 800c5e6:	4632      	mov	r2, r6
 800c5e8:	f001 fe76 	bl	800e2d8 <_dtoa_r>
 800c5ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c5f0:	4607      	mov	r7, r0
 800c5f2:	d102      	bne.n	800c5fa <__cvt+0x66>
 800c5f4:	f019 0f01 	tst.w	r9, #1
 800c5f8:	d022      	beq.n	800c640 <__cvt+0xac>
 800c5fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c5fe:	eb07 0906 	add.w	r9, r7, r6
 800c602:	d110      	bne.n	800c626 <__cvt+0x92>
 800c604:	783b      	ldrb	r3, [r7, #0]
 800c606:	2b30      	cmp	r3, #48	; 0x30
 800c608:	d10a      	bne.n	800c620 <__cvt+0x8c>
 800c60a:	2200      	movs	r2, #0
 800c60c:	2300      	movs	r3, #0
 800c60e:	4620      	mov	r0, r4
 800c610:	4629      	mov	r1, r5
 800c612:	f7f4 fa73 	bl	8000afc <__aeabi_dcmpeq>
 800c616:	b918      	cbnz	r0, 800c620 <__cvt+0x8c>
 800c618:	f1c6 0601 	rsb	r6, r6, #1
 800c61c:	f8ca 6000 	str.w	r6, [sl]
 800c620:	f8da 3000 	ldr.w	r3, [sl]
 800c624:	4499      	add	r9, r3
 800c626:	2200      	movs	r2, #0
 800c628:	2300      	movs	r3, #0
 800c62a:	4620      	mov	r0, r4
 800c62c:	4629      	mov	r1, r5
 800c62e:	f7f4 fa65 	bl	8000afc <__aeabi_dcmpeq>
 800c632:	b108      	cbz	r0, 800c638 <__cvt+0xa4>
 800c634:	f8cd 900c 	str.w	r9, [sp, #12]
 800c638:	2230      	movs	r2, #48	; 0x30
 800c63a:	9b03      	ldr	r3, [sp, #12]
 800c63c:	454b      	cmp	r3, r9
 800c63e:	d307      	bcc.n	800c650 <__cvt+0xbc>
 800c640:	9b03      	ldr	r3, [sp, #12]
 800c642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c644:	1bdb      	subs	r3, r3, r7
 800c646:	4638      	mov	r0, r7
 800c648:	6013      	str	r3, [r2, #0]
 800c64a:	b004      	add	sp, #16
 800c64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c650:	1c59      	adds	r1, r3, #1
 800c652:	9103      	str	r1, [sp, #12]
 800c654:	701a      	strb	r2, [r3, #0]
 800c656:	e7f0      	b.n	800c63a <__cvt+0xa6>

0800c658 <__exponent>:
 800c658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c65a:	4603      	mov	r3, r0
 800c65c:	2900      	cmp	r1, #0
 800c65e:	bfb8      	it	lt
 800c660:	4249      	neglt	r1, r1
 800c662:	f803 2b02 	strb.w	r2, [r3], #2
 800c666:	bfb4      	ite	lt
 800c668:	222d      	movlt	r2, #45	; 0x2d
 800c66a:	222b      	movge	r2, #43	; 0x2b
 800c66c:	2909      	cmp	r1, #9
 800c66e:	7042      	strb	r2, [r0, #1]
 800c670:	dd2a      	ble.n	800c6c8 <__exponent+0x70>
 800c672:	f10d 0407 	add.w	r4, sp, #7
 800c676:	46a4      	mov	ip, r4
 800c678:	270a      	movs	r7, #10
 800c67a:	46a6      	mov	lr, r4
 800c67c:	460a      	mov	r2, r1
 800c67e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c682:	fb07 1516 	mls	r5, r7, r6, r1
 800c686:	3530      	adds	r5, #48	; 0x30
 800c688:	2a63      	cmp	r2, #99	; 0x63
 800c68a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c68e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c692:	4631      	mov	r1, r6
 800c694:	dcf1      	bgt.n	800c67a <__exponent+0x22>
 800c696:	3130      	adds	r1, #48	; 0x30
 800c698:	f1ae 0502 	sub.w	r5, lr, #2
 800c69c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c6a0:	1c44      	adds	r4, r0, #1
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	4561      	cmp	r1, ip
 800c6a6:	d30a      	bcc.n	800c6be <__exponent+0x66>
 800c6a8:	f10d 0209 	add.w	r2, sp, #9
 800c6ac:	eba2 020e 	sub.w	r2, r2, lr
 800c6b0:	4565      	cmp	r5, ip
 800c6b2:	bf88      	it	hi
 800c6b4:	2200      	movhi	r2, #0
 800c6b6:	4413      	add	r3, r2
 800c6b8:	1a18      	subs	r0, r3, r0
 800c6ba:	b003      	add	sp, #12
 800c6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c6c6:	e7ed      	b.n	800c6a4 <__exponent+0x4c>
 800c6c8:	2330      	movs	r3, #48	; 0x30
 800c6ca:	3130      	adds	r1, #48	; 0x30
 800c6cc:	7083      	strb	r3, [r0, #2]
 800c6ce:	70c1      	strb	r1, [r0, #3]
 800c6d0:	1d03      	adds	r3, r0, #4
 800c6d2:	e7f1      	b.n	800c6b8 <__exponent+0x60>

0800c6d4 <_printf_float>:
 800c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d8:	ed2d 8b02 	vpush	{d8}
 800c6dc:	b08d      	sub	sp, #52	; 0x34
 800c6de:	460c      	mov	r4, r1
 800c6e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c6e4:	4616      	mov	r6, r2
 800c6e6:	461f      	mov	r7, r3
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	f002 fde7 	bl	800f2bc <_localeconv_r>
 800c6ee:	f8d0 a000 	ldr.w	sl, [r0]
 800c6f2:	4650      	mov	r0, sl
 800c6f4:	f7f3 fd7c 	bl	80001f0 <strlen>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	930a      	str	r3, [sp, #40]	; 0x28
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	9305      	str	r3, [sp, #20]
 800c700:	f8d8 3000 	ldr.w	r3, [r8]
 800c704:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c708:	3307      	adds	r3, #7
 800c70a:	f023 0307 	bic.w	r3, r3, #7
 800c70e:	f103 0208 	add.w	r2, r3, #8
 800c712:	f8c8 2000 	str.w	r2, [r8]
 800c716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c71e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c722:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c726:	9307      	str	r3, [sp, #28]
 800c728:	f8cd 8018 	str.w	r8, [sp, #24]
 800c72c:	ee08 0a10 	vmov	s16, r0
 800c730:	4b9f      	ldr	r3, [pc, #636]	; (800c9b0 <_printf_float+0x2dc>)
 800c732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c736:	f04f 32ff 	mov.w	r2, #4294967295
 800c73a:	f7f4 fa11 	bl	8000b60 <__aeabi_dcmpun>
 800c73e:	bb88      	cbnz	r0, 800c7a4 <_printf_float+0xd0>
 800c740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c744:	4b9a      	ldr	r3, [pc, #616]	; (800c9b0 <_printf_float+0x2dc>)
 800c746:	f04f 32ff 	mov.w	r2, #4294967295
 800c74a:	f7f4 f9eb 	bl	8000b24 <__aeabi_dcmple>
 800c74e:	bb48      	cbnz	r0, 800c7a4 <_printf_float+0xd0>
 800c750:	2200      	movs	r2, #0
 800c752:	2300      	movs	r3, #0
 800c754:	4640      	mov	r0, r8
 800c756:	4649      	mov	r1, r9
 800c758:	f7f4 f9da 	bl	8000b10 <__aeabi_dcmplt>
 800c75c:	b110      	cbz	r0, 800c764 <_printf_float+0x90>
 800c75e:	232d      	movs	r3, #45	; 0x2d
 800c760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c764:	4b93      	ldr	r3, [pc, #588]	; (800c9b4 <_printf_float+0x2e0>)
 800c766:	4894      	ldr	r0, [pc, #592]	; (800c9b8 <_printf_float+0x2e4>)
 800c768:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c76c:	bf94      	ite	ls
 800c76e:	4698      	movls	r8, r3
 800c770:	4680      	movhi	r8, r0
 800c772:	2303      	movs	r3, #3
 800c774:	6123      	str	r3, [r4, #16]
 800c776:	9b05      	ldr	r3, [sp, #20]
 800c778:	f023 0204 	bic.w	r2, r3, #4
 800c77c:	6022      	str	r2, [r4, #0]
 800c77e:	f04f 0900 	mov.w	r9, #0
 800c782:	9700      	str	r7, [sp, #0]
 800c784:	4633      	mov	r3, r6
 800c786:	aa0b      	add	r2, sp, #44	; 0x2c
 800c788:	4621      	mov	r1, r4
 800c78a:	4628      	mov	r0, r5
 800c78c:	f000 f9d8 	bl	800cb40 <_printf_common>
 800c790:	3001      	adds	r0, #1
 800c792:	f040 8090 	bne.w	800c8b6 <_printf_float+0x1e2>
 800c796:	f04f 30ff 	mov.w	r0, #4294967295
 800c79a:	b00d      	add	sp, #52	; 0x34
 800c79c:	ecbd 8b02 	vpop	{d8}
 800c7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a4:	4642      	mov	r2, r8
 800c7a6:	464b      	mov	r3, r9
 800c7a8:	4640      	mov	r0, r8
 800c7aa:	4649      	mov	r1, r9
 800c7ac:	f7f4 f9d8 	bl	8000b60 <__aeabi_dcmpun>
 800c7b0:	b140      	cbz	r0, 800c7c4 <_printf_float+0xf0>
 800c7b2:	464b      	mov	r3, r9
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	bfbc      	itt	lt
 800c7b8:	232d      	movlt	r3, #45	; 0x2d
 800c7ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c7be:	487f      	ldr	r0, [pc, #508]	; (800c9bc <_printf_float+0x2e8>)
 800c7c0:	4b7f      	ldr	r3, [pc, #508]	; (800c9c0 <_printf_float+0x2ec>)
 800c7c2:	e7d1      	b.n	800c768 <_printf_float+0x94>
 800c7c4:	6863      	ldr	r3, [r4, #4]
 800c7c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c7ca:	9206      	str	r2, [sp, #24]
 800c7cc:	1c5a      	adds	r2, r3, #1
 800c7ce:	d13f      	bne.n	800c850 <_printf_float+0x17c>
 800c7d0:	2306      	movs	r3, #6
 800c7d2:	6063      	str	r3, [r4, #4]
 800c7d4:	9b05      	ldr	r3, [sp, #20]
 800c7d6:	6861      	ldr	r1, [r4, #4]
 800c7d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c7dc:	2300      	movs	r3, #0
 800c7de:	9303      	str	r3, [sp, #12]
 800c7e0:	ab0a      	add	r3, sp, #40	; 0x28
 800c7e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c7e6:	ab09      	add	r3, sp, #36	; 0x24
 800c7e8:	ec49 8b10 	vmov	d0, r8, r9
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	6022      	str	r2, [r4, #0]
 800c7f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	f7ff fecd 	bl	800c594 <__cvt>
 800c7fa:	9b06      	ldr	r3, [sp, #24]
 800c7fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7fe:	2b47      	cmp	r3, #71	; 0x47
 800c800:	4680      	mov	r8, r0
 800c802:	d108      	bne.n	800c816 <_printf_float+0x142>
 800c804:	1cc8      	adds	r0, r1, #3
 800c806:	db02      	blt.n	800c80e <_printf_float+0x13a>
 800c808:	6863      	ldr	r3, [r4, #4]
 800c80a:	4299      	cmp	r1, r3
 800c80c:	dd41      	ble.n	800c892 <_printf_float+0x1be>
 800c80e:	f1ab 0b02 	sub.w	fp, fp, #2
 800c812:	fa5f fb8b 	uxtb.w	fp, fp
 800c816:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c81a:	d820      	bhi.n	800c85e <_printf_float+0x18a>
 800c81c:	3901      	subs	r1, #1
 800c81e:	465a      	mov	r2, fp
 800c820:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c824:	9109      	str	r1, [sp, #36]	; 0x24
 800c826:	f7ff ff17 	bl	800c658 <__exponent>
 800c82a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c82c:	1813      	adds	r3, r2, r0
 800c82e:	2a01      	cmp	r2, #1
 800c830:	4681      	mov	r9, r0
 800c832:	6123      	str	r3, [r4, #16]
 800c834:	dc02      	bgt.n	800c83c <_printf_float+0x168>
 800c836:	6822      	ldr	r2, [r4, #0]
 800c838:	07d2      	lsls	r2, r2, #31
 800c83a:	d501      	bpl.n	800c840 <_printf_float+0x16c>
 800c83c:	3301      	adds	r3, #1
 800c83e:	6123      	str	r3, [r4, #16]
 800c840:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c844:	2b00      	cmp	r3, #0
 800c846:	d09c      	beq.n	800c782 <_printf_float+0xae>
 800c848:	232d      	movs	r3, #45	; 0x2d
 800c84a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c84e:	e798      	b.n	800c782 <_printf_float+0xae>
 800c850:	9a06      	ldr	r2, [sp, #24]
 800c852:	2a47      	cmp	r2, #71	; 0x47
 800c854:	d1be      	bne.n	800c7d4 <_printf_float+0x100>
 800c856:	2b00      	cmp	r3, #0
 800c858:	d1bc      	bne.n	800c7d4 <_printf_float+0x100>
 800c85a:	2301      	movs	r3, #1
 800c85c:	e7b9      	b.n	800c7d2 <_printf_float+0xfe>
 800c85e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c862:	d118      	bne.n	800c896 <_printf_float+0x1c2>
 800c864:	2900      	cmp	r1, #0
 800c866:	6863      	ldr	r3, [r4, #4]
 800c868:	dd0b      	ble.n	800c882 <_printf_float+0x1ae>
 800c86a:	6121      	str	r1, [r4, #16]
 800c86c:	b913      	cbnz	r3, 800c874 <_printf_float+0x1a0>
 800c86e:	6822      	ldr	r2, [r4, #0]
 800c870:	07d0      	lsls	r0, r2, #31
 800c872:	d502      	bpl.n	800c87a <_printf_float+0x1a6>
 800c874:	3301      	adds	r3, #1
 800c876:	440b      	add	r3, r1
 800c878:	6123      	str	r3, [r4, #16]
 800c87a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c87c:	f04f 0900 	mov.w	r9, #0
 800c880:	e7de      	b.n	800c840 <_printf_float+0x16c>
 800c882:	b913      	cbnz	r3, 800c88a <_printf_float+0x1b6>
 800c884:	6822      	ldr	r2, [r4, #0]
 800c886:	07d2      	lsls	r2, r2, #31
 800c888:	d501      	bpl.n	800c88e <_printf_float+0x1ba>
 800c88a:	3302      	adds	r3, #2
 800c88c:	e7f4      	b.n	800c878 <_printf_float+0x1a4>
 800c88e:	2301      	movs	r3, #1
 800c890:	e7f2      	b.n	800c878 <_printf_float+0x1a4>
 800c892:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c898:	4299      	cmp	r1, r3
 800c89a:	db05      	blt.n	800c8a8 <_printf_float+0x1d4>
 800c89c:	6823      	ldr	r3, [r4, #0]
 800c89e:	6121      	str	r1, [r4, #16]
 800c8a0:	07d8      	lsls	r0, r3, #31
 800c8a2:	d5ea      	bpl.n	800c87a <_printf_float+0x1a6>
 800c8a4:	1c4b      	adds	r3, r1, #1
 800c8a6:	e7e7      	b.n	800c878 <_printf_float+0x1a4>
 800c8a8:	2900      	cmp	r1, #0
 800c8aa:	bfd4      	ite	le
 800c8ac:	f1c1 0202 	rsble	r2, r1, #2
 800c8b0:	2201      	movgt	r2, #1
 800c8b2:	4413      	add	r3, r2
 800c8b4:	e7e0      	b.n	800c878 <_printf_float+0x1a4>
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	055a      	lsls	r2, r3, #21
 800c8ba:	d407      	bmi.n	800c8cc <_printf_float+0x1f8>
 800c8bc:	6923      	ldr	r3, [r4, #16]
 800c8be:	4642      	mov	r2, r8
 800c8c0:	4631      	mov	r1, r6
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	47b8      	blx	r7
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	d12c      	bne.n	800c924 <_printf_float+0x250>
 800c8ca:	e764      	b.n	800c796 <_printf_float+0xc2>
 800c8cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c8d0:	f240 80e0 	bls.w	800ca94 <_printf_float+0x3c0>
 800c8d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c8d8:	2200      	movs	r2, #0
 800c8da:	2300      	movs	r3, #0
 800c8dc:	f7f4 f90e 	bl	8000afc <__aeabi_dcmpeq>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d034      	beq.n	800c94e <_printf_float+0x27a>
 800c8e4:	4a37      	ldr	r2, [pc, #220]	; (800c9c4 <_printf_float+0x2f0>)
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	47b8      	blx	r7
 800c8ee:	3001      	adds	r0, #1
 800c8f0:	f43f af51 	beq.w	800c796 <_printf_float+0xc2>
 800c8f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	db02      	blt.n	800c902 <_printf_float+0x22e>
 800c8fc:	6823      	ldr	r3, [r4, #0]
 800c8fe:	07d8      	lsls	r0, r3, #31
 800c900:	d510      	bpl.n	800c924 <_printf_float+0x250>
 800c902:	ee18 3a10 	vmov	r3, s16
 800c906:	4652      	mov	r2, sl
 800c908:	4631      	mov	r1, r6
 800c90a:	4628      	mov	r0, r5
 800c90c:	47b8      	blx	r7
 800c90e:	3001      	adds	r0, #1
 800c910:	f43f af41 	beq.w	800c796 <_printf_float+0xc2>
 800c914:	f04f 0800 	mov.w	r8, #0
 800c918:	f104 091a 	add.w	r9, r4, #26
 800c91c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c91e:	3b01      	subs	r3, #1
 800c920:	4543      	cmp	r3, r8
 800c922:	dc09      	bgt.n	800c938 <_printf_float+0x264>
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	079b      	lsls	r3, r3, #30
 800c928:	f100 8105 	bmi.w	800cb36 <_printf_float+0x462>
 800c92c:	68e0      	ldr	r0, [r4, #12]
 800c92e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c930:	4298      	cmp	r0, r3
 800c932:	bfb8      	it	lt
 800c934:	4618      	movlt	r0, r3
 800c936:	e730      	b.n	800c79a <_printf_float+0xc6>
 800c938:	2301      	movs	r3, #1
 800c93a:	464a      	mov	r2, r9
 800c93c:	4631      	mov	r1, r6
 800c93e:	4628      	mov	r0, r5
 800c940:	47b8      	blx	r7
 800c942:	3001      	adds	r0, #1
 800c944:	f43f af27 	beq.w	800c796 <_printf_float+0xc2>
 800c948:	f108 0801 	add.w	r8, r8, #1
 800c94c:	e7e6      	b.n	800c91c <_printf_float+0x248>
 800c94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c950:	2b00      	cmp	r3, #0
 800c952:	dc39      	bgt.n	800c9c8 <_printf_float+0x2f4>
 800c954:	4a1b      	ldr	r2, [pc, #108]	; (800c9c4 <_printf_float+0x2f0>)
 800c956:	2301      	movs	r3, #1
 800c958:	4631      	mov	r1, r6
 800c95a:	4628      	mov	r0, r5
 800c95c:	47b8      	blx	r7
 800c95e:	3001      	adds	r0, #1
 800c960:	f43f af19 	beq.w	800c796 <_printf_float+0xc2>
 800c964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c968:	4313      	orrs	r3, r2
 800c96a:	d102      	bne.n	800c972 <_printf_float+0x29e>
 800c96c:	6823      	ldr	r3, [r4, #0]
 800c96e:	07d9      	lsls	r1, r3, #31
 800c970:	d5d8      	bpl.n	800c924 <_printf_float+0x250>
 800c972:	ee18 3a10 	vmov	r3, s16
 800c976:	4652      	mov	r2, sl
 800c978:	4631      	mov	r1, r6
 800c97a:	4628      	mov	r0, r5
 800c97c:	47b8      	blx	r7
 800c97e:	3001      	adds	r0, #1
 800c980:	f43f af09 	beq.w	800c796 <_printf_float+0xc2>
 800c984:	f04f 0900 	mov.w	r9, #0
 800c988:	f104 0a1a 	add.w	sl, r4, #26
 800c98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c98e:	425b      	negs	r3, r3
 800c990:	454b      	cmp	r3, r9
 800c992:	dc01      	bgt.n	800c998 <_printf_float+0x2c4>
 800c994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c996:	e792      	b.n	800c8be <_printf_float+0x1ea>
 800c998:	2301      	movs	r3, #1
 800c99a:	4652      	mov	r2, sl
 800c99c:	4631      	mov	r1, r6
 800c99e:	4628      	mov	r0, r5
 800c9a0:	47b8      	blx	r7
 800c9a2:	3001      	adds	r0, #1
 800c9a4:	f43f aef7 	beq.w	800c796 <_printf_float+0xc2>
 800c9a8:	f109 0901 	add.w	r9, r9, #1
 800c9ac:	e7ee      	b.n	800c98c <_printf_float+0x2b8>
 800c9ae:	bf00      	nop
 800c9b0:	7fefffff 	.word	0x7fefffff
 800c9b4:	0803d159 	.word	0x0803d159
 800c9b8:	0803d15d 	.word	0x0803d15d
 800c9bc:	0803d165 	.word	0x0803d165
 800c9c0:	0803d161 	.word	0x0803d161
 800c9c4:	0803d7e0 	.word	0x0803d7e0
 800c9c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	bfa8      	it	ge
 800c9d0:	461a      	movge	r2, r3
 800c9d2:	2a00      	cmp	r2, #0
 800c9d4:	4691      	mov	r9, r2
 800c9d6:	dc37      	bgt.n	800ca48 <_printf_float+0x374>
 800c9d8:	f04f 0b00 	mov.w	fp, #0
 800c9dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9e0:	f104 021a 	add.w	r2, r4, #26
 800c9e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c9e6:	9305      	str	r3, [sp, #20]
 800c9e8:	eba3 0309 	sub.w	r3, r3, r9
 800c9ec:	455b      	cmp	r3, fp
 800c9ee:	dc33      	bgt.n	800ca58 <_printf_float+0x384>
 800c9f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	db3b      	blt.n	800ca70 <_printf_float+0x39c>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	07da      	lsls	r2, r3, #31
 800c9fc:	d438      	bmi.n	800ca70 <_printf_float+0x39c>
 800c9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca00:	9a05      	ldr	r2, [sp, #20]
 800ca02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca04:	1a9a      	subs	r2, r3, r2
 800ca06:	eba3 0901 	sub.w	r9, r3, r1
 800ca0a:	4591      	cmp	r9, r2
 800ca0c:	bfa8      	it	ge
 800ca0e:	4691      	movge	r9, r2
 800ca10:	f1b9 0f00 	cmp.w	r9, #0
 800ca14:	dc35      	bgt.n	800ca82 <_printf_float+0x3ae>
 800ca16:	f04f 0800 	mov.w	r8, #0
 800ca1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca1e:	f104 0a1a 	add.w	sl, r4, #26
 800ca22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca26:	1a9b      	subs	r3, r3, r2
 800ca28:	eba3 0309 	sub.w	r3, r3, r9
 800ca2c:	4543      	cmp	r3, r8
 800ca2e:	f77f af79 	ble.w	800c924 <_printf_float+0x250>
 800ca32:	2301      	movs	r3, #1
 800ca34:	4652      	mov	r2, sl
 800ca36:	4631      	mov	r1, r6
 800ca38:	4628      	mov	r0, r5
 800ca3a:	47b8      	blx	r7
 800ca3c:	3001      	adds	r0, #1
 800ca3e:	f43f aeaa 	beq.w	800c796 <_printf_float+0xc2>
 800ca42:	f108 0801 	add.w	r8, r8, #1
 800ca46:	e7ec      	b.n	800ca22 <_printf_float+0x34e>
 800ca48:	4613      	mov	r3, r2
 800ca4a:	4631      	mov	r1, r6
 800ca4c:	4642      	mov	r2, r8
 800ca4e:	4628      	mov	r0, r5
 800ca50:	47b8      	blx	r7
 800ca52:	3001      	adds	r0, #1
 800ca54:	d1c0      	bne.n	800c9d8 <_printf_float+0x304>
 800ca56:	e69e      	b.n	800c796 <_printf_float+0xc2>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	4631      	mov	r1, r6
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	9205      	str	r2, [sp, #20]
 800ca60:	47b8      	blx	r7
 800ca62:	3001      	adds	r0, #1
 800ca64:	f43f ae97 	beq.w	800c796 <_printf_float+0xc2>
 800ca68:	9a05      	ldr	r2, [sp, #20]
 800ca6a:	f10b 0b01 	add.w	fp, fp, #1
 800ca6e:	e7b9      	b.n	800c9e4 <_printf_float+0x310>
 800ca70:	ee18 3a10 	vmov	r3, s16
 800ca74:	4652      	mov	r2, sl
 800ca76:	4631      	mov	r1, r6
 800ca78:	4628      	mov	r0, r5
 800ca7a:	47b8      	blx	r7
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	d1be      	bne.n	800c9fe <_printf_float+0x32a>
 800ca80:	e689      	b.n	800c796 <_printf_float+0xc2>
 800ca82:	9a05      	ldr	r2, [sp, #20]
 800ca84:	464b      	mov	r3, r9
 800ca86:	4442      	add	r2, r8
 800ca88:	4631      	mov	r1, r6
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	47b8      	blx	r7
 800ca8e:	3001      	adds	r0, #1
 800ca90:	d1c1      	bne.n	800ca16 <_printf_float+0x342>
 800ca92:	e680      	b.n	800c796 <_printf_float+0xc2>
 800ca94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca96:	2a01      	cmp	r2, #1
 800ca98:	dc01      	bgt.n	800ca9e <_printf_float+0x3ca>
 800ca9a:	07db      	lsls	r3, r3, #31
 800ca9c:	d538      	bpl.n	800cb10 <_printf_float+0x43c>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	4642      	mov	r2, r8
 800caa2:	4631      	mov	r1, r6
 800caa4:	4628      	mov	r0, r5
 800caa6:	47b8      	blx	r7
 800caa8:	3001      	adds	r0, #1
 800caaa:	f43f ae74 	beq.w	800c796 <_printf_float+0xc2>
 800caae:	ee18 3a10 	vmov	r3, s16
 800cab2:	4652      	mov	r2, sl
 800cab4:	4631      	mov	r1, r6
 800cab6:	4628      	mov	r0, r5
 800cab8:	47b8      	blx	r7
 800caba:	3001      	adds	r0, #1
 800cabc:	f43f ae6b 	beq.w	800c796 <_printf_float+0xc2>
 800cac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cac4:	2200      	movs	r2, #0
 800cac6:	2300      	movs	r3, #0
 800cac8:	f7f4 f818 	bl	8000afc <__aeabi_dcmpeq>
 800cacc:	b9d8      	cbnz	r0, 800cb06 <_printf_float+0x432>
 800cace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cad0:	f108 0201 	add.w	r2, r8, #1
 800cad4:	3b01      	subs	r3, #1
 800cad6:	4631      	mov	r1, r6
 800cad8:	4628      	mov	r0, r5
 800cada:	47b8      	blx	r7
 800cadc:	3001      	adds	r0, #1
 800cade:	d10e      	bne.n	800cafe <_printf_float+0x42a>
 800cae0:	e659      	b.n	800c796 <_printf_float+0xc2>
 800cae2:	2301      	movs	r3, #1
 800cae4:	4652      	mov	r2, sl
 800cae6:	4631      	mov	r1, r6
 800cae8:	4628      	mov	r0, r5
 800caea:	47b8      	blx	r7
 800caec:	3001      	adds	r0, #1
 800caee:	f43f ae52 	beq.w	800c796 <_printf_float+0xc2>
 800caf2:	f108 0801 	add.w	r8, r8, #1
 800caf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caf8:	3b01      	subs	r3, #1
 800cafa:	4543      	cmp	r3, r8
 800cafc:	dcf1      	bgt.n	800cae2 <_printf_float+0x40e>
 800cafe:	464b      	mov	r3, r9
 800cb00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb04:	e6dc      	b.n	800c8c0 <_printf_float+0x1ec>
 800cb06:	f04f 0800 	mov.w	r8, #0
 800cb0a:	f104 0a1a 	add.w	sl, r4, #26
 800cb0e:	e7f2      	b.n	800caf6 <_printf_float+0x422>
 800cb10:	2301      	movs	r3, #1
 800cb12:	4642      	mov	r2, r8
 800cb14:	e7df      	b.n	800cad6 <_printf_float+0x402>
 800cb16:	2301      	movs	r3, #1
 800cb18:	464a      	mov	r2, r9
 800cb1a:	4631      	mov	r1, r6
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	47b8      	blx	r7
 800cb20:	3001      	adds	r0, #1
 800cb22:	f43f ae38 	beq.w	800c796 <_printf_float+0xc2>
 800cb26:	f108 0801 	add.w	r8, r8, #1
 800cb2a:	68e3      	ldr	r3, [r4, #12]
 800cb2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb2e:	1a5b      	subs	r3, r3, r1
 800cb30:	4543      	cmp	r3, r8
 800cb32:	dcf0      	bgt.n	800cb16 <_printf_float+0x442>
 800cb34:	e6fa      	b.n	800c92c <_printf_float+0x258>
 800cb36:	f04f 0800 	mov.w	r8, #0
 800cb3a:	f104 0919 	add.w	r9, r4, #25
 800cb3e:	e7f4      	b.n	800cb2a <_printf_float+0x456>

0800cb40 <_printf_common>:
 800cb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb44:	4616      	mov	r6, r2
 800cb46:	4699      	mov	r9, r3
 800cb48:	688a      	ldr	r2, [r1, #8]
 800cb4a:	690b      	ldr	r3, [r1, #16]
 800cb4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb50:	4293      	cmp	r3, r2
 800cb52:	bfb8      	it	lt
 800cb54:	4613      	movlt	r3, r2
 800cb56:	6033      	str	r3, [r6, #0]
 800cb58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb5c:	4607      	mov	r7, r0
 800cb5e:	460c      	mov	r4, r1
 800cb60:	b10a      	cbz	r2, 800cb66 <_printf_common+0x26>
 800cb62:	3301      	adds	r3, #1
 800cb64:	6033      	str	r3, [r6, #0]
 800cb66:	6823      	ldr	r3, [r4, #0]
 800cb68:	0699      	lsls	r1, r3, #26
 800cb6a:	bf42      	ittt	mi
 800cb6c:	6833      	ldrmi	r3, [r6, #0]
 800cb6e:	3302      	addmi	r3, #2
 800cb70:	6033      	strmi	r3, [r6, #0]
 800cb72:	6825      	ldr	r5, [r4, #0]
 800cb74:	f015 0506 	ands.w	r5, r5, #6
 800cb78:	d106      	bne.n	800cb88 <_printf_common+0x48>
 800cb7a:	f104 0a19 	add.w	sl, r4, #25
 800cb7e:	68e3      	ldr	r3, [r4, #12]
 800cb80:	6832      	ldr	r2, [r6, #0]
 800cb82:	1a9b      	subs	r3, r3, r2
 800cb84:	42ab      	cmp	r3, r5
 800cb86:	dc26      	bgt.n	800cbd6 <_printf_common+0x96>
 800cb88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb8c:	1e13      	subs	r3, r2, #0
 800cb8e:	6822      	ldr	r2, [r4, #0]
 800cb90:	bf18      	it	ne
 800cb92:	2301      	movne	r3, #1
 800cb94:	0692      	lsls	r2, r2, #26
 800cb96:	d42b      	bmi.n	800cbf0 <_printf_common+0xb0>
 800cb98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb9c:	4649      	mov	r1, r9
 800cb9e:	4638      	mov	r0, r7
 800cba0:	47c0      	blx	r8
 800cba2:	3001      	adds	r0, #1
 800cba4:	d01e      	beq.n	800cbe4 <_printf_common+0xa4>
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	68e5      	ldr	r5, [r4, #12]
 800cbaa:	6832      	ldr	r2, [r6, #0]
 800cbac:	f003 0306 	and.w	r3, r3, #6
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	bf08      	it	eq
 800cbb4:	1aad      	subeq	r5, r5, r2
 800cbb6:	68a3      	ldr	r3, [r4, #8]
 800cbb8:	6922      	ldr	r2, [r4, #16]
 800cbba:	bf0c      	ite	eq
 800cbbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbc0:	2500      	movne	r5, #0
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	bfc4      	itt	gt
 800cbc6:	1a9b      	subgt	r3, r3, r2
 800cbc8:	18ed      	addgt	r5, r5, r3
 800cbca:	2600      	movs	r6, #0
 800cbcc:	341a      	adds	r4, #26
 800cbce:	42b5      	cmp	r5, r6
 800cbd0:	d11a      	bne.n	800cc08 <_printf_common+0xc8>
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	e008      	b.n	800cbe8 <_printf_common+0xa8>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	4652      	mov	r2, sl
 800cbda:	4649      	mov	r1, r9
 800cbdc:	4638      	mov	r0, r7
 800cbde:	47c0      	blx	r8
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	d103      	bne.n	800cbec <_printf_common+0xac>
 800cbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbec:	3501      	adds	r5, #1
 800cbee:	e7c6      	b.n	800cb7e <_printf_common+0x3e>
 800cbf0:	18e1      	adds	r1, r4, r3
 800cbf2:	1c5a      	adds	r2, r3, #1
 800cbf4:	2030      	movs	r0, #48	; 0x30
 800cbf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbfa:	4422      	add	r2, r4
 800cbfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc04:	3302      	adds	r3, #2
 800cc06:	e7c7      	b.n	800cb98 <_printf_common+0x58>
 800cc08:	2301      	movs	r3, #1
 800cc0a:	4622      	mov	r2, r4
 800cc0c:	4649      	mov	r1, r9
 800cc0e:	4638      	mov	r0, r7
 800cc10:	47c0      	blx	r8
 800cc12:	3001      	adds	r0, #1
 800cc14:	d0e6      	beq.n	800cbe4 <_printf_common+0xa4>
 800cc16:	3601      	adds	r6, #1
 800cc18:	e7d9      	b.n	800cbce <_printf_common+0x8e>
	...

0800cc1c <_printf_i>:
 800cc1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc20:	7e0f      	ldrb	r7, [r1, #24]
 800cc22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc24:	2f78      	cmp	r7, #120	; 0x78
 800cc26:	4691      	mov	r9, r2
 800cc28:	4680      	mov	r8, r0
 800cc2a:	460c      	mov	r4, r1
 800cc2c:	469a      	mov	sl, r3
 800cc2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc32:	d807      	bhi.n	800cc44 <_printf_i+0x28>
 800cc34:	2f62      	cmp	r7, #98	; 0x62
 800cc36:	d80a      	bhi.n	800cc4e <_printf_i+0x32>
 800cc38:	2f00      	cmp	r7, #0
 800cc3a:	f000 80d8 	beq.w	800cdee <_printf_i+0x1d2>
 800cc3e:	2f58      	cmp	r7, #88	; 0x58
 800cc40:	f000 80a3 	beq.w	800cd8a <_printf_i+0x16e>
 800cc44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc4c:	e03a      	b.n	800ccc4 <_printf_i+0xa8>
 800cc4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc52:	2b15      	cmp	r3, #21
 800cc54:	d8f6      	bhi.n	800cc44 <_printf_i+0x28>
 800cc56:	a101      	add	r1, pc, #4	; (adr r1, 800cc5c <_printf_i+0x40>)
 800cc58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc5c:	0800ccb5 	.word	0x0800ccb5
 800cc60:	0800ccc9 	.word	0x0800ccc9
 800cc64:	0800cc45 	.word	0x0800cc45
 800cc68:	0800cc45 	.word	0x0800cc45
 800cc6c:	0800cc45 	.word	0x0800cc45
 800cc70:	0800cc45 	.word	0x0800cc45
 800cc74:	0800ccc9 	.word	0x0800ccc9
 800cc78:	0800cc45 	.word	0x0800cc45
 800cc7c:	0800cc45 	.word	0x0800cc45
 800cc80:	0800cc45 	.word	0x0800cc45
 800cc84:	0800cc45 	.word	0x0800cc45
 800cc88:	0800cdd5 	.word	0x0800cdd5
 800cc8c:	0800ccf9 	.word	0x0800ccf9
 800cc90:	0800cdb7 	.word	0x0800cdb7
 800cc94:	0800cc45 	.word	0x0800cc45
 800cc98:	0800cc45 	.word	0x0800cc45
 800cc9c:	0800cdf7 	.word	0x0800cdf7
 800cca0:	0800cc45 	.word	0x0800cc45
 800cca4:	0800ccf9 	.word	0x0800ccf9
 800cca8:	0800cc45 	.word	0x0800cc45
 800ccac:	0800cc45 	.word	0x0800cc45
 800ccb0:	0800cdbf 	.word	0x0800cdbf
 800ccb4:	682b      	ldr	r3, [r5, #0]
 800ccb6:	1d1a      	adds	r2, r3, #4
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	602a      	str	r2, [r5, #0]
 800ccbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e0a3      	b.n	800ce10 <_printf_i+0x1f4>
 800ccc8:	6820      	ldr	r0, [r4, #0]
 800ccca:	6829      	ldr	r1, [r5, #0]
 800cccc:	0606      	lsls	r6, r0, #24
 800ccce:	f101 0304 	add.w	r3, r1, #4
 800ccd2:	d50a      	bpl.n	800ccea <_printf_i+0xce>
 800ccd4:	680e      	ldr	r6, [r1, #0]
 800ccd6:	602b      	str	r3, [r5, #0]
 800ccd8:	2e00      	cmp	r6, #0
 800ccda:	da03      	bge.n	800cce4 <_printf_i+0xc8>
 800ccdc:	232d      	movs	r3, #45	; 0x2d
 800ccde:	4276      	negs	r6, r6
 800cce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cce4:	485e      	ldr	r0, [pc, #376]	; (800ce60 <_printf_i+0x244>)
 800cce6:	230a      	movs	r3, #10
 800cce8:	e019      	b.n	800cd1e <_printf_i+0x102>
 800ccea:	680e      	ldr	r6, [r1, #0]
 800ccec:	602b      	str	r3, [r5, #0]
 800ccee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ccf2:	bf18      	it	ne
 800ccf4:	b236      	sxthne	r6, r6
 800ccf6:	e7ef      	b.n	800ccd8 <_printf_i+0xbc>
 800ccf8:	682b      	ldr	r3, [r5, #0]
 800ccfa:	6820      	ldr	r0, [r4, #0]
 800ccfc:	1d19      	adds	r1, r3, #4
 800ccfe:	6029      	str	r1, [r5, #0]
 800cd00:	0601      	lsls	r1, r0, #24
 800cd02:	d501      	bpl.n	800cd08 <_printf_i+0xec>
 800cd04:	681e      	ldr	r6, [r3, #0]
 800cd06:	e002      	b.n	800cd0e <_printf_i+0xf2>
 800cd08:	0646      	lsls	r6, r0, #25
 800cd0a:	d5fb      	bpl.n	800cd04 <_printf_i+0xe8>
 800cd0c:	881e      	ldrh	r6, [r3, #0]
 800cd0e:	4854      	ldr	r0, [pc, #336]	; (800ce60 <_printf_i+0x244>)
 800cd10:	2f6f      	cmp	r7, #111	; 0x6f
 800cd12:	bf0c      	ite	eq
 800cd14:	2308      	moveq	r3, #8
 800cd16:	230a      	movne	r3, #10
 800cd18:	2100      	movs	r1, #0
 800cd1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd1e:	6865      	ldr	r5, [r4, #4]
 800cd20:	60a5      	str	r5, [r4, #8]
 800cd22:	2d00      	cmp	r5, #0
 800cd24:	bfa2      	ittt	ge
 800cd26:	6821      	ldrge	r1, [r4, #0]
 800cd28:	f021 0104 	bicge.w	r1, r1, #4
 800cd2c:	6021      	strge	r1, [r4, #0]
 800cd2e:	b90e      	cbnz	r6, 800cd34 <_printf_i+0x118>
 800cd30:	2d00      	cmp	r5, #0
 800cd32:	d04d      	beq.n	800cdd0 <_printf_i+0x1b4>
 800cd34:	4615      	mov	r5, r2
 800cd36:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd3a:	fb03 6711 	mls	r7, r3, r1, r6
 800cd3e:	5dc7      	ldrb	r7, [r0, r7]
 800cd40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd44:	4637      	mov	r7, r6
 800cd46:	42bb      	cmp	r3, r7
 800cd48:	460e      	mov	r6, r1
 800cd4a:	d9f4      	bls.n	800cd36 <_printf_i+0x11a>
 800cd4c:	2b08      	cmp	r3, #8
 800cd4e:	d10b      	bne.n	800cd68 <_printf_i+0x14c>
 800cd50:	6823      	ldr	r3, [r4, #0]
 800cd52:	07de      	lsls	r6, r3, #31
 800cd54:	d508      	bpl.n	800cd68 <_printf_i+0x14c>
 800cd56:	6923      	ldr	r3, [r4, #16]
 800cd58:	6861      	ldr	r1, [r4, #4]
 800cd5a:	4299      	cmp	r1, r3
 800cd5c:	bfde      	ittt	le
 800cd5e:	2330      	movle	r3, #48	; 0x30
 800cd60:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd64:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd68:	1b52      	subs	r2, r2, r5
 800cd6a:	6122      	str	r2, [r4, #16]
 800cd6c:	f8cd a000 	str.w	sl, [sp]
 800cd70:	464b      	mov	r3, r9
 800cd72:	aa03      	add	r2, sp, #12
 800cd74:	4621      	mov	r1, r4
 800cd76:	4640      	mov	r0, r8
 800cd78:	f7ff fee2 	bl	800cb40 <_printf_common>
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	d14c      	bne.n	800ce1a <_printf_i+0x1fe>
 800cd80:	f04f 30ff 	mov.w	r0, #4294967295
 800cd84:	b004      	add	sp, #16
 800cd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd8a:	4835      	ldr	r0, [pc, #212]	; (800ce60 <_printf_i+0x244>)
 800cd8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cd90:	6829      	ldr	r1, [r5, #0]
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd98:	6029      	str	r1, [r5, #0]
 800cd9a:	061d      	lsls	r5, r3, #24
 800cd9c:	d514      	bpl.n	800cdc8 <_printf_i+0x1ac>
 800cd9e:	07df      	lsls	r7, r3, #31
 800cda0:	bf44      	itt	mi
 800cda2:	f043 0320 	orrmi.w	r3, r3, #32
 800cda6:	6023      	strmi	r3, [r4, #0]
 800cda8:	b91e      	cbnz	r6, 800cdb2 <_printf_i+0x196>
 800cdaa:	6823      	ldr	r3, [r4, #0]
 800cdac:	f023 0320 	bic.w	r3, r3, #32
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	2310      	movs	r3, #16
 800cdb4:	e7b0      	b.n	800cd18 <_printf_i+0xfc>
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	f043 0320 	orr.w	r3, r3, #32
 800cdbc:	6023      	str	r3, [r4, #0]
 800cdbe:	2378      	movs	r3, #120	; 0x78
 800cdc0:	4828      	ldr	r0, [pc, #160]	; (800ce64 <_printf_i+0x248>)
 800cdc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cdc6:	e7e3      	b.n	800cd90 <_printf_i+0x174>
 800cdc8:	0659      	lsls	r1, r3, #25
 800cdca:	bf48      	it	mi
 800cdcc:	b2b6      	uxthmi	r6, r6
 800cdce:	e7e6      	b.n	800cd9e <_printf_i+0x182>
 800cdd0:	4615      	mov	r5, r2
 800cdd2:	e7bb      	b.n	800cd4c <_printf_i+0x130>
 800cdd4:	682b      	ldr	r3, [r5, #0]
 800cdd6:	6826      	ldr	r6, [r4, #0]
 800cdd8:	6961      	ldr	r1, [r4, #20]
 800cdda:	1d18      	adds	r0, r3, #4
 800cddc:	6028      	str	r0, [r5, #0]
 800cdde:	0635      	lsls	r5, r6, #24
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	d501      	bpl.n	800cde8 <_printf_i+0x1cc>
 800cde4:	6019      	str	r1, [r3, #0]
 800cde6:	e002      	b.n	800cdee <_printf_i+0x1d2>
 800cde8:	0670      	lsls	r0, r6, #25
 800cdea:	d5fb      	bpl.n	800cde4 <_printf_i+0x1c8>
 800cdec:	8019      	strh	r1, [r3, #0]
 800cdee:	2300      	movs	r3, #0
 800cdf0:	6123      	str	r3, [r4, #16]
 800cdf2:	4615      	mov	r5, r2
 800cdf4:	e7ba      	b.n	800cd6c <_printf_i+0x150>
 800cdf6:	682b      	ldr	r3, [r5, #0]
 800cdf8:	1d1a      	adds	r2, r3, #4
 800cdfa:	602a      	str	r2, [r5, #0]
 800cdfc:	681d      	ldr	r5, [r3, #0]
 800cdfe:	6862      	ldr	r2, [r4, #4]
 800ce00:	2100      	movs	r1, #0
 800ce02:	4628      	mov	r0, r5
 800ce04:	f7f3 f9fc 	bl	8000200 <memchr>
 800ce08:	b108      	cbz	r0, 800ce0e <_printf_i+0x1f2>
 800ce0a:	1b40      	subs	r0, r0, r5
 800ce0c:	6060      	str	r0, [r4, #4]
 800ce0e:	6863      	ldr	r3, [r4, #4]
 800ce10:	6123      	str	r3, [r4, #16]
 800ce12:	2300      	movs	r3, #0
 800ce14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce18:	e7a8      	b.n	800cd6c <_printf_i+0x150>
 800ce1a:	6923      	ldr	r3, [r4, #16]
 800ce1c:	462a      	mov	r2, r5
 800ce1e:	4649      	mov	r1, r9
 800ce20:	4640      	mov	r0, r8
 800ce22:	47d0      	blx	sl
 800ce24:	3001      	adds	r0, #1
 800ce26:	d0ab      	beq.n	800cd80 <_printf_i+0x164>
 800ce28:	6823      	ldr	r3, [r4, #0]
 800ce2a:	079b      	lsls	r3, r3, #30
 800ce2c:	d413      	bmi.n	800ce56 <_printf_i+0x23a>
 800ce2e:	68e0      	ldr	r0, [r4, #12]
 800ce30:	9b03      	ldr	r3, [sp, #12]
 800ce32:	4298      	cmp	r0, r3
 800ce34:	bfb8      	it	lt
 800ce36:	4618      	movlt	r0, r3
 800ce38:	e7a4      	b.n	800cd84 <_printf_i+0x168>
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	4632      	mov	r2, r6
 800ce3e:	4649      	mov	r1, r9
 800ce40:	4640      	mov	r0, r8
 800ce42:	47d0      	blx	sl
 800ce44:	3001      	adds	r0, #1
 800ce46:	d09b      	beq.n	800cd80 <_printf_i+0x164>
 800ce48:	3501      	adds	r5, #1
 800ce4a:	68e3      	ldr	r3, [r4, #12]
 800ce4c:	9903      	ldr	r1, [sp, #12]
 800ce4e:	1a5b      	subs	r3, r3, r1
 800ce50:	42ab      	cmp	r3, r5
 800ce52:	dcf2      	bgt.n	800ce3a <_printf_i+0x21e>
 800ce54:	e7eb      	b.n	800ce2e <_printf_i+0x212>
 800ce56:	2500      	movs	r5, #0
 800ce58:	f104 0619 	add.w	r6, r4, #25
 800ce5c:	e7f5      	b.n	800ce4a <_printf_i+0x22e>
 800ce5e:	bf00      	nop
 800ce60:	0803d169 	.word	0x0803d169
 800ce64:	0803d17a 	.word	0x0803d17a

0800ce68 <_sbrk_r>:
 800ce68:	b538      	push	{r3, r4, r5, lr}
 800ce6a:	4d06      	ldr	r5, [pc, #24]	; (800ce84 <_sbrk_r+0x1c>)
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	4604      	mov	r4, r0
 800ce70:	4608      	mov	r0, r1
 800ce72:	602b      	str	r3, [r5, #0]
 800ce74:	f006 f97a 	bl	801316c <_sbrk>
 800ce78:	1c43      	adds	r3, r0, #1
 800ce7a:	d102      	bne.n	800ce82 <_sbrk_r+0x1a>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	b103      	cbz	r3, 800ce82 <_sbrk_r+0x1a>
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	bd38      	pop	{r3, r4, r5, pc}
 800ce84:	200037ec 	.word	0x200037ec

0800ce88 <siprintf>:
 800ce88:	b40e      	push	{r1, r2, r3}
 800ce8a:	b500      	push	{lr}
 800ce8c:	b09c      	sub	sp, #112	; 0x70
 800ce8e:	ab1d      	add	r3, sp, #116	; 0x74
 800ce90:	9002      	str	r0, [sp, #8]
 800ce92:	9006      	str	r0, [sp, #24]
 800ce94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce98:	4809      	ldr	r0, [pc, #36]	; (800cec0 <siprintf+0x38>)
 800ce9a:	9107      	str	r1, [sp, #28]
 800ce9c:	9104      	str	r1, [sp, #16]
 800ce9e:	4909      	ldr	r1, [pc, #36]	; (800cec4 <siprintf+0x3c>)
 800cea0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cea4:	9105      	str	r1, [sp, #20]
 800cea6:	6800      	ldr	r0, [r0, #0]
 800cea8:	9301      	str	r3, [sp, #4]
 800ceaa:	a902      	add	r1, sp, #8
 800ceac:	f002 fed2 	bl	800fc54 <_svfiprintf_r>
 800ceb0:	9b02      	ldr	r3, [sp, #8]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	701a      	strb	r2, [r3, #0]
 800ceb6:	b01c      	add	sp, #112	; 0x70
 800ceb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cebc:	b003      	add	sp, #12
 800cebe:	4770      	bx	lr
 800cec0:	200002bc 	.word	0x200002bc
 800cec4:	ffff0208 	.word	0xffff0208

0800cec8 <siscanf>:
 800cec8:	b40e      	push	{r1, r2, r3}
 800ceca:	b510      	push	{r4, lr}
 800cecc:	b09f      	sub	sp, #124	; 0x7c
 800cece:	ac21      	add	r4, sp, #132	; 0x84
 800ced0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ced4:	f854 2b04 	ldr.w	r2, [r4], #4
 800ced8:	9201      	str	r2, [sp, #4]
 800ceda:	f8ad 101c 	strh.w	r1, [sp, #28]
 800cede:	9004      	str	r0, [sp, #16]
 800cee0:	9008      	str	r0, [sp, #32]
 800cee2:	f7f3 f985 	bl	80001f0 <strlen>
 800cee6:	4b0c      	ldr	r3, [pc, #48]	; (800cf18 <siscanf+0x50>)
 800cee8:	9005      	str	r0, [sp, #20]
 800ceea:	9009      	str	r0, [sp, #36]	; 0x24
 800ceec:	930d      	str	r3, [sp, #52]	; 0x34
 800ceee:	480b      	ldr	r0, [pc, #44]	; (800cf1c <siscanf+0x54>)
 800cef0:	9a01      	ldr	r2, [sp, #4]
 800cef2:	6800      	ldr	r0, [r0, #0]
 800cef4:	9403      	str	r4, [sp, #12]
 800cef6:	2300      	movs	r3, #0
 800cef8:	9311      	str	r3, [sp, #68]	; 0x44
 800cefa:	9316      	str	r3, [sp, #88]	; 0x58
 800cefc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf00:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cf04:	a904      	add	r1, sp, #16
 800cf06:	4623      	mov	r3, r4
 800cf08:	f002 fffe 	bl	800ff08 <__ssvfiscanf_r>
 800cf0c:	b01f      	add	sp, #124	; 0x7c
 800cf0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf12:	b003      	add	sp, #12
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	0800cf43 	.word	0x0800cf43
 800cf1c:	200002bc 	.word	0x200002bc

0800cf20 <__sread>:
 800cf20:	b510      	push	{r4, lr}
 800cf22:	460c      	mov	r4, r1
 800cf24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf28:	f003 fab8 	bl	801049c <_read_r>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	bfab      	itete	ge
 800cf30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf32:	89a3      	ldrhlt	r3, [r4, #12]
 800cf34:	181b      	addge	r3, r3, r0
 800cf36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf3a:	bfac      	ite	ge
 800cf3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf3e:	81a3      	strhlt	r3, [r4, #12]
 800cf40:	bd10      	pop	{r4, pc}

0800cf42 <__seofread>:
 800cf42:	2000      	movs	r0, #0
 800cf44:	4770      	bx	lr

0800cf46 <__swrite>:
 800cf46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf4a:	461f      	mov	r7, r3
 800cf4c:	898b      	ldrh	r3, [r1, #12]
 800cf4e:	05db      	lsls	r3, r3, #23
 800cf50:	4605      	mov	r5, r0
 800cf52:	460c      	mov	r4, r1
 800cf54:	4616      	mov	r6, r2
 800cf56:	d505      	bpl.n	800cf64 <__swrite+0x1e>
 800cf58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf5c:	2302      	movs	r3, #2
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f002 f9b6 	bl	800f2d0 <_lseek_r>
 800cf64:	89a3      	ldrh	r3, [r4, #12]
 800cf66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf6e:	81a3      	strh	r3, [r4, #12]
 800cf70:	4632      	mov	r2, r6
 800cf72:	463b      	mov	r3, r7
 800cf74:	4628      	mov	r0, r5
 800cf76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7a:	f001 b871 	b.w	800e060 <_write_r>

0800cf7e <__sseek>:
 800cf7e:	b510      	push	{r4, lr}
 800cf80:	460c      	mov	r4, r1
 800cf82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf86:	f002 f9a3 	bl	800f2d0 <_lseek_r>
 800cf8a:	1c43      	adds	r3, r0, #1
 800cf8c:	89a3      	ldrh	r3, [r4, #12]
 800cf8e:	bf15      	itete	ne
 800cf90:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf9a:	81a3      	strheq	r3, [r4, #12]
 800cf9c:	bf18      	it	ne
 800cf9e:	81a3      	strhne	r3, [r4, #12]
 800cfa0:	bd10      	pop	{r4, pc}

0800cfa2 <__sclose>:
 800cfa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa6:	f001 b8e7 	b.w	800e178 <_close_r>
	...

0800cfac <iso_year_adjust>:
 800cfac:	6942      	ldr	r2, [r0, #20]
 800cfae:	2a00      	cmp	r2, #0
 800cfb0:	f240 736c 	movw	r3, #1900	; 0x76c
 800cfb4:	bfa8      	it	ge
 800cfb6:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 800cfba:	4413      	add	r3, r2
 800cfbc:	0792      	lsls	r2, r2, #30
 800cfbe:	d105      	bne.n	800cfcc <iso_year_adjust+0x20>
 800cfc0:	2164      	movs	r1, #100	; 0x64
 800cfc2:	fb93 f2f1 	sdiv	r2, r3, r1
 800cfc6:	fb01 3212 	mls	r2, r1, r2, r3
 800cfca:	b9da      	cbnz	r2, 800d004 <iso_year_adjust+0x58>
 800cfcc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cfd0:	fb93 f1f2 	sdiv	r1, r3, r2
 800cfd4:	fb02 3311 	mls	r3, r2, r1, r3
 800cfd8:	fab3 f383 	clz	r3, r3
 800cfdc:	095b      	lsrs	r3, r3, #5
 800cfde:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 800cfe2:	0040      	lsls	r0, r0, #1
 800cfe4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800cfe8:	4418      	add	r0, r3
 800cfea:	f241 63a2 	movw	r3, #5794	; 0x16a2
 800cfee:	4298      	cmp	r0, r3
 800cff0:	d03a      	beq.n	800d068 <iso_year_adjust+0xbc>
 800cff2:	dc21      	bgt.n	800d038 <iso_year_adjust+0x8c>
 800cff4:	2801      	cmp	r0, #1
 800cff6:	dc1a      	bgt.n	800d02e <iso_year_adjust+0x82>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	bfb4      	ite	lt
 800cffc:	2000      	movlt	r0, #0
 800cffe:	f04f 30ff 	movge.w	r0, #4294967295
 800d002:	4770      	bx	lr
 800d004:	2301      	movs	r3, #1
 800d006:	e7ea      	b.n	800cfde <iso_year_adjust+0x32>
 800d008:	2817      	cmp	r0, #23
 800d00a:	d813      	bhi.n	800d034 <iso_year_adjust+0x88>
 800d00c:	e8df f000 	tbb	[pc, r0]
 800d010:	0c0c0c0c 	.word	0x0c0c0c0c
 800d014:	0c0c1212 	.word	0x0c0c1212
 800d018:	12121212 	.word	0x12121212
 800d01c:	12121212 	.word	0x12121212
 800d020:	0c0c1212 	.word	0x0c0c1212
 800d024:	0c0c1212 	.word	0x0c0c1212
 800d028:	f04f 30ff 	mov.w	r0, #4294967295
 800d02c:	4770      	bx	lr
 800d02e:	380a      	subs	r0, #10
 800d030:	2817      	cmp	r0, #23
 800d032:	d9e9      	bls.n	800d008 <iso_year_adjust+0x5c>
 800d034:	2000      	movs	r0, #0
 800d036:	4770      	bx	lr
 800d038:	f241 63b4 	movw	r3, #5812	; 0x16b4
 800d03c:	4298      	cmp	r0, r3
 800d03e:	dc06      	bgt.n	800d04e <iso_year_adjust+0xa2>
 800d040:	f241 63b1 	movw	r3, #5809	; 0x16b1
 800d044:	4298      	cmp	r0, r3
 800d046:	bfd4      	ite	le
 800d048:	2000      	movle	r0, #0
 800d04a:	2001      	movgt	r0, #1
 800d04c:	4770      	bx	lr
 800d04e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 800d052:	3802      	subs	r0, #2
 800d054:	2815      	cmp	r0, #21
 800d056:	d8ed      	bhi.n	800d034 <iso_year_adjust+0x88>
 800d058:	2301      	movs	r3, #1
 800d05a:	4083      	lsls	r3, r0
 800d05c:	4803      	ldr	r0, [pc, #12]	; (800d06c <iso_year_adjust+0xc0>)
 800d05e:	4018      	ands	r0, r3
 800d060:	3800      	subs	r0, #0
 800d062:	bf18      	it	ne
 800d064:	2001      	movne	r0, #1
 800d066:	4770      	bx	lr
 800d068:	2001      	movs	r0, #1
 800d06a:	4770      	bx	lr
 800d06c:	002a001f 	.word	0x002a001f

0800d070 <__strftime.isra.0>:
 800d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d074:	b08f      	sub	sp, #60	; 0x3c
 800d076:	461e      	mov	r6, r3
 800d078:	2300      	movs	r3, #0
 800d07a:	4607      	mov	r7, r0
 800d07c:	460d      	mov	r5, r1
 800d07e:	9302      	str	r3, [sp, #8]
 800d080:	461c      	mov	r4, r3
 800d082:	7813      	ldrb	r3, [r2, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 84ba 	beq.w	800d9fe <__strftime.isra.0+0x98e>
 800d08a:	2b25      	cmp	r3, #37	; 0x25
 800d08c:	d11f      	bne.n	800d0ce <__strftime.isra.0+0x5e>
 800d08e:	f892 b001 	ldrb.w	fp, [r2, #1]
 800d092:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800d096:	d024      	beq.n	800d0e2 <__strftime.isra.0+0x72>
 800d098:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800d09c:	d021      	beq.n	800d0e2 <__strftime.isra.0+0x72>
 800d09e:	f102 0801 	add.w	r8, r2, #1
 800d0a2:	f04f 0b00 	mov.w	fp, #0
 800d0a6:	f898 2000 	ldrb.w	r2, [r8]
 800d0aa:	3a31      	subs	r2, #49	; 0x31
 800d0ac:	2a08      	cmp	r2, #8
 800d0ae:	d81b      	bhi.n	800d0e8 <__strftime.isra.0+0x78>
 800d0b0:	4640      	mov	r0, r8
 800d0b2:	220a      	movs	r2, #10
 800d0b4:	a906      	add	r1, sp, #24
 800d0b6:	f000 fd3b 	bl	800db30 <strtoul>
 800d0ba:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d0be:	4681      	mov	r9, r0
 800d0c0:	f898 2000 	ldrb.w	r2, [r8]
 800d0c4:	2a45      	cmp	r2, #69	; 0x45
 800d0c6:	d112      	bne.n	800d0ee <__strftime.isra.0+0x7e>
 800d0c8:	f108 0801 	add.w	r8, r8, #1
 800d0cc:	e011      	b.n	800d0f2 <__strftime.isra.0+0x82>
 800d0ce:	1e69      	subs	r1, r5, #1
 800d0d0:	42a1      	cmp	r1, r4
 800d0d2:	d802      	bhi.n	800d0da <__strftime.isra.0+0x6a>
 800d0d4:	2400      	movs	r4, #0
 800d0d6:	f000 bc95 	b.w	800da04 <__strftime.isra.0+0x994>
 800d0da:	553b      	strb	r3, [r7, r4]
 800d0dc:	3201      	adds	r2, #1
 800d0de:	3401      	adds	r4, #1
 800d0e0:	e7cf      	b.n	800d082 <__strftime.isra.0+0x12>
 800d0e2:	f102 0802 	add.w	r8, r2, #2
 800d0e6:	e7de      	b.n	800d0a6 <__strftime.isra.0+0x36>
 800d0e8:	f04f 0900 	mov.w	r9, #0
 800d0ec:	e7e8      	b.n	800d0c0 <__strftime.isra.0+0x50>
 800d0ee:	2a4f      	cmp	r2, #79	; 0x4f
 800d0f0:	d0ea      	beq.n	800d0c8 <__strftime.isra.0+0x58>
 800d0f2:	f898 0000 	ldrb.w	r0, [r8]
 800d0f6:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 800d0fa:	2a55      	cmp	r2, #85	; 0x55
 800d0fc:	d8ea      	bhi.n	800d0d4 <__strftime.isra.0+0x64>
 800d0fe:	a301      	add	r3, pc, #4	; (adr r3, 800d104 <__strftime.isra.0+0x94>)
 800d100:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800d104:	0800d9f3 	.word	0x0800d9f3
 800d108:	0800d0d5 	.word	0x0800d0d5
 800d10c:	0800d0d5 	.word	0x0800d0d5
 800d110:	0800d0d5 	.word	0x0800d0d5
 800d114:	0800d0d5 	.word	0x0800d0d5
 800d118:	0800d0d5 	.word	0x0800d0d5
 800d11c:	0800d0d5 	.word	0x0800d0d5
 800d120:	0800d0d5 	.word	0x0800d0d5
 800d124:	0800d0d5 	.word	0x0800d0d5
 800d128:	0800d0d5 	.word	0x0800d0d5
 800d12c:	0800d0d5 	.word	0x0800d0d5
 800d130:	0800d0d5 	.word	0x0800d0d5
 800d134:	0800d0d5 	.word	0x0800d0d5
 800d138:	0800d0d5 	.word	0x0800d0d5
 800d13c:	0800d0d5 	.word	0x0800d0d5
 800d140:	0800d0d5 	.word	0x0800d0d5
 800d144:	0800d0d5 	.word	0x0800d0d5
 800d148:	0800d0d5 	.word	0x0800d0d5
 800d14c:	0800d0d5 	.word	0x0800d0d5
 800d150:	0800d0d5 	.word	0x0800d0d5
 800d154:	0800d0d5 	.word	0x0800d0d5
 800d158:	0800d0d5 	.word	0x0800d0d5
 800d15c:	0800d0d5 	.word	0x0800d0d5
 800d160:	0800d0d5 	.word	0x0800d0d5
 800d164:	0800d0d5 	.word	0x0800d0d5
 800d168:	0800d0d5 	.word	0x0800d0d5
 800d16c:	0800d0d5 	.word	0x0800d0d5
 800d170:	0800d0d5 	.word	0x0800d0d5
 800d174:	0800d299 	.word	0x0800d299
 800d178:	0800d2f1 	.word	0x0800d2f1
 800d17c:	0800d35f 	.word	0x0800d35f
 800d180:	0800d3fd 	.word	0x0800d3fd
 800d184:	0800d0d5 	.word	0x0800d0d5
 800d188:	0800d449 	.word	0x0800d449
 800d18c:	0800d535 	.word	0x0800d535
 800d190:	0800d60f 	.word	0x0800d60f
 800d194:	0800d61d 	.word	0x0800d61d
 800d198:	0800d0d5 	.word	0x0800d0d5
 800d19c:	0800d0d5 	.word	0x0800d0d5
 800d1a0:	0800d0d5 	.word	0x0800d0d5
 800d1a4:	0800d64d 	.word	0x0800d64d
 800d1a8:	0800d0d5 	.word	0x0800d0d5
 800d1ac:	0800d0d5 	.word	0x0800d0d5
 800d1b0:	0800d661 	.word	0x0800d661
 800d1b4:	0800d0d5 	.word	0x0800d0d5
 800d1b8:	0800d6b3 	.word	0x0800d6b3
 800d1bc:	0800d7c7 	.word	0x0800d7c7
 800d1c0:	0800d7d7 	.word	0x0800d7d7
 800d1c4:	0800d7ff 	.word	0x0800d7ff
 800d1c8:	0800d839 	.word	0x0800d839
 800d1cc:	0800d8ad 	.word	0x0800d8ad
 800d1d0:	0800d357 	.word	0x0800d357
 800d1d4:	0800d8d9 	.word	0x0800d8d9
 800d1d8:	0800d9a1 	.word	0x0800d9a1
 800d1dc:	0800d0d5 	.word	0x0800d0d5
 800d1e0:	0800d0d5 	.word	0x0800d0d5
 800d1e4:	0800d0d5 	.word	0x0800d0d5
 800d1e8:	0800d0d5 	.word	0x0800d0d5
 800d1ec:	0800d0d5 	.word	0x0800d0d5
 800d1f0:	0800d0d5 	.word	0x0800d0d5
 800d1f4:	0800d25d 	.word	0x0800d25d
 800d1f8:	0800d2c7 	.word	0x0800d2c7
 800d1fc:	0800d31d 	.word	0x0800d31d
 800d200:	0800d3d9 	.word	0x0800d3d9
 800d204:	0800d3d9 	.word	0x0800d3d9
 800d208:	0800d0d5 	.word	0x0800d0d5
 800d20c:	0800d49b 	.word	0x0800d49b
 800d210:	0800d2c7 	.word	0x0800d2c7
 800d214:	0800d0d5 	.word	0x0800d0d5
 800d218:	0800d63f 	.word	0x0800d63f
 800d21c:	0800d60f 	.word	0x0800d60f
 800d220:	0800d61d 	.word	0x0800d61d
 800d224:	0800d647 	.word	0x0800d647
 800d228:	0800d651 	.word	0x0800d651
 800d22c:	0800d0d5 	.word	0x0800d0d5
 800d230:	0800d661 	.word	0x0800d661
 800d234:	0800d0d5 	.word	0x0800d0d5
 800d238:	0800d347 	.word	0x0800d347
 800d23c:	0800d6c5 	.word	0x0800d6c5
 800d240:	0800d7cb 	.word	0x0800d7cb
 800d244:	0800d7e5 	.word	0x0800d7e5
 800d248:	0800d0d5 	.word	0x0800d0d5
 800d24c:	0800d89f 	.word	0x0800d89f
 800d250:	0800d34f 	.word	0x0800d34f
 800d254:	0800d8bd 	.word	0x0800d8bd
 800d258:	0800d92b 	.word	0x0800d92b
 800d25c:	69b3      	ldr	r3, [r6, #24]
 800d25e:	4aa9      	ldr	r2, [pc, #676]	; (800d504 <__strftime.isra.0+0x494>)
 800d260:	3318      	adds	r3, #24
 800d262:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800d266:	4648      	mov	r0, r9
 800d268:	f7f2 ffc2 	bl	80001f0 <strlen>
 800d26c:	f109 39ff 	add.w	r9, r9, #4294967295
 800d270:	4420      	add	r0, r4
 800d272:	1e6b      	subs	r3, r5, #1
 800d274:	42a0      	cmp	r0, r4
 800d276:	d107      	bne.n	800d288 <__strftime.isra.0+0x218>
 800d278:	f898 3000 	ldrb.w	r3, [r8]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 83be 	beq.w	800d9fe <__strftime.isra.0+0x98e>
 800d282:	f108 0201 	add.w	r2, r8, #1
 800d286:	e6fc      	b.n	800d082 <__strftime.isra.0+0x12>
 800d288:	42a3      	cmp	r3, r4
 800d28a:	f67f af23 	bls.w	800d0d4 <__strftime.isra.0+0x64>
 800d28e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d292:	553a      	strb	r2, [r7, r4]
 800d294:	3401      	adds	r4, #1
 800d296:	e7ed      	b.n	800d274 <__strftime.isra.0+0x204>
 800d298:	69b2      	ldr	r2, [r6, #24]
 800d29a:	4b9a      	ldr	r3, [pc, #616]	; (800d504 <__strftime.isra.0+0x494>)
 800d29c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d2a0:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 800d2a4:	4648      	mov	r0, r9
 800d2a6:	f7f2 ffa3 	bl	80001f0 <strlen>
 800d2aa:	f109 39ff 	add.w	r9, r9, #4294967295
 800d2ae:	4420      	add	r0, r4
 800d2b0:	1e6b      	subs	r3, r5, #1
 800d2b2:	42a0      	cmp	r0, r4
 800d2b4:	d0e0      	beq.n	800d278 <__strftime.isra.0+0x208>
 800d2b6:	42a3      	cmp	r3, r4
 800d2b8:	f67f af0c 	bls.w	800d0d4 <__strftime.isra.0+0x64>
 800d2bc:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d2c0:	553a      	strb	r2, [r7, r4]
 800d2c2:	3401      	adds	r4, #1
 800d2c4:	e7f5      	b.n	800d2b2 <__strftime.isra.0+0x242>
 800d2c6:	4b8f      	ldr	r3, [pc, #572]	; (800d504 <__strftime.isra.0+0x494>)
 800d2c8:	6932      	ldr	r2, [r6, #16]
 800d2ca:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 800d2ce:	4648      	mov	r0, r9
 800d2d0:	f7f2 ff8e 	bl	80001f0 <strlen>
 800d2d4:	f109 39ff 	add.w	r9, r9, #4294967295
 800d2d8:	4420      	add	r0, r4
 800d2da:	1e6b      	subs	r3, r5, #1
 800d2dc:	42a0      	cmp	r0, r4
 800d2de:	d0cb      	beq.n	800d278 <__strftime.isra.0+0x208>
 800d2e0:	42a3      	cmp	r3, r4
 800d2e2:	f67f aef7 	bls.w	800d0d4 <__strftime.isra.0+0x64>
 800d2e6:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d2ea:	553a      	strb	r2, [r7, r4]
 800d2ec:	3401      	adds	r4, #1
 800d2ee:	e7f5      	b.n	800d2dc <__strftime.isra.0+0x26c>
 800d2f0:	6933      	ldr	r3, [r6, #16]
 800d2f2:	4a84      	ldr	r2, [pc, #528]	; (800d504 <__strftime.isra.0+0x494>)
 800d2f4:	330c      	adds	r3, #12
 800d2f6:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800d2fa:	4648      	mov	r0, r9
 800d2fc:	f7f2 ff78 	bl	80001f0 <strlen>
 800d300:	f109 39ff 	add.w	r9, r9, #4294967295
 800d304:	4420      	add	r0, r4
 800d306:	1e6b      	subs	r3, r5, #1
 800d308:	42a0      	cmp	r0, r4
 800d30a:	d0b5      	beq.n	800d278 <__strftime.isra.0+0x208>
 800d30c:	42a3      	cmp	r3, r4
 800d30e:	f67f aee1 	bls.w	800d0d4 <__strftime.isra.0+0x64>
 800d312:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d316:	553a      	strb	r2, [r7, r4]
 800d318:	3401      	adds	r4, #1
 800d31a:	e7f5      	b.n	800d308 <__strftime.isra.0+0x298>
 800d31c:	4b79      	ldr	r3, [pc, #484]	; (800d504 <__strftime.isra.0+0x494>)
 800d31e:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 800d322:	4648      	mov	r0, r9
 800d324:	f7f2 ff64 	bl	80001f0 <strlen>
 800d328:	f899 3000 	ldrb.w	r3, [r9]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d0a3      	beq.n	800d278 <__strftime.isra.0+0x208>
 800d330:	4633      	mov	r3, r6
 800d332:	464a      	mov	r2, r9
 800d334:	1b29      	subs	r1, r5, r4
 800d336:	1938      	adds	r0, r7, r4
 800d338:	f7ff fe9a 	bl	800d070 <__strftime.isra.0>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	f77f aec9 	ble.w	800d0d4 <__strftime.isra.0+0x64>
 800d342:	4404      	add	r4, r0
 800d344:	e798      	b.n	800d278 <__strftime.isra.0+0x208>
 800d346:	4b6f      	ldr	r3, [pc, #444]	; (800d504 <__strftime.isra.0+0x494>)
 800d348:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 800d34c:	e7e9      	b.n	800d322 <__strftime.isra.0+0x2b2>
 800d34e:	4b6d      	ldr	r3, [pc, #436]	; (800d504 <__strftime.isra.0+0x494>)
 800d350:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 800d354:	e7e5      	b.n	800d322 <__strftime.isra.0+0x2b2>
 800d356:	4b6b      	ldr	r3, [pc, #428]	; (800d504 <__strftime.isra.0+0x494>)
 800d358:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 800d35c:	e7e1      	b.n	800d322 <__strftime.isra.0+0x2b2>
 800d35e:	496a      	ldr	r1, [pc, #424]	; (800d508 <__strftime.isra.0+0x498>)
 800d360:	f8d6 a014 	ldr.w	sl, [r6, #20]
 800d364:	458a      	cmp	sl, r1
 800d366:	bfac      	ite	ge
 800d368:	2100      	movge	r1, #0
 800d36a:	2101      	movlt	r1, #1
 800d36c:	f1ba 0f00 	cmp.w	sl, #0
 800d370:	db11      	blt.n	800d396 <__strftime.isra.0+0x326>
 800d372:	2064      	movs	r0, #100	; 0x64
 800d374:	fb9a f0f0 	sdiv	r0, sl, r0
 800d378:	3013      	adds	r0, #19
 800d37a:	f1bb 0f00 	cmp.w	fp, #0
 800d37e:	d014      	beq.n	800d3aa <__strftime.isra.0+0x33a>
 800d380:	2863      	cmp	r0, #99	; 0x63
 800d382:	dd27      	ble.n	800d3d4 <__strftime.isra.0+0x364>
 800d384:	4b61      	ldr	r3, [pc, #388]	; (800d50c <__strftime.isra.0+0x49c>)
 800d386:	4a62      	ldr	r2, [pc, #392]	; (800d510 <__strftime.isra.0+0x4a0>)
 800d388:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800d38c:	bf18      	it	ne
 800d38e:	461a      	movne	r2, r3
 800d390:	f8df c198 	ldr.w	ip, [pc, #408]	; 800d52c <__strftime.isra.0+0x4bc>
 800d394:	e00c      	b.n	800d3b0 <__strftime.isra.0+0x340>
 800d396:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 800d39a:	9103      	str	r1, [sp, #12]
 800d39c:	f000 fee7 	bl	800e16e <abs>
 800d3a0:	2264      	movs	r2, #100	; 0x64
 800d3a2:	9903      	ldr	r1, [sp, #12]
 800d3a4:	fb90 f0f2 	sdiv	r0, r0, r2
 800d3a8:	e7e7      	b.n	800d37a <__strftime.isra.0+0x30a>
 800d3aa:	4a58      	ldr	r2, [pc, #352]	; (800d50c <__strftime.isra.0+0x49c>)
 800d3ac:	f8df c180 	ldr.w	ip, [pc, #384]	; 800d530 <__strftime.isra.0+0x4c0>
 800d3b0:	4b58      	ldr	r3, [pc, #352]	; (800d514 <__strftime.isra.0+0x4a4>)
 800d3b2:	9001      	str	r0, [sp, #4]
 800d3b4:	f1b9 0f02 	cmp.w	r9, #2
 800d3b8:	bf2c      	ite	cs
 800d3ba:	ebc1 0109 	rsbcs	r1, r1, r9
 800d3be:	f1c1 0102 	rsbcc	r1, r1, #2
 800d3c2:	9100      	str	r1, [sp, #0]
 800d3c4:	4950      	ldr	r1, [pc, #320]	; (800d508 <__strftime.isra.0+0x498>)
 800d3c6:	458a      	cmp	sl, r1
 800d3c8:	bfa8      	it	ge
 800d3ca:	4613      	movge	r3, r2
 800d3cc:	4662      	mov	r2, ip
 800d3ce:	1b29      	subs	r1, r5, r4
 800d3d0:	1938      	adds	r0, r7, r4
 800d3d2:	e028      	b.n	800d426 <__strftime.isra.0+0x3b6>
 800d3d4:	4a4d      	ldr	r2, [pc, #308]	; (800d50c <__strftime.isra.0+0x49c>)
 800d3d6:	e7db      	b.n	800d390 <__strftime.isra.0+0x320>
 800d3d8:	494f      	ldr	r1, [pc, #316]	; (800d518 <__strftime.isra.0+0x4a8>)
 800d3da:	4a50      	ldr	r2, [pc, #320]	; (800d51c <__strftime.isra.0+0x4ac>)
 800d3dc:	68f3      	ldr	r3, [r6, #12]
 800d3de:	2864      	cmp	r0, #100	; 0x64
 800d3e0:	bf08      	it	eq
 800d3e2:	460a      	moveq	r2, r1
 800d3e4:	1b29      	subs	r1, r5, r4
 800d3e6:	1938      	adds	r0, r7, r4
 800d3e8:	f003 f8e6 	bl	80105b8 <sniprintf>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	f6ff ae71 	blt.w	800d0d4 <__strftime.isra.0+0x64>
 800d3f2:	4404      	add	r4, r0
 800d3f4:	42a5      	cmp	r5, r4
 800d3f6:	f63f af3f 	bhi.w	800d278 <__strftime.isra.0+0x208>
 800d3fa:	e66b      	b.n	800d0d4 <__strftime.isra.0+0x64>
 800d3fc:	6970      	ldr	r0, [r6, #20]
 800d3fe:	6933      	ldr	r3, [r6, #16]
 800d400:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 800d404:	2800      	cmp	r0, #0
 800d406:	eb07 0904 	add.w	r9, r7, r4
 800d40a:	eba5 0104 	sub.w	r1, r5, r4
 800d40e:	f103 0301 	add.w	r3, r3, #1
 800d412:	db0b      	blt.n	800d42c <__strftime.isra.0+0x3bc>
 800d414:	2264      	movs	r2, #100	; 0x64
 800d416:	fb90 fcf2 	sdiv	ip, r0, r2
 800d41a:	fb02 001c 	mls	r0, r2, ip, r0
 800d41e:	4a40      	ldr	r2, [pc, #256]	; (800d520 <__strftime.isra.0+0x4b0>)
 800d420:	e9cd a000 	strd	sl, r0, [sp]
 800d424:	4648      	mov	r0, r9
 800d426:	f003 f8c7 	bl	80105b8 <sniprintf>
 800d42a:	e7df      	b.n	800d3ec <__strftime.isra.0+0x37c>
 800d42c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800d430:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800d434:	f000 fe9b 	bl	800e16e <abs>
 800d438:	2264      	movs	r2, #100	; 0x64
 800d43a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 800d43e:	fb90 fcf2 	sdiv	ip, r0, r2
 800d442:	fb0c 0012 	mls	r0, ip, r2, r0
 800d446:	e7ea      	b.n	800d41e <__strftime.isra.0+0x3ae>
 800d448:	2225      	movs	r2, #37	; 0x25
 800d44a:	f88d 2018 	strb.w	r2, [sp, #24]
 800d44e:	f1bb 0f00 	cmp.w	fp, #0
 800d452:	d011      	beq.n	800d478 <__strftime.isra.0+0x408>
 800d454:	f1b9 0f06 	cmp.w	r9, #6
 800d458:	bf38      	it	cc
 800d45a:	f04f 0906 	movcc.w	r9, #6
 800d45e:	f1b9 0306 	subs.w	r3, r9, #6
 800d462:	f88d b019 	strb.w	fp, [sp, #25]
 800d466:	d10c      	bne.n	800d482 <__strftime.isra.0+0x412>
 800d468:	f10d 001a 	add.w	r0, sp, #26
 800d46c:	492d      	ldr	r1, [pc, #180]	; (800d524 <__strftime.isra.0+0x4b4>)
 800d46e:	f003 f8d7 	bl	8010620 <strcpy>
 800d472:	4633      	mov	r3, r6
 800d474:	aa06      	add	r2, sp, #24
 800d476:	e75d      	b.n	800d334 <__strftime.isra.0+0x2c4>
 800d478:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 800d47c:	f04f 090a 	mov.w	r9, #10
 800d480:	e7ed      	b.n	800d45e <__strftime.isra.0+0x3ee>
 800d482:	4a29      	ldr	r2, [pc, #164]	; (800d528 <__strftime.isra.0+0x4b8>)
 800d484:	211e      	movs	r1, #30
 800d486:	f10d 001a 	add.w	r0, sp, #26
 800d48a:	f003 f895 	bl	80105b8 <sniprintf>
 800d48e:	2800      	cmp	r0, #0
 800d490:	ddea      	ble.n	800d468 <__strftime.isra.0+0x3f8>
 800d492:	f10d 031a 	add.w	r3, sp, #26
 800d496:	4418      	add	r0, r3
 800d498:	e7e8      	b.n	800d46c <__strftime.isra.0+0x3fc>
 800d49a:	4630      	mov	r0, r6
 800d49c:	f7ff fd86 	bl	800cfac <iso_year_adjust>
 800d4a0:	4681      	mov	r9, r0
 800d4a2:	6970      	ldr	r0, [r6, #20]
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	db11      	blt.n	800d4cc <__strftime.isra.0+0x45c>
 800d4a8:	2364      	movs	r3, #100	; 0x64
 800d4aa:	fb90 f2f3 	sdiv	r2, r0, r3
 800d4ae:	fb03 0012 	mls	r0, r3, r2, r0
 800d4b2:	2264      	movs	r2, #100	; 0x64
 800d4b4:	4481      	add	r9, r0
 800d4b6:	fb99 f3f2 	sdiv	r3, r9, r2
 800d4ba:	fb02 9913 	mls	r9, r2, r3, r9
 800d4be:	4491      	add	r9, r2
 800d4c0:	fbb9 f3f2 	udiv	r3, r9, r2
 800d4c4:	fb02 9313 	mls	r3, r2, r3, r9
 800d4c8:	4a13      	ldr	r2, [pc, #76]	; (800d518 <__strftime.isra.0+0x4a8>)
 800d4ca:	e78b      	b.n	800d3e4 <__strftime.isra.0+0x374>
 800d4cc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800d4d0:	f000 fe4d 	bl	800e16e <abs>
 800d4d4:	2364      	movs	r3, #100	; 0x64
 800d4d6:	f1b9 0f00 	cmp.w	r9, #0
 800d4da:	fb90 f2f3 	sdiv	r2, r0, r3
 800d4de:	fb02 0013 	mls	r0, r2, r3, r0
 800d4e2:	da07      	bge.n	800d4f4 <__strftime.isra.0+0x484>
 800d4e4:	6972      	ldr	r2, [r6, #20]
 800d4e6:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	bfb8      	it	lt
 800d4ee:	f04f 0901 	movlt.w	r9, #1
 800d4f2:	e7de      	b.n	800d4b2 <__strftime.isra.0+0x442>
 800d4f4:	d0dd      	beq.n	800d4b2 <__strftime.isra.0+0x442>
 800d4f6:	6972      	ldr	r2, [r6, #20]
 800d4f8:	4b03      	ldr	r3, [pc, #12]	; (800d508 <__strftime.isra.0+0x498>)
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	bfb8      	it	lt
 800d4fe:	f04f 39ff 	movlt.w	r9, #4294967295
 800d502:	e7d6      	b.n	800d4b2 <__strftime.isra.0+0x442>
 800d504:	0803d310 	.word	0x0803d310
 800d508:	fffff894 	.word	0xfffff894
 800d50c:	0803d06e 	.word	0x0803d06e
 800d510:	0803d19a 	.word	0x0803d19a
 800d514:	0803d7dd 	.word	0x0803d7dd
 800d518:	0803d1aa 	.word	0x0803d1aa
 800d51c:	0803d19c 	.word	0x0803d19c
 800d520:	0803d1a0 	.word	0x0803d1a0
 800d524:	0803d1b3 	.word	0x0803d1b3
 800d528:	0803d1af 	.word	0x0803d1af
 800d52c:	0803d192 	.word	0x0803d192
 800d530:	0803d18b 	.word	0x0803d18b
 800d534:	6971      	ldr	r1, [r6, #20]
 800d536:	4ab6      	ldr	r2, [pc, #728]	; (800d810 <__strftime.isra.0+0x7a0>)
 800d538:	4291      	cmp	r1, r2
 800d53a:	bfac      	ite	ge
 800d53c:	2300      	movge	r3, #0
 800d53e:	2301      	movlt	r3, #1
 800d540:	4630      	mov	r0, r6
 800d542:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800d546:	f7ff fd31 	bl	800cfac <iso_year_adjust>
 800d54a:	9904      	ldr	r1, [sp, #16]
 800d54c:	2900      	cmp	r1, #0
 800d54e:	4682      	mov	sl, r0
 800d550:	db2c      	blt.n	800d5ac <__strftime.isra.0+0x53c>
 800d552:	2264      	movs	r2, #100	; 0x64
 800d554:	fb91 f2f2 	sdiv	r2, r1, r2
 800d558:	3213      	adds	r2, #19
 800d55a:	6970      	ldr	r0, [r6, #20]
 800d55c:	2800      	cmp	r0, #0
 800d55e:	db30      	blt.n	800d5c2 <__strftime.isra.0+0x552>
 800d560:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800d564:	fb90 fefc 	sdiv	lr, r0, ip
 800d568:	fb0c 001e 	mls	r0, ip, lr, r0
 800d56c:	f1ba 0f00 	cmp.w	sl, #0
 800d570:	da36      	bge.n	800d5e0 <__strftime.isra.0+0x570>
 800d572:	6971      	ldr	r1, [r6, #20]
 800d574:	4ba7      	ldr	r3, [pc, #668]	; (800d814 <__strftime.isra.0+0x7a4>)
 800d576:	4299      	cmp	r1, r3
 800d578:	db3d      	blt.n	800d5f6 <__strftime.isra.0+0x586>
 800d57a:	4482      	add	sl, r0
 800d57c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d580:	d13e      	bne.n	800d600 <__strftime.isra.0+0x590>
 800d582:	3a01      	subs	r2, #1
 800d584:	f04f 0a63 	mov.w	sl, #99	; 0x63
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	2064      	movs	r0, #100	; 0x64
 800d58c:	fb00 aa02 	mla	sl, r0, r2, sl
 800d590:	2b00      	cmp	r3, #0
 800d592:	f000 81ad 	beq.w	800d8f0 <__strftime.isra.0+0x880>
 800d596:	222d      	movs	r2, #45	; 0x2d
 800d598:	f88d 2018 	strb.w	r2, [sp, #24]
 800d59c:	f1b9 0f00 	cmp.w	r9, #0
 800d5a0:	d001      	beq.n	800d5a6 <__strftime.isra.0+0x536>
 800d5a2:	f109 39ff 	add.w	r9, r9, #4294967295
 800d5a6:	f10d 0219 	add.w	r2, sp, #25
 800d5aa:	e1ac      	b.n	800d906 <__strftime.isra.0+0x896>
 800d5ac:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800d5b0:	9104      	str	r1, [sp, #16]
 800d5b2:	f000 fddc 	bl	800e16e <abs>
 800d5b6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800d5ba:	9904      	ldr	r1, [sp, #16]
 800d5bc:	fb90 f2fc 	sdiv	r2, r0, ip
 800d5c0:	e7cb      	b.n	800d55a <__strftime.isra.0+0x4ea>
 800d5c2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800d5c6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d5ca:	f000 fdd0 	bl	800e16e <abs>
 800d5ce:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800d5d2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800d5d6:	fb90 fefc 	sdiv	lr, r0, ip
 800d5da:	fb0e 001c 	mls	r0, lr, ip, r0
 800d5de:	e7c5      	b.n	800d56c <__strftime.isra.0+0x4fc>
 800d5e0:	d0cb      	beq.n	800d57a <__strftime.isra.0+0x50a>
 800d5e2:	4b8b      	ldr	r3, [pc, #556]	; (800d810 <__strftime.isra.0+0x7a0>)
 800d5e4:	4299      	cmp	r1, r3
 800d5e6:	bfb4      	ite	lt
 800d5e8:	2301      	movlt	r3, #1
 800d5ea:	2300      	movge	r3, #0
 800d5ec:	9303      	str	r3, [sp, #12]
 800d5ee:	bfb8      	it	lt
 800d5f0:	f04f 3aff 	movlt.w	sl, #4294967295
 800d5f4:	e7c1      	b.n	800d57a <__strftime.isra.0+0x50a>
 800d5f6:	f04f 0a01 	mov.w	sl, #1
 800d5fa:	f8cd a00c 	str.w	sl, [sp, #12]
 800d5fe:	e7bc      	b.n	800d57a <__strftime.isra.0+0x50a>
 800d600:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800d604:	bf04      	itt	eq
 800d606:	3201      	addeq	r2, #1
 800d608:	f04f 0a00 	moveq.w	sl, #0
 800d60c:	e7bc      	b.n	800d588 <__strftime.isra.0+0x518>
 800d60e:	4982      	ldr	r1, [pc, #520]	; (800d818 <__strftime.isra.0+0x7a8>)
 800d610:	4a82      	ldr	r2, [pc, #520]	; (800d81c <__strftime.isra.0+0x7ac>)
 800d612:	68b3      	ldr	r3, [r6, #8]
 800d614:	286b      	cmp	r0, #107	; 0x6b
 800d616:	bf08      	it	eq
 800d618:	460a      	moveq	r2, r1
 800d61a:	e6e3      	b.n	800d3e4 <__strftime.isra.0+0x374>
 800d61c:	68b3      	ldr	r3, [r6, #8]
 800d61e:	b163      	cbz	r3, 800d63a <__strftime.isra.0+0x5ca>
 800d620:	2b0c      	cmp	r3, #12
 800d622:	d004      	beq.n	800d62e <__strftime.isra.0+0x5be>
 800d624:	210c      	movs	r1, #12
 800d626:	fb93 f2f1 	sdiv	r2, r3, r1
 800d62a:	fb01 3312 	mls	r3, r1, r2, r3
 800d62e:	497b      	ldr	r1, [pc, #492]	; (800d81c <__strftime.isra.0+0x7ac>)
 800d630:	4a79      	ldr	r2, [pc, #484]	; (800d818 <__strftime.isra.0+0x7a8>)
 800d632:	2849      	cmp	r0, #73	; 0x49
 800d634:	bf08      	it	eq
 800d636:	460a      	moveq	r2, r1
 800d638:	e6d4      	b.n	800d3e4 <__strftime.isra.0+0x374>
 800d63a:	230c      	movs	r3, #12
 800d63c:	e7f7      	b.n	800d62e <__strftime.isra.0+0x5be>
 800d63e:	69f3      	ldr	r3, [r6, #28]
 800d640:	4a77      	ldr	r2, [pc, #476]	; (800d820 <__strftime.isra.0+0x7b0>)
 800d642:	3301      	adds	r3, #1
 800d644:	e6ce      	b.n	800d3e4 <__strftime.isra.0+0x374>
 800d646:	6933      	ldr	r3, [r6, #16]
 800d648:	3301      	adds	r3, #1
 800d64a:	e73d      	b.n	800d4c8 <__strftime.isra.0+0x458>
 800d64c:	6873      	ldr	r3, [r6, #4]
 800d64e:	e73b      	b.n	800d4c8 <__strftime.isra.0+0x458>
 800d650:	1e6b      	subs	r3, r5, #1
 800d652:	429c      	cmp	r4, r3
 800d654:	f4bf ad3e 	bcs.w	800d0d4 <__strftime.isra.0+0x64>
 800d658:	230a      	movs	r3, #10
 800d65a:	553b      	strb	r3, [r7, r4]
 800d65c:	3401      	adds	r4, #1
 800d65e:	e60b      	b.n	800d278 <__strftime.isra.0+0x208>
 800d660:	68b3      	ldr	r3, [r6, #8]
 800d662:	2b0b      	cmp	r3, #11
 800d664:	4b6f      	ldr	r3, [pc, #444]	; (800d824 <__strftime.isra.0+0x7b4>)
 800d666:	bfd4      	ite	le
 800d668:	2200      	movle	r2, #0
 800d66a:	2201      	movgt	r2, #1
 800d66c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d670:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 800d674:	4648      	mov	r0, r9
 800d676:	f7f2 fdbb 	bl	80001f0 <strlen>
 800d67a:	f109 32ff 	add.w	r2, r9, #4294967295
 800d67e:	4420      	add	r0, r4
 800d680:	f105 3cff 	add.w	ip, r5, #4294967295
 800d684:	42a0      	cmp	r0, r4
 800d686:	f43f adf7 	beq.w	800d278 <__strftime.isra.0+0x208>
 800d68a:	45a4      	cmp	ip, r4
 800d68c:	f67f ad22 	bls.w	800d0d4 <__strftime.isra.0+0x64>
 800d690:	f898 1000 	ldrb.w	r1, [r8]
 800d694:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800d698:	2950      	cmp	r1, #80	; 0x50
 800d69a:	d107      	bne.n	800d6ac <__strftime.isra.0+0x63c>
 800d69c:	4962      	ldr	r1, [pc, #392]	; (800d828 <__strftime.isra.0+0x7b8>)
 800d69e:	5cc9      	ldrb	r1, [r1, r3]
 800d6a0:	f001 0103 	and.w	r1, r1, #3
 800d6a4:	2901      	cmp	r1, #1
 800d6a6:	bf08      	it	eq
 800d6a8:	3320      	addeq	r3, #32
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	553b      	strb	r3, [r7, r4]
 800d6ae:	3401      	adds	r4, #1
 800d6b0:	e7e8      	b.n	800d684 <__strftime.isra.0+0x614>
 800d6b2:	6873      	ldr	r3, [r6, #4]
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	4a5d      	ldr	r2, [pc, #372]	; (800d82c <__strftime.isra.0+0x7bc>)
 800d6b8:	68b3      	ldr	r3, [r6, #8]
 800d6ba:	1b29      	subs	r1, r5, r4
 800d6bc:	1938      	adds	r0, r7, r4
 800d6be:	f002 ff7b 	bl	80105b8 <sniprintf>
 800d6c2:	e693      	b.n	800d3ec <__strftime.isra.0+0x37c>
 800d6c4:	6a33      	ldr	r3, [r6, #32]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	db7a      	blt.n	800d7c0 <__strftime.isra.0+0x750>
 800d6ca:	f000 fae5 	bl	800dc98 <__tz_lock>
 800d6ce:	9b02      	ldr	r3, [sp, #8]
 800d6d0:	b90b      	cbnz	r3, 800d6d6 <__strftime.isra.0+0x666>
 800d6d2:	f000 faed 	bl	800dcb0 <_tzset_unlocked>
 800d6d6:	f001 fde9 	bl	800f2ac <__gettzinfo>
 800d6da:	6a33      	ldr	r3, [r6, #32]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	bfd4      	ite	le
 800d6e0:	2200      	movle	r2, #0
 800d6e2:	2201      	movgt	r2, #1
 800d6e4:	2328      	movs	r3, #40	; 0x28
 800d6e6:	fb02 3303 	mla	r3, r2, r3, r3
 800d6ea:	58c3      	ldr	r3, [r0, r3]
 800d6ec:	f1c3 0900 	rsb	r9, r3, #0
 800d6f0:	f000 fad8 	bl	800dca4 <__tz_unlock>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	9302      	str	r3, [sp, #8]
 800d6f8:	6972      	ldr	r2, [r6, #20]
 800d6fa:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 800d6fe:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800d702:	f16c 0c00 	sbc.w	ip, ip, #0
 800d706:	f1bc 0f00 	cmp.w	ip, #0
 800d70a:	eba5 0104 	sub.w	r1, r5, r4
 800d70e:	eb07 0004 	add.w	r0, r7, r4
 800d712:	da02      	bge.n	800d71a <__strftime.isra.0+0x6aa>
 800d714:	3303      	adds	r3, #3
 800d716:	f14c 0c00 	adc.w	ip, ip, #0
 800d71a:	089b      	lsrs	r3, r3, #2
 800d71c:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 800d720:	f102 3aff 	add.w	sl, r2, #4294967295
 800d724:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800d728:	f04f 0e64 	mov.w	lr, #100	; 0x64
 800d72c:	fb9a fefe 	sdiv	lr, sl, lr
 800d730:	ebb3 030e 	subs.w	r3, r3, lr
 800d734:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 800d738:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 800d73c:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 800d740:	fb9a fefe 	sdiv	lr, sl, lr
 800d744:	eb13 030e 	adds.w	r3, r3, lr
 800d748:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 800d74c:	3a46      	subs	r2, #70	; 0x46
 800d74e:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d752:	fb0c f202 	mul.w	r2, ip, r2
 800d756:	189b      	adds	r3, r3, r2
 800d758:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 800d75c:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800d760:	f04f 0c18 	mov.w	ip, #24
 800d764:	eb13 030e 	adds.w	r3, r3, lr
 800d768:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800d76c:	fba3 3e0c 	umull	r3, lr, r3, ip
 800d770:	fb0c e202 	mla	r2, ip, r2, lr
 800d774:	f8d6 e008 	ldr.w	lr, [r6, #8]
 800d778:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 800d77c:	eb13 030e 	adds.w	r3, r3, lr
 800d780:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 800d784:	fba3 320c 	umull	r3, r2, r3, ip
 800d788:	fb0c 220e 	mla	r2, ip, lr, r2
 800d78c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 800d790:	eb13 030e 	adds.w	r3, r3, lr
 800d794:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800d798:	fba3 3e0c 	umull	r3, lr, r3, ip
 800d79c:	fb0c e202 	mla	r2, ip, r2, lr
 800d7a0:	f8d6 e000 	ldr.w	lr, [r6]
 800d7a4:	eb13 030e 	adds.w	r3, r3, lr
 800d7a8:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 800d7ac:	ebb3 0309 	subs.w	r3, r3, r9
 800d7b0:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 800d7b4:	e9cd 3200 	strd	r3, r2, [sp]
 800d7b8:	4a1d      	ldr	r2, [pc, #116]	; (800d830 <__strftime.isra.0+0x7c0>)
 800d7ba:	f002 fefd 	bl	80105b8 <sniprintf>
 800d7be:	e615      	b.n	800d3ec <__strftime.isra.0+0x37c>
 800d7c0:	f04f 0900 	mov.w	r9, #0
 800d7c4:	e798      	b.n	800d6f8 <__strftime.isra.0+0x688>
 800d7c6:	6833      	ldr	r3, [r6, #0]
 800d7c8:	e67e      	b.n	800d4c8 <__strftime.isra.0+0x458>
 800d7ca:	1e6b      	subs	r3, r5, #1
 800d7cc:	429c      	cmp	r4, r3
 800d7ce:	f4bf ac81 	bcs.w	800d0d4 <__strftime.isra.0+0x64>
 800d7d2:	2309      	movs	r3, #9
 800d7d4:	e741      	b.n	800d65a <__strftime.isra.0+0x5ea>
 800d7d6:	6833      	ldr	r3, [r6, #0]
 800d7d8:	9301      	str	r3, [sp, #4]
 800d7da:	6873      	ldr	r3, [r6, #4]
 800d7dc:	9300      	str	r3, [sp, #0]
 800d7de:	4a15      	ldr	r2, [pc, #84]	; (800d834 <__strftime.isra.0+0x7c4>)
 800d7e0:	68b3      	ldr	r3, [r6, #8]
 800d7e2:	e5f4      	b.n	800d3ce <__strftime.isra.0+0x35e>
 800d7e4:	1e6b      	subs	r3, r5, #1
 800d7e6:	429c      	cmp	r4, r3
 800d7e8:	f4bf ac74 	bcs.w	800d0d4 <__strftime.isra.0+0x64>
 800d7ec:	69b3      	ldr	r3, [r6, #24]
 800d7ee:	1c62      	adds	r2, r4, #1
 800d7f0:	b91b      	cbnz	r3, 800d7fa <__strftime.isra.0+0x78a>
 800d7f2:	2337      	movs	r3, #55	; 0x37
 800d7f4:	553b      	strb	r3, [r7, r4]
 800d7f6:	4614      	mov	r4, r2
 800d7f8:	e53e      	b.n	800d278 <__strftime.isra.0+0x208>
 800d7fa:	3330      	adds	r3, #48	; 0x30
 800d7fc:	e7fa      	b.n	800d7f4 <__strftime.isra.0+0x784>
 800d7fe:	69f3      	ldr	r3, [r6, #28]
 800d800:	69b2      	ldr	r2, [r6, #24]
 800d802:	3307      	adds	r3, #7
 800d804:	1a9b      	subs	r3, r3, r2
 800d806:	2207      	movs	r2, #7
 800d808:	fb93 f3f2 	sdiv	r3, r3, r2
 800d80c:	e65c      	b.n	800d4c8 <__strftime.isra.0+0x458>
 800d80e:	bf00      	nop
 800d810:	fffff894 	.word	0xfffff894
 800d814:	fffff895 	.word	0xfffff895
 800d818:	0803d19c 	.word	0x0803d19c
 800d81c:	0803d1aa 	.word	0x0803d1aa
 800d820:	0803d1bf 	.word	0x0803d1bf
 800d824:	0803d310 	.word	0x0803d310
 800d828:	0803d449 	.word	0x0803d449
 800d82c:	0803d1ce 	.word	0x0803d1ce
 800d830:	0803d1c4 	.word	0x0803d1c4
 800d834:	0803d1c9 	.word	0x0803d1c9
 800d838:	4630      	mov	r0, r6
 800d83a:	f7ff fbb7 	bl	800cfac <iso_year_adjust>
 800d83e:	69b2      	ldr	r2, [r6, #24]
 800d840:	b132      	cbz	r2, 800d850 <__strftime.isra.0+0x7e0>
 800d842:	3a01      	subs	r2, #1
 800d844:	2800      	cmp	r0, #0
 800d846:	dc28      	bgt.n	800d89a <__strftime.isra.0+0x82a>
 800d848:	69f3      	ldr	r3, [r6, #28]
 800d84a:	d103      	bne.n	800d854 <__strftime.isra.0+0x7e4>
 800d84c:	330a      	adds	r3, #10
 800d84e:	e7d9      	b.n	800d804 <__strftime.isra.0+0x794>
 800d850:	2206      	movs	r2, #6
 800d852:	e7f7      	b.n	800d844 <__strftime.isra.0+0x7d4>
 800d854:	6971      	ldr	r1, [r6, #20]
 800d856:	2900      	cmp	r1, #0
 800d858:	eba2 0203 	sub.w	r2, r2, r3
 800d85c:	f240 736b 	movw	r3, #1899	; 0x76b
 800d860:	bfa8      	it	ge
 800d862:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 800d866:	440b      	add	r3, r1
 800d868:	0799      	lsls	r1, r3, #30
 800d86a:	d105      	bne.n	800d878 <__strftime.isra.0+0x808>
 800d86c:	2064      	movs	r0, #100	; 0x64
 800d86e:	fb93 f1f0 	sdiv	r1, r3, r0
 800d872:	fb00 3111 	mls	r1, r0, r1, r3
 800d876:	b971      	cbnz	r1, 800d896 <__strftime.isra.0+0x826>
 800d878:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800d87c:	fb93 f0f1 	sdiv	r0, r3, r1
 800d880:	fb01 3310 	mls	r3, r1, r0, r3
 800d884:	fab3 f383 	clz	r3, r3
 800d888:	095b      	lsrs	r3, r3, #5
 800d88a:	1ad3      	subs	r3, r2, r3
 800d88c:	2b05      	cmp	r3, #5
 800d88e:	bfb4      	ite	lt
 800d890:	2335      	movlt	r3, #53	; 0x35
 800d892:	2334      	movge	r3, #52	; 0x34
 800d894:	e618      	b.n	800d4c8 <__strftime.isra.0+0x458>
 800d896:	2301      	movs	r3, #1
 800d898:	e7f7      	b.n	800d88a <__strftime.isra.0+0x81a>
 800d89a:	2301      	movs	r3, #1
 800d89c:	e614      	b.n	800d4c8 <__strftime.isra.0+0x458>
 800d89e:	1e6b      	subs	r3, r5, #1
 800d8a0:	429c      	cmp	r4, r3
 800d8a2:	f4bf ac17 	bcs.w	800d0d4 <__strftime.isra.0+0x64>
 800d8a6:	69b3      	ldr	r3, [r6, #24]
 800d8a8:	3330      	adds	r3, #48	; 0x30
 800d8aa:	e6d6      	b.n	800d65a <__strftime.isra.0+0x5ea>
 800d8ac:	69b2      	ldr	r2, [r6, #24]
 800d8ae:	b11a      	cbz	r2, 800d8b8 <__strftime.isra.0+0x848>
 800d8b0:	3a01      	subs	r2, #1
 800d8b2:	69f3      	ldr	r3, [r6, #28]
 800d8b4:	3307      	adds	r3, #7
 800d8b6:	e7a5      	b.n	800d804 <__strftime.isra.0+0x794>
 800d8b8:	2206      	movs	r2, #6
 800d8ba:	e7fa      	b.n	800d8b2 <__strftime.isra.0+0x842>
 800d8bc:	6970      	ldr	r0, [r6, #20]
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	db05      	blt.n	800d8ce <__strftime.isra.0+0x85e>
 800d8c2:	2364      	movs	r3, #100	; 0x64
 800d8c4:	fb90 f2f3 	sdiv	r2, r0, r3
 800d8c8:	fb02 0313 	mls	r3, r2, r3, r0
 800d8cc:	e5fc      	b.n	800d4c8 <__strftime.isra.0+0x458>
 800d8ce:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800d8d2:	f000 fc4c 	bl	800e16e <abs>
 800d8d6:	e7f4      	b.n	800d8c2 <__strftime.isra.0+0x852>
 800d8d8:	6972      	ldr	r2, [r6, #20]
 800d8da:	494c      	ldr	r1, [pc, #304]	; (800da0c <__strftime.isra.0+0x99c>)
 800d8dc:	428a      	cmp	r2, r1
 800d8de:	da05      	bge.n	800d8ec <__strftime.isra.0+0x87c>
 800d8e0:	202d      	movs	r0, #45	; 0x2d
 800d8e2:	f88d 0018 	strb.w	r0, [sp, #24]
 800d8e6:	eba1 0a02 	sub.w	sl, r1, r2
 800d8ea:	e657      	b.n	800d59c <__strftime.isra.0+0x52c>
 800d8ec:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 800d8f0:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 800d8f4:	d106      	bne.n	800d904 <__strftime.isra.0+0x894>
 800d8f6:	f242 720f 	movw	r2, #9999	; 0x270f
 800d8fa:	4592      	cmp	sl, r2
 800d8fc:	d902      	bls.n	800d904 <__strftime.isra.0+0x894>
 800d8fe:	f88d b018 	strb.w	fp, [sp, #24]
 800d902:	e64b      	b.n	800d59c <__strftime.isra.0+0x52c>
 800d904:	aa06      	add	r2, sp, #24
 800d906:	2125      	movs	r1, #37	; 0x25
 800d908:	7011      	strb	r1, [r2, #0]
 800d90a:	f1bb 0f00 	cmp.w	fp, #0
 800d90e:	d108      	bne.n	800d922 <__strftime.isra.0+0x8b2>
 800d910:	1c50      	adds	r0, r2, #1
 800d912:	493f      	ldr	r1, [pc, #252]	; (800da10 <__strftime.isra.0+0x9a0>)
 800d914:	f002 fe84 	bl	8010620 <strcpy>
 800d918:	f8cd a000 	str.w	sl, [sp]
 800d91c:	464b      	mov	r3, r9
 800d91e:	aa06      	add	r2, sp, #24
 800d920:	e6cb      	b.n	800d6ba <__strftime.isra.0+0x64a>
 800d922:	2330      	movs	r3, #48	; 0x30
 800d924:	1c90      	adds	r0, r2, #2
 800d926:	7053      	strb	r3, [r2, #1]
 800d928:	e7f3      	b.n	800d912 <__strftime.isra.0+0x8a2>
 800d92a:	6a33      	ldr	r3, [r6, #32]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f6ff aca3 	blt.w	800d278 <__strftime.isra.0+0x208>
 800d932:	f000 f9b1 	bl	800dc98 <__tz_lock>
 800d936:	9b02      	ldr	r3, [sp, #8]
 800d938:	b90b      	cbnz	r3, 800d93e <__strftime.isra.0+0x8ce>
 800d93a:	f000 f9b9 	bl	800dcb0 <_tzset_unlocked>
 800d93e:	f001 fcb5 	bl	800f2ac <__gettzinfo>
 800d942:	6a33      	ldr	r3, [r6, #32]
 800d944:	2b00      	cmp	r3, #0
 800d946:	bfd4      	ite	le
 800d948:	2200      	movle	r2, #0
 800d94a:	2201      	movgt	r2, #1
 800d94c:	2328      	movs	r3, #40	; 0x28
 800d94e:	fb02 3303 	mla	r3, r2, r3, r3
 800d952:	eb07 0a04 	add.w	sl, r7, r4
 800d956:	58c3      	ldr	r3, [r0, r3]
 800d958:	f1c3 0900 	rsb	r9, r3, #0
 800d95c:	f000 f9a2 	bl	800dca4 <__tz_unlock>
 800d960:	233c      	movs	r3, #60	; 0x3c
 800d962:	fb99 f0f3 	sdiv	r0, r9, r3
 800d966:	f001 fca5 	bl	800f2b4 <labs>
 800d96a:	233c      	movs	r3, #60	; 0x3c
 800d96c:	eba5 0b04 	sub.w	fp, r5, r4
 800d970:	fb90 f2f3 	sdiv	r2, r0, r3
 800d974:	fb02 0013 	mls	r0, r2, r3, r0
 800d978:	9000      	str	r0, [sp, #0]
 800d97a:	4a26      	ldr	r2, [pc, #152]	; (800da14 <__strftime.isra.0+0x9a4>)
 800d97c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d980:	4659      	mov	r1, fp
 800d982:	4650      	mov	r0, sl
 800d984:	fb99 f3f3 	sdiv	r3, r9, r3
 800d988:	f002 fe16 	bl	80105b8 <sniprintf>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	f6ff aba1 	blt.w	800d0d4 <__strftime.isra.0+0x64>
 800d992:	4404      	add	r4, r0
 800d994:	42a5      	cmp	r5, r4
 800d996:	f67f ab9d 	bls.w	800d0d4 <__strftime.isra.0+0x64>
 800d99a:	2301      	movs	r3, #1
 800d99c:	9302      	str	r3, [sp, #8]
 800d99e:	e46b      	b.n	800d278 <__strftime.isra.0+0x208>
 800d9a0:	6a33      	ldr	r3, [r6, #32]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f6ff ac68 	blt.w	800d278 <__strftime.isra.0+0x208>
 800d9a8:	f000 f976 	bl	800dc98 <__tz_lock>
 800d9ac:	9b02      	ldr	r3, [sp, #8]
 800d9ae:	b90b      	cbnz	r3, 800d9b4 <__strftime.isra.0+0x944>
 800d9b0:	f000 f97e 	bl	800dcb0 <_tzset_unlocked>
 800d9b4:	6a33      	ldr	r3, [r6, #32]
 800d9b6:	4a18      	ldr	r2, [pc, #96]	; (800da18 <__strftime.isra.0+0x9a8>)
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	bfd4      	ite	le
 800d9bc:	2300      	movle	r3, #0
 800d9be:	2301      	movgt	r3, #1
 800d9c0:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800d9c4:	4648      	mov	r0, r9
 800d9c6:	f7f2 fc13 	bl	80001f0 <strlen>
 800d9ca:	f109 39ff 	add.w	r9, r9, #4294967295
 800d9ce:	4420      	add	r0, r4
 800d9d0:	1e6b      	subs	r3, r5, #1
 800d9d2:	42a0      	cmp	r0, r4
 800d9d4:	d102      	bne.n	800d9dc <__strftime.isra.0+0x96c>
 800d9d6:	f000 f965 	bl	800dca4 <__tz_unlock>
 800d9da:	e7de      	b.n	800d99a <__strftime.isra.0+0x92a>
 800d9dc:	42a3      	cmp	r3, r4
 800d9de:	d904      	bls.n	800d9ea <__strftime.isra.0+0x97a>
 800d9e0:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800d9e4:	553a      	strb	r2, [r7, r4]
 800d9e6:	3401      	adds	r4, #1
 800d9e8:	e7f3      	b.n	800d9d2 <__strftime.isra.0+0x962>
 800d9ea:	f000 f95b 	bl	800dca4 <__tz_unlock>
 800d9ee:	f7ff bb71 	b.w	800d0d4 <__strftime.isra.0+0x64>
 800d9f2:	1e6b      	subs	r3, r5, #1
 800d9f4:	429c      	cmp	r4, r3
 800d9f6:	f4bf ab6d 	bcs.w	800d0d4 <__strftime.isra.0+0x64>
 800d9fa:	2325      	movs	r3, #37	; 0x25
 800d9fc:	e62d      	b.n	800d65a <__strftime.isra.0+0x5ea>
 800d9fe:	b10d      	cbz	r5, 800da04 <__strftime.isra.0+0x994>
 800da00:	2300      	movs	r3, #0
 800da02:	553b      	strb	r3, [r7, r4]
 800da04:	4620      	mov	r0, r4
 800da06:	b00f      	add	sp, #60	; 0x3c
 800da08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da0c:	fffff894 	.word	0xfffff894
 800da10:	0803d1bb 	.word	0x0803d1bb
 800da14:	0803d1d8 	.word	0x0803d1d8
 800da18:	20000320 	.word	0x20000320

0800da1c <strftime>:
 800da1c:	f7ff bb28 	b.w	800d070 <__strftime.isra.0>

0800da20 <strncpy>:
 800da20:	b510      	push	{r4, lr}
 800da22:	3901      	subs	r1, #1
 800da24:	4603      	mov	r3, r0
 800da26:	b132      	cbz	r2, 800da36 <strncpy+0x16>
 800da28:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800da2c:	f803 4b01 	strb.w	r4, [r3], #1
 800da30:	3a01      	subs	r2, #1
 800da32:	2c00      	cmp	r4, #0
 800da34:	d1f7      	bne.n	800da26 <strncpy+0x6>
 800da36:	441a      	add	r2, r3
 800da38:	2100      	movs	r1, #0
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d100      	bne.n	800da40 <strncpy+0x20>
 800da3e:	bd10      	pop	{r4, pc}
 800da40:	f803 1b01 	strb.w	r1, [r3], #1
 800da44:	e7f9      	b.n	800da3a <strncpy+0x1a>
	...

0800da48 <_strtoul_l.constprop.0>:
 800da48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da4c:	4f36      	ldr	r7, [pc, #216]	; (800db28 <_strtoul_l.constprop.0+0xe0>)
 800da4e:	4686      	mov	lr, r0
 800da50:	460d      	mov	r5, r1
 800da52:	4628      	mov	r0, r5
 800da54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da58:	5de6      	ldrb	r6, [r4, r7]
 800da5a:	f016 0608 	ands.w	r6, r6, #8
 800da5e:	d1f8      	bne.n	800da52 <_strtoul_l.constprop.0+0xa>
 800da60:	2c2d      	cmp	r4, #45	; 0x2d
 800da62:	d12f      	bne.n	800dac4 <_strtoul_l.constprop.0+0x7c>
 800da64:	782c      	ldrb	r4, [r5, #0]
 800da66:	2601      	movs	r6, #1
 800da68:	1c85      	adds	r5, r0, #2
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d057      	beq.n	800db1e <_strtoul_l.constprop.0+0xd6>
 800da6e:	2b10      	cmp	r3, #16
 800da70:	d109      	bne.n	800da86 <_strtoul_l.constprop.0+0x3e>
 800da72:	2c30      	cmp	r4, #48	; 0x30
 800da74:	d107      	bne.n	800da86 <_strtoul_l.constprop.0+0x3e>
 800da76:	7828      	ldrb	r0, [r5, #0]
 800da78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800da7c:	2858      	cmp	r0, #88	; 0x58
 800da7e:	d149      	bne.n	800db14 <_strtoul_l.constprop.0+0xcc>
 800da80:	786c      	ldrb	r4, [r5, #1]
 800da82:	2310      	movs	r3, #16
 800da84:	3502      	adds	r5, #2
 800da86:	f04f 38ff 	mov.w	r8, #4294967295
 800da8a:	2700      	movs	r7, #0
 800da8c:	fbb8 f8f3 	udiv	r8, r8, r3
 800da90:	fb03 f908 	mul.w	r9, r3, r8
 800da94:	ea6f 0909 	mvn.w	r9, r9
 800da98:	4638      	mov	r0, r7
 800da9a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800da9e:	f1bc 0f09 	cmp.w	ip, #9
 800daa2:	d814      	bhi.n	800dace <_strtoul_l.constprop.0+0x86>
 800daa4:	4664      	mov	r4, ip
 800daa6:	42a3      	cmp	r3, r4
 800daa8:	dd22      	ble.n	800daf0 <_strtoul_l.constprop.0+0xa8>
 800daaa:	2f00      	cmp	r7, #0
 800daac:	db1d      	blt.n	800daea <_strtoul_l.constprop.0+0xa2>
 800daae:	4580      	cmp	r8, r0
 800dab0:	d31b      	bcc.n	800daea <_strtoul_l.constprop.0+0xa2>
 800dab2:	d101      	bne.n	800dab8 <_strtoul_l.constprop.0+0x70>
 800dab4:	45a1      	cmp	r9, r4
 800dab6:	db18      	blt.n	800daea <_strtoul_l.constprop.0+0xa2>
 800dab8:	fb00 4003 	mla	r0, r0, r3, r4
 800dabc:	2701      	movs	r7, #1
 800dabe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dac2:	e7ea      	b.n	800da9a <_strtoul_l.constprop.0+0x52>
 800dac4:	2c2b      	cmp	r4, #43	; 0x2b
 800dac6:	bf04      	itt	eq
 800dac8:	782c      	ldrbeq	r4, [r5, #0]
 800daca:	1c85      	addeq	r5, r0, #2
 800dacc:	e7cd      	b.n	800da6a <_strtoul_l.constprop.0+0x22>
 800dace:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dad2:	f1bc 0f19 	cmp.w	ip, #25
 800dad6:	d801      	bhi.n	800dadc <_strtoul_l.constprop.0+0x94>
 800dad8:	3c37      	subs	r4, #55	; 0x37
 800dada:	e7e4      	b.n	800daa6 <_strtoul_l.constprop.0+0x5e>
 800dadc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dae0:	f1bc 0f19 	cmp.w	ip, #25
 800dae4:	d804      	bhi.n	800daf0 <_strtoul_l.constprop.0+0xa8>
 800dae6:	3c57      	subs	r4, #87	; 0x57
 800dae8:	e7dd      	b.n	800daa6 <_strtoul_l.constprop.0+0x5e>
 800daea:	f04f 37ff 	mov.w	r7, #4294967295
 800daee:	e7e6      	b.n	800dabe <_strtoul_l.constprop.0+0x76>
 800daf0:	2f00      	cmp	r7, #0
 800daf2:	da07      	bge.n	800db04 <_strtoul_l.constprop.0+0xbc>
 800daf4:	2322      	movs	r3, #34	; 0x22
 800daf6:	f8ce 3000 	str.w	r3, [lr]
 800dafa:	f04f 30ff 	mov.w	r0, #4294967295
 800dafe:	b932      	cbnz	r2, 800db0e <_strtoul_l.constprop.0+0xc6>
 800db00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db04:	b106      	cbz	r6, 800db08 <_strtoul_l.constprop.0+0xc0>
 800db06:	4240      	negs	r0, r0
 800db08:	2a00      	cmp	r2, #0
 800db0a:	d0f9      	beq.n	800db00 <_strtoul_l.constprop.0+0xb8>
 800db0c:	b107      	cbz	r7, 800db10 <_strtoul_l.constprop.0+0xc8>
 800db0e:	1e69      	subs	r1, r5, #1
 800db10:	6011      	str	r1, [r2, #0]
 800db12:	e7f5      	b.n	800db00 <_strtoul_l.constprop.0+0xb8>
 800db14:	2430      	movs	r4, #48	; 0x30
 800db16:	2b00      	cmp	r3, #0
 800db18:	d1b5      	bne.n	800da86 <_strtoul_l.constprop.0+0x3e>
 800db1a:	2308      	movs	r3, #8
 800db1c:	e7b3      	b.n	800da86 <_strtoul_l.constprop.0+0x3e>
 800db1e:	2c30      	cmp	r4, #48	; 0x30
 800db20:	d0a9      	beq.n	800da76 <_strtoul_l.constprop.0+0x2e>
 800db22:	230a      	movs	r3, #10
 800db24:	e7af      	b.n	800da86 <_strtoul_l.constprop.0+0x3e>
 800db26:	bf00      	nop
 800db28:	0803d449 	.word	0x0803d449

0800db2c <_strtoul_r>:
 800db2c:	f7ff bf8c 	b.w	800da48 <_strtoul_l.constprop.0>

0800db30 <strtoul>:
 800db30:	4613      	mov	r3, r2
 800db32:	460a      	mov	r2, r1
 800db34:	4601      	mov	r1, r0
 800db36:	4802      	ldr	r0, [pc, #8]	; (800db40 <strtoul+0x10>)
 800db38:	6800      	ldr	r0, [r0, #0]
 800db3a:	f7ff bf85 	b.w	800da48 <_strtoul_l.constprop.0>
 800db3e:	bf00      	nop
 800db40:	200002bc 	.word	0x200002bc

0800db44 <__tzcalc_limits>:
 800db44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db48:	4605      	mov	r5, r0
 800db4a:	f001 fbaf 	bl	800f2ac <__gettzinfo>
 800db4e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800db52:	429d      	cmp	r5, r3
 800db54:	f340 8099 	ble.w	800dc8a <__tzcalc_limits+0x146>
 800db58:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800db5c:	18ac      	adds	r4, r5, r2
 800db5e:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800db62:	f240 126d 	movw	r2, #365	; 0x16d
 800db66:	10a4      	asrs	r4, r4, #2
 800db68:	fb02 4403 	mla	r4, r2, r3, r4
 800db6c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800db70:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800db74:	fb93 f3f2 	sdiv	r3, r3, r2
 800db78:	441c      	add	r4, r3
 800db7a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800db7e:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800db82:	fb95 fcf3 	sdiv	ip, r5, r3
 800db86:	fb03 5c1c 	mls	ip, r3, ip, r5
 800db8a:	186a      	adds	r2, r5, r1
 800db8c:	fabc f68c 	clz	r6, ip
 800db90:	fbb2 f2f3 	udiv	r2, r2, r3
 800db94:	f005 0303 	and.w	r3, r5, #3
 800db98:	4414      	add	r4, r2
 800db9a:	2264      	movs	r2, #100	; 0x64
 800db9c:	6045      	str	r5, [r0, #4]
 800db9e:	fb95 f7f2 	sdiv	r7, r5, r2
 800dba2:	0976      	lsrs	r6, r6, #5
 800dba4:	fb02 5717 	mls	r7, r2, r7, r5
 800dba8:	4601      	mov	r1, r0
 800dbaa:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	f04f 0a07 	mov.w	sl, #7
 800dbb4:	7a0d      	ldrb	r5, [r1, #8]
 800dbb6:	694b      	ldr	r3, [r1, #20]
 800dbb8:	2d4a      	cmp	r5, #74	; 0x4a
 800dbba:	d12d      	bne.n	800dc18 <__tzcalc_limits+0xd4>
 800dbbc:	9a00      	ldr	r2, [sp, #0]
 800dbbe:	eb04 0e03 	add.w	lr, r4, r3
 800dbc2:	b902      	cbnz	r2, 800dbc6 <__tzcalc_limits+0x82>
 800dbc4:	b917      	cbnz	r7, 800dbcc <__tzcalc_limits+0x88>
 800dbc6:	f1bc 0f00 	cmp.w	ip, #0
 800dbca:	d123      	bne.n	800dc14 <__tzcalc_limits+0xd0>
 800dbcc:	2b3b      	cmp	r3, #59	; 0x3b
 800dbce:	bfd4      	ite	le
 800dbd0:	2300      	movle	r3, #0
 800dbd2:	2301      	movgt	r3, #1
 800dbd4:	4473      	add	r3, lr
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	698d      	ldr	r5, [r1, #24]
 800dbda:	4a2d      	ldr	r2, [pc, #180]	; (800dc90 <__tzcalc_limits+0x14c>)
 800dbdc:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800dbe0:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800dbe4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800dbe6:	18ed      	adds	r5, r5, r3
 800dbe8:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800dbec:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800dbf0:	3128      	adds	r1, #40	; 0x28
 800dbf2:	458b      	cmp	fp, r1
 800dbf4:	d1de      	bne.n	800dbb4 <__tzcalc_limits+0x70>
 800dbf6:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800dbfa:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800dbfe:	428c      	cmp	r4, r1
 800dc00:	eb72 0303 	sbcs.w	r3, r2, r3
 800dc04:	bfb4      	ite	lt
 800dc06:	2301      	movlt	r3, #1
 800dc08:	2300      	movge	r3, #0
 800dc0a:	6003      	str	r3, [r0, #0]
 800dc0c:	2001      	movs	r0, #1
 800dc0e:	b003      	add	sp, #12
 800dc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc14:	2300      	movs	r3, #0
 800dc16:	e7dd      	b.n	800dbd4 <__tzcalc_limits+0x90>
 800dc18:	2d44      	cmp	r5, #68	; 0x44
 800dc1a:	d101      	bne.n	800dc20 <__tzcalc_limits+0xdc>
 800dc1c:	4423      	add	r3, r4
 800dc1e:	e7db      	b.n	800dbd8 <__tzcalc_limits+0x94>
 800dc20:	9a00      	ldr	r2, [sp, #0]
 800dc22:	bb62      	cbnz	r2, 800dc7e <__tzcalc_limits+0x13a>
 800dc24:	2f00      	cmp	r7, #0
 800dc26:	bf0c      	ite	eq
 800dc28:	4635      	moveq	r5, r6
 800dc2a:	2501      	movne	r5, #1
 800dc2c:	68ca      	ldr	r2, [r1, #12]
 800dc2e:	9201      	str	r2, [sp, #4]
 800dc30:	4a18      	ldr	r2, [pc, #96]	; (800dc94 <__tzcalc_limits+0x150>)
 800dc32:	f04f 0930 	mov.w	r9, #48	; 0x30
 800dc36:	fb09 2505 	mla	r5, r9, r5, r2
 800dc3a:	46a6      	mov	lr, r4
 800dc3c:	f04f 0800 	mov.w	r8, #0
 800dc40:	3d04      	subs	r5, #4
 800dc42:	9a01      	ldr	r2, [sp, #4]
 800dc44:	f108 0801 	add.w	r8, r8, #1
 800dc48:	4542      	cmp	r2, r8
 800dc4a:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800dc4e:	dc18      	bgt.n	800dc82 <__tzcalc_limits+0x13e>
 800dc50:	f10e 0504 	add.w	r5, lr, #4
 800dc54:	fb95 f8fa 	sdiv	r8, r5, sl
 800dc58:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800dc5c:	eba5 0808 	sub.w	r8, r5, r8
 800dc60:	ebb3 0808 	subs.w	r8, r3, r8
 800dc64:	690b      	ldr	r3, [r1, #16]
 800dc66:	f103 33ff 	add.w	r3, r3, #4294967295
 800dc6a:	bf48      	it	mi
 800dc6c:	f108 0807 	addmi.w	r8, r8, #7
 800dc70:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800dc74:	4443      	add	r3, r8
 800dc76:	454b      	cmp	r3, r9
 800dc78:	da05      	bge.n	800dc86 <__tzcalc_limits+0x142>
 800dc7a:	4473      	add	r3, lr
 800dc7c:	e7ac      	b.n	800dbd8 <__tzcalc_limits+0x94>
 800dc7e:	4635      	mov	r5, r6
 800dc80:	e7d4      	b.n	800dc2c <__tzcalc_limits+0xe8>
 800dc82:	44ce      	add	lr, r9
 800dc84:	e7dd      	b.n	800dc42 <__tzcalc_limits+0xfe>
 800dc86:	3b07      	subs	r3, #7
 800dc88:	e7f5      	b.n	800dc76 <__tzcalc_limits+0x132>
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	e7bf      	b.n	800dc0e <__tzcalc_limits+0xca>
 800dc8e:	bf00      	nop
 800dc90:	00015180 	.word	0x00015180
 800dc94:	0803d624 	.word	0x0803d624

0800dc98 <__tz_lock>:
 800dc98:	4801      	ldr	r0, [pc, #4]	; (800dca0 <__tz_lock+0x8>)
 800dc9a:	f001 bb14 	b.w	800f2c6 <__retarget_lock_acquire>
 800dc9e:	bf00      	nop
 800dca0:	200037e8 	.word	0x200037e8

0800dca4 <__tz_unlock>:
 800dca4:	4801      	ldr	r0, [pc, #4]	; (800dcac <__tz_unlock+0x8>)
 800dca6:	f001 bb10 	b.w	800f2ca <__retarget_lock_release>
 800dcaa:	bf00      	nop
 800dcac:	200037e8 	.word	0x200037e8

0800dcb0 <_tzset_unlocked>:
 800dcb0:	4b01      	ldr	r3, [pc, #4]	; (800dcb8 <_tzset_unlocked+0x8>)
 800dcb2:	6818      	ldr	r0, [r3, #0]
 800dcb4:	f000 b802 	b.w	800dcbc <_tzset_unlocked_r>
 800dcb8:	200002bc 	.word	0x200002bc

0800dcbc <_tzset_unlocked_r>:
 800dcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc0:	b08d      	sub	sp, #52	; 0x34
 800dcc2:	4607      	mov	r7, r0
 800dcc4:	f001 faf2 	bl	800f2ac <__gettzinfo>
 800dcc8:	49b0      	ldr	r1, [pc, #704]	; (800df8c <_tzset_unlocked_r+0x2d0>)
 800dcca:	4eb1      	ldr	r6, [pc, #708]	; (800df90 <_tzset_unlocked_r+0x2d4>)
 800dccc:	4605      	mov	r5, r0
 800dcce:	4638      	mov	r0, r7
 800dcd0:	f001 fae4 	bl	800f29c <_getenv_r>
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	b970      	cbnz	r0, 800dcf6 <_tzset_unlocked_r+0x3a>
 800dcd8:	4bae      	ldr	r3, [pc, #696]	; (800df94 <_tzset_unlocked_r+0x2d8>)
 800dcda:	4aaf      	ldr	r2, [pc, #700]	; (800df98 <_tzset_unlocked_r+0x2dc>)
 800dcdc:	6018      	str	r0, [r3, #0]
 800dcde:	4baf      	ldr	r3, [pc, #700]	; (800df9c <_tzset_unlocked_r+0x2e0>)
 800dce0:	6018      	str	r0, [r3, #0]
 800dce2:	4baf      	ldr	r3, [pc, #700]	; (800dfa0 <_tzset_unlocked_r+0x2e4>)
 800dce4:	6830      	ldr	r0, [r6, #0]
 800dce6:	e9c3 2200 	strd	r2, r2, [r3]
 800dcea:	f7fd ff89 	bl	800bc00 <free>
 800dcee:	6034      	str	r4, [r6, #0]
 800dcf0:	b00d      	add	sp, #52	; 0x34
 800dcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf6:	6831      	ldr	r1, [r6, #0]
 800dcf8:	2900      	cmp	r1, #0
 800dcfa:	d162      	bne.n	800ddc2 <_tzset_unlocked_r+0x106>
 800dcfc:	6830      	ldr	r0, [r6, #0]
 800dcfe:	f7fd ff7f 	bl	800bc00 <free>
 800dd02:	4620      	mov	r0, r4
 800dd04:	f7f2 fa74 	bl	80001f0 <strlen>
 800dd08:	1c41      	adds	r1, r0, #1
 800dd0a:	4638      	mov	r0, r7
 800dd0c:	f7fe fa74 	bl	800c1f8 <_malloc_r>
 800dd10:	6030      	str	r0, [r6, #0]
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d15a      	bne.n	800ddcc <_tzset_unlocked_r+0x110>
 800dd16:	7823      	ldrb	r3, [r4, #0]
 800dd18:	4aa2      	ldr	r2, [pc, #648]	; (800dfa4 <_tzset_unlocked_r+0x2e8>)
 800dd1a:	49a3      	ldr	r1, [pc, #652]	; (800dfa8 <_tzset_unlocked_r+0x2ec>)
 800dd1c:	2b3a      	cmp	r3, #58	; 0x3a
 800dd1e:	bf08      	it	eq
 800dd20:	3401      	addeq	r4, #1
 800dd22:	ae0a      	add	r6, sp, #40	; 0x28
 800dd24:	4633      	mov	r3, r6
 800dd26:	4620      	mov	r0, r4
 800dd28:	f7ff f8ce 	bl	800cec8 <siscanf>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	dddf      	ble.n	800dcf0 <_tzset_unlocked_r+0x34>
 800dd30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd32:	18e7      	adds	r7, r4, r3
 800dd34:	5ce3      	ldrb	r3, [r4, r3]
 800dd36:	2b2d      	cmp	r3, #45	; 0x2d
 800dd38:	d14c      	bne.n	800ddd4 <_tzset_unlocked_r+0x118>
 800dd3a:	3701      	adds	r7, #1
 800dd3c:	f04f 38ff 	mov.w	r8, #4294967295
 800dd40:	f10d 0a20 	add.w	sl, sp, #32
 800dd44:	f10d 0b1e 	add.w	fp, sp, #30
 800dd48:	2400      	movs	r4, #0
 800dd4a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800dd4e:	4997      	ldr	r1, [pc, #604]	; (800dfac <_tzset_unlocked_r+0x2f0>)
 800dd50:	9603      	str	r6, [sp, #12]
 800dd52:	f8cd b000 	str.w	fp, [sp]
 800dd56:	4633      	mov	r3, r6
 800dd58:	aa07      	add	r2, sp, #28
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	f8ad 401e 	strh.w	r4, [sp, #30]
 800dd60:	f8ad 4020 	strh.w	r4, [sp, #32]
 800dd64:	f7ff f8b0 	bl	800cec8 <siscanf>
 800dd68:	42a0      	cmp	r0, r4
 800dd6a:	ddc1      	ble.n	800dcf0 <_tzset_unlocked_r+0x34>
 800dd6c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800dd70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800dd74:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800dfb8 <_tzset_unlocked_r+0x2fc>
 800dd78:	213c      	movs	r1, #60	; 0x3c
 800dd7a:	fb01 3302 	mla	r3, r1, r2, r3
 800dd7e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800dd82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800dd86:	fb01 3302 	mla	r3, r1, r2, r3
 800dd8a:	fb08 f303 	mul.w	r3, r8, r3
 800dd8e:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800dfa0 <_tzset_unlocked_r+0x2e4>
 800dd92:	62ab      	str	r3, [r5, #40]	; 0x28
 800dd94:	4b83      	ldr	r3, [pc, #524]	; (800dfa4 <_tzset_unlocked_r+0x2e8>)
 800dd96:	f8c8 3000 	str.w	r3, [r8]
 800dd9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd9c:	4982      	ldr	r1, [pc, #520]	; (800dfa8 <_tzset_unlocked_r+0x2ec>)
 800dd9e:	441f      	add	r7, r3
 800dda0:	464a      	mov	r2, r9
 800dda2:	4633      	mov	r3, r6
 800dda4:	4638      	mov	r0, r7
 800dda6:	f7ff f88f 	bl	800cec8 <siscanf>
 800ddaa:	42a0      	cmp	r0, r4
 800ddac:	dc18      	bgt.n	800dde0 <_tzset_unlocked_r+0x124>
 800ddae:	f8d8 3000 	ldr.w	r3, [r8]
 800ddb2:	f8c8 3004 	str.w	r3, [r8, #4]
 800ddb6:	4b77      	ldr	r3, [pc, #476]	; (800df94 <_tzset_unlocked_r+0x2d8>)
 800ddb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ddba:	601a      	str	r2, [r3, #0]
 800ddbc:	4b77      	ldr	r3, [pc, #476]	; (800df9c <_tzset_unlocked_r+0x2e0>)
 800ddbe:	601c      	str	r4, [r3, #0]
 800ddc0:	e796      	b.n	800dcf0 <_tzset_unlocked_r+0x34>
 800ddc2:	f7f2 fa6d 	bl	80002a0 <strcmp>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d198      	bne.n	800dcfc <_tzset_unlocked_r+0x40>
 800ddca:	e791      	b.n	800dcf0 <_tzset_unlocked_r+0x34>
 800ddcc:	4621      	mov	r1, r4
 800ddce:	f002 fc27 	bl	8010620 <strcpy>
 800ddd2:	e7a0      	b.n	800dd16 <_tzset_unlocked_r+0x5a>
 800ddd4:	2b2b      	cmp	r3, #43	; 0x2b
 800ddd6:	bf08      	it	eq
 800ddd8:	3701      	addeq	r7, #1
 800ddda:	f04f 0801 	mov.w	r8, #1
 800ddde:	e7af      	b.n	800dd40 <_tzset_unlocked_r+0x84>
 800dde0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dde2:	f8c8 9004 	str.w	r9, [r8, #4]
 800dde6:	18fc      	adds	r4, r7, r3
 800dde8:	5cfb      	ldrb	r3, [r7, r3]
 800ddea:	2b2d      	cmp	r3, #45	; 0x2d
 800ddec:	f040 808b 	bne.w	800df06 <_tzset_unlocked_r+0x24a>
 800ddf0:	3401      	adds	r4, #1
 800ddf2:	f04f 37ff 	mov.w	r7, #4294967295
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ddfc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800de00:	f8ad 3020 	strh.w	r3, [sp, #32]
 800de04:	930a      	str	r3, [sp, #40]	; 0x28
 800de06:	e9cd a602 	strd	sl, r6, [sp, #8]
 800de0a:	e9cd b600 	strd	fp, r6, [sp]
 800de0e:	4967      	ldr	r1, [pc, #412]	; (800dfac <_tzset_unlocked_r+0x2f0>)
 800de10:	4633      	mov	r3, r6
 800de12:	aa07      	add	r2, sp, #28
 800de14:	4620      	mov	r0, r4
 800de16:	f7ff f857 	bl	800cec8 <siscanf>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	dc78      	bgt.n	800df10 <_tzset_unlocked_r+0x254>
 800de1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800de20:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800de24:	652b      	str	r3, [r5, #80]	; 0x50
 800de26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de28:	462f      	mov	r7, r5
 800de2a:	441c      	add	r4, r3
 800de2c:	f04f 0900 	mov.w	r9, #0
 800de30:	7823      	ldrb	r3, [r4, #0]
 800de32:	2b2c      	cmp	r3, #44	; 0x2c
 800de34:	bf08      	it	eq
 800de36:	3401      	addeq	r4, #1
 800de38:	f894 8000 	ldrb.w	r8, [r4]
 800de3c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800de40:	d178      	bne.n	800df34 <_tzset_unlocked_r+0x278>
 800de42:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800de46:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800de4a:	ab09      	add	r3, sp, #36	; 0x24
 800de4c:	9300      	str	r3, [sp, #0]
 800de4e:	4958      	ldr	r1, [pc, #352]	; (800dfb0 <_tzset_unlocked_r+0x2f4>)
 800de50:	9603      	str	r6, [sp, #12]
 800de52:	4633      	mov	r3, r6
 800de54:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800de58:	4620      	mov	r0, r4
 800de5a:	f7ff f835 	bl	800cec8 <siscanf>
 800de5e:	2803      	cmp	r0, #3
 800de60:	f47f af46 	bne.w	800dcf0 <_tzset_unlocked_r+0x34>
 800de64:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800de68:	1e4b      	subs	r3, r1, #1
 800de6a:	2b0b      	cmp	r3, #11
 800de6c:	f63f af40 	bhi.w	800dcf0 <_tzset_unlocked_r+0x34>
 800de70:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800de74:	1e53      	subs	r3, r2, #1
 800de76:	2b04      	cmp	r3, #4
 800de78:	f63f af3a 	bhi.w	800dcf0 <_tzset_unlocked_r+0x34>
 800de7c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800de80:	2b06      	cmp	r3, #6
 800de82:	f63f af35 	bhi.w	800dcf0 <_tzset_unlocked_r+0x34>
 800de86:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800de8a:	f887 8008 	strb.w	r8, [r7, #8]
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de92:	eb04 0803 	add.w	r8, r4, r3
 800de96:	2302      	movs	r3, #2
 800de98:	f8ad 301c 	strh.w	r3, [sp, #28]
 800de9c:	2300      	movs	r3, #0
 800de9e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800dea2:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dea6:	930a      	str	r3, [sp, #40]	; 0x28
 800dea8:	f898 3000 	ldrb.w	r3, [r8]
 800deac:	2b2f      	cmp	r3, #47	; 0x2f
 800deae:	d109      	bne.n	800dec4 <_tzset_unlocked_r+0x208>
 800deb0:	e9cd a602 	strd	sl, r6, [sp, #8]
 800deb4:	e9cd b600 	strd	fp, r6, [sp]
 800deb8:	493e      	ldr	r1, [pc, #248]	; (800dfb4 <_tzset_unlocked_r+0x2f8>)
 800deba:	4633      	mov	r3, r6
 800debc:	aa07      	add	r2, sp, #28
 800debe:	4640      	mov	r0, r8
 800dec0:	f7ff f802 	bl	800cec8 <siscanf>
 800dec4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800dec8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800decc:	213c      	movs	r1, #60	; 0x3c
 800dece:	fb01 3302 	mla	r3, r1, r2, r3
 800ded2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ded6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800deda:	fb01 3302 	mla	r3, r1, r2, r3
 800dede:	61bb      	str	r3, [r7, #24]
 800dee0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dee2:	3728      	adds	r7, #40	; 0x28
 800dee4:	4444      	add	r4, r8
 800dee6:	f1b9 0f00 	cmp.w	r9, #0
 800deea:	d020      	beq.n	800df2e <_tzset_unlocked_r+0x272>
 800deec:	6868      	ldr	r0, [r5, #4]
 800deee:	f7ff fe29 	bl	800db44 <__tzcalc_limits>
 800def2:	4b28      	ldr	r3, [pc, #160]	; (800df94 <_tzset_unlocked_r+0x2d8>)
 800def4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800def6:	601a      	str	r2, [r3, #0]
 800def8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800defa:	1a9b      	subs	r3, r3, r2
 800defc:	4a27      	ldr	r2, [pc, #156]	; (800df9c <_tzset_unlocked_r+0x2e0>)
 800defe:	bf18      	it	ne
 800df00:	2301      	movne	r3, #1
 800df02:	6013      	str	r3, [r2, #0]
 800df04:	e6f4      	b.n	800dcf0 <_tzset_unlocked_r+0x34>
 800df06:	2b2b      	cmp	r3, #43	; 0x2b
 800df08:	bf08      	it	eq
 800df0a:	3401      	addeq	r4, #1
 800df0c:	2701      	movs	r7, #1
 800df0e:	e772      	b.n	800ddf6 <_tzset_unlocked_r+0x13a>
 800df10:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800df14:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800df18:	213c      	movs	r1, #60	; 0x3c
 800df1a:	fb01 3302 	mla	r3, r1, r2, r3
 800df1e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800df22:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800df26:	fb01 3302 	mla	r3, r1, r2, r3
 800df2a:	437b      	muls	r3, r7
 800df2c:	e77a      	b.n	800de24 <_tzset_unlocked_r+0x168>
 800df2e:	f04f 0901 	mov.w	r9, #1
 800df32:	e77d      	b.n	800de30 <_tzset_unlocked_r+0x174>
 800df34:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800df38:	bf06      	itte	eq
 800df3a:	3401      	addeq	r4, #1
 800df3c:	4643      	moveq	r3, r8
 800df3e:	2344      	movne	r3, #68	; 0x44
 800df40:	220a      	movs	r2, #10
 800df42:	a90b      	add	r1, sp, #44	; 0x2c
 800df44:	4620      	mov	r0, r4
 800df46:	9305      	str	r3, [sp, #20]
 800df48:	f7ff fdf2 	bl	800db30 <strtoul>
 800df4c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800df50:	9b05      	ldr	r3, [sp, #20]
 800df52:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800df56:	45a0      	cmp	r8, r4
 800df58:	d114      	bne.n	800df84 <_tzset_unlocked_r+0x2c8>
 800df5a:	234d      	movs	r3, #77	; 0x4d
 800df5c:	f1b9 0f00 	cmp.w	r9, #0
 800df60:	d107      	bne.n	800df72 <_tzset_unlocked_r+0x2b6>
 800df62:	722b      	strb	r3, [r5, #8]
 800df64:	2103      	movs	r1, #3
 800df66:	2302      	movs	r3, #2
 800df68:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800df6c:	f8c5 9014 	str.w	r9, [r5, #20]
 800df70:	e791      	b.n	800de96 <_tzset_unlocked_r+0x1da>
 800df72:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800df76:	220b      	movs	r2, #11
 800df78:	2301      	movs	r3, #1
 800df7a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800df7e:	2300      	movs	r3, #0
 800df80:	63eb      	str	r3, [r5, #60]	; 0x3c
 800df82:	e788      	b.n	800de96 <_tzset_unlocked_r+0x1da>
 800df84:	b280      	uxth	r0, r0
 800df86:	723b      	strb	r3, [r7, #8]
 800df88:	6178      	str	r0, [r7, #20]
 800df8a:	e784      	b.n	800de96 <_tzset_unlocked_r+0x1da>
 800df8c:	0803d40c 	.word	0x0803d40c
 800df90:	200037d8 	.word	0x200037d8
 800df94:	200037e0 	.word	0x200037e0
 800df98:	0803d40f 	.word	0x0803d40f
 800df9c:	200037dc 	.word	0x200037dc
 800dfa0:	20000320 	.word	0x20000320
 800dfa4:	200037cb 	.word	0x200037cb
 800dfa8:	0803d413 	.word	0x0803d413
 800dfac:	0803d436 	.word	0x0803d436
 800dfb0:	0803d422 	.word	0x0803d422
 800dfb4:	0803d435 	.word	0x0803d435
 800dfb8:	200037c0 	.word	0x200037c0

0800dfbc <__swbuf_r>:
 800dfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfbe:	460e      	mov	r6, r1
 800dfc0:	4614      	mov	r4, r2
 800dfc2:	4605      	mov	r5, r0
 800dfc4:	b118      	cbz	r0, 800dfce <__swbuf_r+0x12>
 800dfc6:	6983      	ldr	r3, [r0, #24]
 800dfc8:	b90b      	cbnz	r3, 800dfce <__swbuf_r+0x12>
 800dfca:	f001 f88d 	bl	800f0e8 <__sinit>
 800dfce:	4b21      	ldr	r3, [pc, #132]	; (800e054 <__swbuf_r+0x98>)
 800dfd0:	429c      	cmp	r4, r3
 800dfd2:	d12b      	bne.n	800e02c <__swbuf_r+0x70>
 800dfd4:	686c      	ldr	r4, [r5, #4]
 800dfd6:	69a3      	ldr	r3, [r4, #24]
 800dfd8:	60a3      	str	r3, [r4, #8]
 800dfda:	89a3      	ldrh	r3, [r4, #12]
 800dfdc:	071a      	lsls	r2, r3, #28
 800dfde:	d52f      	bpl.n	800e040 <__swbuf_r+0x84>
 800dfe0:	6923      	ldr	r3, [r4, #16]
 800dfe2:	b36b      	cbz	r3, 800e040 <__swbuf_r+0x84>
 800dfe4:	6923      	ldr	r3, [r4, #16]
 800dfe6:	6820      	ldr	r0, [r4, #0]
 800dfe8:	1ac0      	subs	r0, r0, r3
 800dfea:	6963      	ldr	r3, [r4, #20]
 800dfec:	b2f6      	uxtb	r6, r6
 800dfee:	4283      	cmp	r3, r0
 800dff0:	4637      	mov	r7, r6
 800dff2:	dc04      	bgt.n	800dffe <__swbuf_r+0x42>
 800dff4:	4621      	mov	r1, r4
 800dff6:	4628      	mov	r0, r5
 800dff8:	f000 ffe2 	bl	800efc0 <_fflush_r>
 800dffc:	bb30      	cbnz	r0, 800e04c <__swbuf_r+0x90>
 800dffe:	68a3      	ldr	r3, [r4, #8]
 800e000:	3b01      	subs	r3, #1
 800e002:	60a3      	str	r3, [r4, #8]
 800e004:	6823      	ldr	r3, [r4, #0]
 800e006:	1c5a      	adds	r2, r3, #1
 800e008:	6022      	str	r2, [r4, #0]
 800e00a:	701e      	strb	r6, [r3, #0]
 800e00c:	6963      	ldr	r3, [r4, #20]
 800e00e:	3001      	adds	r0, #1
 800e010:	4283      	cmp	r3, r0
 800e012:	d004      	beq.n	800e01e <__swbuf_r+0x62>
 800e014:	89a3      	ldrh	r3, [r4, #12]
 800e016:	07db      	lsls	r3, r3, #31
 800e018:	d506      	bpl.n	800e028 <__swbuf_r+0x6c>
 800e01a:	2e0a      	cmp	r6, #10
 800e01c:	d104      	bne.n	800e028 <__swbuf_r+0x6c>
 800e01e:	4621      	mov	r1, r4
 800e020:	4628      	mov	r0, r5
 800e022:	f000 ffcd 	bl	800efc0 <_fflush_r>
 800e026:	b988      	cbnz	r0, 800e04c <__swbuf_r+0x90>
 800e028:	4638      	mov	r0, r7
 800e02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e02c:	4b0a      	ldr	r3, [pc, #40]	; (800e058 <__swbuf_r+0x9c>)
 800e02e:	429c      	cmp	r4, r3
 800e030:	d101      	bne.n	800e036 <__swbuf_r+0x7a>
 800e032:	68ac      	ldr	r4, [r5, #8]
 800e034:	e7cf      	b.n	800dfd6 <__swbuf_r+0x1a>
 800e036:	4b09      	ldr	r3, [pc, #36]	; (800e05c <__swbuf_r+0xa0>)
 800e038:	429c      	cmp	r4, r3
 800e03a:	bf08      	it	eq
 800e03c:	68ec      	ldreq	r4, [r5, #12]
 800e03e:	e7ca      	b.n	800dfd6 <__swbuf_r+0x1a>
 800e040:	4621      	mov	r1, r4
 800e042:	4628      	mov	r0, r5
 800e044:	f000 f81e 	bl	800e084 <__swsetup_r>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d0cb      	beq.n	800dfe4 <__swbuf_r+0x28>
 800e04c:	f04f 37ff 	mov.w	r7, #4294967295
 800e050:	e7ea      	b.n	800e028 <__swbuf_r+0x6c>
 800e052:	bf00      	nop
 800e054:	0803d5e4 	.word	0x0803d5e4
 800e058:	0803d604 	.word	0x0803d604
 800e05c:	0803d5c4 	.word	0x0803d5c4

0800e060 <_write_r>:
 800e060:	b538      	push	{r3, r4, r5, lr}
 800e062:	4d07      	ldr	r5, [pc, #28]	; (800e080 <_write_r+0x20>)
 800e064:	4604      	mov	r4, r0
 800e066:	4608      	mov	r0, r1
 800e068:	4611      	mov	r1, r2
 800e06a:	2200      	movs	r2, #0
 800e06c:	602a      	str	r2, [r5, #0]
 800e06e:	461a      	mov	r2, r3
 800e070:	f005 f88a 	bl	8013188 <_write>
 800e074:	1c43      	adds	r3, r0, #1
 800e076:	d102      	bne.n	800e07e <_write_r+0x1e>
 800e078:	682b      	ldr	r3, [r5, #0]
 800e07a:	b103      	cbz	r3, 800e07e <_write_r+0x1e>
 800e07c:	6023      	str	r3, [r4, #0]
 800e07e:	bd38      	pop	{r3, r4, r5, pc}
 800e080:	200037ec 	.word	0x200037ec

0800e084 <__swsetup_r>:
 800e084:	4b32      	ldr	r3, [pc, #200]	; (800e150 <__swsetup_r+0xcc>)
 800e086:	b570      	push	{r4, r5, r6, lr}
 800e088:	681d      	ldr	r5, [r3, #0]
 800e08a:	4606      	mov	r6, r0
 800e08c:	460c      	mov	r4, r1
 800e08e:	b125      	cbz	r5, 800e09a <__swsetup_r+0x16>
 800e090:	69ab      	ldr	r3, [r5, #24]
 800e092:	b913      	cbnz	r3, 800e09a <__swsetup_r+0x16>
 800e094:	4628      	mov	r0, r5
 800e096:	f001 f827 	bl	800f0e8 <__sinit>
 800e09a:	4b2e      	ldr	r3, [pc, #184]	; (800e154 <__swsetup_r+0xd0>)
 800e09c:	429c      	cmp	r4, r3
 800e09e:	d10f      	bne.n	800e0c0 <__swsetup_r+0x3c>
 800e0a0:	686c      	ldr	r4, [r5, #4]
 800e0a2:	89a3      	ldrh	r3, [r4, #12]
 800e0a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0a8:	0719      	lsls	r1, r3, #28
 800e0aa:	d42c      	bmi.n	800e106 <__swsetup_r+0x82>
 800e0ac:	06dd      	lsls	r5, r3, #27
 800e0ae:	d411      	bmi.n	800e0d4 <__swsetup_r+0x50>
 800e0b0:	2309      	movs	r3, #9
 800e0b2:	6033      	str	r3, [r6, #0]
 800e0b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e0b8:	81a3      	strh	r3, [r4, #12]
 800e0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e0be:	e03e      	b.n	800e13e <__swsetup_r+0xba>
 800e0c0:	4b25      	ldr	r3, [pc, #148]	; (800e158 <__swsetup_r+0xd4>)
 800e0c2:	429c      	cmp	r4, r3
 800e0c4:	d101      	bne.n	800e0ca <__swsetup_r+0x46>
 800e0c6:	68ac      	ldr	r4, [r5, #8]
 800e0c8:	e7eb      	b.n	800e0a2 <__swsetup_r+0x1e>
 800e0ca:	4b24      	ldr	r3, [pc, #144]	; (800e15c <__swsetup_r+0xd8>)
 800e0cc:	429c      	cmp	r4, r3
 800e0ce:	bf08      	it	eq
 800e0d0:	68ec      	ldreq	r4, [r5, #12]
 800e0d2:	e7e6      	b.n	800e0a2 <__swsetup_r+0x1e>
 800e0d4:	0758      	lsls	r0, r3, #29
 800e0d6:	d512      	bpl.n	800e0fe <__swsetup_r+0x7a>
 800e0d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0da:	b141      	cbz	r1, 800e0ee <__swsetup_r+0x6a>
 800e0dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0e0:	4299      	cmp	r1, r3
 800e0e2:	d002      	beq.n	800e0ea <__swsetup_r+0x66>
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	f7fe f81b 	bl	800c120 <_free_r>
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	6363      	str	r3, [r4, #52]	; 0x34
 800e0ee:	89a3      	ldrh	r3, [r4, #12]
 800e0f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0f4:	81a3      	strh	r3, [r4, #12]
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	6063      	str	r3, [r4, #4]
 800e0fa:	6923      	ldr	r3, [r4, #16]
 800e0fc:	6023      	str	r3, [r4, #0]
 800e0fe:	89a3      	ldrh	r3, [r4, #12]
 800e100:	f043 0308 	orr.w	r3, r3, #8
 800e104:	81a3      	strh	r3, [r4, #12]
 800e106:	6923      	ldr	r3, [r4, #16]
 800e108:	b94b      	cbnz	r3, 800e11e <__swsetup_r+0x9a>
 800e10a:	89a3      	ldrh	r3, [r4, #12]
 800e10c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e114:	d003      	beq.n	800e11e <__swsetup_r+0x9a>
 800e116:	4621      	mov	r1, r4
 800e118:	4630      	mov	r0, r6
 800e11a:	f001 f911 	bl	800f340 <__smakebuf_r>
 800e11e:	89a0      	ldrh	r0, [r4, #12]
 800e120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e124:	f010 0301 	ands.w	r3, r0, #1
 800e128:	d00a      	beq.n	800e140 <__swsetup_r+0xbc>
 800e12a:	2300      	movs	r3, #0
 800e12c:	60a3      	str	r3, [r4, #8]
 800e12e:	6963      	ldr	r3, [r4, #20]
 800e130:	425b      	negs	r3, r3
 800e132:	61a3      	str	r3, [r4, #24]
 800e134:	6923      	ldr	r3, [r4, #16]
 800e136:	b943      	cbnz	r3, 800e14a <__swsetup_r+0xc6>
 800e138:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e13c:	d1ba      	bne.n	800e0b4 <__swsetup_r+0x30>
 800e13e:	bd70      	pop	{r4, r5, r6, pc}
 800e140:	0781      	lsls	r1, r0, #30
 800e142:	bf58      	it	pl
 800e144:	6963      	ldrpl	r3, [r4, #20]
 800e146:	60a3      	str	r3, [r4, #8]
 800e148:	e7f4      	b.n	800e134 <__swsetup_r+0xb0>
 800e14a:	2000      	movs	r0, #0
 800e14c:	e7f7      	b.n	800e13e <__swsetup_r+0xba>
 800e14e:	bf00      	nop
 800e150:	200002bc 	.word	0x200002bc
 800e154:	0803d5e4 	.word	0x0803d5e4
 800e158:	0803d604 	.word	0x0803d604
 800e15c:	0803d5c4 	.word	0x0803d5c4

0800e160 <abort>:
 800e160:	b508      	push	{r3, lr}
 800e162:	2006      	movs	r0, #6
 800e164:	f002 fa0c 	bl	8010580 <raise>
 800e168:	2001      	movs	r0, #1
 800e16a:	f005 f815 	bl	8013198 <_exit>

0800e16e <abs>:
 800e16e:	2800      	cmp	r0, #0
 800e170:	bfb8      	it	lt
 800e172:	4240      	neglt	r0, r0
 800e174:	4770      	bx	lr
	...

0800e178 <_close_r>:
 800e178:	b538      	push	{r3, r4, r5, lr}
 800e17a:	4d06      	ldr	r5, [pc, #24]	; (800e194 <_close_r+0x1c>)
 800e17c:	2300      	movs	r3, #0
 800e17e:	4604      	mov	r4, r0
 800e180:	4608      	mov	r0, r1
 800e182:	602b      	str	r3, [r5, #0]
 800e184:	f004 ffba 	bl	80130fc <_close>
 800e188:	1c43      	adds	r3, r0, #1
 800e18a:	d102      	bne.n	800e192 <_close_r+0x1a>
 800e18c:	682b      	ldr	r3, [r5, #0]
 800e18e:	b103      	cbz	r3, 800e192 <_close_r+0x1a>
 800e190:	6023      	str	r3, [r4, #0]
 800e192:	bd38      	pop	{r3, r4, r5, pc}
 800e194:	200037ec 	.word	0x200037ec

0800e198 <div>:
 800e198:	2900      	cmp	r1, #0
 800e19a:	b510      	push	{r4, lr}
 800e19c:	fb91 f4f2 	sdiv	r4, r1, r2
 800e1a0:	fb02 1314 	mls	r3, r2, r4, r1
 800e1a4:	db06      	blt.n	800e1b4 <div+0x1c>
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	da01      	bge.n	800e1ae <div+0x16>
 800e1aa:	3401      	adds	r4, #1
 800e1ac:	1a9b      	subs	r3, r3, r2
 800e1ae:	e9c0 4300 	strd	r4, r3, [r0]
 800e1b2:	bd10      	pop	{r4, pc}
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	bfc4      	itt	gt
 800e1b8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800e1bc:	189b      	addgt	r3, r3, r2
 800e1be:	e7f6      	b.n	800e1ae <div+0x16>

0800e1c0 <quorem>:
 800e1c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c4:	6903      	ldr	r3, [r0, #16]
 800e1c6:	690c      	ldr	r4, [r1, #16]
 800e1c8:	42a3      	cmp	r3, r4
 800e1ca:	4607      	mov	r7, r0
 800e1cc:	f2c0 8081 	blt.w	800e2d2 <quorem+0x112>
 800e1d0:	3c01      	subs	r4, #1
 800e1d2:	f101 0814 	add.w	r8, r1, #20
 800e1d6:	f100 0514 	add.w	r5, r0, #20
 800e1da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1de:	9301      	str	r3, [sp, #4]
 800e1e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e1e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e1f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e1f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e1f8:	d331      	bcc.n	800e25e <quorem+0x9e>
 800e1fa:	f04f 0e00 	mov.w	lr, #0
 800e1fe:	4640      	mov	r0, r8
 800e200:	46ac      	mov	ip, r5
 800e202:	46f2      	mov	sl, lr
 800e204:	f850 2b04 	ldr.w	r2, [r0], #4
 800e208:	b293      	uxth	r3, r2
 800e20a:	fb06 e303 	mla	r3, r6, r3, lr
 800e20e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e212:	b29b      	uxth	r3, r3
 800e214:	ebaa 0303 	sub.w	r3, sl, r3
 800e218:	f8dc a000 	ldr.w	sl, [ip]
 800e21c:	0c12      	lsrs	r2, r2, #16
 800e21e:	fa13 f38a 	uxtah	r3, r3, sl
 800e222:	fb06 e202 	mla	r2, r6, r2, lr
 800e226:	9300      	str	r3, [sp, #0]
 800e228:	9b00      	ldr	r3, [sp, #0]
 800e22a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e22e:	b292      	uxth	r2, r2
 800e230:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e238:	f8bd 3000 	ldrh.w	r3, [sp]
 800e23c:	4581      	cmp	r9, r0
 800e23e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e242:	f84c 3b04 	str.w	r3, [ip], #4
 800e246:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e24a:	d2db      	bcs.n	800e204 <quorem+0x44>
 800e24c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e250:	b92b      	cbnz	r3, 800e25e <quorem+0x9e>
 800e252:	9b01      	ldr	r3, [sp, #4]
 800e254:	3b04      	subs	r3, #4
 800e256:	429d      	cmp	r5, r3
 800e258:	461a      	mov	r2, r3
 800e25a:	d32e      	bcc.n	800e2ba <quorem+0xfa>
 800e25c:	613c      	str	r4, [r7, #16]
 800e25e:	4638      	mov	r0, r7
 800e260:	f001 fb56 	bl	800f910 <__mcmp>
 800e264:	2800      	cmp	r0, #0
 800e266:	db24      	blt.n	800e2b2 <quorem+0xf2>
 800e268:	3601      	adds	r6, #1
 800e26a:	4628      	mov	r0, r5
 800e26c:	f04f 0c00 	mov.w	ip, #0
 800e270:	f858 2b04 	ldr.w	r2, [r8], #4
 800e274:	f8d0 e000 	ldr.w	lr, [r0]
 800e278:	b293      	uxth	r3, r2
 800e27a:	ebac 0303 	sub.w	r3, ip, r3
 800e27e:	0c12      	lsrs	r2, r2, #16
 800e280:	fa13 f38e 	uxtah	r3, r3, lr
 800e284:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e292:	45c1      	cmp	r9, r8
 800e294:	f840 3b04 	str.w	r3, [r0], #4
 800e298:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e29c:	d2e8      	bcs.n	800e270 <quorem+0xb0>
 800e29e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e2a6:	b922      	cbnz	r2, 800e2b2 <quorem+0xf2>
 800e2a8:	3b04      	subs	r3, #4
 800e2aa:	429d      	cmp	r5, r3
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	d30a      	bcc.n	800e2c6 <quorem+0x106>
 800e2b0:	613c      	str	r4, [r7, #16]
 800e2b2:	4630      	mov	r0, r6
 800e2b4:	b003      	add	sp, #12
 800e2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ba:	6812      	ldr	r2, [r2, #0]
 800e2bc:	3b04      	subs	r3, #4
 800e2be:	2a00      	cmp	r2, #0
 800e2c0:	d1cc      	bne.n	800e25c <quorem+0x9c>
 800e2c2:	3c01      	subs	r4, #1
 800e2c4:	e7c7      	b.n	800e256 <quorem+0x96>
 800e2c6:	6812      	ldr	r2, [r2, #0]
 800e2c8:	3b04      	subs	r3, #4
 800e2ca:	2a00      	cmp	r2, #0
 800e2cc:	d1f0      	bne.n	800e2b0 <quorem+0xf0>
 800e2ce:	3c01      	subs	r4, #1
 800e2d0:	e7eb      	b.n	800e2aa <quorem+0xea>
 800e2d2:	2000      	movs	r0, #0
 800e2d4:	e7ee      	b.n	800e2b4 <quorem+0xf4>
	...

0800e2d8 <_dtoa_r>:
 800e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2dc:	ed2d 8b04 	vpush	{d8-d9}
 800e2e0:	ec57 6b10 	vmov	r6, r7, d0
 800e2e4:	b093      	sub	sp, #76	; 0x4c
 800e2e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e2e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e2ec:	9106      	str	r1, [sp, #24]
 800e2ee:	ee10 aa10 	vmov	sl, s0
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	9209      	str	r2, [sp, #36]	; 0x24
 800e2f6:	930c      	str	r3, [sp, #48]	; 0x30
 800e2f8:	46bb      	mov	fp, r7
 800e2fa:	b975      	cbnz	r5, 800e31a <_dtoa_r+0x42>
 800e2fc:	2010      	movs	r0, #16
 800e2fe:	f7fd fc77 	bl	800bbf0 <malloc>
 800e302:	4602      	mov	r2, r0
 800e304:	6260      	str	r0, [r4, #36]	; 0x24
 800e306:	b920      	cbnz	r0, 800e312 <_dtoa_r+0x3a>
 800e308:	4ba7      	ldr	r3, [pc, #668]	; (800e5a8 <_dtoa_r+0x2d0>)
 800e30a:	21ea      	movs	r1, #234	; 0xea
 800e30c:	48a7      	ldr	r0, [pc, #668]	; (800e5ac <_dtoa_r+0x2d4>)
 800e30e:	f7fd fc1b 	bl	800bb48 <__assert_func>
 800e312:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e316:	6005      	str	r5, [r0, #0]
 800e318:	60c5      	str	r5, [r0, #12]
 800e31a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e31c:	6819      	ldr	r1, [r3, #0]
 800e31e:	b151      	cbz	r1, 800e336 <_dtoa_r+0x5e>
 800e320:	685a      	ldr	r2, [r3, #4]
 800e322:	604a      	str	r2, [r1, #4]
 800e324:	2301      	movs	r3, #1
 800e326:	4093      	lsls	r3, r2
 800e328:	608b      	str	r3, [r1, #8]
 800e32a:	4620      	mov	r0, r4
 800e32c:	f001 f8ae 	bl	800f48c <_Bfree>
 800e330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e332:	2200      	movs	r2, #0
 800e334:	601a      	str	r2, [r3, #0]
 800e336:	1e3b      	subs	r3, r7, #0
 800e338:	bfaa      	itet	ge
 800e33a:	2300      	movge	r3, #0
 800e33c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e340:	f8c8 3000 	strge.w	r3, [r8]
 800e344:	4b9a      	ldr	r3, [pc, #616]	; (800e5b0 <_dtoa_r+0x2d8>)
 800e346:	bfbc      	itt	lt
 800e348:	2201      	movlt	r2, #1
 800e34a:	f8c8 2000 	strlt.w	r2, [r8]
 800e34e:	ea33 030b 	bics.w	r3, r3, fp
 800e352:	d11b      	bne.n	800e38c <_dtoa_r+0xb4>
 800e354:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e356:	f242 730f 	movw	r3, #9999	; 0x270f
 800e35a:	6013      	str	r3, [r2, #0]
 800e35c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e360:	4333      	orrs	r3, r6
 800e362:	f000 8592 	beq.w	800ee8a <_dtoa_r+0xbb2>
 800e366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e368:	b963      	cbnz	r3, 800e384 <_dtoa_r+0xac>
 800e36a:	4b92      	ldr	r3, [pc, #584]	; (800e5b4 <_dtoa_r+0x2dc>)
 800e36c:	e022      	b.n	800e3b4 <_dtoa_r+0xdc>
 800e36e:	4b92      	ldr	r3, [pc, #584]	; (800e5b8 <_dtoa_r+0x2e0>)
 800e370:	9301      	str	r3, [sp, #4]
 800e372:	3308      	adds	r3, #8
 800e374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	9801      	ldr	r0, [sp, #4]
 800e37a:	b013      	add	sp, #76	; 0x4c
 800e37c:	ecbd 8b04 	vpop	{d8-d9}
 800e380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e384:	4b8b      	ldr	r3, [pc, #556]	; (800e5b4 <_dtoa_r+0x2dc>)
 800e386:	9301      	str	r3, [sp, #4]
 800e388:	3303      	adds	r3, #3
 800e38a:	e7f3      	b.n	800e374 <_dtoa_r+0x9c>
 800e38c:	2200      	movs	r2, #0
 800e38e:	2300      	movs	r3, #0
 800e390:	4650      	mov	r0, sl
 800e392:	4659      	mov	r1, fp
 800e394:	f7f2 fbb2 	bl	8000afc <__aeabi_dcmpeq>
 800e398:	ec4b ab19 	vmov	d9, sl, fp
 800e39c:	4680      	mov	r8, r0
 800e39e:	b158      	cbz	r0, 800e3b8 <_dtoa_r+0xe0>
 800e3a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	6013      	str	r3, [r2, #0]
 800e3a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f000 856b 	beq.w	800ee84 <_dtoa_r+0xbac>
 800e3ae:	4883      	ldr	r0, [pc, #524]	; (800e5bc <_dtoa_r+0x2e4>)
 800e3b0:	6018      	str	r0, [r3, #0]
 800e3b2:	1e43      	subs	r3, r0, #1
 800e3b4:	9301      	str	r3, [sp, #4]
 800e3b6:	e7df      	b.n	800e378 <_dtoa_r+0xa0>
 800e3b8:	ec4b ab10 	vmov	d0, sl, fp
 800e3bc:	aa10      	add	r2, sp, #64	; 0x40
 800e3be:	a911      	add	r1, sp, #68	; 0x44
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	f001 fb4b 	bl	800fa5c <__d2b>
 800e3c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e3ca:	ee08 0a10 	vmov	s16, r0
 800e3ce:	2d00      	cmp	r5, #0
 800e3d0:	f000 8084 	beq.w	800e4dc <_dtoa_r+0x204>
 800e3d4:	ee19 3a90 	vmov	r3, s19
 800e3d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e3e0:	4656      	mov	r6, sl
 800e3e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e3e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e3ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e3ee:	4b74      	ldr	r3, [pc, #464]	; (800e5c0 <_dtoa_r+0x2e8>)
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	4639      	mov	r1, r7
 800e3f6:	f7f1 ff61 	bl	80002bc <__aeabi_dsub>
 800e3fa:	a365      	add	r3, pc, #404	; (adr r3, 800e590 <_dtoa_r+0x2b8>)
 800e3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e400:	f7f2 f914 	bl	800062c <__aeabi_dmul>
 800e404:	a364      	add	r3, pc, #400	; (adr r3, 800e598 <_dtoa_r+0x2c0>)
 800e406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40a:	f7f1 ff59 	bl	80002c0 <__adddf3>
 800e40e:	4606      	mov	r6, r0
 800e410:	4628      	mov	r0, r5
 800e412:	460f      	mov	r7, r1
 800e414:	f7f2 f8a0 	bl	8000558 <__aeabi_i2d>
 800e418:	a361      	add	r3, pc, #388	; (adr r3, 800e5a0 <_dtoa_r+0x2c8>)
 800e41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41e:	f7f2 f905 	bl	800062c <__aeabi_dmul>
 800e422:	4602      	mov	r2, r0
 800e424:	460b      	mov	r3, r1
 800e426:	4630      	mov	r0, r6
 800e428:	4639      	mov	r1, r7
 800e42a:	f7f1 ff49 	bl	80002c0 <__adddf3>
 800e42e:	4606      	mov	r6, r0
 800e430:	460f      	mov	r7, r1
 800e432:	f7f2 fbab 	bl	8000b8c <__aeabi_d2iz>
 800e436:	2200      	movs	r2, #0
 800e438:	9000      	str	r0, [sp, #0]
 800e43a:	2300      	movs	r3, #0
 800e43c:	4630      	mov	r0, r6
 800e43e:	4639      	mov	r1, r7
 800e440:	f7f2 fb66 	bl	8000b10 <__aeabi_dcmplt>
 800e444:	b150      	cbz	r0, 800e45c <_dtoa_r+0x184>
 800e446:	9800      	ldr	r0, [sp, #0]
 800e448:	f7f2 f886 	bl	8000558 <__aeabi_i2d>
 800e44c:	4632      	mov	r2, r6
 800e44e:	463b      	mov	r3, r7
 800e450:	f7f2 fb54 	bl	8000afc <__aeabi_dcmpeq>
 800e454:	b910      	cbnz	r0, 800e45c <_dtoa_r+0x184>
 800e456:	9b00      	ldr	r3, [sp, #0]
 800e458:	3b01      	subs	r3, #1
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	9b00      	ldr	r3, [sp, #0]
 800e45e:	2b16      	cmp	r3, #22
 800e460:	d85a      	bhi.n	800e518 <_dtoa_r+0x240>
 800e462:	9a00      	ldr	r2, [sp, #0]
 800e464:	4b57      	ldr	r3, [pc, #348]	; (800e5c4 <_dtoa_r+0x2ec>)
 800e466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46e:	ec51 0b19 	vmov	r0, r1, d9
 800e472:	f7f2 fb4d 	bl	8000b10 <__aeabi_dcmplt>
 800e476:	2800      	cmp	r0, #0
 800e478:	d050      	beq.n	800e51c <_dtoa_r+0x244>
 800e47a:	9b00      	ldr	r3, [sp, #0]
 800e47c:	3b01      	subs	r3, #1
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	2300      	movs	r3, #0
 800e482:	930b      	str	r3, [sp, #44]	; 0x2c
 800e484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e486:	1b5d      	subs	r5, r3, r5
 800e488:	1e6b      	subs	r3, r5, #1
 800e48a:	9305      	str	r3, [sp, #20]
 800e48c:	bf45      	ittet	mi
 800e48e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e492:	9304      	strmi	r3, [sp, #16]
 800e494:	2300      	movpl	r3, #0
 800e496:	2300      	movmi	r3, #0
 800e498:	bf4c      	ite	mi
 800e49a:	9305      	strmi	r3, [sp, #20]
 800e49c:	9304      	strpl	r3, [sp, #16]
 800e49e:	9b00      	ldr	r3, [sp, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	db3d      	blt.n	800e520 <_dtoa_r+0x248>
 800e4a4:	9b05      	ldr	r3, [sp, #20]
 800e4a6:	9a00      	ldr	r2, [sp, #0]
 800e4a8:	920a      	str	r2, [sp, #40]	; 0x28
 800e4aa:	4413      	add	r3, r2
 800e4ac:	9305      	str	r3, [sp, #20]
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	9307      	str	r3, [sp, #28]
 800e4b2:	9b06      	ldr	r3, [sp, #24]
 800e4b4:	2b09      	cmp	r3, #9
 800e4b6:	f200 8089 	bhi.w	800e5cc <_dtoa_r+0x2f4>
 800e4ba:	2b05      	cmp	r3, #5
 800e4bc:	bfc4      	itt	gt
 800e4be:	3b04      	subgt	r3, #4
 800e4c0:	9306      	strgt	r3, [sp, #24]
 800e4c2:	9b06      	ldr	r3, [sp, #24]
 800e4c4:	f1a3 0302 	sub.w	r3, r3, #2
 800e4c8:	bfcc      	ite	gt
 800e4ca:	2500      	movgt	r5, #0
 800e4cc:	2501      	movle	r5, #1
 800e4ce:	2b03      	cmp	r3, #3
 800e4d0:	f200 8087 	bhi.w	800e5e2 <_dtoa_r+0x30a>
 800e4d4:	e8df f003 	tbb	[pc, r3]
 800e4d8:	59383a2d 	.word	0x59383a2d
 800e4dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e4e0:	441d      	add	r5, r3
 800e4e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e4e6:	2b20      	cmp	r3, #32
 800e4e8:	bfc1      	itttt	gt
 800e4ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e4ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e4f2:	fa0b f303 	lslgt.w	r3, fp, r3
 800e4f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e4fa:	bfda      	itte	le
 800e4fc:	f1c3 0320 	rsble	r3, r3, #32
 800e500:	fa06 f003 	lslle.w	r0, r6, r3
 800e504:	4318      	orrgt	r0, r3
 800e506:	f7f2 f817 	bl	8000538 <__aeabi_ui2d>
 800e50a:	2301      	movs	r3, #1
 800e50c:	4606      	mov	r6, r0
 800e50e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e512:	3d01      	subs	r5, #1
 800e514:	930e      	str	r3, [sp, #56]	; 0x38
 800e516:	e76a      	b.n	800e3ee <_dtoa_r+0x116>
 800e518:	2301      	movs	r3, #1
 800e51a:	e7b2      	b.n	800e482 <_dtoa_r+0x1aa>
 800e51c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e51e:	e7b1      	b.n	800e484 <_dtoa_r+0x1ac>
 800e520:	9b04      	ldr	r3, [sp, #16]
 800e522:	9a00      	ldr	r2, [sp, #0]
 800e524:	1a9b      	subs	r3, r3, r2
 800e526:	9304      	str	r3, [sp, #16]
 800e528:	4253      	negs	r3, r2
 800e52a:	9307      	str	r3, [sp, #28]
 800e52c:	2300      	movs	r3, #0
 800e52e:	930a      	str	r3, [sp, #40]	; 0x28
 800e530:	e7bf      	b.n	800e4b2 <_dtoa_r+0x1da>
 800e532:	2300      	movs	r3, #0
 800e534:	9308      	str	r3, [sp, #32]
 800e536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e538:	2b00      	cmp	r3, #0
 800e53a:	dc55      	bgt.n	800e5e8 <_dtoa_r+0x310>
 800e53c:	2301      	movs	r3, #1
 800e53e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e542:	461a      	mov	r2, r3
 800e544:	9209      	str	r2, [sp, #36]	; 0x24
 800e546:	e00c      	b.n	800e562 <_dtoa_r+0x28a>
 800e548:	2301      	movs	r3, #1
 800e54a:	e7f3      	b.n	800e534 <_dtoa_r+0x25c>
 800e54c:	2300      	movs	r3, #0
 800e54e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e550:	9308      	str	r3, [sp, #32]
 800e552:	9b00      	ldr	r3, [sp, #0]
 800e554:	4413      	add	r3, r2
 800e556:	9302      	str	r3, [sp, #8]
 800e558:	3301      	adds	r3, #1
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	9303      	str	r3, [sp, #12]
 800e55e:	bfb8      	it	lt
 800e560:	2301      	movlt	r3, #1
 800e562:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e564:	2200      	movs	r2, #0
 800e566:	6042      	str	r2, [r0, #4]
 800e568:	2204      	movs	r2, #4
 800e56a:	f102 0614 	add.w	r6, r2, #20
 800e56e:	429e      	cmp	r6, r3
 800e570:	6841      	ldr	r1, [r0, #4]
 800e572:	d93d      	bls.n	800e5f0 <_dtoa_r+0x318>
 800e574:	4620      	mov	r0, r4
 800e576:	f000 ff49 	bl	800f40c <_Balloc>
 800e57a:	9001      	str	r0, [sp, #4]
 800e57c:	2800      	cmp	r0, #0
 800e57e:	d13b      	bne.n	800e5f8 <_dtoa_r+0x320>
 800e580:	4b11      	ldr	r3, [pc, #68]	; (800e5c8 <_dtoa_r+0x2f0>)
 800e582:	4602      	mov	r2, r0
 800e584:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e588:	e6c0      	b.n	800e30c <_dtoa_r+0x34>
 800e58a:	2301      	movs	r3, #1
 800e58c:	e7df      	b.n	800e54e <_dtoa_r+0x276>
 800e58e:	bf00      	nop
 800e590:	636f4361 	.word	0x636f4361
 800e594:	3fd287a7 	.word	0x3fd287a7
 800e598:	8b60c8b3 	.word	0x8b60c8b3
 800e59c:	3fc68a28 	.word	0x3fc68a28
 800e5a0:	509f79fb 	.word	0x509f79fb
 800e5a4:	3fd34413 	.word	0x3fd34413
 800e5a8:	0803cfdc 	.word	0x0803cfdc
 800e5ac:	0803d556 	.word	0x0803d556
 800e5b0:	7ff00000 	.word	0x7ff00000
 800e5b4:	0803d552 	.word	0x0803d552
 800e5b8:	0803d549 	.word	0x0803d549
 800e5bc:	0803d7e1 	.word	0x0803d7e1
 800e5c0:	3ff80000 	.word	0x3ff80000
 800e5c4:	0803d708 	.word	0x0803d708
 800e5c8:	0803d5b1 	.word	0x0803d5b1
 800e5cc:	2501      	movs	r5, #1
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	9306      	str	r3, [sp, #24]
 800e5d2:	9508      	str	r5, [sp, #32]
 800e5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	2312      	movs	r3, #18
 800e5e0:	e7b0      	b.n	800e544 <_dtoa_r+0x26c>
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	9308      	str	r3, [sp, #32]
 800e5e6:	e7f5      	b.n	800e5d4 <_dtoa_r+0x2fc>
 800e5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e5ee:	e7b8      	b.n	800e562 <_dtoa_r+0x28a>
 800e5f0:	3101      	adds	r1, #1
 800e5f2:	6041      	str	r1, [r0, #4]
 800e5f4:	0052      	lsls	r2, r2, #1
 800e5f6:	e7b8      	b.n	800e56a <_dtoa_r+0x292>
 800e5f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5fa:	9a01      	ldr	r2, [sp, #4]
 800e5fc:	601a      	str	r2, [r3, #0]
 800e5fe:	9b03      	ldr	r3, [sp, #12]
 800e600:	2b0e      	cmp	r3, #14
 800e602:	f200 809d 	bhi.w	800e740 <_dtoa_r+0x468>
 800e606:	2d00      	cmp	r5, #0
 800e608:	f000 809a 	beq.w	800e740 <_dtoa_r+0x468>
 800e60c:	9b00      	ldr	r3, [sp, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	dd32      	ble.n	800e678 <_dtoa_r+0x3a0>
 800e612:	4ab7      	ldr	r2, [pc, #732]	; (800e8f0 <_dtoa_r+0x618>)
 800e614:	f003 030f 	and.w	r3, r3, #15
 800e618:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e61c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e620:	9b00      	ldr	r3, [sp, #0]
 800e622:	05d8      	lsls	r0, r3, #23
 800e624:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e628:	d516      	bpl.n	800e658 <_dtoa_r+0x380>
 800e62a:	4bb2      	ldr	r3, [pc, #712]	; (800e8f4 <_dtoa_r+0x61c>)
 800e62c:	ec51 0b19 	vmov	r0, r1, d9
 800e630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e634:	f7f2 f924 	bl	8000880 <__aeabi_ddiv>
 800e638:	f007 070f 	and.w	r7, r7, #15
 800e63c:	4682      	mov	sl, r0
 800e63e:	468b      	mov	fp, r1
 800e640:	2503      	movs	r5, #3
 800e642:	4eac      	ldr	r6, [pc, #688]	; (800e8f4 <_dtoa_r+0x61c>)
 800e644:	b957      	cbnz	r7, 800e65c <_dtoa_r+0x384>
 800e646:	4642      	mov	r2, r8
 800e648:	464b      	mov	r3, r9
 800e64a:	4650      	mov	r0, sl
 800e64c:	4659      	mov	r1, fp
 800e64e:	f7f2 f917 	bl	8000880 <__aeabi_ddiv>
 800e652:	4682      	mov	sl, r0
 800e654:	468b      	mov	fp, r1
 800e656:	e028      	b.n	800e6aa <_dtoa_r+0x3d2>
 800e658:	2502      	movs	r5, #2
 800e65a:	e7f2      	b.n	800e642 <_dtoa_r+0x36a>
 800e65c:	07f9      	lsls	r1, r7, #31
 800e65e:	d508      	bpl.n	800e672 <_dtoa_r+0x39a>
 800e660:	4640      	mov	r0, r8
 800e662:	4649      	mov	r1, r9
 800e664:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e668:	f7f1 ffe0 	bl	800062c <__aeabi_dmul>
 800e66c:	3501      	adds	r5, #1
 800e66e:	4680      	mov	r8, r0
 800e670:	4689      	mov	r9, r1
 800e672:	107f      	asrs	r7, r7, #1
 800e674:	3608      	adds	r6, #8
 800e676:	e7e5      	b.n	800e644 <_dtoa_r+0x36c>
 800e678:	f000 809b 	beq.w	800e7b2 <_dtoa_r+0x4da>
 800e67c:	9b00      	ldr	r3, [sp, #0]
 800e67e:	4f9d      	ldr	r7, [pc, #628]	; (800e8f4 <_dtoa_r+0x61c>)
 800e680:	425e      	negs	r6, r3
 800e682:	4b9b      	ldr	r3, [pc, #620]	; (800e8f0 <_dtoa_r+0x618>)
 800e684:	f006 020f 	and.w	r2, r6, #15
 800e688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e690:	ec51 0b19 	vmov	r0, r1, d9
 800e694:	f7f1 ffca 	bl	800062c <__aeabi_dmul>
 800e698:	1136      	asrs	r6, r6, #4
 800e69a:	4682      	mov	sl, r0
 800e69c:	468b      	mov	fp, r1
 800e69e:	2300      	movs	r3, #0
 800e6a0:	2502      	movs	r5, #2
 800e6a2:	2e00      	cmp	r6, #0
 800e6a4:	d17a      	bne.n	800e79c <_dtoa_r+0x4c4>
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d1d3      	bne.n	800e652 <_dtoa_r+0x37a>
 800e6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	f000 8082 	beq.w	800e7b6 <_dtoa_r+0x4de>
 800e6b2:	4b91      	ldr	r3, [pc, #580]	; (800e8f8 <_dtoa_r+0x620>)
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	4650      	mov	r0, sl
 800e6b8:	4659      	mov	r1, fp
 800e6ba:	f7f2 fa29 	bl	8000b10 <__aeabi_dcmplt>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d079      	beq.n	800e7b6 <_dtoa_r+0x4de>
 800e6c2:	9b03      	ldr	r3, [sp, #12]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d076      	beq.n	800e7b6 <_dtoa_r+0x4de>
 800e6c8:	9b02      	ldr	r3, [sp, #8]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	dd36      	ble.n	800e73c <_dtoa_r+0x464>
 800e6ce:	9b00      	ldr	r3, [sp, #0]
 800e6d0:	4650      	mov	r0, sl
 800e6d2:	4659      	mov	r1, fp
 800e6d4:	1e5f      	subs	r7, r3, #1
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	4b88      	ldr	r3, [pc, #544]	; (800e8fc <_dtoa_r+0x624>)
 800e6da:	f7f1 ffa7 	bl	800062c <__aeabi_dmul>
 800e6de:	9e02      	ldr	r6, [sp, #8]
 800e6e0:	4682      	mov	sl, r0
 800e6e2:	468b      	mov	fp, r1
 800e6e4:	3501      	adds	r5, #1
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	f7f1 ff36 	bl	8000558 <__aeabi_i2d>
 800e6ec:	4652      	mov	r2, sl
 800e6ee:	465b      	mov	r3, fp
 800e6f0:	f7f1 ff9c 	bl	800062c <__aeabi_dmul>
 800e6f4:	4b82      	ldr	r3, [pc, #520]	; (800e900 <_dtoa_r+0x628>)
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f7f1 fde2 	bl	80002c0 <__adddf3>
 800e6fc:	46d0      	mov	r8, sl
 800e6fe:	46d9      	mov	r9, fp
 800e700:	4682      	mov	sl, r0
 800e702:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e706:	2e00      	cmp	r6, #0
 800e708:	d158      	bne.n	800e7bc <_dtoa_r+0x4e4>
 800e70a:	4b7e      	ldr	r3, [pc, #504]	; (800e904 <_dtoa_r+0x62c>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	4640      	mov	r0, r8
 800e710:	4649      	mov	r1, r9
 800e712:	f7f1 fdd3 	bl	80002bc <__aeabi_dsub>
 800e716:	4652      	mov	r2, sl
 800e718:	465b      	mov	r3, fp
 800e71a:	4680      	mov	r8, r0
 800e71c:	4689      	mov	r9, r1
 800e71e:	f7f2 fa15 	bl	8000b4c <__aeabi_dcmpgt>
 800e722:	2800      	cmp	r0, #0
 800e724:	f040 8295 	bne.w	800ec52 <_dtoa_r+0x97a>
 800e728:	4652      	mov	r2, sl
 800e72a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e72e:	4640      	mov	r0, r8
 800e730:	4649      	mov	r1, r9
 800e732:	f7f2 f9ed 	bl	8000b10 <__aeabi_dcmplt>
 800e736:	2800      	cmp	r0, #0
 800e738:	f040 8289 	bne.w	800ec4e <_dtoa_r+0x976>
 800e73c:	ec5b ab19 	vmov	sl, fp, d9
 800e740:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e742:	2b00      	cmp	r3, #0
 800e744:	f2c0 8148 	blt.w	800e9d8 <_dtoa_r+0x700>
 800e748:	9a00      	ldr	r2, [sp, #0]
 800e74a:	2a0e      	cmp	r2, #14
 800e74c:	f300 8144 	bgt.w	800e9d8 <_dtoa_r+0x700>
 800e750:	4b67      	ldr	r3, [pc, #412]	; (800e8f0 <_dtoa_r+0x618>)
 800e752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e756:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	f280 80d5 	bge.w	800e90c <_dtoa_r+0x634>
 800e762:	9b03      	ldr	r3, [sp, #12]
 800e764:	2b00      	cmp	r3, #0
 800e766:	f300 80d1 	bgt.w	800e90c <_dtoa_r+0x634>
 800e76a:	f040 826f 	bne.w	800ec4c <_dtoa_r+0x974>
 800e76e:	4b65      	ldr	r3, [pc, #404]	; (800e904 <_dtoa_r+0x62c>)
 800e770:	2200      	movs	r2, #0
 800e772:	4640      	mov	r0, r8
 800e774:	4649      	mov	r1, r9
 800e776:	f7f1 ff59 	bl	800062c <__aeabi_dmul>
 800e77a:	4652      	mov	r2, sl
 800e77c:	465b      	mov	r3, fp
 800e77e:	f7f2 f9db 	bl	8000b38 <__aeabi_dcmpge>
 800e782:	9e03      	ldr	r6, [sp, #12]
 800e784:	4637      	mov	r7, r6
 800e786:	2800      	cmp	r0, #0
 800e788:	f040 8245 	bne.w	800ec16 <_dtoa_r+0x93e>
 800e78c:	9d01      	ldr	r5, [sp, #4]
 800e78e:	2331      	movs	r3, #49	; 0x31
 800e790:	f805 3b01 	strb.w	r3, [r5], #1
 800e794:	9b00      	ldr	r3, [sp, #0]
 800e796:	3301      	adds	r3, #1
 800e798:	9300      	str	r3, [sp, #0]
 800e79a:	e240      	b.n	800ec1e <_dtoa_r+0x946>
 800e79c:	07f2      	lsls	r2, r6, #31
 800e79e:	d505      	bpl.n	800e7ac <_dtoa_r+0x4d4>
 800e7a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7a4:	f7f1 ff42 	bl	800062c <__aeabi_dmul>
 800e7a8:	3501      	adds	r5, #1
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	1076      	asrs	r6, r6, #1
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	e777      	b.n	800e6a2 <_dtoa_r+0x3ca>
 800e7b2:	2502      	movs	r5, #2
 800e7b4:	e779      	b.n	800e6aa <_dtoa_r+0x3d2>
 800e7b6:	9f00      	ldr	r7, [sp, #0]
 800e7b8:	9e03      	ldr	r6, [sp, #12]
 800e7ba:	e794      	b.n	800e6e6 <_dtoa_r+0x40e>
 800e7bc:	9901      	ldr	r1, [sp, #4]
 800e7be:	4b4c      	ldr	r3, [pc, #304]	; (800e8f0 <_dtoa_r+0x618>)
 800e7c0:	4431      	add	r1, r6
 800e7c2:	910d      	str	r1, [sp, #52]	; 0x34
 800e7c4:	9908      	ldr	r1, [sp, #32]
 800e7c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e7ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e7ce:	2900      	cmp	r1, #0
 800e7d0:	d043      	beq.n	800e85a <_dtoa_r+0x582>
 800e7d2:	494d      	ldr	r1, [pc, #308]	; (800e908 <_dtoa_r+0x630>)
 800e7d4:	2000      	movs	r0, #0
 800e7d6:	f7f2 f853 	bl	8000880 <__aeabi_ddiv>
 800e7da:	4652      	mov	r2, sl
 800e7dc:	465b      	mov	r3, fp
 800e7de:	f7f1 fd6d 	bl	80002bc <__aeabi_dsub>
 800e7e2:	9d01      	ldr	r5, [sp, #4]
 800e7e4:	4682      	mov	sl, r0
 800e7e6:	468b      	mov	fp, r1
 800e7e8:	4649      	mov	r1, r9
 800e7ea:	4640      	mov	r0, r8
 800e7ec:	f7f2 f9ce 	bl	8000b8c <__aeabi_d2iz>
 800e7f0:	4606      	mov	r6, r0
 800e7f2:	f7f1 feb1 	bl	8000558 <__aeabi_i2d>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	4640      	mov	r0, r8
 800e7fc:	4649      	mov	r1, r9
 800e7fe:	f7f1 fd5d 	bl	80002bc <__aeabi_dsub>
 800e802:	3630      	adds	r6, #48	; 0x30
 800e804:	f805 6b01 	strb.w	r6, [r5], #1
 800e808:	4652      	mov	r2, sl
 800e80a:	465b      	mov	r3, fp
 800e80c:	4680      	mov	r8, r0
 800e80e:	4689      	mov	r9, r1
 800e810:	f7f2 f97e 	bl	8000b10 <__aeabi_dcmplt>
 800e814:	2800      	cmp	r0, #0
 800e816:	d163      	bne.n	800e8e0 <_dtoa_r+0x608>
 800e818:	4642      	mov	r2, r8
 800e81a:	464b      	mov	r3, r9
 800e81c:	4936      	ldr	r1, [pc, #216]	; (800e8f8 <_dtoa_r+0x620>)
 800e81e:	2000      	movs	r0, #0
 800e820:	f7f1 fd4c 	bl	80002bc <__aeabi_dsub>
 800e824:	4652      	mov	r2, sl
 800e826:	465b      	mov	r3, fp
 800e828:	f7f2 f972 	bl	8000b10 <__aeabi_dcmplt>
 800e82c:	2800      	cmp	r0, #0
 800e82e:	f040 80b5 	bne.w	800e99c <_dtoa_r+0x6c4>
 800e832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e834:	429d      	cmp	r5, r3
 800e836:	d081      	beq.n	800e73c <_dtoa_r+0x464>
 800e838:	4b30      	ldr	r3, [pc, #192]	; (800e8fc <_dtoa_r+0x624>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	4650      	mov	r0, sl
 800e83e:	4659      	mov	r1, fp
 800e840:	f7f1 fef4 	bl	800062c <__aeabi_dmul>
 800e844:	4b2d      	ldr	r3, [pc, #180]	; (800e8fc <_dtoa_r+0x624>)
 800e846:	4682      	mov	sl, r0
 800e848:	468b      	mov	fp, r1
 800e84a:	4640      	mov	r0, r8
 800e84c:	4649      	mov	r1, r9
 800e84e:	2200      	movs	r2, #0
 800e850:	f7f1 feec 	bl	800062c <__aeabi_dmul>
 800e854:	4680      	mov	r8, r0
 800e856:	4689      	mov	r9, r1
 800e858:	e7c6      	b.n	800e7e8 <_dtoa_r+0x510>
 800e85a:	4650      	mov	r0, sl
 800e85c:	4659      	mov	r1, fp
 800e85e:	f7f1 fee5 	bl	800062c <__aeabi_dmul>
 800e862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e864:	9d01      	ldr	r5, [sp, #4]
 800e866:	930f      	str	r3, [sp, #60]	; 0x3c
 800e868:	4682      	mov	sl, r0
 800e86a:	468b      	mov	fp, r1
 800e86c:	4649      	mov	r1, r9
 800e86e:	4640      	mov	r0, r8
 800e870:	f7f2 f98c 	bl	8000b8c <__aeabi_d2iz>
 800e874:	4606      	mov	r6, r0
 800e876:	f7f1 fe6f 	bl	8000558 <__aeabi_i2d>
 800e87a:	3630      	adds	r6, #48	; 0x30
 800e87c:	4602      	mov	r2, r0
 800e87e:	460b      	mov	r3, r1
 800e880:	4640      	mov	r0, r8
 800e882:	4649      	mov	r1, r9
 800e884:	f7f1 fd1a 	bl	80002bc <__aeabi_dsub>
 800e888:	f805 6b01 	strb.w	r6, [r5], #1
 800e88c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e88e:	429d      	cmp	r5, r3
 800e890:	4680      	mov	r8, r0
 800e892:	4689      	mov	r9, r1
 800e894:	f04f 0200 	mov.w	r2, #0
 800e898:	d124      	bne.n	800e8e4 <_dtoa_r+0x60c>
 800e89a:	4b1b      	ldr	r3, [pc, #108]	; (800e908 <_dtoa_r+0x630>)
 800e89c:	4650      	mov	r0, sl
 800e89e:	4659      	mov	r1, fp
 800e8a0:	f7f1 fd0e 	bl	80002c0 <__adddf3>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	4640      	mov	r0, r8
 800e8aa:	4649      	mov	r1, r9
 800e8ac:	f7f2 f94e 	bl	8000b4c <__aeabi_dcmpgt>
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	d173      	bne.n	800e99c <_dtoa_r+0x6c4>
 800e8b4:	4652      	mov	r2, sl
 800e8b6:	465b      	mov	r3, fp
 800e8b8:	4913      	ldr	r1, [pc, #76]	; (800e908 <_dtoa_r+0x630>)
 800e8ba:	2000      	movs	r0, #0
 800e8bc:	f7f1 fcfe 	bl	80002bc <__aeabi_dsub>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	4640      	mov	r0, r8
 800e8c6:	4649      	mov	r1, r9
 800e8c8:	f7f2 f922 	bl	8000b10 <__aeabi_dcmplt>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	f43f af35 	beq.w	800e73c <_dtoa_r+0x464>
 800e8d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e8d4:	1e6b      	subs	r3, r5, #1
 800e8d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8dc:	2b30      	cmp	r3, #48	; 0x30
 800e8de:	d0f8      	beq.n	800e8d2 <_dtoa_r+0x5fa>
 800e8e0:	9700      	str	r7, [sp, #0]
 800e8e2:	e049      	b.n	800e978 <_dtoa_r+0x6a0>
 800e8e4:	4b05      	ldr	r3, [pc, #20]	; (800e8fc <_dtoa_r+0x624>)
 800e8e6:	f7f1 fea1 	bl	800062c <__aeabi_dmul>
 800e8ea:	4680      	mov	r8, r0
 800e8ec:	4689      	mov	r9, r1
 800e8ee:	e7bd      	b.n	800e86c <_dtoa_r+0x594>
 800e8f0:	0803d708 	.word	0x0803d708
 800e8f4:	0803d6e0 	.word	0x0803d6e0
 800e8f8:	3ff00000 	.word	0x3ff00000
 800e8fc:	40240000 	.word	0x40240000
 800e900:	401c0000 	.word	0x401c0000
 800e904:	40140000 	.word	0x40140000
 800e908:	3fe00000 	.word	0x3fe00000
 800e90c:	9d01      	ldr	r5, [sp, #4]
 800e90e:	4656      	mov	r6, sl
 800e910:	465f      	mov	r7, fp
 800e912:	4642      	mov	r2, r8
 800e914:	464b      	mov	r3, r9
 800e916:	4630      	mov	r0, r6
 800e918:	4639      	mov	r1, r7
 800e91a:	f7f1 ffb1 	bl	8000880 <__aeabi_ddiv>
 800e91e:	f7f2 f935 	bl	8000b8c <__aeabi_d2iz>
 800e922:	4682      	mov	sl, r0
 800e924:	f7f1 fe18 	bl	8000558 <__aeabi_i2d>
 800e928:	4642      	mov	r2, r8
 800e92a:	464b      	mov	r3, r9
 800e92c:	f7f1 fe7e 	bl	800062c <__aeabi_dmul>
 800e930:	4602      	mov	r2, r0
 800e932:	460b      	mov	r3, r1
 800e934:	4630      	mov	r0, r6
 800e936:	4639      	mov	r1, r7
 800e938:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e93c:	f7f1 fcbe 	bl	80002bc <__aeabi_dsub>
 800e940:	f805 6b01 	strb.w	r6, [r5], #1
 800e944:	9e01      	ldr	r6, [sp, #4]
 800e946:	9f03      	ldr	r7, [sp, #12]
 800e948:	1bae      	subs	r6, r5, r6
 800e94a:	42b7      	cmp	r7, r6
 800e94c:	4602      	mov	r2, r0
 800e94e:	460b      	mov	r3, r1
 800e950:	d135      	bne.n	800e9be <_dtoa_r+0x6e6>
 800e952:	f7f1 fcb5 	bl	80002c0 <__adddf3>
 800e956:	4642      	mov	r2, r8
 800e958:	464b      	mov	r3, r9
 800e95a:	4606      	mov	r6, r0
 800e95c:	460f      	mov	r7, r1
 800e95e:	f7f2 f8f5 	bl	8000b4c <__aeabi_dcmpgt>
 800e962:	b9d0      	cbnz	r0, 800e99a <_dtoa_r+0x6c2>
 800e964:	4642      	mov	r2, r8
 800e966:	464b      	mov	r3, r9
 800e968:	4630      	mov	r0, r6
 800e96a:	4639      	mov	r1, r7
 800e96c:	f7f2 f8c6 	bl	8000afc <__aeabi_dcmpeq>
 800e970:	b110      	cbz	r0, 800e978 <_dtoa_r+0x6a0>
 800e972:	f01a 0f01 	tst.w	sl, #1
 800e976:	d110      	bne.n	800e99a <_dtoa_r+0x6c2>
 800e978:	4620      	mov	r0, r4
 800e97a:	ee18 1a10 	vmov	r1, s16
 800e97e:	f000 fd85 	bl	800f48c <_Bfree>
 800e982:	2300      	movs	r3, #0
 800e984:	9800      	ldr	r0, [sp, #0]
 800e986:	702b      	strb	r3, [r5, #0]
 800e988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e98a:	3001      	adds	r0, #1
 800e98c:	6018      	str	r0, [r3, #0]
 800e98e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e990:	2b00      	cmp	r3, #0
 800e992:	f43f acf1 	beq.w	800e378 <_dtoa_r+0xa0>
 800e996:	601d      	str	r5, [r3, #0]
 800e998:	e4ee      	b.n	800e378 <_dtoa_r+0xa0>
 800e99a:	9f00      	ldr	r7, [sp, #0]
 800e99c:	462b      	mov	r3, r5
 800e99e:	461d      	mov	r5, r3
 800e9a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9a4:	2a39      	cmp	r2, #57	; 0x39
 800e9a6:	d106      	bne.n	800e9b6 <_dtoa_r+0x6de>
 800e9a8:	9a01      	ldr	r2, [sp, #4]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d1f7      	bne.n	800e99e <_dtoa_r+0x6c6>
 800e9ae:	9901      	ldr	r1, [sp, #4]
 800e9b0:	2230      	movs	r2, #48	; 0x30
 800e9b2:	3701      	adds	r7, #1
 800e9b4:	700a      	strb	r2, [r1, #0]
 800e9b6:	781a      	ldrb	r2, [r3, #0]
 800e9b8:	3201      	adds	r2, #1
 800e9ba:	701a      	strb	r2, [r3, #0]
 800e9bc:	e790      	b.n	800e8e0 <_dtoa_r+0x608>
 800e9be:	4ba6      	ldr	r3, [pc, #664]	; (800ec58 <_dtoa_r+0x980>)
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f7f1 fe33 	bl	800062c <__aeabi_dmul>
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	4606      	mov	r6, r0
 800e9cc:	460f      	mov	r7, r1
 800e9ce:	f7f2 f895 	bl	8000afc <__aeabi_dcmpeq>
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	d09d      	beq.n	800e912 <_dtoa_r+0x63a>
 800e9d6:	e7cf      	b.n	800e978 <_dtoa_r+0x6a0>
 800e9d8:	9a08      	ldr	r2, [sp, #32]
 800e9da:	2a00      	cmp	r2, #0
 800e9dc:	f000 80d7 	beq.w	800eb8e <_dtoa_r+0x8b6>
 800e9e0:	9a06      	ldr	r2, [sp, #24]
 800e9e2:	2a01      	cmp	r2, #1
 800e9e4:	f300 80ba 	bgt.w	800eb5c <_dtoa_r+0x884>
 800e9e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9ea:	2a00      	cmp	r2, #0
 800e9ec:	f000 80b2 	beq.w	800eb54 <_dtoa_r+0x87c>
 800e9f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e9f4:	9e07      	ldr	r6, [sp, #28]
 800e9f6:	9d04      	ldr	r5, [sp, #16]
 800e9f8:	9a04      	ldr	r2, [sp, #16]
 800e9fa:	441a      	add	r2, r3
 800e9fc:	9204      	str	r2, [sp, #16]
 800e9fe:	9a05      	ldr	r2, [sp, #20]
 800ea00:	2101      	movs	r1, #1
 800ea02:	441a      	add	r2, r3
 800ea04:	4620      	mov	r0, r4
 800ea06:	9205      	str	r2, [sp, #20]
 800ea08:	f000 fdf8 	bl	800f5fc <__i2b>
 800ea0c:	4607      	mov	r7, r0
 800ea0e:	2d00      	cmp	r5, #0
 800ea10:	dd0c      	ble.n	800ea2c <_dtoa_r+0x754>
 800ea12:	9b05      	ldr	r3, [sp, #20]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	dd09      	ble.n	800ea2c <_dtoa_r+0x754>
 800ea18:	42ab      	cmp	r3, r5
 800ea1a:	9a04      	ldr	r2, [sp, #16]
 800ea1c:	bfa8      	it	ge
 800ea1e:	462b      	movge	r3, r5
 800ea20:	1ad2      	subs	r2, r2, r3
 800ea22:	9204      	str	r2, [sp, #16]
 800ea24:	9a05      	ldr	r2, [sp, #20]
 800ea26:	1aed      	subs	r5, r5, r3
 800ea28:	1ad3      	subs	r3, r2, r3
 800ea2a:	9305      	str	r3, [sp, #20]
 800ea2c:	9b07      	ldr	r3, [sp, #28]
 800ea2e:	b31b      	cbz	r3, 800ea78 <_dtoa_r+0x7a0>
 800ea30:	9b08      	ldr	r3, [sp, #32]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f000 80af 	beq.w	800eb96 <_dtoa_r+0x8be>
 800ea38:	2e00      	cmp	r6, #0
 800ea3a:	dd13      	ble.n	800ea64 <_dtoa_r+0x78c>
 800ea3c:	4639      	mov	r1, r7
 800ea3e:	4632      	mov	r2, r6
 800ea40:	4620      	mov	r0, r4
 800ea42:	f000 fe9b 	bl	800f77c <__pow5mult>
 800ea46:	ee18 2a10 	vmov	r2, s16
 800ea4a:	4601      	mov	r1, r0
 800ea4c:	4607      	mov	r7, r0
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f000 fdea 	bl	800f628 <__multiply>
 800ea54:	ee18 1a10 	vmov	r1, s16
 800ea58:	4680      	mov	r8, r0
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f000 fd16 	bl	800f48c <_Bfree>
 800ea60:	ee08 8a10 	vmov	s16, r8
 800ea64:	9b07      	ldr	r3, [sp, #28]
 800ea66:	1b9a      	subs	r2, r3, r6
 800ea68:	d006      	beq.n	800ea78 <_dtoa_r+0x7a0>
 800ea6a:	ee18 1a10 	vmov	r1, s16
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f000 fe84 	bl	800f77c <__pow5mult>
 800ea74:	ee08 0a10 	vmov	s16, r0
 800ea78:	2101      	movs	r1, #1
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f000 fdbe 	bl	800f5fc <__i2b>
 800ea80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	4606      	mov	r6, r0
 800ea86:	f340 8088 	ble.w	800eb9a <_dtoa_r+0x8c2>
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	4601      	mov	r1, r0
 800ea8e:	4620      	mov	r0, r4
 800ea90:	f000 fe74 	bl	800f77c <__pow5mult>
 800ea94:	9b06      	ldr	r3, [sp, #24]
 800ea96:	2b01      	cmp	r3, #1
 800ea98:	4606      	mov	r6, r0
 800ea9a:	f340 8081 	ble.w	800eba0 <_dtoa_r+0x8c8>
 800ea9e:	f04f 0800 	mov.w	r8, #0
 800eaa2:	6933      	ldr	r3, [r6, #16]
 800eaa4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eaa8:	6918      	ldr	r0, [r3, #16]
 800eaaa:	f000 fd57 	bl	800f55c <__hi0bits>
 800eaae:	f1c0 0020 	rsb	r0, r0, #32
 800eab2:	9b05      	ldr	r3, [sp, #20]
 800eab4:	4418      	add	r0, r3
 800eab6:	f010 001f 	ands.w	r0, r0, #31
 800eaba:	f000 8092 	beq.w	800ebe2 <_dtoa_r+0x90a>
 800eabe:	f1c0 0320 	rsb	r3, r0, #32
 800eac2:	2b04      	cmp	r3, #4
 800eac4:	f340 808a 	ble.w	800ebdc <_dtoa_r+0x904>
 800eac8:	f1c0 001c 	rsb	r0, r0, #28
 800eacc:	9b04      	ldr	r3, [sp, #16]
 800eace:	4403      	add	r3, r0
 800ead0:	9304      	str	r3, [sp, #16]
 800ead2:	9b05      	ldr	r3, [sp, #20]
 800ead4:	4403      	add	r3, r0
 800ead6:	4405      	add	r5, r0
 800ead8:	9305      	str	r3, [sp, #20]
 800eada:	9b04      	ldr	r3, [sp, #16]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	dd07      	ble.n	800eaf0 <_dtoa_r+0x818>
 800eae0:	ee18 1a10 	vmov	r1, s16
 800eae4:	461a      	mov	r2, r3
 800eae6:	4620      	mov	r0, r4
 800eae8:	f000 fea2 	bl	800f830 <__lshift>
 800eaec:	ee08 0a10 	vmov	s16, r0
 800eaf0:	9b05      	ldr	r3, [sp, #20]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	dd05      	ble.n	800eb02 <_dtoa_r+0x82a>
 800eaf6:	4631      	mov	r1, r6
 800eaf8:	461a      	mov	r2, r3
 800eafa:	4620      	mov	r0, r4
 800eafc:	f000 fe98 	bl	800f830 <__lshift>
 800eb00:	4606      	mov	r6, r0
 800eb02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d06e      	beq.n	800ebe6 <_dtoa_r+0x90e>
 800eb08:	ee18 0a10 	vmov	r0, s16
 800eb0c:	4631      	mov	r1, r6
 800eb0e:	f000 feff 	bl	800f910 <__mcmp>
 800eb12:	2800      	cmp	r0, #0
 800eb14:	da67      	bge.n	800ebe6 <_dtoa_r+0x90e>
 800eb16:	9b00      	ldr	r3, [sp, #0]
 800eb18:	3b01      	subs	r3, #1
 800eb1a:	ee18 1a10 	vmov	r1, s16
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	220a      	movs	r2, #10
 800eb22:	2300      	movs	r3, #0
 800eb24:	4620      	mov	r0, r4
 800eb26:	f000 fcd3 	bl	800f4d0 <__multadd>
 800eb2a:	9b08      	ldr	r3, [sp, #32]
 800eb2c:	ee08 0a10 	vmov	s16, r0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f000 81b1 	beq.w	800ee98 <_dtoa_r+0xbc0>
 800eb36:	2300      	movs	r3, #0
 800eb38:	4639      	mov	r1, r7
 800eb3a:	220a      	movs	r2, #10
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f000 fcc7 	bl	800f4d0 <__multadd>
 800eb42:	9b02      	ldr	r3, [sp, #8]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	4607      	mov	r7, r0
 800eb48:	f300 808e 	bgt.w	800ec68 <_dtoa_r+0x990>
 800eb4c:	9b06      	ldr	r3, [sp, #24]
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	dc51      	bgt.n	800ebf6 <_dtoa_r+0x91e>
 800eb52:	e089      	b.n	800ec68 <_dtoa_r+0x990>
 800eb54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eb5a:	e74b      	b.n	800e9f4 <_dtoa_r+0x71c>
 800eb5c:	9b03      	ldr	r3, [sp, #12]
 800eb5e:	1e5e      	subs	r6, r3, #1
 800eb60:	9b07      	ldr	r3, [sp, #28]
 800eb62:	42b3      	cmp	r3, r6
 800eb64:	bfbf      	itttt	lt
 800eb66:	9b07      	ldrlt	r3, [sp, #28]
 800eb68:	9607      	strlt	r6, [sp, #28]
 800eb6a:	1af2      	sublt	r2, r6, r3
 800eb6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800eb6e:	bfb6      	itet	lt
 800eb70:	189b      	addlt	r3, r3, r2
 800eb72:	1b9e      	subge	r6, r3, r6
 800eb74:	930a      	strlt	r3, [sp, #40]	; 0x28
 800eb76:	9b03      	ldr	r3, [sp, #12]
 800eb78:	bfb8      	it	lt
 800eb7a:	2600      	movlt	r6, #0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	bfb7      	itett	lt
 800eb80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800eb84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800eb88:	1a9d      	sublt	r5, r3, r2
 800eb8a:	2300      	movlt	r3, #0
 800eb8c:	e734      	b.n	800e9f8 <_dtoa_r+0x720>
 800eb8e:	9e07      	ldr	r6, [sp, #28]
 800eb90:	9d04      	ldr	r5, [sp, #16]
 800eb92:	9f08      	ldr	r7, [sp, #32]
 800eb94:	e73b      	b.n	800ea0e <_dtoa_r+0x736>
 800eb96:	9a07      	ldr	r2, [sp, #28]
 800eb98:	e767      	b.n	800ea6a <_dtoa_r+0x792>
 800eb9a:	9b06      	ldr	r3, [sp, #24]
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	dc18      	bgt.n	800ebd2 <_dtoa_r+0x8fa>
 800eba0:	f1ba 0f00 	cmp.w	sl, #0
 800eba4:	d115      	bne.n	800ebd2 <_dtoa_r+0x8fa>
 800eba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ebaa:	b993      	cbnz	r3, 800ebd2 <_dtoa_r+0x8fa>
 800ebac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ebb0:	0d1b      	lsrs	r3, r3, #20
 800ebb2:	051b      	lsls	r3, r3, #20
 800ebb4:	b183      	cbz	r3, 800ebd8 <_dtoa_r+0x900>
 800ebb6:	9b04      	ldr	r3, [sp, #16]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	9304      	str	r3, [sp, #16]
 800ebbc:	9b05      	ldr	r3, [sp, #20]
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	9305      	str	r3, [sp, #20]
 800ebc2:	f04f 0801 	mov.w	r8, #1
 800ebc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	f47f af6a 	bne.w	800eaa2 <_dtoa_r+0x7ca>
 800ebce:	2001      	movs	r0, #1
 800ebd0:	e76f      	b.n	800eab2 <_dtoa_r+0x7da>
 800ebd2:	f04f 0800 	mov.w	r8, #0
 800ebd6:	e7f6      	b.n	800ebc6 <_dtoa_r+0x8ee>
 800ebd8:	4698      	mov	r8, r3
 800ebda:	e7f4      	b.n	800ebc6 <_dtoa_r+0x8ee>
 800ebdc:	f43f af7d 	beq.w	800eada <_dtoa_r+0x802>
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	301c      	adds	r0, #28
 800ebe4:	e772      	b.n	800eacc <_dtoa_r+0x7f4>
 800ebe6:	9b03      	ldr	r3, [sp, #12]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	dc37      	bgt.n	800ec5c <_dtoa_r+0x984>
 800ebec:	9b06      	ldr	r3, [sp, #24]
 800ebee:	2b02      	cmp	r3, #2
 800ebf0:	dd34      	ble.n	800ec5c <_dtoa_r+0x984>
 800ebf2:	9b03      	ldr	r3, [sp, #12]
 800ebf4:	9302      	str	r3, [sp, #8]
 800ebf6:	9b02      	ldr	r3, [sp, #8]
 800ebf8:	b96b      	cbnz	r3, 800ec16 <_dtoa_r+0x93e>
 800ebfa:	4631      	mov	r1, r6
 800ebfc:	2205      	movs	r2, #5
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f000 fc66 	bl	800f4d0 <__multadd>
 800ec04:	4601      	mov	r1, r0
 800ec06:	4606      	mov	r6, r0
 800ec08:	ee18 0a10 	vmov	r0, s16
 800ec0c:	f000 fe80 	bl	800f910 <__mcmp>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	f73f adbb 	bgt.w	800e78c <_dtoa_r+0x4b4>
 800ec16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec18:	9d01      	ldr	r5, [sp, #4]
 800ec1a:	43db      	mvns	r3, r3
 800ec1c:	9300      	str	r3, [sp, #0]
 800ec1e:	f04f 0800 	mov.w	r8, #0
 800ec22:	4631      	mov	r1, r6
 800ec24:	4620      	mov	r0, r4
 800ec26:	f000 fc31 	bl	800f48c <_Bfree>
 800ec2a:	2f00      	cmp	r7, #0
 800ec2c:	f43f aea4 	beq.w	800e978 <_dtoa_r+0x6a0>
 800ec30:	f1b8 0f00 	cmp.w	r8, #0
 800ec34:	d005      	beq.n	800ec42 <_dtoa_r+0x96a>
 800ec36:	45b8      	cmp	r8, r7
 800ec38:	d003      	beq.n	800ec42 <_dtoa_r+0x96a>
 800ec3a:	4641      	mov	r1, r8
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	f000 fc25 	bl	800f48c <_Bfree>
 800ec42:	4639      	mov	r1, r7
 800ec44:	4620      	mov	r0, r4
 800ec46:	f000 fc21 	bl	800f48c <_Bfree>
 800ec4a:	e695      	b.n	800e978 <_dtoa_r+0x6a0>
 800ec4c:	2600      	movs	r6, #0
 800ec4e:	4637      	mov	r7, r6
 800ec50:	e7e1      	b.n	800ec16 <_dtoa_r+0x93e>
 800ec52:	9700      	str	r7, [sp, #0]
 800ec54:	4637      	mov	r7, r6
 800ec56:	e599      	b.n	800e78c <_dtoa_r+0x4b4>
 800ec58:	40240000 	.word	0x40240000
 800ec5c:	9b08      	ldr	r3, [sp, #32]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	f000 80ca 	beq.w	800edf8 <_dtoa_r+0xb20>
 800ec64:	9b03      	ldr	r3, [sp, #12]
 800ec66:	9302      	str	r3, [sp, #8]
 800ec68:	2d00      	cmp	r5, #0
 800ec6a:	dd05      	ble.n	800ec78 <_dtoa_r+0x9a0>
 800ec6c:	4639      	mov	r1, r7
 800ec6e:	462a      	mov	r2, r5
 800ec70:	4620      	mov	r0, r4
 800ec72:	f000 fddd 	bl	800f830 <__lshift>
 800ec76:	4607      	mov	r7, r0
 800ec78:	f1b8 0f00 	cmp.w	r8, #0
 800ec7c:	d05b      	beq.n	800ed36 <_dtoa_r+0xa5e>
 800ec7e:	6879      	ldr	r1, [r7, #4]
 800ec80:	4620      	mov	r0, r4
 800ec82:	f000 fbc3 	bl	800f40c <_Balloc>
 800ec86:	4605      	mov	r5, r0
 800ec88:	b928      	cbnz	r0, 800ec96 <_dtoa_r+0x9be>
 800ec8a:	4b87      	ldr	r3, [pc, #540]	; (800eea8 <_dtoa_r+0xbd0>)
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ec92:	f7ff bb3b 	b.w	800e30c <_dtoa_r+0x34>
 800ec96:	693a      	ldr	r2, [r7, #16]
 800ec98:	3202      	adds	r2, #2
 800ec9a:	0092      	lsls	r2, r2, #2
 800ec9c:	f107 010c 	add.w	r1, r7, #12
 800eca0:	300c      	adds	r0, #12
 800eca2:	f7fc ffb5 	bl	800bc10 <memcpy>
 800eca6:	2201      	movs	r2, #1
 800eca8:	4629      	mov	r1, r5
 800ecaa:	4620      	mov	r0, r4
 800ecac:	f000 fdc0 	bl	800f830 <__lshift>
 800ecb0:	9b01      	ldr	r3, [sp, #4]
 800ecb2:	f103 0901 	add.w	r9, r3, #1
 800ecb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ecba:	4413      	add	r3, r2
 800ecbc:	9305      	str	r3, [sp, #20]
 800ecbe:	f00a 0301 	and.w	r3, sl, #1
 800ecc2:	46b8      	mov	r8, r7
 800ecc4:	9304      	str	r3, [sp, #16]
 800ecc6:	4607      	mov	r7, r0
 800ecc8:	4631      	mov	r1, r6
 800ecca:	ee18 0a10 	vmov	r0, s16
 800ecce:	f7ff fa77 	bl	800e1c0 <quorem>
 800ecd2:	4641      	mov	r1, r8
 800ecd4:	9002      	str	r0, [sp, #8]
 800ecd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ecda:	ee18 0a10 	vmov	r0, s16
 800ecde:	f000 fe17 	bl	800f910 <__mcmp>
 800ece2:	463a      	mov	r2, r7
 800ece4:	9003      	str	r0, [sp, #12]
 800ece6:	4631      	mov	r1, r6
 800ece8:	4620      	mov	r0, r4
 800ecea:	f000 fe2d 	bl	800f948 <__mdiff>
 800ecee:	68c2      	ldr	r2, [r0, #12]
 800ecf0:	f109 3bff 	add.w	fp, r9, #4294967295
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	bb02      	cbnz	r2, 800ed3a <_dtoa_r+0xa62>
 800ecf8:	4601      	mov	r1, r0
 800ecfa:	ee18 0a10 	vmov	r0, s16
 800ecfe:	f000 fe07 	bl	800f910 <__mcmp>
 800ed02:	4602      	mov	r2, r0
 800ed04:	4629      	mov	r1, r5
 800ed06:	4620      	mov	r0, r4
 800ed08:	9207      	str	r2, [sp, #28]
 800ed0a:	f000 fbbf 	bl	800f48c <_Bfree>
 800ed0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ed12:	ea43 0102 	orr.w	r1, r3, r2
 800ed16:	9b04      	ldr	r3, [sp, #16]
 800ed18:	430b      	orrs	r3, r1
 800ed1a:	464d      	mov	r5, r9
 800ed1c:	d10f      	bne.n	800ed3e <_dtoa_r+0xa66>
 800ed1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed22:	d02a      	beq.n	800ed7a <_dtoa_r+0xaa2>
 800ed24:	9b03      	ldr	r3, [sp, #12]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	dd02      	ble.n	800ed30 <_dtoa_r+0xa58>
 800ed2a:	9b02      	ldr	r3, [sp, #8]
 800ed2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ed30:	f88b a000 	strb.w	sl, [fp]
 800ed34:	e775      	b.n	800ec22 <_dtoa_r+0x94a>
 800ed36:	4638      	mov	r0, r7
 800ed38:	e7ba      	b.n	800ecb0 <_dtoa_r+0x9d8>
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	e7e2      	b.n	800ed04 <_dtoa_r+0xa2c>
 800ed3e:	9b03      	ldr	r3, [sp, #12]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	db04      	blt.n	800ed4e <_dtoa_r+0xa76>
 800ed44:	9906      	ldr	r1, [sp, #24]
 800ed46:	430b      	orrs	r3, r1
 800ed48:	9904      	ldr	r1, [sp, #16]
 800ed4a:	430b      	orrs	r3, r1
 800ed4c:	d122      	bne.n	800ed94 <_dtoa_r+0xabc>
 800ed4e:	2a00      	cmp	r2, #0
 800ed50:	ddee      	ble.n	800ed30 <_dtoa_r+0xa58>
 800ed52:	ee18 1a10 	vmov	r1, s16
 800ed56:	2201      	movs	r2, #1
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f000 fd69 	bl	800f830 <__lshift>
 800ed5e:	4631      	mov	r1, r6
 800ed60:	ee08 0a10 	vmov	s16, r0
 800ed64:	f000 fdd4 	bl	800f910 <__mcmp>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	dc03      	bgt.n	800ed74 <_dtoa_r+0xa9c>
 800ed6c:	d1e0      	bne.n	800ed30 <_dtoa_r+0xa58>
 800ed6e:	f01a 0f01 	tst.w	sl, #1
 800ed72:	d0dd      	beq.n	800ed30 <_dtoa_r+0xa58>
 800ed74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed78:	d1d7      	bne.n	800ed2a <_dtoa_r+0xa52>
 800ed7a:	2339      	movs	r3, #57	; 0x39
 800ed7c:	f88b 3000 	strb.w	r3, [fp]
 800ed80:	462b      	mov	r3, r5
 800ed82:	461d      	mov	r5, r3
 800ed84:	3b01      	subs	r3, #1
 800ed86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ed8a:	2a39      	cmp	r2, #57	; 0x39
 800ed8c:	d071      	beq.n	800ee72 <_dtoa_r+0xb9a>
 800ed8e:	3201      	adds	r2, #1
 800ed90:	701a      	strb	r2, [r3, #0]
 800ed92:	e746      	b.n	800ec22 <_dtoa_r+0x94a>
 800ed94:	2a00      	cmp	r2, #0
 800ed96:	dd07      	ble.n	800eda8 <_dtoa_r+0xad0>
 800ed98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ed9c:	d0ed      	beq.n	800ed7a <_dtoa_r+0xaa2>
 800ed9e:	f10a 0301 	add.w	r3, sl, #1
 800eda2:	f88b 3000 	strb.w	r3, [fp]
 800eda6:	e73c      	b.n	800ec22 <_dtoa_r+0x94a>
 800eda8:	9b05      	ldr	r3, [sp, #20]
 800edaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800edae:	4599      	cmp	r9, r3
 800edb0:	d047      	beq.n	800ee42 <_dtoa_r+0xb6a>
 800edb2:	ee18 1a10 	vmov	r1, s16
 800edb6:	2300      	movs	r3, #0
 800edb8:	220a      	movs	r2, #10
 800edba:	4620      	mov	r0, r4
 800edbc:	f000 fb88 	bl	800f4d0 <__multadd>
 800edc0:	45b8      	cmp	r8, r7
 800edc2:	ee08 0a10 	vmov	s16, r0
 800edc6:	f04f 0300 	mov.w	r3, #0
 800edca:	f04f 020a 	mov.w	r2, #10
 800edce:	4641      	mov	r1, r8
 800edd0:	4620      	mov	r0, r4
 800edd2:	d106      	bne.n	800ede2 <_dtoa_r+0xb0a>
 800edd4:	f000 fb7c 	bl	800f4d0 <__multadd>
 800edd8:	4680      	mov	r8, r0
 800edda:	4607      	mov	r7, r0
 800eddc:	f109 0901 	add.w	r9, r9, #1
 800ede0:	e772      	b.n	800ecc8 <_dtoa_r+0x9f0>
 800ede2:	f000 fb75 	bl	800f4d0 <__multadd>
 800ede6:	4639      	mov	r1, r7
 800ede8:	4680      	mov	r8, r0
 800edea:	2300      	movs	r3, #0
 800edec:	220a      	movs	r2, #10
 800edee:	4620      	mov	r0, r4
 800edf0:	f000 fb6e 	bl	800f4d0 <__multadd>
 800edf4:	4607      	mov	r7, r0
 800edf6:	e7f1      	b.n	800eddc <_dtoa_r+0xb04>
 800edf8:	9b03      	ldr	r3, [sp, #12]
 800edfa:	9302      	str	r3, [sp, #8]
 800edfc:	9d01      	ldr	r5, [sp, #4]
 800edfe:	ee18 0a10 	vmov	r0, s16
 800ee02:	4631      	mov	r1, r6
 800ee04:	f7ff f9dc 	bl	800e1c0 <quorem>
 800ee08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ee0c:	9b01      	ldr	r3, [sp, #4]
 800ee0e:	f805 ab01 	strb.w	sl, [r5], #1
 800ee12:	1aea      	subs	r2, r5, r3
 800ee14:	9b02      	ldr	r3, [sp, #8]
 800ee16:	4293      	cmp	r3, r2
 800ee18:	dd09      	ble.n	800ee2e <_dtoa_r+0xb56>
 800ee1a:	ee18 1a10 	vmov	r1, s16
 800ee1e:	2300      	movs	r3, #0
 800ee20:	220a      	movs	r2, #10
 800ee22:	4620      	mov	r0, r4
 800ee24:	f000 fb54 	bl	800f4d0 <__multadd>
 800ee28:	ee08 0a10 	vmov	s16, r0
 800ee2c:	e7e7      	b.n	800edfe <_dtoa_r+0xb26>
 800ee2e:	9b02      	ldr	r3, [sp, #8]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	bfc8      	it	gt
 800ee34:	461d      	movgt	r5, r3
 800ee36:	9b01      	ldr	r3, [sp, #4]
 800ee38:	bfd8      	it	le
 800ee3a:	2501      	movle	r5, #1
 800ee3c:	441d      	add	r5, r3
 800ee3e:	f04f 0800 	mov.w	r8, #0
 800ee42:	ee18 1a10 	vmov	r1, s16
 800ee46:	2201      	movs	r2, #1
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f000 fcf1 	bl	800f830 <__lshift>
 800ee4e:	4631      	mov	r1, r6
 800ee50:	ee08 0a10 	vmov	s16, r0
 800ee54:	f000 fd5c 	bl	800f910 <__mcmp>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	dc91      	bgt.n	800ed80 <_dtoa_r+0xaa8>
 800ee5c:	d102      	bne.n	800ee64 <_dtoa_r+0xb8c>
 800ee5e:	f01a 0f01 	tst.w	sl, #1
 800ee62:	d18d      	bne.n	800ed80 <_dtoa_r+0xaa8>
 800ee64:	462b      	mov	r3, r5
 800ee66:	461d      	mov	r5, r3
 800ee68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee6c:	2a30      	cmp	r2, #48	; 0x30
 800ee6e:	d0fa      	beq.n	800ee66 <_dtoa_r+0xb8e>
 800ee70:	e6d7      	b.n	800ec22 <_dtoa_r+0x94a>
 800ee72:	9a01      	ldr	r2, [sp, #4]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d184      	bne.n	800ed82 <_dtoa_r+0xaaa>
 800ee78:	9b00      	ldr	r3, [sp, #0]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	2331      	movs	r3, #49	; 0x31
 800ee80:	7013      	strb	r3, [r2, #0]
 800ee82:	e6ce      	b.n	800ec22 <_dtoa_r+0x94a>
 800ee84:	4b09      	ldr	r3, [pc, #36]	; (800eeac <_dtoa_r+0xbd4>)
 800ee86:	f7ff ba95 	b.w	800e3b4 <_dtoa_r+0xdc>
 800ee8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f47f aa6e 	bne.w	800e36e <_dtoa_r+0x96>
 800ee92:	4b07      	ldr	r3, [pc, #28]	; (800eeb0 <_dtoa_r+0xbd8>)
 800ee94:	f7ff ba8e 	b.w	800e3b4 <_dtoa_r+0xdc>
 800ee98:	9b02      	ldr	r3, [sp, #8]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	dcae      	bgt.n	800edfc <_dtoa_r+0xb24>
 800ee9e:	9b06      	ldr	r3, [sp, #24]
 800eea0:	2b02      	cmp	r3, #2
 800eea2:	f73f aea8 	bgt.w	800ebf6 <_dtoa_r+0x91e>
 800eea6:	e7a9      	b.n	800edfc <_dtoa_r+0xb24>
 800eea8:	0803d5b1 	.word	0x0803d5b1
 800eeac:	0803d7e0 	.word	0x0803d7e0
 800eeb0:	0803d549 	.word	0x0803d549

0800eeb4 <__sflush_r>:
 800eeb4:	898a      	ldrh	r2, [r1, #12]
 800eeb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeba:	4605      	mov	r5, r0
 800eebc:	0710      	lsls	r0, r2, #28
 800eebe:	460c      	mov	r4, r1
 800eec0:	d458      	bmi.n	800ef74 <__sflush_r+0xc0>
 800eec2:	684b      	ldr	r3, [r1, #4]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	dc05      	bgt.n	800eed4 <__sflush_r+0x20>
 800eec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	dc02      	bgt.n	800eed4 <__sflush_r+0x20>
 800eece:	2000      	movs	r0, #0
 800eed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eed6:	2e00      	cmp	r6, #0
 800eed8:	d0f9      	beq.n	800eece <__sflush_r+0x1a>
 800eeda:	2300      	movs	r3, #0
 800eedc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eee0:	682f      	ldr	r7, [r5, #0]
 800eee2:	602b      	str	r3, [r5, #0]
 800eee4:	d032      	beq.n	800ef4c <__sflush_r+0x98>
 800eee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eee8:	89a3      	ldrh	r3, [r4, #12]
 800eeea:	075a      	lsls	r2, r3, #29
 800eeec:	d505      	bpl.n	800eefa <__sflush_r+0x46>
 800eeee:	6863      	ldr	r3, [r4, #4]
 800eef0:	1ac0      	subs	r0, r0, r3
 800eef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eef4:	b10b      	cbz	r3, 800eefa <__sflush_r+0x46>
 800eef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eef8:	1ac0      	subs	r0, r0, r3
 800eefa:	2300      	movs	r3, #0
 800eefc:	4602      	mov	r2, r0
 800eefe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef00:	6a21      	ldr	r1, [r4, #32]
 800ef02:	4628      	mov	r0, r5
 800ef04:	47b0      	blx	r6
 800ef06:	1c43      	adds	r3, r0, #1
 800ef08:	89a3      	ldrh	r3, [r4, #12]
 800ef0a:	d106      	bne.n	800ef1a <__sflush_r+0x66>
 800ef0c:	6829      	ldr	r1, [r5, #0]
 800ef0e:	291d      	cmp	r1, #29
 800ef10:	d82c      	bhi.n	800ef6c <__sflush_r+0xb8>
 800ef12:	4a2a      	ldr	r2, [pc, #168]	; (800efbc <__sflush_r+0x108>)
 800ef14:	40ca      	lsrs	r2, r1
 800ef16:	07d6      	lsls	r6, r2, #31
 800ef18:	d528      	bpl.n	800ef6c <__sflush_r+0xb8>
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	6062      	str	r2, [r4, #4]
 800ef1e:	04d9      	lsls	r1, r3, #19
 800ef20:	6922      	ldr	r2, [r4, #16]
 800ef22:	6022      	str	r2, [r4, #0]
 800ef24:	d504      	bpl.n	800ef30 <__sflush_r+0x7c>
 800ef26:	1c42      	adds	r2, r0, #1
 800ef28:	d101      	bne.n	800ef2e <__sflush_r+0x7a>
 800ef2a:	682b      	ldr	r3, [r5, #0]
 800ef2c:	b903      	cbnz	r3, 800ef30 <__sflush_r+0x7c>
 800ef2e:	6560      	str	r0, [r4, #84]	; 0x54
 800ef30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef32:	602f      	str	r7, [r5, #0]
 800ef34:	2900      	cmp	r1, #0
 800ef36:	d0ca      	beq.n	800eece <__sflush_r+0x1a>
 800ef38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef3c:	4299      	cmp	r1, r3
 800ef3e:	d002      	beq.n	800ef46 <__sflush_r+0x92>
 800ef40:	4628      	mov	r0, r5
 800ef42:	f7fd f8ed 	bl	800c120 <_free_r>
 800ef46:	2000      	movs	r0, #0
 800ef48:	6360      	str	r0, [r4, #52]	; 0x34
 800ef4a:	e7c1      	b.n	800eed0 <__sflush_r+0x1c>
 800ef4c:	6a21      	ldr	r1, [r4, #32]
 800ef4e:	2301      	movs	r3, #1
 800ef50:	4628      	mov	r0, r5
 800ef52:	47b0      	blx	r6
 800ef54:	1c41      	adds	r1, r0, #1
 800ef56:	d1c7      	bne.n	800eee8 <__sflush_r+0x34>
 800ef58:	682b      	ldr	r3, [r5, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d0c4      	beq.n	800eee8 <__sflush_r+0x34>
 800ef5e:	2b1d      	cmp	r3, #29
 800ef60:	d001      	beq.n	800ef66 <__sflush_r+0xb2>
 800ef62:	2b16      	cmp	r3, #22
 800ef64:	d101      	bne.n	800ef6a <__sflush_r+0xb6>
 800ef66:	602f      	str	r7, [r5, #0]
 800ef68:	e7b1      	b.n	800eece <__sflush_r+0x1a>
 800ef6a:	89a3      	ldrh	r3, [r4, #12]
 800ef6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef70:	81a3      	strh	r3, [r4, #12]
 800ef72:	e7ad      	b.n	800eed0 <__sflush_r+0x1c>
 800ef74:	690f      	ldr	r7, [r1, #16]
 800ef76:	2f00      	cmp	r7, #0
 800ef78:	d0a9      	beq.n	800eece <__sflush_r+0x1a>
 800ef7a:	0793      	lsls	r3, r2, #30
 800ef7c:	680e      	ldr	r6, [r1, #0]
 800ef7e:	bf08      	it	eq
 800ef80:	694b      	ldreq	r3, [r1, #20]
 800ef82:	600f      	str	r7, [r1, #0]
 800ef84:	bf18      	it	ne
 800ef86:	2300      	movne	r3, #0
 800ef88:	eba6 0807 	sub.w	r8, r6, r7
 800ef8c:	608b      	str	r3, [r1, #8]
 800ef8e:	f1b8 0f00 	cmp.w	r8, #0
 800ef92:	dd9c      	ble.n	800eece <__sflush_r+0x1a>
 800ef94:	6a21      	ldr	r1, [r4, #32]
 800ef96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef98:	4643      	mov	r3, r8
 800ef9a:	463a      	mov	r2, r7
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	47b0      	blx	r6
 800efa0:	2800      	cmp	r0, #0
 800efa2:	dc06      	bgt.n	800efb2 <__sflush_r+0xfe>
 800efa4:	89a3      	ldrh	r3, [r4, #12]
 800efa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efaa:	81a3      	strh	r3, [r4, #12]
 800efac:	f04f 30ff 	mov.w	r0, #4294967295
 800efb0:	e78e      	b.n	800eed0 <__sflush_r+0x1c>
 800efb2:	4407      	add	r7, r0
 800efb4:	eba8 0800 	sub.w	r8, r8, r0
 800efb8:	e7e9      	b.n	800ef8e <__sflush_r+0xda>
 800efba:	bf00      	nop
 800efbc:	20400001 	.word	0x20400001

0800efc0 <_fflush_r>:
 800efc0:	b538      	push	{r3, r4, r5, lr}
 800efc2:	690b      	ldr	r3, [r1, #16]
 800efc4:	4605      	mov	r5, r0
 800efc6:	460c      	mov	r4, r1
 800efc8:	b913      	cbnz	r3, 800efd0 <_fflush_r+0x10>
 800efca:	2500      	movs	r5, #0
 800efcc:	4628      	mov	r0, r5
 800efce:	bd38      	pop	{r3, r4, r5, pc}
 800efd0:	b118      	cbz	r0, 800efda <_fflush_r+0x1a>
 800efd2:	6983      	ldr	r3, [r0, #24]
 800efd4:	b90b      	cbnz	r3, 800efda <_fflush_r+0x1a>
 800efd6:	f000 f887 	bl	800f0e8 <__sinit>
 800efda:	4b14      	ldr	r3, [pc, #80]	; (800f02c <_fflush_r+0x6c>)
 800efdc:	429c      	cmp	r4, r3
 800efde:	d11b      	bne.n	800f018 <_fflush_r+0x58>
 800efe0:	686c      	ldr	r4, [r5, #4]
 800efe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d0ef      	beq.n	800efca <_fflush_r+0xa>
 800efea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efec:	07d0      	lsls	r0, r2, #31
 800efee:	d404      	bmi.n	800effa <_fflush_r+0x3a>
 800eff0:	0599      	lsls	r1, r3, #22
 800eff2:	d402      	bmi.n	800effa <_fflush_r+0x3a>
 800eff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eff6:	f000 f967 	bl	800f2c8 <__retarget_lock_acquire_recursive>
 800effa:	4628      	mov	r0, r5
 800effc:	4621      	mov	r1, r4
 800effe:	f7ff ff59 	bl	800eeb4 <__sflush_r>
 800f002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f004:	07da      	lsls	r2, r3, #31
 800f006:	4605      	mov	r5, r0
 800f008:	d4e0      	bmi.n	800efcc <_fflush_r+0xc>
 800f00a:	89a3      	ldrh	r3, [r4, #12]
 800f00c:	059b      	lsls	r3, r3, #22
 800f00e:	d4dd      	bmi.n	800efcc <_fflush_r+0xc>
 800f010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f012:	f000 f95b 	bl	800f2cc <__retarget_lock_release_recursive>
 800f016:	e7d9      	b.n	800efcc <_fflush_r+0xc>
 800f018:	4b05      	ldr	r3, [pc, #20]	; (800f030 <_fflush_r+0x70>)
 800f01a:	429c      	cmp	r4, r3
 800f01c:	d101      	bne.n	800f022 <_fflush_r+0x62>
 800f01e:	68ac      	ldr	r4, [r5, #8]
 800f020:	e7df      	b.n	800efe2 <_fflush_r+0x22>
 800f022:	4b04      	ldr	r3, [pc, #16]	; (800f034 <_fflush_r+0x74>)
 800f024:	429c      	cmp	r4, r3
 800f026:	bf08      	it	eq
 800f028:	68ec      	ldreq	r4, [r5, #12]
 800f02a:	e7da      	b.n	800efe2 <_fflush_r+0x22>
 800f02c:	0803d5e4 	.word	0x0803d5e4
 800f030:	0803d604 	.word	0x0803d604
 800f034:	0803d5c4 	.word	0x0803d5c4

0800f038 <std>:
 800f038:	2300      	movs	r3, #0
 800f03a:	b510      	push	{r4, lr}
 800f03c:	4604      	mov	r4, r0
 800f03e:	e9c0 3300 	strd	r3, r3, [r0]
 800f042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f046:	6083      	str	r3, [r0, #8]
 800f048:	8181      	strh	r1, [r0, #12]
 800f04a:	6643      	str	r3, [r0, #100]	; 0x64
 800f04c:	81c2      	strh	r2, [r0, #14]
 800f04e:	6183      	str	r3, [r0, #24]
 800f050:	4619      	mov	r1, r3
 800f052:	2208      	movs	r2, #8
 800f054:	305c      	adds	r0, #92	; 0x5c
 800f056:	f7fc fde9 	bl	800bc2c <memset>
 800f05a:	4b05      	ldr	r3, [pc, #20]	; (800f070 <std+0x38>)
 800f05c:	6263      	str	r3, [r4, #36]	; 0x24
 800f05e:	4b05      	ldr	r3, [pc, #20]	; (800f074 <std+0x3c>)
 800f060:	62a3      	str	r3, [r4, #40]	; 0x28
 800f062:	4b05      	ldr	r3, [pc, #20]	; (800f078 <std+0x40>)
 800f064:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f066:	4b05      	ldr	r3, [pc, #20]	; (800f07c <std+0x44>)
 800f068:	6224      	str	r4, [r4, #32]
 800f06a:	6323      	str	r3, [r4, #48]	; 0x30
 800f06c:	bd10      	pop	{r4, pc}
 800f06e:	bf00      	nop
 800f070:	0800cf21 	.word	0x0800cf21
 800f074:	0800cf47 	.word	0x0800cf47
 800f078:	0800cf7f 	.word	0x0800cf7f
 800f07c:	0800cfa3 	.word	0x0800cfa3

0800f080 <_cleanup_r>:
 800f080:	4901      	ldr	r1, [pc, #4]	; (800f088 <_cleanup_r+0x8>)
 800f082:	f000 b8af 	b.w	800f1e4 <_fwalk_reent>
 800f086:	bf00      	nop
 800f088:	0800efc1 	.word	0x0800efc1

0800f08c <__sfmoreglue>:
 800f08c:	b570      	push	{r4, r5, r6, lr}
 800f08e:	2268      	movs	r2, #104	; 0x68
 800f090:	1e4d      	subs	r5, r1, #1
 800f092:	4355      	muls	r5, r2
 800f094:	460e      	mov	r6, r1
 800f096:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f09a:	f7fd f8ad 	bl	800c1f8 <_malloc_r>
 800f09e:	4604      	mov	r4, r0
 800f0a0:	b140      	cbz	r0, 800f0b4 <__sfmoreglue+0x28>
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	e9c0 1600 	strd	r1, r6, [r0]
 800f0a8:	300c      	adds	r0, #12
 800f0aa:	60a0      	str	r0, [r4, #8]
 800f0ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f0b0:	f7fc fdbc 	bl	800bc2c <memset>
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	bd70      	pop	{r4, r5, r6, pc}

0800f0b8 <__sfp_lock_acquire>:
 800f0b8:	4801      	ldr	r0, [pc, #4]	; (800f0c0 <__sfp_lock_acquire+0x8>)
 800f0ba:	f000 b905 	b.w	800f2c8 <__retarget_lock_acquire_recursive>
 800f0be:	bf00      	nop
 800f0c0:	200037e6 	.word	0x200037e6

0800f0c4 <__sfp_lock_release>:
 800f0c4:	4801      	ldr	r0, [pc, #4]	; (800f0cc <__sfp_lock_release+0x8>)
 800f0c6:	f000 b901 	b.w	800f2cc <__retarget_lock_release_recursive>
 800f0ca:	bf00      	nop
 800f0cc:	200037e6 	.word	0x200037e6

0800f0d0 <__sinit_lock_acquire>:
 800f0d0:	4801      	ldr	r0, [pc, #4]	; (800f0d8 <__sinit_lock_acquire+0x8>)
 800f0d2:	f000 b8f9 	b.w	800f2c8 <__retarget_lock_acquire_recursive>
 800f0d6:	bf00      	nop
 800f0d8:	200037e7 	.word	0x200037e7

0800f0dc <__sinit_lock_release>:
 800f0dc:	4801      	ldr	r0, [pc, #4]	; (800f0e4 <__sinit_lock_release+0x8>)
 800f0de:	f000 b8f5 	b.w	800f2cc <__retarget_lock_release_recursive>
 800f0e2:	bf00      	nop
 800f0e4:	200037e7 	.word	0x200037e7

0800f0e8 <__sinit>:
 800f0e8:	b510      	push	{r4, lr}
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	f7ff fff0 	bl	800f0d0 <__sinit_lock_acquire>
 800f0f0:	69a3      	ldr	r3, [r4, #24]
 800f0f2:	b11b      	cbz	r3, 800f0fc <__sinit+0x14>
 800f0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0f8:	f7ff bff0 	b.w	800f0dc <__sinit_lock_release>
 800f0fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f100:	6523      	str	r3, [r4, #80]	; 0x50
 800f102:	4b13      	ldr	r3, [pc, #76]	; (800f150 <__sinit+0x68>)
 800f104:	4a13      	ldr	r2, [pc, #76]	; (800f154 <__sinit+0x6c>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	62a2      	str	r2, [r4, #40]	; 0x28
 800f10a:	42a3      	cmp	r3, r4
 800f10c:	bf04      	itt	eq
 800f10e:	2301      	moveq	r3, #1
 800f110:	61a3      	streq	r3, [r4, #24]
 800f112:	4620      	mov	r0, r4
 800f114:	f000 f820 	bl	800f158 <__sfp>
 800f118:	6060      	str	r0, [r4, #4]
 800f11a:	4620      	mov	r0, r4
 800f11c:	f000 f81c 	bl	800f158 <__sfp>
 800f120:	60a0      	str	r0, [r4, #8]
 800f122:	4620      	mov	r0, r4
 800f124:	f000 f818 	bl	800f158 <__sfp>
 800f128:	2200      	movs	r2, #0
 800f12a:	60e0      	str	r0, [r4, #12]
 800f12c:	2104      	movs	r1, #4
 800f12e:	6860      	ldr	r0, [r4, #4]
 800f130:	f7ff ff82 	bl	800f038 <std>
 800f134:	68a0      	ldr	r0, [r4, #8]
 800f136:	2201      	movs	r2, #1
 800f138:	2109      	movs	r1, #9
 800f13a:	f7ff ff7d 	bl	800f038 <std>
 800f13e:	68e0      	ldr	r0, [r4, #12]
 800f140:	2202      	movs	r2, #2
 800f142:	2112      	movs	r1, #18
 800f144:	f7ff ff78 	bl	800f038 <std>
 800f148:	2301      	movs	r3, #1
 800f14a:	61a3      	str	r3, [r4, #24]
 800f14c:	e7d2      	b.n	800f0f4 <__sinit+0xc>
 800f14e:	bf00      	nop
 800f150:	0803d0e4 	.word	0x0803d0e4
 800f154:	0800f081 	.word	0x0800f081

0800f158 <__sfp>:
 800f158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15a:	4607      	mov	r7, r0
 800f15c:	f7ff ffac 	bl	800f0b8 <__sfp_lock_acquire>
 800f160:	4b1e      	ldr	r3, [pc, #120]	; (800f1dc <__sfp+0x84>)
 800f162:	681e      	ldr	r6, [r3, #0]
 800f164:	69b3      	ldr	r3, [r6, #24]
 800f166:	b913      	cbnz	r3, 800f16e <__sfp+0x16>
 800f168:	4630      	mov	r0, r6
 800f16a:	f7ff ffbd 	bl	800f0e8 <__sinit>
 800f16e:	3648      	adds	r6, #72	; 0x48
 800f170:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f174:	3b01      	subs	r3, #1
 800f176:	d503      	bpl.n	800f180 <__sfp+0x28>
 800f178:	6833      	ldr	r3, [r6, #0]
 800f17a:	b30b      	cbz	r3, 800f1c0 <__sfp+0x68>
 800f17c:	6836      	ldr	r6, [r6, #0]
 800f17e:	e7f7      	b.n	800f170 <__sfp+0x18>
 800f180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f184:	b9d5      	cbnz	r5, 800f1bc <__sfp+0x64>
 800f186:	4b16      	ldr	r3, [pc, #88]	; (800f1e0 <__sfp+0x88>)
 800f188:	60e3      	str	r3, [r4, #12]
 800f18a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f18e:	6665      	str	r5, [r4, #100]	; 0x64
 800f190:	f000 f898 	bl	800f2c4 <__retarget_lock_init_recursive>
 800f194:	f7ff ff96 	bl	800f0c4 <__sfp_lock_release>
 800f198:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f19c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f1a0:	6025      	str	r5, [r4, #0]
 800f1a2:	61a5      	str	r5, [r4, #24]
 800f1a4:	2208      	movs	r2, #8
 800f1a6:	4629      	mov	r1, r5
 800f1a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f1ac:	f7fc fd3e 	bl	800bc2c <memset>
 800f1b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f1b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1bc:	3468      	adds	r4, #104	; 0x68
 800f1be:	e7d9      	b.n	800f174 <__sfp+0x1c>
 800f1c0:	2104      	movs	r1, #4
 800f1c2:	4638      	mov	r0, r7
 800f1c4:	f7ff ff62 	bl	800f08c <__sfmoreglue>
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	6030      	str	r0, [r6, #0]
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	d1d5      	bne.n	800f17c <__sfp+0x24>
 800f1d0:	f7ff ff78 	bl	800f0c4 <__sfp_lock_release>
 800f1d4:	230c      	movs	r3, #12
 800f1d6:	603b      	str	r3, [r7, #0]
 800f1d8:	e7ee      	b.n	800f1b8 <__sfp+0x60>
 800f1da:	bf00      	nop
 800f1dc:	0803d0e4 	.word	0x0803d0e4
 800f1e0:	ffff0001 	.word	0xffff0001

0800f1e4 <_fwalk_reent>:
 800f1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1e8:	4606      	mov	r6, r0
 800f1ea:	4688      	mov	r8, r1
 800f1ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f1f0:	2700      	movs	r7, #0
 800f1f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1f6:	f1b9 0901 	subs.w	r9, r9, #1
 800f1fa:	d505      	bpl.n	800f208 <_fwalk_reent+0x24>
 800f1fc:	6824      	ldr	r4, [r4, #0]
 800f1fe:	2c00      	cmp	r4, #0
 800f200:	d1f7      	bne.n	800f1f2 <_fwalk_reent+0xe>
 800f202:	4638      	mov	r0, r7
 800f204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f208:	89ab      	ldrh	r3, [r5, #12]
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d907      	bls.n	800f21e <_fwalk_reent+0x3a>
 800f20e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f212:	3301      	adds	r3, #1
 800f214:	d003      	beq.n	800f21e <_fwalk_reent+0x3a>
 800f216:	4629      	mov	r1, r5
 800f218:	4630      	mov	r0, r6
 800f21a:	47c0      	blx	r8
 800f21c:	4307      	orrs	r7, r0
 800f21e:	3568      	adds	r5, #104	; 0x68
 800f220:	e7e9      	b.n	800f1f6 <_fwalk_reent+0x12>
	...

0800f224 <_findenv_r>:
 800f224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f228:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800f298 <_findenv_r+0x74>
 800f22c:	4607      	mov	r7, r0
 800f22e:	4689      	mov	r9, r1
 800f230:	4616      	mov	r6, r2
 800f232:	f001 facf 	bl	80107d4 <__env_lock>
 800f236:	f8da 4000 	ldr.w	r4, [sl]
 800f23a:	b134      	cbz	r4, 800f24a <_findenv_r+0x26>
 800f23c:	464b      	mov	r3, r9
 800f23e:	4698      	mov	r8, r3
 800f240:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f244:	b13a      	cbz	r2, 800f256 <_findenv_r+0x32>
 800f246:	2a3d      	cmp	r2, #61	; 0x3d
 800f248:	d1f9      	bne.n	800f23e <_findenv_r+0x1a>
 800f24a:	4638      	mov	r0, r7
 800f24c:	f001 fac8 	bl	80107e0 <__env_unlock>
 800f250:	2000      	movs	r0, #0
 800f252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f256:	eba8 0809 	sub.w	r8, r8, r9
 800f25a:	46a3      	mov	fp, r4
 800f25c:	f854 0b04 	ldr.w	r0, [r4], #4
 800f260:	2800      	cmp	r0, #0
 800f262:	d0f2      	beq.n	800f24a <_findenv_r+0x26>
 800f264:	4642      	mov	r2, r8
 800f266:	4649      	mov	r1, r9
 800f268:	f001 f9e2 	bl	8010630 <strncmp>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d1f4      	bne.n	800f25a <_findenv_r+0x36>
 800f270:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f274:	eb03 0508 	add.w	r5, r3, r8
 800f278:	f813 3008 	ldrb.w	r3, [r3, r8]
 800f27c:	2b3d      	cmp	r3, #61	; 0x3d
 800f27e:	d1ec      	bne.n	800f25a <_findenv_r+0x36>
 800f280:	f8da 3000 	ldr.w	r3, [sl]
 800f284:	ebab 0303 	sub.w	r3, fp, r3
 800f288:	109b      	asrs	r3, r3, #2
 800f28a:	4638      	mov	r0, r7
 800f28c:	6033      	str	r3, [r6, #0]
 800f28e:	f001 faa7 	bl	80107e0 <__env_unlock>
 800f292:	1c68      	adds	r0, r5, #1
 800f294:	e7dd      	b.n	800f252 <_findenv_r+0x2e>
 800f296:	bf00      	nop
 800f298:	20000380 	.word	0x20000380

0800f29c <_getenv_r>:
 800f29c:	b507      	push	{r0, r1, r2, lr}
 800f29e:	aa01      	add	r2, sp, #4
 800f2a0:	f7ff ffc0 	bl	800f224 <_findenv_r>
 800f2a4:	b003      	add	sp, #12
 800f2a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f2ac <__gettzinfo>:
 800f2ac:	4800      	ldr	r0, [pc, #0]	; (800f2b0 <__gettzinfo+0x4>)
 800f2ae:	4770      	bx	lr
 800f2b0:	20000328 	.word	0x20000328

0800f2b4 <labs>:
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	bfb8      	it	lt
 800f2b8:	4240      	neglt	r0, r0
 800f2ba:	4770      	bx	lr

0800f2bc <_localeconv_r>:
 800f2bc:	4800      	ldr	r0, [pc, #0]	; (800f2c0 <_localeconv_r+0x4>)
 800f2be:	4770      	bx	lr
 800f2c0:	20000474 	.word	0x20000474

0800f2c4 <__retarget_lock_init_recursive>:
 800f2c4:	4770      	bx	lr

0800f2c6 <__retarget_lock_acquire>:
 800f2c6:	4770      	bx	lr

0800f2c8 <__retarget_lock_acquire_recursive>:
 800f2c8:	4770      	bx	lr

0800f2ca <__retarget_lock_release>:
 800f2ca:	4770      	bx	lr

0800f2cc <__retarget_lock_release_recursive>:
 800f2cc:	4770      	bx	lr
	...

0800f2d0 <_lseek_r>:
 800f2d0:	b538      	push	{r3, r4, r5, lr}
 800f2d2:	4d07      	ldr	r5, [pc, #28]	; (800f2f0 <_lseek_r+0x20>)
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	4608      	mov	r0, r1
 800f2d8:	4611      	mov	r1, r2
 800f2da:	2200      	movs	r2, #0
 800f2dc:	602a      	str	r2, [r5, #0]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	f003 ff34 	bl	801314c <_lseek>
 800f2e4:	1c43      	adds	r3, r0, #1
 800f2e6:	d102      	bne.n	800f2ee <_lseek_r+0x1e>
 800f2e8:	682b      	ldr	r3, [r5, #0]
 800f2ea:	b103      	cbz	r3, 800f2ee <_lseek_r+0x1e>
 800f2ec:	6023      	str	r3, [r4, #0]
 800f2ee:	bd38      	pop	{r3, r4, r5, pc}
 800f2f0:	200037ec 	.word	0x200037ec

0800f2f4 <__swhatbuf_r>:
 800f2f4:	b570      	push	{r4, r5, r6, lr}
 800f2f6:	460e      	mov	r6, r1
 800f2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2fc:	2900      	cmp	r1, #0
 800f2fe:	b096      	sub	sp, #88	; 0x58
 800f300:	4614      	mov	r4, r2
 800f302:	461d      	mov	r5, r3
 800f304:	da08      	bge.n	800f318 <__swhatbuf_r+0x24>
 800f306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f30a:	2200      	movs	r2, #0
 800f30c:	602a      	str	r2, [r5, #0]
 800f30e:	061a      	lsls	r2, r3, #24
 800f310:	d410      	bmi.n	800f334 <__swhatbuf_r+0x40>
 800f312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f316:	e00e      	b.n	800f336 <__swhatbuf_r+0x42>
 800f318:	466a      	mov	r2, sp
 800f31a:	f001 fa6d 	bl	80107f8 <_fstat_r>
 800f31e:	2800      	cmp	r0, #0
 800f320:	dbf1      	blt.n	800f306 <__swhatbuf_r+0x12>
 800f322:	9a01      	ldr	r2, [sp, #4]
 800f324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f32c:	425a      	negs	r2, r3
 800f32e:	415a      	adcs	r2, r3
 800f330:	602a      	str	r2, [r5, #0]
 800f332:	e7ee      	b.n	800f312 <__swhatbuf_r+0x1e>
 800f334:	2340      	movs	r3, #64	; 0x40
 800f336:	2000      	movs	r0, #0
 800f338:	6023      	str	r3, [r4, #0]
 800f33a:	b016      	add	sp, #88	; 0x58
 800f33c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f340 <__smakebuf_r>:
 800f340:	898b      	ldrh	r3, [r1, #12]
 800f342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f344:	079d      	lsls	r5, r3, #30
 800f346:	4606      	mov	r6, r0
 800f348:	460c      	mov	r4, r1
 800f34a:	d507      	bpl.n	800f35c <__smakebuf_r+0x1c>
 800f34c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f350:	6023      	str	r3, [r4, #0]
 800f352:	6123      	str	r3, [r4, #16]
 800f354:	2301      	movs	r3, #1
 800f356:	6163      	str	r3, [r4, #20]
 800f358:	b002      	add	sp, #8
 800f35a:	bd70      	pop	{r4, r5, r6, pc}
 800f35c:	ab01      	add	r3, sp, #4
 800f35e:	466a      	mov	r2, sp
 800f360:	f7ff ffc8 	bl	800f2f4 <__swhatbuf_r>
 800f364:	9900      	ldr	r1, [sp, #0]
 800f366:	4605      	mov	r5, r0
 800f368:	4630      	mov	r0, r6
 800f36a:	f7fc ff45 	bl	800c1f8 <_malloc_r>
 800f36e:	b948      	cbnz	r0, 800f384 <__smakebuf_r+0x44>
 800f370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f374:	059a      	lsls	r2, r3, #22
 800f376:	d4ef      	bmi.n	800f358 <__smakebuf_r+0x18>
 800f378:	f023 0303 	bic.w	r3, r3, #3
 800f37c:	f043 0302 	orr.w	r3, r3, #2
 800f380:	81a3      	strh	r3, [r4, #12]
 800f382:	e7e3      	b.n	800f34c <__smakebuf_r+0xc>
 800f384:	4b0d      	ldr	r3, [pc, #52]	; (800f3bc <__smakebuf_r+0x7c>)
 800f386:	62b3      	str	r3, [r6, #40]	; 0x28
 800f388:	89a3      	ldrh	r3, [r4, #12]
 800f38a:	6020      	str	r0, [r4, #0]
 800f38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f390:	81a3      	strh	r3, [r4, #12]
 800f392:	9b00      	ldr	r3, [sp, #0]
 800f394:	6163      	str	r3, [r4, #20]
 800f396:	9b01      	ldr	r3, [sp, #4]
 800f398:	6120      	str	r0, [r4, #16]
 800f39a:	b15b      	cbz	r3, 800f3b4 <__smakebuf_r+0x74>
 800f39c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	f001 fa3b 	bl	801081c <_isatty_r>
 800f3a6:	b128      	cbz	r0, 800f3b4 <__smakebuf_r+0x74>
 800f3a8:	89a3      	ldrh	r3, [r4, #12]
 800f3aa:	f023 0303 	bic.w	r3, r3, #3
 800f3ae:	f043 0301 	orr.w	r3, r3, #1
 800f3b2:	81a3      	strh	r3, [r4, #12]
 800f3b4:	89a0      	ldrh	r0, [r4, #12]
 800f3b6:	4305      	orrs	r5, r0
 800f3b8:	81a5      	strh	r5, [r4, #12]
 800f3ba:	e7cd      	b.n	800f358 <__smakebuf_r+0x18>
 800f3bc:	0800f081 	.word	0x0800f081

0800f3c0 <memmove>:
 800f3c0:	4288      	cmp	r0, r1
 800f3c2:	b510      	push	{r4, lr}
 800f3c4:	eb01 0402 	add.w	r4, r1, r2
 800f3c8:	d902      	bls.n	800f3d0 <memmove+0x10>
 800f3ca:	4284      	cmp	r4, r0
 800f3cc:	4623      	mov	r3, r4
 800f3ce:	d807      	bhi.n	800f3e0 <memmove+0x20>
 800f3d0:	1e43      	subs	r3, r0, #1
 800f3d2:	42a1      	cmp	r1, r4
 800f3d4:	d008      	beq.n	800f3e8 <memmove+0x28>
 800f3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3de:	e7f8      	b.n	800f3d2 <memmove+0x12>
 800f3e0:	4402      	add	r2, r0
 800f3e2:	4601      	mov	r1, r0
 800f3e4:	428a      	cmp	r2, r1
 800f3e6:	d100      	bne.n	800f3ea <memmove+0x2a>
 800f3e8:	bd10      	pop	{r4, pc}
 800f3ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3f2:	e7f7      	b.n	800f3e4 <memmove+0x24>

0800f3f4 <__malloc_lock>:
 800f3f4:	4801      	ldr	r0, [pc, #4]	; (800f3fc <__malloc_lock+0x8>)
 800f3f6:	f7ff bf67 	b.w	800f2c8 <__retarget_lock_acquire_recursive>
 800f3fa:	bf00      	nop
 800f3fc:	200037e5 	.word	0x200037e5

0800f400 <__malloc_unlock>:
 800f400:	4801      	ldr	r0, [pc, #4]	; (800f408 <__malloc_unlock+0x8>)
 800f402:	f7ff bf63 	b.w	800f2cc <__retarget_lock_release_recursive>
 800f406:	bf00      	nop
 800f408:	200037e5 	.word	0x200037e5

0800f40c <_Balloc>:
 800f40c:	b570      	push	{r4, r5, r6, lr}
 800f40e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f410:	4604      	mov	r4, r0
 800f412:	460d      	mov	r5, r1
 800f414:	b976      	cbnz	r6, 800f434 <_Balloc+0x28>
 800f416:	2010      	movs	r0, #16
 800f418:	f7fc fbea 	bl	800bbf0 <malloc>
 800f41c:	4602      	mov	r2, r0
 800f41e:	6260      	str	r0, [r4, #36]	; 0x24
 800f420:	b920      	cbnz	r0, 800f42c <_Balloc+0x20>
 800f422:	4b18      	ldr	r3, [pc, #96]	; (800f484 <_Balloc+0x78>)
 800f424:	4818      	ldr	r0, [pc, #96]	; (800f488 <_Balloc+0x7c>)
 800f426:	2166      	movs	r1, #102	; 0x66
 800f428:	f7fc fb8e 	bl	800bb48 <__assert_func>
 800f42c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f430:	6006      	str	r6, [r0, #0]
 800f432:	60c6      	str	r6, [r0, #12]
 800f434:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f436:	68f3      	ldr	r3, [r6, #12]
 800f438:	b183      	cbz	r3, 800f45c <_Balloc+0x50>
 800f43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f442:	b9b8      	cbnz	r0, 800f474 <_Balloc+0x68>
 800f444:	2101      	movs	r1, #1
 800f446:	fa01 f605 	lsl.w	r6, r1, r5
 800f44a:	1d72      	adds	r2, r6, #5
 800f44c:	0092      	lsls	r2, r2, #2
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 fb60 	bl	800fb14 <_calloc_r>
 800f454:	b160      	cbz	r0, 800f470 <_Balloc+0x64>
 800f456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f45a:	e00e      	b.n	800f47a <_Balloc+0x6e>
 800f45c:	2221      	movs	r2, #33	; 0x21
 800f45e:	2104      	movs	r1, #4
 800f460:	4620      	mov	r0, r4
 800f462:	f000 fb57 	bl	800fb14 <_calloc_r>
 800f466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f468:	60f0      	str	r0, [r6, #12]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d1e4      	bne.n	800f43a <_Balloc+0x2e>
 800f470:	2000      	movs	r0, #0
 800f472:	bd70      	pop	{r4, r5, r6, pc}
 800f474:	6802      	ldr	r2, [r0, #0]
 800f476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f47a:	2300      	movs	r3, #0
 800f47c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f480:	e7f7      	b.n	800f472 <_Balloc+0x66>
 800f482:	bf00      	nop
 800f484:	0803cfdc 	.word	0x0803cfdc
 800f488:	0803d684 	.word	0x0803d684

0800f48c <_Bfree>:
 800f48c:	b570      	push	{r4, r5, r6, lr}
 800f48e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f490:	4605      	mov	r5, r0
 800f492:	460c      	mov	r4, r1
 800f494:	b976      	cbnz	r6, 800f4b4 <_Bfree+0x28>
 800f496:	2010      	movs	r0, #16
 800f498:	f7fc fbaa 	bl	800bbf0 <malloc>
 800f49c:	4602      	mov	r2, r0
 800f49e:	6268      	str	r0, [r5, #36]	; 0x24
 800f4a0:	b920      	cbnz	r0, 800f4ac <_Bfree+0x20>
 800f4a2:	4b09      	ldr	r3, [pc, #36]	; (800f4c8 <_Bfree+0x3c>)
 800f4a4:	4809      	ldr	r0, [pc, #36]	; (800f4cc <_Bfree+0x40>)
 800f4a6:	218a      	movs	r1, #138	; 0x8a
 800f4a8:	f7fc fb4e 	bl	800bb48 <__assert_func>
 800f4ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4b0:	6006      	str	r6, [r0, #0]
 800f4b2:	60c6      	str	r6, [r0, #12]
 800f4b4:	b13c      	cbz	r4, 800f4c6 <_Bfree+0x3a>
 800f4b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f4b8:	6862      	ldr	r2, [r4, #4]
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f4c0:	6021      	str	r1, [r4, #0]
 800f4c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f4c6:	bd70      	pop	{r4, r5, r6, pc}
 800f4c8:	0803cfdc 	.word	0x0803cfdc
 800f4cc:	0803d684 	.word	0x0803d684

0800f4d0 <__multadd>:
 800f4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d4:	690d      	ldr	r5, [r1, #16]
 800f4d6:	4607      	mov	r7, r0
 800f4d8:	460c      	mov	r4, r1
 800f4da:	461e      	mov	r6, r3
 800f4dc:	f101 0c14 	add.w	ip, r1, #20
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	f8dc 3000 	ldr.w	r3, [ip]
 800f4e6:	b299      	uxth	r1, r3
 800f4e8:	fb02 6101 	mla	r1, r2, r1, r6
 800f4ec:	0c1e      	lsrs	r6, r3, #16
 800f4ee:	0c0b      	lsrs	r3, r1, #16
 800f4f0:	fb02 3306 	mla	r3, r2, r6, r3
 800f4f4:	b289      	uxth	r1, r1
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f4fc:	4285      	cmp	r5, r0
 800f4fe:	f84c 1b04 	str.w	r1, [ip], #4
 800f502:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f506:	dcec      	bgt.n	800f4e2 <__multadd+0x12>
 800f508:	b30e      	cbz	r6, 800f54e <__multadd+0x7e>
 800f50a:	68a3      	ldr	r3, [r4, #8]
 800f50c:	42ab      	cmp	r3, r5
 800f50e:	dc19      	bgt.n	800f544 <__multadd+0x74>
 800f510:	6861      	ldr	r1, [r4, #4]
 800f512:	4638      	mov	r0, r7
 800f514:	3101      	adds	r1, #1
 800f516:	f7ff ff79 	bl	800f40c <_Balloc>
 800f51a:	4680      	mov	r8, r0
 800f51c:	b928      	cbnz	r0, 800f52a <__multadd+0x5a>
 800f51e:	4602      	mov	r2, r0
 800f520:	4b0c      	ldr	r3, [pc, #48]	; (800f554 <__multadd+0x84>)
 800f522:	480d      	ldr	r0, [pc, #52]	; (800f558 <__multadd+0x88>)
 800f524:	21b5      	movs	r1, #181	; 0xb5
 800f526:	f7fc fb0f 	bl	800bb48 <__assert_func>
 800f52a:	6922      	ldr	r2, [r4, #16]
 800f52c:	3202      	adds	r2, #2
 800f52e:	f104 010c 	add.w	r1, r4, #12
 800f532:	0092      	lsls	r2, r2, #2
 800f534:	300c      	adds	r0, #12
 800f536:	f7fc fb6b 	bl	800bc10 <memcpy>
 800f53a:	4621      	mov	r1, r4
 800f53c:	4638      	mov	r0, r7
 800f53e:	f7ff ffa5 	bl	800f48c <_Bfree>
 800f542:	4644      	mov	r4, r8
 800f544:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f548:	3501      	adds	r5, #1
 800f54a:	615e      	str	r6, [r3, #20]
 800f54c:	6125      	str	r5, [r4, #16]
 800f54e:	4620      	mov	r0, r4
 800f550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f554:	0803d5b1 	.word	0x0803d5b1
 800f558:	0803d684 	.word	0x0803d684

0800f55c <__hi0bits>:
 800f55c:	0c03      	lsrs	r3, r0, #16
 800f55e:	041b      	lsls	r3, r3, #16
 800f560:	b9d3      	cbnz	r3, 800f598 <__hi0bits+0x3c>
 800f562:	0400      	lsls	r0, r0, #16
 800f564:	2310      	movs	r3, #16
 800f566:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f56a:	bf04      	itt	eq
 800f56c:	0200      	lsleq	r0, r0, #8
 800f56e:	3308      	addeq	r3, #8
 800f570:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f574:	bf04      	itt	eq
 800f576:	0100      	lsleq	r0, r0, #4
 800f578:	3304      	addeq	r3, #4
 800f57a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f57e:	bf04      	itt	eq
 800f580:	0080      	lsleq	r0, r0, #2
 800f582:	3302      	addeq	r3, #2
 800f584:	2800      	cmp	r0, #0
 800f586:	db05      	blt.n	800f594 <__hi0bits+0x38>
 800f588:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f58c:	f103 0301 	add.w	r3, r3, #1
 800f590:	bf08      	it	eq
 800f592:	2320      	moveq	r3, #32
 800f594:	4618      	mov	r0, r3
 800f596:	4770      	bx	lr
 800f598:	2300      	movs	r3, #0
 800f59a:	e7e4      	b.n	800f566 <__hi0bits+0xa>

0800f59c <__lo0bits>:
 800f59c:	6803      	ldr	r3, [r0, #0]
 800f59e:	f013 0207 	ands.w	r2, r3, #7
 800f5a2:	4601      	mov	r1, r0
 800f5a4:	d00b      	beq.n	800f5be <__lo0bits+0x22>
 800f5a6:	07da      	lsls	r2, r3, #31
 800f5a8:	d423      	bmi.n	800f5f2 <__lo0bits+0x56>
 800f5aa:	0798      	lsls	r0, r3, #30
 800f5ac:	bf49      	itett	mi
 800f5ae:	085b      	lsrmi	r3, r3, #1
 800f5b0:	089b      	lsrpl	r3, r3, #2
 800f5b2:	2001      	movmi	r0, #1
 800f5b4:	600b      	strmi	r3, [r1, #0]
 800f5b6:	bf5c      	itt	pl
 800f5b8:	600b      	strpl	r3, [r1, #0]
 800f5ba:	2002      	movpl	r0, #2
 800f5bc:	4770      	bx	lr
 800f5be:	b298      	uxth	r0, r3
 800f5c0:	b9a8      	cbnz	r0, 800f5ee <__lo0bits+0x52>
 800f5c2:	0c1b      	lsrs	r3, r3, #16
 800f5c4:	2010      	movs	r0, #16
 800f5c6:	b2da      	uxtb	r2, r3
 800f5c8:	b90a      	cbnz	r2, 800f5ce <__lo0bits+0x32>
 800f5ca:	3008      	adds	r0, #8
 800f5cc:	0a1b      	lsrs	r3, r3, #8
 800f5ce:	071a      	lsls	r2, r3, #28
 800f5d0:	bf04      	itt	eq
 800f5d2:	091b      	lsreq	r3, r3, #4
 800f5d4:	3004      	addeq	r0, #4
 800f5d6:	079a      	lsls	r2, r3, #30
 800f5d8:	bf04      	itt	eq
 800f5da:	089b      	lsreq	r3, r3, #2
 800f5dc:	3002      	addeq	r0, #2
 800f5de:	07da      	lsls	r2, r3, #31
 800f5e0:	d403      	bmi.n	800f5ea <__lo0bits+0x4e>
 800f5e2:	085b      	lsrs	r3, r3, #1
 800f5e4:	f100 0001 	add.w	r0, r0, #1
 800f5e8:	d005      	beq.n	800f5f6 <__lo0bits+0x5a>
 800f5ea:	600b      	str	r3, [r1, #0]
 800f5ec:	4770      	bx	lr
 800f5ee:	4610      	mov	r0, r2
 800f5f0:	e7e9      	b.n	800f5c6 <__lo0bits+0x2a>
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	4770      	bx	lr
 800f5f6:	2020      	movs	r0, #32
 800f5f8:	4770      	bx	lr
	...

0800f5fc <__i2b>:
 800f5fc:	b510      	push	{r4, lr}
 800f5fe:	460c      	mov	r4, r1
 800f600:	2101      	movs	r1, #1
 800f602:	f7ff ff03 	bl	800f40c <_Balloc>
 800f606:	4602      	mov	r2, r0
 800f608:	b928      	cbnz	r0, 800f616 <__i2b+0x1a>
 800f60a:	4b05      	ldr	r3, [pc, #20]	; (800f620 <__i2b+0x24>)
 800f60c:	4805      	ldr	r0, [pc, #20]	; (800f624 <__i2b+0x28>)
 800f60e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f612:	f7fc fa99 	bl	800bb48 <__assert_func>
 800f616:	2301      	movs	r3, #1
 800f618:	6144      	str	r4, [r0, #20]
 800f61a:	6103      	str	r3, [r0, #16]
 800f61c:	bd10      	pop	{r4, pc}
 800f61e:	bf00      	nop
 800f620:	0803d5b1 	.word	0x0803d5b1
 800f624:	0803d684 	.word	0x0803d684

0800f628 <__multiply>:
 800f628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f62c:	4691      	mov	r9, r2
 800f62e:	690a      	ldr	r2, [r1, #16]
 800f630:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f634:	429a      	cmp	r2, r3
 800f636:	bfb8      	it	lt
 800f638:	460b      	movlt	r3, r1
 800f63a:	460c      	mov	r4, r1
 800f63c:	bfbc      	itt	lt
 800f63e:	464c      	movlt	r4, r9
 800f640:	4699      	movlt	r9, r3
 800f642:	6927      	ldr	r7, [r4, #16]
 800f644:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f648:	68a3      	ldr	r3, [r4, #8]
 800f64a:	6861      	ldr	r1, [r4, #4]
 800f64c:	eb07 060a 	add.w	r6, r7, sl
 800f650:	42b3      	cmp	r3, r6
 800f652:	b085      	sub	sp, #20
 800f654:	bfb8      	it	lt
 800f656:	3101      	addlt	r1, #1
 800f658:	f7ff fed8 	bl	800f40c <_Balloc>
 800f65c:	b930      	cbnz	r0, 800f66c <__multiply+0x44>
 800f65e:	4602      	mov	r2, r0
 800f660:	4b44      	ldr	r3, [pc, #272]	; (800f774 <__multiply+0x14c>)
 800f662:	4845      	ldr	r0, [pc, #276]	; (800f778 <__multiply+0x150>)
 800f664:	f240 115d 	movw	r1, #349	; 0x15d
 800f668:	f7fc fa6e 	bl	800bb48 <__assert_func>
 800f66c:	f100 0514 	add.w	r5, r0, #20
 800f670:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f674:	462b      	mov	r3, r5
 800f676:	2200      	movs	r2, #0
 800f678:	4543      	cmp	r3, r8
 800f67a:	d321      	bcc.n	800f6c0 <__multiply+0x98>
 800f67c:	f104 0314 	add.w	r3, r4, #20
 800f680:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f684:	f109 0314 	add.w	r3, r9, #20
 800f688:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f68c:	9202      	str	r2, [sp, #8]
 800f68e:	1b3a      	subs	r2, r7, r4
 800f690:	3a15      	subs	r2, #21
 800f692:	f022 0203 	bic.w	r2, r2, #3
 800f696:	3204      	adds	r2, #4
 800f698:	f104 0115 	add.w	r1, r4, #21
 800f69c:	428f      	cmp	r7, r1
 800f69e:	bf38      	it	cc
 800f6a0:	2204      	movcc	r2, #4
 800f6a2:	9201      	str	r2, [sp, #4]
 800f6a4:	9a02      	ldr	r2, [sp, #8]
 800f6a6:	9303      	str	r3, [sp, #12]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d80c      	bhi.n	800f6c6 <__multiply+0x9e>
 800f6ac:	2e00      	cmp	r6, #0
 800f6ae:	dd03      	ble.n	800f6b8 <__multiply+0x90>
 800f6b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d05a      	beq.n	800f76e <__multiply+0x146>
 800f6b8:	6106      	str	r6, [r0, #16]
 800f6ba:	b005      	add	sp, #20
 800f6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c0:	f843 2b04 	str.w	r2, [r3], #4
 800f6c4:	e7d8      	b.n	800f678 <__multiply+0x50>
 800f6c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800f6ca:	f1ba 0f00 	cmp.w	sl, #0
 800f6ce:	d024      	beq.n	800f71a <__multiply+0xf2>
 800f6d0:	f104 0e14 	add.w	lr, r4, #20
 800f6d4:	46a9      	mov	r9, r5
 800f6d6:	f04f 0c00 	mov.w	ip, #0
 800f6da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f6de:	f8d9 1000 	ldr.w	r1, [r9]
 800f6e2:	fa1f fb82 	uxth.w	fp, r2
 800f6e6:	b289      	uxth	r1, r1
 800f6e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800f6ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f6f0:	f8d9 2000 	ldr.w	r2, [r9]
 800f6f4:	4461      	add	r1, ip
 800f6f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f6fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800f6fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f702:	b289      	uxth	r1, r1
 800f704:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f708:	4577      	cmp	r7, lr
 800f70a:	f849 1b04 	str.w	r1, [r9], #4
 800f70e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f712:	d8e2      	bhi.n	800f6da <__multiply+0xb2>
 800f714:	9a01      	ldr	r2, [sp, #4]
 800f716:	f845 c002 	str.w	ip, [r5, r2]
 800f71a:	9a03      	ldr	r2, [sp, #12]
 800f71c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f720:	3304      	adds	r3, #4
 800f722:	f1b9 0f00 	cmp.w	r9, #0
 800f726:	d020      	beq.n	800f76a <__multiply+0x142>
 800f728:	6829      	ldr	r1, [r5, #0]
 800f72a:	f104 0c14 	add.w	ip, r4, #20
 800f72e:	46ae      	mov	lr, r5
 800f730:	f04f 0a00 	mov.w	sl, #0
 800f734:	f8bc b000 	ldrh.w	fp, [ip]
 800f738:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f73c:	fb09 220b 	mla	r2, r9, fp, r2
 800f740:	4492      	add	sl, r2
 800f742:	b289      	uxth	r1, r1
 800f744:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f748:	f84e 1b04 	str.w	r1, [lr], #4
 800f74c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f750:	f8be 1000 	ldrh.w	r1, [lr]
 800f754:	0c12      	lsrs	r2, r2, #16
 800f756:	fb09 1102 	mla	r1, r9, r2, r1
 800f75a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f75e:	4567      	cmp	r7, ip
 800f760:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f764:	d8e6      	bhi.n	800f734 <__multiply+0x10c>
 800f766:	9a01      	ldr	r2, [sp, #4]
 800f768:	50a9      	str	r1, [r5, r2]
 800f76a:	3504      	adds	r5, #4
 800f76c:	e79a      	b.n	800f6a4 <__multiply+0x7c>
 800f76e:	3e01      	subs	r6, #1
 800f770:	e79c      	b.n	800f6ac <__multiply+0x84>
 800f772:	bf00      	nop
 800f774:	0803d5b1 	.word	0x0803d5b1
 800f778:	0803d684 	.word	0x0803d684

0800f77c <__pow5mult>:
 800f77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f780:	4615      	mov	r5, r2
 800f782:	f012 0203 	ands.w	r2, r2, #3
 800f786:	4606      	mov	r6, r0
 800f788:	460f      	mov	r7, r1
 800f78a:	d007      	beq.n	800f79c <__pow5mult+0x20>
 800f78c:	4c25      	ldr	r4, [pc, #148]	; (800f824 <__pow5mult+0xa8>)
 800f78e:	3a01      	subs	r2, #1
 800f790:	2300      	movs	r3, #0
 800f792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f796:	f7ff fe9b 	bl	800f4d0 <__multadd>
 800f79a:	4607      	mov	r7, r0
 800f79c:	10ad      	asrs	r5, r5, #2
 800f79e:	d03d      	beq.n	800f81c <__pow5mult+0xa0>
 800f7a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f7a2:	b97c      	cbnz	r4, 800f7c4 <__pow5mult+0x48>
 800f7a4:	2010      	movs	r0, #16
 800f7a6:	f7fc fa23 	bl	800bbf0 <malloc>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	6270      	str	r0, [r6, #36]	; 0x24
 800f7ae:	b928      	cbnz	r0, 800f7bc <__pow5mult+0x40>
 800f7b0:	4b1d      	ldr	r3, [pc, #116]	; (800f828 <__pow5mult+0xac>)
 800f7b2:	481e      	ldr	r0, [pc, #120]	; (800f82c <__pow5mult+0xb0>)
 800f7b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f7b8:	f7fc f9c6 	bl	800bb48 <__assert_func>
 800f7bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f7c0:	6004      	str	r4, [r0, #0]
 800f7c2:	60c4      	str	r4, [r0, #12]
 800f7c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f7c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f7cc:	b94c      	cbnz	r4, 800f7e2 <__pow5mult+0x66>
 800f7ce:	f240 2171 	movw	r1, #625	; 0x271
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	f7ff ff12 	bl	800f5fc <__i2b>
 800f7d8:	2300      	movs	r3, #0
 800f7da:	f8c8 0008 	str.w	r0, [r8, #8]
 800f7de:	4604      	mov	r4, r0
 800f7e0:	6003      	str	r3, [r0, #0]
 800f7e2:	f04f 0900 	mov.w	r9, #0
 800f7e6:	07eb      	lsls	r3, r5, #31
 800f7e8:	d50a      	bpl.n	800f800 <__pow5mult+0x84>
 800f7ea:	4639      	mov	r1, r7
 800f7ec:	4622      	mov	r2, r4
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	f7ff ff1a 	bl	800f628 <__multiply>
 800f7f4:	4639      	mov	r1, r7
 800f7f6:	4680      	mov	r8, r0
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	f7ff fe47 	bl	800f48c <_Bfree>
 800f7fe:	4647      	mov	r7, r8
 800f800:	106d      	asrs	r5, r5, #1
 800f802:	d00b      	beq.n	800f81c <__pow5mult+0xa0>
 800f804:	6820      	ldr	r0, [r4, #0]
 800f806:	b938      	cbnz	r0, 800f818 <__pow5mult+0x9c>
 800f808:	4622      	mov	r2, r4
 800f80a:	4621      	mov	r1, r4
 800f80c:	4630      	mov	r0, r6
 800f80e:	f7ff ff0b 	bl	800f628 <__multiply>
 800f812:	6020      	str	r0, [r4, #0]
 800f814:	f8c0 9000 	str.w	r9, [r0]
 800f818:	4604      	mov	r4, r0
 800f81a:	e7e4      	b.n	800f7e6 <__pow5mult+0x6a>
 800f81c:	4638      	mov	r0, r7
 800f81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f822:	bf00      	nop
 800f824:	0803d7d0 	.word	0x0803d7d0
 800f828:	0803cfdc 	.word	0x0803cfdc
 800f82c:	0803d684 	.word	0x0803d684

0800f830 <__lshift>:
 800f830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f834:	460c      	mov	r4, r1
 800f836:	6849      	ldr	r1, [r1, #4]
 800f838:	6923      	ldr	r3, [r4, #16]
 800f83a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f83e:	68a3      	ldr	r3, [r4, #8]
 800f840:	4607      	mov	r7, r0
 800f842:	4691      	mov	r9, r2
 800f844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f848:	f108 0601 	add.w	r6, r8, #1
 800f84c:	42b3      	cmp	r3, r6
 800f84e:	db0b      	blt.n	800f868 <__lshift+0x38>
 800f850:	4638      	mov	r0, r7
 800f852:	f7ff fddb 	bl	800f40c <_Balloc>
 800f856:	4605      	mov	r5, r0
 800f858:	b948      	cbnz	r0, 800f86e <__lshift+0x3e>
 800f85a:	4602      	mov	r2, r0
 800f85c:	4b2a      	ldr	r3, [pc, #168]	; (800f908 <__lshift+0xd8>)
 800f85e:	482b      	ldr	r0, [pc, #172]	; (800f90c <__lshift+0xdc>)
 800f860:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f864:	f7fc f970 	bl	800bb48 <__assert_func>
 800f868:	3101      	adds	r1, #1
 800f86a:	005b      	lsls	r3, r3, #1
 800f86c:	e7ee      	b.n	800f84c <__lshift+0x1c>
 800f86e:	2300      	movs	r3, #0
 800f870:	f100 0114 	add.w	r1, r0, #20
 800f874:	f100 0210 	add.w	r2, r0, #16
 800f878:	4618      	mov	r0, r3
 800f87a:	4553      	cmp	r3, sl
 800f87c:	db37      	blt.n	800f8ee <__lshift+0xbe>
 800f87e:	6920      	ldr	r0, [r4, #16]
 800f880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f884:	f104 0314 	add.w	r3, r4, #20
 800f888:	f019 091f 	ands.w	r9, r9, #31
 800f88c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f890:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f894:	d02f      	beq.n	800f8f6 <__lshift+0xc6>
 800f896:	f1c9 0e20 	rsb	lr, r9, #32
 800f89a:	468a      	mov	sl, r1
 800f89c:	f04f 0c00 	mov.w	ip, #0
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	fa02 f209 	lsl.w	r2, r2, r9
 800f8a6:	ea42 020c 	orr.w	r2, r2, ip
 800f8aa:	f84a 2b04 	str.w	r2, [sl], #4
 800f8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8b2:	4298      	cmp	r0, r3
 800f8b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f8b8:	d8f2      	bhi.n	800f8a0 <__lshift+0x70>
 800f8ba:	1b03      	subs	r3, r0, r4
 800f8bc:	3b15      	subs	r3, #21
 800f8be:	f023 0303 	bic.w	r3, r3, #3
 800f8c2:	3304      	adds	r3, #4
 800f8c4:	f104 0215 	add.w	r2, r4, #21
 800f8c8:	4290      	cmp	r0, r2
 800f8ca:	bf38      	it	cc
 800f8cc:	2304      	movcc	r3, #4
 800f8ce:	f841 c003 	str.w	ip, [r1, r3]
 800f8d2:	f1bc 0f00 	cmp.w	ip, #0
 800f8d6:	d001      	beq.n	800f8dc <__lshift+0xac>
 800f8d8:	f108 0602 	add.w	r6, r8, #2
 800f8dc:	3e01      	subs	r6, #1
 800f8de:	4638      	mov	r0, r7
 800f8e0:	612e      	str	r6, [r5, #16]
 800f8e2:	4621      	mov	r1, r4
 800f8e4:	f7ff fdd2 	bl	800f48c <_Bfree>
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	e7c1      	b.n	800f87a <__lshift+0x4a>
 800f8f6:	3904      	subs	r1, #4
 800f8f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f900:	4298      	cmp	r0, r3
 800f902:	d8f9      	bhi.n	800f8f8 <__lshift+0xc8>
 800f904:	e7ea      	b.n	800f8dc <__lshift+0xac>
 800f906:	bf00      	nop
 800f908:	0803d5b1 	.word	0x0803d5b1
 800f90c:	0803d684 	.word	0x0803d684

0800f910 <__mcmp>:
 800f910:	b530      	push	{r4, r5, lr}
 800f912:	6902      	ldr	r2, [r0, #16]
 800f914:	690c      	ldr	r4, [r1, #16]
 800f916:	1b12      	subs	r2, r2, r4
 800f918:	d10e      	bne.n	800f938 <__mcmp+0x28>
 800f91a:	f100 0314 	add.w	r3, r0, #20
 800f91e:	3114      	adds	r1, #20
 800f920:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f924:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f928:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f92c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f930:	42a5      	cmp	r5, r4
 800f932:	d003      	beq.n	800f93c <__mcmp+0x2c>
 800f934:	d305      	bcc.n	800f942 <__mcmp+0x32>
 800f936:	2201      	movs	r2, #1
 800f938:	4610      	mov	r0, r2
 800f93a:	bd30      	pop	{r4, r5, pc}
 800f93c:	4283      	cmp	r3, r0
 800f93e:	d3f3      	bcc.n	800f928 <__mcmp+0x18>
 800f940:	e7fa      	b.n	800f938 <__mcmp+0x28>
 800f942:	f04f 32ff 	mov.w	r2, #4294967295
 800f946:	e7f7      	b.n	800f938 <__mcmp+0x28>

0800f948 <__mdiff>:
 800f948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94c:	460c      	mov	r4, r1
 800f94e:	4606      	mov	r6, r0
 800f950:	4611      	mov	r1, r2
 800f952:	4620      	mov	r0, r4
 800f954:	4690      	mov	r8, r2
 800f956:	f7ff ffdb 	bl	800f910 <__mcmp>
 800f95a:	1e05      	subs	r5, r0, #0
 800f95c:	d110      	bne.n	800f980 <__mdiff+0x38>
 800f95e:	4629      	mov	r1, r5
 800f960:	4630      	mov	r0, r6
 800f962:	f7ff fd53 	bl	800f40c <_Balloc>
 800f966:	b930      	cbnz	r0, 800f976 <__mdiff+0x2e>
 800f968:	4b3a      	ldr	r3, [pc, #232]	; (800fa54 <__mdiff+0x10c>)
 800f96a:	4602      	mov	r2, r0
 800f96c:	f240 2132 	movw	r1, #562	; 0x232
 800f970:	4839      	ldr	r0, [pc, #228]	; (800fa58 <__mdiff+0x110>)
 800f972:	f7fc f8e9 	bl	800bb48 <__assert_func>
 800f976:	2301      	movs	r3, #1
 800f978:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f97c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f980:	bfa4      	itt	ge
 800f982:	4643      	movge	r3, r8
 800f984:	46a0      	movge	r8, r4
 800f986:	4630      	mov	r0, r6
 800f988:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f98c:	bfa6      	itte	ge
 800f98e:	461c      	movge	r4, r3
 800f990:	2500      	movge	r5, #0
 800f992:	2501      	movlt	r5, #1
 800f994:	f7ff fd3a 	bl	800f40c <_Balloc>
 800f998:	b920      	cbnz	r0, 800f9a4 <__mdiff+0x5c>
 800f99a:	4b2e      	ldr	r3, [pc, #184]	; (800fa54 <__mdiff+0x10c>)
 800f99c:	4602      	mov	r2, r0
 800f99e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f9a2:	e7e5      	b.n	800f970 <__mdiff+0x28>
 800f9a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f9a8:	6926      	ldr	r6, [r4, #16]
 800f9aa:	60c5      	str	r5, [r0, #12]
 800f9ac:	f104 0914 	add.w	r9, r4, #20
 800f9b0:	f108 0514 	add.w	r5, r8, #20
 800f9b4:	f100 0e14 	add.w	lr, r0, #20
 800f9b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f9bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f9c0:	f108 0210 	add.w	r2, r8, #16
 800f9c4:	46f2      	mov	sl, lr
 800f9c6:	2100      	movs	r1, #0
 800f9c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f9cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f9d0:	fa1f f883 	uxth.w	r8, r3
 800f9d4:	fa11 f18b 	uxtah	r1, r1, fp
 800f9d8:	0c1b      	lsrs	r3, r3, #16
 800f9da:	eba1 0808 	sub.w	r8, r1, r8
 800f9de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f9e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f9e6:	fa1f f888 	uxth.w	r8, r8
 800f9ea:	1419      	asrs	r1, r3, #16
 800f9ec:	454e      	cmp	r6, r9
 800f9ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f9f2:	f84a 3b04 	str.w	r3, [sl], #4
 800f9f6:	d8e7      	bhi.n	800f9c8 <__mdiff+0x80>
 800f9f8:	1b33      	subs	r3, r6, r4
 800f9fa:	3b15      	subs	r3, #21
 800f9fc:	f023 0303 	bic.w	r3, r3, #3
 800fa00:	3304      	adds	r3, #4
 800fa02:	3415      	adds	r4, #21
 800fa04:	42a6      	cmp	r6, r4
 800fa06:	bf38      	it	cc
 800fa08:	2304      	movcc	r3, #4
 800fa0a:	441d      	add	r5, r3
 800fa0c:	4473      	add	r3, lr
 800fa0e:	469e      	mov	lr, r3
 800fa10:	462e      	mov	r6, r5
 800fa12:	4566      	cmp	r6, ip
 800fa14:	d30e      	bcc.n	800fa34 <__mdiff+0xec>
 800fa16:	f10c 0203 	add.w	r2, ip, #3
 800fa1a:	1b52      	subs	r2, r2, r5
 800fa1c:	f022 0203 	bic.w	r2, r2, #3
 800fa20:	3d03      	subs	r5, #3
 800fa22:	45ac      	cmp	ip, r5
 800fa24:	bf38      	it	cc
 800fa26:	2200      	movcc	r2, #0
 800fa28:	441a      	add	r2, r3
 800fa2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fa2e:	b17b      	cbz	r3, 800fa50 <__mdiff+0x108>
 800fa30:	6107      	str	r7, [r0, #16]
 800fa32:	e7a3      	b.n	800f97c <__mdiff+0x34>
 800fa34:	f856 8b04 	ldr.w	r8, [r6], #4
 800fa38:	fa11 f288 	uxtah	r2, r1, r8
 800fa3c:	1414      	asrs	r4, r2, #16
 800fa3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fa42:	b292      	uxth	r2, r2
 800fa44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fa48:	f84e 2b04 	str.w	r2, [lr], #4
 800fa4c:	1421      	asrs	r1, r4, #16
 800fa4e:	e7e0      	b.n	800fa12 <__mdiff+0xca>
 800fa50:	3f01      	subs	r7, #1
 800fa52:	e7ea      	b.n	800fa2a <__mdiff+0xe2>
 800fa54:	0803d5b1 	.word	0x0803d5b1
 800fa58:	0803d684 	.word	0x0803d684

0800fa5c <__d2b>:
 800fa5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa60:	4689      	mov	r9, r1
 800fa62:	2101      	movs	r1, #1
 800fa64:	ec57 6b10 	vmov	r6, r7, d0
 800fa68:	4690      	mov	r8, r2
 800fa6a:	f7ff fccf 	bl	800f40c <_Balloc>
 800fa6e:	4604      	mov	r4, r0
 800fa70:	b930      	cbnz	r0, 800fa80 <__d2b+0x24>
 800fa72:	4602      	mov	r2, r0
 800fa74:	4b25      	ldr	r3, [pc, #148]	; (800fb0c <__d2b+0xb0>)
 800fa76:	4826      	ldr	r0, [pc, #152]	; (800fb10 <__d2b+0xb4>)
 800fa78:	f240 310a 	movw	r1, #778	; 0x30a
 800fa7c:	f7fc f864 	bl	800bb48 <__assert_func>
 800fa80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fa84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa88:	bb35      	cbnz	r5, 800fad8 <__d2b+0x7c>
 800fa8a:	2e00      	cmp	r6, #0
 800fa8c:	9301      	str	r3, [sp, #4]
 800fa8e:	d028      	beq.n	800fae2 <__d2b+0x86>
 800fa90:	4668      	mov	r0, sp
 800fa92:	9600      	str	r6, [sp, #0]
 800fa94:	f7ff fd82 	bl	800f59c <__lo0bits>
 800fa98:	9900      	ldr	r1, [sp, #0]
 800fa9a:	b300      	cbz	r0, 800fade <__d2b+0x82>
 800fa9c:	9a01      	ldr	r2, [sp, #4]
 800fa9e:	f1c0 0320 	rsb	r3, r0, #32
 800faa2:	fa02 f303 	lsl.w	r3, r2, r3
 800faa6:	430b      	orrs	r3, r1
 800faa8:	40c2      	lsrs	r2, r0
 800faaa:	6163      	str	r3, [r4, #20]
 800faac:	9201      	str	r2, [sp, #4]
 800faae:	9b01      	ldr	r3, [sp, #4]
 800fab0:	61a3      	str	r3, [r4, #24]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	bf14      	ite	ne
 800fab6:	2202      	movne	r2, #2
 800fab8:	2201      	moveq	r2, #1
 800faba:	6122      	str	r2, [r4, #16]
 800fabc:	b1d5      	cbz	r5, 800faf4 <__d2b+0x98>
 800fabe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fac2:	4405      	add	r5, r0
 800fac4:	f8c9 5000 	str.w	r5, [r9]
 800fac8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800facc:	f8c8 0000 	str.w	r0, [r8]
 800fad0:	4620      	mov	r0, r4
 800fad2:	b003      	add	sp, #12
 800fad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fadc:	e7d5      	b.n	800fa8a <__d2b+0x2e>
 800fade:	6161      	str	r1, [r4, #20]
 800fae0:	e7e5      	b.n	800faae <__d2b+0x52>
 800fae2:	a801      	add	r0, sp, #4
 800fae4:	f7ff fd5a 	bl	800f59c <__lo0bits>
 800fae8:	9b01      	ldr	r3, [sp, #4]
 800faea:	6163      	str	r3, [r4, #20]
 800faec:	2201      	movs	r2, #1
 800faee:	6122      	str	r2, [r4, #16]
 800faf0:	3020      	adds	r0, #32
 800faf2:	e7e3      	b.n	800fabc <__d2b+0x60>
 800faf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800faf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fafc:	f8c9 0000 	str.w	r0, [r9]
 800fb00:	6918      	ldr	r0, [r3, #16]
 800fb02:	f7ff fd2b 	bl	800f55c <__hi0bits>
 800fb06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb0a:	e7df      	b.n	800facc <__d2b+0x70>
 800fb0c:	0803d5b1 	.word	0x0803d5b1
 800fb10:	0803d684 	.word	0x0803d684

0800fb14 <_calloc_r>:
 800fb14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb16:	fba1 2402 	umull	r2, r4, r1, r2
 800fb1a:	b94c      	cbnz	r4, 800fb30 <_calloc_r+0x1c>
 800fb1c:	4611      	mov	r1, r2
 800fb1e:	9201      	str	r2, [sp, #4]
 800fb20:	f7fc fb6a 	bl	800c1f8 <_malloc_r>
 800fb24:	9a01      	ldr	r2, [sp, #4]
 800fb26:	4605      	mov	r5, r0
 800fb28:	b930      	cbnz	r0, 800fb38 <_calloc_r+0x24>
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	b003      	add	sp, #12
 800fb2e:	bd30      	pop	{r4, r5, pc}
 800fb30:	220c      	movs	r2, #12
 800fb32:	6002      	str	r2, [r0, #0]
 800fb34:	2500      	movs	r5, #0
 800fb36:	e7f8      	b.n	800fb2a <_calloc_r+0x16>
 800fb38:	4621      	mov	r1, r4
 800fb3a:	f7fc f877 	bl	800bc2c <memset>
 800fb3e:	e7f4      	b.n	800fb2a <_calloc_r+0x16>

0800fb40 <_realloc_r>:
 800fb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb44:	4680      	mov	r8, r0
 800fb46:	4614      	mov	r4, r2
 800fb48:	460e      	mov	r6, r1
 800fb4a:	b921      	cbnz	r1, 800fb56 <_realloc_r+0x16>
 800fb4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb50:	4611      	mov	r1, r2
 800fb52:	f7fc bb51 	b.w	800c1f8 <_malloc_r>
 800fb56:	b92a      	cbnz	r2, 800fb64 <_realloc_r+0x24>
 800fb58:	f7fc fae2 	bl	800c120 <_free_r>
 800fb5c:	4625      	mov	r5, r4
 800fb5e:	4628      	mov	r0, r5
 800fb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb64:	f000 fe7c 	bl	8010860 <_malloc_usable_size_r>
 800fb68:	4284      	cmp	r4, r0
 800fb6a:	4607      	mov	r7, r0
 800fb6c:	d802      	bhi.n	800fb74 <_realloc_r+0x34>
 800fb6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fb72:	d812      	bhi.n	800fb9a <_realloc_r+0x5a>
 800fb74:	4621      	mov	r1, r4
 800fb76:	4640      	mov	r0, r8
 800fb78:	f7fc fb3e 	bl	800c1f8 <_malloc_r>
 800fb7c:	4605      	mov	r5, r0
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	d0ed      	beq.n	800fb5e <_realloc_r+0x1e>
 800fb82:	42bc      	cmp	r4, r7
 800fb84:	4622      	mov	r2, r4
 800fb86:	4631      	mov	r1, r6
 800fb88:	bf28      	it	cs
 800fb8a:	463a      	movcs	r2, r7
 800fb8c:	f7fc f840 	bl	800bc10 <memcpy>
 800fb90:	4631      	mov	r1, r6
 800fb92:	4640      	mov	r0, r8
 800fb94:	f7fc fac4 	bl	800c120 <_free_r>
 800fb98:	e7e1      	b.n	800fb5e <_realloc_r+0x1e>
 800fb9a:	4635      	mov	r5, r6
 800fb9c:	e7df      	b.n	800fb5e <_realloc_r+0x1e>

0800fb9e <__ssputs_r>:
 800fb9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fba2:	688e      	ldr	r6, [r1, #8]
 800fba4:	429e      	cmp	r6, r3
 800fba6:	4682      	mov	sl, r0
 800fba8:	460c      	mov	r4, r1
 800fbaa:	4690      	mov	r8, r2
 800fbac:	461f      	mov	r7, r3
 800fbae:	d838      	bhi.n	800fc22 <__ssputs_r+0x84>
 800fbb0:	898a      	ldrh	r2, [r1, #12]
 800fbb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fbb6:	d032      	beq.n	800fc1e <__ssputs_r+0x80>
 800fbb8:	6825      	ldr	r5, [r4, #0]
 800fbba:	6909      	ldr	r1, [r1, #16]
 800fbbc:	eba5 0901 	sub.w	r9, r5, r1
 800fbc0:	6965      	ldr	r5, [r4, #20]
 800fbc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fbc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fbca:	3301      	adds	r3, #1
 800fbcc:	444b      	add	r3, r9
 800fbce:	106d      	asrs	r5, r5, #1
 800fbd0:	429d      	cmp	r5, r3
 800fbd2:	bf38      	it	cc
 800fbd4:	461d      	movcc	r5, r3
 800fbd6:	0553      	lsls	r3, r2, #21
 800fbd8:	d531      	bpl.n	800fc3e <__ssputs_r+0xa0>
 800fbda:	4629      	mov	r1, r5
 800fbdc:	f7fc fb0c 	bl	800c1f8 <_malloc_r>
 800fbe0:	4606      	mov	r6, r0
 800fbe2:	b950      	cbnz	r0, 800fbfa <__ssputs_r+0x5c>
 800fbe4:	230c      	movs	r3, #12
 800fbe6:	f8ca 3000 	str.w	r3, [sl]
 800fbea:	89a3      	ldrh	r3, [r4, #12]
 800fbec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbf0:	81a3      	strh	r3, [r4, #12]
 800fbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800fbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbfa:	6921      	ldr	r1, [r4, #16]
 800fbfc:	464a      	mov	r2, r9
 800fbfe:	f7fc f807 	bl	800bc10 <memcpy>
 800fc02:	89a3      	ldrh	r3, [r4, #12]
 800fc04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc0c:	81a3      	strh	r3, [r4, #12]
 800fc0e:	6126      	str	r6, [r4, #16]
 800fc10:	6165      	str	r5, [r4, #20]
 800fc12:	444e      	add	r6, r9
 800fc14:	eba5 0509 	sub.w	r5, r5, r9
 800fc18:	6026      	str	r6, [r4, #0]
 800fc1a:	60a5      	str	r5, [r4, #8]
 800fc1c:	463e      	mov	r6, r7
 800fc1e:	42be      	cmp	r6, r7
 800fc20:	d900      	bls.n	800fc24 <__ssputs_r+0x86>
 800fc22:	463e      	mov	r6, r7
 800fc24:	6820      	ldr	r0, [r4, #0]
 800fc26:	4632      	mov	r2, r6
 800fc28:	4641      	mov	r1, r8
 800fc2a:	f7ff fbc9 	bl	800f3c0 <memmove>
 800fc2e:	68a3      	ldr	r3, [r4, #8]
 800fc30:	1b9b      	subs	r3, r3, r6
 800fc32:	60a3      	str	r3, [r4, #8]
 800fc34:	6823      	ldr	r3, [r4, #0]
 800fc36:	4433      	add	r3, r6
 800fc38:	6023      	str	r3, [r4, #0]
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	e7db      	b.n	800fbf6 <__ssputs_r+0x58>
 800fc3e:	462a      	mov	r2, r5
 800fc40:	f7ff ff7e 	bl	800fb40 <_realloc_r>
 800fc44:	4606      	mov	r6, r0
 800fc46:	2800      	cmp	r0, #0
 800fc48:	d1e1      	bne.n	800fc0e <__ssputs_r+0x70>
 800fc4a:	6921      	ldr	r1, [r4, #16]
 800fc4c:	4650      	mov	r0, sl
 800fc4e:	f7fc fa67 	bl	800c120 <_free_r>
 800fc52:	e7c7      	b.n	800fbe4 <__ssputs_r+0x46>

0800fc54 <_svfiprintf_r>:
 800fc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc58:	4698      	mov	r8, r3
 800fc5a:	898b      	ldrh	r3, [r1, #12]
 800fc5c:	061b      	lsls	r3, r3, #24
 800fc5e:	b09d      	sub	sp, #116	; 0x74
 800fc60:	4607      	mov	r7, r0
 800fc62:	460d      	mov	r5, r1
 800fc64:	4614      	mov	r4, r2
 800fc66:	d50e      	bpl.n	800fc86 <_svfiprintf_r+0x32>
 800fc68:	690b      	ldr	r3, [r1, #16]
 800fc6a:	b963      	cbnz	r3, 800fc86 <_svfiprintf_r+0x32>
 800fc6c:	2140      	movs	r1, #64	; 0x40
 800fc6e:	f7fc fac3 	bl	800c1f8 <_malloc_r>
 800fc72:	6028      	str	r0, [r5, #0]
 800fc74:	6128      	str	r0, [r5, #16]
 800fc76:	b920      	cbnz	r0, 800fc82 <_svfiprintf_r+0x2e>
 800fc78:	230c      	movs	r3, #12
 800fc7a:	603b      	str	r3, [r7, #0]
 800fc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc80:	e0d1      	b.n	800fe26 <_svfiprintf_r+0x1d2>
 800fc82:	2340      	movs	r3, #64	; 0x40
 800fc84:	616b      	str	r3, [r5, #20]
 800fc86:	2300      	movs	r3, #0
 800fc88:	9309      	str	r3, [sp, #36]	; 0x24
 800fc8a:	2320      	movs	r3, #32
 800fc8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc90:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc94:	2330      	movs	r3, #48	; 0x30
 800fc96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fe40 <_svfiprintf_r+0x1ec>
 800fc9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc9e:	f04f 0901 	mov.w	r9, #1
 800fca2:	4623      	mov	r3, r4
 800fca4:	469a      	mov	sl, r3
 800fca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcaa:	b10a      	cbz	r2, 800fcb0 <_svfiprintf_r+0x5c>
 800fcac:	2a25      	cmp	r2, #37	; 0x25
 800fcae:	d1f9      	bne.n	800fca4 <_svfiprintf_r+0x50>
 800fcb0:	ebba 0b04 	subs.w	fp, sl, r4
 800fcb4:	d00b      	beq.n	800fcce <_svfiprintf_r+0x7a>
 800fcb6:	465b      	mov	r3, fp
 800fcb8:	4622      	mov	r2, r4
 800fcba:	4629      	mov	r1, r5
 800fcbc:	4638      	mov	r0, r7
 800fcbe:	f7ff ff6e 	bl	800fb9e <__ssputs_r>
 800fcc2:	3001      	adds	r0, #1
 800fcc4:	f000 80aa 	beq.w	800fe1c <_svfiprintf_r+0x1c8>
 800fcc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcca:	445a      	add	r2, fp
 800fccc:	9209      	str	r2, [sp, #36]	; 0x24
 800fcce:	f89a 3000 	ldrb.w	r3, [sl]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	f000 80a2 	beq.w	800fe1c <_svfiprintf_r+0x1c8>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	f04f 32ff 	mov.w	r2, #4294967295
 800fcde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fce2:	f10a 0a01 	add.w	sl, sl, #1
 800fce6:	9304      	str	r3, [sp, #16]
 800fce8:	9307      	str	r3, [sp, #28]
 800fcea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcee:	931a      	str	r3, [sp, #104]	; 0x68
 800fcf0:	4654      	mov	r4, sl
 800fcf2:	2205      	movs	r2, #5
 800fcf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcf8:	4851      	ldr	r0, [pc, #324]	; (800fe40 <_svfiprintf_r+0x1ec>)
 800fcfa:	f7f0 fa81 	bl	8000200 <memchr>
 800fcfe:	9a04      	ldr	r2, [sp, #16]
 800fd00:	b9d8      	cbnz	r0, 800fd3a <_svfiprintf_r+0xe6>
 800fd02:	06d0      	lsls	r0, r2, #27
 800fd04:	bf44      	itt	mi
 800fd06:	2320      	movmi	r3, #32
 800fd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd0c:	0711      	lsls	r1, r2, #28
 800fd0e:	bf44      	itt	mi
 800fd10:	232b      	movmi	r3, #43	; 0x2b
 800fd12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd16:	f89a 3000 	ldrb.w	r3, [sl]
 800fd1a:	2b2a      	cmp	r3, #42	; 0x2a
 800fd1c:	d015      	beq.n	800fd4a <_svfiprintf_r+0xf6>
 800fd1e:	9a07      	ldr	r2, [sp, #28]
 800fd20:	4654      	mov	r4, sl
 800fd22:	2000      	movs	r0, #0
 800fd24:	f04f 0c0a 	mov.w	ip, #10
 800fd28:	4621      	mov	r1, r4
 800fd2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd2e:	3b30      	subs	r3, #48	; 0x30
 800fd30:	2b09      	cmp	r3, #9
 800fd32:	d94e      	bls.n	800fdd2 <_svfiprintf_r+0x17e>
 800fd34:	b1b0      	cbz	r0, 800fd64 <_svfiprintf_r+0x110>
 800fd36:	9207      	str	r2, [sp, #28]
 800fd38:	e014      	b.n	800fd64 <_svfiprintf_r+0x110>
 800fd3a:	eba0 0308 	sub.w	r3, r0, r8
 800fd3e:	fa09 f303 	lsl.w	r3, r9, r3
 800fd42:	4313      	orrs	r3, r2
 800fd44:	9304      	str	r3, [sp, #16]
 800fd46:	46a2      	mov	sl, r4
 800fd48:	e7d2      	b.n	800fcf0 <_svfiprintf_r+0x9c>
 800fd4a:	9b03      	ldr	r3, [sp, #12]
 800fd4c:	1d19      	adds	r1, r3, #4
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	9103      	str	r1, [sp, #12]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	bfbb      	ittet	lt
 800fd56:	425b      	neglt	r3, r3
 800fd58:	f042 0202 	orrlt.w	r2, r2, #2
 800fd5c:	9307      	strge	r3, [sp, #28]
 800fd5e:	9307      	strlt	r3, [sp, #28]
 800fd60:	bfb8      	it	lt
 800fd62:	9204      	strlt	r2, [sp, #16]
 800fd64:	7823      	ldrb	r3, [r4, #0]
 800fd66:	2b2e      	cmp	r3, #46	; 0x2e
 800fd68:	d10c      	bne.n	800fd84 <_svfiprintf_r+0x130>
 800fd6a:	7863      	ldrb	r3, [r4, #1]
 800fd6c:	2b2a      	cmp	r3, #42	; 0x2a
 800fd6e:	d135      	bne.n	800fddc <_svfiprintf_r+0x188>
 800fd70:	9b03      	ldr	r3, [sp, #12]
 800fd72:	1d1a      	adds	r2, r3, #4
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	9203      	str	r2, [sp, #12]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	bfb8      	it	lt
 800fd7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd80:	3402      	adds	r4, #2
 800fd82:	9305      	str	r3, [sp, #20]
 800fd84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fe50 <_svfiprintf_r+0x1fc>
 800fd88:	7821      	ldrb	r1, [r4, #0]
 800fd8a:	2203      	movs	r2, #3
 800fd8c:	4650      	mov	r0, sl
 800fd8e:	f7f0 fa37 	bl	8000200 <memchr>
 800fd92:	b140      	cbz	r0, 800fda6 <_svfiprintf_r+0x152>
 800fd94:	2340      	movs	r3, #64	; 0x40
 800fd96:	eba0 000a 	sub.w	r0, r0, sl
 800fd9a:	fa03 f000 	lsl.w	r0, r3, r0
 800fd9e:	9b04      	ldr	r3, [sp, #16]
 800fda0:	4303      	orrs	r3, r0
 800fda2:	3401      	adds	r4, #1
 800fda4:	9304      	str	r3, [sp, #16]
 800fda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdaa:	4826      	ldr	r0, [pc, #152]	; (800fe44 <_svfiprintf_r+0x1f0>)
 800fdac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdb0:	2206      	movs	r2, #6
 800fdb2:	f7f0 fa25 	bl	8000200 <memchr>
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	d038      	beq.n	800fe2c <_svfiprintf_r+0x1d8>
 800fdba:	4b23      	ldr	r3, [pc, #140]	; (800fe48 <_svfiprintf_r+0x1f4>)
 800fdbc:	bb1b      	cbnz	r3, 800fe06 <_svfiprintf_r+0x1b2>
 800fdbe:	9b03      	ldr	r3, [sp, #12]
 800fdc0:	3307      	adds	r3, #7
 800fdc2:	f023 0307 	bic.w	r3, r3, #7
 800fdc6:	3308      	adds	r3, #8
 800fdc8:	9303      	str	r3, [sp, #12]
 800fdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdcc:	4433      	add	r3, r6
 800fdce:	9309      	str	r3, [sp, #36]	; 0x24
 800fdd0:	e767      	b.n	800fca2 <_svfiprintf_r+0x4e>
 800fdd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdd6:	460c      	mov	r4, r1
 800fdd8:	2001      	movs	r0, #1
 800fdda:	e7a5      	b.n	800fd28 <_svfiprintf_r+0xd4>
 800fddc:	2300      	movs	r3, #0
 800fdde:	3401      	adds	r4, #1
 800fde0:	9305      	str	r3, [sp, #20]
 800fde2:	4619      	mov	r1, r3
 800fde4:	f04f 0c0a 	mov.w	ip, #10
 800fde8:	4620      	mov	r0, r4
 800fdea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdee:	3a30      	subs	r2, #48	; 0x30
 800fdf0:	2a09      	cmp	r2, #9
 800fdf2:	d903      	bls.n	800fdfc <_svfiprintf_r+0x1a8>
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d0c5      	beq.n	800fd84 <_svfiprintf_r+0x130>
 800fdf8:	9105      	str	r1, [sp, #20]
 800fdfa:	e7c3      	b.n	800fd84 <_svfiprintf_r+0x130>
 800fdfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe00:	4604      	mov	r4, r0
 800fe02:	2301      	movs	r3, #1
 800fe04:	e7f0      	b.n	800fde8 <_svfiprintf_r+0x194>
 800fe06:	ab03      	add	r3, sp, #12
 800fe08:	9300      	str	r3, [sp, #0]
 800fe0a:	462a      	mov	r2, r5
 800fe0c:	4b0f      	ldr	r3, [pc, #60]	; (800fe4c <_svfiprintf_r+0x1f8>)
 800fe0e:	a904      	add	r1, sp, #16
 800fe10:	4638      	mov	r0, r7
 800fe12:	f7fc fc5f 	bl	800c6d4 <_printf_float>
 800fe16:	1c42      	adds	r2, r0, #1
 800fe18:	4606      	mov	r6, r0
 800fe1a:	d1d6      	bne.n	800fdca <_svfiprintf_r+0x176>
 800fe1c:	89ab      	ldrh	r3, [r5, #12]
 800fe1e:	065b      	lsls	r3, r3, #25
 800fe20:	f53f af2c 	bmi.w	800fc7c <_svfiprintf_r+0x28>
 800fe24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe26:	b01d      	add	sp, #116	; 0x74
 800fe28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2c:	ab03      	add	r3, sp, #12
 800fe2e:	9300      	str	r3, [sp, #0]
 800fe30:	462a      	mov	r2, r5
 800fe32:	4b06      	ldr	r3, [pc, #24]	; (800fe4c <_svfiprintf_r+0x1f8>)
 800fe34:	a904      	add	r1, sp, #16
 800fe36:	4638      	mov	r0, r7
 800fe38:	f7fc fef0 	bl	800cc1c <_printf_i>
 800fe3c:	e7eb      	b.n	800fe16 <_svfiprintf_r+0x1c2>
 800fe3e:	bf00      	nop
 800fe40:	0803d148 	.word	0x0803d148
 800fe44:	0803d152 	.word	0x0803d152
 800fe48:	0800c6d5 	.word	0x0800c6d5
 800fe4c:	0800fb9f 	.word	0x0800fb9f
 800fe50:	0803d14e 	.word	0x0803d14e

0800fe54 <_sungetc_r>:
 800fe54:	b538      	push	{r3, r4, r5, lr}
 800fe56:	1c4b      	adds	r3, r1, #1
 800fe58:	4614      	mov	r4, r2
 800fe5a:	d103      	bne.n	800fe64 <_sungetc_r+0x10>
 800fe5c:	f04f 35ff 	mov.w	r5, #4294967295
 800fe60:	4628      	mov	r0, r5
 800fe62:	bd38      	pop	{r3, r4, r5, pc}
 800fe64:	8993      	ldrh	r3, [r2, #12]
 800fe66:	f023 0320 	bic.w	r3, r3, #32
 800fe6a:	8193      	strh	r3, [r2, #12]
 800fe6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe6e:	6852      	ldr	r2, [r2, #4]
 800fe70:	b2cd      	uxtb	r5, r1
 800fe72:	b18b      	cbz	r3, 800fe98 <_sungetc_r+0x44>
 800fe74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fe76:	4293      	cmp	r3, r2
 800fe78:	dd08      	ble.n	800fe8c <_sungetc_r+0x38>
 800fe7a:	6823      	ldr	r3, [r4, #0]
 800fe7c:	1e5a      	subs	r2, r3, #1
 800fe7e:	6022      	str	r2, [r4, #0]
 800fe80:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fe84:	6863      	ldr	r3, [r4, #4]
 800fe86:	3301      	adds	r3, #1
 800fe88:	6063      	str	r3, [r4, #4]
 800fe8a:	e7e9      	b.n	800fe60 <_sungetc_r+0xc>
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	f000 fc67 	bl	8010760 <__submore>
 800fe92:	2800      	cmp	r0, #0
 800fe94:	d0f1      	beq.n	800fe7a <_sungetc_r+0x26>
 800fe96:	e7e1      	b.n	800fe5c <_sungetc_r+0x8>
 800fe98:	6921      	ldr	r1, [r4, #16]
 800fe9a:	6823      	ldr	r3, [r4, #0]
 800fe9c:	b151      	cbz	r1, 800feb4 <_sungetc_r+0x60>
 800fe9e:	4299      	cmp	r1, r3
 800fea0:	d208      	bcs.n	800feb4 <_sungetc_r+0x60>
 800fea2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800fea6:	42a9      	cmp	r1, r5
 800fea8:	d104      	bne.n	800feb4 <_sungetc_r+0x60>
 800feaa:	3b01      	subs	r3, #1
 800feac:	3201      	adds	r2, #1
 800feae:	6023      	str	r3, [r4, #0]
 800feb0:	6062      	str	r2, [r4, #4]
 800feb2:	e7d5      	b.n	800fe60 <_sungetc_r+0xc>
 800feb4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800feb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800febc:	6363      	str	r3, [r4, #52]	; 0x34
 800febe:	2303      	movs	r3, #3
 800fec0:	63a3      	str	r3, [r4, #56]	; 0x38
 800fec2:	4623      	mov	r3, r4
 800fec4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fec8:	6023      	str	r3, [r4, #0]
 800feca:	2301      	movs	r3, #1
 800fecc:	e7dc      	b.n	800fe88 <_sungetc_r+0x34>

0800fece <__ssrefill_r>:
 800fece:	b510      	push	{r4, lr}
 800fed0:	460c      	mov	r4, r1
 800fed2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fed4:	b169      	cbz	r1, 800fef2 <__ssrefill_r+0x24>
 800fed6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800feda:	4299      	cmp	r1, r3
 800fedc:	d001      	beq.n	800fee2 <__ssrefill_r+0x14>
 800fede:	f7fc f91f 	bl	800c120 <_free_r>
 800fee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fee4:	6063      	str	r3, [r4, #4]
 800fee6:	2000      	movs	r0, #0
 800fee8:	6360      	str	r0, [r4, #52]	; 0x34
 800feea:	b113      	cbz	r3, 800fef2 <__ssrefill_r+0x24>
 800feec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800feee:	6023      	str	r3, [r4, #0]
 800fef0:	bd10      	pop	{r4, pc}
 800fef2:	6923      	ldr	r3, [r4, #16]
 800fef4:	6023      	str	r3, [r4, #0]
 800fef6:	2300      	movs	r3, #0
 800fef8:	6063      	str	r3, [r4, #4]
 800fefa:	89a3      	ldrh	r3, [r4, #12]
 800fefc:	f043 0320 	orr.w	r3, r3, #32
 800ff00:	81a3      	strh	r3, [r4, #12]
 800ff02:	f04f 30ff 	mov.w	r0, #4294967295
 800ff06:	e7f3      	b.n	800fef0 <__ssrefill_r+0x22>

0800ff08 <__ssvfiscanf_r>:
 800ff08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff0c:	460c      	mov	r4, r1
 800ff0e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ff12:	2100      	movs	r1, #0
 800ff14:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ff18:	49a6      	ldr	r1, [pc, #664]	; (80101b4 <__ssvfiscanf_r+0x2ac>)
 800ff1a:	91a0      	str	r1, [sp, #640]	; 0x280
 800ff1c:	f10d 0804 	add.w	r8, sp, #4
 800ff20:	49a5      	ldr	r1, [pc, #660]	; (80101b8 <__ssvfiscanf_r+0x2b0>)
 800ff22:	4fa6      	ldr	r7, [pc, #664]	; (80101bc <__ssvfiscanf_r+0x2b4>)
 800ff24:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80101c0 <__ssvfiscanf_r+0x2b8>
 800ff28:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ff2c:	4606      	mov	r6, r0
 800ff2e:	91a1      	str	r1, [sp, #644]	; 0x284
 800ff30:	9300      	str	r3, [sp, #0]
 800ff32:	7813      	ldrb	r3, [r2, #0]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	f000 815a 	beq.w	80101ee <__ssvfiscanf_r+0x2e6>
 800ff3a:	5dd9      	ldrb	r1, [r3, r7]
 800ff3c:	f011 0108 	ands.w	r1, r1, #8
 800ff40:	f102 0501 	add.w	r5, r2, #1
 800ff44:	d019      	beq.n	800ff7a <__ssvfiscanf_r+0x72>
 800ff46:	6863      	ldr	r3, [r4, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	dd0f      	ble.n	800ff6c <__ssvfiscanf_r+0x64>
 800ff4c:	6823      	ldr	r3, [r4, #0]
 800ff4e:	781a      	ldrb	r2, [r3, #0]
 800ff50:	5cba      	ldrb	r2, [r7, r2]
 800ff52:	0712      	lsls	r2, r2, #28
 800ff54:	d401      	bmi.n	800ff5a <__ssvfiscanf_r+0x52>
 800ff56:	462a      	mov	r2, r5
 800ff58:	e7eb      	b.n	800ff32 <__ssvfiscanf_r+0x2a>
 800ff5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ff5c:	3201      	adds	r2, #1
 800ff5e:	9245      	str	r2, [sp, #276]	; 0x114
 800ff60:	6862      	ldr	r2, [r4, #4]
 800ff62:	3301      	adds	r3, #1
 800ff64:	3a01      	subs	r2, #1
 800ff66:	6062      	str	r2, [r4, #4]
 800ff68:	6023      	str	r3, [r4, #0]
 800ff6a:	e7ec      	b.n	800ff46 <__ssvfiscanf_r+0x3e>
 800ff6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ff6e:	4621      	mov	r1, r4
 800ff70:	4630      	mov	r0, r6
 800ff72:	4798      	blx	r3
 800ff74:	2800      	cmp	r0, #0
 800ff76:	d0e9      	beq.n	800ff4c <__ssvfiscanf_r+0x44>
 800ff78:	e7ed      	b.n	800ff56 <__ssvfiscanf_r+0x4e>
 800ff7a:	2b25      	cmp	r3, #37	; 0x25
 800ff7c:	d012      	beq.n	800ffa4 <__ssvfiscanf_r+0x9c>
 800ff7e:	469a      	mov	sl, r3
 800ff80:	6863      	ldr	r3, [r4, #4]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	f340 8091 	ble.w	80100aa <__ssvfiscanf_r+0x1a2>
 800ff88:	6822      	ldr	r2, [r4, #0]
 800ff8a:	7813      	ldrb	r3, [r2, #0]
 800ff8c:	4553      	cmp	r3, sl
 800ff8e:	f040 812e 	bne.w	80101ee <__ssvfiscanf_r+0x2e6>
 800ff92:	6863      	ldr	r3, [r4, #4]
 800ff94:	3b01      	subs	r3, #1
 800ff96:	6063      	str	r3, [r4, #4]
 800ff98:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ff9a:	3201      	adds	r2, #1
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	6022      	str	r2, [r4, #0]
 800ffa0:	9345      	str	r3, [sp, #276]	; 0x114
 800ffa2:	e7d8      	b.n	800ff56 <__ssvfiscanf_r+0x4e>
 800ffa4:	9141      	str	r1, [sp, #260]	; 0x104
 800ffa6:	9143      	str	r1, [sp, #268]	; 0x10c
 800ffa8:	7853      	ldrb	r3, [r2, #1]
 800ffaa:	2b2a      	cmp	r3, #42	; 0x2a
 800ffac:	bf02      	ittt	eq
 800ffae:	2310      	moveq	r3, #16
 800ffb0:	1c95      	addeq	r5, r2, #2
 800ffb2:	9341      	streq	r3, [sp, #260]	; 0x104
 800ffb4:	220a      	movs	r2, #10
 800ffb6:	46aa      	mov	sl, r5
 800ffb8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ffbc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ffc0:	2b09      	cmp	r3, #9
 800ffc2:	d91d      	bls.n	8010000 <__ssvfiscanf_r+0xf8>
 800ffc4:	487e      	ldr	r0, [pc, #504]	; (80101c0 <__ssvfiscanf_r+0x2b8>)
 800ffc6:	2203      	movs	r2, #3
 800ffc8:	f7f0 f91a 	bl	8000200 <memchr>
 800ffcc:	b140      	cbz	r0, 800ffe0 <__ssvfiscanf_r+0xd8>
 800ffce:	2301      	movs	r3, #1
 800ffd0:	eba0 0009 	sub.w	r0, r0, r9
 800ffd4:	fa03 f000 	lsl.w	r0, r3, r0
 800ffd8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ffda:	4318      	orrs	r0, r3
 800ffdc:	9041      	str	r0, [sp, #260]	; 0x104
 800ffde:	4655      	mov	r5, sl
 800ffe0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ffe4:	2b78      	cmp	r3, #120	; 0x78
 800ffe6:	d806      	bhi.n	800fff6 <__ssvfiscanf_r+0xee>
 800ffe8:	2b57      	cmp	r3, #87	; 0x57
 800ffea:	d810      	bhi.n	801000e <__ssvfiscanf_r+0x106>
 800ffec:	2b25      	cmp	r3, #37	; 0x25
 800ffee:	d0c6      	beq.n	800ff7e <__ssvfiscanf_r+0x76>
 800fff0:	d856      	bhi.n	80100a0 <__ssvfiscanf_r+0x198>
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d064      	beq.n	80100c0 <__ssvfiscanf_r+0x1b8>
 800fff6:	2303      	movs	r3, #3
 800fff8:	9347      	str	r3, [sp, #284]	; 0x11c
 800fffa:	230a      	movs	r3, #10
 800fffc:	9342      	str	r3, [sp, #264]	; 0x108
 800fffe:	e071      	b.n	80100e4 <__ssvfiscanf_r+0x1dc>
 8010000:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010002:	fb02 1103 	mla	r1, r2, r3, r1
 8010006:	3930      	subs	r1, #48	; 0x30
 8010008:	9143      	str	r1, [sp, #268]	; 0x10c
 801000a:	4655      	mov	r5, sl
 801000c:	e7d3      	b.n	800ffb6 <__ssvfiscanf_r+0xae>
 801000e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010012:	2a20      	cmp	r2, #32
 8010014:	d8ef      	bhi.n	800fff6 <__ssvfiscanf_r+0xee>
 8010016:	a101      	add	r1, pc, #4	; (adr r1, 801001c <__ssvfiscanf_r+0x114>)
 8010018:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801001c:	080100cf 	.word	0x080100cf
 8010020:	0800fff7 	.word	0x0800fff7
 8010024:	0800fff7 	.word	0x0800fff7
 8010028:	0801012d 	.word	0x0801012d
 801002c:	0800fff7 	.word	0x0800fff7
 8010030:	0800fff7 	.word	0x0800fff7
 8010034:	0800fff7 	.word	0x0800fff7
 8010038:	0800fff7 	.word	0x0800fff7
 801003c:	0800fff7 	.word	0x0800fff7
 8010040:	0800fff7 	.word	0x0800fff7
 8010044:	0800fff7 	.word	0x0800fff7
 8010048:	08010143 	.word	0x08010143
 801004c:	08010119 	.word	0x08010119
 8010050:	080100a7 	.word	0x080100a7
 8010054:	080100a7 	.word	0x080100a7
 8010058:	080100a7 	.word	0x080100a7
 801005c:	0800fff7 	.word	0x0800fff7
 8010060:	0801011d 	.word	0x0801011d
 8010064:	0800fff7 	.word	0x0800fff7
 8010068:	0800fff7 	.word	0x0800fff7
 801006c:	0800fff7 	.word	0x0800fff7
 8010070:	0800fff7 	.word	0x0800fff7
 8010074:	08010153 	.word	0x08010153
 8010078:	08010125 	.word	0x08010125
 801007c:	080100c7 	.word	0x080100c7
 8010080:	0800fff7 	.word	0x0800fff7
 8010084:	0800fff7 	.word	0x0800fff7
 8010088:	0801014f 	.word	0x0801014f
 801008c:	0800fff7 	.word	0x0800fff7
 8010090:	08010119 	.word	0x08010119
 8010094:	0800fff7 	.word	0x0800fff7
 8010098:	0800fff7 	.word	0x0800fff7
 801009c:	080100cf 	.word	0x080100cf
 80100a0:	3b45      	subs	r3, #69	; 0x45
 80100a2:	2b02      	cmp	r3, #2
 80100a4:	d8a7      	bhi.n	800fff6 <__ssvfiscanf_r+0xee>
 80100a6:	2305      	movs	r3, #5
 80100a8:	e01b      	b.n	80100e2 <__ssvfiscanf_r+0x1da>
 80100aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80100ac:	4621      	mov	r1, r4
 80100ae:	4630      	mov	r0, r6
 80100b0:	4798      	blx	r3
 80100b2:	2800      	cmp	r0, #0
 80100b4:	f43f af68 	beq.w	800ff88 <__ssvfiscanf_r+0x80>
 80100b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80100ba:	2800      	cmp	r0, #0
 80100bc:	f040 808d 	bne.w	80101da <__ssvfiscanf_r+0x2d2>
 80100c0:	f04f 30ff 	mov.w	r0, #4294967295
 80100c4:	e08f      	b.n	80101e6 <__ssvfiscanf_r+0x2de>
 80100c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80100c8:	f042 0220 	orr.w	r2, r2, #32
 80100cc:	9241      	str	r2, [sp, #260]	; 0x104
 80100ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80100d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80100d4:	9241      	str	r2, [sp, #260]	; 0x104
 80100d6:	2210      	movs	r2, #16
 80100d8:	2b6f      	cmp	r3, #111	; 0x6f
 80100da:	9242      	str	r2, [sp, #264]	; 0x108
 80100dc:	bf34      	ite	cc
 80100de:	2303      	movcc	r3, #3
 80100e0:	2304      	movcs	r3, #4
 80100e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80100e4:	6863      	ldr	r3, [r4, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	dd42      	ble.n	8010170 <__ssvfiscanf_r+0x268>
 80100ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80100ec:	0659      	lsls	r1, r3, #25
 80100ee:	d404      	bmi.n	80100fa <__ssvfiscanf_r+0x1f2>
 80100f0:	6823      	ldr	r3, [r4, #0]
 80100f2:	781a      	ldrb	r2, [r3, #0]
 80100f4:	5cba      	ldrb	r2, [r7, r2]
 80100f6:	0712      	lsls	r2, r2, #28
 80100f8:	d441      	bmi.n	801017e <__ssvfiscanf_r+0x276>
 80100fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80100fc:	2b02      	cmp	r3, #2
 80100fe:	dc50      	bgt.n	80101a2 <__ssvfiscanf_r+0x29a>
 8010100:	466b      	mov	r3, sp
 8010102:	4622      	mov	r2, r4
 8010104:	a941      	add	r1, sp, #260	; 0x104
 8010106:	4630      	mov	r0, r6
 8010108:	f000 f876 	bl	80101f8 <_scanf_chars>
 801010c:	2801      	cmp	r0, #1
 801010e:	d06e      	beq.n	80101ee <__ssvfiscanf_r+0x2e6>
 8010110:	2802      	cmp	r0, #2
 8010112:	f47f af20 	bne.w	800ff56 <__ssvfiscanf_r+0x4e>
 8010116:	e7cf      	b.n	80100b8 <__ssvfiscanf_r+0x1b0>
 8010118:	220a      	movs	r2, #10
 801011a:	e7dd      	b.n	80100d8 <__ssvfiscanf_r+0x1d0>
 801011c:	2300      	movs	r3, #0
 801011e:	9342      	str	r3, [sp, #264]	; 0x108
 8010120:	2303      	movs	r3, #3
 8010122:	e7de      	b.n	80100e2 <__ssvfiscanf_r+0x1da>
 8010124:	2308      	movs	r3, #8
 8010126:	9342      	str	r3, [sp, #264]	; 0x108
 8010128:	2304      	movs	r3, #4
 801012a:	e7da      	b.n	80100e2 <__ssvfiscanf_r+0x1da>
 801012c:	4629      	mov	r1, r5
 801012e:	4640      	mov	r0, r8
 8010130:	f000 f9c6 	bl	80104c0 <__sccl>
 8010134:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801013a:	9341      	str	r3, [sp, #260]	; 0x104
 801013c:	4605      	mov	r5, r0
 801013e:	2301      	movs	r3, #1
 8010140:	e7cf      	b.n	80100e2 <__ssvfiscanf_r+0x1da>
 8010142:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010148:	9341      	str	r3, [sp, #260]	; 0x104
 801014a:	2300      	movs	r3, #0
 801014c:	e7c9      	b.n	80100e2 <__ssvfiscanf_r+0x1da>
 801014e:	2302      	movs	r3, #2
 8010150:	e7c7      	b.n	80100e2 <__ssvfiscanf_r+0x1da>
 8010152:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010154:	06c3      	lsls	r3, r0, #27
 8010156:	f53f aefe 	bmi.w	800ff56 <__ssvfiscanf_r+0x4e>
 801015a:	9b00      	ldr	r3, [sp, #0]
 801015c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801015e:	1d19      	adds	r1, r3, #4
 8010160:	9100      	str	r1, [sp, #0]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	f010 0f01 	tst.w	r0, #1
 8010168:	bf14      	ite	ne
 801016a:	801a      	strhne	r2, [r3, #0]
 801016c:	601a      	streq	r2, [r3, #0]
 801016e:	e6f2      	b.n	800ff56 <__ssvfiscanf_r+0x4e>
 8010170:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010172:	4621      	mov	r1, r4
 8010174:	4630      	mov	r0, r6
 8010176:	4798      	blx	r3
 8010178:	2800      	cmp	r0, #0
 801017a:	d0b6      	beq.n	80100ea <__ssvfiscanf_r+0x1e2>
 801017c:	e79c      	b.n	80100b8 <__ssvfiscanf_r+0x1b0>
 801017e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010180:	3201      	adds	r2, #1
 8010182:	9245      	str	r2, [sp, #276]	; 0x114
 8010184:	6862      	ldr	r2, [r4, #4]
 8010186:	3a01      	subs	r2, #1
 8010188:	2a00      	cmp	r2, #0
 801018a:	6062      	str	r2, [r4, #4]
 801018c:	dd02      	ble.n	8010194 <__ssvfiscanf_r+0x28c>
 801018e:	3301      	adds	r3, #1
 8010190:	6023      	str	r3, [r4, #0]
 8010192:	e7ad      	b.n	80100f0 <__ssvfiscanf_r+0x1e8>
 8010194:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010196:	4621      	mov	r1, r4
 8010198:	4630      	mov	r0, r6
 801019a:	4798      	blx	r3
 801019c:	2800      	cmp	r0, #0
 801019e:	d0a7      	beq.n	80100f0 <__ssvfiscanf_r+0x1e8>
 80101a0:	e78a      	b.n	80100b8 <__ssvfiscanf_r+0x1b0>
 80101a2:	2b04      	cmp	r3, #4
 80101a4:	dc0e      	bgt.n	80101c4 <__ssvfiscanf_r+0x2bc>
 80101a6:	466b      	mov	r3, sp
 80101a8:	4622      	mov	r2, r4
 80101aa:	a941      	add	r1, sp, #260	; 0x104
 80101ac:	4630      	mov	r0, r6
 80101ae:	f000 f87d 	bl	80102ac <_scanf_i>
 80101b2:	e7ab      	b.n	801010c <__ssvfiscanf_r+0x204>
 80101b4:	0800fe55 	.word	0x0800fe55
 80101b8:	0800fecf 	.word	0x0800fecf
 80101bc:	0803d449 	.word	0x0803d449
 80101c0:	0803d14e 	.word	0x0803d14e
 80101c4:	4b0b      	ldr	r3, [pc, #44]	; (80101f4 <__ssvfiscanf_r+0x2ec>)
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	f43f aec5 	beq.w	800ff56 <__ssvfiscanf_r+0x4e>
 80101cc:	466b      	mov	r3, sp
 80101ce:	4622      	mov	r2, r4
 80101d0:	a941      	add	r1, sp, #260	; 0x104
 80101d2:	4630      	mov	r0, r6
 80101d4:	f3af 8000 	nop.w
 80101d8:	e798      	b.n	801010c <__ssvfiscanf_r+0x204>
 80101da:	89a3      	ldrh	r3, [r4, #12]
 80101dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80101e0:	bf18      	it	ne
 80101e2:	f04f 30ff 	movne.w	r0, #4294967295
 80101e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80101ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80101f0:	e7f9      	b.n	80101e6 <__ssvfiscanf_r+0x2de>
 80101f2:	bf00      	nop
 80101f4:	00000000 	.word	0x00000000

080101f8 <_scanf_chars>:
 80101f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101fc:	4615      	mov	r5, r2
 80101fe:	688a      	ldr	r2, [r1, #8]
 8010200:	4680      	mov	r8, r0
 8010202:	460c      	mov	r4, r1
 8010204:	b932      	cbnz	r2, 8010214 <_scanf_chars+0x1c>
 8010206:	698a      	ldr	r2, [r1, #24]
 8010208:	2a00      	cmp	r2, #0
 801020a:	bf0c      	ite	eq
 801020c:	2201      	moveq	r2, #1
 801020e:	f04f 32ff 	movne.w	r2, #4294967295
 8010212:	608a      	str	r2, [r1, #8]
 8010214:	6822      	ldr	r2, [r4, #0]
 8010216:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80102a8 <_scanf_chars+0xb0>
 801021a:	06d1      	lsls	r1, r2, #27
 801021c:	bf5f      	itttt	pl
 801021e:	681a      	ldrpl	r2, [r3, #0]
 8010220:	1d11      	addpl	r1, r2, #4
 8010222:	6019      	strpl	r1, [r3, #0]
 8010224:	6816      	ldrpl	r6, [r2, #0]
 8010226:	2700      	movs	r7, #0
 8010228:	69a0      	ldr	r0, [r4, #24]
 801022a:	b188      	cbz	r0, 8010250 <_scanf_chars+0x58>
 801022c:	2801      	cmp	r0, #1
 801022e:	d107      	bne.n	8010240 <_scanf_chars+0x48>
 8010230:	682a      	ldr	r2, [r5, #0]
 8010232:	7811      	ldrb	r1, [r2, #0]
 8010234:	6962      	ldr	r2, [r4, #20]
 8010236:	5c52      	ldrb	r2, [r2, r1]
 8010238:	b952      	cbnz	r2, 8010250 <_scanf_chars+0x58>
 801023a:	2f00      	cmp	r7, #0
 801023c:	d031      	beq.n	80102a2 <_scanf_chars+0xaa>
 801023e:	e022      	b.n	8010286 <_scanf_chars+0x8e>
 8010240:	2802      	cmp	r0, #2
 8010242:	d120      	bne.n	8010286 <_scanf_chars+0x8e>
 8010244:	682b      	ldr	r3, [r5, #0]
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	f813 3009 	ldrb.w	r3, [r3, r9]
 801024c:	071b      	lsls	r3, r3, #28
 801024e:	d41a      	bmi.n	8010286 <_scanf_chars+0x8e>
 8010250:	6823      	ldr	r3, [r4, #0]
 8010252:	06da      	lsls	r2, r3, #27
 8010254:	bf5e      	ittt	pl
 8010256:	682b      	ldrpl	r3, [r5, #0]
 8010258:	781b      	ldrbpl	r3, [r3, #0]
 801025a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801025e:	682a      	ldr	r2, [r5, #0]
 8010260:	686b      	ldr	r3, [r5, #4]
 8010262:	3201      	adds	r2, #1
 8010264:	602a      	str	r2, [r5, #0]
 8010266:	68a2      	ldr	r2, [r4, #8]
 8010268:	3b01      	subs	r3, #1
 801026a:	3a01      	subs	r2, #1
 801026c:	606b      	str	r3, [r5, #4]
 801026e:	3701      	adds	r7, #1
 8010270:	60a2      	str	r2, [r4, #8]
 8010272:	b142      	cbz	r2, 8010286 <_scanf_chars+0x8e>
 8010274:	2b00      	cmp	r3, #0
 8010276:	dcd7      	bgt.n	8010228 <_scanf_chars+0x30>
 8010278:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801027c:	4629      	mov	r1, r5
 801027e:	4640      	mov	r0, r8
 8010280:	4798      	blx	r3
 8010282:	2800      	cmp	r0, #0
 8010284:	d0d0      	beq.n	8010228 <_scanf_chars+0x30>
 8010286:	6823      	ldr	r3, [r4, #0]
 8010288:	f013 0310 	ands.w	r3, r3, #16
 801028c:	d105      	bne.n	801029a <_scanf_chars+0xa2>
 801028e:	68e2      	ldr	r2, [r4, #12]
 8010290:	3201      	adds	r2, #1
 8010292:	60e2      	str	r2, [r4, #12]
 8010294:	69a2      	ldr	r2, [r4, #24]
 8010296:	b102      	cbz	r2, 801029a <_scanf_chars+0xa2>
 8010298:	7033      	strb	r3, [r6, #0]
 801029a:	6923      	ldr	r3, [r4, #16]
 801029c:	443b      	add	r3, r7
 801029e:	6123      	str	r3, [r4, #16]
 80102a0:	2000      	movs	r0, #0
 80102a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102a6:	bf00      	nop
 80102a8:	0803d449 	.word	0x0803d449

080102ac <_scanf_i>:
 80102ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b0:	4698      	mov	r8, r3
 80102b2:	4b76      	ldr	r3, [pc, #472]	; (801048c <_scanf_i+0x1e0>)
 80102b4:	460c      	mov	r4, r1
 80102b6:	4682      	mov	sl, r0
 80102b8:	4616      	mov	r6, r2
 80102ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102be:	b087      	sub	sp, #28
 80102c0:	ab03      	add	r3, sp, #12
 80102c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80102c6:	4b72      	ldr	r3, [pc, #456]	; (8010490 <_scanf_i+0x1e4>)
 80102c8:	69a1      	ldr	r1, [r4, #24]
 80102ca:	4a72      	ldr	r2, [pc, #456]	; (8010494 <_scanf_i+0x1e8>)
 80102cc:	2903      	cmp	r1, #3
 80102ce:	bf18      	it	ne
 80102d0:	461a      	movne	r2, r3
 80102d2:	68a3      	ldr	r3, [r4, #8]
 80102d4:	9201      	str	r2, [sp, #4]
 80102d6:	1e5a      	subs	r2, r3, #1
 80102d8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80102dc:	bf88      	it	hi
 80102de:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80102e2:	4627      	mov	r7, r4
 80102e4:	bf82      	ittt	hi
 80102e6:	eb03 0905 	addhi.w	r9, r3, r5
 80102ea:	f240 135d 	movwhi	r3, #349	; 0x15d
 80102ee:	60a3      	strhi	r3, [r4, #8]
 80102f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80102f4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80102f8:	bf98      	it	ls
 80102fa:	f04f 0900 	movls.w	r9, #0
 80102fe:	6023      	str	r3, [r4, #0]
 8010300:	463d      	mov	r5, r7
 8010302:	f04f 0b00 	mov.w	fp, #0
 8010306:	6831      	ldr	r1, [r6, #0]
 8010308:	ab03      	add	r3, sp, #12
 801030a:	7809      	ldrb	r1, [r1, #0]
 801030c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010310:	2202      	movs	r2, #2
 8010312:	f7ef ff75 	bl	8000200 <memchr>
 8010316:	b328      	cbz	r0, 8010364 <_scanf_i+0xb8>
 8010318:	f1bb 0f01 	cmp.w	fp, #1
 801031c:	d159      	bne.n	80103d2 <_scanf_i+0x126>
 801031e:	6862      	ldr	r2, [r4, #4]
 8010320:	b92a      	cbnz	r2, 801032e <_scanf_i+0x82>
 8010322:	6822      	ldr	r2, [r4, #0]
 8010324:	2308      	movs	r3, #8
 8010326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801032a:	6063      	str	r3, [r4, #4]
 801032c:	6022      	str	r2, [r4, #0]
 801032e:	6822      	ldr	r2, [r4, #0]
 8010330:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010334:	6022      	str	r2, [r4, #0]
 8010336:	68a2      	ldr	r2, [r4, #8]
 8010338:	1e51      	subs	r1, r2, #1
 801033a:	60a1      	str	r1, [r4, #8]
 801033c:	b192      	cbz	r2, 8010364 <_scanf_i+0xb8>
 801033e:	6832      	ldr	r2, [r6, #0]
 8010340:	1c51      	adds	r1, r2, #1
 8010342:	6031      	str	r1, [r6, #0]
 8010344:	7812      	ldrb	r2, [r2, #0]
 8010346:	f805 2b01 	strb.w	r2, [r5], #1
 801034a:	6872      	ldr	r2, [r6, #4]
 801034c:	3a01      	subs	r2, #1
 801034e:	2a00      	cmp	r2, #0
 8010350:	6072      	str	r2, [r6, #4]
 8010352:	dc07      	bgt.n	8010364 <_scanf_i+0xb8>
 8010354:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010358:	4631      	mov	r1, r6
 801035a:	4650      	mov	r0, sl
 801035c:	4790      	blx	r2
 801035e:	2800      	cmp	r0, #0
 8010360:	f040 8085 	bne.w	801046e <_scanf_i+0x1c2>
 8010364:	f10b 0b01 	add.w	fp, fp, #1
 8010368:	f1bb 0f03 	cmp.w	fp, #3
 801036c:	d1cb      	bne.n	8010306 <_scanf_i+0x5a>
 801036e:	6863      	ldr	r3, [r4, #4]
 8010370:	b90b      	cbnz	r3, 8010376 <_scanf_i+0xca>
 8010372:	230a      	movs	r3, #10
 8010374:	6063      	str	r3, [r4, #4]
 8010376:	6863      	ldr	r3, [r4, #4]
 8010378:	4947      	ldr	r1, [pc, #284]	; (8010498 <_scanf_i+0x1ec>)
 801037a:	6960      	ldr	r0, [r4, #20]
 801037c:	1ac9      	subs	r1, r1, r3
 801037e:	f000 f89f 	bl	80104c0 <__sccl>
 8010382:	f04f 0b00 	mov.w	fp, #0
 8010386:	68a3      	ldr	r3, [r4, #8]
 8010388:	6822      	ldr	r2, [r4, #0]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d03d      	beq.n	801040a <_scanf_i+0x15e>
 801038e:	6831      	ldr	r1, [r6, #0]
 8010390:	6960      	ldr	r0, [r4, #20]
 8010392:	f891 c000 	ldrb.w	ip, [r1]
 8010396:	f810 000c 	ldrb.w	r0, [r0, ip]
 801039a:	2800      	cmp	r0, #0
 801039c:	d035      	beq.n	801040a <_scanf_i+0x15e>
 801039e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80103a2:	d124      	bne.n	80103ee <_scanf_i+0x142>
 80103a4:	0510      	lsls	r0, r2, #20
 80103a6:	d522      	bpl.n	80103ee <_scanf_i+0x142>
 80103a8:	f10b 0b01 	add.w	fp, fp, #1
 80103ac:	f1b9 0f00 	cmp.w	r9, #0
 80103b0:	d003      	beq.n	80103ba <_scanf_i+0x10e>
 80103b2:	3301      	adds	r3, #1
 80103b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80103b8:	60a3      	str	r3, [r4, #8]
 80103ba:	6873      	ldr	r3, [r6, #4]
 80103bc:	3b01      	subs	r3, #1
 80103be:	2b00      	cmp	r3, #0
 80103c0:	6073      	str	r3, [r6, #4]
 80103c2:	dd1b      	ble.n	80103fc <_scanf_i+0x150>
 80103c4:	6833      	ldr	r3, [r6, #0]
 80103c6:	3301      	adds	r3, #1
 80103c8:	6033      	str	r3, [r6, #0]
 80103ca:	68a3      	ldr	r3, [r4, #8]
 80103cc:	3b01      	subs	r3, #1
 80103ce:	60a3      	str	r3, [r4, #8]
 80103d0:	e7d9      	b.n	8010386 <_scanf_i+0xda>
 80103d2:	f1bb 0f02 	cmp.w	fp, #2
 80103d6:	d1ae      	bne.n	8010336 <_scanf_i+0x8a>
 80103d8:	6822      	ldr	r2, [r4, #0]
 80103da:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80103de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80103e2:	d1bf      	bne.n	8010364 <_scanf_i+0xb8>
 80103e4:	2310      	movs	r3, #16
 80103e6:	6063      	str	r3, [r4, #4]
 80103e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80103ec:	e7a2      	b.n	8010334 <_scanf_i+0x88>
 80103ee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80103f2:	6022      	str	r2, [r4, #0]
 80103f4:	780b      	ldrb	r3, [r1, #0]
 80103f6:	f805 3b01 	strb.w	r3, [r5], #1
 80103fa:	e7de      	b.n	80103ba <_scanf_i+0x10e>
 80103fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010400:	4631      	mov	r1, r6
 8010402:	4650      	mov	r0, sl
 8010404:	4798      	blx	r3
 8010406:	2800      	cmp	r0, #0
 8010408:	d0df      	beq.n	80103ca <_scanf_i+0x11e>
 801040a:	6823      	ldr	r3, [r4, #0]
 801040c:	05db      	lsls	r3, r3, #23
 801040e:	d50d      	bpl.n	801042c <_scanf_i+0x180>
 8010410:	42bd      	cmp	r5, r7
 8010412:	d909      	bls.n	8010428 <_scanf_i+0x17c>
 8010414:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010418:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801041c:	4632      	mov	r2, r6
 801041e:	4650      	mov	r0, sl
 8010420:	4798      	blx	r3
 8010422:	f105 39ff 	add.w	r9, r5, #4294967295
 8010426:	464d      	mov	r5, r9
 8010428:	42bd      	cmp	r5, r7
 801042a:	d02d      	beq.n	8010488 <_scanf_i+0x1dc>
 801042c:	6822      	ldr	r2, [r4, #0]
 801042e:	f012 0210 	ands.w	r2, r2, #16
 8010432:	d113      	bne.n	801045c <_scanf_i+0x1b0>
 8010434:	702a      	strb	r2, [r5, #0]
 8010436:	6863      	ldr	r3, [r4, #4]
 8010438:	9e01      	ldr	r6, [sp, #4]
 801043a:	4639      	mov	r1, r7
 801043c:	4650      	mov	r0, sl
 801043e:	47b0      	blx	r6
 8010440:	6821      	ldr	r1, [r4, #0]
 8010442:	f8d8 3000 	ldr.w	r3, [r8]
 8010446:	f011 0f20 	tst.w	r1, #32
 801044a:	d013      	beq.n	8010474 <_scanf_i+0x1c8>
 801044c:	1d1a      	adds	r2, r3, #4
 801044e:	f8c8 2000 	str.w	r2, [r8]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	6018      	str	r0, [r3, #0]
 8010456:	68e3      	ldr	r3, [r4, #12]
 8010458:	3301      	adds	r3, #1
 801045a:	60e3      	str	r3, [r4, #12]
 801045c:	1bed      	subs	r5, r5, r7
 801045e:	44ab      	add	fp, r5
 8010460:	6925      	ldr	r5, [r4, #16]
 8010462:	445d      	add	r5, fp
 8010464:	6125      	str	r5, [r4, #16]
 8010466:	2000      	movs	r0, #0
 8010468:	b007      	add	sp, #28
 801046a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801046e:	f04f 0b00 	mov.w	fp, #0
 8010472:	e7ca      	b.n	801040a <_scanf_i+0x15e>
 8010474:	1d1a      	adds	r2, r3, #4
 8010476:	f8c8 2000 	str.w	r2, [r8]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f011 0f01 	tst.w	r1, #1
 8010480:	bf14      	ite	ne
 8010482:	8018      	strhne	r0, [r3, #0]
 8010484:	6018      	streq	r0, [r3, #0]
 8010486:	e7e6      	b.n	8010456 <_scanf_i+0x1aa>
 8010488:	2001      	movs	r0, #1
 801048a:	e7ed      	b.n	8010468 <_scanf_i+0x1bc>
 801048c:	080139b8 	.word	0x080139b8
 8010490:	0800db2d 	.word	0x0800db2d
 8010494:	0801075d 	.word	0x0801075d
 8010498:	0803d7f5 	.word	0x0803d7f5

0801049c <_read_r>:
 801049c:	b538      	push	{r3, r4, r5, lr}
 801049e:	4d07      	ldr	r5, [pc, #28]	; (80104bc <_read_r+0x20>)
 80104a0:	4604      	mov	r4, r0
 80104a2:	4608      	mov	r0, r1
 80104a4:	4611      	mov	r1, r2
 80104a6:	2200      	movs	r2, #0
 80104a8:	602a      	str	r2, [r5, #0]
 80104aa:	461a      	mov	r2, r3
 80104ac:	f002 fe56 	bl	801315c <_read>
 80104b0:	1c43      	adds	r3, r0, #1
 80104b2:	d102      	bne.n	80104ba <_read_r+0x1e>
 80104b4:	682b      	ldr	r3, [r5, #0]
 80104b6:	b103      	cbz	r3, 80104ba <_read_r+0x1e>
 80104b8:	6023      	str	r3, [r4, #0]
 80104ba:	bd38      	pop	{r3, r4, r5, pc}
 80104bc:	200037ec 	.word	0x200037ec

080104c0 <__sccl>:
 80104c0:	b570      	push	{r4, r5, r6, lr}
 80104c2:	780b      	ldrb	r3, [r1, #0]
 80104c4:	4604      	mov	r4, r0
 80104c6:	2b5e      	cmp	r3, #94	; 0x5e
 80104c8:	bf0b      	itete	eq
 80104ca:	784b      	ldrbeq	r3, [r1, #1]
 80104cc:	1c48      	addne	r0, r1, #1
 80104ce:	1c88      	addeq	r0, r1, #2
 80104d0:	2200      	movne	r2, #0
 80104d2:	bf08      	it	eq
 80104d4:	2201      	moveq	r2, #1
 80104d6:	1e61      	subs	r1, r4, #1
 80104d8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80104dc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80104e0:	42a9      	cmp	r1, r5
 80104e2:	d1fb      	bne.n	80104dc <__sccl+0x1c>
 80104e4:	b90b      	cbnz	r3, 80104ea <__sccl+0x2a>
 80104e6:	3801      	subs	r0, #1
 80104e8:	bd70      	pop	{r4, r5, r6, pc}
 80104ea:	f082 0201 	eor.w	r2, r2, #1
 80104ee:	54e2      	strb	r2, [r4, r3]
 80104f0:	4605      	mov	r5, r0
 80104f2:	4628      	mov	r0, r5
 80104f4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80104f8:	292d      	cmp	r1, #45	; 0x2d
 80104fa:	d006      	beq.n	801050a <__sccl+0x4a>
 80104fc:	295d      	cmp	r1, #93	; 0x5d
 80104fe:	d0f3      	beq.n	80104e8 <__sccl+0x28>
 8010500:	b909      	cbnz	r1, 8010506 <__sccl+0x46>
 8010502:	4628      	mov	r0, r5
 8010504:	e7f0      	b.n	80104e8 <__sccl+0x28>
 8010506:	460b      	mov	r3, r1
 8010508:	e7f1      	b.n	80104ee <__sccl+0x2e>
 801050a:	786e      	ldrb	r6, [r5, #1]
 801050c:	2e5d      	cmp	r6, #93	; 0x5d
 801050e:	d0fa      	beq.n	8010506 <__sccl+0x46>
 8010510:	42b3      	cmp	r3, r6
 8010512:	dcf8      	bgt.n	8010506 <__sccl+0x46>
 8010514:	3502      	adds	r5, #2
 8010516:	4619      	mov	r1, r3
 8010518:	3101      	adds	r1, #1
 801051a:	428e      	cmp	r6, r1
 801051c:	5462      	strb	r2, [r4, r1]
 801051e:	dcfb      	bgt.n	8010518 <__sccl+0x58>
 8010520:	1af1      	subs	r1, r6, r3
 8010522:	3901      	subs	r1, #1
 8010524:	1c58      	adds	r0, r3, #1
 8010526:	42b3      	cmp	r3, r6
 8010528:	bfa8      	it	ge
 801052a:	2100      	movge	r1, #0
 801052c:	1843      	adds	r3, r0, r1
 801052e:	e7e0      	b.n	80104f2 <__sccl+0x32>

08010530 <_raise_r>:
 8010530:	291f      	cmp	r1, #31
 8010532:	b538      	push	{r3, r4, r5, lr}
 8010534:	4604      	mov	r4, r0
 8010536:	460d      	mov	r5, r1
 8010538:	d904      	bls.n	8010544 <_raise_r+0x14>
 801053a:	2316      	movs	r3, #22
 801053c:	6003      	str	r3, [r0, #0]
 801053e:	f04f 30ff 	mov.w	r0, #4294967295
 8010542:	bd38      	pop	{r3, r4, r5, pc}
 8010544:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010546:	b112      	cbz	r2, 801054e <_raise_r+0x1e>
 8010548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801054c:	b94b      	cbnz	r3, 8010562 <_raise_r+0x32>
 801054e:	4620      	mov	r0, r4
 8010550:	f000 f830 	bl	80105b4 <_getpid_r>
 8010554:	462a      	mov	r2, r5
 8010556:	4601      	mov	r1, r0
 8010558:	4620      	mov	r0, r4
 801055a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801055e:	f000 b817 	b.w	8010590 <_kill_r>
 8010562:	2b01      	cmp	r3, #1
 8010564:	d00a      	beq.n	801057c <_raise_r+0x4c>
 8010566:	1c59      	adds	r1, r3, #1
 8010568:	d103      	bne.n	8010572 <_raise_r+0x42>
 801056a:	2316      	movs	r3, #22
 801056c:	6003      	str	r3, [r0, #0]
 801056e:	2001      	movs	r0, #1
 8010570:	e7e7      	b.n	8010542 <_raise_r+0x12>
 8010572:	2400      	movs	r4, #0
 8010574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010578:	4628      	mov	r0, r5
 801057a:	4798      	blx	r3
 801057c:	2000      	movs	r0, #0
 801057e:	e7e0      	b.n	8010542 <_raise_r+0x12>

08010580 <raise>:
 8010580:	4b02      	ldr	r3, [pc, #8]	; (801058c <raise+0xc>)
 8010582:	4601      	mov	r1, r0
 8010584:	6818      	ldr	r0, [r3, #0]
 8010586:	f7ff bfd3 	b.w	8010530 <_raise_r>
 801058a:	bf00      	nop
 801058c:	200002bc 	.word	0x200002bc

08010590 <_kill_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	4d07      	ldr	r5, [pc, #28]	; (80105b0 <_kill_r+0x20>)
 8010594:	2300      	movs	r3, #0
 8010596:	4604      	mov	r4, r0
 8010598:	4608      	mov	r0, r1
 801059a:	4611      	mov	r1, r2
 801059c:	602b      	str	r3, [r5, #0]
 801059e:	f002 fdcd 	bl	801313c <_kill>
 80105a2:	1c43      	adds	r3, r0, #1
 80105a4:	d102      	bne.n	80105ac <_kill_r+0x1c>
 80105a6:	682b      	ldr	r3, [r5, #0]
 80105a8:	b103      	cbz	r3, 80105ac <_kill_r+0x1c>
 80105aa:	6023      	str	r3, [r4, #0]
 80105ac:	bd38      	pop	{r3, r4, r5, pc}
 80105ae:	bf00      	nop
 80105b0:	200037ec 	.word	0x200037ec

080105b4 <_getpid_r>:
 80105b4:	f002 bdb2 	b.w	801311c <_getpid>

080105b8 <sniprintf>:
 80105b8:	b40c      	push	{r2, r3}
 80105ba:	b530      	push	{r4, r5, lr}
 80105bc:	4b17      	ldr	r3, [pc, #92]	; (801061c <sniprintf+0x64>)
 80105be:	1e0c      	subs	r4, r1, #0
 80105c0:	681d      	ldr	r5, [r3, #0]
 80105c2:	b09d      	sub	sp, #116	; 0x74
 80105c4:	da08      	bge.n	80105d8 <sniprintf+0x20>
 80105c6:	238b      	movs	r3, #139	; 0x8b
 80105c8:	602b      	str	r3, [r5, #0]
 80105ca:	f04f 30ff 	mov.w	r0, #4294967295
 80105ce:	b01d      	add	sp, #116	; 0x74
 80105d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105d4:	b002      	add	sp, #8
 80105d6:	4770      	bx	lr
 80105d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80105dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80105e0:	bf14      	ite	ne
 80105e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80105e6:	4623      	moveq	r3, r4
 80105e8:	9304      	str	r3, [sp, #16]
 80105ea:	9307      	str	r3, [sp, #28]
 80105ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105f0:	9002      	str	r0, [sp, #8]
 80105f2:	9006      	str	r0, [sp, #24]
 80105f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80105f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80105fa:	ab21      	add	r3, sp, #132	; 0x84
 80105fc:	a902      	add	r1, sp, #8
 80105fe:	4628      	mov	r0, r5
 8010600:	9301      	str	r3, [sp, #4]
 8010602:	f7ff fb27 	bl	800fc54 <_svfiprintf_r>
 8010606:	1c43      	adds	r3, r0, #1
 8010608:	bfbc      	itt	lt
 801060a:	238b      	movlt	r3, #139	; 0x8b
 801060c:	602b      	strlt	r3, [r5, #0]
 801060e:	2c00      	cmp	r4, #0
 8010610:	d0dd      	beq.n	80105ce <sniprintf+0x16>
 8010612:	9b02      	ldr	r3, [sp, #8]
 8010614:	2200      	movs	r2, #0
 8010616:	701a      	strb	r2, [r3, #0]
 8010618:	e7d9      	b.n	80105ce <sniprintf+0x16>
 801061a:	bf00      	nop
 801061c:	200002bc 	.word	0x200002bc

08010620 <strcpy>:
 8010620:	4603      	mov	r3, r0
 8010622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010626:	f803 2b01 	strb.w	r2, [r3], #1
 801062a:	2a00      	cmp	r2, #0
 801062c:	d1f9      	bne.n	8010622 <strcpy+0x2>
 801062e:	4770      	bx	lr

08010630 <strncmp>:
 8010630:	b510      	push	{r4, lr}
 8010632:	b17a      	cbz	r2, 8010654 <strncmp+0x24>
 8010634:	4603      	mov	r3, r0
 8010636:	3901      	subs	r1, #1
 8010638:	1884      	adds	r4, r0, r2
 801063a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801063e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010642:	4290      	cmp	r0, r2
 8010644:	d101      	bne.n	801064a <strncmp+0x1a>
 8010646:	42a3      	cmp	r3, r4
 8010648:	d101      	bne.n	801064e <strncmp+0x1e>
 801064a:	1a80      	subs	r0, r0, r2
 801064c:	bd10      	pop	{r4, pc}
 801064e:	2800      	cmp	r0, #0
 8010650:	d1f3      	bne.n	801063a <strncmp+0xa>
 8010652:	e7fa      	b.n	801064a <strncmp+0x1a>
 8010654:	4610      	mov	r0, r2
 8010656:	e7f9      	b.n	801064c <strncmp+0x1c>

08010658 <_strtol_l.constprop.0>:
 8010658:	2b01      	cmp	r3, #1
 801065a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801065e:	d001      	beq.n	8010664 <_strtol_l.constprop.0+0xc>
 8010660:	2b24      	cmp	r3, #36	; 0x24
 8010662:	d906      	bls.n	8010672 <_strtol_l.constprop.0+0x1a>
 8010664:	f000 f8c2 	bl	80107ec <__errno>
 8010668:	2316      	movs	r3, #22
 801066a:	6003      	str	r3, [r0, #0]
 801066c:	2000      	movs	r0, #0
 801066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010672:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010758 <_strtol_l.constprop.0+0x100>
 8010676:	460d      	mov	r5, r1
 8010678:	462e      	mov	r6, r5
 801067a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801067e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010682:	f017 0708 	ands.w	r7, r7, #8
 8010686:	d1f7      	bne.n	8010678 <_strtol_l.constprop.0+0x20>
 8010688:	2c2d      	cmp	r4, #45	; 0x2d
 801068a:	d132      	bne.n	80106f2 <_strtol_l.constprop.0+0x9a>
 801068c:	782c      	ldrb	r4, [r5, #0]
 801068e:	2701      	movs	r7, #1
 8010690:	1cb5      	adds	r5, r6, #2
 8010692:	2b00      	cmp	r3, #0
 8010694:	d05b      	beq.n	801074e <_strtol_l.constprop.0+0xf6>
 8010696:	2b10      	cmp	r3, #16
 8010698:	d109      	bne.n	80106ae <_strtol_l.constprop.0+0x56>
 801069a:	2c30      	cmp	r4, #48	; 0x30
 801069c:	d107      	bne.n	80106ae <_strtol_l.constprop.0+0x56>
 801069e:	782c      	ldrb	r4, [r5, #0]
 80106a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80106a4:	2c58      	cmp	r4, #88	; 0x58
 80106a6:	d14d      	bne.n	8010744 <_strtol_l.constprop.0+0xec>
 80106a8:	786c      	ldrb	r4, [r5, #1]
 80106aa:	2310      	movs	r3, #16
 80106ac:	3502      	adds	r5, #2
 80106ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80106b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80106b6:	f04f 0c00 	mov.w	ip, #0
 80106ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80106be:	4666      	mov	r6, ip
 80106c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80106c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80106c8:	f1be 0f09 	cmp.w	lr, #9
 80106cc:	d816      	bhi.n	80106fc <_strtol_l.constprop.0+0xa4>
 80106ce:	4674      	mov	r4, lr
 80106d0:	42a3      	cmp	r3, r4
 80106d2:	dd24      	ble.n	801071e <_strtol_l.constprop.0+0xc6>
 80106d4:	f1bc 0f00 	cmp.w	ip, #0
 80106d8:	db1e      	blt.n	8010718 <_strtol_l.constprop.0+0xc0>
 80106da:	45b1      	cmp	r9, r6
 80106dc:	d31c      	bcc.n	8010718 <_strtol_l.constprop.0+0xc0>
 80106de:	d101      	bne.n	80106e4 <_strtol_l.constprop.0+0x8c>
 80106e0:	45a2      	cmp	sl, r4
 80106e2:	db19      	blt.n	8010718 <_strtol_l.constprop.0+0xc0>
 80106e4:	fb06 4603 	mla	r6, r6, r3, r4
 80106e8:	f04f 0c01 	mov.w	ip, #1
 80106ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80106f0:	e7e8      	b.n	80106c4 <_strtol_l.constprop.0+0x6c>
 80106f2:	2c2b      	cmp	r4, #43	; 0x2b
 80106f4:	bf04      	itt	eq
 80106f6:	782c      	ldrbeq	r4, [r5, #0]
 80106f8:	1cb5      	addeq	r5, r6, #2
 80106fa:	e7ca      	b.n	8010692 <_strtol_l.constprop.0+0x3a>
 80106fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010700:	f1be 0f19 	cmp.w	lr, #25
 8010704:	d801      	bhi.n	801070a <_strtol_l.constprop.0+0xb2>
 8010706:	3c37      	subs	r4, #55	; 0x37
 8010708:	e7e2      	b.n	80106d0 <_strtol_l.constprop.0+0x78>
 801070a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801070e:	f1be 0f19 	cmp.w	lr, #25
 8010712:	d804      	bhi.n	801071e <_strtol_l.constprop.0+0xc6>
 8010714:	3c57      	subs	r4, #87	; 0x57
 8010716:	e7db      	b.n	80106d0 <_strtol_l.constprop.0+0x78>
 8010718:	f04f 3cff 	mov.w	ip, #4294967295
 801071c:	e7e6      	b.n	80106ec <_strtol_l.constprop.0+0x94>
 801071e:	f1bc 0f00 	cmp.w	ip, #0
 8010722:	da05      	bge.n	8010730 <_strtol_l.constprop.0+0xd8>
 8010724:	2322      	movs	r3, #34	; 0x22
 8010726:	6003      	str	r3, [r0, #0]
 8010728:	4646      	mov	r6, r8
 801072a:	b942      	cbnz	r2, 801073e <_strtol_l.constprop.0+0xe6>
 801072c:	4630      	mov	r0, r6
 801072e:	e79e      	b.n	801066e <_strtol_l.constprop.0+0x16>
 8010730:	b107      	cbz	r7, 8010734 <_strtol_l.constprop.0+0xdc>
 8010732:	4276      	negs	r6, r6
 8010734:	2a00      	cmp	r2, #0
 8010736:	d0f9      	beq.n	801072c <_strtol_l.constprop.0+0xd4>
 8010738:	f1bc 0f00 	cmp.w	ip, #0
 801073c:	d000      	beq.n	8010740 <_strtol_l.constprop.0+0xe8>
 801073e:	1e69      	subs	r1, r5, #1
 8010740:	6011      	str	r1, [r2, #0]
 8010742:	e7f3      	b.n	801072c <_strtol_l.constprop.0+0xd4>
 8010744:	2430      	movs	r4, #48	; 0x30
 8010746:	2b00      	cmp	r3, #0
 8010748:	d1b1      	bne.n	80106ae <_strtol_l.constprop.0+0x56>
 801074a:	2308      	movs	r3, #8
 801074c:	e7af      	b.n	80106ae <_strtol_l.constprop.0+0x56>
 801074e:	2c30      	cmp	r4, #48	; 0x30
 8010750:	d0a5      	beq.n	801069e <_strtol_l.constprop.0+0x46>
 8010752:	230a      	movs	r3, #10
 8010754:	e7ab      	b.n	80106ae <_strtol_l.constprop.0+0x56>
 8010756:	bf00      	nop
 8010758:	0803d449 	.word	0x0803d449

0801075c <_strtol_r>:
 801075c:	f7ff bf7c 	b.w	8010658 <_strtol_l.constprop.0>

08010760 <__submore>:
 8010760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010764:	460c      	mov	r4, r1
 8010766:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801076c:	4299      	cmp	r1, r3
 801076e:	d11d      	bne.n	80107ac <__submore+0x4c>
 8010770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010774:	f7fb fd40 	bl	800c1f8 <_malloc_r>
 8010778:	b918      	cbnz	r0, 8010782 <__submore+0x22>
 801077a:	f04f 30ff 	mov.w	r0, #4294967295
 801077e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010786:	63a3      	str	r3, [r4, #56]	; 0x38
 8010788:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801078c:	6360      	str	r0, [r4, #52]	; 0x34
 801078e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010792:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010796:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801079a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801079e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80107a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80107a6:	6020      	str	r0, [r4, #0]
 80107a8:	2000      	movs	r0, #0
 80107aa:	e7e8      	b.n	801077e <__submore+0x1e>
 80107ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80107ae:	0077      	lsls	r7, r6, #1
 80107b0:	463a      	mov	r2, r7
 80107b2:	f7ff f9c5 	bl	800fb40 <_realloc_r>
 80107b6:	4605      	mov	r5, r0
 80107b8:	2800      	cmp	r0, #0
 80107ba:	d0de      	beq.n	801077a <__submore+0x1a>
 80107bc:	eb00 0806 	add.w	r8, r0, r6
 80107c0:	4601      	mov	r1, r0
 80107c2:	4632      	mov	r2, r6
 80107c4:	4640      	mov	r0, r8
 80107c6:	f7fb fa23 	bl	800bc10 <memcpy>
 80107ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80107ce:	f8c4 8000 	str.w	r8, [r4]
 80107d2:	e7e9      	b.n	80107a8 <__submore+0x48>

080107d4 <__env_lock>:
 80107d4:	4801      	ldr	r0, [pc, #4]	; (80107dc <__env_lock+0x8>)
 80107d6:	f7fe bd77 	b.w	800f2c8 <__retarget_lock_acquire_recursive>
 80107da:	bf00      	nop
 80107dc:	200037e4 	.word	0x200037e4

080107e0 <__env_unlock>:
 80107e0:	4801      	ldr	r0, [pc, #4]	; (80107e8 <__env_unlock+0x8>)
 80107e2:	f7fe bd73 	b.w	800f2cc <__retarget_lock_release_recursive>
 80107e6:	bf00      	nop
 80107e8:	200037e4 	.word	0x200037e4

080107ec <__errno>:
 80107ec:	4b01      	ldr	r3, [pc, #4]	; (80107f4 <__errno+0x8>)
 80107ee:	6818      	ldr	r0, [r3, #0]
 80107f0:	4770      	bx	lr
 80107f2:	bf00      	nop
 80107f4:	200002bc 	.word	0x200002bc

080107f8 <_fstat_r>:
 80107f8:	b538      	push	{r3, r4, r5, lr}
 80107fa:	4d07      	ldr	r5, [pc, #28]	; (8010818 <_fstat_r+0x20>)
 80107fc:	2300      	movs	r3, #0
 80107fe:	4604      	mov	r4, r0
 8010800:	4608      	mov	r0, r1
 8010802:	4611      	mov	r1, r2
 8010804:	602b      	str	r3, [r5, #0]
 8010806:	f002 fc81 	bl	801310c <_fstat>
 801080a:	1c43      	adds	r3, r0, #1
 801080c:	d102      	bne.n	8010814 <_fstat_r+0x1c>
 801080e:	682b      	ldr	r3, [r5, #0]
 8010810:	b103      	cbz	r3, 8010814 <_fstat_r+0x1c>
 8010812:	6023      	str	r3, [r4, #0]
 8010814:	bd38      	pop	{r3, r4, r5, pc}
 8010816:	bf00      	nop
 8010818:	200037ec 	.word	0x200037ec

0801081c <_isatty_r>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	4d06      	ldr	r5, [pc, #24]	; (8010838 <_isatty_r+0x1c>)
 8010820:	2300      	movs	r3, #0
 8010822:	4604      	mov	r4, r0
 8010824:	4608      	mov	r0, r1
 8010826:	602b      	str	r3, [r5, #0]
 8010828:	f002 fc80 	bl	801312c <_isatty>
 801082c:	1c43      	adds	r3, r0, #1
 801082e:	d102      	bne.n	8010836 <_isatty_r+0x1a>
 8010830:	682b      	ldr	r3, [r5, #0]
 8010832:	b103      	cbz	r3, 8010836 <_isatty_r+0x1a>
 8010834:	6023      	str	r3, [r4, #0]
 8010836:	bd38      	pop	{r3, r4, r5, pc}
 8010838:	200037ec 	.word	0x200037ec

0801083c <__ascii_mbtowc>:
 801083c:	b082      	sub	sp, #8
 801083e:	b901      	cbnz	r1, 8010842 <__ascii_mbtowc+0x6>
 8010840:	a901      	add	r1, sp, #4
 8010842:	b142      	cbz	r2, 8010856 <__ascii_mbtowc+0x1a>
 8010844:	b14b      	cbz	r3, 801085a <__ascii_mbtowc+0x1e>
 8010846:	7813      	ldrb	r3, [r2, #0]
 8010848:	600b      	str	r3, [r1, #0]
 801084a:	7812      	ldrb	r2, [r2, #0]
 801084c:	1e10      	subs	r0, r2, #0
 801084e:	bf18      	it	ne
 8010850:	2001      	movne	r0, #1
 8010852:	b002      	add	sp, #8
 8010854:	4770      	bx	lr
 8010856:	4610      	mov	r0, r2
 8010858:	e7fb      	b.n	8010852 <__ascii_mbtowc+0x16>
 801085a:	f06f 0001 	mvn.w	r0, #1
 801085e:	e7f8      	b.n	8010852 <__ascii_mbtowc+0x16>

08010860 <_malloc_usable_size_r>:
 8010860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010864:	1f18      	subs	r0, r3, #4
 8010866:	2b00      	cmp	r3, #0
 8010868:	bfbc      	itt	lt
 801086a:	580b      	ldrlt	r3, [r1, r0]
 801086c:	18c0      	addlt	r0, r0, r3
 801086e:	4770      	bx	lr

08010870 <__ascii_wctomb>:
 8010870:	b149      	cbz	r1, 8010886 <__ascii_wctomb+0x16>
 8010872:	2aff      	cmp	r2, #255	; 0xff
 8010874:	bf85      	ittet	hi
 8010876:	238a      	movhi	r3, #138	; 0x8a
 8010878:	6003      	strhi	r3, [r0, #0]
 801087a:	700a      	strbls	r2, [r1, #0]
 801087c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010880:	bf98      	it	ls
 8010882:	2001      	movls	r0, #1
 8010884:	4770      	bx	lr
 8010886:	4608      	mov	r0, r1
 8010888:	4770      	bx	lr
 801088a:	0000      	movs	r0, r0
 801088c:	0000      	movs	r0, r0
	...

08010890 <cos>:
 8010890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010892:	ec53 2b10 	vmov	r2, r3, d0
 8010896:	4826      	ldr	r0, [pc, #152]	; (8010930 <cos+0xa0>)
 8010898:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801089c:	4281      	cmp	r1, r0
 801089e:	dc06      	bgt.n	80108ae <cos+0x1e>
 80108a0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010928 <cos+0x98>
 80108a4:	b005      	add	sp, #20
 80108a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80108aa:	f001 bbf1 	b.w	8012090 <__kernel_cos>
 80108ae:	4821      	ldr	r0, [pc, #132]	; (8010934 <cos+0xa4>)
 80108b0:	4281      	cmp	r1, r0
 80108b2:	dd09      	ble.n	80108c8 <cos+0x38>
 80108b4:	ee10 0a10 	vmov	r0, s0
 80108b8:	4619      	mov	r1, r3
 80108ba:	f7ef fcff 	bl	80002bc <__aeabi_dsub>
 80108be:	ec41 0b10 	vmov	d0, r0, r1
 80108c2:	b005      	add	sp, #20
 80108c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80108c8:	4668      	mov	r0, sp
 80108ca:	f001 f921 	bl	8011b10 <__ieee754_rem_pio2>
 80108ce:	f000 0003 	and.w	r0, r0, #3
 80108d2:	2801      	cmp	r0, #1
 80108d4:	d00b      	beq.n	80108ee <cos+0x5e>
 80108d6:	2802      	cmp	r0, #2
 80108d8:	d016      	beq.n	8010908 <cos+0x78>
 80108da:	b9e0      	cbnz	r0, 8010916 <cos+0x86>
 80108dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108e0:	ed9d 0b00 	vldr	d0, [sp]
 80108e4:	f001 fbd4 	bl	8012090 <__kernel_cos>
 80108e8:	ec51 0b10 	vmov	r0, r1, d0
 80108ec:	e7e7      	b.n	80108be <cos+0x2e>
 80108ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108f2:	ed9d 0b00 	vldr	d0, [sp]
 80108f6:	f001 ffe3 	bl	80128c0 <__kernel_sin>
 80108fa:	ec53 2b10 	vmov	r2, r3, d0
 80108fe:	ee10 0a10 	vmov	r0, s0
 8010902:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010906:	e7da      	b.n	80108be <cos+0x2e>
 8010908:	ed9d 1b02 	vldr	d1, [sp, #8]
 801090c:	ed9d 0b00 	vldr	d0, [sp]
 8010910:	f001 fbbe 	bl	8012090 <__kernel_cos>
 8010914:	e7f1      	b.n	80108fa <cos+0x6a>
 8010916:	ed9d 1b02 	vldr	d1, [sp, #8]
 801091a:	ed9d 0b00 	vldr	d0, [sp]
 801091e:	2001      	movs	r0, #1
 8010920:	f001 ffce 	bl	80128c0 <__kernel_sin>
 8010924:	e7e0      	b.n	80108e8 <cos+0x58>
 8010926:	bf00      	nop
	...
 8010930:	3fe921fb 	.word	0x3fe921fb
 8010934:	7fefffff 	.word	0x7fefffff

08010938 <sin>:
 8010938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801093a:	ec53 2b10 	vmov	r2, r3, d0
 801093e:	4828      	ldr	r0, [pc, #160]	; (80109e0 <sin+0xa8>)
 8010940:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010944:	4281      	cmp	r1, r0
 8010946:	dc07      	bgt.n	8010958 <sin+0x20>
 8010948:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80109d8 <sin+0xa0>
 801094c:	2000      	movs	r0, #0
 801094e:	b005      	add	sp, #20
 8010950:	f85d eb04 	ldr.w	lr, [sp], #4
 8010954:	f001 bfb4 	b.w	80128c0 <__kernel_sin>
 8010958:	4822      	ldr	r0, [pc, #136]	; (80109e4 <sin+0xac>)
 801095a:	4281      	cmp	r1, r0
 801095c:	dd09      	ble.n	8010972 <sin+0x3a>
 801095e:	ee10 0a10 	vmov	r0, s0
 8010962:	4619      	mov	r1, r3
 8010964:	f7ef fcaa 	bl	80002bc <__aeabi_dsub>
 8010968:	ec41 0b10 	vmov	d0, r0, r1
 801096c:	b005      	add	sp, #20
 801096e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010972:	4668      	mov	r0, sp
 8010974:	f001 f8cc 	bl	8011b10 <__ieee754_rem_pio2>
 8010978:	f000 0003 	and.w	r0, r0, #3
 801097c:	2801      	cmp	r0, #1
 801097e:	d00c      	beq.n	801099a <sin+0x62>
 8010980:	2802      	cmp	r0, #2
 8010982:	d011      	beq.n	80109a8 <sin+0x70>
 8010984:	b9f0      	cbnz	r0, 80109c4 <sin+0x8c>
 8010986:	ed9d 1b02 	vldr	d1, [sp, #8]
 801098a:	ed9d 0b00 	vldr	d0, [sp]
 801098e:	2001      	movs	r0, #1
 8010990:	f001 ff96 	bl	80128c0 <__kernel_sin>
 8010994:	ec51 0b10 	vmov	r0, r1, d0
 8010998:	e7e6      	b.n	8010968 <sin+0x30>
 801099a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801099e:	ed9d 0b00 	vldr	d0, [sp]
 80109a2:	f001 fb75 	bl	8012090 <__kernel_cos>
 80109a6:	e7f5      	b.n	8010994 <sin+0x5c>
 80109a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80109ac:	ed9d 0b00 	vldr	d0, [sp]
 80109b0:	2001      	movs	r0, #1
 80109b2:	f001 ff85 	bl	80128c0 <__kernel_sin>
 80109b6:	ec53 2b10 	vmov	r2, r3, d0
 80109ba:	ee10 0a10 	vmov	r0, s0
 80109be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80109c2:	e7d1      	b.n	8010968 <sin+0x30>
 80109c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80109c8:	ed9d 0b00 	vldr	d0, [sp]
 80109cc:	f001 fb60 	bl	8012090 <__kernel_cos>
 80109d0:	e7f1      	b.n	80109b6 <sin+0x7e>
 80109d2:	bf00      	nop
 80109d4:	f3af 8000 	nop.w
	...
 80109e0:	3fe921fb 	.word	0x3fe921fb
 80109e4:	7fefffff 	.word	0x7fefffff

080109e8 <tan>:
 80109e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109ea:	ec53 2b10 	vmov	r2, r3, d0
 80109ee:	4816      	ldr	r0, [pc, #88]	; (8010a48 <tan+0x60>)
 80109f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80109f4:	4281      	cmp	r1, r0
 80109f6:	dc07      	bgt.n	8010a08 <tan+0x20>
 80109f8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8010a40 <tan+0x58>
 80109fc:	2001      	movs	r0, #1
 80109fe:	b005      	add	sp, #20
 8010a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a04:	f002 b81c 	b.w	8012a40 <__kernel_tan>
 8010a08:	4810      	ldr	r0, [pc, #64]	; (8010a4c <tan+0x64>)
 8010a0a:	4281      	cmp	r1, r0
 8010a0c:	dd09      	ble.n	8010a22 <tan+0x3a>
 8010a0e:	ee10 0a10 	vmov	r0, s0
 8010a12:	4619      	mov	r1, r3
 8010a14:	f7ef fc52 	bl	80002bc <__aeabi_dsub>
 8010a18:	ec41 0b10 	vmov	d0, r0, r1
 8010a1c:	b005      	add	sp, #20
 8010a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a22:	4668      	mov	r0, sp
 8010a24:	f001 f874 	bl	8011b10 <__ieee754_rem_pio2>
 8010a28:	0040      	lsls	r0, r0, #1
 8010a2a:	f000 0002 	and.w	r0, r0, #2
 8010a2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a32:	ed9d 0b00 	vldr	d0, [sp]
 8010a36:	f1c0 0001 	rsb	r0, r0, #1
 8010a3a:	f002 f801 	bl	8012a40 <__kernel_tan>
 8010a3e:	e7ed      	b.n	8010a1c <tan+0x34>
	...
 8010a48:	3fe921fb 	.word	0x3fe921fb
 8010a4c:	7fefffff 	.word	0x7fefffff

08010a50 <acos>:
 8010a50:	b538      	push	{r3, r4, r5, lr}
 8010a52:	ed2d 8b02 	vpush	{d8}
 8010a56:	ec55 4b10 	vmov	r4, r5, d0
 8010a5a:	f000 f8c9 	bl	8010bf0 <__ieee754_acos>
 8010a5e:	4622      	mov	r2, r4
 8010a60:	462b      	mov	r3, r5
 8010a62:	4620      	mov	r0, r4
 8010a64:	4629      	mov	r1, r5
 8010a66:	eeb0 8a40 	vmov.f32	s16, s0
 8010a6a:	eef0 8a60 	vmov.f32	s17, s1
 8010a6e:	f7f0 f877 	bl	8000b60 <__aeabi_dcmpun>
 8010a72:	b9a8      	cbnz	r0, 8010aa0 <acos+0x50>
 8010a74:	ec45 4b10 	vmov	d0, r4, r5
 8010a78:	f002 fa1c 	bl	8012eb4 <fabs>
 8010a7c:	4b0c      	ldr	r3, [pc, #48]	; (8010ab0 <acos+0x60>)
 8010a7e:	ec51 0b10 	vmov	r0, r1, d0
 8010a82:	2200      	movs	r2, #0
 8010a84:	f7f0 f862 	bl	8000b4c <__aeabi_dcmpgt>
 8010a88:	b150      	cbz	r0, 8010aa0 <acos+0x50>
 8010a8a:	f7ff feaf 	bl	80107ec <__errno>
 8010a8e:	ecbd 8b02 	vpop	{d8}
 8010a92:	2321      	movs	r3, #33	; 0x21
 8010a94:	6003      	str	r3, [r0, #0]
 8010a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a9a:	4806      	ldr	r0, [pc, #24]	; (8010ab4 <acos+0x64>)
 8010a9c:	f002 baa0 	b.w	8012fe0 <nan>
 8010aa0:	eeb0 0a48 	vmov.f32	s0, s16
 8010aa4:	eef0 0a68 	vmov.f32	s1, s17
 8010aa8:	ecbd 8b02 	vpop	{d8}
 8010aac:	bd38      	pop	{r3, r4, r5, pc}
 8010aae:	bf00      	nop
 8010ab0:	3ff00000 	.word	0x3ff00000
 8010ab4:	0803d06e 	.word	0x0803d06e

08010ab8 <pow>:
 8010ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aba:	ed2d 8b02 	vpush	{d8}
 8010abe:	eeb0 8a40 	vmov.f32	s16, s0
 8010ac2:	eef0 8a60 	vmov.f32	s17, s1
 8010ac6:	ec55 4b11 	vmov	r4, r5, d1
 8010aca:	f000 faf1 	bl	80110b0 <__ieee754_pow>
 8010ace:	4622      	mov	r2, r4
 8010ad0:	462b      	mov	r3, r5
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	4629      	mov	r1, r5
 8010ad6:	ec57 6b10 	vmov	r6, r7, d0
 8010ada:	f7f0 f841 	bl	8000b60 <__aeabi_dcmpun>
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	d13b      	bne.n	8010b5a <pow+0xa2>
 8010ae2:	ec51 0b18 	vmov	r0, r1, d8
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	2300      	movs	r3, #0
 8010aea:	f7f0 f807 	bl	8000afc <__aeabi_dcmpeq>
 8010aee:	b1b8      	cbz	r0, 8010b20 <pow+0x68>
 8010af0:	2200      	movs	r2, #0
 8010af2:	2300      	movs	r3, #0
 8010af4:	4620      	mov	r0, r4
 8010af6:	4629      	mov	r1, r5
 8010af8:	f7f0 f800 	bl	8000afc <__aeabi_dcmpeq>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d146      	bne.n	8010b8e <pow+0xd6>
 8010b00:	ec45 4b10 	vmov	d0, r4, r5
 8010b04:	f002 f9df 	bl	8012ec6 <finite>
 8010b08:	b338      	cbz	r0, 8010b5a <pow+0xa2>
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	4620      	mov	r0, r4
 8010b10:	4629      	mov	r1, r5
 8010b12:	f7ef fffd 	bl	8000b10 <__aeabi_dcmplt>
 8010b16:	b300      	cbz	r0, 8010b5a <pow+0xa2>
 8010b18:	f7ff fe68 	bl	80107ec <__errno>
 8010b1c:	2322      	movs	r3, #34	; 0x22
 8010b1e:	e01b      	b.n	8010b58 <pow+0xa0>
 8010b20:	ec47 6b10 	vmov	d0, r6, r7
 8010b24:	f002 f9cf 	bl	8012ec6 <finite>
 8010b28:	b9e0      	cbnz	r0, 8010b64 <pow+0xac>
 8010b2a:	eeb0 0a48 	vmov.f32	s0, s16
 8010b2e:	eef0 0a68 	vmov.f32	s1, s17
 8010b32:	f002 f9c8 	bl	8012ec6 <finite>
 8010b36:	b1a8      	cbz	r0, 8010b64 <pow+0xac>
 8010b38:	ec45 4b10 	vmov	d0, r4, r5
 8010b3c:	f002 f9c3 	bl	8012ec6 <finite>
 8010b40:	b180      	cbz	r0, 8010b64 <pow+0xac>
 8010b42:	4632      	mov	r2, r6
 8010b44:	463b      	mov	r3, r7
 8010b46:	4630      	mov	r0, r6
 8010b48:	4639      	mov	r1, r7
 8010b4a:	f7f0 f809 	bl	8000b60 <__aeabi_dcmpun>
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	d0e2      	beq.n	8010b18 <pow+0x60>
 8010b52:	f7ff fe4b 	bl	80107ec <__errno>
 8010b56:	2321      	movs	r3, #33	; 0x21
 8010b58:	6003      	str	r3, [r0, #0]
 8010b5a:	ecbd 8b02 	vpop	{d8}
 8010b5e:	ec47 6b10 	vmov	d0, r6, r7
 8010b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b64:	2200      	movs	r2, #0
 8010b66:	2300      	movs	r3, #0
 8010b68:	4630      	mov	r0, r6
 8010b6a:	4639      	mov	r1, r7
 8010b6c:	f7ef ffc6 	bl	8000afc <__aeabi_dcmpeq>
 8010b70:	2800      	cmp	r0, #0
 8010b72:	d0f2      	beq.n	8010b5a <pow+0xa2>
 8010b74:	eeb0 0a48 	vmov.f32	s0, s16
 8010b78:	eef0 0a68 	vmov.f32	s1, s17
 8010b7c:	f002 f9a3 	bl	8012ec6 <finite>
 8010b80:	2800      	cmp	r0, #0
 8010b82:	d0ea      	beq.n	8010b5a <pow+0xa2>
 8010b84:	ec45 4b10 	vmov	d0, r4, r5
 8010b88:	f002 f99d 	bl	8012ec6 <finite>
 8010b8c:	e7c3      	b.n	8010b16 <pow+0x5e>
 8010b8e:	4f01      	ldr	r7, [pc, #4]	; (8010b94 <pow+0xdc>)
 8010b90:	2600      	movs	r6, #0
 8010b92:	e7e2      	b.n	8010b5a <pow+0xa2>
 8010b94:	3ff00000 	.word	0x3ff00000

08010b98 <sqrt>:
 8010b98:	b538      	push	{r3, r4, r5, lr}
 8010b9a:	ed2d 8b02 	vpush	{d8}
 8010b9e:	ec55 4b10 	vmov	r4, r5, d0
 8010ba2:	f001 f9c1 	bl	8011f28 <__ieee754_sqrt>
 8010ba6:	4622      	mov	r2, r4
 8010ba8:	462b      	mov	r3, r5
 8010baa:	4620      	mov	r0, r4
 8010bac:	4629      	mov	r1, r5
 8010bae:	eeb0 8a40 	vmov.f32	s16, s0
 8010bb2:	eef0 8a60 	vmov.f32	s17, s1
 8010bb6:	f7ef ffd3 	bl	8000b60 <__aeabi_dcmpun>
 8010bba:	b990      	cbnz	r0, 8010be2 <sqrt+0x4a>
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	4629      	mov	r1, r5
 8010bc4:	f7ef ffa4 	bl	8000b10 <__aeabi_dcmplt>
 8010bc8:	b158      	cbz	r0, 8010be2 <sqrt+0x4a>
 8010bca:	f7ff fe0f 	bl	80107ec <__errno>
 8010bce:	2321      	movs	r3, #33	; 0x21
 8010bd0:	6003      	str	r3, [r0, #0]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	4610      	mov	r0, r2
 8010bd8:	4619      	mov	r1, r3
 8010bda:	f7ef fe51 	bl	8000880 <__aeabi_ddiv>
 8010bde:	ec41 0b18 	vmov	d8, r0, r1
 8010be2:	eeb0 0a48 	vmov.f32	s0, s16
 8010be6:	eef0 0a68 	vmov.f32	s1, s17
 8010bea:	ecbd 8b02 	vpop	{d8}
 8010bee:	bd38      	pop	{r3, r4, r5, pc}

08010bf0 <__ieee754_acos>:
 8010bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf4:	ec55 4b10 	vmov	r4, r5, d0
 8010bf8:	49b7      	ldr	r1, [pc, #732]	; (8010ed8 <__ieee754_acos+0x2e8>)
 8010bfa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010bfe:	428b      	cmp	r3, r1
 8010c00:	dd1b      	ble.n	8010c3a <__ieee754_acos+0x4a>
 8010c02:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010c06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010c0a:	4323      	orrs	r3, r4
 8010c0c:	d106      	bne.n	8010c1c <__ieee754_acos+0x2c>
 8010c0e:	2d00      	cmp	r5, #0
 8010c10:	f300 8211 	bgt.w	8011036 <__ieee754_acos+0x446>
 8010c14:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8010e70 <__ieee754_acos+0x280>
 8010c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c1c:	ee10 2a10 	vmov	r2, s0
 8010c20:	462b      	mov	r3, r5
 8010c22:	ee10 0a10 	vmov	r0, s0
 8010c26:	4629      	mov	r1, r5
 8010c28:	f7ef fb48 	bl	80002bc <__aeabi_dsub>
 8010c2c:	4602      	mov	r2, r0
 8010c2e:	460b      	mov	r3, r1
 8010c30:	f7ef fe26 	bl	8000880 <__aeabi_ddiv>
 8010c34:	ec41 0b10 	vmov	d0, r0, r1
 8010c38:	e7ee      	b.n	8010c18 <__ieee754_acos+0x28>
 8010c3a:	49a8      	ldr	r1, [pc, #672]	; (8010edc <__ieee754_acos+0x2ec>)
 8010c3c:	428b      	cmp	r3, r1
 8010c3e:	f300 8087 	bgt.w	8010d50 <__ieee754_acos+0x160>
 8010c42:	4aa7      	ldr	r2, [pc, #668]	; (8010ee0 <__ieee754_acos+0x2f0>)
 8010c44:	4293      	cmp	r3, r2
 8010c46:	f340 81f9 	ble.w	801103c <__ieee754_acos+0x44c>
 8010c4a:	ee10 2a10 	vmov	r2, s0
 8010c4e:	ee10 0a10 	vmov	r0, s0
 8010c52:	462b      	mov	r3, r5
 8010c54:	4629      	mov	r1, r5
 8010c56:	f7ef fce9 	bl	800062c <__aeabi_dmul>
 8010c5a:	a387      	add	r3, pc, #540	; (adr r3, 8010e78 <__ieee754_acos+0x288>)
 8010c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c60:	4606      	mov	r6, r0
 8010c62:	460f      	mov	r7, r1
 8010c64:	f7ef fce2 	bl	800062c <__aeabi_dmul>
 8010c68:	a385      	add	r3, pc, #532	; (adr r3, 8010e80 <__ieee754_acos+0x290>)
 8010c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6e:	f7ef fb27 	bl	80002c0 <__adddf3>
 8010c72:	4632      	mov	r2, r6
 8010c74:	463b      	mov	r3, r7
 8010c76:	f7ef fcd9 	bl	800062c <__aeabi_dmul>
 8010c7a:	a383      	add	r3, pc, #524	; (adr r3, 8010e88 <__ieee754_acos+0x298>)
 8010c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c80:	f7ef fb1c 	bl	80002bc <__aeabi_dsub>
 8010c84:	4632      	mov	r2, r6
 8010c86:	463b      	mov	r3, r7
 8010c88:	f7ef fcd0 	bl	800062c <__aeabi_dmul>
 8010c8c:	a380      	add	r3, pc, #512	; (adr r3, 8010e90 <__ieee754_acos+0x2a0>)
 8010c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c92:	f7ef fb15 	bl	80002c0 <__adddf3>
 8010c96:	4632      	mov	r2, r6
 8010c98:	463b      	mov	r3, r7
 8010c9a:	f7ef fcc7 	bl	800062c <__aeabi_dmul>
 8010c9e:	a37e      	add	r3, pc, #504	; (adr r3, 8010e98 <__ieee754_acos+0x2a8>)
 8010ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca4:	f7ef fb0a 	bl	80002bc <__aeabi_dsub>
 8010ca8:	4632      	mov	r2, r6
 8010caa:	463b      	mov	r3, r7
 8010cac:	f7ef fcbe 	bl	800062c <__aeabi_dmul>
 8010cb0:	a37b      	add	r3, pc, #492	; (adr r3, 8010ea0 <__ieee754_acos+0x2b0>)
 8010cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb6:	f7ef fb03 	bl	80002c0 <__adddf3>
 8010cba:	4632      	mov	r2, r6
 8010cbc:	463b      	mov	r3, r7
 8010cbe:	f7ef fcb5 	bl	800062c <__aeabi_dmul>
 8010cc2:	a379      	add	r3, pc, #484	; (adr r3, 8010ea8 <__ieee754_acos+0x2b8>)
 8010cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc8:	4680      	mov	r8, r0
 8010cca:	4689      	mov	r9, r1
 8010ccc:	4630      	mov	r0, r6
 8010cce:	4639      	mov	r1, r7
 8010cd0:	f7ef fcac 	bl	800062c <__aeabi_dmul>
 8010cd4:	a376      	add	r3, pc, #472	; (adr r3, 8010eb0 <__ieee754_acos+0x2c0>)
 8010cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cda:	f7ef faef 	bl	80002bc <__aeabi_dsub>
 8010cde:	4632      	mov	r2, r6
 8010ce0:	463b      	mov	r3, r7
 8010ce2:	f7ef fca3 	bl	800062c <__aeabi_dmul>
 8010ce6:	a374      	add	r3, pc, #464	; (adr r3, 8010eb8 <__ieee754_acos+0x2c8>)
 8010ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cec:	f7ef fae8 	bl	80002c0 <__adddf3>
 8010cf0:	4632      	mov	r2, r6
 8010cf2:	463b      	mov	r3, r7
 8010cf4:	f7ef fc9a 	bl	800062c <__aeabi_dmul>
 8010cf8:	a371      	add	r3, pc, #452	; (adr r3, 8010ec0 <__ieee754_acos+0x2d0>)
 8010cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfe:	f7ef fadd 	bl	80002bc <__aeabi_dsub>
 8010d02:	4632      	mov	r2, r6
 8010d04:	463b      	mov	r3, r7
 8010d06:	f7ef fc91 	bl	800062c <__aeabi_dmul>
 8010d0a:	4b76      	ldr	r3, [pc, #472]	; (8010ee4 <__ieee754_acos+0x2f4>)
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	f7ef fad7 	bl	80002c0 <__adddf3>
 8010d12:	4602      	mov	r2, r0
 8010d14:	460b      	mov	r3, r1
 8010d16:	4640      	mov	r0, r8
 8010d18:	4649      	mov	r1, r9
 8010d1a:	f7ef fdb1 	bl	8000880 <__aeabi_ddiv>
 8010d1e:	4622      	mov	r2, r4
 8010d20:	462b      	mov	r3, r5
 8010d22:	f7ef fc83 	bl	800062c <__aeabi_dmul>
 8010d26:	4602      	mov	r2, r0
 8010d28:	460b      	mov	r3, r1
 8010d2a:	a167      	add	r1, pc, #412	; (adr r1, 8010ec8 <__ieee754_acos+0x2d8>)
 8010d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d30:	f7ef fac4 	bl	80002bc <__aeabi_dsub>
 8010d34:	4602      	mov	r2, r0
 8010d36:	460b      	mov	r3, r1
 8010d38:	4620      	mov	r0, r4
 8010d3a:	4629      	mov	r1, r5
 8010d3c:	f7ef fabe 	bl	80002bc <__aeabi_dsub>
 8010d40:	4602      	mov	r2, r0
 8010d42:	460b      	mov	r3, r1
 8010d44:	a162      	add	r1, pc, #392	; (adr r1, 8010ed0 <__ieee754_acos+0x2e0>)
 8010d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d4a:	f7ef fab7 	bl	80002bc <__aeabi_dsub>
 8010d4e:	e771      	b.n	8010c34 <__ieee754_acos+0x44>
 8010d50:	2d00      	cmp	r5, #0
 8010d52:	f280 80cb 	bge.w	8010eec <__ieee754_acos+0x2fc>
 8010d56:	ee10 0a10 	vmov	r0, s0
 8010d5a:	4b62      	ldr	r3, [pc, #392]	; (8010ee4 <__ieee754_acos+0x2f4>)
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	4629      	mov	r1, r5
 8010d60:	f7ef faae 	bl	80002c0 <__adddf3>
 8010d64:	4b60      	ldr	r3, [pc, #384]	; (8010ee8 <__ieee754_acos+0x2f8>)
 8010d66:	2200      	movs	r2, #0
 8010d68:	f7ef fc60 	bl	800062c <__aeabi_dmul>
 8010d6c:	a342      	add	r3, pc, #264	; (adr r3, 8010e78 <__ieee754_acos+0x288>)
 8010d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d72:	4604      	mov	r4, r0
 8010d74:	460d      	mov	r5, r1
 8010d76:	f7ef fc59 	bl	800062c <__aeabi_dmul>
 8010d7a:	a341      	add	r3, pc, #260	; (adr r3, 8010e80 <__ieee754_acos+0x290>)
 8010d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d80:	f7ef fa9e 	bl	80002c0 <__adddf3>
 8010d84:	4622      	mov	r2, r4
 8010d86:	462b      	mov	r3, r5
 8010d88:	f7ef fc50 	bl	800062c <__aeabi_dmul>
 8010d8c:	a33e      	add	r3, pc, #248	; (adr r3, 8010e88 <__ieee754_acos+0x298>)
 8010d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d92:	f7ef fa93 	bl	80002bc <__aeabi_dsub>
 8010d96:	4622      	mov	r2, r4
 8010d98:	462b      	mov	r3, r5
 8010d9a:	f7ef fc47 	bl	800062c <__aeabi_dmul>
 8010d9e:	a33c      	add	r3, pc, #240	; (adr r3, 8010e90 <__ieee754_acos+0x2a0>)
 8010da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da4:	f7ef fa8c 	bl	80002c0 <__adddf3>
 8010da8:	4622      	mov	r2, r4
 8010daa:	462b      	mov	r3, r5
 8010dac:	f7ef fc3e 	bl	800062c <__aeabi_dmul>
 8010db0:	a339      	add	r3, pc, #228	; (adr r3, 8010e98 <__ieee754_acos+0x2a8>)
 8010db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db6:	f7ef fa81 	bl	80002bc <__aeabi_dsub>
 8010dba:	4622      	mov	r2, r4
 8010dbc:	462b      	mov	r3, r5
 8010dbe:	f7ef fc35 	bl	800062c <__aeabi_dmul>
 8010dc2:	a337      	add	r3, pc, #220	; (adr r3, 8010ea0 <__ieee754_acos+0x2b0>)
 8010dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc8:	f7ef fa7a 	bl	80002c0 <__adddf3>
 8010dcc:	4622      	mov	r2, r4
 8010dce:	462b      	mov	r3, r5
 8010dd0:	f7ef fc2c 	bl	800062c <__aeabi_dmul>
 8010dd4:	ec45 4b10 	vmov	d0, r4, r5
 8010dd8:	4680      	mov	r8, r0
 8010dda:	4689      	mov	r9, r1
 8010ddc:	f001 f8a4 	bl	8011f28 <__ieee754_sqrt>
 8010de0:	a331      	add	r3, pc, #196	; (adr r3, 8010ea8 <__ieee754_acos+0x2b8>)
 8010de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de6:	4620      	mov	r0, r4
 8010de8:	4629      	mov	r1, r5
 8010dea:	ec57 6b10 	vmov	r6, r7, d0
 8010dee:	f7ef fc1d 	bl	800062c <__aeabi_dmul>
 8010df2:	a32f      	add	r3, pc, #188	; (adr r3, 8010eb0 <__ieee754_acos+0x2c0>)
 8010df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df8:	f7ef fa60 	bl	80002bc <__aeabi_dsub>
 8010dfc:	4622      	mov	r2, r4
 8010dfe:	462b      	mov	r3, r5
 8010e00:	f7ef fc14 	bl	800062c <__aeabi_dmul>
 8010e04:	a32c      	add	r3, pc, #176	; (adr r3, 8010eb8 <__ieee754_acos+0x2c8>)
 8010e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0a:	f7ef fa59 	bl	80002c0 <__adddf3>
 8010e0e:	4622      	mov	r2, r4
 8010e10:	462b      	mov	r3, r5
 8010e12:	f7ef fc0b 	bl	800062c <__aeabi_dmul>
 8010e16:	a32a      	add	r3, pc, #168	; (adr r3, 8010ec0 <__ieee754_acos+0x2d0>)
 8010e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1c:	f7ef fa4e 	bl	80002bc <__aeabi_dsub>
 8010e20:	4622      	mov	r2, r4
 8010e22:	462b      	mov	r3, r5
 8010e24:	f7ef fc02 	bl	800062c <__aeabi_dmul>
 8010e28:	4b2e      	ldr	r3, [pc, #184]	; (8010ee4 <__ieee754_acos+0x2f4>)
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f7ef fa48 	bl	80002c0 <__adddf3>
 8010e30:	4602      	mov	r2, r0
 8010e32:	460b      	mov	r3, r1
 8010e34:	4640      	mov	r0, r8
 8010e36:	4649      	mov	r1, r9
 8010e38:	f7ef fd22 	bl	8000880 <__aeabi_ddiv>
 8010e3c:	4632      	mov	r2, r6
 8010e3e:	463b      	mov	r3, r7
 8010e40:	f7ef fbf4 	bl	800062c <__aeabi_dmul>
 8010e44:	a320      	add	r3, pc, #128	; (adr r3, 8010ec8 <__ieee754_acos+0x2d8>)
 8010e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4a:	f7ef fa37 	bl	80002bc <__aeabi_dsub>
 8010e4e:	4632      	mov	r2, r6
 8010e50:	463b      	mov	r3, r7
 8010e52:	f7ef fa35 	bl	80002c0 <__adddf3>
 8010e56:	4602      	mov	r2, r0
 8010e58:	460b      	mov	r3, r1
 8010e5a:	f7ef fa31 	bl	80002c0 <__adddf3>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	460b      	mov	r3, r1
 8010e62:	a103      	add	r1, pc, #12	; (adr r1, 8010e70 <__ieee754_acos+0x280>)
 8010e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e68:	e76f      	b.n	8010d4a <__ieee754_acos+0x15a>
 8010e6a:	bf00      	nop
 8010e6c:	f3af 8000 	nop.w
 8010e70:	54442d18 	.word	0x54442d18
 8010e74:	400921fb 	.word	0x400921fb
 8010e78:	0dfdf709 	.word	0x0dfdf709
 8010e7c:	3f023de1 	.word	0x3f023de1
 8010e80:	7501b288 	.word	0x7501b288
 8010e84:	3f49efe0 	.word	0x3f49efe0
 8010e88:	b5688f3b 	.word	0xb5688f3b
 8010e8c:	3fa48228 	.word	0x3fa48228
 8010e90:	0e884455 	.word	0x0e884455
 8010e94:	3fc9c155 	.word	0x3fc9c155
 8010e98:	03eb6f7d 	.word	0x03eb6f7d
 8010e9c:	3fd4d612 	.word	0x3fd4d612
 8010ea0:	55555555 	.word	0x55555555
 8010ea4:	3fc55555 	.word	0x3fc55555
 8010ea8:	b12e9282 	.word	0xb12e9282
 8010eac:	3fb3b8c5 	.word	0x3fb3b8c5
 8010eb0:	1b8d0159 	.word	0x1b8d0159
 8010eb4:	3fe6066c 	.word	0x3fe6066c
 8010eb8:	9c598ac8 	.word	0x9c598ac8
 8010ebc:	40002ae5 	.word	0x40002ae5
 8010ec0:	1c8a2d4b 	.word	0x1c8a2d4b
 8010ec4:	40033a27 	.word	0x40033a27
 8010ec8:	33145c07 	.word	0x33145c07
 8010ecc:	3c91a626 	.word	0x3c91a626
 8010ed0:	54442d18 	.word	0x54442d18
 8010ed4:	3ff921fb 	.word	0x3ff921fb
 8010ed8:	3fefffff 	.word	0x3fefffff
 8010edc:	3fdfffff 	.word	0x3fdfffff
 8010ee0:	3c600000 	.word	0x3c600000
 8010ee4:	3ff00000 	.word	0x3ff00000
 8010ee8:	3fe00000 	.word	0x3fe00000
 8010eec:	ee10 2a10 	vmov	r2, s0
 8010ef0:	462b      	mov	r3, r5
 8010ef2:	496d      	ldr	r1, [pc, #436]	; (80110a8 <__ieee754_acos+0x4b8>)
 8010ef4:	2000      	movs	r0, #0
 8010ef6:	f7ef f9e1 	bl	80002bc <__aeabi_dsub>
 8010efa:	4b6c      	ldr	r3, [pc, #432]	; (80110ac <__ieee754_acos+0x4bc>)
 8010efc:	2200      	movs	r2, #0
 8010efe:	f7ef fb95 	bl	800062c <__aeabi_dmul>
 8010f02:	4604      	mov	r4, r0
 8010f04:	460d      	mov	r5, r1
 8010f06:	ec45 4b10 	vmov	d0, r4, r5
 8010f0a:	f001 f80d 	bl	8011f28 <__ieee754_sqrt>
 8010f0e:	a34e      	add	r3, pc, #312	; (adr r3, 8011048 <__ieee754_acos+0x458>)
 8010f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f14:	4620      	mov	r0, r4
 8010f16:	4629      	mov	r1, r5
 8010f18:	ec59 8b10 	vmov	r8, r9, d0
 8010f1c:	f7ef fb86 	bl	800062c <__aeabi_dmul>
 8010f20:	a34b      	add	r3, pc, #300	; (adr r3, 8011050 <__ieee754_acos+0x460>)
 8010f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f26:	f7ef f9cb 	bl	80002c0 <__adddf3>
 8010f2a:	4622      	mov	r2, r4
 8010f2c:	462b      	mov	r3, r5
 8010f2e:	f7ef fb7d 	bl	800062c <__aeabi_dmul>
 8010f32:	a349      	add	r3, pc, #292	; (adr r3, 8011058 <__ieee754_acos+0x468>)
 8010f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f38:	f7ef f9c0 	bl	80002bc <__aeabi_dsub>
 8010f3c:	4622      	mov	r2, r4
 8010f3e:	462b      	mov	r3, r5
 8010f40:	f7ef fb74 	bl	800062c <__aeabi_dmul>
 8010f44:	a346      	add	r3, pc, #280	; (adr r3, 8011060 <__ieee754_acos+0x470>)
 8010f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4a:	f7ef f9b9 	bl	80002c0 <__adddf3>
 8010f4e:	4622      	mov	r2, r4
 8010f50:	462b      	mov	r3, r5
 8010f52:	f7ef fb6b 	bl	800062c <__aeabi_dmul>
 8010f56:	a344      	add	r3, pc, #272	; (adr r3, 8011068 <__ieee754_acos+0x478>)
 8010f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5c:	f7ef f9ae 	bl	80002bc <__aeabi_dsub>
 8010f60:	4622      	mov	r2, r4
 8010f62:	462b      	mov	r3, r5
 8010f64:	f7ef fb62 	bl	800062c <__aeabi_dmul>
 8010f68:	a341      	add	r3, pc, #260	; (adr r3, 8011070 <__ieee754_acos+0x480>)
 8010f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f6e:	f7ef f9a7 	bl	80002c0 <__adddf3>
 8010f72:	4622      	mov	r2, r4
 8010f74:	462b      	mov	r3, r5
 8010f76:	f7ef fb59 	bl	800062c <__aeabi_dmul>
 8010f7a:	a33f      	add	r3, pc, #252	; (adr r3, 8011078 <__ieee754_acos+0x488>)
 8010f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f80:	4682      	mov	sl, r0
 8010f82:	468b      	mov	fp, r1
 8010f84:	4620      	mov	r0, r4
 8010f86:	4629      	mov	r1, r5
 8010f88:	f7ef fb50 	bl	800062c <__aeabi_dmul>
 8010f8c:	a33c      	add	r3, pc, #240	; (adr r3, 8011080 <__ieee754_acos+0x490>)
 8010f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f92:	f7ef f993 	bl	80002bc <__aeabi_dsub>
 8010f96:	4622      	mov	r2, r4
 8010f98:	462b      	mov	r3, r5
 8010f9a:	f7ef fb47 	bl	800062c <__aeabi_dmul>
 8010f9e:	a33a      	add	r3, pc, #232	; (adr r3, 8011088 <__ieee754_acos+0x498>)
 8010fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa4:	f7ef f98c 	bl	80002c0 <__adddf3>
 8010fa8:	4622      	mov	r2, r4
 8010faa:	462b      	mov	r3, r5
 8010fac:	f7ef fb3e 	bl	800062c <__aeabi_dmul>
 8010fb0:	a337      	add	r3, pc, #220	; (adr r3, 8011090 <__ieee754_acos+0x4a0>)
 8010fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb6:	f7ef f981 	bl	80002bc <__aeabi_dsub>
 8010fba:	4622      	mov	r2, r4
 8010fbc:	462b      	mov	r3, r5
 8010fbe:	f7ef fb35 	bl	800062c <__aeabi_dmul>
 8010fc2:	4b39      	ldr	r3, [pc, #228]	; (80110a8 <__ieee754_acos+0x4b8>)
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	f7ef f97b 	bl	80002c0 <__adddf3>
 8010fca:	4602      	mov	r2, r0
 8010fcc:	460b      	mov	r3, r1
 8010fce:	4650      	mov	r0, sl
 8010fd0:	4659      	mov	r1, fp
 8010fd2:	f7ef fc55 	bl	8000880 <__aeabi_ddiv>
 8010fd6:	4642      	mov	r2, r8
 8010fd8:	464b      	mov	r3, r9
 8010fda:	f7ef fb27 	bl	800062c <__aeabi_dmul>
 8010fde:	2600      	movs	r6, #0
 8010fe0:	4682      	mov	sl, r0
 8010fe2:	468b      	mov	fp, r1
 8010fe4:	4632      	mov	r2, r6
 8010fe6:	464b      	mov	r3, r9
 8010fe8:	4630      	mov	r0, r6
 8010fea:	4649      	mov	r1, r9
 8010fec:	f7ef fb1e 	bl	800062c <__aeabi_dmul>
 8010ff0:	4602      	mov	r2, r0
 8010ff2:	460b      	mov	r3, r1
 8010ff4:	4620      	mov	r0, r4
 8010ff6:	4629      	mov	r1, r5
 8010ff8:	f7ef f960 	bl	80002bc <__aeabi_dsub>
 8010ffc:	4632      	mov	r2, r6
 8010ffe:	4604      	mov	r4, r0
 8011000:	460d      	mov	r5, r1
 8011002:	464b      	mov	r3, r9
 8011004:	4640      	mov	r0, r8
 8011006:	4649      	mov	r1, r9
 8011008:	f7ef f95a 	bl	80002c0 <__adddf3>
 801100c:	4602      	mov	r2, r0
 801100e:	460b      	mov	r3, r1
 8011010:	4620      	mov	r0, r4
 8011012:	4629      	mov	r1, r5
 8011014:	f7ef fc34 	bl	8000880 <__aeabi_ddiv>
 8011018:	4602      	mov	r2, r0
 801101a:	460b      	mov	r3, r1
 801101c:	4650      	mov	r0, sl
 801101e:	4659      	mov	r1, fp
 8011020:	f7ef f94e 	bl	80002c0 <__adddf3>
 8011024:	4632      	mov	r2, r6
 8011026:	464b      	mov	r3, r9
 8011028:	f7ef f94a 	bl	80002c0 <__adddf3>
 801102c:	4602      	mov	r2, r0
 801102e:	460b      	mov	r3, r1
 8011030:	f7ef f946 	bl	80002c0 <__adddf3>
 8011034:	e5fe      	b.n	8010c34 <__ieee754_acos+0x44>
 8011036:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011098 <__ieee754_acos+0x4a8>
 801103a:	e5ed      	b.n	8010c18 <__ieee754_acos+0x28>
 801103c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80110a0 <__ieee754_acos+0x4b0>
 8011040:	e5ea      	b.n	8010c18 <__ieee754_acos+0x28>
 8011042:	bf00      	nop
 8011044:	f3af 8000 	nop.w
 8011048:	0dfdf709 	.word	0x0dfdf709
 801104c:	3f023de1 	.word	0x3f023de1
 8011050:	7501b288 	.word	0x7501b288
 8011054:	3f49efe0 	.word	0x3f49efe0
 8011058:	b5688f3b 	.word	0xb5688f3b
 801105c:	3fa48228 	.word	0x3fa48228
 8011060:	0e884455 	.word	0x0e884455
 8011064:	3fc9c155 	.word	0x3fc9c155
 8011068:	03eb6f7d 	.word	0x03eb6f7d
 801106c:	3fd4d612 	.word	0x3fd4d612
 8011070:	55555555 	.word	0x55555555
 8011074:	3fc55555 	.word	0x3fc55555
 8011078:	b12e9282 	.word	0xb12e9282
 801107c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011080:	1b8d0159 	.word	0x1b8d0159
 8011084:	3fe6066c 	.word	0x3fe6066c
 8011088:	9c598ac8 	.word	0x9c598ac8
 801108c:	40002ae5 	.word	0x40002ae5
 8011090:	1c8a2d4b 	.word	0x1c8a2d4b
 8011094:	40033a27 	.word	0x40033a27
	...
 80110a0:	54442d18 	.word	0x54442d18
 80110a4:	3ff921fb 	.word	0x3ff921fb
 80110a8:	3ff00000 	.word	0x3ff00000
 80110ac:	3fe00000 	.word	0x3fe00000

080110b0 <__ieee754_pow>:
 80110b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b4:	ed2d 8b06 	vpush	{d8-d10}
 80110b8:	b089      	sub	sp, #36	; 0x24
 80110ba:	ed8d 1b00 	vstr	d1, [sp]
 80110be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80110c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80110c6:	ea58 0102 	orrs.w	r1, r8, r2
 80110ca:	ec57 6b10 	vmov	r6, r7, d0
 80110ce:	d115      	bne.n	80110fc <__ieee754_pow+0x4c>
 80110d0:	19b3      	adds	r3, r6, r6
 80110d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80110d6:	4152      	adcs	r2, r2
 80110d8:	4299      	cmp	r1, r3
 80110da:	4b89      	ldr	r3, [pc, #548]	; (8011300 <__ieee754_pow+0x250>)
 80110dc:	4193      	sbcs	r3, r2
 80110de:	f080 84d2 	bcs.w	8011a86 <__ieee754_pow+0x9d6>
 80110e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110e6:	4630      	mov	r0, r6
 80110e8:	4639      	mov	r1, r7
 80110ea:	f7ef f8e9 	bl	80002c0 <__adddf3>
 80110ee:	ec41 0b10 	vmov	d0, r0, r1
 80110f2:	b009      	add	sp, #36	; 0x24
 80110f4:	ecbd 8b06 	vpop	{d8-d10}
 80110f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110fc:	4b81      	ldr	r3, [pc, #516]	; (8011304 <__ieee754_pow+0x254>)
 80110fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011102:	429c      	cmp	r4, r3
 8011104:	ee10 aa10 	vmov	sl, s0
 8011108:	463d      	mov	r5, r7
 801110a:	dc06      	bgt.n	801111a <__ieee754_pow+0x6a>
 801110c:	d101      	bne.n	8011112 <__ieee754_pow+0x62>
 801110e:	2e00      	cmp	r6, #0
 8011110:	d1e7      	bne.n	80110e2 <__ieee754_pow+0x32>
 8011112:	4598      	cmp	r8, r3
 8011114:	dc01      	bgt.n	801111a <__ieee754_pow+0x6a>
 8011116:	d10f      	bne.n	8011138 <__ieee754_pow+0x88>
 8011118:	b172      	cbz	r2, 8011138 <__ieee754_pow+0x88>
 801111a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801111e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011122:	ea55 050a 	orrs.w	r5, r5, sl
 8011126:	d1dc      	bne.n	80110e2 <__ieee754_pow+0x32>
 8011128:	e9dd 3200 	ldrd	r3, r2, [sp]
 801112c:	18db      	adds	r3, r3, r3
 801112e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011132:	4152      	adcs	r2, r2
 8011134:	429d      	cmp	r5, r3
 8011136:	e7d0      	b.n	80110da <__ieee754_pow+0x2a>
 8011138:	2d00      	cmp	r5, #0
 801113a:	da3b      	bge.n	80111b4 <__ieee754_pow+0x104>
 801113c:	4b72      	ldr	r3, [pc, #456]	; (8011308 <__ieee754_pow+0x258>)
 801113e:	4598      	cmp	r8, r3
 8011140:	dc51      	bgt.n	80111e6 <__ieee754_pow+0x136>
 8011142:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011146:	4598      	cmp	r8, r3
 8011148:	f340 84ac 	ble.w	8011aa4 <__ieee754_pow+0x9f4>
 801114c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011150:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011154:	2b14      	cmp	r3, #20
 8011156:	dd0f      	ble.n	8011178 <__ieee754_pow+0xc8>
 8011158:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801115c:	fa22 f103 	lsr.w	r1, r2, r3
 8011160:	fa01 f303 	lsl.w	r3, r1, r3
 8011164:	4293      	cmp	r3, r2
 8011166:	f040 849d 	bne.w	8011aa4 <__ieee754_pow+0x9f4>
 801116a:	f001 0101 	and.w	r1, r1, #1
 801116e:	f1c1 0302 	rsb	r3, r1, #2
 8011172:	9304      	str	r3, [sp, #16]
 8011174:	b182      	cbz	r2, 8011198 <__ieee754_pow+0xe8>
 8011176:	e05f      	b.n	8011238 <__ieee754_pow+0x188>
 8011178:	2a00      	cmp	r2, #0
 801117a:	d15b      	bne.n	8011234 <__ieee754_pow+0x184>
 801117c:	f1c3 0314 	rsb	r3, r3, #20
 8011180:	fa48 f103 	asr.w	r1, r8, r3
 8011184:	fa01 f303 	lsl.w	r3, r1, r3
 8011188:	4543      	cmp	r3, r8
 801118a:	f040 8488 	bne.w	8011a9e <__ieee754_pow+0x9ee>
 801118e:	f001 0101 	and.w	r1, r1, #1
 8011192:	f1c1 0302 	rsb	r3, r1, #2
 8011196:	9304      	str	r3, [sp, #16]
 8011198:	4b5c      	ldr	r3, [pc, #368]	; (801130c <__ieee754_pow+0x25c>)
 801119a:	4598      	cmp	r8, r3
 801119c:	d132      	bne.n	8011204 <__ieee754_pow+0x154>
 801119e:	f1b9 0f00 	cmp.w	r9, #0
 80111a2:	f280 8478 	bge.w	8011a96 <__ieee754_pow+0x9e6>
 80111a6:	4959      	ldr	r1, [pc, #356]	; (801130c <__ieee754_pow+0x25c>)
 80111a8:	4632      	mov	r2, r6
 80111aa:	463b      	mov	r3, r7
 80111ac:	2000      	movs	r0, #0
 80111ae:	f7ef fb67 	bl	8000880 <__aeabi_ddiv>
 80111b2:	e79c      	b.n	80110ee <__ieee754_pow+0x3e>
 80111b4:	2300      	movs	r3, #0
 80111b6:	9304      	str	r3, [sp, #16]
 80111b8:	2a00      	cmp	r2, #0
 80111ba:	d13d      	bne.n	8011238 <__ieee754_pow+0x188>
 80111bc:	4b51      	ldr	r3, [pc, #324]	; (8011304 <__ieee754_pow+0x254>)
 80111be:	4598      	cmp	r8, r3
 80111c0:	d1ea      	bne.n	8011198 <__ieee754_pow+0xe8>
 80111c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80111c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80111ca:	ea53 030a 	orrs.w	r3, r3, sl
 80111ce:	f000 845a 	beq.w	8011a86 <__ieee754_pow+0x9d6>
 80111d2:	4b4f      	ldr	r3, [pc, #316]	; (8011310 <__ieee754_pow+0x260>)
 80111d4:	429c      	cmp	r4, r3
 80111d6:	dd08      	ble.n	80111ea <__ieee754_pow+0x13a>
 80111d8:	f1b9 0f00 	cmp.w	r9, #0
 80111dc:	f2c0 8457 	blt.w	8011a8e <__ieee754_pow+0x9de>
 80111e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111e4:	e783      	b.n	80110ee <__ieee754_pow+0x3e>
 80111e6:	2302      	movs	r3, #2
 80111e8:	e7e5      	b.n	80111b6 <__ieee754_pow+0x106>
 80111ea:	f1b9 0f00 	cmp.w	r9, #0
 80111ee:	f04f 0000 	mov.w	r0, #0
 80111f2:	f04f 0100 	mov.w	r1, #0
 80111f6:	f6bf af7a 	bge.w	80110ee <__ieee754_pow+0x3e>
 80111fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80111fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011202:	e774      	b.n	80110ee <__ieee754_pow+0x3e>
 8011204:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011208:	d106      	bne.n	8011218 <__ieee754_pow+0x168>
 801120a:	4632      	mov	r2, r6
 801120c:	463b      	mov	r3, r7
 801120e:	4630      	mov	r0, r6
 8011210:	4639      	mov	r1, r7
 8011212:	f7ef fa0b 	bl	800062c <__aeabi_dmul>
 8011216:	e76a      	b.n	80110ee <__ieee754_pow+0x3e>
 8011218:	4b3e      	ldr	r3, [pc, #248]	; (8011314 <__ieee754_pow+0x264>)
 801121a:	4599      	cmp	r9, r3
 801121c:	d10c      	bne.n	8011238 <__ieee754_pow+0x188>
 801121e:	2d00      	cmp	r5, #0
 8011220:	db0a      	blt.n	8011238 <__ieee754_pow+0x188>
 8011222:	ec47 6b10 	vmov	d0, r6, r7
 8011226:	b009      	add	sp, #36	; 0x24
 8011228:	ecbd 8b06 	vpop	{d8-d10}
 801122c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011230:	f000 be7a 	b.w	8011f28 <__ieee754_sqrt>
 8011234:	2300      	movs	r3, #0
 8011236:	9304      	str	r3, [sp, #16]
 8011238:	ec47 6b10 	vmov	d0, r6, r7
 801123c:	f001 fe3a 	bl	8012eb4 <fabs>
 8011240:	ec51 0b10 	vmov	r0, r1, d0
 8011244:	f1ba 0f00 	cmp.w	sl, #0
 8011248:	d129      	bne.n	801129e <__ieee754_pow+0x1ee>
 801124a:	b124      	cbz	r4, 8011256 <__ieee754_pow+0x1a6>
 801124c:	4b2f      	ldr	r3, [pc, #188]	; (801130c <__ieee754_pow+0x25c>)
 801124e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011252:	429a      	cmp	r2, r3
 8011254:	d123      	bne.n	801129e <__ieee754_pow+0x1ee>
 8011256:	f1b9 0f00 	cmp.w	r9, #0
 801125a:	da05      	bge.n	8011268 <__ieee754_pow+0x1b8>
 801125c:	4602      	mov	r2, r0
 801125e:	460b      	mov	r3, r1
 8011260:	2000      	movs	r0, #0
 8011262:	492a      	ldr	r1, [pc, #168]	; (801130c <__ieee754_pow+0x25c>)
 8011264:	f7ef fb0c 	bl	8000880 <__aeabi_ddiv>
 8011268:	2d00      	cmp	r5, #0
 801126a:	f6bf af40 	bge.w	80110ee <__ieee754_pow+0x3e>
 801126e:	9b04      	ldr	r3, [sp, #16]
 8011270:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011274:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011278:	4323      	orrs	r3, r4
 801127a:	d108      	bne.n	801128e <__ieee754_pow+0x1de>
 801127c:	4602      	mov	r2, r0
 801127e:	460b      	mov	r3, r1
 8011280:	4610      	mov	r0, r2
 8011282:	4619      	mov	r1, r3
 8011284:	f7ef f81a 	bl	80002bc <__aeabi_dsub>
 8011288:	4602      	mov	r2, r0
 801128a:	460b      	mov	r3, r1
 801128c:	e78f      	b.n	80111ae <__ieee754_pow+0xfe>
 801128e:	9b04      	ldr	r3, [sp, #16]
 8011290:	2b01      	cmp	r3, #1
 8011292:	f47f af2c 	bne.w	80110ee <__ieee754_pow+0x3e>
 8011296:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801129a:	4619      	mov	r1, r3
 801129c:	e727      	b.n	80110ee <__ieee754_pow+0x3e>
 801129e:	0feb      	lsrs	r3, r5, #31
 80112a0:	3b01      	subs	r3, #1
 80112a2:	9306      	str	r3, [sp, #24]
 80112a4:	9a06      	ldr	r2, [sp, #24]
 80112a6:	9b04      	ldr	r3, [sp, #16]
 80112a8:	4313      	orrs	r3, r2
 80112aa:	d102      	bne.n	80112b2 <__ieee754_pow+0x202>
 80112ac:	4632      	mov	r2, r6
 80112ae:	463b      	mov	r3, r7
 80112b0:	e7e6      	b.n	8011280 <__ieee754_pow+0x1d0>
 80112b2:	4b19      	ldr	r3, [pc, #100]	; (8011318 <__ieee754_pow+0x268>)
 80112b4:	4598      	cmp	r8, r3
 80112b6:	f340 80fb 	ble.w	80114b0 <__ieee754_pow+0x400>
 80112ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80112be:	4598      	cmp	r8, r3
 80112c0:	4b13      	ldr	r3, [pc, #76]	; (8011310 <__ieee754_pow+0x260>)
 80112c2:	dd0c      	ble.n	80112de <__ieee754_pow+0x22e>
 80112c4:	429c      	cmp	r4, r3
 80112c6:	dc0f      	bgt.n	80112e8 <__ieee754_pow+0x238>
 80112c8:	f1b9 0f00 	cmp.w	r9, #0
 80112cc:	da0f      	bge.n	80112ee <__ieee754_pow+0x23e>
 80112ce:	2000      	movs	r0, #0
 80112d0:	b009      	add	sp, #36	; 0x24
 80112d2:	ecbd 8b06 	vpop	{d8-d10}
 80112d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112da:	f001 bde2 	b.w	8012ea2 <__math_oflow>
 80112de:	429c      	cmp	r4, r3
 80112e0:	dbf2      	blt.n	80112c8 <__ieee754_pow+0x218>
 80112e2:	4b0a      	ldr	r3, [pc, #40]	; (801130c <__ieee754_pow+0x25c>)
 80112e4:	429c      	cmp	r4, r3
 80112e6:	dd19      	ble.n	801131c <__ieee754_pow+0x26c>
 80112e8:	f1b9 0f00 	cmp.w	r9, #0
 80112ec:	dcef      	bgt.n	80112ce <__ieee754_pow+0x21e>
 80112ee:	2000      	movs	r0, #0
 80112f0:	b009      	add	sp, #36	; 0x24
 80112f2:	ecbd 8b06 	vpop	{d8-d10}
 80112f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112fa:	f001 bdc9 	b.w	8012e90 <__math_uflow>
 80112fe:	bf00      	nop
 8011300:	fff00000 	.word	0xfff00000
 8011304:	7ff00000 	.word	0x7ff00000
 8011308:	433fffff 	.word	0x433fffff
 801130c:	3ff00000 	.word	0x3ff00000
 8011310:	3fefffff 	.word	0x3fefffff
 8011314:	3fe00000 	.word	0x3fe00000
 8011318:	41e00000 	.word	0x41e00000
 801131c:	4b60      	ldr	r3, [pc, #384]	; (80114a0 <__ieee754_pow+0x3f0>)
 801131e:	2200      	movs	r2, #0
 8011320:	f7ee ffcc 	bl	80002bc <__aeabi_dsub>
 8011324:	a354      	add	r3, pc, #336	; (adr r3, 8011478 <__ieee754_pow+0x3c8>)
 8011326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132a:	4604      	mov	r4, r0
 801132c:	460d      	mov	r5, r1
 801132e:	f7ef f97d 	bl	800062c <__aeabi_dmul>
 8011332:	a353      	add	r3, pc, #332	; (adr r3, 8011480 <__ieee754_pow+0x3d0>)
 8011334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011338:	4606      	mov	r6, r0
 801133a:	460f      	mov	r7, r1
 801133c:	4620      	mov	r0, r4
 801133e:	4629      	mov	r1, r5
 8011340:	f7ef f974 	bl	800062c <__aeabi_dmul>
 8011344:	4b57      	ldr	r3, [pc, #348]	; (80114a4 <__ieee754_pow+0x3f4>)
 8011346:	4682      	mov	sl, r0
 8011348:	468b      	mov	fp, r1
 801134a:	2200      	movs	r2, #0
 801134c:	4620      	mov	r0, r4
 801134e:	4629      	mov	r1, r5
 8011350:	f7ef f96c 	bl	800062c <__aeabi_dmul>
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	a14b      	add	r1, pc, #300	; (adr r1, 8011488 <__ieee754_pow+0x3d8>)
 801135a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801135e:	f7ee ffad 	bl	80002bc <__aeabi_dsub>
 8011362:	4622      	mov	r2, r4
 8011364:	462b      	mov	r3, r5
 8011366:	f7ef f961 	bl	800062c <__aeabi_dmul>
 801136a:	4602      	mov	r2, r0
 801136c:	460b      	mov	r3, r1
 801136e:	2000      	movs	r0, #0
 8011370:	494d      	ldr	r1, [pc, #308]	; (80114a8 <__ieee754_pow+0x3f8>)
 8011372:	f7ee ffa3 	bl	80002bc <__aeabi_dsub>
 8011376:	4622      	mov	r2, r4
 8011378:	4680      	mov	r8, r0
 801137a:	4689      	mov	r9, r1
 801137c:	462b      	mov	r3, r5
 801137e:	4620      	mov	r0, r4
 8011380:	4629      	mov	r1, r5
 8011382:	f7ef f953 	bl	800062c <__aeabi_dmul>
 8011386:	4602      	mov	r2, r0
 8011388:	460b      	mov	r3, r1
 801138a:	4640      	mov	r0, r8
 801138c:	4649      	mov	r1, r9
 801138e:	f7ef f94d 	bl	800062c <__aeabi_dmul>
 8011392:	a33f      	add	r3, pc, #252	; (adr r3, 8011490 <__ieee754_pow+0x3e0>)
 8011394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011398:	f7ef f948 	bl	800062c <__aeabi_dmul>
 801139c:	4602      	mov	r2, r0
 801139e:	460b      	mov	r3, r1
 80113a0:	4650      	mov	r0, sl
 80113a2:	4659      	mov	r1, fp
 80113a4:	f7ee ff8a 	bl	80002bc <__aeabi_dsub>
 80113a8:	4602      	mov	r2, r0
 80113aa:	460b      	mov	r3, r1
 80113ac:	4680      	mov	r8, r0
 80113ae:	4689      	mov	r9, r1
 80113b0:	4630      	mov	r0, r6
 80113b2:	4639      	mov	r1, r7
 80113b4:	f7ee ff84 	bl	80002c0 <__adddf3>
 80113b8:	2000      	movs	r0, #0
 80113ba:	4632      	mov	r2, r6
 80113bc:	463b      	mov	r3, r7
 80113be:	4604      	mov	r4, r0
 80113c0:	460d      	mov	r5, r1
 80113c2:	f7ee ff7b 	bl	80002bc <__aeabi_dsub>
 80113c6:	4602      	mov	r2, r0
 80113c8:	460b      	mov	r3, r1
 80113ca:	4640      	mov	r0, r8
 80113cc:	4649      	mov	r1, r9
 80113ce:	f7ee ff75 	bl	80002bc <__aeabi_dsub>
 80113d2:	9b04      	ldr	r3, [sp, #16]
 80113d4:	9a06      	ldr	r2, [sp, #24]
 80113d6:	3b01      	subs	r3, #1
 80113d8:	4313      	orrs	r3, r2
 80113da:	4682      	mov	sl, r0
 80113dc:	468b      	mov	fp, r1
 80113de:	f040 81e7 	bne.w	80117b0 <__ieee754_pow+0x700>
 80113e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011498 <__ieee754_pow+0x3e8>
 80113e6:	eeb0 8a47 	vmov.f32	s16, s14
 80113ea:	eef0 8a67 	vmov.f32	s17, s15
 80113ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80113f2:	2600      	movs	r6, #0
 80113f4:	4632      	mov	r2, r6
 80113f6:	463b      	mov	r3, r7
 80113f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113fc:	f7ee ff5e 	bl	80002bc <__aeabi_dsub>
 8011400:	4622      	mov	r2, r4
 8011402:	462b      	mov	r3, r5
 8011404:	f7ef f912 	bl	800062c <__aeabi_dmul>
 8011408:	e9dd 2300 	ldrd	r2, r3, [sp]
 801140c:	4680      	mov	r8, r0
 801140e:	4689      	mov	r9, r1
 8011410:	4650      	mov	r0, sl
 8011412:	4659      	mov	r1, fp
 8011414:	f7ef f90a 	bl	800062c <__aeabi_dmul>
 8011418:	4602      	mov	r2, r0
 801141a:	460b      	mov	r3, r1
 801141c:	4640      	mov	r0, r8
 801141e:	4649      	mov	r1, r9
 8011420:	f7ee ff4e 	bl	80002c0 <__adddf3>
 8011424:	4632      	mov	r2, r6
 8011426:	463b      	mov	r3, r7
 8011428:	4680      	mov	r8, r0
 801142a:	4689      	mov	r9, r1
 801142c:	4620      	mov	r0, r4
 801142e:	4629      	mov	r1, r5
 8011430:	f7ef f8fc 	bl	800062c <__aeabi_dmul>
 8011434:	460b      	mov	r3, r1
 8011436:	4604      	mov	r4, r0
 8011438:	460d      	mov	r5, r1
 801143a:	4602      	mov	r2, r0
 801143c:	4649      	mov	r1, r9
 801143e:	4640      	mov	r0, r8
 8011440:	f7ee ff3e 	bl	80002c0 <__adddf3>
 8011444:	4b19      	ldr	r3, [pc, #100]	; (80114ac <__ieee754_pow+0x3fc>)
 8011446:	4299      	cmp	r1, r3
 8011448:	ec45 4b19 	vmov	d9, r4, r5
 801144c:	4606      	mov	r6, r0
 801144e:	460f      	mov	r7, r1
 8011450:	468b      	mov	fp, r1
 8011452:	f340 82f1 	ble.w	8011a38 <__ieee754_pow+0x988>
 8011456:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801145a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801145e:	4303      	orrs	r3, r0
 8011460:	f000 81e4 	beq.w	801182c <__ieee754_pow+0x77c>
 8011464:	ec51 0b18 	vmov	r0, r1, d8
 8011468:	2200      	movs	r2, #0
 801146a:	2300      	movs	r3, #0
 801146c:	f7ef fb50 	bl	8000b10 <__aeabi_dcmplt>
 8011470:	3800      	subs	r0, #0
 8011472:	bf18      	it	ne
 8011474:	2001      	movne	r0, #1
 8011476:	e72b      	b.n	80112d0 <__ieee754_pow+0x220>
 8011478:	60000000 	.word	0x60000000
 801147c:	3ff71547 	.word	0x3ff71547
 8011480:	f85ddf44 	.word	0xf85ddf44
 8011484:	3e54ae0b 	.word	0x3e54ae0b
 8011488:	55555555 	.word	0x55555555
 801148c:	3fd55555 	.word	0x3fd55555
 8011490:	652b82fe 	.word	0x652b82fe
 8011494:	3ff71547 	.word	0x3ff71547
 8011498:	00000000 	.word	0x00000000
 801149c:	bff00000 	.word	0xbff00000
 80114a0:	3ff00000 	.word	0x3ff00000
 80114a4:	3fd00000 	.word	0x3fd00000
 80114a8:	3fe00000 	.word	0x3fe00000
 80114ac:	408fffff 	.word	0x408fffff
 80114b0:	4bd5      	ldr	r3, [pc, #852]	; (8011808 <__ieee754_pow+0x758>)
 80114b2:	402b      	ands	r3, r5
 80114b4:	2200      	movs	r2, #0
 80114b6:	b92b      	cbnz	r3, 80114c4 <__ieee754_pow+0x414>
 80114b8:	4bd4      	ldr	r3, [pc, #848]	; (801180c <__ieee754_pow+0x75c>)
 80114ba:	f7ef f8b7 	bl	800062c <__aeabi_dmul>
 80114be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80114c2:	460c      	mov	r4, r1
 80114c4:	1523      	asrs	r3, r4, #20
 80114c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80114ca:	4413      	add	r3, r2
 80114cc:	9305      	str	r3, [sp, #20]
 80114ce:	4bd0      	ldr	r3, [pc, #832]	; (8011810 <__ieee754_pow+0x760>)
 80114d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80114d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80114d8:	429c      	cmp	r4, r3
 80114da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80114de:	dd08      	ble.n	80114f2 <__ieee754_pow+0x442>
 80114e0:	4bcc      	ldr	r3, [pc, #816]	; (8011814 <__ieee754_pow+0x764>)
 80114e2:	429c      	cmp	r4, r3
 80114e4:	f340 8162 	ble.w	80117ac <__ieee754_pow+0x6fc>
 80114e8:	9b05      	ldr	r3, [sp, #20]
 80114ea:	3301      	adds	r3, #1
 80114ec:	9305      	str	r3, [sp, #20]
 80114ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80114f2:	2400      	movs	r4, #0
 80114f4:	00e3      	lsls	r3, r4, #3
 80114f6:	9307      	str	r3, [sp, #28]
 80114f8:	4bc7      	ldr	r3, [pc, #796]	; (8011818 <__ieee754_pow+0x768>)
 80114fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80114fe:	ed93 7b00 	vldr	d7, [r3]
 8011502:	4629      	mov	r1, r5
 8011504:	ec53 2b17 	vmov	r2, r3, d7
 8011508:	eeb0 9a47 	vmov.f32	s18, s14
 801150c:	eef0 9a67 	vmov.f32	s19, s15
 8011510:	4682      	mov	sl, r0
 8011512:	f7ee fed3 	bl	80002bc <__aeabi_dsub>
 8011516:	4652      	mov	r2, sl
 8011518:	4606      	mov	r6, r0
 801151a:	460f      	mov	r7, r1
 801151c:	462b      	mov	r3, r5
 801151e:	ec51 0b19 	vmov	r0, r1, d9
 8011522:	f7ee fecd 	bl	80002c0 <__adddf3>
 8011526:	4602      	mov	r2, r0
 8011528:	460b      	mov	r3, r1
 801152a:	2000      	movs	r0, #0
 801152c:	49bb      	ldr	r1, [pc, #748]	; (801181c <__ieee754_pow+0x76c>)
 801152e:	f7ef f9a7 	bl	8000880 <__aeabi_ddiv>
 8011532:	ec41 0b1a 	vmov	d10, r0, r1
 8011536:	4602      	mov	r2, r0
 8011538:	460b      	mov	r3, r1
 801153a:	4630      	mov	r0, r6
 801153c:	4639      	mov	r1, r7
 801153e:	f7ef f875 	bl	800062c <__aeabi_dmul>
 8011542:	2300      	movs	r3, #0
 8011544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011548:	9302      	str	r3, [sp, #8]
 801154a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801154e:	46ab      	mov	fp, r5
 8011550:	106d      	asrs	r5, r5, #1
 8011552:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011556:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801155a:	ec41 0b18 	vmov	d8, r0, r1
 801155e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011562:	2200      	movs	r2, #0
 8011564:	4640      	mov	r0, r8
 8011566:	4649      	mov	r1, r9
 8011568:	4614      	mov	r4, r2
 801156a:	461d      	mov	r5, r3
 801156c:	f7ef f85e 	bl	800062c <__aeabi_dmul>
 8011570:	4602      	mov	r2, r0
 8011572:	460b      	mov	r3, r1
 8011574:	4630      	mov	r0, r6
 8011576:	4639      	mov	r1, r7
 8011578:	f7ee fea0 	bl	80002bc <__aeabi_dsub>
 801157c:	ec53 2b19 	vmov	r2, r3, d9
 8011580:	4606      	mov	r6, r0
 8011582:	460f      	mov	r7, r1
 8011584:	4620      	mov	r0, r4
 8011586:	4629      	mov	r1, r5
 8011588:	f7ee fe98 	bl	80002bc <__aeabi_dsub>
 801158c:	4602      	mov	r2, r0
 801158e:	460b      	mov	r3, r1
 8011590:	4650      	mov	r0, sl
 8011592:	4659      	mov	r1, fp
 8011594:	f7ee fe92 	bl	80002bc <__aeabi_dsub>
 8011598:	4642      	mov	r2, r8
 801159a:	464b      	mov	r3, r9
 801159c:	f7ef f846 	bl	800062c <__aeabi_dmul>
 80115a0:	4602      	mov	r2, r0
 80115a2:	460b      	mov	r3, r1
 80115a4:	4630      	mov	r0, r6
 80115a6:	4639      	mov	r1, r7
 80115a8:	f7ee fe88 	bl	80002bc <__aeabi_dsub>
 80115ac:	ec53 2b1a 	vmov	r2, r3, d10
 80115b0:	f7ef f83c 	bl	800062c <__aeabi_dmul>
 80115b4:	ec53 2b18 	vmov	r2, r3, d8
 80115b8:	ec41 0b19 	vmov	d9, r0, r1
 80115bc:	ec51 0b18 	vmov	r0, r1, d8
 80115c0:	f7ef f834 	bl	800062c <__aeabi_dmul>
 80115c4:	a37c      	add	r3, pc, #496	; (adr r3, 80117b8 <__ieee754_pow+0x708>)
 80115c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ca:	4604      	mov	r4, r0
 80115cc:	460d      	mov	r5, r1
 80115ce:	f7ef f82d 	bl	800062c <__aeabi_dmul>
 80115d2:	a37b      	add	r3, pc, #492	; (adr r3, 80117c0 <__ieee754_pow+0x710>)
 80115d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d8:	f7ee fe72 	bl	80002c0 <__adddf3>
 80115dc:	4622      	mov	r2, r4
 80115de:	462b      	mov	r3, r5
 80115e0:	f7ef f824 	bl	800062c <__aeabi_dmul>
 80115e4:	a378      	add	r3, pc, #480	; (adr r3, 80117c8 <__ieee754_pow+0x718>)
 80115e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ea:	f7ee fe69 	bl	80002c0 <__adddf3>
 80115ee:	4622      	mov	r2, r4
 80115f0:	462b      	mov	r3, r5
 80115f2:	f7ef f81b 	bl	800062c <__aeabi_dmul>
 80115f6:	a376      	add	r3, pc, #472	; (adr r3, 80117d0 <__ieee754_pow+0x720>)
 80115f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115fc:	f7ee fe60 	bl	80002c0 <__adddf3>
 8011600:	4622      	mov	r2, r4
 8011602:	462b      	mov	r3, r5
 8011604:	f7ef f812 	bl	800062c <__aeabi_dmul>
 8011608:	a373      	add	r3, pc, #460	; (adr r3, 80117d8 <__ieee754_pow+0x728>)
 801160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160e:	f7ee fe57 	bl	80002c0 <__adddf3>
 8011612:	4622      	mov	r2, r4
 8011614:	462b      	mov	r3, r5
 8011616:	f7ef f809 	bl	800062c <__aeabi_dmul>
 801161a:	a371      	add	r3, pc, #452	; (adr r3, 80117e0 <__ieee754_pow+0x730>)
 801161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011620:	f7ee fe4e 	bl	80002c0 <__adddf3>
 8011624:	4622      	mov	r2, r4
 8011626:	4606      	mov	r6, r0
 8011628:	460f      	mov	r7, r1
 801162a:	462b      	mov	r3, r5
 801162c:	4620      	mov	r0, r4
 801162e:	4629      	mov	r1, r5
 8011630:	f7ee fffc 	bl	800062c <__aeabi_dmul>
 8011634:	4602      	mov	r2, r0
 8011636:	460b      	mov	r3, r1
 8011638:	4630      	mov	r0, r6
 801163a:	4639      	mov	r1, r7
 801163c:	f7ee fff6 	bl	800062c <__aeabi_dmul>
 8011640:	4642      	mov	r2, r8
 8011642:	4604      	mov	r4, r0
 8011644:	460d      	mov	r5, r1
 8011646:	464b      	mov	r3, r9
 8011648:	ec51 0b18 	vmov	r0, r1, d8
 801164c:	f7ee fe38 	bl	80002c0 <__adddf3>
 8011650:	ec53 2b19 	vmov	r2, r3, d9
 8011654:	f7ee ffea 	bl	800062c <__aeabi_dmul>
 8011658:	4622      	mov	r2, r4
 801165a:	462b      	mov	r3, r5
 801165c:	f7ee fe30 	bl	80002c0 <__adddf3>
 8011660:	4642      	mov	r2, r8
 8011662:	4682      	mov	sl, r0
 8011664:	468b      	mov	fp, r1
 8011666:	464b      	mov	r3, r9
 8011668:	4640      	mov	r0, r8
 801166a:	4649      	mov	r1, r9
 801166c:	f7ee ffde 	bl	800062c <__aeabi_dmul>
 8011670:	4b6b      	ldr	r3, [pc, #428]	; (8011820 <__ieee754_pow+0x770>)
 8011672:	2200      	movs	r2, #0
 8011674:	4606      	mov	r6, r0
 8011676:	460f      	mov	r7, r1
 8011678:	f7ee fe22 	bl	80002c0 <__adddf3>
 801167c:	4652      	mov	r2, sl
 801167e:	465b      	mov	r3, fp
 8011680:	f7ee fe1e 	bl	80002c0 <__adddf3>
 8011684:	2000      	movs	r0, #0
 8011686:	4604      	mov	r4, r0
 8011688:	460d      	mov	r5, r1
 801168a:	4602      	mov	r2, r0
 801168c:	460b      	mov	r3, r1
 801168e:	4640      	mov	r0, r8
 8011690:	4649      	mov	r1, r9
 8011692:	f7ee ffcb 	bl	800062c <__aeabi_dmul>
 8011696:	4b62      	ldr	r3, [pc, #392]	; (8011820 <__ieee754_pow+0x770>)
 8011698:	4680      	mov	r8, r0
 801169a:	4689      	mov	r9, r1
 801169c:	2200      	movs	r2, #0
 801169e:	4620      	mov	r0, r4
 80116a0:	4629      	mov	r1, r5
 80116a2:	f7ee fe0b 	bl	80002bc <__aeabi_dsub>
 80116a6:	4632      	mov	r2, r6
 80116a8:	463b      	mov	r3, r7
 80116aa:	f7ee fe07 	bl	80002bc <__aeabi_dsub>
 80116ae:	4602      	mov	r2, r0
 80116b0:	460b      	mov	r3, r1
 80116b2:	4650      	mov	r0, sl
 80116b4:	4659      	mov	r1, fp
 80116b6:	f7ee fe01 	bl	80002bc <__aeabi_dsub>
 80116ba:	ec53 2b18 	vmov	r2, r3, d8
 80116be:	f7ee ffb5 	bl	800062c <__aeabi_dmul>
 80116c2:	4622      	mov	r2, r4
 80116c4:	4606      	mov	r6, r0
 80116c6:	460f      	mov	r7, r1
 80116c8:	462b      	mov	r3, r5
 80116ca:	ec51 0b19 	vmov	r0, r1, d9
 80116ce:	f7ee ffad 	bl	800062c <__aeabi_dmul>
 80116d2:	4602      	mov	r2, r0
 80116d4:	460b      	mov	r3, r1
 80116d6:	4630      	mov	r0, r6
 80116d8:	4639      	mov	r1, r7
 80116da:	f7ee fdf1 	bl	80002c0 <__adddf3>
 80116de:	4606      	mov	r6, r0
 80116e0:	460f      	mov	r7, r1
 80116e2:	4602      	mov	r2, r0
 80116e4:	460b      	mov	r3, r1
 80116e6:	4640      	mov	r0, r8
 80116e8:	4649      	mov	r1, r9
 80116ea:	f7ee fde9 	bl	80002c0 <__adddf3>
 80116ee:	a33e      	add	r3, pc, #248	; (adr r3, 80117e8 <__ieee754_pow+0x738>)
 80116f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f4:	2000      	movs	r0, #0
 80116f6:	4604      	mov	r4, r0
 80116f8:	460d      	mov	r5, r1
 80116fa:	f7ee ff97 	bl	800062c <__aeabi_dmul>
 80116fe:	4642      	mov	r2, r8
 8011700:	ec41 0b18 	vmov	d8, r0, r1
 8011704:	464b      	mov	r3, r9
 8011706:	4620      	mov	r0, r4
 8011708:	4629      	mov	r1, r5
 801170a:	f7ee fdd7 	bl	80002bc <__aeabi_dsub>
 801170e:	4602      	mov	r2, r0
 8011710:	460b      	mov	r3, r1
 8011712:	4630      	mov	r0, r6
 8011714:	4639      	mov	r1, r7
 8011716:	f7ee fdd1 	bl	80002bc <__aeabi_dsub>
 801171a:	a335      	add	r3, pc, #212	; (adr r3, 80117f0 <__ieee754_pow+0x740>)
 801171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011720:	f7ee ff84 	bl	800062c <__aeabi_dmul>
 8011724:	a334      	add	r3, pc, #208	; (adr r3, 80117f8 <__ieee754_pow+0x748>)
 8011726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172a:	4606      	mov	r6, r0
 801172c:	460f      	mov	r7, r1
 801172e:	4620      	mov	r0, r4
 8011730:	4629      	mov	r1, r5
 8011732:	f7ee ff7b 	bl	800062c <__aeabi_dmul>
 8011736:	4602      	mov	r2, r0
 8011738:	460b      	mov	r3, r1
 801173a:	4630      	mov	r0, r6
 801173c:	4639      	mov	r1, r7
 801173e:	f7ee fdbf 	bl	80002c0 <__adddf3>
 8011742:	9a07      	ldr	r2, [sp, #28]
 8011744:	4b37      	ldr	r3, [pc, #220]	; (8011824 <__ieee754_pow+0x774>)
 8011746:	4413      	add	r3, r2
 8011748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174c:	f7ee fdb8 	bl	80002c0 <__adddf3>
 8011750:	4682      	mov	sl, r0
 8011752:	9805      	ldr	r0, [sp, #20]
 8011754:	468b      	mov	fp, r1
 8011756:	f7ee feff 	bl	8000558 <__aeabi_i2d>
 801175a:	9a07      	ldr	r2, [sp, #28]
 801175c:	4b32      	ldr	r3, [pc, #200]	; (8011828 <__ieee754_pow+0x778>)
 801175e:	4413      	add	r3, r2
 8011760:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011764:	4606      	mov	r6, r0
 8011766:	460f      	mov	r7, r1
 8011768:	4652      	mov	r2, sl
 801176a:	465b      	mov	r3, fp
 801176c:	ec51 0b18 	vmov	r0, r1, d8
 8011770:	f7ee fda6 	bl	80002c0 <__adddf3>
 8011774:	4642      	mov	r2, r8
 8011776:	464b      	mov	r3, r9
 8011778:	f7ee fda2 	bl	80002c0 <__adddf3>
 801177c:	4632      	mov	r2, r6
 801177e:	463b      	mov	r3, r7
 8011780:	f7ee fd9e 	bl	80002c0 <__adddf3>
 8011784:	2000      	movs	r0, #0
 8011786:	4632      	mov	r2, r6
 8011788:	463b      	mov	r3, r7
 801178a:	4604      	mov	r4, r0
 801178c:	460d      	mov	r5, r1
 801178e:	f7ee fd95 	bl	80002bc <__aeabi_dsub>
 8011792:	4642      	mov	r2, r8
 8011794:	464b      	mov	r3, r9
 8011796:	f7ee fd91 	bl	80002bc <__aeabi_dsub>
 801179a:	ec53 2b18 	vmov	r2, r3, d8
 801179e:	f7ee fd8d 	bl	80002bc <__aeabi_dsub>
 80117a2:	4602      	mov	r2, r0
 80117a4:	460b      	mov	r3, r1
 80117a6:	4650      	mov	r0, sl
 80117a8:	4659      	mov	r1, fp
 80117aa:	e610      	b.n	80113ce <__ieee754_pow+0x31e>
 80117ac:	2401      	movs	r4, #1
 80117ae:	e6a1      	b.n	80114f4 <__ieee754_pow+0x444>
 80117b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011800 <__ieee754_pow+0x750>
 80117b4:	e617      	b.n	80113e6 <__ieee754_pow+0x336>
 80117b6:	bf00      	nop
 80117b8:	4a454eef 	.word	0x4a454eef
 80117bc:	3fca7e28 	.word	0x3fca7e28
 80117c0:	93c9db65 	.word	0x93c9db65
 80117c4:	3fcd864a 	.word	0x3fcd864a
 80117c8:	a91d4101 	.word	0xa91d4101
 80117cc:	3fd17460 	.word	0x3fd17460
 80117d0:	518f264d 	.word	0x518f264d
 80117d4:	3fd55555 	.word	0x3fd55555
 80117d8:	db6fabff 	.word	0xdb6fabff
 80117dc:	3fdb6db6 	.word	0x3fdb6db6
 80117e0:	33333303 	.word	0x33333303
 80117e4:	3fe33333 	.word	0x3fe33333
 80117e8:	e0000000 	.word	0xe0000000
 80117ec:	3feec709 	.word	0x3feec709
 80117f0:	dc3a03fd 	.word	0xdc3a03fd
 80117f4:	3feec709 	.word	0x3feec709
 80117f8:	145b01f5 	.word	0x145b01f5
 80117fc:	be3e2fe0 	.word	0xbe3e2fe0
 8011800:	00000000 	.word	0x00000000
 8011804:	3ff00000 	.word	0x3ff00000
 8011808:	7ff00000 	.word	0x7ff00000
 801180c:	43400000 	.word	0x43400000
 8011810:	0003988e 	.word	0x0003988e
 8011814:	000bb679 	.word	0x000bb679
 8011818:	0803d808 	.word	0x0803d808
 801181c:	3ff00000 	.word	0x3ff00000
 8011820:	40080000 	.word	0x40080000
 8011824:	0803d828 	.word	0x0803d828
 8011828:	0803d818 	.word	0x0803d818
 801182c:	a3b5      	add	r3, pc, #724	; (adr r3, 8011b04 <__ieee754_pow+0xa54>)
 801182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011832:	4640      	mov	r0, r8
 8011834:	4649      	mov	r1, r9
 8011836:	f7ee fd43 	bl	80002c0 <__adddf3>
 801183a:	4622      	mov	r2, r4
 801183c:	ec41 0b1a 	vmov	d10, r0, r1
 8011840:	462b      	mov	r3, r5
 8011842:	4630      	mov	r0, r6
 8011844:	4639      	mov	r1, r7
 8011846:	f7ee fd39 	bl	80002bc <__aeabi_dsub>
 801184a:	4602      	mov	r2, r0
 801184c:	460b      	mov	r3, r1
 801184e:	ec51 0b1a 	vmov	r0, r1, d10
 8011852:	f7ef f97b 	bl	8000b4c <__aeabi_dcmpgt>
 8011856:	2800      	cmp	r0, #0
 8011858:	f47f ae04 	bne.w	8011464 <__ieee754_pow+0x3b4>
 801185c:	4aa4      	ldr	r2, [pc, #656]	; (8011af0 <__ieee754_pow+0xa40>)
 801185e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011862:	4293      	cmp	r3, r2
 8011864:	f340 8108 	ble.w	8011a78 <__ieee754_pow+0x9c8>
 8011868:	151b      	asrs	r3, r3, #20
 801186a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801186e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011872:	fa4a f303 	asr.w	r3, sl, r3
 8011876:	445b      	add	r3, fp
 8011878:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801187c:	4e9d      	ldr	r6, [pc, #628]	; (8011af4 <__ieee754_pow+0xa44>)
 801187e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011882:	4116      	asrs	r6, r2
 8011884:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011888:	2000      	movs	r0, #0
 801188a:	ea23 0106 	bic.w	r1, r3, r6
 801188e:	f1c2 0214 	rsb	r2, r2, #20
 8011892:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011896:	fa4a fa02 	asr.w	sl, sl, r2
 801189a:	f1bb 0f00 	cmp.w	fp, #0
 801189e:	4602      	mov	r2, r0
 80118a0:	460b      	mov	r3, r1
 80118a2:	4620      	mov	r0, r4
 80118a4:	4629      	mov	r1, r5
 80118a6:	bfb8      	it	lt
 80118a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80118ac:	f7ee fd06 	bl	80002bc <__aeabi_dsub>
 80118b0:	ec41 0b19 	vmov	d9, r0, r1
 80118b4:	4642      	mov	r2, r8
 80118b6:	464b      	mov	r3, r9
 80118b8:	ec51 0b19 	vmov	r0, r1, d9
 80118bc:	f7ee fd00 	bl	80002c0 <__adddf3>
 80118c0:	a37b      	add	r3, pc, #492	; (adr r3, 8011ab0 <__ieee754_pow+0xa00>)
 80118c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c6:	2000      	movs	r0, #0
 80118c8:	4604      	mov	r4, r0
 80118ca:	460d      	mov	r5, r1
 80118cc:	f7ee feae 	bl	800062c <__aeabi_dmul>
 80118d0:	ec53 2b19 	vmov	r2, r3, d9
 80118d4:	4606      	mov	r6, r0
 80118d6:	460f      	mov	r7, r1
 80118d8:	4620      	mov	r0, r4
 80118da:	4629      	mov	r1, r5
 80118dc:	f7ee fcee 	bl	80002bc <__aeabi_dsub>
 80118e0:	4602      	mov	r2, r0
 80118e2:	460b      	mov	r3, r1
 80118e4:	4640      	mov	r0, r8
 80118e6:	4649      	mov	r1, r9
 80118e8:	f7ee fce8 	bl	80002bc <__aeabi_dsub>
 80118ec:	a372      	add	r3, pc, #456	; (adr r3, 8011ab8 <__ieee754_pow+0xa08>)
 80118ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f2:	f7ee fe9b 	bl	800062c <__aeabi_dmul>
 80118f6:	a372      	add	r3, pc, #456	; (adr r3, 8011ac0 <__ieee754_pow+0xa10>)
 80118f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118fc:	4680      	mov	r8, r0
 80118fe:	4689      	mov	r9, r1
 8011900:	4620      	mov	r0, r4
 8011902:	4629      	mov	r1, r5
 8011904:	f7ee fe92 	bl	800062c <__aeabi_dmul>
 8011908:	4602      	mov	r2, r0
 801190a:	460b      	mov	r3, r1
 801190c:	4640      	mov	r0, r8
 801190e:	4649      	mov	r1, r9
 8011910:	f7ee fcd6 	bl	80002c0 <__adddf3>
 8011914:	4604      	mov	r4, r0
 8011916:	460d      	mov	r5, r1
 8011918:	4602      	mov	r2, r0
 801191a:	460b      	mov	r3, r1
 801191c:	4630      	mov	r0, r6
 801191e:	4639      	mov	r1, r7
 8011920:	f7ee fcce 	bl	80002c0 <__adddf3>
 8011924:	4632      	mov	r2, r6
 8011926:	463b      	mov	r3, r7
 8011928:	4680      	mov	r8, r0
 801192a:	4689      	mov	r9, r1
 801192c:	f7ee fcc6 	bl	80002bc <__aeabi_dsub>
 8011930:	4602      	mov	r2, r0
 8011932:	460b      	mov	r3, r1
 8011934:	4620      	mov	r0, r4
 8011936:	4629      	mov	r1, r5
 8011938:	f7ee fcc0 	bl	80002bc <__aeabi_dsub>
 801193c:	4642      	mov	r2, r8
 801193e:	4606      	mov	r6, r0
 8011940:	460f      	mov	r7, r1
 8011942:	464b      	mov	r3, r9
 8011944:	4640      	mov	r0, r8
 8011946:	4649      	mov	r1, r9
 8011948:	f7ee fe70 	bl	800062c <__aeabi_dmul>
 801194c:	a35e      	add	r3, pc, #376	; (adr r3, 8011ac8 <__ieee754_pow+0xa18>)
 801194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011952:	4604      	mov	r4, r0
 8011954:	460d      	mov	r5, r1
 8011956:	f7ee fe69 	bl	800062c <__aeabi_dmul>
 801195a:	a35d      	add	r3, pc, #372	; (adr r3, 8011ad0 <__ieee754_pow+0xa20>)
 801195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011960:	f7ee fcac 	bl	80002bc <__aeabi_dsub>
 8011964:	4622      	mov	r2, r4
 8011966:	462b      	mov	r3, r5
 8011968:	f7ee fe60 	bl	800062c <__aeabi_dmul>
 801196c:	a35a      	add	r3, pc, #360	; (adr r3, 8011ad8 <__ieee754_pow+0xa28>)
 801196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011972:	f7ee fca5 	bl	80002c0 <__adddf3>
 8011976:	4622      	mov	r2, r4
 8011978:	462b      	mov	r3, r5
 801197a:	f7ee fe57 	bl	800062c <__aeabi_dmul>
 801197e:	a358      	add	r3, pc, #352	; (adr r3, 8011ae0 <__ieee754_pow+0xa30>)
 8011980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011984:	f7ee fc9a 	bl	80002bc <__aeabi_dsub>
 8011988:	4622      	mov	r2, r4
 801198a:	462b      	mov	r3, r5
 801198c:	f7ee fe4e 	bl	800062c <__aeabi_dmul>
 8011990:	a355      	add	r3, pc, #340	; (adr r3, 8011ae8 <__ieee754_pow+0xa38>)
 8011992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011996:	f7ee fc93 	bl	80002c0 <__adddf3>
 801199a:	4622      	mov	r2, r4
 801199c:	462b      	mov	r3, r5
 801199e:	f7ee fe45 	bl	800062c <__aeabi_dmul>
 80119a2:	4602      	mov	r2, r0
 80119a4:	460b      	mov	r3, r1
 80119a6:	4640      	mov	r0, r8
 80119a8:	4649      	mov	r1, r9
 80119aa:	f7ee fc87 	bl	80002bc <__aeabi_dsub>
 80119ae:	4604      	mov	r4, r0
 80119b0:	460d      	mov	r5, r1
 80119b2:	4602      	mov	r2, r0
 80119b4:	460b      	mov	r3, r1
 80119b6:	4640      	mov	r0, r8
 80119b8:	4649      	mov	r1, r9
 80119ba:	f7ee fe37 	bl	800062c <__aeabi_dmul>
 80119be:	2200      	movs	r2, #0
 80119c0:	ec41 0b19 	vmov	d9, r0, r1
 80119c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80119c8:	4620      	mov	r0, r4
 80119ca:	4629      	mov	r1, r5
 80119cc:	f7ee fc76 	bl	80002bc <__aeabi_dsub>
 80119d0:	4602      	mov	r2, r0
 80119d2:	460b      	mov	r3, r1
 80119d4:	ec51 0b19 	vmov	r0, r1, d9
 80119d8:	f7ee ff52 	bl	8000880 <__aeabi_ddiv>
 80119dc:	4632      	mov	r2, r6
 80119de:	4604      	mov	r4, r0
 80119e0:	460d      	mov	r5, r1
 80119e2:	463b      	mov	r3, r7
 80119e4:	4640      	mov	r0, r8
 80119e6:	4649      	mov	r1, r9
 80119e8:	f7ee fe20 	bl	800062c <__aeabi_dmul>
 80119ec:	4632      	mov	r2, r6
 80119ee:	463b      	mov	r3, r7
 80119f0:	f7ee fc66 	bl	80002c0 <__adddf3>
 80119f4:	4602      	mov	r2, r0
 80119f6:	460b      	mov	r3, r1
 80119f8:	4620      	mov	r0, r4
 80119fa:	4629      	mov	r1, r5
 80119fc:	f7ee fc5e 	bl	80002bc <__aeabi_dsub>
 8011a00:	4642      	mov	r2, r8
 8011a02:	464b      	mov	r3, r9
 8011a04:	f7ee fc5a 	bl	80002bc <__aeabi_dsub>
 8011a08:	460b      	mov	r3, r1
 8011a0a:	4602      	mov	r2, r0
 8011a0c:	493a      	ldr	r1, [pc, #232]	; (8011af8 <__ieee754_pow+0xa48>)
 8011a0e:	2000      	movs	r0, #0
 8011a10:	f7ee fc54 	bl	80002bc <__aeabi_dsub>
 8011a14:	ec41 0b10 	vmov	d0, r0, r1
 8011a18:	ee10 3a90 	vmov	r3, s1
 8011a1c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a24:	da2b      	bge.n	8011a7e <__ieee754_pow+0x9ce>
 8011a26:	4650      	mov	r0, sl
 8011a28:	f001 fae2 	bl	8012ff0 <scalbn>
 8011a2c:	ec51 0b10 	vmov	r0, r1, d0
 8011a30:	ec53 2b18 	vmov	r2, r3, d8
 8011a34:	f7ff bbed 	b.w	8011212 <__ieee754_pow+0x162>
 8011a38:	4b30      	ldr	r3, [pc, #192]	; (8011afc <__ieee754_pow+0xa4c>)
 8011a3a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011a3e:	429e      	cmp	r6, r3
 8011a40:	f77f af0c 	ble.w	801185c <__ieee754_pow+0x7ac>
 8011a44:	4b2e      	ldr	r3, [pc, #184]	; (8011b00 <__ieee754_pow+0xa50>)
 8011a46:	440b      	add	r3, r1
 8011a48:	4303      	orrs	r3, r0
 8011a4a:	d009      	beq.n	8011a60 <__ieee754_pow+0x9b0>
 8011a4c:	ec51 0b18 	vmov	r0, r1, d8
 8011a50:	2200      	movs	r2, #0
 8011a52:	2300      	movs	r3, #0
 8011a54:	f7ef f85c 	bl	8000b10 <__aeabi_dcmplt>
 8011a58:	3800      	subs	r0, #0
 8011a5a:	bf18      	it	ne
 8011a5c:	2001      	movne	r0, #1
 8011a5e:	e447      	b.n	80112f0 <__ieee754_pow+0x240>
 8011a60:	4622      	mov	r2, r4
 8011a62:	462b      	mov	r3, r5
 8011a64:	f7ee fc2a 	bl	80002bc <__aeabi_dsub>
 8011a68:	4642      	mov	r2, r8
 8011a6a:	464b      	mov	r3, r9
 8011a6c:	f7ef f864 	bl	8000b38 <__aeabi_dcmpge>
 8011a70:	2800      	cmp	r0, #0
 8011a72:	f43f aef3 	beq.w	801185c <__ieee754_pow+0x7ac>
 8011a76:	e7e9      	b.n	8011a4c <__ieee754_pow+0x99c>
 8011a78:	f04f 0a00 	mov.w	sl, #0
 8011a7c:	e71a      	b.n	80118b4 <__ieee754_pow+0x804>
 8011a7e:	ec51 0b10 	vmov	r0, r1, d0
 8011a82:	4619      	mov	r1, r3
 8011a84:	e7d4      	b.n	8011a30 <__ieee754_pow+0x980>
 8011a86:	491c      	ldr	r1, [pc, #112]	; (8011af8 <__ieee754_pow+0xa48>)
 8011a88:	2000      	movs	r0, #0
 8011a8a:	f7ff bb30 	b.w	80110ee <__ieee754_pow+0x3e>
 8011a8e:	2000      	movs	r0, #0
 8011a90:	2100      	movs	r1, #0
 8011a92:	f7ff bb2c 	b.w	80110ee <__ieee754_pow+0x3e>
 8011a96:	4630      	mov	r0, r6
 8011a98:	4639      	mov	r1, r7
 8011a9a:	f7ff bb28 	b.w	80110ee <__ieee754_pow+0x3e>
 8011a9e:	9204      	str	r2, [sp, #16]
 8011aa0:	f7ff bb7a 	b.w	8011198 <__ieee754_pow+0xe8>
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	f7ff bb64 	b.w	8011172 <__ieee754_pow+0xc2>
 8011aaa:	bf00      	nop
 8011aac:	f3af 8000 	nop.w
 8011ab0:	00000000 	.word	0x00000000
 8011ab4:	3fe62e43 	.word	0x3fe62e43
 8011ab8:	fefa39ef 	.word	0xfefa39ef
 8011abc:	3fe62e42 	.word	0x3fe62e42
 8011ac0:	0ca86c39 	.word	0x0ca86c39
 8011ac4:	be205c61 	.word	0xbe205c61
 8011ac8:	72bea4d0 	.word	0x72bea4d0
 8011acc:	3e663769 	.word	0x3e663769
 8011ad0:	c5d26bf1 	.word	0xc5d26bf1
 8011ad4:	3ebbbd41 	.word	0x3ebbbd41
 8011ad8:	af25de2c 	.word	0xaf25de2c
 8011adc:	3f11566a 	.word	0x3f11566a
 8011ae0:	16bebd93 	.word	0x16bebd93
 8011ae4:	3f66c16c 	.word	0x3f66c16c
 8011ae8:	5555553e 	.word	0x5555553e
 8011aec:	3fc55555 	.word	0x3fc55555
 8011af0:	3fe00000 	.word	0x3fe00000
 8011af4:	000fffff 	.word	0x000fffff
 8011af8:	3ff00000 	.word	0x3ff00000
 8011afc:	4090cbff 	.word	0x4090cbff
 8011b00:	3f6f3400 	.word	0x3f6f3400
 8011b04:	652b82fe 	.word	0x652b82fe
 8011b08:	3c971547 	.word	0x3c971547
 8011b0c:	00000000 	.word	0x00000000

08011b10 <__ieee754_rem_pio2>:
 8011b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b14:	ed2d 8b02 	vpush	{d8}
 8011b18:	ec55 4b10 	vmov	r4, r5, d0
 8011b1c:	4bca      	ldr	r3, [pc, #808]	; (8011e48 <__ieee754_rem_pio2+0x338>)
 8011b1e:	b08b      	sub	sp, #44	; 0x2c
 8011b20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011b24:	4598      	cmp	r8, r3
 8011b26:	4682      	mov	sl, r0
 8011b28:	9502      	str	r5, [sp, #8]
 8011b2a:	dc08      	bgt.n	8011b3e <__ieee754_rem_pio2+0x2e>
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	2300      	movs	r3, #0
 8011b30:	ed80 0b00 	vstr	d0, [r0]
 8011b34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011b38:	f04f 0b00 	mov.w	fp, #0
 8011b3c:	e028      	b.n	8011b90 <__ieee754_rem_pio2+0x80>
 8011b3e:	4bc3      	ldr	r3, [pc, #780]	; (8011e4c <__ieee754_rem_pio2+0x33c>)
 8011b40:	4598      	cmp	r8, r3
 8011b42:	dc78      	bgt.n	8011c36 <__ieee754_rem_pio2+0x126>
 8011b44:	9b02      	ldr	r3, [sp, #8]
 8011b46:	4ec2      	ldr	r6, [pc, #776]	; (8011e50 <__ieee754_rem_pio2+0x340>)
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	ee10 0a10 	vmov	r0, s0
 8011b4e:	a3b0      	add	r3, pc, #704	; (adr r3, 8011e10 <__ieee754_rem_pio2+0x300>)
 8011b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b54:	4629      	mov	r1, r5
 8011b56:	dd39      	ble.n	8011bcc <__ieee754_rem_pio2+0xbc>
 8011b58:	f7ee fbb0 	bl	80002bc <__aeabi_dsub>
 8011b5c:	45b0      	cmp	r8, r6
 8011b5e:	4604      	mov	r4, r0
 8011b60:	460d      	mov	r5, r1
 8011b62:	d01b      	beq.n	8011b9c <__ieee754_rem_pio2+0x8c>
 8011b64:	a3ac      	add	r3, pc, #688	; (adr r3, 8011e18 <__ieee754_rem_pio2+0x308>)
 8011b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6a:	f7ee fba7 	bl	80002bc <__aeabi_dsub>
 8011b6e:	4602      	mov	r2, r0
 8011b70:	460b      	mov	r3, r1
 8011b72:	e9ca 2300 	strd	r2, r3, [sl]
 8011b76:	4620      	mov	r0, r4
 8011b78:	4629      	mov	r1, r5
 8011b7a:	f7ee fb9f 	bl	80002bc <__aeabi_dsub>
 8011b7e:	a3a6      	add	r3, pc, #664	; (adr r3, 8011e18 <__ieee754_rem_pio2+0x308>)
 8011b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b84:	f7ee fb9a 	bl	80002bc <__aeabi_dsub>
 8011b88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011b8c:	f04f 0b01 	mov.w	fp, #1
 8011b90:	4658      	mov	r0, fp
 8011b92:	b00b      	add	sp, #44	; 0x2c
 8011b94:	ecbd 8b02 	vpop	{d8}
 8011b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b9c:	a3a0      	add	r3, pc, #640	; (adr r3, 8011e20 <__ieee754_rem_pio2+0x310>)
 8011b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba2:	f7ee fb8b 	bl	80002bc <__aeabi_dsub>
 8011ba6:	a3a0      	add	r3, pc, #640	; (adr r3, 8011e28 <__ieee754_rem_pio2+0x318>)
 8011ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bac:	4604      	mov	r4, r0
 8011bae:	460d      	mov	r5, r1
 8011bb0:	f7ee fb84 	bl	80002bc <__aeabi_dsub>
 8011bb4:	4602      	mov	r2, r0
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	e9ca 2300 	strd	r2, r3, [sl]
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	4629      	mov	r1, r5
 8011bc0:	f7ee fb7c 	bl	80002bc <__aeabi_dsub>
 8011bc4:	a398      	add	r3, pc, #608	; (adr r3, 8011e28 <__ieee754_rem_pio2+0x318>)
 8011bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bca:	e7db      	b.n	8011b84 <__ieee754_rem_pio2+0x74>
 8011bcc:	f7ee fb78 	bl	80002c0 <__adddf3>
 8011bd0:	45b0      	cmp	r8, r6
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	460d      	mov	r5, r1
 8011bd6:	d016      	beq.n	8011c06 <__ieee754_rem_pio2+0xf6>
 8011bd8:	a38f      	add	r3, pc, #572	; (adr r3, 8011e18 <__ieee754_rem_pio2+0x308>)
 8011bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bde:	f7ee fb6f 	bl	80002c0 <__adddf3>
 8011be2:	4602      	mov	r2, r0
 8011be4:	460b      	mov	r3, r1
 8011be6:	e9ca 2300 	strd	r2, r3, [sl]
 8011bea:	4620      	mov	r0, r4
 8011bec:	4629      	mov	r1, r5
 8011bee:	f7ee fb65 	bl	80002bc <__aeabi_dsub>
 8011bf2:	a389      	add	r3, pc, #548	; (adr r3, 8011e18 <__ieee754_rem_pio2+0x308>)
 8011bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf8:	f7ee fb62 	bl	80002c0 <__adddf3>
 8011bfc:	f04f 3bff 	mov.w	fp, #4294967295
 8011c00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011c04:	e7c4      	b.n	8011b90 <__ieee754_rem_pio2+0x80>
 8011c06:	a386      	add	r3, pc, #536	; (adr r3, 8011e20 <__ieee754_rem_pio2+0x310>)
 8011c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0c:	f7ee fb58 	bl	80002c0 <__adddf3>
 8011c10:	a385      	add	r3, pc, #532	; (adr r3, 8011e28 <__ieee754_rem_pio2+0x318>)
 8011c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c16:	4604      	mov	r4, r0
 8011c18:	460d      	mov	r5, r1
 8011c1a:	f7ee fb51 	bl	80002c0 <__adddf3>
 8011c1e:	4602      	mov	r2, r0
 8011c20:	460b      	mov	r3, r1
 8011c22:	e9ca 2300 	strd	r2, r3, [sl]
 8011c26:	4620      	mov	r0, r4
 8011c28:	4629      	mov	r1, r5
 8011c2a:	f7ee fb47 	bl	80002bc <__aeabi_dsub>
 8011c2e:	a37e      	add	r3, pc, #504	; (adr r3, 8011e28 <__ieee754_rem_pio2+0x318>)
 8011c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c34:	e7e0      	b.n	8011bf8 <__ieee754_rem_pio2+0xe8>
 8011c36:	4b87      	ldr	r3, [pc, #540]	; (8011e54 <__ieee754_rem_pio2+0x344>)
 8011c38:	4598      	cmp	r8, r3
 8011c3a:	f300 80d9 	bgt.w	8011df0 <__ieee754_rem_pio2+0x2e0>
 8011c3e:	f001 f939 	bl	8012eb4 <fabs>
 8011c42:	ec55 4b10 	vmov	r4, r5, d0
 8011c46:	ee10 0a10 	vmov	r0, s0
 8011c4a:	a379      	add	r3, pc, #484	; (adr r3, 8011e30 <__ieee754_rem_pio2+0x320>)
 8011c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c50:	4629      	mov	r1, r5
 8011c52:	f7ee fceb 	bl	800062c <__aeabi_dmul>
 8011c56:	4b80      	ldr	r3, [pc, #512]	; (8011e58 <__ieee754_rem_pio2+0x348>)
 8011c58:	2200      	movs	r2, #0
 8011c5a:	f7ee fb31 	bl	80002c0 <__adddf3>
 8011c5e:	f7ee ff95 	bl	8000b8c <__aeabi_d2iz>
 8011c62:	4683      	mov	fp, r0
 8011c64:	f7ee fc78 	bl	8000558 <__aeabi_i2d>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	460b      	mov	r3, r1
 8011c6c:	ec43 2b18 	vmov	d8, r2, r3
 8011c70:	a367      	add	r3, pc, #412	; (adr r3, 8011e10 <__ieee754_rem_pio2+0x300>)
 8011c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c76:	f7ee fcd9 	bl	800062c <__aeabi_dmul>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	4620      	mov	r0, r4
 8011c80:	4629      	mov	r1, r5
 8011c82:	f7ee fb1b 	bl	80002bc <__aeabi_dsub>
 8011c86:	a364      	add	r3, pc, #400	; (adr r3, 8011e18 <__ieee754_rem_pio2+0x308>)
 8011c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8c:	4606      	mov	r6, r0
 8011c8e:	460f      	mov	r7, r1
 8011c90:	ec51 0b18 	vmov	r0, r1, d8
 8011c94:	f7ee fcca 	bl	800062c <__aeabi_dmul>
 8011c98:	f1bb 0f1f 	cmp.w	fp, #31
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	460d      	mov	r5, r1
 8011ca0:	dc0d      	bgt.n	8011cbe <__ieee754_rem_pio2+0x1ae>
 8011ca2:	4b6e      	ldr	r3, [pc, #440]	; (8011e5c <__ieee754_rem_pio2+0x34c>)
 8011ca4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cac:	4543      	cmp	r3, r8
 8011cae:	d006      	beq.n	8011cbe <__ieee754_rem_pio2+0x1ae>
 8011cb0:	4622      	mov	r2, r4
 8011cb2:	462b      	mov	r3, r5
 8011cb4:	4630      	mov	r0, r6
 8011cb6:	4639      	mov	r1, r7
 8011cb8:	f7ee fb00 	bl	80002bc <__aeabi_dsub>
 8011cbc:	e00f      	b.n	8011cde <__ieee754_rem_pio2+0x1ce>
 8011cbe:	462b      	mov	r3, r5
 8011cc0:	4622      	mov	r2, r4
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	4639      	mov	r1, r7
 8011cc6:	f7ee faf9 	bl	80002bc <__aeabi_dsub>
 8011cca:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011cce:	9303      	str	r3, [sp, #12]
 8011cd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011cd4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011cd8:	f1b8 0f10 	cmp.w	r8, #16
 8011cdc:	dc02      	bgt.n	8011ce4 <__ieee754_rem_pio2+0x1d4>
 8011cde:	e9ca 0100 	strd	r0, r1, [sl]
 8011ce2:	e039      	b.n	8011d58 <__ieee754_rem_pio2+0x248>
 8011ce4:	a34e      	add	r3, pc, #312	; (adr r3, 8011e20 <__ieee754_rem_pio2+0x310>)
 8011ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cea:	ec51 0b18 	vmov	r0, r1, d8
 8011cee:	f7ee fc9d 	bl	800062c <__aeabi_dmul>
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	460d      	mov	r5, r1
 8011cf6:	4602      	mov	r2, r0
 8011cf8:	460b      	mov	r3, r1
 8011cfa:	4630      	mov	r0, r6
 8011cfc:	4639      	mov	r1, r7
 8011cfe:	f7ee fadd 	bl	80002bc <__aeabi_dsub>
 8011d02:	4602      	mov	r2, r0
 8011d04:	460b      	mov	r3, r1
 8011d06:	4680      	mov	r8, r0
 8011d08:	4689      	mov	r9, r1
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	4639      	mov	r1, r7
 8011d0e:	f7ee fad5 	bl	80002bc <__aeabi_dsub>
 8011d12:	4622      	mov	r2, r4
 8011d14:	462b      	mov	r3, r5
 8011d16:	f7ee fad1 	bl	80002bc <__aeabi_dsub>
 8011d1a:	a343      	add	r3, pc, #268	; (adr r3, 8011e28 <__ieee754_rem_pio2+0x318>)
 8011d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d20:	4604      	mov	r4, r0
 8011d22:	460d      	mov	r5, r1
 8011d24:	ec51 0b18 	vmov	r0, r1, d8
 8011d28:	f7ee fc80 	bl	800062c <__aeabi_dmul>
 8011d2c:	4622      	mov	r2, r4
 8011d2e:	462b      	mov	r3, r5
 8011d30:	f7ee fac4 	bl	80002bc <__aeabi_dsub>
 8011d34:	4602      	mov	r2, r0
 8011d36:	460b      	mov	r3, r1
 8011d38:	4604      	mov	r4, r0
 8011d3a:	460d      	mov	r5, r1
 8011d3c:	4640      	mov	r0, r8
 8011d3e:	4649      	mov	r1, r9
 8011d40:	f7ee fabc 	bl	80002bc <__aeabi_dsub>
 8011d44:	9a03      	ldr	r2, [sp, #12]
 8011d46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	2b31      	cmp	r3, #49	; 0x31
 8011d4e:	dc24      	bgt.n	8011d9a <__ieee754_rem_pio2+0x28a>
 8011d50:	e9ca 0100 	strd	r0, r1, [sl]
 8011d54:	4646      	mov	r6, r8
 8011d56:	464f      	mov	r7, r9
 8011d58:	e9da 8900 	ldrd	r8, r9, [sl]
 8011d5c:	4630      	mov	r0, r6
 8011d5e:	4642      	mov	r2, r8
 8011d60:	464b      	mov	r3, r9
 8011d62:	4639      	mov	r1, r7
 8011d64:	f7ee faaa 	bl	80002bc <__aeabi_dsub>
 8011d68:	462b      	mov	r3, r5
 8011d6a:	4622      	mov	r2, r4
 8011d6c:	f7ee faa6 	bl	80002bc <__aeabi_dsub>
 8011d70:	9b02      	ldr	r3, [sp, #8]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011d78:	f6bf af0a 	bge.w	8011b90 <__ieee754_rem_pio2+0x80>
 8011d7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011d80:	f8ca 3004 	str.w	r3, [sl, #4]
 8011d84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d88:	f8ca 8000 	str.w	r8, [sl]
 8011d8c:	f8ca 0008 	str.w	r0, [sl, #8]
 8011d90:	f8ca 300c 	str.w	r3, [sl, #12]
 8011d94:	f1cb 0b00 	rsb	fp, fp, #0
 8011d98:	e6fa      	b.n	8011b90 <__ieee754_rem_pio2+0x80>
 8011d9a:	a327      	add	r3, pc, #156	; (adr r3, 8011e38 <__ieee754_rem_pio2+0x328>)
 8011d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da0:	ec51 0b18 	vmov	r0, r1, d8
 8011da4:	f7ee fc42 	bl	800062c <__aeabi_dmul>
 8011da8:	4604      	mov	r4, r0
 8011daa:	460d      	mov	r5, r1
 8011dac:	4602      	mov	r2, r0
 8011dae:	460b      	mov	r3, r1
 8011db0:	4640      	mov	r0, r8
 8011db2:	4649      	mov	r1, r9
 8011db4:	f7ee fa82 	bl	80002bc <__aeabi_dsub>
 8011db8:	4602      	mov	r2, r0
 8011dba:	460b      	mov	r3, r1
 8011dbc:	4606      	mov	r6, r0
 8011dbe:	460f      	mov	r7, r1
 8011dc0:	4640      	mov	r0, r8
 8011dc2:	4649      	mov	r1, r9
 8011dc4:	f7ee fa7a 	bl	80002bc <__aeabi_dsub>
 8011dc8:	4622      	mov	r2, r4
 8011dca:	462b      	mov	r3, r5
 8011dcc:	f7ee fa76 	bl	80002bc <__aeabi_dsub>
 8011dd0:	a31b      	add	r3, pc, #108	; (adr r3, 8011e40 <__ieee754_rem_pio2+0x330>)
 8011dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd6:	4604      	mov	r4, r0
 8011dd8:	460d      	mov	r5, r1
 8011dda:	ec51 0b18 	vmov	r0, r1, d8
 8011dde:	f7ee fc25 	bl	800062c <__aeabi_dmul>
 8011de2:	4622      	mov	r2, r4
 8011de4:	462b      	mov	r3, r5
 8011de6:	f7ee fa69 	bl	80002bc <__aeabi_dsub>
 8011dea:	4604      	mov	r4, r0
 8011dec:	460d      	mov	r5, r1
 8011dee:	e75f      	b.n	8011cb0 <__ieee754_rem_pio2+0x1a0>
 8011df0:	4b1b      	ldr	r3, [pc, #108]	; (8011e60 <__ieee754_rem_pio2+0x350>)
 8011df2:	4598      	cmp	r8, r3
 8011df4:	dd36      	ble.n	8011e64 <__ieee754_rem_pio2+0x354>
 8011df6:	ee10 2a10 	vmov	r2, s0
 8011dfa:	462b      	mov	r3, r5
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	4629      	mov	r1, r5
 8011e00:	f7ee fa5c 	bl	80002bc <__aeabi_dsub>
 8011e04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011e08:	e9ca 0100 	strd	r0, r1, [sl]
 8011e0c:	e694      	b.n	8011b38 <__ieee754_rem_pio2+0x28>
 8011e0e:	bf00      	nop
 8011e10:	54400000 	.word	0x54400000
 8011e14:	3ff921fb 	.word	0x3ff921fb
 8011e18:	1a626331 	.word	0x1a626331
 8011e1c:	3dd0b461 	.word	0x3dd0b461
 8011e20:	1a600000 	.word	0x1a600000
 8011e24:	3dd0b461 	.word	0x3dd0b461
 8011e28:	2e037073 	.word	0x2e037073
 8011e2c:	3ba3198a 	.word	0x3ba3198a
 8011e30:	6dc9c883 	.word	0x6dc9c883
 8011e34:	3fe45f30 	.word	0x3fe45f30
 8011e38:	2e000000 	.word	0x2e000000
 8011e3c:	3ba3198a 	.word	0x3ba3198a
 8011e40:	252049c1 	.word	0x252049c1
 8011e44:	397b839a 	.word	0x397b839a
 8011e48:	3fe921fb 	.word	0x3fe921fb
 8011e4c:	4002d97b 	.word	0x4002d97b
 8011e50:	3ff921fb 	.word	0x3ff921fb
 8011e54:	413921fb 	.word	0x413921fb
 8011e58:	3fe00000 	.word	0x3fe00000
 8011e5c:	0803d838 	.word	0x0803d838
 8011e60:	7fefffff 	.word	0x7fefffff
 8011e64:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011e68:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8011e6c:	ee10 0a10 	vmov	r0, s0
 8011e70:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8011e74:	ee10 6a10 	vmov	r6, s0
 8011e78:	460f      	mov	r7, r1
 8011e7a:	f7ee fe87 	bl	8000b8c <__aeabi_d2iz>
 8011e7e:	f7ee fb6b 	bl	8000558 <__aeabi_i2d>
 8011e82:	4602      	mov	r2, r0
 8011e84:	460b      	mov	r3, r1
 8011e86:	4630      	mov	r0, r6
 8011e88:	4639      	mov	r1, r7
 8011e8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011e8e:	f7ee fa15 	bl	80002bc <__aeabi_dsub>
 8011e92:	4b23      	ldr	r3, [pc, #140]	; (8011f20 <__ieee754_rem_pio2+0x410>)
 8011e94:	2200      	movs	r2, #0
 8011e96:	f7ee fbc9 	bl	800062c <__aeabi_dmul>
 8011e9a:	460f      	mov	r7, r1
 8011e9c:	4606      	mov	r6, r0
 8011e9e:	f7ee fe75 	bl	8000b8c <__aeabi_d2iz>
 8011ea2:	f7ee fb59 	bl	8000558 <__aeabi_i2d>
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	4630      	mov	r0, r6
 8011eac:	4639      	mov	r1, r7
 8011eae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011eb2:	f7ee fa03 	bl	80002bc <__aeabi_dsub>
 8011eb6:	4b1a      	ldr	r3, [pc, #104]	; (8011f20 <__ieee754_rem_pio2+0x410>)
 8011eb8:	2200      	movs	r2, #0
 8011eba:	f7ee fbb7 	bl	800062c <__aeabi_dmul>
 8011ebe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011ec2:	ad04      	add	r5, sp, #16
 8011ec4:	f04f 0803 	mov.w	r8, #3
 8011ec8:	46a9      	mov	r9, r5
 8011eca:	2600      	movs	r6, #0
 8011ecc:	2700      	movs	r7, #0
 8011ece:	4632      	mov	r2, r6
 8011ed0:	463b      	mov	r3, r7
 8011ed2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011ed6:	46c3      	mov	fp, r8
 8011ed8:	3d08      	subs	r5, #8
 8011eda:	f108 38ff 	add.w	r8, r8, #4294967295
 8011ede:	f7ee fe0d 	bl	8000afc <__aeabi_dcmpeq>
 8011ee2:	2800      	cmp	r0, #0
 8011ee4:	d1f3      	bne.n	8011ece <__ieee754_rem_pio2+0x3be>
 8011ee6:	4b0f      	ldr	r3, [pc, #60]	; (8011f24 <__ieee754_rem_pio2+0x414>)
 8011ee8:	9301      	str	r3, [sp, #4]
 8011eea:	2302      	movs	r3, #2
 8011eec:	9300      	str	r3, [sp, #0]
 8011eee:	4622      	mov	r2, r4
 8011ef0:	465b      	mov	r3, fp
 8011ef2:	4651      	mov	r1, sl
 8011ef4:	4648      	mov	r0, r9
 8011ef6:	f000 f993 	bl	8012220 <__kernel_rem_pio2>
 8011efa:	9b02      	ldr	r3, [sp, #8]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	4683      	mov	fp, r0
 8011f00:	f6bf ae46 	bge.w	8011b90 <__ieee754_rem_pio2+0x80>
 8011f04:	e9da 2100 	ldrd	r2, r1, [sl]
 8011f08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f0c:	e9ca 2300 	strd	r2, r3, [sl]
 8011f10:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011f14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f18:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011f1c:	e73a      	b.n	8011d94 <__ieee754_rem_pio2+0x284>
 8011f1e:	bf00      	nop
 8011f20:	41700000 	.word	0x41700000
 8011f24:	0803d8b8 	.word	0x0803d8b8

08011f28 <__ieee754_sqrt>:
 8011f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f2c:	ec55 4b10 	vmov	r4, r5, d0
 8011f30:	4e55      	ldr	r6, [pc, #340]	; (8012088 <__ieee754_sqrt+0x160>)
 8011f32:	43ae      	bics	r6, r5
 8011f34:	ee10 0a10 	vmov	r0, s0
 8011f38:	ee10 3a10 	vmov	r3, s0
 8011f3c:	462a      	mov	r2, r5
 8011f3e:	4629      	mov	r1, r5
 8011f40:	d110      	bne.n	8011f64 <__ieee754_sqrt+0x3c>
 8011f42:	ee10 2a10 	vmov	r2, s0
 8011f46:	462b      	mov	r3, r5
 8011f48:	f7ee fb70 	bl	800062c <__aeabi_dmul>
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	460b      	mov	r3, r1
 8011f50:	4620      	mov	r0, r4
 8011f52:	4629      	mov	r1, r5
 8011f54:	f7ee f9b4 	bl	80002c0 <__adddf3>
 8011f58:	4604      	mov	r4, r0
 8011f5a:	460d      	mov	r5, r1
 8011f5c:	ec45 4b10 	vmov	d0, r4, r5
 8011f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f64:	2d00      	cmp	r5, #0
 8011f66:	dc10      	bgt.n	8011f8a <__ieee754_sqrt+0x62>
 8011f68:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011f6c:	4330      	orrs	r0, r6
 8011f6e:	d0f5      	beq.n	8011f5c <__ieee754_sqrt+0x34>
 8011f70:	b15d      	cbz	r5, 8011f8a <__ieee754_sqrt+0x62>
 8011f72:	ee10 2a10 	vmov	r2, s0
 8011f76:	462b      	mov	r3, r5
 8011f78:	ee10 0a10 	vmov	r0, s0
 8011f7c:	f7ee f99e 	bl	80002bc <__aeabi_dsub>
 8011f80:	4602      	mov	r2, r0
 8011f82:	460b      	mov	r3, r1
 8011f84:	f7ee fc7c 	bl	8000880 <__aeabi_ddiv>
 8011f88:	e7e6      	b.n	8011f58 <__ieee754_sqrt+0x30>
 8011f8a:	1512      	asrs	r2, r2, #20
 8011f8c:	d074      	beq.n	8012078 <__ieee754_sqrt+0x150>
 8011f8e:	07d4      	lsls	r4, r2, #31
 8011f90:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011f94:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8011f98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011f9c:	bf5e      	ittt	pl
 8011f9e:	0fda      	lsrpl	r2, r3, #31
 8011fa0:	005b      	lslpl	r3, r3, #1
 8011fa2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8011fa6:	2400      	movs	r4, #0
 8011fa8:	0fda      	lsrs	r2, r3, #31
 8011faa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011fae:	107f      	asrs	r7, r7, #1
 8011fb0:	005b      	lsls	r3, r3, #1
 8011fb2:	2516      	movs	r5, #22
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011fba:	1886      	adds	r6, r0, r2
 8011fbc:	428e      	cmp	r6, r1
 8011fbe:	bfde      	ittt	le
 8011fc0:	1b89      	suble	r1, r1, r6
 8011fc2:	18b0      	addle	r0, r6, r2
 8011fc4:	18a4      	addle	r4, r4, r2
 8011fc6:	0049      	lsls	r1, r1, #1
 8011fc8:	3d01      	subs	r5, #1
 8011fca:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8011fce:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011fd2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011fd6:	d1f0      	bne.n	8011fba <__ieee754_sqrt+0x92>
 8011fd8:	462a      	mov	r2, r5
 8011fda:	f04f 0e20 	mov.w	lr, #32
 8011fde:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011fe2:	4281      	cmp	r1, r0
 8011fe4:	eb06 0c05 	add.w	ip, r6, r5
 8011fe8:	dc02      	bgt.n	8011ff0 <__ieee754_sqrt+0xc8>
 8011fea:	d113      	bne.n	8012014 <__ieee754_sqrt+0xec>
 8011fec:	459c      	cmp	ip, r3
 8011fee:	d811      	bhi.n	8012014 <__ieee754_sqrt+0xec>
 8011ff0:	f1bc 0f00 	cmp.w	ip, #0
 8011ff4:	eb0c 0506 	add.w	r5, ip, r6
 8011ff8:	da43      	bge.n	8012082 <__ieee754_sqrt+0x15a>
 8011ffa:	2d00      	cmp	r5, #0
 8011ffc:	db41      	blt.n	8012082 <__ieee754_sqrt+0x15a>
 8011ffe:	f100 0801 	add.w	r8, r0, #1
 8012002:	1a09      	subs	r1, r1, r0
 8012004:	459c      	cmp	ip, r3
 8012006:	bf88      	it	hi
 8012008:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801200c:	eba3 030c 	sub.w	r3, r3, ip
 8012010:	4432      	add	r2, r6
 8012012:	4640      	mov	r0, r8
 8012014:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012018:	f1be 0e01 	subs.w	lr, lr, #1
 801201c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012020:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012024:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012028:	d1db      	bne.n	8011fe2 <__ieee754_sqrt+0xba>
 801202a:	430b      	orrs	r3, r1
 801202c:	d006      	beq.n	801203c <__ieee754_sqrt+0x114>
 801202e:	1c50      	adds	r0, r2, #1
 8012030:	bf13      	iteet	ne
 8012032:	3201      	addne	r2, #1
 8012034:	3401      	addeq	r4, #1
 8012036:	4672      	moveq	r2, lr
 8012038:	f022 0201 	bicne.w	r2, r2, #1
 801203c:	1063      	asrs	r3, r4, #1
 801203e:	0852      	lsrs	r2, r2, #1
 8012040:	07e1      	lsls	r1, r4, #31
 8012042:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012046:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801204a:	bf48      	it	mi
 801204c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012050:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012054:	4614      	mov	r4, r2
 8012056:	e781      	b.n	8011f5c <__ieee754_sqrt+0x34>
 8012058:	0ad9      	lsrs	r1, r3, #11
 801205a:	3815      	subs	r0, #21
 801205c:	055b      	lsls	r3, r3, #21
 801205e:	2900      	cmp	r1, #0
 8012060:	d0fa      	beq.n	8012058 <__ieee754_sqrt+0x130>
 8012062:	02cd      	lsls	r5, r1, #11
 8012064:	d50a      	bpl.n	801207c <__ieee754_sqrt+0x154>
 8012066:	f1c2 0420 	rsb	r4, r2, #32
 801206a:	fa23 f404 	lsr.w	r4, r3, r4
 801206e:	1e55      	subs	r5, r2, #1
 8012070:	4093      	lsls	r3, r2
 8012072:	4321      	orrs	r1, r4
 8012074:	1b42      	subs	r2, r0, r5
 8012076:	e78a      	b.n	8011f8e <__ieee754_sqrt+0x66>
 8012078:	4610      	mov	r0, r2
 801207a:	e7f0      	b.n	801205e <__ieee754_sqrt+0x136>
 801207c:	0049      	lsls	r1, r1, #1
 801207e:	3201      	adds	r2, #1
 8012080:	e7ef      	b.n	8012062 <__ieee754_sqrt+0x13a>
 8012082:	4680      	mov	r8, r0
 8012084:	e7bd      	b.n	8012002 <__ieee754_sqrt+0xda>
 8012086:	bf00      	nop
 8012088:	7ff00000 	.word	0x7ff00000
 801208c:	00000000 	.word	0x00000000

08012090 <__kernel_cos>:
 8012090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012094:	ec57 6b10 	vmov	r6, r7, d0
 8012098:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801209c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80120a0:	ed8d 1b00 	vstr	d1, [sp]
 80120a4:	da07      	bge.n	80120b6 <__kernel_cos+0x26>
 80120a6:	ee10 0a10 	vmov	r0, s0
 80120aa:	4639      	mov	r1, r7
 80120ac:	f7ee fd6e 	bl	8000b8c <__aeabi_d2iz>
 80120b0:	2800      	cmp	r0, #0
 80120b2:	f000 8088 	beq.w	80121c6 <__kernel_cos+0x136>
 80120b6:	4632      	mov	r2, r6
 80120b8:	463b      	mov	r3, r7
 80120ba:	4630      	mov	r0, r6
 80120bc:	4639      	mov	r1, r7
 80120be:	f7ee fab5 	bl	800062c <__aeabi_dmul>
 80120c2:	4b51      	ldr	r3, [pc, #324]	; (8012208 <__kernel_cos+0x178>)
 80120c4:	2200      	movs	r2, #0
 80120c6:	4604      	mov	r4, r0
 80120c8:	460d      	mov	r5, r1
 80120ca:	f7ee faaf 	bl	800062c <__aeabi_dmul>
 80120ce:	a340      	add	r3, pc, #256	; (adr r3, 80121d0 <__kernel_cos+0x140>)
 80120d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d4:	4682      	mov	sl, r0
 80120d6:	468b      	mov	fp, r1
 80120d8:	4620      	mov	r0, r4
 80120da:	4629      	mov	r1, r5
 80120dc:	f7ee faa6 	bl	800062c <__aeabi_dmul>
 80120e0:	a33d      	add	r3, pc, #244	; (adr r3, 80121d8 <__kernel_cos+0x148>)
 80120e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e6:	f7ee f8eb 	bl	80002c0 <__adddf3>
 80120ea:	4622      	mov	r2, r4
 80120ec:	462b      	mov	r3, r5
 80120ee:	f7ee fa9d 	bl	800062c <__aeabi_dmul>
 80120f2:	a33b      	add	r3, pc, #236	; (adr r3, 80121e0 <__kernel_cos+0x150>)
 80120f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f8:	f7ee f8e0 	bl	80002bc <__aeabi_dsub>
 80120fc:	4622      	mov	r2, r4
 80120fe:	462b      	mov	r3, r5
 8012100:	f7ee fa94 	bl	800062c <__aeabi_dmul>
 8012104:	a338      	add	r3, pc, #224	; (adr r3, 80121e8 <__kernel_cos+0x158>)
 8012106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210a:	f7ee f8d9 	bl	80002c0 <__adddf3>
 801210e:	4622      	mov	r2, r4
 8012110:	462b      	mov	r3, r5
 8012112:	f7ee fa8b 	bl	800062c <__aeabi_dmul>
 8012116:	a336      	add	r3, pc, #216	; (adr r3, 80121f0 <__kernel_cos+0x160>)
 8012118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801211c:	f7ee f8ce 	bl	80002bc <__aeabi_dsub>
 8012120:	4622      	mov	r2, r4
 8012122:	462b      	mov	r3, r5
 8012124:	f7ee fa82 	bl	800062c <__aeabi_dmul>
 8012128:	a333      	add	r3, pc, #204	; (adr r3, 80121f8 <__kernel_cos+0x168>)
 801212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801212e:	f7ee f8c7 	bl	80002c0 <__adddf3>
 8012132:	4622      	mov	r2, r4
 8012134:	462b      	mov	r3, r5
 8012136:	f7ee fa79 	bl	800062c <__aeabi_dmul>
 801213a:	4622      	mov	r2, r4
 801213c:	462b      	mov	r3, r5
 801213e:	f7ee fa75 	bl	800062c <__aeabi_dmul>
 8012142:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012146:	4604      	mov	r4, r0
 8012148:	460d      	mov	r5, r1
 801214a:	4630      	mov	r0, r6
 801214c:	4639      	mov	r1, r7
 801214e:	f7ee fa6d 	bl	800062c <__aeabi_dmul>
 8012152:	460b      	mov	r3, r1
 8012154:	4602      	mov	r2, r0
 8012156:	4629      	mov	r1, r5
 8012158:	4620      	mov	r0, r4
 801215a:	f7ee f8af 	bl	80002bc <__aeabi_dsub>
 801215e:	4b2b      	ldr	r3, [pc, #172]	; (801220c <__kernel_cos+0x17c>)
 8012160:	4598      	cmp	r8, r3
 8012162:	4606      	mov	r6, r0
 8012164:	460f      	mov	r7, r1
 8012166:	dc10      	bgt.n	801218a <__kernel_cos+0xfa>
 8012168:	4602      	mov	r2, r0
 801216a:	460b      	mov	r3, r1
 801216c:	4650      	mov	r0, sl
 801216e:	4659      	mov	r1, fp
 8012170:	f7ee f8a4 	bl	80002bc <__aeabi_dsub>
 8012174:	460b      	mov	r3, r1
 8012176:	4926      	ldr	r1, [pc, #152]	; (8012210 <__kernel_cos+0x180>)
 8012178:	4602      	mov	r2, r0
 801217a:	2000      	movs	r0, #0
 801217c:	f7ee f89e 	bl	80002bc <__aeabi_dsub>
 8012180:	ec41 0b10 	vmov	d0, r0, r1
 8012184:	b003      	add	sp, #12
 8012186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801218a:	4b22      	ldr	r3, [pc, #136]	; (8012214 <__kernel_cos+0x184>)
 801218c:	4920      	ldr	r1, [pc, #128]	; (8012210 <__kernel_cos+0x180>)
 801218e:	4598      	cmp	r8, r3
 8012190:	bfcc      	ite	gt
 8012192:	4d21      	ldrgt	r5, [pc, #132]	; (8012218 <__kernel_cos+0x188>)
 8012194:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012198:	2400      	movs	r4, #0
 801219a:	4622      	mov	r2, r4
 801219c:	462b      	mov	r3, r5
 801219e:	2000      	movs	r0, #0
 80121a0:	f7ee f88c 	bl	80002bc <__aeabi_dsub>
 80121a4:	4622      	mov	r2, r4
 80121a6:	4680      	mov	r8, r0
 80121a8:	4689      	mov	r9, r1
 80121aa:	462b      	mov	r3, r5
 80121ac:	4650      	mov	r0, sl
 80121ae:	4659      	mov	r1, fp
 80121b0:	f7ee f884 	bl	80002bc <__aeabi_dsub>
 80121b4:	4632      	mov	r2, r6
 80121b6:	463b      	mov	r3, r7
 80121b8:	f7ee f880 	bl	80002bc <__aeabi_dsub>
 80121bc:	4602      	mov	r2, r0
 80121be:	460b      	mov	r3, r1
 80121c0:	4640      	mov	r0, r8
 80121c2:	4649      	mov	r1, r9
 80121c4:	e7da      	b.n	801217c <__kernel_cos+0xec>
 80121c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012200 <__kernel_cos+0x170>
 80121ca:	e7db      	b.n	8012184 <__kernel_cos+0xf4>
 80121cc:	f3af 8000 	nop.w
 80121d0:	be8838d4 	.word	0xbe8838d4
 80121d4:	bda8fae9 	.word	0xbda8fae9
 80121d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80121dc:	3e21ee9e 	.word	0x3e21ee9e
 80121e0:	809c52ad 	.word	0x809c52ad
 80121e4:	3e927e4f 	.word	0x3e927e4f
 80121e8:	19cb1590 	.word	0x19cb1590
 80121ec:	3efa01a0 	.word	0x3efa01a0
 80121f0:	16c15177 	.word	0x16c15177
 80121f4:	3f56c16c 	.word	0x3f56c16c
 80121f8:	5555554c 	.word	0x5555554c
 80121fc:	3fa55555 	.word	0x3fa55555
 8012200:	00000000 	.word	0x00000000
 8012204:	3ff00000 	.word	0x3ff00000
 8012208:	3fe00000 	.word	0x3fe00000
 801220c:	3fd33332 	.word	0x3fd33332
 8012210:	3ff00000 	.word	0x3ff00000
 8012214:	3fe90000 	.word	0x3fe90000
 8012218:	3fd20000 	.word	0x3fd20000
 801221c:	00000000 	.word	0x00000000

08012220 <__kernel_rem_pio2>:
 8012220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012224:	ed2d 8b02 	vpush	{d8}
 8012228:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801222c:	f112 0f14 	cmn.w	r2, #20
 8012230:	9308      	str	r3, [sp, #32]
 8012232:	9101      	str	r1, [sp, #4]
 8012234:	4bc4      	ldr	r3, [pc, #784]	; (8012548 <__kernel_rem_pio2+0x328>)
 8012236:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012238:	900b      	str	r0, [sp, #44]	; 0x2c
 801223a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801223e:	9302      	str	r3, [sp, #8]
 8012240:	9b08      	ldr	r3, [sp, #32]
 8012242:	f103 33ff 	add.w	r3, r3, #4294967295
 8012246:	bfa8      	it	ge
 8012248:	1ed4      	subge	r4, r2, #3
 801224a:	9306      	str	r3, [sp, #24]
 801224c:	bfb2      	itee	lt
 801224e:	2400      	movlt	r4, #0
 8012250:	2318      	movge	r3, #24
 8012252:	fb94 f4f3 	sdivge	r4, r4, r3
 8012256:	f06f 0317 	mvn.w	r3, #23
 801225a:	fb04 3303 	mla	r3, r4, r3, r3
 801225e:	eb03 0a02 	add.w	sl, r3, r2
 8012262:	9b02      	ldr	r3, [sp, #8]
 8012264:	9a06      	ldr	r2, [sp, #24]
 8012266:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8012538 <__kernel_rem_pio2+0x318>
 801226a:	eb03 0802 	add.w	r8, r3, r2
 801226e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012270:	1aa7      	subs	r7, r4, r2
 8012272:	ae22      	add	r6, sp, #136	; 0x88
 8012274:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012278:	2500      	movs	r5, #0
 801227a:	4545      	cmp	r5, r8
 801227c:	dd13      	ble.n	80122a6 <__kernel_rem_pio2+0x86>
 801227e:	9b08      	ldr	r3, [sp, #32]
 8012280:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8012538 <__kernel_rem_pio2+0x318>
 8012284:	aa22      	add	r2, sp, #136	; 0x88
 8012286:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801228a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801228e:	f04f 0800 	mov.w	r8, #0
 8012292:	9b02      	ldr	r3, [sp, #8]
 8012294:	4598      	cmp	r8, r3
 8012296:	dc2f      	bgt.n	80122f8 <__kernel_rem_pio2+0xd8>
 8012298:	ed8d 8b04 	vstr	d8, [sp, #16]
 801229c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80122a0:	462f      	mov	r7, r5
 80122a2:	2600      	movs	r6, #0
 80122a4:	e01b      	b.n	80122de <__kernel_rem_pio2+0xbe>
 80122a6:	42ef      	cmn	r7, r5
 80122a8:	d407      	bmi.n	80122ba <__kernel_rem_pio2+0x9a>
 80122aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80122ae:	f7ee f953 	bl	8000558 <__aeabi_i2d>
 80122b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80122b6:	3501      	adds	r5, #1
 80122b8:	e7df      	b.n	801227a <__kernel_rem_pio2+0x5a>
 80122ba:	ec51 0b18 	vmov	r0, r1, d8
 80122be:	e7f8      	b.n	80122b2 <__kernel_rem_pio2+0x92>
 80122c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80122c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80122c8:	f7ee f9b0 	bl	800062c <__aeabi_dmul>
 80122cc:	4602      	mov	r2, r0
 80122ce:	460b      	mov	r3, r1
 80122d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80122d4:	f7ed fff4 	bl	80002c0 <__adddf3>
 80122d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80122dc:	3601      	adds	r6, #1
 80122de:	9b06      	ldr	r3, [sp, #24]
 80122e0:	429e      	cmp	r6, r3
 80122e2:	f1a7 0708 	sub.w	r7, r7, #8
 80122e6:	ddeb      	ble.n	80122c0 <__kernel_rem_pio2+0xa0>
 80122e8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80122ec:	f108 0801 	add.w	r8, r8, #1
 80122f0:	ecab 7b02 	vstmia	fp!, {d7}
 80122f4:	3508      	adds	r5, #8
 80122f6:	e7cc      	b.n	8012292 <__kernel_rem_pio2+0x72>
 80122f8:	9b02      	ldr	r3, [sp, #8]
 80122fa:	aa0e      	add	r2, sp, #56	; 0x38
 80122fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012300:	930d      	str	r3, [sp, #52]	; 0x34
 8012302:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012304:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012308:	9c02      	ldr	r4, [sp, #8]
 801230a:	930c      	str	r3, [sp, #48]	; 0x30
 801230c:	00e3      	lsls	r3, r4, #3
 801230e:	930a      	str	r3, [sp, #40]	; 0x28
 8012310:	ab9a      	add	r3, sp, #616	; 0x268
 8012312:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012316:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801231a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801231e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012320:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8012324:	46c3      	mov	fp, r8
 8012326:	46a1      	mov	r9, r4
 8012328:	f1b9 0f00 	cmp.w	r9, #0
 801232c:	f1a5 0508 	sub.w	r5, r5, #8
 8012330:	dc77      	bgt.n	8012422 <__kernel_rem_pio2+0x202>
 8012332:	ec47 6b10 	vmov	d0, r6, r7
 8012336:	4650      	mov	r0, sl
 8012338:	f000 fe5a 	bl	8012ff0 <scalbn>
 801233c:	ec57 6b10 	vmov	r6, r7, d0
 8012340:	2200      	movs	r2, #0
 8012342:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012346:	ee10 0a10 	vmov	r0, s0
 801234a:	4639      	mov	r1, r7
 801234c:	f7ee f96e 	bl	800062c <__aeabi_dmul>
 8012350:	ec41 0b10 	vmov	d0, r0, r1
 8012354:	f000 fdc4 	bl	8012ee0 <floor>
 8012358:	4b7c      	ldr	r3, [pc, #496]	; (801254c <__kernel_rem_pio2+0x32c>)
 801235a:	ec51 0b10 	vmov	r0, r1, d0
 801235e:	2200      	movs	r2, #0
 8012360:	f7ee f964 	bl	800062c <__aeabi_dmul>
 8012364:	4602      	mov	r2, r0
 8012366:	460b      	mov	r3, r1
 8012368:	4630      	mov	r0, r6
 801236a:	4639      	mov	r1, r7
 801236c:	f7ed ffa6 	bl	80002bc <__aeabi_dsub>
 8012370:	460f      	mov	r7, r1
 8012372:	4606      	mov	r6, r0
 8012374:	f7ee fc0a 	bl	8000b8c <__aeabi_d2iz>
 8012378:	9004      	str	r0, [sp, #16]
 801237a:	f7ee f8ed 	bl	8000558 <__aeabi_i2d>
 801237e:	4602      	mov	r2, r0
 8012380:	460b      	mov	r3, r1
 8012382:	4630      	mov	r0, r6
 8012384:	4639      	mov	r1, r7
 8012386:	f7ed ff99 	bl	80002bc <__aeabi_dsub>
 801238a:	f1ba 0f00 	cmp.w	sl, #0
 801238e:	4606      	mov	r6, r0
 8012390:	460f      	mov	r7, r1
 8012392:	dd6d      	ble.n	8012470 <__kernel_rem_pio2+0x250>
 8012394:	1e62      	subs	r2, r4, #1
 8012396:	ab0e      	add	r3, sp, #56	; 0x38
 8012398:	9d04      	ldr	r5, [sp, #16]
 801239a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801239e:	f1ca 0118 	rsb	r1, sl, #24
 80123a2:	fa40 f301 	asr.w	r3, r0, r1
 80123a6:	441d      	add	r5, r3
 80123a8:	408b      	lsls	r3, r1
 80123aa:	1ac0      	subs	r0, r0, r3
 80123ac:	ab0e      	add	r3, sp, #56	; 0x38
 80123ae:	9504      	str	r5, [sp, #16]
 80123b0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80123b4:	f1ca 0317 	rsb	r3, sl, #23
 80123b8:	fa40 fb03 	asr.w	fp, r0, r3
 80123bc:	f1bb 0f00 	cmp.w	fp, #0
 80123c0:	dd65      	ble.n	801248e <__kernel_rem_pio2+0x26e>
 80123c2:	9b04      	ldr	r3, [sp, #16]
 80123c4:	2200      	movs	r2, #0
 80123c6:	3301      	adds	r3, #1
 80123c8:	9304      	str	r3, [sp, #16]
 80123ca:	4615      	mov	r5, r2
 80123cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80123d0:	4294      	cmp	r4, r2
 80123d2:	f300 809c 	bgt.w	801250e <__kernel_rem_pio2+0x2ee>
 80123d6:	f1ba 0f00 	cmp.w	sl, #0
 80123da:	dd07      	ble.n	80123ec <__kernel_rem_pio2+0x1cc>
 80123dc:	f1ba 0f01 	cmp.w	sl, #1
 80123e0:	f000 80c0 	beq.w	8012564 <__kernel_rem_pio2+0x344>
 80123e4:	f1ba 0f02 	cmp.w	sl, #2
 80123e8:	f000 80c6 	beq.w	8012578 <__kernel_rem_pio2+0x358>
 80123ec:	f1bb 0f02 	cmp.w	fp, #2
 80123f0:	d14d      	bne.n	801248e <__kernel_rem_pio2+0x26e>
 80123f2:	4632      	mov	r2, r6
 80123f4:	463b      	mov	r3, r7
 80123f6:	4956      	ldr	r1, [pc, #344]	; (8012550 <__kernel_rem_pio2+0x330>)
 80123f8:	2000      	movs	r0, #0
 80123fa:	f7ed ff5f 	bl	80002bc <__aeabi_dsub>
 80123fe:	4606      	mov	r6, r0
 8012400:	460f      	mov	r7, r1
 8012402:	2d00      	cmp	r5, #0
 8012404:	d043      	beq.n	801248e <__kernel_rem_pio2+0x26e>
 8012406:	4650      	mov	r0, sl
 8012408:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8012540 <__kernel_rem_pio2+0x320>
 801240c:	f000 fdf0 	bl	8012ff0 <scalbn>
 8012410:	4630      	mov	r0, r6
 8012412:	4639      	mov	r1, r7
 8012414:	ec53 2b10 	vmov	r2, r3, d0
 8012418:	f7ed ff50 	bl	80002bc <__aeabi_dsub>
 801241c:	4606      	mov	r6, r0
 801241e:	460f      	mov	r7, r1
 8012420:	e035      	b.n	801248e <__kernel_rem_pio2+0x26e>
 8012422:	4b4c      	ldr	r3, [pc, #304]	; (8012554 <__kernel_rem_pio2+0x334>)
 8012424:	2200      	movs	r2, #0
 8012426:	4630      	mov	r0, r6
 8012428:	4639      	mov	r1, r7
 801242a:	f7ee f8ff 	bl	800062c <__aeabi_dmul>
 801242e:	f7ee fbad 	bl	8000b8c <__aeabi_d2iz>
 8012432:	f7ee f891 	bl	8000558 <__aeabi_i2d>
 8012436:	4602      	mov	r2, r0
 8012438:	460b      	mov	r3, r1
 801243a:	ec43 2b18 	vmov	d8, r2, r3
 801243e:	4b46      	ldr	r3, [pc, #280]	; (8012558 <__kernel_rem_pio2+0x338>)
 8012440:	2200      	movs	r2, #0
 8012442:	f7ee f8f3 	bl	800062c <__aeabi_dmul>
 8012446:	4602      	mov	r2, r0
 8012448:	460b      	mov	r3, r1
 801244a:	4630      	mov	r0, r6
 801244c:	4639      	mov	r1, r7
 801244e:	f7ed ff35 	bl	80002bc <__aeabi_dsub>
 8012452:	f7ee fb9b 	bl	8000b8c <__aeabi_d2iz>
 8012456:	e9d5 2300 	ldrd	r2, r3, [r5]
 801245a:	f84b 0b04 	str.w	r0, [fp], #4
 801245e:	ec51 0b18 	vmov	r0, r1, d8
 8012462:	f7ed ff2d 	bl	80002c0 <__adddf3>
 8012466:	f109 39ff 	add.w	r9, r9, #4294967295
 801246a:	4606      	mov	r6, r0
 801246c:	460f      	mov	r7, r1
 801246e:	e75b      	b.n	8012328 <__kernel_rem_pio2+0x108>
 8012470:	d106      	bne.n	8012480 <__kernel_rem_pio2+0x260>
 8012472:	1e63      	subs	r3, r4, #1
 8012474:	aa0e      	add	r2, sp, #56	; 0x38
 8012476:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801247a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801247e:	e79d      	b.n	80123bc <__kernel_rem_pio2+0x19c>
 8012480:	4b36      	ldr	r3, [pc, #216]	; (801255c <__kernel_rem_pio2+0x33c>)
 8012482:	2200      	movs	r2, #0
 8012484:	f7ee fb58 	bl	8000b38 <__aeabi_dcmpge>
 8012488:	2800      	cmp	r0, #0
 801248a:	d13d      	bne.n	8012508 <__kernel_rem_pio2+0x2e8>
 801248c:	4683      	mov	fp, r0
 801248e:	2200      	movs	r2, #0
 8012490:	2300      	movs	r3, #0
 8012492:	4630      	mov	r0, r6
 8012494:	4639      	mov	r1, r7
 8012496:	f7ee fb31 	bl	8000afc <__aeabi_dcmpeq>
 801249a:	2800      	cmp	r0, #0
 801249c:	f000 80c0 	beq.w	8012620 <__kernel_rem_pio2+0x400>
 80124a0:	1e65      	subs	r5, r4, #1
 80124a2:	462b      	mov	r3, r5
 80124a4:	2200      	movs	r2, #0
 80124a6:	9902      	ldr	r1, [sp, #8]
 80124a8:	428b      	cmp	r3, r1
 80124aa:	da6c      	bge.n	8012586 <__kernel_rem_pio2+0x366>
 80124ac:	2a00      	cmp	r2, #0
 80124ae:	f000 8089 	beq.w	80125c4 <__kernel_rem_pio2+0x3a4>
 80124b2:	ab0e      	add	r3, sp, #56	; 0x38
 80124b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80124b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	f000 80ad 	beq.w	801261c <__kernel_rem_pio2+0x3fc>
 80124c2:	4650      	mov	r0, sl
 80124c4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8012540 <__kernel_rem_pio2+0x320>
 80124c8:	f000 fd92 	bl	8012ff0 <scalbn>
 80124cc:	ab9a      	add	r3, sp, #616	; 0x268
 80124ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80124d2:	ec57 6b10 	vmov	r6, r7, d0
 80124d6:	00ec      	lsls	r4, r5, #3
 80124d8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80124dc:	46aa      	mov	sl, r5
 80124de:	f1ba 0f00 	cmp.w	sl, #0
 80124e2:	f280 80d6 	bge.w	8012692 <__kernel_rem_pio2+0x472>
 80124e6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8012538 <__kernel_rem_pio2+0x318>
 80124ea:	462e      	mov	r6, r5
 80124ec:	2e00      	cmp	r6, #0
 80124ee:	f2c0 8104 	blt.w	80126fa <__kernel_rem_pio2+0x4da>
 80124f2:	ab72      	add	r3, sp, #456	; 0x1c8
 80124f4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80124f8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8012560 <__kernel_rem_pio2+0x340>
 80124fc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8012500:	f04f 0800 	mov.w	r8, #0
 8012504:	1baf      	subs	r7, r5, r6
 8012506:	e0ea      	b.n	80126de <__kernel_rem_pio2+0x4be>
 8012508:	f04f 0b02 	mov.w	fp, #2
 801250c:	e759      	b.n	80123c2 <__kernel_rem_pio2+0x1a2>
 801250e:	f8d8 3000 	ldr.w	r3, [r8]
 8012512:	b955      	cbnz	r5, 801252a <__kernel_rem_pio2+0x30a>
 8012514:	b123      	cbz	r3, 8012520 <__kernel_rem_pio2+0x300>
 8012516:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801251a:	f8c8 3000 	str.w	r3, [r8]
 801251e:	2301      	movs	r3, #1
 8012520:	3201      	adds	r2, #1
 8012522:	f108 0804 	add.w	r8, r8, #4
 8012526:	461d      	mov	r5, r3
 8012528:	e752      	b.n	80123d0 <__kernel_rem_pio2+0x1b0>
 801252a:	1acb      	subs	r3, r1, r3
 801252c:	f8c8 3000 	str.w	r3, [r8]
 8012530:	462b      	mov	r3, r5
 8012532:	e7f5      	b.n	8012520 <__kernel_rem_pio2+0x300>
 8012534:	f3af 8000 	nop.w
	...
 8012544:	3ff00000 	.word	0x3ff00000
 8012548:	0803da00 	.word	0x0803da00
 801254c:	40200000 	.word	0x40200000
 8012550:	3ff00000 	.word	0x3ff00000
 8012554:	3e700000 	.word	0x3e700000
 8012558:	41700000 	.word	0x41700000
 801255c:	3fe00000 	.word	0x3fe00000
 8012560:	0803d9c0 	.word	0x0803d9c0
 8012564:	1e62      	subs	r2, r4, #1
 8012566:	ab0e      	add	r3, sp, #56	; 0x38
 8012568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801256c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012570:	a90e      	add	r1, sp, #56	; 0x38
 8012572:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012576:	e739      	b.n	80123ec <__kernel_rem_pio2+0x1cc>
 8012578:	1e62      	subs	r2, r4, #1
 801257a:	ab0e      	add	r3, sp, #56	; 0x38
 801257c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012580:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012584:	e7f4      	b.n	8012570 <__kernel_rem_pio2+0x350>
 8012586:	a90e      	add	r1, sp, #56	; 0x38
 8012588:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801258c:	3b01      	subs	r3, #1
 801258e:	430a      	orrs	r2, r1
 8012590:	e789      	b.n	80124a6 <__kernel_rem_pio2+0x286>
 8012592:	3301      	adds	r3, #1
 8012594:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012598:	2900      	cmp	r1, #0
 801259a:	d0fa      	beq.n	8012592 <__kernel_rem_pio2+0x372>
 801259c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801259e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80125a2:	446a      	add	r2, sp
 80125a4:	3a98      	subs	r2, #152	; 0x98
 80125a6:	920a      	str	r2, [sp, #40]	; 0x28
 80125a8:	9a08      	ldr	r2, [sp, #32]
 80125aa:	18e3      	adds	r3, r4, r3
 80125ac:	18a5      	adds	r5, r4, r2
 80125ae:	aa22      	add	r2, sp, #136	; 0x88
 80125b0:	f104 0801 	add.w	r8, r4, #1
 80125b4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80125b8:	9304      	str	r3, [sp, #16]
 80125ba:	9b04      	ldr	r3, [sp, #16]
 80125bc:	4543      	cmp	r3, r8
 80125be:	da04      	bge.n	80125ca <__kernel_rem_pio2+0x3aa>
 80125c0:	461c      	mov	r4, r3
 80125c2:	e6a3      	b.n	801230c <__kernel_rem_pio2+0xec>
 80125c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80125c6:	2301      	movs	r3, #1
 80125c8:	e7e4      	b.n	8012594 <__kernel_rem_pio2+0x374>
 80125ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80125d0:	f7ed ffc2 	bl	8000558 <__aeabi_i2d>
 80125d4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80125d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125da:	46ab      	mov	fp, r5
 80125dc:	461c      	mov	r4, r3
 80125de:	f04f 0900 	mov.w	r9, #0
 80125e2:	2600      	movs	r6, #0
 80125e4:	2700      	movs	r7, #0
 80125e6:	9b06      	ldr	r3, [sp, #24]
 80125e8:	4599      	cmp	r9, r3
 80125ea:	dd06      	ble.n	80125fa <__kernel_rem_pio2+0x3da>
 80125ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125ee:	e8e3 6702 	strd	r6, r7, [r3], #8
 80125f2:	f108 0801 	add.w	r8, r8, #1
 80125f6:	930a      	str	r3, [sp, #40]	; 0x28
 80125f8:	e7df      	b.n	80125ba <__kernel_rem_pio2+0x39a>
 80125fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80125fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012602:	f7ee f813 	bl	800062c <__aeabi_dmul>
 8012606:	4602      	mov	r2, r0
 8012608:	460b      	mov	r3, r1
 801260a:	4630      	mov	r0, r6
 801260c:	4639      	mov	r1, r7
 801260e:	f7ed fe57 	bl	80002c0 <__adddf3>
 8012612:	f109 0901 	add.w	r9, r9, #1
 8012616:	4606      	mov	r6, r0
 8012618:	460f      	mov	r7, r1
 801261a:	e7e4      	b.n	80125e6 <__kernel_rem_pio2+0x3c6>
 801261c:	3d01      	subs	r5, #1
 801261e:	e748      	b.n	80124b2 <__kernel_rem_pio2+0x292>
 8012620:	ec47 6b10 	vmov	d0, r6, r7
 8012624:	f1ca 0000 	rsb	r0, sl, #0
 8012628:	f000 fce2 	bl	8012ff0 <scalbn>
 801262c:	ec57 6b10 	vmov	r6, r7, d0
 8012630:	4ba0      	ldr	r3, [pc, #640]	; (80128b4 <__kernel_rem_pio2+0x694>)
 8012632:	ee10 0a10 	vmov	r0, s0
 8012636:	2200      	movs	r2, #0
 8012638:	4639      	mov	r1, r7
 801263a:	f7ee fa7d 	bl	8000b38 <__aeabi_dcmpge>
 801263e:	b1f8      	cbz	r0, 8012680 <__kernel_rem_pio2+0x460>
 8012640:	4b9d      	ldr	r3, [pc, #628]	; (80128b8 <__kernel_rem_pio2+0x698>)
 8012642:	2200      	movs	r2, #0
 8012644:	4630      	mov	r0, r6
 8012646:	4639      	mov	r1, r7
 8012648:	f7ed fff0 	bl	800062c <__aeabi_dmul>
 801264c:	f7ee fa9e 	bl	8000b8c <__aeabi_d2iz>
 8012650:	4680      	mov	r8, r0
 8012652:	f7ed ff81 	bl	8000558 <__aeabi_i2d>
 8012656:	4b97      	ldr	r3, [pc, #604]	; (80128b4 <__kernel_rem_pio2+0x694>)
 8012658:	2200      	movs	r2, #0
 801265a:	f7ed ffe7 	bl	800062c <__aeabi_dmul>
 801265e:	460b      	mov	r3, r1
 8012660:	4602      	mov	r2, r0
 8012662:	4639      	mov	r1, r7
 8012664:	4630      	mov	r0, r6
 8012666:	f7ed fe29 	bl	80002bc <__aeabi_dsub>
 801266a:	f7ee fa8f 	bl	8000b8c <__aeabi_d2iz>
 801266e:	1c65      	adds	r5, r4, #1
 8012670:	ab0e      	add	r3, sp, #56	; 0x38
 8012672:	f10a 0a18 	add.w	sl, sl, #24
 8012676:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801267a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801267e:	e720      	b.n	80124c2 <__kernel_rem_pio2+0x2a2>
 8012680:	4630      	mov	r0, r6
 8012682:	4639      	mov	r1, r7
 8012684:	f7ee fa82 	bl	8000b8c <__aeabi_d2iz>
 8012688:	ab0e      	add	r3, sp, #56	; 0x38
 801268a:	4625      	mov	r5, r4
 801268c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012690:	e717      	b.n	80124c2 <__kernel_rem_pio2+0x2a2>
 8012692:	ab0e      	add	r3, sp, #56	; 0x38
 8012694:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012698:	f7ed ff5e 	bl	8000558 <__aeabi_i2d>
 801269c:	4632      	mov	r2, r6
 801269e:	463b      	mov	r3, r7
 80126a0:	f7ed ffc4 	bl	800062c <__aeabi_dmul>
 80126a4:	4b84      	ldr	r3, [pc, #528]	; (80128b8 <__kernel_rem_pio2+0x698>)
 80126a6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80126aa:	2200      	movs	r2, #0
 80126ac:	4630      	mov	r0, r6
 80126ae:	4639      	mov	r1, r7
 80126b0:	f7ed ffbc 	bl	800062c <__aeabi_dmul>
 80126b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80126b8:	4606      	mov	r6, r0
 80126ba:	460f      	mov	r7, r1
 80126bc:	e70f      	b.n	80124de <__kernel_rem_pio2+0x2be>
 80126be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80126c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80126c6:	f7ed ffb1 	bl	800062c <__aeabi_dmul>
 80126ca:	4602      	mov	r2, r0
 80126cc:	460b      	mov	r3, r1
 80126ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80126d2:	f7ed fdf5 	bl	80002c0 <__adddf3>
 80126d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80126da:	f108 0801 	add.w	r8, r8, #1
 80126de:	9b02      	ldr	r3, [sp, #8]
 80126e0:	4598      	cmp	r8, r3
 80126e2:	dc01      	bgt.n	80126e8 <__kernel_rem_pio2+0x4c8>
 80126e4:	45b8      	cmp	r8, r7
 80126e6:	ddea      	ble.n	80126be <__kernel_rem_pio2+0x49e>
 80126e8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80126ec:	ab4a      	add	r3, sp, #296	; 0x128
 80126ee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80126f2:	ed87 7b00 	vstr	d7, [r7]
 80126f6:	3e01      	subs	r6, #1
 80126f8:	e6f8      	b.n	80124ec <__kernel_rem_pio2+0x2cc>
 80126fa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80126fc:	2b02      	cmp	r3, #2
 80126fe:	dc0b      	bgt.n	8012718 <__kernel_rem_pio2+0x4f8>
 8012700:	2b00      	cmp	r3, #0
 8012702:	dc35      	bgt.n	8012770 <__kernel_rem_pio2+0x550>
 8012704:	d059      	beq.n	80127ba <__kernel_rem_pio2+0x59a>
 8012706:	9b04      	ldr	r3, [sp, #16]
 8012708:	f003 0007 	and.w	r0, r3, #7
 801270c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012710:	ecbd 8b02 	vpop	{d8}
 8012714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012718:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801271a:	2b03      	cmp	r3, #3
 801271c:	d1f3      	bne.n	8012706 <__kernel_rem_pio2+0x4e6>
 801271e:	ab4a      	add	r3, sp, #296	; 0x128
 8012720:	4423      	add	r3, r4
 8012722:	9306      	str	r3, [sp, #24]
 8012724:	461c      	mov	r4, r3
 8012726:	469a      	mov	sl, r3
 8012728:	9502      	str	r5, [sp, #8]
 801272a:	9b02      	ldr	r3, [sp, #8]
 801272c:	2b00      	cmp	r3, #0
 801272e:	f1aa 0a08 	sub.w	sl, sl, #8
 8012732:	dc6b      	bgt.n	801280c <__kernel_rem_pio2+0x5ec>
 8012734:	46aa      	mov	sl, r5
 8012736:	f1ba 0f01 	cmp.w	sl, #1
 801273a:	f1a4 0408 	sub.w	r4, r4, #8
 801273e:	f300 8085 	bgt.w	801284c <__kernel_rem_pio2+0x62c>
 8012742:	9c06      	ldr	r4, [sp, #24]
 8012744:	2000      	movs	r0, #0
 8012746:	3408      	adds	r4, #8
 8012748:	2100      	movs	r1, #0
 801274a:	2d01      	cmp	r5, #1
 801274c:	f300 809d 	bgt.w	801288a <__kernel_rem_pio2+0x66a>
 8012750:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012754:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8012758:	f1bb 0f00 	cmp.w	fp, #0
 801275c:	f040 809b 	bne.w	8012896 <__kernel_rem_pio2+0x676>
 8012760:	9b01      	ldr	r3, [sp, #4]
 8012762:	e9c3 5600 	strd	r5, r6, [r3]
 8012766:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801276a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801276e:	e7ca      	b.n	8012706 <__kernel_rem_pio2+0x4e6>
 8012770:	3408      	adds	r4, #8
 8012772:	ab4a      	add	r3, sp, #296	; 0x128
 8012774:	441c      	add	r4, r3
 8012776:	462e      	mov	r6, r5
 8012778:	2000      	movs	r0, #0
 801277a:	2100      	movs	r1, #0
 801277c:	2e00      	cmp	r6, #0
 801277e:	da36      	bge.n	80127ee <__kernel_rem_pio2+0x5ce>
 8012780:	f1bb 0f00 	cmp.w	fp, #0
 8012784:	d039      	beq.n	80127fa <__kernel_rem_pio2+0x5da>
 8012786:	4602      	mov	r2, r0
 8012788:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801278c:	9c01      	ldr	r4, [sp, #4]
 801278e:	e9c4 2300 	strd	r2, r3, [r4]
 8012792:	4602      	mov	r2, r0
 8012794:	460b      	mov	r3, r1
 8012796:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801279a:	f7ed fd8f 	bl	80002bc <__aeabi_dsub>
 801279e:	ae4c      	add	r6, sp, #304	; 0x130
 80127a0:	2401      	movs	r4, #1
 80127a2:	42a5      	cmp	r5, r4
 80127a4:	da2c      	bge.n	8012800 <__kernel_rem_pio2+0x5e0>
 80127a6:	f1bb 0f00 	cmp.w	fp, #0
 80127aa:	d002      	beq.n	80127b2 <__kernel_rem_pio2+0x592>
 80127ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127b0:	4619      	mov	r1, r3
 80127b2:	9b01      	ldr	r3, [sp, #4]
 80127b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80127b8:	e7a5      	b.n	8012706 <__kernel_rem_pio2+0x4e6>
 80127ba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80127be:	eb0d 0403 	add.w	r4, sp, r3
 80127c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80127c6:	2000      	movs	r0, #0
 80127c8:	2100      	movs	r1, #0
 80127ca:	2d00      	cmp	r5, #0
 80127cc:	da09      	bge.n	80127e2 <__kernel_rem_pio2+0x5c2>
 80127ce:	f1bb 0f00 	cmp.w	fp, #0
 80127d2:	d002      	beq.n	80127da <__kernel_rem_pio2+0x5ba>
 80127d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127d8:	4619      	mov	r1, r3
 80127da:	9b01      	ldr	r3, [sp, #4]
 80127dc:	e9c3 0100 	strd	r0, r1, [r3]
 80127e0:	e791      	b.n	8012706 <__kernel_rem_pio2+0x4e6>
 80127e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80127e6:	f7ed fd6b 	bl	80002c0 <__adddf3>
 80127ea:	3d01      	subs	r5, #1
 80127ec:	e7ed      	b.n	80127ca <__kernel_rem_pio2+0x5aa>
 80127ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80127f2:	f7ed fd65 	bl	80002c0 <__adddf3>
 80127f6:	3e01      	subs	r6, #1
 80127f8:	e7c0      	b.n	801277c <__kernel_rem_pio2+0x55c>
 80127fa:	4602      	mov	r2, r0
 80127fc:	460b      	mov	r3, r1
 80127fe:	e7c5      	b.n	801278c <__kernel_rem_pio2+0x56c>
 8012800:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012804:	f7ed fd5c 	bl	80002c0 <__adddf3>
 8012808:	3401      	adds	r4, #1
 801280a:	e7ca      	b.n	80127a2 <__kernel_rem_pio2+0x582>
 801280c:	e9da 8900 	ldrd	r8, r9, [sl]
 8012810:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012814:	9b02      	ldr	r3, [sp, #8]
 8012816:	3b01      	subs	r3, #1
 8012818:	9302      	str	r3, [sp, #8]
 801281a:	4632      	mov	r2, r6
 801281c:	463b      	mov	r3, r7
 801281e:	4640      	mov	r0, r8
 8012820:	4649      	mov	r1, r9
 8012822:	f7ed fd4d 	bl	80002c0 <__adddf3>
 8012826:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801282a:	4602      	mov	r2, r0
 801282c:	460b      	mov	r3, r1
 801282e:	4640      	mov	r0, r8
 8012830:	4649      	mov	r1, r9
 8012832:	f7ed fd43 	bl	80002bc <__aeabi_dsub>
 8012836:	4632      	mov	r2, r6
 8012838:	463b      	mov	r3, r7
 801283a:	f7ed fd41 	bl	80002c0 <__adddf3>
 801283e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8012842:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012846:	ed8a 7b00 	vstr	d7, [sl]
 801284a:	e76e      	b.n	801272a <__kernel_rem_pio2+0x50a>
 801284c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012850:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012854:	4640      	mov	r0, r8
 8012856:	4632      	mov	r2, r6
 8012858:	463b      	mov	r3, r7
 801285a:	4649      	mov	r1, r9
 801285c:	f7ed fd30 	bl	80002c0 <__adddf3>
 8012860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012864:	4602      	mov	r2, r0
 8012866:	460b      	mov	r3, r1
 8012868:	4640      	mov	r0, r8
 801286a:	4649      	mov	r1, r9
 801286c:	f7ed fd26 	bl	80002bc <__aeabi_dsub>
 8012870:	4632      	mov	r2, r6
 8012872:	463b      	mov	r3, r7
 8012874:	f7ed fd24 	bl	80002c0 <__adddf3>
 8012878:	ed9d 7b02 	vldr	d7, [sp, #8]
 801287c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012880:	ed84 7b00 	vstr	d7, [r4]
 8012884:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012888:	e755      	b.n	8012736 <__kernel_rem_pio2+0x516>
 801288a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801288e:	f7ed fd17 	bl	80002c0 <__adddf3>
 8012892:	3d01      	subs	r5, #1
 8012894:	e759      	b.n	801274a <__kernel_rem_pio2+0x52a>
 8012896:	9b01      	ldr	r3, [sp, #4]
 8012898:	9a01      	ldr	r2, [sp, #4]
 801289a:	601d      	str	r5, [r3, #0]
 801289c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80128a0:	605c      	str	r4, [r3, #4]
 80128a2:	609f      	str	r7, [r3, #8]
 80128a4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80128a8:	60d3      	str	r3, [r2, #12]
 80128aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128ae:	6110      	str	r0, [r2, #16]
 80128b0:	6153      	str	r3, [r2, #20]
 80128b2:	e728      	b.n	8012706 <__kernel_rem_pio2+0x4e6>
 80128b4:	41700000 	.word	0x41700000
 80128b8:	3e700000 	.word	0x3e700000
 80128bc:	00000000 	.word	0x00000000

080128c0 <__kernel_sin>:
 80128c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128c4:	ed2d 8b04 	vpush	{d8-d9}
 80128c8:	eeb0 8a41 	vmov.f32	s16, s2
 80128cc:	eef0 8a61 	vmov.f32	s17, s3
 80128d0:	ec55 4b10 	vmov	r4, r5, d0
 80128d4:	b083      	sub	sp, #12
 80128d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80128da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80128de:	9001      	str	r0, [sp, #4]
 80128e0:	da06      	bge.n	80128f0 <__kernel_sin+0x30>
 80128e2:	ee10 0a10 	vmov	r0, s0
 80128e6:	4629      	mov	r1, r5
 80128e8:	f7ee f950 	bl	8000b8c <__aeabi_d2iz>
 80128ec:	2800      	cmp	r0, #0
 80128ee:	d051      	beq.n	8012994 <__kernel_sin+0xd4>
 80128f0:	4622      	mov	r2, r4
 80128f2:	462b      	mov	r3, r5
 80128f4:	4620      	mov	r0, r4
 80128f6:	4629      	mov	r1, r5
 80128f8:	f7ed fe98 	bl	800062c <__aeabi_dmul>
 80128fc:	4682      	mov	sl, r0
 80128fe:	468b      	mov	fp, r1
 8012900:	4602      	mov	r2, r0
 8012902:	460b      	mov	r3, r1
 8012904:	4620      	mov	r0, r4
 8012906:	4629      	mov	r1, r5
 8012908:	f7ed fe90 	bl	800062c <__aeabi_dmul>
 801290c:	a341      	add	r3, pc, #260	; (adr r3, 8012a14 <__kernel_sin+0x154>)
 801290e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012912:	4680      	mov	r8, r0
 8012914:	4689      	mov	r9, r1
 8012916:	4650      	mov	r0, sl
 8012918:	4659      	mov	r1, fp
 801291a:	f7ed fe87 	bl	800062c <__aeabi_dmul>
 801291e:	a33f      	add	r3, pc, #252	; (adr r3, 8012a1c <__kernel_sin+0x15c>)
 8012920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012924:	f7ed fcca 	bl	80002bc <__aeabi_dsub>
 8012928:	4652      	mov	r2, sl
 801292a:	465b      	mov	r3, fp
 801292c:	f7ed fe7e 	bl	800062c <__aeabi_dmul>
 8012930:	a33c      	add	r3, pc, #240	; (adr r3, 8012a24 <__kernel_sin+0x164>)
 8012932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012936:	f7ed fcc3 	bl	80002c0 <__adddf3>
 801293a:	4652      	mov	r2, sl
 801293c:	465b      	mov	r3, fp
 801293e:	f7ed fe75 	bl	800062c <__aeabi_dmul>
 8012942:	a33a      	add	r3, pc, #232	; (adr r3, 8012a2c <__kernel_sin+0x16c>)
 8012944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012948:	f7ed fcb8 	bl	80002bc <__aeabi_dsub>
 801294c:	4652      	mov	r2, sl
 801294e:	465b      	mov	r3, fp
 8012950:	f7ed fe6c 	bl	800062c <__aeabi_dmul>
 8012954:	a337      	add	r3, pc, #220	; (adr r3, 8012a34 <__kernel_sin+0x174>)
 8012956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801295a:	f7ed fcb1 	bl	80002c0 <__adddf3>
 801295e:	9b01      	ldr	r3, [sp, #4]
 8012960:	4606      	mov	r6, r0
 8012962:	460f      	mov	r7, r1
 8012964:	b9eb      	cbnz	r3, 80129a2 <__kernel_sin+0xe2>
 8012966:	4602      	mov	r2, r0
 8012968:	460b      	mov	r3, r1
 801296a:	4650      	mov	r0, sl
 801296c:	4659      	mov	r1, fp
 801296e:	f7ed fe5d 	bl	800062c <__aeabi_dmul>
 8012972:	a325      	add	r3, pc, #148	; (adr r3, 8012a08 <__kernel_sin+0x148>)
 8012974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012978:	f7ed fca0 	bl	80002bc <__aeabi_dsub>
 801297c:	4642      	mov	r2, r8
 801297e:	464b      	mov	r3, r9
 8012980:	f7ed fe54 	bl	800062c <__aeabi_dmul>
 8012984:	4602      	mov	r2, r0
 8012986:	460b      	mov	r3, r1
 8012988:	4620      	mov	r0, r4
 801298a:	4629      	mov	r1, r5
 801298c:	f7ed fc98 	bl	80002c0 <__adddf3>
 8012990:	4604      	mov	r4, r0
 8012992:	460d      	mov	r5, r1
 8012994:	ec45 4b10 	vmov	d0, r4, r5
 8012998:	b003      	add	sp, #12
 801299a:	ecbd 8b04 	vpop	{d8-d9}
 801299e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129a2:	4b1b      	ldr	r3, [pc, #108]	; (8012a10 <__kernel_sin+0x150>)
 80129a4:	ec51 0b18 	vmov	r0, r1, d8
 80129a8:	2200      	movs	r2, #0
 80129aa:	f7ed fe3f 	bl	800062c <__aeabi_dmul>
 80129ae:	4632      	mov	r2, r6
 80129b0:	ec41 0b19 	vmov	d9, r0, r1
 80129b4:	463b      	mov	r3, r7
 80129b6:	4640      	mov	r0, r8
 80129b8:	4649      	mov	r1, r9
 80129ba:	f7ed fe37 	bl	800062c <__aeabi_dmul>
 80129be:	4602      	mov	r2, r0
 80129c0:	460b      	mov	r3, r1
 80129c2:	ec51 0b19 	vmov	r0, r1, d9
 80129c6:	f7ed fc79 	bl	80002bc <__aeabi_dsub>
 80129ca:	4652      	mov	r2, sl
 80129cc:	465b      	mov	r3, fp
 80129ce:	f7ed fe2d 	bl	800062c <__aeabi_dmul>
 80129d2:	ec53 2b18 	vmov	r2, r3, d8
 80129d6:	f7ed fc71 	bl	80002bc <__aeabi_dsub>
 80129da:	a30b      	add	r3, pc, #44	; (adr r3, 8012a08 <__kernel_sin+0x148>)
 80129dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e0:	4606      	mov	r6, r0
 80129e2:	460f      	mov	r7, r1
 80129e4:	4640      	mov	r0, r8
 80129e6:	4649      	mov	r1, r9
 80129e8:	f7ed fe20 	bl	800062c <__aeabi_dmul>
 80129ec:	4602      	mov	r2, r0
 80129ee:	460b      	mov	r3, r1
 80129f0:	4630      	mov	r0, r6
 80129f2:	4639      	mov	r1, r7
 80129f4:	f7ed fc64 	bl	80002c0 <__adddf3>
 80129f8:	4602      	mov	r2, r0
 80129fa:	460b      	mov	r3, r1
 80129fc:	4620      	mov	r0, r4
 80129fe:	4629      	mov	r1, r5
 8012a00:	f7ed fc5c 	bl	80002bc <__aeabi_dsub>
 8012a04:	e7c4      	b.n	8012990 <__kernel_sin+0xd0>
 8012a06:	bf00      	nop
 8012a08:	55555549 	.word	0x55555549
 8012a0c:	3fc55555 	.word	0x3fc55555
 8012a10:	3fe00000 	.word	0x3fe00000
 8012a14:	5acfd57c 	.word	0x5acfd57c
 8012a18:	3de5d93a 	.word	0x3de5d93a
 8012a1c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012a20:	3e5ae5e6 	.word	0x3e5ae5e6
 8012a24:	57b1fe7d 	.word	0x57b1fe7d
 8012a28:	3ec71de3 	.word	0x3ec71de3
 8012a2c:	19c161d5 	.word	0x19c161d5
 8012a30:	3f2a01a0 	.word	0x3f2a01a0
 8012a34:	1110f8a6 	.word	0x1110f8a6
 8012a38:	3f811111 	.word	0x3f811111
 8012a3c:	00000000 	.word	0x00000000

08012a40 <__kernel_tan>:
 8012a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a44:	ed2d 8b06 	vpush	{d8-d10}
 8012a48:	ec5b ab10 	vmov	sl, fp, d0
 8012a4c:	4be0      	ldr	r3, [pc, #896]	; (8012dd0 <__kernel_tan+0x390>)
 8012a4e:	b083      	sub	sp, #12
 8012a50:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8012a54:	429f      	cmp	r7, r3
 8012a56:	ec59 8b11 	vmov	r8, r9, d1
 8012a5a:	4606      	mov	r6, r0
 8012a5c:	f8cd b000 	str.w	fp, [sp]
 8012a60:	dc61      	bgt.n	8012b26 <__kernel_tan+0xe6>
 8012a62:	ee10 0a10 	vmov	r0, s0
 8012a66:	4659      	mov	r1, fp
 8012a68:	f7ee f890 	bl	8000b8c <__aeabi_d2iz>
 8012a6c:	4605      	mov	r5, r0
 8012a6e:	2800      	cmp	r0, #0
 8012a70:	f040 8083 	bne.w	8012b7a <__kernel_tan+0x13a>
 8012a74:	1c73      	adds	r3, r6, #1
 8012a76:	4652      	mov	r2, sl
 8012a78:	4313      	orrs	r3, r2
 8012a7a:	433b      	orrs	r3, r7
 8012a7c:	d112      	bne.n	8012aa4 <__kernel_tan+0x64>
 8012a7e:	ec4b ab10 	vmov	d0, sl, fp
 8012a82:	f000 fa17 	bl	8012eb4 <fabs>
 8012a86:	49d3      	ldr	r1, [pc, #844]	; (8012dd4 <__kernel_tan+0x394>)
 8012a88:	ec53 2b10 	vmov	r2, r3, d0
 8012a8c:	2000      	movs	r0, #0
 8012a8e:	f7ed fef7 	bl	8000880 <__aeabi_ddiv>
 8012a92:	4682      	mov	sl, r0
 8012a94:	468b      	mov	fp, r1
 8012a96:	ec4b ab10 	vmov	d0, sl, fp
 8012a9a:	b003      	add	sp, #12
 8012a9c:	ecbd 8b06 	vpop	{d8-d10}
 8012aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa4:	2e01      	cmp	r6, #1
 8012aa6:	d0f6      	beq.n	8012a96 <__kernel_tan+0x56>
 8012aa8:	4642      	mov	r2, r8
 8012aaa:	464b      	mov	r3, r9
 8012aac:	4650      	mov	r0, sl
 8012aae:	4659      	mov	r1, fp
 8012ab0:	f7ed fc06 	bl	80002c0 <__adddf3>
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	460f      	mov	r7, r1
 8012aba:	2000      	movs	r0, #0
 8012abc:	49c6      	ldr	r1, [pc, #792]	; (8012dd8 <__kernel_tan+0x398>)
 8012abe:	f7ed fedf 	bl	8000880 <__aeabi_ddiv>
 8012ac2:	e9cd 0100 	strd	r0, r1, [sp]
 8012ac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012aca:	462e      	mov	r6, r5
 8012acc:	4652      	mov	r2, sl
 8012ace:	462c      	mov	r4, r5
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	461d      	mov	r5, r3
 8012ad4:	4639      	mov	r1, r7
 8012ad6:	465b      	mov	r3, fp
 8012ad8:	f7ed fbf0 	bl	80002bc <__aeabi_dsub>
 8012adc:	4602      	mov	r2, r0
 8012ade:	460b      	mov	r3, r1
 8012ae0:	4640      	mov	r0, r8
 8012ae2:	4649      	mov	r1, r9
 8012ae4:	f7ed fbea 	bl	80002bc <__aeabi_dsub>
 8012ae8:	4632      	mov	r2, r6
 8012aea:	462b      	mov	r3, r5
 8012aec:	f7ed fd9e 	bl	800062c <__aeabi_dmul>
 8012af0:	4632      	mov	r2, r6
 8012af2:	4680      	mov	r8, r0
 8012af4:	4689      	mov	r9, r1
 8012af6:	462b      	mov	r3, r5
 8012af8:	4630      	mov	r0, r6
 8012afa:	4639      	mov	r1, r7
 8012afc:	f7ed fd96 	bl	800062c <__aeabi_dmul>
 8012b00:	4bb4      	ldr	r3, [pc, #720]	; (8012dd4 <__kernel_tan+0x394>)
 8012b02:	2200      	movs	r2, #0
 8012b04:	f7ed fbdc 	bl	80002c0 <__adddf3>
 8012b08:	4602      	mov	r2, r0
 8012b0a:	460b      	mov	r3, r1
 8012b0c:	4640      	mov	r0, r8
 8012b0e:	4649      	mov	r1, r9
 8012b10:	f7ed fbd6 	bl	80002c0 <__adddf3>
 8012b14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b18:	f7ed fd88 	bl	800062c <__aeabi_dmul>
 8012b1c:	4622      	mov	r2, r4
 8012b1e:	462b      	mov	r3, r5
 8012b20:	f7ed fbce 	bl	80002c0 <__adddf3>
 8012b24:	e7b5      	b.n	8012a92 <__kernel_tan+0x52>
 8012b26:	4bad      	ldr	r3, [pc, #692]	; (8012ddc <__kernel_tan+0x39c>)
 8012b28:	429f      	cmp	r7, r3
 8012b2a:	dd26      	ble.n	8012b7a <__kernel_tan+0x13a>
 8012b2c:	9b00      	ldr	r3, [sp, #0]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	da09      	bge.n	8012b46 <__kernel_tan+0x106>
 8012b32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012b36:	469b      	mov	fp, r3
 8012b38:	ee10 aa10 	vmov	sl, s0
 8012b3c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012b40:	ee11 8a10 	vmov	r8, s2
 8012b44:	4699      	mov	r9, r3
 8012b46:	4652      	mov	r2, sl
 8012b48:	465b      	mov	r3, fp
 8012b4a:	a183      	add	r1, pc, #524	; (adr r1, 8012d58 <__kernel_tan+0x318>)
 8012b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b50:	f7ed fbb4 	bl	80002bc <__aeabi_dsub>
 8012b54:	4642      	mov	r2, r8
 8012b56:	464b      	mov	r3, r9
 8012b58:	4604      	mov	r4, r0
 8012b5a:	460d      	mov	r5, r1
 8012b5c:	a180      	add	r1, pc, #512	; (adr r1, 8012d60 <__kernel_tan+0x320>)
 8012b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b62:	f7ed fbab 	bl	80002bc <__aeabi_dsub>
 8012b66:	4622      	mov	r2, r4
 8012b68:	462b      	mov	r3, r5
 8012b6a:	f7ed fba9 	bl	80002c0 <__adddf3>
 8012b6e:	f04f 0800 	mov.w	r8, #0
 8012b72:	4682      	mov	sl, r0
 8012b74:	468b      	mov	fp, r1
 8012b76:	f04f 0900 	mov.w	r9, #0
 8012b7a:	4652      	mov	r2, sl
 8012b7c:	465b      	mov	r3, fp
 8012b7e:	4650      	mov	r0, sl
 8012b80:	4659      	mov	r1, fp
 8012b82:	f7ed fd53 	bl	800062c <__aeabi_dmul>
 8012b86:	4602      	mov	r2, r0
 8012b88:	460b      	mov	r3, r1
 8012b8a:	ec43 2b18 	vmov	d8, r2, r3
 8012b8e:	f7ed fd4d 	bl	800062c <__aeabi_dmul>
 8012b92:	ec53 2b18 	vmov	r2, r3, d8
 8012b96:	4604      	mov	r4, r0
 8012b98:	460d      	mov	r5, r1
 8012b9a:	4650      	mov	r0, sl
 8012b9c:	4659      	mov	r1, fp
 8012b9e:	f7ed fd45 	bl	800062c <__aeabi_dmul>
 8012ba2:	a371      	add	r3, pc, #452	; (adr r3, 8012d68 <__kernel_tan+0x328>)
 8012ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba8:	ec41 0b19 	vmov	d9, r0, r1
 8012bac:	4620      	mov	r0, r4
 8012bae:	4629      	mov	r1, r5
 8012bb0:	f7ed fd3c 	bl	800062c <__aeabi_dmul>
 8012bb4:	a36e      	add	r3, pc, #440	; (adr r3, 8012d70 <__kernel_tan+0x330>)
 8012bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bba:	f7ed fb81 	bl	80002c0 <__adddf3>
 8012bbe:	4622      	mov	r2, r4
 8012bc0:	462b      	mov	r3, r5
 8012bc2:	f7ed fd33 	bl	800062c <__aeabi_dmul>
 8012bc6:	a36c      	add	r3, pc, #432	; (adr r3, 8012d78 <__kernel_tan+0x338>)
 8012bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bcc:	f7ed fb78 	bl	80002c0 <__adddf3>
 8012bd0:	4622      	mov	r2, r4
 8012bd2:	462b      	mov	r3, r5
 8012bd4:	f7ed fd2a 	bl	800062c <__aeabi_dmul>
 8012bd8:	a369      	add	r3, pc, #420	; (adr r3, 8012d80 <__kernel_tan+0x340>)
 8012bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bde:	f7ed fb6f 	bl	80002c0 <__adddf3>
 8012be2:	4622      	mov	r2, r4
 8012be4:	462b      	mov	r3, r5
 8012be6:	f7ed fd21 	bl	800062c <__aeabi_dmul>
 8012bea:	a367      	add	r3, pc, #412	; (adr r3, 8012d88 <__kernel_tan+0x348>)
 8012bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf0:	f7ed fb66 	bl	80002c0 <__adddf3>
 8012bf4:	4622      	mov	r2, r4
 8012bf6:	462b      	mov	r3, r5
 8012bf8:	f7ed fd18 	bl	800062c <__aeabi_dmul>
 8012bfc:	a364      	add	r3, pc, #400	; (adr r3, 8012d90 <__kernel_tan+0x350>)
 8012bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c02:	f7ed fb5d 	bl	80002c0 <__adddf3>
 8012c06:	ec53 2b18 	vmov	r2, r3, d8
 8012c0a:	f7ed fd0f 	bl	800062c <__aeabi_dmul>
 8012c0e:	a362      	add	r3, pc, #392	; (adr r3, 8012d98 <__kernel_tan+0x358>)
 8012c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c14:	ec41 0b1a 	vmov	d10, r0, r1
 8012c18:	4620      	mov	r0, r4
 8012c1a:	4629      	mov	r1, r5
 8012c1c:	f7ed fd06 	bl	800062c <__aeabi_dmul>
 8012c20:	a35f      	add	r3, pc, #380	; (adr r3, 8012da0 <__kernel_tan+0x360>)
 8012c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c26:	f7ed fb4b 	bl	80002c0 <__adddf3>
 8012c2a:	4622      	mov	r2, r4
 8012c2c:	462b      	mov	r3, r5
 8012c2e:	f7ed fcfd 	bl	800062c <__aeabi_dmul>
 8012c32:	a35d      	add	r3, pc, #372	; (adr r3, 8012da8 <__kernel_tan+0x368>)
 8012c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c38:	f7ed fb42 	bl	80002c0 <__adddf3>
 8012c3c:	4622      	mov	r2, r4
 8012c3e:	462b      	mov	r3, r5
 8012c40:	f7ed fcf4 	bl	800062c <__aeabi_dmul>
 8012c44:	a35a      	add	r3, pc, #360	; (adr r3, 8012db0 <__kernel_tan+0x370>)
 8012c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4a:	f7ed fb39 	bl	80002c0 <__adddf3>
 8012c4e:	4622      	mov	r2, r4
 8012c50:	462b      	mov	r3, r5
 8012c52:	f7ed fceb 	bl	800062c <__aeabi_dmul>
 8012c56:	a358      	add	r3, pc, #352	; (adr r3, 8012db8 <__kernel_tan+0x378>)
 8012c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5c:	f7ed fb30 	bl	80002c0 <__adddf3>
 8012c60:	4622      	mov	r2, r4
 8012c62:	462b      	mov	r3, r5
 8012c64:	f7ed fce2 	bl	800062c <__aeabi_dmul>
 8012c68:	a355      	add	r3, pc, #340	; (adr r3, 8012dc0 <__kernel_tan+0x380>)
 8012c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6e:	f7ed fb27 	bl	80002c0 <__adddf3>
 8012c72:	4602      	mov	r2, r0
 8012c74:	460b      	mov	r3, r1
 8012c76:	ec51 0b1a 	vmov	r0, r1, d10
 8012c7a:	f7ed fb21 	bl	80002c0 <__adddf3>
 8012c7e:	ec53 2b19 	vmov	r2, r3, d9
 8012c82:	f7ed fcd3 	bl	800062c <__aeabi_dmul>
 8012c86:	4642      	mov	r2, r8
 8012c88:	464b      	mov	r3, r9
 8012c8a:	f7ed fb19 	bl	80002c0 <__adddf3>
 8012c8e:	ec53 2b18 	vmov	r2, r3, d8
 8012c92:	f7ed fccb 	bl	800062c <__aeabi_dmul>
 8012c96:	4642      	mov	r2, r8
 8012c98:	464b      	mov	r3, r9
 8012c9a:	f7ed fb11 	bl	80002c0 <__adddf3>
 8012c9e:	a34a      	add	r3, pc, #296	; (adr r3, 8012dc8 <__kernel_tan+0x388>)
 8012ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca4:	4604      	mov	r4, r0
 8012ca6:	460d      	mov	r5, r1
 8012ca8:	ec51 0b19 	vmov	r0, r1, d9
 8012cac:	f7ed fcbe 	bl	800062c <__aeabi_dmul>
 8012cb0:	4622      	mov	r2, r4
 8012cb2:	462b      	mov	r3, r5
 8012cb4:	f7ed fb04 	bl	80002c0 <__adddf3>
 8012cb8:	460b      	mov	r3, r1
 8012cba:	ec41 0b18 	vmov	d8, r0, r1
 8012cbe:	4602      	mov	r2, r0
 8012cc0:	4659      	mov	r1, fp
 8012cc2:	4650      	mov	r0, sl
 8012cc4:	f7ed fafc 	bl	80002c0 <__adddf3>
 8012cc8:	4b44      	ldr	r3, [pc, #272]	; (8012ddc <__kernel_tan+0x39c>)
 8012cca:	429f      	cmp	r7, r3
 8012ccc:	4604      	mov	r4, r0
 8012cce:	460d      	mov	r5, r1
 8012cd0:	f340 8086 	ble.w	8012de0 <__kernel_tan+0x3a0>
 8012cd4:	4630      	mov	r0, r6
 8012cd6:	f7ed fc3f 	bl	8000558 <__aeabi_i2d>
 8012cda:	4622      	mov	r2, r4
 8012cdc:	4680      	mov	r8, r0
 8012cde:	4689      	mov	r9, r1
 8012ce0:	462b      	mov	r3, r5
 8012ce2:	4620      	mov	r0, r4
 8012ce4:	4629      	mov	r1, r5
 8012ce6:	f7ed fca1 	bl	800062c <__aeabi_dmul>
 8012cea:	4642      	mov	r2, r8
 8012cec:	4606      	mov	r6, r0
 8012cee:	460f      	mov	r7, r1
 8012cf0:	464b      	mov	r3, r9
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	4629      	mov	r1, r5
 8012cf6:	f7ed fae3 	bl	80002c0 <__adddf3>
 8012cfa:	4602      	mov	r2, r0
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	4630      	mov	r0, r6
 8012d00:	4639      	mov	r1, r7
 8012d02:	f7ed fdbd 	bl	8000880 <__aeabi_ddiv>
 8012d06:	ec53 2b18 	vmov	r2, r3, d8
 8012d0a:	f7ed fad7 	bl	80002bc <__aeabi_dsub>
 8012d0e:	4602      	mov	r2, r0
 8012d10:	460b      	mov	r3, r1
 8012d12:	4650      	mov	r0, sl
 8012d14:	4659      	mov	r1, fp
 8012d16:	f7ed fad1 	bl	80002bc <__aeabi_dsub>
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	460b      	mov	r3, r1
 8012d1e:	f7ed facf 	bl	80002c0 <__adddf3>
 8012d22:	4602      	mov	r2, r0
 8012d24:	460b      	mov	r3, r1
 8012d26:	4640      	mov	r0, r8
 8012d28:	4649      	mov	r1, r9
 8012d2a:	f7ed fac7 	bl	80002bc <__aeabi_dsub>
 8012d2e:	9b00      	ldr	r3, [sp, #0]
 8012d30:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8012d34:	f00a 0a02 	and.w	sl, sl, #2
 8012d38:	4604      	mov	r4, r0
 8012d3a:	f1ca 0001 	rsb	r0, sl, #1
 8012d3e:	460d      	mov	r5, r1
 8012d40:	f7ed fc0a 	bl	8000558 <__aeabi_i2d>
 8012d44:	4602      	mov	r2, r0
 8012d46:	460b      	mov	r3, r1
 8012d48:	4620      	mov	r0, r4
 8012d4a:	4629      	mov	r1, r5
 8012d4c:	f7ed fc6e 	bl	800062c <__aeabi_dmul>
 8012d50:	e69f      	b.n	8012a92 <__kernel_tan+0x52>
 8012d52:	bf00      	nop
 8012d54:	f3af 8000 	nop.w
 8012d58:	54442d18 	.word	0x54442d18
 8012d5c:	3fe921fb 	.word	0x3fe921fb
 8012d60:	33145c07 	.word	0x33145c07
 8012d64:	3c81a626 	.word	0x3c81a626
 8012d68:	74bf7ad4 	.word	0x74bf7ad4
 8012d6c:	3efb2a70 	.word	0x3efb2a70
 8012d70:	32f0a7e9 	.word	0x32f0a7e9
 8012d74:	3f12b80f 	.word	0x3f12b80f
 8012d78:	1a8d1068 	.word	0x1a8d1068
 8012d7c:	3f3026f7 	.word	0x3f3026f7
 8012d80:	fee08315 	.word	0xfee08315
 8012d84:	3f57dbc8 	.word	0x3f57dbc8
 8012d88:	e96e8493 	.word	0xe96e8493
 8012d8c:	3f8226e3 	.word	0x3f8226e3
 8012d90:	1bb341fe 	.word	0x1bb341fe
 8012d94:	3faba1ba 	.word	0x3faba1ba
 8012d98:	db605373 	.word	0xdb605373
 8012d9c:	bef375cb 	.word	0xbef375cb
 8012da0:	a03792a6 	.word	0xa03792a6
 8012da4:	3f147e88 	.word	0x3f147e88
 8012da8:	f2f26501 	.word	0xf2f26501
 8012dac:	3f4344d8 	.word	0x3f4344d8
 8012db0:	c9560328 	.word	0xc9560328
 8012db4:	3f6d6d22 	.word	0x3f6d6d22
 8012db8:	8406d637 	.word	0x8406d637
 8012dbc:	3f9664f4 	.word	0x3f9664f4
 8012dc0:	1110fe7a 	.word	0x1110fe7a
 8012dc4:	3fc11111 	.word	0x3fc11111
 8012dc8:	55555563 	.word	0x55555563
 8012dcc:	3fd55555 	.word	0x3fd55555
 8012dd0:	3e2fffff 	.word	0x3e2fffff
 8012dd4:	3ff00000 	.word	0x3ff00000
 8012dd8:	bff00000 	.word	0xbff00000
 8012ddc:	3fe59427 	.word	0x3fe59427
 8012de0:	2e01      	cmp	r6, #1
 8012de2:	d02f      	beq.n	8012e44 <__kernel_tan+0x404>
 8012de4:	460f      	mov	r7, r1
 8012de6:	4602      	mov	r2, r0
 8012de8:	460b      	mov	r3, r1
 8012dea:	4689      	mov	r9, r1
 8012dec:	2000      	movs	r0, #0
 8012dee:	4917      	ldr	r1, [pc, #92]	; (8012e4c <__kernel_tan+0x40c>)
 8012df0:	f7ed fd46 	bl	8000880 <__aeabi_ddiv>
 8012df4:	2600      	movs	r6, #0
 8012df6:	e9cd 0100 	strd	r0, r1, [sp]
 8012dfa:	4652      	mov	r2, sl
 8012dfc:	465b      	mov	r3, fp
 8012dfe:	4630      	mov	r0, r6
 8012e00:	4639      	mov	r1, r7
 8012e02:	f7ed fa5b 	bl	80002bc <__aeabi_dsub>
 8012e06:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012e0a:	4602      	mov	r2, r0
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	ec51 0b18 	vmov	r0, r1, d8
 8012e12:	f7ed fa53 	bl	80002bc <__aeabi_dsub>
 8012e16:	4632      	mov	r2, r6
 8012e18:	462b      	mov	r3, r5
 8012e1a:	f7ed fc07 	bl	800062c <__aeabi_dmul>
 8012e1e:	46b0      	mov	r8, r6
 8012e20:	460f      	mov	r7, r1
 8012e22:	4642      	mov	r2, r8
 8012e24:	462b      	mov	r3, r5
 8012e26:	4634      	mov	r4, r6
 8012e28:	4649      	mov	r1, r9
 8012e2a:	4606      	mov	r6, r0
 8012e2c:	4640      	mov	r0, r8
 8012e2e:	f7ed fbfd 	bl	800062c <__aeabi_dmul>
 8012e32:	4b07      	ldr	r3, [pc, #28]	; (8012e50 <__kernel_tan+0x410>)
 8012e34:	2200      	movs	r2, #0
 8012e36:	f7ed fa43 	bl	80002c0 <__adddf3>
 8012e3a:	4602      	mov	r2, r0
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	4630      	mov	r0, r6
 8012e40:	4639      	mov	r1, r7
 8012e42:	e665      	b.n	8012b10 <__kernel_tan+0xd0>
 8012e44:	4682      	mov	sl, r0
 8012e46:	468b      	mov	fp, r1
 8012e48:	e625      	b.n	8012a96 <__kernel_tan+0x56>
 8012e4a:	bf00      	nop
 8012e4c:	bff00000 	.word	0xbff00000
 8012e50:	3ff00000 	.word	0x3ff00000

08012e54 <with_errno>:
 8012e54:	b570      	push	{r4, r5, r6, lr}
 8012e56:	4604      	mov	r4, r0
 8012e58:	460d      	mov	r5, r1
 8012e5a:	4616      	mov	r6, r2
 8012e5c:	f7fd fcc6 	bl	80107ec <__errno>
 8012e60:	4629      	mov	r1, r5
 8012e62:	6006      	str	r6, [r0, #0]
 8012e64:	4620      	mov	r0, r4
 8012e66:	bd70      	pop	{r4, r5, r6, pc}

08012e68 <xflow>:
 8012e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e6a:	4614      	mov	r4, r2
 8012e6c:	461d      	mov	r5, r3
 8012e6e:	b108      	cbz	r0, 8012e74 <xflow+0xc>
 8012e70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012e74:	e9cd 2300 	strd	r2, r3, [sp]
 8012e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	4629      	mov	r1, r5
 8012e80:	f7ed fbd4 	bl	800062c <__aeabi_dmul>
 8012e84:	2222      	movs	r2, #34	; 0x22
 8012e86:	b003      	add	sp, #12
 8012e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e8c:	f7ff bfe2 	b.w	8012e54 <with_errno>

08012e90 <__math_uflow>:
 8012e90:	b508      	push	{r3, lr}
 8012e92:	2200      	movs	r2, #0
 8012e94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012e98:	f7ff ffe6 	bl	8012e68 <xflow>
 8012e9c:	ec41 0b10 	vmov	d0, r0, r1
 8012ea0:	bd08      	pop	{r3, pc}

08012ea2 <__math_oflow>:
 8012ea2:	b508      	push	{r3, lr}
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012eaa:	f7ff ffdd 	bl	8012e68 <xflow>
 8012eae:	ec41 0b10 	vmov	d0, r0, r1
 8012eb2:	bd08      	pop	{r3, pc}

08012eb4 <fabs>:
 8012eb4:	ec51 0b10 	vmov	r0, r1, d0
 8012eb8:	ee10 2a10 	vmov	r2, s0
 8012ebc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012ec0:	ec43 2b10 	vmov	d0, r2, r3
 8012ec4:	4770      	bx	lr

08012ec6 <finite>:
 8012ec6:	b082      	sub	sp, #8
 8012ec8:	ed8d 0b00 	vstr	d0, [sp]
 8012ecc:	9801      	ldr	r0, [sp, #4]
 8012ece:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012ed2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012ed6:	0fc0      	lsrs	r0, r0, #31
 8012ed8:	b002      	add	sp, #8
 8012eda:	4770      	bx	lr
 8012edc:	0000      	movs	r0, r0
	...

08012ee0 <floor>:
 8012ee0:	ec51 0b10 	vmov	r0, r1, d0
 8012ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012eec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012ef0:	2e13      	cmp	r6, #19
 8012ef2:	ee10 5a10 	vmov	r5, s0
 8012ef6:	ee10 8a10 	vmov	r8, s0
 8012efa:	460c      	mov	r4, r1
 8012efc:	dc32      	bgt.n	8012f64 <floor+0x84>
 8012efe:	2e00      	cmp	r6, #0
 8012f00:	da14      	bge.n	8012f2c <floor+0x4c>
 8012f02:	a333      	add	r3, pc, #204	; (adr r3, 8012fd0 <floor+0xf0>)
 8012f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f08:	f7ed f9da 	bl	80002c0 <__adddf3>
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	2300      	movs	r3, #0
 8012f10:	f7ed fe1c 	bl	8000b4c <__aeabi_dcmpgt>
 8012f14:	b138      	cbz	r0, 8012f26 <floor+0x46>
 8012f16:	2c00      	cmp	r4, #0
 8012f18:	da57      	bge.n	8012fca <floor+0xea>
 8012f1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012f1e:	431d      	orrs	r5, r3
 8012f20:	d001      	beq.n	8012f26 <floor+0x46>
 8012f22:	4c2d      	ldr	r4, [pc, #180]	; (8012fd8 <floor+0xf8>)
 8012f24:	2500      	movs	r5, #0
 8012f26:	4621      	mov	r1, r4
 8012f28:	4628      	mov	r0, r5
 8012f2a:	e025      	b.n	8012f78 <floor+0x98>
 8012f2c:	4f2b      	ldr	r7, [pc, #172]	; (8012fdc <floor+0xfc>)
 8012f2e:	4137      	asrs	r7, r6
 8012f30:	ea01 0307 	and.w	r3, r1, r7
 8012f34:	4303      	orrs	r3, r0
 8012f36:	d01f      	beq.n	8012f78 <floor+0x98>
 8012f38:	a325      	add	r3, pc, #148	; (adr r3, 8012fd0 <floor+0xf0>)
 8012f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3e:	f7ed f9bf 	bl	80002c0 <__adddf3>
 8012f42:	2200      	movs	r2, #0
 8012f44:	2300      	movs	r3, #0
 8012f46:	f7ed fe01 	bl	8000b4c <__aeabi_dcmpgt>
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	d0eb      	beq.n	8012f26 <floor+0x46>
 8012f4e:	2c00      	cmp	r4, #0
 8012f50:	bfbe      	ittt	lt
 8012f52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012f56:	fa43 f606 	asrlt.w	r6, r3, r6
 8012f5a:	19a4      	addlt	r4, r4, r6
 8012f5c:	ea24 0407 	bic.w	r4, r4, r7
 8012f60:	2500      	movs	r5, #0
 8012f62:	e7e0      	b.n	8012f26 <floor+0x46>
 8012f64:	2e33      	cmp	r6, #51	; 0x33
 8012f66:	dd0b      	ble.n	8012f80 <floor+0xa0>
 8012f68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012f6c:	d104      	bne.n	8012f78 <floor+0x98>
 8012f6e:	ee10 2a10 	vmov	r2, s0
 8012f72:	460b      	mov	r3, r1
 8012f74:	f7ed f9a4 	bl	80002c0 <__adddf3>
 8012f78:	ec41 0b10 	vmov	d0, r0, r1
 8012f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f80:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012f84:	f04f 33ff 	mov.w	r3, #4294967295
 8012f88:	fa23 f707 	lsr.w	r7, r3, r7
 8012f8c:	4207      	tst	r7, r0
 8012f8e:	d0f3      	beq.n	8012f78 <floor+0x98>
 8012f90:	a30f      	add	r3, pc, #60	; (adr r3, 8012fd0 <floor+0xf0>)
 8012f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f96:	f7ed f993 	bl	80002c0 <__adddf3>
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	f7ed fdd5 	bl	8000b4c <__aeabi_dcmpgt>
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	d0bf      	beq.n	8012f26 <floor+0x46>
 8012fa6:	2c00      	cmp	r4, #0
 8012fa8:	da02      	bge.n	8012fb0 <floor+0xd0>
 8012faa:	2e14      	cmp	r6, #20
 8012fac:	d103      	bne.n	8012fb6 <floor+0xd6>
 8012fae:	3401      	adds	r4, #1
 8012fb0:	ea25 0507 	bic.w	r5, r5, r7
 8012fb4:	e7b7      	b.n	8012f26 <floor+0x46>
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012fbc:	fa03 f606 	lsl.w	r6, r3, r6
 8012fc0:	4435      	add	r5, r6
 8012fc2:	4545      	cmp	r5, r8
 8012fc4:	bf38      	it	cc
 8012fc6:	18e4      	addcc	r4, r4, r3
 8012fc8:	e7f2      	b.n	8012fb0 <floor+0xd0>
 8012fca:	2500      	movs	r5, #0
 8012fcc:	462c      	mov	r4, r5
 8012fce:	e7aa      	b.n	8012f26 <floor+0x46>
 8012fd0:	8800759c 	.word	0x8800759c
 8012fd4:	7e37e43c 	.word	0x7e37e43c
 8012fd8:	bff00000 	.word	0xbff00000
 8012fdc:	000fffff 	.word	0x000fffff

08012fe0 <nan>:
 8012fe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012fe8 <nan+0x8>
 8012fe4:	4770      	bx	lr
 8012fe6:	bf00      	nop
 8012fe8:	00000000 	.word	0x00000000
 8012fec:	7ff80000 	.word	0x7ff80000

08012ff0 <scalbn>:
 8012ff0:	b570      	push	{r4, r5, r6, lr}
 8012ff2:	ec55 4b10 	vmov	r4, r5, d0
 8012ff6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012ffa:	4606      	mov	r6, r0
 8012ffc:	462b      	mov	r3, r5
 8012ffe:	b99a      	cbnz	r2, 8013028 <scalbn+0x38>
 8013000:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013004:	4323      	orrs	r3, r4
 8013006:	d036      	beq.n	8013076 <scalbn+0x86>
 8013008:	4b39      	ldr	r3, [pc, #228]	; (80130f0 <scalbn+0x100>)
 801300a:	4629      	mov	r1, r5
 801300c:	ee10 0a10 	vmov	r0, s0
 8013010:	2200      	movs	r2, #0
 8013012:	f7ed fb0b 	bl	800062c <__aeabi_dmul>
 8013016:	4b37      	ldr	r3, [pc, #220]	; (80130f4 <scalbn+0x104>)
 8013018:	429e      	cmp	r6, r3
 801301a:	4604      	mov	r4, r0
 801301c:	460d      	mov	r5, r1
 801301e:	da10      	bge.n	8013042 <scalbn+0x52>
 8013020:	a32b      	add	r3, pc, #172	; (adr r3, 80130d0 <scalbn+0xe0>)
 8013022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013026:	e03a      	b.n	801309e <scalbn+0xae>
 8013028:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801302c:	428a      	cmp	r2, r1
 801302e:	d10c      	bne.n	801304a <scalbn+0x5a>
 8013030:	ee10 2a10 	vmov	r2, s0
 8013034:	4620      	mov	r0, r4
 8013036:	4629      	mov	r1, r5
 8013038:	f7ed f942 	bl	80002c0 <__adddf3>
 801303c:	4604      	mov	r4, r0
 801303e:	460d      	mov	r5, r1
 8013040:	e019      	b.n	8013076 <scalbn+0x86>
 8013042:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013046:	460b      	mov	r3, r1
 8013048:	3a36      	subs	r2, #54	; 0x36
 801304a:	4432      	add	r2, r6
 801304c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013050:	428a      	cmp	r2, r1
 8013052:	dd08      	ble.n	8013066 <scalbn+0x76>
 8013054:	2d00      	cmp	r5, #0
 8013056:	a120      	add	r1, pc, #128	; (adr r1, 80130d8 <scalbn+0xe8>)
 8013058:	e9d1 0100 	ldrd	r0, r1, [r1]
 801305c:	da1c      	bge.n	8013098 <scalbn+0xa8>
 801305e:	a120      	add	r1, pc, #128	; (adr r1, 80130e0 <scalbn+0xf0>)
 8013060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013064:	e018      	b.n	8013098 <scalbn+0xa8>
 8013066:	2a00      	cmp	r2, #0
 8013068:	dd08      	ble.n	801307c <scalbn+0x8c>
 801306a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801306e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013072:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013076:	ec45 4b10 	vmov	d0, r4, r5
 801307a:	bd70      	pop	{r4, r5, r6, pc}
 801307c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013080:	da19      	bge.n	80130b6 <scalbn+0xc6>
 8013082:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013086:	429e      	cmp	r6, r3
 8013088:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801308c:	dd0a      	ble.n	80130a4 <scalbn+0xb4>
 801308e:	a112      	add	r1, pc, #72	; (adr r1, 80130d8 <scalbn+0xe8>)
 8013090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d1e2      	bne.n	801305e <scalbn+0x6e>
 8013098:	a30f      	add	r3, pc, #60	; (adr r3, 80130d8 <scalbn+0xe8>)
 801309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309e:	f7ed fac5 	bl	800062c <__aeabi_dmul>
 80130a2:	e7cb      	b.n	801303c <scalbn+0x4c>
 80130a4:	a10a      	add	r1, pc, #40	; (adr r1, 80130d0 <scalbn+0xe0>)
 80130a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d0b8      	beq.n	8013020 <scalbn+0x30>
 80130ae:	a10e      	add	r1, pc, #56	; (adr r1, 80130e8 <scalbn+0xf8>)
 80130b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130b4:	e7b4      	b.n	8013020 <scalbn+0x30>
 80130b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80130ba:	3236      	adds	r2, #54	; 0x36
 80130bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80130c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80130c4:	4620      	mov	r0, r4
 80130c6:	4b0c      	ldr	r3, [pc, #48]	; (80130f8 <scalbn+0x108>)
 80130c8:	2200      	movs	r2, #0
 80130ca:	e7e8      	b.n	801309e <scalbn+0xae>
 80130cc:	f3af 8000 	nop.w
 80130d0:	c2f8f359 	.word	0xc2f8f359
 80130d4:	01a56e1f 	.word	0x01a56e1f
 80130d8:	8800759c 	.word	0x8800759c
 80130dc:	7e37e43c 	.word	0x7e37e43c
 80130e0:	8800759c 	.word	0x8800759c
 80130e4:	fe37e43c 	.word	0xfe37e43c
 80130e8:	c2f8f359 	.word	0xc2f8f359
 80130ec:	81a56e1f 	.word	0x81a56e1f
 80130f0:	43500000 	.word	0x43500000
 80130f4:	ffff3cb0 	.word	0xffff3cb0
 80130f8:	3c900000 	.word	0x3c900000

080130fc <_close>:
 80130fc:	4b02      	ldr	r3, [pc, #8]	; (8013108 <_close+0xc>)
 80130fe:	2258      	movs	r2, #88	; 0x58
 8013100:	601a      	str	r2, [r3, #0]
 8013102:	f04f 30ff 	mov.w	r0, #4294967295
 8013106:	4770      	bx	lr
 8013108:	200037ec 	.word	0x200037ec

0801310c <_fstat>:
 801310c:	4b02      	ldr	r3, [pc, #8]	; (8013118 <_fstat+0xc>)
 801310e:	2258      	movs	r2, #88	; 0x58
 8013110:	601a      	str	r2, [r3, #0]
 8013112:	f04f 30ff 	mov.w	r0, #4294967295
 8013116:	4770      	bx	lr
 8013118:	200037ec 	.word	0x200037ec

0801311c <_getpid>:
 801311c:	4b02      	ldr	r3, [pc, #8]	; (8013128 <_getpid+0xc>)
 801311e:	2258      	movs	r2, #88	; 0x58
 8013120:	601a      	str	r2, [r3, #0]
 8013122:	f04f 30ff 	mov.w	r0, #4294967295
 8013126:	4770      	bx	lr
 8013128:	200037ec 	.word	0x200037ec

0801312c <_isatty>:
 801312c:	4b02      	ldr	r3, [pc, #8]	; (8013138 <_isatty+0xc>)
 801312e:	2258      	movs	r2, #88	; 0x58
 8013130:	601a      	str	r2, [r3, #0]
 8013132:	2000      	movs	r0, #0
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop
 8013138:	200037ec 	.word	0x200037ec

0801313c <_kill>:
 801313c:	4b02      	ldr	r3, [pc, #8]	; (8013148 <_kill+0xc>)
 801313e:	2258      	movs	r2, #88	; 0x58
 8013140:	601a      	str	r2, [r3, #0]
 8013142:	f04f 30ff 	mov.w	r0, #4294967295
 8013146:	4770      	bx	lr
 8013148:	200037ec 	.word	0x200037ec

0801314c <_lseek>:
 801314c:	4b02      	ldr	r3, [pc, #8]	; (8013158 <_lseek+0xc>)
 801314e:	2258      	movs	r2, #88	; 0x58
 8013150:	601a      	str	r2, [r3, #0]
 8013152:	f04f 30ff 	mov.w	r0, #4294967295
 8013156:	4770      	bx	lr
 8013158:	200037ec 	.word	0x200037ec

0801315c <_read>:
 801315c:	4b02      	ldr	r3, [pc, #8]	; (8013168 <_read+0xc>)
 801315e:	2258      	movs	r2, #88	; 0x58
 8013160:	601a      	str	r2, [r3, #0]
 8013162:	f04f 30ff 	mov.w	r0, #4294967295
 8013166:	4770      	bx	lr
 8013168:	200037ec 	.word	0x200037ec

0801316c <_sbrk>:
 801316c:	4a04      	ldr	r2, [pc, #16]	; (8013180 <_sbrk+0x14>)
 801316e:	6811      	ldr	r1, [r2, #0]
 8013170:	4603      	mov	r3, r0
 8013172:	b909      	cbnz	r1, 8013178 <_sbrk+0xc>
 8013174:	4903      	ldr	r1, [pc, #12]	; (8013184 <_sbrk+0x18>)
 8013176:	6011      	str	r1, [r2, #0]
 8013178:	6810      	ldr	r0, [r2, #0]
 801317a:	4403      	add	r3, r0
 801317c:	6013      	str	r3, [r2, #0]
 801317e:	4770      	bx	lr
 8013180:	200037f4 	.word	0x200037f4
 8013184:	200037f8 	.word	0x200037f8

08013188 <_write>:
 8013188:	4b02      	ldr	r3, [pc, #8]	; (8013194 <_write+0xc>)
 801318a:	2258      	movs	r2, #88	; 0x58
 801318c:	601a      	str	r2, [r3, #0]
 801318e:	f04f 30ff 	mov.w	r0, #4294967295
 8013192:	4770      	bx	lr
 8013194:	200037ec 	.word	0x200037ec

08013198 <_exit>:
 8013198:	e7fe      	b.n	8013198 <_exit>
	...

0801319c <_init>:
 801319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801319e:	bf00      	nop
 80131a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131a2:	bc08      	pop	{r3}
 80131a4:	469e      	mov	lr, r3
 80131a6:	4770      	bx	lr

080131a8 <_fini>:
 80131a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131aa:	bf00      	nop
 80131ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131ae:	bc08      	pop	{r3}
 80131b0:	469e      	mov	lr, r3
 80131b2:	4770      	bx	lr
