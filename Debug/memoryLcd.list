
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aae4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002f2b8  0801ac98  0801ac98  0002ac98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08049f50  08049f50  00060528  2**0
                  CONTENTS
  4 .ARM          00000008  08049f50  08049f50  00059f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08049f58  08049f58  00060528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08049f58  08049f58  00059f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08049f5c  08049f5c  00059f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000528  20000000  08049f60  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00060528  2**0
                  CONTENTS
 10 .bss          000058a4  20000528  20000528  00060528  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005dcc  20005dcc  00060528  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00060528  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bc9c  00000000  00000000  00060558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007430  00000000  00000000  0008c1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021d0  00000000  00000000  00093628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ef0  00000000  00000000  000957f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f735  00000000  00000000  000976e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003425a  00000000  00000000  000c6e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efa25  00000000  00000000  000fb077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001eaa9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aa2c  00000000  00000000  001eaaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000528 	.word	0x20000528
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801ac7c 	.word	0x0801ac7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000052c 	.word	0x2000052c
 80001ec:	0801ac7c 	.word	0x0801ac7c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <SD_logger>:
void Send_Uart (char *string)
{
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}

void SD_logger(char *msg){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	Create_Dir("logs");
 8001040:	4806      	ldr	r0, [pc, #24]	; (800105c <SD_logger+0x24>)
 8001042:	f000 fa5b 	bl	80014fc <Create_Dir>
	Create_File("logs/LOG.TXT");
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <SD_logger+0x28>)
 8001048:	f000 f918 	bl	800127c <Create_File>
	Update_File("logs/LOG.TXT", msg);
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <SD_logger+0x28>)
 8001050:	f000 f9a0 	bl	8001394 <Update_File>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0801ac98 	.word	0x0801ac98
 8001060:	0801aca0 	.word	0x0801aca0

08001064 <Mount_SD>:

uint8_t Mount_SD (const TCHAR* path)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4808      	ldr	r0, [pc, #32]	; (8001094 <Mount_SD+0x30>)
 8001072:	f00f fe8d 	bl	8010d90 <f_mount>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <Mount_SD+0x34>)
 800107c:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
	if (fresult != FR_OK){
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <Mount_SD+0x34>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <Mount_SD+0x26>
		return SD_ERROR;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <Mount_SD+0x28>
	} else{
		return SD_SUCCESS;
 800108a:	2301      	movs	r3, #1
	}
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000544 	.word	0x20000544
 8001098:	200025c0 	.word	0x200025c0

0800109c <Scan_SD_my>:
	else return SD_ERROR;
}

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_SD_my (DIR *dir, char *filename)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]

    if (fresult == FR_OK)
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <Scan_SD_my+0x68>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d123      	bne.n	80010f6 <Scan_SD_my+0x5a>
    {
		fresult = f_readdir(dir, &fno);                   /* Read a directory item */
 80010ae:	4916      	ldr	r1, [pc, #88]	; (8001108 <Scan_SD_my+0x6c>)
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f010 fcb3 	bl	8011a1c <f_readdir>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <Scan_SD_my+0x68>)
 80010bc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK || fno.fname[0] == 0)  return fresult;  /* Break on error or end of dir */
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <Scan_SD_my+0x68>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d103      	bne.n	80010ce <Scan_SD_my+0x32>
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <Scan_SD_my+0x6c>)
 80010c8:	7a5b      	ldrb	r3, [r3, #9]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <Scan_SD_my+0x38>
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <Scan_SD_my+0x68>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	e012      	b.n	80010fa <Scan_SD_my+0x5e>
		if (fno.fattrib & AM_DIR)     /* It is a directory */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <Scan_SD_my+0x6c>)
 80010d6:	7a1b      	ldrb	r3, [r3, #8]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <Scan_SD_my+0x50>
		{
			sprintf (filename, "Dir: %s\r\n", fno.fname);
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <Scan_SD_my+0x70>)
 80010e2:	490b      	ldr	r1, [pc, #44]	; (8001110 <Scan_SD_my+0x74>)
 80010e4:	6838      	ldr	r0, [r7, #0]
 80010e6:	f012 f923 	bl	8013330 <siprintf>
 80010ea:	e004      	b.n	80010f6 <Scan_SD_my+0x5a>
		}
		else
		{   /* It is a file. */
		   sprintf(filename,"File: %s\n", fno.fname);
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <Scan_SD_my+0x70>)
 80010ee:	4909      	ldr	r1, [pc, #36]	; (8001114 <Scan_SD_my+0x78>)
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f012 f91d 	bl	8013330 <siprintf>
		}
    }
    return fresult;
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <Scan_SD_my+0x68>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200025c0 	.word	0x200025c0
 8001108:	200025a8 	.word	0x200025a8
 800110c:	200025b1 	.word	0x200025b1
 8001110:	0801acb0 	.word	0x0801acb0
 8001114:	0801acbc 	.word	0x0801acbc

08001118 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name, char *outputBuffer)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001122:	494d      	ldr	r1, [pc, #308]	; (8001258 <Read_File+0x140>)
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f010 fcb6 	bl	8011a96 <f_stat>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b4b      	ldr	r3, [pc, #300]	; (800125c <Read_File+0x144>)
 8001130:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001132:	4b4a      	ldr	r3, [pc, #296]	; (800125c <Read_File+0x144>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00f      	beq.n	800115a <Read_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 800113a:	2064      	movs	r0, #100	; 0x64
 800113c:	f010 ffac 	bl	8012098 <malloc>
 8001140:	4603      	mov	r3, r0
 8001142:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4946      	ldr	r1, [pc, #280]	; (8001260 <Read_File+0x148>)
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f012 f8f1 	bl	8013330 <siprintf>
//		Send_Uart (buf);
		free(buf);
 800114e:	68b8      	ldr	r0, [r7, #8]
 8001150:	f010 ffaa 	bl	80120a8 <free>
	    return fresult;
 8001154:	4b41      	ldr	r3, [pc, #260]	; (800125c <Read_File+0x144>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	e07a      	b.n	8001250 <Read_File+0x138>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 800115a:	2201      	movs	r2, #1
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4841      	ldr	r0, [pc, #260]	; (8001264 <Read_File+0x14c>)
 8001160:	f00f fe5c 	bl	8010e1c <f_open>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b3c      	ldr	r3, [pc, #240]	; (800125c <Read_File+0x144>)
 800116a:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 800116c:	4b3b      	ldr	r3, [pc, #236]	; (800125c <Read_File+0x144>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d012      	beq.n	800119a <Read_File+0x82>
		{
			char *buf = malloc(100*sizeof(char));
 8001174:	2064      	movs	r0, #100	; 0x64
 8001176:	f010 ff8f 	bl	8012098 <malloc>
 800117a:	4603      	mov	r3, r0
 800117c:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 800117e:	4b37      	ldr	r3, [pc, #220]	; (800125c <Read_File+0x144>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4938      	ldr	r1, [pc, #224]	; (8001268 <Read_File+0x150>)
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f012 f8d1 	bl	8013330 <siprintf>
//		    Send_Uart(buf);
		    free(buf);
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f010 ff8a 	bl	80120a8 <free>
		    return fresult;
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <Read_File+0x144>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	e05a      	b.n	8001250 <Read_File+0x138>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 800119a:	2004      	movs	r0, #4
 800119c:	f010 ff7c 	bl	8012098 <malloc>
 80011a0:	4603      	mov	r3, r0
 80011a2:	61fb      	str	r3, [r7, #28]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <Read_File+0x14c>)
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	4b30      	ldr	r3, [pc, #192]	; (800126c <Read_File+0x154>)
 80011aa:	69f9      	ldr	r1, [r7, #28]
 80011ac:	482d      	ldr	r0, [pc, #180]	; (8001264 <Read_File+0x14c>)
 80011ae:	f010 f801 	bl	80111b4 <f_read>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <Read_File+0x144>)
 80011b8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <Read_File+0x144>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d013      	beq.n	80011ea <Read_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 80011c2:	2064      	movs	r0, #100	; 0x64
 80011c4:	f010 ff68 	bl	8012098 <malloc>
 80011c8:	4603      	mov	r3, r0
 80011ca:	613b      	str	r3, [r7, #16]
			free(buffer);
 80011cc:	69f8      	ldr	r0, [r7, #28]
 80011ce:	f010 ff6b 	bl	80120a8 <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <Read_File+0x144>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4925      	ldr	r1, [pc, #148]	; (8001270 <Read_File+0x158>)
 80011dc:	6938      	ldr	r0, [r7, #16]
 80011de:	f012 f8a7 	bl	8013330 <siprintf>
//		  	Send_Uart(buffer);
		  	free(buf);
 80011e2:	6938      	ldr	r0, [r7, #16]
 80011e4:	f010 ff60 	bl	80120a8 <free>
 80011e8:	e030      	b.n	800124c <Read_File+0x134>
		}

		else
		{
//			Send_Uart(buffer);
			strncpy(outputBuffer, buffer, 49);
 80011ea:	2231      	movs	r2, #49	; 0x31
 80011ec:	69f9      	ldr	r1, [r7, #28]
 80011ee:	6838      	ldr	r0, [r7, #0]
 80011f0:	f012 fe72 	bl	8013ed8 <strncpy>
			free(buffer);
 80011f4:	69f8      	ldr	r0, [r7, #28]
 80011f6:	f010 ff57 	bl	80120a8 <free>

			/* Close file */
			fresult = f_close(&fil);
 80011fa:	481a      	ldr	r0, [pc, #104]	; (8001264 <Read_File+0x14c>)
 80011fc:	f010 fb4b 	bl	8011896 <f_close>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <Read_File+0x144>)
 8001206:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <Read_File+0x144>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d010      	beq.n	8001232 <Read_File+0x11a>
			{
				char *buf = malloc(100*sizeof(char));
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f010 ff41 	bl	8012098 <malloc>
 8001216:	4603      	mov	r3, r0
 8001218:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <Read_File+0x144>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4914      	ldr	r1, [pc, #80]	; (8001274 <Read_File+0x15c>)
 8001224:	6978      	ldr	r0, [r7, #20]
 8001226:	f012 f883 	bl	8013330 <siprintf>
//				Send_Uart(buf);
				free(buf);
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f010 ff3c 	bl	80120a8 <free>
 8001230:	e00c      	b.n	800124c <Read_File+0x134>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	f010 ff30 	bl	8012098 <malloc>
 8001238:	4603      	mov	r3, r0
 800123a:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <Read_File+0x160>)
 8001240:	69b8      	ldr	r0, [r7, #24]
 8001242:	f012 f875 	bl	8013330 <siprintf>
//				Send_Uart(buf);
				free(buf);
 8001246:	69b8      	ldr	r0, [r7, #24]
 8001248:	f010 ff2e 	bl	80120a8 <free>
			}
		}
	    return fresult;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <Read_File+0x144>)
 800124e:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001250:	4618      	mov	r0, r3
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200025a8 	.word	0x200025a8
 800125c:	200025c0 	.word	0x200025c0
 8001260:	0801add4 	.word	0x0801add4
 8001264:	20001578 	.word	0x20001578
 8001268:	0801ad10 	.word	0x0801ad10
 800126c:	200025c4 	.word	0x200025c4
 8001270:	0801adf8 	.word	0x0801adf8
 8001274:	0801ae20 	.word	0x0801ae20
 8001278:	0801ae48 	.word	0x0801ae48

0800127c <Create_File>:

FRESULT Create_File (char *name)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001284:	493b      	ldr	r1, [pc, #236]	; (8001374 <Create_File+0xf8>)
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f010 fc05 	bl	8011a96 <f_stat>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <Create_File+0xfc>)
 8001292:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <Create_File+0xfc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10f      	bne.n	80012bc <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f010 fefb 	bl	8012098 <malloc>
 80012a2:	4603      	mov	r3, r0
 80012a4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4934      	ldr	r1, [pc, #208]	; (800137c <Create_File+0x100>)
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f012 f840 	bl	8013330 <siprintf>
//		Send_Uart(buf);
		free(buf);
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f010 fef9 	bl	80120a8 <free>
	    return fresult;
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <Create_File+0xfc>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	e057      	b.n	800136c <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80012bc:	220b      	movs	r2, #11
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	482f      	ldr	r0, [pc, #188]	; (8001380 <Create_File+0x104>)
 80012c2:	f00f fdab 	bl	8010e1c <f_open>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <Create_File+0xfc>)
 80012cc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <Create_File+0xfc>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d012      	beq.n	80012fc <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 80012d6:	2064      	movs	r0, #100	; 0x64
 80012d8:	f010 fede 	bl	8012098 <malloc>
 80012dc:	4603      	mov	r3, r0
 80012de:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <Create_File+0xfc>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4926      	ldr	r1, [pc, #152]	; (8001384 <Create_File+0x108>)
 80012ea:	6938      	ldr	r0, [r7, #16]
 80012ec:	f012 f820 	bl	8013330 <siprintf>
//			Send_Uart(buf);
			free(buf);
 80012f0:	6938      	ldr	r0, [r7, #16]
 80012f2:	f010 fed9 	bl	80120a8 <free>
		    return fresult;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <Create_File+0xfc>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	e037      	b.n	800136c <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80012fc:	2064      	movs	r0, #100	; 0x64
 80012fe:	f010 fecb 	bl	8012098 <malloc>
 8001302:	4603      	mov	r3, r0
 8001304:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	491f      	ldr	r1, [pc, #124]	; (8001388 <Create_File+0x10c>)
 800130a:	69f8      	ldr	r0, [r7, #28]
 800130c:	f012 f810 	bl	8013330 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001310:	69f8      	ldr	r0, [r7, #28]
 8001312:	f010 fec9 	bl	80120a8 <free>
		}

		fresult = f_close(&fil);
 8001316:	481a      	ldr	r0, [pc, #104]	; (8001380 <Create_File+0x104>)
 8001318:	f010 fabd 	bl	8011896 <f_close>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <Create_File+0xfc>)
 8001322:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <Create_File+0xfc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d010      	beq.n	800134e <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 800132c:	2064      	movs	r0, #100	; 0x64
 800132e:	f010 feb3 	bl	8012098 <malloc>
 8001332:	4603      	mov	r3, r0
 8001334:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <Create_File+0xfc>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4913      	ldr	r1, [pc, #76]	; (800138c <Create_File+0x110>)
 8001340:	6978      	ldr	r0, [r7, #20]
 8001342:	f011 fff5 	bl	8013330 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f010 feae 	bl	80120a8 <free>
 800134c:	e00c      	b.n	8001368 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800134e:	2064      	movs	r0, #100	; 0x64
 8001350:	f010 fea2 	bl	8012098 <malloc>
 8001354:	4603      	mov	r3, r0
 8001356:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <Create_File+0x114>)
 800135c:	69b8      	ldr	r0, [r7, #24]
 800135e:	f011 ffe7 	bl	8013330 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001362:	69b8      	ldr	r0, [r7, #24]
 8001364:	f010 fea0 	bl	80120a8 <free>
		}
	}
    return fresult;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <Create_File+0xfc>)
 800136a:	781b      	ldrb	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200025a8 	.word	0x200025a8
 8001378:	200025c0 	.word	0x200025c0
 800137c:	0801ae68 	.word	0x0801ae68
 8001380:	20001578 	.word	0x20001578
 8001384:	0801aea0 	.word	0x0801aea0
 8001388:	0801aec8 	.word	0x0801aec8
 800138c:	0801af08 	.word	0x0801af08
 8001390:	0801ae48 	.word	0x0801ae48

08001394 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800139e:	494d      	ldr	r1, [pc, #308]	; (80014d4 <Update_File+0x140>)
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f010 fb78 	bl	8011a96 <f_stat>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <Update_File+0x144>)
 80013ac:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <Update_File+0x144>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00f      	beq.n	80013d6 <Update_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f010 fe6e 	bl	8012098 <malloc>
 80013bc:	4603      	mov	r3, r0
 80013be:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4946      	ldr	r1, [pc, #280]	; (80014dc <Update_File+0x148>)
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f011 ffb3 	bl	8013330 <siprintf>
//		Send_Uart (buf);
		free(buf);
 80013ca:	68b8      	ldr	r0, [r7, #8]
 80013cc:	f010 fe6c 	bl	80120a8 <free>
	    return fresult;
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <Update_File+0x144>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	e079      	b.n	80014ca <Update_File+0x136>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80013d6:	2232      	movs	r2, #50	; 0x32
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4841      	ldr	r0, [pc, #260]	; (80014e0 <Update_File+0x14c>)
 80013dc:	f00f fd1e 	bl	8010e1c <f_open>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <Update_File+0x144>)
 80013e6:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <Update_File+0x144>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d012      	beq.n	8001416 <Update_File+0x82>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013f0:	2064      	movs	r0, #100	; 0x64
 80013f2:	f010 fe51 	bl	8012098 <malloc>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <Update_File+0x144>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4938      	ldr	r1, [pc, #224]	; (80014e4 <Update_File+0x150>)
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f011 ff93 	bl	8013330 <siprintf>
//	    	Send_Uart(buf);
	        free(buf);
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f010 fe4c 	bl	80120a8 <free>
	        return fresult;
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <Update_File+0x144>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	e059      	b.n	80014ca <Update_File+0x136>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001416:	6838      	ldr	r0, [r7, #0]
 8001418:	f7fe fef4 	bl	8000204 <strlen>
 800141c:	4602      	mov	r2, r0
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <Update_File+0x154>)
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	482f      	ldr	r0, [pc, #188]	; (80014e0 <Update_File+0x14c>)
 8001424:	f010 f825 	bl	8011472 <f_write>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <Update_File+0x144>)
 800142e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <Update_File+0x144>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d010      	beq.n	800145a <Update_File+0xc6>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f010 fe2d 	bl	8012098 <malloc>
 800143e:	4603      	mov	r3, r0
 8001440:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <Update_File+0x144>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4928      	ldr	r1, [pc, #160]	; (80014ec <Update_File+0x158>)
 800144c:	69b8      	ldr	r0, [r7, #24]
 800144e:	f011 ff6f 	bl	8013330 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 8001452:	69b8      	ldr	r0, [r7, #24]
 8001454:	f010 fe28 	bl	80120a8 <free>
 8001458:	e00c      	b.n	8001474 <Update_File+0xe0>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800145a:	2064      	movs	r0, #100	; 0x64
 800145c:	f010 fe1c 	bl	8012098 <malloc>
 8001460:	4603      	mov	r3, r0
 8001462:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4922      	ldr	r1, [pc, #136]	; (80014f0 <Update_File+0x15c>)
 8001468:	69f8      	ldr	r0, [r7, #28]
 800146a:	f011 ff61 	bl	8013330 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800146e:	69f8      	ldr	r0, [r7, #28]
 8001470:	f010 fe1a 	bl	80120a8 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001474:	481a      	ldr	r0, [pc, #104]	; (80014e0 <Update_File+0x14c>)
 8001476:	f010 fa0e 	bl	8011896 <f_close>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <Update_File+0x144>)
 8001480:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <Update_File+0x144>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d010      	beq.n	80014ac <Update_File+0x118>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800148a:	2064      	movs	r0, #100	; 0x64
 800148c:	f010 fe04 	bl	8012098 <malloc>
 8001490:	4603      	mov	r3, r0
 8001492:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <Update_File+0x144>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4915      	ldr	r1, [pc, #84]	; (80014f4 <Update_File+0x160>)
 800149e:	6938      	ldr	r0, [r7, #16]
 80014a0:	f011 ff46 	bl	8013330 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80014a4:	6938      	ldr	r0, [r7, #16]
 80014a6:	f010 fdff 	bl	80120a8 <free>
 80014aa:	e00c      	b.n	80014c6 <Update_File+0x132>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80014ac:	2064      	movs	r0, #100	; 0x64
 80014ae:	f010 fdf3 	bl	8012098 <malloc>
 80014b2:	4603      	mov	r3, r0
 80014b4:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	490f      	ldr	r1, [pc, #60]	; (80014f8 <Update_File+0x164>)
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f011 ff38 	bl	8013330 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f010 fdf1 	bl	80120a8 <free>
	     }
	}
    return fresult;
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <Update_File+0x144>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200025a8 	.word	0x200025a8
 80014d8:	200025c0 	.word	0x200025c0
 80014dc:	0801acf0 	.word	0x0801acf0
 80014e0:	20001578 	.word	0x20001578
 80014e4:	0801ad10 	.word	0x0801ad10
 80014e8:	200025c8 	.word	0x200025c8
 80014ec:	0801af2c 	.word	0x0801af2c
 80014f0:	0801af54 	.word	0x0801af54
 80014f4:	0801ae20 	.word	0x0801ae20
 80014f8:	0801ae48 	.word	0x0801ae48

080014fc <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f010 fbb4 	bl	8011c72 <f_mkdir>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <Create_Dir+0x68>)
 8001510:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <Create_Dir+0x68>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10d      	bne.n	8001536 <Create_Dir+0x3a>
    {
    	char *buf = malloc(100*sizeof(char));
 800151a:	2064      	movs	r0, #100	; 0x64
 800151c:	f010 fdbc 	bl	8012098 <malloc>
 8001520:	4603      	mov	r3, r0
 8001522:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4910      	ldr	r1, [pc, #64]	; (8001568 <Create_Dir+0x6c>)
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f011 ff01 	bl	8013330 <siprintf>
//    	Send_Uart (buf);
    	free(buf);
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f010 fdba 	bl	80120a8 <free>
 8001534:	e00f      	b.n	8001556 <Create_Dir+0x5a>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8001536:	2064      	movs	r0, #100	; 0x64
 8001538:	f010 fdae 	bl	8012098 <malloc>
 800153c:	4603      	mov	r3, r0
 800153e:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <Create_Dir+0x68>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4908      	ldr	r1, [pc, #32]	; (800156c <Create_Dir+0x70>)
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f011 fef0 	bl	8013330 <siprintf>
//    	Send_Uart(buf);
    	free(buf);
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f010 fda9 	bl	80120a8 <free>
    }
    return fresult;
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <Create_Dir+0x68>)
 8001558:	781b      	ldrb	r3, [r3, #0]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200025c0 	.word	0x200025c0
 8001568:	0801afb4 	.word	0x0801afb4
 800156c:	0801afd8 	.word	0x0801afd8

08001570 <Check_SD_Space>:

void Check_SD_Space (char* free_total)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    /* Check free space */
    f_getfree("", &fre_clust, &pfs);
 8001578:	4a30      	ldr	r2, [pc, #192]	; (800163c <Check_SD_Space+0xcc>)
 800157a:	4931      	ldr	r1, [pc, #196]	; (8001640 <Check_SD_Space+0xd0>)
 800157c:	4831      	ldr	r0, [pc, #196]	; (8001644 <Check_SD_Space+0xd4>)
 800157e:	f010 fac3 	bl	8011b08 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <Check_SD_Space+0xcc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	3b02      	subs	r3, #2
 800158a:	4a2c      	ldr	r2, [pc, #176]	; (800163c <Check_SD_Space+0xcc>)
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	8952      	ldrh	r2, [r2, #10]
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffd5 	bl	8000544 <__aeabi_ui2d>
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <Check_SD_Space+0xd8>)
 80015a0:	f7ff f84a 	bl	8000638 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fb1c 	bl	8000be8 <__aeabi_d2uiz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <Check_SD_Space+0xdc>)
 80015b4:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 80015b6:	201e      	movs	r0, #30
 80015b8:	f010 fd6e 	bl	8012098 <malloc>
 80015bc:	4603      	mov	r3, r0
 80015be:	60fb      	str	r3, [r7, #12]
    sprintf (buf, "SD CARD Total Size: \t%lu\n",total);
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <Check_SD_Space+0xdc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4922      	ldr	r1, [pc, #136]	; (8001650 <Check_SD_Space+0xe0>)
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f011 feb1 	bl	8013330 <siprintf>
//    Send_Uart(buf);
    free(buf);
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f010 fd6a 	bl	80120a8 <free>
    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <Check_SD_Space+0xcc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	895b      	ldrh	r3, [r3, #10]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <Check_SD_Space+0xd0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffad 	bl	8000544 <__aeabi_ui2d>
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <Check_SD_Space+0xd8>)
 80015f0:	f7ff f822 	bl	8000638 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff faf4 	bl	8000be8 <__aeabi_d2uiz>
 8001600:	4603      	mov	r3, r0
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <Check_SD_Space+0xe4>)
 8001604:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 8001606:	201e      	movs	r0, #30
 8001608:	f010 fd46 	bl	8012098 <malloc>
 800160c:	4603      	mov	r3, r0
 800160e:	60fb      	str	r3, [r7, #12]
    sprintf (buf, "SD CARD Free Space: \t%lu\n",free_space);
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <Check_SD_Space+0xe4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4910      	ldr	r1, [pc, #64]	; (8001658 <Check_SD_Space+0xe8>)
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f011 fe89 	bl	8013330 <siprintf>
//    Send_Uart(buf);
    free(buf);
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f010 fd42 	bl	80120a8 <free>
    sprintf (free_total, "%lu/%lu", free_space, total);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <Check_SD_Space+0xe4>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <Check_SD_Space+0xdc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	490b      	ldr	r1, [pc, #44]	; (800165c <Check_SD_Space+0xec>)
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f011 fe7e 	bl	8013330 <siprintf>
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200025cc 	.word	0x200025cc
 8001640:	200025d0 	.word	0x200025d0
 8001644:	0801b004 	.word	0x0801b004
 8001648:	3fe00000 	.word	0x3fe00000
 800164c:	200025d4 	.word	0x200025d4
 8001650:	0801b008 	.word	0x0801b008
 8001654:	200025d8 	.word	0x200025d8
 8001658:	0801b024 	.word	0x0801b024
 800165c:	0801b040 	.word	0x0801b040

08001660 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 800166a:	2300      	movs	r3, #0
 800166c:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 800166e:	2332      	movs	r3, #50	; 0x32
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	2301      	movs	r3, #1
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	22d0      	movs	r2, #208	; 0xd0
 800167e:	21ef      	movs	r1, #239	; 0xef
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <read_chip_id+0x3c>)
 8001682:	f007 fec9 	bl	8009418 <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 8001686:	79bb      	ldrb	r3, [r7, #6]
 8001688:	2b55      	cmp	r3, #85	; 0x55
 800168a:	d001      	beq.n	8001690 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 800168c:	2301      	movs	r3, #1
 800168e:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001690:	79fb      	ldrb	r3, [r7, #7]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20002710 	.word	0x20002710

080016a0 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af04      	add	r7, sp, #16
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80016ac:	2300      	movs	r3, #0
 80016ae:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d81a      	bhi.n	80016ec <set_oss+0x4c>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <set_oss+0x1c>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	080016d5 	.word	0x080016d5
 80016c4:	080016dd 	.word	0x080016dd
 80016c8:	080016e5 	.word	0x080016e5
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2205      	movs	r2, #5
 80016d0:	705a      	strb	r2, [r3, #1]
			break;
 80016d2:	e00f      	b.n	80016f4 <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2208      	movs	r2, #8
 80016d8:	705a      	strb	r2, [r3, #1]
			break;
 80016da:	e00b      	b.n	80016f4 <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	220e      	movs	r2, #14
 80016e0:	705a      	strb	r2, [r3, #1]
			break;
 80016e2:	e007      	b.n	80016f4 <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	221a      	movs	r2, #26
 80016e8:	705a      	strb	r2, [r3, #1]
			break;
 80016ea:	e003      	b.n	80016f4 <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2208      	movs	r2, #8
 80016f0:	705a      	strb	r2, [r3, #1]
			break;
 80016f2:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	019b      	lsls	r3, r3, #6
 80016fe:	70fb      	strb	r3, [r7, #3]
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 8001704:	2332      	movs	r3, #50	; 0x32
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	2302      	movs	r3, #2
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	22f4      	movs	r2, #244	; 0xf4
 8001716:	21ee      	movs	r1, #238	; 0xee
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <set_oss+0x88>)
 800171a:	f007 fd83 	bl	8009224 <HAL_I2C_Mem_Write>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20002710 	.word	0x20002710

0800172c <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08e      	sub	sp, #56	; 0x38
 8001730:	af04      	add	r7, sp, #16
 8001732:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 800175a:	2332      	movs	r3, #50	; 0x32
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2316      	movs	r3, #22
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	22aa      	movs	r2, #170	; 0xaa
 800176c:	21ef      	movs	r1, #239	; 0xef
 800176e:	4827      	ldr	r0, [pc, #156]	; (800180c <read_calib_data+0xe0>)
 8001770:	f007 fe52 	bl	8009418 <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800177a:	e03c      	b.n	80017f6 <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 800177c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	3328      	adds	r3, #40	; 0x28
 8001784:	443b      	add	r3, r7
 8001786:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	b219      	sxth	r1, r3
 800178e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001792:	3328      	adds	r3, #40	; 0x28
 8001794:	443b      	add	r3, r7
 8001796:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800179a:	b21a      	sxth	r2, r3
 800179c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4403      	add	r3, r0
 80017a6:	430a      	orrs	r2, r1
 80017a8:	b212      	sxth	r2, r2
 80017aa:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80017ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	bf0c      	ite	eq
 80017be:	2301      	moveq	r3, #1
 80017c0:	2300      	movne	r3, #0
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	440b      	add	r3, r1
 80017ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80017ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017f0:	3301      	adds	r3, #1
 80017f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017fa:	2b0b      	cmp	r3, #11
 80017fc:	d9be      	bls.n	800177c <read_calib_data+0x50>
		}
	}

	return ret_val;
 80017fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001802:	4618      	mov	r0, r3
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20002710 	.word	0x20002710

08001810 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2204      	movs	r2, #4
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f010 fc58 	bl	80120d4 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 8001824:	687c      	ldr	r4, [r7, #4]
 8001826:	f7ff ff1b 	bl	8001660 <read_chip_id>
 800182a:	4603      	mov	r3, r0
 800182c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	687c      	ldr	r4, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff79 	bl	800172c <read_calib_data>
 800183a:	4603      	mov	r3, r0
 800183c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, HIGH);       // set oversampling settings
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3340      	adds	r3, #64	; 0x40
 8001844:	2102      	movs	r1, #2
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff2a 	bl	80016a0 <set_oss>
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 800185a:	232e      	movs	r3, #46	; 0x2e
 800185c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800185e:	2332      	movs	r3, #50	; 0x32
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	2301      	movs	r3, #1
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	22f4      	movs	r2, #244	; 0xf4
 800186e:	21ee      	movs	r1, #238	; 0xee
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <get_ut+0x50>)
 8001872:	f007 fcd7 	bl	8009224 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 8001876:	2005      	movs	r0, #5
 8001878:	f006 ffb8 	bl	80087ec <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 800187c:	2332      	movs	r3, #50	; 0x32
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	2302      	movs	r3, #2
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	22f6      	movs	r2, #246	; 0xf6
 800188c:	21ef      	movs	r1, #239	; 0xef
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <get_ut+0x50>)
 8001890:	f007 fdc2 	bl	8009418 <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 8001894:	793b      	ldrb	r3, [r7, #4]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	797a      	ldrb	r2, [r7, #5]
 800189a:	4313      	orrs	r3, r2
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20002710 	.word	0x20002710

080018a8 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80018c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c8:	ee17 2a90 	vmov	r2, s15
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	895b      	ldrh	r3, [r3, #10]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	8912      	ldrh	r2, [r2, #8]
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	13db      	asrs	r3, r3, #15
 80018dc:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018e4:	02da      	lsls	r2, r3, #11
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018ec:	4619      	mov	r1, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	440b      	add	r3, r1
 80018f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f6:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	441a      	add	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	3308      	adds	r3, #8
 8001908:	111b      	asrs	r3, r3, #4
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001912:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001960 <get_temp+0xb8>
 8001916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191a:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 800191e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001922:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001964 <get_temp+0xbc>
 8001926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	d908      	bls.n	8001942 <get_temp+0x9a>
 8001930:	edd7 7a03 	vldr	s15, [r7, #12]
 8001934:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001968 <get_temp+0xc0>
 8001938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	db03      	blt.n	800194a <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2203      	movs	r2, #3
 8001946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	ee07 3a90 	vmov	s15, r3
}
 8001950:	eeb0 0a67 	vmov.f32	s0, s15
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	3dcccccd 	.word	0x3dcccccd
 8001964:	c2200000 	.word	0xc2200000
 8001968:	42aa0000 	.word	0x42aa0000

0800196c <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af04      	add	r7, sp, #16
 8001972:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <get_up+0x7c>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	813b      	strh	r3, [r7, #8]
 800197a:	2300      	movs	r3, #0
 800197c:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 8001982:	2334      	movs	r3, #52	; 0x34
 8001984:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001986:	2332      	movs	r3, #50	; 0x32
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	2301      	movs	r3, #1
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	22f4      	movs	r2, #244	; 0xf4
 8001998:	21ee      	movs	r1, #238	; 0xee
 800199a:	4814      	ldr	r0, [pc, #80]	; (80019ec <get_up+0x80>)
 800199c:	f007 fc42 	bl	8009224 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80019a0:	797b      	ldrb	r3, [r7, #5]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f006 ff22 	bl	80087ec <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80019a8:	2332      	movs	r3, #50	; 0x32
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2303      	movs	r3, #3
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	22f6      	movs	r2, #246	; 0xf6
 80019ba:	21ef      	movs	r1, #239	; 0xef
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <get_up+0x80>)
 80019be:	f007 fd2b 	bl	8009418 <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80019c2:	7a3b      	ldrb	r3, [r7, #8]
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	7a7b      	ldrb	r3, [r7, #9]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	4413      	add	r3, r2
 80019cc:	7aba      	ldrb	r2, [r7, #10]
 80019ce:	441a      	add	r2, r3
 80019d0:	793b      	ldrb	r3, [r7, #4]
 80019d2:	f1c3 0308 	rsb	r3, r3, #8
 80019d6:	fa42 f303 	asr.w	r3, r2, r3
 80019da:	60fb      	str	r3, [r7, #12]
	return up;
 80019dc:	68fb      	ldr	r3, [r7, #12]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	0801b048 	.word	0x0801b048
 80019ec:	20002710 	.word	0x20002710

080019f0 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80019f0:	b084      	sub	sp, #16
 80019f2:	b480      	push	{r7}
 80019f4:	b089      	sub	sp, #36	; 0x24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80019fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001a0e:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001a10:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001a14:	461a      	mov	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fb03 f303 	mul.w	r3, r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da01      	bge.n	8001a24 <get_pressure+0x34>
 8001a20:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001a24:	131b      	asrs	r3, r3, #12
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da01      	bge.n	8001a32 <get_pressure+0x42>
 8001a2e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a32:	12db      	asrs	r3, r3, #11
 8001a34:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 8001a36:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da01      	bge.n	8001a4a <get_pressure+0x5a>
 8001a46:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a4a:	12db      	asrs	r3, r3, #11
 8001a4c:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 8001a56:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001a5a:	009a      	lsls	r2, r3, #2
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001a64:	4093      	lsls	r3, r2
 8001a66:	3302      	adds	r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da00      	bge.n	8001a6e <get_pressure+0x7e>
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	109b      	asrs	r3, r3, #2
 8001a70:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 8001a72:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001a76:	461a      	mov	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da02      	bge.n	8001a88 <get_pressure+0x98>
 8001a82:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001a86:	331f      	adds	r3, #31
 8001a88:	135b      	asrs	r3, r3, #13
 8001a8a:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001a8c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001a90:	461a      	mov	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fb03 f303 	mul.w	r3, r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da01      	bge.n	8001aa0 <get_pressure+0xb0>
 8001a9c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001aa0:	131b      	asrs	r3, r3, #12
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da02      	bge.n	8001ab0 <get_pressure+0xc0>
 8001aaa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001aae:	33ff      	adds	r3, #255	; 0xff
 8001ab0:	141b      	asrs	r3, r3, #16
 8001ab2:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4413      	add	r3, r2
 8001aba:	3302      	adds	r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <get_pressure+0xd2>
 8001ac0:	3303      	adds	r3, #3
 8001ac2:	109b      	asrs	r3, r3, #2
 8001ac4:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 8001ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	0bdb      	lsrs	r3, r3, #15
 8001ad6:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 8001ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001aea:	410a      	asrs	r2, r1
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db06      	blt.n	8001b06 <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	005a      	lsls	r2, r3, #1
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	e005      	b.n	8001b12 <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <get_pressure+0x12a>
 8001b18:	33ff      	adds	r3, #255	; 0xff
 8001b1a:	121b      	asrs	r3, r3, #8
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da00      	bge.n	8001b26 <get_pressure+0x136>
 8001b24:	33ff      	adds	r3, #255	; 0xff
 8001b26:	121b      	asrs	r3, r3, #8
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	f640 32de 	movw	r2, #3038	; 0xbde
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	da02      	bge.n	8001b42 <get_pressure+0x152>
 8001b3c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b40:	33ff      	adds	r3, #255	; 0xff
 8001b42:	141b      	asrs	r3, r3, #16
 8001b44:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <get_pressure+0x198>)
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da02      	bge.n	8001b58 <get_pressure+0x168>
 8001b52:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b56:	33ff      	adds	r3, #255	; 0xff
 8001b58:	141b      	asrs	r3, r3, #16
 8001b5a:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4413      	add	r3, r2
 8001b62:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da00      	bge.n	8001b6c <get_pressure+0x17c>
 8001b6a:	330f      	adds	r3, #15
 8001b6c:	111b      	asrs	r3, r3, #4
 8001b6e:	461a      	mov	r2, r3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]

	return p;
 8001b76:	69fb      	ldr	r3, [r7, #28]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3724      	adds	r7, #36	; 0x24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	b004      	add	sp, #16
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	ffffe343 	.word	0xffffe343
 8001b8c:	00000000 	.word	0x00000000

08001b90 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <get_altitude+0xb8>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bb4:	ee16 0a90 	vmov	r0, s13
 8001bb8:	f7fe fce6 	bl	8000588 <__aeabi_f2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001c38 <get_altitude+0xa8>
 8001bc4:	ec43 2b10 	vmov	d0, r2, r3
 8001bc8:	f016 fd3e 	bl	8018648 <pow>
 8001bcc:	ec53 2b10 	vmov	r2, r3, d0
 8001bd0:	f04f 0000 	mov.w	r0, #0
 8001bd4:	491d      	ldr	r1, [pc, #116]	; (8001c4c <get_altitude+0xbc>)
 8001bd6:	f7fe fb77 	bl	80002c8 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	a317      	add	r3, pc, #92	; (adr r3, 8001c40 <get_altitude+0xb0>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fd26 	bl	8000638 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff f818 	bl	8000c28 <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c00:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001c50 <get_altitude+0xc0>
 8001c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	d908      	bls.n	8001c20 <get_altitude+0x90>
 8001c0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c12:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c54 <get_altitude+0xc4>
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	db03      	blt.n	8001c28 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2205      	movs	r2, #5
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	ee07 3a90 	vmov	s15, r3
}
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	ccd9456c 	.word	0xccd9456c
 8001c3c:	3fc85b95 	.word	0x3fc85b95
 8001c40:	00000000 	.word	0x00000000
 8001c44:	40e5a540 	.word	0x40e5a540
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	3ff00000 	.word	0x3ff00000
 8001c50:	c3fa0000 	.word	0xc3fa0000
 8001c54:	460ca000 	.word	0x460ca000

08001c58 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc7a 	bl	8000564 <__aeabi_i2d>
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <get_slp+0x80>)
 8001c76:	ed93 7a00 	vldr	s14, [r3]
 8001c7a:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001cdc <get_slp+0x84>
 8001c7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c8a:	ee17 0a90 	vmov	r0, s15
 8001c8e:	f7fe fc7b 	bl	8000588 <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001cd0 <get_slp+0x78>
 8001c9a:	ec43 2b10 	vmov	d0, r2, r3
 8001c9e:	f016 fcd3 	bl	8018648 <pow>
 8001ca2:	ec53 2b10 	vmov	r2, r3, d0
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe fdef 	bl	800088c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe ffb7 	bl	8000c28 <__aeabi_d2f>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60fb      	str	r3, [r7, #12]

	return slp;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	ee07 3a90 	vmov	s15, r3
}
 8001cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	b851eb85 	.word	0xb851eb85
 8001cd4:	4015051e 	.word	0x4015051e
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	472d2a00 	.word	0x472d2a00

08001ce0 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	b095      	sub	sp, #84	; 0x54
 8001ce4:	af0e      	add	r7, sp, #56	; 0x38
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 8001cea:	f7ff fdb3 	bl	8001854 <get_ut>
 8001cee:	ee07 0a90 	vmov	s15, r0
 8001cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	f7ff fdd3 	bl	80018a8 <get_temp>
 8001d02:	eef0 7a40 	vmov.f32	s15, s0
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001d10:	f7ff fe2c 	bl	800196c <get_up>
 8001d14:	4602      	mov	r2, r0
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 8001d1a:	683e      	ldr	r6, [r7, #0]
 8001d1c:	466d      	mov	r5, sp
 8001d1e:	f106 0410 	add.w	r4, r6, #16
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	602b      	str	r3, [r5, #0]
 8001d32:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d36:	f7ff fe5b 	bl	80019f0 <get_pressure>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001d40:	6838      	ldr	r0, [r7, #0]
 8001d42:	f7ff ff89 	bl	8001c58 <get_slp>
 8001d46:	eef0 7a40 	vmov.f32	s15, s0
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001d50:	6838      	ldr	r0, [r7, #0]
 8001d52:	f7ff ff1d 	bl	8001b90 <get_altitude>
 8001d56:	eef0 7a40 	vmov.f32	s15, s0
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	617b      	str	r3, [r7, #20]
	return result;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	461c      	mov	r4, r3
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d90 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[6] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[6] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[6] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[6]){
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001d9c:	e083      	b.n	8001ea6 <initButtons+0x116>
		btns[i]->pin = pins[i];
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	440b      	add	r3, r1
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4944      	ldr	r1, [pc, #272]	; (8001ebc <initButtons+0x12c>)
 8001dac:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001db0:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	440b      	add	r3, r1
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4940      	ldr	r1, [pc, #256]	; (8001ec0 <initButtons+0x130>)
 8001dc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001dc4:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	7993      	ldrb	r3, [r2, #6]
 8001dd2:	f36f 0300 	bfc	r3, #0, #1
 8001dd6:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	7993      	ldrb	r3, [r2, #6]
 8001de4:	f36f 0341 	bfc	r3, #1, #1
 8001de8:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
//		btns[i]-> = NULL;
		i++;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	f67f af78 	bls.w	8001d9e <initButtons+0xe>
	}
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	20000020 	.word	0x20000020
 8001ec0:	20000008 	.word	0x20000008

08001ec4 <resetButtonHandlers>:

void resetButtonHandlers(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001ece:	e020      	b.n	8001f12 <resetButtonHandlers+0x4e>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <resetButtonHandlers+0x64>)
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <resetButtonHandlers+0x64>)
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <resetButtonHandlers+0x64>)
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <resetButtonHandlers+0x64>)
 8001ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efc:	2200      	movs	r2, #0
 8001efe:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <resetButtonHandlers+0x64>)
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	621a      	str	r2, [r3, #32]
		i++;
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	71fb      	strb	r3, [r7, #7]
	while(i < 6){
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d9db      	bls.n	8001ed0 <resetButtonHandlers+0xc>
	}
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	2000002c 	.word	0x2000002c

08001f2c <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	889b      	ldrh	r3, [r3, #4]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f006 ffbc 	bl	8008ebc <HAL_GPIO_ReadPin>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bf0c      	ite	eq
 8001f4a:	2301      	moveq	r3, #1
 8001f4c:	2300      	movne	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <scanButton>:

void scanButton(Button* btn){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	799b      	ldrb	r3, [r3, #6]
 8001f64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	b2d9      	uxtb	r1, r3
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	7993      	ldrb	r3, [r2, #6]
 8001f78:	f361 0300 	bfi	r3, r1, #0, #1
 8001f7c:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffd4 	bl	8001f2c <readButton>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	b2d9      	uxtb	r1, r3
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	7993      	ldrb	r3, [r2, #6]
 8001f94:	f361 0341 	bfi	r3, r1, #1, #1
 8001f98:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 8001f9a:	7bba      	ldrb	r2, [r7, #14]
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d150      	bne.n	8002044 <scanButton+0xec>
		// stable state pressed or released
		if(currStatus == 1){
 8001fa2:	7bbb      	ldrb	r3, [r7, #14]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d146      	bne.n	8002036 <scanButton+0xde>
			// stable pressed state
			btn->shortContinuous++;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7a9b      	ldrb	r3, [r3, #10]
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <scanButton+0x6c>
				btn->onContinuousShortPressHandler(NULL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7a9b      	ldrb	r3, [r3, #10]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <scanButton+0x15c>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d32d      	bcc.n	800202e <scanButton+0xd6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7b5b      	ldrb	r3, [r3, #13]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d110      	bne.n	8001ffc <scanButton+0xa4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <scanButton+0x92>
						btn->onSingleLongPressHandler(NULL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	4798      	blx	r3
					}
					btn->longSingleOn++;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7a5b      	ldrb	r3, [r3, #9]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7a9b      	ldrb	r3, [r3, #10]
 8002000:	4a2c      	ldr	r2, [pc, #176]	; (80020b4 <scanButton+0x15c>)
 8002002:	8852      	ldrh	r2, [r2, #2]
 8002004:	fb93 f1f2 	sdiv	r1, r3, r2
 8002008:	fb01 f202 	mul.w	r2, r1, r2
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10d      	bne.n	800202e <scanButton+0xd6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <scanButton+0xca>
						btn->onContinuousLongPressHandler(NULL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2000      	movs	r0, #0
 8002020:	4798      	blx	r3
					}
					btn->longContinuous++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	7adb      	ldrb	r3, [r3, #11]
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8002034:	e03a      	b.n	80020ac <scanButton+0x154>
			btn->shortSingleHandled = 0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	735a      	strb	r2, [r3, #13]
}
 8002042:	e033      	b.n	80020ac <scanButton+0x154>
		if(currStatus == 1){
 8002044:	7bbb      	ldrb	r3, [r7, #14]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d11b      	bne.n	8002082 <scanButton+0x12a>
			btn->shortContinuous = 0;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7b1b      	ldrb	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d126      	bne.n	80020ac <scanButton+0x154>
				if(btn->onSinglePressHandler != NULL){
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <scanButton+0x116>
					btn->onSinglePressHandler(NULL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2000      	movs	r0, #0
 800206c:	4798      	blx	r3
				btn->shortSingleOn++;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	79db      	ldrb	r3, [r3, #7]
 8002072:	3301      	adds	r3, #1
 8002074:	b2da      	uxtb	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	731a      	strb	r2, [r3, #12]
}
 8002080:	e014      	b.n	80020ac <scanButton+0x154>
			if(btn->releaseHandled == 0){
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7b9b      	ldrb	r3, [r3, #14]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d110      	bne.n	80020ac <scanButton+0x154>
				if(btn->onReleaseHandler != NULL){
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <scanButton+0x142>
					btn->onReleaseHandler(NULL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	2000      	movs	r0, #0
 8002098:	4798      	blx	r3
				btn->shortSingleOff++;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7a1b      	ldrb	r3, [r3, #8]
 800209e:	3301      	adds	r3, #1
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	739a      	strb	r2, [r3, #14]
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000044 	.word	0x20000044

080020b8 <scanButtons>:

void scanButtons(Button* btns[6]){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80020c4:	e00a      	b.n	80020dc <scanButtons+0x24>
		scanButton(btns[i]);
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff41 	bl	8001f58 <scanButton>
		i++;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	3301      	adds	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d9f1      	bls.n	80020c6 <scanButtons+0xe>
	}
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	; 0x30
 80020f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	4b6b      	ldr	r3, [pc, #428]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a6a      	ldr	r2, [pc, #424]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b68      	ldr	r3, [pc, #416]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	4b64      	ldr	r3, [pc, #400]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a63      	ldr	r2, [pc, #396]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b5d      	ldr	r3, [pc, #372]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a5c      	ldr	r2, [pc, #368]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b5a      	ldr	r3, [pc, #360]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b56      	ldr	r3, [pc, #344]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a55      	ldr	r2, [pc, #340]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b53      	ldr	r3, [pc, #332]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b4f      	ldr	r3, [pc, #316]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a4e      	ldr	r2, [pc, #312]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b4c      	ldr	r3, [pc, #304]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b48      	ldr	r3, [pc, #288]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a47      	ldr	r2, [pc, #284]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b45      	ldr	r3, [pc, #276]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a40      	ldr	r2, [pc, #256]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 80021b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b3e      	ldr	r3, [pc, #248]	; (80022b4 <MX_GPIO_Init+0x1c8>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2140      	movs	r1, #64	; 0x40
 80021ca:	483b      	ldr	r0, [pc, #236]	; (80022b8 <MX_GPIO_Init+0x1cc>)
 80021cc:	f006 fe8e 	bl	8008eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80021d0:	2200      	movs	r2, #0
 80021d2:	f244 0181 	movw	r1, #16513	; 0x4081
 80021d6:	4839      	ldr	r0, [pc, #228]	; (80022bc <MX_GPIO_Init+0x1d0>)
 80021d8:	f006 fe88 	bl	8008eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80021dc:	2200      	movs	r2, #0
 80021de:	2140      	movs	r1, #64	; 0x40
 80021e0:	4837      	ldr	r0, [pc, #220]	; (80022c0 <MX_GPIO_Init+0x1d4>)
 80021e2:	f006 fe83 	bl	8008eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ec:	4835      	ldr	r0, [pc, #212]	; (80022c4 <MX_GPIO_Init+0x1d8>)
 80021ee:	f006 fe7d 	bl	8008eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80021f2:	2340      	movs	r3, #64	; 0x40
 80021f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f6:	2301      	movs	r3, #1
 80021f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	482b      	ldr	r0, [pc, #172]	; (80022b8 <MX_GPIO_Init+0x1cc>)
 800220a:	f006 fcab 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800220e:	f244 0381 	movw	r3, #16513	; 0x4081
 8002212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	4825      	ldr	r0, [pc, #148]	; (80022bc <MX_GPIO_Init+0x1d0>)
 8002228:	f006 fc9c 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 800222c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002230:	61fb      	str	r3, [r7, #28]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002232:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	4821      	ldr	r0, [pc, #132]	; (80022c8 <MX_GPIO_Init+0x1dc>)
 8002244:	f006 fc8e 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002248:	2340      	movs	r3, #64	; 0x40
 800224a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4619      	mov	r1, r3
 800225e:	4818      	ldr	r0, [pc, #96]	; (80022c0 <MX_GPIO_Init+0x1d4>)
 8002260:	f006 fc80 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	4619      	mov	r1, r3
 8002276:	4812      	ldr	r0, [pc, #72]	; (80022c0 <MX_GPIO_Init+0x1d4>)
 8002278:	f006 fc74 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800227c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	2301      	movs	r3, #1
 8002284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	480b      	ldr	r0, [pc, #44]	; (80022c4 <MX_GPIO_Init+0x1d8>)
 8002296:	f006 fc65 	bl	8008b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	2028      	movs	r0, #40	; 0x28
 80022a0:	f006 fba3 	bl	80089ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022a4:	2028      	movs	r0, #40	; 0x28
 80022a6:	f006 fbbc 	bl	8008a22 <HAL_NVIC_EnableIRQ>

}
 80022aa:	bf00      	nop
 80022ac:	3730      	adds	r7, #48	; 0x30
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40021800 	.word	0x40021800
 80022c4:	40020800 	.word	0x40020800
 80022c8:	40021000 	.word	0x40021000

080022cc <hexCharToInt>:
	}


}

int hexCharToInt(char* value){
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	int msb = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
	if((*value >= 48) &(*value <= 57)){
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b2f      	cmp	r3, #47	; 0x2f
 80022de:	bf8c      	ite	hi
 80022e0:	2301      	movhi	r3, #1
 80022e2:	2300      	movls	r3, #0
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b39      	cmp	r3, #57	; 0x39
 80022ec:	bf94      	ite	ls
 80022ee:	2301      	movls	r3, #1
 80022f0:	2300      	movhi	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4013      	ands	r3, r2
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d004      	beq.n	8002306 <hexCharToInt+0x3a>
		msb = *value - 48;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	3b30      	subs	r3, #48	; 0x30
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e003      	b.n	800230e <hexCharToInt+0x42>
	} else {
		msb = *value - 48 - 7;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	3b37      	subs	r3, #55	; 0x37
 800230c:	617b      	str	r3, [r7, #20]
	}
	int lsb = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
	if((*(value+1) >= 48) &(*(value+1) <= 57)){
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3301      	adds	r3, #1
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b2f      	cmp	r3, #47	; 0x2f
 800231a:	bf8c      	ite	hi
 800231c:	2301      	movhi	r3, #1
 800231e:	2300      	movls	r3, #0
 8002320:	b2da      	uxtb	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3301      	adds	r3, #1
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b39      	cmp	r3, #57	; 0x39
 800232a:	bf94      	ite	ls
 800232c:	2301      	movls	r3, #1
 800232e:	2300      	movhi	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	4013      	ands	r3, r2
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <hexCharToInt+0x7a>
		lsb = *(value+1) - 48;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3301      	adds	r3, #1
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	3b30      	subs	r3, #48	; 0x30
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e004      	b.n	8002350 <hexCharToInt+0x84>
	} else {
		lsb = *(value+1) - 48 - 7;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3301      	adds	r3, #1
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	3b37      	subs	r3, #55	; 0x37
 800234e:	613b      	str	r3, [r7, #16]
	}
	int result = lsb | (msb << 4);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
	return(result)
 800235a:	68fb      	ldr	r3, [r7, #12]
;}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <getDataFromUart>:
#include <string.h>
#include "gps2.h"

char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002378:	4619      	mov	r1, r3
 800237a:	4803      	ldr	r0, [pc, #12]	; (8002388 <getDataFromUart+0x20>)
 800237c:	f00b fabf 	bl	800d8fe <HAL_UART_Receive_DMA>

}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20005ccc 	.word	0x20005ccc

0800238c <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 800238c:	b580      	push	{r7, lr}
 800238e:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8002392:	af00      	add	r7, sp, #0
 8002394:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002398:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800239c:	6018      	str	r0, [r3, #0]
 800239e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023a2:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80023a6:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 80023a8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023ac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80023b0:	f507 721c 	add.w	r2, r7, #624	; 0x270
 80023b4:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	3304      	adds	r3, #4
 80023c2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f011 fd85 	bl	8013ed8 <strncpy>
	gpsModule.getData = &getDataFromUart;
 80023ce:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023d2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80023d6:	4a11      	ldr	r2, [pc, #68]	; (800241c <initGps+0x90>)
 80023d8:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	gpsModule.isReady = 1;
 80023dc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023e0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	return(gpsModule);
 80023ea:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023ee:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80023f8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	f44f 7319 	mov.w	r3, #612	; 0x264
 8002404:	461a      	mov	r2, r3
 8002406:	f00f fe57 	bl	80120b8 <memcpy>
}
 800240a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800240e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	08002369 	.word	0x08002369

08002420 <strtoke>:


/* behaves like strtok() except that it returns empty tokens also
 */
char* strtoke(char *str, const char *delim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <strtoke+0x1a>
 8002434:	4a12      	ldr	r2, [pc, #72]	; (8002480 <strtoke+0x60>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <strtoke+0x60>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <strtoke+0x26>
 8002442:	2300      	movs	r3, #0
 8002444:	e017      	b.n	8002476 <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <strtoke+0x60>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <strtoke+0x60>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6839      	ldr	r1, [r7, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f011 fd53 	bl	8013efe <strpbrk>
 8002458:	4603      	mov	r3, r0
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <strtoke+0x60>)
 800245c:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <strtoke+0x60>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <strtoke+0x54>
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <strtoke+0x60>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	4904      	ldr	r1, [pc, #16]	; (8002480 <strtoke+0x60>)
 800246e:	600a      	str	r2, [r1, #0]
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 8002474:	68fb      	ldr	r3, [r7, #12]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20002708 	.word	0x20002708

08002484 <validateChecksum>:

uint8_t validateChecksum(char* nmeaSentence){
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	uint8_t chksum = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 8002494:	e009      	b.n	80024aa <validateChecksum+0x26>
		chksum ^= nmeaSentence[i];
 8002496:	7bbb      	ldrb	r3, [r7, #14]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	4053      	eors	r3, r2
 80024a2:	73fb      	strb	r3, [r7, #15]
		i++;
 80024a4:	7bbb      	ldrb	r3, [r7, #14]
 80024a6:	3301      	adds	r3, #1
 80024a8:	73bb      	strb	r3, [r7, #14]
	while(nmeaSentence[i] != '*' & nmeaSentence[i]!=NULL){
 80024aa:	7bbb      	ldrb	r3, [r7, #14]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b2a      	cmp	r3, #42	; 0x2a
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	7bbb      	ldrb	r3, [r7, #14]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	440b      	add	r3, r1
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4013      	ands	r3, r2
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1df      	bne.n	8002496 <validateChecksum+0x12>
	}
	return hexCharToInt(&nmeaSentence[i+1])==chksum;
 80024d6:	7bbb      	ldrb	r3, [r7, #14]
 80024d8:	3301      	adds	r3, #1
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fef4 	bl	80022cc <hexCharToInt>
 80024e4:	4602      	mov	r2, r0
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <getMessage>:


void getAllMessages(char* buffer){

}
uint8_t getMessage(char* destination, char* source, nmeaSentence_t type){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	71fb      	strb	r3, [r7, #7]
	char* start = strstr(source, gpsCmd[type]);
 800250a:	79fa      	ldrb	r2, [r7, #7]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4a13      	ldr	r2, [pc, #76]	; (8002564 <getMessage+0x68>)
 8002516:	4413      	add	r3, r2
 8002518:	4619      	mov	r1, r3
 800251a:	68b8      	ldr	r0, [r7, #8]
 800251c:	f011 fd09 	bl	8013f32 <strstr>
 8002520:	6178      	str	r0, [r7, #20]
	if(start == NULL) return(0);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <getMessage+0x30>
 8002528:	2300      	movs	r3, #0
 800252a:	e016      	b.n	800255a <getMessage+0x5e>
	if(strtok(start,"\n\r") == NULL) return(0);
 800252c:	490e      	ldr	r1, [pc, #56]	; (8002568 <getMessage+0x6c>)
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f012 fb44 	bl	8014bbc <strtok>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <getMessage+0x42>
 800253a:	2300      	movs	r3, #0
 800253c:	e00d      	b.n	800255a <getMessage+0x5e>
	if(validateChecksum(start)){
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ffa0 	bl	8002484 <validateChecksum>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <getMessage+0x5c>
		return strcpy(destination,start);
 800254a:	6979      	ldr	r1, [r7, #20]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f010 ff80 	bl	8013452 <strcpy>
 8002552:	4603      	mov	r3, r0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	e000      	b.n	800255a <getMessage+0x5e>
	} else {
		return NULL;
 8002558:	2300      	movs	r3, #0
	}
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	0801bc1c 	.word	0x0801bc1c
 8002568:	0801b04c 	.word	0x0801b04c

0800256c <getLocation>:
	return result;
}



uint8_t getLocation(struct gpsDevice* dev, location_t* position){
 800256c:	b5b0      	push	{r4, r5, r7, lr}
 800256e:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8002572:	af00      	add	r7, sp, #0
 8002574:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002578:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800257c:	6018      	str	r0, [r3, #0]
 800257e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002582:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002586:	6019      	str	r1, [r3, #0]
//	copy buffer - prevent from mutating (when DMA updated)
	char tmpBuf[GPS_BUFFER_SIZE];

	// don't write to buffer while copying
	dev->isReady = 0;
 8002588:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800258c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	strncpy(&tmpBuf, dev->buffer, GPS_BUFFER_SIZE);
 8002598:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800259c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	1d19      	adds	r1, r3, #4
 80025a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80025a8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80025ac:	4618      	mov	r0, r3
 80025ae:	f011 fc93 	bl	8013ed8 <strncpy>
	dev->isReady = 1;
 80025b2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80025b6:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260


//	location_t position;
	char sentence[NMEA_MAX_SENTENCE_LENGTH+1];
	// receive and validate message
	if(getMessage(&sentence, &tmpBuf, NMEA_GNGGA) == NULL){
 80025c2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80025c6:	f107 030c 	add.w	r3, r7, #12
 80025ca:	2200      	movs	r2, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff95 	bl	80024fc <getMessage>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d113      	bne.n	8002600 <getLocation+0x94>
		strcpy(position->debug, "invalid sentence");
 80025d8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80025dc:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a06      	ldr	r2, [pc, #24]	; (80025fc <getLocation+0x90>)
 80025e4:	461d      	mov	r5, r3
 80025e6:	4614      	mov	r4, r2
 80025e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ea:	6028      	str	r0, [r5, #0]
 80025ec:	6069      	str	r1, [r5, #4]
 80025ee:	60aa      	str	r2, [r5, #8]
 80025f0:	60eb      	str	r3, [r5, #12]
 80025f2:	7823      	ldrb	r3, [r4, #0]
 80025f4:	742b      	strb	r3, [r5, #16]
//		position.isValid = 0;
//		position.utc_hour = 0;
//		position.utc_min = 0;
//		position.utc_sec = 0;
//		return position;
		return 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e1ff      	b.n	80029fa <getLocation+0x48e>
 80025fa:	bf00      	nop
 80025fc:	0801b054 	.word	0x0801b054
	// test tokenization function
//	struct nmeaSentence snt = tokenizeSentence(sentence);

	//write to struct whole sentence
//	strcpy(&position.debug, sentence);
	strcpy(position->debug, sentence);
 8002600:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002604:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f107 020c 	add.w	r2, r7, #12
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f010 ff1e 	bl	8013452 <strcpy>

	// tokenize
	// GNGGA
	char* parsePointer = strtoke(sentence, ",");
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	49dd      	ldr	r1, [pc, #884]	; (8002990 <getLocation+0x424>)
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff feff 	bl	8002420 <strtoke>
 8002622:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[0][0], parsePointer);
 8002626:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800262a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002634:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002638:	4618      	mov	r0, r3
 800263a:	f010 ff0a 	bl	8013452 <strcpy>

	// UTC Time
	parsePointer = strtoke(NULL, ",");
 800263e:	49d4      	ldr	r1, [pc, #848]	; (8002990 <getLocation+0x424>)
 8002640:	2000      	movs	r0, #0
 8002642:	f7ff feed 	bl	8002420 <strtoke>
 8002646:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[1][0], parsePointer);
 800264a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800264e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8002658:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800265c:	4618      	mov	r0, r3
 800265e:	f010 fef8 	bl	8013452 <strcpy>
	uint32_t utcTime=atoi(parsePointer);
 8002662:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002666:	f00f fcd6 	bl	8012016 <atoi>
 800266a:	4603      	mov	r3, r0
 800266c:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
	position->utc_hour = (utcTime/10000)%100;
 8002670:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8002674:	4ac7      	ldr	r2, [pc, #796]	; (8002994 <getLocation+0x428>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	0b5a      	lsrs	r2, r3, #13
 800267c:	4bc6      	ldr	r3, [pc, #792]	; (8002998 <getLocation+0x42c>)
 800267e:	fba3 1302 	umull	r1, r3, r3, r2
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2164      	movs	r1, #100	; 0x64
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	b2da      	uxtb	r2, r3
 800268e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002692:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	position->utc_min = (utcTime/100)%100;
 800269c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80026a0:	4abd      	ldr	r2, [pc, #756]	; (8002998 <getLocation+0x42c>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	095a      	lsrs	r2, r3, #5
 80026a8:	4bbb      	ldr	r3, [pc, #748]	; (8002998 <getLocation+0x42c>)
 80026aa:	fba3 1302 	umull	r1, r3, r3, r2
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2164      	movs	r1, #100	; 0x64
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026be:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	position->utc_sec = utcTime%100;
 80026c8:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 80026cc:	4bb2      	ldr	r3, [pc, #712]	; (8002998 <getLocation+0x42c>)
 80026ce:	fba3 1302 	umull	r1, r3, r3, r2
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2164      	movs	r1, #100	; 0x64
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026e2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a

	// DDMM.MMMMM Latitude
	parsePointer = strtoke(NULL, ",");
 80026ec:	49a8      	ldr	r1, [pc, #672]	; (8002990 <getLocation+0x424>)
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7ff fe96 	bl	8002420 <strtoke>
 80026f4:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[2][0], parsePointer);
 80026f8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80026fc:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002706:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800270a:	4618      	mov	r0, r3
 800270c:	f010 fea1 	bl	8013452 <strcpy>
	double latitude = atof(parsePointer);
 8002710:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002714:	f00f fc7c 	bl	8012010 <atof>
 8002718:	ed87 0bb0 	vstr	d0, [r7, #704]	; 0x2c0
	position->latitudeDeg = latitude/100;
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	4b9e      	ldr	r3, [pc, #632]	; (800299c <getLocation+0x430>)
 8002722:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 8002726:	f7fe f8b1 	bl	800088c <__aeabi_ddiv>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f7fe fa59 	bl	8000be8 <__aeabi_d2uiz>
 8002736:	4603      	mov	r3, r0
 8002738:	b2da      	uxtb	r2, r3
 800273a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800273e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	position->latitudeMin = latitude-position->latitudeDeg*100;
 8002748:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800274c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8002756:	461a      	mov	r2, r3
 8002758:	2364      	movs	r3, #100	; 0x64
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd ff00 	bl	8000564 <__aeabi_i2d>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	; 0x2c0
 800276c:	f7fd fdac 	bl	80002c8 <__aeabi_dsub>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002778:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 800277c:	6809      	ldr	r1, [r1, #0]
 800277e:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160

	// Latitude N/S
	parsePointer = strtoke(NULL, ",");
 8002782:	4983      	ldr	r1, [pc, #524]	; (8002990 <getLocation+0x424>)
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff fe4b 	bl	8002420 <strtoke>
 800278a:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[3][0], parsePointer);
 800278e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002792:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800279c:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80027a0:	4618      	mov	r0, r3
 80027a2:	f010 fe56 	bl	8013452 <strcpy>
	position->n_s = *parsePointer;
 80027a6:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80027b0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170

	// DDDMM.MMMMM Longitude
	parsePointer = strtoke(NULL, ",");
 80027ba:	4975      	ldr	r1, [pc, #468]	; (8002990 <getLocation+0x424>)
 80027bc:	2000      	movs	r0, #0
 80027be:	f7ff fe2f 	bl	8002420 <strtoke>
 80027c2:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[4][0], parsePointer);
 80027c6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80027ca:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80027d4:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80027d8:	4618      	mov	r0, r3
 80027da:	f010 fe3a 	bl	8013452 <strcpy>
	double longitude = atof(parsePointer);
 80027de:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 80027e2:	f00f fc15 	bl	8012010 <atof>
 80027e6:	ed87 0bae 	vstr	d0, [r7, #696]	; 0x2b8
	position->longitudeDeg = longitude/100;
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	4b6b      	ldr	r3, [pc, #428]	; (800299c <getLocation+0x430>)
 80027f0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80027f4:	f7fe f84a 	bl	800088c <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f7fe f9f2 	bl	8000be8 <__aeabi_d2uiz>
 8002804:	4603      	mov	r3, r0
 8002806:	b2da      	uxtb	r2, r3
 8002808:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800280c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
	position->longitudeMin = longitude-position->longitudeDeg*100;
 8002816:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800281a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8002824:	461a      	mov	r2, r3
 8002826:	2364      	movs	r3, #100	; 0x64
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fe99 	bl	8000564 <__aeabi_i2d>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 800283a:	f7fd fd45 	bl	80002c8 <__aeabi_dsub>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002846:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 800284a:	6809      	ldr	r1, [r1, #0]
 800284c:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

	// Longitude W/E
	parsePointer = strtoke(NULL, ",");
 8002850:	494f      	ldr	r1, [pc, #316]	; (8002990 <getLocation+0x424>)
 8002852:	2000      	movs	r0, #0
 8002854:	f7ff fde4 	bl	8002420 <strtoke>
 8002858:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[5][0], parsePointer);
 800285c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002860:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800286a:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 800286e:	4618      	mov	r0, r3
 8002870:	f010 fdef 	bl	8013452 <strcpy>
	position->w_e = *parsePointer;
 8002874:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800287e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171

	// Fix type - 0-nofix, 1-GPS, 2-DGPS
	parsePointer = strtoke(NULL, ",");
 8002888:	4941      	ldr	r1, [pc, #260]	; (8002990 <getLocation+0x424>)
 800288a:	2000      	movs	r0, #0
 800288c:	f7ff fdc8 	bl	8002420 <strtoke>
 8002890:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[6][0], parsePointer);
 8002894:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002898:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80028a2:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80028a6:	4618      	mov	r0, r3
 80028a8:	f010 fdd3 	bl	8013452 <strcpy>
	if(*parsePointer=='0'){
 80028ac:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b30      	cmp	r3, #48	; 0x30
 80028b4:	d007      	beq.n	80028c6 <getLocation+0x35a>
//		position->longitudeDeg = 17;
//		position->longitudeMin = 30;
//		position->w_e = 'E';
//		position->n_s = 'N';
	} else {
		position->hasFix = 1;
 80028b6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028ba:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}

	// Number of used satellites
	parsePointer = strtoke(NULL, ",");
 80028c6:	4932      	ldr	r1, [pc, #200]	; (8002990 <getLocation+0x424>)
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7ff fda9 	bl	8002420 <strtoke>
 80028ce:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[7][0], parsePointer);
 80028d2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028d6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80028e0:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80028e4:	4618      	mov	r0, r3
 80028e6:	f010 fdb4 	bl	8013452 <strcpy>
	position->satNum = atoi(parsePointer);
 80028ea:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 80028ee:	f00f fb92 	bl	8012016 <atoi>
 80028f2:	4603      	mov	r3, r0
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80028fa:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	// HDOP
	parsePointer = strtoke(NULL, ",");
 8002904:	4922      	ldr	r1, [pc, #136]	; (8002990 <getLocation+0x424>)
 8002906:	2000      	movs	r0, #0
 8002908:	f7ff fd8a 	bl	8002420 <strtoke>
 800290c:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[8][0], parsePointer);
 8002910:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002914:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 800291e:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002922:	4618      	mov	r0, r3
 8002924:	f010 fd95 	bl	8013452 <strcpy>

	// Altitude above mean sea level
	parsePointer = strtoke(NULL, ",");
 8002928:	4919      	ldr	r1, [pc, #100]	; (8002990 <getLocation+0x424>)
 800292a:	2000      	movs	r0, #0
 800292c:	f7ff fd78 	bl	8002420 <strtoke>
 8002930:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[9][0], parsePointer);
 8002934:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002938:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8002942:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002946:	4618      	mov	r0, r3
 8002948:	f010 fd83 	bl	8013452 <strcpy>
	position->elevation = atof(parsePointer);
 800294c:	f8d7 02cc 	ldr.w	r0, [r7, #716]	; 0x2cc
 8002950:	f00f fb5e 	bl	8012010 <atof>
 8002954:	eeb0 7a40 	vmov.f32	s14, s0
 8002958:	eef0 7a60 	vmov.f32	s15, s1
 800295c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002960:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	ed83 7b54 	vstr	d7, [r3, #336]	; 0x150

	// Altitude units
	parsePointer = strtoke(NULL, ",");
 800296a:	4909      	ldr	r1, [pc, #36]	; (8002990 <getLocation+0x424>)
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff fd57 	bl	8002420 <strtoke>
 8002972:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[10][0], parsePointer);
 8002976:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800297a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8002984:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 8002988:	4618      	mov	r0, r3
 800298a:	f010 fd62 	bl	8013452 <strcpy>
 800298e:	e007      	b.n	80029a0 <getLocation+0x434>
 8002990:	0801b050 	.word	0x0801b050
 8002994:	d1b71759 	.word	0xd1b71759
 8002998:	51eb851f 	.word	0x51eb851f
 800299c:	40590000 	.word	0x40590000

	// Height of mean sea level above WGS-84 earth ellipsoid
	parsePointer = strtoke(NULL, ",");
 80029a0:	4918      	ldr	r1, [pc, #96]	; (8002a04 <getLocation+0x498>)
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7ff fd3c 	bl	8002420 <strtoke>
 80029a8:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[11][0], parsePointer);
 80029ac:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029b0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80029ba:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80029be:	4618      	mov	r0, r3
 80029c0:	f010 fd47 	bl	8013452 <strcpy>

	// Units of the above geoid separation (M for meters)
	parsePointer = strtoke(NULL, ",");
 80029c4:	490f      	ldr	r1, [pc, #60]	; (8002a04 <getLocation+0x498>)
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7ff fd2a 	bl	8002420 <strtoke>
 80029cc:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	strcpy(position->words[12][0], parsePointer);
 80029d0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029d4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80029de:	f8d7 12cc 	ldr.w	r1, [r7, #716]	; 0x2cc
 80029e2:	4618      	mov	r0, r3
 80029e4:	f010 fd35 	bl	8013452 <strcpy>

	//	mark position as valid
	position->isValid = 1;
 80029e8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80029ec:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	return 1;
 80029f8:	2301      	movs	r3, #1
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	f507 7734 	add.w	r7, r7, #720	; 0x2d0
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bdb0      	pop	{r4, r5, r7, pc}
 8002a04:	0801b050 	.word	0x0801b050

08002a08 <prevPos>:
	void (*currentModulePtr)(void) = faceMain;
#endif

uint8_t isModuleSet = 0;

void prevPos(void){
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
	if(position>0){
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <prevPos+0x2c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <prevPos+0x1a>
		position--;
 8002a14:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <prevPos+0x2c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <prevPos+0x2c>)
 8002a1e:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8002a20:	e002      	b.n	8002a28 <prevPos+0x20>
		position=MENU_ITEM_NUM-1;
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <prevPos+0x2c>)
 8002a24:	2206      	movs	r2, #6
 8002a26:	701a      	strb	r2, [r3, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000160 	.word	0x20000160

08002a38 <nextPos>:

void nextPos(void){
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
	if(position<(MENU_ITEM_NUM-1)){
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <nextPos+0x2c>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d806      	bhi.n	8002a52 <nextPos+0x1a>
		position++;
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <nextPos+0x2c>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <nextPos+0x2c>)
 8002a4e:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 8002a50:	e002      	b.n	8002a58 <nextPos+0x20>
		position=0;
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <nextPos+0x2c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000160 	.word	0x20000160

08002a68 <nextScreen>:

void nextScreen(void){
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	nextPos();
 8002a6c:	f7ff ffe4 	bl	8002a38 <nextPos>
	applySelectedScreen();
 8002a70:	f000 f82c 	bl	8002acc <applySelectedScreen>
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <prevScreen>:
void prevScreen(void){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	prevPos();
 8002a7c:	f7ff ffc4 	bl	8002a08 <prevPos>
	applySelectedScreen();
 8002a80:	f000 f824 	bl	8002acc <applySelectedScreen>
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <resetPos>:
void resetPos(void){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	position=0;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <resetPos+0x14>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 8002a92:	f000 f81b 	bl	8002acc <applySelectedScreen>
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000160 	.word	0x20000160

08002aa0 <guiApplyView>:

void guiApplyView(struct Module *module){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	moduleSetupPtr = module->setup;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4a05      	ldr	r2, [pc, #20]	; (8002ac4 <guiApplyView+0x24>)
 8002aae:	6013      	str	r3, [r2, #0]
	moduleMainPtr = module->main;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <guiApplyView+0x28>)
 8002ab6:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002ab8:	f000 f830 	bl	8002b1c <selectScreen>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000168 	.word	0x20000168
 8002ac8:	20000164 	.word	0x20000164

08002acc <applySelectedScreen>:

void applySelectedScreen(void){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <applySelectedScreen+0x40>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <applySelectedScreen+0x44>)
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3320      	adds	r3, #32
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <applySelectedScreen+0x48>)
 8002ae8:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <applySelectedScreen+0x40>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <applySelectedScreen+0x44>)
 8002af2:	460b      	mov	r3, r1
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	3324      	adds	r3, #36	; 0x24
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <applySelectedScreen+0x4c>)
 8002b02:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002b04:	f000 f80a 	bl	8002b1c <selectScreen>
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000160 	.word	0x20000160
 8002b10:	20000048 	.word	0x20000048
 8002b14:	20000168 	.word	0x20000168
 8002b18:	20000164 	.word	0x20000164

08002b1c <selectScreen>:

void selectScreen(void){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 8002b20:	f7ff f9d0 	bl	8001ec4 <resetButtonHandlers>
	isModuleSet = 0;
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <selectScreen+0x1c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <selectScreen+0x20>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <selectScreen+0x24>)
 8002b30:	6013      	str	r3, [r2, #0]
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	2000270c 	.word	0x2000270c
 8002b3c:	20000164 	.word	0x20000164
 8002b40:	2000016c 	.word	0x2000016c

08002b44 <showGui>:
// function to display alert message over current gui
void showAlert(){

}

void showGui(void){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <showGui+0x30>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <showGui+0x18>
		moduleSetupPtr();
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <showGui+0x34>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4798      	blx	r3
		isModuleSet = 1;
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <showGui+0x30>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <showGui+0x38>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <showGui+0x26>
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <showGui+0x38>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4798      	blx	r3
	lcdRefresh();
 8002b6a:	f000 ff93 	bl	8003a94 <lcdRefresh>
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000270c 	.word	0x2000270c
 8002b78:	20000168 	.word	0x20000168
 8002b7c:	2000016c 	.word	0x2000016c

08002b80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <MX_I2C1_Init+0x78>)
 8002b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b8c:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <MX_I2C1_Init+0x7c>)
 8002b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ba2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bbc:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bbe:	f006 f9ed 	bl	8008f9c <HAL_I2C_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002bc8:	f001 fa32 	bl	8004030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4809      	ldr	r0, [pc, #36]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bd0:	f007 f9a3 	bl	8009f1a <HAL_I2CEx_ConfigAnalogFilter>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002bda:	f001 fa29 	bl	8004030 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bde:	2100      	movs	r1, #0
 8002be0:	4804      	ldr	r0, [pc, #16]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002be2:	f007 f9d6 	bl	8009f92 <HAL_I2CEx_ConfigDigitalFilter>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002bec:	f001 fa20 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20002710 	.word	0x20002710
 8002bf8:	40005400 	.word	0x40005400
 8002bfc:	000186a0 	.word	0x000186a0

08002c00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	; (8002c84 <HAL_I2C_MspInit+0x84>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d12c      	bne.n	8002c7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <HAL_I2C_MspInit+0x88>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a17      	ldr	r2, [pc, #92]	; (8002c88 <HAL_I2C_MspInit+0x88>)
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_I2C_MspInit+0x88>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c44:	2312      	movs	r3, #18
 8002c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c50:	2304      	movs	r3, #4
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c54:	f107 0314 	add.w	r3, r7, #20
 8002c58:	4619      	mov	r1, r3
 8002c5a:	480c      	ldr	r0, [pc, #48]	; (8002c8c <HAL_I2C_MspInit+0x8c>)
 8002c5c:	f005 ff82 	bl	8008b64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_I2C_MspInit+0x88>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <HAL_I2C_MspInit+0x88>)
 8002c6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_I2C_MspInit+0x88>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3728      	adds	r7, #40	; 0x28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40005400 	.word	0x40005400
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020400 	.word	0x40020400

08002c90 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 8002c9a:	2307      	movs	r3, #7
 8002c9c:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 8002caa:	e010      	b.n	8002cce <reverse_uint8+0x3e>
		result = result << 1;
 8002cac:	7bbb      	ldrb	r3, [r7, #14]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 8002cc0:	7bba      	ldrb	r2, [r7, #14]
 8002cc2:	7b7b      	ldrb	r3, [r7, #13]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	73bb      	strb	r3, [r7, #14]
		times--;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1eb      	bne.n	8002cac <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
	updateSetting(0);
 8002cea:	2000      	movs	r0, #0
 8002cec:	f000 f824 	bl	8002d38 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	71fb      	strb	r3, [r7, #7]
 8002cf4:	e014      	b.n	8002d20 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	80bb      	strh	r3, [r7, #4]
 8002cfa:	e00b      	b.n	8002d14 <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	2232      	movs	r2, #50	; 0x32
 8002d00:	fb03 f202 	mul.w	r2, r3, r2
 8002d04:	88bb      	ldrh	r3, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <lcdClearBuffer+0x50>)
 8002d0a:	21ff      	movs	r1, #255	; 0xff
 8002d0c:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002d0e:	88bb      	ldrh	r3, [r7, #4]
 8002d10:	3301      	adds	r3, #1
 8002d12:	80bb      	strh	r3, [r7, #4]
 8002d14:	88bb      	ldrh	r3, [r7, #4]
 8002d16:	2b31      	cmp	r3, #49	; 0x31
 8002d18:	d9f0      	bls.n	8002cfc <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	71fb      	strb	r3, [r7, #7]
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	2bef      	cmp	r3, #239	; 0xef
 8002d24:	d9e7      	bls.n	8002cf6 <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8002d26:	2001      	movs	r0, #1
 8002d28:	f000 f806 	bl	8002d38 <updateSetting>
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20002768 	.word	0x20002768

08002d38 <updateSetting>:

void updateSetting(uint8_t state){
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8002d42:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <updateSetting+0x1c>)
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	7013      	strb	r3, [r2, #0]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	20000170 	.word	0x20000170

08002d58 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	4603      	mov	r3, r0
 8002d62:	80fb      	strh	r3, [r7, #6]
 8002d64:	460b      	mov	r3, r1
 8002d66:	717b      	strb	r3, [r7, #5]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	795b      	ldrb	r3, [r3, #5]
 8002d70:	793a      	ldrb	r2, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d304      	bcc.n	8002d80 <lcdPutChar+0x28>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	799b      	ldrb	r3, [r3, #6]
 8002d7a:	793a      	ldrb	r2, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d902      	bls.n	8002d86 <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	79db      	ldrb	r3, [r3, #7]
 8002d84:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	08db      	lsrs	r3, r3, #3
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	885b      	ldrh	r3, [r3, #2]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	785b      	ldrb	r3, [r3, #1]
 8002da2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002da6:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002da8:	2300      	movs	r3, #0
 8002daa:	75fb      	strb	r3, [r7, #23]
 8002dac:	e09b      	b.n	8002ee6 <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002dae:	797a      	ldrb	r2, [r7, #5]
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	4413      	add	r3, r2
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	0092      	lsls	r2, r2, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	0091      	lsls	r1, r2, #2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002dd2:	793b      	ldrb	r3, [r7, #4]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	7952      	ldrb	r2, [r2, #5]
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	8852      	ldrh	r2, [r2, #2]
 8002dde:	fb03 f202 	mul.w	r2, r3, r2
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	7cb9      	ldrb	r1, [r7, #18]
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	3308      	adds	r3, #8
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	7d3b      	ldrb	r3, [r7, #20]
 8002dfc:	fa42 f303 	asr.w	r3, r2, r3
 8002e00:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002e02:	8a3b      	ldrh	r3, [r7, #16]
 8002e04:	4a3e      	ldr	r2, [pc, #248]	; (8002f00 <lcdPutChar+0x1a8>)
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	b25a      	sxtb	r2, r3
 8002e0a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	b25b      	sxtb	r3, r3
 8002e12:	4013      	ands	r3, r2
 8002e14:	b25a      	sxtb	r2, r3
 8002e16:	8a3b      	ldrh	r3, [r7, #16]
 8002e18:	b2d1      	uxtb	r1, r2
 8002e1a:	4a39      	ldr	r2, [pc, #228]	; (8002f00 <lcdPutChar+0x1a8>)
 8002e1c:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	3308      	adds	r3, #8
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	b25a      	sxtb	r2, r3
 8002e2a:	7d3b      	ldrb	r3, [r7, #20]
 8002e2c:	f1c3 0308 	rsb	r3, r3, #8
 8002e30:	21ff      	movs	r1, #255	; 0xff
 8002e32:	fa41 f303 	asr.w	r3, r1, r3
 8002e36:	b25b      	sxtb	r3, r3
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b25b      	sxtb	r3, r3
 8002e3c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002e3e:	2301      	movs	r3, #1
 8002e40:	757b      	strb	r3, [r7, #21]
 8002e42:	e029      	b.n	8002e98 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 8002e44:	7d7a      	ldrb	r2, [r7, #21]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	7a1b      	ldrb	r3, [r3, #8]
 8002e50:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8002e52:	8a3a      	ldrh	r2, [r7, #16]
 8002e54:	7d7b      	ldrb	r3, [r7, #21]
 8002e56:	4413      	add	r3, r2
 8002e58:	4a29      	ldr	r2, [pc, #164]	; (8002f00 <lcdPutChar+0x1a8>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	b25a      	sxtb	r2, r3
 8002e5e:	7db9      	ldrb	r1, [r7, #22]
 8002e60:	7d3b      	ldrb	r3, [r7, #20]
 8002e62:	f1c3 0308 	rsb	r3, r3, #8
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	b259      	sxtb	r1, r3
 8002e6c:	7af8      	ldrb	r0, [r7, #11]
 8002e6e:	7d3b      	ldrb	r3, [r7, #20]
 8002e70:	fa40 f303 	asr.w	r3, r0, r3
 8002e74:	b25b      	sxtb	r3, r3
 8002e76:	430b      	orrs	r3, r1
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	4013      	ands	r3, r2
 8002e80:	b259      	sxtb	r1, r3
 8002e82:	8a3a      	ldrh	r2, [r7, #16]
 8002e84:	7d7b      	ldrb	r3, [r7, #21]
 8002e86:	4413      	add	r3, r2
 8002e88:	b2c9      	uxtb	r1, r1
 8002e8a:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <lcdPutChar+0x1a8>)
 8002e8c:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
 8002e90:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002e92:	7d7b      	ldrb	r3, [r7, #21]
 8002e94:	3301      	adds	r3, #1
 8002e96:	757b      	strb	r3, [r7, #21]
 8002e98:	7d7a      	ldrb	r2, [r7, #21]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	3307      	adds	r3, #7
 8002ea0:	10db      	asrs	r3, r3, #3
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	dbce      	blt.n	8002e44 <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002ea6:	8a3a      	ldrh	r2, [r7, #16]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	3307      	adds	r3, #7
 8002eae:	10db      	asrs	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <lcdPutChar+0x1a8>)
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
 8002eb6:	b25a      	sxtb	r2, r3
 8002eb8:	7db9      	ldrb	r1, [r7, #22]
 8002eba:	7d3b      	ldrb	r3, [r7, #20]
 8002ebc:	f1c3 0308 	rsb	r3, r3, #8
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	b25b      	sxtb	r3, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	4013      	ands	r3, r2
 8002ecc:	b259      	sxtb	r1, r3
 8002ece:	8a3a      	ldrh	r2, [r7, #16]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	3307      	adds	r3, #7
 8002ed6:	10db      	asrs	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	b2c9      	uxtb	r1, r1
 8002edc:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <lcdPutChar+0x1a8>)
 8002ede:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	75fb      	strb	r3, [r7, #23]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	7dfa      	ldrb	r2, [r7, #23]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	f4ff af5e 	bcc.w	8002dae <lcdPutChar+0x56>
	}
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	20002768 	.word	0x20002768

08002f04 <lcdPutStr>:
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
	}
}

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60ba      	str	r2, [r7, #8]
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	4603      	mov	r3, r0
 8002f10:	81fb      	strh	r3, [r7, #14]
 8002f12:	460b      	mov	r3, r1
 8002f14:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
 8002f1a:	e015      	b.n	8002f48 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	fb12 f303 	smulbb	r3, r2, r3
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	89fb      	ldrh	r3, [r7, #14]
 8002f2e:	4413      	add	r3, r2
 8002f30:	b298      	uxth	r0, r3
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	4413      	add	r3, r2
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	7b79      	ldrb	r1, [r7, #13]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f7ff ff0b 	bl	8002d58 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	3301      	adds	r3, #1
 8002f46:	75fb      	strb	r3, [r7, #23]
 8002f48:	7dfc      	ldrb	r4, [r7, #23]
 8002f4a:	68b8      	ldr	r0, [r7, #8]
 8002f4c:	f7fd f95a 	bl	8000204 <strlen>
 8002f50:	4603      	mov	r3, r0
 8002f52:	429c      	cmp	r4, r3
 8002f54:	d3e2      	bcc.n	8002f1c <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 8002f56:	bf00      	nop
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}

08002f60 <lcdPutStrML>:
// multiline
void lcdPutStrML(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60ba      	str	r2, [r7, #8]
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	81fb      	strh	r3, [r7, #14]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	737b      	strb	r3, [r7, #13]
//			// version with y meaning lcd row
//			  lcdPutChar(x+font->font_Width*i, y+j*font->font_Height, chr[i+j*charNum], font);
//			  }
//	}
	// number of chars in line
	uint8_t lineNum = (SCR_W-x)/font->font_Width;
 8002f72:	89fb      	ldrh	r3, [r7, #14]
 8002f74:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f80:	747b      	strb	r3, [r7, #17]
	uint8_t yPos = y;
 8002f82:	7b7b      	ldrb	r3, [r7, #13]
 8002f84:	75fb      	strb	r3, [r7, #23]
	uint16_t xPos = x;
 8002f86:	89fb      	ldrh	r3, [r7, #14]
 8002f88:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i < strlen(chr); i++){
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	827b      	strh	r3, [r7, #18]
 8002f8e:	e02d      	b.n	8002fec <lcdPutStrML+0x8c>
		if(xPos > (SCR_W-font->font_Width)){
 8002f90:	8aba      	ldrh	r2, [r7, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	dd06      	ble.n	8002fac <lcdPutStrML+0x4c>
			yPos += font->font_Height;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	785a      	ldrb	r2, [r3, #1]
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	75fb      	strb	r3, [r7, #23]
			xPos = x;
 8002fa8:	89fb      	ldrh	r3, [r7, #14]
 8002faa:	82bb      	strh	r3, [r7, #20]
		}
		if(chr[i] == 10){
 8002fac:	8a7b      	ldrh	r3, [r7, #18]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b0a      	cmp	r3, #10
 8002fb6:	d107      	bne.n	8002fc8 <lcdPutStrML+0x68>
			xPos = x;
 8002fb8:	89fb      	ldrh	r3, [r7, #14]
 8002fba:	82bb      	strh	r3, [r7, #20]
			yPos += font->font_Height;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	785a      	ldrb	r2, [r3, #1]
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	75fb      	strb	r3, [r7, #23]
 8002fc6:	e00e      	b.n	8002fe6 <lcdPutStrML+0x86>
//			i++;
		} else {
			lcdPutChar(xPos, yPos, chr[i], font);
 8002fc8:	8a7b      	ldrh	r3, [r7, #18]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	4413      	add	r3, r2
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	7df9      	ldrb	r1, [r7, #23]
 8002fd2:	8ab8      	ldrh	r0, [r7, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f7ff febf 	bl	8002d58 <lcdPutChar>
			xPos += font->font_Width;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	8abb      	ldrh	r3, [r7, #20]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i < strlen(chr); i++){
 8002fe6:	8a7b      	ldrh	r3, [r7, #18]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	827b      	strh	r3, [r7, #18]
 8002fec:	8a7c      	ldrh	r4, [r7, #18]
 8002fee:	68b8      	ldr	r0, [r7, #8]
 8002ff0:	f7fd f908 	bl	8000204 <strlen>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	429c      	cmp	r4, r3
 8002ff8:	d3ca      	bcc.n	8002f90 <lcdPutStrML+0x30>
		}

	}
}
 8002ffa:	bf00      	nop
 8002ffc:	bf00      	nop
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	bd90      	pop	{r4, r7, pc}

08003004 <lcdVLine>:

void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 8003004:	b490      	push	{r4, r7}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	4604      	mov	r4, r0
 800300c:	4608      	mov	r0, r1
 800300e:	4611      	mov	r1, r2
 8003010:	461a      	mov	r2, r3
 8003012:	4623      	mov	r3, r4
 8003014:	80fb      	strh	r3, [r7, #6]
 8003016:	4603      	mov	r3, r0
 8003018:	80bb      	strh	r3, [r7, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	70fb      	strb	r3, [r7, #3]
 800301e:	4613      	mov	r3, r2
 8003020:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	08db      	lsrs	r3, r3, #3
 8003026:	b29b      	uxth	r3, r3
 8003028:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	733b      	strb	r3, [r7, #12]
	for(uint8_t y = y1; y <= y2; y++){
 8003034:	88bb      	ldrh	r3, [r7, #4]
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	e04e      	b.n	80030d8 <lcdVLine+0xd4>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2232      	movs	r2, #50	; 0x32
 800303e:	fb03 f202 	mul.w	r2, r3, r2
 8003042:	7b7b      	ldrb	r3, [r7, #13]
 8003044:	4413      	add	r3, r2
 8003046:	4a29      	ldr	r2, [pc, #164]	; (80030ec <lcdVLine+0xe8>)
 8003048:	5cd3      	ldrb	r3, [r2, r3]
 800304a:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 800304c:	78bb      	ldrb	r3, [r7, #2]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d01e      	beq.n	8003090 <lcdVLine+0x8c>
 8003052:	2b02      	cmp	r3, #2
 8003054:	dc27      	bgt.n	80030a6 <lcdVLine+0xa2>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <lcdVLine+0x5c>
 800305a:	2b01      	cmp	r3, #1
 800305c:	d00b      	beq.n	8003076 <lcdVLine+0x72>
 800305e:	e022      	b.n	80030a6 <lcdVLine+0xa2>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 8003060:	7b3b      	ldrb	r3, [r7, #12]
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	fa42 f303 	asr.w	r3, r2, r3
 8003068:	b25a      	sxtb	r2, r3
 800306a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800306e:	4313      	orrs	r3, r2
 8003070:	b25b      	sxtb	r3, r3
 8003072:	73bb      	strb	r3, [r7, #14]
				break;
 8003074:	e024      	b.n	80030c0 <lcdVLine+0xbc>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8003076:	7b3b      	ldrb	r3, [r7, #12]
 8003078:	2280      	movs	r2, #128	; 0x80
 800307a:	fa42 f303 	asr.w	r3, r2, r3
 800307e:	b25b      	sxtb	r3, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	b25a      	sxtb	r2, r3
 8003084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003088:	4013      	ands	r3, r2
 800308a:	b25b      	sxtb	r3, r3
 800308c:	73bb      	strb	r3, [r7, #14]
				break;
 800308e:	e017      	b.n	80030c0 <lcdVLine+0xbc>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8003090:	7b3b      	ldrb	r3, [r7, #12]
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	fa42 f303 	asr.w	r3, r2, r3
 8003098:	b25a      	sxtb	r2, r3
 800309a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800309e:	4053      	eors	r3, r2
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	73bb      	strb	r3, [r7, #14]
				break;
 80030a4:	e00c      	b.n	80030c0 <lcdVLine+0xbc>
			default:
				content &= ~(0b10000000 >> offset);
 80030a6:	7b3b      	ldrb	r3, [r7, #12]
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	fa42 f303 	asr.w	r3, r2, r3
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	b25a      	sxtb	r2, r3
 80030b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030b8:	4013      	ands	r3, r2
 80030ba:	b25b      	sxtb	r3, r3
 80030bc:	73bb      	strb	r3, [r7, #14]
				break;
 80030be:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2232      	movs	r2, #50	; 0x32
 80030c4:	fb03 f202 	mul.w	r2, r3, r2
 80030c8:	7b7b      	ldrb	r3, [r7, #13]
 80030ca:	4413      	add	r3, r2
 80030cc:	4907      	ldr	r1, [pc, #28]	; (80030ec <lcdVLine+0xe8>)
 80030ce:	7bba      	ldrb	r2, [r7, #14]
 80030d0:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	3301      	adds	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d9ac      	bls.n	800303a <lcdVLine+0x36>
	}
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc90      	pop	{r4, r7}
 80030ea:	4770      	bx	lr
 80030ec:	20002768 	.word	0x20002768

080030f0 <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 80030f0:	b490      	push	{r4, r7}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4604      	mov	r4, r0
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	461a      	mov	r2, r3
 80030fe:	4623      	mov	r3, r4
 8003100:	80fb      	strh	r3, [r7, #6]
 8003102:	4603      	mov	r3, r0
 8003104:	80bb      	strh	r3, [r7, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	70fb      	strb	r3, [r7, #3]
 800310a:	4613      	mov	r3, r2
 800310c:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 800310e:	23ff      	movs	r3, #255	; 0xff
 8003110:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 8003112:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003116:	2b14      	cmp	r3, #20
 8003118:	f200 8208 	bhi.w	800352c <lcdHLine2+0x43c>
 800311c:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <lcdHLine2+0x34>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003179 	.word	0x08003179
 8003128:	0800317f 	.word	0x0800317f
 800312c:	08003185 	.word	0x08003185
 8003130:	0800318b 	.word	0x0800318b
 8003134:	080031a3 	.word	0x080031a3
 8003138:	080031bb 	.word	0x080031bb
 800313c:	080031d3 	.word	0x080031d3
 8003140:	0800321d 	.word	0x0800321d
 8003144:	08003261 	.word	0x08003261
 8003148:	080032a5 	.word	0x080032a5
 800314c:	080032e3 	.word	0x080032e3
 8003150:	08003309 	.word	0x08003309
 8003154:	08003333 	.word	0x08003333
 8003158:	08003369 	.word	0x08003369
 800315c:	08003381 	.word	0x08003381
 8003160:	080033a7 	.word	0x080033a7
 8003164:	080033dd 	.word	0x080033dd
 8003168:	08003413 	.word	0x08003413
 800316c:	08003455 	.word	0x08003455
 8003170:	080034af 	.word	0x080034af
 8003174:	080034eb 	.word	0x080034eb
		case 0:	// clear
			pattern = 0x00;
 8003178:	2300      	movs	r3, #0
 800317a:	75fb      	strb	r3, [r7, #23]
			break;
 800317c:	e1ea      	b.n	8003554 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 800317e:	23ff      	movs	r3, #255	; 0xff
 8003180:	75fb      	strb	r3, [r7, #23]
			break;
 8003182:	e1e7      	b.n	8003554 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8003184:	2355      	movs	r3, #85	; 0x55
 8003186:	75fb      	strb	r3, [r7, #23]
			break;
 8003188:	e1e4      	b.n	8003554 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <lcdHLine2+0xac>
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 800319a:	e1db      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0xFF;
 800319c:	23ff      	movs	r3, #255	; 0xff
 800319e:	75fb      	strb	r3, [r7, #23]
			break;
 80031a0:	e1d8      	b.n	8003554 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <lcdHLine2+0xc4>
 80031ae:	23aa      	movs	r3, #170	; 0xaa
 80031b0:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 80031b2:	e1cf      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0x55;
 80031b4:	2355      	movs	r3, #85	; 0x55
 80031b6:	75fb      	strb	r3, [r7, #23]
			break;
 80031b8:	e1cc      	b.n	8003554 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <lcdHLine2+0xdc>
 80031c6:	2388      	movs	r3, #136	; 0x88
 80031c8:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 80031ca:	e1c3      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 80031cc:	2322      	movs	r3, #34	; 0x22
 80031ce:	75fb      	strb	r3, [r7, #23]
			break;
 80031d0:	e1c0      	b.n	8003554 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <lcdHLine2+0xf4>
 80031de:	2388      	movs	r3, #136	; 0x88
 80031e0:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 80031e2:	e1a6      	b.n	8003532 <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d102      	bne.n	80031f6 <lcdHLine2+0x106>
 80031f0:	2344      	movs	r3, #68	; 0x44
 80031f2:	75fb      	strb	r3, [r7, #23]
			break;
 80031f4:	e19d      	b.n	8003532 <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d102      	bne.n	8003208 <lcdHLine2+0x118>
 8003202:	2322      	movs	r3, #34	; 0x22
 8003204:	75fb      	strb	r3, [r7, #23]
			break;
 8003206:	e194      	b.n	8003532 <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b03      	cmp	r3, #3
 8003212:	f040 818e 	bne.w	8003532 <lcdHLine2+0x442>
 8003216:	2311      	movs	r3, #17
 8003218:	75fb      	strb	r3, [r7, #23]
			break;
 800321a:	e18a      	b.n	8003532 <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <lcdHLine2+0x144>
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d102      	bne.n	800323a <lcdHLine2+0x14a>
 8003234:	23aa      	movs	r3, #170	; 0xaa
 8003236:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8003238:	e17d      	b.n	8003536 <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <lcdHLine2+0x15c>
 8003246:	2322      	movs	r3, #34	; 0x22
 8003248:	75fb      	strb	r3, [r7, #23]
			break;
 800324a:	e174      	b.n	8003536 <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b03      	cmp	r3, #3
 8003256:	f040 816e 	bne.w	8003536 <lcdHLine2+0x446>
 800325a:	2388      	movs	r3, #136	; 0x88
 800325c:	75fb      	strb	r3, [r7, #23]
			break;
 800325e:	e16a      	b.n	8003536 <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d005      	beq.n	8003278 <lcdHLine2+0x188>
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b03      	cmp	r3, #3
 8003276:	d102      	bne.n	800327e <lcdHLine2+0x18e>
 8003278:	2355      	movs	r3, #85	; 0x55
 800327a:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 800327c:	e15d      	b.n	800353a <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <lcdHLine2+0x1a0>
 800328a:	2388      	movs	r3, #136	; 0x88
 800328c:	75fb      	strb	r3, [r7, #23]
			break;
 800328e:	e154      	b.n	800353a <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	f040 814e 	bne.w	800353a <lcdHLine2+0x44a>
 800329e:	2322      	movs	r3, #34	; 0x22
 80032a0:	75fb      	strb	r3, [r7, #23]
			break;
 80032a2:	e14a      	b.n	800353a <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <lcdHLine2+0x1cc>
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <lcdHLine2+0x1d2>
 80032bc:	23cc      	movs	r3, #204	; 0xcc
 80032be:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 80032c0:	e13d      	b.n	800353e <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d006      	beq.n	80032dc <lcdHLine2+0x1ec>
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	f040 8131 	bne.w	800353e <lcdHLine2+0x44e>
 80032dc:	2333      	movs	r3, #51	; 0x33
 80032de:	75fb      	strb	r3, [r7, #23]
			break;
 80032e0:	e12d      	b.n	800353e <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <lcdHLine2+0x204>
 80032ee:	2355      	movs	r3, #85	; 0x55
 80032f0:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 80032f2:	e126      	b.n	8003542 <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8120 	beq.w	8003542 <lcdHLine2+0x452>
 8003302:	23ff      	movs	r3, #255	; 0xff
 8003304:	75fb      	strb	r3, [r7, #23]
			break;
 8003306:	e11c      	b.n	8003542 <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <lcdHLine2+0x22a>
 8003314:	23cc      	movs	r3, #204	; 0xcc
 8003316:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8003318:	e11c      	b.n	8003554 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d102      	bne.n	800332c <lcdHLine2+0x23c>
 8003326:	2344      	movs	r3, #68	; 0x44
 8003328:	75fb      	strb	r3, [r7, #23]
			break;
 800332a:	e113      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0x00;
 800332c:	2300      	movs	r3, #0
 800332e:	75fb      	strb	r3, [r7, #23]
			break;
 8003330:	e110      	b.n	8003554 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d102      	bne.n	8003344 <lcdHLine2+0x254>
 800333e:	23ee      	movs	r3, #238	; 0xee
 8003340:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 8003342:	e107      	b.n	8003554 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d005      	beq.n	800335c <lcdHLine2+0x26c>
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d102      	bne.n	8003362 <lcdHLine2+0x272>
 800335c:	2322      	movs	r3, #34	; 0x22
 800335e:	75fb      	strb	r3, [r7, #23]
			break;
 8003360:	e0f8      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]
			break;
 8003366:	e0f5      	b.n	8003554 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <lcdHLine2+0x28a>
 8003374:	23ff      	movs	r3, #255	; 0xff
 8003376:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 8003378:	e0ec      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 800337a:	2388      	movs	r3, #136	; 0x88
 800337c:	75fb      	strb	r3, [r7, #23]
			break;
 800337e:	e0e9      	b.n	8003554 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <lcdHLine2+0x2a2>
 800338c:	23aa      	movs	r3, #170	; 0xaa
 800338e:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 8003390:	e0d9      	b.n	8003546 <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80d3 	beq.w	8003546 <lcdHLine2+0x456>
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
			break;
 80033a4:	e0cf      	b.n	8003546 <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <lcdHLine2+0x2ce>
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d102      	bne.n	80033c4 <lcdHLine2+0x2d4>
 80033be:	23aa      	movs	r3, #170	; 0xaa
 80033c0:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 80033c2:	e0c7      	b.n	8003554 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d102      	bne.n	80033d6 <lcdHLine2+0x2e6>
 80033d0:	2344      	movs	r3, #68	; 0x44
 80033d2:	75fb      	strb	r3, [r7, #23]
			break;
 80033d4:	e0be      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0x00;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]
			break;
 80033da:	e0bb      	b.n	8003554 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <lcdHLine2+0x304>
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d102      	bne.n	80033fa <lcdHLine2+0x30a>
 80033f4:	23ee      	movs	r3, #238	; 0xee
 80033f6:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 80033f8:	e0ac      	b.n	8003554 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d102      	bne.n	800340c <lcdHLine2+0x31c>
 8003406:	23aa      	movs	r3, #170	; 0xaa
 8003408:	75fb      	strb	r3, [r7, #23]
			break;
 800340a:	e0a3      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0x00;
 800340c:	2300      	movs	r3, #0
 800340e:	75fb      	strb	r3, [r7, #23]
			break;
 8003410:	e0a0      	b.n	8003554 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <lcdHLine2+0x33a>
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d102      	bne.n	8003430 <lcdHLine2+0x340>
 800342a:	2344      	movs	r3, #68	; 0x44
 800342c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 800342e:	e08c      	b.n	800354a <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d102      	bne.n	8003442 <lcdHLine2+0x352>
 800343c:	23aa      	movs	r3, #170	; 0xaa
 800343e:	75fb      	strb	r3, [r7, #23]
			break;
 8003440:	e083      	b.n	800354a <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b03      	cmp	r3, #3
 800344c:	d17d      	bne.n	800354a <lcdHLine2+0x45a>
 800344e:	2311      	movs	r3, #17
 8003450:	75fb      	strb	r3, [r7, #23]
			break;
 8003452:	e07a      	b.n	800354a <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	4baf      	ldr	r3, [pc, #700]	; (8003714 <lcdHLine2+0x624>)
 8003458:	fba3 1302 	umull	r1, r3, r3, r2
 800345c:	0859      	lsrs	r1, r3, #1
 800345e:	460b      	mov	r3, r1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	440b      	add	r3, r1
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <lcdHLine2+0x382>
 800346c:	2355      	movs	r3, #85	; 0x55
 800346e:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 8003470:	e06d      	b.n	800354e <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	4ba7      	ldr	r3, [pc, #668]	; (8003714 <lcdHLine2+0x624>)
 8003476:	fba3 1302 	umull	r1, r3, r3, r2
 800347a:	0859      	lsrs	r1, r3, #1
 800347c:	460b      	mov	r3, r1
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	440b      	add	r3, r1
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d102      	bne.n	8003490 <lcdHLine2+0x3a0>
 800348a:	23aa      	movs	r3, #170	; 0xaa
 800348c:	75fb      	strb	r3, [r7, #23]
			break;
 800348e:	e05e      	b.n	800354e <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	4ba0      	ldr	r3, [pc, #640]	; (8003714 <lcdHLine2+0x624>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	0859      	lsrs	r1, r3, #1
 800349a:	460b      	mov	r3, r1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	440b      	add	r3, r1
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d152      	bne.n	800354e <lcdHLine2+0x45e>
 80034a8:	2300      	movs	r3, #0
 80034aa:	75fb      	strb	r3, [r7, #23]
			break;
 80034ac:	e04f      	b.n	800354e <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <lcdHLine2+0x3d0>
 80034ba:	2322      	movs	r3, #34	; 0x22
 80034bc:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 80034be:	e049      	b.n	8003554 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d102      	bne.n	80034d2 <lcdHLine2+0x3e2>
 80034cc:	2355      	movs	r3, #85	; 0x55
 80034ce:	75fb      	strb	r3, [r7, #23]
			break;
 80034d0:	e040      	b.n	8003554 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d102      	bne.n	80034e4 <lcdHLine2+0x3f4>
 80034de:	2388      	movs	r3, #136	; 0x88
 80034e0:	75fb      	strb	r3, [r7, #23]
			break;
 80034e2:	e037      	b.n	8003554 <lcdHLine2+0x464>
			else pattern = 0x00;
 80034e4:	2300      	movs	r3, #0
 80034e6:	75fb      	strb	r3, [r7, #23]
			break;
 80034e8:	e034      	b.n	8003554 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d005      	beq.n	8003502 <lcdHLine2+0x412>
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d102      	bne.n	8003508 <lcdHLine2+0x418>
 8003502:	2388      	movs	r3, #136	; 0x88
 8003504:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 8003506:	e024      	b.n	8003552 <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <lcdHLine2+0x42a>
 8003514:	2377      	movs	r3, #119	; 0x77
 8003516:	75fb      	strb	r3, [r7, #23]
			break;
 8003518:	e01b      	b.n	8003552 <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d115      	bne.n	8003552 <lcdHLine2+0x462>
 8003526:	23aa      	movs	r3, #170	; 0xaa
 8003528:	75fb      	strb	r3, [r7, #23]
			break;
 800352a:	e012      	b.n	8003552 <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 800352c:	2300      	movs	r3, #0
 800352e:	75fb      	strb	r3, [r7, #23]
			break;
 8003530:	e010      	b.n	8003554 <lcdHLine2+0x464>
			break;
 8003532:	bf00      	nop
 8003534:	e00e      	b.n	8003554 <lcdHLine2+0x464>
			break;
 8003536:	bf00      	nop
 8003538:	e00c      	b.n	8003554 <lcdHLine2+0x464>
			break;
 800353a:	bf00      	nop
 800353c:	e00a      	b.n	8003554 <lcdHLine2+0x464>
			break;
 800353e:	bf00      	nop
 8003540:	e008      	b.n	8003554 <lcdHLine2+0x464>
			break;
 8003542:	bf00      	nop
 8003544:	e006      	b.n	8003554 <lcdHLine2+0x464>
			break;
 8003546:	bf00      	nop
 8003548:	e004      	b.n	8003554 <lcdHLine2+0x464>
			break;
 800354a:	bf00      	nop
 800354c:	e002      	b.n	8003554 <lcdHLine2+0x464>
			break;
 800354e:	bf00      	nop
 8003550:	e000      	b.n	8003554 <lcdHLine2+0x464>
			break;
 8003552:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	08db      	lsrs	r3, r3, #3
 8003558:	b29b      	uxth	r3, r3
 800355a:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 8003566:	88bb      	ldrh	r3, [r7, #4]
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	b29b      	uxth	r3, r3
 800356c:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 800356e:	88bb      	ldrh	r3, [r7, #4]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	2232      	movs	r2, #50	; 0x32
 800357c:	fb03 f202 	mul.w	r2, r3, r2
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	4413      	add	r3, r2
 8003584:	4a64      	ldr	r2, [pc, #400]	; (8003718 <lcdHLine2+0x628>)
 8003586:	5cd3      	ldrb	r3, [r2, r3]
 8003588:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	2232      	movs	r2, #50	; 0x32
 800358e:	fb03 f202 	mul.w	r2, r3, r2
 8003592:	7b7b      	ldrb	r3, [r7, #13]
 8003594:	4413      	add	r3, r2
 8003596:	4a60      	ldr	r2, [pc, #384]	; (8003718 <lcdHLine2+0x628>)
 8003598:	5cd3      	ldrb	r3, [r2, r3]
 800359a:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 800359c:	23ff      	movs	r3, #255	; 0xff
 800359e:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 80035a0:	7bbb      	ldrb	r3, [r7, #14]
 80035a2:	f1c3 0208 	rsb	r2, r3, #8
 80035a6:	88b9      	ldrh	r1, [r7, #4]
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	1acb      	subs	r3, r1, r3
 80035ac:	3301      	adds	r3, #1
 80035ae:	429a      	cmp	r2, r3
 80035b0:	dd11      	ble.n	80035d6 <lcdHLine2+0x4e6>
 80035b2:	88ba      	ldrh	r2, [r7, #4]
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	fa42 f303 	asr.w	r3, r2, r3
 80035c0:	43da      	mvns	r2, r3
 80035c2:	7bbb      	ldrb	r3, [r7, #14]
 80035c4:	fa42 f303 	asr.w	r3, r2, r3
 80035c8:	b25a      	sxtb	r2, r3
 80035ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035ce:	4013      	ands	r3, r2
 80035d0:	b25b      	sxtb	r3, r3
 80035d2:	753b      	strb	r3, [r7, #20]
 80035d4:	e001      	b.n	80035da <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	753b      	strb	r3, [r7, #20]
		switch(mode){
 80035da:	78bb      	ldrb	r3, [r7, #2]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	f200 8130 	bhi.w	8003842 <lcdHLine2+0x752>
 80035e2:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <lcdHLine2+0x4f8>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	0800367d 	.word	0x0800367d
 80035f0:	0800371d 	.word	0x0800371d
 80035f4:	080037a1 	.word	0x080037a1
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 80035f8:	7bbb      	ldrb	r3, [r7, #14]
 80035fa:	22ff      	movs	r2, #255	; 0xff
 80035fc:	fa42 f303 	asr.w	r3, r2, r3
 8003600:	b25a      	sxtb	r2, r3
 8003602:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003606:	4013      	ands	r3, r2
 8003608:	b25a      	sxtb	r2, r3
 800360a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800360e:	4313      	orrs	r3, r2
 8003610:	b25b      	sxtb	r3, r3
 8003612:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 8003614:	7b3b      	ldrb	r3, [r7, #12]
 8003616:	f1c3 0307 	rsb	r3, r3, #7
 800361a:	22ff      	movs	r2, #255	; 0xff
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	b25a      	sxtb	r2, r3
 8003622:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003626:	4013      	ands	r3, r2
 8003628:	b25a      	sxtb	r2, r3
 800362a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800362e:	4313      	orrs	r3, r2
 8003630:	b25b      	sxtb	r3, r3
 8003632:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003634:	2301      	movs	r3, #1
 8003636:	74fb      	strb	r3, [r7, #19]
 8003638:	e019      	b.n	800366e <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	2232      	movs	r2, #50	; 0x32
 800363e:	fb03 f202 	mul.w	r2, r3, r2
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	441a      	add	r2, r3
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	4413      	add	r3, r2
 800364a:	4a33      	ldr	r2, [pc, #204]	; (8003718 <lcdHLine2+0x628>)
 800364c:	5cd1      	ldrb	r1, [r2, r3]
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	2232      	movs	r2, #50	; 0x32
 8003652:	fb03 f202 	mul.w	r2, r3, r2
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	441a      	add	r2, r3
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	4413      	add	r3, r2
 800365e:	7dfa      	ldrb	r2, [r7, #23]
 8003660:	430a      	orrs	r2, r1
 8003662:	b2d1      	uxtb	r1, r2
 8003664:	4a2c      	ldr	r2, [pc, #176]	; (8003718 <lcdHLine2+0x628>)
 8003666:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	3301      	adds	r3, #1
 800366c:	74fb      	strb	r3, [r7, #19]
 800366e:	7cfa      	ldrb	r2, [r7, #19]
 8003670:	7b79      	ldrb	r1, [r7, #13]
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	1acb      	subs	r3, r1, r3
 8003676:	429a      	cmp	r2, r3
 8003678:	dbdf      	blt.n	800363a <lcdHLine2+0x54a>
			}
			break;
 800367a:	e0e2      	b.n	8003842 <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 800367c:	7bbb      	ldrb	r3, [r7, #14]
 800367e:	22ff      	movs	r2, #255	; 0xff
 8003680:	fa42 f303 	asr.w	r3, r2, r3
 8003684:	b25a      	sxtb	r2, r3
 8003686:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800368a:	4013      	ands	r3, r2
 800368c:	b25b      	sxtb	r3, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	b25a      	sxtb	r2, r3
 8003692:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003696:	4013      	ands	r3, r2
 8003698:	b25b      	sxtb	r3, r3
 800369a:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 800369c:	7b3b      	ldrb	r3, [r7, #12]
 800369e:	f1c3 0307 	rsb	r3, r3, #7
 80036a2:	22ff      	movs	r2, #255	; 0xff
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	b25a      	sxtb	r2, r3
 80036aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036ae:	4013      	ands	r3, r2
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	b25a      	sxtb	r2, r3
 80036b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80036ba:	4013      	ands	r3, r2
 80036bc:	b25b      	sxtb	r3, r3
 80036be:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80036c0:	2301      	movs	r3, #1
 80036c2:	74bb      	strb	r3, [r7, #18]
 80036c4:	e01e      	b.n	8003704 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	2232      	movs	r2, #50	; 0x32
 80036ca:	fb03 f202 	mul.w	r2, r3, r2
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	441a      	add	r2, r3
 80036d2:	7cbb      	ldrb	r3, [r7, #18]
 80036d4:	4413      	add	r3, r2
 80036d6:	4a10      	ldr	r2, [pc, #64]	; (8003718 <lcdHLine2+0x628>)
 80036d8:	5cd3      	ldrb	r3, [r2, r3]
 80036da:	b25a      	sxtb	r2, r3
 80036dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	b25b      	sxtb	r3, r3
 80036e4:	4013      	ands	r3, r2
 80036e6:	b259      	sxtb	r1, r3
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	2232      	movs	r2, #50	; 0x32
 80036ec:	fb03 f202 	mul.w	r2, r3, r2
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	441a      	add	r2, r3
 80036f4:	7cbb      	ldrb	r3, [r7, #18]
 80036f6:	4413      	add	r3, r2
 80036f8:	b2c9      	uxtb	r1, r1
 80036fa:	4a07      	ldr	r2, [pc, #28]	; (8003718 <lcdHLine2+0x628>)
 80036fc:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80036fe:	7cbb      	ldrb	r3, [r7, #18]
 8003700:	3301      	adds	r3, #1
 8003702:	74bb      	strb	r3, [r7, #18]
 8003704:	7cba      	ldrb	r2, [r7, #18]
 8003706:	7b79      	ldrb	r1, [r7, #13]
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	1acb      	subs	r3, r1, r3
 800370c:	429a      	cmp	r2, r3
 800370e:	dbda      	blt.n	80036c6 <lcdHLine2+0x5d6>
			}
			break;
 8003710:	e097      	b.n	8003842 <lcdHLine2+0x752>
 8003712:	bf00      	nop
 8003714:	aaaaaaab 	.word	0xaaaaaaab
 8003718:	20002768 	.word	0x20002768
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 800371c:	7bbb      	ldrb	r3, [r7, #14]
 800371e:	22ff      	movs	r2, #255	; 0xff
 8003720:	fa42 f303 	asr.w	r3, r2, r3
 8003724:	b25a      	sxtb	r2, r3
 8003726:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800372a:	4013      	ands	r3, r2
 800372c:	b25a      	sxtb	r2, r3
 800372e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003732:	4053      	eors	r3, r2
 8003734:	b25b      	sxtb	r3, r3
 8003736:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8003738:	7b3b      	ldrb	r3, [r7, #12]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	22ff      	movs	r2, #255	; 0xff
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	b25a      	sxtb	r2, r3
 8003746:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800374a:	4013      	ands	r3, r2
 800374c:	b25a      	sxtb	r2, r3
 800374e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003752:	4053      	eors	r3, r2
 8003754:	b25b      	sxtb	r3, r3
 8003756:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003758:	2301      	movs	r3, #1
 800375a:	747b      	strb	r3, [r7, #17]
 800375c:	e019      	b.n	8003792 <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	2232      	movs	r2, #50	; 0x32
 8003762:	fb03 f202 	mul.w	r2, r3, r2
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	441a      	add	r2, r3
 800376a:	7c7b      	ldrb	r3, [r7, #17]
 800376c:	4413      	add	r3, r2
 800376e:	4a42      	ldr	r2, [pc, #264]	; (8003878 <lcdHLine2+0x788>)
 8003770:	5cd1      	ldrb	r1, [r2, r3]
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	2232      	movs	r2, #50	; 0x32
 8003776:	fb03 f202 	mul.w	r2, r3, r2
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	441a      	add	r2, r3
 800377e:	7c7b      	ldrb	r3, [r7, #17]
 8003780:	4413      	add	r3, r2
 8003782:	7dfa      	ldrb	r2, [r7, #23]
 8003784:	404a      	eors	r2, r1
 8003786:	b2d1      	uxtb	r1, r2
 8003788:	4a3b      	ldr	r2, [pc, #236]	; (8003878 <lcdHLine2+0x788>)
 800378a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800378c:	7c7b      	ldrb	r3, [r7, #17]
 800378e:	3301      	adds	r3, #1
 8003790:	747b      	strb	r3, [r7, #17]
 8003792:	7c7a      	ldrb	r2, [r7, #17]
 8003794:	7b79      	ldrb	r1, [r7, #13]
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	1acb      	subs	r3, r1, r3
 800379a:	429a      	cmp	r2, r3
 800379c:	dbdf      	blt.n	800375e <lcdHLine2+0x66e>
			}
			break;
 800379e:	e050      	b.n	8003842 <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 80037a0:	7bbb      	ldrb	r3, [r7, #14]
 80037a2:	22ff      	movs	r2, #255	; 0xff
 80037a4:	fa42 f303 	asr.w	r3, r2, r3
 80037a8:	b25a      	sxtb	r2, r3
 80037aa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80037ae:	4013      	ands	r3, r2
 80037b0:	b25a      	sxtb	r2, r3
 80037b2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	b259      	sxtb	r1, r3
 80037ba:	7bbb      	ldrb	r3, [r7, #14]
 80037bc:	f1c3 0308 	rsb	r3, r3, #8
 80037c0:	20ff      	movs	r0, #255	; 0xff
 80037c2:	fa00 f303 	lsl.w	r3, r0, r3
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	400b      	ands	r3, r1
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	4313      	orrs	r3, r2
 80037ce:	b25b      	sxtb	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 80037d6:	7b3b      	ldrb	r3, [r7, #12]
 80037d8:	f1c3 0307 	rsb	r3, r3, #7
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	b25a      	sxtb	r2, r3
 80037e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037e8:	4013      	ands	r3, r2
 80037ea:	b25a      	sxtb	r2, r3
 80037ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	b259      	sxtb	r1, r3
 80037f4:	7b3b      	ldrb	r3, [r7, #12]
 80037f6:	3301      	adds	r3, #1
 80037f8:	20ff      	movs	r0, #255	; 0xff
 80037fa:	fa40 f303 	asr.w	r3, r0, r3
 80037fe:	b25b      	sxtb	r3, r3
 8003800:	400b      	ands	r3, r1
 8003802:	b25b      	sxtb	r3, r3
 8003804:	4313      	orrs	r3, r2
 8003806:	b25b      	sxtb	r3, r3
 8003808:	b2db      	uxtb	r3, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800380e:	2301      	movs	r3, #1
 8003810:	743b      	strb	r3, [r7, #16]
 8003812:	e00f      	b.n	8003834 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	2232      	movs	r2, #50	; 0x32
 8003818:	fb03 f202 	mul.w	r2, r3, r2
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	441a      	add	r2, r3
 8003820:	7c3b      	ldrb	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	7dfa      	ldrb	r2, [r7, #23]
 8003826:	43d2      	mvns	r2, r2
 8003828:	b2d1      	uxtb	r1, r2
 800382a:	4a13      	ldr	r2, [pc, #76]	; (8003878 <lcdHLine2+0x788>)
 800382c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800382e:	7c3b      	ldrb	r3, [r7, #16]
 8003830:	3301      	adds	r3, #1
 8003832:	743b      	strb	r3, [r7, #16]
 8003834:	7c3a      	ldrb	r2, [r7, #16]
 8003836:	7b79      	ldrb	r1, [r7, #13]
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	1acb      	subs	r3, r1, r3
 800383c:	429a      	cmp	r2, r3
 800383e:	dbe9      	blt.n	8003814 <lcdHLine2+0x724>
			}
			break;
 8003840:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	2232      	movs	r2, #50	; 0x32
 8003846:	fb03 f202 	mul.w	r2, r3, r2
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	4413      	add	r3, r2
 800384e:	490a      	ldr	r1, [pc, #40]	; (8003878 <lcdHLine2+0x788>)
 8003850:	7dba      	ldrb	r2, [r7, #22]
 8003852:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003854:	7b7a      	ldrb	r2, [r7, #13]
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	429a      	cmp	r2, r3
 800385a:	d908      	bls.n	800386e <lcdHLine2+0x77e>
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	2232      	movs	r2, #50	; 0x32
 8003860:	fb03 f202 	mul.w	r2, r3, r2
 8003864:	7b7b      	ldrb	r3, [r7, #13]
 8003866:	4413      	add	r3, r2
 8003868:	4903      	ldr	r1, [pc, #12]	; (8003878 <lcdHLine2+0x788>)
 800386a:	7d7a      	ldrb	r2, [r7, #21]
 800386c:	54ca      	strb	r2, [r1, r3]
}
 800386e:	bf00      	nop
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bc90      	pop	{r4, r7}
 8003876:	4770      	bx	lr
 8003878:	20002768 	.word	0x20002768

0800387c <lcdHLine>:

// Draw horizontal line
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 800387c:	b490      	push	{r4, r7}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	4604      	mov	r4, r0
 8003884:	4608      	mov	r0, r1
 8003886:	4611      	mov	r1, r2
 8003888:	461a      	mov	r2, r3
 800388a:	4623      	mov	r3, r4
 800388c:	80fb      	strh	r3, [r7, #6]
 800388e:	4603      	mov	r3, r0
 8003890:	80bb      	strh	r3, [r7, #4]
 8003892:	460b      	mov	r3, r1
 8003894:	70fb      	strb	r3, [r7, #3]
 8003896:	4613      	mov	r3, r2
 8003898:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	08db      	lsrs	r3, r3, #3
 800389e:	b29b      	uxth	r3, r3
 80038a0:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 80038ac:	88bb      	ldrh	r3, [r7, #4]
 80038ae:	08db      	lsrs	r3, r3, #3
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 80038b4:	88bb      	ldrh	r3, [r7, #4]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	2232      	movs	r2, #50	; 0x32
 80038c2:	fb03 f202 	mul.w	r2, r3, r2
 80038c6:	7c7b      	ldrb	r3, [r7, #17]
 80038c8:	4413      	add	r3, r2
 80038ca:	4a71      	ldr	r2, [pc, #452]	; (8003a90 <lcdHLine+0x214>)
 80038cc:	5cd3      	ldrb	r3, [r2, r3]
 80038ce:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	2232      	movs	r2, #50	; 0x32
 80038d4:	fb03 f202 	mul.w	r2, r3, r2
 80038d8:	7c7b      	ldrb	r3, [r7, #17]
 80038da:	441a      	add	r2, r3
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	4413      	add	r3, r2
 80038e0:	4a6b      	ldr	r2, [pc, #428]	; (8003a90 <lcdHLine+0x214>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
 80038e4:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 80038e6:	23ff      	movs	r3, #255	; 0xff
 80038e8:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 80038ea:	7c3b      	ldrb	r3, [r7, #16]
 80038ec:	f1c3 0208 	rsb	r2, r3, #8
 80038f0:	88b9      	ldrh	r1, [r7, #4]
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	1acb      	subs	r3, r1, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	429a      	cmp	r2, r3
 80038fa:	dd09      	ble.n	8003910 <lcdHLine+0x94>
 80038fc:	88ba      	ldrh	r2, [r7, #4]
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	3301      	adds	r3, #1
 8003904:	22ff      	movs	r2, #255	; 0xff
 8003906:	fa42 f303 	asr.w	r3, r2, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	757b      	strb	r3, [r7, #21]
	switch(mode){
 8003910:	78bb      	ldrb	r3, [r7, #2]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d067      	beq.n	80039e6 <lcdHLine+0x16a>
 8003916:	2b02      	cmp	r3, #2
 8003918:	f300 809e 	bgt.w	8003a58 <lcdHLine+0x1dc>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <lcdHLine+0xaa>
 8003920:	2b01      	cmp	r3, #1
 8003922:	d02e      	beq.n	8003982 <lcdHLine+0x106>
 8003924:	e098      	b.n	8003a58 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 8003926:	7d7a      	ldrb	r2, [r7, #21]
 8003928:	7c3b      	ldrb	r3, [r7, #16]
 800392a:	fa42 f303 	asr.w	r3, r2, r3
 800392e:	b25a      	sxtb	r2, r3
 8003930:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003934:	4313      	orrs	r3, r2
 8003936:	b25b      	sxtb	r3, r3
 8003938:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 800393a:	7bbb      	ldrb	r3, [r7, #14]
 800393c:	f1c3 0307 	rsb	r3, r3, #7
 8003940:	22ff      	movs	r2, #255	; 0xff
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	b25a      	sxtb	r2, r3
 8003948:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800394c:	4313      	orrs	r3, r2
 800394e:	b25b      	sxtb	r3, r3
 8003950:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003952:	2301      	movs	r3, #1
 8003954:	753b      	strb	r3, [r7, #20]
 8003956:	e00d      	b.n	8003974 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	2232      	movs	r2, #50	; 0x32
 800395c:	fb03 f202 	mul.w	r2, r3, r2
 8003960:	7c7b      	ldrb	r3, [r7, #17]
 8003962:	441a      	add	r2, r3
 8003964:	7d3b      	ldrb	r3, [r7, #20]
 8003966:	4413      	add	r3, r2
 8003968:	4a49      	ldr	r2, [pc, #292]	; (8003a90 <lcdHLine+0x214>)
 800396a:	21ff      	movs	r1, #255	; 0xff
 800396c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800396e:	7d3b      	ldrb	r3, [r7, #20]
 8003970:	3301      	adds	r3, #1
 8003972:	753b      	strb	r3, [r7, #20]
 8003974:	7d3a      	ldrb	r2, [r7, #20]
 8003976:	7bf9      	ldrb	r1, [r7, #15]
 8003978:	7c7b      	ldrb	r3, [r7, #17]
 800397a:	1acb      	subs	r3, r1, r3
 800397c:	429a      	cmp	r2, r3
 800397e:	dbeb      	blt.n	8003958 <lcdHLine+0xdc>
		}
		break;
 8003980:	e06a      	b.n	8003a58 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 8003982:	7d7a      	ldrb	r2, [r7, #21]
 8003984:	7c3b      	ldrb	r3, [r7, #16]
 8003986:	fa42 f303 	asr.w	r3, r2, r3
 800398a:	b25b      	sxtb	r3, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	b25a      	sxtb	r2, r3
 8003990:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003994:	4013      	ands	r3, r2
 8003996:	b25b      	sxtb	r3, r3
 8003998:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 800399a:	7bbb      	ldrb	r3, [r7, #14]
 800399c:	f1c3 0307 	rsb	r3, r3, #7
 80039a0:	22ff      	movs	r2, #255	; 0xff
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	b25b      	sxtb	r3, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	b25a      	sxtb	r2, r3
 80039ac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80039b0:	4013      	ands	r3, r2
 80039b2:	b25b      	sxtb	r3, r3
 80039b4:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80039b6:	2301      	movs	r3, #1
 80039b8:	74fb      	strb	r3, [r7, #19]
 80039ba:	e00d      	b.n	80039d8 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	2232      	movs	r2, #50	; 0x32
 80039c0:	fb03 f202 	mul.w	r2, r3, r2
 80039c4:	7c7b      	ldrb	r3, [r7, #17]
 80039c6:	441a      	add	r2, r3
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	4413      	add	r3, r2
 80039cc:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <lcdHLine+0x214>)
 80039ce:	2100      	movs	r1, #0
 80039d0:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	3301      	adds	r3, #1
 80039d6:	74fb      	strb	r3, [r7, #19]
 80039d8:	7cfa      	ldrb	r2, [r7, #19]
 80039da:	7bf9      	ldrb	r1, [r7, #15]
 80039dc:	7c7b      	ldrb	r3, [r7, #17]
 80039de:	1acb      	subs	r3, r1, r3
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dbeb      	blt.n	80039bc <lcdHLine+0x140>
		}
		break;
 80039e4:	e038      	b.n	8003a58 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 80039e6:	7d7a      	ldrb	r2, [r7, #21]
 80039e8:	7c3b      	ldrb	r3, [r7, #16]
 80039ea:	fa42 f303 	asr.w	r3, r2, r3
 80039ee:	b25a      	sxtb	r2, r3
 80039f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039f4:	4053      	eors	r3, r2
 80039f6:	b25b      	sxtb	r3, r3
 80039f8:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 80039fa:	7bbb      	ldrb	r3, [r7, #14]
 80039fc:	f1c3 0307 	rsb	r3, r3, #7
 8003a00:	22ff      	movs	r2, #255	; 0xff
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	b25a      	sxtb	r2, r3
 8003a08:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a0c:	4053      	eors	r3, r2
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003a12:	2301      	movs	r3, #1
 8003a14:	74bb      	strb	r3, [r7, #18]
 8003a16:	e018      	b.n	8003a4a <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	2232      	movs	r2, #50	; 0x32
 8003a1c:	fb03 f202 	mul.w	r2, r3, r2
 8003a20:	7c7b      	ldrb	r3, [r7, #17]
 8003a22:	441a      	add	r2, r3
 8003a24:	7cbb      	ldrb	r3, [r7, #18]
 8003a26:	4413      	add	r3, r2
 8003a28:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <lcdHLine+0x214>)
 8003a2a:	5cd2      	ldrb	r2, [r2, r3]
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	2132      	movs	r1, #50	; 0x32
 8003a30:	fb03 f101 	mul.w	r1, r3, r1
 8003a34:	7c7b      	ldrb	r3, [r7, #17]
 8003a36:	4419      	add	r1, r3
 8003a38:	7cbb      	ldrb	r3, [r7, #18]
 8003a3a:	440b      	add	r3, r1
 8003a3c:	43d2      	mvns	r2, r2
 8003a3e:	b2d1      	uxtb	r1, r2
 8003a40:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <lcdHLine+0x214>)
 8003a42:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003a44:	7cbb      	ldrb	r3, [r7, #18]
 8003a46:	3301      	adds	r3, #1
 8003a48:	74bb      	strb	r3, [r7, #18]
 8003a4a:	7cba      	ldrb	r2, [r7, #18]
 8003a4c:	7bf9      	ldrb	r1, [r7, #15]
 8003a4e:	7c7b      	ldrb	r3, [r7, #17]
 8003a50:	1acb      	subs	r3, r1, r3
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dbe0      	blt.n	8003a18 <lcdHLine+0x19c>
		}
		break;
 8003a56:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	2232      	movs	r2, #50	; 0x32
 8003a5c:	fb03 f202 	mul.w	r2, r3, r2
 8003a60:	7c7b      	ldrb	r3, [r7, #17]
 8003a62:	4413      	add	r3, r2
 8003a64:	490a      	ldr	r1, [pc, #40]	; (8003a90 <lcdHLine+0x214>)
 8003a66:	7dfa      	ldrb	r2, [r7, #23]
 8003a68:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	7c7b      	ldrb	r3, [r7, #17]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d908      	bls.n	8003a84 <lcdHLine+0x208>
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	2232      	movs	r2, #50	; 0x32
 8003a76:	fb03 f202 	mul.w	r2, r3, r2
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	4904      	ldr	r1, [pc, #16]	; (8003a90 <lcdHLine+0x214>)
 8003a80:	7dba      	ldrb	r2, [r7, #22]
 8003a82:	54ca      	strb	r2, [r1, r3]
}
 8003a84:	bf00      	nop
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc90      	pop	{r4, r7}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20002768 	.word	0x20002768

08003a94 <lcdRefresh>:

void lcdRefresh(void){
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
	if(allowUpdate){
 8003a9a:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <lcdRefresh+0x7c>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d032      	beq.n	8003b08 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	2140      	movs	r1, #64	; 0x40
 8003aa6:	481b      	ldr	r0, [pc, #108]	; (8003b14 <lcdRefresh+0x80>)
 8003aa8:	f005 fa20 	bl	8008eec <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003aac:	2301      	movs	r3, #1
 8003aae:	71fb      	strb	r3, [r7, #7]
 8003ab0:	e01c      	b.n	8003aec <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff f8eb 	bl	8002c90 <reverse_uint8>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <lcdRefresh+0x84>)
 8003ac0:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 8003ac2:	2396      	movs	r3, #150	; 0x96
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	4914      	ldr	r1, [pc, #80]	; (8003b18 <lcdRefresh+0x84>)
 8003ac8:	4814      	ldr	r0, [pc, #80]	; (8003b1c <lcdRefresh+0x88>)
 8003aca:	f008 fc08 	bl	800c2de <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	2232      	movs	r2, #50	; 0x32
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <lcdRefresh+0x8c>)
 8003ada:	1899      	adds	r1, r3, r2
 8003adc:	2396      	movs	r3, #150	; 0x96
 8003ade:	2232      	movs	r2, #50	; 0x32
 8003ae0:	480e      	ldr	r0, [pc, #56]	; (8003b1c <lcdRefresh+0x88>)
 8003ae2:	f008 fbfc 	bl	800c2de <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	71fb      	strb	r3, [r7, #7]
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	2bf1      	cmp	r3, #241	; 0xf1
 8003af0:	d9df      	bls.n	8003ab2 <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 8003af2:	2396      	movs	r3, #150	; 0x96
 8003af4:	2202      	movs	r2, #2
 8003af6:	490b      	ldr	r1, [pc, #44]	; (8003b24 <lcdRefresh+0x90>)
 8003af8:	4808      	ldr	r0, [pc, #32]	; (8003b1c <lcdRefresh+0x88>)
 8003afa:	f008 fbf0 	bl	800c2de <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 8003afe:	2200      	movs	r2, #0
 8003b00:	2140      	movs	r1, #64	; 0x40
 8003b02:	4804      	ldr	r0, [pc, #16]	; (8003b14 <lcdRefresh+0x80>)
 8003b04:	f005 f9f2 	bl	8008eec <HAL_GPIO_WritePin>
	}
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000170 	.word	0x20000170
 8003b14:	40020000 	.word	0x40020000
 8003b18:	20000174 	.word	0x20000174
 8003b1c:	20005b04 	.word	0x20005b04
 8003b20:	20002768 	.word	0x20002768
 8003b24:	20002764 	.word	0x20002764

08003b28 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4604      	mov	r4, r0
 8003b30:	4608      	mov	r0, r1
 8003b32:	4611      	mov	r1, r2
 8003b34:	461a      	mov	r2, r3
 8003b36:	4623      	mov	r3, r4
 8003b38:	80fb      	strh	r3, [r7, #6]
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	80bb      	strh	r3, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	70fb      	strb	r3, [r7, #3]
 8003b42:	4613      	mov	r3, r2
 8003b44:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	73fb      	strb	r3, [r7, #15]
 8003b4a:	e009      	b.n	8003b60 <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8003b4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	88b9      	ldrh	r1, [r7, #4]
 8003b54:	88f8      	ldrh	r0, [r7, #6]
 8003b56:	f7ff fe91 	bl	800387c <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	78bb      	ldrb	r3, [r7, #2]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d9f1      	bls.n	8003b4c <lcdRect+0x24>
	}
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd90      	pop	{r4, r7, pc}

08003b72 <lcdRect2>:
void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8003b72:	b590      	push	{r4, r7, lr}
 8003b74:	b087      	sub	sp, #28
 8003b76:	af02      	add	r7, sp, #8
 8003b78:	4604      	mov	r4, r0
 8003b7a:	4608      	mov	r0, r1
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4623      	mov	r3, r4
 8003b82:	80fb      	strh	r3, [r7, #6]
 8003b84:	4603      	mov	r3, r0
 8003b86:	80bb      	strh	r3, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	70fb      	strb	r3, [r7, #3]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	88bb      	ldrh	r3, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d046      	beq.n	8003c26 <lcdRect2+0xb4>
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	78bb      	ldrb	r3, [r7, #2]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d042      	beq.n	8003c26 <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e00d      	b.n	8003bc2 <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8003ba6:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	88b9      	ldrh	r1, [r7, #4]
 8003bae:	88f8      	ldrh	r0, [r7, #6]
 8003bb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	4623      	mov	r3, r4
 8003bb8:	f7ff fa9a 	bl	80030f0 <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	78bb      	ldrb	r3, [r7, #2]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d9ed      	bls.n	8003ba6 <lcdRect2+0x34>
		}
		if(outline){
 8003bca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d029      	beq.n	8003c26 <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8003bd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	88b9      	ldrh	r1, [r7, #4]
 8003bda:	88f8      	ldrh	r0, [r7, #6]
 8003bdc:	2401      	movs	r4, #1
 8003bde:	9400      	str	r4, [sp, #0]
 8003be0:	f7ff fa86 	bl	80030f0 <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8003be4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003be8:	78ba      	ldrb	r2, [r7, #2]
 8003bea:	88b9      	ldrh	r1, [r7, #4]
 8003bec:	88f8      	ldrh	r0, [r7, #6]
 8003bee:	2401      	movs	r4, #1
 8003bf0:	9400      	str	r4, [sp, #0]
 8003bf2:	f7ff fa7d 	bl	80030f0 <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	b299      	uxth	r1, r3
 8003bfe:	78bb      	ldrb	r3, [r7, #2]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c08:	88f8      	ldrh	r0, [r7, #6]
 8003c0a:	f7ff f9fb 	bl	8003004 <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	b299      	uxth	r1, r3
 8003c16:	78bb      	ldrb	r3, [r7, #2]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c20:	88b8      	ldrh	r0, [r7, #4]
 8003c22:	f7ff f9ef 	bl	8003004 <lcdVLine>
		}
	}
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd90      	pop	{r4, r7, pc}

08003c2e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c36:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c3a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d013      	beq.n	8003c6e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003c46:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c4a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003c4e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003c56:	e000      	b.n	8003c5a <ITM_SendChar+0x2c>
    {
      __NOP();
 8003c58:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003c5a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f9      	beq.n	8003c58 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003c64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003c6e:	687b      	ldr	r3, [r7, #4]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff ffd1 	bl	8003c2e <ITM_SendChar>
	return(ch);
 8003c8c:	687b      	ldr	r3, [r7, #4]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 8003c9e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ca0:	f004 fd32 	bl	8008708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ca4:	f000 f8d6 	bl	8003e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ca8:	f7fe fa20 	bl	80020ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003cac:	f000 ff00 	bl	8004ab0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003cb0:	f000 faae 	bl	8004210 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003cb4:	f000 fd2a 	bl	800470c <MX_TIM1_Init>
  MX_TIM10_Init();
 8003cb8:	f000 fdca 	bl	8004850 <MX_TIM10_Init>
  MX_I2C1_Init();
 8003cbc:	f7fe ff60 	bl	8002b80 <MX_I2C1_Init>
  MX_TIM11_Init();
 8003cc0:	f000 fdea 	bl	8004898 <MX_TIM11_Init>
  MX_RTC_Init();
 8003cc4:	f000 f9c2 	bl	800404c <MX_RTC_Init>
  MX_TIM13_Init();
 8003cc8:	f000 fe0a 	bl	80048e0 <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 8003ccc:	f000 fa18 	bl	8004100 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003cd0:	f00b f82e 	bl	800ed30 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8003cd4:	f000 ff16 	bl	8004b04 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8003cd8:	484a      	ldr	r0, [pc, #296]	; (8003e04 <main+0x16c>)
 8003cda:	f008 fd07 	bl	800c6ec <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8003cde:	4849      	ldr	r0, [pc, #292]	; (8003e04 <main+0x16c>)
 8003ce0:	f008 fd54 	bl	800c78c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4847      	ldr	r0, [pc, #284]	; (8003e04 <main+0x16c>)
 8003ce8:	f008 fe48 	bl	800c97c <HAL_TIM_PWM_Start>
  // Initialize Timer 10 - generating LCD refresh Interrupt
//  HAL_TIM_Base_Start_IT(&htim10);

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 8003cec:	4846      	ldr	r0, [pc, #280]	; (8003e08 <main+0x170>)
 8003cee:	f008 fd4d 	bl	800c78c <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 8003cf2:	4846      	ldr	r0, [pc, #280]	; (8003e0c <main+0x174>)
 8003cf4:	f7fe f84c 	bl	8001d90 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 8003cf8:	4845      	ldr	r0, [pc, #276]	; (8003e10 <main+0x178>)
 8003cfa:	f008 fd47 	bl	800c78c <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 8003cfe:	4c45      	ldr	r4, [pc, #276]	; (8003e14 <main+0x17c>)
 8003d00:	463b      	mov	r3, r7
 8003d02:	4945      	ldr	r1, [pc, #276]	; (8003e18 <main+0x180>)
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fb41 	bl	800238c <initGps>
 8003d0a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003d0e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003d12:	4620      	mov	r0, r4
 8003d14:	4619      	mov	r1, r3
 8003d16:	f44f 7319 	mov.w	r3, #612	; 0x264
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f00e f9cc 	bl	80120b8 <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8003d20:	483e      	ldr	r0, [pc, #248]	; (8003e1c <main+0x184>)
 8003d22:	f7fd fd75 	bl	8001810 <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 8003d26:	f240 118f 	movw	r1, #399	; 0x18f
 8003d2a:	483d      	ldr	r0, [pc, #244]	; (8003e20 <main+0x188>)
 8003d2c:	f004 fba5 	bl	800847a <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 8003d30:	f240 128f 	movw	r2, #399	; 0x18f
 8003d34:	2102      	movs	r1, #2
 8003d36:	483b      	ldr	r0, [pc, #236]	; (8003e24 <main+0x18c>)
 8003d38:	f004 fae2 	bl	8008300 <cbuf_init>

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d42:	4839      	ldr	r0, [pc, #228]	; (8003e28 <main+0x190>)
 8003d44:	f005 f8d2 	bl	8008eec <HAL_GPIO_WritePin>
  	Mount_SD("/");
 8003d48:	4838      	ldr	r0, [pc, #224]	; (8003e2c <main+0x194>)
 8003d4a:	f7fd f98b 	bl	8001064 <Mount_SD>
  	Create_File("FILE1.TXT");
 8003d4e:	4838      	ldr	r0, [pc, #224]	; (8003e30 <main+0x198>)
 8003d50:	f7fd fa94 	bl	800127c <Create_File>
  	Update_File("FILE1.TXT", "Hello world, SD cart write \n");
 8003d54:	4937      	ldr	r1, [pc, #220]	; (8003e34 <main+0x19c>)
 8003d56:	4836      	ldr	r0, [pc, #216]	; (8003e30 <main+0x198>)
 8003d58:	f7fd fb1c 	bl	8001394 <Update_File>
  	Create_File("FILE4.TXT");
 8003d5c:	4836      	ldr	r0, [pc, #216]	; (8003e38 <main+0x1a0>)
 8003d5e:	f7fd fa8d 	bl	800127c <Create_File>
  	char fileText[50];
  	Read_File("config.txt", &fileText);
 8003d62:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003d66:	4619      	mov	r1, r3
 8003d68:	4834      	ldr	r0, [pc, #208]	; (8003e3c <main+0x1a4>)
 8003d6a:	f7fd f9d5 	bl	8001118 <Read_File>

  	// log state after reset
  	HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	4933      	ldr	r1, [pc, #204]	; (8003e40 <main+0x1a8>)
 8003d72:	4834      	ldr	r0, [pc, #208]	; (8003e44 <main+0x1ac>)
 8003d74:	f007 f8b4 	bl	800aee0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4933      	ldr	r1, [pc, #204]	; (8003e48 <main+0x1b0>)
 8003d7c:	4831      	ldr	r0, [pc, #196]	; (8003e44 <main+0x1ac>)
 8003d7e:	f007 f991 	bl	800b0a4 <HAL_RTC_GetDate>
	char tmpl[50] = {0};
 8003d82:	2300      	movs	r3, #0
 8003d84:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8003d88:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8003d8c:	222e      	movs	r2, #46	; 0x2e
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f00e f99f 	bl	80120d4 <memset>
	sprintf(&tmpl, "%02d:%02d:%02d --- Initialized ---\n", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <main+0x1a8>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <main+0x1a8>)
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <main+0x1a8>)
 8003da4:	789b      	ldrb	r3, [r3, #2]
 8003da6:	f507 701a 	add.w	r0, r7, #616	; 0x268
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	460b      	mov	r3, r1
 8003dae:	4927      	ldr	r1, [pc, #156]	; (8003e4c <main+0x1b4>)
 8003db0:	f00f fabe 	bl	8013330 <siprintf>
	SD_logger(tmpl);
 8003db4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fd f93d 	bl	8001038 <SD_logger>
//  	Unmount_SD("/");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 8003dbe:	f7fe ff91 	bl	8002ce4 <lcdClearBuffer>
  lcdRefresh();
 8003dc2:	f7ff fe67 	bl	8003a94 <lcdRefresh>
  while (1)
  {
	  // functions executed along with the menu
		bmpData = getBmpData(&bmp180module);
 8003dc6:	4c22      	ldr	r4, [pc, #136]	; (8003e50 <main+0x1b8>)
 8003dc8:	463b      	mov	r3, r7
 8003dca:	4914      	ldr	r1, [pc, #80]	; (8003e1c <main+0x184>)
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd ff87 	bl	8001ce0 <getBmpData>
 8003dd2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003dd6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8003de0:	2200      	movs	r2, #0
 8003de2:	4917      	ldr	r1, [pc, #92]	; (8003e40 <main+0x1a8>)
 8003de4:	4817      	ldr	r0, [pc, #92]	; (8003e44 <main+0x1ac>)
 8003de6:	f007 f87b 	bl	800aee0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 8003dea:	2200      	movs	r2, #0
 8003dec:	4916      	ldr	r1, [pc, #88]	; (8003e48 <main+0x1b0>)
 8003dee:	4815      	ldr	r0, [pc, #84]	; (8003e44 <main+0x1ac>)
 8003df0:	f007 f958 	bl	800b0a4 <HAL_RTC_GetDate>
	  lcdClearBuffer();
 8003df4:	f7fe ff76 	bl	8002ce4 <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 8003df8:	f7fe fea4 	bl	8002b44 <showGui>

	  lcdRefresh();
 8003dfc:	f7ff fe4a 	bl	8003a94 <lcdRefresh>
		bmpData = getBmpData(&bmp180module);
 8003e00:	e7e1      	b.n	8003dc6 <main+0x12e>
 8003e02:	bf00      	nop
 8003e04:	20005b68 	.word	0x20005b68
 8003e08:	20005bf8 	.word	0x20005bf8
 8003e0c:	2000002c 	.word	0x2000002c
 8003e10:	20005c40 	.word	0x20005c40
 8003e14:	200057fc 	.word	0x200057fc
 8003e18:	20005ccc 	.word	0x20005ccc
 8003e1c:	200025dc 	.word	0x200025dc
 8003e20:	200057ec 	.word	0x200057ec
 8003e24:	200057d8 	.word	0x200057d8
 8003e28:	40020800 	.word	0x40020800
 8003e2c:	0801b120 	.word	0x0801b120
 8003e30:	0801b124 	.word	0x0801b124
 8003e34:	0801b130 	.word	0x0801b130
 8003e38:	0801b150 	.word	0x0801b150
 8003e3c:	0801b15c 	.word	0x0801b15c
 8003e40:	200057c0 	.word	0x200057c0
 8003e44:	20005a60 	.word	0x20005a60
 8003e48:	200057d4 	.word	0x200057d4
 8003e4c:	0801b168 	.word	0x0801b168
 8003e50:	20002620 	.word	0x20002620

08003e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b094      	sub	sp, #80	; 0x50
 8003e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e5a:	f107 0320 	add.w	r3, r7, #32
 8003e5e:	2230      	movs	r2, #48	; 0x30
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f00e f936 	bl	80120d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e68:	f107 030c 	add.w	r3, r7, #12
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <SystemClock_Config+0xd0>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	4a28      	ldr	r2, [pc, #160]	; (8003f24 <SystemClock_Config+0xd0>)
 8003e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e86:	6413      	str	r3, [r2, #64]	; 0x40
 8003e88:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <SystemClock_Config+0xd0>)
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e94:	2300      	movs	r3, #0
 8003e96:	607b      	str	r3, [r7, #4]
 8003e98:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <SystemClock_Config+0xd4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <SystemClock_Config+0xd4>)
 8003e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <SystemClock_Config+0xd4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003eb0:	2305      	movs	r3, #5
 8003eb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003eb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ec2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ec8:	2304      	movs	r3, #4
 8003eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003ecc:	23a8      	movs	r3, #168	; 0xa8
 8003ece:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ed4:	2307      	movs	r3, #7
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ed8:	f107 0320 	add.w	r3, r7, #32
 8003edc:	4618      	mov	r0, r3
 8003ede:	f006 f897 	bl	800a010 <HAL_RCC_OscConfig>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003ee8:	f000 f8a2 	bl	8004030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eec:	230f      	movs	r3, #15
 8003eee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ef8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003efc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f04:	f107 030c 	add.w	r3, r7, #12
 8003f08:	2105      	movs	r1, #5
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f006 faf8 	bl	800a500 <HAL_RCC_ClockConfig>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003f16:	f000 f88b 	bl	8004030 <Error_Handler>
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	3750      	adds	r7, #80	; 0x50
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40007000 	.word	0x40007000

08003f2c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 1Hz
	if(htim->Instance == TIM10){
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d108      	bne.n	8003f50 <HAL_TIM_PeriodElapsedCallback+0x24>
		if(stwS.state){
 8003f3e:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003f40:	78db      	ldrb	r3, [r3, #3]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_TIM_PeriodElapsedCallback+0x24>
			stwTick();
 8003f4c:	f000 fab2 	bl	80044b4 <stwTick>
		}
	}
	// APB2 168MHz -> after PSCL 100Hz
	if(htim->Instance == TIM11){
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a22      	ldr	r2, [pc, #136]	; (8003fe0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d102      	bne.n	8003f60 <HAL_TIM_PeriodElapsedCallback+0x34>
		scanButtons(btnsPtrs);
 8003f5a:	4822      	ldr	r0, [pc, #136]	; (8003fe4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003f5c:	f7fe f8ac 	bl	80020b8 <scanButtons>
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a20      	ldr	r2, [pc, #128]	; (8003fe8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d131      	bne.n	8003fce <HAL_TIM_PeriodElapsedCallback+0xa2>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003f6c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <HAL_TIM_PeriodElapsedCallback+0x52>
 8003f74:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003f76:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8003f7a:	481c      	ldr	r0, [pc, #112]	; (8003fec <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003f7c:	4798      	blx	r3

		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003f7e:	2101      	movs	r1, #1
 8003f80:	481b      	ldr	r0, [pc, #108]	; (8003ff0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003f82:	f004 ffcc 	bl	8008f1e <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 8003f86:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003f88:	7b1b      	ldrb	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00d      	beq.n	8003faa <HAL_TIM_PeriodElapsedCallback+0x7e>
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003f90:	edd3 7a00 	vldr	s15, [r3]
 8003f94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fa0:	ee17 1a90 	vmov	r1, s15
 8003fa4:	4813      	ldr	r0, [pc, #76]	; (8003ff4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003fa6:	f004 fa9e 	bl	80084e6 <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 8003faa:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	08db      	lsrs	r3, r3, #3
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003fbc:	7c1b      	ldrb	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_TIM_PeriodElapsedCallback+0xa2>
 8003fc2:	f107 030e 	add.w	r3, r7, #14
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	480d      	ldr	r0, [pc, #52]	; (8004000 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003fca:	f004 f9d6 	bl	800837a <cbuf_ovw>

	}
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	20005b5c 	.word	0x20005b5c
 8003fe0:	40014800 	.word	0x40014800
 8003fe4:	2000002c 	.word	0x2000002c
 8003fe8:	40001c00 	.word	0x40001c00
 8003fec:	200057fc 	.word	0x200057fc
 8003ff0:	40020400 	.word	0x40020400
 8003ff4:	200057ec 	.word	0x200057ec
 8003ff8:	20002620 	.word	0x20002620
 8003ffc:	cccccccd 	.word	0xcccccccd
 8004000:	200057d8 	.word	0x200057d8

08004004 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a05      	ldr	r2, [pc, #20]	; (8004028 <HAL_UART_RxCpltCallback+0x24>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d103      	bne.n	800401e <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004016:	2180      	movs	r1, #128	; 0x80
 8004018:	4804      	ldr	r0, [pc, #16]	; (800402c <HAL_UART_RxCpltCallback+0x28>)
 800401a:	f004 ff80 	bl	8008f1e <HAL_GPIO_TogglePin>

	}
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40011400 	.word	0x40011400
 800402c:	40020400 	.word	0x40020400

08004030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004034:	b672      	cpsid	i
}
 8004036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004038:	2201      	movs	r2, #1
 800403a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800403e:	4802      	ldr	r0, [pc, #8]	; (8004048 <Error_Handler+0x18>)
 8004040:	f004 ff54 	bl	8008eec <HAL_GPIO_WritePin>
  while (1)
 8004044:	e7fe      	b.n	8004044 <Error_Handler+0x14>
 8004046:	bf00      	nop
 8004048:	40020400 	.word	0x40020400

0800404c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004060:	2300      	movs	r3, #0
 8004062:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <MX_RTC_Init+0x58>)
 8004066:	4a10      	ldr	r2, [pc, #64]	; (80040a8 <MX_RTC_Init+0x5c>)
 8004068:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800406a:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <MX_RTC_Init+0x58>)
 800406c:	2200      	movs	r2, #0
 800406e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <MX_RTC_Init+0x58>)
 8004072:	227f      	movs	r2, #127	; 0x7f
 8004074:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <MX_RTC_Init+0x58>)
 8004078:	22ff      	movs	r2, #255	; 0xff
 800407a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <MX_RTC_Init+0x58>)
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004082:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <MX_RTC_Init+0x58>)
 8004084:	2200      	movs	r2, #0
 8004086:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <MX_RTC_Init+0x58>)
 800408a:	2200      	movs	r2, #0
 800408c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800408e:	4805      	ldr	r0, [pc, #20]	; (80040a4 <MX_RTC_Init+0x58>)
 8004090:	f006 fe16 	bl	800acc0 <HAL_RTC_Init>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800409a:	f7ff ffc9 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20005a60 	.word	0x20005a60
 80040a8:	40002800 	.word	0x40002800

080040ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08e      	sub	sp, #56	; 0x38
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040b4:	f107 0308 	add.w	r3, r7, #8
 80040b8:	2230      	movs	r2, #48	; 0x30
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f00e f809 	bl	80120d4 <memset>
  if(rtcHandle->Instance==RTC)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a0c      	ldr	r2, [pc, #48]	; (80040f8 <HAL_RTC_MspInit+0x4c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d111      	bne.n	80040f0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80040cc:	2320      	movs	r3, #32
 80040ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80040d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040d4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040d6:	f107 0308 	add.w	r3, r7, #8
 80040da:	4618      	mov	r0, r3
 80040dc:	f006 fc30 	bl	800a940 <HAL_RCCEx_PeriphCLKConfig>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80040e6:	f7ff ffa3 	bl	8004030 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80040ea:	4b04      	ldr	r3, [pc, #16]	; (80040fc <HAL_RTC_MspInit+0x50>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80040f0:	bf00      	nop
 80040f2:	3738      	adds	r7, #56	; 0x38
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40002800 	.word	0x40002800
 80040fc:	42470e3c 	.word	0x42470e3c

08004100 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 8004106:	4a0d      	ldr	r2, [pc, #52]	; (800413c <MX_SDIO_SD_Init+0x3c>)
 8004108:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 800410c:	2200      	movs	r2, #0
 800410e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004116:	4b08      	ldr	r3, [pc, #32]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 8004118:	2200      	movs	r2, #0
 800411a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 800411e:	2200      	movs	r2, #0
 8004120:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004122:	4b05      	ldr	r3, [pc, #20]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 8004124:	2200      	movs	r2, #0
 8004126:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <MX_SDIO_SD_Init+0x38>)
 800412a:	2204      	movs	r2, #4
 800412c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800412e:	bf00      	nop
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	20005a80 	.word	0x20005a80
 800413c:	40012c00 	.word	0x40012c00

08004140 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a28      	ldr	r2, [pc, #160]	; (8004200 <HAL_SD_MspInit+0xc0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d14a      	bne.n	80041f8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	4b27      	ldr	r3, [pc, #156]	; (8004204 <HAL_SD_MspInit+0xc4>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	4a26      	ldr	r2, [pc, #152]	; (8004204 <HAL_SD_MspInit+0xc4>)
 800416c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004170:	6453      	str	r3, [r2, #68]	; 0x44
 8004172:	4b24      	ldr	r3, [pc, #144]	; (8004204 <HAL_SD_MspInit+0xc4>)
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_SD_MspInit+0xc4>)
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <HAL_SD_MspInit+0xc4>)
 8004188:	f043 0304 	orr.w	r3, r3, #4
 800418c:	6313      	str	r3, [r2, #48]	; 0x30
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <HAL_SD_MspInit+0xc4>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_SD_MspInit+0xc4>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	4a18      	ldr	r2, [pc, #96]	; (8004204 <HAL_SD_MspInit+0xc4>)
 80041a4:	f043 0308 	orr.w	r3, r3, #8
 80041a8:	6313      	str	r3, [r2, #48]	; 0x30
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <HAL_SD_MspInit+0xc4>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80041b6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80041ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041bc:	2302      	movs	r3, #2
 80041be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c4:	2303      	movs	r3, #3
 80041c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80041c8:	230c      	movs	r3, #12
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	4619      	mov	r1, r3
 80041d2:	480d      	ldr	r0, [pc, #52]	; (8004208 <HAL_SD_MspInit+0xc8>)
 80041d4:	f004 fcc6 	bl	8008b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041d8:	2304      	movs	r3, #4
 80041da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041dc:	2302      	movs	r3, #2
 80041de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e4:	2303      	movs	r3, #3
 80041e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80041e8:	230c      	movs	r3, #12
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	4619      	mov	r1, r3
 80041f2:	4806      	ldr	r0, [pc, #24]	; (800420c <HAL_SD_MspInit+0xcc>)
 80041f4:	f004 fcb6 	bl	8008b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80041f8:	bf00      	nop
 80041fa:	3728      	adds	r7, #40	; 0x28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40023800 	.word	0x40023800
 8004208:	40020800 	.word	0x40020800
 800420c:	40020c00 	.word	0x40020c00

08004210 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <MX_SPI1_Init+0x64>)
 8004216:	4a18      	ldr	r2, [pc, #96]	; (8004278 <MX_SPI1_Init+0x68>)
 8004218:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800421a:	4b16      	ldr	r3, [pc, #88]	; (8004274 <MX_SPI1_Init+0x64>)
 800421c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004220:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <MX_SPI1_Init+0x64>)
 8004224:	2200      	movs	r2, #0
 8004226:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004228:	4b12      	ldr	r3, [pc, #72]	; (8004274 <MX_SPI1_Init+0x64>)
 800422a:	2200      	movs	r2, #0
 800422c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800422e:	4b11      	ldr	r3, [pc, #68]	; (8004274 <MX_SPI1_Init+0x64>)
 8004230:	2200      	movs	r2, #0
 8004232:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <MX_SPI1_Init+0x64>)
 8004236:	2200      	movs	r2, #0
 8004238:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800423a:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <MX_SPI1_Init+0x64>)
 800423c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004240:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <MX_SPI1_Init+0x64>)
 8004244:	2220      	movs	r2, #32
 8004246:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <MX_SPI1_Init+0x64>)
 800424a:	2200      	movs	r2, #0
 800424c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <MX_SPI1_Init+0x64>)
 8004250:	2200      	movs	r2, #0
 8004252:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <MX_SPI1_Init+0x64>)
 8004256:	2200      	movs	r2, #0
 8004258:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <MX_SPI1_Init+0x64>)
 800425c:	220a      	movs	r2, #10
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004260:	4804      	ldr	r0, [pc, #16]	; (8004274 <MX_SPI1_Init+0x64>)
 8004262:	f007 ffb3 	bl	800c1cc <HAL_SPI_Init>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800426c:	f7ff fee0 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20005b04 	.word	0x20005b04
 8004278:	40013000 	.word	0x40013000

0800427c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <HAL_SPI_MspInit+0x84>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d12b      	bne.n	80042f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	4b18      	ldr	r3, [pc, #96]	; (8004304 <HAL_SPI_MspInit+0x88>)
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	4a17      	ldr	r2, [pc, #92]	; (8004304 <HAL_SPI_MspInit+0x88>)
 80042a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042ac:	6453      	str	r3, [r2, #68]	; 0x44
 80042ae:	4b15      	ldr	r3, [pc, #84]	; (8004304 <HAL_SPI_MspInit+0x88>)
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	4b11      	ldr	r3, [pc, #68]	; (8004304 <HAL_SPI_MspInit+0x88>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	4a10      	ldr	r2, [pc, #64]	; (8004304 <HAL_SPI_MspInit+0x88>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ca:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <HAL_SPI_MspInit+0x88>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80042d6:	23a0      	movs	r3, #160	; 0xa0
 80042d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042da:	2302      	movs	r3, #2
 80042dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042e2:	2303      	movs	r3, #3
 80042e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042e6:	2305      	movs	r3, #5
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ea:	f107 0314 	add.w	r3, r7, #20
 80042ee:	4619      	mov	r1, r3
 80042f0:	4805      	ldr	r0, [pc, #20]	; (8004308 <HAL_SPI_MspInit+0x8c>)
 80042f2:	f004 fc37 	bl	8008b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80042f6:	bf00      	nop
 80042f8:	3728      	adds	r7, #40	; 0x28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40013000 	.word	0x40013000
 8004304:	40023800 	.word	0x40023800
 8004308:	40020000 	.word	0x40020000

0800430c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_MspInit+0x4c>)
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	4a0f      	ldr	r2, [pc, #60]	; (8004358 <HAL_MspInit+0x4c>)
 800431c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004320:	6453      	str	r3, [r2, #68]	; 0x44
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <HAL_MspInit+0x4c>)
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432a:	607b      	str	r3, [r7, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	2300      	movs	r3, #0
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <HAL_MspInit+0x4c>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	4a08      	ldr	r2, [pc, #32]	; (8004358 <HAL_MspInit+0x4c>)
 8004338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433c:	6413      	str	r3, [r2, #64]	; 0x40
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <HAL_MspInit+0x4c>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800

0800435c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004360:	e7fe      	b.n	8004360 <NMI_Handler+0x4>

08004362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 8004366:	f7ff fe63 	bl	8004030 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800436a:	e7fe      	b.n	800436a <HardFault_Handler+0x8>

0800436c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004370:	e7fe      	b.n	8004370 <MemManage_Handler+0x4>

08004372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004376:	e7fe      	b.n	8004376 <BusFault_Handler+0x4>

08004378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800437c:	e7fe      	b.n	800437c <UsageFault_Handler+0x4>

0800437e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800439a:	b480      	push	{r7}
 800439c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043ac:	f004 f9fe 	bl	80087ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043b0:	bf00      	nop
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043b8:	4803      	ldr	r0, [pc, #12]	; (80043c8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80043ba:	f008 fba7 	bl	800cb0c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80043be:	4803      	ldr	r0, [pc, #12]	; (80043cc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80043c0:	f008 fba4 	bl	800cb0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80043c4:	bf00      	nop
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20005b68 	.word	0x20005b68
 80043cc:	20005bb0 	.word	0x20005bb0

080043d0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043d4:	4803      	ldr	r0, [pc, #12]	; (80043e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80043d6:	f008 fb99 	bl	800cb0c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80043da:	4803      	ldr	r0, [pc, #12]	; (80043e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80043dc:	f008 fb96 	bl	800cb0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80043e0:	bf00      	nop
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20005b68 	.word	0x20005b68
 80043e8:	20005bf8 	.word	0x20005bf8

080043ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 80043f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80043f4:	f004 fdae 	bl	8008f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 80043f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80043fc:	f004 fdaa 	bl	8008f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004400:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004404:	f004 fda6 	bl	8008f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 8004408:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800440c:	f004 fda2 	bl	8008f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8004410:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004414:	f004 fd9e 	bl	8008f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8004418:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800441c:	f004 fd9a 	bl	8008f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}

08004424 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004428:	4802      	ldr	r0, [pc, #8]	; (8004434 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800442a:	f008 fb6f 	bl	800cb0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20005c40 	.word	0x20005c40

08004438 <clearTable>:

stw_struct stwS = {0, 0};

stwTable stwT = {{0}, 0, &clearTable, &addItem};

void clearTable(void){
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
	memset(stwT.stwArray, 0, sizeof stwT.stwArray);
 800443c:	2228      	movs	r2, #40	; 0x28
 800443e:	2100      	movs	r1, #0
 8004440:	4804      	ldr	r0, [pc, #16]	; (8004454 <clearTable+0x1c>)
 8004442:	f00d fe47 	bl	80120d4 <memset>
	stwT.position = 0;
 8004446:	4b03      	ldr	r3, [pc, #12]	; (8004454 <clearTable+0x1c>)
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	2000017c 	.word	0x2000017c

08004458 <addItem>:
void addItem(stw_struct stwS){
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	stwT.stwArray[stwT.position] = stwS.cnt;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <addItem+0x38>)
 8004468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800446c:	461a      	mov	r2, r3
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <addItem+0x38>)
 8004470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	stwT.position++;
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <addItem+0x38>)
 8004476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800447a:	3301      	adds	r3, #1
 800447c:	b2da      	uxtb	r2, r3
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <addItem+0x38>)
 8004480:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	2000017c 	.word	0x2000017c

08004494 <stwStart>:

void stwStart(void){
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim10);
 8004498:	4804      	ldr	r0, [pc, #16]	; (80044ac <stwStart+0x18>)
 800449a:	f008 f977 	bl	800c78c <HAL_TIM_Base_Start_IT>

	stwS.state = STW_STATE_ENABLED;
 800449e:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <stwStart+0x1c>)
 80044a0:	78d3      	ldrb	r3, [r2, #3]
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	70d3      	strb	r3, [r2, #3]
}
 80044a8:	bf00      	nop
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20005bb0 	.word	0x20005bb0
 80044b0:	20005b5c 	.word	0x20005b5c

080044b4 <stwTick>:
void stwTick(void){
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
	stwS.cnt++;
 80044b8:	4b08      	ldr	r3, [pc, #32]	; (80044dc <stwTick+0x28>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044c6:	4905      	ldr	r1, [pc, #20]	; (80044dc <stwTick+0x28>)
 80044c8:	680b      	ldr	r3, [r1, #0]
 80044ca:	f362 0317 	bfi	r3, r2, #0, #24
 80044ce:	600b      	str	r3, [r1, #0]
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20005b5c 	.word	0x20005b5c

080044e0 <stwStop>:
void stwStop(void){
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 80044e4:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <stwStop+0x18>)
 80044e6:	78d3      	ldrb	r3, [r2, #3]
 80044e8:	f36f 0300 	bfc	r3, #0, #1
 80044ec:	70d3      	strb	r3, [r2, #3]
	  HAL_TIM_Base_Stop_IT(&htim10);
 80044ee:	4803      	ldr	r0, [pc, #12]	; (80044fc <stwStop+0x1c>)
 80044f0:	f008 f9bc 	bl	800c86c <HAL_TIM_Base_Stop_IT>

}
 80044f4:	bf00      	nop
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20005b5c 	.word	0x20005b5c
 80044fc:	20005bb0 	.word	0x20005bb0

08004500 <stwClear>:
void stwClear(void){
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <stwClear+0x20>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2200      	movs	r2, #0
 800450a:	625a      	str	r2, [r3, #36]	; 0x24
	stwS.cnt = 0;
 800450c:	4a05      	ldr	r2, [pc, #20]	; (8004524 <stwClear+0x24>)
 800450e:	6813      	ldr	r3, [r2, #0]
 8004510:	f36f 0317 	bfc	r3, #0, #24
 8004514:	6013      	str	r3, [r2, #0]
}
 8004516:	bf00      	nop
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	20005bb0 	.word	0x20005bb0
 8004524:	20005b5c 	.word	0x20005b5c

08004528 <stwSave>:
void stwSave(void){
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
	// timesnapshot
	stwT.add(stwS.cnt);
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <stwSave+0x18>)
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	4a04      	ldr	r2, [pc, #16]	; (8004544 <stwSave+0x1c>)
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8004538:	4610      	mov	r0, r2
 800453a:	4798      	blx	r3
}
 800453c:	bf00      	nop
 800453e:	bd80      	pop	{r7, pc}
 8004540:	2000017c 	.word	0x2000017c
 8004544:	20005b5c 	.word	0x20005b5c

08004548 <getStw>:

uint16_t getStw(void){
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
	return (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <getStw+0x20>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	b29b      	uxth	r3, r3
 8004554:	4a05      	ldr	r2, [pc, #20]	; (800456c <getStw+0x24>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	b29b      	uxth	r3, r3
}
 800455e:	4618      	mov	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	20005bb0 	.word	0x20005bb0
 800456c:	51eb851f 	.word	0x51eb851f

08004570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
	return 1;
 8004574:	2301      	movs	r3, #1
}
 8004576:	4618      	mov	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <_kill>:

int _kill(int pid, int sig)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800458a:	f00d fd49 	bl	8012020 <__errno>
 800458e:	4603      	mov	r3, r0
 8004590:	2216      	movs	r2, #22
 8004592:	601a      	str	r2, [r3, #0]
	return -1;
 8004594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <_exit>:

void _exit (int status)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80045a8:	f04f 31ff 	mov.w	r1, #4294967295
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ffe7 	bl	8004580 <_kill>
	while (1) {}		/* Make sure we hang here */
 80045b2:	e7fe      	b.n	80045b2 <_exit+0x12>

080045b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e00a      	b.n	80045dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80045c6:	f3af 8000 	nop.w
 80045ca:	4601      	mov	r1, r0
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	60ba      	str	r2, [r7, #8]
 80045d2:	b2ca      	uxtb	r2, r1
 80045d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3301      	adds	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	dbf0      	blt.n	80045c6 <_read+0x12>
	}

return len;
 80045e4:	687b      	ldr	r3, [r7, #4]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e009      	b.n	8004614 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	60ba      	str	r2, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fb37 	bl	8003c7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	3301      	adds	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	dbf1      	blt.n	8004600 <_write+0x12>
	}
	return len;
 800461c:	687b      	ldr	r3, [r7, #4]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <_close>:

int _close(int file)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
	return -1;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800464e:	605a      	str	r2, [r3, #4]
	return 0;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <_isatty>:

int _isatty(int file)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
	return 1;
 8004666:	2301      	movs	r3, #1
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
	return 0;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004698:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <_sbrk+0x50>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <_sbrk+0x16>
		heap_end = &end;
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <_sbrk+0x50>)
 80046a2:	4a10      	ldr	r2, [pc, #64]	; (80046e4 <_sbrk+0x54>)
 80046a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80046a6:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <_sbrk+0x50>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <_sbrk+0x50>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4413      	add	r3, r2
 80046b4:	466a      	mov	r2, sp
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d907      	bls.n	80046ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80046ba:	f00d fcb1 	bl	8012020 <__errno>
 80046be:	4603      	mov	r3, r0
 80046c0:	220c      	movs	r2, #12
 80046c2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	e006      	b.n	80046d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <_sbrk+0x50>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	4a03      	ldr	r2, [pc, #12]	; (80046e0 <_sbrk+0x50>)
 80046d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80046d6:	68fb      	ldr	r3, [r7, #12]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20005b64 	.word	0x20005b64
 80046e4:	20005dd0 	.word	0x20005dd0

080046e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <SystemInit+0x20>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	4a05      	ldr	r2, [pc, #20]	; (8004708 <SystemInit+0x20>)
 80046f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046fc:	bf00      	nop
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b096      	sub	sp, #88	; 0x58
 8004710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004712:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	609a      	str	r2, [r3, #8]
 800471e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004720:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800472a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	609a      	str	r2, [r3, #8]
 8004736:	60da      	str	r2, [r3, #12]
 8004738:	611a      	str	r2, [r3, #16]
 800473a:	615a      	str	r2, [r3, #20]
 800473c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	2220      	movs	r2, #32
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f00d fcc5 	bl	80120d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800474a:	4b3f      	ldr	r3, [pc, #252]	; (8004848 <MX_TIM1_Init+0x13c>)
 800474c:	4a3f      	ldr	r2, [pc, #252]	; (800484c <MX_TIM1_Init+0x140>)
 800474e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8004750:	4b3d      	ldr	r3, [pc, #244]	; (8004848 <MX_TIM1_Init+0x13c>)
 8004752:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004758:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <MX_TIM1_Init+0x13c>)
 800475a:	2200      	movs	r2, #0
 800475c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 800475e:	4b3a      	ldr	r3, [pc, #232]	; (8004848 <MX_TIM1_Init+0x13c>)
 8004760:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004766:	4b38      	ldr	r3, [pc, #224]	; (8004848 <MX_TIM1_Init+0x13c>)
 8004768:	2200      	movs	r2, #0
 800476a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800476c:	4b36      	ldr	r3, [pc, #216]	; (8004848 <MX_TIM1_Init+0x13c>)
 800476e:	2200      	movs	r2, #0
 8004770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004772:	4b35      	ldr	r3, [pc, #212]	; (8004848 <MX_TIM1_Init+0x13c>)
 8004774:	2280      	movs	r2, #128	; 0x80
 8004776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004778:	4833      	ldr	r0, [pc, #204]	; (8004848 <MX_TIM1_Init+0x13c>)
 800477a:	f007 ffb7 	bl	800c6ec <HAL_TIM_Base_Init>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004784:	f7ff fc54 	bl	8004030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800478c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800478e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004792:	4619      	mov	r1, r3
 8004794:	482c      	ldr	r0, [pc, #176]	; (8004848 <MX_TIM1_Init+0x13c>)
 8004796:	f008 fb83 	bl	800cea0 <HAL_TIM_ConfigClockSource>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80047a0:	f7ff fc46 	bl	8004030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80047a4:	4828      	ldr	r0, [pc, #160]	; (8004848 <MX_TIM1_Init+0x13c>)
 80047a6:	f008 f890 	bl	800c8ca <HAL_TIM_PWM_Init>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80047b0:	f7ff fc3e 	bl	8004030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047b4:	2300      	movs	r3, #0
 80047b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047c0:	4619      	mov	r1, r3
 80047c2:	4821      	ldr	r0, [pc, #132]	; (8004848 <MX_TIM1_Init+0x13c>)
 80047c4:	f008 ff6c 	bl	800d6a0 <HAL_TIMEx_MasterConfigSynchronization>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80047ce:	f7ff fc2f 	bl	8004030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047d2:	2360      	movs	r3, #96	; 0x60
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 80047d6:	2302      	movs	r3, #2
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047da:	2300      	movs	r3, #0
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80047de:	2300      	movs	r3, #0
 80047e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80047e6:	2300      	movs	r3, #0
 80047e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f2:	2200      	movs	r2, #0
 80047f4:	4619      	mov	r1, r3
 80047f6:	4814      	ldr	r0, [pc, #80]	; (8004848 <MX_TIM1_Init+0x13c>)
 80047f8:	f008 fa90 	bl	800cd1c <HAL_TIM_PWM_ConfigChannel>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004802:	f7ff fc15 	bl	8004030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004806:	2300      	movs	r3, #0
 8004808:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800481a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800481e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004820:	2300      	movs	r3, #0
 8004822:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4807      	ldr	r0, [pc, #28]	; (8004848 <MX_TIM1_Init+0x13c>)
 800482a:	f008 ffb5 	bl	800d798 <HAL_TIMEx_ConfigBreakDeadTime>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004834:	f7ff fbfc 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004838:	4803      	ldr	r0, [pc, #12]	; (8004848 <MX_TIM1_Init+0x13c>)
 800483a:	f000 f8ff 	bl	8004a3c <HAL_TIM_MspPostInit>

}
 800483e:	bf00      	nop
 8004840:	3758      	adds	r7, #88	; 0x58
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20005b68 	.word	0x20005b68
 800484c:	40010000 	.word	0x40010000

08004850 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004854:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <MX_TIM10_Init+0x40>)
 8004856:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <MX_TIM10_Init+0x44>)
 8004858:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <MX_TIM10_Init+0x40>)
 800485c:	f244 129f 	movw	r2, #16799	; 0x419f
 8004860:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004862:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <MX_TIM10_Init+0x40>)
 8004864:	2200      	movs	r2, #0
 8004866:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <MX_TIM10_Init+0x40>)
 800486a:	f242 720f 	movw	r2, #9999	; 0x270f
 800486e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004870:	4b07      	ldr	r3, [pc, #28]	; (8004890 <MX_TIM10_Init+0x40>)
 8004872:	2200      	movs	r2, #0
 8004874:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <MX_TIM10_Init+0x40>)
 8004878:	2280      	movs	r2, #128	; 0x80
 800487a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800487c:	4804      	ldr	r0, [pc, #16]	; (8004890 <MX_TIM10_Init+0x40>)
 800487e:	f007 ff35 	bl	800c6ec <HAL_TIM_Base_Init>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004888:	f7ff fbd2 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800488c:	bf00      	nop
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20005bb0 	.word	0x20005bb0
 8004894:	40014400 	.word	0x40014400

08004898 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <MX_TIM11_Init+0x40>)
 800489e:	4a0f      	ldr	r2, [pc, #60]	; (80048dc <MX_TIM11_Init+0x44>)
 80048a0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <MX_TIM11_Init+0x40>)
 80048a4:	f244 129f 	movw	r2, #16799	; 0x419f
 80048a8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048aa:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <MX_TIM11_Init+0x40>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <MX_TIM11_Init+0x40>)
 80048b2:	2263      	movs	r2, #99	; 0x63
 80048b4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048b6:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <MX_TIM11_Init+0x40>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <MX_TIM11_Init+0x40>)
 80048be:	2280      	movs	r2, #128	; 0x80
 80048c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80048c2:	4805      	ldr	r0, [pc, #20]	; (80048d8 <MX_TIM11_Init+0x40>)
 80048c4:	f007 ff12 	bl	800c6ec <HAL_TIM_Base_Init>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80048ce:	f7ff fbaf 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80048d2:	bf00      	nop
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20005bf8 	.word	0x20005bf8
 80048dc:	40014800 	.word	0x40014800

080048e0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80048e4:	4b0e      	ldr	r3, [pc, #56]	; (8004920 <MX_TIM13_Init+0x40>)
 80048e6:	4a0f      	ldr	r2, [pc, #60]	; (8004924 <MX_TIM13_Init+0x44>)
 80048e8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <MX_TIM13_Init+0x40>)
 80048ec:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80048f0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f2:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <MX_TIM13_Init+0x40>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <MX_TIM13_Init+0x40>)
 80048fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80048fe:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <MX_TIM13_Init+0x40>)
 8004902:	2200      	movs	r2, #0
 8004904:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <MX_TIM13_Init+0x40>)
 8004908:	2280      	movs	r2, #128	; 0x80
 800490a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800490c:	4804      	ldr	r0, [pc, #16]	; (8004920 <MX_TIM13_Init+0x40>)
 800490e:	f007 feed 	bl	800c6ec <HAL_TIM_Base_Init>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004918:	f7ff fb8a 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800491c:	bf00      	nop
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20005c40 	.word	0x20005c40
 8004924:	40001c00 	.word	0x40001c00

08004928 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a3c      	ldr	r2, [pc, #240]	; (8004a28 <HAL_TIM_Base_MspInit+0x100>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d11e      	bne.n	8004978 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	4b3b      	ldr	r3, [pc, #236]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	4a3a      	ldr	r2, [pc, #232]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6453      	str	r3, [r2, #68]	; 0x44
 800494a:	4b38      	ldr	r3, [pc, #224]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004956:	2200      	movs	r2, #0
 8004958:	2100      	movs	r1, #0
 800495a:	2019      	movs	r0, #25
 800495c:	f004 f845 	bl	80089ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004960:	2019      	movs	r0, #25
 8004962:	f004 f85e 	bl	8008a22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004966:	2200      	movs	r2, #0
 8004968:	2100      	movs	r1, #0
 800496a:	201a      	movs	r0, #26
 800496c:	f004 f83d 	bl	80089ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004970:	201a      	movs	r0, #26
 8004972:	f004 f856 	bl	8008a22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004976:	e052      	b.n	8004a1e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM10)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a2c      	ldr	r2, [pc, #176]	; (8004a30 <HAL_TIM_Base_MspInit+0x108>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d116      	bne.n	80049b0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	4a28      	ldr	r2, [pc, #160]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 800498c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004990:	6453      	str	r3, [r2, #68]	; 0x44
 8004992:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800499e:	2200      	movs	r2, #0
 80049a0:	2100      	movs	r1, #0
 80049a2:	2019      	movs	r0, #25
 80049a4:	f004 f821 	bl	80089ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80049a8:	2019      	movs	r0, #25
 80049aa:	f004 f83a 	bl	8008a22 <HAL_NVIC_EnableIRQ>
}
 80049ae:	e036      	b.n	8004a1e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM11)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <HAL_TIM_Base_MspInit+0x10c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d116      	bne.n	80049e8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4a1a      	ldr	r2, [pc, #104]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 80049c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ca:	4b18      	ldr	r3, [pc, #96]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80049d6:	2200      	movs	r2, #0
 80049d8:	2100      	movs	r1, #0
 80049da:	201a      	movs	r0, #26
 80049dc:	f004 f805 	bl	80089ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80049e0:	201a      	movs	r0, #26
 80049e2:	f004 f81e 	bl	8008a22 <HAL_NVIC_EnableIRQ>
}
 80049e6:	e01a      	b.n	8004a1e <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM13)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a12      	ldr	r2, [pc, #72]	; (8004a38 <HAL_TIM_Base_MspInit+0x110>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d115      	bne.n	8004a1e <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	4a0c      	ldr	r2, [pc, #48]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 80049fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a00:	6413      	str	r3, [r2, #64]	; 0x40
 8004a02:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <HAL_TIM_Base_MspInit+0x104>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2100      	movs	r1, #0
 8004a12:	202c      	movs	r0, #44	; 0x2c
 8004a14:	f003 ffe9 	bl	80089ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004a18:	202c      	movs	r0, #44	; 0x2c
 8004a1a:	f004 f802 	bl	8008a22 <HAL_NVIC_EnableIRQ>
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40014400 	.word	0x40014400
 8004a34:	40014800 	.word	0x40014800
 8004a38:	40001c00 	.word	0x40001c00

08004a3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a44:	f107 030c 	add.w	r3, r7, #12
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a12      	ldr	r2, [pc, #72]	; (8004aa4 <HAL_TIM_MspPostInit+0x68>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d11e      	bne.n	8004a9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	4b11      	ldr	r3, [pc, #68]	; (8004aa8 <HAL_TIM_MspPostInit+0x6c>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4a10      	ldr	r2, [pc, #64]	; (8004aa8 <HAL_TIM_MspPostInit+0x6c>)
 8004a68:	f043 0310 	orr.w	r3, r3, #16
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <HAL_TIM_MspPostInit+0x6c>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a90:	f107 030c 	add.w	r3, r7, #12
 8004a94:	4619      	mov	r1, r3
 8004a96:	4805      	ldr	r0, [pc, #20]	; (8004aac <HAL_TIM_MspPostInit+0x70>)
 8004a98:	f004 f864 	bl	8008b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004a9c:	bf00      	nop
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40021000 	.word	0x40021000

08004ab0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004ab4:	4b11      	ldr	r3, [pc, #68]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004ab6:	4a12      	ldr	r2, [pc, #72]	; (8004b00 <MX_USART3_UART_Init+0x50>)
 8004ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004aba:	4b10      	ldr	r3, [pc, #64]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004ace:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ad4:	4b09      	ldr	r3, [pc, #36]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004ad6:	220c      	movs	r2, #12
 8004ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ada:	4b08      	ldr	r3, [pc, #32]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004ae6:	4805      	ldr	r0, [pc, #20]	; (8004afc <MX_USART3_UART_Init+0x4c>)
 8004ae8:	f008 febc 	bl	800d864 <HAL_UART_Init>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004af2:	f7ff fa9d 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20005c88 	.word	0x20005c88
 8004b00:	40004800 	.word	0x40004800

08004b04 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004b08:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b0a:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <MX_USART6_UART_Init+0x50>)
 8004b0c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b14:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004b16:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b2a:	220c      	movs	r2, #12
 8004b2c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b34:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004b3a:	4805      	ldr	r0, [pc, #20]	; (8004b50 <MX_USART6_UART_Init+0x4c>)
 8004b3c:	f008 fe92 	bl	800d864 <HAL_UART_Init>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004b46:	f7ff fa73 	bl	8004030 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20005ccc 	.word	0x20005ccc
 8004b54:	40011400 	.word	0x40011400

08004b58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	; 0x30
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b60:	f107 031c 	add.w	r3, r7, #28
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a32      	ldr	r2, [pc, #200]	; (8004c40 <HAL_UART_MspInit+0xe8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d12d      	bne.n	8004bd6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	4a30      	ldr	r2, [pc, #192]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b88:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8a:	4b2e      	ldr	r3, [pc, #184]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	4b2a      	ldr	r3, [pc, #168]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004ba0:	f043 0308 	orr.w	r3, r3, #8
 8004ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004bc4:	2307      	movs	r3, #7
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bc8:	f107 031c 	add.w	r3, r7, #28
 8004bcc:	4619      	mov	r1, r3
 8004bce:	481e      	ldr	r0, [pc, #120]	; (8004c48 <HAL_UART_MspInit+0xf0>)
 8004bd0:	f003 ffc8 	bl	8008b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004bd4:	e030      	b.n	8004c38 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <HAL_UART_MspInit+0xf4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d12b      	bne.n	8004c38 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004be0:	2300      	movs	r3, #0
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be8:	4a16      	ldr	r2, [pc, #88]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004bea:	f043 0320 	orr.w	r3, r3, #32
 8004bee:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf0:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	4a0f      	ldr	r2, [pc, #60]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004c06:	f043 0304 	orr.w	r3, r3, #4
 8004c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <HAL_UART_MspInit+0xec>)
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c18:	23c0      	movs	r3, #192	; 0xc0
 8004c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c24:	2303      	movs	r3, #3
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004c28:	2308      	movs	r3, #8
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c2c:	f107 031c 	add.w	r3, r7, #28
 8004c30:	4619      	mov	r1, r3
 8004c32:	4807      	ldr	r0, [pc, #28]	; (8004c50 <HAL_UART_MspInit+0xf8>)
 8004c34:	f003 ff96 	bl	8008b64 <HAL_GPIO_Init>
}
 8004c38:	bf00      	nop
 8004c3a:	3730      	adds	r7, #48	; 0x30
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40004800 	.word	0x40004800
 8004c44:	40023800 	.word	0x40023800
 8004c48:	40020c00 	.word	0x40020c00
 8004c4c:	40011400 	.word	0x40011400
 8004c50:	40020800 	.word	0x40020800

08004c54 <setDefaultClbcks>:


// fixed alt = 0/fixed baro = 1 mode
uint8_t baroMode = BARO_MODE_FIXED_ALTITUDE;

static void setDefaultClbcks(void){
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <setDefaultClbcks+0x34>)
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <setDefaultClbcks+0x38>)
 8004c5c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8004c5e:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <setDefaultClbcks+0x3c>)
 8004c60:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <setDefaultClbcks+0x40>)
 8004c62:	611a      	str	r2, [r3, #16]
	btn_BB.onSingleLongPressHandler = &changeBaroMode;
 8004c64:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <setDefaultClbcks+0x44>)
 8004c66:	4a0d      	ldr	r2, [pc, #52]	; (8004c9c <setDefaultClbcks+0x48>)
 8004c68:	615a      	str	r2, [r3, #20]
	btn_B3.onContinuousShortPressHandler = &addBaro;
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <setDefaultClbcks+0x4c>)
 8004c6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ca4 <setDefaultClbcks+0x50>)
 8004c6e:	619a      	str	r2, [r3, #24]
	btn_B1.onContinuousShortPressHandler = &remBaro;
 8004c70:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <setDefaultClbcks+0x54>)
 8004c72:	4a0e      	ldr	r2, [pc, #56]	; (8004cac <setDefaultClbcks+0x58>)
 8004c74:	619a      	str	r2, [r3, #24]
	btn_B2.onSinglePressHandler = NULL;
 8004c76:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <setDefaultClbcks+0x5c>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	611a      	str	r2, [r3, #16]
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20002630 	.word	0x20002630
 8004c8c:	08002a69 	.word	0x08002a69
 8004c90:	20002678 	.word	0x20002678
 8004c94:	08002a79 	.word	0x08002a79
 8004c98:	20002654 	.word	0x20002654
 8004c9c:	08005195 	.word	0x08005195
 8004ca0:	200026e4 	.word	0x200026e4
 8004ca4:	080051d9 	.word	0x080051d9
 8004ca8:	2000269c 	.word	0x2000269c
 8004cac:	08005225 	.word	0x08005225
 8004cb0:	200026c0 	.word	0x200026c0

08004cb4 <baroSetup>:

// function executed once on module load
void baroSetup(void){
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8004cb8:	f7ff ffcc 	bl	8004c54 <setDefaultClbcks>
}
 8004cbc:	bf00      	nop
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <baroMain>:
uint16_t maxX = 347;
uint8_t maxHeight = 225;
uint8_t minHeight = 110;

// main function
void baroMain(void){
 8004cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc4:	b0b2      	sub	sp, #200	; 0xc8
 8004cc6:	af04      	add	r7, sp, #16
	uint16_t minBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8004cc8:	2100      	movs	r1, #0
 8004cca:	488b      	ldr	r0, [pc, #556]	; (8004ef8 <baroMain+0x238>)
 8004ccc:	f003 fbb3 	bl	8008436 <cbuf_readn>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	uint16_t maxBaro = (*(uint16_t*)(cbuf_readn(&baroRing, 0)));
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4887      	ldr	r0, [pc, #540]	; (8004ef8 <baroMain+0x238>)
 8004cdc:	f003 fbab 	bl	8008436 <cbuf_readn>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	uint16_t minTemp = read_nth_ring_buffer(&tempRing, 0);
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4884      	ldr	r0, [pc, #528]	; (8004efc <baroMain+0x23c>)
 8004cec:	f003 fc49 	bl	8008582 <read_nth_ring_buffer>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	uint16_t maxTemp = read_nth_ring_buffer(&tempRing, 0);
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4880      	ldr	r0, [pc, #512]	; (8004efc <baroMain+0x23c>)
 8004cfa:	f003 fc42 	bl	8008582 <read_nth_ring_buffer>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	char str1[50] = {0};
 8004d04:	2300      	movs	r3, #0
 8004d06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d08:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004d0c:	222e      	movs	r2, #46	; 0x2e
 8004d0e:	2100      	movs	r1, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f00d f9df 	bl	80120d4 <memset>
	char str3[50] = {0};
 8004d16:	2300      	movs	r3, #0
 8004d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d1e:	222e      	movs	r2, #46	; 0x2e
 8004d20:	2100      	movs	r1, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f00d f9d6 	bl	80120d4 <memset>
	char str4[50] = {0};
 8004d28:	2300      	movs	r3, #0
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	f107 0308 	add.w	r3, r7, #8
 8004d30:	222e      	movs	r2, #46	; 0x2e
 8004d32:	2100      	movs	r1, #0
 8004d34:	4618      	mov	r0, r3
 8004d36:	f00d f9cd 	bl	80120d4 <memset>
	sprintf(&str1, "Temperature: %4.1f`C", bmpData.temperature);
 8004d3a:	4b71      	ldr	r3, [pc, #452]	; (8004f00 <baroMain+0x240>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fb fc22 	bl	8000588 <__aeabi_f2d>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8004d4c:	496d      	ldr	r1, [pc, #436]	; (8004f04 <baroMain+0x244>)
 8004d4e:	f00e faef 	bl	8013330 <siprintf>
	lcdPutStr(10, 14, str1, font_12_zekton);
 8004d52:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004d56:	4b6c      	ldr	r3, [pc, #432]	; (8004f08 <baroMain+0x248>)
 8004d58:	210e      	movs	r1, #14
 8004d5a:	200a      	movs	r0, #10
 8004d5c:	f7fe f8d2 	bl	8002f04 <lcdPutStr>
	sprintf(&str1, "Ambient pressure: %04.1fhPa", (float)bmpData.pressure/100);
 8004d60:	4b67      	ldr	r3, [pc, #412]	; (8004f00 <baroMain+0x240>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004f0c <baroMain+0x24c>
 8004d70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d74:	ee16 0a90 	vmov	r0, s13
 8004d78:	f7fb fc06 	bl	8000588 <__aeabi_f2d>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8004d84:	4962      	ldr	r1, [pc, #392]	; (8004f10 <baroMain+0x250>)
 8004d86:	f00e fad3 	bl	8013330 <siprintf>
	lcdPutStr(10, 30, str1, font_12_zekton);
 8004d8a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004d8e:	4b5e      	ldr	r3, [pc, #376]	; (8004f08 <baroMain+0x248>)
 8004d90:	211e      	movs	r1, #30
 8004d92:	200a      	movs	r0, #10
 8004d94:	f7fe f8b6 	bl	8002f04 <lcdPutStr>
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8004d98:	4b5e      	ldr	r3, [pc, #376]	; (8004f14 <baroMain+0x254>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d123      	bne.n	8004de8 <baroMain+0x128>
		sprintf(&str4, "Fixed altitude mode");
 8004da0:	1d3b      	adds	r3, r7, #4
 8004da2:	495d      	ldr	r1, [pc, #372]	; (8004f18 <baroMain+0x258>)
 8004da4:	4618      	mov	r0, r3
 8004da6:	f00e fac3 	bl	8013330 <siprintf>
		sprintf(&str1, "Pressure %6.1f hPa at the sea level", bmpData.slpress/100);
 8004daa:	4b55      	ldr	r3, [pc, #340]	; (8004f00 <baroMain+0x240>)
 8004dac:	edd3 7a03 	vldr	s15, [r3, #12]
 8004db0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004f0c <baroMain+0x24c>
 8004db4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004db8:	ee16 0a90 	vmov	r0, s13
 8004dbc:	f7fb fbe4 	bl	8000588 <__aeabi_f2d>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8004dc8:	4954      	ldr	r1, [pc, #336]	; (8004f1c <baroMain+0x25c>)
 8004dca:	f00e fab1 	bl	8013330 <siprintf>
		sprintf(&str3, "At const %.0fm above sea level", fixedAltitude);
 8004dce:	4b54      	ldr	r3, [pc, #336]	; (8004f20 <baroMain+0x260>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fb fbd8 	bl	8000588 <__aeabi_f2d>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004de0:	4950      	ldr	r1, [pc, #320]	; (8004f24 <baroMain+0x264>)
 8004de2:	f00e faa5 	bl	8013330 <siprintf>
 8004de6:	e022      	b.n	8004e2e <baroMain+0x16e>
	} else {
		sprintf(&str4, "Fixed pressure mode");
 8004de8:	1d3b      	adds	r3, r7, #4
 8004dea:	494f      	ldr	r1, [pc, #316]	; (8004f28 <baroMain+0x268>)
 8004dec:	4618      	mov	r0, r3
 8004dee:	f00e fa9f 	bl	8013330 <siprintf>
		sprintf(&str1, "Altitude %5.1fm above sea level", bmpData.altitude);
 8004df2:	4b43      	ldr	r3, [pc, #268]	; (8004f00 <baroMain+0x240>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fb fbc6 	bl	8000588 <__aeabi_f2d>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8004e04:	4949      	ldr	r1, [pc, #292]	; (8004f2c <baroMain+0x26c>)
 8004e06:	f00e fa93 	bl	8013330 <siprintf>
		sprintf(&str3, "For const pressure %6.1f hPa", (BMP_PRESS_CONST_SEA_LEVEL/100));
 8004e0a:	4b49      	ldr	r3, [pc, #292]	; (8004f30 <baroMain+0x270>)
 8004e0c:	edd3 7a00 	vldr	s15, [r3]
 8004e10:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004f0c <baroMain+0x24c>
 8004e14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e18:	ee16 0a90 	vmov	r0, s13
 8004e1c:	f7fb fbb4 	bl	8000588 <__aeabi_f2d>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004e28:	4942      	ldr	r1, [pc, #264]	; (8004f34 <baroMain+0x274>)
 8004e2a:	f00e fa81 	bl	8013330 <siprintf>
	}
	lcdPutStr(10, 50, str4, font_12_zekton);
 8004e2e:	1d3a      	adds	r2, r7, #4
 8004e30:	4b35      	ldr	r3, [pc, #212]	; (8004f08 <baroMain+0x248>)
 8004e32:	2132      	movs	r1, #50	; 0x32
 8004e34:	200a      	movs	r0, #10
 8004e36:	f7fe f865 	bl	8002f04 <lcdPutStr>
	lcdPutStr(10, 66, str1, font_12_zekton);
 8004e3a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004e3e:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <baroMain+0x248>)
 8004e40:	2142      	movs	r1, #66	; 0x42
 8004e42:	200a      	movs	r0, #10
 8004e44:	f7fe f85e 	bl	8002f04 <lcdPutStr>
	lcdPutStr(10, 82, str3, font_12_zekton);
 8004e48:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004e4c:	4b2e      	ldr	r3, [pc, #184]	; (8004f08 <baroMain+0x248>)
 8004e4e:	2152      	movs	r1, #82	; 0x52
 8004e50:	200a      	movs	r0, #10
 8004e52:	f7fe f857 	bl	8002f04 <lcdPutStr>

	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8004e56:	2300      	movs	r3, #0
 8004e58:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8004e5c:	e041      	b.n	8004ee2 <baroMain+0x222>
		uint16_t* currB= (uint16_t*)(cbuf_readn(&baroRing, i));
 8004e5e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004e62:	4619      	mov	r1, r3
 8004e64:	4824      	ldr	r0, [pc, #144]	; (8004ef8 <baroMain+0x238>)
 8004e66:	f003 fae6 	bl	8008436 <cbuf_readn>
 8004e6a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		uint16_t currT= read_nth_ring_buffer(&tempRing, i);
 8004e6e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004e72:	4619      	mov	r1, r3
 8004e74:	4821      	ldr	r0, [pc, #132]	; (8004efc <baroMain+0x23c>)
 8004e76:	f003 fb84 	bl	8008582 <read_nth_ring_buffer>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
		if(*currB>=maxBaro) maxBaro = *currB;
 8004e80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d804      	bhi.n	8004e98 <baroMain+0x1d8>
 8004e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		if(*currB<=minBaro) minBaro = *currB;
 8004e98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d304      	bcc.n	8004eb0 <baroMain+0x1f0>
 8004ea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		if(currT>=maxTemp) maxTemp = currT;
 8004eb0:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004eb4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d303      	bcc.n	8004ec4 <baroMain+0x204>
 8004ebc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004ec0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		if(currT<=minTemp) minTemp = currT;
 8004ec4:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004ec8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d803      	bhi.n	8004ed8 <baroMain+0x218>
 8004ed0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004ed4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	for(uint16_t i=0; i<tempRing.num_entries; i++){
 8004ed8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004edc:	3301      	adds	r3, #1
 8004ede:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8004ee2:	4b06      	ldr	r3, [pc, #24]	; (8004efc <baroMain+0x23c>)
 8004ee4:	891b      	ldrh	r3, [r3, #8]
 8004ee6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d3b7      	bcc.n	8004e5e <baroMain+0x19e>
	}
	for(uint16_t j=minX; j<maxX; j++){
 8004eee:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <baroMain+0x278>)
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8004ef6:	e0ba      	b.n	800506e <baroMain+0x3ae>
 8004ef8:	200057d8 	.word	0x200057d8
 8004efc:	200057ec 	.word	0x200057ec
 8004f00:	20002620 	.word	0x20002620
 8004f04:	0801b244 	.word	0x0801b244
 8004f08:	0801c0e8 	.word	0x0801c0e8
 8004f0c:	42c80000 	.word	0x42c80000
 8004f10:	0801b25c 	.word	0x0801b25c
 8004f14:	20005d10 	.word	0x20005d10
 8004f18:	0801b278 	.word	0x0801b278
 8004f1c:	0801b28c 	.word	0x0801b28c
 8004f20:	20000004 	.word	0x20000004
 8004f24:	0801b2b0 	.word	0x0801b2b0
 8004f28:	0801b2d0 	.word	0x0801b2d0
 8004f2c:	0801b2e4 	.word	0x0801b2e4
 8004f30:	20000000 	.word	0x20000000
 8004f34:	0801b304 	.word	0x0801b304
 8004f38:	200001b8 	.word	0x200001b8
		uint16_t i = (j-minX)*baroRing.elemNum/(maxX-minX);
 8004f3c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8004f40:	4a8c      	ldr	r2, [pc, #560]	; (8005174 <baroMain+0x4b4>)
 8004f42:	8812      	ldrh	r2, [r2, #0]
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	4a8c      	ldr	r2, [pc, #560]	; (8005178 <baroMain+0x4b8>)
 8004f48:	8912      	ldrh	r2, [r2, #8]
 8004f4a:	fb03 f202 	mul.w	r2, r3, r2
 8004f4e:	4b8b      	ldr	r3, [pc, #556]	; (800517c <baroMain+0x4bc>)
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	4619      	mov	r1, r3
 8004f54:	4b87      	ldr	r3, [pc, #540]	; (8005174 <baroMain+0x4b4>)
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	1acb      	subs	r3, r1, r3
 8004f5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f5e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		// graph data
		uint16_t* vvaall= (uint16_t*)(cbuf_readn(&baroRing, i));
 8004f62:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004f66:	4619      	mov	r1, r3
 8004f68:	4883      	ldr	r0, [pc, #524]	; (8005178 <baroMain+0x4b8>)
 8004f6a:	f003 fa64 	bl	8008436 <cbuf_readn>
 8004f6e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
 8004f72:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 8004f76:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8004f7a:	1c5c      	adds	r4, r3, #1
 8004f7c:	4b80      	ldr	r3, [pc, #512]	; (8005180 <baroMain+0x4c0>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	461d      	mov	r5, r3
 8004f82:	4b7f      	ldr	r3, [pc, #508]	; (8005180 <baroMain+0x4c0>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	4b7e      	ldr	r3, [pc, #504]	; (8005184 <baroMain+0x4c4>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004f92:	8812      	ldrh	r2, [r2, #0]
 8004f94:	4611      	mov	r1, r2
 8004f96:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8004f9a:	1a8a      	subs	r2, r1, r2
 8004f9c:	fb03 f202 	mul.w	r2, r3, r2
 8004fa0:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8004fa4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004fa8:	1acb      	subs	r3, r1, r3
 8004faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fae:	1aea      	subs	r2, r5, r3
 8004fb0:	4b73      	ldr	r3, [pc, #460]	; (8005180 <baroMain+0x4c0>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9302      	str	r3, [sp, #8]
 8004fba:	2302      	movs	r3, #2
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	f7fe fdd4 	bl	8003b72 <lcdRect2>
		lcdRect2(j, j+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
 8004fca:	f8b7 50ac 	ldrh.w	r5, [r7, #172]	; 0xac
 8004fce:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8004fd2:	1c5e      	adds	r6, r3, #1
 8004fd4:	4b6a      	ldr	r3, [pc, #424]	; (8005180 <baroMain+0x4c0>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	4698      	mov	r8, r3
 8004fda:	4b69      	ldr	r3, [pc, #420]	; (8005180 <baroMain+0x4c0>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4b68      	ldr	r3, [pc, #416]	; (8005184 <baroMain+0x4c4>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	1ad4      	subs	r4, r2, r3
 8004fe6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004fea:	4619      	mov	r1, r3
 8004fec:	4866      	ldr	r0, [pc, #408]	; (8005188 <baroMain+0x4c8>)
 8004fee:	f003 fac8 	bl	8008582 <read_nth_ring_buffer>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	fb03 f204 	mul.w	r2, r3, r4
 8004ffe:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8005002:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005006:	1acb      	subs	r3, r1, r3
 8005008:	fb92 f3f3 	sdiv	r3, r2, r3
 800500c:	eba8 0203 	sub.w	r2, r8, r3
 8005010:	4b5b      	ldr	r3, [pc, #364]	; (8005180 <baroMain+0x4c0>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	4619      	mov	r1, r3
 8005016:	2300      	movs	r3, #0
 8005018:	9302      	str	r3, [sp, #8]
 800501a:	230e      	movs	r3, #14
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	2301      	movs	r3, #1
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	460b      	mov	r3, r1
 8005024:	4631      	mov	r1, r6
 8005026:	4628      	mov	r0, r5
 8005028:	f7fe fda3 	bl	8003b72 <lcdRect2>
//		lcdRect2(400/baroRing.maxSize*i, 400/baroRing.maxSize*i+1, maxHeight-(maxHeight-minHeight)*((*vvaall)-minBaro)/(maxBaro-minBaro), maxHeight, 1, 2, 0);
//		lcdRect2(400/tempRing.size*i, 400/tempRing.size*i+1, maxHeight-(maxHeight-minHeight)*(read_nth_ring_buffer(&tempRing, i)-minTemp)/(maxTemp-minTemp), maxHeight, 1, 14, 0);
		// horizontal lines
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(maxTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 800502c:	4b51      	ldr	r3, [pc, #324]	; (8005174 <baroMain+0x4b4>)
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	4b52      	ldr	r3, [pc, #328]	; (800517c <baroMain+0x4bc>)
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	4619      	mov	r1, r3
 8005038:	4b52      	ldr	r3, [pc, #328]	; (8005184 <baroMain+0x4c4>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	2302      	movs	r3, #2
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	2301      	movs	r3, #1
 8005044:	f7fe f854 	bl	80030f0 <lcdHLine2>
		lcdHLine2(minX, maxX, maxHeight-(maxHeight-minHeight)*(minTemp-minTemp)/(maxTemp-minTemp), 1, 2);
 8005048:	4b4a      	ldr	r3, [pc, #296]	; (8005174 <baroMain+0x4b4>)
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	4b4b      	ldr	r3, [pc, #300]	; (800517c <baroMain+0x4bc>)
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	4619      	mov	r1, r3
 8005054:	4b4a      	ldr	r3, [pc, #296]	; (8005180 <baroMain+0x4c0>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	2302      	movs	r3, #2
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	2301      	movs	r3, #1
 8005060:	f7fe f846 	bl	80030f0 <lcdHLine2>
	for(uint16_t j=minX; j<maxX; j++){
 8005064:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8005068:	3301      	adds	r3, #1
 800506a:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800506e:	4b43      	ldr	r3, [pc, #268]	; (800517c <baroMain+0x4bc>)
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8005076:	429a      	cmp	r2, r3
 8005078:	f4ff af60 	bcc.w	8004f3c <baroMain+0x27c>
//		lcdHLine2(0, 399, maxHeight-(maxHeight-minHeight)*(300-minTemp)/(maxTemp-minTemp), 1, 2);
	}
	sprintf(&str4, "%0.1f", ((float)maxTemp)/10);
 800507c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8005080:	ee07 3a90 	vmov	s15, r3
 8005084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005088:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800508c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005090:	ee16 0a90 	vmov	r0, s13
 8005094:	f7fb fa78 	bl	8000588 <__aeabi_f2d>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	1d38      	adds	r0, r7, #4
 800509e:	493b      	ldr	r1, [pc, #236]	; (800518c <baroMain+0x4cc>)
 80050a0:	f00e f946 	bl	8013330 <siprintf>
	lcdPutStr(0, minHeight-6, str4, smallestFont);
 80050a4:	4b37      	ldr	r3, [pc, #220]	; (8005184 <baroMain+0x4c4>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	3b06      	subs	r3, #6
 80050aa:	b2d9      	uxtb	r1, r3
 80050ac:	1d3a      	adds	r2, r7, #4
 80050ae:	4b38      	ldr	r3, [pc, #224]	; (8005190 <baroMain+0x4d0>)
 80050b0:	2000      	movs	r0, #0
 80050b2:	f7fd ff27 	bl	8002f04 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minTemp)/10);
 80050b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80050ca:	ee16 0a90 	vmov	r0, s13
 80050ce:	f7fb fa5b 	bl	8000588 <__aeabi_f2d>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	1d38      	adds	r0, r7, #4
 80050d8:	492c      	ldr	r1, [pc, #176]	; (800518c <baroMain+0x4cc>)
 80050da:	f00e f929 	bl	8013330 <siprintf>
	lcdPutStr(0, maxHeight-6, str4, smallestFont);
 80050de:	4b28      	ldr	r3, [pc, #160]	; (8005180 <baroMain+0x4c0>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	3b06      	subs	r3, #6
 80050e4:	b2d9      	uxtb	r1, r3
 80050e6:	1d3a      	adds	r2, r7, #4
 80050e8:	4b29      	ldr	r3, [pc, #164]	; (8005190 <baroMain+0x4d0>)
 80050ea:	2000      	movs	r0, #0
 80050ec:	f7fd ff0a 	bl	8002f04 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)maxBaro)/10);
 80050f0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80050f4:	ee07 3a90 	vmov	s15, r3
 80050f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005100:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005104:	ee16 0a90 	vmov	r0, s13
 8005108:	f7fb fa3e 	bl	8000588 <__aeabi_f2d>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	1d38      	adds	r0, r7, #4
 8005112:	491e      	ldr	r1, [pc, #120]	; (800518c <baroMain+0x4cc>)
 8005114:	f00e f90c 	bl	8013330 <siprintf>
	lcdPutStr(350, minHeight-6, str4, smallestFont);
 8005118:	4b1a      	ldr	r3, [pc, #104]	; (8005184 <baroMain+0x4c4>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	3b06      	subs	r3, #6
 800511e:	b2d9      	uxtb	r1, r3
 8005120:	1d3a      	adds	r2, r7, #4
 8005122:	4b1b      	ldr	r3, [pc, #108]	; (8005190 <baroMain+0x4d0>)
 8005124:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005128:	f7fd feec 	bl	8002f04 <lcdPutStr>
	sprintf(&str4, "%0.1f", ((float)minBaro)/10);
 800512c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005130:	ee07 3a90 	vmov	s15, r3
 8005134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005138:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800513c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005140:	ee16 0a90 	vmov	r0, s13
 8005144:	f7fb fa20 	bl	8000588 <__aeabi_f2d>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	1d38      	adds	r0, r7, #4
 800514e:	490f      	ldr	r1, [pc, #60]	; (800518c <baroMain+0x4cc>)
 8005150:	f00e f8ee 	bl	8013330 <siprintf>
	lcdPutStr(350, maxHeight-6, str4, smallestFont);
 8005154:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <baroMain+0x4c0>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	3b06      	subs	r3, #6
 800515a:	b2d9      	uxtb	r1, r3
 800515c:	1d3a      	adds	r2, r7, #4
 800515e:	4b0c      	ldr	r3, [pc, #48]	; (8005190 <baroMain+0x4d0>)
 8005160:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005164:	f7fd fece 	bl	8002f04 <lcdPutStr>
//	lcdVLine(baroRing.tail, minHeight, maxHeight, 1);
}
 8005168:	bf00      	nop
 800516a:	37b8      	adds	r7, #184	; 0xb8
 800516c:	46bd      	mov	sp, r7
 800516e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005172:	bf00      	nop
 8005174:	200001b8 	.word	0x200001b8
 8005178:	200057d8 	.word	0x200057d8
 800517c:	200001ba 	.word	0x200001ba
 8005180:	200001bc 	.word	0x200001bc
 8005184:	200001bd 	.word	0x200001bd
 8005188:	200057ec 	.word	0x200057ec
 800518c:	0801b324 	.word	0x0801b324
 8005190:	0801bc6c 	.word	0x0801bc6c

08005194 <changeBaroMode>:

void changeBaroMode(void){
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <changeBaroMode+0x34>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d107      	bne.n	80051b0 <changeBaroMode+0x1c>
		BMP_PRESS_CONST_SEA_LEVEL = bmpData.slpress;
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <changeBaroMode+0x38>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <changeBaroMode+0x3c>)
 80051a6:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_PRESSURE;
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <changeBaroMode+0x34>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
	} else {
		fixedAltitude = bmpData.altitude;
		baroMode = BARO_MODE_FIXED_ALTITUDE;
	}
}
 80051ae:	e006      	b.n	80051be <changeBaroMode+0x2a>
		fixedAltitude = bmpData.altitude;
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <changeBaroMode+0x38>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	4a07      	ldr	r2, [pc, #28]	; (80051d4 <changeBaroMode+0x40>)
 80051b6:	6013      	str	r3, [r2, #0]
		baroMode = BARO_MODE_FIXED_ALTITUDE;
 80051b8:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <changeBaroMode+0x34>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	701a      	strb	r2, [r3, #0]
}
 80051be:	bf00      	nop
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	20005d10 	.word	0x20005d10
 80051cc:	20002620 	.word	0x20002620
 80051d0:	20000000 	.word	0x20000000
 80051d4:	20000004 	.word	0x20000004

080051d8 <addBaro>:
void addBaro(void){
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 80051dc:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <addBaro+0x40>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <addBaro+0x22>
			fixedAltitude += 1;
 80051e4:	4b0d      	ldr	r3, [pc, #52]	; (800521c <addBaro+0x44>)
 80051e6:	edd3 7a00 	vldr	s15, [r3]
 80051ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <addBaro+0x44>)
 80051f4:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL += 10;
		}
}
 80051f8:	e009      	b.n	800520e <addBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL += 10;
 80051fa:	4b09      	ldr	r3, [pc, #36]	; (8005220 <addBaro+0x48>)
 80051fc:	edd3 7a00 	vldr	s15, [r3]
 8005200:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005204:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <addBaro+0x48>)
 800520a:	edc3 7a00 	vstr	s15, [r3]
}
 800520e:	bf00      	nop
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	20005d10 	.word	0x20005d10
 800521c:	20000004 	.word	0x20000004
 8005220:	20000000 	.word	0x20000000

08005224 <remBaro>:
void remBaro(void){
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
	if(baroMode == BARO_MODE_FIXED_ALTITUDE){
 8005228:	4b0e      	ldr	r3, [pc, #56]	; (8005264 <remBaro+0x40>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <remBaro+0x22>
			fixedAltitude -= 1;
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <remBaro+0x44>)
 8005232:	edd3 7a00 	vldr	s15, [r3]
 8005236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800523a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800523e:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <remBaro+0x44>)
 8005240:	edc3 7a00 	vstr	s15, [r3]
		} else {
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
		}
}
 8005244:	e009      	b.n	800525a <remBaro+0x36>
			BMP_PRESS_CONST_SEA_LEVEL -= 10;
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <remBaro+0x48>)
 8005248:	edd3 7a00 	vldr	s15, [r3]
 800524c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005250:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005254:	4b05      	ldr	r3, [pc, #20]	; (800526c <remBaro+0x48>)
 8005256:	edc3 7a00 	vstr	s15, [r3]
}
 800525a:	bf00      	nop
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	20005d10 	.word	0x20005d10
 8005268:	20000004 	.word	0x20000004
 800526c:	20000000 	.word	0x20000000

08005270 <setupCntxMenu>:

uint8_t actionsNum = 3;

// method for initialization the context menu from the module
//void setupCntxMenu(void (*defClbckPtr)(void), struct ContextActions act[], uint8_t num){
void setupCntxMenu(void (*defClbckPtr)(void)){
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	prevClbcks = defClbckPtr;
 8005278:	4a04      	ldr	r2, [pc, #16]	; (800528c <setupCntxMenu+0x1c>)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6013      	str	r3, [r2, #0]
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	20005d14 	.word	0x20005d14

08005290 <cntxSelect>:

uint8_t actionIndex = 0;
void cntxSelect(void){
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
	hideCntxMenu();
 8005294:	f000 f87e 	bl	8005394 <hideCntxMenu>
	// execute selected action
//	(*cntxActions2[cntxPosition]).main();
	ContextActions[cntxPosition]->main();
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <cntxSelect+0x1c>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <cntxSelect+0x20>)
 80052a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	4798      	blx	r3
}
 80052a8:	bf00      	nop
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20005d12 	.word	0x20005d12
 80052b0:	20000214 	.word	0x20000214

080052b4 <nextItem>:

void nextItem(void){
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
	if(cntxPosition < actionsNum-1){
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <nextItem+0x34>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <nextItem+0x38>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	429a      	cmp	r2, r3
 80052c6:	da06      	bge.n	80052d6 <nextItem+0x22>
		cntxPosition++;
 80052c8:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <nextItem+0x34>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <nextItem+0x34>)
 80052d2:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = 0;
	}
}
 80052d4:	e002      	b.n	80052dc <nextItem+0x28>
		cntxPosition = 0;
 80052d6:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <nextItem+0x34>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
}
 80052dc:	bf00      	nop
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20005d12 	.word	0x20005d12
 80052ec:	200001be 	.word	0x200001be

080052f0 <prevItem>:
void prevItem(void){
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
	if(cntxPosition > 0){
 80052f4:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <prevItem+0x30>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d006      	beq.n	800530a <prevItem+0x1a>
		cntxPosition--;
 80052fc:	4b08      	ldr	r3, [pc, #32]	; (8005320 <prevItem+0x30>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	3b01      	subs	r3, #1
 8005302:	b2da      	uxtb	r2, r3
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <prevItem+0x30>)
 8005306:	701a      	strb	r2, [r3, #0]
	} else {
		cntxPosition = actionsNum-1;
	}
}
 8005308:	e005      	b.n	8005316 <prevItem+0x26>
		cntxPosition = actionsNum-1;
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <prevItem+0x34>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	3b01      	subs	r3, #1
 8005310:	b2da      	uxtb	r2, r3
 8005312:	4b03      	ldr	r3, [pc, #12]	; (8005320 <prevItem+0x30>)
 8005314:	701a      	strb	r2, [r3, #0]
}
 8005316:	bf00      	nop
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	20005d12 	.word	0x20005d12
 8005324:	200001be 	.word	0x200001be

08005328 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &hideCntxMenu;
 800532c:	4b0b      	ldr	r3, [pc, #44]	; (800535c <setDefaultClbcks+0x34>)
 800532e:	4a0c      	ldr	r2, [pc, #48]	; (8005360 <setDefaultClbcks+0x38>)
 8005330:	611a      	str	r2, [r3, #16]

	btn_BC.onSinglePressHandler = &prevItem;
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <setDefaultClbcks+0x3c>)
 8005334:	4a0c      	ldr	r2, [pc, #48]	; (8005368 <setDefaultClbcks+0x40>)
 8005336:	611a      	str	r2, [r3, #16]
	btn_BC.onContinuousLongPressHandler = &prevItem;
 8005338:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <setDefaultClbcks+0x3c>)
 800533a:	4a0b      	ldr	r2, [pc, #44]	; (8005368 <setDefaultClbcks+0x40>)
 800533c:	61da      	str	r2, [r3, #28]
	btn_BB.onSinglePressHandler = &cntxSelect;
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <setDefaultClbcks+0x44>)
 8005340:	4a0b      	ldr	r2, [pc, #44]	; (8005370 <setDefaultClbcks+0x48>)
 8005342:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextItem;
 8005344:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <setDefaultClbcks+0x4c>)
 8005346:	4a0c      	ldr	r2, [pc, #48]	; (8005378 <setDefaultClbcks+0x50>)
 8005348:	611a      	str	r2, [r3, #16]
	btn_BA.onContinuousLongPressHandler = &nextItem;
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <setDefaultClbcks+0x4c>)
 800534c:	4a0a      	ldr	r2, [pc, #40]	; (8005378 <setDefaultClbcks+0x50>)
 800534e:	61da      	str	r2, [r3, #28]
}
 8005350:	bf00      	nop
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	200026e4 	.word	0x200026e4
 8005360:	08005395 	.word	0x08005395
 8005364:	20002678 	.word	0x20002678
 8005368:	080052f1 	.word	0x080052f1
 800536c:	20002654 	.word	0x20002654
 8005370:	08005291 	.word	0x08005291
 8005374:	20002630 	.word	0x20002630
 8005378:	080052b5 	.word	0x080052b5

0800537c <showCntxMenu>:

void showCntxMenu(void){
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
	//set up context callbacks
//	resetButtonHandlers();
	setDefaultClbcks();
 8005380:	f7ff ffd2 	bl	8005328 <setDefaultClbcks>
	isCntxOpen = 1;
 8005384:	4b02      	ldr	r3, [pc, #8]	; (8005390 <showCntxMenu+0x14>)
 8005386:	2201      	movs	r2, #1
 8005388:	701a      	strb	r2, [r3, #0]
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20005d11 	.word	0x20005d11

08005394 <hideCntxMenu>:
void hideCntxMenu(void){
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
	//bring back module callbacks
	resetButtonHandlers();
 8005398:	f7fc fd94 	bl	8001ec4 <resetButtonHandlers>
	(*prevClbcks)();
 800539c:	4b03      	ldr	r3, [pc, #12]	; (80053ac <hideCntxMenu+0x18>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4798      	blx	r3
	isCntxOpen = 0;
 80053a2:	4b03      	ldr	r3, [pc, #12]	; (80053b0 <hideCntxMenu+0x1c>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
}
 80053a8:	bf00      	nop
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20005d14 	.word	0x20005d14
 80053b0:	20005d11 	.word	0x20005d11

080053b4 <enableCntxMenu>:

// drawing routine
void enableCntxMenu(void){
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	; 0x28
 80053b8:	af02      	add	r7, sp, #8
	if(isCntxOpen){
 80053ba:	4b35      	ldr	r3, [pc, #212]	; (8005490 <enableCntxMenu+0xdc>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d062      	beq.n	8005488 <enableCntxMenu+0xd4>
//		clear rect
		lcdRect(0, 200, 5, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 0);
 80053c2:	230e      	movs	r3, #14
 80053c4:	461a      	mov	r2, r3
 80053c6:	4b33      	ldr	r3, [pc, #204]	; (8005494 <enableCntxMenu+0xe0>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
 80053ce:	330a      	adds	r3, #10
 80053d0:	2200      	movs	r2, #0
 80053d2:	9200      	str	r2, [sp, #0]
 80053d4:	2205      	movs	r2, #5
 80053d6:	21c8      	movs	r1, #200	; 0xc8
 80053d8:	2000      	movs	r0, #0
 80053da:	f7fe fba5 	bl	8003b28 <lcdRect>
//		draw frame
		lcdHLine(0, 200, 6, 1);
 80053de:	2301      	movs	r3, #1
 80053e0:	2206      	movs	r2, #6
 80053e2:	21c8      	movs	r1, #200	; 0xc8
 80053e4:	2000      	movs	r0, #0
 80053e6:	f7fe fa49 	bl	800387c <lcdHLine>
		lcdHLine(0, 200, 8+(*font_12_zekton.font_Height)*(actionsNum)+2, 1);
 80053ea:	230e      	movs	r3, #14
 80053ec:	461a      	mov	r2, r3
 80053ee:	4b29      	ldr	r3, [pc, #164]	; (8005494 <enableCntxMenu+0xe0>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	fb02 f303 	mul.w	r3, r2, r3
 80053f6:	f103 020a 	add.w	r2, r3, #10
 80053fa:	2301      	movs	r3, #1
 80053fc:	21c8      	movs	r1, #200	; 0xc8
 80053fe:	2000      	movs	r0, #0
 8005400:	f7fe fa3c 	bl	800387c <lcdHLine>
//		create list
		char item[30] = {0};
 8005404:	2300      	movs	r3, #0
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	1d3b      	adds	r3, r7, #4
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	605a      	str	r2, [r3, #4]
 8005410:	609a      	str	r2, [r3, #8]
 8005412:	60da      	str	r2, [r3, #12]
 8005414:	611a      	str	r2, [r3, #16]
 8005416:	615a      	str	r2, [r3, #20]
 8005418:	831a      	strh	r2, [r3, #24]
		for(uint8_t i = 0; i < actionsNum; i++){
 800541a:	2300      	movs	r3, #0
 800541c:	77fb      	strb	r3, [r7, #31]
 800541e:	e018      	b.n	8005452 <enableCntxMenu+0x9e>
			sprintf(&item, ContextActions[i]->name);
 8005420:	7ffb      	ldrb	r3, [r7, #31]
 8005422:	4a1d      	ldr	r2, [pc, #116]	; (8005498 <enableCntxMenu+0xe4>)
 8005424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005428:	461a      	mov	r2, r3
 800542a:	463b      	mov	r3, r7
 800542c:	4611      	mov	r1, r2
 800542e:	4618      	mov	r0, r3
 8005430:	f00d ff7e 	bl	8013330 <siprintf>
			lcdPutStr(5, 10+(*font_12_zekton.font_Height)*i, item, font_12_zekton);
 8005434:	220e      	movs	r2, #14
 8005436:	7ffb      	ldrb	r3, [r7, #31]
 8005438:	fb13 f302 	smulbb	r3, r3, r2
 800543c:	b2db      	uxtb	r3, r3
 800543e:	330a      	adds	r3, #10
 8005440:	b2d9      	uxtb	r1, r3
 8005442:	463a      	mov	r2, r7
 8005444:	4b15      	ldr	r3, [pc, #84]	; (800549c <enableCntxMenu+0xe8>)
 8005446:	2005      	movs	r0, #5
 8005448:	f7fd fd5c 	bl	8002f04 <lcdPutStr>
		for(uint8_t i = 0; i < actionsNum; i++){
 800544c:	7ffb      	ldrb	r3, [r7, #31]
 800544e:	3301      	adds	r3, #1
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	4b10      	ldr	r3, [pc, #64]	; (8005494 <enableCntxMenu+0xe0>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	7ffa      	ldrb	r2, [r7, #31]
 8005458:	429a      	cmp	r2, r3
 800545a:	d3e1      	bcc.n	8005420 <enableCntxMenu+0x6c>
		}
//		indicate selection
		lcdRect(0, 200, 8+(*font_12_zekton.font_Height)*cntxPosition, 8+(*font_12_zekton.font_Height)*(cntxPosition+1), 2);
 800545c:	230e      	movs	r3, #14
 800545e:	461a      	mov	r2, r3
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <enableCntxMenu+0xec>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	fb02 f303 	mul.w	r3, r2, r3
 8005468:	f103 0208 	add.w	r2, r3, #8
 800546c:	230e      	movs	r3, #14
 800546e:	4619      	mov	r1, r3
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <enableCntxMenu+0xec>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	3301      	adds	r3, #1
 8005476:	fb01 f303 	mul.w	r3, r1, r3
 800547a:	3308      	adds	r3, #8
 800547c:	2102      	movs	r1, #2
 800547e:	9100      	str	r1, [sp, #0]
 8005480:	21c8      	movs	r1, #200	; 0xc8
 8005482:	2000      	movs	r0, #0
 8005484:	f7fe fb50 	bl	8003b28 <lcdRect>

	}
}
 8005488:	bf00      	nop
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20005d11 	.word	0x20005d11
 8005494:	200001be 	.word	0x200001be
 8005498:	20000214 	.word	0x20000214
 800549c:	0801cb70 	.word	0x0801cb70
 80054a0:	20005d12 	.word	0x20005d12

080054a4 <nextPg>:
extern gpsDevice_t gpsDev;
extern char dmaBuffer[];
extern location_t location;


void nextPg(void){
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
	pageNum++;
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <nextPg+0x1c>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	3301      	adds	r3, #1
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	4b03      	ldr	r3, [pc, #12]	; (80054c0 <nextPg+0x1c>)
 80054b2:	701a      	strb	r2, [r3, #0]
}
 80054b4:	bf00      	nop
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	20005d18 	.word	0x20005d18

080054c4 <prevPg>:
void prevPg(void){
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
	pageNum--;
 80054c8:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <prevPg+0x1c>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	4b03      	ldr	r3, [pc, #12]	; (80054e0 <prevPg+0x1c>)
 80054d2:	701a      	strb	r2, [r3, #0]
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20005d18 	.word	0x20005d18

080054e4 <syncTime>:
void syncTime(void){
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
	if(location.isValid){
 80054e8:	4b15      	ldr	r3, [pc, #84]	; (8005540 <syncTime+0x5c>)
 80054ea:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d023      	beq.n	800553a <syncTime+0x56>

	RtcTime.Hours = location.utc_hour+GLOBAL_timezone;
 80054f2:	4b13      	ldr	r3, [pc, #76]	; (8005540 <syncTime+0x5c>)
 80054f4:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
 80054f8:	4b12      	ldr	r3, [pc, #72]	; (8005544 <syncTime+0x60>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	4413      	add	r3, r2
 8005500:	b2da      	uxtb	r2, r3
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <syncTime+0x64>)
 8005504:	701a      	strb	r2, [r3, #0]
		RtcTime.Minutes = location.utc_min;
 8005506:	4b0e      	ldr	r3, [pc, #56]	; (8005540 <syncTime+0x5c>)
 8005508:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 800550c:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <syncTime+0x64>)
 800550e:	705a      	strb	r2, [r3, #1]
		RtcTime.Seconds = location.utc_sec;
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <syncTime+0x5c>)
 8005512:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8005516:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <syncTime+0x64>)
 8005518:	709a      	strb	r2, [r3, #2]
		RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <syncTime+0x64>)
 800551c:	2200      	movs	r2, #0
 800551e:	60da      	str	r2, [r3, #12]
		RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005520:	4b09      	ldr	r3, [pc, #36]	; (8005548 <syncTime+0x64>)
 8005522:	2200      	movs	r2, #0
 8005524:	611a      	str	r2, [r3, #16]
		if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8005526:	2200      	movs	r2, #0
 8005528:	4907      	ldr	r1, [pc, #28]	; (8005548 <syncTime+0x64>)
 800552a:	4808      	ldr	r0, [pc, #32]	; (800554c <syncTime+0x68>)
 800552c:	f005 fc3e 	bl	800adac <HAL_RTC_SetTime>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <syncTime+0x56>
		{
		Error_Handler();
 8005536:	f7fe fd7b 	bl	8004030 <Error_Handler>
		}
	}
}
 800553a:	bf00      	nop
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20005648 	.word	0x20005648
 8005544:	20000178 	.word	0x20000178
 8005548:	200057c0 	.word	0x200057c0
 800554c:	20005a60 	.word	0x20005a60

08005550 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8005554:	4b09      	ldr	r3, [pc, #36]	; (800557c <setDefaultClbcks+0x2c>)
 8005556:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <setDefaultClbcks+0x30>)
 8005558:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <setDefaultClbcks+0x34>)
 800555c:	4a0a      	ldr	r2, [pc, #40]	; (8005588 <setDefaultClbcks+0x38>)
 800555e:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPg;
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <setDefaultClbcks+0x3c>)
 8005562:	4a0b      	ldr	r2, [pc, #44]	; (8005590 <setDefaultClbcks+0x40>)
 8005564:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPg;
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <setDefaultClbcks+0x44>)
 8005568:	4a0b      	ldr	r2, [pc, #44]	; (8005598 <setDefaultClbcks+0x48>)
 800556a:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &syncTime;
 800556c:	4b0b      	ldr	r3, [pc, #44]	; (800559c <setDefaultClbcks+0x4c>)
 800556e:	4a0c      	ldr	r2, [pc, #48]	; (80055a0 <setDefaultClbcks+0x50>)
 8005570:	611a      	str	r2, [r3, #16]
}
 8005572:	bf00      	nop
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	20002630 	.word	0x20002630
 8005580:	08002a69 	.word	0x08002a69
 8005584:	20002678 	.word	0x20002678
 8005588:	08002a79 	.word	0x08002a79
 800558c:	2000269c 	.word	0x2000269c
 8005590:	080054a5 	.word	0x080054a5
 8005594:	200026e4 	.word	0x200026e4
 8005598:	080054c5 	.word	0x080054c5
 800559c:	200026c0 	.word	0x200026c0
 80055a0:	080054e5 	.word	0x080054e5

080055a4 <gpsSetup>:

void gpsSetup(void){
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80055a8:	f7ff ffd2 	bl	8005550 <setDefaultClbcks>

}
 80055ac:	bf00      	nop
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <gpsMain>:

void gpsMain(void){
 80055b0:	b590      	push	{r4, r7, lr}
 80055b2:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 80055b6:	af02      	add	r7, sp, #8
	char tempStr[51] = {0};
 80055b8:	2300      	movs	r3, #0
 80055ba:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80055be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055c2:	222f      	movs	r2, #47	; 0x2f
 80055c4:	2100      	movs	r1, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	f00c fd84 	bl	80120d4 <memset>

	switch(pageNum){
 80055cc:	4bb2      	ldr	r3, [pc, #712]	; (8005898 <gpsMain+0x2e8>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <gpsMain+0x2c>
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	f000 80e7 	beq.w	80057a8 <gpsMain+0x1f8>
 80055da:	e13e      	b.n	800585a <gpsMain+0x2aa>
	case 0: {
		uint8_t locUpdated = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
		locUpdated = getLocation(&gpsDev, &location);
 80055e2:	49ae      	ldr	r1, [pc, #696]	; (800589c <gpsMain+0x2ec>)
 80055e4:	48ae      	ldr	r0, [pc, #696]	; (80058a0 <gpsMain+0x2f0>)
 80055e6:	f7fc ffc1 	bl	800256c <getLocation>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
		if(location.hasFix & location.isValid){
 80055f0:	4baa      	ldr	r3, [pc, #680]	; (800589c <gpsMain+0x2ec>)
 80055f2:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 80055f6:	4ba9      	ldr	r3, [pc, #676]	; (800589c <gpsMain+0x2ec>)
 80055f8:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 80055fc:	4013      	ands	r3, r2
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8095 	beq.w	8005730 <gpsMain+0x180>
			sprintf(&tempStr, "GPS fix (%d satellites)", location.satNum);
 8005606:	4ba5      	ldr	r3, [pc, #660]	; (800589c <gpsMain+0x2ec>)
 8005608:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800560c:	461a      	mov	r2, r3
 800560e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005612:	49a4      	ldr	r1, [pc, #656]	; (80058a4 <gpsMain+0x2f4>)
 8005614:	4618      	mov	r0, r3
 8005616:	f00d fe8b 	bl	8013330 <siprintf>
			lcdPutStr(200, 220, tempStr, smallestFont);
 800561a:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800561e:	4ba2      	ldr	r3, [pc, #648]	; (80058a8 <gpsMain+0x2f8>)
 8005620:	21dc      	movs	r1, #220	; 0xdc
 8005622:	20c8      	movs	r0, #200	; 0xc8
 8005624:	f7fd fc6e 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "UTC %02d%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 8005628:	4b9c      	ldr	r3, [pc, #624]	; (800589c <gpsMain+0x2ec>)
 800562a:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800562e:	461a      	mov	r2, r3
 8005630:	4b9a      	ldr	r3, [pc, #616]	; (800589c <gpsMain+0x2ec>)
 8005632:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8005636:	4619      	mov	r1, r3
 8005638:	4b98      	ldr	r3, [pc, #608]	; (800589c <gpsMain+0x2ec>)
 800563a:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800563e:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	460b      	mov	r3, r1
 8005646:	4999      	ldr	r1, [pc, #612]	; (80058ac <gpsMain+0x2fc>)
 8005648:	f00d fe72 	bl	8013330 <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 800564c:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005650:	4b97      	ldr	r3, [pc, #604]	; (80058b0 <gpsMain+0x300>)
 8005652:	2100      	movs	r1, #0
 8005654:	2000      	movs	r0, #0
 8005656:	f7fd fc55 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "LOC %02d%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 800565a:	4b96      	ldr	r3, [pc, #600]	; (80058b4 <gpsMain+0x304>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	4b94      	ldr	r3, [pc, #592]	; (80058b4 <gpsMain+0x304>)
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	4619      	mov	r1, r3
 8005666:	4b93      	ldr	r3, [pc, #588]	; (80058b4 <gpsMain+0x304>)
 8005668:	789b      	ldrb	r3, [r3, #2]
 800566a:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	460b      	mov	r3, r1
 8005672:	4991      	ldr	r1, [pc, #580]	; (80058b8 <gpsMain+0x308>)
 8005674:	f00d fe5c 	bl	8013330 <siprintf>
			lcdPutStr(220, 0, tempStr, ocrFont);
 8005678:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800567c:	4b8c      	ldr	r3, [pc, #560]	; (80058b0 <gpsMain+0x300>)
 800567e:	2100      	movs	r1, #0
 8005680:	20dc      	movs	r0, #220	; 0xdc
 8005682:	f7fd fc3f 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "GMT%+d", GLOBAL_timezone);
 8005686:	4b8d      	ldr	r3, [pc, #564]	; (80058bc <gpsMain+0x30c>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800568e:	498c      	ldr	r1, [pc, #560]	; (80058c0 <gpsMain+0x310>)
 8005690:	4618      	mov	r0, r3
 8005692:	f00d fe4d 	bl	8013330 <siprintf>
			lcdPutStr(220, 20, tempStr, ocrFont);
 8005696:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800569a:	4b85      	ldr	r3, [pc, #532]	; (80058b0 <gpsMain+0x300>)
 800569c:	2114      	movs	r1, #20
 800569e:	20dc      	movs	r0, #220	; 0xdc
 80056a0:	f7fd fc30 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "%c%3d`%.3f'", location.n_s, location.latitudeDeg, location.latitudeMin);
 80056a4:	4b7d      	ldr	r3, [pc, #500]	; (800589c <gpsMain+0x2ec>)
 80056a6:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 80056aa:	4619      	mov	r1, r3
 80056ac:	4b7b      	ldr	r3, [pc, #492]	; (800589c <gpsMain+0x2ec>)
 80056ae:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80056b2:	461c      	mov	r4, r3
 80056b4:	4b79      	ldr	r3, [pc, #484]	; (800589c <gpsMain+0x2ec>)
 80056b6:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 80056ba:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 80056be:	e9cd 2300 	strd	r2, r3, [sp]
 80056c2:	4623      	mov	r3, r4
 80056c4:	460a      	mov	r2, r1
 80056c6:	497f      	ldr	r1, [pc, #508]	; (80058c4 <gpsMain+0x314>)
 80056c8:	f00d fe32 	bl	8013330 <siprintf>
			lcdPutStr(0, 50, tempStr, zekton45font);
 80056cc:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80056d0:	4b7d      	ldr	r3, [pc, #500]	; (80058c8 <gpsMain+0x318>)
 80056d2:	2132      	movs	r1, #50	; 0x32
 80056d4:	2000      	movs	r0, #0
 80056d6:	f7fd fc15 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "%c%3d`%.3f'", location.w_e, location.longitudeDeg, location.longitudeMin);
 80056da:	4b70      	ldr	r3, [pc, #448]	; (800589c <gpsMain+0x2ec>)
 80056dc:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 80056e0:	4619      	mov	r1, r3
 80056e2:	4b6e      	ldr	r3, [pc, #440]	; (800589c <gpsMain+0x2ec>)
 80056e4:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80056e8:	461c      	mov	r4, r3
 80056ea:	4b6c      	ldr	r3, [pc, #432]	; (800589c <gpsMain+0x2ec>)
 80056ec:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 80056f0:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 80056f4:	e9cd 2300 	strd	r2, r3, [sp]
 80056f8:	4623      	mov	r3, r4
 80056fa:	460a      	mov	r2, r1
 80056fc:	4971      	ldr	r1, [pc, #452]	; (80058c4 <gpsMain+0x314>)
 80056fe:	f00d fe17 	bl	8013330 <siprintf>
			lcdPutStr(0, 110, tempStr, zekton45font);
 8005702:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005706:	4b70      	ldr	r3, [pc, #448]	; (80058c8 <gpsMain+0x318>)
 8005708:	216e      	movs	r1, #110	; 0x6e
 800570a:	2000      	movs	r0, #0
 800570c:	f7fd fbfa 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "ALT: %.1fm", location.elevation);
 8005710:	4b62      	ldr	r3, [pc, #392]	; (800589c <gpsMain+0x2ec>)
 8005712:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8005716:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800571a:	496c      	ldr	r1, [pc, #432]	; (80058cc <gpsMain+0x31c>)
 800571c:	f00d fe08 	bl	8013330 <siprintf>
			lcdPutStr(20, 170, tempStr, zekton24font);
 8005720:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005724:	4b6a      	ldr	r3, [pc, #424]	; (80058d0 <gpsMain+0x320>)
 8005726:	21aa      	movs	r1, #170	; 0xaa
 8005728:	2014      	movs	r0, #20
 800572a:	f7fd fbeb 	bl	8002f04 <lcdPutStr>
 800572e:	e029      	b.n	8005784 <gpsMain+0x1d4>

		} else {
			sprintf(&tempStr, "No fix - %d satellites", location.satNum);
 8005730:	4b5a      	ldr	r3, [pc, #360]	; (800589c <gpsMain+0x2ec>)
 8005732:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005736:	461a      	mov	r2, r3
 8005738:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800573c:	4965      	ldr	r1, [pc, #404]	; (80058d4 <gpsMain+0x324>)
 800573e:	4618      	mov	r0, r3
 8005740:	f00d fdf6 	bl	8013330 <siprintf>
			lcdPutStr(0, 0, tempStr, ocrFont);
 8005744:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005748:	4b59      	ldr	r3, [pc, #356]	; (80058b0 <gpsMain+0x300>)
 800574a:	2100      	movs	r1, #0
 800574c:	2000      	movs	r0, #0
 800574e:	f7fd fbd9 	bl	8002f04 <lcdPutStr>
			sprintf(&tempStr, "UTC time: %02d:%02d %02d", location.utc_hour, location.utc_min, location.utc_sec);
 8005752:	4b52      	ldr	r3, [pc, #328]	; (800589c <gpsMain+0x2ec>)
 8005754:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8005758:	461a      	mov	r2, r3
 800575a:	4b50      	ldr	r3, [pc, #320]	; (800589c <gpsMain+0x2ec>)
 800575c:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8005760:	4619      	mov	r1, r3
 8005762:	4b4e      	ldr	r3, [pc, #312]	; (800589c <gpsMain+0x2ec>)
 8005764:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005768:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	460b      	mov	r3, r1
 8005770:	4959      	ldr	r1, [pc, #356]	; (80058d8 <gpsMain+0x328>)
 8005772:	f00d fddd 	bl	8013330 <siprintf>
			lcdPutStr(0, 30, tempStr, ocrFont);
 8005776:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800577a:	4b4d      	ldr	r3, [pc, #308]	; (80058b0 <gpsMain+0x300>)
 800577c:	211e      	movs	r1, #30
 800577e:	2000      	movs	r0, #0
 8005780:	f7fd fbc0 	bl	8002f04 <lcdPutStr>
		}
		if(locUpdated){
 8005784:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 8005788:	2b00      	cmp	r3, #0
 800578a:	d07f      	beq.n	800588c <gpsMain+0x2dc>
			sprintf(&tempStr, "location updated");
 800578c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8005790:	4952      	ldr	r1, [pc, #328]	; (80058dc <gpsMain+0x32c>)
 8005792:	4618      	mov	r0, r3
 8005794:	f00d fdcc 	bl	8013330 <siprintf>
			lcdPutStr(0, 220, tempStr, smallestFont);
 8005798:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800579c:	4b42      	ldr	r3, [pc, #264]	; (80058a8 <gpsMain+0x2f8>)
 800579e:	21dc      	movs	r1, #220	; 0xdc
 80057a0:	2000      	movs	r0, #0
 80057a2:	f7fd fbaf 	bl	8002f04 <lcdPutStr>
		}
		break;
 80057a6:	e071      	b.n	800588c <gpsMain+0x2dc>
	}
	case 1: {
		getLocation(&gpsDev, &location);
 80057a8:	493c      	ldr	r1, [pc, #240]	; (800589c <gpsMain+0x2ec>)
 80057aa:	483d      	ldr	r0, [pc, #244]	; (80058a0 <gpsMain+0x2f0>)
 80057ac:	f7fc fede 	bl	800256c <getLocation>
		lcdPutStr(0, 25, location.debug, smallestFont);
 80057b0:	4b3d      	ldr	r3, [pc, #244]	; (80058a8 <gpsMain+0x2f8>)
 80057b2:	4a3a      	ldr	r2, [pc, #232]	; (800589c <gpsMain+0x2ec>)
 80057b4:	2119      	movs	r1, #25
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7fd fba4 	bl	8002f04 <lcdPutStr>
		lcdPutStr(0, 40, location.words[0], smallestFont);
 80057bc:	4b3a      	ldr	r3, [pc, #232]	; (80058a8 <gpsMain+0x2f8>)
 80057be:	4a48      	ldr	r2, [pc, #288]	; (80058e0 <gpsMain+0x330>)
 80057c0:	2128      	movs	r1, #40	; 0x28
 80057c2:	2000      	movs	r0, #0
 80057c4:	f7fd fb9e 	bl	8002f04 <lcdPutStr>
		lcdPutStr(0, 55, location.words[1], smallestFont);
 80057c8:	4b37      	ldr	r3, [pc, #220]	; (80058a8 <gpsMain+0x2f8>)
 80057ca:	4a46      	ldr	r2, [pc, #280]	; (80058e4 <gpsMain+0x334>)
 80057cc:	2137      	movs	r1, #55	; 0x37
 80057ce:	2000      	movs	r0, #0
 80057d0:	f7fd fb98 	bl	8002f04 <lcdPutStr>
		lcdPutStr(0, 70, location.words[2], smallestFont);
 80057d4:	4b34      	ldr	r3, [pc, #208]	; (80058a8 <gpsMain+0x2f8>)
 80057d6:	4a44      	ldr	r2, [pc, #272]	; (80058e8 <gpsMain+0x338>)
 80057d8:	2146      	movs	r1, #70	; 0x46
 80057da:	2000      	movs	r0, #0
 80057dc:	f7fd fb92 	bl	8002f04 <lcdPutStr>
		lcdPutStr(0, 85, location.words[3], smallestFont);
 80057e0:	4b31      	ldr	r3, [pc, #196]	; (80058a8 <gpsMain+0x2f8>)
 80057e2:	4a42      	ldr	r2, [pc, #264]	; (80058ec <gpsMain+0x33c>)
 80057e4:	2155      	movs	r1, #85	; 0x55
 80057e6:	2000      	movs	r0, #0
 80057e8:	f7fd fb8c 	bl	8002f04 <lcdPutStr>
		lcdPutStr(0, 100, location.words[4], smallestFont);
 80057ec:	4b2e      	ldr	r3, [pc, #184]	; (80058a8 <gpsMain+0x2f8>)
 80057ee:	4a40      	ldr	r2, [pc, #256]	; (80058f0 <gpsMain+0x340>)
 80057f0:	2164      	movs	r1, #100	; 0x64
 80057f2:	2000      	movs	r0, #0
 80057f4:	f7fd fb86 	bl	8002f04 <lcdPutStr>
		lcdPutStr(100, 25, location.words[5], smallestFont);
 80057f8:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <gpsMain+0x2f8>)
 80057fa:	4a3e      	ldr	r2, [pc, #248]	; (80058f4 <gpsMain+0x344>)
 80057fc:	2119      	movs	r1, #25
 80057fe:	2064      	movs	r0, #100	; 0x64
 8005800:	f7fd fb80 	bl	8002f04 <lcdPutStr>
		lcdPutStr(100, 40, location.words[6], smallestFont);
 8005804:	4b28      	ldr	r3, [pc, #160]	; (80058a8 <gpsMain+0x2f8>)
 8005806:	4a3c      	ldr	r2, [pc, #240]	; (80058f8 <gpsMain+0x348>)
 8005808:	2128      	movs	r1, #40	; 0x28
 800580a:	2064      	movs	r0, #100	; 0x64
 800580c:	f7fd fb7a 	bl	8002f04 <lcdPutStr>
		lcdPutStr(100, 55, location.words[7], smallestFont);
 8005810:	4b25      	ldr	r3, [pc, #148]	; (80058a8 <gpsMain+0x2f8>)
 8005812:	4a3a      	ldr	r2, [pc, #232]	; (80058fc <gpsMain+0x34c>)
 8005814:	2137      	movs	r1, #55	; 0x37
 8005816:	2064      	movs	r0, #100	; 0x64
 8005818:	f7fd fb74 	bl	8002f04 <lcdPutStr>
		lcdPutStr(100, 70, location.words[8], smallestFont);
 800581c:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <gpsMain+0x2f8>)
 800581e:	4a38      	ldr	r2, [pc, #224]	; (8005900 <gpsMain+0x350>)
 8005820:	2146      	movs	r1, #70	; 0x46
 8005822:	2064      	movs	r0, #100	; 0x64
 8005824:	f7fd fb6e 	bl	8002f04 <lcdPutStr>
		lcdPutStr(100, 85, location.words[9], smallestFont);
 8005828:	4b1f      	ldr	r3, [pc, #124]	; (80058a8 <gpsMain+0x2f8>)
 800582a:	4a36      	ldr	r2, [pc, #216]	; (8005904 <gpsMain+0x354>)
 800582c:	2155      	movs	r1, #85	; 0x55
 800582e:	2064      	movs	r0, #100	; 0x64
 8005830:	f7fd fb68 	bl	8002f04 <lcdPutStr>
		lcdPutStr(100, 100, location.words[10], smallestFont);
 8005834:	4b1c      	ldr	r3, [pc, #112]	; (80058a8 <gpsMain+0x2f8>)
 8005836:	4a34      	ldr	r2, [pc, #208]	; (8005908 <gpsMain+0x358>)
 8005838:	2164      	movs	r1, #100	; 0x64
 800583a:	2064      	movs	r0, #100	; 0x64
 800583c:	f7fd fb62 	bl	8002f04 <lcdPutStr>
		lcdPutStr(200, 25, location.words[11], smallestFont);
 8005840:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <gpsMain+0x2f8>)
 8005842:	4a32      	ldr	r2, [pc, #200]	; (800590c <gpsMain+0x35c>)
 8005844:	2119      	movs	r1, #25
 8005846:	20c8      	movs	r0, #200	; 0xc8
 8005848:	f7fd fb5c 	bl	8002f04 <lcdPutStr>
		lcdPutStr(200, 40, location.words[12], smallestFont);
 800584c:	4b16      	ldr	r3, [pc, #88]	; (80058a8 <gpsMain+0x2f8>)
 800584e:	4a30      	ldr	r2, [pc, #192]	; (8005910 <gpsMain+0x360>)
 8005850:	2128      	movs	r1, #40	; 0x28
 8005852:	20c8      	movs	r0, #200	; 0xc8
 8005854:	f7fd fb56 	bl	8002f04 <lcdPutStr>
		break;
 8005858:	e019      	b.n	800588e <gpsMain+0x2de>
		// show gpsDev buffer in many lines
//		for(uint8_t i=0; i<6; i++){
//			strncpy(&tempStr, &gpsDev.buffer[50*i], 50);
//			lcdPutStr(0,120+14*i, tempStr, smallestFont);
//		}
		char tempStr2[GPS_BUFFER_SIZE+1] = {0};
 800585a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800585e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	3304      	adds	r3, #4
 8005868:	f240 2255 	movw	r2, #597	; 0x255
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f00c fc30 	bl	80120d4 <memset>

		strcpy(&tempStr2, &gpsDev.buffer);
 8005874:	463b      	mov	r3, r7
 8005876:	4927      	ldr	r1, [pc, #156]	; (8005914 <gpsMain+0x364>)
 8005878:	4618      	mov	r0, r3
 800587a:	f00d fdea 	bl	8013452 <strcpy>
		lcdPutStrML(0,0, tempStr2, smallestFont);
 800587e:	463a      	mov	r2, r7
 8005880:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <gpsMain+0x2f8>)
 8005882:	2100      	movs	r1, #0
 8005884:	2000      	movs	r0, #0
 8005886:	f7fd fb6b 	bl	8002f60 <lcdPutStrML>
		break;
 800588a:	e000      	b.n	800588e <gpsMain+0x2de>
		break;
 800588c:	bf00      	nop





}
 800588e:	bf00      	nop
 8005890:	f507 7725 	add.w	r7, r7, #660	; 0x294
 8005894:	46bd      	mov	sp, r7
 8005896:	bd90      	pop	{r4, r7, pc}
 8005898:	20005d18 	.word	0x20005d18
 800589c:	20005648 	.word	0x20005648
 80058a0:	200057fc 	.word	0x200057fc
 80058a4:	0801b3e4 	.word	0x0801b3e4
 80058a8:	0801d5f8 	.word	0x0801d5f8
 80058ac:	0801b3fc 	.word	0x0801b3fc
 80058b0:	0801da74 	.word	0x0801da74
 80058b4:	200057c0 	.word	0x200057c0
 80058b8:	0801b410 	.word	0x0801b410
 80058bc:	20000178 	.word	0x20000178
 80058c0:	0801b424 	.word	0x0801b424
 80058c4:	0801b42c 	.word	0x0801b42c
 80058c8:	08020ea4 	.word	0x08020ea4
 80058cc:	0801b438 	.word	0x0801b438
 80058d0:	0801f03c 	.word	0x0801f03c
 80058d4:	0801b444 	.word	0x0801b444
 80058d8:	0801b45c 	.word	0x0801b45c
 80058dc:	0801b478 	.word	0x0801b478
 80058e0:	2000569e 	.word	0x2000569e
 80058e4:	200056ad 	.word	0x200056ad
 80058e8:	200056bc 	.word	0x200056bc
 80058ec:	200056cb 	.word	0x200056cb
 80058f0:	200056da 	.word	0x200056da
 80058f4:	200056e9 	.word	0x200056e9
 80058f8:	200056f8 	.word	0x200056f8
 80058fc:	20005707 	.word	0x20005707
 8005900:	20005716 	.word	0x20005716
 8005904:	20005725 	.word	0x20005725
 8005908:	20005734 	.word	0x20005734
 800590c:	20005743 	.word	0x20005743
 8005910:	20005752 	.word	0x20005752
 8005914:	20005800 	.word	0x20005800

08005918 <setDefaultClbcks>:
	testTime.tm_mday--;
	mktime(&testTime);

}

static void setDefaultClbcks(void){
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <setDefaultClbcks+0x1c>)
 800591e:	4a06      	ldr	r2, [pc, #24]	; (8005938 <setDefaultClbcks+0x20>)
 8005920:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <setDefaultClbcks+0x24>)
 8005924:	4a06      	ldr	r2, [pc, #24]	; (8005940 <setDefaultClbcks+0x28>)
 8005926:	611a      	str	r2, [r3, #16]
//	btn_B1.onContinuousShortPressHandler = &addDay;
//	btn_B3.onContinuousShortPressHandler = &remDay;
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20002630 	.word	0x20002630
 8005938:	08002a69 	.word	0x08002a69
 800593c:	20002678 	.word	0x20002678
 8005940:	08002a79 	.word	0x08002a79

08005944 <localSetup>:
void localSetup(void){
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005948:	f7ff ffe6 	bl	8005918 <setDefaultClbcks>
	testTime.tm_hour = RtcTime.Hours;
 800594c:	4b11      	ldr	r3, [pc, #68]	; (8005994 <localSetup+0x50>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	4b11      	ldr	r3, [pc, #68]	; (8005998 <localSetup+0x54>)
 8005954:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 8005956:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <localSetup+0x50>)
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	461a      	mov	r2, r3
 800595c:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <localSetup+0x54>)
 800595e:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <localSetup+0x50>)
 8005962:	789b      	ldrb	r3, [r3, #2]
 8005964:	461a      	mov	r2, r3
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <localSetup+0x54>)
 8005968:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 800596a:	4b0c      	ldr	r3, [pc, #48]	; (800599c <localSetup+0x58>)
 800596c:	789b      	ldrb	r3, [r3, #2]
 800596e:	461a      	mov	r2, r3
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <localSetup+0x54>)
 8005972:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 8005974:	4b09      	ldr	r3, [pc, #36]	; (800599c <localSetup+0x58>)
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	3b01      	subs	r3, #1
 800597a:	4a07      	ldr	r2, [pc, #28]	; (8005998 <localSetup+0x54>)
 800597c:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 800597e:	4b07      	ldr	r3, [pc, #28]	; (800599c <localSetup+0x58>)
 8005980:	78db      	ldrb	r3, [r3, #3]
 8005982:	3364      	adds	r3, #100	; 0x64
 8005984:	4a04      	ldr	r2, [pc, #16]	; (8005998 <localSetup+0x54>)
 8005986:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 8005988:	4803      	ldr	r0, [pc, #12]	; (8005998 <localSetup+0x54>)
 800598a:	f00c fc83 	bl	8012294 <mktime>
}
 800598e:	bf00      	nop
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	200057c0 	.word	0x200057c0
 8005998:	20005d1c 	.word	0x20005d1c
 800599c:	200057d4 	.word	0x200057d4

080059a0 <localMain>:


void localMain(void){
 80059a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a4:	b0c6      	sub	sp, #280	; 0x118
 80059a6:	af02      	add	r7, sp, #8
	testTime.tm_hour = RtcTime.Hours;
 80059a8:	4bdb      	ldr	r3, [pc, #876]	; (8005d18 <localMain+0x378>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	4bdb      	ldr	r3, [pc, #876]	; (8005d1c <localMain+0x37c>)
 80059b0:	609a      	str	r2, [r3, #8]
	testTime.tm_min = RtcTime.Minutes;
 80059b2:	4bd9      	ldr	r3, [pc, #868]	; (8005d18 <localMain+0x378>)
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	461a      	mov	r2, r3
 80059b8:	4bd8      	ldr	r3, [pc, #864]	; (8005d1c <localMain+0x37c>)
 80059ba:	605a      	str	r2, [r3, #4]
	testTime.tm_sec = RtcTime.Seconds;
 80059bc:	4bd6      	ldr	r3, [pc, #856]	; (8005d18 <localMain+0x378>)
 80059be:	789b      	ldrb	r3, [r3, #2]
 80059c0:	461a      	mov	r2, r3
 80059c2:	4bd6      	ldr	r3, [pc, #856]	; (8005d1c <localMain+0x37c>)
 80059c4:	601a      	str	r2, [r3, #0]
	testTime.tm_mday = RtcDate.Date ;
 80059c6:	4bd6      	ldr	r3, [pc, #856]	; (8005d20 <localMain+0x380>)
 80059c8:	789b      	ldrb	r3, [r3, #2]
 80059ca:	461a      	mov	r2, r3
 80059cc:	4bd3      	ldr	r3, [pc, #844]	; (8005d1c <localMain+0x37c>)
 80059ce:	60da      	str	r2, [r3, #12]
	testTime.tm_mon = RtcDate.Month-1;
 80059d0:	4bd3      	ldr	r3, [pc, #844]	; (8005d20 <localMain+0x380>)
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	4ad1      	ldr	r2, [pc, #836]	; (8005d1c <localMain+0x37c>)
 80059d8:	6113      	str	r3, [r2, #16]
//	testTime.tm_year = 2022-1900;
	testTime.tm_year = RtcDate.Year+100;
 80059da:	4bd1      	ldr	r3, [pc, #836]	; (8005d20 <localMain+0x380>)
 80059dc:	78db      	ldrb	r3, [r3, #3]
 80059de:	3364      	adds	r3, #100	; 0x64
 80059e0:	4ace      	ldr	r2, [pc, #824]	; (8005d1c <localMain+0x37c>)
 80059e2:	6153      	str	r3, [r2, #20]
//	testTime.tm_wday = zellerCongruence(10, 10, 2022);
//	testTime.tm_yday = 10;
	mktime(&testTime);
 80059e4:	48cd      	ldr	r0, [pc, #820]	; (8005d1c <localMain+0x37c>)
 80059e6:	f00c fc55 	bl	8012294 <mktime>

	char textBuffer[50] = {0};
 80059ea:	2300      	movs	r3, #0
 80059ec:	667b      	str	r3, [r7, #100]	; 0x64
 80059ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80059f2:	222e      	movs	r2, #46	; 0x2e
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f00c fb6c 	bl	80120d4 <memset>
	char textBuffer2[50] = {0};
 80059fc:	2300      	movs	r3, #0
 80059fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005a00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a04:	222e      	movs	r2, #46	; 0x2e
 8005a06:	2100      	movs	r1, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f00c fb63 	bl	80120d4 <memset>
	uint8_t shiftedWeekDay = (testTime.tm_wday+7-1)%7+1;
 8005a0e:	4bc3      	ldr	r3, [pc, #780]	; (8005d1c <localMain+0x37c>)
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	1d9a      	adds	r2, r3, #6
 8005a14:	4bc3      	ldr	r3, [pc, #780]	; (8005d24 <localMain+0x384>)
 8005a16:	fb83 1302 	smull	r1, r3, r3, r2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	1099      	asrs	r1, r3, #2
 8005a1e:	17d3      	asrs	r3, r2, #31
 8005a20:	1ac9      	subs	r1, r1, r3
 8005a22:	460b      	mov	r3, r1
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	1a5b      	subs	r3, r3, r1
 8005a28:	1ad1      	subs	r1, r2, r3
 8005a2a:	b2cb      	uxtb	r3, r1
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	uint8_t weekOfTheYear = (testTime.tm_yday+1+7-shiftedWeekDay)/7;
 8005a32:	4bba      	ldr	r3, [pc, #744]	; (8005d1c <localMain+0x37c>)
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	f103 0208 	add.w	r2, r3, #8
 8005a3a:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	4ab8      	ldr	r2, [pc, #736]	; (8005d24 <localMain+0x384>)
 8005a42:	fb82 1203 	smull	r1, r2, r2, r3
 8005a46:	441a      	add	r2, r3
 8005a48:	1092      	asrs	r2, r2, #2
 8005a4a:	17db      	asrs	r3, r3, #31
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
	sprintf(&textBuffer, "week %d day %d", weekOfTheYear, testTime.tm_yday+1);
 8005a52:	f897 20f6 	ldrb.w	r2, [r7, #246]	; 0xf6
 8005a56:	4bb1      	ldr	r3, [pc, #708]	; (8005d1c <localMain+0x37c>)
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8005a60:	49b1      	ldr	r1, [pc, #708]	; (8005d28 <localMain+0x388>)
 8005a62:	f00d fc65 	bl	8013330 <siprintf>
	lcdPutStr(10, 10, textBuffer, font_12_zekton);
 8005a66:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005a6a:	4bb0      	ldr	r3, [pc, #704]	; (8005d2c <localMain+0x38c>)
 8005a6c:	210a      	movs	r1, #10
 8005a6e:	200a      	movs	r0, #10
 8005a70:	f7fd fa48 	bl	8002f04 <lcdPutStr>

	sprintf(&textBuffer, asctime(&testTime));
 8005a74:	48a9      	ldr	r0, [pc, #676]	; (8005d1c <localMain+0x37c>)
 8005a76:	f00c fa65 	bl	8011f44 <asctime>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005a80:	4611      	mov	r1, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f00d fc54 	bl	8013330 <siprintf>
	lcdPutStr(170, 10, textBuffer, smallestFont);
 8005a88:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005a8c:	4ba8      	ldr	r3, [pc, #672]	; (8005d30 <localMain+0x390>)
 8005a8e:	210a      	movs	r1, #10
 8005a90:	20aa      	movs	r0, #170	; 0xaa
 8005a92:	f7fd fa37 	bl	8002f04 <lcdPutStr>
	strftime(&textBuffer, 40, "%Z day:%j week:%U", &testTime);
 8005a96:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8005a9a:	4ba0      	ldr	r3, [pc, #640]	; (8005d1c <localMain+0x37c>)
 8005a9c:	4aa5      	ldr	r2, [pc, #660]	; (8005d34 <localMain+0x394>)
 8005a9e:	2128      	movs	r1, #40	; 0x28
 8005aa0:	f00e fa18 	bl	8013ed4 <strftime>
	lcdPutStr(170, 22, textBuffer, smallestFont);
 8005aa4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005aa8:	4ba1      	ldr	r3, [pc, #644]	; (8005d30 <localMain+0x390>)
 8005aaa:	2116      	movs	r1, #22
 8005aac:	20aa      	movs	r0, #170	; 0xaa
 8005aae:	f7fd fa29 	bl	8002f04 <lcdPutStr>

	uint8_t hhour = testTime.tm_hour;
 8005ab2:	4b9a      	ldr	r3, [pc, #616]	; (8005d1c <localMain+0x37c>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
	uint8_t mmin = testTime.tm_min;
 8005aba:	4b98      	ldr	r3, [pc, #608]	; (8005d1c <localMain+0x37c>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
	uint8_t ssec = testTime.tm_sec;
 8005ac2:	4b96      	ldr	r3, [pc, #600]	; (8005d1c <localMain+0x37c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
//	int GLOBAL_timezone = 2;		// [h] east+ west-
	int dayOfTheYear = testTime.tm_yday+1;
 8005aca:	4b94      	ldr	r3, [pc, #592]	; (8005d1c <localMain+0x37c>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// fractional year = gamma [rad]
	float fyear = (2*M_PI/365)*(dayOfTheYear-1+(hhour-GLOBAL_timezone-12)/24);
 8005ad4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ad8:	1e5a      	subs	r2, r3, #1
 8005ada:	f897 10f5 	ldrb.w	r1, [r7, #245]	; 0xf5
 8005ade:	4b96      	ldr	r3, [pc, #600]	; (8005d38 <localMain+0x398>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	1acb      	subs	r3, r1, r3
 8005ae4:	3b0c      	subs	r3, #12
 8005ae6:	4995      	ldr	r1, [pc, #596]	; (8005d3c <localMain+0x39c>)
 8005ae8:	fb81 0103 	smull	r0, r1, r1, r3
 8005aec:	1089      	asrs	r1, r1, #2
 8005aee:	17db      	asrs	r3, r3, #31
 8005af0:	1acb      	subs	r3, r1, r3
 8005af2:	4413      	add	r3, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fa fd35 	bl	8000564 <__aeabi_i2d>
 8005afa:	a371      	add	r3, pc, #452	; (adr r3, 8005cc0 <localMain+0x320>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f7fa fd9a 	bl	8000638 <__aeabi_dmul>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	f7fb f88c 	bl	8000c28 <__aeabi_d2f>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	// equation of time [min]
	float eqtime = 229.18*(0.000075+0.001868*cos(fyear)-0.032077*sin(fyear)-0.014615*cos(2*fyear)-0.040849*sin(2*fyear));
 8005b16:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005b1a:	f7fa fd35 	bl	8000588 <__aeabi_f2d>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	ec43 2b10 	vmov	d0, r2, r3
 8005b26:	f012 fc7b 	bl	8018420 <cos>
 8005b2a:	ec51 0b10 	vmov	r0, r1, d0
 8005b2e:	a366      	add	r3, pc, #408	; (adr r3, 8005cc8 <localMain+0x328>)
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f7fa fd80 	bl	8000638 <__aeabi_dmul>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	a363      	add	r3, pc, #396	; (adr r3, 8005cd0 <localMain+0x330>)
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f7fa fbc1 	bl	80002cc <__adddf3>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4614      	mov	r4, r2
 8005b50:	461d      	mov	r5, r3
 8005b52:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005b56:	f7fa fd17 	bl	8000588 <__aeabi_f2d>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	ec43 2b10 	vmov	d0, r2, r3
 8005b62:	f012 fcb1 	bl	80184c8 <sin>
 8005b66:	ec51 0b10 	vmov	r0, r1, d0
 8005b6a:	a35b      	add	r3, pc, #364	; (adr r3, 8005cd8 <localMain+0x338>)
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f7fa fd62 	bl	8000638 <__aeabi_dmul>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4620      	mov	r0, r4
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	f7fa fba4 	bl	80002c8 <__aeabi_dsub>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4614      	mov	r4, r2
 8005b86:	461d      	mov	r5, r3
 8005b88:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8005b8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b90:	ee17 0a90 	vmov	r0, s15
 8005b94:	f7fa fcf8 	bl	8000588 <__aeabi_f2d>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	ec43 2b10 	vmov	d0, r2, r3
 8005ba0:	f012 fc3e 	bl	8018420 <cos>
 8005ba4:	ec51 0b10 	vmov	r0, r1, d0
 8005ba8:	a34d      	add	r3, pc, #308	; (adr r3, 8005ce0 <localMain+0x340>)
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	f7fa fd43 	bl	8000638 <__aeabi_dmul>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	4629      	mov	r1, r5
 8005bba:	f7fa fb85 	bl	80002c8 <__aeabi_dsub>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4614      	mov	r4, r2
 8005bc4:	461d      	mov	r5, r3
 8005bc6:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8005bca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005bce:	ee17 0a90 	vmov	r0, s15
 8005bd2:	f7fa fcd9 	bl	8000588 <__aeabi_f2d>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	ec43 2b10 	vmov	d0, r2, r3
 8005bde:	f012 fc73 	bl	80184c8 <sin>
 8005be2:	ec51 0b10 	vmov	r0, r1, d0
 8005be6:	a340      	add	r3, pc, #256	; (adr r3, 8005ce8 <localMain+0x348>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f7fa fd24 	bl	8000638 <__aeabi_dmul>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	f7fa fb66 	bl	80002c8 <__aeabi_dsub>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4610      	mov	r0, r2
 8005c02:	4619      	mov	r1, r3
 8005c04:	a33a      	add	r3, pc, #232	; (adr r3, 8005cf0 <localMain+0x350>)
 8005c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0a:	f7fa fd15 	bl	8000638 <__aeabi_dmul>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4610      	mov	r0, r2
 8005c14:	4619      	mov	r1, r3
 8005c16:	f7fb f807 	bl	8000c28 <__aeabi_d2f>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	// solar declination angle [rad]
	float decl = 0.006918-0.399912*cos(fyear)+0.070257*sin(fyear)-0.006758*cos(2*fyear)+0.000907*sin(2*fyear)-0.002697*cos(3*fyear)+0.00148*sin(3*fyear);
 8005c20:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005c24:	f7fa fcb0 	bl	8000588 <__aeabi_f2d>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	ec43 2b10 	vmov	d0, r2, r3
 8005c30:	f012 fbf6 	bl	8018420 <cos>
 8005c34:	ec51 0b10 	vmov	r0, r1, d0
 8005c38:	a32f      	add	r3, pc, #188	; (adr r3, 8005cf8 <localMain+0x358>)
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	f7fa fcfb 	bl	8000638 <__aeabi_dmul>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	a12e      	add	r1, pc, #184	; (adr r1, 8005d00 <localMain+0x360>)
 8005c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c4c:	f7fa fb3c 	bl	80002c8 <__aeabi_dsub>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	461d      	mov	r5, r3
 8005c58:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005c5c:	f7fa fc94 	bl	8000588 <__aeabi_f2d>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	ec43 2b10 	vmov	d0, r2, r3
 8005c68:	f012 fc2e 	bl	80184c8 <sin>
 8005c6c:	ec51 0b10 	vmov	r0, r1, d0
 8005c70:	a325      	add	r3, pc, #148	; (adr r3, 8005d08 <localMain+0x368>)
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	f7fa fcdf 	bl	8000638 <__aeabi_dmul>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4620      	mov	r0, r4
 8005c80:	4629      	mov	r1, r5
 8005c82:	f7fa fb23 	bl	80002cc <__adddf3>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4614      	mov	r4, r2
 8005c8c:	461d      	mov	r5, r3
 8005c8e:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8005c92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c96:	ee17 0a90 	vmov	r0, s15
 8005c9a:	f7fa fc75 	bl	8000588 <__aeabi_f2d>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	ec43 2b10 	vmov	d0, r2, r3
 8005ca6:	f012 fbbb 	bl	8018420 <cos>
 8005caa:	ec51 0b10 	vmov	r0, r1, d0
 8005cae:	a318      	add	r3, pc, #96	; (adr r3, 8005d10 <localMain+0x370>)
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	f7fa fcc0 	bl	8000638 <__aeabi_dmul>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	e03f      	b.n	8005d40 <localMain+0x3a0>
 8005cc0:	d4b3ac9a 	.word	0xd4b3ac9a
 8005cc4:	3f91a099 	.word	0x3f91a099
 8005cc8:	ba2be059 	.word	0xba2be059
 8005ccc:	3f5e9af5 	.word	0x3f5e9af5
 8005cd0:	30553261 	.word	0x30553261
 8005cd4:	3f13a92a 	.word	0x3f13a92a
 8005cd8:	83e8576d 	.word	0x83e8576d
 8005cdc:	3fa06c65 	.word	0x3fa06c65
 8005ce0:	183f91e6 	.word	0x183f91e6
 8005ce4:	3f8dee78 	.word	0x3f8dee78
 8005ce8:	fe260b2d 	.word	0xfe260b2d
 8005cec:	3fa4ea28 	.word	0x3fa4ea28
 8005cf0:	8f5c28f6 	.word	0x8f5c28f6
 8005cf4:	406ca5c2 	.word	0x406ca5c2
 8005cf8:	8051c9f7 	.word	0x8051c9f7
 8005cfc:	3fd99828 	.word	0x3fd99828
 8005d00:	7c0f4517 	.word	0x7c0f4517
 8005d04:	3f7c560c 	.word	0x3f7c560c
 8005d08:	dd50a88f 	.word	0xdd50a88f
 8005d0c:	3fb1fc5c 	.word	0x3fb1fc5c
 8005d10:	cfc829d0 	.word	0xcfc829d0
 8005d14:	3f7bae46 	.word	0x3f7bae46
 8005d18:	200057c0 	.word	0x200057c0
 8005d1c:	20005d1c 	.word	0x20005d1c
 8005d20:	200057d4 	.word	0x200057d4
 8005d24:	92492493 	.word	0x92492493
 8005d28:	0801b548 	.word	0x0801b548
 8005d2c:	08026968 	.word	0x08026968
 8005d30:	080264ec 	.word	0x080264ec
 8005d34:	0801b558 	.word	0x0801b558
 8005d38:	20000178 	.word	0x20000178
 8005d3c:	2aaaaaab 	.word	0x2aaaaaab
 8005d40:	4629      	mov	r1, r5
 8005d42:	f7fa fac1 	bl	80002c8 <__aeabi_dsub>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4614      	mov	r4, r2
 8005d4c:	461d      	mov	r5, r3
 8005d4e:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8005d52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d56:	ee17 0a90 	vmov	r0, s15
 8005d5a:	f7fa fc15 	bl	8000588 <__aeabi_f2d>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	ec43 2b10 	vmov	d0, r2, r3
 8005d66:	f012 fbaf 	bl	80184c8 <sin>
 8005d6a:	ec51 0b10 	vmov	r0, r1, d0
 8005d6e:	a35c      	add	r3, pc, #368	; (adr r3, 8005ee0 <localMain+0x540>)
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f7fa fc60 	bl	8000638 <__aeabi_dmul>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	4629      	mov	r1, r5
 8005d80:	f7fa faa4 	bl	80002cc <__adddf3>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4614      	mov	r4, r2
 8005d8a:	461d      	mov	r5, r3
 8005d8c:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8005d90:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d98:	ee17 0a90 	vmov	r0, s15
 8005d9c:	f7fa fbf4 	bl	8000588 <__aeabi_f2d>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	ec43 2b10 	vmov	d0, r2, r3
 8005da8:	f012 fb3a 	bl	8018420 <cos>
 8005dac:	ec51 0b10 	vmov	r0, r1, d0
 8005db0:	a34d      	add	r3, pc, #308	; (adr r3, 8005ee8 <localMain+0x548>)
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	f7fa fc3f 	bl	8000638 <__aeabi_dmul>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	f7fa fa81 	bl	80002c8 <__aeabi_dsub>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4614      	mov	r4, r2
 8005dcc:	461d      	mov	r5, r3
 8005dce:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8005dd2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dda:	ee17 0a90 	vmov	r0, s15
 8005dde:	f7fa fbd3 	bl	8000588 <__aeabi_f2d>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	ec43 2b10 	vmov	d0, r2, r3
 8005dea:	f012 fb6d 	bl	80184c8 <sin>
 8005dee:	ec51 0b10 	vmov	r0, r1, d0
 8005df2:	a33f      	add	r3, pc, #252	; (adr r3, 8005ef0 <localMain+0x550>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f7fa fc1e 	bl	8000638 <__aeabi_dmul>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4620      	mov	r0, r4
 8005e02:	4629      	mov	r1, r5
 8005e04:	f7fa fa62 	bl	80002cc <__adddf3>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4619      	mov	r1, r3
 8005e10:	f7fa ff0a 	bl	8000c28 <__aeabi_d2f>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	double longitude; 	// [deg]
	double latitude;	// [deg]
	if(location.hasFix){
 8005e1a:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <localMain+0x538>)
 8005e1c:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d069      	beq.n	8005ef8 <localMain+0x558>
		longitude = (double)location.longitudeDeg+location.longitudeMin/60; 	// [deg]
 8005e24:	4b2c      	ldr	r3, [pc, #176]	; (8005ed8 <localMain+0x538>)
 8005e26:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fa fb8a 	bl	8000544 <__aeabi_ui2d>
 8005e30:	4604      	mov	r4, r0
 8005e32:	460d      	mov	r5, r1
 8005e34:	4b28      	ldr	r3, [pc, #160]	; (8005ed8 <localMain+0x538>)
 8005e36:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	4b27      	ldr	r3, [pc, #156]	; (8005edc <localMain+0x53c>)
 8005e40:	f7fa fd24 	bl	800088c <__aeabi_ddiv>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4620      	mov	r0, r4
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	f7fa fa3e 	bl	80002cc <__adddf3>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
		latitude = (double)location.latitudeDeg+location.latitudeMin/60;	// [deg]
 8005e58:	4b1f      	ldr	r3, [pc, #124]	; (8005ed8 <localMain+0x538>)
 8005e5a:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fa fb70 	bl	8000544 <__aeabi_ui2d>
 8005e64:	4604      	mov	r4, r0
 8005e66:	460d      	mov	r5, r1
 8005e68:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <localMain+0x538>)
 8005e6a:	e9d3 0158 	ldrd	r0, r1, [r3, #352]	; 0x160
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <localMain+0x53c>)
 8005e74:	f7fa fd0a 	bl	800088c <__aeabi_ddiv>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	4629      	mov	r1, r5
 8005e80:	f7fa fa24 	bl	80002cc <__adddf3>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
		if(location.n_s == 'S') longitude = longitude*(-1);
 8005e8c:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <localMain+0x538>)
 8005e8e:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8005e92:	2b53      	cmp	r3, #83	; 0x53
 8005e94:	d10b      	bne.n	8005eae <localMain+0x50e>
 8005e96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ea0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	ed97 7b02 	vldr	d7, [r7, #8]
 8005eaa:	ed87 7b42 	vstr	d7, [r7, #264]	; 0x108
		if(location.w_e == 'W') latitude = latitude*(-1);
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <localMain+0x538>)
 8005eb0:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 8005eb4:	2b57      	cmp	r3, #87	; 0x57
 8005eb6:	d147      	bne.n	8005f48 <localMain+0x5a8>
 8005eb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ebc:	603b      	str	r3, [r7, #0]
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	ed97 7b00 	vldr	d7, [r7]
 8005ecc:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
 8005ed0:	e03a      	b.n	8005f48 <localMain+0x5a8>
 8005ed2:	bf00      	nop
 8005ed4:	f3af 8000 	nop.w
 8005ed8:	20005648 	.word	0x20005648
 8005edc:	404e0000 	.word	0x404e0000
 8005ee0:	ab324852 	.word	0xab324852
 8005ee4:	3f4db877 	.word	0x3f4db877
 8005ee8:	d9839475 	.word	0xd9839475
 8005eec:	3f661804 	.word	0x3f661804
 8005ef0:	e646f156 	.word	0xe646f156
 8005ef4:	3f583f91 	.word	0x3f583f91
	} else {
		longitude = 17; 	// [deg]
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	4be0      	ldr	r3, [pc, #896]	; (8006280 <localMain+0x8e0>)
 8005efe:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
		latitude = 51;	// [deg]
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	4bdf      	ldr	r3, [pc, #892]	; (8006284 <localMain+0x8e4>)
 8005f08:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
		if(longitude>=0) location.n_s = 'N';
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8005f18:	f7fa fe14 	bl	8000b44 <__aeabi_dcmpge>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <localMain+0x58a>
 8005f22:	4bd9      	ldr	r3, [pc, #868]	; (8006288 <localMain+0x8e8>)
 8005f24:	224e      	movs	r2, #78	; 0x4e
 8005f26:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		if(latitude>=0) location.w_e = 'E';
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8005f36:	f7fa fe05 	bl	8000b44 <__aeabi_dcmpge>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <localMain+0x5a8>
 8005f40:	4bd1      	ldr	r3, [pc, #836]	; (8006288 <localMain+0x8e8>)
 8005f42:	2245      	movs	r2, #69	; 0x45
 8005f44:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	}
	sprintf(&textBuffer, "%c %.3f ", location.n_s, latitude);
 8005f48:	4bcf      	ldr	r3, [pc, #828]	; (8006288 <localMain+0x8e8>)
 8005f4a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8005f54:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8005f58:	e9cd 2300 	strd	r2, r3, [sp]
 8005f5c:	460a      	mov	r2, r1
 8005f5e:	49cb      	ldr	r1, [pc, #812]	; (800628c <localMain+0x8ec>)
 8005f60:	f00d f9e6 	bl	8013330 <siprintf>
	lcdPutStr(170, 34, textBuffer, smallestFont);
 8005f64:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005f68:	4bc9      	ldr	r3, [pc, #804]	; (8006290 <localMain+0x8f0>)
 8005f6a:	2122      	movs	r1, #34	; 0x22
 8005f6c:	20aa      	movs	r0, #170	; 0xaa
 8005f6e:	f7fc ffc9 	bl	8002f04 <lcdPutStr>
	sprintf(&textBuffer, "%c %.3f", location.w_e, longitude);
 8005f72:	4bc5      	ldr	r3, [pc, #788]	; (8006288 <localMain+0x8e8>)
 8005f74:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
 8005f78:	4619      	mov	r1, r3
 8005f7a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8005f7e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8005f82:	e9cd 2300 	strd	r2, r3, [sp]
 8005f86:	460a      	mov	r2, r1
 8005f88:	49c2      	ldr	r1, [pc, #776]	; (8006294 <localMain+0x8f4>)
 8005f8a:	f00d f9d1 	bl	8013330 <siprintf>
	lcdPutStr(170, 46, textBuffer, smallestFont);
 8005f8e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005f92:	4bbf      	ldr	r3, [pc, #764]	; (8006290 <localMain+0x8f0>)
 8005f94:	212e      	movs	r1, #46	; 0x2e
 8005f96:	20aa      	movs	r0, #170	; 0xaa
 8005f98:	f7fc ffb4 	bl	8002f04 <lcdPutStr>

	float time_off = eqtime+4*longitude-60*GLOBAL_timezone; // time offset [min]
 8005f9c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8005fa0:	f7fa faf2 	bl	8000588 <__aeabi_f2d>
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	460d      	mov	r5, r1
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	4bba      	ldr	r3, [pc, #744]	; (8006298 <localMain+0x8f8>)
 8005fae:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8005fb2:	f7fa fb41 	bl	8000638 <__aeabi_dmul>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4620      	mov	r0, r4
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	f7fa f985 	bl	80002cc <__adddf3>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4614      	mov	r4, r2
 8005fc8:	461d      	mov	r5, r3
 8005fca:	4bb4      	ldr	r3, [pc, #720]	; (800629c <localMain+0x8fc>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fa fac4 	bl	8000564 <__aeabi_i2d>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	f7fa f970 	bl	80002c8 <__aeabi_dsub>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4610      	mov	r0, r2
 8005fee:	4619      	mov	r1, r3
 8005ff0:	f7fa fe1a 	bl	8000c28 <__aeabi_d2f>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	float tst = hhour*60+mmin+(float)ssec/60+time_off; // true solar time [min]
 8005ffa:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
 8005ffe:	4613      	mov	r3, r2
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	461a      	mov	r2, r3
 8006008:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800600c:	4413      	add	r3, r2
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006016:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006022:	ed9f 6a9f 	vldr	s12, [pc, #636]	; 80062a0 <localMain+0x900>
 8006026:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800602a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800602e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8006032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006036:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
	// solar hour angle [deg]
	float sha = (tst/4)-180;
 800603a:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 800603e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006046:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80062a4 <localMain+0x904>
 800604a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800604e:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	// solar zenith angle = phi [rad]
	float cosphi = sin(latitude*M_PI/180)*sin(decl)+cos(latitude*M_PI/180)*cos(decl)*cos(sha*M_PI/180);
 8006052:	a389      	add	r3, pc, #548	; (adr r3, 8006278 <localMain+0x8d8>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 800605c:	f7fa faec 	bl	8000638 <__aeabi_dmul>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4610      	mov	r0, r2
 8006066:	4619      	mov	r1, r3
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	4b8e      	ldr	r3, [pc, #568]	; (80062a8 <localMain+0x908>)
 800606e:	f7fa fc0d 	bl	800088c <__aeabi_ddiv>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	ec43 2b17 	vmov	d7, r2, r3
 800607a:	eeb0 0a47 	vmov.f32	s0, s14
 800607e:	eef0 0a67 	vmov.f32	s1, s15
 8006082:	f012 fa21 	bl	80184c8 <sin>
 8006086:	ec55 4b10 	vmov	r4, r5, d0
 800608a:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800608e:	f7fa fa7b 	bl	8000588 <__aeabi_f2d>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	ec43 2b10 	vmov	d0, r2, r3
 800609a:	f012 fa15 	bl	80184c8 <sin>
 800609e:	ec53 2b10 	vmov	r2, r3, d0
 80060a2:	4620      	mov	r0, r4
 80060a4:	4629      	mov	r1, r5
 80060a6:	f7fa fac7 	bl	8000638 <__aeabi_dmul>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4614      	mov	r4, r2
 80060b0:	461d      	mov	r5, r3
 80060b2:	a371      	add	r3, pc, #452	; (adr r3, 8006278 <localMain+0x8d8>)
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80060bc:	f7fa fabc 	bl	8000638 <__aeabi_dmul>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4610      	mov	r0, r2
 80060c6:	4619      	mov	r1, r3
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	4b76      	ldr	r3, [pc, #472]	; (80062a8 <localMain+0x908>)
 80060ce:	f7fa fbdd 	bl	800088c <__aeabi_ddiv>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	ec43 2b17 	vmov	d7, r2, r3
 80060da:	eeb0 0a47 	vmov.f32	s0, s14
 80060de:	eef0 0a67 	vmov.f32	s1, s15
 80060e2:	f012 f99d 	bl	8018420 <cos>
 80060e6:	ec59 8b10 	vmov	r8, r9, d0
 80060ea:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80060ee:	f7fa fa4b 	bl	8000588 <__aeabi_f2d>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	ec43 2b10 	vmov	d0, r2, r3
 80060fa:	f012 f991 	bl	8018420 <cos>
 80060fe:	ec53 2b10 	vmov	r2, r3, d0
 8006102:	4640      	mov	r0, r8
 8006104:	4649      	mov	r1, r9
 8006106:	f7fa fa97 	bl	8000638 <__aeabi_dmul>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4690      	mov	r8, r2
 8006110:	4699      	mov	r9, r3
 8006112:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8006116:	f7fa fa37 	bl	8000588 <__aeabi_f2d>
 800611a:	a357      	add	r3, pc, #348	; (adr r3, 8006278 <localMain+0x8d8>)
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f7fa fa8a 	bl	8000638 <__aeabi_dmul>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4610      	mov	r0, r2
 800612a:	4619      	mov	r1, r3
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	4b5d      	ldr	r3, [pc, #372]	; (80062a8 <localMain+0x908>)
 8006132:	f7fa fbab 	bl	800088c <__aeabi_ddiv>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	ec43 2b17 	vmov	d7, r2, r3
 800613e:	eeb0 0a47 	vmov.f32	s0, s14
 8006142:	eef0 0a67 	vmov.f32	s1, s15
 8006146:	f012 f96b 	bl	8018420 <cos>
 800614a:	ec53 2b10 	vmov	r2, r3, d0
 800614e:	4640      	mov	r0, r8
 8006150:	4649      	mov	r1, r9
 8006152:	f7fa fa71 	bl	8000638 <__aeabi_dmul>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4620      	mov	r0, r4
 800615c:	4629      	mov	r1, r5
 800615e:	f7fa f8b5 	bl	80002cc <__adddf3>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4610      	mov	r0, r2
 8006168:	4619      	mov	r1, r3
 800616a:	f7fa fd5d 	bl	8000c28 <__aeabi_d2f>
 800616e:	4603      	mov	r3, r0
 8006170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float phi = acos(cosphi);
 8006174:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8006178:	f7fa fa06 	bl	8000588 <__aeabi_f2d>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	ec43 2b10 	vmov	d0, r2, r3
 8006184:	f012 fa2c 	bl	80185e0 <acos>
 8006188:	ec53 2b10 	vmov	r2, r3, d0
 800618c:	4610      	mov	r0, r2
 800618e:	4619      	mov	r1, r3
 8006190:	f7fa fd4a 	bl	8000c28 <__aeabi_d2f>
 8006194:	4603      	mov	r3, r0
 8006196:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	float sinphi = sqrt(1-cosphi*cosphi);
 800619a:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800619e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061aa:	ee17 0a90 	vmov	r0, s15
 80061ae:	f7fa f9eb 	bl	8000588 <__aeabi_f2d>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	ec43 2b10 	vmov	d0, r2, r3
 80061ba:	f012 fab5 	bl	8018728 <sqrt>
 80061be:	ec53 2b10 	vmov	r2, r3, d0
 80061c2:	4610      	mov	r0, r2
 80061c4:	4619      	mov	r1, r3
 80061c6:	f7fa fd2f 	bl	8000c28 <__aeabi_d2f>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	// solar azimuth = theta [rad]
	float sa = -acos(-(sin(latitude*M_PI/180)*cosphi-sin(decl))/(cos(latitude*M_PI/180)*sinphi));
 80061d0:	a329      	add	r3, pc, #164	; (adr r3, 8006278 <localMain+0x8d8>)
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80061da:	f7fa fa2d 	bl	8000638 <__aeabi_dmul>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4610      	mov	r0, r2
 80061e4:	4619      	mov	r1, r3
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	4b2f      	ldr	r3, [pc, #188]	; (80062a8 <localMain+0x908>)
 80061ec:	f7fa fb4e 	bl	800088c <__aeabi_ddiv>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	ec43 2b17 	vmov	d7, r2, r3
 80061f8:	eeb0 0a47 	vmov.f32	s0, s14
 80061fc:	eef0 0a67 	vmov.f32	s1, s15
 8006200:	f012 f962 	bl	80184c8 <sin>
 8006204:	ec55 4b10 	vmov	r4, r5, d0
 8006208:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800620c:	f7fa f9bc 	bl	8000588 <__aeabi_f2d>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4620      	mov	r0, r4
 8006216:	4629      	mov	r1, r5
 8006218:	f7fa fa0e 	bl	8000638 <__aeabi_dmul>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4614      	mov	r4, r2
 8006222:	461d      	mov	r5, r3
 8006224:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8006228:	f7fa f9ae 	bl	8000588 <__aeabi_f2d>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	ec43 2b10 	vmov	d0, r2, r3
 8006234:	f012 f948 	bl	80184c8 <sin>
 8006238:	ec53 2b10 	vmov	r2, r3, d0
 800623c:	4620      	mov	r0, r4
 800623e:	4629      	mov	r1, r5
 8006240:	f7fa f842 	bl	80002c8 <__aeabi_dsub>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4692      	mov	sl, r2
 800624a:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800624e:	a30a      	add	r3, pc, #40	; (adr r3, 8006278 <localMain+0x8d8>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8006258:	f7fa f9ee 	bl	8000638 <__aeabi_dmul>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4610      	mov	r0, r2
 8006262:	4619      	mov	r1, r3
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <localMain+0x908>)
 800626a:	f7fa fb0f 	bl	800088c <__aeabi_ddiv>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	ec43 2b17 	vmov	d7, r2, r3
 8006276:	e019      	b.n	80062ac <localMain+0x90c>
 8006278:	54442d18 	.word	0x54442d18
 800627c:	400921fb 	.word	0x400921fb
 8006280:	40310000 	.word	0x40310000
 8006284:	40498000 	.word	0x40498000
 8006288:	20005648 	.word	0x20005648
 800628c:	0801b56c 	.word	0x0801b56c
 8006290:	080264ec 	.word	0x080264ec
 8006294:	0801b578 	.word	0x0801b578
 8006298:	40100000 	.word	0x40100000
 800629c:	20000178 	.word	0x20000178
 80062a0:	42700000 	.word	0x42700000
 80062a4:	43340000 	.word	0x43340000
 80062a8:	40668000 	.word	0x40668000
 80062ac:	eeb0 0a47 	vmov.f32	s0, s14
 80062b0:	eef0 0a67 	vmov.f32	s1, s15
 80062b4:	f012 f8b4 	bl	8018420 <cos>
 80062b8:	ec55 4b10 	vmov	r4, r5, d0
 80062bc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80062c0:	f7fa f962 	bl	8000588 <__aeabi_f2d>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4620      	mov	r0, r4
 80062ca:	4629      	mov	r1, r5
 80062cc:	f7fa f9b4 	bl	8000638 <__aeabi_dmul>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4650      	mov	r0, sl
 80062d6:	4659      	mov	r1, fp
 80062d8:	f7fa fad8 	bl	800088c <__aeabi_ddiv>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	ec43 2b17 	vmov	d7, r2, r3
 80062e4:	eeb0 0a47 	vmov.f32	s0, s14
 80062e8:	eef0 0a67 	vmov.f32	s1, s15
 80062ec:	f012 f978 	bl	80185e0 <acos>
 80062f0:	ec53 2b10 	vmov	r2, r3, d0
 80062f4:	4610      	mov	r0, r2
 80062f6:	4619      	mov	r1, r3
 80062f8:	f7fa fc96 	bl	8000c28 <__aeabi_d2f>
 80062fc:	4603      	mov	r3, r0
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef1 7a67 	vneg.f32	s15, s15
 8006306:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

	// setting for sunrise/sunset zenith angle [rad]
	double twilightType[] = {0.833, 6, 12, 18}; // twilight, civil, nautical, astronomical
 800630a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800630e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006312:	4ae7      	ldr	r2, [pc, #924]	; (80066b0 <localMain+0xd10>)
 8006314:	461c      	mov	r4, r3
 8006316:	4615      	mov	r5, r2
 8006318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800631a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800631c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006320:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double zenith = (90+twilightType[0])*M_PI/180;
 8006324:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006328:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800632c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	4bdf      	ldr	r3, [pc, #892]	; (80066b4 <localMain+0xd14>)
 8006336:	f7f9 ffc9 	bl	80002cc <__adddf3>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4610      	mov	r0, r2
 8006340:	4619      	mov	r1, r3
 8006342:	a3d9      	add	r3, pc, #868	; (adr r3, 80066a8 <localMain+0xd08>)
 8006344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006348:	f7fa f976 	bl	8000638 <__aeabi_dmul>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4610      	mov	r0, r2
 8006352:	4619      	mov	r1, r3
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	4bd7      	ldr	r3, [pc, #860]	; (80066b8 <localMain+0xd18>)
 800635a:	f7fa fa97 	bl	800088c <__aeabi_ddiv>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	// calculated hour angle [rad]
	float cha = acos(cos(zenith)/(cos(latitude*M_PI/180)*cos(decl))-tan(latitude*M_PI/180)*tan(decl));
 8006366:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800636a:	f012 f859 	bl	8018420 <cos>
 800636e:	ec55 4b10 	vmov	r4, r5, d0
 8006372:	a3cd      	add	r3, pc, #820	; (adr r3, 80066a8 <localMain+0xd08>)
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 800637c:	f7fa f95c 	bl	8000638 <__aeabi_dmul>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4610      	mov	r0, r2
 8006386:	4619      	mov	r1, r3
 8006388:	f04f 0200 	mov.w	r2, #0
 800638c:	4bca      	ldr	r3, [pc, #808]	; (80066b8 <localMain+0xd18>)
 800638e:	f7fa fa7d 	bl	800088c <__aeabi_ddiv>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	ec43 2b17 	vmov	d7, r2, r3
 800639a:	eeb0 0a47 	vmov.f32	s0, s14
 800639e:	eef0 0a67 	vmov.f32	s1, s15
 80063a2:	f012 f83d 	bl	8018420 <cos>
 80063a6:	ec59 8b10 	vmov	r8, r9, d0
 80063aa:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80063ae:	f7fa f8eb 	bl	8000588 <__aeabi_f2d>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	ec43 2b10 	vmov	d0, r2, r3
 80063ba:	f012 f831 	bl	8018420 <cos>
 80063be:	ec53 2b10 	vmov	r2, r3, d0
 80063c2:	4640      	mov	r0, r8
 80063c4:	4649      	mov	r1, r9
 80063c6:	f7fa f937 	bl	8000638 <__aeabi_dmul>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4620      	mov	r0, r4
 80063d0:	4629      	mov	r1, r5
 80063d2:	f7fa fa5b 	bl	800088c <__aeabi_ddiv>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4614      	mov	r4, r2
 80063dc:	461d      	mov	r5, r3
 80063de:	a3b2      	add	r3, pc, #712	; (adr r3, 80066a8 <localMain+0xd08>)
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80063e8:	f7fa f926 	bl	8000638 <__aeabi_dmul>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4610      	mov	r0, r2
 80063f2:	4619      	mov	r1, r3
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	4baf      	ldr	r3, [pc, #700]	; (80066b8 <localMain+0xd18>)
 80063fa:	f7fa fa47 	bl	800088c <__aeabi_ddiv>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	ec43 2b17 	vmov	d7, r2, r3
 8006406:	eeb0 0a47 	vmov.f32	s0, s14
 800640a:	eef0 0a67 	vmov.f32	s1, s15
 800640e:	f012 f8b3 	bl	8018578 <tan>
 8006412:	ec59 8b10 	vmov	r8, r9, d0
 8006416:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800641a:	f7fa f8b5 	bl	8000588 <__aeabi_f2d>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	ec43 2b10 	vmov	d0, r2, r3
 8006426:	f012 f8a7 	bl	8018578 <tan>
 800642a:	ec53 2b10 	vmov	r2, r3, d0
 800642e:	4640      	mov	r0, r8
 8006430:	4649      	mov	r1, r9
 8006432:	f7fa f901 	bl	8000638 <__aeabi_dmul>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4620      	mov	r0, r4
 800643c:	4629      	mov	r1, r5
 800643e:	f7f9 ff43 	bl	80002c8 <__aeabi_dsub>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	ec43 2b17 	vmov	d7, r2, r3
 800644a:	eeb0 0a47 	vmov.f32	s0, s14
 800644e:	eef0 0a67 	vmov.f32	s1, s15
 8006452:	f012 f8c5 	bl	80185e0 <acos>
 8006456:	ec53 2b10 	vmov	r2, r3, d0
 800645a:	4610      	mov	r0, r2
 800645c:	4619      	mov	r1, r3
 800645e:	f7fa fbe3 	bl	8000c28 <__aeabi_d2f>
 8006462:	4603      	mov	r3, r0
 8006464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	//sunrise/sunset/noon times [min]
	int sunrise = 720-4*(longitude+cha*180/M_PI)-eqtime+60*GLOBAL_timezone;
 8006468:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800646c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80066bc <localMain+0xd1c>
 8006470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006474:	ee17 0a90 	vmov	r0, s15
 8006478:	f7fa f886 	bl	8000588 <__aeabi_f2d>
 800647c:	a38a      	add	r3, pc, #552	; (adr r3, 80066a8 <localMain+0xd08>)
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f7fa fa03 	bl	800088c <__aeabi_ddiv>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4610      	mov	r0, r2
 800648c:	4619      	mov	r1, r3
 800648e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8006492:	f7f9 ff1b 	bl	80002cc <__adddf3>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4610      	mov	r0, r2
 800649c:	4619      	mov	r1, r3
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	4b87      	ldr	r3, [pc, #540]	; (80066c0 <localMain+0xd20>)
 80064a4:	f7fa f8c8 	bl	8000638 <__aeabi_dmul>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	f04f 0000 	mov.w	r0, #0
 80064b0:	4984      	ldr	r1, [pc, #528]	; (80066c4 <localMain+0xd24>)
 80064b2:	f7f9 ff09 	bl	80002c8 <__aeabi_dsub>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4614      	mov	r4, r2
 80064bc:	461d      	mov	r5, r3
 80064be:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80064c2:	f7fa f861 	bl	8000588 <__aeabi_f2d>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4620      	mov	r0, r4
 80064cc:	4629      	mov	r1, r5
 80064ce:	f7f9 fefb 	bl	80002c8 <__aeabi_dsub>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4614      	mov	r4, r2
 80064d8:	461d      	mov	r5, r3
 80064da:	4b7b      	ldr	r3, [pc, #492]	; (80066c8 <localMain+0xd28>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4613      	mov	r3, r2
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fa f83c 	bl	8000564 <__aeabi_i2d>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4620      	mov	r0, r4
 80064f2:	4629      	mov	r1, r5
 80064f4:	f7f9 feea 	bl	80002cc <__adddf3>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4610      	mov	r0, r2
 80064fe:	4619      	mov	r1, r3
 8006500:	f7fa fb4a 	bl	8000b98 <__aeabi_d2iz>
 8006504:	4603      	mov	r3, r0
 8006506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int sunset = 720-4*(longitude-cha*180/M_PI)-eqtime+60*GLOBAL_timezone;
 800650a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800650e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80066bc <localMain+0xd1c>
 8006512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006516:	ee17 0a90 	vmov	r0, s15
 800651a:	f7fa f835 	bl	8000588 <__aeabi_f2d>
 800651e:	a362      	add	r3, pc, #392	; (adr r3, 80066a8 <localMain+0xd08>)
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f7fa f9b2 	bl	800088c <__aeabi_ddiv>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8006530:	f7f9 feca 	bl	80002c8 <__aeabi_dsub>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4610      	mov	r0, r2
 800653a:	4619      	mov	r1, r3
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	4b5f      	ldr	r3, [pc, #380]	; (80066c0 <localMain+0xd20>)
 8006542:	f7fa f879 	bl	8000638 <__aeabi_dmul>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	f04f 0000 	mov.w	r0, #0
 800654e:	495d      	ldr	r1, [pc, #372]	; (80066c4 <localMain+0xd24>)
 8006550:	f7f9 feba 	bl	80002c8 <__aeabi_dsub>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4614      	mov	r4, r2
 800655a:	461d      	mov	r5, r3
 800655c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8006560:	f7fa f812 	bl	8000588 <__aeabi_f2d>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4620      	mov	r0, r4
 800656a:	4629      	mov	r1, r5
 800656c:	f7f9 feac 	bl	80002c8 <__aeabi_dsub>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4614      	mov	r4, r2
 8006576:	461d      	mov	r5, r3
 8006578:	4b53      	ldr	r3, [pc, #332]	; (80066c8 <localMain+0xd28>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	4613      	mov	r3, r2
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4618      	mov	r0, r3
 8006586:	f7f9 ffed 	bl	8000564 <__aeabi_i2d>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4620      	mov	r0, r4
 8006590:	4629      	mov	r1, r5
 8006592:	f7f9 fe9b 	bl	80002cc <__adddf3>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4610      	mov	r0, r2
 800659c:	4619      	mov	r1, r3
 800659e:	f7fa fafb 	bl	8000b98 <__aeabi_d2iz>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	int noon = 720-4*longitude-eqtime+60*GLOBAL_timezone;
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	4b44      	ldr	r3, [pc, #272]	; (80066c0 <localMain+0xd20>)
 80065ae:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 80065b2:	f7fa f841 	bl	8000638 <__aeabi_dmul>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	f04f 0000 	mov.w	r0, #0
 80065be:	4941      	ldr	r1, [pc, #260]	; (80066c4 <localMain+0xd24>)
 80065c0:	f7f9 fe82 	bl	80002c8 <__aeabi_dsub>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4614      	mov	r4, r2
 80065ca:	461d      	mov	r5, r3
 80065cc:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80065d0:	f7f9 ffda 	bl	8000588 <__aeabi_f2d>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4620      	mov	r0, r4
 80065da:	4629      	mov	r1, r5
 80065dc:	f7f9 fe74 	bl	80002c8 <__aeabi_dsub>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4614      	mov	r4, r2
 80065e6:	461d      	mov	r5, r3
 80065e8:	4b37      	ldr	r3, [pc, #220]	; (80066c8 <localMain+0xd28>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	1a9b      	subs	r3, r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7f9 ffb5 	bl	8000564 <__aeabi_i2d>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4620      	mov	r0, r4
 8006600:	4629      	mov	r1, r5
 8006602:	f7f9 fe63 	bl	80002cc <__adddf3>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4610      	mov	r0, r2
 800660c:	4619      	mov	r1, r3
 800660e:	f7fa fac3 	bl	8000b98 <__aeabi_d2iz>
 8006612:	4603      	mov	r3, r0
 8006614:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
//	sprintf(&textBuffer, "sa:%f cha:%f", sa, cha);
//	lcdPutStr(0, 210, textBuffer, smallestFont);

	// add atmospheric refraction
	// https://gml.noaa.gov/grad/solcalc/calcdetails.html
	sprintf(&textBuffer, "Sunrise: %02d:%02d", sunrise/60, sunrise%60);
 8006618:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800661c:	4a2b      	ldr	r2, [pc, #172]	; (80066cc <localMain+0xd2c>)
 800661e:	fb82 1203 	smull	r1, r2, r2, r3
 8006622:	441a      	add	r2, r3
 8006624:	1152      	asrs	r2, r2, #5
 8006626:	17db      	asrs	r3, r3, #31
 8006628:	1ad4      	subs	r4, r2, r3
 800662a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800662e:	4b27      	ldr	r3, [pc, #156]	; (80066cc <localMain+0xd2c>)
 8006630:	fb83 1302 	smull	r1, r3, r3, r2
 8006634:	4413      	add	r3, r2
 8006636:	1159      	asrs	r1, r3, #5
 8006638:	17d3      	asrs	r3, r2, #31
 800663a:	1ac9      	subs	r1, r1, r3
 800663c:	460b      	mov	r3, r1
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	1a5b      	subs	r3, r3, r1
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	1ad1      	subs	r1, r2, r3
 8006646:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800664a:	460b      	mov	r3, r1
 800664c:	4622      	mov	r2, r4
 800664e:	4920      	ldr	r1, [pc, #128]	; (80066d0 <localMain+0xd30>)
 8006650:	f00c fe6e 	bl	8013330 <siprintf>
	lcdPutStr(10, 28, textBuffer, font_12_zekton_bold);
 8006654:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006658:	4b1e      	ldr	r3, [pc, #120]	; (80066d4 <localMain+0xd34>)
 800665a:	211c      	movs	r1, #28
 800665c:	200a      	movs	r0, #10
 800665e:	f7fc fc51 	bl	8002f04 <lcdPutStr>
	sprintf(&textBuffer, "Noon: %02d:%02d", noon/60, noon%60);
 8006662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006666:	4a19      	ldr	r2, [pc, #100]	; (80066cc <localMain+0xd2c>)
 8006668:	fb82 1203 	smull	r1, r2, r2, r3
 800666c:	441a      	add	r2, r3
 800666e:	1152      	asrs	r2, r2, #5
 8006670:	17db      	asrs	r3, r3, #31
 8006672:	1ad4      	subs	r4, r2, r3
 8006674:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006678:	4b14      	ldr	r3, [pc, #80]	; (80066cc <localMain+0xd2c>)
 800667a:	fb83 1302 	smull	r1, r3, r3, r2
 800667e:	4413      	add	r3, r2
 8006680:	1159      	asrs	r1, r3, #5
 8006682:	17d3      	asrs	r3, r2, #31
 8006684:	1ac9      	subs	r1, r1, r3
 8006686:	460b      	mov	r3, r1
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	1a5b      	subs	r3, r3, r1
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	1ad1      	subs	r1, r2, r3
 8006690:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006694:	460b      	mov	r3, r1
 8006696:	4622      	mov	r2, r4
 8006698:	490f      	ldr	r1, [pc, #60]	; (80066d8 <localMain+0xd38>)
 800669a:	f00c fe49 	bl	8013330 <siprintf>
	lcdPutStr(10, 44, textBuffer, font_12_zekton_bold);
 800669e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80066a2:	e01b      	b.n	80066dc <localMain+0xd3c>
 80066a4:	f3af 8000 	nop.w
 80066a8:	54442d18 	.word	0x54442d18
 80066ac:	400921fb 	.word	0x400921fb
 80066b0:	0801b648 	.word	0x0801b648
 80066b4:	40568000 	.word	0x40568000
 80066b8:	40668000 	.word	0x40668000
 80066bc:	43340000 	.word	0x43340000
 80066c0:	40100000 	.word	0x40100000
 80066c4:	40868000 	.word	0x40868000
 80066c8:	20000178 	.word	0x20000178
 80066cc:	88888889 	.word	0x88888889
 80066d0:	0801b580 	.word	0x0801b580
 80066d4:	080273f0 	.word	0x080273f0
 80066d8:	0801b594 	.word	0x0801b594
 80066dc:	4b38      	ldr	r3, [pc, #224]	; (80067c0 <localMain+0xe20>)
 80066de:	212c      	movs	r1, #44	; 0x2c
 80066e0:	200a      	movs	r0, #10
 80066e2:	f7fc fc0f 	bl	8002f04 <lcdPutStr>
	sprintf(&textBuffer, "Sunset: %02d:%02d", sunset/60, sunset%60);
 80066e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066ea:	4a36      	ldr	r2, [pc, #216]	; (80067c4 <localMain+0xe24>)
 80066ec:	fb82 1203 	smull	r1, r2, r2, r3
 80066f0:	441a      	add	r2, r3
 80066f2:	1152      	asrs	r2, r2, #5
 80066f4:	17db      	asrs	r3, r3, #31
 80066f6:	1ad4      	subs	r4, r2, r3
 80066f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066fc:	4b31      	ldr	r3, [pc, #196]	; (80067c4 <localMain+0xe24>)
 80066fe:	fb83 1302 	smull	r1, r3, r3, r2
 8006702:	4413      	add	r3, r2
 8006704:	1159      	asrs	r1, r3, #5
 8006706:	17d3      	asrs	r3, r2, #31
 8006708:	1ac9      	subs	r1, r1, r3
 800670a:	460b      	mov	r3, r1
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	1a5b      	subs	r3, r3, r1
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	1ad1      	subs	r1, r2, r3
 8006714:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006718:	460b      	mov	r3, r1
 800671a:	4622      	mov	r2, r4
 800671c:	492a      	ldr	r1, [pc, #168]	; (80067c8 <localMain+0xe28>)
 800671e:	f00c fe07 	bl	8013330 <siprintf>
	lcdPutStr(10, 60, textBuffer, font_12_zekton_bold);
 8006722:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006726:	4b26      	ldr	r3, [pc, #152]	; (80067c0 <localMain+0xe20>)
 8006728:	213c      	movs	r1, #60	; 0x3c
 800672a:	200a      	movs	r0, #10
 800672c:	f7fc fbea 	bl	8002f04 <lcdPutStr>

	sprintf(&textBuffer, "solar elevation angle: %02.3f deg", 90-phi*180/M_PI);
 8006730:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8006734:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80067d4 <localMain+0xe34>
 8006738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800673c:	ee17 0a90 	vmov	r0, s15
 8006740:	f7f9 ff22 	bl	8000588 <__aeabi_f2d>
 8006744:	a31c      	add	r3, pc, #112	; (adr r3, 80067b8 <localMain+0xe18>)
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	f7fa f89f 	bl	800088c <__aeabi_ddiv>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	491d      	ldr	r1, [pc, #116]	; (80067cc <localMain+0xe2c>)
 8006758:	f7f9 fdb6 	bl	80002c8 <__aeabi_dsub>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006764:	491a      	ldr	r1, [pc, #104]	; (80067d0 <localMain+0xe30>)
 8006766:	f00c fde3 	bl	8013330 <siprintf>
	lcdPutStr(10, 80, textBuffer, font_12_zekton_bold);
 800676a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800676e:	4b14      	ldr	r3, [pc, #80]	; (80067c0 <localMain+0xe20>)
 8006770:	2150      	movs	r1, #80	; 0x50
 8006772:	200a      	movs	r0, #10
 8006774:	f7fc fbc6 	bl	8002f04 <lcdPutStr>

	double saDeg;
	if(cha<0) saDeg = -sa*180/M_PI;
 8006778:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800677c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006784:	d528      	bpl.n	80067d8 <localMain+0xe38>
 8006786:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800678a:	eef1 7a67 	vneg.f32	s15, s15
 800678e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80067d4 <localMain+0xe34>
 8006792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006796:	ee17 0a90 	vmov	r0, s15
 800679a:	f7f9 fef5 	bl	8000588 <__aeabi_f2d>
 800679e:	a306      	add	r3, pc, #24	; (adr r3, 80067b8 <localMain+0xe18>)
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f7fa f872 	bl	800088c <__aeabi_ddiv>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
 80067b0:	e02e      	b.n	8006810 <localMain+0xe70>
 80067b2:	bf00      	nop
 80067b4:	f3af 8000 	nop.w
 80067b8:	54442d18 	.word	0x54442d18
 80067bc:	400921fb 	.word	0x400921fb
 80067c0:	080273f0 	.word	0x080273f0
 80067c4:	88888889 	.word	0x88888889
 80067c8:	0801b5a4 	.word	0x0801b5a4
 80067cc:	40568000 	.word	0x40568000
 80067d0:	0801b5b8 	.word	0x0801b5b8
 80067d4:	43340000 	.word	0x43340000
	else saDeg = 360+sa*180/M_PI;
 80067d8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80067dc:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80067d4 <localMain+0xe34>
 80067e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067e4:	ee17 0a90 	vmov	r0, s15
 80067e8:	f7f9 fece 	bl	8000588 <__aeabi_f2d>
 80067ec:	a3db      	add	r3, pc, #876	; (adr r3, 8006b5c <localMain+0x11bc>)
 80067ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f2:	f7fa f84b 	bl	800088c <__aeabi_ddiv>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4610      	mov	r0, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	4bcb      	ldr	r3, [pc, #812]	; (8006b30 <localMain+0x1190>)
 8006804:	f7f9 fd62 	bl	80002cc <__adddf3>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", saDeg);
 8006810:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006814:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8006818:	49c6      	ldr	r1, [pc, #792]	; (8006b34 <localMain+0x1194>)
 800681a:	f00c fd89 	bl	8013330 <siprintf>
//	sprintf(&textBuffer, "solar azimuth angle: %02.3f deg", fmod(360+sa*180/M_PI, 360));
	lcdPutStr(10, 96, textBuffer, font_12_zekton_bold);
 800681e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006822:	4bc5      	ldr	r3, [pc, #788]	; (8006b38 <localMain+0x1198>)
 8006824:	2160      	movs	r1, #96	; 0x60
 8006826:	200a      	movs	r0, #10
 8006828:	f7fc fb6c 	bl	8002f04 <lcdPutStr>

	double perc = (hhour*60+mmin+(double)ssec/60-sunrise)*100/(sunset-sunrise);
 800682c:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
 8006830:	4613      	mov	r3, r2
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	461a      	mov	r2, r3
 800683a:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800683e:	4413      	add	r3, r2
 8006840:	4618      	mov	r0, r3
 8006842:	f7f9 fe8f 	bl	8000564 <__aeabi_i2d>
 8006846:	4604      	mov	r4, r0
 8006848:	460d      	mov	r5, r1
 800684a:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800684e:	4618      	mov	r0, r3
 8006850:	f7f9 fe78 	bl	8000544 <__aeabi_ui2d>
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	4bb8      	ldr	r3, [pc, #736]	; (8006b3c <localMain+0x119c>)
 800685a:	f7fa f817 	bl	800088c <__aeabi_ddiv>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4620      	mov	r0, r4
 8006864:	4629      	mov	r1, r5
 8006866:	f7f9 fd31 	bl	80002cc <__adddf3>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4614      	mov	r4, r2
 8006870:	461d      	mov	r5, r3
 8006872:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8006876:	f7f9 fe75 	bl	8000564 <__aeabi_i2d>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	4620      	mov	r0, r4
 8006880:	4629      	mov	r1, r5
 8006882:	f7f9 fd21 	bl	80002c8 <__aeabi_dsub>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4610      	mov	r0, r2
 800688c:	4619      	mov	r1, r3
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	4bab      	ldr	r3, [pc, #684]	; (8006b40 <localMain+0x11a0>)
 8006894:	f7f9 fed0 	bl	8000638 <__aeabi_dmul>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4614      	mov	r4, r2
 800689e:	461d      	mov	r5, r3
 80068a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7f9 fe5a 	bl	8000564 <__aeabi_i2d>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7f9 ffe8 	bl	800088c <__aeabi_ddiv>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	sprintf(&textBuffer, "percentage daylight: %2.3f%%", perc);
 80068c4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80068c8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80068cc:	499d      	ldr	r1, [pc, #628]	; (8006b44 <localMain+0x11a4>)
 80068ce:	f00c fd2f 	bl	8013330 <siprintf>
	lcdPutStr(10, 116, textBuffer, font_12_zekton_bold);
 80068d2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80068d6:	4b98      	ldr	r3, [pc, #608]	; (8006b38 <localMain+0x1198>)
 80068d8:	2174      	movs	r1, #116	; 0x74
 80068da:	200a      	movs	r0, #10
 80068dc:	f7fc fb12 	bl	8002f04 <lcdPutStr>
	sprintf(&textBuffer, "day length: %02dh %02dmin", (sunset-sunrise)/60, (sunset-sunrise)%60);
 80068e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	4a97      	ldr	r2, [pc, #604]	; (8006b48 <localMain+0x11a8>)
 80068ec:	fb82 1203 	smull	r1, r2, r2, r3
 80068f0:	441a      	add	r2, r3
 80068f2:	1152      	asrs	r2, r2, #5
 80068f4:	17db      	asrs	r3, r3, #31
 80068f6:	1ad4      	subs	r4, r2, r3
 80068f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006900:	1ad2      	subs	r2, r2, r3
 8006902:	4b91      	ldr	r3, [pc, #580]	; (8006b48 <localMain+0x11a8>)
 8006904:	fb83 1302 	smull	r1, r3, r3, r2
 8006908:	4413      	add	r3, r2
 800690a:	1159      	asrs	r1, r3, #5
 800690c:	17d3      	asrs	r3, r2, #31
 800690e:	1ac9      	subs	r1, r1, r3
 8006910:	460b      	mov	r3, r1
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	1a5b      	subs	r3, r3, r1
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	1ad1      	subs	r1, r2, r3
 800691a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800691e:	460b      	mov	r3, r1
 8006920:	4622      	mov	r2, r4
 8006922:	498a      	ldr	r1, [pc, #552]	; (8006b4c <localMain+0x11ac>)
 8006924:	f00c fd04 	bl	8013330 <siprintf>
	lcdPutStr(10, 132, textBuffer, font_12_zekton_bold);
 8006928:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800692c:	4b82      	ldr	r3, [pc, #520]	; (8006b38 <localMain+0x1198>)
 800692e:	2184      	movs	r1, #132	; 0x84
 8006930:	200a      	movs	r0, #10
 8006932:	f7fc fae7 	bl	8002f04 <lcdPutStr>

	uint16_t scaleXrise = 10+380*sunrise/(24*60-0);
 8006936:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800693a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800693e:	fb02 f303 	mul.w	r3, r2, r3
 8006942:	4a83      	ldr	r2, [pc, #524]	; (8006b50 <localMain+0x11b0>)
 8006944:	fb82 1203 	smull	r1, r2, r2, r3
 8006948:	441a      	add	r2, r3
 800694a:	1292      	asrs	r2, r2, #10
 800694c:	17db      	asrs	r3, r3, #31
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	b29b      	uxth	r3, r3
 8006952:	330a      	adds	r3, #10
 8006954:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint16_t scaleXset = 10+380*sunset/(24*60-0);
 8006958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800695c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8006960:	fb02 f303 	mul.w	r3, r2, r3
 8006964:	4a7a      	ldr	r2, [pc, #488]	; (8006b50 <localMain+0x11b0>)
 8006966:	fb82 1203 	smull	r1, r2, r2, r3
 800696a:	441a      	add	r2, r3
 800696c:	1292      	asrs	r2, r2, #10
 800696e:	17db      	asrs	r3, r3, #31
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	b29b      	uxth	r3, r3
 8006974:	330a      	adds	r3, #10
 8006976:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	uint16_t scaleXnoon = 10+380*noon/(24*60-0);
 800697a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800697e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8006982:	fb02 f303 	mul.w	r3, r2, r3
 8006986:	4a72      	ldr	r2, [pc, #456]	; (8006b50 <localMain+0x11b0>)
 8006988:	fb82 1203 	smull	r1, r2, r2, r3
 800698c:	441a      	add	r2, r3
 800698e:	1292      	asrs	r2, r2, #10
 8006990:	17db      	asrs	r3, r3, #31
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	b29b      	uxth	r3, r3
 8006996:	330a      	adds	r3, #10
 8006998:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t scaleXnow = 10+380*(hhour*60+mmin)/(24*60-0);
 800699c:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
 80069a0:	4613      	mov	r3, r2
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	1a9b      	subs	r3, r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	461a      	mov	r2, r3
 80069aa:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 80069ae:	4413      	add	r3, r2
 80069b0:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80069b4:	fb02 f303 	mul.w	r3, r2, r3
 80069b8:	4a65      	ldr	r2, [pc, #404]	; (8006b50 <localMain+0x11b0>)
 80069ba:	fb82 1203 	smull	r1, r2, r2, r3
 80069be:	441a      	add	r2, r3
 80069c0:	1292      	asrs	r2, r2, #10
 80069c2:	17db      	asrs	r3, r3, #31
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	330a      	adds	r3, #10
 80069ca:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	lcdHLine(10,399-10,165,1);
 80069ce:	2301      	movs	r3, #1
 80069d0:	22a5      	movs	r2, #165	; 0xa5
 80069d2:	f240 1185 	movw	r1, #389	; 0x185
 80069d6:	200a      	movs	r0, #10
 80069d8:	f7fc ff50 	bl	800387c <lcdHLine>
	lcdVLine(10, 163, 167, 1);
 80069dc:	2301      	movs	r3, #1
 80069de:	22a7      	movs	r2, #167	; 0xa7
 80069e0:	21a3      	movs	r1, #163	; 0xa3
 80069e2:	200a      	movs	r0, #10
 80069e4:	f7fc fb0e 	bl	8003004 <lcdVLine>
	lcdVLine(399-10, 163, 167, 1);
 80069e8:	2301      	movs	r3, #1
 80069ea:	22a7      	movs	r2, #167	; 0xa7
 80069ec:	21a3      	movs	r1, #163	; 0xa3
 80069ee:	f240 1085 	movw	r0, #389	; 0x185
 80069f2:	f7fc fb07 	bl	8003004 <lcdVLine>
	lcdVLine(scaleXrise, 160, 170, 2);
 80069f6:	f8b7 009e 	ldrh.w	r0, [r7, #158]	; 0x9e
 80069fa:	2302      	movs	r3, #2
 80069fc:	22aa      	movs	r2, #170	; 0xaa
 80069fe:	21a0      	movs	r1, #160	; 0xa0
 8006a00:	f7fc fb00 	bl	8003004 <lcdVLine>
	lcdVLine(scaleXset, 160, 170, 2);
 8006a04:	f8b7 009c 	ldrh.w	r0, [r7, #156]	; 0x9c
 8006a08:	2302      	movs	r3, #2
 8006a0a:	22aa      	movs	r2, #170	; 0xaa
 8006a0c:	21a0      	movs	r1, #160	; 0xa0
 8006a0e:	f7fc faf9 	bl	8003004 <lcdVLine>
	lcdVLine(scaleXnoon, 160, 170, 2);
 8006a12:	f8b7 009a 	ldrh.w	r0, [r7, #154]	; 0x9a
 8006a16:	2302      	movs	r3, #2
 8006a18:	22aa      	movs	r2, #170	; 0xaa
 8006a1a:	21a0      	movs	r1, #160	; 0xa0
 8006a1c:	f7fc faf2 	bl	8003004 <lcdVLine>
	lcdVLine(scaleXnow, 155, 175, 2);
 8006a20:	f8b7 0098 	ldrh.w	r0, [r7, #152]	; 0x98
 8006a24:	2302      	movs	r3, #2
 8006a26:	22af      	movs	r2, #175	; 0xaf
 8006a28:	219b      	movs	r1, #155	; 0x9b
 8006a2a:	f7fc faeb 	bl	8003004 <lcdVLine>

	sprintf(&textBuffer, "%02d:%02d", sunrise/60, sunrise%60);
 8006a2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a32:	4a45      	ldr	r2, [pc, #276]	; (8006b48 <localMain+0x11a8>)
 8006a34:	fb82 1203 	smull	r1, r2, r2, r3
 8006a38:	441a      	add	r2, r3
 8006a3a:	1152      	asrs	r2, r2, #5
 8006a3c:	17db      	asrs	r3, r3, #31
 8006a3e:	1ad4      	subs	r4, r2, r3
 8006a40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a44:	4b40      	ldr	r3, [pc, #256]	; (8006b48 <localMain+0x11a8>)
 8006a46:	fb83 1302 	smull	r1, r3, r3, r2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	1159      	asrs	r1, r3, #5
 8006a4e:	17d3      	asrs	r3, r2, #31
 8006a50:	1ac9      	subs	r1, r1, r3
 8006a52:	460b      	mov	r3, r1
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	1a5b      	subs	r3, r3, r1
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	1ad1      	subs	r1, r2, r3
 8006a5c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006a60:	460b      	mov	r3, r1
 8006a62:	4622      	mov	r2, r4
 8006a64:	493b      	ldr	r1, [pc, #236]	; (8006b54 <localMain+0x11b4>)
 8006a66:	f00c fc63 	bl	8013330 <siprintf>
	lcdPutStr(scaleXrise-19, 170, textBuffer, smallestFont);
 8006a6a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006a6e:	3b13      	subs	r3, #19
 8006a70:	b298      	uxth	r0, r3
 8006a72:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006a76:	4b38      	ldr	r3, [pc, #224]	; (8006b58 <localMain+0x11b8>)
 8006a78:	21aa      	movs	r1, #170	; 0xaa
 8006a7a:	f7fc fa43 	bl	8002f04 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", sunset/60, sunset%60);
 8006a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a82:	4a31      	ldr	r2, [pc, #196]	; (8006b48 <localMain+0x11a8>)
 8006a84:	fb82 1203 	smull	r1, r2, r2, r3
 8006a88:	441a      	add	r2, r3
 8006a8a:	1152      	asrs	r2, r2, #5
 8006a8c:	17db      	asrs	r3, r3, #31
 8006a8e:	1ad4      	subs	r4, r2, r3
 8006a90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a94:	4b2c      	ldr	r3, [pc, #176]	; (8006b48 <localMain+0x11a8>)
 8006a96:	fb83 1302 	smull	r1, r3, r3, r2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	1159      	asrs	r1, r3, #5
 8006a9e:	17d3      	asrs	r3, r2, #31
 8006aa0:	1ac9      	subs	r1, r1, r3
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	1a5b      	subs	r3, r3, r1
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	1ad1      	subs	r1, r2, r3
 8006aac:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	4927      	ldr	r1, [pc, #156]	; (8006b54 <localMain+0x11b4>)
 8006ab6:	f00c fc3b 	bl	8013330 <siprintf>
	lcdPutStr(scaleXset-19, 170, textBuffer, smallestFont);
 8006aba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006abe:	3b13      	subs	r3, #19
 8006ac0:	b298      	uxth	r0, r3
 8006ac2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006ac6:	4b24      	ldr	r3, [pc, #144]	; (8006b58 <localMain+0x11b8>)
 8006ac8:	21aa      	movs	r1, #170	; 0xaa
 8006aca:	f7fc fa1b 	bl	8002f04 <lcdPutStr>
	sprintf(&textBuffer, "%02d:%02d", noon/60, noon%60);
 8006ace:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ad2:	4a1d      	ldr	r2, [pc, #116]	; (8006b48 <localMain+0x11a8>)
 8006ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8006ad8:	441a      	add	r2, r3
 8006ada:	1152      	asrs	r2, r2, #5
 8006adc:	17db      	asrs	r3, r3, #31
 8006ade:	1ad4      	subs	r4, r2, r3
 8006ae0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ae4:	4b18      	ldr	r3, [pc, #96]	; (8006b48 <localMain+0x11a8>)
 8006ae6:	fb83 1302 	smull	r1, r3, r3, r2
 8006aea:	4413      	add	r3, r2
 8006aec:	1159      	asrs	r1, r3, #5
 8006aee:	17d3      	asrs	r3, r2, #31
 8006af0:	1ac9      	subs	r1, r1, r3
 8006af2:	460b      	mov	r3, r1
 8006af4:	011b      	lsls	r3, r3, #4
 8006af6:	1a5b      	subs	r3, r3, r1
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	1ad1      	subs	r1, r2, r3
 8006afc:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8006b00:	460b      	mov	r3, r1
 8006b02:	4622      	mov	r2, r4
 8006b04:	4913      	ldr	r1, [pc, #76]	; (8006b54 <localMain+0x11b4>)
 8006b06:	f00c fc13 	bl	8013330 <siprintf>
	lcdPutStr(scaleXnoon-19, 170, textBuffer, smallestFont);
 8006b0a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006b0e:	3b13      	subs	r3, #19
 8006b10:	b298      	uxth	r0, r3
 8006b12:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006b16:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <localMain+0x11b8>)
 8006b18:	21aa      	movs	r1, #170	; 0xaa
 8006b1a:	f7fc f9f3 	bl	8002f04 <lcdPutStr>
}
 8006b1e:	bf00      	nop
 8006b20:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006b24:	46bd      	mov	sp, r7
 8006b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b2a:	bf00      	nop
 8006b2c:	f3af 8000 	nop.w
 8006b30:	40768000 	.word	0x40768000
 8006b34:	0801b5dc 	.word	0x0801b5dc
 8006b38:	080273f0 	.word	0x080273f0
 8006b3c:	404e0000 	.word	0x404e0000
 8006b40:	40590000 	.word	0x40590000
 8006b44:	0801b5fc 	.word	0x0801b5fc
 8006b48:	88888889 	.word	0x88888889
 8006b4c:	0801b61c 	.word	0x0801b61c
 8006b50:	b60b60b7 	.word	0xb60b60b7
 8006b54:	0801b638 	.word	0x0801b638
 8006b58:	080264ec 	.word	0x080264ec
 8006b5c:	54442d18 	.word	0x54442d18
 8006b60:	400921fb 	.word	0x400921fb

08006b64 <setDefaultClbcks>:
#include "sdcardModule.h"
#include "contextMenu.h"
#include "fonts/fonts.h"
#include "File_Handling.h"

static void setDefaultClbcks(void){
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
	// module callbacks
//	btn_B2.onSinglePressHandler = &showCntxMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <setDefaultClbcks+0x1c>)
 8006b6a:	4a06      	ldr	r2, [pc, #24]	; (8006b84 <setDefaultClbcks+0x20>)
 8006b6c:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006b6e:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <setDefaultClbcks+0x24>)
 8006b70:	4a06      	ldr	r2, [pc, #24]	; (8006b8c <setDefaultClbcks+0x28>)
 8006b72:	611a      	str	r2, [r3, #16]
}
 8006b74:	bf00      	nop
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	20002630 	.word	0x20002630
 8006b84:	08002a69 	.word	0x08002a69
 8006b88:	20002678 	.word	0x20002678
 8006b8c:	08002a79 	.word	0x08002a79

08006b90 <sdcardSetup>:
//static const struct ContextAction action2 = {"Unmount SD card", &setDateAction};
//static const struct ContextAction action3 = {"Customize", &setTimeAction};
//static const struct ContextAction action4 = {"Lock", &setTimeAction};
//static const struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void sdcardSetup(void){
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006b94:	f7ff ffe6 	bl	8006b64 <setDefaultClbcks>
//	setupCntxMenu(&setDefaultClbcks);
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 8006b98:	bf00      	nop
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <sdcardMain>:
void sdcardMain(void){
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b0a8      	sub	sp, #160	; 0xa0
 8006ba0:	af00      	add	r7, sp, #0
	char title[50] = {0};
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ba6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006baa:	222e      	movs	r2, #46	; 0x2e
 8006bac:	2100      	movs	r1, #0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f00b fa90 	bl	80120d4 <memset>
	sprintf(&title, "SD card explorer");
 8006bb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006bb8:	492f      	ldr	r1, [pc, #188]	; (8006c78 <sdcardMain+0xdc>)
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f00c fbb8 	bl	8013330 <siprintf>
	lcdPutStr(0, 0, title, smallestFont);
 8006bc0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006bc4:	4b2d      	ldr	r3, [pc, #180]	; (8006c7c <sdcardMain+0xe0>)
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	2000      	movs	r0, #0
 8006bca:	f7fc f99b 	bl	8002f04 <lcdPutStr>
	char freeTotal[50];
	Check_SD_Space(&freeTotal);
 8006bce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fa fccc 	bl	8001570 <Check_SD_Space>
	sprintf(&title, "Free/total space: %s [kB]", freeTotal);
 8006bd8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006bdc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006be0:	4927      	ldr	r1, [pc, #156]	; (8006c80 <sdcardMain+0xe4>)
 8006be2:	4618      	mov	r0, r3
 8006be4:	f00c fba4 	bl	8013330 <siprintf>
	lcdPutStr(0, 12, title, smallestFont);
 8006be8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006bec:	4b23      	ldr	r3, [pc, #140]	; (8006c7c <sdcardMain+0xe0>)
 8006bee:	210c      	movs	r1, #12
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	f7fc f987 	bl	8002f04 <lcdPutStr>

    DIR dir;
	UINT i;
	char *path = malloc(20*sizeof (char));
 8006bf6:	2014      	movs	r0, #20
 8006bf8:	f00b fa4e 	bl	8012098 <malloc>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	sprintf (path, "%s","/");
 8006c02:	4a20      	ldr	r2, [pc, #128]	; (8006c84 <sdcardMain+0xe8>)
 8006c04:	4920      	ldr	r1, [pc, #128]	; (8006c88 <sdcardMain+0xec>)
 8006c06:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006c0a:	f00c fb91 	bl	8013330 <siprintf>
    f_opendir(&dir, path);                       /* Open the directory */
 8006c0e:	463b      	mov	r3, r7
 8006c10:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006c14:	4618      	mov	r0, r3
 8006c16:	f00a fe68 	bl	80118ea <f_opendir>
	for(uint8_t i = 1; i<10; i++){
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8006c20:	e01a      	b.n	8006c58 <sdcardMain+0xbc>
		Scan_SD_my(&dir, &title);
 8006c22:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006c26:	463b      	mov	r3, r7
 8006c28:	4611      	mov	r1, r2
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fa fa36 	bl	800109c <Scan_SD_my>
		lcdPutStr(0, 12+i*12, title, smallestFont);
 8006c30:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006c34:	3301      	adds	r3, #1
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	0052      	lsls	r2, r2, #1
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	b2d9      	uxtb	r1, r3
 8006c42:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006c46:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <sdcardMain+0xe0>)
 8006c48:	2000      	movs	r0, #0
 8006c4a:	f7fc f95b 	bl	8002f04 <lcdPutStr>
	for(uint8_t i = 1; i<10; i++){
 8006c4e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006c52:	3301      	adds	r3, #1
 8006c54:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8006c58:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006c5c:	2b09      	cmp	r3, #9
 8006c5e:	d9e0      	bls.n	8006c22 <sdcardMain+0x86>
	}
	f_closedir(&dir);
 8006c60:	463b      	mov	r3, r7
 8006c62:	4618      	mov	r0, r3
 8006c64:	f00a feb4 	bl	80119d0 <f_closedir>
    free(path);
 8006c68:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006c6c:	f00b fa1c 	bl	80120a8 <free>

//	lcdPutStr(0,60, fileText, smallestFont);
//	lcdRefresh();
//	enableCntxMenu();
}
 8006c70:	bf00      	nop
 8006c72:	37a0      	adds	r7, #160	; 0xa0
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	0801b720 	.word	0x0801b720
 8006c7c:	08027e78 	.word	0x08027e78
 8006c80:	0801b734 	.word	0x0801b734
 8006c84:	0801b750 	.word	0x0801b750
 8006c88:	0801b754 	.word	0x0801b754

08006c8c <prevPage>:
//#include "fonts/zekton24.h"

uint8_t currentPage = 0;
uint8_t PAGES_NUM = 6;

void prevPage(void){
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
	if(currentPage>0){
 8006c90:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <prevPage+0x30>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d006      	beq.n	8006ca6 <prevPage+0x1a>
		currentPage--;
 8006c98:	4b08      	ldr	r3, [pc, #32]	; (8006cbc <prevPage+0x30>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <prevPage+0x30>)
 8006ca2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 8006ca4:	e005      	b.n	8006cb2 <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 8006ca6:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <prevPage+0x34>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	4b03      	ldr	r3, [pc, #12]	; (8006cbc <prevPage+0x30>)
 8006cb0:	701a      	strb	r2, [r3, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	20005d40 	.word	0x20005d40
 8006cc0:	200001bf 	.word	0x200001bf

08006cc4 <nextPage>:
void nextPage(void){
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <nextPage+0x34>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <nextPage+0x38>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	da06      	bge.n	8006ce6 <nextPage+0x22>
		currentPage++;
 8006cd8:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <nextPage+0x34>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <nextPage+0x34>)
 8006ce2:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 8006ce4:	e002      	b.n	8006cec <nextPage+0x28>
		currentPage=0;
 8006ce6:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <nextPage+0x34>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	701a      	strb	r2, [r3, #0]
}
 8006cec:	bf00      	nop
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	20005d40 	.word	0x20005d40
 8006cfc:	200001bf 	.word	0x200001bf

08006d00 <showPage1>:

void showPage1(void){
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b092      	sub	sp, #72	; 0x48
 8006d04:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 8006d06:	2300      	movs	r3, #0
 8006d08:	623b      	str	r3, [r7, #32]
 8006d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	605a      	str	r2, [r3, #4]
 8006d14:	609a      	str	r2, [r3, #8]
 8006d16:	60da      	str	r2, [r3, #12]
 8006d18:	611a      	str	r2, [r3, #16]
 8006d1a:	615a      	str	r2, [r3, #20]
 8006d1c:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 8006d1e:	2300      	movs	r3, #0
 8006d20:	603b      	str	r3, [r7, #0]
 8006d22:	1d3b      	adds	r3, r7, #4
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	605a      	str	r2, [r3, #4]
 8006d2a:	609a      	str	r2, [r3, #8]
 8006d2c:	60da      	str	r2, [r3, #12]
 8006d2e:	611a      	str	r2, [r3, #16]
 8006d30:	615a      	str	r2, [r3, #20]
 8006d32:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8006d34:	4b17      	ldr	r3, [pc, #92]	; (8006d94 <showPage1+0x94>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4b16      	ldr	r3, [pc, #88]	; (8006d94 <showPage1+0x94>)
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <showPage1+0x94>)
 8006d42:	789b      	ldrb	r3, [r3, #2]
 8006d44:	4638      	mov	r0, r7
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4913      	ldr	r1, [pc, #76]	; (8006d98 <showPage1+0x98>)
 8006d4c:	f00c faf0 	bl	8013330 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 8006d50:	463a      	mov	r2, r7
 8006d52:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <showPage1+0x9c>)
 8006d54:	210b      	movs	r1, #11
 8006d56:	200e      	movs	r0, #14
 8006d58:	f7fc f8d4 	bl	8002f04 <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	2227      	movs	r2, #39	; 0x27
 8006d60:	2106      	movs	r1, #6
 8006d62:	2001      	movs	r0, #1
 8006d64:	f7fc f94e 	bl	8003004 <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 8006d68:	2301      	movs	r3, #1
 8006d6a:	2228      	movs	r2, #40	; 0x28
 8006d6c:	2105      	movs	r1, #5
 8006d6e:	2002      	movs	r0, #2
 8006d70:	f7fc f948 	bl	8003004 <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 8006d74:	2301      	movs	r3, #1
 8006d76:	2228      	movs	r2, #40	; 0x28
 8006d78:	2105      	movs	r1, #5
 8006d7a:	2003      	movs	r0, #3
 8006d7c:	f7fc f942 	bl	8003004 <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 8006d80:	2301      	movs	r3, #1
 8006d82:	2227      	movs	r2, #39	; 0x27
 8006d84:	2106      	movs	r1, #6
 8006d86:	2004      	movs	r0, #4
 8006d88:	f7fc f93c 	bl	8003004 <lcdVLine>
}
 8006d8c:	bf00      	nop
 8006d8e:	3740      	adds	r7, #64	; 0x40
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	200057c0 	.word	0x200057c0
 8006d98:	0801b810 	.word	0x0801b810
 8006d9c:	0802cdec 	.word	0x0802cdec

08006da0 <showPage2>:
void showPage2(void){
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8006da6:	2300      	movs	r3, #0
 8006da8:	603b      	str	r3, [r7, #0]
 8006daa:	1d3b      	adds	r3, r7, #4
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	605a      	str	r2, [r3, #4]
 8006db2:	609a      	str	r2, [r3, #8]
 8006db4:	60da      	str	r2, [r3, #12]
 8006db6:	611a      	str	r2, [r3, #16]
 8006db8:	615a      	str	r2, [r3, #20]
 8006dba:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	4913      	ldr	r1, [pc, #76]	; (8006e0c <showPage2+0x6c>)
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f00c fab5 	bl	8013330 <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 8006dc6:	463a      	mov	r2, r7
 8006dc8:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <showPage2+0x70>)
 8006dca:	2132      	movs	r1, #50	; 0x32
 8006dcc:	200e      	movs	r0, #14
 8006dce:	f7fc f899 	bl	8002f04 <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	224e      	movs	r2, #78	; 0x4e
 8006dd6:	212d      	movs	r1, #45	; 0x2d
 8006dd8:	2001      	movs	r0, #1
 8006dda:	f7fc f913 	bl	8003004 <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8006dde:	2301      	movs	r3, #1
 8006de0:	224f      	movs	r2, #79	; 0x4f
 8006de2:	212c      	movs	r1, #44	; 0x2c
 8006de4:	2002      	movs	r0, #2
 8006de6:	f7fc f90d 	bl	8003004 <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8006dea:	2301      	movs	r3, #1
 8006dec:	224f      	movs	r2, #79	; 0x4f
 8006dee:	212c      	movs	r1, #44	; 0x2c
 8006df0:	2003      	movs	r0, #3
 8006df2:	f7fc f907 	bl	8003004 <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 8006df6:	2301      	movs	r3, #1
 8006df8:	224e      	movs	r2, #78	; 0x4e
 8006dfa:	212d      	movs	r1, #45	; 0x2d
 8006dfc:	2004      	movs	r0, #4
 8006dfe:	f7fc f901 	bl	8003004 <lcdVLine>
}
 8006e02:	bf00      	nop
 8006e04:	3720      	adds	r7, #32
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	0801b820 	.word	0x0801b820
 8006e10:	0802cdec 	.word	0x0802cdec

08006e14 <showPage3>:
void showPage3(void){
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	603b      	str	r3, [r7, #0]
 8006e1e:	1d3b      	adds	r3, r7, #4
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	605a      	str	r2, [r3, #4]
 8006e26:	609a      	str	r2, [r3, #8]
 8006e28:	60da      	str	r2, [r3, #12]
 8006e2a:	611a      	str	r2, [r3, #16]
 8006e2c:	615a      	str	r2, [r3, #20]
 8006e2e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 8006e30:	463b      	mov	r3, r7
 8006e32:	4913      	ldr	r1, [pc, #76]	; (8006e80 <showPage3+0x6c>)
 8006e34:	4618      	mov	r0, r3
 8006e36:	f00c fa7b 	bl	8013330 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8006e3a:	463a      	mov	r2, r7
 8006e3c:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <showPage3+0x70>)
 8006e3e:	2100      	movs	r1, #0
 8006e40:	2000      	movs	r0, #0
 8006e42:	f7fc f85f 	bl	8002f04 <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8006e46:	2301      	movs	r3, #1
 8006e48:	2275      	movs	r2, #117	; 0x75
 8006e4a:	2154      	movs	r1, #84	; 0x54
 8006e4c:	2001      	movs	r0, #1
 8006e4e:	f7fc f8d9 	bl	8003004 <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8006e52:	2301      	movs	r3, #1
 8006e54:	2276      	movs	r2, #118	; 0x76
 8006e56:	2153      	movs	r1, #83	; 0x53
 8006e58:	2002      	movs	r0, #2
 8006e5a:	f7fc f8d3 	bl	8003004 <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8006e5e:	2301      	movs	r3, #1
 8006e60:	2276      	movs	r2, #118	; 0x76
 8006e62:	2153      	movs	r1, #83	; 0x53
 8006e64:	2003      	movs	r0, #3
 8006e66:	f7fc f8cd 	bl	8003004 <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	2275      	movs	r2, #117	; 0x75
 8006e6e:	2154      	movs	r1, #84	; 0x54
 8006e70:	2004      	movs	r0, #4
 8006e72:	f7fc f8c7 	bl	8003004 <lcdVLine>
}
 8006e76:	bf00      	nop
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	0801b824 	.word	0x0801b824
 8006e84:	0802cdec 	.word	0x0802cdec

08006e88 <showPage4>:
void showPage4(void){
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8006e8e:	2300      	movs	r3, #0
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	1d3b      	adds	r3, r7, #4
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	605a      	str	r2, [r3, #4]
 8006e9a:	609a      	str	r2, [r3, #8]
 8006e9c:	60da      	str	r2, [r3, #12]
 8006e9e:	611a      	str	r2, [r3, #16]
 8006ea0:	615a      	str	r2, [r3, #20]
 8006ea2:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 8006ea4:	463b      	mov	r3, r7
 8006ea6:	4913      	ldr	r1, [pc, #76]	; (8006ef4 <showPage4+0x6c>)
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f00c fa41 	bl	8013330 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8006eae:	463a      	mov	r2, r7
 8006eb0:	4b11      	ldr	r3, [pc, #68]	; (8006ef8 <showPage4+0x70>)
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	f7fc f825 	bl	8002f04 <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8006eba:	2301      	movs	r3, #1
 8006ebc:	229c      	movs	r2, #156	; 0x9c
 8006ebe:	217b      	movs	r1, #123	; 0x7b
 8006ec0:	2001      	movs	r0, #1
 8006ec2:	f7fc f89f 	bl	8003004 <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	229d      	movs	r2, #157	; 0x9d
 8006eca:	217a      	movs	r1, #122	; 0x7a
 8006ecc:	2002      	movs	r0, #2
 8006ece:	f7fc f899 	bl	8003004 <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	229d      	movs	r2, #157	; 0x9d
 8006ed6:	217a      	movs	r1, #122	; 0x7a
 8006ed8:	2003      	movs	r0, #3
 8006eda:	f7fc f893 	bl	8003004 <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8006ede:	2301      	movs	r3, #1
 8006ee0:	229c      	movs	r2, #156	; 0x9c
 8006ee2:	217b      	movs	r1, #123	; 0x7b
 8006ee4:	2004      	movs	r0, #4
 8006ee6:	f7fc f88d 	bl	8003004 <lcdVLine>
}
 8006eea:	bf00      	nop
 8006eec:	3720      	adds	r7, #32
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	0801b830 	.word	0x0801b830
 8006ef8:	0802cdec 	.word	0x0802cdec

08006efc <showPage5>:
void showPage5(void){
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b088      	sub	sp, #32
 8006f00:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8006f02:	2300      	movs	r3, #0
 8006f04:	603b      	str	r3, [r7, #0]
 8006f06:	1d3b      	adds	r3, r7, #4
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	605a      	str	r2, [r3, #4]
 8006f0e:	609a      	str	r2, [r3, #8]
 8006f10:	60da      	str	r2, [r3, #12]
 8006f12:	611a      	str	r2, [r3, #16]
 8006f14:	615a      	str	r2, [r3, #20]
 8006f16:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 8006f18:	463b      	mov	r3, r7
 8006f1a:	4925      	ldr	r1, [pc, #148]	; (8006fb0 <showPage5+0xb4>)
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f00c fa07 	bl	8013330 <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 8006f22:	463a      	mov	r2, r7
 8006f24:	4b23      	ldr	r3, [pc, #140]	; (8006fb4 <showPage5+0xb8>)
 8006f26:	2100      	movs	r1, #0
 8006f28:	200a      	movs	r0, #10
 8006f2a:	f7fb ffeb 	bl	8002f04 <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 8006f2e:	463a      	mov	r2, r7
 8006f30:	4b21      	ldr	r3, [pc, #132]	; (8006fb8 <showPage5+0xbc>)
 8006f32:	210f      	movs	r1, #15
 8006f34:	200a      	movs	r0, #10
 8006f36:	f7fb ffe5 	bl	8002f04 <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 8006f3a:	463a      	mov	r2, r7
 8006f3c:	4b1f      	ldr	r3, [pc, #124]	; (8006fbc <showPage5+0xc0>)
 8006f3e:	2132      	movs	r1, #50	; 0x32
 8006f40:	200a      	movs	r0, #10
 8006f42:	f7fb ffdf 	bl	8002f04 <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 8006f46:	463a      	mov	r2, r7
 8006f48:	4b1d      	ldr	r3, [pc, #116]	; (8006fc0 <showPage5+0xc4>)
 8006f4a:	213c      	movs	r1, #60	; 0x3c
 8006f4c:	200a      	movs	r0, #10
 8006f4e:	f7fb ffd9 	bl	8002f04 <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 8006f52:	463a      	mov	r2, r7
 8006f54:	4b1b      	ldr	r3, [pc, #108]	; (8006fc4 <showPage5+0xc8>)
 8006f56:	215a      	movs	r1, #90	; 0x5a
 8006f58:	200a      	movs	r0, #10
 8006f5a:	f7fb ffd3 	bl	8002f04 <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 8006f5e:	463a      	mov	r2, r7
 8006f60:	4b19      	ldr	r3, [pc, #100]	; (8006fc8 <showPage5+0xcc>)
 8006f62:	2178      	movs	r1, #120	; 0x78
 8006f64:	200a      	movs	r0, #10
 8006f66:	f7fb ffcd 	bl	8002f04 <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 8006f6a:	463a      	mov	r2, r7
 8006f6c:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <showPage5+0xd0>)
 8006f6e:	2196      	movs	r1, #150	; 0x96
 8006f70:	200a      	movs	r0, #10
 8006f72:	f7fb ffc7 	bl	8002f04 <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8006f76:	2301      	movs	r3, #1
 8006f78:	22c3      	movs	r2, #195	; 0xc3
 8006f7a:	21a2      	movs	r1, #162	; 0xa2
 8006f7c:	2001      	movs	r0, #1
 8006f7e:	f7fc f841 	bl	8003004 <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8006f82:	2301      	movs	r3, #1
 8006f84:	22c4      	movs	r2, #196	; 0xc4
 8006f86:	21a1      	movs	r1, #161	; 0xa1
 8006f88:	2002      	movs	r0, #2
 8006f8a:	f7fc f83b 	bl	8003004 <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8006f8e:	2301      	movs	r3, #1
 8006f90:	22c4      	movs	r2, #196	; 0xc4
 8006f92:	21a1      	movs	r1, #161	; 0xa1
 8006f94:	2003      	movs	r0, #3
 8006f96:	f7fc f835 	bl	8003004 <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	22c3      	movs	r2, #195	; 0xc3
 8006f9e:	21a2      	movs	r1, #162	; 0xa2
 8006fa0:	2004      	movs	r0, #4
 8006fa2:	f7fc f82f 	bl	8003004 <lcdVLine>
}
 8006fa6:	bf00      	nop
 8006fa8:	3720      	adds	r7, #32
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	0801b83c 	.word	0x0801b83c
 8006fb4:	0802acdc 	.word	0x0802acdc
 8006fb8:	0802b824 	.word	0x0802b824
 8006fbc:	080282f4 	.word	0x080282f4
 8006fc0:	08028770 	.word	0x08028770
 8006fc4:	080297cc 	.word	0x080297cc
 8006fc8:	0802a254 	.word	0x0802a254
 8006fcc:	0802cdec 	.word	0x0802cdec

08006fd0 <showPage6>:
void showPage6(void){
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	22ea      	movs	r2, #234	; 0xea
 8006fda:	21c9      	movs	r1, #201	; 0xc9
 8006fdc:	2001      	movs	r0, #1
 8006fde:	f7fc f811 	bl	8003004 <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	22eb      	movs	r2, #235	; 0xeb
 8006fe6:	21c8      	movs	r1, #200	; 0xc8
 8006fe8:	2002      	movs	r0, #2
 8006fea:	f7fc f80b 	bl	8003004 <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8006fee:	2301      	movs	r3, #1
 8006ff0:	22eb      	movs	r2, #235	; 0xeb
 8006ff2:	21c8      	movs	r1, #200	; 0xc8
 8006ff4:	2003      	movs	r0, #3
 8006ff6:	f7fc f805 	bl	8003004 <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	22ea      	movs	r2, #234	; 0xea
 8006ffe:	21c9      	movs	r1, #201	; 0xc9
 8007000:	2004      	movs	r0, #4
 8007002:	f7fb ffff 	bl	8003004 <lcdVLine>
		lcdRect(0,399,25,80,1);
 8007006:	2301      	movs	r3, #1
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	2350      	movs	r3, #80	; 0x50
 800700c:	2219      	movs	r2, #25
 800700e:	f240 118f 	movw	r1, #399	; 0x18f
 8007012:	2000      	movs	r0, #0
 8007014:	f7fc fd88 	bl	8003b28 <lcdRect>
		lcdRect(0,399,120,180,1);
 8007018:	2301      	movs	r3, #1
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	23b4      	movs	r3, #180	; 0xb4
 800701e:	2278      	movs	r2, #120	; 0x78
 8007020:	f240 118f 	movw	r1, #399	; 0x18f
 8007024:	2000      	movs	r0, #0
 8007026:	f7fc fd7f 	bl	8003b28 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 800702a:	2301      	movs	r3, #1
 800702c:	9302      	str	r3, [sp, #8]
 800702e:	2300      	movs	r3, #0
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	2303      	movs	r3, #3
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	2332      	movs	r3, #50	; 0x32
 8007038:	220a      	movs	r2, #10
 800703a:	2132      	movs	r1, #50	; 0x32
 800703c:	200a      	movs	r0, #10
 800703e:	f7fc fd98 	bl	8003b72 <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 8007042:	2301      	movs	r3, #1
 8007044:	9302      	str	r3, [sp, #8]
 8007046:	2301      	movs	r3, #1
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	2303      	movs	r3, #3
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	2332      	movs	r3, #50	; 0x32
 8007050:	220a      	movs	r2, #10
 8007052:	2164      	movs	r1, #100	; 0x64
 8007054:	203c      	movs	r0, #60	; 0x3c
 8007056:	f7fc fd8c 	bl	8003b72 <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 800705a:	2301      	movs	r3, #1
 800705c:	9302      	str	r3, [sp, #8]
 800705e:	2302      	movs	r3, #2
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	2303      	movs	r3, #3
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	2332      	movs	r3, #50	; 0x32
 8007068:	220a      	movs	r2, #10
 800706a:	2196      	movs	r1, #150	; 0x96
 800706c:	206e      	movs	r0, #110	; 0x6e
 800706e:	f7fc fd80 	bl	8003b72 <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 8007072:	2301      	movs	r3, #1
 8007074:	9302      	str	r3, [sp, #8]
 8007076:	2303      	movs	r3, #3
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	2303      	movs	r3, #3
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	2332      	movs	r3, #50	; 0x32
 8007080:	220a      	movs	r2, #10
 8007082:	21c8      	movs	r1, #200	; 0xc8
 8007084:	20a0      	movs	r0, #160	; 0xa0
 8007086:	f7fc fd74 	bl	8003b72 <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 800708a:	2301      	movs	r3, #1
 800708c:	9302      	str	r3, [sp, #8]
 800708e:	2304      	movs	r3, #4
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	2303      	movs	r3, #3
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	2332      	movs	r3, #50	; 0x32
 8007098:	220a      	movs	r2, #10
 800709a:	21fa      	movs	r1, #250	; 0xfa
 800709c:	20d2      	movs	r0, #210	; 0xd2
 800709e:	f7fc fd68 	bl	8003b72 <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 80070a2:	2301      	movs	r3, #1
 80070a4:	9302      	str	r3, [sp, #8]
 80070a6:	2305      	movs	r3, #5
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	2303      	movs	r3, #3
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	2332      	movs	r3, #50	; 0x32
 80070b0:	220a      	movs	r2, #10
 80070b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80070b6:	f44f 7082 	mov.w	r0, #260	; 0x104
 80070ba:	f7fc fd5a 	bl	8003b72 <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 80070be:	2301      	movs	r3, #1
 80070c0:	9302      	str	r3, [sp, #8]
 80070c2:	2306      	movs	r3, #6
 80070c4:	9301      	str	r3, [sp, #4]
 80070c6:	2303      	movs	r3, #3
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	2332      	movs	r3, #50	; 0x32
 80070cc:	220a      	movs	r2, #10
 80070ce:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80070d2:	f44f 709b 	mov.w	r0, #310	; 0x136
 80070d6:	f7fc fd4c 	bl	8003b72 <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 80070da:	2301      	movs	r3, #1
 80070dc:	9302      	str	r3, [sp, #8]
 80070de:	2307      	movs	r3, #7
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	2303      	movs	r3, #3
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	2364      	movs	r3, #100	; 0x64
 80070e8:	223c      	movs	r2, #60	; 0x3c
 80070ea:	2132      	movs	r1, #50	; 0x32
 80070ec:	200a      	movs	r0, #10
 80070ee:	f7fc fd40 	bl	8003b72 <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 80070f2:	2301      	movs	r3, #1
 80070f4:	9302      	str	r3, [sp, #8]
 80070f6:	2308      	movs	r3, #8
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	2303      	movs	r3, #3
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	2364      	movs	r3, #100	; 0x64
 8007100:	223c      	movs	r2, #60	; 0x3c
 8007102:	2164      	movs	r1, #100	; 0x64
 8007104:	203c      	movs	r0, #60	; 0x3c
 8007106:	f7fc fd34 	bl	8003b72 <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 800710a:	2301      	movs	r3, #1
 800710c:	9302      	str	r3, [sp, #8]
 800710e:	2309      	movs	r3, #9
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	2303      	movs	r3, #3
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	2364      	movs	r3, #100	; 0x64
 8007118:	223c      	movs	r2, #60	; 0x3c
 800711a:	2196      	movs	r1, #150	; 0x96
 800711c:	206e      	movs	r0, #110	; 0x6e
 800711e:	f7fc fd28 	bl	8003b72 <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 8007122:	2301      	movs	r3, #1
 8007124:	9302      	str	r3, [sp, #8]
 8007126:	230a      	movs	r3, #10
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	2303      	movs	r3, #3
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	2364      	movs	r3, #100	; 0x64
 8007130:	223c      	movs	r2, #60	; 0x3c
 8007132:	21c8      	movs	r1, #200	; 0xc8
 8007134:	20a0      	movs	r0, #160	; 0xa0
 8007136:	f7fc fd1c 	bl	8003b72 <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 800713a:	2301      	movs	r3, #1
 800713c:	9302      	str	r3, [sp, #8]
 800713e:	230b      	movs	r3, #11
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	2303      	movs	r3, #3
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	2364      	movs	r3, #100	; 0x64
 8007148:	223c      	movs	r2, #60	; 0x3c
 800714a:	21fa      	movs	r1, #250	; 0xfa
 800714c:	20d2      	movs	r0, #210	; 0xd2
 800714e:	f7fc fd10 	bl	8003b72 <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 8007152:	2301      	movs	r3, #1
 8007154:	9302      	str	r3, [sp, #8]
 8007156:	230c      	movs	r3, #12
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	2303      	movs	r3, #3
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	2364      	movs	r3, #100	; 0x64
 8007160:	223c      	movs	r2, #60	; 0x3c
 8007162:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007166:	f44f 7082 	mov.w	r0, #260	; 0x104
 800716a:	f7fc fd02 	bl	8003b72 <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 800716e:	2301      	movs	r3, #1
 8007170:	9302      	str	r3, [sp, #8]
 8007172:	230d      	movs	r3, #13
 8007174:	9301      	str	r3, [sp, #4]
 8007176:	2303      	movs	r3, #3
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	2364      	movs	r3, #100	; 0x64
 800717c:	223c      	movs	r2, #60	; 0x3c
 800717e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007182:	f44f 709b 	mov.w	r0, #310	; 0x136
 8007186:	f7fc fcf4 	bl	8003b72 <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 800718a:	2301      	movs	r3, #1
 800718c:	9302      	str	r3, [sp, #8]
 800718e:	230e      	movs	r3, #14
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	2303      	movs	r3, #3
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	2396      	movs	r3, #150	; 0x96
 8007198:	226e      	movs	r2, #110	; 0x6e
 800719a:	2132      	movs	r1, #50	; 0x32
 800719c:	200a      	movs	r0, #10
 800719e:	f7fc fce8 	bl	8003b72 <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 80071a2:	2301      	movs	r3, #1
 80071a4:	9302      	str	r3, [sp, #8]
 80071a6:	230f      	movs	r3, #15
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	2303      	movs	r3, #3
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	2396      	movs	r3, #150	; 0x96
 80071b0:	226e      	movs	r2, #110	; 0x6e
 80071b2:	2164      	movs	r1, #100	; 0x64
 80071b4:	203c      	movs	r0, #60	; 0x3c
 80071b6:	f7fc fcdc 	bl	8003b72 <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 80071ba:	2301      	movs	r3, #1
 80071bc:	9302      	str	r3, [sp, #8]
 80071be:	2310      	movs	r3, #16
 80071c0:	9301      	str	r3, [sp, #4]
 80071c2:	2303      	movs	r3, #3
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	2396      	movs	r3, #150	; 0x96
 80071c8:	226e      	movs	r2, #110	; 0x6e
 80071ca:	2196      	movs	r1, #150	; 0x96
 80071cc:	206e      	movs	r0, #110	; 0x6e
 80071ce:	f7fc fcd0 	bl	8003b72 <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 80071d2:	2301      	movs	r3, #1
 80071d4:	9302      	str	r3, [sp, #8]
 80071d6:	2311      	movs	r3, #17
 80071d8:	9301      	str	r3, [sp, #4]
 80071da:	2303      	movs	r3, #3
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	2396      	movs	r3, #150	; 0x96
 80071e0:	226e      	movs	r2, #110	; 0x6e
 80071e2:	21c8      	movs	r1, #200	; 0xc8
 80071e4:	20a0      	movs	r0, #160	; 0xa0
 80071e6:	f7fc fcc4 	bl	8003b72 <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 80071ea:	2301      	movs	r3, #1
 80071ec:	9302      	str	r3, [sp, #8]
 80071ee:	2312      	movs	r3, #18
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	2303      	movs	r3, #3
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	2396      	movs	r3, #150	; 0x96
 80071f8:	226e      	movs	r2, #110	; 0x6e
 80071fa:	21fa      	movs	r1, #250	; 0xfa
 80071fc:	20d2      	movs	r0, #210	; 0xd2
 80071fe:	f7fc fcb8 	bl	8003b72 <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 8007202:	2301      	movs	r3, #1
 8007204:	9302      	str	r3, [sp, #8]
 8007206:	2313      	movs	r3, #19
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	2303      	movs	r3, #3
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	2396      	movs	r3, #150	; 0x96
 8007210:	226e      	movs	r2, #110	; 0x6e
 8007212:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007216:	f44f 7082 	mov.w	r0, #260	; 0x104
 800721a:	f7fc fcaa 	bl	8003b72 <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 800721e:	2301      	movs	r3, #1
 8007220:	9302      	str	r3, [sp, #8]
 8007222:	2314      	movs	r3, #20
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	2303      	movs	r3, #3
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	2396      	movs	r3, #150	; 0x96
 800722c:	226e      	movs	r2, #110	; 0x6e
 800722e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007232:	f44f 709b 	mov.w	r0, #310	; 0x136
 8007236:	f7fc fc9c 	bl	8003b72 <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 800723a:	2304      	movs	r3, #4
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	2301      	movs	r3, #1
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	23c8      	movs	r3, #200	; 0xc8
 8007244:	22a0      	movs	r2, #160	; 0xa0
 8007246:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800724a:	200a      	movs	r0, #10
 800724c:	f7fc fc91 	bl	8003b72 <lcdRect2>
}
 8007250:	bf00      	nop
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <showPage>:

void showPage(uint8_t pageNum){
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	2b05      	cmp	r3, #5
 8007266:	d821      	bhi.n	80072ac <showPage+0x54>
 8007268:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <showPage+0x18>)
 800726a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726e:	bf00      	nop
 8007270:	08007289 	.word	0x08007289
 8007274:	0800728f 	.word	0x0800728f
 8007278:	08007295 	.word	0x08007295
 800727c:	0800729b 	.word	0x0800729b
 8007280:	080072a1 	.word	0x080072a1
 8007284:	080072a7 	.word	0x080072a7
	case 0:
		showPage1();
 8007288:	f7ff fd3a 	bl	8006d00 <showPage1>
		break;
 800728c:	e00e      	b.n	80072ac <showPage+0x54>
	case 1:
		showPage2();
 800728e:	f7ff fd87 	bl	8006da0 <showPage2>
		break;
 8007292:	e00b      	b.n	80072ac <showPage+0x54>
	case 2:
		showPage3();
 8007294:	f7ff fdbe 	bl	8006e14 <showPage3>
		break;
 8007298:	e008      	b.n	80072ac <showPage+0x54>
	case 3:
		showPage4();
 800729a:	f7ff fdf5 	bl	8006e88 <showPage4>
		break;
 800729e:	e005      	b.n	80072ac <showPage+0x54>
	case 4:
		showPage5();
 80072a0:	f7ff fe2c 	bl	8006efc <showPage5>
		break;
 80072a4:	e002      	b.n	80072ac <showPage+0x54>
	case 5:
		showPage6();
 80072a6:	f7ff fe93 	bl	8006fd0 <showPage6>
		break;
 80072aa:	bf00      	nop
	}
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
//	btn_B2.onSinglePressHandler = &returnToMenu;
	btn_BA.onSinglePressHandler = &nextScreen;
 80072b8:	4b08      	ldr	r3, [pc, #32]	; (80072dc <setDefaultClbcks+0x28>)
 80072ba:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <setDefaultClbcks+0x2c>)
 80072bc:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80072be:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <setDefaultClbcks+0x30>)
 80072c0:	4a09      	ldr	r2, [pc, #36]	; (80072e8 <setDefaultClbcks+0x34>)
 80072c2:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 80072c4:	4b09      	ldr	r3, [pc, #36]	; (80072ec <setDefaultClbcks+0x38>)
 80072c6:	4a0a      	ldr	r2, [pc, #40]	; (80072f0 <setDefaultClbcks+0x3c>)
 80072c8:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 80072ca:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <setDefaultClbcks+0x40>)
 80072cc:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <setDefaultClbcks+0x44>)
 80072ce:	611a      	str	r2, [r3, #16]
//	btn_BB.onSinglePressHandler = &showOptions;
}
 80072d0:	bf00      	nop
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20002630 	.word	0x20002630
 80072e0:	08002a69 	.word	0x08002a69
 80072e4:	20002678 	.word	0x20002678
 80072e8:	08002a79 	.word	0x08002a79
 80072ec:	200026e4 	.word	0x200026e4
 80072f0:	08006c8d 	.word	0x08006c8d
 80072f4:	2000269c 	.word	0x2000269c
 80072f8:	08006cc5 	.word	0x08006cc5

080072fc <settingsSetup>:


void settingsSetup(void){
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8007300:	f7ff ffd8 	bl	80072b4 <setDefaultClbcks>
}
 8007304:	bf00      	nop
 8007306:	bd80      	pop	{r7, pc}

08007308 <settingsMain>:

void settingsMain(void){
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 800730e:	2300      	movs	r3, #0
 8007310:	603b      	str	r3, [r7, #0]
 8007312:	1d3b      	adds	r3, r7, #4
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	605a      	str	r2, [r3, #4]
 800731a:	609a      	str	r2, [r3, #8]
 800731c:	60da      	str	r2, [r3, #12]
 800731e:	611a      	str	r2, [r3, #16]
 8007320:	615a      	str	r2, [r3, #20]
 8007322:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8007324:	4b04      	ldr	r3, [pc, #16]	; (8007338 <settingsMain+0x30>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff ff95 	bl	8007258 <showPage>

}
 800732e:	bf00      	nop
 8007330:	3720      	adds	r7, #32
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20005d40 	.word	0x20005d40

0800733c <startStopwatch>:

#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

void startStopwatch(){
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
	stwStart();
 8007340:	f7fd f8a8 	bl	8004494 <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8007344:	4b03      	ldr	r3, [pc, #12]	; (8007354 <startStopwatch+0x18>)
 8007346:	4a04      	ldr	r2, [pc, #16]	; (8007358 <startStopwatch+0x1c>)
 8007348:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 800734a:	4b04      	ldr	r3, [pc, #16]	; (800735c <startStopwatch+0x20>)
 800734c:	4a04      	ldr	r2, [pc, #16]	; (8007360 <startStopwatch+0x24>)
 800734e:	611a      	str	r2, [r3, #16]
}
 8007350:	bf00      	nop
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20002654 	.word	0x20002654
 8007358:	08007365 	.word	0x08007365
 800735c:	200026c0 	.word	0x200026c0
 8007360:	080073a5 	.word	0x080073a5

08007364 <stopStopwatch>:
void stopStopwatch(){
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
	stwStop();
 8007368:	f7fd f8ba 	bl	80044e0 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 800736c:	4b03      	ldr	r3, [pc, #12]	; (800737c <stopStopwatch+0x18>)
 800736e:	4a04      	ldr	r2, [pc, #16]	; (8007380 <stopStopwatch+0x1c>)
 8007370:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8007372:	4b04      	ldr	r3, [pc, #16]	; (8007384 <stopStopwatch+0x20>)
 8007374:	4a04      	ldr	r2, [pc, #16]	; (8007388 <stopStopwatch+0x24>)
 8007376:	611a      	str	r2, [r3, #16]
}
 8007378:	bf00      	nop
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20002654 	.word	0x20002654
 8007380:	0800733d 	.word	0x0800733d
 8007384:	200026c0 	.word	0x200026c0
 8007388:	0800738d 	.word	0x0800738d

0800738c <resetStopwatch>:
void resetStopwatch(){
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
	stwClear();
 8007390:	f7fd f8b6 	bl	8004500 <stwClear>
	stwT.clear();
 8007394:	4b02      	ldr	r3, [pc, #8]	; (80073a0 <resetStopwatch+0x14>)
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	4798      	blx	r3
}
 800739a:	bf00      	nop
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	2000017c 	.word	0x2000017c

080073a4 <saveStopwatch>:
void saveStopwatch(){
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
	stwSave();
 80073a8:	f7fd f8be 	bl	8004528 <stwSave>
}
 80073ac:	bf00      	nop
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &resetPos;
 80073b4:	4b10      	ldr	r3, [pc, #64]	; (80073f8 <setDefaultClbcks+0x48>)
 80073b6:	4a11      	ldr	r2, [pc, #68]	; (80073fc <setDefaultClbcks+0x4c>)
 80073b8:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 80073ba:	4b11      	ldr	r3, [pc, #68]	; (8007400 <setDefaultClbcks+0x50>)
 80073bc:	4a11      	ldr	r2, [pc, #68]	; (8007404 <setDefaultClbcks+0x54>)
 80073be:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 80073c0:	4b11      	ldr	r3, [pc, #68]	; (8007408 <setDefaultClbcks+0x58>)
 80073c2:	4a12      	ldr	r2, [pc, #72]	; (800740c <setDefaultClbcks+0x5c>)
 80073c4:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 80073c6:	4b12      	ldr	r3, [pc, #72]	; (8007410 <setDefaultClbcks+0x60>)
 80073c8:	78db      	ldrb	r3, [r3, #3]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d006      	beq.n	80073e2 <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 80073d4:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <setDefaultClbcks+0x64>)
 80073d6:	4a10      	ldr	r2, [pc, #64]	; (8007418 <setDefaultClbcks+0x68>)
 80073d8:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 80073da:	4b10      	ldr	r3, [pc, #64]	; (800741c <setDefaultClbcks+0x6c>)
 80073dc:	4a10      	ldr	r2, [pc, #64]	; (8007420 <setDefaultClbcks+0x70>)
 80073de:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 80073e0:	e005      	b.n	80073ee <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 80073e2:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <setDefaultClbcks+0x64>)
 80073e4:	4a0f      	ldr	r2, [pc, #60]	; (8007424 <setDefaultClbcks+0x74>)
 80073e6:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 80073e8:	4b0c      	ldr	r3, [pc, #48]	; (800741c <setDefaultClbcks+0x6c>)
 80073ea:	4a0f      	ldr	r2, [pc, #60]	; (8007428 <setDefaultClbcks+0x78>)
 80073ec:	611a      	str	r2, [r3, #16]
}
 80073ee:	bf00      	nop
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	200026e4 	.word	0x200026e4
 80073fc:	08002a89 	.word	0x08002a89
 8007400:	20002630 	.word	0x20002630
 8007404:	08002a69 	.word	0x08002a69
 8007408:	20002678 	.word	0x20002678
 800740c:	08002a79 	.word	0x08002a79
 8007410:	20005b5c 	.word	0x20005b5c
 8007414:	20002654 	.word	0x20002654
 8007418:	08007365 	.word	0x08007365
 800741c:	200026c0 	.word	0x200026c0
 8007420:	080073a5 	.word	0x080073a5
 8007424:	0800733d 	.word	0x0800733d
 8007428:	0800738d 	.word	0x0800738d

0800742c <convertTicks>:

// initialize stopwatch values
struct stopwatch_t stw_val = {0, 0, 0, 0};

struct stopwatch_t convertTicks(uint32_t ticks){
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
	struct stopwatch_t bff = {
		ticks/(100*60*60),
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	099b      	lsrs	r3, r3, #6
 8007438:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <convertTicks+0x98>)
 800743a:	fba2 2303 	umull	r2, r3, r2, r3
 800743e:	089b      	lsrs	r3, r3, #2
	struct stopwatch_t bff = {
 8007440:	b2db      	uxtb	r3, r3
 8007442:	723b      	strb	r3, [r7, #8]
		ticks%(100*60*60)/(60*100),
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	0993      	lsrs	r3, r2, #6
 8007448:	491e      	ldr	r1, [pc, #120]	; (80074c4 <convertTicks+0x98>)
 800744a:	fba1 1303 	umull	r1, r3, r1, r3
 800744e:	089b      	lsrs	r3, r3, #2
 8007450:	491d      	ldr	r1, [pc, #116]	; (80074c8 <convertTicks+0x9c>)
 8007452:	fb01 f303 	mul.w	r3, r1, r3
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	4a1c      	ldr	r2, [pc, #112]	; (80074cc <convertTicks+0xa0>)
 800745a:	fba2 2303 	umull	r2, r3, r2, r3
 800745e:	09db      	lsrs	r3, r3, #7
	struct stopwatch_t bff = {
 8007460:	b2db      	uxtb	r3, r3
 8007462:	727b      	strb	r3, [r7, #9]
		ticks%(60*100)/(100),
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	4b19      	ldr	r3, [pc, #100]	; (80074cc <convertTicks+0xa0>)
 8007468:	fba3 1302 	umull	r1, r3, r3, r2
 800746c:	09db      	lsrs	r3, r3, #7
 800746e:	f241 7170 	movw	r1, #6000	; 0x1770
 8007472:	fb01 f303 	mul.w	r3, r1, r3
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	4a15      	ldr	r2, [pc, #84]	; (80074d0 <convertTicks+0xa4>)
 800747a:	fba2 2303 	umull	r2, r3, r2, r3
 800747e:	095b      	lsrs	r3, r3, #5
	struct stopwatch_t bff = {
 8007480:	b2db      	uxtb	r3, r3
 8007482:	72bb      	strb	r3, [r7, #10]
		ticks%100
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	4b12      	ldr	r3, [pc, #72]	; (80074d0 <convertTicks+0xa4>)
 8007488:	fba3 1302 	umull	r1, r3, r3, r2
 800748c:	095b      	lsrs	r3, r3, #5
 800748e:	2164      	movs	r1, #100	; 0x64
 8007490:	fb01 f303 	mul.w	r3, r1, r3
 8007494:	1ad3      	subs	r3, r2, r3
	struct stopwatch_t bff = {
 8007496:	b2db      	uxtb	r3, r3
 8007498:	72fb      	strb	r3, [r7, #11]
	};
	return bff;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	2300      	movs	r3, #0
 80074a0:	7b3a      	ldrb	r2, [r7, #12]
 80074a2:	f362 0307 	bfi	r3, r2, #0, #8
 80074a6:	7b7a      	ldrb	r2, [r7, #13]
 80074a8:	f362 230f 	bfi	r3, r2, #8, #8
 80074ac:	7bba      	ldrb	r2, [r7, #14]
 80074ae:	f362 4317 	bfi	r3, r2, #16, #8
 80074b2:	7bfa      	ldrb	r2, [r7, #15]
 80074b4:	f362 631f 	bfi	r3, r2, #24, #8
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	002e9a77 	.word	0x002e9a77
 80074c8:	00057e40 	.word	0x00057e40
 80074cc:	057619f1 	.word	0x057619f1
 80074d0:	51eb851f 	.word	0x51eb851f

080074d4 <stwString>:

uint8_t* stwString(struct stopwatch_t stw, char* str){
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af02      	add	r7, sp, #8
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
	sprintf(str, "%dh%02d'%02d.%02d\"", stw.hours, stw.min, stw.sec, stw.csec);
 80074de:	793b      	ldrb	r3, [r7, #4]
 80074e0:	4619      	mov	r1, r3
 80074e2:	797b      	ldrb	r3, [r7, #5]
 80074e4:	4618      	mov	r0, r3
 80074e6:	79bb      	ldrb	r3, [r7, #6]
 80074e8:	79fa      	ldrb	r2, [r7, #7]
 80074ea:	9201      	str	r2, [sp, #4]
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	4603      	mov	r3, r0
 80074f0:	460a      	mov	r2, r1
 80074f2:	4904      	ldr	r1, [pc, #16]	; (8007504 <stwString+0x30>)
 80074f4:	6838      	ldr	r0, [r7, #0]
 80074f6:	f00b ff1b 	bl	8013330 <siprintf>
	return str;
 80074fa:	683b      	ldr	r3, [r7, #0]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	0801b904 	.word	0x0801b904

08007508 <updateStopwatch>:
void updateStopwatch(void){
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
//	stw_val.hours = stwS.cnt/(100*60*60);
//	stw_val.min = stwS.cnt%(100*60*60)/(60*100);
//	stw_val.sec = stwS.cnt%(60*100)/(100);
//	stw_val.csec = stwS.cnt%100;
	stw_val.hours = stwS.cnt/(60*60);
 800750c:	4b22      	ldr	r3, [pc, #136]	; (8007598 <updateStopwatch+0x90>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8007514:	4a21      	ldr	r2, [pc, #132]	; (800759c <updateStopwatch+0x94>)
 8007516:	fb82 1203 	smull	r1, r2, r2, r3
 800751a:	441a      	add	r2, r3
 800751c:	12d2      	asrs	r2, r2, #11
 800751e:	17db      	asrs	r3, r3, #31
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	b2da      	uxtb	r2, r3
 8007524:	4b1e      	ldr	r3, [pc, #120]	; (80075a0 <updateStopwatch+0x98>)
 8007526:	701a      	strb	r2, [r3, #0]
	stw_val.min = stwS.cnt%(60*60)/(60);
 8007528:	4b1b      	ldr	r3, [pc, #108]	; (8007598 <updateStopwatch+0x90>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8007530:	461a      	mov	r2, r3
 8007532:	4b1a      	ldr	r3, [pc, #104]	; (800759c <updateStopwatch+0x94>)
 8007534:	fb83 1302 	smull	r1, r3, r3, r2
 8007538:	4413      	add	r3, r2
 800753a:	12d9      	asrs	r1, r3, #11
 800753c:	17d3      	asrs	r3, r2, #31
 800753e:	1acb      	subs	r3, r1, r3
 8007540:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007544:	fb01 f303 	mul.w	r3, r1, r3
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	4a16      	ldr	r2, [pc, #88]	; (80075a4 <updateStopwatch+0x9c>)
 800754c:	fb82 1203 	smull	r1, r2, r2, r3
 8007550:	441a      	add	r2, r3
 8007552:	1152      	asrs	r2, r2, #5
 8007554:	17db      	asrs	r3, r3, #31
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	b2da      	uxtb	r2, r3
 800755a:	4b11      	ldr	r3, [pc, #68]	; (80075a0 <updateStopwatch+0x98>)
 800755c:	705a      	strb	r2, [r3, #1]
	stw_val.sec = stwS.cnt%60;
 800755e:	4b0e      	ldr	r3, [pc, #56]	; (8007598 <updateStopwatch+0x90>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8007566:	461a      	mov	r2, r3
 8007568:	4b0e      	ldr	r3, [pc, #56]	; (80075a4 <updateStopwatch+0x9c>)
 800756a:	fb83 1302 	smull	r1, r3, r3, r2
 800756e:	4413      	add	r3, r2
 8007570:	1159      	asrs	r1, r3, #5
 8007572:	17d3      	asrs	r3, r2, #31
 8007574:	1ac9      	subs	r1, r1, r3
 8007576:	460b      	mov	r3, r1
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	1a5b      	subs	r3, r3, r1
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	1ad1      	subs	r1, r2, r3
 8007580:	b2ca      	uxtb	r2, r1
 8007582:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <updateStopwatch+0x98>)
 8007584:	709a      	strb	r2, [r3, #2]
	stw_val.csec = (uint8_t)getStw();
 8007586:	f7fc ffdf 	bl	8004548 <getStw>
 800758a:	4603      	mov	r3, r0
 800758c:	b2da      	uxtb	r2, r3
 800758e:	4b04      	ldr	r3, [pc, #16]	; (80075a0 <updateStopwatch+0x98>)
 8007590:	70da      	strb	r2, [r3, #3]
}
 8007592:	bf00      	nop
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20005b5c 	.word	0x20005b5c
 800759c:	91a2b3c5 	.word	0x91a2b3c5
 80075a0:	20005d44 	.word	0x20005d44
 80075a4:	88888889 	.word	0x88888889

080075a8 <stwSetup>:

void stwSetup(void){
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80075ac:	f7ff ff00 	bl	80073b0 <setDefaultClbcks>
}
 80075b0:	bf00      	nop
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <stwMain>:


// functions to execute when menu item entered
void stwMain(void){
 80075b4:	b590      	push	{r4, r7, lr}
 80075b6:	b0a1      	sub	sp, #132	; 0x84
 80075b8:	af02      	add	r7, sp, #8
	char guiPos[6] = {0};
 80075ba:	2300      	movs	r3, #0
 80075bc:	663b      	str	r3, [r7, #96]	; 0x60
 80075be:	2300      	movs	r3, #0
 80075c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	sprintf(&guiPos, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 80075c4:	4b9a      	ldr	r3, [pc, #616]	; (8007830 <stwMain+0x27c>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	4b99      	ldr	r3, [pc, #612]	; (8007830 <stwMain+0x27c>)
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80075d2:	4998      	ldr	r1, [pc, #608]	; (8007834 <stwMain+0x280>)
 80075d4:	f00b feac 	bl	8013330 <siprintf>
	lcdPutStr(400 - 10 - (*zekton24font.font_Width) * strlen(guiPos), 10, guiPos, zekton24font);
 80075d8:	2314      	movs	r3, #20
 80075da:	b29c      	uxth	r4, r3
 80075dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7f8 fe0f 	bl	8000204 <strlen>
 80075e6:	4603      	mov	r3, r0
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	fb14 f303 	smulbb	r3, r4, r3
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
 80075f4:	b298      	uxth	r0, r3
 80075f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80075fa:	4b8f      	ldr	r3, [pc, #572]	; (8007838 <stwMain+0x284>)
 80075fc:	210a      	movs	r1, #10
 80075fe:	f7fb fc81 	bl	8002f04 <lcdPutStr>

	updateStopwatch();
 8007602:	f7ff ff81 	bl	8007508 <updateStopwatch>

	char tempStr3[30] = {0};
 8007606:	2300      	movs	r3, #0
 8007608:	643b      	str	r3, [r7, #64]	; 0x40
 800760a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	605a      	str	r2, [r3, #4]
 8007614:	609a      	str	r2, [r3, #8]
 8007616:	60da      	str	r2, [r3, #12]
 8007618:	611a      	str	r2, [r3, #16]
 800761a:	615a      	str	r2, [r3, #20]
 800761c:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr3, "%d", (uint16_t)getStw());
 800761e:	f7fc ff93 	bl	8004548 <getStw>
 8007622:	4603      	mov	r3, r0
 8007624:	b29b      	uxth	r3, r3
 8007626:	461a      	mov	r2, r3
 8007628:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800762c:	4983      	ldr	r1, [pc, #524]	; (800783c <stwMain+0x288>)
 800762e:	4618      	mov	r0, r3
 8007630:	f00b fe7e 	bl	8013330 <siprintf>
	lcdPutStr(0, 0, tempStr3, font_12_zekton);
 8007634:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007638:	4b81      	ldr	r3, [pc, #516]	; (8007840 <stwMain+0x28c>)
 800763a:	2100      	movs	r1, #0
 800763c:	2000      	movs	r0, #0
 800763e:	f7fb fc61 	bl	8002f04 <lcdPutStr>
	char tempStr4[30] = {0};
 8007642:	2300      	movs	r3, #0
 8007644:	623b      	str	r3, [r7, #32]
 8007646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	605a      	str	r2, [r3, #4]
 8007650:	609a      	str	r2, [r3, #8]
 8007652:	60da      	str	r2, [r3, #12]
 8007654:	611a      	str	r2, [r3, #16]
 8007656:	615a      	str	r2, [r3, #20]
 8007658:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr4, "%d", stwS.cnt);
 800765a:	4b7a      	ldr	r3, [pc, #488]	; (8007844 <stwMain+0x290>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8007662:	461a      	mov	r2, r3
 8007664:	f107 0320 	add.w	r3, r7, #32
 8007668:	4974      	ldr	r1, [pc, #464]	; (800783c <stwMain+0x288>)
 800766a:	4618      	mov	r0, r3
 800766c:	f00b fe60 	bl	8013330 <siprintf>
	lcdPutStr(0, 20, tempStr4, font_12_zekton);
 8007670:	f107 0220 	add.w	r2, r7, #32
 8007674:	4b72      	ldr	r3, [pc, #456]	; (8007840 <stwMain+0x28c>)
 8007676:	2114      	movs	r1, #20
 8007678:	2000      	movs	r0, #0
 800767a:	f7fb fc43 	bl	8002f04 <lcdPutStr>

	char tempStr2[30] = {0};
 800767e:	2300      	movs	r3, #0
 8007680:	603b      	str	r3, [r7, #0]
 8007682:	1d3b      	adds	r3, r7, #4
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	605a      	str	r2, [r3, #4]
 800768a:	609a      	str	r2, [r3, #8]
 800768c:	60da      	str	r2, [r3, #12]
 800768e:	611a      	str	r2, [r3, #16]
 8007690:	615a      	str	r2, [r3, #20]
 8007692:	831a      	strh	r2, [r3, #24]
	if(stw_val.hours != 0){
 8007694:	4b6c      	ldr	r3, [pc, #432]	; (8007848 <stwMain+0x294>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <stwMain+0xf8>
		sprintf(&tempStr2, "%01dh", stw_val.hours);
 800769c:	4b6a      	ldr	r3, [pc, #424]	; (8007848 <stwMain+0x294>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	463b      	mov	r3, r7
 80076a4:	4969      	ldr	r1, [pc, #420]	; (800784c <stwMain+0x298>)
 80076a6:	4618      	mov	r0, r3
 80076a8:	f00b fe42 	bl	8013330 <siprintf>
	}
	lcdPutStr(20, 95, tempStr2, zekton24font);
 80076ac:	463a      	mov	r2, r7
 80076ae:	4b62      	ldr	r3, [pc, #392]	; (8007838 <stwMain+0x284>)
 80076b0:	215f      	movs	r1, #95	; 0x5f
 80076b2:	2014      	movs	r0, #20
 80076b4:	f7fb fc26 	bl	8002f04 <lcdPutStr>
	sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 80076b8:	4b63      	ldr	r3, [pc, #396]	; (8007848 <stwMain+0x294>)
 80076ba:	785b      	ldrb	r3, [r3, #1]
 80076bc:	461a      	mov	r2, r3
 80076be:	4b62      	ldr	r3, [pc, #392]	; (8007848 <stwMain+0x294>)
 80076c0:	789b      	ldrb	r3, [r3, #2]
 80076c2:	4619      	mov	r1, r3
 80076c4:	4b60      	ldr	r3, [pc, #384]	; (8007848 <stwMain+0x294>)
 80076c6:	78db      	ldrb	r3, [r3, #3]
 80076c8:	4638      	mov	r0, r7
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	460b      	mov	r3, r1
 80076ce:	4960      	ldr	r1, [pc, #384]	; (8007850 <stwMain+0x29c>)
 80076d0:	f00b fe2e 	bl	8013330 <siprintf>
	lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), 76, tempStr2, zekton45font);
 80076d4:	2322      	movs	r3, #34	; 0x22
 80076d6:	b29c      	uxth	r4, r3
 80076d8:	463b      	mov	r3, r7
 80076da:	4618      	mov	r0, r3
 80076dc:	f7f8 fd92 	bl	8000204 <strlen>
 80076e0:	4603      	mov	r3, r0
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	fb14 f303 	smulbb	r3, r4, r3
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 80076ee:	b298      	uxth	r0, r3
 80076f0:	463a      	mov	r2, r7
 80076f2:	4b58      	ldr	r3, [pc, #352]	; (8007854 <stwMain+0x2a0>)
 80076f4:	214c      	movs	r1, #76	; 0x4c
 80076f6:	f7fb fc05 	bl	8002f04 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 80076fa:	2300      	movs	r3, #0
 80076fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007700:	e08b      	b.n	800781a <stwMain+0x266>
//		sprintf(&tempStr2, "%d. %d\"", i, stwT.stwArray[i]%(60*100)/100);
//		sprintf(&tempStr2, "%d. %s", i, stwString(convertTicks(stwT.stwArray[i])));
		if(stwT.stwArray[i] != 0){
 8007702:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007706:	4a54      	ldr	r2, [pc, #336]	; (8007858 <stwMain+0x2a4>)
 8007708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d07f      	beq.n	8007810 <stwMain+0x25c>
			sprintf(&tempStr2, "Lap %d:", i+1);
 8007710:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	463b      	mov	r3, r7
 8007718:	4950      	ldr	r1, [pc, #320]	; (800785c <stwMain+0x2a8>)
 800771a:	4618      	mov	r0, r3
 800771c:	f00b fe08 	bl	8013330 <siprintf>
			lcdPutStr(0, 130+i*16, tempStr2, font_12_zekton);
 8007720:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	b2db      	uxtb	r3, r3
 8007728:	3b7e      	subs	r3, #126	; 0x7e
 800772a:	b2d9      	uxtb	r1, r3
 800772c:	463a      	mov	r2, r7
 800772e:	4b44      	ldr	r3, [pc, #272]	; (8007840 <stwMain+0x28c>)
 8007730:	2000      	movs	r0, #0
 8007732:	f7fb fbe7 	bl	8002f04 <lcdPutStr>
			if(i>0){
 8007736:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800773a:	2b00      	cmp	r3, #0
 800773c:	d022      	beq.n	8007784 <stwMain+0x1d0>
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]-stwT.stwArray[i-1]), &tempStr2), font_12_zekton);
 800773e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	b2db      	uxtb	r3, r3
 8007746:	3b7e      	subs	r3, #126	; 0x7e
 8007748:	b2dc      	uxtb	r4, r3
 800774a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800774e:	4a42      	ldr	r2, [pc, #264]	; (8007858 <stwMain+0x2a4>)
 8007750:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007754:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007758:	3b01      	subs	r3, #1
 800775a:	493f      	ldr	r1, [pc, #252]	; (8007858 <stwMain+0x2a4>)
 800775c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fe62 	bl	800742c <convertTicks>
 8007768:	4603      	mov	r3, r0
 800776a:	66bb      	str	r3, [r7, #104]	; 0x68
 800776c:	463b      	mov	r3, r7
 800776e:	4619      	mov	r1, r3
 8007770:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007772:	f7ff feaf 	bl	80074d4 <stwString>
 8007776:	4602      	mov	r2, r0
 8007778:	4b31      	ldr	r3, [pc, #196]	; (8007840 <stwMain+0x28c>)
 800777a:	4621      	mov	r1, r4
 800777c:	2037      	movs	r0, #55	; 0x37
 800777e:	f7fb fbc1 	bl	8002f04 <lcdPutStr>
 8007782:	e01a      	b.n	80077ba <stwMain+0x206>
			} else {
				lcdPutStr(55, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 8007784:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	b2db      	uxtb	r3, r3
 800778c:	3b7e      	subs	r3, #126	; 0x7e
 800778e:	b2dc      	uxtb	r4, r3
 8007790:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007794:	4a30      	ldr	r2, [pc, #192]	; (8007858 <stwMain+0x2a4>)
 8007796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800779a:	4618      	mov	r0, r3
 800779c:	f7ff fe46 	bl	800742c <convertTicks>
 80077a0:	4603      	mov	r3, r0
 80077a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077a4:	463b      	mov	r3, r7
 80077a6:	4619      	mov	r1, r3
 80077a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077aa:	f7ff fe93 	bl	80074d4 <stwString>
 80077ae:	4602      	mov	r2, r0
 80077b0:	4b23      	ldr	r3, [pc, #140]	; (8007840 <stwMain+0x28c>)
 80077b2:	4621      	mov	r1, r4
 80077b4:	2037      	movs	r0, #55	; 0x37
 80077b6:	f7fb fba5 	bl	8002f04 <lcdPutStr>
			}
			sprintf(&tempStr2, "Split:");
 80077ba:	463b      	mov	r3, r7
 80077bc:	4928      	ldr	r1, [pc, #160]	; (8007860 <stwMain+0x2ac>)
 80077be:	4618      	mov	r0, r3
 80077c0:	f00b fdb6 	bl	8013330 <siprintf>
			lcdPutStr(165, 130+i*16, tempStr2, font_12_zekton);
 80077c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	3b7e      	subs	r3, #126	; 0x7e
 80077ce:	b2d9      	uxtb	r1, r3
 80077d0:	463a      	mov	r2, r7
 80077d2:	4b1b      	ldr	r3, [pc, #108]	; (8007840 <stwMain+0x28c>)
 80077d4:	20a5      	movs	r0, #165	; 0xa5
 80077d6:	f7fb fb95 	bl	8002f04 <lcdPutStr>
			lcdPutStr(225, 130+i*16, stwString(convertTicks(stwT.stwArray[i]), &tempStr2), font_12_zekton);
 80077da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80077de:	011b      	lsls	r3, r3, #4
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	3b7e      	subs	r3, #126	; 0x7e
 80077e4:	b2dc      	uxtb	r4, r3
 80077e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80077ea:	4a1b      	ldr	r2, [pc, #108]	; (8007858 <stwMain+0x2a4>)
 80077ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fe1b 	bl	800742c <convertTicks>
 80077f6:	4603      	mov	r3, r0
 80077f8:	673b      	str	r3, [r7, #112]	; 0x70
 80077fa:	463b      	mov	r3, r7
 80077fc:	4619      	mov	r1, r3
 80077fe:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007800:	f7ff fe68 	bl	80074d4 <stwString>
 8007804:	4602      	mov	r2, r0
 8007806:	4b0e      	ldr	r3, [pc, #56]	; (8007840 <stwMain+0x28c>)
 8007808:	4621      	mov	r1, r4
 800780a:	20e1      	movs	r0, #225	; 0xe1
 800780c:	f7fb fb7a 	bl	8002f04 <lcdPutStr>
	for(uint8_t i = 0; i < 7; i++){
 8007810:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007814:	3301      	adds	r3, #1
 8007816:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800781a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800781e:	2b06      	cmp	r3, #6
 8007820:	f67f af6f 	bls.w	8007702 <stwMain+0x14e>
		}
	}
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	377c      	adds	r7, #124	; 0x7c
 800782a:	46bd      	mov	sp, r7
 800782c:	bd90      	pop	{r4, r7, pc}
 800782e:	bf00      	nop
 8007830:	200057c0 	.word	0x200057c0
 8007834:	0801b918 	.word	0x0801b918
 8007838:	0802f6dc 	.word	0x0802f6dc
 800783c:	0801b924 	.word	0x0801b924
 8007840:	0802ec54 	.word	0x0802ec54
 8007844:	20005b5c 	.word	0x20005b5c
 8007848:	20005d44 	.word	0x20005d44
 800784c:	0801b928 	.word	0x0801b928
 8007850:	0801b930 	.word	0x0801b930
 8007854:	08031544 	.word	0x08031544
 8007858:	2000017c 	.word	0x2000017c
 800785c:	0801b940 	.word	0x0801b940
 8007860:	0801b948 	.word	0x0801b948

08007864 <setDefaultClbcks>:
//#include "fonts/zekton24.h"
//#include "fonts/zekton84.h"
//#include <fonts/zekton45.h>
#include "fonts/fonts.h"

static void setDefaultClbcks(void){
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
	// module callbacks
	btn_B2.onSinglePressHandler = &showCntxMenu;
 8007868:	4b06      	ldr	r3, [pc, #24]	; (8007884 <setDefaultClbcks+0x20>)
 800786a:	4a07      	ldr	r2, [pc, #28]	; (8007888 <setDefaultClbcks+0x24>)
 800786c:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <setDefaultClbcks+0x28>)
 8007870:	4a07      	ldr	r2, [pc, #28]	; (8007890 <setDefaultClbcks+0x2c>)
 8007872:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8007874:	4b07      	ldr	r3, [pc, #28]	; (8007894 <setDefaultClbcks+0x30>)
 8007876:	4a08      	ldr	r2, [pc, #32]	; (8007898 <setDefaultClbcks+0x34>)
 8007878:	611a      	str	r2, [r3, #16]
}
 800787a:	bf00      	nop
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	200026c0 	.word	0x200026c0
 8007888:	0800537d 	.word	0x0800537d
 800788c:	20002630 	.word	0x20002630
 8007890:	08002a69 	.word	0x08002a69
 8007894:	20002678 	.word	0x20002678
 8007898:	08002a79 	.word	0x08002a79

0800789c <setTimeAction>:

static void setTimeAction(void){
 800789c:	b580      	push	{r7, lr}
 800789e:	af00      	add	r7, sp, #0
	guiApplyView(&timeInputModule);
 80078a0:	4802      	ldr	r0, [pc, #8]	; (80078ac <setTimeAction+0x10>)
 80078a2:	f7fb f8fd 	bl	8002aa0 <guiApplyView>
}
 80078a6:	bf00      	nop
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	200002c4 	.word	0x200002c4

080078b0 <setDateAction>:
static void setDateAction(void){
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
	guiApplyView(&dateInputModule);
 80078b4:	4802      	ldr	r0, [pc, #8]	; (80078c0 <setDateAction+0x10>)
 80078b6:	f7fb f8f3 	bl	8002aa0 <guiApplyView>
}
 80078ba:	bf00      	nop
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000290 	.word	0x20000290

080078c4 <faceSetup>:
const struct ContextAction action2 = {"Set date", &setDateAction};
const struct ContextAction action3 = {"Customize", &setTimeAction};
const struct ContextAction action4 = {"Lock", &setTimeAction};
struct ContextAction* ContextActions[] = {&action1, &action2, &action3, &action4};

void faceSetup(void){
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 80078c8:	f7ff ffcc 	bl	8007864 <setDefaultClbcks>
	setupCntxMenu(&setDefaultClbcks);
 80078cc:	4802      	ldr	r0, [pc, #8]	; (80078d8 <faceSetup+0x14>)
 80078ce:	f7fd fccf 	bl	8005270 <setupCntxMenu>
//	setupCntxMenu(&setDefaultClbcks, cntxActions, 3);
}
 80078d2:	bf00      	nop
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	08007865 	.word	0x08007865

080078dc <faceMain>:

void faceMain(void){
 80078dc:	b590      	push	{r4, r7, lr}
 80078de:	b0b1      	sub	sp, #196	; 0xc4
 80078e0:	af00      	add	r7, sp, #0
	char temperature[30] = {0};
 80078e2:	2300      	movs	r3, #0
 80078e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	605a      	str	r2, [r3, #4]
 80078f2:	609a      	str	r2, [r3, #8]
 80078f4:	60da      	str	r2, [r3, #12]
 80078f6:	611a      	str	r2, [r3, #16]
 80078f8:	615a      	str	r2, [r3, #20]
 80078fa:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 80078fc:	4b83      	ldr	r3, [pc, #524]	; (8007b0c <faceMain+0x230>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4618      	mov	r0, r3
 8007902:	f7f8 fe41 	bl	8000588 <__aeabi_f2d>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800790e:	4980      	ldr	r1, [pc, #512]	; (8007b10 <faceMain+0x234>)
 8007910:	f00b fd0e 	bl	8013330 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8007914:	2314      	movs	r3, #20
 8007916:	b29c      	uxth	r4, r3
 8007918:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800791c:	4618      	mov	r0, r3
 800791e:	f7f8 fc71 	bl	8000204 <strlen>
 8007922:	4603      	mov	r3, r0
 8007924:	f1c3 030d 	rsb	r3, r3, #13
 8007928:	b29b      	uxth	r3, r3
 800792a:	fb14 f303 	smulbb	r3, r4, r3
 800792e:	b29b      	uxth	r3, r3
 8007930:	3323      	adds	r3, #35	; 0x23
 8007932:	b298      	uxth	r0, r3
 8007934:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8007938:	4b76      	ldr	r3, [pc, #472]	; (8007b14 <faceMain+0x238>)
 800793a:	210e      	movs	r1, #14
 800793c:	f7fb fae2 	bl	8002f04 <lcdPutStr>
	char baroStr[30] = {0};
 8007940:	2300      	movs	r3, #0
 8007942:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007946:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	605a      	str	r2, [r3, #4]
 8007950:	609a      	str	r2, [r3, #8]
 8007952:	60da      	str	r2, [r3, #12]
 8007954:	611a      	str	r2, [r3, #16]
 8007956:	615a      	str	r2, [r3, #20]
 8007958:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 800795a:	4b6c      	ldr	r3, [pc, #432]	; (8007b0c <faceMain+0x230>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	ee07 3a90 	vmov	s15, r3
 8007962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007966:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8007b18 <faceMain+0x23c>
 800796a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800796e:	ee16 0a90 	vmov	r0, s13
 8007972:	f7f8 fe09 	bl	8000588 <__aeabi_f2d>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800797e:	4967      	ldr	r1, [pc, #412]	; (8007b1c <faceMain+0x240>)
 8007980:	f00b fcd6 	bl	8013330 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 8007984:	2314      	movs	r3, #20
 8007986:	b29c      	uxth	r4, r3
 8007988:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800798c:	4618      	mov	r0, r3
 800798e:	f7f8 fc39 	bl	8000204 <strlen>
 8007992:	4603      	mov	r3, r0
 8007994:	f1c3 030d 	rsb	r3, r3, #13
 8007998:	b29b      	uxth	r3, r3
 800799a:	fb14 f303 	smulbb	r3, r4, r3
 800799e:	b29b      	uxth	r3, r3
 80079a0:	3323      	adds	r3, #35	; 0x23
 80079a2:	b298      	uxth	r0, r3
 80079a4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80079a8:	4b5a      	ldr	r3, [pc, #360]	; (8007b14 <faceMain+0x238>)
 80079aa:	212a      	movs	r1, #42	; 0x2a
 80079ac:	f7fb faaa 	bl	8002f04 <lcdPutStr>

	char fracStr[30] = {0};
 80079b0:	2300      	movs	r3, #0
 80079b2:	663b      	str	r3, [r7, #96]	; 0x60
 80079b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	605a      	str	r2, [r3, #4]
 80079be:	609a      	str	r2, [r3, #8]
 80079c0:	60da      	str	r2, [r3, #12]
 80079c2:	611a      	str	r2, [r3, #16]
 80079c4:	615a      	str	r2, [r3, #20]
 80079c6:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 80079c8:	2300      	movs	r3, #0
 80079ca:	643b      	str	r3, [r7, #64]	; 0x40
 80079cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	605a      	str	r2, [r3, #4]
 80079d6:	609a      	str	r2, [r3, #8]
 80079d8:	60da      	str	r2, [r3, #12]
 80079da:	611a      	str	r2, [r3, #16]
 80079dc:	615a      	str	r2, [r3, #20]
 80079de:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 80079e0:	2300      	movs	r3, #0
 80079e2:	623b      	str	r3, [r7, #32]
 80079e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079e8:	2200      	movs	r2, #0
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	605a      	str	r2, [r3, #4]
 80079ee:	609a      	str	r2, [r3, #8]
 80079f0:	60da      	str	r2, [r3, #12]
 80079f2:	611a      	str	r2, [r3, #16]
 80079f4:	615a      	str	r2, [r3, #20]
 80079f6:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 80079f8:	4b49      	ldr	r3, [pc, #292]	; (8007b20 <faceMain+0x244>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007a02:	4948      	ldr	r1, [pc, #288]	; (8007b24 <faceMain+0x248>)
 8007a04:	4618      	mov	r0, r3
 8007a06:	f00b fc93 	bl	8013330 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 8007a0a:	4b45      	ldr	r3, [pc, #276]	; (8007b20 <faceMain+0x244>)
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f107 0320 	add.w	r3, r7, #32
 8007a14:	4943      	ldr	r1, [pc, #268]	; (8007b24 <faceMain+0x248>)
 8007a16:	4618      	mov	r0, r3
 8007a18:	f00b fc8a 	bl	8013330 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 8007a1c:	4b40      	ldr	r3, [pc, #256]	; (8007b20 <faceMain+0x244>)
 8007a1e:	789b      	ldrb	r3, [r3, #2]
 8007a20:	461a      	mov	r2, r3
 8007a22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007a26:	493f      	ldr	r1, [pc, #252]	; (8007b24 <faceMain+0x248>)
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f00b fc81 	bl	8013330 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 8007a2e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007a32:	4b3d      	ldr	r3, [pc, #244]	; (8007b28 <faceMain+0x24c>)
 8007a34:	214c      	movs	r1, #76	; 0x4c
 8007a36:	2014      	movs	r0, #20
 8007a38:	f7fb fa64 	bl	8002f04 <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 8007a3c:	f107 0220 	add.w	r2, r7, #32
 8007a40:	4b39      	ldr	r3, [pc, #228]	; (8007b28 <faceMain+0x24c>)
 8007a42:	214c      	movs	r1, #76	; 0x4c
 8007a44:	20aa      	movs	r0, #170	; 0xaa
 8007a46:	f7fb fa5d 	bl	8002f04 <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 8007a4a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007a4e:	4b37      	ldr	r3, [pc, #220]	; (8007b2c <faceMain+0x250>)
 8007a50:	214c      	movs	r1, #76	; 0x4c
 8007a52:	f240 103b 	movw	r0, #315	; 0x13b
 8007a56:	f7fb fa55 	bl	8002f04 <lcdPutStr>

	char buffString[30] = {0};
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	603b      	str	r3, [r7, #0]
 8007a5e:	1d3b      	adds	r3, r7, #4
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	605a      	str	r2, [r3, #4]
 8007a66:	609a      	str	r2, [r3, #8]
 8007a68:	60da      	str	r2, [r3, #12]
 8007a6a:	611a      	str	r2, [r3, #16]
 8007a6c:	615a      	str	r2, [r3, #20]
 8007a6e:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8007a70:	463b      	mov	r3, r7
 8007a72:	492f      	ldr	r1, [pc, #188]	; (8007b30 <faceMain+0x254>)
 8007a74:	4618      	mov	r0, r3
 8007a76:	f00b fc5b 	bl	8013330 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 8007a7a:	4b2e      	ldr	r3, [pc, #184]	; (8007b34 <faceMain+0x258>)
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	4b2d      	ldr	r3, [pc, #180]	; (8007b38 <faceMain+0x25c>)
 8007a82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a86:	4b2b      	ldr	r3, [pc, #172]	; (8007b34 <faceMain+0x258>)
 8007a88:	78db      	ldrb	r3, [r3, #3]
 8007a8a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007a8e:	4638      	mov	r0, r7
 8007a90:	492a      	ldr	r1, [pc, #168]	; (8007b3c <faceMain+0x260>)
 8007a92:	f00b fc4d 	bl	8013330 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8007a96:	2314      	movs	r3, #20
 8007a98:	b29c      	uxth	r4, r3
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7f8 fbb1 	bl	8000204 <strlen>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f1c3 030d 	rsb	r3, r3, #13
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	fb14 f303 	smulbb	r3, r4, r3
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	3323      	adds	r3, #35	; 0x23
 8007ab2:	b298      	uxth	r0, r3
 8007ab4:	463a      	mov	r2, r7
 8007ab6:	4b17      	ldr	r3, [pc, #92]	; (8007b14 <faceMain+0x238>)
 8007ab8:	21ae      	movs	r1, #174	; 0xae
 8007aba:	f7fb fa23 	bl	8002f04 <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 8007abe:	4b1d      	ldr	r3, [pc, #116]	; (8007b34 <faceMain+0x258>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	4b1e      	ldr	r3, [pc, #120]	; (8007b40 <faceMain+0x264>)
 8007ac6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007aca:	4b1a      	ldr	r3, [pc, #104]	; (8007b34 <faceMain+0x258>)
 8007acc:	789b      	ldrb	r3, [r3, #2]
 8007ace:	4638      	mov	r0, r7
 8007ad0:	491a      	ldr	r1, [pc, #104]	; (8007b3c <faceMain+0x260>)
 8007ad2:	f00b fc2d 	bl	8013330 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8007ad6:	2314      	movs	r3, #20
 8007ad8:	b29c      	uxth	r4, r3
 8007ada:	463b      	mov	r3, r7
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7f8 fb91 	bl	8000204 <strlen>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f1c3 030d 	rsb	r3, r3, #13
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	fb14 f303 	smulbb	r3, r4, r3
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3323      	adds	r3, #35	; 0x23
 8007af2:	b298      	uxth	r0, r3
 8007af4:	463a      	mov	r2, r7
 8007af6:	4b07      	ldr	r3, [pc, #28]	; (8007b14 <faceMain+0x238>)
 8007af8:	21ca      	movs	r1, #202	; 0xca
 8007afa:	f7fb fa03 	bl	8002f04 <lcdPutStr>

	enableCntxMenu();
 8007afe:	f7fd fc59 	bl	80053b4 <enableCntxMenu>
}
 8007b02:	bf00      	nop
 8007b04:	37c4      	adds	r7, #196	; 0xc4
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd90      	pop	{r4, r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20002620 	.word	0x20002620
 8007b10:	0801ba08 	.word	0x0801ba08
 8007b14:	08036b8c 	.word	0x08036b8c
 8007b18:	42c80000 	.word	0x42c80000
 8007b1c:	0801ba10 	.word	0x0801ba10
 8007b20:	200057c0 	.word	0x200057c0
 8007b24:	0801ba1c 	.word	0x0801ba1c
 8007b28:	0803e03c 	.word	0x0803e03c
 8007b2c:	080389f4 	.word	0x080389f4
 8007b30:	0801ba24 	.word	0x0801ba24
 8007b34:	200057d4 	.word	0x200057d4
 8007b38:	200001e0 	.word	0x200001e0
 8007b3c:	0801ba34 	.word	0x0801ba34
 8007b40:	200001c0 	.word	0x200001c0

08007b44 <setDefaultClbcks>:
static uint8_t valDatePos[3] = {0, 0, 0};
static uint16_t cursorXarr[3] = {10, 210, 50};
static uint16_t cursorYarr[3] = {197, 197, 229};
static uint16_t cursorL[3] = {190, 85, 250};

static void setDefaultClbcks(void){
 8007b44:	b480      	push	{r7}
 8007b46:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exitScr;
 8007b48:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <setDefaultClbcks+0x34>)
 8007b4a:	4a0c      	ldr	r2, [pc, #48]	; (8007b7c <setDefaultClbcks+0x38>)
 8007b4c:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 8007b4e:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <setDefaultClbcks+0x3c>)
 8007b50:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <setDefaultClbcks+0x40>)
 8007b52:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8007b54:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <setDefaultClbcks+0x44>)
 8007b56:	4a0d      	ldr	r2, [pc, #52]	; (8007b8c <setDefaultClbcks+0x48>)
 8007b58:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <setDefaultClbcks+0x4c>)
 8007b5c:	4a0d      	ldr	r2, [pc, #52]	; (8007b94 <setDefaultClbcks+0x50>)
 8007b5e:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8007b60:	4b0d      	ldr	r3, [pc, #52]	; (8007b98 <setDefaultClbcks+0x54>)
 8007b62:	4a0e      	ldr	r2, [pc, #56]	; (8007b9c <setDefaultClbcks+0x58>)
 8007b64:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8007b66:	4b0e      	ldr	r3, [pc, #56]	; (8007ba0 <setDefaultClbcks+0x5c>)
 8007b68:	4a0e      	ldr	r2, [pc, #56]	; (8007ba4 <setDefaultClbcks+0x60>)
 8007b6a:	611a      	str	r2, [r3, #16]
}
 8007b6c:	bf00      	nop
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	200026e4 	.word	0x200026e4
 8007b7c:	08007eb5 	.word	0x08007eb5
 8007b80:	200026c0 	.word	0x200026c0
 8007b84:	08007d75 	.word	0x08007d75
 8007b88:	2000269c 	.word	0x2000269c
 8007b8c:	08007ec1 	.word	0x08007ec1
 8007b90:	20002630 	.word	0x20002630
 8007b94:	08007e2d 	.word	0x08007e2d
 8007b98:	20002654 	.word	0x20002654
 8007b9c:	08007d45 	.word	0x08007d45
 8007ba0:	20002678 	.word	0x20002678
 8007ba4:	08007da5 	.word	0x08007da5

08007ba8 <dateInputSetup>:

void dateInputConfigure(void);
void dateInputSetup(void){
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8007bac:	f7ff ffca 	bl	8007b44 <setDefaultClbcks>
	valDatePos[0] = RtcDate.Date;
 8007bb0:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <dateInputSetup+0x24>)
 8007bb2:	789a      	ldrb	r2, [r3, #2]
 8007bb4:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <dateInputSetup+0x28>)
 8007bb6:	701a      	strb	r2, [r3, #0]
	valDatePos[1] = RtcDate.Month;
 8007bb8:	4b04      	ldr	r3, [pc, #16]	; (8007bcc <dateInputSetup+0x24>)
 8007bba:	785a      	ldrb	r2, [r3, #1]
 8007bbc:	4b04      	ldr	r3, [pc, #16]	; (8007bd0 <dateInputSetup+0x28>)
 8007bbe:	705a      	strb	r2, [r3, #1]
	valDatePos[2] = RtcDate.Year;
 8007bc0:	4b02      	ldr	r3, [pc, #8]	; (8007bcc <dateInputSetup+0x24>)
 8007bc2:	78da      	ldrb	r2, [r3, #3]
 8007bc4:	4b02      	ldr	r3, [pc, #8]	; (8007bd0 <dateInputSetup+0x28>)
 8007bc6:	709a      	strb	r2, [r3, #2]
}
 8007bc8:	bf00      	nop
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	200057d4 	.word	0x200057d4
 8007bd0:	20005d4c 	.word	0x20005d4c

08007bd4 <dateInputMain>:

void dateInputMain(void){
 8007bd4:	b590      	push	{r4, r7, lr}
 8007bd6:	b089      	sub	sp, #36	; 0x24
 8007bd8:	af00      	add	r7, sp, #0
	char buffString[30] = {0};
 8007bda:	2300      	movs	r3, #0
 8007bdc:	603b      	str	r3, [r7, #0]
 8007bde:	1d3b      	adds	r3, r7, #4
 8007be0:	2200      	movs	r2, #0
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	605a      	str	r2, [r3, #4]
 8007be6:	609a      	str	r2, [r3, #8]
 8007be8:	60da      	str	r2, [r3, #12]
 8007bea:	611a      	str	r2, [r3, #16]
 8007bec:	615a      	str	r2, [r3, #20]
 8007bee:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 8007bf0:	463b      	mov	r3, r7
 8007bf2:	494a      	ldr	r1, [pc, #296]	; (8007d1c <dateInputMain+0x148>)
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f00b fb9b 	bl	8013330 <siprintf>
	sprintf(&buffString, "%s %d", months[valDatePos[1]], 2000+valDatePos[2]);
 8007bfa:	4b49      	ldr	r3, [pc, #292]	; (8007d20 <dateInputMain+0x14c>)
 8007bfc:	785b      	ldrb	r3, [r3, #1]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	4b48      	ldr	r3, [pc, #288]	; (8007d24 <dateInputMain+0x150>)
 8007c02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c06:	4b46      	ldr	r3, [pc, #280]	; (8007d20 <dateInputMain+0x14c>)
 8007c08:	789b      	ldrb	r3, [r3, #2]
 8007c0a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007c0e:	4638      	mov	r0, r7
 8007c10:	4945      	ldr	r1, [pc, #276]	; (8007d28 <dateInputMain+0x154>)
 8007c12:	f00b fb8d 	bl	8013330 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 8007c16:	2314      	movs	r3, #20
 8007c18:	b29c      	uxth	r4, r3
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7f8 faf1 	bl	8000204 <strlen>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f1c3 030d 	rsb	r3, r3, #13
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	fb14 f303 	smulbb	r3, r4, r3
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	3323      	adds	r3, #35	; 0x23
 8007c32:	b298      	uxth	r0, r3
 8007c34:	463a      	mov	r2, r7
 8007c36:	4b3d      	ldr	r3, [pc, #244]	; (8007d2c <dateInputMain+0x158>)
 8007c38:	21ae      	movs	r1, #174	; 0xae
 8007c3a:	f7fb f963 	bl	8002f04 <lcdPutStr>
	// here change weekday to dynamic zeller's congruence calculation
	sprintf(&buffString, "%s %d", weekDays[zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2])], valDatePos[0]);
 8007c3e:	4b38      	ldr	r3, [pc, #224]	; (8007d20 <dateInputMain+0x14c>)
 8007c40:	7818      	ldrb	r0, [r3, #0]
 8007c42:	4b37      	ldr	r3, [pc, #220]	; (8007d20 <dateInputMain+0x14c>)
 8007c44:	7859      	ldrb	r1, [r3, #1]
 8007c46:	4b36      	ldr	r3, [pc, #216]	; (8007d20 <dateInputMain+0x14c>)
 8007c48:	789b      	ldrb	r3, [r3, #2]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	461a      	mov	r2, r3
 8007c54:	f000 fcb6 	bl	80085c4 <zellerCongruence>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	4b34      	ldr	r3, [pc, #208]	; (8007d30 <dateInputMain+0x15c>)
 8007c5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c62:	4b2f      	ldr	r3, [pc, #188]	; (8007d20 <dateInputMain+0x14c>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	4638      	mov	r0, r7
 8007c68:	492f      	ldr	r1, [pc, #188]	; (8007d28 <dateInputMain+0x154>)
 8007c6a:	f00b fb61 	bl	8013330 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 8007c6e:	2314      	movs	r3, #20
 8007c70:	b29c      	uxth	r4, r3
 8007c72:	463b      	mov	r3, r7
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7f8 fac5 	bl	8000204 <strlen>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	f1c3 030d 	rsb	r3, r3, #13
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	fb14 f303 	smulbb	r3, r4, r3
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	3323      	adds	r3, #35	; 0x23
 8007c8a:	b298      	uxth	r0, r3
 8007c8c:	463a      	mov	r2, r7
 8007c8e:	4b27      	ldr	r3, [pc, #156]	; (8007d2c <dateInputMain+0x158>)
 8007c90:	21ca      	movs	r1, #202	; 0xca
 8007c92:	f7fb f937 	bl	8002f04 <lcdPutStr>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition], 1);
 8007c96:	4b27      	ldr	r3, [pc, #156]	; (8007d34 <dateInputMain+0x160>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	4b26      	ldr	r3, [pc, #152]	; (8007d38 <dateInputMain+0x164>)
 8007c9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	4b23      	ldr	r3, [pc, #140]	; (8007d34 <dateInputMain+0x160>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4b23      	ldr	r3, [pc, #140]	; (8007d38 <dateInputMain+0x164>)
 8007cac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4b20      	ldr	r3, [pc, #128]	; (8007d34 <dateInputMain+0x160>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4b20      	ldr	r3, [pc, #128]	; (8007d3c <dateInputMain+0x168>)
 8007cba:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007cbe:	18d1      	adds	r1, r2, r3
 8007cc0:	4b1c      	ldr	r3, [pc, #112]	; (8007d34 <dateInputMain+0x160>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4b1e      	ldr	r3, [pc, #120]	; (8007d40 <dateInputMain+0x16c>)
 8007cc8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	2301      	movs	r3, #1
 8007cd0:	f7fb fdd4 	bl	800387c <lcdHLine>
	lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+cursorL[curPosition], cursorYarr[curPosition]+1, 1);
 8007cd4:	4b17      	ldr	r3, [pc, #92]	; (8007d34 <dateInputMain+0x160>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4b17      	ldr	r3, [pc, #92]	; (8007d38 <dateInputMain+0x164>)
 8007cdc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <dateInputMain+0x160>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	4b13      	ldr	r3, [pc, #76]	; (8007d38 <dateInputMain+0x164>)
 8007cea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	4b10      	ldr	r3, [pc, #64]	; (8007d34 <dateInputMain+0x160>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4b11      	ldr	r3, [pc, #68]	; (8007d3c <dateInputMain+0x168>)
 8007cf8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8007cfc:	18d1      	adds	r1, r2, r3
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <dateInputMain+0x160>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	4b0e      	ldr	r3, [pc, #56]	; (8007d40 <dateInputMain+0x16c>)
 8007d06:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f7fb fdb5 	bl	800387c <lcdHLine>
}
 8007d12:	bf00      	nop
 8007d14:	3724      	adds	r7, #36	; 0x24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd90      	pop	{r4, r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	0801baf4 	.word	0x0801baf4
 8007d20:	20005d4c 	.word	0x20005d4c
 8007d24:	20000244 	.word	0x20000244
 8007d28:	0801bb04 	.word	0x0801bb04
 8007d2c:	0803ffc4 	.word	0x0803ffc4
 8007d30:	20000224 	.word	0x20000224
 8007d34:	20005d48 	.word	0x20005d48
 8007d38:	20000278 	.word	0x20000278
 8007d3c:	20000288 	.word	0x20000288
 8007d40:	20000280 	.word	0x20000280

08007d44 <cursorNext>:

static void cursorNext(void){
 8007d44:	b480      	push	{r7}
 8007d46:	af00      	add	r7, sp, #0
	if(curPosition < 2)	curPosition++;
 8007d48:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <cursorNext+0x2c>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d806      	bhi.n	8007d5e <cursorNext+0x1a>
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <cursorNext+0x2c>)
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	3301      	adds	r3, #1
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <cursorNext+0x2c>)
 8007d5a:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 8007d5c:	e002      	b.n	8007d64 <cursorNext+0x20>
	else curPosition = 0;
 8007d5e:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <cursorNext+0x2c>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	701a      	strb	r2, [r3, #0]
}
 8007d64:	bf00      	nop
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	20005d48 	.word	0x20005d48

08007d74 <cursorPrev>:
static void cursorPrev(void){
 8007d74:	b480      	push	{r7}
 8007d76:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 8007d78:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <cursorPrev+0x2c>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d006      	beq.n	8007d8e <cursorPrev+0x1a>
 8007d80:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <cursorPrev+0x2c>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <cursorPrev+0x2c>)
 8007d8a:	701a      	strb	r2, [r3, #0]
	else curPosition = 2;
}
 8007d8c:	e002      	b.n	8007d94 <cursorPrev+0x20>
	else curPosition = 2;
 8007d8e:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <cursorPrev+0x2c>)
 8007d90:	2202      	movs	r2, #2
 8007d92:	701a      	strb	r2, [r3, #0]
}
 8007d94:	bf00      	nop
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20005d48 	.word	0x20005d48

08007da4 <increment>:
static void increment(void){
 8007da4:	b480      	push	{r7}
 8007da6:	af00      	add	r7, sp, #0
	switch(curPosition){
 8007da8:	4b1e      	ldr	r3, [pc, #120]	; (8007e24 <increment+0x80>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d024      	beq.n	8007dfa <increment+0x56>
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	dc31      	bgt.n	8007e18 <increment+0x74>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <increment+0x1a>
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d00f      	beq.n	8007ddc <increment+0x38>
		case 2:
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
			else valDatePos[0] = 1;
			break;
	}
}
 8007dbc:	e02c      	b.n	8007e18 <increment+0x74>
			if(valDatePos[1] < 12 ) valDatePos[1]+=1;
 8007dbe:	4b1a      	ldr	r3, [pc, #104]	; (8007e28 <increment+0x84>)
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	2b0b      	cmp	r3, #11
 8007dc4:	d806      	bhi.n	8007dd4 <increment+0x30>
 8007dc6:	4b18      	ldr	r3, [pc, #96]	; (8007e28 <increment+0x84>)
 8007dc8:	785b      	ldrb	r3, [r3, #1]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	4b16      	ldr	r3, [pc, #88]	; (8007e28 <increment+0x84>)
 8007dd0:	705a      	strb	r2, [r3, #1]
			break;
 8007dd2:	e021      	b.n	8007e18 <increment+0x74>
			else valDatePos[1] = 1;
 8007dd4:	4b14      	ldr	r3, [pc, #80]	; (8007e28 <increment+0x84>)
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	705a      	strb	r2, [r3, #1]
			break;
 8007dda:	e01d      	b.n	8007e18 <increment+0x74>
			if(valDatePos[2] <= 99 ) valDatePos[2]++;
 8007ddc:	4b12      	ldr	r3, [pc, #72]	; (8007e28 <increment+0x84>)
 8007dde:	789b      	ldrb	r3, [r3, #2]
 8007de0:	2b63      	cmp	r3, #99	; 0x63
 8007de2:	d806      	bhi.n	8007df2 <increment+0x4e>
 8007de4:	4b10      	ldr	r3, [pc, #64]	; (8007e28 <increment+0x84>)
 8007de6:	789b      	ldrb	r3, [r3, #2]
 8007de8:	3301      	adds	r3, #1
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	4b0e      	ldr	r3, [pc, #56]	; (8007e28 <increment+0x84>)
 8007dee:	709a      	strb	r2, [r3, #2]
			break;
 8007df0:	e012      	b.n	8007e18 <increment+0x74>
			else valDatePos[2] = 0;
 8007df2:	4b0d      	ldr	r3, [pc, #52]	; (8007e28 <increment+0x84>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	709a      	strb	r2, [r3, #2]
			break;
 8007df8:	e00e      	b.n	8007e18 <increment+0x74>
			if(valDatePos[0] < 31 ) valDatePos[0]+=1;
 8007dfa:	4b0b      	ldr	r3, [pc, #44]	; (8007e28 <increment+0x84>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b1e      	cmp	r3, #30
 8007e00:	d806      	bhi.n	8007e10 <increment+0x6c>
 8007e02:	4b09      	ldr	r3, [pc, #36]	; (8007e28 <increment+0x84>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	3301      	adds	r3, #1
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <increment+0x84>)
 8007e0c:	701a      	strb	r2, [r3, #0]
			break;
 8007e0e:	e002      	b.n	8007e16 <increment+0x72>
			else valDatePos[0] = 1;
 8007e10:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <increment+0x84>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	701a      	strb	r2, [r3, #0]
			break;
 8007e16:	bf00      	nop
}
 8007e18:	bf00      	nop
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	20005d48 	.word	0x20005d48
 8007e28:	20005d4c 	.word	0x20005d4c

08007e2c <decrement>:
static void decrement(void){
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
	switch(curPosition){
 8007e30:	4b1e      	ldr	r3, [pc, #120]	; (8007eac <decrement+0x80>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d024      	beq.n	8007e82 <decrement+0x56>
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	dc31      	bgt.n	8007ea0 <decrement+0x74>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <decrement+0x1a>
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d00f      	beq.n	8007e64 <decrement+0x38>
			case 2:
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
				else valDatePos[0] = 31;
				break;
		}
}
 8007e44:	e02c      	b.n	8007ea0 <decrement+0x74>
				if(valDatePos[1] >= 1 ) valDatePos[1]-=1;
 8007e46:	4b1a      	ldr	r3, [pc, #104]	; (8007eb0 <decrement+0x84>)
 8007e48:	785b      	ldrb	r3, [r3, #1]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d006      	beq.n	8007e5c <decrement+0x30>
 8007e4e:	4b18      	ldr	r3, [pc, #96]	; (8007eb0 <decrement+0x84>)
 8007e50:	785b      	ldrb	r3, [r3, #1]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	4b16      	ldr	r3, [pc, #88]	; (8007eb0 <decrement+0x84>)
 8007e58:	705a      	strb	r2, [r3, #1]
				break;
 8007e5a:	e021      	b.n	8007ea0 <decrement+0x74>
				else valDatePos[1] = 12;
 8007e5c:	4b14      	ldr	r3, [pc, #80]	; (8007eb0 <decrement+0x84>)
 8007e5e:	220c      	movs	r2, #12
 8007e60:	705a      	strb	r2, [r3, #1]
				break;
 8007e62:	e01d      	b.n	8007ea0 <decrement+0x74>
				if(valDatePos[2] > 0 ) valDatePos[2]--;
 8007e64:	4b12      	ldr	r3, [pc, #72]	; (8007eb0 <decrement+0x84>)
 8007e66:	789b      	ldrb	r3, [r3, #2]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d006      	beq.n	8007e7a <decrement+0x4e>
 8007e6c:	4b10      	ldr	r3, [pc, #64]	; (8007eb0 <decrement+0x84>)
 8007e6e:	789b      	ldrb	r3, [r3, #2]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	4b0e      	ldr	r3, [pc, #56]	; (8007eb0 <decrement+0x84>)
 8007e76:	709a      	strb	r2, [r3, #2]
				break;
 8007e78:	e012      	b.n	8007ea0 <decrement+0x74>
				else valDatePos[2] = 100;
 8007e7a:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <decrement+0x84>)
 8007e7c:	2264      	movs	r2, #100	; 0x64
 8007e7e:	709a      	strb	r2, [r3, #2]
				break;
 8007e80:	e00e      	b.n	8007ea0 <decrement+0x74>
				if(valDatePos[0] > 1 ) valDatePos[0]-=1;
 8007e82:	4b0b      	ldr	r3, [pc, #44]	; (8007eb0 <decrement+0x84>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d906      	bls.n	8007e98 <decrement+0x6c>
 8007e8a:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <decrement+0x84>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <decrement+0x84>)
 8007e94:	701a      	strb	r2, [r3, #0]
				break;
 8007e96:	e002      	b.n	8007e9e <decrement+0x72>
				else valDatePos[0] = 31;
 8007e98:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <decrement+0x84>)
 8007e9a:	221f      	movs	r2, #31
 8007e9c:	701a      	strb	r2, [r3, #0]
				break;
 8007e9e:	bf00      	nop
}
 8007ea0:	bf00      	nop
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	20005d48 	.word	0x20005d48
 8007eb0:	20005d4c 	.word	0x20005d4c

08007eb4 <exitScr>:
static void exitScr(void){
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
	applySelectedScreen();
 8007eb8:	f7fa fe08 	bl	8002acc <applySelectedScreen>
}
 8007ebc:	bf00      	nop
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <accept>:
static void accept(void){
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0

	RtcDate.Month = valDatePos[1];
 8007ec4:	4b15      	ldr	r3, [pc, #84]	; (8007f1c <accept+0x5c>)
 8007ec6:	785a      	ldrb	r2, [r3, #1]
 8007ec8:	4b15      	ldr	r3, [pc, #84]	; (8007f20 <accept+0x60>)
 8007eca:	705a      	strb	r2, [r3, #1]
	RtcDate.Date = valDatePos[0];
 8007ecc:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <accept+0x5c>)
 8007ece:	781a      	ldrb	r2, [r3, #0]
 8007ed0:	4b13      	ldr	r3, [pc, #76]	; (8007f20 <accept+0x60>)
 8007ed2:	709a      	strb	r2, [r3, #2]
	RtcDate.Year = valDatePos[2];
 8007ed4:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <accept+0x5c>)
 8007ed6:	789a      	ldrb	r2, [r3, #2]
 8007ed8:	4b11      	ldr	r3, [pc, #68]	; (8007f20 <accept+0x60>)
 8007eda:	70da      	strb	r2, [r3, #3]
	RtcDate.WeekDay = zellerCongruence(valDatePos[0], valDatePos[1], 2000+valDatePos[2]);
 8007edc:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <accept+0x5c>)
 8007ede:	7818      	ldrb	r0, [r3, #0]
 8007ee0:	4b0e      	ldr	r3, [pc, #56]	; (8007f1c <accept+0x5c>)
 8007ee2:	7859      	ldrb	r1, [r3, #1]
 8007ee4:	4b0d      	ldr	r3, [pc, #52]	; (8007f1c <accept+0x5c>)
 8007ee6:	789b      	ldrb	r3, [r3, #2]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	f000 fb67 	bl	80085c4 <zellerCongruence>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	461a      	mov	r2, r3
 8007efa:	4b09      	ldr	r3, [pc, #36]	; (8007f20 <accept+0x60>)
 8007efc:	701a      	strb	r2, [r3, #0]

	if (HAL_RTC_SetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN) != HAL_OK)
 8007efe:	2200      	movs	r2, #0
 8007f00:	4907      	ldr	r1, [pc, #28]	; (8007f20 <accept+0x60>)
 8007f02:	4808      	ldr	r0, [pc, #32]	; (8007f24 <accept+0x64>)
 8007f04:	f003 f84a 	bl	800af9c <HAL_RTC_SetDate>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <accept+0x52>
	{
	Error_Handler();
 8007f0e:	f7fc f88f 	bl	8004030 <Error_Handler>
	}
	exitScr();
 8007f12:	f7ff ffcf 	bl	8007eb4 <exitScr>
}
 8007f16:	bf00      	nop
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20005d4c 	.word	0x20005d4c
 8007f20:	200057d4 	.word	0x200057d4
 8007f24:	20005a60 	.word	0x20005a60

08007f28 <setDefaultClbcks>:
//#include <fonts/zekton45.h>
static uint8_t curPosition = 0;
static uint8_t valTimePos[3] = {0, 0, 0};
static uint16_t cursorXarr[5] = {20, 85, 170, 235, 315};

static void setDefaultClbcks(void){
 8007f28:	b480      	push	{r7}
 8007f2a:	af00      	add	r7, sp, #0
// exit edit mode
	btn_B3.onSinglePressHandler = &exitScr;
 8007f2c:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <setDefaultClbcks+0x34>)
 8007f2e:	4a0c      	ldr	r2, [pc, #48]	; (8007f60 <setDefaultClbcks+0x38>)
 8007f30:	611a      	str	r2, [r3, #16]
//	cursor left
	btn_B2.onSinglePressHandler = &cursorPrev;
 8007f32:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <setDefaultClbcks+0x3c>)
 8007f34:	4a0c      	ldr	r2, [pc, #48]	; (8007f68 <setDefaultClbcks+0x40>)
 8007f36:	611a      	str	r2, [r3, #16]
//	btn_B2.onContinuousShortPressHandler = &cursorPrev;
//	accept
	btn_B1.onSinglePressHandler = &accept;
 8007f38:	4b0c      	ldr	r3, [pc, #48]	; (8007f6c <setDefaultClbcks+0x44>)
 8007f3a:	4a0d      	ldr	r2, [pc, #52]	; (8007f70 <setDefaultClbcks+0x48>)
 8007f3c:	611a      	str	r2, [r3, #16]
//	reduce
	btn_BA.onSinglePressHandler = &decrement;
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <setDefaultClbcks+0x4c>)
 8007f40:	4a0d      	ldr	r2, [pc, #52]	; (8007f78 <setDefaultClbcks+0x50>)
 8007f42:	611a      	str	r2, [r3, #16]
//	cursor right
	btn_BB.onSinglePressHandler = &cursorNext;
 8007f44:	4b0d      	ldr	r3, [pc, #52]	; (8007f7c <setDefaultClbcks+0x54>)
 8007f46:	4a0e      	ldr	r2, [pc, #56]	; (8007f80 <setDefaultClbcks+0x58>)
 8007f48:	611a      	str	r2, [r3, #16]
//	btn_BB.onContinuousShortPressHandler = &cursorNext;
//	increase
	btn_BC.onSinglePressHandler = &increment;
 8007f4a:	4b0e      	ldr	r3, [pc, #56]	; (8007f84 <setDefaultClbcks+0x5c>)
 8007f4c:	4a0e      	ldr	r2, [pc, #56]	; (8007f88 <setDefaultClbcks+0x60>)
 8007f4e:	611a      	str	r2, [r3, #16]
}
 8007f50:	bf00      	nop
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	200026e4 	.word	0x200026e4
 8007f60:	080082ad 	.word	0x080082ad
 8007f64:	200026c0 	.word	0x200026c0
 8007f68:	080080f1 	.word	0x080080f1
 8007f6c:	2000269c 	.word	0x2000269c
 8007f70:	080082b9 	.word	0x080082b9
 8007f74:	20002630 	.word	0x20002630
 8007f78:	080081dd 	.word	0x080081dd
 8007f7c:	20002654 	.word	0x20002654
 8007f80:	080080c1 	.word	0x080080c1
 8007f84:	20002678 	.word	0x20002678
 8007f88:	08008121 	.word	0x08008121

08007f8c <timeInputSetup>:

void timeInputConfigure(void);
void timeInputSetup(void){
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8007f90:	f7ff ffca 	bl	8007f28 <setDefaultClbcks>
	valTimePos[0] = RtcTime.Hours;
 8007f94:	4b06      	ldr	r3, [pc, #24]	; (8007fb0 <timeInputSetup+0x24>)
 8007f96:	781a      	ldrb	r2, [r3, #0]
 8007f98:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <timeInputSetup+0x28>)
 8007f9a:	701a      	strb	r2, [r3, #0]
	valTimePos[1] = RtcTime.Minutes;
 8007f9c:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <timeInputSetup+0x24>)
 8007f9e:	785a      	ldrb	r2, [r3, #1]
 8007fa0:	4b04      	ldr	r3, [pc, #16]	; (8007fb4 <timeInputSetup+0x28>)
 8007fa2:	705a      	strb	r2, [r3, #1]
	valTimePos[2] = RtcTime.Seconds;
 8007fa4:	4b02      	ldr	r3, [pc, #8]	; (8007fb0 <timeInputSetup+0x24>)
 8007fa6:	789a      	ldrb	r2, [r3, #2]
 8007fa8:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <timeInputSetup+0x28>)
 8007faa:	709a      	strb	r2, [r3, #2]
}
 8007fac:	bf00      	nop
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	200057c0 	.word	0x200057c0
 8007fb4:	20005d50 	.word	0x20005d50

08007fb8 <timeInputMain>:

void timeInputMain(void){
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
		char bufStr[30] = {0};
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	603b      	str	r3, [r7, #0]
 8007fc2:	1d3b      	adds	r3, r7, #4
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	605a      	str	r2, [r3, #4]
 8007fca:	609a      	str	r2, [r3, #8]
 8007fcc:	60da      	str	r2, [r3, #12]
 8007fce:	611a      	str	r2, [r3, #16]
 8007fd0:	615a      	str	r2, [r3, #20]
 8007fd2:	831a      	strh	r2, [r3, #24]
		sprintf(&bufStr, "%02d", valTimePos[0]);
 8007fd4:	4b33      	ldr	r3, [pc, #204]	; (80080a4 <timeInputMain+0xec>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	463b      	mov	r3, r7
 8007fdc:	4932      	ldr	r1, [pc, #200]	; (80080a8 <timeInputMain+0xf0>)
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f00b f9a6 	bl	8013330 <siprintf>
		lcdPutStr(20, 76, bufStr, zekton84font);
 8007fe4:	463a      	mov	r2, r7
 8007fe6:	4b31      	ldr	r3, [pc, #196]	; (80080ac <timeInputMain+0xf4>)
 8007fe8:	214c      	movs	r1, #76	; 0x4c
 8007fea:	2014      	movs	r0, #20
 8007fec:	f7fa ff8a 	bl	8002f04 <lcdPutStr>
		sprintf(&bufStr, "%02d", valTimePos[1]);
 8007ff0:	4b2c      	ldr	r3, [pc, #176]	; (80080a4 <timeInputMain+0xec>)
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	492b      	ldr	r1, [pc, #172]	; (80080a8 <timeInputMain+0xf0>)
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f00b f998 	bl	8013330 <siprintf>
		lcdPutStr(170, 76, bufStr, zekton84font);
 8008000:	463a      	mov	r2, r7
 8008002:	4b2a      	ldr	r3, [pc, #168]	; (80080ac <timeInputMain+0xf4>)
 8008004:	214c      	movs	r1, #76	; 0x4c
 8008006:	20aa      	movs	r0, #170	; 0xaa
 8008008:	f7fa ff7c 	bl	8002f04 <lcdPutStr>
		sprintf(&bufStr, "%02d", RtcTime.Seconds);
 800800c:	4b28      	ldr	r3, [pc, #160]	; (80080b0 <timeInputMain+0xf8>)
 800800e:	789b      	ldrb	r3, [r3, #2]
 8008010:	461a      	mov	r2, r3
 8008012:	463b      	mov	r3, r7
 8008014:	4924      	ldr	r1, [pc, #144]	; (80080a8 <timeInputMain+0xf0>)
 8008016:	4618      	mov	r0, r3
 8008018:	f00b f98a 	bl	8013330 <siprintf>
		lcdPutStr(315, 76, bufStr, zekton45font);
 800801c:	463a      	mov	r2, r7
 800801e:	4b25      	ldr	r3, [pc, #148]	; (80080b4 <timeInputMain+0xfc>)
 8008020:	214c      	movs	r1, #76	; 0x4c
 8008022:	f240 103b 	movw	r0, #315	; 0x13b
 8008026:	f7fa ff6d 	bl	8002f04 <lcdPutStr>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 175, 1);
 800802a:	4b23      	ldr	r3, [pc, #140]	; (80080b8 <timeInputMain+0x100>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	4b22      	ldr	r3, [pc, #136]	; (80080bc <timeInputMain+0x104>)
 8008032:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008036:	4618      	mov	r0, r3
 8008038:	4b1f      	ldr	r3, [pc, #124]	; (80080b8 <timeInputMain+0x100>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	461a      	mov	r2, r3
 800803e:	4b1f      	ldr	r3, [pc, #124]	; (80080bc <timeInputMain+0x104>)
 8008040:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008044:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008048:	2301      	movs	r3, #1
 800804a:	22af      	movs	r2, #175	; 0xaf
 800804c:	f7fb fc16 	bl	800387c <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 176, 1);
 8008050:	4b19      	ldr	r3, [pc, #100]	; (80080b8 <timeInputMain+0x100>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	4b19      	ldr	r3, [pc, #100]	; (80080bc <timeInputMain+0x104>)
 8008058:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800805c:	4618      	mov	r0, r3
 800805e:	4b16      	ldr	r3, [pc, #88]	; (80080b8 <timeInputMain+0x100>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	4b15      	ldr	r3, [pc, #84]	; (80080bc <timeInputMain+0x104>)
 8008066:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800806a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800806e:	2301      	movs	r3, #1
 8008070:	22b0      	movs	r2, #176	; 0xb0
 8008072:	f7fb fc03 	bl	800387c <lcdHLine>
		lcdHLine(cursorXarr[curPosition], cursorXarr[curPosition]+60, 177, 1);
 8008076:	4b10      	ldr	r3, [pc, #64]	; (80080b8 <timeInputMain+0x100>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <timeInputMain+0x104>)
 800807e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008082:	4618      	mov	r0, r3
 8008084:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <timeInputMain+0x100>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	461a      	mov	r2, r3
 800808a:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <timeInputMain+0x104>)
 800808c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008090:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008094:	2301      	movs	r3, #1
 8008096:	22b1      	movs	r2, #177	; 0xb1
 8008098:	f7fb fbf0 	bl	800387c <lcdHLine>
}
 800809c:	bf00      	nop
 800809e:	3720      	adds	r7, #32
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	20005d50 	.word	0x20005d50
 80080a8:	0801bbc4 	.word	0x0801bbc4
 80080ac:	08047474 	.word	0x08047474
 80080b0:	200057c0 	.word	0x200057c0
 80080b4:	08041e2c 	.word	0x08041e2c
 80080b8:	20005d4f 	.word	0x20005d4f
 80080bc:	200002b8 	.word	0x200002b8

080080c0 <cursorNext>:

static void cursorNext(void){
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
	if(curPosition < 4)	curPosition++;
 80080c4:	4b09      	ldr	r3, [pc, #36]	; (80080ec <cursorNext+0x2c>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d806      	bhi.n	80080da <cursorNext+0x1a>
 80080cc:	4b07      	ldr	r3, [pc, #28]	; (80080ec <cursorNext+0x2c>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	3301      	adds	r3, #1
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	4b05      	ldr	r3, [pc, #20]	; (80080ec <cursorNext+0x2c>)
 80080d6:	701a      	strb	r2, [r3, #0]
	else curPosition = 0;
}
 80080d8:	e002      	b.n	80080e0 <cursorNext+0x20>
	else curPosition = 0;
 80080da:	4b04      	ldr	r3, [pc, #16]	; (80080ec <cursorNext+0x2c>)
 80080dc:	2200      	movs	r2, #0
 80080de:	701a      	strb	r2, [r3, #0]
}
 80080e0:	bf00      	nop
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20005d4f 	.word	0x20005d4f

080080f0 <cursorPrev>:
static void cursorPrev(void){
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0
	if(curPosition > 0)	curPosition--;
 80080f4:	4b09      	ldr	r3, [pc, #36]	; (800811c <cursorPrev+0x2c>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d006      	beq.n	800810a <cursorPrev+0x1a>
 80080fc:	4b07      	ldr	r3, [pc, #28]	; (800811c <cursorPrev+0x2c>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	3b01      	subs	r3, #1
 8008102:	b2da      	uxtb	r2, r3
 8008104:	4b05      	ldr	r3, [pc, #20]	; (800811c <cursorPrev+0x2c>)
 8008106:	701a      	strb	r2, [r3, #0]
	else curPosition = 4;
}
 8008108:	e002      	b.n	8008110 <cursorPrev+0x20>
	else curPosition = 4;
 800810a:	4b04      	ldr	r3, [pc, #16]	; (800811c <cursorPrev+0x2c>)
 800810c:	2204      	movs	r2, #4
 800810e:	701a      	strb	r2, [r3, #0]
}
 8008110:	bf00      	nop
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20005d4f 	.word	0x20005d4f

08008120 <increment>:
static void increment(void){
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0
	switch(curPosition){
 8008124:	4b2b      	ldr	r3, [pc, #172]	; (80081d4 <increment+0xb4>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	2b04      	cmp	r3, #4
 800812a:	d84d      	bhi.n	80081c8 <increment+0xa8>
 800812c:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <increment+0x14>)
 800812e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008132:	bf00      	nop
 8008134:	08008149 	.word	0x08008149
 8008138:	08008167 	.word	0x08008167
 800813c:	08008185 	.word	0x08008185
 8008140:	080081a3 	.word	0x080081a3
 8008144:	080081c1 	.word	0x080081c1
		case 0:
			if(valTimePos[0] < 13 ) valTimePos[0]+=10;
 8008148:	4b23      	ldr	r3, [pc, #140]	; (80081d8 <increment+0xb8>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b0c      	cmp	r3, #12
 800814e:	d806      	bhi.n	800815e <increment+0x3e>
 8008150:	4b21      	ldr	r3, [pc, #132]	; (80081d8 <increment+0xb8>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	330a      	adds	r3, #10
 8008156:	b2da      	uxtb	r2, r3
 8008158:	4b1f      	ldr	r3, [pc, #124]	; (80081d8 <increment+0xb8>)
 800815a:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 20;
			break;
 800815c:	e034      	b.n	80081c8 <increment+0xa8>
			else valTimePos[0] = 20;
 800815e:	4b1e      	ldr	r3, [pc, #120]	; (80081d8 <increment+0xb8>)
 8008160:	2214      	movs	r2, #20
 8008162:	701a      	strb	r2, [r3, #0]
			break;
 8008164:	e030      	b.n	80081c8 <increment+0xa8>
		case 1:
			if(valTimePos[0] <= 23 ) valTimePos[0]++;
 8008166:	4b1c      	ldr	r3, [pc, #112]	; (80081d8 <increment+0xb8>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	2b17      	cmp	r3, #23
 800816c:	d806      	bhi.n	800817c <increment+0x5c>
 800816e:	4b1a      	ldr	r3, [pc, #104]	; (80081d8 <increment+0xb8>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	3301      	adds	r3, #1
 8008174:	b2da      	uxtb	r2, r3
 8008176:	4b18      	ldr	r3, [pc, #96]	; (80081d8 <increment+0xb8>)
 8008178:	701a      	strb	r2, [r3, #0]
			else valTimePos[0] = 0;
			break;
 800817a:	e025      	b.n	80081c8 <increment+0xa8>
			else valTimePos[0] = 0;
 800817c:	4b16      	ldr	r3, [pc, #88]	; (80081d8 <increment+0xb8>)
 800817e:	2200      	movs	r2, #0
 8008180:	701a      	strb	r2, [r3, #0]
			break;
 8008182:	e021      	b.n	80081c8 <increment+0xa8>
		case 2:
			if(valTimePos[1] < 49 ) valTimePos[1]+=10;
 8008184:	4b14      	ldr	r3, [pc, #80]	; (80081d8 <increment+0xb8>)
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	2b30      	cmp	r3, #48	; 0x30
 800818a:	d806      	bhi.n	800819a <increment+0x7a>
 800818c:	4b12      	ldr	r3, [pc, #72]	; (80081d8 <increment+0xb8>)
 800818e:	785b      	ldrb	r3, [r3, #1]
 8008190:	330a      	adds	r3, #10
 8008192:	b2da      	uxtb	r2, r3
 8008194:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <increment+0xb8>)
 8008196:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 8008198:	e016      	b.n	80081c8 <increment+0xa8>
			else valTimePos[1] = 0;
 800819a:	4b0f      	ldr	r3, [pc, #60]	; (80081d8 <increment+0xb8>)
 800819c:	2200      	movs	r2, #0
 800819e:	705a      	strb	r2, [r3, #1]
			break;
 80081a0:	e012      	b.n	80081c8 <increment+0xa8>
		case 3:
			if(valTimePos[1] < 59 ) valTimePos[1]++;
 80081a2:	4b0d      	ldr	r3, [pc, #52]	; (80081d8 <increment+0xb8>)
 80081a4:	785b      	ldrb	r3, [r3, #1]
 80081a6:	2b3a      	cmp	r3, #58	; 0x3a
 80081a8:	d806      	bhi.n	80081b8 <increment+0x98>
 80081aa:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <increment+0xb8>)
 80081ac:	785b      	ldrb	r3, [r3, #1]
 80081ae:	3301      	adds	r3, #1
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <increment+0xb8>)
 80081b4:	705a      	strb	r2, [r3, #1]
			else valTimePos[1] = 0;
			break;
 80081b6:	e007      	b.n	80081c8 <increment+0xa8>
			else valTimePos[1] = 0;
 80081b8:	4b07      	ldr	r3, [pc, #28]	; (80081d8 <increment+0xb8>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	705a      	strb	r2, [r3, #1]
			break;
 80081be:	e003      	b.n	80081c8 <increment+0xa8>
		case 4:
			valTimePos[2] = 0;
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <increment+0xb8>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	709a      	strb	r2, [r3, #2]
			break;
 80081c6:	bf00      	nop
	}
}
 80081c8:	bf00      	nop
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20005d4f 	.word	0x20005d4f
 80081d8:	20005d50 	.word	0x20005d50

080081dc <decrement>:
static void decrement(void){
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
	switch(curPosition){
 80081e0:	4b2e      	ldr	r3, [pc, #184]	; (800829c <decrement+0xc0>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	d857      	bhi.n	8008298 <decrement+0xbc>
 80081e8:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <decrement+0x14>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	08008205 	.word	0x08008205
 80081f4:	08008223 	.word	0x08008223
 80081f8:	08008241 	.word	0x08008241
 80081fc:	0800825f 	.word	0x0800825f
 8008200:	0800827d 	.word	0x0800827d
			case 0:
				if(valTimePos[0] > 9 ) valTimePos[0]-=10;
 8008204:	4b26      	ldr	r3, [pc, #152]	; (80082a0 <decrement+0xc4>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	2b09      	cmp	r3, #9
 800820a:	d906      	bls.n	800821a <decrement+0x3e>
 800820c:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <decrement+0xc4>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	3b0a      	subs	r3, #10
 8008212:	b2da      	uxtb	r2, r3
 8008214:	4b22      	ldr	r3, [pc, #136]	; (80082a0 <decrement+0xc4>)
 8008216:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 0;
				break;
 8008218:	e03e      	b.n	8008298 <decrement+0xbc>
				else valTimePos[0] = 0;
 800821a:	4b21      	ldr	r3, [pc, #132]	; (80082a0 <decrement+0xc4>)
 800821c:	2200      	movs	r2, #0
 800821e:	701a      	strb	r2, [r3, #0]
				break;
 8008220:	e03a      	b.n	8008298 <decrement+0xbc>
			case 1:
				if(valTimePos[0] > 0 ) valTimePos[0]--;
 8008222:	4b1f      	ldr	r3, [pc, #124]	; (80082a0 <decrement+0xc4>)
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d006      	beq.n	8008238 <decrement+0x5c>
 800822a:	4b1d      	ldr	r3, [pc, #116]	; (80082a0 <decrement+0xc4>)
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	3b01      	subs	r3, #1
 8008230:	b2da      	uxtb	r2, r3
 8008232:	4b1b      	ldr	r3, [pc, #108]	; (80082a0 <decrement+0xc4>)
 8008234:	701a      	strb	r2, [r3, #0]
				else valTimePos[0] = 23;
				break;
 8008236:	e02f      	b.n	8008298 <decrement+0xbc>
				else valTimePos[0] = 23;
 8008238:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <decrement+0xc4>)
 800823a:	2217      	movs	r2, #23
 800823c:	701a      	strb	r2, [r3, #0]
				break;
 800823e:	e02b      	b.n	8008298 <decrement+0xbc>
			case 2:
				if(valTimePos[1] > 9 ) valTimePos[1]-=10;
 8008240:	4b17      	ldr	r3, [pc, #92]	; (80082a0 <decrement+0xc4>)
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b09      	cmp	r3, #9
 8008246:	d906      	bls.n	8008256 <decrement+0x7a>
 8008248:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <decrement+0xc4>)
 800824a:	785b      	ldrb	r3, [r3, #1]
 800824c:	3b0a      	subs	r3, #10
 800824e:	b2da      	uxtb	r2, r3
 8008250:	4b13      	ldr	r3, [pc, #76]	; (80082a0 <decrement+0xc4>)
 8008252:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 0;
				break;
 8008254:	e020      	b.n	8008298 <decrement+0xbc>
				else valTimePos[1] = 0;
 8008256:	4b12      	ldr	r3, [pc, #72]	; (80082a0 <decrement+0xc4>)
 8008258:	2200      	movs	r2, #0
 800825a:	705a      	strb	r2, [r3, #1]
				break;
 800825c:	e01c      	b.n	8008298 <decrement+0xbc>
			case 3:
				if(valTimePos[1] > 0 ) valTimePos[1]--;
 800825e:	4b10      	ldr	r3, [pc, #64]	; (80082a0 <decrement+0xc4>)
 8008260:	785b      	ldrb	r3, [r3, #1]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d006      	beq.n	8008274 <decrement+0x98>
 8008266:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <decrement+0xc4>)
 8008268:	785b      	ldrb	r3, [r3, #1]
 800826a:	3b01      	subs	r3, #1
 800826c:	b2da      	uxtb	r2, r3
 800826e:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <decrement+0xc4>)
 8008270:	705a      	strb	r2, [r3, #1]
				else valTimePos[1] = 59;
				break;
 8008272:	e011      	b.n	8008298 <decrement+0xbc>
				else valTimePos[1] = 59;
 8008274:	4b0a      	ldr	r3, [pc, #40]	; (80082a0 <decrement+0xc4>)
 8008276:	223b      	movs	r2, #59	; 0x3b
 8008278:	705a      	strb	r2, [r3, #1]
				break;
 800827a:	e00d      	b.n	8008298 <decrement+0xbc>
			case 4:
//				val[2] = 0;
				RtcTime.Seconds = 0;
 800827c:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <decrement+0xc8>)
 800827e:	2200      	movs	r2, #0
 8008280:	709a      	strb	r2, [r3, #2]
				if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 8008282:	2200      	movs	r2, #0
 8008284:	4907      	ldr	r1, [pc, #28]	; (80082a4 <decrement+0xc8>)
 8008286:	4808      	ldr	r0, [pc, #32]	; (80082a8 <decrement+0xcc>)
 8008288:	f002 fd90 	bl	800adac <HAL_RTC_SetTime>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <decrement+0xba>
					{
						Error_Handler();
 8008292:	f7fb fecd 	bl	8004030 <Error_Handler>
					}
				break;
 8008296:	bf00      	nop
		}
}
 8008298:	bf00      	nop
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20005d4f 	.word	0x20005d4f
 80082a0:	20005d50 	.word	0x20005d50
 80082a4:	200057c0 	.word	0x200057c0
 80082a8:	20005a60 	.word	0x20005a60

080082ac <exitScr>:
static void exitScr(void){
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
	applySelectedScreen();
 80082b0:	f7fa fc0c 	bl	8002acc <applySelectedScreen>
}
 80082b4:	bf00      	nop
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <accept>:
static void accept(void){
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
	RtcTime.Hours = valTimePos[0];
 80082bc:	4b0d      	ldr	r3, [pc, #52]	; (80082f4 <accept+0x3c>)
 80082be:	781a      	ldrb	r2, [r3, #0]
 80082c0:	4b0d      	ldr	r3, [pc, #52]	; (80082f8 <accept+0x40>)
 80082c2:	701a      	strb	r2, [r3, #0]
	RtcTime.Minutes = valTimePos[1];
 80082c4:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <accept+0x3c>)
 80082c6:	785a      	ldrb	r2, [r3, #1]
 80082c8:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <accept+0x40>)
 80082ca:	705a      	strb	r2, [r3, #1]
//	RtcTime.Seconds = val[2];
	RtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80082cc:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <accept+0x40>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	60da      	str	r2, [r3, #12]
	RtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80082d2:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <accept+0x40>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN) != HAL_OK)
 80082d8:	2200      	movs	r2, #0
 80082da:	4907      	ldr	r1, [pc, #28]	; (80082f8 <accept+0x40>)
 80082dc:	4807      	ldr	r0, [pc, #28]	; (80082fc <accept+0x44>)
 80082de:	f002 fd65 	bl	800adac <HAL_RTC_SetTime>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <accept+0x34>
	{
	Error_Handler();
 80082e8:	f7fb fea2 	bl	8004030 <Error_Handler>
//
//	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
//	{
//	Error_Handler();
//	}
	exitScr();
 80082ec:	f7ff ffde 	bl	80082ac <exitScr>
}
 80082f0:	bf00      	nop
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20005d50 	.word	0x20005d50
 80082f8:	200057c0 	.word	0x200057c0
 80082fc:	20005a60 	.word	0x20005a60

08008300 <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	4613      	mov	r3, r2
 800830c:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	88fa      	ldrh	r2, [r7, #6]
 8008318:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	895b      	ldrh	r3, [r3, #10]
 800831e:	461a      	mov	r2, r3
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	fb02 f303 	mul.w	r3, r2, r3
 8008326:	4618      	mov	r0, r3
 8008328:	f009 feb6 	bl	8012098 <malloc>
 800832c:	4603      	mov	r3, r0
 800832e:	461a      	mov	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	741a      	strb	r2, [r3, #16]
}
 800834c:	bf00      	nop
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	891a      	ldrh	r2, [r3, #8]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	895b      	ldrh	r3, [r3, #10]
 8008364:	429a      	cmp	r2, r3
 8008366:	bf0c      	ite	eq
 8008368:	2301      	moveq	r3, #1
 800836a:	2300      	movne	r3, #0
 800836c:	b2db      	uxtb	r3, r3
}
 800836e:	4618      	mov	r0, r3
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 800837a:	b580      	push	{r7, lr}
 800837c:	b082      	sub	sp, #8
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff ffe5 	bl	8008354 <cbuf_isFull>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d02a      	beq.n	80083e6 <cbuf_ovw+0x6c>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	88db      	ldrh	r3, [r3, #6]
 8008398:	4619      	mov	r1, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	fb01 f303 	mul.w	r3, r1, r3
 80083a2:	18d0      	adds	r0, r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	461a      	mov	r2, r3
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	f009 fe84 	bl	80120b8 <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	88db      	ldrh	r3, [r3, #6]
 80083b4:	3301      	adds	r3, #1
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	8952      	ldrh	r2, [r2, #10]
 80083ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80083be:	fb01 f202 	mul.w	r2, r1, r2
 80083c2:	1a9b      	subs	r3, r3, r2
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	889b      	ldrh	r3, [r3, #4]
 80083ce:	3301      	adds	r3, #1
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	8952      	ldrh	r2, [r2, #10]
 80083d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80083d8:	fb01 f202 	mul.w	r2, r1, r2
 80083dc:	1a9b      	subs	r3, r3, r2
 80083de:	b29a      	uxth	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	809a      	strh	r2, [r3, #4]
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
		b->elemNum++;
		b->tail = (b->tail + 1) % b->maxSize;
		return 1;
	}
}
 80083e4:	e023      	b.n	800842e <cbuf_ovw+0xb4>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	88db      	ldrh	r3, [r3, #6]
 80083ee:	4619      	mov	r1, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	fb01 f303 	mul.w	r3, r1, r3
 80083f8:	18d0      	adds	r0, r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	461a      	mov	r2, r3
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	f009 fe59 	bl	80120b8 <memcpy>
		b->elemNum++;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	891b      	ldrh	r3, [r3, #8]
 800840a:	3301      	adds	r3, #1
 800840c:	b29a      	uxth	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	88db      	ldrh	r3, [r3, #6]
 8008416:	3301      	adds	r3, #1
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	8952      	ldrh	r2, [r2, #10]
 800841c:	fb93 f1f2 	sdiv	r1, r3, r2
 8008420:	fb01 f202 	mul.w	r2, r1, r2
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	b29a      	uxth	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	80da      	strh	r2, [r3, #6]
		return 1;
 800842c:	2301      	movs	r3, #1
}
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <cbuf_readn>:
// non-destructive read
void* cbuf_read(cbuf_t* b);
// non-destructive read of nth element
void* cbuf_readn(cbuf_t* b, uint16_t pos){
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	807b      	strh	r3, [r7, #2]
	pos += b->head;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	889a      	ldrh	r2, [r3, #4]
 8008446:	887b      	ldrh	r3, [r7, #2]
 8008448:	4413      	add	r3, r2
 800844a:	807b      	strh	r3, [r7, #2]
	pos = pos % b->maxSize;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	895a      	ldrh	r2, [r3, #10]
 8008450:	887b      	ldrh	r3, [r7, #2]
 8008452:	fbb3 f1f2 	udiv	r1, r3, r2
 8008456:	fb01 f202 	mul.w	r2, r1, r2
 800845a:	1a9b      	subs	r3, r3, r2
 800845c:	807b      	strh	r3, [r7, #2]
	return(b->elements+pos*b->elemSize);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	887b      	ldrh	r3, [r7, #2]
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	68c9      	ldr	r1, [r1, #12]
 8008468:	fb01 f303 	mul.w	r3, r1, r3
 800846c:	4413      	add	r3, r2
}
 800846e:	4618      	mov	r0, r3
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	887a      	ldrh	r2, [r7, #2]
 800848a:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	895b      	ldrh	r3, [r3, #10]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4618      	mov	r0, r3
 8008494:	f009 fe00 	bl	8012098 <malloc>
 8008498:	4603      	mov	r3, r0
 800849a:	461a      	mov	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	731a      	strb	r2, [r3, #12]
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	891a      	ldrh	r2, [r3, #8]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	895b      	ldrh	r3, [r3, #10]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	bf0c      	ite	eq
 80084d4:	2301      	moveq	r3, #1
 80084d6:	2300      	movne	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
}
 80084da:	4618      	mov	r0, r3
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff ffe5 	bl	80084c0 <ring_buffer_full>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d022      	beq.n	8008542 <add_ovw_ring_buffer+0x5c>
		b->values[b->tail] = value;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	88db      	ldrh	r3, [r3, #6]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	88db      	ldrh	r3, [r3, #6]
 8008510:	3301      	adds	r3, #1
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	8952      	ldrh	r2, [r2, #10]
 8008516:	fb93 f1f2 	sdiv	r1, r3, r2
 800851a:	fb01 f202 	mul.w	r2, r1, r2
 800851e:	1a9b      	subs	r3, r3, r2
 8008520:	b29a      	uxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	889b      	ldrh	r3, [r3, #4]
 800852a:	3301      	adds	r3, #1
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	8952      	ldrh	r2, [r2, #10]
 8008530:	fb93 f1f2 	sdiv	r1, r3, r2
 8008534:	fb01 f202 	mul.w	r2, r1, r2
 8008538:	1a9b      	subs	r3, r3, r2
 800853a:	b29a      	uxth	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	809a      	strh	r2, [r3, #4]
		b->values[b->tail] = value;
		b->num_entries++;
		b->tail = (b->tail + 1) % b->size;
		return 1;
	}
}
 8008540:	e01b      	b.n	800857a <add_ovw_ring_buffer+0x94>
		b->values[b->tail] = value;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	88db      	ldrh	r3, [r3, #6]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	891b      	ldrh	r3, [r3, #8]
 8008556:	3301      	adds	r3, #1
 8008558:	b29a      	uxth	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	88db      	ldrh	r3, [r3, #6]
 8008562:	3301      	adds	r3, #1
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	8952      	ldrh	r2, [r2, #10]
 8008568:	fb93 f1f2 	sdiv	r1, r3, r2
 800856c:	fb01 f202 	mul.w	r2, r1, r2
 8008570:	1a9b      	subs	r3, r3, r2
 8008572:	b29a      	uxth	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	80da      	strh	r2, [r3, #6]
		return 1;
 8008578:	2301      	movs	r3, #1
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <read_nth_ring_buffer>:
int read_nth_ring_buffer(RingBuffer_t* b, uint16_t position){
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	460b      	mov	r3, r1
 800858c:	807b      	strh	r3, [r7, #2]
	position += b->head;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	889a      	ldrh	r2, [r3, #4]
 8008592:	887b      	ldrh	r3, [r7, #2]
 8008594:	4413      	add	r3, r2
 8008596:	807b      	strh	r3, [r7, #2]
	position = position % b->size;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	895a      	ldrh	r2, [r3, #10]
 800859c:	887b      	ldrh	r3, [r7, #2]
 800859e:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a2:	fb01 f202 	mul.w	r2, r1, r2
 80085a6:	1a9b      	subs	r3, r3, r2
 80085a8:	807b      	strh	r3, [r7, #2]
	return(b->values[position]);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	887b      	ldrh	r3, [r7, #2]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	681b      	ldr	r3, [r3, #0]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
	...

080085c4 <zellerCongruence>:
 */

#include "timeUtils.h"


uint8_t zellerCongruence(uint8_t day, uint8_t month, uint16_t year){
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	71fb      	strb	r3, [r7, #7]
 80085ce:	460b      	mov	r3, r1
 80085d0:	71bb      	strb	r3, [r7, #6]
 80085d2:	4613      	mov	r3, r2
 80085d4:	80bb      	strh	r3, [r7, #4]
	if (month == 1) {
 80085d6:	79bb      	ldrb	r3, [r7, #6]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d104      	bne.n	80085e6 <zellerCongruence+0x22>
	        month = 13;
 80085dc:	230d      	movs	r3, #13
 80085de:	71bb      	strb	r3, [r7, #6]
	        year--;
 80085e0:	88bb      	ldrh	r3, [r7, #4]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	80bb      	strh	r3, [r7, #4]
	    }
	    if (month == 2) {
 80085e6:	79bb      	ldrb	r3, [r7, #6]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d104      	bne.n	80085f6 <zellerCongruence+0x32>
	        month = 14;
 80085ec:	230e      	movs	r3, #14
 80085ee:	71bb      	strb	r3, [r7, #6]
	        year--;
 80085f0:	88bb      	ldrh	r3, [r7, #4]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	80bb      	strh	r3, [r7, #4]
	    }
	    uint8_t q = day;
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	73fb      	strb	r3, [r7, #15]
	    uint8_t m = month;
 80085fa:	79bb      	ldrb	r3, [r7, #6]
 80085fc:	73bb      	strb	r3, [r7, #14]
	    uint8_t k = year % 100;
 80085fe:	88bb      	ldrh	r3, [r7, #4]
 8008600:	4a29      	ldr	r2, [pc, #164]	; (80086a8 <zellerCongruence+0xe4>)
 8008602:	fba2 1203 	umull	r1, r2, r2, r3
 8008606:	0952      	lsrs	r2, r2, #5
 8008608:	2164      	movs	r1, #100	; 0x64
 800860a:	fb01 f202 	mul.w	r2, r1, r2
 800860e:	1a9b      	subs	r3, r3, r2
 8008610:	b29b      	uxth	r3, r3
 8008612:	737b      	strb	r3, [r7, #13]
	    uint8_t j = year / 100;
 8008614:	88bb      	ldrh	r3, [r7, #4]
 8008616:	4a24      	ldr	r2, [pc, #144]	; (80086a8 <zellerCongruence+0xe4>)
 8008618:	fba2 2303 	umull	r2, r3, r2, r3
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	b29b      	uxth	r3, r3
 8008620:	733b      	strb	r3, [r7, #12]
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8008622:	7bf9      	ldrb	r1, [r7, #15]
 8008624:	7bbb      	ldrb	r3, [r7, #14]
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	4613      	mov	r3, r2
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	4a1e      	ldr	r2, [pc, #120]	; (80086ac <zellerCongruence+0xe8>)
 8008634:	fb82 0203 	smull	r0, r2, r2, r3
 8008638:	1052      	asrs	r2, r2, #1
 800863a:	17db      	asrs	r3, r3, #31
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	18ca      	adds	r2, r1, r3
 8008640:	7b7b      	ldrb	r3, [r7, #13]
 8008642:	4413      	add	r3, r2
 8008644:	7b7a      	ldrb	r2, [r7, #13]
 8008646:	0892      	lsrs	r2, r2, #2
 8008648:	b2d2      	uxtb	r2, r2
 800864a:	4413      	add	r3, r2
	                              j / 4 + 5 * j;
 800864c:	7b3a      	ldrb	r2, [r7, #12]
 800864e:	0892      	lsrs	r2, r2, #2
 8008650:	b2d2      	uxtb	r2, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 8008652:	1899      	adds	r1, r3, r2
	                              j / 4 + 5 * j;
 8008654:	7b3a      	ldrb	r2, [r7, #12]
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
	    int h = q + 13 * (m + 1) / 5 + k + k / 4 +
 800865c:	440b      	add	r3, r1
 800865e:	60bb      	str	r3, [r7, #8]
	    h = h % 7;
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	4b13      	ldr	r3, [pc, #76]	; (80086b0 <zellerCongruence+0xec>)
 8008664:	fb83 1302 	smull	r1, r3, r3, r2
 8008668:	4413      	add	r3, r2
 800866a:	1099      	asrs	r1, r3, #2
 800866c:	17d3      	asrs	r3, r2, #31
 800866e:	1ac9      	subs	r1, r1, r3
 8008670:	460b      	mov	r3, r1
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	1a5b      	subs	r3, r3, r1
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	60bb      	str	r3, [r7, #8]
	    return (h+5)%7 + 1;
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	1d5a      	adds	r2, r3, #5
 800867e:	4b0c      	ldr	r3, [pc, #48]	; (80086b0 <zellerCongruence+0xec>)
 8008680:	fb83 1302 	smull	r1, r3, r3, r2
 8008684:	4413      	add	r3, r2
 8008686:	1099      	asrs	r1, r3, #2
 8008688:	17d3      	asrs	r3, r2, #31
 800868a:	1ac9      	subs	r1, r1, r3
 800868c:	460b      	mov	r3, r1
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	1a5b      	subs	r3, r3, r1
 8008692:	1ad1      	subs	r1, r2, r3
 8008694:	b2cb      	uxtb	r3, r1
 8008696:	3301      	adds	r3, #1
 8008698:	b2db      	uxtb	r3, r3
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	51eb851f 	.word	0x51eb851f
 80086ac:	66666667 	.word	0x66666667
 80086b0:	92492493 	.word	0x92492493

080086b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80086b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80086ec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80086b8:	480d      	ldr	r0, [pc, #52]	; (80086f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80086ba:	490e      	ldr	r1, [pc, #56]	; (80086f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80086bc:	4a0e      	ldr	r2, [pc, #56]	; (80086f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80086be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80086c0:	e002      	b.n	80086c8 <LoopCopyDataInit>

080086c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80086c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80086c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80086c6:	3304      	adds	r3, #4

080086c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80086c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80086ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80086cc:	d3f9      	bcc.n	80086c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80086ce:	4a0b      	ldr	r2, [pc, #44]	; (80086fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80086d0:	4c0b      	ldr	r4, [pc, #44]	; (8008700 <LoopFillZerobss+0x26>)
  movs r3, #0
 80086d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80086d4:	e001      	b.n	80086da <LoopFillZerobss>

080086d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80086d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80086d8:	3204      	adds	r2, #4

080086da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80086da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80086dc:	d3fb      	bcc.n	80086d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80086de:	f7fc f803 	bl	80046e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80086e2:	f009 fcb5 	bl	8012050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80086e6:	f7fb fad7 	bl	8003c98 <main>
  bx  lr    
 80086ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80086ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80086f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80086f4:	20000528 	.word	0x20000528
  ldr r2, =_sidata
 80086f8:	08049f60 	.word	0x08049f60
  ldr r2, =_sbss
 80086fc:	20000528 	.word	0x20000528
  ldr r4, =_ebss
 8008700:	20005dcc 	.word	0x20005dcc

08008704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008704:	e7fe      	b.n	8008704 <ADC_IRQHandler>
	...

08008708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800870c:	4b0e      	ldr	r3, [pc, #56]	; (8008748 <HAL_Init+0x40>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a0d      	ldr	r2, [pc, #52]	; (8008748 <HAL_Init+0x40>)
 8008712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008716:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008718:	4b0b      	ldr	r3, [pc, #44]	; (8008748 <HAL_Init+0x40>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a0a      	ldr	r2, [pc, #40]	; (8008748 <HAL_Init+0x40>)
 800871e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008722:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008724:	4b08      	ldr	r3, [pc, #32]	; (8008748 <HAL_Init+0x40>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a07      	ldr	r2, [pc, #28]	; (8008748 <HAL_Init+0x40>)
 800872a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800872e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008730:	2003      	movs	r0, #3
 8008732:	f000 f94f 	bl	80089d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008736:	2000      	movs	r0, #0
 8008738:	f000 f808 	bl	800874c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800873c:	f7fb fde6 	bl	800430c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	40023c00 	.word	0x40023c00

0800874c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008754:	4b12      	ldr	r3, [pc, #72]	; (80087a0 <HAL_InitTick+0x54>)
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <HAL_InitTick+0x58>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	4619      	mov	r1, r3
 800875e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008762:	fbb3 f3f1 	udiv	r3, r3, r1
 8008766:	fbb2 f3f3 	udiv	r3, r2, r3
 800876a:	4618      	mov	r0, r3
 800876c:	f000 f967 	bl	8008a3e <HAL_SYSTICK_Config>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e00e      	b.n	8008798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b0f      	cmp	r3, #15
 800877e:	d80a      	bhi.n	8008796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008780:	2200      	movs	r2, #0
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	f000 f92f 	bl	80089ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800878c:	4a06      	ldr	r2, [pc, #24]	; (80087a8 <HAL_InitTick+0x5c>)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	e000      	b.n	8008798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	200001b4 	.word	0x200001b4
 80087a4:	200002f0 	.word	0x200002f0
 80087a8:	200002ec 	.word	0x200002ec

080087ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <HAL_IncTick+0x20>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
 80087b6:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <HAL_IncTick+0x24>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4413      	add	r3, r2
 80087bc:	4a04      	ldr	r2, [pc, #16]	; (80087d0 <HAL_IncTick+0x24>)
 80087be:	6013      	str	r3, [r2, #0]
}
 80087c0:	bf00      	nop
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	200002f0 	.word	0x200002f0
 80087d0:	20005d54 	.word	0x20005d54

080087d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087d4:	b480      	push	{r7}
 80087d6:	af00      	add	r7, sp, #0
  return uwTick;
 80087d8:	4b03      	ldr	r3, [pc, #12]	; (80087e8 <HAL_GetTick+0x14>)
 80087da:	681b      	ldr	r3, [r3, #0]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	20005d54 	.word	0x20005d54

080087ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80087f4:	f7ff ffee 	bl	80087d4 <HAL_GetTick>
 80087f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d005      	beq.n	8008812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008806:	4b0a      	ldr	r3, [pc, #40]	; (8008830 <HAL_Delay+0x44>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008812:	bf00      	nop
 8008814:	f7ff ffde 	bl	80087d4 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	429a      	cmp	r2, r3
 8008822:	d8f7      	bhi.n	8008814 <HAL_Delay+0x28>
  {
  }
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	200002f0 	.word	0x200002f0

08008834 <__NVIC_SetPriorityGrouping>:
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f003 0307 	and.w	r3, r3, #7
 8008842:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008844:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <__NVIC_SetPriorityGrouping+0x44>)
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008850:	4013      	ands	r3, r2
 8008852:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800885c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008866:	4a04      	ldr	r2, [pc, #16]	; (8008878 <__NVIC_SetPriorityGrouping+0x44>)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	60d3      	str	r3, [r2, #12]
}
 800886c:	bf00      	nop
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	e000ed00 	.word	0xe000ed00

0800887c <__NVIC_GetPriorityGrouping>:
{
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008880:	4b04      	ldr	r3, [pc, #16]	; (8008894 <__NVIC_GetPriorityGrouping+0x18>)
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	0a1b      	lsrs	r3, r3, #8
 8008886:	f003 0307 	and.w	r3, r3, #7
}
 800888a:	4618      	mov	r0, r3
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	e000ed00 	.word	0xe000ed00

08008898 <__NVIC_EnableIRQ>:
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	db0b      	blt.n	80088c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	f003 021f 	and.w	r2, r3, #31
 80088b0:	4907      	ldr	r1, [pc, #28]	; (80088d0 <__NVIC_EnableIRQ+0x38>)
 80088b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088b6:	095b      	lsrs	r3, r3, #5
 80088b8:	2001      	movs	r0, #1
 80088ba:	fa00 f202 	lsl.w	r2, r0, r2
 80088be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80088c2:	bf00      	nop
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	e000e100 	.word	0xe000e100

080088d4 <__NVIC_SetPriority>:
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	6039      	str	r1, [r7, #0]
 80088de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	db0a      	blt.n	80088fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	490c      	ldr	r1, [pc, #48]	; (8008920 <__NVIC_SetPriority+0x4c>)
 80088ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088f2:	0112      	lsls	r2, r2, #4
 80088f4:	b2d2      	uxtb	r2, r2
 80088f6:	440b      	add	r3, r1
 80088f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80088fc:	e00a      	b.n	8008914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	b2da      	uxtb	r2, r3
 8008902:	4908      	ldr	r1, [pc, #32]	; (8008924 <__NVIC_SetPriority+0x50>)
 8008904:	79fb      	ldrb	r3, [r7, #7]
 8008906:	f003 030f 	and.w	r3, r3, #15
 800890a:	3b04      	subs	r3, #4
 800890c:	0112      	lsls	r2, r2, #4
 800890e:	b2d2      	uxtb	r2, r2
 8008910:	440b      	add	r3, r1
 8008912:	761a      	strb	r2, [r3, #24]
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr
 8008920:	e000e100 	.word	0xe000e100
 8008924:	e000ed00 	.word	0xe000ed00

08008928 <NVIC_EncodePriority>:
{
 8008928:	b480      	push	{r7}
 800892a:	b089      	sub	sp, #36	; 0x24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f003 0307 	and.w	r3, r3, #7
 800893a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	f1c3 0307 	rsb	r3, r3, #7
 8008942:	2b04      	cmp	r3, #4
 8008944:	bf28      	it	cs
 8008946:	2304      	movcs	r3, #4
 8008948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	3304      	adds	r3, #4
 800894e:	2b06      	cmp	r3, #6
 8008950:	d902      	bls.n	8008958 <NVIC_EncodePriority+0x30>
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	3b03      	subs	r3, #3
 8008956:	e000      	b.n	800895a <NVIC_EncodePriority+0x32>
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800895c:	f04f 32ff 	mov.w	r2, #4294967295
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	fa02 f303 	lsl.w	r3, r2, r3
 8008966:	43da      	mvns	r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	401a      	ands	r2, r3
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008970:	f04f 31ff 	mov.w	r1, #4294967295
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	fa01 f303 	lsl.w	r3, r1, r3
 800897a:	43d9      	mvns	r1, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008980:	4313      	orrs	r3, r2
}
 8008982:	4618      	mov	r0, r3
 8008984:	3724      	adds	r7, #36	; 0x24
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
	...

08008990 <SysTick_Config>:
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	3b01      	subs	r3, #1
 800899c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089a0:	d301      	bcc.n	80089a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80089a2:	2301      	movs	r3, #1
 80089a4:	e00f      	b.n	80089c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089a6:	4a0a      	ldr	r2, [pc, #40]	; (80089d0 <SysTick_Config+0x40>)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80089ae:	210f      	movs	r1, #15
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	f7ff ff8e 	bl	80088d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089b8:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <SysTick_Config+0x40>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089be:	4b04      	ldr	r3, [pc, #16]	; (80089d0 <SysTick_Config+0x40>)
 80089c0:	2207      	movs	r2, #7
 80089c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	e000e010 	.word	0xe000e010

080089d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff ff29 	bl	8008834 <__NVIC_SetPriorityGrouping>
}
 80089e2:	bf00      	nop
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b086      	sub	sp, #24
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	4603      	mov	r3, r0
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	607a      	str	r2, [r7, #4]
 80089f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80089fc:	f7ff ff3e 	bl	800887c <__NVIC_GetPriorityGrouping>
 8008a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	68b9      	ldr	r1, [r7, #8]
 8008a06:	6978      	ldr	r0, [r7, #20]
 8008a08:	f7ff ff8e 	bl	8008928 <NVIC_EncodePriority>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a12:	4611      	mov	r1, r2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff ff5d 	bl	80088d4 <__NVIC_SetPriority>
}
 8008a1a:	bf00      	nop
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	4603      	mov	r3, r0
 8008a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7ff ff31 	bl	8008898 <__NVIC_EnableIRQ>
}
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b082      	sub	sp, #8
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff ffa2 	bl	8008990 <SysTick_Config>
 8008a4c:	4603      	mov	r3, r0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b086      	sub	sp, #24
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a6c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_DMA_Start_IT+0x26>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e040      	b.n	8008afe <HAL_DMA_Start_IT+0xa8>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d12f      	bne.n	8008af0 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2202      	movs	r2, #2
 8008a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	68b9      	ldr	r1, [r7, #8]
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f000 f82e 	bl	8008b06 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aae:	223f      	movs	r2, #63	; 0x3f
 8008ab0:	409a      	lsls	r2, r3
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f042 0216 	orr.w	r2, r2, #22
 8008ac4:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d007      	beq.n	8008ade <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f042 0208 	orr.w	r2, r2, #8
 8008adc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f042 0201 	orr.w	r2, r2, #1
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	e005      	b.n	8008afc <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008af8:	2302      	movs	r3, #2
 8008afa:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b085      	sub	sp, #20
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	607a      	str	r2, [r7, #4]
 8008b12:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b22:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	2b40      	cmp	r3, #64	; 0x40
 8008b32:	d108      	bne.n	8008b46 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008b44:	e007      	b.n	8008b56 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	60da      	str	r2, [r3, #12]
}
 8008b56:	bf00      	nop
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
	...

08008b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b089      	sub	sp, #36	; 0x24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61fb      	str	r3, [r7, #28]
 8008b7e:	e177      	b.n	8008e70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b80:	2201      	movs	r2, #1
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	4013      	ands	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	f040 8166 	bne.w	8008e6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d005      	beq.n	8008bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d130      	bne.n	8008c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	2203      	movs	r2, #3
 8008bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc6:	43db      	mvns	r3, r3
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68da      	ldr	r2, [r3, #12]
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008bec:	2201      	movs	r2, #1
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf4:	43db      	mvns	r3, r3
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	091b      	lsrs	r3, r3, #4
 8008c02:	f003 0201 	and.w	r2, r3, #1
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	f003 0303 	and.w	r3, r3, #3
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d017      	beq.n	8008c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	2203      	movs	r2, #3
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	43db      	mvns	r3, r3
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	4013      	ands	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	689a      	ldr	r2, [r3, #8]
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	fa02 f303 	lsl.w	r3, r2, r3
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f003 0303 	and.w	r3, r3, #3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d123      	bne.n	8008ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	08da      	lsrs	r2, r3, #3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3208      	adds	r2, #8
 8008c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	220f      	movs	r2, #15
 8008c78:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7c:	43db      	mvns	r3, r3
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	4013      	ands	r3, r2
 8008c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	691a      	ldr	r2, [r3, #16]
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	f003 0307 	and.w	r3, r3, #7
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	fa02 f303 	lsl.w	r3, r2, r3
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	08da      	lsrs	r2, r3, #3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	3208      	adds	r2, #8
 8008ca2:	69b9      	ldr	r1, [r7, #24]
 8008ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f003 0203 	and.w	r2, r3, #3
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 80c0 	beq.w	8008e6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
 8008cee:	4b66      	ldr	r3, [pc, #408]	; (8008e88 <HAL_GPIO_Init+0x324>)
 8008cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf2:	4a65      	ldr	r2, [pc, #404]	; (8008e88 <HAL_GPIO_Init+0x324>)
 8008cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8008cfa:	4b63      	ldr	r3, [pc, #396]	; (8008e88 <HAL_GPIO_Init+0x324>)
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d06:	4a61      	ldr	r2, [pc, #388]	; (8008e8c <HAL_GPIO_Init+0x328>)
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	089b      	lsrs	r3, r3, #2
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	f003 0303 	and.w	r3, r3, #3
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	220f      	movs	r2, #15
 8008d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d22:	43db      	mvns	r3, r3
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	4013      	ands	r3, r2
 8008d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a58      	ldr	r2, [pc, #352]	; (8008e90 <HAL_GPIO_Init+0x32c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d037      	beq.n	8008da2 <HAL_GPIO_Init+0x23e>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a57      	ldr	r2, [pc, #348]	; (8008e94 <HAL_GPIO_Init+0x330>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d031      	beq.n	8008d9e <HAL_GPIO_Init+0x23a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a56      	ldr	r2, [pc, #344]	; (8008e98 <HAL_GPIO_Init+0x334>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d02b      	beq.n	8008d9a <HAL_GPIO_Init+0x236>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a55      	ldr	r2, [pc, #340]	; (8008e9c <HAL_GPIO_Init+0x338>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d025      	beq.n	8008d96 <HAL_GPIO_Init+0x232>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a54      	ldr	r2, [pc, #336]	; (8008ea0 <HAL_GPIO_Init+0x33c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d01f      	beq.n	8008d92 <HAL_GPIO_Init+0x22e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a53      	ldr	r2, [pc, #332]	; (8008ea4 <HAL_GPIO_Init+0x340>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d019      	beq.n	8008d8e <HAL_GPIO_Init+0x22a>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a52      	ldr	r2, [pc, #328]	; (8008ea8 <HAL_GPIO_Init+0x344>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d013      	beq.n	8008d8a <HAL_GPIO_Init+0x226>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a51      	ldr	r2, [pc, #324]	; (8008eac <HAL_GPIO_Init+0x348>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d00d      	beq.n	8008d86 <HAL_GPIO_Init+0x222>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a50      	ldr	r2, [pc, #320]	; (8008eb0 <HAL_GPIO_Init+0x34c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d007      	beq.n	8008d82 <HAL_GPIO_Init+0x21e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a4f      	ldr	r2, [pc, #316]	; (8008eb4 <HAL_GPIO_Init+0x350>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d101      	bne.n	8008d7e <HAL_GPIO_Init+0x21a>
 8008d7a:	2309      	movs	r3, #9
 8008d7c:	e012      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d7e:	230a      	movs	r3, #10
 8008d80:	e010      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d82:	2308      	movs	r3, #8
 8008d84:	e00e      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d86:	2307      	movs	r3, #7
 8008d88:	e00c      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d8a:	2306      	movs	r3, #6
 8008d8c:	e00a      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d8e:	2305      	movs	r3, #5
 8008d90:	e008      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d92:	2304      	movs	r3, #4
 8008d94:	e006      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d96:	2303      	movs	r3, #3
 8008d98:	e004      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e002      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e000      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008da2:	2300      	movs	r3, #0
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	f002 0203 	and.w	r2, r2, #3
 8008daa:	0092      	lsls	r2, r2, #2
 8008dac:	4093      	lsls	r3, r2
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008db4:	4935      	ldr	r1, [pc, #212]	; (8008e8c <HAL_GPIO_Init+0x328>)
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	089b      	lsrs	r3, r3, #2
 8008dba:	3302      	adds	r3, #2
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008dc2:	4b3d      	ldr	r3, [pc, #244]	; (8008eb8 <HAL_GPIO_Init+0x354>)
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	43db      	mvns	r3, r3
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008de6:	4a34      	ldr	r2, [pc, #208]	; (8008eb8 <HAL_GPIO_Init+0x354>)
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008dec:	4b32      	ldr	r3, [pc, #200]	; (8008eb8 <HAL_GPIO_Init+0x354>)
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	43db      	mvns	r3, r3
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	4013      	ands	r3, r2
 8008dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e10:	4a29      	ldr	r2, [pc, #164]	; (8008eb8 <HAL_GPIO_Init+0x354>)
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008e16:	4b28      	ldr	r3, [pc, #160]	; (8008eb8 <HAL_GPIO_Init+0x354>)
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	43db      	mvns	r3, r3
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	4013      	ands	r3, r2
 8008e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008e3a:	4a1f      	ldr	r2, [pc, #124]	; (8008eb8 <HAL_GPIO_Init+0x354>)
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e40:	4b1d      	ldr	r3, [pc, #116]	; (8008eb8 <HAL_GPIO_Init+0x354>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	43db      	mvns	r3, r3
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008e64:	4a14      	ldr	r2, [pc, #80]	; (8008eb8 <HAL_GPIO_Init+0x354>)
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	61fb      	str	r3, [r7, #28]
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	2b0f      	cmp	r3, #15
 8008e74:	f67f ae84 	bls.w	8008b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	3724      	adds	r7, #36	; 0x24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	40023800 	.word	0x40023800
 8008e8c:	40013800 	.word	0x40013800
 8008e90:	40020000 	.word	0x40020000
 8008e94:	40020400 	.word	0x40020400
 8008e98:	40020800 	.word	0x40020800
 8008e9c:	40020c00 	.word	0x40020c00
 8008ea0:	40021000 	.word	0x40021000
 8008ea4:	40021400 	.word	0x40021400
 8008ea8:	40021800 	.word	0x40021800
 8008eac:	40021c00 	.word	0x40021c00
 8008eb0:	40022000 	.word	0x40022000
 8008eb4:	40022400 	.word	0x40022400
 8008eb8:	40013c00 	.word	0x40013c00

08008ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	887b      	ldrh	r3, [r7, #2]
 8008ece:	4013      	ands	r3, r2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	73fb      	strb	r3, [r7, #15]
 8008ed8:	e001      	b.n	8008ede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008eda:	2300      	movs	r3, #0
 8008edc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	807b      	strh	r3, [r7, #2]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008efc:	787b      	ldrb	r3, [r7, #1]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f02:	887a      	ldrh	r2, [r7, #2]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f08:	e003      	b.n	8008f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f0a:	887b      	ldrh	r3, [r7, #2]
 8008f0c:	041a      	lsls	r2, r3, #16
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	619a      	str	r2, [r3, #24]
}
 8008f12:	bf00      	nop
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b085      	sub	sp, #20
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f30:	887a      	ldrh	r2, [r7, #2]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4013      	ands	r3, r2
 8008f36:	041a      	lsls	r2, r3, #16
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	43d9      	mvns	r1, r3
 8008f3c:	887b      	ldrh	r3, [r7, #2]
 8008f3e:	400b      	ands	r3, r1
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	619a      	str	r2, [r3, #24]
}
 8008f46:	bf00      	nop
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
	...

08008f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008f5e:	4b08      	ldr	r3, [pc, #32]	; (8008f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f60:	695a      	ldr	r2, [r3, #20]
 8008f62:	88fb      	ldrh	r3, [r7, #6]
 8008f64:	4013      	ands	r3, r2
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d006      	beq.n	8008f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f6a:	4a05      	ldr	r2, [pc, #20]	; (8008f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f6c:	88fb      	ldrh	r3, [r7, #6]
 8008f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f70:	88fb      	ldrh	r3, [r7, #6]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f806 	bl	8008f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	40013c00 	.word	0x40013c00

08008f84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
	...

08008f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d101      	bne.n	8008fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e12b      	b.n	8009206 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d106      	bne.n	8008fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7f9 fe1c 	bl	8002c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2224      	movs	r2, #36	; 0x24
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f022 0201 	bic.w	r2, r2, #1
 8008fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009000:	f001 fc76 	bl	800a8f0 <HAL_RCC_GetPCLK1Freq>
 8009004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	4a81      	ldr	r2, [pc, #516]	; (8009210 <HAL_I2C_Init+0x274>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d807      	bhi.n	8009020 <HAL_I2C_Init+0x84>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4a80      	ldr	r2, [pc, #512]	; (8009214 <HAL_I2C_Init+0x278>)
 8009014:	4293      	cmp	r3, r2
 8009016:	bf94      	ite	ls
 8009018:	2301      	movls	r3, #1
 800901a:	2300      	movhi	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	e006      	b.n	800902e <HAL_I2C_Init+0x92>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a7d      	ldr	r2, [pc, #500]	; (8009218 <HAL_I2C_Init+0x27c>)
 8009024:	4293      	cmp	r3, r2
 8009026:	bf94      	ite	ls
 8009028:	2301      	movls	r3, #1
 800902a:	2300      	movhi	r3, #0
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e0e7      	b.n	8009206 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	4a78      	ldr	r2, [pc, #480]	; (800921c <HAL_I2C_Init+0x280>)
 800903a:	fba2 2303 	umull	r2, r3, r2, r3
 800903e:	0c9b      	lsrs	r3, r3, #18
 8009040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	430a      	orrs	r2, r1
 8009054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6a1b      	ldr	r3, [r3, #32]
 800905c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	4a6a      	ldr	r2, [pc, #424]	; (8009210 <HAL_I2C_Init+0x274>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d802      	bhi.n	8009070 <HAL_I2C_Init+0xd4>
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	3301      	adds	r3, #1
 800906e:	e009      	b.n	8009084 <HAL_I2C_Init+0xe8>
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009076:	fb02 f303 	mul.w	r3, r2, r3
 800907a:	4a69      	ldr	r2, [pc, #420]	; (8009220 <HAL_I2C_Init+0x284>)
 800907c:	fba2 2303 	umull	r2, r3, r2, r3
 8009080:	099b      	lsrs	r3, r3, #6
 8009082:	3301      	adds	r3, #1
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	6812      	ldr	r2, [r2, #0]
 8009088:	430b      	orrs	r3, r1
 800908a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009096:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	495c      	ldr	r1, [pc, #368]	; (8009210 <HAL_I2C_Init+0x274>)
 80090a0:	428b      	cmp	r3, r1
 80090a2:	d819      	bhi.n	80090d8 <HAL_I2C_Init+0x13c>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	1e59      	subs	r1, r3, #1
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80090b2:	1c59      	adds	r1, r3, #1
 80090b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80090b8:	400b      	ands	r3, r1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <HAL_I2C_Init+0x138>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	1e59      	subs	r1, r3, #1
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80090cc:	3301      	adds	r3, #1
 80090ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090d2:	e051      	b.n	8009178 <HAL_I2C_Init+0x1dc>
 80090d4:	2304      	movs	r3, #4
 80090d6:	e04f      	b.n	8009178 <HAL_I2C_Init+0x1dc>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d111      	bne.n	8009104 <HAL_I2C_Init+0x168>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	1e58      	subs	r0, r3, #1
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6859      	ldr	r1, [r3, #4]
 80090e8:	460b      	mov	r3, r1
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	440b      	add	r3, r1
 80090ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80090f2:	3301      	adds	r3, #1
 80090f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	bf0c      	ite	eq
 80090fc:	2301      	moveq	r3, #1
 80090fe:	2300      	movne	r3, #0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	e012      	b.n	800912a <HAL_I2C_Init+0x18e>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	1e58      	subs	r0, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6859      	ldr	r1, [r3, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	0099      	lsls	r1, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	fbb0 f3f3 	udiv	r3, r0, r3
 800911a:	3301      	adds	r3, #1
 800911c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009120:	2b00      	cmp	r3, #0
 8009122:	bf0c      	ite	eq
 8009124:	2301      	moveq	r3, #1
 8009126:	2300      	movne	r3, #0
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <HAL_I2C_Init+0x196>
 800912e:	2301      	movs	r3, #1
 8009130:	e022      	b.n	8009178 <HAL_I2C_Init+0x1dc>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10e      	bne.n	8009158 <HAL_I2C_Init+0x1bc>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	1e58      	subs	r0, r3, #1
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6859      	ldr	r1, [r3, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	440b      	add	r3, r1
 8009148:	fbb0 f3f3 	udiv	r3, r0, r3
 800914c:	3301      	adds	r3, #1
 800914e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009156:	e00f      	b.n	8009178 <HAL_I2C_Init+0x1dc>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	1e58      	subs	r0, r3, #1
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6859      	ldr	r1, [r3, #4]
 8009160:	460b      	mov	r3, r1
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	440b      	add	r3, r1
 8009166:	0099      	lsls	r1, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	fbb0 f3f3 	udiv	r3, r0, r3
 800916e:	3301      	adds	r3, #1
 8009170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	6809      	ldr	r1, [r1, #0]
 800917c:	4313      	orrs	r3, r2
 800917e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	69da      	ldr	r2, [r3, #28]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	431a      	orrs	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80091a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	6911      	ldr	r1, [r2, #16]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	68d2      	ldr	r2, [r2, #12]
 80091b2:	4311      	orrs	r1, r2
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	6812      	ldr	r2, [r2, #0]
 80091b8:	430b      	orrs	r3, r1
 80091ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695a      	ldr	r2, [r3, #20]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	431a      	orrs	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0201 	orr.w	r2, r2, #1
 80091e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	000186a0 	.word	0x000186a0
 8009214:	001e847f 	.word	0x001e847f
 8009218:	003d08ff 	.word	0x003d08ff
 800921c:	431bde83 	.word	0x431bde83
 8009220:	10624dd3 	.word	0x10624dd3

08009224 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af02      	add	r7, sp, #8
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	4608      	mov	r0, r1
 800922e:	4611      	mov	r1, r2
 8009230:	461a      	mov	r2, r3
 8009232:	4603      	mov	r3, r0
 8009234:	817b      	strh	r3, [r7, #10]
 8009236:	460b      	mov	r3, r1
 8009238:	813b      	strh	r3, [r7, #8]
 800923a:	4613      	mov	r3, r2
 800923c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800923e:	f7ff fac9 	bl	80087d4 <HAL_GetTick>
 8009242:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800924a:	b2db      	uxtb	r3, r3
 800924c:	2b20      	cmp	r3, #32
 800924e:	f040 80d9 	bne.w	8009404 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	2319      	movs	r3, #25
 8009258:	2201      	movs	r2, #1
 800925a:	496d      	ldr	r1, [pc, #436]	; (8009410 <HAL_I2C_Mem_Write+0x1ec>)
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 fc7f 	bl	8009b60 <I2C_WaitOnFlagUntilTimeout>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009268:	2302      	movs	r3, #2
 800926a:	e0cc      	b.n	8009406 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009272:	2b01      	cmp	r3, #1
 8009274:	d101      	bne.n	800927a <HAL_I2C_Mem_Write+0x56>
 8009276:	2302      	movs	r3, #2
 8009278:	e0c5      	b.n	8009406 <HAL_I2C_Mem_Write+0x1e2>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	2b01      	cmp	r3, #1
 800928e:	d007      	beq.n	80092a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f042 0201 	orr.w	r2, r2, #1
 800929e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2221      	movs	r2, #33	; 0x21
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2240      	movs	r2, #64	; 0x40
 80092bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6a3a      	ldr	r2, [r7, #32]
 80092ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4a4d      	ldr	r2, [pc, #308]	; (8009414 <HAL_I2C_Mem_Write+0x1f0>)
 80092e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092e2:	88f8      	ldrh	r0, [r7, #6]
 80092e4:	893a      	ldrh	r2, [r7, #8]
 80092e6:	8979      	ldrh	r1, [r7, #10]
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	9301      	str	r3, [sp, #4]
 80092ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	4603      	mov	r3, r0
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 fab6 	bl	8009864 <I2C_RequestMemoryWrite>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d052      	beq.n	80093a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e081      	b.n	8009406 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f000 fd00 	bl	8009d0c <I2C_WaitOnTXEFlagUntilTimeout>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00d      	beq.n	800932e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	2b04      	cmp	r3, #4
 8009318:	d107      	bne.n	800932a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e06b      	b.n	8009406 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009332:	781a      	ldrb	r2, [r3, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009348:	3b01      	subs	r3, #1
 800934a:	b29a      	uxth	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009354:	b29b      	uxth	r3, r3
 8009356:	3b01      	subs	r3, #1
 8009358:	b29a      	uxth	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b04      	cmp	r3, #4
 800936a:	d11b      	bne.n	80093a4 <HAL_I2C_Mem_Write+0x180>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009370:	2b00      	cmp	r3, #0
 8009372:	d017      	beq.n	80093a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	781a      	ldrb	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800938e:	3b01      	subs	r3, #1
 8009390:	b29a      	uxth	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800939a:	b29b      	uxth	r3, r3
 800939c:	3b01      	subs	r3, #1
 800939e:	b29a      	uxth	r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1aa      	bne.n	8009302 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 fcec 	bl	8009d8e <I2C_WaitOnBTFFlagUntilTimeout>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00d      	beq.n	80093d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d107      	bne.n	80093d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e016      	b.n	8009406 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	e000      	b.n	8009406 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009404:	2302      	movs	r3, #2
  }
}
 8009406:	4618      	mov	r0, r3
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	00100002 	.word	0x00100002
 8009414:	ffff0000 	.word	0xffff0000

08009418 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b08c      	sub	sp, #48	; 0x30
 800941c:	af02      	add	r7, sp, #8
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	4608      	mov	r0, r1
 8009422:	4611      	mov	r1, r2
 8009424:	461a      	mov	r2, r3
 8009426:	4603      	mov	r3, r0
 8009428:	817b      	strh	r3, [r7, #10]
 800942a:	460b      	mov	r3, r1
 800942c:	813b      	strh	r3, [r7, #8]
 800942e:	4613      	mov	r3, r2
 8009430:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009432:	f7ff f9cf 	bl	80087d4 <HAL_GetTick>
 8009436:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b20      	cmp	r3, #32
 8009442:	f040 8208 	bne.w	8009856 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	2319      	movs	r3, #25
 800944c:	2201      	movs	r2, #1
 800944e:	497b      	ldr	r1, [pc, #492]	; (800963c <HAL_I2C_Mem_Read+0x224>)
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 fb85 	bl	8009b60 <I2C_WaitOnFlagUntilTimeout>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800945c:	2302      	movs	r3, #2
 800945e:	e1fb      	b.n	8009858 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009466:	2b01      	cmp	r3, #1
 8009468:	d101      	bne.n	800946e <HAL_I2C_Mem_Read+0x56>
 800946a:	2302      	movs	r3, #2
 800946c:	e1f4      	b.n	8009858 <HAL_I2C_Mem_Read+0x440>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b01      	cmp	r3, #1
 8009482:	d007      	beq.n	8009494 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 0201 	orr.w	r2, r2, #1
 8009492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2222      	movs	r2, #34	; 0x22
 80094a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2240      	movs	r2, #64	; 0x40
 80094b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80094c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4a5b      	ldr	r2, [pc, #364]	; (8009640 <HAL_I2C_Mem_Read+0x228>)
 80094d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80094d6:	88f8      	ldrh	r0, [r7, #6]
 80094d8:	893a      	ldrh	r2, [r7, #8]
 80094da:	8979      	ldrh	r1, [r7, #10]
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	4603      	mov	r3, r0
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 fa52 	bl	8009990 <I2C_RequestMemoryRead>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e1b0      	b.n	8009858 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d113      	bne.n	8009526 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094fe:	2300      	movs	r3, #0
 8009500:	623b      	str	r3, [r7, #32]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	623b      	str	r3, [r7, #32]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	623b      	str	r3, [r7, #32]
 8009512:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	e184      	b.n	8009830 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800952a:	2b01      	cmp	r3, #1
 800952c:	d11b      	bne.n	8009566 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800953c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800953e:	2300      	movs	r3, #0
 8009540:	61fb      	str	r3, [r7, #28]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	61fb      	str	r3, [r7, #28]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	61fb      	str	r3, [r7, #28]
 8009552:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	e164      	b.n	8009830 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800956a:	2b02      	cmp	r3, #2
 800956c:	d11b      	bne.n	80095a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800957c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800958c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800958e:	2300      	movs	r3, #0
 8009590:	61bb      	str	r3, [r7, #24]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	695b      	ldr	r3, [r3, #20]
 8009598:	61bb      	str	r3, [r7, #24]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	61bb      	str	r3, [r7, #24]
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	e144      	b.n	8009830 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095a6:	2300      	movs	r3, #0
 80095a8:	617b      	str	r3, [r7, #20]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	617b      	str	r3, [r7, #20]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80095bc:	e138      	b.n	8009830 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	f200 80f1 	bhi.w	80097aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d123      	bne.n	8009618 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 fc1b 	bl	8009e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e139      	b.n	8009858 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691a      	ldr	r2, [r3, #16]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f6:	1c5a      	adds	r2, r3, #1
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009600:	3b01      	subs	r3, #1
 8009602:	b29a      	uxth	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800960c:	b29b      	uxth	r3, r3
 800960e:	3b01      	subs	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009616:	e10b      	b.n	8009830 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800961c:	2b02      	cmp	r3, #2
 800961e:	d14e      	bne.n	80096be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	2200      	movs	r2, #0
 8009628:	4906      	ldr	r1, [pc, #24]	; (8009644 <HAL_I2C_Mem_Read+0x22c>)
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f000 fa98 	bl	8009b60 <I2C_WaitOnFlagUntilTimeout>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d008      	beq.n	8009648 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e10e      	b.n	8009858 <HAL_I2C_Mem_Read+0x440>
 800963a:	bf00      	nop
 800963c:	00100002 	.word	0x00100002
 8009640:	ffff0000 	.word	0xffff0000
 8009644:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	691a      	ldr	r2, [r3, #16]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009674:	3b01      	subs	r3, #1
 8009676:	b29a      	uxth	r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009680:	b29b      	uxth	r3, r3
 8009682:	3b01      	subs	r3, #1
 8009684:	b29a      	uxth	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	691a      	ldr	r2, [r3, #16]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009694:	b2d2      	uxtb	r2, r2
 8009696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a6:	3b01      	subs	r3, #1
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096bc:	e0b8      	b.n	8009830 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c4:	2200      	movs	r2, #0
 80096c6:	4966      	ldr	r1, [pc, #408]	; (8009860 <HAL_I2C_Mem_Read+0x448>)
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 fa49 	bl	8009b60 <I2C_WaitOnFlagUntilTimeout>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e0bf      	b.n	8009858 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	691a      	ldr	r2, [r3, #16]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f2:	b2d2      	uxtb	r2, r2
 80096f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009704:	3b01      	subs	r3, #1
 8009706:	b29a      	uxth	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009710:	b29b      	uxth	r3, r3
 8009712:	3b01      	subs	r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009720:	2200      	movs	r2, #0
 8009722:	494f      	ldr	r1, [pc, #316]	; (8009860 <HAL_I2C_Mem_Read+0x448>)
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f000 fa1b 	bl	8009b60 <I2C_WaitOnFlagUntilTimeout>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e091      	b.n	8009858 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	691a      	ldr	r2, [r3, #16]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	b2d2      	uxtb	r2, r2
 8009750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009760:	3b01      	subs	r3, #1
 8009762:	b29a      	uxth	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800976c:	b29b      	uxth	r3, r3
 800976e:	3b01      	subs	r3, #1
 8009770:	b29a      	uxth	r2, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	691a      	ldr	r2, [r3, #16]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009780:	b2d2      	uxtb	r2, r2
 8009782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009792:	3b01      	subs	r3, #1
 8009794:	b29a      	uxth	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800979e:	b29b      	uxth	r3, r3
 80097a0:	3b01      	subs	r3, #1
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097a8:	e042      	b.n	8009830 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 fb2e 	bl	8009e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e04c      	b.n	8009858 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	691a      	ldr	r2, [r3, #16]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	b2d2      	uxtb	r2, r2
 80097ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d0:	1c5a      	adds	r2, r3, #1
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097da:	3b01      	subs	r3, #1
 80097dc:	b29a      	uxth	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	3b01      	subs	r3, #1
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d118      	bne.n	8009830 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009810:	1c5a      	adds	r2, r3, #1
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800981a:	3b01      	subs	r3, #1
 800981c:	b29a      	uxth	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009826:	b29b      	uxth	r3, r3
 8009828:	3b01      	subs	r3, #1
 800982a:	b29a      	uxth	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009834:	2b00      	cmp	r3, #0
 8009836:	f47f aec2 	bne.w	80095be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2220      	movs	r2, #32
 800983e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	e000      	b.n	8009858 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009856:	2302      	movs	r3, #2
  }
}
 8009858:	4618      	mov	r0, r3
 800985a:	3728      	adds	r7, #40	; 0x28
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	00010004 	.word	0x00010004

08009864 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b088      	sub	sp, #32
 8009868:	af02      	add	r7, sp, #8
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	4608      	mov	r0, r1
 800986e:	4611      	mov	r1, r2
 8009870:	461a      	mov	r2, r3
 8009872:	4603      	mov	r3, r0
 8009874:	817b      	strh	r3, [r7, #10]
 8009876:	460b      	mov	r3, r1
 8009878:	813b      	strh	r3, [r7, #8]
 800987a:	4613      	mov	r3, r2
 800987c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800988c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	2200      	movs	r2, #0
 8009896:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 f960 	bl	8009b60 <I2C_WaitOnFlagUntilTimeout>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00d      	beq.n	80098c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098b4:	d103      	bne.n	80098be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e05f      	b.n	8009982 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098c2:	897b      	ldrh	r3, [r7, #10]
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	461a      	mov	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	6a3a      	ldr	r2, [r7, #32]
 80098d6:	492d      	ldr	r1, [pc, #180]	; (800998c <I2C_RequestMemoryWrite+0x128>)
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 f998 	bl	8009c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e04c      	b.n	8009982 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098e8:	2300      	movs	r3, #0
 80098ea:	617b      	str	r3, [r7, #20]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009900:	6a39      	ldr	r1, [r7, #32]
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 fa02 	bl	8009d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00d      	beq.n	800992a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009912:	2b04      	cmp	r3, #4
 8009914:	d107      	bne.n	8009926 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009924:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e02b      	b.n	8009982 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800992a:	88fb      	ldrh	r3, [r7, #6]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d105      	bne.n	800993c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009930:	893b      	ldrh	r3, [r7, #8]
 8009932:	b2da      	uxtb	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	611a      	str	r2, [r3, #16]
 800993a:	e021      	b.n	8009980 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800993c:	893b      	ldrh	r3, [r7, #8]
 800993e:	0a1b      	lsrs	r3, r3, #8
 8009940:	b29b      	uxth	r3, r3
 8009942:	b2da      	uxtb	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800994a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800994c:	6a39      	ldr	r1, [r7, #32]
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f000 f9dc 	bl	8009d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00d      	beq.n	8009976 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995e:	2b04      	cmp	r3, #4
 8009960:	d107      	bne.n	8009972 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009970:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e005      	b.n	8009982 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009976:	893b      	ldrh	r3, [r7, #8]
 8009978:	b2da      	uxtb	r2, r3
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3718      	adds	r7, #24
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	00010002 	.word	0x00010002

08009990 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af02      	add	r7, sp, #8
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	4608      	mov	r0, r1
 800999a:	4611      	mov	r1, r2
 800999c:	461a      	mov	r2, r3
 800999e:	4603      	mov	r3, r0
 80099a0:	817b      	strh	r3, [r7, #10]
 80099a2:	460b      	mov	r3, r1
 80099a4:	813b      	strh	r3, [r7, #8]
 80099a6:	4613      	mov	r3, r2
 80099a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 f8c2 	bl	8009b60 <I2C_WaitOnFlagUntilTimeout>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00d      	beq.n	80099fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f0:	d103      	bne.n	80099fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e0aa      	b.n	8009b54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099fe:	897b      	ldrh	r3, [r7, #10]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	461a      	mov	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	6a3a      	ldr	r2, [r7, #32]
 8009a12:	4952      	ldr	r1, [pc, #328]	; (8009b5c <I2C_RequestMemoryRead+0x1cc>)
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 f8fa 	bl	8009c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e097      	b.n	8009b54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a24:	2300      	movs	r3, #0
 8009a26:	617b      	str	r3, [r7, #20]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	617b      	str	r3, [r7, #20]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a3c:	6a39      	ldr	r1, [r7, #32]
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 f964 	bl	8009d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00d      	beq.n	8009a66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d107      	bne.n	8009a62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e076      	b.n	8009b54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a66:	88fb      	ldrh	r3, [r7, #6]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d105      	bne.n	8009a78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a6c:	893b      	ldrh	r3, [r7, #8]
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	611a      	str	r2, [r3, #16]
 8009a76:	e021      	b.n	8009abc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a78:	893b      	ldrh	r3, [r7, #8]
 8009a7a:	0a1b      	lsrs	r3, r3, #8
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a88:	6a39      	ldr	r1, [r7, #32]
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 f93e 	bl	8009d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00d      	beq.n	8009ab2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9a:	2b04      	cmp	r3, #4
 8009a9c:	d107      	bne.n	8009aae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e050      	b.n	8009b54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ab2:	893b      	ldrh	r3, [r7, #8]
 8009ab4:	b2da      	uxtb	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009abe:	6a39      	ldr	r1, [r7, #32]
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 f923 	bl	8009d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00d      	beq.n	8009ae8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d107      	bne.n	8009ae4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ae2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e035      	b.n	8009b54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009af6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 f82b 	bl	8009b60 <I2C_WaitOnFlagUntilTimeout>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00d      	beq.n	8009b2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b1e:	d103      	bne.n	8009b28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e013      	b.n	8009b54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009b2c:	897b      	ldrh	r3, [r7, #10]
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	f043 0301 	orr.w	r3, r3, #1
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	6a3a      	ldr	r2, [r7, #32]
 8009b40:	4906      	ldr	r1, [pc, #24]	; (8009b5c <I2C_RequestMemoryRead+0x1cc>)
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f000 f863 	bl	8009c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e000      	b.n	8009b54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	00010002 	.word	0x00010002

08009b60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	603b      	str	r3, [r7, #0]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b70:	e025      	b.n	8009bbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b78:	d021      	beq.n	8009bbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b7a:	f7fe fe2b 	bl	80087d4 <HAL_GetTick>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d302      	bcc.n	8009b90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d116      	bne.n	8009bbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009baa:	f043 0220 	orr.w	r2, r3, #32
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e023      	b.n	8009c06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	0c1b      	lsrs	r3, r3, #16
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d10d      	bne.n	8009be4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	43da      	mvns	r2, r3
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	bf0c      	ite	eq
 8009bda:	2301      	moveq	r3, #1
 8009bdc:	2300      	movne	r3, #0
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	461a      	mov	r2, r3
 8009be2:	e00c      	b.n	8009bfe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	43da      	mvns	r2, r3
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	4013      	ands	r3, r2
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	bf0c      	ite	eq
 8009bf6:	2301      	moveq	r3, #1
 8009bf8:	2300      	movne	r3, #0
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	79fb      	ldrb	r3, [r7, #7]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d0b6      	beq.n	8009b72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	60f8      	str	r0, [r7, #12]
 8009c16:	60b9      	str	r1, [r7, #8]
 8009c18:	607a      	str	r2, [r7, #4]
 8009c1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c1c:	e051      	b.n	8009cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c2c:	d123      	bne.n	8009c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2220      	movs	r2, #32
 8009c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c62:	f043 0204 	orr.w	r2, r3, #4
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e046      	b.n	8009d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c7c:	d021      	beq.n	8009cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c7e:	f7fe fda9 	bl	80087d4 <HAL_GetTick>
 8009c82:	4602      	mov	r2, r0
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d302      	bcc.n	8009c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d116      	bne.n	8009cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2220      	movs	r2, #32
 8009c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	f043 0220 	orr.w	r2, r3, #32
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e020      	b.n	8009d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	0c1b      	lsrs	r3, r3, #16
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d10c      	bne.n	8009ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	43da      	mvns	r2, r3
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	bf14      	ite	ne
 8009cde:	2301      	movne	r3, #1
 8009ce0:	2300      	moveq	r3, #0
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	e00b      	b.n	8009cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	43da      	mvns	r2, r3
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	bf14      	ite	ne
 8009cf8:	2301      	movne	r3, #1
 8009cfa:	2300      	moveq	r3, #0
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d18d      	bne.n	8009c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d18:	e02d      	b.n	8009d76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 f8ce 	bl	8009ebc <I2C_IsAcknowledgeFailed>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e02d      	b.n	8009d86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d30:	d021      	beq.n	8009d76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d32:	f7fe fd4f 	bl	80087d4 <HAL_GetTick>
 8009d36:	4602      	mov	r2, r0
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d302      	bcc.n	8009d48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d116      	bne.n	8009d76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2220      	movs	r2, #32
 8009d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d62:	f043 0220 	orr.w	r2, r3, #32
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e007      	b.n	8009d86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d80:	2b80      	cmp	r3, #128	; 0x80
 8009d82:	d1ca      	bne.n	8009d1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b084      	sub	sp, #16
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	60f8      	str	r0, [r7, #12]
 8009d96:	60b9      	str	r1, [r7, #8]
 8009d98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d9a:	e02d      	b.n	8009df8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 f88d 	bl	8009ebc <I2C_IsAcknowledgeFailed>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e02d      	b.n	8009e08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db2:	d021      	beq.n	8009df8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009db4:	f7fe fd0e 	bl	80087d4 <HAL_GetTick>
 8009db8:	4602      	mov	r2, r0
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d302      	bcc.n	8009dca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d116      	bne.n	8009df8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2220      	movs	r2, #32
 8009dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de4:	f043 0220 	orr.w	r2, r3, #32
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e007      	b.n	8009e08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	f003 0304 	and.w	r3, r3, #4
 8009e02:	2b04      	cmp	r3, #4
 8009e04:	d1ca      	bne.n	8009d9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e1c:	e042      	b.n	8009ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	f003 0310 	and.w	r3, r3, #16
 8009e28:	2b10      	cmp	r3, #16
 8009e2a:	d119      	bne.n	8009e60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f06f 0210 	mvn.w	r2, #16
 8009e34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2220      	movs	r2, #32
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e029      	b.n	8009eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e60:	f7fe fcb8 	bl	80087d4 <HAL_GetTick>
 8009e64:	4602      	mov	r2, r0
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d302      	bcc.n	8009e76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d116      	bne.n	8009ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2220      	movs	r2, #32
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e90:	f043 0220 	orr.w	r2, r3, #32
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e007      	b.n	8009eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eae:	2b40      	cmp	r3, #64	; 0x40
 8009eb0:	d1b5      	bne.n	8009e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ed2:	d11b      	bne.n	8009f0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009edc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2220      	movs	r2, #32
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef8:	f043 0204 	orr.w	r2, r3, #4
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e000      	b.n	8009f0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	d129      	bne.n	8009f84 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2224      	movs	r2, #36	; 0x24
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f022 0201 	bic.w	r2, r2, #1
 8009f46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f022 0210 	bic.w	r2, r2, #16
 8009f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	430a      	orrs	r2, r1
 8009f66:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f042 0201 	orr.w	r2, r2, #1
 8009f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	e000      	b.n	8009f86 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009f84:	2302      	movs	r3, #2
  }
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b085      	sub	sp, #20
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	d12a      	bne.n	800a002 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2224      	movs	r2, #36	; 0x24
 8009fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f022 0201 	bic.w	r2, r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009fcc:	89fb      	ldrh	r3, [r7, #14]
 8009fce:	f023 030f 	bic.w	r3, r3, #15
 8009fd2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	89fb      	ldrh	r3, [r7, #14]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	89fa      	ldrh	r2, [r7, #14]
 8009fe4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f042 0201 	orr.w	r2, r2, #1
 8009ff4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2220      	movs	r2, #32
 8009ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	e000      	b.n	800a004 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a002:	2302      	movs	r3, #2
  }
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e267      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d075      	beq.n	800a11a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a02e:	4b88      	ldr	r3, [pc, #544]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	f003 030c 	and.w	r3, r3, #12
 800a036:	2b04      	cmp	r3, #4
 800a038:	d00c      	beq.n	800a054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a03a:	4b85      	ldr	r3, [pc, #532]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a042:	2b08      	cmp	r3, #8
 800a044:	d112      	bne.n	800a06c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a046:	4b82      	ldr	r3, [pc, #520]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a04e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a052:	d10b      	bne.n	800a06c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a054:	4b7e      	ldr	r3, [pc, #504]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d05b      	beq.n	800a118 <HAL_RCC_OscConfig+0x108>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d157      	bne.n	800a118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e242      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a074:	d106      	bne.n	800a084 <HAL_RCC_OscConfig+0x74>
 800a076:	4b76      	ldr	r3, [pc, #472]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a75      	ldr	r2, [pc, #468]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a07c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	e01d      	b.n	800a0c0 <HAL_RCC_OscConfig+0xb0>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a08c:	d10c      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x98>
 800a08e:	4b70      	ldr	r3, [pc, #448]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a6f      	ldr	r2, [pc, #444]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a098:	6013      	str	r3, [r2, #0]
 800a09a:	4b6d      	ldr	r3, [pc, #436]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a6c      	ldr	r2, [pc, #432]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a0a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0a4:	6013      	str	r3, [r2, #0]
 800a0a6:	e00b      	b.n	800a0c0 <HAL_RCC_OscConfig+0xb0>
 800a0a8:	4b69      	ldr	r3, [pc, #420]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a68      	ldr	r2, [pc, #416]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a0ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0b2:	6013      	str	r3, [r2, #0]
 800a0b4:	4b66      	ldr	r3, [pc, #408]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a65      	ldr	r2, [pc, #404]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a0ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d013      	beq.n	800a0f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0c8:	f7fe fb84 	bl	80087d4 <HAL_GetTick>
 800a0cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0ce:	e008      	b.n	800a0e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a0d0:	f7fe fb80 	bl	80087d4 <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	2b64      	cmp	r3, #100	; 0x64
 800a0dc:	d901      	bls.n	800a0e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e207      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0e2:	4b5b      	ldr	r3, [pc, #364]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0f0      	beq.n	800a0d0 <HAL_RCC_OscConfig+0xc0>
 800a0ee:	e014      	b.n	800a11a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0f0:	f7fe fb70 	bl	80087d4 <HAL_GetTick>
 800a0f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0f6:	e008      	b.n	800a10a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a0f8:	f7fe fb6c 	bl	80087d4 <HAL_GetTick>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	2b64      	cmp	r3, #100	; 0x64
 800a104:	d901      	bls.n	800a10a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a106:	2303      	movs	r3, #3
 800a108:	e1f3      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a10a:	4b51      	ldr	r3, [pc, #324]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1f0      	bne.n	800a0f8 <HAL_RCC_OscConfig+0xe8>
 800a116:	e000      	b.n	800a11a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 0302 	and.w	r3, r3, #2
 800a122:	2b00      	cmp	r3, #0
 800a124:	d063      	beq.n	800a1ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a126:	4b4a      	ldr	r3, [pc, #296]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f003 030c 	and.w	r3, r3, #12
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00b      	beq.n	800a14a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a132:	4b47      	ldr	r3, [pc, #284]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a13a:	2b08      	cmp	r3, #8
 800a13c:	d11c      	bne.n	800a178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a13e:	4b44      	ldr	r3, [pc, #272]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a146:	2b00      	cmp	r3, #0
 800a148:	d116      	bne.n	800a178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a14a:	4b41      	ldr	r3, [pc, #260]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0302 	and.w	r3, r3, #2
 800a152:	2b00      	cmp	r3, #0
 800a154:	d005      	beq.n	800a162 <HAL_RCC_OscConfig+0x152>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d001      	beq.n	800a162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e1c7      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a162:	4b3b      	ldr	r3, [pc, #236]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	4937      	ldr	r1, [pc, #220]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a172:	4313      	orrs	r3, r2
 800a174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a176:	e03a      	b.n	800a1ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d020      	beq.n	800a1c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a180:	4b34      	ldr	r3, [pc, #208]	; (800a254 <HAL_RCC_OscConfig+0x244>)
 800a182:	2201      	movs	r2, #1
 800a184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a186:	f7fe fb25 	bl	80087d4 <HAL_GetTick>
 800a18a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a18c:	e008      	b.n	800a1a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a18e:	f7fe fb21 	bl	80087d4 <HAL_GetTick>
 800a192:	4602      	mov	r2, r0
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d901      	bls.n	800a1a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e1a8      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1a0:	4b2b      	ldr	r3, [pc, #172]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d0f0      	beq.n	800a18e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1ac:	4b28      	ldr	r3, [pc, #160]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	4925      	ldr	r1, [pc, #148]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	600b      	str	r3, [r1, #0]
 800a1c0:	e015      	b.n	800a1ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1c2:	4b24      	ldr	r3, [pc, #144]	; (800a254 <HAL_RCC_OscConfig+0x244>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1c8:	f7fe fb04 	bl	80087d4 <HAL_GetTick>
 800a1cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1ce:	e008      	b.n	800a1e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a1d0:	f7fe fb00 	bl	80087d4 <HAL_GetTick>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d901      	bls.n	800a1e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e187      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1e2:	4b1b      	ldr	r3, [pc, #108]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 0302 	and.w	r3, r3, #2
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1f0      	bne.n	800a1d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0308 	and.w	r3, r3, #8
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d036      	beq.n	800a268 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d016      	beq.n	800a230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a202:	4b15      	ldr	r3, [pc, #84]	; (800a258 <HAL_RCC_OscConfig+0x248>)
 800a204:	2201      	movs	r2, #1
 800a206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a208:	f7fe fae4 	bl	80087d4 <HAL_GetTick>
 800a20c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a20e:	e008      	b.n	800a222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a210:	f7fe fae0 	bl	80087d4 <HAL_GetTick>
 800a214:	4602      	mov	r2, r0
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d901      	bls.n	800a222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e167      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a222:	4b0b      	ldr	r3, [pc, #44]	; (800a250 <HAL_RCC_OscConfig+0x240>)
 800a224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a226:	f003 0302 	and.w	r3, r3, #2
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0f0      	beq.n	800a210 <HAL_RCC_OscConfig+0x200>
 800a22e:	e01b      	b.n	800a268 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a230:	4b09      	ldr	r3, [pc, #36]	; (800a258 <HAL_RCC_OscConfig+0x248>)
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a236:	f7fe facd 	bl	80087d4 <HAL_GetTick>
 800a23a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a23c:	e00e      	b.n	800a25c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a23e:	f7fe fac9 	bl	80087d4 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d907      	bls.n	800a25c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e150      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
 800a250:	40023800 	.word	0x40023800
 800a254:	42470000 	.word	0x42470000
 800a258:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a25c:	4b88      	ldr	r3, [pc, #544]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a25e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a260:	f003 0302 	and.w	r3, r3, #2
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1ea      	bne.n	800a23e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 8097 	beq.w	800a3a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a276:	2300      	movs	r3, #0
 800a278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a27a:	4b81      	ldr	r3, [pc, #516]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10f      	bne.n	800a2a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a286:	2300      	movs	r3, #0
 800a288:	60bb      	str	r3, [r7, #8]
 800a28a:	4b7d      	ldr	r3, [pc, #500]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28e:	4a7c      	ldr	r2, [pc, #496]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a294:	6413      	str	r3, [r2, #64]	; 0x40
 800a296:	4b7a      	ldr	r3, [pc, #488]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a29e:	60bb      	str	r3, [r7, #8]
 800a2a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2a6:	4b77      	ldr	r3, [pc, #476]	; (800a484 <HAL_RCC_OscConfig+0x474>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d118      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a2b2:	4b74      	ldr	r3, [pc, #464]	; (800a484 <HAL_RCC_OscConfig+0x474>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a73      	ldr	r2, [pc, #460]	; (800a484 <HAL_RCC_OscConfig+0x474>)
 800a2b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a2be:	f7fe fa89 	bl	80087d4 <HAL_GetTick>
 800a2c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2c4:	e008      	b.n	800a2d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2c6:	f7fe fa85 	bl	80087d4 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d901      	bls.n	800a2d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e10c      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2d8:	4b6a      	ldr	r3, [pc, #424]	; (800a484 <HAL_RCC_OscConfig+0x474>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d0f0      	beq.n	800a2c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d106      	bne.n	800a2fa <HAL_RCC_OscConfig+0x2ea>
 800a2ec:	4b64      	ldr	r3, [pc, #400]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a2ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2f0:	4a63      	ldr	r2, [pc, #396]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a2f2:	f043 0301 	orr.w	r3, r3, #1
 800a2f6:	6713      	str	r3, [r2, #112]	; 0x70
 800a2f8:	e01c      	b.n	800a334 <HAL_RCC_OscConfig+0x324>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	2b05      	cmp	r3, #5
 800a300:	d10c      	bne.n	800a31c <HAL_RCC_OscConfig+0x30c>
 800a302:	4b5f      	ldr	r3, [pc, #380]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a306:	4a5e      	ldr	r2, [pc, #376]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a308:	f043 0304 	orr.w	r3, r3, #4
 800a30c:	6713      	str	r3, [r2, #112]	; 0x70
 800a30e:	4b5c      	ldr	r3, [pc, #368]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a312:	4a5b      	ldr	r2, [pc, #364]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a314:	f043 0301 	orr.w	r3, r3, #1
 800a318:	6713      	str	r3, [r2, #112]	; 0x70
 800a31a:	e00b      	b.n	800a334 <HAL_RCC_OscConfig+0x324>
 800a31c:	4b58      	ldr	r3, [pc, #352]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a31e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a320:	4a57      	ldr	r2, [pc, #348]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a322:	f023 0301 	bic.w	r3, r3, #1
 800a326:	6713      	str	r3, [r2, #112]	; 0x70
 800a328:	4b55      	ldr	r3, [pc, #340]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a32a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32c:	4a54      	ldr	r2, [pc, #336]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a32e:	f023 0304 	bic.w	r3, r3, #4
 800a332:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d015      	beq.n	800a368 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a33c:	f7fe fa4a 	bl	80087d4 <HAL_GetTick>
 800a340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a342:	e00a      	b.n	800a35a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a344:	f7fe fa46 	bl	80087d4 <HAL_GetTick>
 800a348:	4602      	mov	r2, r0
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a352:	4293      	cmp	r3, r2
 800a354:	d901      	bls.n	800a35a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e0cb      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a35a:	4b49      	ldr	r3, [pc, #292]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d0ee      	beq.n	800a344 <HAL_RCC_OscConfig+0x334>
 800a366:	e014      	b.n	800a392 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a368:	f7fe fa34 	bl	80087d4 <HAL_GetTick>
 800a36c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a36e:	e00a      	b.n	800a386 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a370:	f7fe fa30 	bl	80087d4 <HAL_GetTick>
 800a374:	4602      	mov	r2, r0
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a37e:	4293      	cmp	r3, r2
 800a380:	d901      	bls.n	800a386 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	e0b5      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a386:	4b3e      	ldr	r3, [pc, #248]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a38a:	f003 0302 	and.w	r3, r3, #2
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1ee      	bne.n	800a370 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a392:	7dfb      	ldrb	r3, [r7, #23]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d105      	bne.n	800a3a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a398:	4b39      	ldr	r3, [pc, #228]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39c:	4a38      	ldr	r2, [pc, #224]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a39e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80a1 	beq.w	800a4f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a3ae:	4b34      	ldr	r3, [pc, #208]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	f003 030c 	and.w	r3, r3, #12
 800a3b6:	2b08      	cmp	r3, #8
 800a3b8:	d05c      	beq.n	800a474 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d141      	bne.n	800a446 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3c2:	4b31      	ldr	r3, [pc, #196]	; (800a488 <HAL_RCC_OscConfig+0x478>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3c8:	f7fe fa04 	bl	80087d4 <HAL_GetTick>
 800a3cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3ce:	e008      	b.n	800a3e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3d0:	f7fe fa00 	bl	80087d4 <HAL_GetTick>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d901      	bls.n	800a3e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e087      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3e2:	4b27      	ldr	r3, [pc, #156]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1f0      	bne.n	800a3d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	69da      	ldr	r2, [r3, #28]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	019b      	lsls	r3, r3, #6
 800a3fe:	431a      	orrs	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a404:	085b      	lsrs	r3, r3, #1
 800a406:	3b01      	subs	r3, #1
 800a408:	041b      	lsls	r3, r3, #16
 800a40a:	431a      	orrs	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	061b      	lsls	r3, r3, #24
 800a412:	491b      	ldr	r1, [pc, #108]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a414:	4313      	orrs	r3, r2
 800a416:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a418:	4b1b      	ldr	r3, [pc, #108]	; (800a488 <HAL_RCC_OscConfig+0x478>)
 800a41a:	2201      	movs	r2, #1
 800a41c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a41e:	f7fe f9d9 	bl	80087d4 <HAL_GetTick>
 800a422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a424:	e008      	b.n	800a438 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a426:	f7fe f9d5 	bl	80087d4 <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	2b02      	cmp	r3, #2
 800a432:	d901      	bls.n	800a438 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a434:	2303      	movs	r3, #3
 800a436:	e05c      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a438:	4b11      	ldr	r3, [pc, #68]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d0f0      	beq.n	800a426 <HAL_RCC_OscConfig+0x416>
 800a444:	e054      	b.n	800a4f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a446:	4b10      	ldr	r3, [pc, #64]	; (800a488 <HAL_RCC_OscConfig+0x478>)
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a44c:	f7fe f9c2 	bl	80087d4 <HAL_GetTick>
 800a450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a452:	e008      	b.n	800a466 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a454:	f7fe f9be 	bl	80087d4 <HAL_GetTick>
 800a458:	4602      	mov	r2, r0
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d901      	bls.n	800a466 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a462:	2303      	movs	r3, #3
 800a464:	e045      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a466:	4b06      	ldr	r3, [pc, #24]	; (800a480 <HAL_RCC_OscConfig+0x470>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1f0      	bne.n	800a454 <HAL_RCC_OscConfig+0x444>
 800a472:	e03d      	b.n	800a4f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d107      	bne.n	800a48c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e038      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
 800a480:	40023800 	.word	0x40023800
 800a484:	40007000 	.word	0x40007000
 800a488:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a48c:	4b1b      	ldr	r3, [pc, #108]	; (800a4fc <HAL_RCC_OscConfig+0x4ec>)
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d028      	beq.n	800a4ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d121      	bne.n	800a4ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d11a      	bne.n	800a4ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a4bc:	4013      	ands	r3, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a4c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d111      	bne.n	800a4ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d2:	085b      	lsrs	r3, r3, #1
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d107      	bne.n	800a4ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d001      	beq.n	800a4f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e000      	b.n	800a4f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	40023800 	.word	0x40023800

0800a500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e0cc      	b.n	800a6ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a514:	4b68      	ldr	r3, [pc, #416]	; (800a6b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 030f 	and.w	r3, r3, #15
 800a51c:	683a      	ldr	r2, [r7, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d90c      	bls.n	800a53c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a522:	4b65      	ldr	r3, [pc, #404]	; (800a6b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	b2d2      	uxtb	r2, r2
 800a528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a52a:	4b63      	ldr	r3, [pc, #396]	; (800a6b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 030f 	and.w	r3, r3, #15
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	429a      	cmp	r2, r3
 800a536:	d001      	beq.n	800a53c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e0b8      	b.n	800a6ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 0302 	and.w	r3, r3, #2
 800a544:	2b00      	cmp	r3, #0
 800a546:	d020      	beq.n	800a58a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d005      	beq.n	800a560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a554:	4b59      	ldr	r3, [pc, #356]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	4a58      	ldr	r2, [pc, #352]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a55a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a55e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 0308 	and.w	r3, r3, #8
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d005      	beq.n	800a578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a56c:	4b53      	ldr	r3, [pc, #332]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	4a52      	ldr	r2, [pc, #328]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a578:	4b50      	ldr	r3, [pc, #320]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	494d      	ldr	r1, [pc, #308]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a586:	4313      	orrs	r3, r2
 800a588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0301 	and.w	r3, r3, #1
 800a592:	2b00      	cmp	r3, #0
 800a594:	d044      	beq.n	800a620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d107      	bne.n	800a5ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a59e:	4b47      	ldr	r3, [pc, #284]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d119      	bne.n	800a5de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e07f      	b.n	800a6ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d003      	beq.n	800a5be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d107      	bne.n	800a5ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5be:	4b3f      	ldr	r3, [pc, #252]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d109      	bne.n	800a5de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e06f      	b.n	800a6ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5ce:	4b3b      	ldr	r3, [pc, #236]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0302 	and.w	r3, r3, #2
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e067      	b.n	800a6ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a5de:	4b37      	ldr	r3, [pc, #220]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	f023 0203 	bic.w	r2, r3, #3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	4934      	ldr	r1, [pc, #208]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a5f0:	f7fe f8f0 	bl	80087d4 <HAL_GetTick>
 800a5f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5f6:	e00a      	b.n	800a60e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5f8:	f7fe f8ec 	bl	80087d4 <HAL_GetTick>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	f241 3288 	movw	r2, #5000	; 0x1388
 800a606:	4293      	cmp	r3, r2
 800a608:	d901      	bls.n	800a60e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e04f      	b.n	800a6ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a60e:	4b2b      	ldr	r3, [pc, #172]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	f003 020c 	and.w	r2, r3, #12
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d1eb      	bne.n	800a5f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a620:	4b25      	ldr	r3, [pc, #148]	; (800a6b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 030f 	and.w	r3, r3, #15
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d20c      	bcs.n	800a648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a62e:	4b22      	ldr	r3, [pc, #136]	; (800a6b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	b2d2      	uxtb	r2, r2
 800a634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a636:	4b20      	ldr	r3, [pc, #128]	; (800a6b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 030f 	and.w	r3, r3, #15
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	429a      	cmp	r2, r3
 800a642:	d001      	beq.n	800a648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e032      	b.n	800a6ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 0304 	and.w	r3, r3, #4
 800a650:	2b00      	cmp	r3, #0
 800a652:	d008      	beq.n	800a666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a654:	4b19      	ldr	r3, [pc, #100]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	4916      	ldr	r1, [pc, #88]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a662:	4313      	orrs	r3, r2
 800a664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 0308 	and.w	r3, r3, #8
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d009      	beq.n	800a686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a672:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	00db      	lsls	r3, r3, #3
 800a680:	490e      	ldr	r1, [pc, #56]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a682:	4313      	orrs	r3, r2
 800a684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a686:	f000 f821 	bl	800a6cc <HAL_RCC_GetSysClockFreq>
 800a68a:	4602      	mov	r2, r0
 800a68c:	4b0b      	ldr	r3, [pc, #44]	; (800a6bc <HAL_RCC_ClockConfig+0x1bc>)
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	091b      	lsrs	r3, r3, #4
 800a692:	f003 030f 	and.w	r3, r3, #15
 800a696:	490a      	ldr	r1, [pc, #40]	; (800a6c0 <HAL_RCC_ClockConfig+0x1c0>)
 800a698:	5ccb      	ldrb	r3, [r1, r3]
 800a69a:	fa22 f303 	lsr.w	r3, r2, r3
 800a69e:	4a09      	ldr	r2, [pc, #36]	; (800a6c4 <HAL_RCC_ClockConfig+0x1c4>)
 800a6a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a6a2:	4b09      	ldr	r3, [pc, #36]	; (800a6c8 <HAL_RCC_ClockConfig+0x1c8>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe f850 	bl	800874c <HAL_InitTick>

  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	40023c00 	.word	0x40023c00
 800a6bc:	40023800 	.word	0x40023800
 800a6c0:	0801bc54 	.word	0x0801bc54
 800a6c4:	200001b4 	.word	0x200001b4
 800a6c8:	200002ec 	.word	0x200002ec

0800a6cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a6cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6d0:	b094      	sub	sp, #80	; 0x50
 800a6d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	647b      	str	r3, [r7, #68]	; 0x44
 800a6d8:	2300      	movs	r3, #0
 800a6da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6dc:	2300      	movs	r3, #0
 800a6de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a6e4:	4b79      	ldr	r3, [pc, #484]	; (800a8cc <HAL_RCC_GetSysClockFreq+0x200>)
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	f003 030c 	and.w	r3, r3, #12
 800a6ec:	2b08      	cmp	r3, #8
 800a6ee:	d00d      	beq.n	800a70c <HAL_RCC_GetSysClockFreq+0x40>
 800a6f0:	2b08      	cmp	r3, #8
 800a6f2:	f200 80e1 	bhi.w	800a8b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d002      	beq.n	800a700 <HAL_RCC_GetSysClockFreq+0x34>
 800a6fa:	2b04      	cmp	r3, #4
 800a6fc:	d003      	beq.n	800a706 <HAL_RCC_GetSysClockFreq+0x3a>
 800a6fe:	e0db      	b.n	800a8b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a700:	4b73      	ldr	r3, [pc, #460]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a702:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a704:	e0db      	b.n	800a8be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a706:	4b73      	ldr	r3, [pc, #460]	; (800a8d4 <HAL_RCC_GetSysClockFreq+0x208>)
 800a708:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a70a:	e0d8      	b.n	800a8be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a70c:	4b6f      	ldr	r3, [pc, #444]	; (800a8cc <HAL_RCC_GetSysClockFreq+0x200>)
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a714:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a716:	4b6d      	ldr	r3, [pc, #436]	; (800a8cc <HAL_RCC_GetSysClockFreq+0x200>)
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d063      	beq.n	800a7ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a722:	4b6a      	ldr	r3, [pc, #424]	; (800a8cc <HAL_RCC_GetSysClockFreq+0x200>)
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	099b      	lsrs	r3, r3, #6
 800a728:	2200      	movs	r2, #0
 800a72a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a72c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a734:	633b      	str	r3, [r7, #48]	; 0x30
 800a736:	2300      	movs	r3, #0
 800a738:	637b      	str	r3, [r7, #52]	; 0x34
 800a73a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a73e:	4622      	mov	r2, r4
 800a740:	462b      	mov	r3, r5
 800a742:	f04f 0000 	mov.w	r0, #0
 800a746:	f04f 0100 	mov.w	r1, #0
 800a74a:	0159      	lsls	r1, r3, #5
 800a74c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a750:	0150      	lsls	r0, r2, #5
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4621      	mov	r1, r4
 800a758:	1a51      	subs	r1, r2, r1
 800a75a:	6139      	str	r1, [r7, #16]
 800a75c:	4629      	mov	r1, r5
 800a75e:	eb63 0301 	sbc.w	r3, r3, r1
 800a762:	617b      	str	r3, [r7, #20]
 800a764:	f04f 0200 	mov.w	r2, #0
 800a768:	f04f 0300 	mov.w	r3, #0
 800a76c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a770:	4659      	mov	r1, fp
 800a772:	018b      	lsls	r3, r1, #6
 800a774:	4651      	mov	r1, sl
 800a776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a77a:	4651      	mov	r1, sl
 800a77c:	018a      	lsls	r2, r1, #6
 800a77e:	4651      	mov	r1, sl
 800a780:	ebb2 0801 	subs.w	r8, r2, r1
 800a784:	4659      	mov	r1, fp
 800a786:	eb63 0901 	sbc.w	r9, r3, r1
 800a78a:	f04f 0200 	mov.w	r2, #0
 800a78e:	f04f 0300 	mov.w	r3, #0
 800a792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a79a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a79e:	4690      	mov	r8, r2
 800a7a0:	4699      	mov	r9, r3
 800a7a2:	4623      	mov	r3, r4
 800a7a4:	eb18 0303 	adds.w	r3, r8, r3
 800a7a8:	60bb      	str	r3, [r7, #8]
 800a7aa:	462b      	mov	r3, r5
 800a7ac:	eb49 0303 	adc.w	r3, r9, r3
 800a7b0:	60fb      	str	r3, [r7, #12]
 800a7b2:	f04f 0200 	mov.w	r2, #0
 800a7b6:	f04f 0300 	mov.w	r3, #0
 800a7ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a7be:	4629      	mov	r1, r5
 800a7c0:	024b      	lsls	r3, r1, #9
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	024a      	lsls	r2, r1, #9
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a7dc:	f7f6 fa74 	bl	8000cc8 <__aeabi_uldivmod>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7e8:	e058      	b.n	800a89c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7ea:	4b38      	ldr	r3, [pc, #224]	; (800a8cc <HAL_RCC_GetSysClockFreq+0x200>)
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	099b      	lsrs	r3, r3, #6
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a7fa:	623b      	str	r3, [r7, #32]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	627b      	str	r3, [r7, #36]	; 0x24
 800a800:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a804:	4642      	mov	r2, r8
 800a806:	464b      	mov	r3, r9
 800a808:	f04f 0000 	mov.w	r0, #0
 800a80c:	f04f 0100 	mov.w	r1, #0
 800a810:	0159      	lsls	r1, r3, #5
 800a812:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a816:	0150      	lsls	r0, r2, #5
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4641      	mov	r1, r8
 800a81e:	ebb2 0a01 	subs.w	sl, r2, r1
 800a822:	4649      	mov	r1, r9
 800a824:	eb63 0b01 	sbc.w	fp, r3, r1
 800a828:	f04f 0200 	mov.w	r2, #0
 800a82c:	f04f 0300 	mov.w	r3, #0
 800a830:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a834:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a838:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a83c:	ebb2 040a 	subs.w	r4, r2, sl
 800a840:	eb63 050b 	sbc.w	r5, r3, fp
 800a844:	f04f 0200 	mov.w	r2, #0
 800a848:	f04f 0300 	mov.w	r3, #0
 800a84c:	00eb      	lsls	r3, r5, #3
 800a84e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a852:	00e2      	lsls	r2, r4, #3
 800a854:	4614      	mov	r4, r2
 800a856:	461d      	mov	r5, r3
 800a858:	4643      	mov	r3, r8
 800a85a:	18e3      	adds	r3, r4, r3
 800a85c:	603b      	str	r3, [r7, #0]
 800a85e:	464b      	mov	r3, r9
 800a860:	eb45 0303 	adc.w	r3, r5, r3
 800a864:	607b      	str	r3, [r7, #4]
 800a866:	f04f 0200 	mov.w	r2, #0
 800a86a:	f04f 0300 	mov.w	r3, #0
 800a86e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a872:	4629      	mov	r1, r5
 800a874:	028b      	lsls	r3, r1, #10
 800a876:	4621      	mov	r1, r4
 800a878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a87c:	4621      	mov	r1, r4
 800a87e:	028a      	lsls	r2, r1, #10
 800a880:	4610      	mov	r0, r2
 800a882:	4619      	mov	r1, r3
 800a884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a886:	2200      	movs	r2, #0
 800a888:	61bb      	str	r3, [r7, #24]
 800a88a:	61fa      	str	r2, [r7, #28]
 800a88c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a890:	f7f6 fa1a 	bl	8000cc8 <__aeabi_uldivmod>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4613      	mov	r3, r2
 800a89a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a89c:	4b0b      	ldr	r3, [pc, #44]	; (800a8cc <HAL_RCC_GetSysClockFreq+0x200>)
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	0c1b      	lsrs	r3, r3, #16
 800a8a2:	f003 0303 	and.w	r3, r3, #3
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a8ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a8ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a8b6:	e002      	b.n	800a8be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a8b8:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a8ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a8bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a8be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3750      	adds	r7, #80	; 0x50
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8ca:	bf00      	nop
 800a8cc:	40023800 	.word	0x40023800
 800a8d0:	00f42400 	.word	0x00f42400
 800a8d4:	007a1200 	.word	0x007a1200

0800a8d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a8dc:	4b03      	ldr	r3, [pc, #12]	; (800a8ec <HAL_RCC_GetHCLKFreq+0x14>)
 800a8de:	681b      	ldr	r3, [r3, #0]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	200001b4 	.word	0x200001b4

0800a8f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a8f4:	f7ff fff0 	bl	800a8d8 <HAL_RCC_GetHCLKFreq>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	4b05      	ldr	r3, [pc, #20]	; (800a910 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	0a9b      	lsrs	r3, r3, #10
 800a900:	f003 0307 	and.w	r3, r3, #7
 800a904:	4903      	ldr	r1, [pc, #12]	; (800a914 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a906:	5ccb      	ldrb	r3, [r1, r3]
 800a908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	40023800 	.word	0x40023800
 800a914:	0801bc64 	.word	0x0801bc64

0800a918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a91c:	f7ff ffdc 	bl	800a8d8 <HAL_RCC_GetHCLKFreq>
 800a920:	4602      	mov	r2, r0
 800a922:	4b05      	ldr	r3, [pc, #20]	; (800a938 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	0b5b      	lsrs	r3, r3, #13
 800a928:	f003 0307 	and.w	r3, r3, #7
 800a92c:	4903      	ldr	r1, [pc, #12]	; (800a93c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a92e:	5ccb      	ldrb	r3, [r1, r3]
 800a930:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a934:	4618      	mov	r0, r3
 800a936:	bd80      	pop	{r7, pc}
 800a938:	40023800 	.word	0x40023800
 800a93c:	0801bc64 	.word	0x0801bc64

0800a940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a948:	2300      	movs	r3, #0
 800a94a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10b      	bne.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a964:	2b00      	cmp	r3, #0
 800a966:	d105      	bne.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a970:	2b00      	cmp	r3, #0
 800a972:	d075      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a974:	4b91      	ldr	r3, [pc, #580]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a97a:	f7fd ff2b 	bl	80087d4 <HAL_GetTick>
 800a97e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a980:	e008      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a982:	f7fd ff27 	bl	80087d4 <HAL_GetTick>
 800a986:	4602      	mov	r2, r0
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	1ad3      	subs	r3, r2, r3
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d901      	bls.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a990:	2303      	movs	r3, #3
 800a992:	e189      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a994:	4b8a      	ldr	r3, [pc, #552]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1f0      	bne.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 0301 	and.w	r3, r3, #1
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d009      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	019a      	lsls	r2, r3, #6
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	071b      	lsls	r3, r3, #28
 800a9b8:	4981      	ldr	r1, [pc, #516]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0302 	and.w	r3, r3, #2
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d01f      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a9cc:	4b7c      	ldr	r3, [pc, #496]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a9ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9d2:	0f1b      	lsrs	r3, r3, #28
 800a9d4:	f003 0307 	and.w	r3, r3, #7
 800a9d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	019a      	lsls	r2, r3, #6
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	061b      	lsls	r3, r3, #24
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	071b      	lsls	r3, r3, #28
 800a9ec:	4974      	ldr	r1, [pc, #464]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a9f4:	4b72      	ldr	r3, [pc, #456]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a9f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9fa:	f023 021f 	bic.w	r2, r3, #31
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	3b01      	subs	r3, #1
 800aa04:	496e      	ldr	r1, [pc, #440]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aa06:	4313      	orrs	r3, r2
 800aa08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00d      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	019a      	lsls	r2, r3, #6
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	061b      	lsls	r3, r3, #24
 800aa24:	431a      	orrs	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	071b      	lsls	r3, r3, #28
 800aa2c:	4964      	ldr	r1, [pc, #400]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800aa34:	4b61      	ldr	r3, [pc, #388]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800aa36:	2201      	movs	r2, #1
 800aa38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aa3a:	f7fd fecb 	bl	80087d4 <HAL_GetTick>
 800aa3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aa40:	e008      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800aa42:	f7fd fec7 	bl	80087d4 <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d901      	bls.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa50:	2303      	movs	r3, #3
 800aa52:	e129      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aa54:	4b5a      	ldr	r3, [pc, #360]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d0f0      	beq.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d105      	bne.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d079      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800aa78:	4b52      	ldr	r3, [pc, #328]	; (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aa7e:	f7fd fea9 	bl	80087d4 <HAL_GetTick>
 800aa82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aa84:	e008      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800aa86:	f7fd fea5 	bl	80087d4 <HAL_GetTick>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d901      	bls.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e107      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aa98:	4b49      	ldr	r3, [pc, #292]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aaa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaa4:	d0ef      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0304 	and.w	r3, r3, #4
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d020      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800aab2:	4b43      	ldr	r3, [pc, #268]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab8:	0f1b      	lsrs	r3, r3, #28
 800aaba:	f003 0307 	and.w	r3, r3, #7
 800aabe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	019a      	lsls	r2, r3, #6
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	061b      	lsls	r3, r3, #24
 800aacc:	431a      	orrs	r2, r3
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	071b      	lsls	r3, r3, #28
 800aad2:	493b      	ldr	r1, [pc, #236]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aad4:	4313      	orrs	r3, r2
 800aad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800aada:	4b39      	ldr	r3, [pc, #228]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aadc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aae0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a1b      	ldr	r3, [r3, #32]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	021b      	lsls	r3, r3, #8
 800aaec:	4934      	ldr	r1, [pc, #208]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 0308 	and.w	r3, r3, #8
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d01e      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ab00:	4b2f      	ldr	r3, [pc, #188]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ab02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab06:	0e1b      	lsrs	r3, r3, #24
 800ab08:	f003 030f 	and.w	r3, r3, #15
 800ab0c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	019a      	lsls	r2, r3, #6
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	061b      	lsls	r3, r3, #24
 800ab18:	431a      	orrs	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	071b      	lsls	r3, r3, #28
 800ab20:	4927      	ldr	r1, [pc, #156]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ab22:	4313      	orrs	r3, r2
 800ab24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ab28:	4b25      	ldr	r3, [pc, #148]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ab2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab36:	4922      	ldr	r1, [pc, #136]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ab3e:	4b21      	ldr	r3, [pc, #132]	; (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ab40:	2201      	movs	r2, #1
 800ab42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ab44:	f7fd fe46 	bl	80087d4 <HAL_GetTick>
 800ab48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ab4a:	e008      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ab4c:	f7fd fe42 	bl	80087d4 <HAL_GetTick>
 800ab50:	4602      	mov	r2, r0
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	1ad3      	subs	r3, r2, r3
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d901      	bls.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab5a:	2303      	movs	r3, #3
 800ab5c:	e0a4      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ab5e:	4b18      	ldr	r3, [pc, #96]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab6a:	d1ef      	bne.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0320 	and.w	r3, r3, #32
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 808b 	beq.w	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	60fb      	str	r3, [r7, #12]
 800ab7e:	4b10      	ldr	r3, [pc, #64]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ab80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab82:	4a0f      	ldr	r2, [pc, #60]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ab84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab88:	6413      	str	r3, [r2, #64]	; 0x40
 800ab8a:	4b0d      	ldr	r3, [pc, #52]	; (800abc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab92:	60fb      	str	r3, [r7, #12]
 800ab94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ab96:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a0b      	ldr	r2, [pc, #44]	; (800abc8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800ab9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aba0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aba2:	f7fd fe17 	bl	80087d4 <HAL_GetTick>
 800aba6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800aba8:	e010      	b.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800abaa:	f7fd fe13 	bl	80087d4 <HAL_GetTick>
 800abae:	4602      	mov	r2, r0
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d909      	bls.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800abb8:	2303      	movs	r3, #3
 800abba:	e075      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800abbc:	42470068 	.word	0x42470068
 800abc0:	40023800 	.word	0x40023800
 800abc4:	42470070 	.word	0x42470070
 800abc8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800abcc:	4b38      	ldr	r3, [pc, #224]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0e8      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800abd8:	4b36      	ldr	r3, [pc, #216]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800abda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abe0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d02f      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d028      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800abf6:	4b2f      	ldr	r3, [pc, #188]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800abf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abfe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ac00:	4b2d      	ldr	r3, [pc, #180]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800ac02:	2201      	movs	r2, #1
 800ac04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ac06:	4b2c      	ldr	r3, [pc, #176]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ac0c:	4a29      	ldr	r2, [pc, #164]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ac12:	4b28      	ldr	r3, [pc, #160]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ac14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d114      	bne.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ac1e:	f7fd fdd9 	bl	80087d4 <HAL_GetTick>
 800ac22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac24:	e00a      	b.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac26:	f7fd fdd5 	bl	80087d4 <HAL_GetTick>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d901      	bls.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800ac38:	2303      	movs	r3, #3
 800ac3a:	e035      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac3c:	4b1d      	ldr	r3, [pc, #116]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ac3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac40:	f003 0302 	and.w	r3, r3, #2
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d0ee      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac54:	d10d      	bne.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800ac56:	4b17      	ldr	r3, [pc, #92]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ac66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac6a:	4912      	ldr	r1, [pc, #72]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	608b      	str	r3, [r1, #8]
 800ac70:	e005      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800ac72:	4b10      	ldr	r3, [pc, #64]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	4a0f      	ldr	r2, [pc, #60]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ac78:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ac7c:	6093      	str	r3, [r2, #8]
 800ac7e:	4b0d      	ldr	r3, [pc, #52]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ac80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac8a:	490a      	ldr	r1, [pc, #40]	; (800acb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 0310 	and.w	r3, r3, #16
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d004      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800aca2:	4b06      	ldr	r3, [pc, #24]	; (800acbc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800aca4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3718      	adds	r7, #24
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	40007000 	.word	0x40007000
 800acb4:	40023800 	.word	0x40023800
 800acb8:	42470e40 	.word	0x42470e40
 800acbc:	424711e0 	.word	0x424711e0

0800acc0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e066      	b.n	800ada4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	7f5b      	ldrb	r3, [r3, #29]
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d105      	bne.n	800acec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7f9 f9e0 	bl	80040ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2202      	movs	r2, #2
 800acf0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	22ca      	movs	r2, #202	; 0xca
 800acf8:	625a      	str	r2, [r3, #36]	; 0x24
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2253      	movs	r2, #83	; 0x53
 800ad00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fa45 	bl	800b192 <RTC_EnterInitMode>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d12c      	bne.n	800ad6c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	6812      	ldr	r2, [r2, #0]
 800ad1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ad20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad24:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	6899      	ldr	r1, [r3, #8]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	431a      	orrs	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	695b      	ldr	r3, [r3, #20]
 800ad3a:	431a      	orrs	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	430a      	orrs	r2, r1
 800ad42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	68d2      	ldr	r2, [r2, #12]
 800ad4c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	6919      	ldr	r1, [r3, #16]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	041a      	lsls	r2, r3, #16
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	430a      	orrs	r2, r1
 800ad60:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fa4c 	bl	800b200 <RTC_ExitInitMode>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d113      	bne.n	800ad9a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad80:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	699a      	ldr	r2, [r3, #24]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	430a      	orrs	r2, r1
 800ad92:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	22ff      	movs	r2, #255	; 0xff
 800ada0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800adac:	b590      	push	{r4, r7, lr}
 800adae:	b087      	sub	sp, #28
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800adb8:	2300      	movs	r3, #0
 800adba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	7f1b      	ldrb	r3, [r3, #28]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d101      	bne.n	800adc8 <HAL_RTC_SetTime+0x1c>
 800adc4:	2302      	movs	r3, #2
 800adc6:	e087      	b.n	800aed8 <HAL_RTC_SetTime+0x12c>
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2201      	movs	r2, #1
 800adcc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2202      	movs	r2, #2
 800add2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d126      	bne.n	800ae28 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d102      	bne.n	800adee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	2200      	movs	r2, #0
 800adec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 fa29 	bl	800b24a <RTC_ByteToBcd2>
 800adf8:	4603      	mov	r3, r0
 800adfa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	785b      	ldrb	r3, [r3, #1]
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 fa22 	bl	800b24a <RTC_ByteToBcd2>
 800ae06:	4603      	mov	r3, r0
 800ae08:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ae0a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	789b      	ldrb	r3, [r3, #2]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 fa1a 	bl	800b24a <RTC_ByteToBcd2>
 800ae16:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ae18:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	78db      	ldrb	r3, [r3, #3]
 800ae20:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ae22:	4313      	orrs	r3, r2
 800ae24:	617b      	str	r3, [r7, #20]
 800ae26:	e018      	b.n	800ae5a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d102      	bne.n	800ae3c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	785b      	ldrb	r3, [r3, #1]
 800ae46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ae48:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ae4e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	78db      	ldrb	r3, [r3, #3]
 800ae54:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ae56:	4313      	orrs	r3, r2
 800ae58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	22ca      	movs	r2, #202	; 0xca
 800ae60:	625a      	str	r2, [r3, #36]	; 0x24
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2253      	movs	r2, #83	; 0x53
 800ae68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f000 f991 	bl	800b192 <RTC_EnterInitMode>
 800ae70:	4603      	mov	r3, r0
 800ae72:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ae74:	7cfb      	ldrb	r3, [r7, #19]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d120      	bne.n	800aebc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ae84:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ae88:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ae98:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	6899      	ldr	r1, [r3, #8]
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	68da      	ldr	r2, [r3, #12]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	431a      	orrs	r2, r3
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 f9a4 	bl	800b200 <RTC_ExitInitMode>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800aebc:	7cfb      	ldrb	r3, [r7, #19]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d102      	bne.n	800aec8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2201      	movs	r2, #1
 800aec6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	22ff      	movs	r2, #255	; 0xff
 800aece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	771a      	strb	r2, [r3, #28]

  return status;
 800aed6:	7cfb      	ldrb	r3, [r7, #19]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	371c      	adds	r7, #28
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd90      	pop	{r4, r7, pc}

0800aee0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800aeec:	2300      	movs	r3, #0
 800aeee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800af12:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800af16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	0c1b      	lsrs	r3, r3, #16
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af22:	b2da      	uxtb	r2, r3
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	0a1b      	lsrs	r3, r3, #8
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af32:	b2da      	uxtb	r2, r3
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af40:	b2da      	uxtb	r2, r3
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	0d9b      	lsrs	r3, r3, #22
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	f003 0301 	and.w	r3, r3, #1
 800af50:	b2da      	uxtb	r2, r3
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d11a      	bne.n	800af92 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	4618      	mov	r0, r3
 800af62:	f000 f98f 	bl	800b284 <RTC_Bcd2ToByte>
 800af66:	4603      	mov	r3, r0
 800af68:	461a      	mov	r2, r3
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	785b      	ldrb	r3, [r3, #1]
 800af72:	4618      	mov	r0, r3
 800af74:	f000 f986 	bl	800b284 <RTC_Bcd2ToByte>
 800af78:	4603      	mov	r3, r0
 800af7a:	461a      	mov	r2, r3
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	789b      	ldrb	r3, [r3, #2]
 800af84:	4618      	mov	r0, r3
 800af86:	f000 f97d 	bl	800b284 <RTC_Bcd2ToByte>
 800af8a:	4603      	mov	r3, r0
 800af8c:	461a      	mov	r2, r3
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800af9c:	b590      	push	{r4, r7, lr}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800afa8:	2300      	movs	r3, #0
 800afaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	7f1b      	ldrb	r3, [r3, #28]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d101      	bne.n	800afb8 <HAL_RTC_SetDate+0x1c>
 800afb4:	2302      	movs	r3, #2
 800afb6:	e071      	b.n	800b09c <HAL_RTC_SetDate+0x100>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2201      	movs	r2, #1
 800afbc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2202      	movs	r2, #2
 800afc2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10e      	bne.n	800afe8 <HAL_RTC_SetDate+0x4c>
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	785b      	ldrb	r3, [r3, #1]
 800afce:	f003 0310 	and.w	r3, r3, #16
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d008      	beq.n	800afe8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	785b      	ldrb	r3, [r3, #1]
 800afda:	f023 0310 	bic.w	r3, r3, #16
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	330a      	adds	r3, #10
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d11c      	bne.n	800b028 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	78db      	ldrb	r3, [r3, #3]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 f929 	bl	800b24a <RTC_ByteToBcd2>
 800aff8:	4603      	mov	r3, r0
 800affa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	785b      	ldrb	r3, [r3, #1]
 800b000:	4618      	mov	r0, r3
 800b002:	f000 f922 	bl	800b24a <RTC_ByteToBcd2>
 800b006:	4603      	mov	r3, r0
 800b008:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b00a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	789b      	ldrb	r3, [r3, #2]
 800b010:	4618      	mov	r0, r3
 800b012:	f000 f91a 	bl	800b24a <RTC_ByteToBcd2>
 800b016:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b018:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b022:	4313      	orrs	r3, r2
 800b024:	617b      	str	r3, [r7, #20]
 800b026:	e00e      	b.n	800b046 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	78db      	ldrb	r3, [r3, #3]
 800b02c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	785b      	ldrb	r3, [r3, #1]
 800b032:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b034:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b03a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b042:	4313      	orrs	r3, r2
 800b044:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	22ca      	movs	r2, #202	; 0xca
 800b04c:	625a      	str	r2, [r3, #36]	; 0x24
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2253      	movs	r2, #83	; 0x53
 800b054:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f000 f89b 	bl	800b192 <RTC_EnterInitMode>
 800b05c:	4603      	mov	r3, r0
 800b05e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b060:	7cfb      	ldrb	r3, [r7, #19]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10c      	bne.n	800b080 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b070:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b074:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f000 f8c2 	bl	800b200 <RTC_ExitInitMode>
 800b07c:	4603      	mov	r3, r0
 800b07e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b080:	7cfb      	ldrb	r3, [r7, #19]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d102      	bne.n	800b08c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2201      	movs	r2, #1
 800b08a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	22ff      	movs	r2, #255	; 0xff
 800b092:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	771a      	strb	r2, [r3, #28]

  return status;
 800b09a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	371c      	adds	r7, #28
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd90      	pop	{r4, r7, pc}

0800b0a4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b0be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b0c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	0c1b      	lsrs	r3, r3, #16
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	0a1b      	lsrs	r3, r3, #8
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	f003 031f 	and.w	r3, r3, #31
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	0b5b      	lsrs	r3, r3, #13
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	f003 0307 	and.w	r3, r3, #7
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d11a      	bne.n	800b138 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	78db      	ldrb	r3, [r3, #3]
 800b106:	4618      	mov	r0, r3
 800b108:	f000 f8bc 	bl	800b284 <RTC_Bcd2ToByte>
 800b10c:	4603      	mov	r3, r0
 800b10e:	461a      	mov	r2, r3
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	785b      	ldrb	r3, [r3, #1]
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 f8b3 	bl	800b284 <RTC_Bcd2ToByte>
 800b11e:	4603      	mov	r3, r0
 800b120:	461a      	mov	r2, r3
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	789b      	ldrb	r3, [r3, #2]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 f8aa 	bl	800b284 <RTC_Bcd2ToByte>
 800b130:	4603      	mov	r3, r0
 800b132:	461a      	mov	r2, r3
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3718      	adds	r7, #24
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68da      	ldr	r2, [r3, #12]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b15c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b15e:	f7fd fb39 	bl	80087d4 <HAL_GetTick>
 800b162:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b164:	e009      	b.n	800b17a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b166:	f7fd fb35 	bl	80087d4 <HAL_GetTick>
 800b16a:	4602      	mov	r2, r0
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b174:	d901      	bls.n	800b17a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e007      	b.n	800b18a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	f003 0320 	and.w	r3, r3, #32
 800b184:	2b00      	cmp	r3, #0
 800b186:	d0ee      	beq.n	800b166 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b19a:	2300      	movs	r3, #0
 800b19c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d122      	bne.n	800b1f6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68da      	ldr	r2, [r3, #12]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b1be:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b1c0:	f7fd fb08 	bl	80087d4 <HAL_GetTick>
 800b1c4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b1c6:	e00c      	b.n	800b1e2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b1c8:	f7fd fb04 	bl	80087d4 <HAL_GetTick>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1d6:	d904      	bls.n	800b1e2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2204      	movs	r2, #4
 800b1dc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d102      	bne.n	800b1f6 <RTC_EnterInitMode+0x64>
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d1e8      	bne.n	800b1c8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68da      	ldr	r2, [r3, #12]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b21a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	f003 0320 	and.w	r3, r3, #32
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10a      	bne.n	800b240 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff ff89 	bl	800b142 <HAL_RTC_WaitForSynchro>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d004      	beq.n	800b240 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2204      	movs	r2, #4
 800b23a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b240:	7bfb      	ldrb	r3, [r7, #15]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b24a:	b480      	push	{r7}
 800b24c:	b085      	sub	sp, #20
 800b24e:	af00      	add	r7, sp, #0
 800b250:	4603      	mov	r3, r0
 800b252:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800b254:	2300      	movs	r3, #0
 800b256:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800b258:	e005      	b.n	800b266 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
 800b25c:	3301      	adds	r3, #1
 800b25e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800b260:	79fb      	ldrb	r3, [r7, #7]
 800b262:	3b0a      	subs	r3, #10
 800b264:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b266:	79fb      	ldrb	r3, [r7, #7]
 800b268:	2b09      	cmp	r3, #9
 800b26a:	d8f6      	bhi.n	800b25a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
 800b26e:	011b      	lsls	r3, r3, #4
 800b270:	b2da      	uxtb	r2, r3
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	4313      	orrs	r3, r2
 800b276:	b2db      	uxtb	r3, r3
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3714      	adds	r7, #20
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	4603      	mov	r3, r0
 800b28c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800b28e:	2300      	movs	r3, #0
 800b290:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b292:	79fb      	ldrb	r3, [r7, #7]
 800b294:	091b      	lsrs	r3, r3, #4
 800b296:	b2db      	uxtb	r3, r3
 800b298:	461a      	mov	r2, r3
 800b29a:	0092      	lsls	r2, r2, #2
 800b29c:	4413      	add	r3, r2
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800b2a2:	79fb      	ldrb	r3, [r7, #7]
 800b2a4:	f003 030f 	and.w	r3, r3, #15
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	7bfb      	ldrb	r3, [r7, #15]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	b2db      	uxtb	r3, r3
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3714      	adds	r7, #20
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e022      	b.n	800b314 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d105      	bne.n	800b2e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f7f8 ff2d 	bl	8004140 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2203      	movs	r2, #3
 800b2ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f814 	bl	800b31c <HAL_SD_InitCard>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e00a      	b.n	800b314 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b31c:	b5b0      	push	{r4, r5, r7, lr}
 800b31e:	b08e      	sub	sp, #56	; 0x38
 800b320:	af04      	add	r7, sp, #16
 800b322:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b324:	2300      	movs	r3, #0
 800b326:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b328:	2300      	movs	r3, #0
 800b32a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b32c:	2300      	movs	r3, #0
 800b32e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b330:	2300      	movs	r3, #0
 800b332:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b334:	2300      	movs	r3, #0
 800b336:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b338:	2376      	movs	r3, #118	; 0x76
 800b33a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681d      	ldr	r5, [r3, #0]
 800b340:	466c      	mov	r4, sp
 800b342:	f107 0314 	add.w	r3, r7, #20
 800b346:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b34a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b34e:	f107 0308 	add.w	r3, r7, #8
 800b352:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b354:	4628      	mov	r0, r5
 800b356:	f002 ffb9 	bl	800e2cc <SDIO_Init>
 800b35a:	4603      	mov	r3, r0
 800b35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e04f      	b.n	800b40c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b36c:	4b29      	ldr	r3, [pc, #164]	; (800b414 <HAL_SD_InitCard+0xf8>)
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4618      	mov	r0, r3
 800b378:	f002 fff1 	bl	800e35e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b37c:	4b25      	ldr	r3, [pc, #148]	; (800b414 <HAL_SD_InitCard+0xf8>)
 800b37e:	2201      	movs	r2, #1
 800b380:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b382:	2002      	movs	r0, #2
 800b384:	f7fd fa32 	bl	80087ec <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 fe69 	bl	800c060 <SD_PowerON>
 800b38e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b390:	6a3b      	ldr	r3, [r7, #32]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00b      	beq.n	800b3ae <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	431a      	orrs	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e02e      	b.n	800b40c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fd88 	bl	800bec4 <SD_InitCard>
 800b3b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3b6:	6a3b      	ldr	r3, [r7, #32]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00b      	beq.n	800b3d4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	431a      	orrs	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e01b      	b.n	800b40c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f003 f850 	bl	800e482 <SDMMC_CmdBlockLength>
 800b3e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00f      	beq.n	800b40a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a0a      	ldr	r2, [pc, #40]	; (800b418 <HAL_SD_InitCard+0xfc>)
 800b3f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3f6:	6a3b      	ldr	r3, [r7, #32]
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	e000      	b.n	800b40c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3728      	adds	r7, #40	; 0x28
 800b410:	46bd      	mov	sp, r7
 800b412:	bdb0      	pop	{r4, r5, r7, pc}
 800b414:	422580a0 	.word	0x422580a0
 800b418:	004005ff 	.word	0x004005ff

0800b41c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b092      	sub	sp, #72	; 0x48
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b42a:	f7fd f9d3 	bl	80087d4 <HAL_GetTick>
 800b42e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d107      	bne.n	800b44e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b442:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	e1bd      	b.n	800b7ca <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b454:	b2db      	uxtb	r3, r3
 800b456:	2b01      	cmp	r3, #1
 800b458:	f040 81b0 	bne.w	800b7bc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	441a      	add	r2, r3
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d907      	bls.n	800b480 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b474:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	e1a4      	b.n	800b7ca <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2203      	movs	r2, #3
 800b484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2200      	movs	r2, #0
 800b48e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b494:	2b01      	cmp	r3, #1
 800b496:	d002      	beq.n	800b49e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49a:	025b      	lsls	r3, r3, #9
 800b49c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b49e:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	025b      	lsls	r3, r3, #9
 800b4a8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b4aa:	2390      	movs	r3, #144	; 0x90
 800b4ac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f107 0214 	add.w	r2, r7, #20
 800b4c2:	4611      	mov	r1, r2
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f002 ffb0 	bl	800e42a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d90a      	bls.n	800b4e6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f003 f814 	bl	800e50a <SDMMC_CmdReadMultiBlock>
 800b4e2:	6478      	str	r0, [r7, #68]	; 0x44
 800b4e4:	e009      	b.n	800b4fa <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f002 ffe7 	bl	800e4c6 <SDMMC_CmdReadSingleBlock>
 800b4f8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d012      	beq.n	800b526 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a7a      	ldr	r2, [pc, #488]	; (800b6f0 <HAL_SD_ReadBlocks+0x2d4>)
 800b506:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b50e:	431a      	orrs	r2, r3
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2200      	movs	r2, #0
 800b520:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e151      	b.n	800b7ca <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b52a:	e061      	b.n	800b5f0 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b536:	2b00      	cmp	r3, #0
 800b538:	d03c      	beq.n	800b5b4 <HAL_SD_ReadBlocks+0x198>
 800b53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d039      	beq.n	800b5b4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b540:	2300      	movs	r3, #0
 800b542:	643b      	str	r3, [r7, #64]	; 0x40
 800b544:	e033      	b.n	800b5ae <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f002 fee9 	bl	800e322 <SDIO_ReadFIFO>
 800b550:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b554:	b2da      	uxtb	r2, r3
 800b556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b558:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b55c:	3301      	adds	r3, #1
 800b55e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b562:	3b01      	subs	r3, #1
 800b564:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b568:	0a1b      	lsrs	r3, r3, #8
 800b56a:	b2da      	uxtb	r2, r3
 800b56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b572:	3301      	adds	r3, #1
 800b574:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b578:	3b01      	subs	r3, #1
 800b57a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57e:	0c1b      	lsrs	r3, r3, #16
 800b580:	b2da      	uxtb	r2, r3
 800b582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b584:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b588:	3301      	adds	r3, #1
 800b58a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b58e:	3b01      	subs	r3, #1
 800b590:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b594:	0e1b      	lsrs	r3, r3, #24
 800b596:	b2da      	uxtb	r2, r3
 800b598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59e:	3301      	adds	r3, #1
 800b5a0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800b5a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	643b      	str	r3, [r7, #64]	; 0x40
 800b5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5b0:	2b07      	cmp	r3, #7
 800b5b2:	d9c8      	bls.n	800b546 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b5b4:	f7fd f90e 	bl	80087d4 <HAL_GetTick>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5bc:	1ad3      	subs	r3, r2, r3
 800b5be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d902      	bls.n	800b5ca <HAL_SD_ReadBlocks+0x1ae>
 800b5c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d112      	bne.n	800b5f0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a48      	ldr	r2, [pc, #288]	; (800b6f0 <HAL_SD_ReadBlocks+0x2d4>)
 800b5d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e0ec      	b.n	800b7ca <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5f6:	f240 332a 	movw	r3, #810	; 0x32a
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d095      	beq.n	800b52c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d022      	beq.n	800b654 <HAL_SD_ReadBlocks+0x238>
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d91f      	bls.n	800b654 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b618:	2b03      	cmp	r3, #3
 800b61a:	d01b      	beq.n	800b654 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4618      	mov	r0, r3
 800b622:	f002 ffd9 	bl	800e5d8 <SDMMC_CmdStopTransfer>
 800b626:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d012      	beq.n	800b654 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a2f      	ldr	r2, [pc, #188]	; (800b6f0 <HAL_SD_ReadBlocks+0x2d4>)
 800b634:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b63a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b63c:	431a      	orrs	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2200      	movs	r2, #0
 800b64e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	e0ba      	b.n	800b7ca <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b65a:	f003 0308 	and.w	r3, r3, #8
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d012      	beq.n	800b688 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a22      	ldr	r2, [pc, #136]	; (800b6f0 <HAL_SD_ReadBlocks+0x2d4>)
 800b668:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66e:	f043 0208 	orr.w	r2, r3, #8
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e0a0      	b.n	800b7ca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b68e:	f003 0302 	and.w	r3, r3, #2
 800b692:	2b00      	cmp	r3, #0
 800b694:	d012      	beq.n	800b6bc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a15      	ldr	r2, [pc, #84]	; (800b6f0 <HAL_SD_ReadBlocks+0x2d4>)
 800b69c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a2:	f043 0202 	orr.w	r2, r3, #2
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e086      	b.n	800b7ca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c2:	f003 0320 	and.w	r3, r3, #32
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d063      	beq.n	800b792 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a08      	ldr	r2, [pc, #32]	; (800b6f0 <HAL_SD_ReadBlocks+0x2d4>)
 800b6d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d6:	f043 0220 	orr.w	r2, r3, #32
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e06c      	b.n	800b7ca <HAL_SD_ReadBlocks+0x3ae>
 800b6f0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f002 fe12 	bl	800e322 <SDIO_ReadFIFO>
 800b6fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800b700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b702:	b2da      	uxtb	r2, r3
 800b704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b706:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b70a:	3301      	adds	r3, #1
 800b70c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b710:	3b01      	subs	r3, #1
 800b712:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b716:	0a1b      	lsrs	r3, r3, #8
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b720:	3301      	adds	r3, #1
 800b722:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b726:	3b01      	subs	r3, #1
 800b728:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72c:	0c1b      	lsrs	r3, r3, #16
 800b72e:	b2da      	uxtb	r2, r3
 800b730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b732:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b736:	3301      	adds	r3, #1
 800b738:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73c:	3b01      	subs	r3, #1
 800b73e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b742:	0e1b      	lsrs	r3, r3, #24
 800b744:	b2da      	uxtb	r2, r3
 800b746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b748:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74c:	3301      	adds	r3, #1
 800b74e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b752:	3b01      	subs	r3, #1
 800b754:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b756:	f7fd f83d 	bl	80087d4 <HAL_GetTick>
 800b75a:	4602      	mov	r2, r0
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b762:	429a      	cmp	r2, r3
 800b764:	d902      	bls.n	800b76c <HAL_SD_ReadBlocks+0x350>
 800b766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d112      	bne.n	800b792 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a18      	ldr	r2, [pc, #96]	; (800b7d4 <HAL_SD_ReadBlocks+0x3b8>)
 800b772:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b778:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e01b      	b.n	800b7ca <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <HAL_SD_ReadBlocks+0x38a>
 800b7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1a6      	bne.n	800b6f4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f240 523a 	movw	r2, #1338	; 0x53a
 800b7ae:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	e006      	b.n	800b7ca <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
  }
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3748      	adds	r7, #72	; 0x48
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	004005ff 	.word	0x004005ff

0800b7d8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b092      	sub	sp, #72	; 0x48
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b7e6:	f7fc fff5 	bl	80087d4 <HAL_GetTick>
 800b7ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d107      	bne.n	800b80a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e166      	b.n	800bad8 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b01      	cmp	r3, #1
 800b814:	f040 8159 	bne.w	800baca <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2200      	movs	r2, #0
 800b81c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b81e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	441a      	add	r2, r3
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b828:	429a      	cmp	r2, r3
 800b82a:	d907      	bls.n	800b83c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b830:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	e14d      	b.n	800bad8 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2203      	movs	r2, #3
 800b840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2200      	movs	r2, #0
 800b84a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b850:	2b01      	cmp	r3, #1
 800b852:	d002      	beq.n	800b85a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b856:	025b      	lsls	r3, r3, #9
 800b858:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b85a:	f04f 33ff 	mov.w	r3, #4294967295
 800b85e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	025b      	lsls	r3, r3, #9
 800b864:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b866:	2390      	movs	r3, #144	; 0x90
 800b868:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b86a:	2300      	movs	r3, #0
 800b86c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b86e:	2300      	movs	r3, #0
 800b870:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b872:	2301      	movs	r3, #1
 800b874:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f107 0218 	add.w	r2, r7, #24
 800b87e:	4611      	mov	r1, r2
 800b880:	4618      	mov	r0, r3
 800b882:	f002 fdd2 	bl	800e42a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d90a      	bls.n	800b8a2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2220      	movs	r2, #32
 800b890:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b898:	4618      	mov	r0, r3
 800b89a:	f002 fe7a 	bl	800e592 <SDMMC_CmdWriteMultiBlock>
 800b89e:	6478      	str	r0, [r7, #68]	; 0x44
 800b8a0:	e009      	b.n	800b8b6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2210      	movs	r2, #16
 800b8a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f002 fe4d 	bl	800e54e <SDMMC_CmdWriteSingleBlock>
 800b8b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d012      	beq.n	800b8e2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a87      	ldr	r2, [pc, #540]	; (800bae0 <HAL_SD_WriteBlocks+0x308>)
 800b8c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e0fa      	b.n	800bad8 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b8e6:	e065      	b.n	800b9b4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d040      	beq.n	800b978 <HAL_SD_WriteBlocks+0x1a0>
 800b8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d03d      	beq.n	800b978 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	643b      	str	r3, [r7, #64]	; 0x40
 800b900:	e037      	b.n	800b972 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800b902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90a:	3301      	adds	r3, #1
 800b90c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b910:	3b01      	subs	r3, #1
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	021a      	lsls	r2, r3, #8
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b922:	3301      	adds	r3, #1
 800b924:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b928:	3b01      	subs	r3, #1
 800b92a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	041a      	lsls	r2, r3, #16
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	4313      	orrs	r3, r2
 800b936:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b93a:	3301      	adds	r3, #1
 800b93c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b940:	3b01      	subs	r3, #1
 800b942:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	061a      	lsls	r2, r3, #24
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	4313      	orrs	r3, r2
 800b94e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b952:	3301      	adds	r3, #1
 800b954:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b958:	3b01      	subs	r3, #1
 800b95a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f107 0214 	add.w	r2, r7, #20
 800b964:	4611      	mov	r1, r2
 800b966:	4618      	mov	r0, r3
 800b968:	f002 fce8 	bl	800e33c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b96c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b96e:	3301      	adds	r3, #1
 800b970:	643b      	str	r3, [r7, #64]	; 0x40
 800b972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b974:	2b07      	cmp	r3, #7
 800b976:	d9c4      	bls.n	800b902 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b978:	f7fc ff2c 	bl	80087d4 <HAL_GetTick>
 800b97c:	4602      	mov	r2, r0
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b984:	429a      	cmp	r2, r3
 800b986:	d902      	bls.n	800b98e <HAL_SD_WriteBlocks+0x1b6>
 800b988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d112      	bne.n	800b9b4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a53      	ldr	r2, [pc, #332]	; (800bae0 <HAL_SD_WriteBlocks+0x308>)
 800b994:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b99a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b99c:	431a      	orrs	r2, r3
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e091      	b.n	800bad8 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9ba:	f240 331a 	movw	r3, #794	; 0x31a
 800b9be:	4013      	ands	r3, r2
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d091      	beq.n	800b8e8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d022      	beq.n	800ba18 <HAL_SD_WriteBlocks+0x240>
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d91f      	bls.n	800ba18 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	d01b      	beq.n	800ba18 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f002 fdf7 	bl	800e5d8 <SDMMC_CmdStopTransfer>
 800b9ea:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b9ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d012      	beq.n	800ba18 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a3a      	ldr	r2, [pc, #232]	; (800bae0 <HAL_SD_WriteBlocks+0x308>)
 800b9f8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba00:	431a      	orrs	r2, r3
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2200      	movs	r2, #0
 800ba12:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e05f      	b.n	800bad8 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba1e:	f003 0308 	and.w	r3, r3, #8
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d012      	beq.n	800ba4c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a2d      	ldr	r2, [pc, #180]	; (800bae0 <HAL_SD_WriteBlocks+0x308>)
 800ba2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba32:	f043 0208 	orr.w	r2, r3, #8
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e045      	b.n	800bad8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba52:	f003 0302 	and.w	r3, r3, #2
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d012      	beq.n	800ba80 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a20      	ldr	r2, [pc, #128]	; (800bae0 <HAL_SD_WriteBlocks+0x308>)
 800ba60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba66:	f043 0202 	orr.w	r2, r3, #2
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2201      	movs	r2, #1
 800ba72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e02b      	b.n	800bad8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba86:	f003 0310 	and.w	r3, r3, #16
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d012      	beq.n	800bab4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a13      	ldr	r2, [pc, #76]	; (800bae0 <HAL_SD_WriteBlocks+0x308>)
 800ba94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9a:	f043 0210 	orr.w	r2, r3, #16
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2201      	movs	r2, #1
 800baa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e011      	b.n	800bad8 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f240 523a 	movw	r2, #1338	; 0x53a
 800babc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2201      	movs	r2, #1
 800bac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	e006      	b.n	800bad8 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bace:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bad6:	2301      	movs	r3, #1
  }
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3748      	adds	r7, #72	; 0x48
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	004005ff 	.word	0x004005ff

0800bae4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baf2:	0f9b      	lsrs	r3, r3, #30
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bafe:	0e9b      	lsrs	r3, r3, #26
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	f003 030f 	and.w	r3, r3, #15
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb10:	0e1b      	lsrs	r3, r3, #24
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	f003 0303 	and.w	r3, r3, #3
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb22:	0c1b      	lsrs	r3, r3, #16
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb2e:	0a1b      	lsrs	r3, r3, #8
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb44:	0d1b      	lsrs	r3, r3, #20
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb50:	0c1b      	lsrs	r3, r3, #16
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	f003 030f 	and.w	r3, r3, #15
 800bb58:	b2da      	uxtb	r2, r3
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb62:	0bdb      	lsrs	r3, r3, #15
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	b2da      	uxtb	r2, r3
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb74:	0b9b      	lsrs	r3, r3, #14
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb86:	0b5b      	lsrs	r3, r3, #13
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb98:	0b1b      	lsrs	r3, r3, #12
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	b2da      	uxtb	r2, r3
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d163      	bne.n	800bc7c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbb8:	009a      	lsls	r2, r3, #2
 800bbba:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bbc4:	0f92      	lsrs	r2, r2, #30
 800bbc6:	431a      	orrs	r2, r3
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbd0:	0edb      	lsrs	r3, r3, #27
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	f003 0307 	and.w	r3, r3, #7
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbe2:	0e1b      	lsrs	r3, r3, #24
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	f003 0307 	and.w	r3, r3, #7
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbf4:	0d5b      	lsrs	r3, r3, #21
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	f003 0307 	and.w	r3, r3, #7
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc06:	0c9b      	lsrs	r3, r3, #18
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	f003 0307 	and.w	r3, r3, #7
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc18:	0bdb      	lsrs	r3, r3, #15
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	f003 0307 	and.w	r3, r3, #7
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	7e1b      	ldrb	r3, [r3, #24]
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	f003 0307 	and.w	r3, r3, #7
 800bc3a:	3302      	adds	r3, #2
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bc46:	fb03 f202 	mul.w	r2, r3, r2
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	7a1b      	ldrb	r3, [r3, #8]
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	f003 030f 	and.w	r3, r3, #15
 800bc58:	2201      	movs	r2, #1
 800bc5a:	409a      	lsls	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bc68:	0a52      	lsrs	r2, r2, #9
 800bc6a:	fb03 f202 	mul.w	r2, r3, r2
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc78:	661a      	str	r2, [r3, #96]	; 0x60
 800bc7a:	e031      	b.n	800bce0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d11d      	bne.n	800bcc0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc88:	041b      	lsls	r3, r3, #16
 800bc8a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc92:	0c1b      	lsrs	r3, r3, #16
 800bc94:	431a      	orrs	r2, r3
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	029a      	lsls	r2, r3, #10
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcb4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	661a      	str	r2, [r3, #96]	; 0x60
 800bcbe:	e00f      	b.n	800bce0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a58      	ldr	r2, [pc, #352]	; (800be28 <HAL_SD_GetCardCSD+0x344>)
 800bcc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bccc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e09d      	b.n	800be1c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bce4:	0b9b      	lsrs	r3, r3, #14
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	f003 0301 	and.w	r3, r3, #1
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf6:	09db      	lsrs	r3, r3, #7
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcfe:	b2da      	uxtb	r2, r3
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd18:	0fdb      	lsrs	r3, r3, #31
 800bd1a:	b2da      	uxtb	r2, r3
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd24:	0f5b      	lsrs	r3, r3, #29
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	f003 0303 	and.w	r3, r3, #3
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd36:	0e9b      	lsrs	r3, r3, #26
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	f003 0307 	and.w	r3, r3, #7
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd48:	0d9b      	lsrs	r3, r3, #22
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	f003 030f 	and.w	r3, r3, #15
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd5a:	0d5b      	lsrs	r3, r3, #21
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd76:	0c1b      	lsrs	r3, r3, #16
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	f003 0301 	and.w	r3, r3, #1
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd8a:	0bdb      	lsrs	r3, r3, #15
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	f003 0301 	and.w	r3, r3, #1
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd9e:	0b9b      	lsrs	r3, r3, #14
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	f003 0301 	and.w	r3, r3, #1
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdb2:	0b5b      	lsrs	r3, r3, #13
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	f003 0301 	and.w	r3, r3, #1
 800bdba:	b2da      	uxtb	r2, r3
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdc6:	0b1b      	lsrs	r3, r3, #12
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdda:	0a9b      	lsrs	r3, r3, #10
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	f003 0303 	and.w	r3, r3, #3
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdee:	0a1b      	lsrs	r3, r3, #8
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	f003 0303 	and.w	r3, r3, #3
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be02:	085b      	lsrs	r3, r3, #1
 800be04:	b2db      	uxtb	r3, r3
 800be06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	2201      	movs	r2, #1
 800be16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr
 800be28:	004005ff 	.word	0x004005ff

0800be2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b086      	sub	sp, #24
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800be8c:	2300      	movs	r3, #0
 800be8e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800be90:	f107 030c 	add.w	r3, r7, #12
 800be94:	4619      	mov	r1, r3
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f970 	bl	800c17c <SD_SendStatus>
 800be9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d005      	beq.n	800beb0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	431a      	orrs	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	0a5b      	lsrs	r3, r3, #9
 800beb4:	f003 030f 	and.w	r3, r3, #15
 800beb8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800beba:	693b      	ldr	r3, [r7, #16]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3718      	adds	r7, #24
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bec4:	b5b0      	push	{r4, r5, r7, lr}
 800bec6:	b094      	sub	sp, #80	; 0x50
 800bec8:	af04      	add	r7, sp, #16
 800beca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800becc:	2301      	movs	r3, #1
 800bece:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4618      	mov	r0, r3
 800bed6:	f002 fa50 	bl	800e37a <SDIO_GetPowerState>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d102      	bne.n	800bee6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bee0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bee4:	e0b8      	b.n	800c058 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beea:	2b03      	cmp	r3, #3
 800beec:	d02f      	beq.n	800bf4e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f002 fc37 	bl	800e766 <SDMMC_CmdSendCID>
 800bef8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800befa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800befc:	2b00      	cmp	r3, #0
 800befe:	d001      	beq.n	800bf04 <SD_InitCard+0x40>
    {
      return errorstate;
 800bf00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf02:	e0a9      	b.n	800c058 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2100      	movs	r1, #0
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f002 fa7a 	bl	800e404 <SDIO_GetResponse>
 800bf10:	4602      	mov	r2, r0
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2104      	movs	r1, #4
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f002 fa71 	bl	800e404 <SDIO_GetResponse>
 800bf22:	4602      	mov	r2, r0
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2108      	movs	r1, #8
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f002 fa68 	bl	800e404 <SDIO_GetResponse>
 800bf34:	4602      	mov	r2, r0
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	210c      	movs	r1, #12
 800bf40:	4618      	mov	r0, r3
 800bf42:	f002 fa5f 	bl	800e404 <SDIO_GetResponse>
 800bf46:	4602      	mov	r2, r0
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	d00d      	beq.n	800bf72 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f107 020e 	add.w	r2, r7, #14
 800bf5e:	4611      	mov	r1, r2
 800bf60:	4618      	mov	r0, r3
 800bf62:	f002 fc3d 	bl	800e7e0 <SDMMC_CmdSetRelAdd>
 800bf66:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d001      	beq.n	800bf72 <SD_InitCard+0xae>
    {
      return errorstate;
 800bf6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf70:	e072      	b.n	800c058 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf76:	2b03      	cmp	r3, #3
 800bf78:	d036      	beq.n	800bfe8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bf7a:	89fb      	ldrh	r3, [r7, #14]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf8a:	041b      	lsls	r3, r3, #16
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	4610      	mov	r0, r2
 800bf90:	f002 fc07 	bl	800e7a2 <SDMMC_CmdSendCSD>
 800bf94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9e:	e05b      	b.n	800c058 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f002 fa2c 	bl	800e404 <SDIO_GetResponse>
 800bfac:	4602      	mov	r2, r0
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2104      	movs	r1, #4
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f002 fa23 	bl	800e404 <SDIO_GetResponse>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2108      	movs	r1, #8
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f002 fa1a 	bl	800e404 <SDIO_GetResponse>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	210c      	movs	r1, #12
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f002 fa11 	bl	800e404 <SDIO_GetResponse>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2104      	movs	r1, #4
 800bfee:	4618      	mov	r0, r3
 800bff0:	f002 fa08 	bl	800e404 <SDIO_GetResponse>
 800bff4:	4603      	mov	r3, r0
 800bff6:	0d1a      	lsrs	r2, r3, #20
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bffc:	f107 0310 	add.w	r3, r7, #16
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7ff fd6e 	bl	800bae4 <HAL_SD_GetCardCSD>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d002      	beq.n	800c014 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c00e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c012:	e021      	b.n	800c058 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6819      	ldr	r1, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c01c:	041b      	lsls	r3, r3, #16
 800c01e:	2200      	movs	r2, #0
 800c020:	461c      	mov	r4, r3
 800c022:	4615      	mov	r5, r2
 800c024:	4622      	mov	r2, r4
 800c026:	462b      	mov	r3, r5
 800c028:	4608      	mov	r0, r1
 800c02a:	f002 faf7 	bl	800e61c <SDMMC_CmdSelDesel>
 800c02e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c032:	2b00      	cmp	r3, #0
 800c034:	d001      	beq.n	800c03a <SD_InitCard+0x176>
  {
    return errorstate;
 800c036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c038:	e00e      	b.n	800c058 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681d      	ldr	r5, [r3, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	466c      	mov	r4, sp
 800c042:	f103 0210 	add.w	r2, r3, #16
 800c046:	ca07      	ldmia	r2, {r0, r1, r2}
 800c048:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c04c:	3304      	adds	r3, #4
 800c04e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c050:	4628      	mov	r0, r5
 800c052:	f002 f93b 	bl	800e2cc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3740      	adds	r7, #64	; 0x40
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bdb0      	pop	{r4, r5, r7, pc}

0800c060 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c068:	2300      	movs	r3, #0
 800c06a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c06c:	2300      	movs	r3, #0
 800c06e:	617b      	str	r3, [r7, #20]
 800c070:	2300      	movs	r3, #0
 800c072:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4618      	mov	r0, r3
 800c07a:	f002 faf2 	bl	800e662 <SDMMC_CmdGoIdleState>
 800c07e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d001      	beq.n	800c08a <SD_PowerON+0x2a>
  {
    return errorstate;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	e072      	b.n	800c170 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4618      	mov	r0, r3
 800c090:	f002 fb05 	bl	800e69e <SDMMC_CmdOperCond>
 800c094:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00d      	beq.n	800c0b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f002 fadb 	bl	800e662 <SDMMC_CmdGoIdleState>
 800c0ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d004      	beq.n	800c0be <SD_PowerON+0x5e>
    {
      return errorstate;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	e05b      	b.n	800c170 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d137      	bne.n	800c136 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f002 fb05 	bl	800e6dc <SDMMC_CmdAppCommand>
 800c0d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d02d      	beq.n	800c136 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c0da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c0de:	e047      	b.n	800c170 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f002 faf8 	bl	800e6dc <SDMMC_CmdAppCommand>
 800c0ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d001      	beq.n	800c0f8 <SD_PowerON+0x98>
    {
      return errorstate;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	e03b      	b.n	800c170 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	491e      	ldr	r1, [pc, #120]	; (800c178 <SD_PowerON+0x118>)
 800c0fe:	4618      	mov	r0, r3
 800c100:	f002 fb0e 	bl	800e720 <SDMMC_CmdAppOperCommand>
 800c104:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d002      	beq.n	800c112 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c10c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c110:	e02e      	b.n	800c170 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2100      	movs	r1, #0
 800c118:	4618      	mov	r0, r3
 800c11a:	f002 f973 	bl	800e404 <SDIO_GetResponse>
 800c11e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	0fdb      	lsrs	r3, r3, #31
 800c124:	2b01      	cmp	r3, #1
 800c126:	d101      	bne.n	800c12c <SD_PowerON+0xcc>
 800c128:	2301      	movs	r3, #1
 800c12a:	e000      	b.n	800c12e <SD_PowerON+0xce>
 800c12c:	2300      	movs	r3, #0
 800c12e:	613b      	str	r3, [r7, #16]

    count++;
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	3301      	adds	r3, #1
 800c134:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d802      	bhi.n	800c146 <SD_PowerON+0xe6>
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d0cc      	beq.n	800c0e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d902      	bls.n	800c156 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c154:	e00c      	b.n	800c170 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d003      	beq.n	800c168 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2201      	movs	r2, #1
 800c164:	645a      	str	r2, [r3, #68]	; 0x44
 800c166:	e002      	b.n	800c16e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3718      	adds	r7, #24
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	c1100000 	.word	0xc1100000

0800c17c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d102      	bne.n	800c192 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c18c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c190:	e018      	b.n	800c1c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c19a:	041b      	lsls	r3, r3, #16
 800c19c:	4619      	mov	r1, r3
 800c19e:	4610      	mov	r0, r2
 800c1a0:	f002 fb3f 	bl	800e822 <SDMMC_CmdSendStatus>
 800c1a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d001      	beq.n	800c1b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	e009      	b.n	800c1c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2100      	movs	r1, #0
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f002 f924 	bl	800e404 <SDIO_GetResponse>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c1c2:	2300      	movs	r3, #0
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d101      	bne.n	800c1de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e07b      	b.n	800c2d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d108      	bne.n	800c1f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1ee:	d009      	beq.n	800c204 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	61da      	str	r2, [r3, #28]
 800c1f6:	e005      	b.n	800c204 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b00      	cmp	r3, #0
 800c214:	d106      	bne.n	800c224 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7f8 f82c 	bl	800427c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2202      	movs	r2, #2
 800c228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c23a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c24c:	431a      	orrs	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c256:	431a      	orrs	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	691b      	ldr	r3, [r3, #16]
 800c25c:	f003 0302 	and.w	r3, r3, #2
 800c260:	431a      	orrs	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	431a      	orrs	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c274:	431a      	orrs	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	69db      	ldr	r3, [r3, #28]
 800c27a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c27e:	431a      	orrs	r2, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a1b      	ldr	r3, [r3, #32]
 800c284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c288:	ea42 0103 	orr.w	r1, r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c290:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	430a      	orrs	r2, r1
 800c29a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	699b      	ldr	r3, [r3, #24]
 800c2a0:	0c1b      	lsrs	r3, r3, #16
 800c2a2:	f003 0104 	and.w	r1, r3, #4
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2aa:	f003 0210 	and.w	r2, r3, #16
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	430a      	orrs	r2, r1
 800c2b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	69da      	ldr	r2, [r3, #28]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c2c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b088      	sub	sp, #32
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	60f8      	str	r0, [r7, #12]
 800c2e6:	60b9      	str	r1, [r7, #8]
 800c2e8:	603b      	str	r3, [r7, #0]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d101      	bne.n	800c300 <HAL_SPI_Transmit+0x22>
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	e126      	b.n	800c54e <HAL_SPI_Transmit+0x270>
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c308:	f7fc fa64 	bl	80087d4 <HAL_GetTick>
 800c30c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c30e:	88fb      	ldrh	r3, [r7, #6]
 800c310:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d002      	beq.n	800c324 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c31e:	2302      	movs	r3, #2
 800c320:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c322:	e10b      	b.n	800c53c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d002      	beq.n	800c330 <HAL_SPI_Transmit+0x52>
 800c32a:	88fb      	ldrh	r3, [r7, #6]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d102      	bne.n	800c336 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c334:	e102      	b.n	800c53c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2203      	movs	r2, #3
 800c33a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2200      	movs	r2, #0
 800c342:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	68ba      	ldr	r2, [r7, #8]
 800c348:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	88fa      	ldrh	r2, [r7, #6]
 800c34e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	88fa      	ldrh	r2, [r7, #6]
 800c354:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c37c:	d10f      	bne.n	800c39e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c38c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	681a      	ldr	r2, [r3, #0]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c39c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3a8:	2b40      	cmp	r3, #64	; 0x40
 800c3aa:	d007      	beq.n	800c3bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3c4:	d14b      	bne.n	800c45e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d002      	beq.n	800c3d4 <HAL_SPI_Transmit+0xf6>
 800c3ce:	8afb      	ldrh	r3, [r7, #22]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d13e      	bne.n	800c452 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d8:	881a      	ldrh	r2, [r3, #0]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e4:	1c9a      	adds	r2, r3, #2
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c3f8:	e02b      	b.n	800c452 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	f003 0302 	and.w	r3, r3, #2
 800c404:	2b02      	cmp	r3, #2
 800c406:	d112      	bne.n	800c42e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c40c:	881a      	ldrh	r2, [r3, #0]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c418:	1c9a      	adds	r2, r3, #2
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c422:	b29b      	uxth	r3, r3
 800c424:	3b01      	subs	r3, #1
 800c426:	b29a      	uxth	r2, r3
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	86da      	strh	r2, [r3, #54]	; 0x36
 800c42c:	e011      	b.n	800c452 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c42e:	f7fc f9d1 	bl	80087d4 <HAL_GetTick>
 800c432:	4602      	mov	r2, r0
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d803      	bhi.n	800c446 <HAL_SPI_Transmit+0x168>
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c444:	d102      	bne.n	800c44c <HAL_SPI_Transmit+0x16e>
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d102      	bne.n	800c452 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800c44c:	2303      	movs	r3, #3
 800c44e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c450:	e074      	b.n	800c53c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c456:	b29b      	uxth	r3, r3
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1ce      	bne.n	800c3fa <HAL_SPI_Transmit+0x11c>
 800c45c:	e04c      	b.n	800c4f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d002      	beq.n	800c46c <HAL_SPI_Transmit+0x18e>
 800c466:	8afb      	ldrh	r3, [r7, #22]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d140      	bne.n	800c4ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	330c      	adds	r3, #12
 800c476:	7812      	ldrb	r2, [r2, #0]
 800c478:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c47e:	1c5a      	adds	r2, r3, #1
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c488:	b29b      	uxth	r3, r3
 800c48a:	3b01      	subs	r3, #1
 800c48c:	b29a      	uxth	r2, r3
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c492:	e02c      	b.n	800c4ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	f003 0302 	and.w	r3, r3, #2
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	d113      	bne.n	800c4ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	330c      	adds	r3, #12
 800c4ac:	7812      	ldrb	r2, [r2, #0]
 800c4ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b4:	1c5a      	adds	r2, r3, #1
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	86da      	strh	r2, [r3, #54]	; 0x36
 800c4c8:	e011      	b.n	800c4ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4ca:	f7fc f983 	bl	80087d4 <HAL_GetTick>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	1ad3      	subs	r3, r2, r3
 800c4d4:	683a      	ldr	r2, [r7, #0]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d803      	bhi.n	800c4e2 <HAL_SPI_Transmit+0x204>
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e0:	d102      	bne.n	800c4e8 <HAL_SPI_Transmit+0x20a>
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d102      	bne.n	800c4ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800c4e8:	2303      	movs	r3, #3
 800c4ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c4ec:	e026      	b.n	800c53c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1cd      	bne.n	800c494 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c4f8:	69ba      	ldr	r2, [r7, #24]
 800c4fa:	6839      	ldr	r1, [r7, #0]
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f000 f8b3 	bl	800c668 <SPI_EndRxTxTransaction>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2220      	movs	r2, #32
 800c50c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10a      	bne.n	800c52c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c516:	2300      	movs	r3, #0
 800c518:	613b      	str	r3, [r7, #16]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	613b      	str	r3, [r7, #16]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	613b      	str	r3, [r7, #16]
 800c52a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	77fb      	strb	r3, [r7, #31]
 800c538:	e000      	b.n	800c53c <HAL_SPI_Transmit+0x25e>
  }

error:
 800c53a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2201      	movs	r2, #1
 800c540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c54c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3720      	adds	r7, #32
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
	...

0800c558 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	603b      	str	r3, [r7, #0]
 800c564:	4613      	mov	r3, r2
 800c566:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c568:	f7fc f934 	bl	80087d4 <HAL_GetTick>
 800c56c:	4602      	mov	r2, r0
 800c56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c570:	1a9b      	subs	r3, r3, r2
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	4413      	add	r3, r2
 800c576:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c578:	f7fc f92c 	bl	80087d4 <HAL_GetTick>
 800c57c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c57e:	4b39      	ldr	r3, [pc, #228]	; (800c664 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	015b      	lsls	r3, r3, #5
 800c584:	0d1b      	lsrs	r3, r3, #20
 800c586:	69fa      	ldr	r2, [r7, #28]
 800c588:	fb02 f303 	mul.w	r3, r2, r3
 800c58c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c58e:	e054      	b.n	800c63a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c596:	d050      	beq.n	800c63a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c598:	f7fc f91c 	bl	80087d4 <HAL_GetTick>
 800c59c:	4602      	mov	r2, r0
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	1ad3      	subs	r3, r2, r3
 800c5a2:	69fa      	ldr	r2, [r7, #28]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d902      	bls.n	800c5ae <SPI_WaitFlagStateUntilTimeout+0x56>
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d13d      	bne.n	800c62a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	685a      	ldr	r2, [r3, #4]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c5bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5c6:	d111      	bne.n	800c5ec <SPI_WaitFlagStateUntilTimeout+0x94>
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5d0:	d004      	beq.n	800c5dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5da:	d107      	bne.n	800c5ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5f4:	d10f      	bne.n	800c616 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c614:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c626:	2303      	movs	r3, #3
 800c628:	e017      	b.n	800c65a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c630:	2300      	movs	r3, #0
 800c632:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	3b01      	subs	r3, #1
 800c638:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	689a      	ldr	r2, [r3, #8]
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	4013      	ands	r3, r2
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	429a      	cmp	r2, r3
 800c648:	bf0c      	ite	eq
 800c64a:	2301      	moveq	r3, #1
 800c64c:	2300      	movne	r3, #0
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	461a      	mov	r2, r3
 800c652:	79fb      	ldrb	r3, [r7, #7]
 800c654:	429a      	cmp	r2, r3
 800c656:	d19b      	bne.n	800c590 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3720      	adds	r7, #32
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	200001b4 	.word	0x200001b4

0800c668 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b088      	sub	sp, #32
 800c66c:	af02      	add	r7, sp, #8
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c674:	4b1b      	ldr	r3, [pc, #108]	; (800c6e4 <SPI_EndRxTxTransaction+0x7c>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a1b      	ldr	r2, [pc, #108]	; (800c6e8 <SPI_EndRxTxTransaction+0x80>)
 800c67a:	fba2 2303 	umull	r2, r3, r2, r3
 800c67e:	0d5b      	lsrs	r3, r3, #21
 800c680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c684:	fb02 f303 	mul.w	r3, r2, r3
 800c688:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c692:	d112      	bne.n	800c6ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	2200      	movs	r2, #0
 800c69c:	2180      	movs	r1, #128	; 0x80
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f7ff ff5a 	bl	800c558 <SPI_WaitFlagStateUntilTimeout>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d016      	beq.n	800c6d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ae:	f043 0220 	orr.w	r2, r3, #32
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	e00f      	b.n	800c6da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00a      	beq.n	800c6d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6d0:	2b80      	cmp	r3, #128	; 0x80
 800c6d2:	d0f2      	beq.n	800c6ba <SPI_EndRxTxTransaction+0x52>
 800c6d4:	e000      	b.n	800c6d8 <SPI_EndRxTxTransaction+0x70>
        break;
 800c6d6:	bf00      	nop
  }

  return HAL_OK;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3718      	adds	r7, #24
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	200001b4 	.word	0x200001b4
 800c6e8:	165e9f81 	.word	0x165e9f81

0800c6ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d101      	bne.n	800c6fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e041      	b.n	800c782 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	d106      	bne.n	800c718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7f8 f908 	bl	8004928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2202      	movs	r2, #2
 800c71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	3304      	adds	r3, #4
 800c728:	4619      	mov	r1, r3
 800c72a:	4610      	mov	r0, r2
 800c72c:	f000 fca8 	bl	800d080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
	...

0800c78c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d001      	beq.n	800c7a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e04e      	b.n	800c842 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68da      	ldr	r2, [r3, #12]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f042 0201 	orr.w	r2, r2, #1
 800c7ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a23      	ldr	r2, [pc, #140]	; (800c850 <HAL_TIM_Base_Start_IT+0xc4>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d022      	beq.n	800c80c <HAL_TIM_Base_Start_IT+0x80>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ce:	d01d      	beq.n	800c80c <HAL_TIM_Base_Start_IT+0x80>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a1f      	ldr	r2, [pc, #124]	; (800c854 <HAL_TIM_Base_Start_IT+0xc8>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d018      	beq.n	800c80c <HAL_TIM_Base_Start_IT+0x80>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a1e      	ldr	r2, [pc, #120]	; (800c858 <HAL_TIM_Base_Start_IT+0xcc>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d013      	beq.n	800c80c <HAL_TIM_Base_Start_IT+0x80>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a1c      	ldr	r2, [pc, #112]	; (800c85c <HAL_TIM_Base_Start_IT+0xd0>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d00e      	beq.n	800c80c <HAL_TIM_Base_Start_IT+0x80>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a1b      	ldr	r2, [pc, #108]	; (800c860 <HAL_TIM_Base_Start_IT+0xd4>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d009      	beq.n	800c80c <HAL_TIM_Base_Start_IT+0x80>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a19      	ldr	r2, [pc, #100]	; (800c864 <HAL_TIM_Base_Start_IT+0xd8>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d004      	beq.n	800c80c <HAL_TIM_Base_Start_IT+0x80>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a18      	ldr	r2, [pc, #96]	; (800c868 <HAL_TIM_Base_Start_IT+0xdc>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d111      	bne.n	800c830 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	f003 0307 	and.w	r3, r3, #7
 800c816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2b06      	cmp	r3, #6
 800c81c:	d010      	beq.n	800c840 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f042 0201 	orr.w	r2, r2, #1
 800c82c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c82e:	e007      	b.n	800c840 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f042 0201 	orr.w	r2, r2, #1
 800c83e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	40010000 	.word	0x40010000
 800c854:	40000400 	.word	0x40000400
 800c858:	40000800 	.word	0x40000800
 800c85c:	40000c00 	.word	0x40000c00
 800c860:	40010400 	.word	0x40010400
 800c864:	40014000 	.word	0x40014000
 800c868:	40001800 	.word	0x40001800

0800c86c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68da      	ldr	r2, [r3, #12]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f022 0201 	bic.w	r2, r2, #1
 800c882:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6a1a      	ldr	r2, [r3, #32]
 800c88a:	f241 1311 	movw	r3, #4369	; 0x1111
 800c88e:	4013      	ands	r3, r2
 800c890:	2b00      	cmp	r3, #0
 800c892:	d10f      	bne.n	800c8b4 <HAL_TIM_Base_Stop_IT+0x48>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	6a1a      	ldr	r2, [r3, #32]
 800c89a:	f240 4344 	movw	r3, #1092	; 0x444
 800c89e:	4013      	ands	r3, r2
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d107      	bne.n	800c8b4 <HAL_TIM_Base_Stop_IT+0x48>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f022 0201 	bic.w	r2, r2, #1
 800c8b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	370c      	adds	r7, #12
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b082      	sub	sp, #8
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d101      	bne.n	800c8dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	e041      	b.n	800c960 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d106      	bne.n	800c8f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 f839 	bl	800c968 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2202      	movs	r2, #2
 800c8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	3304      	adds	r3, #4
 800c906:	4619      	mov	r1, r3
 800c908:	4610      	mov	r0, r2
 800c90a:	f000 fbb9 	bl	800d080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2201      	movs	r2, #1
 800c912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2201      	movs	r2, #1
 800c91a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2201      	movs	r2, #1
 800c92a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2201      	movs	r2, #1
 800c932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2201      	movs	r2, #1
 800c93a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2201      	movs	r2, #1
 800c942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2201      	movs	r2, #1
 800c94a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2201      	movs	r2, #1
 800c952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2201      	movs	r2, #1
 800c95a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c970:	bf00      	nop
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d109      	bne.n	800c9a0 <HAL_TIM_PWM_Start+0x24>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c992:	b2db      	uxtb	r3, r3
 800c994:	2b01      	cmp	r3, #1
 800c996:	bf14      	ite	ne
 800c998:	2301      	movne	r3, #1
 800c99a:	2300      	moveq	r3, #0
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	e022      	b.n	800c9e6 <HAL_TIM_PWM_Start+0x6a>
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	2b04      	cmp	r3, #4
 800c9a4:	d109      	bne.n	800c9ba <HAL_TIM_PWM_Start+0x3e>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	bf14      	ite	ne
 800c9b2:	2301      	movne	r3, #1
 800c9b4:	2300      	moveq	r3, #0
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	e015      	b.n	800c9e6 <HAL_TIM_PWM_Start+0x6a>
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	2b08      	cmp	r3, #8
 800c9be:	d109      	bne.n	800c9d4 <HAL_TIM_PWM_Start+0x58>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	bf14      	ite	ne
 800c9cc:	2301      	movne	r3, #1
 800c9ce:	2300      	moveq	r3, #0
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	e008      	b.n	800c9e6 <HAL_TIM_PWM_Start+0x6a>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	bf14      	ite	ne
 800c9e0:	2301      	movne	r3, #1
 800c9e2:	2300      	moveq	r3, #0
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d001      	beq.n	800c9ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e07c      	b.n	800cae8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d104      	bne.n	800c9fe <HAL_TIM_PWM_Start+0x82>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2202      	movs	r2, #2
 800c9f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9fc:	e013      	b.n	800ca26 <HAL_TIM_PWM_Start+0xaa>
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	2b04      	cmp	r3, #4
 800ca02:	d104      	bne.n	800ca0e <HAL_TIM_PWM_Start+0x92>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2202      	movs	r2, #2
 800ca08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca0c:	e00b      	b.n	800ca26 <HAL_TIM_PWM_Start+0xaa>
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2b08      	cmp	r3, #8
 800ca12:	d104      	bne.n	800ca1e <HAL_TIM_PWM_Start+0xa2>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2202      	movs	r2, #2
 800ca18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca1c:	e003      	b.n	800ca26 <HAL_TIM_PWM_Start+0xaa>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2202      	movs	r2, #2
 800ca22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fe10 	bl	800d654 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a2d      	ldr	r2, [pc, #180]	; (800caf0 <HAL_TIM_PWM_Start+0x174>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d004      	beq.n	800ca48 <HAL_TIM_PWM_Start+0xcc>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a2c      	ldr	r2, [pc, #176]	; (800caf4 <HAL_TIM_PWM_Start+0x178>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d101      	bne.n	800ca4c <HAL_TIM_PWM_Start+0xd0>
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e000      	b.n	800ca4e <HAL_TIM_PWM_Start+0xd2>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d007      	beq.n	800ca62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a22      	ldr	r2, [pc, #136]	; (800caf0 <HAL_TIM_PWM_Start+0x174>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d022      	beq.n	800cab2 <HAL_TIM_PWM_Start+0x136>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca74:	d01d      	beq.n	800cab2 <HAL_TIM_PWM_Start+0x136>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a1f      	ldr	r2, [pc, #124]	; (800caf8 <HAL_TIM_PWM_Start+0x17c>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d018      	beq.n	800cab2 <HAL_TIM_PWM_Start+0x136>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a1d      	ldr	r2, [pc, #116]	; (800cafc <HAL_TIM_PWM_Start+0x180>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d013      	beq.n	800cab2 <HAL_TIM_PWM_Start+0x136>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a1c      	ldr	r2, [pc, #112]	; (800cb00 <HAL_TIM_PWM_Start+0x184>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d00e      	beq.n	800cab2 <HAL_TIM_PWM_Start+0x136>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a16      	ldr	r2, [pc, #88]	; (800caf4 <HAL_TIM_PWM_Start+0x178>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d009      	beq.n	800cab2 <HAL_TIM_PWM_Start+0x136>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a18      	ldr	r2, [pc, #96]	; (800cb04 <HAL_TIM_PWM_Start+0x188>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d004      	beq.n	800cab2 <HAL_TIM_PWM_Start+0x136>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a16      	ldr	r2, [pc, #88]	; (800cb08 <HAL_TIM_PWM_Start+0x18c>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d111      	bne.n	800cad6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	f003 0307 	and.w	r3, r3, #7
 800cabc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2b06      	cmp	r3, #6
 800cac2:	d010      	beq.n	800cae6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f042 0201 	orr.w	r2, r2, #1
 800cad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cad4:	e007      	b.n	800cae6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f042 0201 	orr.w	r2, r2, #1
 800cae4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cae6:	2300      	movs	r3, #0
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3710      	adds	r7, #16
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	40010000 	.word	0x40010000
 800caf4:	40010400 	.word	0x40010400
 800caf8:	40000400 	.word	0x40000400
 800cafc:	40000800 	.word	0x40000800
 800cb00:	40000c00 	.word	0x40000c00
 800cb04:	40014000 	.word	0x40014000
 800cb08:	40001800 	.word	0x40001800

0800cb0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	f003 0302 	and.w	r3, r3, #2
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d122      	bne.n	800cb68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	f003 0302 	and.w	r3, r3, #2
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	d11b      	bne.n	800cb68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f06f 0202 	mvn.w	r2, #2
 800cb38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	699b      	ldr	r3, [r3, #24]
 800cb46:	f003 0303 	and.w	r3, r3, #3
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d003      	beq.n	800cb56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fa77 	bl	800d042 <HAL_TIM_IC_CaptureCallback>
 800cb54:	e005      	b.n	800cb62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fa69 	bl	800d02e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 fa7a 	bl	800d056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	f003 0304 	and.w	r3, r3, #4
 800cb72:	2b04      	cmp	r3, #4
 800cb74:	d122      	bne.n	800cbbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	f003 0304 	and.w	r3, r3, #4
 800cb80:	2b04      	cmp	r3, #4
 800cb82:	d11b      	bne.n	800cbbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f06f 0204 	mvn.w	r2, #4
 800cb8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2202      	movs	r2, #2
 800cb92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d003      	beq.n	800cbaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 fa4d 	bl	800d042 <HAL_TIM_IC_CaptureCallback>
 800cba8:	e005      	b.n	800cbb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 fa3f 	bl	800d02e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 fa50 	bl	800d056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	f003 0308 	and.w	r3, r3, #8
 800cbc6:	2b08      	cmp	r3, #8
 800cbc8:	d122      	bne.n	800cc10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	f003 0308 	and.w	r3, r3, #8
 800cbd4:	2b08      	cmp	r3, #8
 800cbd6:	d11b      	bne.n	800cc10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f06f 0208 	mvn.w	r2, #8
 800cbe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2204      	movs	r2, #4
 800cbe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	69db      	ldr	r3, [r3, #28]
 800cbee:	f003 0303 	and.w	r3, r3, #3
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d003      	beq.n	800cbfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 fa23 	bl	800d042 <HAL_TIM_IC_CaptureCallback>
 800cbfc:	e005      	b.n	800cc0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 fa15 	bl	800d02e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 fa26 	bl	800d056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	f003 0310 	and.w	r3, r3, #16
 800cc1a:	2b10      	cmp	r3, #16
 800cc1c:	d122      	bne.n	800cc64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	f003 0310 	and.w	r3, r3, #16
 800cc28:	2b10      	cmp	r3, #16
 800cc2a:	d11b      	bne.n	800cc64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f06f 0210 	mvn.w	r2, #16
 800cc34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2208      	movs	r2, #8
 800cc3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	69db      	ldr	r3, [r3, #28]
 800cc42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d003      	beq.n	800cc52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f9f9 	bl	800d042 <HAL_TIM_IC_CaptureCallback>
 800cc50:	e005      	b.n	800cc5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 f9eb 	bl	800d02e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 f9fc 	bl	800d056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	f003 0301 	and.w	r3, r3, #1
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d10e      	bne.n	800cc90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	f003 0301 	and.w	r3, r3, #1
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d107      	bne.n	800cc90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f06f 0201 	mvn.w	r2, #1
 800cc88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7f7 f94e 	bl	8003f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc9a:	2b80      	cmp	r3, #128	; 0x80
 800cc9c:	d10e      	bne.n	800ccbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cca8:	2b80      	cmp	r3, #128	; 0x80
 800ccaa:	d107      	bne.n	800ccbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ccb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 fdca 	bl	800d850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc6:	2b40      	cmp	r3, #64	; 0x40
 800ccc8:	d10e      	bne.n	800cce8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccd4:	2b40      	cmp	r3, #64	; 0x40
 800ccd6:	d107      	bne.n	800cce8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 f9c1 	bl	800d06a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	f003 0320 	and.w	r3, r3, #32
 800ccf2:	2b20      	cmp	r3, #32
 800ccf4:	d10e      	bne.n	800cd14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	f003 0320 	and.w	r3, r3, #32
 800cd00:	2b20      	cmp	r3, #32
 800cd02:	d107      	bne.n	800cd14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f06f 0220 	mvn.w	r2, #32
 800cd0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fd94 	bl	800d83c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd14:	bf00      	nop
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d101      	bne.n	800cd3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cd36:	2302      	movs	r3, #2
 800cd38:	e0ae      	b.n	800ce98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2b0c      	cmp	r3, #12
 800cd46:	f200 809f 	bhi.w	800ce88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800cd4a:	a201      	add	r2, pc, #4	; (adr r2, 800cd50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cd4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd50:	0800cd85 	.word	0x0800cd85
 800cd54:	0800ce89 	.word	0x0800ce89
 800cd58:	0800ce89 	.word	0x0800ce89
 800cd5c:	0800ce89 	.word	0x0800ce89
 800cd60:	0800cdc5 	.word	0x0800cdc5
 800cd64:	0800ce89 	.word	0x0800ce89
 800cd68:	0800ce89 	.word	0x0800ce89
 800cd6c:	0800ce89 	.word	0x0800ce89
 800cd70:	0800ce07 	.word	0x0800ce07
 800cd74:	0800ce89 	.word	0x0800ce89
 800cd78:	0800ce89 	.word	0x0800ce89
 800cd7c:	0800ce89 	.word	0x0800ce89
 800cd80:	0800ce47 	.word	0x0800ce47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68b9      	ldr	r1, [r7, #8]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f000 fa18 	bl	800d1c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	699a      	ldr	r2, [r3, #24]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f042 0208 	orr.w	r2, r2, #8
 800cd9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	699a      	ldr	r2, [r3, #24]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f022 0204 	bic.w	r2, r2, #4
 800cdae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6999      	ldr	r1, [r3, #24]
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	691a      	ldr	r2, [r3, #16]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	430a      	orrs	r2, r1
 800cdc0:	619a      	str	r2, [r3, #24]
      break;
 800cdc2:	e064      	b.n	800ce8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68b9      	ldr	r1, [r7, #8]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f000 fa68 	bl	800d2a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	699a      	ldr	r2, [r3, #24]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	699a      	ldr	r2, [r3, #24]
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	6999      	ldr	r1, [r3, #24]
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	691b      	ldr	r3, [r3, #16]
 800cdfa:	021a      	lsls	r2, r3, #8
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	430a      	orrs	r2, r1
 800ce02:	619a      	str	r2, [r3, #24]
      break;
 800ce04:	e043      	b.n	800ce8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	68b9      	ldr	r1, [r7, #8]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 fabd 	bl	800d38c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	69da      	ldr	r2, [r3, #28]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f042 0208 	orr.w	r2, r2, #8
 800ce20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	69da      	ldr	r2, [r3, #28]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f022 0204 	bic.w	r2, r2, #4
 800ce30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	69d9      	ldr	r1, [r3, #28]
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	691a      	ldr	r2, [r3, #16]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	430a      	orrs	r2, r1
 800ce42:	61da      	str	r2, [r3, #28]
      break;
 800ce44:	e023      	b.n	800ce8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68b9      	ldr	r1, [r7, #8]
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f000 fb11 	bl	800d474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	69da      	ldr	r2, [r3, #28]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	69da      	ldr	r2, [r3, #28]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	69d9      	ldr	r1, [r3, #28]
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	691b      	ldr	r3, [r3, #16]
 800ce7c:	021a      	lsls	r2, r3, #8
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	430a      	orrs	r2, r1
 800ce84:	61da      	str	r2, [r3, #28]
      break;
 800ce86:	e002      	b.n	800ce8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	75fb      	strb	r3, [r7, #23]
      break;
 800ce8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2200      	movs	r2, #0
 800ce92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ce96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3718      	adds	r7, #24
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d101      	bne.n	800cebc <HAL_TIM_ConfigClockSource+0x1c>
 800ceb8:	2302      	movs	r3, #2
 800ceba:	e0b4      	b.n	800d026 <HAL_TIM_ConfigClockSource+0x186>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2202      	movs	r2, #2
 800cec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ceda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	68ba      	ldr	r2, [r7, #8]
 800ceea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cef4:	d03e      	beq.n	800cf74 <HAL_TIM_ConfigClockSource+0xd4>
 800cef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cefa:	f200 8087 	bhi.w	800d00c <HAL_TIM_ConfigClockSource+0x16c>
 800cefe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf02:	f000 8086 	beq.w	800d012 <HAL_TIM_ConfigClockSource+0x172>
 800cf06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf0a:	d87f      	bhi.n	800d00c <HAL_TIM_ConfigClockSource+0x16c>
 800cf0c:	2b70      	cmp	r3, #112	; 0x70
 800cf0e:	d01a      	beq.n	800cf46 <HAL_TIM_ConfigClockSource+0xa6>
 800cf10:	2b70      	cmp	r3, #112	; 0x70
 800cf12:	d87b      	bhi.n	800d00c <HAL_TIM_ConfigClockSource+0x16c>
 800cf14:	2b60      	cmp	r3, #96	; 0x60
 800cf16:	d050      	beq.n	800cfba <HAL_TIM_ConfigClockSource+0x11a>
 800cf18:	2b60      	cmp	r3, #96	; 0x60
 800cf1a:	d877      	bhi.n	800d00c <HAL_TIM_ConfigClockSource+0x16c>
 800cf1c:	2b50      	cmp	r3, #80	; 0x50
 800cf1e:	d03c      	beq.n	800cf9a <HAL_TIM_ConfigClockSource+0xfa>
 800cf20:	2b50      	cmp	r3, #80	; 0x50
 800cf22:	d873      	bhi.n	800d00c <HAL_TIM_ConfigClockSource+0x16c>
 800cf24:	2b40      	cmp	r3, #64	; 0x40
 800cf26:	d058      	beq.n	800cfda <HAL_TIM_ConfigClockSource+0x13a>
 800cf28:	2b40      	cmp	r3, #64	; 0x40
 800cf2a:	d86f      	bhi.n	800d00c <HAL_TIM_ConfigClockSource+0x16c>
 800cf2c:	2b30      	cmp	r3, #48	; 0x30
 800cf2e:	d064      	beq.n	800cffa <HAL_TIM_ConfigClockSource+0x15a>
 800cf30:	2b30      	cmp	r3, #48	; 0x30
 800cf32:	d86b      	bhi.n	800d00c <HAL_TIM_ConfigClockSource+0x16c>
 800cf34:	2b20      	cmp	r3, #32
 800cf36:	d060      	beq.n	800cffa <HAL_TIM_ConfigClockSource+0x15a>
 800cf38:	2b20      	cmp	r3, #32
 800cf3a:	d867      	bhi.n	800d00c <HAL_TIM_ConfigClockSource+0x16c>
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d05c      	beq.n	800cffa <HAL_TIM_ConfigClockSource+0x15a>
 800cf40:	2b10      	cmp	r3, #16
 800cf42:	d05a      	beq.n	800cffa <HAL_TIM_ConfigClockSource+0x15a>
 800cf44:	e062      	b.n	800d00c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6818      	ldr	r0, [r3, #0]
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	6899      	ldr	r1, [r3, #8]
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	685a      	ldr	r2, [r3, #4]
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	f000 fb5d 	bl	800d614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cf68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	609a      	str	r2, [r3, #8]
      break;
 800cf72:	e04f      	b.n	800d014 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6818      	ldr	r0, [r3, #0]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	6899      	ldr	r1, [r3, #8]
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	685a      	ldr	r2, [r3, #4]
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	f000 fb46 	bl	800d614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	689a      	ldr	r2, [r3, #8]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf96:	609a      	str	r2, [r3, #8]
      break;
 800cf98:	e03c      	b.n	800d014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6818      	ldr	r0, [r3, #0]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	6859      	ldr	r1, [r3, #4]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	f000 faba 	bl	800d520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2150      	movs	r1, #80	; 0x50
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f000 fb13 	bl	800d5de <TIM_ITRx_SetConfig>
      break;
 800cfb8:	e02c      	b.n	800d014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6818      	ldr	r0, [r3, #0]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	6859      	ldr	r1, [r3, #4]
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	f000 fad9 	bl	800d57e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2160      	movs	r1, #96	; 0x60
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f000 fb03 	bl	800d5de <TIM_ITRx_SetConfig>
      break;
 800cfd8:	e01c      	b.n	800d014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6818      	ldr	r0, [r3, #0]
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	6859      	ldr	r1, [r3, #4]
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	f000 fa9a 	bl	800d520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2140      	movs	r1, #64	; 0x40
 800cff2:	4618      	mov	r0, r3
 800cff4:	f000 faf3 	bl	800d5de <TIM_ITRx_SetConfig>
      break;
 800cff8:	e00c      	b.n	800d014 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4619      	mov	r1, r3
 800d004:	4610      	mov	r0, r2
 800d006:	f000 faea 	bl	800d5de <TIM_ITRx_SetConfig>
      break;
 800d00a:	e003      	b.n	800d014 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d00c:	2301      	movs	r3, #1
 800d00e:	73fb      	strb	r3, [r7, #15]
      break;
 800d010:	e000      	b.n	800d014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d024:	7bfb      	ldrb	r3, [r7, #15]
}
 800d026:	4618      	mov	r0, r3
 800d028:	3710      	adds	r7, #16
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d02e:	b480      	push	{r7}
 800d030:	b083      	sub	sp, #12
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d036:	bf00      	nop
 800d038:	370c      	adds	r7, #12
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr

0800d042 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d042:	b480      	push	{r7}
 800d044:	b083      	sub	sp, #12
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d04a:	bf00      	nop
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr

0800d056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d056:	b480      	push	{r7}
 800d058:	b083      	sub	sp, #12
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d05e:	bf00      	nop
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d06a:	b480      	push	{r7}
 800d06c:	b083      	sub	sp, #12
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d072:	bf00      	nop
 800d074:	370c      	adds	r7, #12
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
	...

0800d080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a40      	ldr	r2, [pc, #256]	; (800d194 <TIM_Base_SetConfig+0x114>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d013      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d09e:	d00f      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a3d      	ldr	r2, [pc, #244]	; (800d198 <TIM_Base_SetConfig+0x118>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d00b      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a3c      	ldr	r2, [pc, #240]	; (800d19c <TIM_Base_SetConfig+0x11c>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d007      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a3b      	ldr	r2, [pc, #236]	; (800d1a0 <TIM_Base_SetConfig+0x120>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d003      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a3a      	ldr	r2, [pc, #232]	; (800d1a4 <TIM_Base_SetConfig+0x124>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d108      	bne.n	800d0d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4a2f      	ldr	r2, [pc, #188]	; (800d194 <TIM_Base_SetConfig+0x114>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d02b      	beq.n	800d132 <TIM_Base_SetConfig+0xb2>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0e0:	d027      	beq.n	800d132 <TIM_Base_SetConfig+0xb2>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a2c      	ldr	r2, [pc, #176]	; (800d198 <TIM_Base_SetConfig+0x118>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d023      	beq.n	800d132 <TIM_Base_SetConfig+0xb2>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a2b      	ldr	r2, [pc, #172]	; (800d19c <TIM_Base_SetConfig+0x11c>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d01f      	beq.n	800d132 <TIM_Base_SetConfig+0xb2>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a2a      	ldr	r2, [pc, #168]	; (800d1a0 <TIM_Base_SetConfig+0x120>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d01b      	beq.n	800d132 <TIM_Base_SetConfig+0xb2>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a29      	ldr	r2, [pc, #164]	; (800d1a4 <TIM_Base_SetConfig+0x124>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d017      	beq.n	800d132 <TIM_Base_SetConfig+0xb2>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a28      	ldr	r2, [pc, #160]	; (800d1a8 <TIM_Base_SetConfig+0x128>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d013      	beq.n	800d132 <TIM_Base_SetConfig+0xb2>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a27      	ldr	r2, [pc, #156]	; (800d1ac <TIM_Base_SetConfig+0x12c>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d00f      	beq.n	800d132 <TIM_Base_SetConfig+0xb2>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a26      	ldr	r2, [pc, #152]	; (800d1b0 <TIM_Base_SetConfig+0x130>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d00b      	beq.n	800d132 <TIM_Base_SetConfig+0xb2>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4a25      	ldr	r2, [pc, #148]	; (800d1b4 <TIM_Base_SetConfig+0x134>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d007      	beq.n	800d132 <TIM_Base_SetConfig+0xb2>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4a24      	ldr	r2, [pc, #144]	; (800d1b8 <TIM_Base_SetConfig+0x138>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d003      	beq.n	800d132 <TIM_Base_SetConfig+0xb2>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4a23      	ldr	r2, [pc, #140]	; (800d1bc <TIM_Base_SetConfig+0x13c>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d108      	bne.n	800d144 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	4313      	orrs	r3, r2
 800d142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	695b      	ldr	r3, [r3, #20]
 800d14e:	4313      	orrs	r3, r2
 800d150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	689a      	ldr	r2, [r3, #8]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4a0a      	ldr	r2, [pc, #40]	; (800d194 <TIM_Base_SetConfig+0x114>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d003      	beq.n	800d178 <TIM_Base_SetConfig+0xf8>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4a0c      	ldr	r2, [pc, #48]	; (800d1a4 <TIM_Base_SetConfig+0x124>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d103      	bne.n	800d180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	691a      	ldr	r2, [r3, #16]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	615a      	str	r2, [r3, #20]
}
 800d186:	bf00      	nop
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	40010000 	.word	0x40010000
 800d198:	40000400 	.word	0x40000400
 800d19c:	40000800 	.word	0x40000800
 800d1a0:	40000c00 	.word	0x40000c00
 800d1a4:	40010400 	.word	0x40010400
 800d1a8:	40014000 	.word	0x40014000
 800d1ac:	40014400 	.word	0x40014400
 800d1b0:	40014800 	.word	0x40014800
 800d1b4:	40001800 	.word	0x40001800
 800d1b8:	40001c00 	.word	0x40001c00
 800d1bc:	40002000 	.word	0x40002000

0800d1c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b087      	sub	sp, #28
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	f023 0201 	bic.w	r2, r3, #1
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6a1b      	ldr	r3, [r3, #32]
 800d1da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	699b      	ldr	r3, [r3, #24]
 800d1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f023 0303 	bic.w	r3, r3, #3
 800d1f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	4313      	orrs	r3, r2
 800d200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f023 0302 	bic.w	r3, r3, #2
 800d208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	4313      	orrs	r3, r2
 800d212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a20      	ldr	r2, [pc, #128]	; (800d298 <TIM_OC1_SetConfig+0xd8>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d003      	beq.n	800d224 <TIM_OC1_SetConfig+0x64>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a1f      	ldr	r2, [pc, #124]	; (800d29c <TIM_OC1_SetConfig+0xdc>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d10c      	bne.n	800d23e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	f023 0308 	bic.w	r3, r3, #8
 800d22a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	4313      	orrs	r3, r2
 800d234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	f023 0304 	bic.w	r3, r3, #4
 800d23c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4a15      	ldr	r2, [pc, #84]	; (800d298 <TIM_OC1_SetConfig+0xd8>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d003      	beq.n	800d24e <TIM_OC1_SetConfig+0x8e>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4a14      	ldr	r2, [pc, #80]	; (800d29c <TIM_OC1_SetConfig+0xdc>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d111      	bne.n	800d272 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d25c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	4313      	orrs	r3, r2
 800d266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	693a      	ldr	r2, [r7, #16]
 800d26e:	4313      	orrs	r3, r2
 800d270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	693a      	ldr	r2, [r7, #16]
 800d276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	68fa      	ldr	r2, [r7, #12]
 800d27c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	685a      	ldr	r2, [r3, #4]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	697a      	ldr	r2, [r7, #20]
 800d28a:	621a      	str	r2, [r3, #32]
}
 800d28c:	bf00      	nop
 800d28e:	371c      	adds	r7, #28
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr
 800d298:	40010000 	.word	0x40010000
 800d29c:	40010400 	.word	0x40010400

0800d2a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b087      	sub	sp, #28
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a1b      	ldr	r3, [r3, #32]
 800d2ae:	f023 0210 	bic.w	r2, r3, #16
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6a1b      	ldr	r3, [r3, #32]
 800d2ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	699b      	ldr	r3, [r3, #24]
 800d2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	021b      	lsls	r3, r3, #8
 800d2de:	68fa      	ldr	r2, [r7, #12]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	f023 0320 	bic.w	r3, r3, #32
 800d2ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	011b      	lsls	r3, r3, #4
 800d2f2:	697a      	ldr	r2, [r7, #20]
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4a22      	ldr	r2, [pc, #136]	; (800d384 <TIM_OC2_SetConfig+0xe4>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d003      	beq.n	800d308 <TIM_OC2_SetConfig+0x68>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4a21      	ldr	r2, [pc, #132]	; (800d388 <TIM_OC2_SetConfig+0xe8>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d10d      	bne.n	800d324 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d30e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	011b      	lsls	r3, r3, #4
 800d316:	697a      	ldr	r2, [r7, #20]
 800d318:	4313      	orrs	r3, r2
 800d31a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d322:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4a17      	ldr	r2, [pc, #92]	; (800d384 <TIM_OC2_SetConfig+0xe4>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d003      	beq.n	800d334 <TIM_OC2_SetConfig+0x94>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4a16      	ldr	r2, [pc, #88]	; (800d388 <TIM_OC2_SetConfig+0xe8>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d113      	bne.n	800d35c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d33a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	695b      	ldr	r3, [r3, #20]
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	693a      	ldr	r2, [r7, #16]
 800d34c:	4313      	orrs	r3, r2
 800d34e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	699b      	ldr	r3, [r3, #24]
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	693a      	ldr	r2, [r7, #16]
 800d358:	4313      	orrs	r3, r2
 800d35a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	68fa      	ldr	r2, [r7, #12]
 800d366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	685a      	ldr	r2, [r3, #4]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	697a      	ldr	r2, [r7, #20]
 800d374:	621a      	str	r2, [r3, #32]
}
 800d376:	bf00      	nop
 800d378:	371c      	adds	r7, #28
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	40010000 	.word	0x40010000
 800d388:	40010400 	.word	0x40010400

0800d38c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a1b      	ldr	r3, [r3, #32]
 800d39a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	69db      	ldr	r3, [r3, #28]
 800d3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f023 0303 	bic.w	r3, r3, #3
 800d3c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	021b      	lsls	r3, r3, #8
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4a21      	ldr	r2, [pc, #132]	; (800d46c <TIM_OC3_SetConfig+0xe0>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d003      	beq.n	800d3f2 <TIM_OC3_SetConfig+0x66>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4a20      	ldr	r2, [pc, #128]	; (800d470 <TIM_OC3_SetConfig+0xe4>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d10d      	bne.n	800d40e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	021b      	lsls	r3, r3, #8
 800d400:	697a      	ldr	r2, [r7, #20]
 800d402:	4313      	orrs	r3, r2
 800d404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d40c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4a16      	ldr	r2, [pc, #88]	; (800d46c <TIM_OC3_SetConfig+0xe0>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d003      	beq.n	800d41e <TIM_OC3_SetConfig+0x92>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	4a15      	ldr	r2, [pc, #84]	; (800d470 <TIM_OC3_SetConfig+0xe4>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d113      	bne.n	800d446 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d42c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	695b      	ldr	r3, [r3, #20]
 800d432:	011b      	lsls	r3, r3, #4
 800d434:	693a      	ldr	r2, [r7, #16]
 800d436:	4313      	orrs	r3, r2
 800d438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	699b      	ldr	r3, [r3, #24]
 800d43e:	011b      	lsls	r3, r3, #4
 800d440:	693a      	ldr	r2, [r7, #16]
 800d442:	4313      	orrs	r3, r2
 800d444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	693a      	ldr	r2, [r7, #16]
 800d44a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	685a      	ldr	r2, [r3, #4]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	697a      	ldr	r2, [r7, #20]
 800d45e:	621a      	str	r2, [r3, #32]
}
 800d460:	bf00      	nop
 800d462:	371c      	adds	r7, #28
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr
 800d46c:	40010000 	.word	0x40010000
 800d470:	40010400 	.word	0x40010400

0800d474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d474:	b480      	push	{r7}
 800d476:	b087      	sub	sp, #28
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6a1b      	ldr	r3, [r3, #32]
 800d482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6a1b      	ldr	r3, [r3, #32]
 800d48e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	69db      	ldr	r3, [r3, #28]
 800d49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	021b      	lsls	r3, r3, #8
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	031b      	lsls	r3, r3, #12
 800d4c6:	693a      	ldr	r2, [r7, #16]
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	4a12      	ldr	r2, [pc, #72]	; (800d518 <TIM_OC4_SetConfig+0xa4>)
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d003      	beq.n	800d4dc <TIM_OC4_SetConfig+0x68>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	4a11      	ldr	r2, [pc, #68]	; (800d51c <TIM_OC4_SetConfig+0xa8>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d109      	bne.n	800d4f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d4e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	695b      	ldr	r3, [r3, #20]
 800d4e8:	019b      	lsls	r3, r3, #6
 800d4ea:	697a      	ldr	r2, [r7, #20]
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	697a      	ldr	r2, [r7, #20]
 800d4f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	68fa      	ldr	r2, [r7, #12]
 800d4fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	685a      	ldr	r2, [r3, #4]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	621a      	str	r2, [r3, #32]
}
 800d50a:	bf00      	nop
 800d50c:	371c      	adds	r7, #28
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	40010000 	.word	0x40010000
 800d51c:	40010400 	.word	0x40010400

0800d520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d520:	b480      	push	{r7}
 800d522:	b087      	sub	sp, #28
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	6a1b      	ldr	r3, [r3, #32]
 800d530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	6a1b      	ldr	r3, [r3, #32]
 800d536:	f023 0201 	bic.w	r2, r3, #1
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	699b      	ldr	r3, [r3, #24]
 800d542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d54a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	011b      	lsls	r3, r3, #4
 800d550:	693a      	ldr	r2, [r7, #16]
 800d552:	4313      	orrs	r3, r2
 800d554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	f023 030a 	bic.w	r3, r3, #10
 800d55c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d55e:	697a      	ldr	r2, [r7, #20]
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	4313      	orrs	r3, r2
 800d564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	693a      	ldr	r2, [r7, #16]
 800d56a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	621a      	str	r2, [r3, #32]
}
 800d572:	bf00      	nop
 800d574:	371c      	adds	r7, #28
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d57e:	b480      	push	{r7}
 800d580:	b087      	sub	sp, #28
 800d582:	af00      	add	r7, sp, #0
 800d584:	60f8      	str	r0, [r7, #12]
 800d586:	60b9      	str	r1, [r7, #8]
 800d588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6a1b      	ldr	r3, [r3, #32]
 800d58e:	f023 0210 	bic.w	r2, r3, #16
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	699b      	ldr	r3, [r3, #24]
 800d59a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6a1b      	ldr	r3, [r3, #32]
 800d5a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d5a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	031b      	lsls	r3, r3, #12
 800d5ae:	697a      	ldr	r2, [r7, #20]
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d5ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	011b      	lsls	r3, r3, #4
 800d5c0:	693a      	ldr	r2, [r7, #16]
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	697a      	ldr	r2, [r7, #20]
 800d5ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	693a      	ldr	r2, [r7, #16]
 800d5d0:	621a      	str	r2, [r3, #32]
}
 800d5d2:	bf00      	nop
 800d5d4:	371c      	adds	r7, #28
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d5de:	b480      	push	{r7}
 800d5e0:	b085      	sub	sp, #20
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
 800d5e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	689b      	ldr	r3, [r3, #8]
 800d5ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d5f6:	683a      	ldr	r2, [r7, #0]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	f043 0307 	orr.w	r3, r3, #7
 800d600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	609a      	str	r2, [r3, #8]
}
 800d608:	bf00      	nop
 800d60a:	3714      	adds	r7, #20
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d614:	b480      	push	{r7}
 800d616:	b087      	sub	sp, #28
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d62e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	021a      	lsls	r2, r3, #8
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	431a      	orrs	r2, r3
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	4313      	orrs	r3, r2
 800d63c:	697a      	ldr	r2, [r7, #20]
 800d63e:	4313      	orrs	r3, r2
 800d640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	697a      	ldr	r2, [r7, #20]
 800d646:	609a      	str	r2, [r3, #8]
}
 800d648:	bf00      	nop
 800d64a:	371c      	adds	r7, #28
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d654:	b480      	push	{r7}
 800d656:	b087      	sub	sp, #28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	f003 031f 	and.w	r3, r3, #31
 800d666:	2201      	movs	r2, #1
 800d668:	fa02 f303 	lsl.w	r3, r2, r3
 800d66c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6a1a      	ldr	r2, [r3, #32]
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	43db      	mvns	r3, r3
 800d676:	401a      	ands	r2, r3
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6a1a      	ldr	r2, [r3, #32]
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	f003 031f 	and.w	r3, r3, #31
 800d686:	6879      	ldr	r1, [r7, #4]
 800d688:	fa01 f303 	lsl.w	r3, r1, r3
 800d68c:	431a      	orrs	r2, r3
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	621a      	str	r2, [r3, #32]
}
 800d692:	bf00      	nop
 800d694:	371c      	adds	r7, #28
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr
	...

0800d6a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d101      	bne.n	800d6b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	e05a      	b.n	800d76e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2202      	movs	r2, #2
 800d6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68fa      	ldr	r2, [r7, #12]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a21      	ldr	r2, [pc, #132]	; (800d77c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d022      	beq.n	800d742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d704:	d01d      	beq.n	800d742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a1d      	ldr	r2, [pc, #116]	; (800d780 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d018      	beq.n	800d742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a1b      	ldr	r2, [pc, #108]	; (800d784 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d013      	beq.n	800d742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a1a      	ldr	r2, [pc, #104]	; (800d788 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d00e      	beq.n	800d742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a18      	ldr	r2, [pc, #96]	; (800d78c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d009      	beq.n	800d742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a17      	ldr	r2, [pc, #92]	; (800d790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d004      	beq.n	800d742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a15      	ldr	r2, [pc, #84]	; (800d794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d10c      	bne.n	800d75c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	68ba      	ldr	r2, [r7, #8]
 800d750:	4313      	orrs	r3, r2
 800d752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2201      	movs	r2, #1
 800d760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3714      	adds	r7, #20
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr
 800d77a:	bf00      	nop
 800d77c:	40010000 	.word	0x40010000
 800d780:	40000400 	.word	0x40000400
 800d784:	40000800 	.word	0x40000800
 800d788:	40000c00 	.word	0x40000c00
 800d78c:	40010400 	.word	0x40010400
 800d790:	40014000 	.word	0x40014000
 800d794:	40001800 	.word	0x40001800

0800d798 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d101      	bne.n	800d7b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d7b0:	2302      	movs	r3, #2
 800d7b2:	e03d      	b.n	800d830 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	68db      	ldr	r3, [r3, #12]
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	689b      	ldr	r3, [r3, #8]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	691b      	ldr	r3, [r3, #16]
 800d7fe:	4313      	orrs	r3, r2
 800d800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	695b      	ldr	r3, [r3, #20]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	69db      	ldr	r3, [r3, #28]
 800d81a:	4313      	orrs	r3, r2
 800d81c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d82e:	2300      	movs	r3, #0
}
 800d830:	4618      	mov	r0, r3
 800d832:	3714      	adds	r7, #20
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr

0800d83c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b083      	sub	sp, #12
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d844:	bf00      	nop
 800d846:	370c      	adds	r7, #12
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d858:	bf00      	nop
 800d85a:	370c      	adds	r7, #12
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b082      	sub	sp, #8
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d101      	bne.n	800d876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d872:	2301      	movs	r3, #1
 800d874:	e03f      	b.n	800d8f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d106      	bne.n	800d890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7f7 f964 	bl	8004b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2224      	movs	r2, #36	; 0x24
 800d894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	68da      	ldr	r2, [r3, #12]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d8a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 fa9b 	bl	800dde4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	691a      	ldr	r2, [r3, #16]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d8bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	695a      	ldr	r2, [r3, #20]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d8cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	68da      	ldr	r2, [r3, #12]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d8dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2220      	movs	r2, #32
 800d8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2220      	movs	r2, #32
 800d8f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3708      	adds	r7, #8
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b084      	sub	sp, #16
 800d902:	af00      	add	r7, sp, #0
 800d904:	60f8      	str	r0, [r7, #12]
 800d906:	60b9      	str	r1, [r7, #8]
 800d908:	4613      	mov	r3, r2
 800d90a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b20      	cmp	r3, #32
 800d916:	d11d      	bne.n	800d954 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d002      	beq.n	800d924 <HAL_UART_Receive_DMA+0x26>
 800d91e:	88fb      	ldrh	r3, [r7, #6]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d101      	bne.n	800d928 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d924:	2301      	movs	r3, #1
 800d926:	e016      	b.n	800d956 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d101      	bne.n	800d936 <HAL_UART_Receive_DMA+0x38>
 800d932:	2302      	movs	r3, #2
 800d934:	e00f      	b.n	800d956 <HAL_UART_Receive_DMA+0x58>
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2201      	movs	r2, #1
 800d93a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2200      	movs	r2, #0
 800d942:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d944:	88fb      	ldrh	r3, [r7, #6]
 800d946:	461a      	mov	r2, r3
 800d948:	68b9      	ldr	r1, [r7, #8]
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f000 f920 	bl	800db90 <UART_Start_Receive_DMA>
 800d950:	4603      	mov	r3, r0
 800d952:	e000      	b.n	800d956 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800d954:	2302      	movs	r3, #2
  }
}
 800d956:	4618      	mov	r0, r3
 800d958:	3710      	adds	r7, #16
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d95e:	b480      	push	{r7}
 800d960:	b083      	sub	sp, #12
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d966:	bf00      	nop
 800d968:	370c      	adds	r7, #12
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d972:	b480      	push	{r7}
 800d974:	b083      	sub	sp, #12
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d97a:	bf00      	nop
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d986:	b480      	push	{r7}
 800d988:	b083      	sub	sp, #12
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
 800d98e:	460b      	mov	r3, r1
 800d990:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d992:	bf00      	nop
 800d994:	370c      	adds	r7, #12
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b09c      	sub	sp, #112	; 0x70
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d172      	bne.n	800daa0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d9ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9bc:	2200      	movs	r2, #0
 800d9be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	330c      	adds	r3, #12
 800d9c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9ca:	e853 3f00 	ldrex	r3, [r3]
 800d9ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d9d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d9d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	330c      	adds	r3, #12
 800d9de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d9e0:	65ba      	str	r2, [r7, #88]	; 0x58
 800d9e2:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d9e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d9e8:	e841 2300 	strex	r3, r2, [r1]
 800d9ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d9ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d1e5      	bne.n	800d9c0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	3314      	adds	r3, #20
 800d9fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fe:	e853 3f00 	ldrex	r3, [r3]
 800da02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da06:	f023 0301 	bic.w	r3, r3, #1
 800da0a:	667b      	str	r3, [r7, #100]	; 0x64
 800da0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3314      	adds	r3, #20
 800da12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da14:	647a      	str	r2, [r7, #68]	; 0x44
 800da16:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da1c:	e841 2300 	strex	r3, r2, [r1]
 800da20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1e5      	bne.n	800d9f4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	3314      	adds	r3, #20
 800da2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	e853 3f00 	ldrex	r3, [r3]
 800da36:	623b      	str	r3, [r7, #32]
   return(result);
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da3e:	663b      	str	r3, [r7, #96]	; 0x60
 800da40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	3314      	adds	r3, #20
 800da46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da48:	633a      	str	r2, [r7, #48]	; 0x30
 800da4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da50:	e841 2300 	strex	r3, r2, [r1]
 800da54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1e5      	bne.n	800da28 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800da5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da5e:	2220      	movs	r2, #32
 800da60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d119      	bne.n	800daa0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	330c      	adds	r3, #12
 800da72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	e853 3f00 	ldrex	r3, [r3]
 800da7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f023 0310 	bic.w	r3, r3, #16
 800da82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	330c      	adds	r3, #12
 800da8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da8c:	61fa      	str	r2, [r7, #28]
 800da8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da90:	69b9      	ldr	r1, [r7, #24]
 800da92:	69fa      	ldr	r2, [r7, #28]
 800da94:	e841 2300 	strex	r3, r2, [r1]
 800da98:	617b      	str	r3, [r7, #20]
   return(result);
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d1e5      	bne.n	800da6c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d106      	bne.n	800dab6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800daa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800daac:	4619      	mov	r1, r3
 800daae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dab0:	f7ff ff69 	bl	800d986 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dab4:	e002      	b.n	800dabc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800dab6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dab8:	f7f6 faa4 	bl	8004004 <HAL_UART_RxCpltCallback>
}
 800dabc:	bf00      	nop
 800dabe:	3770      	adds	r7, #112	; 0x70
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d108      	bne.n	800daec <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dade:	085b      	lsrs	r3, r3, #1
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	4619      	mov	r1, r3
 800dae4:	68f8      	ldr	r0, [r7, #12]
 800dae6:	f7ff ff4e 	bl	800d986 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800daea:	e002      	b.n	800daf2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f7ff ff36 	bl	800d95e <HAL_UART_RxHalfCpltCallback>
}
 800daf2:	bf00      	nop
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b084      	sub	sp, #16
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800db02:	2300      	movs	r3, #0
 800db04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	695b      	ldr	r3, [r3, #20]
 800db12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db16:	2b80      	cmp	r3, #128	; 0x80
 800db18:	bf0c      	ite	eq
 800db1a:	2301      	moveq	r3, #1
 800db1c:	2300      	movne	r3, #0
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	2b21      	cmp	r3, #33	; 0x21
 800db2c:	d108      	bne.n	800db40 <UART_DMAError+0x46>
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d005      	beq.n	800db40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2200      	movs	r2, #0
 800db38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800db3a:	68b8      	ldr	r0, [r7, #8]
 800db3c:	f000 f8c6 	bl	800dccc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	695b      	ldr	r3, [r3, #20]
 800db46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db4a:	2b40      	cmp	r3, #64	; 0x40
 800db4c:	bf0c      	ite	eq
 800db4e:	2301      	moveq	r3, #1
 800db50:	2300      	movne	r3, #0
 800db52:	b2db      	uxtb	r3, r3
 800db54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	2b22      	cmp	r3, #34	; 0x22
 800db60:	d108      	bne.n	800db74 <UART_DMAError+0x7a>
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d005      	beq.n	800db74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	2200      	movs	r2, #0
 800db6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800db6e:	68b8      	ldr	r0, [r7, #8]
 800db70:	f000 f8d4 	bl	800dd1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db78:	f043 0210 	orr.w	r2, r3, #16
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db80:	68b8      	ldr	r0, [r7, #8]
 800db82:	f7ff fef6 	bl	800d972 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db86:	bf00      	nop
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
	...

0800db90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b098      	sub	sp, #96	; 0x60
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	4613      	mov	r3, r2
 800db9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	88fa      	ldrh	r2, [r7, #6]
 800dba8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2200      	movs	r2, #0
 800dbae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2222      	movs	r2, #34	; 0x22
 800dbb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbbc:	4a40      	ldr	r2, [pc, #256]	; (800dcc0 <UART_Start_Receive_DMA+0x130>)
 800dbbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc4:	4a3f      	ldr	r2, [pc, #252]	; (800dcc4 <UART_Start_Receive_DMA+0x134>)
 800dbc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbcc:	4a3e      	ldr	r2, [pc, #248]	; (800dcc8 <UART_Start_Receive_DMA+0x138>)
 800dbce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800dbd8:	f107 0308 	add.w	r3, r7, #8
 800dbdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	3304      	adds	r3, #4
 800dbe8:	4619      	mov	r1, r3
 800dbea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	88fb      	ldrh	r3, [r7, #6]
 800dbf0:	f7fa ff31 	bl	8008a56 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	613b      	str	r3, [r7, #16]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	613b      	str	r3, [r7, #16]
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	613b      	str	r3, [r7, #16]
 800dc08:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	691b      	ldr	r3, [r3, #16]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d019      	beq.n	800dc4e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	330c      	adds	r3, #12
 800dc20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc24:	e853 3f00 	ldrex	r3, [r3]
 800dc28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc30:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	330c      	adds	r3, #12
 800dc38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc3a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800dc3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dc40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc42:	e841 2300 	strex	r3, r2, [r1]
 800dc46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dc48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d1e5      	bne.n	800dc1a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	3314      	adds	r3, #20
 800dc54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc58:	e853 3f00 	ldrex	r3, [r3]
 800dc5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc60:	f043 0301 	orr.w	r3, r3, #1
 800dc64:	657b      	str	r3, [r7, #84]	; 0x54
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3314      	adds	r3, #20
 800dc6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc6e:	63ba      	str	r2, [r7, #56]	; 0x38
 800dc70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc76:	e841 2300 	strex	r3, r2, [r1]
 800dc7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d1e5      	bne.n	800dc4e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	3314      	adds	r3, #20
 800dc88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	e853 3f00 	ldrex	r3, [r3]
 800dc90:	617b      	str	r3, [r7, #20]
   return(result);
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc98:	653b      	str	r3, [r7, #80]	; 0x50
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	3314      	adds	r3, #20
 800dca0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dca2:	627a      	str	r2, [r7, #36]	; 0x24
 800dca4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca6:	6a39      	ldr	r1, [r7, #32]
 800dca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcaa:	e841 2300 	strex	r3, r2, [r1]
 800dcae:	61fb      	str	r3, [r7, #28]
   return(result);
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1e5      	bne.n	800dc82 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800dcb6:	2300      	movs	r3, #0
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3760      	adds	r7, #96	; 0x60
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	0800d99f 	.word	0x0800d99f
 800dcc4:	0800dac5 	.word	0x0800dac5
 800dcc8:	0800dafb 	.word	0x0800dafb

0800dccc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b089      	sub	sp, #36	; 0x24
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	330c      	adds	r3, #12
 800dcda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	e853 3f00 	ldrex	r3, [r3]
 800dce2:	60bb      	str	r3, [r7, #8]
   return(result);
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dcea:	61fb      	str	r3, [r7, #28]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	330c      	adds	r3, #12
 800dcf2:	69fa      	ldr	r2, [r7, #28]
 800dcf4:	61ba      	str	r2, [r7, #24]
 800dcf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf8:	6979      	ldr	r1, [r7, #20]
 800dcfa:	69ba      	ldr	r2, [r7, #24]
 800dcfc:	e841 2300 	strex	r3, r2, [r1]
 800dd00:	613b      	str	r3, [r7, #16]
   return(result);
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d1e5      	bne.n	800dcd4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2220      	movs	r2, #32
 800dd0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800dd10:	bf00      	nop
 800dd12:	3724      	adds	r7, #36	; 0x24
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b095      	sub	sp, #84	; 0x54
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	330c      	adds	r3, #12
 800dd2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd2e:	e853 3f00 	ldrex	r3, [r3]
 800dd32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	330c      	adds	r3, #12
 800dd42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd44:	643a      	str	r2, [r7, #64]	; 0x40
 800dd46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dd4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd4c:	e841 2300 	strex	r3, r2, [r1]
 800dd50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d1e5      	bne.n	800dd24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	3314      	adds	r3, #20
 800dd5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd60:	6a3b      	ldr	r3, [r7, #32]
 800dd62:	e853 3f00 	ldrex	r3, [r3]
 800dd66:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	f023 0301 	bic.w	r3, r3, #1
 800dd6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	3314      	adds	r3, #20
 800dd76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd78:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd80:	e841 2300 	strex	r3, r2, [r1]
 800dd84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d1e5      	bne.n	800dd58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d119      	bne.n	800ddc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	330c      	adds	r3, #12
 800dd9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	e853 3f00 	ldrex	r3, [r3]
 800dda2:	60bb      	str	r3, [r7, #8]
   return(result);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	f023 0310 	bic.w	r3, r3, #16
 800ddaa:	647b      	str	r3, [r7, #68]	; 0x44
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	330c      	adds	r3, #12
 800ddb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ddb4:	61ba      	str	r2, [r7, #24]
 800ddb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb8:	6979      	ldr	r1, [r7, #20]
 800ddba:	69ba      	ldr	r2, [r7, #24]
 800ddbc:	e841 2300 	strex	r3, r2, [r1]
 800ddc0:	613b      	str	r3, [r7, #16]
   return(result);
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1e5      	bne.n	800dd94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2220      	movs	r2, #32
 800ddcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ddd6:	bf00      	nop
 800ddd8:	3754      	adds	r7, #84	; 0x54
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
	...

0800dde4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dde4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dde8:	b0c0      	sub	sp, #256	; 0x100
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ddf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	691b      	ldr	r3, [r3, #16]
 800ddf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ddfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de00:	68d9      	ldr	r1, [r3, #12]
 800de02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	ea40 0301 	orr.w	r3, r0, r1
 800de0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800de0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de12:	689a      	ldr	r2, [r3, #8]
 800de14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de18:	691b      	ldr	r3, [r3, #16]
 800de1a:	431a      	orrs	r2, r3
 800de1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de20:	695b      	ldr	r3, [r3, #20]
 800de22:	431a      	orrs	r2, r3
 800de24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de28:	69db      	ldr	r3, [r3, #28]
 800de2a:	4313      	orrs	r3, r2
 800de2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800de30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800de3c:	f021 010c 	bic.w	r1, r1, #12
 800de40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de44:	681a      	ldr	r2, [r3, #0]
 800de46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800de4a:	430b      	orrs	r3, r1
 800de4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800de4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	695b      	ldr	r3, [r3, #20]
 800de56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800de5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de5e:	6999      	ldr	r1, [r3, #24]
 800de60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	ea40 0301 	orr.w	r3, r0, r1
 800de6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800de6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	4b8f      	ldr	r3, [pc, #572]	; (800e0b0 <UART_SetConfig+0x2cc>)
 800de74:	429a      	cmp	r2, r3
 800de76:	d005      	beq.n	800de84 <UART_SetConfig+0xa0>
 800de78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	4b8d      	ldr	r3, [pc, #564]	; (800e0b4 <UART_SetConfig+0x2d0>)
 800de80:	429a      	cmp	r2, r3
 800de82:	d104      	bne.n	800de8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800de84:	f7fc fd48 	bl	800a918 <HAL_RCC_GetPCLK2Freq>
 800de88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800de8c:	e003      	b.n	800de96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800de8e:	f7fc fd2f 	bl	800a8f0 <HAL_RCC_GetPCLK1Freq>
 800de92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dea0:	f040 810c 	bne.w	800e0bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dea8:	2200      	movs	r2, #0
 800deaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800deae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800deb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800deb6:	4622      	mov	r2, r4
 800deb8:	462b      	mov	r3, r5
 800deba:	1891      	adds	r1, r2, r2
 800debc:	65b9      	str	r1, [r7, #88]	; 0x58
 800debe:	415b      	adcs	r3, r3
 800dec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dec6:	4621      	mov	r1, r4
 800dec8:	eb12 0801 	adds.w	r8, r2, r1
 800decc:	4629      	mov	r1, r5
 800dece:	eb43 0901 	adc.w	r9, r3, r1
 800ded2:	f04f 0200 	mov.w	r2, #0
 800ded6:	f04f 0300 	mov.w	r3, #0
 800deda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dee6:	4690      	mov	r8, r2
 800dee8:	4699      	mov	r9, r3
 800deea:	4623      	mov	r3, r4
 800deec:	eb18 0303 	adds.w	r3, r8, r3
 800def0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800def4:	462b      	mov	r3, r5
 800def6:	eb49 0303 	adc.w	r3, r9, r3
 800defa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800defe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800df0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800df0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800df12:	460b      	mov	r3, r1
 800df14:	18db      	adds	r3, r3, r3
 800df16:	653b      	str	r3, [r7, #80]	; 0x50
 800df18:	4613      	mov	r3, r2
 800df1a:	eb42 0303 	adc.w	r3, r2, r3
 800df1e:	657b      	str	r3, [r7, #84]	; 0x54
 800df20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800df24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800df28:	f7f2 fece 	bl	8000cc8 <__aeabi_uldivmod>
 800df2c:	4602      	mov	r2, r0
 800df2e:	460b      	mov	r3, r1
 800df30:	4b61      	ldr	r3, [pc, #388]	; (800e0b8 <UART_SetConfig+0x2d4>)
 800df32:	fba3 2302 	umull	r2, r3, r3, r2
 800df36:	095b      	lsrs	r3, r3, #5
 800df38:	011c      	lsls	r4, r3, #4
 800df3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800df3e:	2200      	movs	r2, #0
 800df40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800df44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800df48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800df4c:	4642      	mov	r2, r8
 800df4e:	464b      	mov	r3, r9
 800df50:	1891      	adds	r1, r2, r2
 800df52:	64b9      	str	r1, [r7, #72]	; 0x48
 800df54:	415b      	adcs	r3, r3
 800df56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800df5c:	4641      	mov	r1, r8
 800df5e:	eb12 0a01 	adds.w	sl, r2, r1
 800df62:	4649      	mov	r1, r9
 800df64:	eb43 0b01 	adc.w	fp, r3, r1
 800df68:	f04f 0200 	mov.w	r2, #0
 800df6c:	f04f 0300 	mov.w	r3, #0
 800df70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800df74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800df78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800df7c:	4692      	mov	sl, r2
 800df7e:	469b      	mov	fp, r3
 800df80:	4643      	mov	r3, r8
 800df82:	eb1a 0303 	adds.w	r3, sl, r3
 800df86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800df8a:	464b      	mov	r3, r9
 800df8c:	eb4b 0303 	adc.w	r3, fp, r3
 800df90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800df94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dfa0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800dfa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	18db      	adds	r3, r3, r3
 800dfac:	643b      	str	r3, [r7, #64]	; 0x40
 800dfae:	4613      	mov	r3, r2
 800dfb0:	eb42 0303 	adc.w	r3, r2, r3
 800dfb4:	647b      	str	r3, [r7, #68]	; 0x44
 800dfb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dfba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800dfbe:	f7f2 fe83 	bl	8000cc8 <__aeabi_uldivmod>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	4611      	mov	r1, r2
 800dfc8:	4b3b      	ldr	r3, [pc, #236]	; (800e0b8 <UART_SetConfig+0x2d4>)
 800dfca:	fba3 2301 	umull	r2, r3, r3, r1
 800dfce:	095b      	lsrs	r3, r3, #5
 800dfd0:	2264      	movs	r2, #100	; 0x64
 800dfd2:	fb02 f303 	mul.w	r3, r2, r3
 800dfd6:	1acb      	subs	r3, r1, r3
 800dfd8:	00db      	lsls	r3, r3, #3
 800dfda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800dfde:	4b36      	ldr	r3, [pc, #216]	; (800e0b8 <UART_SetConfig+0x2d4>)
 800dfe0:	fba3 2302 	umull	r2, r3, r3, r2
 800dfe4:	095b      	lsrs	r3, r3, #5
 800dfe6:	005b      	lsls	r3, r3, #1
 800dfe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dfec:	441c      	add	r4, r3
 800dfee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dff2:	2200      	movs	r2, #0
 800dff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dff8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800dffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e000:	4642      	mov	r2, r8
 800e002:	464b      	mov	r3, r9
 800e004:	1891      	adds	r1, r2, r2
 800e006:	63b9      	str	r1, [r7, #56]	; 0x38
 800e008:	415b      	adcs	r3, r3
 800e00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e00c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e010:	4641      	mov	r1, r8
 800e012:	1851      	adds	r1, r2, r1
 800e014:	6339      	str	r1, [r7, #48]	; 0x30
 800e016:	4649      	mov	r1, r9
 800e018:	414b      	adcs	r3, r1
 800e01a:	637b      	str	r3, [r7, #52]	; 0x34
 800e01c:	f04f 0200 	mov.w	r2, #0
 800e020:	f04f 0300 	mov.w	r3, #0
 800e024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e028:	4659      	mov	r1, fp
 800e02a:	00cb      	lsls	r3, r1, #3
 800e02c:	4651      	mov	r1, sl
 800e02e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e032:	4651      	mov	r1, sl
 800e034:	00ca      	lsls	r2, r1, #3
 800e036:	4610      	mov	r0, r2
 800e038:	4619      	mov	r1, r3
 800e03a:	4603      	mov	r3, r0
 800e03c:	4642      	mov	r2, r8
 800e03e:	189b      	adds	r3, r3, r2
 800e040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e044:	464b      	mov	r3, r9
 800e046:	460a      	mov	r2, r1
 800e048:	eb42 0303 	adc.w	r3, r2, r3
 800e04c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	2200      	movs	r2, #0
 800e058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e05c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e064:	460b      	mov	r3, r1
 800e066:	18db      	adds	r3, r3, r3
 800e068:	62bb      	str	r3, [r7, #40]	; 0x28
 800e06a:	4613      	mov	r3, r2
 800e06c:	eb42 0303 	adc.w	r3, r2, r3
 800e070:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e07a:	f7f2 fe25 	bl	8000cc8 <__aeabi_uldivmod>
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	4b0d      	ldr	r3, [pc, #52]	; (800e0b8 <UART_SetConfig+0x2d4>)
 800e084:	fba3 1302 	umull	r1, r3, r3, r2
 800e088:	095b      	lsrs	r3, r3, #5
 800e08a:	2164      	movs	r1, #100	; 0x64
 800e08c:	fb01 f303 	mul.w	r3, r1, r3
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	00db      	lsls	r3, r3, #3
 800e094:	3332      	adds	r3, #50	; 0x32
 800e096:	4a08      	ldr	r2, [pc, #32]	; (800e0b8 <UART_SetConfig+0x2d4>)
 800e098:	fba2 2303 	umull	r2, r3, r2, r3
 800e09c:	095b      	lsrs	r3, r3, #5
 800e09e:	f003 0207 	and.w	r2, r3, #7
 800e0a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4422      	add	r2, r4
 800e0aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e0ac:	e105      	b.n	800e2ba <UART_SetConfig+0x4d6>
 800e0ae:	bf00      	nop
 800e0b0:	40011000 	.word	0x40011000
 800e0b4:	40011400 	.word	0x40011400
 800e0b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e0bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e0c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e0ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e0ce:	4642      	mov	r2, r8
 800e0d0:	464b      	mov	r3, r9
 800e0d2:	1891      	adds	r1, r2, r2
 800e0d4:	6239      	str	r1, [r7, #32]
 800e0d6:	415b      	adcs	r3, r3
 800e0d8:	627b      	str	r3, [r7, #36]	; 0x24
 800e0da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e0de:	4641      	mov	r1, r8
 800e0e0:	1854      	adds	r4, r2, r1
 800e0e2:	4649      	mov	r1, r9
 800e0e4:	eb43 0501 	adc.w	r5, r3, r1
 800e0e8:	f04f 0200 	mov.w	r2, #0
 800e0ec:	f04f 0300 	mov.w	r3, #0
 800e0f0:	00eb      	lsls	r3, r5, #3
 800e0f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e0f6:	00e2      	lsls	r2, r4, #3
 800e0f8:	4614      	mov	r4, r2
 800e0fa:	461d      	mov	r5, r3
 800e0fc:	4643      	mov	r3, r8
 800e0fe:	18e3      	adds	r3, r4, r3
 800e100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e104:	464b      	mov	r3, r9
 800e106:	eb45 0303 	adc.w	r3, r5, r3
 800e10a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e10e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	2200      	movs	r2, #0
 800e116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e11a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e11e:	f04f 0200 	mov.w	r2, #0
 800e122:	f04f 0300 	mov.w	r3, #0
 800e126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e12a:	4629      	mov	r1, r5
 800e12c:	008b      	lsls	r3, r1, #2
 800e12e:	4621      	mov	r1, r4
 800e130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e134:	4621      	mov	r1, r4
 800e136:	008a      	lsls	r2, r1, #2
 800e138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e13c:	f7f2 fdc4 	bl	8000cc8 <__aeabi_uldivmod>
 800e140:	4602      	mov	r2, r0
 800e142:	460b      	mov	r3, r1
 800e144:	4b60      	ldr	r3, [pc, #384]	; (800e2c8 <UART_SetConfig+0x4e4>)
 800e146:	fba3 2302 	umull	r2, r3, r3, r2
 800e14a:	095b      	lsrs	r3, r3, #5
 800e14c:	011c      	lsls	r4, r3, #4
 800e14e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e152:	2200      	movs	r2, #0
 800e154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e158:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e15c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e160:	4642      	mov	r2, r8
 800e162:	464b      	mov	r3, r9
 800e164:	1891      	adds	r1, r2, r2
 800e166:	61b9      	str	r1, [r7, #24]
 800e168:	415b      	adcs	r3, r3
 800e16a:	61fb      	str	r3, [r7, #28]
 800e16c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e170:	4641      	mov	r1, r8
 800e172:	1851      	adds	r1, r2, r1
 800e174:	6139      	str	r1, [r7, #16]
 800e176:	4649      	mov	r1, r9
 800e178:	414b      	adcs	r3, r1
 800e17a:	617b      	str	r3, [r7, #20]
 800e17c:	f04f 0200 	mov.w	r2, #0
 800e180:	f04f 0300 	mov.w	r3, #0
 800e184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e188:	4659      	mov	r1, fp
 800e18a:	00cb      	lsls	r3, r1, #3
 800e18c:	4651      	mov	r1, sl
 800e18e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e192:	4651      	mov	r1, sl
 800e194:	00ca      	lsls	r2, r1, #3
 800e196:	4610      	mov	r0, r2
 800e198:	4619      	mov	r1, r3
 800e19a:	4603      	mov	r3, r0
 800e19c:	4642      	mov	r2, r8
 800e19e:	189b      	adds	r3, r3, r2
 800e1a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e1a4:	464b      	mov	r3, r9
 800e1a6:	460a      	mov	r2, r1
 800e1a8:	eb42 0303 	adc.w	r3, r2, r3
 800e1ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800e1ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e1bc:	f04f 0200 	mov.w	r2, #0
 800e1c0:	f04f 0300 	mov.w	r3, #0
 800e1c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e1c8:	4649      	mov	r1, r9
 800e1ca:	008b      	lsls	r3, r1, #2
 800e1cc:	4641      	mov	r1, r8
 800e1ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e1d2:	4641      	mov	r1, r8
 800e1d4:	008a      	lsls	r2, r1, #2
 800e1d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e1da:	f7f2 fd75 	bl	8000cc8 <__aeabi_uldivmod>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	4b39      	ldr	r3, [pc, #228]	; (800e2c8 <UART_SetConfig+0x4e4>)
 800e1e4:	fba3 1302 	umull	r1, r3, r3, r2
 800e1e8:	095b      	lsrs	r3, r3, #5
 800e1ea:	2164      	movs	r1, #100	; 0x64
 800e1ec:	fb01 f303 	mul.w	r3, r1, r3
 800e1f0:	1ad3      	subs	r3, r2, r3
 800e1f2:	011b      	lsls	r3, r3, #4
 800e1f4:	3332      	adds	r3, #50	; 0x32
 800e1f6:	4a34      	ldr	r2, [pc, #208]	; (800e2c8 <UART_SetConfig+0x4e4>)
 800e1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800e1fc:	095b      	lsrs	r3, r3, #5
 800e1fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e202:	441c      	add	r4, r3
 800e204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e208:	2200      	movs	r2, #0
 800e20a:	673b      	str	r3, [r7, #112]	; 0x70
 800e20c:	677a      	str	r2, [r7, #116]	; 0x74
 800e20e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e212:	4642      	mov	r2, r8
 800e214:	464b      	mov	r3, r9
 800e216:	1891      	adds	r1, r2, r2
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	415b      	adcs	r3, r3
 800e21c:	60fb      	str	r3, [r7, #12]
 800e21e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e222:	4641      	mov	r1, r8
 800e224:	1851      	adds	r1, r2, r1
 800e226:	6039      	str	r1, [r7, #0]
 800e228:	4649      	mov	r1, r9
 800e22a:	414b      	adcs	r3, r1
 800e22c:	607b      	str	r3, [r7, #4]
 800e22e:	f04f 0200 	mov.w	r2, #0
 800e232:	f04f 0300 	mov.w	r3, #0
 800e236:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e23a:	4659      	mov	r1, fp
 800e23c:	00cb      	lsls	r3, r1, #3
 800e23e:	4651      	mov	r1, sl
 800e240:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e244:	4651      	mov	r1, sl
 800e246:	00ca      	lsls	r2, r1, #3
 800e248:	4610      	mov	r0, r2
 800e24a:	4619      	mov	r1, r3
 800e24c:	4603      	mov	r3, r0
 800e24e:	4642      	mov	r2, r8
 800e250:	189b      	adds	r3, r3, r2
 800e252:	66bb      	str	r3, [r7, #104]	; 0x68
 800e254:	464b      	mov	r3, r9
 800e256:	460a      	mov	r2, r1
 800e258:	eb42 0303 	adc.w	r3, r2, r3
 800e25c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e25e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	2200      	movs	r2, #0
 800e266:	663b      	str	r3, [r7, #96]	; 0x60
 800e268:	667a      	str	r2, [r7, #100]	; 0x64
 800e26a:	f04f 0200 	mov.w	r2, #0
 800e26e:	f04f 0300 	mov.w	r3, #0
 800e272:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e276:	4649      	mov	r1, r9
 800e278:	008b      	lsls	r3, r1, #2
 800e27a:	4641      	mov	r1, r8
 800e27c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e280:	4641      	mov	r1, r8
 800e282:	008a      	lsls	r2, r1, #2
 800e284:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e288:	f7f2 fd1e 	bl	8000cc8 <__aeabi_uldivmod>
 800e28c:	4602      	mov	r2, r0
 800e28e:	460b      	mov	r3, r1
 800e290:	4b0d      	ldr	r3, [pc, #52]	; (800e2c8 <UART_SetConfig+0x4e4>)
 800e292:	fba3 1302 	umull	r1, r3, r3, r2
 800e296:	095b      	lsrs	r3, r3, #5
 800e298:	2164      	movs	r1, #100	; 0x64
 800e29a:	fb01 f303 	mul.w	r3, r1, r3
 800e29e:	1ad3      	subs	r3, r2, r3
 800e2a0:	011b      	lsls	r3, r3, #4
 800e2a2:	3332      	adds	r3, #50	; 0x32
 800e2a4:	4a08      	ldr	r2, [pc, #32]	; (800e2c8 <UART_SetConfig+0x4e4>)
 800e2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800e2aa:	095b      	lsrs	r3, r3, #5
 800e2ac:	f003 020f 	and.w	r2, r3, #15
 800e2b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4422      	add	r2, r4
 800e2b8:	609a      	str	r2, [r3, #8]
}
 800e2ba:	bf00      	nop
 800e2bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e2c6:	bf00      	nop
 800e2c8:	51eb851f 	.word	0x51eb851f

0800e2cc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e2cc:	b084      	sub	sp, #16
 800e2ce:	b480      	push	{r7}
 800e2d0:	b085      	sub	sp, #20
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
 800e2d6:	f107 001c 	add.w	r0, r7, #28
 800e2da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e2e2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e2e4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e2e6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e2ea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e2ee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e2f2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e2f6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e2f8:	68fa      	ldr	r2, [r7, #12]
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e306:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	431a      	orrs	r2, r3
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e312:	2300      	movs	r3, #0
}
 800e314:	4618      	mov	r0, r3
 800e316:	3714      	adds	r7, #20
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	b004      	add	sp, #16
 800e320:	4770      	bx	lr

0800e322 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e322:	b480      	push	{r7}
 800e324:	b083      	sub	sp, #12
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e330:	4618      	mov	r0, r3
 800e332:	370c      	adds	r7, #12
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e33c:	b480      	push	{r7}
 800e33e:	b083      	sub	sp, #12
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e350:	2300      	movs	r3, #0
}
 800e352:	4618      	mov	r0, r3
 800e354:	370c      	adds	r7, #12
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr

0800e35e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e35e:	b480      	push	{r7}
 800e360:	b083      	sub	sp, #12
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2203      	movs	r2, #3
 800e36a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e36c:	2300      	movs	r3, #0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr

0800e37a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e37a:	b480      	push	{r7}
 800e37c:	b083      	sub	sp, #12
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f003 0303 	and.w	r3, r3, #3
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	370c      	adds	r7, #12
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr

0800e396 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e396:	b480      	push	{r7}
 800e398:	b085      	sub	sp, #20
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	6078      	str	r0, [r7, #4]
 800e39e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e3b4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e3ba:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e3c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	68db      	ldr	r3, [r3, #12]
 800e3cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e3d0:	f023 030f 	bic.w	r3, r3, #15
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	431a      	orrs	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3714      	adds	r7, #20
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr

0800e3ea <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e3ea:	b480      	push	{r7}
 800e3ec:	b083      	sub	sp, #12
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	691b      	ldr	r3, [r3, #16]
 800e3f6:	b2db      	uxtb	r3, r3
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e404:	b480      	push	{r7}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	3314      	adds	r3, #20
 800e412:	461a      	mov	r2, r3
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	4413      	add	r3, r2
 800e418:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
}  
 800e41e:	4618      	mov	r0, r3
 800e420:	3714      	adds	r7, #20
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr

0800e42a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e42a:	b480      	push	{r7}
 800e42c:	b085      	sub	sp, #20
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
 800e432:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e434:	2300      	movs	r3, #0
 800e436:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	685a      	ldr	r2, [r3, #4]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e450:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e456:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e45c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	4313      	orrs	r3, r2
 800e462:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e468:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	431a      	orrs	r2, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e474:	2300      	movs	r3, #0

}
 800e476:	4618      	mov	r0, r3
 800e478:	3714      	adds	r7, #20
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr

0800e482 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e482:	b580      	push	{r7, lr}
 800e484:	b088      	sub	sp, #32
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
 800e48a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e490:	2310      	movs	r3, #16
 800e492:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e494:	2340      	movs	r3, #64	; 0x40
 800e496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e498:	2300      	movs	r3, #0
 800e49a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e49c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4a2:	f107 0308 	add.w	r3, r7, #8
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f7ff ff74 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e4ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4b2:	2110      	movs	r1, #16
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 f9d7 	bl	800e868 <SDMMC_GetCmdResp1>
 800e4ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4bc:	69fb      	ldr	r3, [r7, #28]
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3720      	adds	r7, #32
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b088      	sub	sp, #32
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
 800e4ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e4d4:	2311      	movs	r3, #17
 800e4d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e4d8:	2340      	movs	r3, #64	; 0x40
 800e4da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4e6:	f107 0308 	add.w	r3, r7, #8
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f7ff ff52 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e4f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4f6:	2111      	movs	r1, #17
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 f9b5 	bl	800e868 <SDMMC_GetCmdResp1>
 800e4fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e500:	69fb      	ldr	r3, [r7, #28]
}
 800e502:	4618      	mov	r0, r3
 800e504:	3720      	adds	r7, #32
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b088      	sub	sp, #32
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e518:	2312      	movs	r3, #18
 800e51a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e51c:	2340      	movs	r3, #64	; 0x40
 800e51e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e520:	2300      	movs	r3, #0
 800e522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e528:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e52a:	f107 0308 	add.w	r3, r7, #8
 800e52e:	4619      	mov	r1, r3
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f7ff ff30 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e536:	f241 3288 	movw	r2, #5000	; 0x1388
 800e53a:	2112      	movs	r1, #18
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f000 f993 	bl	800e868 <SDMMC_GetCmdResp1>
 800e542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e544:	69fb      	ldr	r3, [r7, #28]
}
 800e546:	4618      	mov	r0, r3
 800e548:	3720      	adds	r7, #32
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}

0800e54e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e54e:	b580      	push	{r7, lr}
 800e550:	b088      	sub	sp, #32
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
 800e556:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e55c:	2318      	movs	r3, #24
 800e55e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e560:	2340      	movs	r3, #64	; 0x40
 800e562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e564:	2300      	movs	r3, #0
 800e566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e56c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e56e:	f107 0308 	add.w	r3, r7, #8
 800e572:	4619      	mov	r1, r3
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f7ff ff0e 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e57a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e57e:	2118      	movs	r1, #24
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 f971 	bl	800e868 <SDMMC_GetCmdResp1>
 800e586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e588:	69fb      	ldr	r3, [r7, #28]
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3720      	adds	r7, #32
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}

0800e592 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e592:	b580      	push	{r7, lr}
 800e594:	b088      	sub	sp, #32
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
 800e59a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e5a0:	2319      	movs	r3, #25
 800e5a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e5a4:	2340      	movs	r3, #64	; 0x40
 800e5a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e5ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e5b2:	f107 0308 	add.w	r3, r7, #8
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f7ff feec 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e5be:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5c2:	2119      	movs	r1, #25
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f000 f94f 	bl	800e868 <SDMMC_GetCmdResp1>
 800e5ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5cc:	69fb      	ldr	r3, [r7, #28]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3720      	adds	r7, #32
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
	...

0800e5d8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b088      	sub	sp, #32
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e5e4:	230c      	movs	r3, #12
 800e5e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e5e8:	2340      	movs	r3, #64	; 0x40
 800e5ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e5f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e5f6:	f107 0308 	add.w	r3, r7, #8
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7ff feca 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e602:	4a05      	ldr	r2, [pc, #20]	; (800e618 <SDMMC_CmdStopTransfer+0x40>)
 800e604:	210c      	movs	r1, #12
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 f92e 	bl	800e868 <SDMMC_GetCmdResp1>
 800e60c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e60e:	69fb      	ldr	r3, [r7, #28]
}
 800e610:	4618      	mov	r0, r3
 800e612:	3720      	adds	r7, #32
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	05f5e100 	.word	0x05f5e100

0800e61c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b08a      	sub	sp, #40	; 0x28
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e62c:	2307      	movs	r3, #7
 800e62e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e630:	2340      	movs	r3, #64	; 0x40
 800e632:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e634:	2300      	movs	r3, #0
 800e636:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e63c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e63e:	f107 0310 	add.w	r3, r7, #16
 800e642:	4619      	mov	r1, r3
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f7ff fea6 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e64a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e64e:	2107      	movs	r1, #7
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f000 f909 	bl	800e868 <SDMMC_GetCmdResp1>
 800e656:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3728      	adds	r7, #40	; 0x28
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e662:	b580      	push	{r7, lr}
 800e664:	b088      	sub	sp, #32
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e66a:	2300      	movs	r3, #0
 800e66c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e66e:	2300      	movs	r3, #0
 800e670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e672:	2300      	movs	r3, #0
 800e674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e676:	2300      	movs	r3, #0
 800e678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e67a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e67e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e680:	f107 0308 	add.w	r3, r7, #8
 800e684:	4619      	mov	r1, r3
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f7ff fe85 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 fb23 	bl	800ecd8 <SDMMC_GetCmdError>
 800e692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e694:	69fb      	ldr	r3, [r7, #28]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3720      	adds	r7, #32
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b088      	sub	sp, #32
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e6a6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e6aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e6ac:	2308      	movs	r3, #8
 800e6ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e6b0:	2340      	movs	r3, #64	; 0x40
 800e6b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e6be:	f107 0308 	add.w	r3, r7, #8
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7ff fe66 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 fab6 	bl	800ec3c <SDMMC_GetCmdResp7>
 800e6d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6d2:	69fb      	ldr	r3, [r7, #28]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3720      	adds	r7, #32
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b088      	sub	sp, #32
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e6ea:	2337      	movs	r3, #55	; 0x37
 800e6ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e6ee:	2340      	movs	r3, #64	; 0x40
 800e6f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e6fc:	f107 0308 	add.w	r3, r7, #8
 800e700:	4619      	mov	r1, r3
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f7ff fe47 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e708:	f241 3288 	movw	r2, #5000	; 0x1388
 800e70c:	2137      	movs	r1, #55	; 0x37
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f000 f8aa 	bl	800e868 <SDMMC_GetCmdResp1>
 800e714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e716:	69fb      	ldr	r3, [r7, #28]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3720      	adds	r7, #32
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b088      	sub	sp, #32
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e736:	2329      	movs	r3, #41	; 0x29
 800e738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e73a:	2340      	movs	r3, #64	; 0x40
 800e73c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e73e:	2300      	movs	r3, #0
 800e740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e746:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e748:	f107 0308 	add.w	r3, r7, #8
 800e74c:	4619      	mov	r1, r3
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f7ff fe21 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 f9bd 	bl	800ead4 <SDMMC_GetCmdResp3>
 800e75a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e75c:	69fb      	ldr	r3, [r7, #28]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3720      	adds	r7, #32
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e766:	b580      	push	{r7, lr}
 800e768:	b088      	sub	sp, #32
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e76e:	2300      	movs	r3, #0
 800e770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e772:	2302      	movs	r3, #2
 800e774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e776:	23c0      	movs	r3, #192	; 0xc0
 800e778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e77a:	2300      	movs	r3, #0
 800e77c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e77e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e782:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e784:	f107 0308 	add.w	r3, r7, #8
 800e788:	4619      	mov	r1, r3
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7ff fe03 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f000 f957 	bl	800ea44 <SDMMC_GetCmdResp2>
 800e796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e798:	69fb      	ldr	r3, [r7, #28]
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3720      	adds	r7, #32
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}

0800e7a2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e7a2:	b580      	push	{r7, lr}
 800e7a4:	b088      	sub	sp, #32
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
 800e7aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e7b0:	2309      	movs	r3, #9
 800e7b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e7b4:	23c0      	movs	r3, #192	; 0xc0
 800e7b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e7bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e7c2:	f107 0308 	add.w	r3, r7, #8
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7ff fde4 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 f938 	bl	800ea44 <SDMMC_GetCmdResp2>
 800e7d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7d6:	69fb      	ldr	r3, [r7, #28]
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3720      	adds	r7, #32
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b088      	sub	sp, #32
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e7f2:	2340      	movs	r3, #64	; 0x40
 800e7f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e7fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e800:	f107 0308 	add.w	r3, r7, #8
 800e804:	4619      	mov	r1, r3
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7ff fdc5 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e80c:	683a      	ldr	r2, [r7, #0]
 800e80e:	2103      	movs	r1, #3
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 f99d 	bl	800eb50 <SDMMC_GetCmdResp6>
 800e816:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e818:	69fb      	ldr	r3, [r7, #28]
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3720      	adds	r7, #32
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b088      	sub	sp, #32
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
 800e82a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e830:	230d      	movs	r3, #13
 800e832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e834:	2340      	movs	r3, #64	; 0x40
 800e836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e838:	2300      	movs	r3, #0
 800e83a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e83c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e840:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e842:	f107 0308 	add.w	r3, r7, #8
 800e846:	4619      	mov	r1, r3
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7ff fda4 	bl	800e396 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e84e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e852:	210d      	movs	r1, #13
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 f807 	bl	800e868 <SDMMC_GetCmdResp1>
 800e85a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e85c:	69fb      	ldr	r3, [r7, #28]
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3720      	adds	r7, #32
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
	...

0800e868 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b088      	sub	sp, #32
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	460b      	mov	r3, r1
 800e872:	607a      	str	r2, [r7, #4]
 800e874:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e876:	4b70      	ldr	r3, [pc, #448]	; (800ea38 <SDMMC_GetCmdResp1+0x1d0>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a70      	ldr	r2, [pc, #448]	; (800ea3c <SDMMC_GetCmdResp1+0x1d4>)
 800e87c:	fba2 2303 	umull	r2, r3, r2, r3
 800e880:	0a5a      	lsrs	r2, r3, #9
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	fb02 f303 	mul.w	r3, r2, r3
 800e888:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e88a:	69fb      	ldr	r3, [r7, #28]
 800e88c:	1e5a      	subs	r2, r3, #1
 800e88e:	61fa      	str	r2, [r7, #28]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d102      	bne.n	800e89a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e898:	e0c9      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e89e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d0ef      	beq.n	800e88a <SDMMC_GetCmdResp1+0x22>
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1ea      	bne.n	800e88a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8b8:	f003 0304 	and.w	r3, r3, #4
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d004      	beq.n	800e8ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	2204      	movs	r2, #4
 800e8c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8c6:	2304      	movs	r3, #4
 800e8c8:	e0b1      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ce:	f003 0301 	and.w	r3, r3, #1
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d004      	beq.n	800e8e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e0a6      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	22c5      	movs	r2, #197	; 0xc5
 800e8e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e8e6:	68f8      	ldr	r0, [r7, #12]
 800e8e8:	f7ff fd7f 	bl	800e3ea <SDIO_GetCommandResponse>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	7afb      	ldrb	r3, [r7, #11]
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d001      	beq.n	800e8fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e099      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e8fa:	2100      	movs	r1, #0
 800e8fc:	68f8      	ldr	r0, [r7, #12]
 800e8fe:	f7ff fd81 	bl	800e404 <SDIO_GetResponse>
 800e902:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e904:	697a      	ldr	r2, [r7, #20]
 800e906:	4b4e      	ldr	r3, [pc, #312]	; (800ea40 <SDMMC_GetCmdResp1+0x1d8>)
 800e908:	4013      	ands	r3, r2
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d101      	bne.n	800e912 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e90e:	2300      	movs	r3, #0
 800e910:	e08d      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	2b00      	cmp	r3, #0
 800e916:	da02      	bge.n	800e91e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e918:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e91c:	e087      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e924:	2b00      	cmp	r3, #0
 800e926:	d001      	beq.n	800e92c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e928:	2340      	movs	r3, #64	; 0x40
 800e92a:	e080      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e936:	2380      	movs	r3, #128	; 0x80
 800e938:	e079      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e940:	2b00      	cmp	r3, #0
 800e942:	d002      	beq.n	800e94a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e944:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e948:	e071      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e950:	2b00      	cmp	r3, #0
 800e952:	d002      	beq.n	800e95a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e954:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e958:	e069      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e960:	2b00      	cmp	r3, #0
 800e962:	d002      	beq.n	800e96a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e968:	e061      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e970:	2b00      	cmp	r3, #0
 800e972:	d002      	beq.n	800e97a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e978:	e059      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e980:	2b00      	cmp	r3, #0
 800e982:	d002      	beq.n	800e98a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e988:	e051      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e990:	2b00      	cmp	r3, #0
 800e992:	d002      	beq.n	800e99a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e998:	e049      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d002      	beq.n	800e9aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e9a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e9a8:	e041      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d002      	beq.n	800e9ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e9b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9b8:	e039      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e9c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e9c8:	e031      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d002      	beq.n	800e9da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e9d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e9d8:	e029      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d002      	beq.n	800e9ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e9e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e9e8:	e021      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d002      	beq.n	800e9fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e9f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e9f8:	e019      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d002      	beq.n	800ea0a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ea04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ea08:	e011      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d002      	beq.n	800ea1a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ea14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ea18:	e009      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	f003 0308 	and.w	r3, r3, #8
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d002      	beq.n	800ea2a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ea24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ea28:	e001      	b.n	800ea2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ea2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3720      	adds	r7, #32
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	200001b4 	.word	0x200001b4
 800ea3c:	10624dd3 	.word	0x10624dd3
 800ea40:	fdffe008 	.word	0xfdffe008

0800ea44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b085      	sub	sp, #20
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ea4c:	4b1f      	ldr	r3, [pc, #124]	; (800eacc <SDMMC_GetCmdResp2+0x88>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a1f      	ldr	r2, [pc, #124]	; (800ead0 <SDMMC_GetCmdResp2+0x8c>)
 800ea52:	fba2 2303 	umull	r2, r3, r2, r3
 800ea56:	0a5b      	lsrs	r3, r3, #9
 800ea58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea5c:	fb02 f303 	mul.w	r3, r2, r3
 800ea60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	1e5a      	subs	r2, r3, #1
 800ea66:	60fa      	str	r2, [r7, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d102      	bne.n	800ea72 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea70:	e026      	b.n	800eac0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d0ef      	beq.n	800ea62 <SDMMC_GetCmdResp2+0x1e>
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1ea      	bne.n	800ea62 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea90:	f003 0304 	and.w	r3, r3, #4
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d004      	beq.n	800eaa2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2204      	movs	r2, #4
 800ea9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea9e:	2304      	movs	r3, #4
 800eaa0:	e00e      	b.n	800eac0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaa6:	f003 0301 	and.w	r3, r3, #1
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d004      	beq.n	800eab8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2201      	movs	r2, #1
 800eab2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eab4:	2301      	movs	r3, #1
 800eab6:	e003      	b.n	800eac0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	22c5      	movs	r2, #197	; 0xc5
 800eabc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800eabe:	2300      	movs	r3, #0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3714      	adds	r7, #20
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr
 800eacc:	200001b4 	.word	0x200001b4
 800ead0:	10624dd3 	.word	0x10624dd3

0800ead4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b085      	sub	sp, #20
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eadc:	4b1a      	ldr	r3, [pc, #104]	; (800eb48 <SDMMC_GetCmdResp3+0x74>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a1a      	ldr	r2, [pc, #104]	; (800eb4c <SDMMC_GetCmdResp3+0x78>)
 800eae2:	fba2 2303 	umull	r2, r3, r2, r3
 800eae6:	0a5b      	lsrs	r3, r3, #9
 800eae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800eaec:	fb02 f303 	mul.w	r3, r2, r3
 800eaf0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	1e5a      	subs	r2, r3, #1
 800eaf6:	60fa      	str	r2, [r7, #12]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d102      	bne.n	800eb02 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eafc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb00:	e01b      	b.n	800eb3a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d0ef      	beq.n	800eaf2 <SDMMC_GetCmdResp3+0x1e>
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1ea      	bne.n	800eaf2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb20:	f003 0304 	and.w	r3, r3, #4
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d004      	beq.n	800eb32 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2204      	movs	r2, #4
 800eb2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb2e:	2304      	movs	r3, #4
 800eb30:	e003      	b.n	800eb3a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	22c5      	movs	r2, #197	; 0xc5
 800eb36:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800eb38:	2300      	movs	r3, #0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3714      	adds	r7, #20
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop
 800eb48:	200001b4 	.word	0x200001b4
 800eb4c:	10624dd3 	.word	0x10624dd3

0800eb50 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b088      	sub	sp, #32
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	460b      	mov	r3, r1
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb5e:	4b35      	ldr	r3, [pc, #212]	; (800ec34 <SDMMC_GetCmdResp6+0xe4>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4a35      	ldr	r2, [pc, #212]	; (800ec38 <SDMMC_GetCmdResp6+0xe8>)
 800eb64:	fba2 2303 	umull	r2, r3, r2, r3
 800eb68:	0a5b      	lsrs	r3, r3, #9
 800eb6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb6e:	fb02 f303 	mul.w	r3, r2, r3
 800eb72:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	1e5a      	subs	r2, r3, #1
 800eb78:	61fa      	str	r2, [r7, #28]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d102      	bne.n	800eb84 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb82:	e052      	b.n	800ec2a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb88:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb8a:	69bb      	ldr	r3, [r7, #24]
 800eb8c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d0ef      	beq.n	800eb74 <SDMMC_GetCmdResp6+0x24>
 800eb94:	69bb      	ldr	r3, [r7, #24]
 800eb96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1ea      	bne.n	800eb74 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eba2:	f003 0304 	and.w	r3, r3, #4
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d004      	beq.n	800ebb4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2204      	movs	r2, #4
 800ebae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ebb0:	2304      	movs	r3, #4
 800ebb2:	e03a      	b.n	800ec2a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebb8:	f003 0301 	and.w	r3, r3, #1
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d004      	beq.n	800ebca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e02f      	b.n	800ec2a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	f7ff fc0d 	bl	800e3ea <SDIO_GetCommandResponse>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	7afb      	ldrb	r3, [r7, #11]
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d001      	beq.n	800ebde <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	e025      	b.n	800ec2a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	22c5      	movs	r2, #197	; 0xc5
 800ebe2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f7ff fc0c 	bl	800e404 <SDIO_GetResponse>
 800ebec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d106      	bne.n	800ec06 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	0c1b      	lsrs	r3, r3, #16
 800ebfc:	b29a      	uxth	r2, r3
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ec02:	2300      	movs	r3, #0
 800ec04:	e011      	b.n	800ec2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d002      	beq.n	800ec16 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ec10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ec14:	e009      	b.n	800ec2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d002      	beq.n	800ec26 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ec20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec24:	e001      	b.n	800ec2a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ec26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3720      	adds	r7, #32
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	200001b4 	.word	0x200001b4
 800ec38:	10624dd3 	.word	0x10624dd3

0800ec3c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ec44:	4b22      	ldr	r3, [pc, #136]	; (800ecd0 <SDMMC_GetCmdResp7+0x94>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a22      	ldr	r2, [pc, #136]	; (800ecd4 <SDMMC_GetCmdResp7+0x98>)
 800ec4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ec4e:	0a5b      	lsrs	r3, r3, #9
 800ec50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec54:	fb02 f303 	mul.w	r3, r2, r3
 800ec58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	1e5a      	subs	r2, r3, #1
 800ec5e:	60fa      	str	r2, [r7, #12]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d102      	bne.n	800ec6a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec68:	e02c      	b.n	800ecc4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d0ef      	beq.n	800ec5a <SDMMC_GetCmdResp7+0x1e>
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d1ea      	bne.n	800ec5a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec88:	f003 0304 	and.w	r3, r3, #4
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d004      	beq.n	800ec9a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2204      	movs	r2, #4
 800ec94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec96:	2304      	movs	r3, #4
 800ec98:	e014      	b.n	800ecc4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec9e:	f003 0301 	and.w	r3, r3, #1
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d004      	beq.n	800ecb0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2201      	movs	r2, #1
 800ecaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ecac:	2301      	movs	r3, #1
 800ecae:	e009      	b.n	800ecc4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d002      	beq.n	800ecc2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2240      	movs	r2, #64	; 0x40
 800ecc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ecc2:	2300      	movs	r3, #0
  
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3714      	adds	r7, #20
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr
 800ecd0:	200001b4 	.word	0x200001b4
 800ecd4:	10624dd3 	.word	0x10624dd3

0800ecd8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ece0:	4b11      	ldr	r3, [pc, #68]	; (800ed28 <SDMMC_GetCmdError+0x50>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4a11      	ldr	r2, [pc, #68]	; (800ed2c <SDMMC_GetCmdError+0x54>)
 800ece6:	fba2 2303 	umull	r2, r3, r2, r3
 800ecea:	0a5b      	lsrs	r3, r3, #9
 800ecec:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecf0:	fb02 f303 	mul.w	r3, r2, r3
 800ecf4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	1e5a      	subs	r2, r3, #1
 800ecfa:	60fa      	str	r2, [r7, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d102      	bne.n	800ed06 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed04:	e009      	b.n	800ed1a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d0f1      	beq.n	800ecf6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	22c5      	movs	r2, #197	; 0xc5
 800ed16:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ed18:	2300      	movs	r3, #0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3714      	adds	r7, #20
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	200001b4 	.word	0x200001b4
 800ed2c:	10624dd3 	.word	0x10624dd3

0800ed30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ed34:	4904      	ldr	r1, [pc, #16]	; (800ed48 <MX_FATFS_Init+0x18>)
 800ed36:	4805      	ldr	r0, [pc, #20]	; (800ed4c <MX_FATFS_Init+0x1c>)
 800ed38:	f003 f8f4 	bl	8011f24 <FATFS_LinkDriver>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	461a      	mov	r2, r3
 800ed40:	4b03      	ldr	r3, [pc, #12]	; (800ed50 <MX_FATFS_Init+0x20>)
 800ed42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ed44:	bf00      	nop
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	20005d5c 	.word	0x20005d5c
 800ed4c:	0804936c 	.word	0x0804936c
 800ed50:	20005d58 	.word	0x20005d58

0800ed54 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ed54:	b480      	push	{r7}
 800ed56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ed58:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ed6e:	f000 f86b 	bl	800ee48 <BSP_SD_IsDetected>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d001      	beq.n	800ed7c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	e005      	b.n	800ed88 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ed7c:	4804      	ldr	r0, [pc, #16]	; (800ed90 <BSP_SD_Init+0x2c>)
 800ed7e:	f7fc fa9d 	bl	800b2bc <HAL_SD_Init>
 800ed82:	4603      	mov	r3, r0
 800ed84:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ed86:	79fb      	ldrb	r3, [r7, #7]
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	20005a80 	.word	0x20005a80

0800ed94 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b088      	sub	sp, #32
 800ed98:	af02      	add	r7, sp, #8
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800eda2:	2300      	movs	r3, #0
 800eda4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	9300      	str	r3, [sp, #0]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	68ba      	ldr	r2, [r7, #8]
 800edae:	68f9      	ldr	r1, [r7, #12]
 800edb0:	4806      	ldr	r0, [pc, #24]	; (800edcc <BSP_SD_ReadBlocks+0x38>)
 800edb2:	f7fc fb33 	bl	800b41c <HAL_SD_ReadBlocks>
 800edb6:	4603      	mov	r3, r0
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d001      	beq.n	800edc0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800edbc:	2301      	movs	r3, #1
 800edbe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800edc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3718      	adds	r7, #24
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	20005a80 	.word	0x20005a80

0800edd0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b088      	sub	sp, #32
 800edd4:	af02      	add	r7, sp, #8
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	607a      	str	r2, [r7, #4]
 800eddc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	68ba      	ldr	r2, [r7, #8]
 800edea:	68f9      	ldr	r1, [r7, #12]
 800edec:	4806      	ldr	r0, [pc, #24]	; (800ee08 <BSP_SD_WriteBlocks+0x38>)
 800edee:	f7fc fcf3 	bl	800b7d8 <HAL_SD_WriteBlocks>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d001      	beq.n	800edfc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800edf8:	2301      	movs	r3, #1
 800edfa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800edfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3718      	adds	r7, #24
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	20005a80 	.word	0x20005a80

0800ee0c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ee10:	4805      	ldr	r0, [pc, #20]	; (800ee28 <BSP_SD_GetCardState+0x1c>)
 800ee12:	f7fd f837 	bl	800be84 <HAL_SD_GetCardState>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b04      	cmp	r3, #4
 800ee1a:	bf14      	ite	ne
 800ee1c:	2301      	movne	r3, #1
 800ee1e:	2300      	moveq	r3, #0
 800ee20:	b2db      	uxtb	r3, r3
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	20005a80 	.word	0x20005a80

0800ee2c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ee34:	6879      	ldr	r1, [r7, #4]
 800ee36:	4803      	ldr	r0, [pc, #12]	; (800ee44 <BSP_SD_GetCardInfo+0x18>)
 800ee38:	f7fc fff8 	bl	800be2c <HAL_SD_GetCardInfo>
}
 800ee3c:	bf00      	nop
 800ee3e:	3708      	adds	r7, #8
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	20005a80 	.word	0x20005a80

0800ee48 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b083      	sub	sp, #12
 800ee4c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ee4e:	2301      	movs	r3, #1
 800ee50:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800ee52:	79fb      	ldrb	r3, [r7, #7]
 800ee54:	b2db      	uxtb	r3, r3
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	370c      	adds	r7, #12
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
	...

0800ee64 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ee6e:	4b0b      	ldr	r3, [pc, #44]	; (800ee9c <SD_CheckStatus+0x38>)
 800ee70:	2201      	movs	r2, #1
 800ee72:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ee74:	f7ff ffca 	bl	800ee0c <BSP_SD_GetCardState>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d107      	bne.n	800ee8e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ee7e:	4b07      	ldr	r3, [pc, #28]	; (800ee9c <SD_CheckStatus+0x38>)
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	f023 0301 	bic.w	r3, r3, #1
 800ee88:	b2da      	uxtb	r2, r3
 800ee8a:	4b04      	ldr	r3, [pc, #16]	; (800ee9c <SD_CheckStatus+0x38>)
 800ee8c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ee8e:	4b03      	ldr	r3, [pc, #12]	; (800ee9c <SD_CheckStatus+0x38>)
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	b2db      	uxtb	r3, r3
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	200002f1 	.word	0x200002f1

0800eea0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	4603      	mov	r3, r0
 800eea8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800eeaa:	4b0b      	ldr	r3, [pc, #44]	; (800eed8 <SD_initialize+0x38>)
 800eeac:	2201      	movs	r2, #1
 800eeae:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800eeb0:	f7ff ff58 	bl	800ed64 <BSP_SD_Init>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d107      	bne.n	800eeca <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800eeba:	79fb      	ldrb	r3, [r7, #7]
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7ff ffd1 	bl	800ee64 <SD_CheckStatus>
 800eec2:	4603      	mov	r3, r0
 800eec4:	461a      	mov	r2, r3
 800eec6:	4b04      	ldr	r3, [pc, #16]	; (800eed8 <SD_initialize+0x38>)
 800eec8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800eeca:	4b03      	ldr	r3, [pc, #12]	; (800eed8 <SD_initialize+0x38>)
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	b2db      	uxtb	r3, r3
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	200002f1 	.word	0x200002f1

0800eedc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	4603      	mov	r3, r0
 800eee4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800eee6:	79fb      	ldrb	r3, [r7, #7]
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7ff ffbb 	bl	800ee64 <SD_CheckStatus>
 800eeee:	4603      	mov	r3, r0
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b086      	sub	sp, #24
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60b9      	str	r1, [r7, #8]
 800ef00:	607a      	str	r2, [r7, #4]
 800ef02:	603b      	str	r3, [r7, #0]
 800ef04:	4603      	mov	r3, r0
 800ef06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ef0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef10:	683a      	ldr	r2, [r7, #0]
 800ef12:	6879      	ldr	r1, [r7, #4]
 800ef14:	68b8      	ldr	r0, [r7, #8]
 800ef16:	f7ff ff3d 	bl	800ed94 <BSP_SD_ReadBlocks>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d107      	bne.n	800ef30 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ef20:	bf00      	nop
 800ef22:	f7ff ff73 	bl	800ee0c <BSP_SD_GetCardState>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d1fa      	bne.n	800ef22 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ef30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3718      	adds	r7, #24
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}

0800ef3a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b086      	sub	sp, #24
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	60b9      	str	r1, [r7, #8]
 800ef42:	607a      	str	r2, [r7, #4]
 800ef44:	603b      	str	r3, [r7, #0]
 800ef46:	4603      	mov	r3, r0
 800ef48:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ef4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef52:	683a      	ldr	r2, [r7, #0]
 800ef54:	6879      	ldr	r1, [r7, #4]
 800ef56:	68b8      	ldr	r0, [r7, #8]
 800ef58:	f7ff ff3a 	bl	800edd0 <BSP_SD_WriteBlocks>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d107      	bne.n	800ef72 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ef62:	bf00      	nop
 800ef64:	f7ff ff52 	bl	800ee0c <BSP_SD_GetCardState>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1fa      	bne.n	800ef64 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ef72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3718      	adds	r7, #24
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b08c      	sub	sp, #48	; 0x30
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	4603      	mov	r3, r0
 800ef84:	603a      	str	r2, [r7, #0]
 800ef86:	71fb      	strb	r3, [r7, #7]
 800ef88:	460b      	mov	r3, r1
 800ef8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ef92:	4b25      	ldr	r3, [pc, #148]	; (800f028 <SD_ioctl+0xac>)
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	f003 0301 	and.w	r3, r3, #1
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <SD_ioctl+0x28>
 800efa0:	2303      	movs	r3, #3
 800efa2:	e03c      	b.n	800f01e <SD_ioctl+0xa2>

  switch (cmd)
 800efa4:	79bb      	ldrb	r3, [r7, #6]
 800efa6:	2b03      	cmp	r3, #3
 800efa8:	d834      	bhi.n	800f014 <SD_ioctl+0x98>
 800efaa:	a201      	add	r2, pc, #4	; (adr r2, 800efb0 <SD_ioctl+0x34>)
 800efac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb0:	0800efc1 	.word	0x0800efc1
 800efb4:	0800efc9 	.word	0x0800efc9
 800efb8:	0800efe1 	.word	0x0800efe1
 800efbc:	0800effb 	.word	0x0800effb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800efc0:	2300      	movs	r3, #0
 800efc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800efc6:	e028      	b.n	800f01a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800efc8:	f107 030c 	add.w	r3, r7, #12
 800efcc:	4618      	mov	r0, r3
 800efce:	f7ff ff2d 	bl	800ee2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800efd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800efd8:	2300      	movs	r3, #0
 800efda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800efde:	e01c      	b.n	800f01a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800efe0:	f107 030c 	add.w	r3, r7, #12
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7ff ff21 	bl	800ee2c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800efea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efec:	b29a      	uxth	r2, r3
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800eff2:	2300      	movs	r3, #0
 800eff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eff8:	e00f      	b.n	800f01a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800effa:	f107 030c 	add.w	r3, r7, #12
 800effe:	4618      	mov	r0, r3
 800f000:	f7ff ff14 	bl	800ee2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f006:	0a5a      	lsrs	r2, r3, #9
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f00c:	2300      	movs	r3, #0
 800f00e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f012:	e002      	b.n	800f01a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f014:	2304      	movs	r3, #4
 800f016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f01a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3730      	adds	r7, #48	; 0x30
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	200002f1 	.word	0x200002f1

0800f02c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	4603      	mov	r3, r0
 800f034:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f036:	79fb      	ldrb	r3, [r7, #7]
 800f038:	4a08      	ldr	r2, [pc, #32]	; (800f05c <disk_status+0x30>)
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	4413      	add	r3, r2
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	79fa      	ldrb	r2, [r7, #7]
 800f044:	4905      	ldr	r1, [pc, #20]	; (800f05c <disk_status+0x30>)
 800f046:	440a      	add	r2, r1
 800f048:	7a12      	ldrb	r2, [r2, #8]
 800f04a:	4610      	mov	r0, r2
 800f04c:	4798      	blx	r3
 800f04e:	4603      	mov	r3, r0
 800f050:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f052:	7bfb      	ldrb	r3, [r7, #15]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	20005d88 	.word	0x20005d88

0800f060 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	4603      	mov	r3, r0
 800f068:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f06a:	2300      	movs	r3, #0
 800f06c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f06e:	79fb      	ldrb	r3, [r7, #7]
 800f070:	4a0d      	ldr	r2, [pc, #52]	; (800f0a8 <disk_initialize+0x48>)
 800f072:	5cd3      	ldrb	r3, [r2, r3]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d111      	bne.n	800f09c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f078:	79fb      	ldrb	r3, [r7, #7]
 800f07a:	4a0b      	ldr	r2, [pc, #44]	; (800f0a8 <disk_initialize+0x48>)
 800f07c:	2101      	movs	r1, #1
 800f07e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f080:	79fb      	ldrb	r3, [r7, #7]
 800f082:	4a09      	ldr	r2, [pc, #36]	; (800f0a8 <disk_initialize+0x48>)
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	4413      	add	r3, r2
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	79fa      	ldrb	r2, [r7, #7]
 800f08e:	4906      	ldr	r1, [pc, #24]	; (800f0a8 <disk_initialize+0x48>)
 800f090:	440a      	add	r2, r1
 800f092:	7a12      	ldrb	r2, [r2, #8]
 800f094:	4610      	mov	r0, r2
 800f096:	4798      	blx	r3
 800f098:	4603      	mov	r3, r0
 800f09a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3710      	adds	r7, #16
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20005d88 	.word	0x20005d88

0800f0ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f0ac:	b590      	push	{r4, r7, lr}
 800f0ae:	b087      	sub	sp, #28
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60b9      	str	r1, [r7, #8]
 800f0b4:	607a      	str	r2, [r7, #4]
 800f0b6:	603b      	str	r3, [r7, #0]
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f0bc:	7bfb      	ldrb	r3, [r7, #15]
 800f0be:	4a0a      	ldr	r2, [pc, #40]	; (800f0e8 <disk_read+0x3c>)
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	4413      	add	r3, r2
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	689c      	ldr	r4, [r3, #8]
 800f0c8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ca:	4a07      	ldr	r2, [pc, #28]	; (800f0e8 <disk_read+0x3c>)
 800f0cc:	4413      	add	r3, r2
 800f0ce:	7a18      	ldrb	r0, [r3, #8]
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	68b9      	ldr	r1, [r7, #8]
 800f0d6:	47a0      	blx	r4
 800f0d8:	4603      	mov	r3, r0
 800f0da:	75fb      	strb	r3, [r7, #23]
  return res;
 800f0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	371c      	adds	r7, #28
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd90      	pop	{r4, r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	20005d88 	.word	0x20005d88

0800f0ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f0ec:	b590      	push	{r4, r7, lr}
 800f0ee:	b087      	sub	sp, #28
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60b9      	str	r1, [r7, #8]
 800f0f4:	607a      	str	r2, [r7, #4]
 800f0f6:	603b      	str	r3, [r7, #0]
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f0fc:	7bfb      	ldrb	r3, [r7, #15]
 800f0fe:	4a0a      	ldr	r2, [pc, #40]	; (800f128 <disk_write+0x3c>)
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	4413      	add	r3, r2
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	68dc      	ldr	r4, [r3, #12]
 800f108:	7bfb      	ldrb	r3, [r7, #15]
 800f10a:	4a07      	ldr	r2, [pc, #28]	; (800f128 <disk_write+0x3c>)
 800f10c:	4413      	add	r3, r2
 800f10e:	7a18      	ldrb	r0, [r3, #8]
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	68b9      	ldr	r1, [r7, #8]
 800f116:	47a0      	blx	r4
 800f118:	4603      	mov	r3, r0
 800f11a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	371c      	adds	r7, #28
 800f122:	46bd      	mov	sp, r7
 800f124:	bd90      	pop	{r4, r7, pc}
 800f126:	bf00      	nop
 800f128:	20005d88 	.word	0x20005d88

0800f12c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	4603      	mov	r3, r0
 800f134:	603a      	str	r2, [r7, #0]
 800f136:	71fb      	strb	r3, [r7, #7]
 800f138:	460b      	mov	r3, r1
 800f13a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f13c:	79fb      	ldrb	r3, [r7, #7]
 800f13e:	4a09      	ldr	r2, [pc, #36]	; (800f164 <disk_ioctl+0x38>)
 800f140:	009b      	lsls	r3, r3, #2
 800f142:	4413      	add	r3, r2
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	691b      	ldr	r3, [r3, #16]
 800f148:	79fa      	ldrb	r2, [r7, #7]
 800f14a:	4906      	ldr	r1, [pc, #24]	; (800f164 <disk_ioctl+0x38>)
 800f14c:	440a      	add	r2, r1
 800f14e:	7a10      	ldrb	r0, [r2, #8]
 800f150:	79b9      	ldrb	r1, [r7, #6]
 800f152:	683a      	ldr	r2, [r7, #0]
 800f154:	4798      	blx	r3
 800f156:	4603      	mov	r3, r0
 800f158:	73fb      	strb	r3, [r7, #15]
  return res;
 800f15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3710      	adds	r7, #16
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	20005d88 	.word	0x20005d88

0800f168 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f168:	b480      	push	{r7}
 800f16a:	b085      	sub	sp, #20
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	3301      	adds	r3, #1
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f178:	89fb      	ldrh	r3, [r7, #14]
 800f17a:	021b      	lsls	r3, r3, #8
 800f17c:	b21a      	sxth	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	b21b      	sxth	r3, r3
 800f184:	4313      	orrs	r3, r2
 800f186:	b21b      	sxth	r3, r3
 800f188:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f18a:	89fb      	ldrh	r3, [r7, #14]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3714      	adds	r7, #20
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f198:	b480      	push	{r7}
 800f19a:	b085      	sub	sp, #20
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	3303      	adds	r3, #3
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	021b      	lsls	r3, r3, #8
 800f1ac:	687a      	ldr	r2, [r7, #4]
 800f1ae:	3202      	adds	r2, #2
 800f1b0:	7812      	ldrb	r2, [r2, #0]
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	021b      	lsls	r3, r3, #8
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	3201      	adds	r2, #1
 800f1be:	7812      	ldrb	r2, [r2, #0]
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	021b      	lsls	r3, r3, #8
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	7812      	ldrb	r2, [r2, #0]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	60fb      	str	r3, [r7, #12]
	return rv;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3714      	adds	r7, #20
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr

0800f1de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f1de:	b480      	push	{r7}
 800f1e0:	b083      	sub	sp, #12
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	1c5a      	adds	r2, r3, #1
 800f1ee:	607a      	str	r2, [r7, #4]
 800f1f0:	887a      	ldrh	r2, [r7, #2]
 800f1f2:	b2d2      	uxtb	r2, r2
 800f1f4:	701a      	strb	r2, [r3, #0]
 800f1f6:	887b      	ldrh	r3, [r7, #2]
 800f1f8:	0a1b      	lsrs	r3, r3, #8
 800f1fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	1c5a      	adds	r2, r3, #1
 800f200:	607a      	str	r2, [r7, #4]
 800f202:	887a      	ldrh	r2, [r7, #2]
 800f204:	b2d2      	uxtb	r2, r2
 800f206:	701a      	strb	r2, [r3, #0]
}
 800f208:	bf00      	nop
 800f20a:	370c      	adds	r7, #12
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr

0800f214 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	1c5a      	adds	r2, r3, #1
 800f222:	607a      	str	r2, [r7, #4]
 800f224:	683a      	ldr	r2, [r7, #0]
 800f226:	b2d2      	uxtb	r2, r2
 800f228:	701a      	strb	r2, [r3, #0]
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	0a1b      	lsrs	r3, r3, #8
 800f22e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	1c5a      	adds	r2, r3, #1
 800f234:	607a      	str	r2, [r7, #4]
 800f236:	683a      	ldr	r2, [r7, #0]
 800f238:	b2d2      	uxtb	r2, r2
 800f23a:	701a      	strb	r2, [r3, #0]
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	0a1b      	lsrs	r3, r3, #8
 800f240:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	1c5a      	adds	r2, r3, #1
 800f246:	607a      	str	r2, [r7, #4]
 800f248:	683a      	ldr	r2, [r7, #0]
 800f24a:	b2d2      	uxtb	r2, r2
 800f24c:	701a      	strb	r2, [r3, #0]
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	0a1b      	lsrs	r3, r3, #8
 800f252:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	1c5a      	adds	r2, r3, #1
 800f258:	607a      	str	r2, [r7, #4]
 800f25a:	683a      	ldr	r2, [r7, #0]
 800f25c:	b2d2      	uxtb	r2, r2
 800f25e:	701a      	strb	r2, [r3, #0]
}
 800f260:	bf00      	nop
 800f262:	370c      	adds	r7, #12
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr

0800f26c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f26c:	b480      	push	{r7}
 800f26e:	b087      	sub	sp, #28
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d00d      	beq.n	800f2a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f286:	693a      	ldr	r2, [r7, #16]
 800f288:	1c53      	adds	r3, r2, #1
 800f28a:	613b      	str	r3, [r7, #16]
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	1c59      	adds	r1, r3, #1
 800f290:	6179      	str	r1, [r7, #20]
 800f292:	7812      	ldrb	r2, [r2, #0]
 800f294:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	3b01      	subs	r3, #1
 800f29a:	607b      	str	r3, [r7, #4]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d1f1      	bne.n	800f286 <mem_cpy+0x1a>
	}
}
 800f2a2:	bf00      	nop
 800f2a4:	371c      	adds	r7, #28
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f2ae:	b480      	push	{r7}
 800f2b0:	b087      	sub	sp, #28
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	60f8      	str	r0, [r7, #12]
 800f2b6:	60b9      	str	r1, [r7, #8]
 800f2b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	1c5a      	adds	r2, r3, #1
 800f2c2:	617a      	str	r2, [r7, #20]
 800f2c4:	68ba      	ldr	r2, [r7, #8]
 800f2c6:	b2d2      	uxtb	r2, r2
 800f2c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	3b01      	subs	r3, #1
 800f2ce:	607b      	str	r3, [r7, #4]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d1f3      	bne.n	800f2be <mem_set+0x10>
}
 800f2d6:	bf00      	nop
 800f2d8:	bf00      	nop
 800f2da:	371c      	adds	r7, #28
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f2e4:	b480      	push	{r7}
 800f2e6:	b089      	sub	sp, #36	; 0x24
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	60f8      	str	r0, [r7, #12]
 800f2ec:	60b9      	str	r1, [r7, #8]
 800f2ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	61fb      	str	r3, [r7, #28]
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	1c5a      	adds	r2, r3, #1
 800f300:	61fa      	str	r2, [r7, #28]
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	4619      	mov	r1, r3
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	1c5a      	adds	r2, r3, #1
 800f30a:	61ba      	str	r2, [r7, #24]
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	1acb      	subs	r3, r1, r3
 800f310:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	3b01      	subs	r3, #1
 800f316:	607b      	str	r3, [r7, #4]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d002      	beq.n	800f324 <mem_cmp+0x40>
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d0eb      	beq.n	800f2fc <mem_cmp+0x18>

	return r;
 800f324:	697b      	ldr	r3, [r7, #20]
}
 800f326:	4618      	mov	r0, r3
 800f328:	3724      	adds	r7, #36	; 0x24
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr

0800f332 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f332:	b480      	push	{r7}
 800f334:	b083      	sub	sp, #12
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
 800f33a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f33c:	e002      	b.n	800f344 <chk_chr+0x12>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	3301      	adds	r3, #1
 800f342:	607b      	str	r3, [r7, #4]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d005      	beq.n	800f358 <chk_chr+0x26>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	461a      	mov	r2, r3
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	4293      	cmp	r3, r2
 800f356:	d1f2      	bne.n	800f33e <chk_chr+0xc>
	return *str;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	781b      	ldrb	r3, [r3, #0]
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	370c      	adds	r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f368:	b480      	push	{r7}
 800f36a:	b085      	sub	sp, #20
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f372:	2300      	movs	r3, #0
 800f374:	60bb      	str	r3, [r7, #8]
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	60fb      	str	r3, [r7, #12]
 800f37a:	e029      	b.n	800f3d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f37c:	4a27      	ldr	r2, [pc, #156]	; (800f41c <chk_lock+0xb4>)
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	011b      	lsls	r3, r3, #4
 800f382:	4413      	add	r3, r2
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d01d      	beq.n	800f3c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f38a:	4a24      	ldr	r2, [pc, #144]	; (800f41c <chk_lock+0xb4>)
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	011b      	lsls	r3, r3, #4
 800f390:	4413      	add	r3, r2
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d116      	bne.n	800f3ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f39c:	4a1f      	ldr	r2, [pc, #124]	; (800f41c <chk_lock+0xb4>)
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	011b      	lsls	r3, r3, #4
 800f3a2:	4413      	add	r3, r2
 800f3a4:	3304      	adds	r3, #4
 800f3a6:	681a      	ldr	r2, [r3, #0]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d10c      	bne.n	800f3ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f3b0:	4a1a      	ldr	r2, [pc, #104]	; (800f41c <chk_lock+0xb4>)
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	011b      	lsls	r3, r3, #4
 800f3b6:	4413      	add	r3, r2
 800f3b8:	3308      	adds	r3, #8
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d102      	bne.n	800f3ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f3c4:	e007      	b.n	800f3d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	3301      	adds	r3, #1
 800f3ce:	60fb      	str	r3, [r7, #12]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d9d2      	bls.n	800f37c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	d109      	bne.n	800f3f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d102      	bne.n	800f3e8 <chk_lock+0x80>
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	2b02      	cmp	r3, #2
 800f3e6:	d101      	bne.n	800f3ec <chk_lock+0x84>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	e010      	b.n	800f40e <chk_lock+0xa6>
 800f3ec:	2312      	movs	r3, #18
 800f3ee:	e00e      	b.n	800f40e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d108      	bne.n	800f408 <chk_lock+0xa0>
 800f3f6:	4a09      	ldr	r2, [pc, #36]	; (800f41c <chk_lock+0xb4>)
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	011b      	lsls	r3, r3, #4
 800f3fc:	4413      	add	r3, r2
 800f3fe:	330c      	adds	r3, #12
 800f400:	881b      	ldrh	r3, [r3, #0]
 800f402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f406:	d101      	bne.n	800f40c <chk_lock+0xa4>
 800f408:	2310      	movs	r3, #16
 800f40a:	e000      	b.n	800f40e <chk_lock+0xa6>
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3714      	adds	r7, #20
 800f412:	46bd      	mov	sp, r7
 800f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f418:	4770      	bx	lr
 800f41a:	bf00      	nop
 800f41c:	20005d68 	.word	0x20005d68

0800f420 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f420:	b480      	push	{r7}
 800f422:	b083      	sub	sp, #12
 800f424:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f426:	2300      	movs	r3, #0
 800f428:	607b      	str	r3, [r7, #4]
 800f42a:	e002      	b.n	800f432 <enq_lock+0x12>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	3301      	adds	r3, #1
 800f430:	607b      	str	r3, [r7, #4]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2b01      	cmp	r3, #1
 800f436:	d806      	bhi.n	800f446 <enq_lock+0x26>
 800f438:	4a09      	ldr	r2, [pc, #36]	; (800f460 <enq_lock+0x40>)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	011b      	lsls	r3, r3, #4
 800f43e:	4413      	add	r3, r2
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1f2      	bne.n	800f42c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b02      	cmp	r3, #2
 800f44a:	bf14      	ite	ne
 800f44c:	2301      	movne	r3, #1
 800f44e:	2300      	moveq	r3, #0
 800f450:	b2db      	uxtb	r3, r3
}
 800f452:	4618      	mov	r0, r3
 800f454:	370c      	adds	r7, #12
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr
 800f45e:	bf00      	nop
 800f460:	20005d68 	.word	0x20005d68

0800f464 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f464:	b480      	push	{r7}
 800f466:	b085      	sub	sp, #20
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f46e:	2300      	movs	r3, #0
 800f470:	60fb      	str	r3, [r7, #12]
 800f472:	e01f      	b.n	800f4b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f474:	4a41      	ldr	r2, [pc, #260]	; (800f57c <inc_lock+0x118>)
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	011b      	lsls	r3, r3, #4
 800f47a:	4413      	add	r3, r2
 800f47c:	681a      	ldr	r2, [r3, #0]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	429a      	cmp	r2, r3
 800f484:	d113      	bne.n	800f4ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f486:	4a3d      	ldr	r2, [pc, #244]	; (800f57c <inc_lock+0x118>)
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	011b      	lsls	r3, r3, #4
 800f48c:	4413      	add	r3, r2
 800f48e:	3304      	adds	r3, #4
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f496:	429a      	cmp	r2, r3
 800f498:	d109      	bne.n	800f4ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f49a:	4a38      	ldr	r2, [pc, #224]	; (800f57c <inc_lock+0x118>)
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	011b      	lsls	r3, r3, #4
 800f4a0:	4413      	add	r3, r2
 800f4a2:	3308      	adds	r3, #8
 800f4a4:	681a      	ldr	r2, [r3, #0]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d006      	beq.n	800f4bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	60fb      	str	r3, [r7, #12]
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2b01      	cmp	r3, #1
 800f4b8:	d9dc      	bls.n	800f474 <inc_lock+0x10>
 800f4ba:	e000      	b.n	800f4be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f4bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2b02      	cmp	r3, #2
 800f4c2:	d132      	bne.n	800f52a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	60fb      	str	r3, [r7, #12]
 800f4c8:	e002      	b.n	800f4d0 <inc_lock+0x6c>
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	60fb      	str	r3, [r7, #12]
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d806      	bhi.n	800f4e4 <inc_lock+0x80>
 800f4d6:	4a29      	ldr	r2, [pc, #164]	; (800f57c <inc_lock+0x118>)
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	011b      	lsls	r3, r3, #4
 800f4dc:	4413      	add	r3, r2
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1f2      	bne.n	800f4ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	d101      	bne.n	800f4ee <inc_lock+0x8a>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	e040      	b.n	800f570 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681a      	ldr	r2, [r3, #0]
 800f4f2:	4922      	ldr	r1, [pc, #136]	; (800f57c <inc_lock+0x118>)
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	011b      	lsls	r3, r3, #4
 800f4f8:	440b      	add	r3, r1
 800f4fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	689a      	ldr	r2, [r3, #8]
 800f500:	491e      	ldr	r1, [pc, #120]	; (800f57c <inc_lock+0x118>)
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	011b      	lsls	r3, r3, #4
 800f506:	440b      	add	r3, r1
 800f508:	3304      	adds	r3, #4
 800f50a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	695a      	ldr	r2, [r3, #20]
 800f510:	491a      	ldr	r1, [pc, #104]	; (800f57c <inc_lock+0x118>)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	011b      	lsls	r3, r3, #4
 800f516:	440b      	add	r3, r1
 800f518:	3308      	adds	r3, #8
 800f51a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f51c:	4a17      	ldr	r2, [pc, #92]	; (800f57c <inc_lock+0x118>)
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	011b      	lsls	r3, r3, #4
 800f522:	4413      	add	r3, r2
 800f524:	330c      	adds	r3, #12
 800f526:	2200      	movs	r2, #0
 800f528:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d009      	beq.n	800f544 <inc_lock+0xe0>
 800f530:	4a12      	ldr	r2, [pc, #72]	; (800f57c <inc_lock+0x118>)
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	011b      	lsls	r3, r3, #4
 800f536:	4413      	add	r3, r2
 800f538:	330c      	adds	r3, #12
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d001      	beq.n	800f544 <inc_lock+0xe0>
 800f540:	2300      	movs	r3, #0
 800f542:	e015      	b.n	800f570 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d108      	bne.n	800f55c <inc_lock+0xf8>
 800f54a:	4a0c      	ldr	r2, [pc, #48]	; (800f57c <inc_lock+0x118>)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	011b      	lsls	r3, r3, #4
 800f550:	4413      	add	r3, r2
 800f552:	330c      	adds	r3, #12
 800f554:	881b      	ldrh	r3, [r3, #0]
 800f556:	3301      	adds	r3, #1
 800f558:	b29a      	uxth	r2, r3
 800f55a:	e001      	b.n	800f560 <inc_lock+0xfc>
 800f55c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f560:	4906      	ldr	r1, [pc, #24]	; (800f57c <inc_lock+0x118>)
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	011b      	lsls	r3, r3, #4
 800f566:	440b      	add	r3, r1
 800f568:	330c      	adds	r3, #12
 800f56a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	3301      	adds	r3, #1
}
 800f570:	4618      	mov	r0, r3
 800f572:	3714      	adds	r7, #20
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr
 800f57c:	20005d68 	.word	0x20005d68

0800f580 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f580:	b480      	push	{r7}
 800f582:	b085      	sub	sp, #20
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	3b01      	subs	r3, #1
 800f58c:	607b      	str	r3, [r7, #4]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2b01      	cmp	r3, #1
 800f592:	d825      	bhi.n	800f5e0 <dec_lock+0x60>
		n = Files[i].ctr;
 800f594:	4a17      	ldr	r2, [pc, #92]	; (800f5f4 <dec_lock+0x74>)
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	011b      	lsls	r3, r3, #4
 800f59a:	4413      	add	r3, r2
 800f59c:	330c      	adds	r3, #12
 800f59e:	881b      	ldrh	r3, [r3, #0]
 800f5a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f5a2:	89fb      	ldrh	r3, [r7, #14]
 800f5a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5a8:	d101      	bne.n	800f5ae <dec_lock+0x2e>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f5ae:	89fb      	ldrh	r3, [r7, #14]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d002      	beq.n	800f5ba <dec_lock+0x3a>
 800f5b4:	89fb      	ldrh	r3, [r7, #14]
 800f5b6:	3b01      	subs	r3, #1
 800f5b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f5ba:	4a0e      	ldr	r2, [pc, #56]	; (800f5f4 <dec_lock+0x74>)
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	011b      	lsls	r3, r3, #4
 800f5c0:	4413      	add	r3, r2
 800f5c2:	330c      	adds	r3, #12
 800f5c4:	89fa      	ldrh	r2, [r7, #14]
 800f5c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f5c8:	89fb      	ldrh	r3, [r7, #14]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d105      	bne.n	800f5da <dec_lock+0x5a>
 800f5ce:	4a09      	ldr	r2, [pc, #36]	; (800f5f4 <dec_lock+0x74>)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	011b      	lsls	r3, r3, #4
 800f5d4:	4413      	add	r3, r2
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	737b      	strb	r3, [r7, #13]
 800f5de:	e001      	b.n	800f5e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f5e0:	2302      	movs	r3, #2
 800f5e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f5e4:	7b7b      	ldrb	r3, [r7, #13]
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3714      	adds	r7, #20
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	20005d68 	.word	0x20005d68

0800f5f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f600:	2300      	movs	r3, #0
 800f602:	60fb      	str	r3, [r7, #12]
 800f604:	e010      	b.n	800f628 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f606:	4a0d      	ldr	r2, [pc, #52]	; (800f63c <clear_lock+0x44>)
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	011b      	lsls	r3, r3, #4
 800f60c:	4413      	add	r3, r2
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	687a      	ldr	r2, [r7, #4]
 800f612:	429a      	cmp	r2, r3
 800f614:	d105      	bne.n	800f622 <clear_lock+0x2a>
 800f616:	4a09      	ldr	r2, [pc, #36]	; (800f63c <clear_lock+0x44>)
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	011b      	lsls	r3, r3, #4
 800f61c:	4413      	add	r3, r2
 800f61e:	2200      	movs	r2, #0
 800f620:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	3301      	adds	r3, #1
 800f626:	60fb      	str	r3, [r7, #12]
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d9eb      	bls.n	800f606 <clear_lock+0xe>
	}
}
 800f62e:	bf00      	nop
 800f630:	bf00      	nop
 800f632:	3714      	adds	r7, #20
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr
 800f63c:	20005d68 	.word	0x20005d68

0800f640 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b086      	sub	sp, #24
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f648:	2300      	movs	r3, #0
 800f64a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	78db      	ldrb	r3, [r3, #3]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d034      	beq.n	800f6be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f658:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	7858      	ldrb	r0, [r3, #1]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f664:	2301      	movs	r3, #1
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	f7ff fd40 	bl	800f0ec <disk_write>
 800f66c:	4603      	mov	r3, r0
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d002      	beq.n	800f678 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f672:	2301      	movs	r3, #1
 800f674:	73fb      	strb	r3, [r7, #15]
 800f676:	e022      	b.n	800f6be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2200      	movs	r2, #0
 800f67c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f682:	697a      	ldr	r2, [r7, #20]
 800f684:	1ad2      	subs	r2, r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	69db      	ldr	r3, [r3, #28]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d217      	bcs.n	800f6be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	789b      	ldrb	r3, [r3, #2]
 800f692:	613b      	str	r3, [r7, #16]
 800f694:	e010      	b.n	800f6b8 <sync_window+0x78>
					wsect += fs->fsize;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	69db      	ldr	r3, [r3, #28]
 800f69a:	697a      	ldr	r2, [r7, #20]
 800f69c:	4413      	add	r3, r2
 800f69e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	7858      	ldrb	r0, [r3, #1]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	697a      	ldr	r2, [r7, #20]
 800f6ae:	f7ff fd1d 	bl	800f0ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	3b01      	subs	r3, #1
 800f6b6:	613b      	str	r3, [r7, #16]
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d8eb      	bhi.n	800f696 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3718      	adds	r7, #24
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6da:	683a      	ldr	r2, [r7, #0]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d01b      	beq.n	800f718 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f7ff ffad 	bl	800f640 <sync_window>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f6ea:	7bfb      	ldrb	r3, [r7, #15]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d113      	bne.n	800f718 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	7858      	ldrb	r0, [r3, #1]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	683a      	ldr	r2, [r7, #0]
 800f6fe:	f7ff fcd5 	bl	800f0ac <disk_read>
 800f702:	4603      	mov	r3, r0
 800f704:	2b00      	cmp	r3, #0
 800f706:	d004      	beq.n	800f712 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f708:	f04f 33ff 	mov.w	r3, #4294967295
 800f70c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f70e:	2301      	movs	r3, #1
 800f710:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	683a      	ldr	r2, [r7, #0]
 800f716:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800f718:	7bfb      	ldrb	r3, [r7, #15]
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
	...

0800f724 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f7ff ff87 	bl	800f640 <sync_window>
 800f732:	4603      	mov	r3, r0
 800f734:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f736:	7bfb      	ldrb	r3, [r7, #15]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d159      	bne.n	800f7f0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	2b03      	cmp	r3, #3
 800f742:	d149      	bne.n	800f7d8 <sync_fs+0xb4>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	791b      	ldrb	r3, [r3, #4]
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d145      	bne.n	800f7d8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	899b      	ldrh	r3, [r3, #12]
 800f756:	461a      	mov	r2, r3
 800f758:	2100      	movs	r1, #0
 800f75a:	f7ff fda8 	bl	800f2ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	3334      	adds	r3, #52	; 0x34
 800f762:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f766:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7ff fd37 	bl	800f1de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	3334      	adds	r3, #52	; 0x34
 800f774:	4921      	ldr	r1, [pc, #132]	; (800f7fc <sync_fs+0xd8>)
 800f776:	4618      	mov	r0, r3
 800f778:	f7ff fd4c 	bl	800f214 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	3334      	adds	r3, #52	; 0x34
 800f780:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f784:	491e      	ldr	r1, [pc, #120]	; (800f800 <sync_fs+0xdc>)
 800f786:	4618      	mov	r0, r3
 800f788:	f7ff fd44 	bl	800f214 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	3334      	adds	r3, #52	; 0x34
 800f790:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	695b      	ldr	r3, [r3, #20]
 800f798:	4619      	mov	r1, r3
 800f79a:	4610      	mov	r0, r2
 800f79c:	f7ff fd3a 	bl	800f214 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	3334      	adds	r3, #52	; 0x34
 800f7a4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	691b      	ldr	r3, [r3, #16]
 800f7ac:	4619      	mov	r1, r3
 800f7ae:	4610      	mov	r0, r2
 800f7b0:	f7ff fd30 	bl	800f214 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6a1b      	ldr	r3, [r3, #32]
 800f7b8:	1c5a      	adds	r2, r3, #1
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	7858      	ldrb	r0, [r3, #1]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	f7ff fc8d 	bl	800f0ec <disk_write>
			fs->fsi_flag = 0;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	785b      	ldrb	r3, [r3, #1]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	2100      	movs	r1, #0
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7ff fca3 	bl	800f12c <disk_ioctl>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d001      	beq.n	800f7f0 <sync_fs+0xcc>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	41615252 	.word	0x41615252
 800f800:	61417272 	.word	0x61417272

0800f804 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	3b02      	subs	r3, #2
 800f812:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	699b      	ldr	r3, [r3, #24]
 800f818:	3b02      	subs	r3, #2
 800f81a:	683a      	ldr	r2, [r7, #0]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d301      	bcc.n	800f824 <clust2sect+0x20>
 800f820:	2300      	movs	r3, #0
 800f822:	e008      	b.n	800f836 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	895b      	ldrh	r3, [r3, #10]
 800f828:	461a      	mov	r2, r3
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	fb03 f202 	mul.w	r2, r3, r2
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f834:	4413      	add	r3, r2
}
 800f836:	4618      	mov	r0, r3
 800f838:	370c      	adds	r7, #12
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr

0800f842 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b086      	sub	sp, #24
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
 800f84a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	2b01      	cmp	r3, #1
 800f856:	d904      	bls.n	800f862 <get_fat+0x20>
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	699b      	ldr	r3, [r3, #24]
 800f85c:	683a      	ldr	r2, [r7, #0]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d302      	bcc.n	800f868 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f862:	2301      	movs	r3, #1
 800f864:	617b      	str	r3, [r7, #20]
 800f866:	e0bb      	b.n	800f9e0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f868:	f04f 33ff 	mov.w	r3, #4294967295
 800f86c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	2b03      	cmp	r3, #3
 800f874:	f000 8083 	beq.w	800f97e <get_fat+0x13c>
 800f878:	2b03      	cmp	r3, #3
 800f87a:	f300 80a7 	bgt.w	800f9cc <get_fat+0x18a>
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d002      	beq.n	800f888 <get_fat+0x46>
 800f882:	2b02      	cmp	r3, #2
 800f884:	d056      	beq.n	800f934 <get_fat+0xf2>
 800f886:	e0a1      	b.n	800f9cc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	60fb      	str	r3, [r7, #12]
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	085b      	lsrs	r3, r3, #1
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	4413      	add	r3, r2
 800f894:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	899b      	ldrh	r3, [r3, #12]
 800f89e:	4619      	mov	r1, r3
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8a6:	4413      	add	r3, r2
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	6938      	ldr	r0, [r7, #16]
 800f8ac:	f7ff ff0c 	bl	800f6c8 <move_window>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	f040 808d 	bne.w	800f9d2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	1c5a      	adds	r2, r3, #1
 800f8bc:	60fa      	str	r2, [r7, #12]
 800f8be:	693a      	ldr	r2, [r7, #16]
 800f8c0:	8992      	ldrh	r2, [r2, #12]
 800f8c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8c6:	fb01 f202 	mul.w	r2, r1, r2
 800f8ca:	1a9b      	subs	r3, r3, r2
 800f8cc:	693a      	ldr	r2, [r7, #16]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f8d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	899b      	ldrh	r3, [r3, #12]
 800f8de:	4619      	mov	r1, r3
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8e6:	4413      	add	r3, r2
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	6938      	ldr	r0, [r7, #16]
 800f8ec:	f7ff feec 	bl	800f6c8 <move_window>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d16f      	bne.n	800f9d6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	899b      	ldrh	r3, [r3, #12]
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800f902:	fb01 f202 	mul.w	r2, r1, r2
 800f906:	1a9b      	subs	r3, r3, r2
 800f908:	693a      	ldr	r2, [r7, #16]
 800f90a:	4413      	add	r3, r2
 800f90c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f910:	021b      	lsls	r3, r3, #8
 800f912:	461a      	mov	r2, r3
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	4313      	orrs	r3, r2
 800f918:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	f003 0301 	and.w	r3, r3, #1
 800f920:	2b00      	cmp	r3, #0
 800f922:	d002      	beq.n	800f92a <get_fat+0xe8>
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	091b      	lsrs	r3, r3, #4
 800f928:	e002      	b.n	800f930 <get_fat+0xee>
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f930:	617b      	str	r3, [r7, #20]
			break;
 800f932:	e055      	b.n	800f9e0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	899b      	ldrh	r3, [r3, #12]
 800f93c:	085b      	lsrs	r3, r3, #1
 800f93e:	b29b      	uxth	r3, r3
 800f940:	4619      	mov	r1, r3
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	fbb3 f3f1 	udiv	r3, r3, r1
 800f948:	4413      	add	r3, r2
 800f94a:	4619      	mov	r1, r3
 800f94c:	6938      	ldr	r0, [r7, #16]
 800f94e:	f7ff febb 	bl	800f6c8 <move_window>
 800f952:	4603      	mov	r3, r0
 800f954:	2b00      	cmp	r3, #0
 800f956:	d140      	bne.n	800f9da <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	005b      	lsls	r3, r3, #1
 800f962:	693a      	ldr	r2, [r7, #16]
 800f964:	8992      	ldrh	r2, [r2, #12]
 800f966:	fbb3 f0f2 	udiv	r0, r3, r2
 800f96a:	fb00 f202 	mul.w	r2, r0, r2
 800f96e:	1a9b      	subs	r3, r3, r2
 800f970:	440b      	add	r3, r1
 800f972:	4618      	mov	r0, r3
 800f974:	f7ff fbf8 	bl	800f168 <ld_word>
 800f978:	4603      	mov	r3, r0
 800f97a:	617b      	str	r3, [r7, #20]
			break;
 800f97c:	e030      	b.n	800f9e0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	899b      	ldrh	r3, [r3, #12]
 800f986:	089b      	lsrs	r3, r3, #2
 800f988:	b29b      	uxth	r3, r3
 800f98a:	4619      	mov	r1, r3
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f992:	4413      	add	r3, r2
 800f994:	4619      	mov	r1, r3
 800f996:	6938      	ldr	r0, [r7, #16]
 800f998:	f7ff fe96 	bl	800f6c8 <move_window>
 800f99c:	4603      	mov	r3, r0
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d11d      	bne.n	800f9de <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	693a      	ldr	r2, [r7, #16]
 800f9ae:	8992      	ldrh	r2, [r2, #12]
 800f9b0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f9b4:	fb00 f202 	mul.w	r2, r0, r2
 800f9b8:	1a9b      	subs	r3, r3, r2
 800f9ba:	440b      	add	r3, r1
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7ff fbeb 	bl	800f198 <ld_dword>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f9c8:	617b      	str	r3, [r7, #20]
			break;
 800f9ca:	e009      	b.n	800f9e0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	617b      	str	r3, [r7, #20]
 800f9d0:	e006      	b.n	800f9e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9d2:	bf00      	nop
 800f9d4:	e004      	b.n	800f9e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9d6:	bf00      	nop
 800f9d8:	e002      	b.n	800f9e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f9da:	bf00      	nop
 800f9dc:	e000      	b.n	800f9e0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f9de:	bf00      	nop
		}
	}

	return val;
 800f9e0:	697b      	ldr	r3, [r7, #20]
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3718      	adds	r7, #24
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}

0800f9ea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f9ea:	b590      	push	{r4, r7, lr}
 800f9ec:	b089      	sub	sp, #36	; 0x24
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	60f8      	str	r0, [r7, #12]
 800f9f2:	60b9      	str	r1, [r7, #8]
 800f9f4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f9f6:	2302      	movs	r3, #2
 800f9f8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	f240 8102 	bls.w	800fc06 <put_fat+0x21c>
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	699b      	ldr	r3, [r3, #24]
 800fa06:	68ba      	ldr	r2, [r7, #8]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	f080 80fc 	bcs.w	800fc06 <put_fat+0x21c>
		switch (fs->fs_type) {
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	2b03      	cmp	r3, #3
 800fa14:	f000 80b6 	beq.w	800fb84 <put_fat+0x19a>
 800fa18:	2b03      	cmp	r3, #3
 800fa1a:	f300 80fd 	bgt.w	800fc18 <put_fat+0x22e>
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d003      	beq.n	800fa2a <put_fat+0x40>
 800fa22:	2b02      	cmp	r3, #2
 800fa24:	f000 8083 	beq.w	800fb2e <put_fat+0x144>
 800fa28:	e0f6      	b.n	800fc18 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	61bb      	str	r3, [r7, #24]
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	085b      	lsrs	r3, r3, #1
 800fa32:	69ba      	ldr	r2, [r7, #24]
 800fa34:	4413      	add	r3, r2
 800fa36:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	899b      	ldrh	r3, [r3, #12]
 800fa40:	4619      	mov	r1, r3
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa48:	4413      	add	r3, r2
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f7ff fe3b 	bl	800f6c8 <move_window>
 800fa52:	4603      	mov	r3, r0
 800fa54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fa56:	7ffb      	ldrb	r3, [r7, #31]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f040 80d6 	bne.w	800fc0a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fa64:	69bb      	ldr	r3, [r7, #24]
 800fa66:	1c5a      	adds	r2, r3, #1
 800fa68:	61ba      	str	r2, [r7, #24]
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	8992      	ldrh	r2, [r2, #12]
 800fa6e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa72:	fb00 f202 	mul.w	r2, r0, r2
 800fa76:	1a9b      	subs	r3, r3, r2
 800fa78:	440b      	add	r3, r1
 800fa7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	f003 0301 	and.w	r3, r3, #1
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d00d      	beq.n	800faa2 <put_fat+0xb8>
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	b25b      	sxtb	r3, r3
 800fa8c:	f003 030f 	and.w	r3, r3, #15
 800fa90:	b25a      	sxtb	r2, r3
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	011b      	lsls	r3, r3, #4
 800fa98:	b25b      	sxtb	r3, r3
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	b25b      	sxtb	r3, r3
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	e001      	b.n	800faa6 <put_fat+0xbc>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	697a      	ldr	r2, [r7, #20]
 800faa8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2201      	movs	r2, #1
 800faae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	899b      	ldrh	r3, [r3, #12]
 800fab8:	4619      	mov	r1, r3
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	fbb3 f3f1 	udiv	r3, r3, r1
 800fac0:	4413      	add	r3, r2
 800fac2:	4619      	mov	r1, r3
 800fac4:	68f8      	ldr	r0, [r7, #12]
 800fac6:	f7ff fdff 	bl	800f6c8 <move_window>
 800faca:	4603      	mov	r3, r0
 800facc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800face:	7ffb      	ldrb	r3, [r7, #31]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	f040 809c 	bne.w	800fc0e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	899b      	ldrh	r3, [r3, #12]
 800fae0:	461a      	mov	r2, r3
 800fae2:	69bb      	ldr	r3, [r7, #24]
 800fae4:	fbb3 f0f2 	udiv	r0, r3, r2
 800fae8:	fb00 f202 	mul.w	r2, r0, r2
 800faec:	1a9b      	subs	r3, r3, r2
 800faee:	440b      	add	r3, r1
 800faf0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	f003 0301 	and.w	r3, r3, #1
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d003      	beq.n	800fb04 <put_fat+0x11a>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	091b      	lsrs	r3, r3, #4
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	e00e      	b.n	800fb22 <put_fat+0x138>
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	b25b      	sxtb	r3, r3
 800fb0a:	f023 030f 	bic.w	r3, r3, #15
 800fb0e:	b25a      	sxtb	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	0a1b      	lsrs	r3, r3, #8
 800fb14:	b25b      	sxtb	r3, r3
 800fb16:	f003 030f 	and.w	r3, r3, #15
 800fb1a:	b25b      	sxtb	r3, r3
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	b25b      	sxtb	r3, r3
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	697a      	ldr	r2, [r7, #20]
 800fb24:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2201      	movs	r2, #1
 800fb2a:	70da      	strb	r2, [r3, #3]
			break;
 800fb2c:	e074      	b.n	800fc18 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	899b      	ldrh	r3, [r3, #12]
 800fb36:	085b      	lsrs	r3, r3, #1
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	4619      	mov	r1, r3
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb42:	4413      	add	r3, r2
 800fb44:	4619      	mov	r1, r3
 800fb46:	68f8      	ldr	r0, [r7, #12]
 800fb48:	f7ff fdbe 	bl	800f6c8 <move_window>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fb50:	7ffb      	ldrb	r3, [r7, #31]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d15d      	bne.n	800fc12 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	005b      	lsls	r3, r3, #1
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	8992      	ldrh	r2, [r2, #12]
 800fb64:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb68:	fb00 f202 	mul.w	r2, r0, r2
 800fb6c:	1a9b      	subs	r3, r3, r2
 800fb6e:	440b      	add	r3, r1
 800fb70:	687a      	ldr	r2, [r7, #4]
 800fb72:	b292      	uxth	r2, r2
 800fb74:	4611      	mov	r1, r2
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7ff fb31 	bl	800f1de <st_word>
			fs->wflag = 1;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2201      	movs	r2, #1
 800fb80:	70da      	strb	r2, [r3, #3]
			break;
 800fb82:	e049      	b.n	800fc18 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	899b      	ldrh	r3, [r3, #12]
 800fb8c:	089b      	lsrs	r3, r3, #2
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	4619      	mov	r1, r3
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb98:	4413      	add	r3, r2
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f7ff fd93 	bl	800f6c8 <move_window>
 800fba2:	4603      	mov	r3, r0
 800fba4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fba6:	7ffb      	ldrb	r3, [r7, #31]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d134      	bne.n	800fc16 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	009b      	lsls	r3, r3, #2
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	8992      	ldrh	r2, [r2, #12]
 800fbc0:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbc4:	fb00 f202 	mul.w	r2, r0, r2
 800fbc8:	1a9b      	subs	r3, r3, r2
 800fbca:	440b      	add	r3, r1
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7ff fae3 	bl	800f198 <ld_dword>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fbd8:	4323      	orrs	r3, r4
 800fbda:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	8992      	ldrh	r2, [r2, #12]
 800fbea:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbee:	fb00 f202 	mul.w	r2, r0, r2
 800fbf2:	1a9b      	subs	r3, r3, r2
 800fbf4:	440b      	add	r3, r1
 800fbf6:	6879      	ldr	r1, [r7, #4]
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7ff fb0b 	bl	800f214 <st_dword>
			fs->wflag = 1;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2201      	movs	r2, #1
 800fc02:	70da      	strb	r2, [r3, #3]
			break;
 800fc04:	e008      	b.n	800fc18 <put_fat+0x22e>
		}
	}
 800fc06:	bf00      	nop
 800fc08:	e006      	b.n	800fc18 <put_fat+0x22e>
			if (res != FR_OK) break;
 800fc0a:	bf00      	nop
 800fc0c:	e004      	b.n	800fc18 <put_fat+0x22e>
			if (res != FR_OK) break;
 800fc0e:	bf00      	nop
 800fc10:	e002      	b.n	800fc18 <put_fat+0x22e>
			if (res != FR_OK) break;
 800fc12:	bf00      	nop
 800fc14:	e000      	b.n	800fc18 <put_fat+0x22e>
			if (res != FR_OK) break;
 800fc16:	bf00      	nop
	return res;
 800fc18:	7ffb      	ldrb	r3, [r7, #31]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3724      	adds	r7, #36	; 0x24
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd90      	pop	{r4, r7, pc}

0800fc22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b088      	sub	sp, #32
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	60f8      	str	r0, [r7, #12]
 800fc2a:	60b9      	str	r1, [r7, #8]
 800fc2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d904      	bls.n	800fc48 <remove_chain+0x26>
 800fc3e:	69bb      	ldr	r3, [r7, #24]
 800fc40:	699b      	ldr	r3, [r3, #24]
 800fc42:	68ba      	ldr	r2, [r7, #8]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d301      	bcc.n	800fc4c <remove_chain+0x2a>
 800fc48:	2302      	movs	r3, #2
 800fc4a:	e04b      	b.n	800fce4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d00c      	beq.n	800fc6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fc52:	f04f 32ff 	mov.w	r2, #4294967295
 800fc56:	6879      	ldr	r1, [r7, #4]
 800fc58:	69b8      	ldr	r0, [r7, #24]
 800fc5a:	f7ff fec6 	bl	800f9ea <put_fat>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fc62:	7ffb      	ldrb	r3, [r7, #31]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d001      	beq.n	800fc6c <remove_chain+0x4a>
 800fc68:	7ffb      	ldrb	r3, [r7, #31]
 800fc6a:	e03b      	b.n	800fce4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fc6c:	68b9      	ldr	r1, [r7, #8]
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f7ff fde7 	bl	800f842 <get_fat>
 800fc74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d031      	beq.n	800fce0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d101      	bne.n	800fc86 <remove_chain+0x64>
 800fc82:	2302      	movs	r3, #2
 800fc84:	e02e      	b.n	800fce4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc8c:	d101      	bne.n	800fc92 <remove_chain+0x70>
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e028      	b.n	800fce4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fc92:	2200      	movs	r2, #0
 800fc94:	68b9      	ldr	r1, [r7, #8]
 800fc96:	69b8      	ldr	r0, [r7, #24]
 800fc98:	f7ff fea7 	bl	800f9ea <put_fat>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fca0:	7ffb      	ldrb	r3, [r7, #31]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d001      	beq.n	800fcaa <remove_chain+0x88>
 800fca6:	7ffb      	ldrb	r3, [r7, #31]
 800fca8:	e01c      	b.n	800fce4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	695a      	ldr	r2, [r3, #20]
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	699b      	ldr	r3, [r3, #24]
 800fcb2:	3b02      	subs	r3, #2
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d20b      	bcs.n	800fcd0 <remove_chain+0xae>
			fs->free_clst++;
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	695b      	ldr	r3, [r3, #20]
 800fcbc:	1c5a      	adds	r2, r3, #1
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	791b      	ldrb	r3, [r3, #4]
 800fcc6:	f043 0301 	orr.w	r3, r3, #1
 800fcca:	b2da      	uxtb	r2, r3
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fcd4:	69bb      	ldr	r3, [r7, #24]
 800fcd6:	699b      	ldr	r3, [r3, #24]
 800fcd8:	68ba      	ldr	r2, [r7, #8]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d3c6      	bcc.n	800fc6c <remove_chain+0x4a>
 800fcde:	e000      	b.n	800fce2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fce0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fce2:	2300      	movs	r3, #0
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3720      	adds	r7, #32
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b088      	sub	sp, #32
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d10d      	bne.n	800fd1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	691b      	ldr	r3, [r3, #16]
 800fd06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fd08:	69bb      	ldr	r3, [r7, #24]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d004      	beq.n	800fd18 <create_chain+0x2c>
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	699b      	ldr	r3, [r3, #24]
 800fd12:	69ba      	ldr	r2, [r7, #24]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d31b      	bcc.n	800fd50 <create_chain+0x64>
 800fd18:	2301      	movs	r3, #1
 800fd1a:	61bb      	str	r3, [r7, #24]
 800fd1c:	e018      	b.n	800fd50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fd1e:	6839      	ldr	r1, [r7, #0]
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f7ff fd8e 	bl	800f842 <get_fat>
 800fd26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d801      	bhi.n	800fd32 <create_chain+0x46>
 800fd2e:	2301      	movs	r3, #1
 800fd30:	e070      	b.n	800fe14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd38:	d101      	bne.n	800fd3e <create_chain+0x52>
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	e06a      	b.n	800fe14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	699b      	ldr	r3, [r3, #24]
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d201      	bcs.n	800fd4c <create_chain+0x60>
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	e063      	b.n	800fe14 <create_chain+0x128>
		scl = clst;
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	3301      	adds	r3, #1
 800fd58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	699b      	ldr	r3, [r3, #24]
 800fd5e:	69fa      	ldr	r2, [r7, #28]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d307      	bcc.n	800fd74 <create_chain+0x88>
				ncl = 2;
 800fd64:	2302      	movs	r3, #2
 800fd66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fd68:	69fa      	ldr	r2, [r7, #28]
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d901      	bls.n	800fd74 <create_chain+0x88>
 800fd70:	2300      	movs	r3, #0
 800fd72:	e04f      	b.n	800fe14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fd74:	69f9      	ldr	r1, [r7, #28]
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f7ff fd63 	bl	800f842 <get_fat>
 800fd7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d00e      	beq.n	800fda2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d003      	beq.n	800fd92 <create_chain+0xa6>
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd90:	d101      	bne.n	800fd96 <create_chain+0xaa>
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	e03e      	b.n	800fe14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fd96:	69fa      	ldr	r2, [r7, #28]
 800fd98:	69bb      	ldr	r3, [r7, #24]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d1da      	bne.n	800fd54 <create_chain+0x68>
 800fd9e:	2300      	movs	r3, #0
 800fda0:	e038      	b.n	800fe14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fda2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fda4:	f04f 32ff 	mov.w	r2, #4294967295
 800fda8:	69f9      	ldr	r1, [r7, #28]
 800fdaa:	6938      	ldr	r0, [r7, #16]
 800fdac:	f7ff fe1d 	bl	800f9ea <put_fat>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fdb4:	7dfb      	ldrb	r3, [r7, #23]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d109      	bne.n	800fdce <create_chain+0xe2>
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d006      	beq.n	800fdce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fdc0:	69fa      	ldr	r2, [r7, #28]
 800fdc2:	6839      	ldr	r1, [r7, #0]
 800fdc4:	6938      	ldr	r0, [r7, #16]
 800fdc6:	f7ff fe10 	bl	800f9ea <put_fat>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fdce:	7dfb      	ldrb	r3, [r7, #23]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d116      	bne.n	800fe02 <create_chain+0x116>
		fs->last_clst = ncl;
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	69fa      	ldr	r2, [r7, #28]
 800fdd8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fdda:	693b      	ldr	r3, [r7, #16]
 800fddc:	695a      	ldr	r2, [r3, #20]
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	699b      	ldr	r3, [r3, #24]
 800fde2:	3b02      	subs	r3, #2
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d804      	bhi.n	800fdf2 <create_chain+0x106>
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	695b      	ldr	r3, [r3, #20]
 800fdec:	1e5a      	subs	r2, r3, #1
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	791b      	ldrb	r3, [r3, #4]
 800fdf6:	f043 0301 	orr.w	r3, r3, #1
 800fdfa:	b2da      	uxtb	r2, r3
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	711a      	strb	r2, [r3, #4]
 800fe00:	e007      	b.n	800fe12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fe02:	7dfb      	ldrb	r3, [r7, #23]
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d102      	bne.n	800fe0e <create_chain+0x122>
 800fe08:	f04f 33ff 	mov.w	r3, #4294967295
 800fe0c:	e000      	b.n	800fe10 <create_chain+0x124>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fe12:	69fb      	ldr	r3, [r7, #28]
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3720      	adds	r7, #32
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b087      	sub	sp, #28
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe30:	3304      	adds	r3, #4
 800fe32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	899b      	ldrh	r3, [r3, #12]
 800fe38:	461a      	mov	r2, r3
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe40:	68fa      	ldr	r2, [r7, #12]
 800fe42:	8952      	ldrh	r2, [r2, #10]
 800fe44:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe48:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	1d1a      	adds	r2, r3, #4
 800fe4e:	613a      	str	r2, [r7, #16]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d101      	bne.n	800fe5e <clmt_clust+0x42>
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	e010      	b.n	800fe80 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800fe5e:	697a      	ldr	r2, [r7, #20]
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d307      	bcc.n	800fe76 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800fe66:	697a      	ldr	r2, [r7, #20]
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	1ad3      	subs	r3, r2, r3
 800fe6c:	617b      	str	r3, [r7, #20]
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	3304      	adds	r3, #4
 800fe72:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fe74:	e7e9      	b.n	800fe4a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fe76:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	681a      	ldr	r2, [r3, #0]
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	4413      	add	r3, r2
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	371c      	adds	r7, #28
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b086      	sub	sp, #24
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fea2:	d204      	bcs.n	800feae <dir_sdi+0x22>
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	f003 031f 	and.w	r3, r3, #31
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d001      	beq.n	800feb2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800feae:	2302      	movs	r3, #2
 800feb0:	e071      	b.n	800ff96 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	683a      	ldr	r2, [r7, #0]
 800feb6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	689b      	ldr	r3, [r3, #8]
 800febc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d106      	bne.n	800fed2 <dir_sdi+0x46>
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	2b02      	cmp	r3, #2
 800feca:	d902      	bls.n	800fed2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d10c      	bne.n	800fef2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	095b      	lsrs	r3, r3, #5
 800fedc:	693a      	ldr	r2, [r7, #16]
 800fede:	8912      	ldrh	r2, [r2, #8]
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d301      	bcc.n	800fee8 <dir_sdi+0x5c>
 800fee4:	2302      	movs	r3, #2
 800fee6:	e056      	b.n	800ff96 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	61da      	str	r2, [r3, #28]
 800fef0:	e02d      	b.n	800ff4e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	895b      	ldrh	r3, [r3, #10]
 800fef6:	461a      	mov	r2, r3
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	899b      	ldrh	r3, [r3, #12]
 800fefc:	fb02 f303 	mul.w	r3, r2, r3
 800ff00:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ff02:	e019      	b.n	800ff38 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6979      	ldr	r1, [r7, #20]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7ff fc9a 	bl	800f842 <get_fat>
 800ff0e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff16:	d101      	bne.n	800ff1c <dir_sdi+0x90>
 800ff18:	2301      	movs	r3, #1
 800ff1a:	e03c      	b.n	800ff96 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d904      	bls.n	800ff2c <dir_sdi+0xa0>
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	699b      	ldr	r3, [r3, #24]
 800ff26:	697a      	ldr	r2, [r7, #20]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d301      	bcc.n	800ff30 <dir_sdi+0xa4>
 800ff2c:	2302      	movs	r3, #2
 800ff2e:	e032      	b.n	800ff96 <dir_sdi+0x10a>
			ofs -= csz;
 800ff30:	683a      	ldr	r2, [r7, #0]
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	1ad3      	subs	r3, r2, r3
 800ff36:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ff38:	683a      	ldr	r2, [r7, #0]
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d2e1      	bcs.n	800ff04 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ff40:	6979      	ldr	r1, [r7, #20]
 800ff42:	6938      	ldr	r0, [r7, #16]
 800ff44:	f7ff fc5e 	bl	800f804 <clust2sect>
 800ff48:	4602      	mov	r2, r0
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	697a      	ldr	r2, [r7, #20]
 800ff52:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	69db      	ldr	r3, [r3, #28]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d101      	bne.n	800ff60 <dir_sdi+0xd4>
 800ff5c:	2302      	movs	r3, #2
 800ff5e:	e01a      	b.n	800ff96 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	69da      	ldr	r2, [r3, #28]
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	899b      	ldrh	r3, [r3, #12]
 800ff68:	4619      	mov	r1, r3
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff70:	441a      	add	r2, r3
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	899b      	ldrh	r3, [r3, #12]
 800ff80:	461a      	mov	r2, r3
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff88:	fb00 f202 	mul.w	r2, r0, r2
 800ff8c:	1a9b      	subs	r3, r3, r2
 800ff8e:	18ca      	adds	r2, r1, r3
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ff94:	2300      	movs	r3, #0
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3718      	adds	r7, #24
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	b086      	sub	sp, #24
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
 800ffa6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	695b      	ldr	r3, [r3, #20]
 800ffb2:	3320      	adds	r3, #32
 800ffb4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	69db      	ldr	r3, [r3, #28]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d003      	beq.n	800ffc6 <dir_next+0x28>
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ffc4:	d301      	bcc.n	800ffca <dir_next+0x2c>
 800ffc6:	2304      	movs	r3, #4
 800ffc8:	e0bb      	b.n	8010142 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	899b      	ldrh	r3, [r3, #12]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffd6:	fb01 f202 	mul.w	r2, r1, r2
 800ffda:	1a9b      	subs	r3, r3, r2
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	f040 809d 	bne.w	801011c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	69db      	ldr	r3, [r3, #28]
 800ffe6:	1c5a      	adds	r2, r3, #1
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	699b      	ldr	r3, [r3, #24]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d10b      	bne.n	801000c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	095b      	lsrs	r3, r3, #5
 800fff8:	68fa      	ldr	r2, [r7, #12]
 800fffa:	8912      	ldrh	r2, [r2, #8]
 800fffc:	4293      	cmp	r3, r2
 800fffe:	f0c0 808d 	bcc.w	801011c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2200      	movs	r2, #0
 8010006:	61da      	str	r2, [r3, #28]
 8010008:	2304      	movs	r3, #4
 801000a:	e09a      	b.n	8010142 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	899b      	ldrh	r3, [r3, #12]
 8010010:	461a      	mov	r2, r3
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	fbb3 f3f2 	udiv	r3, r3, r2
 8010018:	68fa      	ldr	r2, [r7, #12]
 801001a:	8952      	ldrh	r2, [r2, #10]
 801001c:	3a01      	subs	r2, #1
 801001e:	4013      	ands	r3, r2
 8010020:	2b00      	cmp	r3, #0
 8010022:	d17b      	bne.n	801011c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	699b      	ldr	r3, [r3, #24]
 801002a:	4619      	mov	r1, r3
 801002c:	4610      	mov	r0, r2
 801002e:	f7ff fc08 	bl	800f842 <get_fat>
 8010032:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	2b01      	cmp	r3, #1
 8010038:	d801      	bhi.n	801003e <dir_next+0xa0>
 801003a:	2302      	movs	r3, #2
 801003c:	e081      	b.n	8010142 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010044:	d101      	bne.n	801004a <dir_next+0xac>
 8010046:	2301      	movs	r3, #1
 8010048:	e07b      	b.n	8010142 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	699b      	ldr	r3, [r3, #24]
 801004e:	697a      	ldr	r2, [r7, #20]
 8010050:	429a      	cmp	r2, r3
 8010052:	d359      	bcc.n	8010108 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d104      	bne.n	8010064 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2200      	movs	r2, #0
 801005e:	61da      	str	r2, [r3, #28]
 8010060:	2304      	movs	r3, #4
 8010062:	e06e      	b.n	8010142 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	699b      	ldr	r3, [r3, #24]
 801006a:	4619      	mov	r1, r3
 801006c:	4610      	mov	r0, r2
 801006e:	f7ff fe3d 	bl	800fcec <create_chain>
 8010072:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d101      	bne.n	801007e <dir_next+0xe0>
 801007a:	2307      	movs	r3, #7
 801007c:	e061      	b.n	8010142 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	2b01      	cmp	r3, #1
 8010082:	d101      	bne.n	8010088 <dir_next+0xea>
 8010084:	2302      	movs	r3, #2
 8010086:	e05c      	b.n	8010142 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801008e:	d101      	bne.n	8010094 <dir_next+0xf6>
 8010090:	2301      	movs	r3, #1
 8010092:	e056      	b.n	8010142 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010094:	68f8      	ldr	r0, [r7, #12]
 8010096:	f7ff fad3 	bl	800f640 <sync_window>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d001      	beq.n	80100a4 <dir_next+0x106>
 80100a0:	2301      	movs	r3, #1
 80100a2:	e04e      	b.n	8010142 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	899b      	ldrh	r3, [r3, #12]
 80100ae:	461a      	mov	r2, r3
 80100b0:	2100      	movs	r1, #0
 80100b2:	f7ff f8fc 	bl	800f2ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80100b6:	2300      	movs	r3, #0
 80100b8:	613b      	str	r3, [r7, #16]
 80100ba:	6979      	ldr	r1, [r7, #20]
 80100bc:	68f8      	ldr	r0, [r7, #12]
 80100be:	f7ff fba1 	bl	800f804 <clust2sect>
 80100c2:	4602      	mov	r2, r0
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	631a      	str	r2, [r3, #48]	; 0x30
 80100c8:	e012      	b.n	80100f0 <dir_next+0x152>
						fs->wflag = 1;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	2201      	movs	r2, #1
 80100ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80100d0:	68f8      	ldr	r0, [r7, #12]
 80100d2:	f7ff fab5 	bl	800f640 <sync_window>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d001      	beq.n	80100e0 <dir_next+0x142>
 80100dc:	2301      	movs	r3, #1
 80100de:	e030      	b.n	8010142 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	3301      	adds	r3, #1
 80100e4:	613b      	str	r3, [r7, #16]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ea:	1c5a      	adds	r2, r3, #1
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	631a      	str	r2, [r3, #48]	; 0x30
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	895b      	ldrh	r3, [r3, #10]
 80100f4:	461a      	mov	r2, r3
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d3e6      	bcc.n	80100ca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	1ad2      	subs	r2, r2, r3
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	697a      	ldr	r2, [r7, #20]
 801010c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801010e:	6979      	ldr	r1, [r7, #20]
 8010110:	68f8      	ldr	r0, [r7, #12]
 8010112:	f7ff fb77 	bl	800f804 <clust2sect>
 8010116:	4602      	mov	r2, r0
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	68ba      	ldr	r2, [r7, #8]
 8010120:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	899b      	ldrh	r3, [r3, #12]
 801012c:	461a      	mov	r2, r3
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	fbb3 f0f2 	udiv	r0, r3, r2
 8010134:	fb00 f202 	mul.w	r2, r0, r2
 8010138:	1a9b      	subs	r3, r3, r2
 801013a:	18ca      	adds	r2, r1, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010140:	2300      	movs	r3, #0
}
 8010142:	4618      	mov	r0, r3
 8010144:	3718      	adds	r7, #24
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}

0801014a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801014a:	b580      	push	{r7, lr}
 801014c:	b086      	sub	sp, #24
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
 8010152:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801015a:	2100      	movs	r1, #0
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7ff fe95 	bl	800fe8c <dir_sdi>
 8010162:	4603      	mov	r3, r0
 8010164:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010166:	7dfb      	ldrb	r3, [r7, #23]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d12b      	bne.n	80101c4 <dir_alloc+0x7a>
		n = 0;
 801016c:	2300      	movs	r3, #0
 801016e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	69db      	ldr	r3, [r3, #28]
 8010174:	4619      	mov	r1, r3
 8010176:	68f8      	ldr	r0, [r7, #12]
 8010178:	f7ff faa6 	bl	800f6c8 <move_window>
 801017c:	4603      	mov	r3, r0
 801017e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010180:	7dfb      	ldrb	r3, [r7, #23]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d11d      	bne.n	80101c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6a1b      	ldr	r3, [r3, #32]
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	2be5      	cmp	r3, #229	; 0xe5
 801018e:	d004      	beq.n	801019a <dir_alloc+0x50>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6a1b      	ldr	r3, [r3, #32]
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d107      	bne.n	80101aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	3301      	adds	r3, #1
 801019e:	613b      	str	r3, [r7, #16]
 80101a0:	693a      	ldr	r2, [r7, #16]
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d102      	bne.n	80101ae <dir_alloc+0x64>
 80101a8:	e00c      	b.n	80101c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80101aa:	2300      	movs	r3, #0
 80101ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80101ae:	2101      	movs	r1, #1
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f7ff fef4 	bl	800ff9e <dir_next>
 80101b6:	4603      	mov	r3, r0
 80101b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80101ba:	7dfb      	ldrb	r3, [r7, #23]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d0d7      	beq.n	8010170 <dir_alloc+0x26>
 80101c0:	e000      	b.n	80101c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80101c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80101c4:	7dfb      	ldrb	r3, [r7, #23]
 80101c6:	2b04      	cmp	r3, #4
 80101c8:	d101      	bne.n	80101ce <dir_alloc+0x84>
 80101ca:	2307      	movs	r3, #7
 80101cc:	75fb      	strb	r3, [r7, #23]
	return res;
 80101ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3718      	adds	r7, #24
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b084      	sub	sp, #16
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	331a      	adds	r3, #26
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7fe ffbe 	bl	800f168 <ld_word>
 80101ec:	4603      	mov	r3, r0
 80101ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	781b      	ldrb	r3, [r3, #0]
 80101f4:	2b03      	cmp	r3, #3
 80101f6:	d109      	bne.n	801020c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	3314      	adds	r3, #20
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7fe ffb3 	bl	800f168 <ld_word>
 8010202:	4603      	mov	r3, r0
 8010204:	041b      	lsls	r3, r3, #16
 8010206:	68fa      	ldr	r2, [r7, #12]
 8010208:	4313      	orrs	r3, r2
 801020a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801020c:	68fb      	ldr	r3, [r7, #12]
}
 801020e:	4618      	mov	r0, r3
 8010210:	3710      	adds	r7, #16
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}

08010216 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010216:	b580      	push	{r7, lr}
 8010218:	b084      	sub	sp, #16
 801021a:	af00      	add	r7, sp, #0
 801021c:	60f8      	str	r0, [r7, #12]
 801021e:	60b9      	str	r1, [r7, #8]
 8010220:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	331a      	adds	r3, #26
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	b292      	uxth	r2, r2
 801022a:	4611      	mov	r1, r2
 801022c:	4618      	mov	r0, r3
 801022e:	f7fe ffd6 	bl	800f1de <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	781b      	ldrb	r3, [r3, #0]
 8010236:	2b03      	cmp	r3, #3
 8010238:	d109      	bne.n	801024e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	f103 0214 	add.w	r2, r3, #20
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	0c1b      	lsrs	r3, r3, #16
 8010244:	b29b      	uxth	r3, r3
 8010246:	4619      	mov	r1, r3
 8010248:	4610      	mov	r0, r2
 801024a:	f7fe ffc8 	bl	800f1de <st_word>
	}
}
 801024e:	bf00      	nop
 8010250:	3710      	adds	r7, #16
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010256:	b580      	push	{r7, lr}
 8010258:	b086      	sub	sp, #24
 801025a:	af00      	add	r7, sp, #0
 801025c:	6078      	str	r0, [r7, #4]
 801025e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010260:	2304      	movs	r3, #4
 8010262:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801026a:	e03c      	b.n	80102e6 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	69db      	ldr	r3, [r3, #28]
 8010270:	4619      	mov	r1, r3
 8010272:	6938      	ldr	r0, [r7, #16]
 8010274:	f7ff fa28 	bl	800f6c8 <move_window>
 8010278:	4603      	mov	r3, r0
 801027a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801027c:	7dfb      	ldrb	r3, [r7, #23]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d136      	bne.n	80102f0 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6a1b      	ldr	r3, [r3, #32]
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801028a:	7bfb      	ldrb	r3, [r7, #15]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d102      	bne.n	8010296 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8010290:	2304      	movs	r3, #4
 8010292:	75fb      	strb	r3, [r7, #23]
 8010294:	e031      	b.n	80102fa <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6a1b      	ldr	r3, [r3, #32]
 801029a:	330b      	adds	r3, #11
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102a2:	73bb      	strb	r3, [r7, #14]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	7bba      	ldrb	r2, [r7, #14]
 80102a8:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80102aa:	7bfb      	ldrb	r3, [r7, #15]
 80102ac:	2be5      	cmp	r3, #229	; 0xe5
 80102ae:	d011      	beq.n	80102d4 <dir_read+0x7e>
 80102b0:	7bfb      	ldrb	r3, [r7, #15]
 80102b2:	2b2e      	cmp	r3, #46	; 0x2e
 80102b4:	d00e      	beq.n	80102d4 <dir_read+0x7e>
 80102b6:	7bbb      	ldrb	r3, [r7, #14]
 80102b8:	2b0f      	cmp	r3, #15
 80102ba:	d00b      	beq.n	80102d4 <dir_read+0x7e>
 80102bc:	7bbb      	ldrb	r3, [r7, #14]
 80102be:	f023 0320 	bic.w	r3, r3, #32
 80102c2:	2b08      	cmp	r3, #8
 80102c4:	bf0c      	ite	eq
 80102c6:	2301      	moveq	r3, #1
 80102c8:	2300      	movne	r3, #0
 80102ca:	b2db      	uxtb	r3, r3
 80102cc:	461a      	mov	r2, r3
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d00f      	beq.n	80102f4 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80102d4:	2100      	movs	r1, #0
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f7ff fe61 	bl	800ff9e <dir_next>
 80102dc:	4603      	mov	r3, r0
 80102de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80102e0:	7dfb      	ldrb	r3, [r7, #23]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d108      	bne.n	80102f8 <dir_read+0xa2>
	while (dp->sect) {
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	69db      	ldr	r3, [r3, #28]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d1be      	bne.n	801026c <dir_read+0x16>
 80102ee:	e004      	b.n	80102fa <dir_read+0xa4>
		if (res != FR_OK) break;
 80102f0:	bf00      	nop
 80102f2:	e002      	b.n	80102fa <dir_read+0xa4>
				break;
 80102f4:	bf00      	nop
 80102f6:	e000      	b.n	80102fa <dir_read+0xa4>
		if (res != FR_OK) break;
 80102f8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80102fa:	7dfb      	ldrb	r3, [r7, #23]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d002      	beq.n	8010306 <dir_read+0xb0>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2200      	movs	r2, #0
 8010304:	61da      	str	r2, [r3, #28]
	return res;
 8010306:	7dfb      	ldrb	r3, [r7, #23]
}
 8010308:	4618      	mov	r0, r3
 801030a:	3718      	adds	r7, #24
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}

08010310 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b086      	sub	sp, #24
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801031e:	2100      	movs	r1, #0
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7ff fdb3 	bl	800fe8c <dir_sdi>
 8010326:	4603      	mov	r3, r0
 8010328:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801032a:	7dfb      	ldrb	r3, [r7, #23]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d001      	beq.n	8010334 <dir_find+0x24>
 8010330:	7dfb      	ldrb	r3, [r7, #23]
 8010332:	e03e      	b.n	80103b2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	69db      	ldr	r3, [r3, #28]
 8010338:	4619      	mov	r1, r3
 801033a:	6938      	ldr	r0, [r7, #16]
 801033c:	f7ff f9c4 	bl	800f6c8 <move_window>
 8010340:	4603      	mov	r3, r0
 8010342:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010344:	7dfb      	ldrb	r3, [r7, #23]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d12f      	bne.n	80103aa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6a1b      	ldr	r3, [r3, #32]
 801034e:	781b      	ldrb	r3, [r3, #0]
 8010350:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010352:	7bfb      	ldrb	r3, [r7, #15]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d102      	bne.n	801035e <dir_find+0x4e>
 8010358:	2304      	movs	r3, #4
 801035a:	75fb      	strb	r3, [r7, #23]
 801035c:	e028      	b.n	80103b0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6a1b      	ldr	r3, [r3, #32]
 8010362:	330b      	adds	r3, #11
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801036a:	b2da      	uxtb	r2, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6a1b      	ldr	r3, [r3, #32]
 8010374:	330b      	adds	r3, #11
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	f003 0308 	and.w	r3, r3, #8
 801037c:	2b00      	cmp	r3, #0
 801037e:	d10a      	bne.n	8010396 <dir_find+0x86>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6a18      	ldr	r0, [r3, #32]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	3324      	adds	r3, #36	; 0x24
 8010388:	220b      	movs	r2, #11
 801038a:	4619      	mov	r1, r3
 801038c:	f7fe ffaa 	bl	800f2e4 <mem_cmp>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00b      	beq.n	80103ae <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010396:	2100      	movs	r1, #0
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7ff fe00 	bl	800ff9e <dir_next>
 801039e:	4603      	mov	r3, r0
 80103a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80103a2:	7dfb      	ldrb	r3, [r7, #23]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d0c5      	beq.n	8010334 <dir_find+0x24>
 80103a8:	e002      	b.n	80103b0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80103aa:	bf00      	nop
 80103ac:	e000      	b.n	80103b0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80103ae:	bf00      	nop

	return res;
 80103b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3718      	adds	r7, #24
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b084      	sub	sp, #16
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80103c8:	2101      	movs	r1, #1
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f7ff febd 	bl	801014a <dir_alloc>
 80103d0:	4603      	mov	r3, r0
 80103d2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80103d4:	7bfb      	ldrb	r3, [r7, #15]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d11c      	bne.n	8010414 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	69db      	ldr	r3, [r3, #28]
 80103de:	4619      	mov	r1, r3
 80103e0:	68b8      	ldr	r0, [r7, #8]
 80103e2:	f7ff f971 	bl	800f6c8 <move_window>
 80103e6:	4603      	mov	r3, r0
 80103e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80103ea:	7bfb      	ldrb	r3, [r7, #15]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d111      	bne.n	8010414 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6a1b      	ldr	r3, [r3, #32]
 80103f4:	2220      	movs	r2, #32
 80103f6:	2100      	movs	r1, #0
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7fe ff58 	bl	800f2ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6a18      	ldr	r0, [r3, #32]
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	3324      	adds	r3, #36	; 0x24
 8010406:	220b      	movs	r2, #11
 8010408:	4619      	mov	r1, r3
 801040a:	f7fe ff2f 	bl	800f26c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	2201      	movs	r2, #1
 8010412:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010414:	7bfb      	ldrb	r3, [r7, #15]
}
 8010416:	4618      	mov	r0, r3
 8010418:	3710      	adds	r7, #16
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801041e:	b580      	push	{r7, lr}
 8010420:	b086      	sub	sp, #24
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
 8010426:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	2200      	movs	r2, #0
 801042c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	69db      	ldr	r3, [r3, #28]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d04e      	beq.n	80104d4 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8010436:	2300      	movs	r3, #0
 8010438:	613b      	str	r3, [r7, #16]
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801043e:	e021      	b.n	8010484 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6a1a      	ldr	r2, [r3, #32]
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	1c59      	adds	r1, r3, #1
 8010448:	6179      	str	r1, [r7, #20]
 801044a:	4413      	add	r3, r2
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010450:	7bfb      	ldrb	r3, [r7, #15]
 8010452:	2b20      	cmp	r3, #32
 8010454:	d100      	bne.n	8010458 <get_fileinfo+0x3a>
 8010456:	e015      	b.n	8010484 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010458:	7bfb      	ldrb	r3, [r7, #15]
 801045a:	2b05      	cmp	r3, #5
 801045c:	d101      	bne.n	8010462 <get_fileinfo+0x44>
 801045e:	23e5      	movs	r3, #229	; 0xe5
 8010460:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	2b09      	cmp	r3, #9
 8010466:	d106      	bne.n	8010476 <get_fileinfo+0x58>
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	1c5a      	adds	r2, r3, #1
 801046c:	613a      	str	r2, [r7, #16]
 801046e:	683a      	ldr	r2, [r7, #0]
 8010470:	4413      	add	r3, r2
 8010472:	222e      	movs	r2, #46	; 0x2e
 8010474:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	1c5a      	adds	r2, r3, #1
 801047a:	613a      	str	r2, [r7, #16]
 801047c:	683a      	ldr	r2, [r7, #0]
 801047e:	4413      	add	r3, r2
 8010480:	7bfa      	ldrb	r2, [r7, #15]
 8010482:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	2b0a      	cmp	r3, #10
 8010488:	d9da      	bls.n	8010440 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801048a:	683a      	ldr	r2, [r7, #0]
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	4413      	add	r3, r2
 8010490:	3309      	adds	r3, #9
 8010492:	2200      	movs	r2, #0
 8010494:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6a1b      	ldr	r3, [r3, #32]
 801049a:	7ada      	ldrb	r2, [r3, #11]
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6a1b      	ldr	r3, [r3, #32]
 80104a4:	331c      	adds	r3, #28
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7fe fe76 	bl	800f198 <ld_dword>
 80104ac:	4602      	mov	r2, r0
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6a1b      	ldr	r3, [r3, #32]
 80104b6:	3316      	adds	r3, #22
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7fe fe6d 	bl	800f198 <ld_dword>
 80104be:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	80da      	strh	r2, [r3, #6]
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	0c1b      	lsrs	r3, r3, #16
 80104cc:	b29a      	uxth	r2, r3
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	809a      	strh	r2, [r3, #4]
 80104d2:	e000      	b.n	80104d6 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80104d4:	bf00      	nop
}
 80104d6:	3718      	adds	r7, #24
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b088      	sub	sp, #32
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	60fb      	str	r3, [r7, #12]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	3324      	adds	r3, #36	; 0x24
 80104f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80104f2:	220b      	movs	r2, #11
 80104f4:	2120      	movs	r1, #32
 80104f6:	68b8      	ldr	r0, [r7, #8]
 80104f8:	f7fe fed9 	bl	800f2ae <mem_set>
	si = i = 0; ni = 8;
 80104fc:	2300      	movs	r3, #0
 80104fe:	613b      	str	r3, [r7, #16]
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	61fb      	str	r3, [r7, #28]
 8010504:	2308      	movs	r3, #8
 8010506:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	1c5a      	adds	r2, r3, #1
 801050c:	61fa      	str	r2, [r7, #28]
 801050e:	68fa      	ldr	r2, [r7, #12]
 8010510:	4413      	add	r3, r2
 8010512:	781b      	ldrb	r3, [r3, #0]
 8010514:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010516:	7efb      	ldrb	r3, [r7, #27]
 8010518:	2b20      	cmp	r3, #32
 801051a:	d94e      	bls.n	80105ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801051c:	7efb      	ldrb	r3, [r7, #27]
 801051e:	2b2f      	cmp	r3, #47	; 0x2f
 8010520:	d006      	beq.n	8010530 <create_name+0x54>
 8010522:	7efb      	ldrb	r3, [r7, #27]
 8010524:	2b5c      	cmp	r3, #92	; 0x5c
 8010526:	d110      	bne.n	801054a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010528:	e002      	b.n	8010530 <create_name+0x54>
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	3301      	adds	r3, #1
 801052e:	61fb      	str	r3, [r7, #28]
 8010530:	68fa      	ldr	r2, [r7, #12]
 8010532:	69fb      	ldr	r3, [r7, #28]
 8010534:	4413      	add	r3, r2
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	2b2f      	cmp	r3, #47	; 0x2f
 801053a:	d0f6      	beq.n	801052a <create_name+0x4e>
 801053c:	68fa      	ldr	r2, [r7, #12]
 801053e:	69fb      	ldr	r3, [r7, #28]
 8010540:	4413      	add	r3, r2
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	2b5c      	cmp	r3, #92	; 0x5c
 8010546:	d0f0      	beq.n	801052a <create_name+0x4e>
			break;
 8010548:	e038      	b.n	80105bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801054a:	7efb      	ldrb	r3, [r7, #27]
 801054c:	2b2e      	cmp	r3, #46	; 0x2e
 801054e:	d003      	beq.n	8010558 <create_name+0x7c>
 8010550:	693a      	ldr	r2, [r7, #16]
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	429a      	cmp	r2, r3
 8010556:	d30c      	bcc.n	8010572 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	2b0b      	cmp	r3, #11
 801055c:	d002      	beq.n	8010564 <create_name+0x88>
 801055e:	7efb      	ldrb	r3, [r7, #27]
 8010560:	2b2e      	cmp	r3, #46	; 0x2e
 8010562:	d001      	beq.n	8010568 <create_name+0x8c>
 8010564:	2306      	movs	r3, #6
 8010566:	e044      	b.n	80105f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010568:	2308      	movs	r3, #8
 801056a:	613b      	str	r3, [r7, #16]
 801056c:	230b      	movs	r3, #11
 801056e:	617b      	str	r3, [r7, #20]
			continue;
 8010570:	e022      	b.n	80105b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010572:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010576:	2b00      	cmp	r3, #0
 8010578:	da04      	bge.n	8010584 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801057a:	7efb      	ldrb	r3, [r7, #27]
 801057c:	3b80      	subs	r3, #128	; 0x80
 801057e:	4a1f      	ldr	r2, [pc, #124]	; (80105fc <create_name+0x120>)
 8010580:	5cd3      	ldrb	r3, [r2, r3]
 8010582:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010584:	7efb      	ldrb	r3, [r7, #27]
 8010586:	4619      	mov	r1, r3
 8010588:	481d      	ldr	r0, [pc, #116]	; (8010600 <create_name+0x124>)
 801058a:	f7fe fed2 	bl	800f332 <chk_chr>
 801058e:	4603      	mov	r3, r0
 8010590:	2b00      	cmp	r3, #0
 8010592:	d001      	beq.n	8010598 <create_name+0xbc>
 8010594:	2306      	movs	r3, #6
 8010596:	e02c      	b.n	80105f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010598:	7efb      	ldrb	r3, [r7, #27]
 801059a:	2b60      	cmp	r3, #96	; 0x60
 801059c:	d905      	bls.n	80105aa <create_name+0xce>
 801059e:	7efb      	ldrb	r3, [r7, #27]
 80105a0:	2b7a      	cmp	r3, #122	; 0x7a
 80105a2:	d802      	bhi.n	80105aa <create_name+0xce>
 80105a4:	7efb      	ldrb	r3, [r7, #27]
 80105a6:	3b20      	subs	r3, #32
 80105a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	1c5a      	adds	r2, r3, #1
 80105ae:	613a      	str	r2, [r7, #16]
 80105b0:	68ba      	ldr	r2, [r7, #8]
 80105b2:	4413      	add	r3, r2
 80105b4:	7efa      	ldrb	r2, [r7, #27]
 80105b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80105b8:	e7a6      	b.n	8010508 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80105ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80105bc:	68fa      	ldr	r2, [r7, #12]
 80105be:	69fb      	ldr	r3, [r7, #28]
 80105c0:	441a      	add	r2, r3
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d101      	bne.n	80105d0 <create_name+0xf4>
 80105cc:	2306      	movs	r3, #6
 80105ce:	e010      	b.n	80105f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	2be5      	cmp	r3, #229	; 0xe5
 80105d6:	d102      	bne.n	80105de <create_name+0x102>
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	2205      	movs	r2, #5
 80105dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80105de:	7efb      	ldrb	r3, [r7, #27]
 80105e0:	2b20      	cmp	r3, #32
 80105e2:	d801      	bhi.n	80105e8 <create_name+0x10c>
 80105e4:	2204      	movs	r2, #4
 80105e6:	e000      	b.n	80105ea <create_name+0x10e>
 80105e8:	2200      	movs	r2, #0
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	330b      	adds	r3, #11
 80105ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80105f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3720      	adds	r7, #32
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	08049380 	.word	0x08049380
 8010600:	0801bbcc 	.word	0x0801bbcc

08010604 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b086      	sub	sp, #24
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010618:	e002      	b.n	8010620 <follow_path+0x1c>
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	3301      	adds	r3, #1
 801061e:	603b      	str	r3, [r7, #0]
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	2b2f      	cmp	r3, #47	; 0x2f
 8010626:	d0f8      	beq.n	801061a <follow_path+0x16>
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	2b5c      	cmp	r3, #92	; 0x5c
 801062e:	d0f4      	beq.n	801061a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	2200      	movs	r2, #0
 8010634:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	2b1f      	cmp	r3, #31
 801063c:	d80a      	bhi.n	8010654 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2280      	movs	r2, #128	; 0x80
 8010642:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010646:	2100      	movs	r1, #0
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f7ff fc1f 	bl	800fe8c <dir_sdi>
 801064e:	4603      	mov	r3, r0
 8010650:	75fb      	strb	r3, [r7, #23]
 8010652:	e048      	b.n	80106e6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010654:	463b      	mov	r3, r7
 8010656:	4619      	mov	r1, r3
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f7ff ff3f 	bl	80104dc <create_name>
 801065e:	4603      	mov	r3, r0
 8010660:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010662:	7dfb      	ldrb	r3, [r7, #23]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d139      	bne.n	80106dc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7ff fe51 	bl	8010310 <dir_find>
 801066e:	4603      	mov	r3, r0
 8010670:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010678:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801067a:	7dfb      	ldrb	r3, [r7, #23]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d00a      	beq.n	8010696 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010680:	7dfb      	ldrb	r3, [r7, #23]
 8010682:	2b04      	cmp	r3, #4
 8010684:	d12c      	bne.n	80106e0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010686:	7afb      	ldrb	r3, [r7, #11]
 8010688:	f003 0304 	and.w	r3, r3, #4
 801068c:	2b00      	cmp	r3, #0
 801068e:	d127      	bne.n	80106e0 <follow_path+0xdc>
 8010690:	2305      	movs	r3, #5
 8010692:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010694:	e024      	b.n	80106e0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010696:	7afb      	ldrb	r3, [r7, #11]
 8010698:	f003 0304 	and.w	r3, r3, #4
 801069c:	2b00      	cmp	r3, #0
 801069e:	d121      	bne.n	80106e4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	799b      	ldrb	r3, [r3, #6]
 80106a4:	f003 0310 	and.w	r3, r3, #16
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d102      	bne.n	80106b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80106ac:	2305      	movs	r3, #5
 80106ae:	75fb      	strb	r3, [r7, #23]
 80106b0:	e019      	b.n	80106e6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	695b      	ldr	r3, [r3, #20]
 80106bc:	68fa      	ldr	r2, [r7, #12]
 80106be:	8992      	ldrh	r2, [r2, #12]
 80106c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80106c4:	fb00 f202 	mul.w	r2, r0, r2
 80106c8:	1a9b      	subs	r3, r3, r2
 80106ca:	440b      	add	r3, r1
 80106cc:	4619      	mov	r1, r3
 80106ce:	68f8      	ldr	r0, [r7, #12]
 80106d0:	f7ff fd82 	bl	80101d8 <ld_clust>
 80106d4:	4602      	mov	r2, r0
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80106da:	e7bb      	b.n	8010654 <follow_path+0x50>
			if (res != FR_OK) break;
 80106dc:	bf00      	nop
 80106de:	e002      	b.n	80106e6 <follow_path+0xe2>
				break;
 80106e0:	bf00      	nop
 80106e2:	e000      	b.n	80106e6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80106e4:	bf00      	nop
			}
		}
	}

	return res;
 80106e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3718      	adds	r7, #24
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}

080106f0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80106f0:	b480      	push	{r7}
 80106f2:	b087      	sub	sp, #28
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80106f8:	f04f 33ff 	mov.w	r3, #4294967295
 80106fc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d031      	beq.n	801076a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	617b      	str	r3, [r7, #20]
 801070c:	e002      	b.n	8010714 <get_ldnumber+0x24>
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	3301      	adds	r3, #1
 8010712:	617b      	str	r3, [r7, #20]
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	2b20      	cmp	r3, #32
 801071a:	d903      	bls.n	8010724 <get_ldnumber+0x34>
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	2b3a      	cmp	r3, #58	; 0x3a
 8010722:	d1f4      	bne.n	801070e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	2b3a      	cmp	r3, #58	; 0x3a
 801072a:	d11c      	bne.n	8010766 <get_ldnumber+0x76>
			tp = *path;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	1c5a      	adds	r2, r3, #1
 8010736:	60fa      	str	r2, [r7, #12]
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	3b30      	subs	r3, #48	; 0x30
 801073c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	2b09      	cmp	r3, #9
 8010742:	d80e      	bhi.n	8010762 <get_ldnumber+0x72>
 8010744:	68fa      	ldr	r2, [r7, #12]
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	429a      	cmp	r2, r3
 801074a:	d10a      	bne.n	8010762 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d107      	bne.n	8010762 <get_ldnumber+0x72>
					vol = (int)i;
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	3301      	adds	r3, #1
 801075a:	617b      	str	r3, [r7, #20]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	697a      	ldr	r2, [r7, #20]
 8010760:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	e002      	b.n	801076c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010766:	2300      	movs	r3, #0
 8010768:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801076a:	693b      	ldr	r3, [r7, #16]
}
 801076c:	4618      	mov	r0, r3
 801076e:	371c      	adds	r7, #28
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr

08010778 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2200      	movs	r2, #0
 8010786:	70da      	strb	r2, [r3, #3]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f04f 32ff 	mov.w	r2, #4294967295
 801078e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010790:	6839      	ldr	r1, [r7, #0]
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f7fe ff98 	bl	800f6c8 <move_window>
 8010798:	4603      	mov	r3, r0
 801079a:	2b00      	cmp	r3, #0
 801079c:	d001      	beq.n	80107a2 <check_fs+0x2a>
 801079e:	2304      	movs	r3, #4
 80107a0:	e038      	b.n	8010814 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	3334      	adds	r3, #52	; 0x34
 80107a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fe fcdc 	bl	800f168 <ld_word>
 80107b0:	4603      	mov	r3, r0
 80107b2:	461a      	mov	r2, r3
 80107b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d001      	beq.n	80107c0 <check_fs+0x48>
 80107bc:	2303      	movs	r3, #3
 80107be:	e029      	b.n	8010814 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80107c6:	2be9      	cmp	r3, #233	; 0xe9
 80107c8:	d009      	beq.n	80107de <check_fs+0x66>
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80107d0:	2beb      	cmp	r3, #235	; 0xeb
 80107d2:	d11e      	bne.n	8010812 <check_fs+0x9a>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80107da:	2b90      	cmp	r3, #144	; 0x90
 80107dc:	d119      	bne.n	8010812 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	3334      	adds	r3, #52	; 0x34
 80107e2:	3336      	adds	r3, #54	; 0x36
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7fe fcd7 	bl	800f198 <ld_dword>
 80107ea:	4603      	mov	r3, r0
 80107ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80107f0:	4a0a      	ldr	r2, [pc, #40]	; (801081c <check_fs+0xa4>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d101      	bne.n	80107fa <check_fs+0x82>
 80107f6:	2300      	movs	r3, #0
 80107f8:	e00c      	b.n	8010814 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	3334      	adds	r3, #52	; 0x34
 80107fe:	3352      	adds	r3, #82	; 0x52
 8010800:	4618      	mov	r0, r3
 8010802:	f7fe fcc9 	bl	800f198 <ld_dword>
 8010806:	4603      	mov	r3, r0
 8010808:	4a05      	ldr	r2, [pc, #20]	; (8010820 <check_fs+0xa8>)
 801080a:	4293      	cmp	r3, r2
 801080c:	d101      	bne.n	8010812 <check_fs+0x9a>
 801080e:	2300      	movs	r3, #0
 8010810:	e000      	b.n	8010814 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010812:	2302      	movs	r3, #2
}
 8010814:	4618      	mov	r0, r3
 8010816:	3708      	adds	r7, #8
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	00544146 	.word	0x00544146
 8010820:	33544146 	.word	0x33544146

08010824 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b096      	sub	sp, #88	; 0x58
 8010828:	af00      	add	r7, sp, #0
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	4613      	mov	r3, r2
 8010830:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	2200      	movs	r2, #0
 8010836:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010838:	68f8      	ldr	r0, [r7, #12]
 801083a:	f7ff ff59 	bl	80106f0 <get_ldnumber>
 801083e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010842:	2b00      	cmp	r3, #0
 8010844:	da01      	bge.n	801084a <find_volume+0x26>
 8010846:	230b      	movs	r3, #11
 8010848:	e262      	b.n	8010d10 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801084a:	4a9f      	ldr	r2, [pc, #636]	; (8010ac8 <find_volume+0x2a4>)
 801084c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801084e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010852:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010856:	2b00      	cmp	r3, #0
 8010858:	d101      	bne.n	801085e <find_volume+0x3a>
 801085a:	230c      	movs	r3, #12
 801085c:	e258      	b.n	8010d10 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010862:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010864:	79fb      	ldrb	r3, [r7, #7]
 8010866:	f023 0301 	bic.w	r3, r3, #1
 801086a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801086c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d01a      	beq.n	80108aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010876:	785b      	ldrb	r3, [r3, #1]
 8010878:	4618      	mov	r0, r3
 801087a:	f7fe fbd7 	bl	800f02c <disk_status>
 801087e:	4603      	mov	r3, r0
 8010880:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010884:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010888:	f003 0301 	and.w	r3, r3, #1
 801088c:	2b00      	cmp	r3, #0
 801088e:	d10c      	bne.n	80108aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010890:	79fb      	ldrb	r3, [r7, #7]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d007      	beq.n	80108a6 <find_volume+0x82>
 8010896:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801089a:	f003 0304 	and.w	r3, r3, #4
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d001      	beq.n	80108a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80108a2:	230a      	movs	r3, #10
 80108a4:	e234      	b.n	8010d10 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80108a6:	2300      	movs	r3, #0
 80108a8:	e232      	b.n	8010d10 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80108aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ac:	2200      	movs	r2, #0
 80108ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80108b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108b2:	b2da      	uxtb	r2, r3
 80108b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80108b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ba:	785b      	ldrb	r3, [r3, #1]
 80108bc:	4618      	mov	r0, r3
 80108be:	f7fe fbcf 	bl	800f060 <disk_initialize>
 80108c2:	4603      	mov	r3, r0
 80108c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80108c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80108cc:	f003 0301 	and.w	r3, r3, #1
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d001      	beq.n	80108d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80108d4:	2303      	movs	r3, #3
 80108d6:	e21b      	b.n	8010d10 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80108d8:	79fb      	ldrb	r3, [r7, #7]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d007      	beq.n	80108ee <find_volume+0xca>
 80108de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80108e2:	f003 0304 	and.w	r3, r3, #4
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d001      	beq.n	80108ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80108ea:	230a      	movs	r3, #10
 80108ec:	e210      	b.n	8010d10 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80108ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f0:	7858      	ldrb	r0, [r3, #1]
 80108f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f4:	330c      	adds	r3, #12
 80108f6:	461a      	mov	r2, r3
 80108f8:	2102      	movs	r1, #2
 80108fa:	f7fe fc17 	bl	800f12c <disk_ioctl>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	d001      	beq.n	8010908 <find_volume+0xe4>
 8010904:	2301      	movs	r3, #1
 8010906:	e203      	b.n	8010d10 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090a:	899b      	ldrh	r3, [r3, #12]
 801090c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010910:	d80d      	bhi.n	801092e <find_volume+0x10a>
 8010912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010914:	899b      	ldrh	r3, [r3, #12]
 8010916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801091a:	d308      	bcc.n	801092e <find_volume+0x10a>
 801091c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801091e:	899b      	ldrh	r3, [r3, #12]
 8010920:	461a      	mov	r2, r3
 8010922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010924:	899b      	ldrh	r3, [r3, #12]
 8010926:	3b01      	subs	r3, #1
 8010928:	4013      	ands	r3, r2
 801092a:	2b00      	cmp	r3, #0
 801092c:	d001      	beq.n	8010932 <find_volume+0x10e>
 801092e:	2301      	movs	r3, #1
 8010930:	e1ee      	b.n	8010d10 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010932:	2300      	movs	r3, #0
 8010934:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010936:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010938:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801093a:	f7ff ff1d 	bl	8010778 <check_fs>
 801093e:	4603      	mov	r3, r0
 8010940:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010944:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010948:	2b02      	cmp	r3, #2
 801094a:	d149      	bne.n	80109e0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801094c:	2300      	movs	r3, #0
 801094e:	643b      	str	r3, [r7, #64]	; 0x40
 8010950:	e01e      	b.n	8010990 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010954:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801095a:	011b      	lsls	r3, r3, #4
 801095c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010960:	4413      	add	r3, r2
 8010962:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010966:	3304      	adds	r3, #4
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d006      	beq.n	801097c <find_volume+0x158>
 801096e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010970:	3308      	adds	r3, #8
 8010972:	4618      	mov	r0, r3
 8010974:	f7fe fc10 	bl	800f198 <ld_dword>
 8010978:	4602      	mov	r2, r0
 801097a:	e000      	b.n	801097e <find_volume+0x15a>
 801097c:	2200      	movs	r2, #0
 801097e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010980:	009b      	lsls	r3, r3, #2
 8010982:	3358      	adds	r3, #88	; 0x58
 8010984:	443b      	add	r3, r7
 8010986:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801098a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801098c:	3301      	adds	r3, #1
 801098e:	643b      	str	r3, [r7, #64]	; 0x40
 8010990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010992:	2b03      	cmp	r3, #3
 8010994:	d9dd      	bls.n	8010952 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010996:	2300      	movs	r3, #0
 8010998:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801099a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801099c:	2b00      	cmp	r3, #0
 801099e:	d002      	beq.n	80109a6 <find_volume+0x182>
 80109a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109a2:	3b01      	subs	r3, #1
 80109a4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80109a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	3358      	adds	r3, #88	; 0x58
 80109ac:	443b      	add	r3, r7
 80109ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80109b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80109b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d005      	beq.n	80109c6 <find_volume+0x1a2>
 80109ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80109bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80109be:	f7ff fedb 	bl	8010778 <check_fs>
 80109c2:	4603      	mov	r3, r0
 80109c4:	e000      	b.n	80109c8 <find_volume+0x1a4>
 80109c6:	2303      	movs	r3, #3
 80109c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80109cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	d905      	bls.n	80109e0 <find_volume+0x1bc>
 80109d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109d6:	3301      	adds	r3, #1
 80109d8:	643b      	str	r3, [r7, #64]	; 0x40
 80109da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109dc:	2b03      	cmp	r3, #3
 80109de:	d9e2      	bls.n	80109a6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80109e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109e4:	2b04      	cmp	r3, #4
 80109e6:	d101      	bne.n	80109ec <find_volume+0x1c8>
 80109e8:	2301      	movs	r3, #1
 80109ea:	e191      	b.n	8010d10 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80109ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	d901      	bls.n	80109f8 <find_volume+0x1d4>
 80109f4:	230d      	movs	r3, #13
 80109f6:	e18b      	b.n	8010d10 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80109f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fa:	3334      	adds	r3, #52	; 0x34
 80109fc:	330b      	adds	r3, #11
 80109fe:	4618      	mov	r0, r3
 8010a00:	f7fe fbb2 	bl	800f168 <ld_word>
 8010a04:	4603      	mov	r3, r0
 8010a06:	461a      	mov	r2, r3
 8010a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0a:	899b      	ldrh	r3, [r3, #12]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d001      	beq.n	8010a14 <find_volume+0x1f0>
 8010a10:	230d      	movs	r3, #13
 8010a12:	e17d      	b.n	8010d10 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a16:	3334      	adds	r3, #52	; 0x34
 8010a18:	3316      	adds	r3, #22
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7fe fba4 	bl	800f168 <ld_word>
 8010a20:	4603      	mov	r3, r0
 8010a22:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d106      	bne.n	8010a38 <find_volume+0x214>
 8010a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2c:	3334      	adds	r3, #52	; 0x34
 8010a2e:	3324      	adds	r3, #36	; 0x24
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7fe fbb1 	bl	800f198 <ld_dword>
 8010a36:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a3c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a40:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4a:	789b      	ldrb	r3, [r3, #2]
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d005      	beq.n	8010a5c <find_volume+0x238>
 8010a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a52:	789b      	ldrb	r3, [r3, #2]
 8010a54:	2b02      	cmp	r3, #2
 8010a56:	d001      	beq.n	8010a5c <find_volume+0x238>
 8010a58:	230d      	movs	r3, #13
 8010a5a:	e159      	b.n	8010d10 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a5e:	789b      	ldrb	r3, [r3, #2]
 8010a60:	461a      	mov	r2, r3
 8010a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a64:	fb02 f303 	mul.w	r3, r2, r3
 8010a68:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a70:	b29a      	uxth	r2, r3
 8010a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a78:	895b      	ldrh	r3, [r3, #10]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d008      	beq.n	8010a90 <find_volume+0x26c>
 8010a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a80:	895b      	ldrh	r3, [r3, #10]
 8010a82:	461a      	mov	r2, r3
 8010a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a86:	895b      	ldrh	r3, [r3, #10]
 8010a88:	3b01      	subs	r3, #1
 8010a8a:	4013      	ands	r3, r2
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d001      	beq.n	8010a94 <find_volume+0x270>
 8010a90:	230d      	movs	r3, #13
 8010a92:	e13d      	b.n	8010d10 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a96:	3334      	adds	r3, #52	; 0x34
 8010a98:	3311      	adds	r3, #17
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7fe fb64 	bl	800f168 <ld_word>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aaa:	891b      	ldrh	r3, [r3, #8]
 8010aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010aae:	8992      	ldrh	r2, [r2, #12]
 8010ab0:	0952      	lsrs	r2, r2, #5
 8010ab2:	b292      	uxth	r2, r2
 8010ab4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ab8:	fb01 f202 	mul.w	r2, r1, r2
 8010abc:	1a9b      	subs	r3, r3, r2
 8010abe:	b29b      	uxth	r3, r3
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d003      	beq.n	8010acc <find_volume+0x2a8>
 8010ac4:	230d      	movs	r3, #13
 8010ac6:	e123      	b.n	8010d10 <find_volume+0x4ec>
 8010ac8:	20005d60 	.word	0x20005d60

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ace:	3334      	adds	r3, #52	; 0x34
 8010ad0:	3313      	adds	r3, #19
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7fe fb48 	bl	800f168 <ld_word>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d106      	bne.n	8010af0 <find_volume+0x2cc>
 8010ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae4:	3334      	adds	r3, #52	; 0x34
 8010ae6:	3320      	adds	r3, #32
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7fe fb55 	bl	800f198 <ld_dword>
 8010aee:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af2:	3334      	adds	r3, #52	; 0x34
 8010af4:	330e      	adds	r3, #14
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7fe fb36 	bl	800f168 <ld_word>
 8010afc:	4603      	mov	r3, r0
 8010afe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010b00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d101      	bne.n	8010b0a <find_volume+0x2e6>
 8010b06:	230d      	movs	r3, #13
 8010b08:	e102      	b.n	8010d10 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010b0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b0e:	4413      	add	r3, r2
 8010b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b12:	8911      	ldrh	r1, [r2, #8]
 8010b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b16:	8992      	ldrh	r2, [r2, #12]
 8010b18:	0952      	lsrs	r2, r2, #5
 8010b1a:	b292      	uxth	r2, r2
 8010b1c:	fbb1 f2f2 	udiv	r2, r1, r2
 8010b20:	b292      	uxth	r2, r2
 8010b22:	4413      	add	r3, r2
 8010b24:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d201      	bcs.n	8010b32 <find_volume+0x30e>
 8010b2e:	230d      	movs	r3, #13
 8010b30:	e0ee      	b.n	8010d10 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b36:	1ad3      	subs	r3, r2, r3
 8010b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b3a:	8952      	ldrh	r2, [r2, #10]
 8010b3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b40:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d101      	bne.n	8010b4c <find_volume+0x328>
 8010b48:	230d      	movs	r3, #13
 8010b4a:	e0e1      	b.n	8010d10 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8010b4c:	2303      	movs	r3, #3
 8010b4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b54:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	d802      	bhi.n	8010b62 <find_volume+0x33e>
 8010b5c:	2302      	movs	r3, #2
 8010b5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b64:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d802      	bhi.n	8010b72 <find_volume+0x34e>
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b74:	1c9a      	adds	r2, r3, #2
 8010b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b78:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b7e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010b80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b84:	441a      	add	r2, r3
 8010b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b88:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010b8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8e:	441a      	add	r2, r3
 8010b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b92:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8010b94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010b98:	2b03      	cmp	r3, #3
 8010b9a:	d11e      	bne.n	8010bda <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b9e:	3334      	adds	r3, #52	; 0x34
 8010ba0:	332a      	adds	r3, #42	; 0x2a
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7fe fae0 	bl	800f168 <ld_word>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d001      	beq.n	8010bb2 <find_volume+0x38e>
 8010bae:	230d      	movs	r3, #13
 8010bb0:	e0ae      	b.n	8010d10 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bb4:	891b      	ldrh	r3, [r3, #8]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d001      	beq.n	8010bbe <find_volume+0x39a>
 8010bba:	230d      	movs	r3, #13
 8010bbc:	e0a8      	b.n	8010d10 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bc0:	3334      	adds	r3, #52	; 0x34
 8010bc2:	332c      	adds	r3, #44	; 0x2c
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7fe fae7 	bl	800f198 <ld_dword>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bce:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bd2:	699b      	ldr	r3, [r3, #24]
 8010bd4:	009b      	lsls	r3, r3, #2
 8010bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8010bd8:	e01f      	b.n	8010c1a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bdc:	891b      	ldrh	r3, [r3, #8]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d101      	bne.n	8010be6 <find_volume+0x3c2>
 8010be2:	230d      	movs	r3, #13
 8010be4:	e094      	b.n	8010d10 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bec:	441a      	add	r2, r3
 8010bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bf0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010bf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010bf6:	2b02      	cmp	r3, #2
 8010bf8:	d103      	bne.n	8010c02 <find_volume+0x3de>
 8010bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bfc:	699b      	ldr	r3, [r3, #24]
 8010bfe:	005b      	lsls	r3, r3, #1
 8010c00:	e00a      	b.n	8010c18 <find_volume+0x3f4>
 8010c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c04:	699a      	ldr	r2, [r3, #24]
 8010c06:	4613      	mov	r3, r2
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	4413      	add	r3, r2
 8010c0c:	085a      	lsrs	r2, r3, #1
 8010c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c10:	699b      	ldr	r3, [r3, #24]
 8010c12:	f003 0301 	and.w	r3, r3, #1
 8010c16:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010c18:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c1c:	69da      	ldr	r2, [r3, #28]
 8010c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c20:	899b      	ldrh	r3, [r3, #12]
 8010c22:	4619      	mov	r1, r3
 8010c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c26:	440b      	add	r3, r1
 8010c28:	3b01      	subs	r3, #1
 8010c2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c2c:	8989      	ldrh	r1, [r1, #12]
 8010c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d201      	bcs.n	8010c3a <find_volume+0x416>
 8010c36:	230d      	movs	r3, #13
 8010c38:	e06a      	b.n	8010d10 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c40:	615a      	str	r2, [r3, #20]
 8010c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c44:	695a      	ldr	r2, [r3, #20]
 8010c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c48:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4c:	2280      	movs	r2, #128	; 0x80
 8010c4e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010c50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c54:	2b03      	cmp	r3, #3
 8010c56:	d149      	bne.n	8010cec <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5a:	3334      	adds	r3, #52	; 0x34
 8010c5c:	3330      	adds	r3, #48	; 0x30
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fe fa82 	bl	800f168 <ld_word>
 8010c64:	4603      	mov	r3, r0
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d140      	bne.n	8010cec <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	4619      	mov	r1, r3
 8010c70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010c72:	f7fe fd29 	bl	800f6c8 <move_window>
 8010c76:	4603      	mov	r3, r0
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d137      	bne.n	8010cec <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8010c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c7e:	2200      	movs	r2, #0
 8010c80:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c84:	3334      	adds	r3, #52	; 0x34
 8010c86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7fe fa6c 	bl	800f168 <ld_word>
 8010c90:	4603      	mov	r3, r0
 8010c92:	461a      	mov	r2, r3
 8010c94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d127      	bne.n	8010cec <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9e:	3334      	adds	r3, #52	; 0x34
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7fe fa79 	bl	800f198 <ld_dword>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	4a1b      	ldr	r2, [pc, #108]	; (8010d18 <find_volume+0x4f4>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d11e      	bne.n	8010cec <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb0:	3334      	adds	r3, #52	; 0x34
 8010cb2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7fe fa6e 	bl	800f198 <ld_dword>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	4a17      	ldr	r2, [pc, #92]	; (8010d1c <find_volume+0x4f8>)
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	d113      	bne.n	8010cec <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc6:	3334      	adds	r3, #52	; 0x34
 8010cc8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f7fe fa63 	bl	800f198 <ld_dword>
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cda:	3334      	adds	r3, #52	; 0x34
 8010cdc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7fe fa59 	bl	800f198 <ld_dword>
 8010ce6:	4602      	mov	r2, r0
 8010ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cea:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010cf2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010cf4:	4b0a      	ldr	r3, [pc, #40]	; (8010d20 <find_volume+0x4fc>)
 8010cf6:	881b      	ldrh	r3, [r3, #0]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	b29a      	uxth	r2, r3
 8010cfc:	4b08      	ldr	r3, [pc, #32]	; (8010d20 <find_volume+0x4fc>)
 8010cfe:	801a      	strh	r2, [r3, #0]
 8010d00:	4b07      	ldr	r3, [pc, #28]	; (8010d20 <find_volume+0x4fc>)
 8010d02:	881a      	ldrh	r2, [r3, #0]
 8010d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d06:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010d08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d0a:	f7fe fc75 	bl	800f5f8 <clear_lock>
#endif
	return FR_OK;
 8010d0e:	2300      	movs	r3, #0
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3758      	adds	r7, #88	; 0x58
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	41615252 	.word	0x41615252
 8010d1c:	61417272 	.word	0x61417272
 8010d20:	20005d64 	.word	0x20005d64

08010d24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b084      	sub	sp, #16
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010d2e:	2309      	movs	r3, #9
 8010d30:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d01c      	beq.n	8010d72 <validate+0x4e>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d018      	beq.n	8010d72 <validate+0x4e>
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d013      	beq.n	8010d72 <validate+0x4e>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	889a      	ldrh	r2, [r3, #4]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	88db      	ldrh	r3, [r3, #6]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d10c      	bne.n	8010d72 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	785b      	ldrb	r3, [r3, #1]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fe f964 	bl	800f02c <disk_status>
 8010d64:	4603      	mov	r3, r0
 8010d66:	f003 0301 	and.w	r3, r3, #1
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d101      	bne.n	8010d72 <validate+0x4e>
			res = FR_OK;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010d72:	7bfb      	ldrb	r3, [r7, #15]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d102      	bne.n	8010d7e <validate+0x5a>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	e000      	b.n	8010d80 <validate+0x5c>
 8010d7e:	2300      	movs	r3, #0
 8010d80:	683a      	ldr	r2, [r7, #0]
 8010d82:	6013      	str	r3, [r2, #0]
	return res;
 8010d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3710      	adds	r7, #16
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
	...

08010d90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b088      	sub	sp, #32
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	60f8      	str	r0, [r7, #12]
 8010d98:	60b9      	str	r1, [r7, #8]
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010da2:	f107 0310 	add.w	r3, r7, #16
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7ff fca2 	bl	80106f0 <get_ldnumber>
 8010dac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	da01      	bge.n	8010db8 <f_mount+0x28>
 8010db4:	230b      	movs	r3, #11
 8010db6:	e02b      	b.n	8010e10 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010db8:	4a17      	ldr	r2, [pc, #92]	; (8010e18 <f_mount+0x88>)
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dc0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010dc2:	69bb      	ldr	r3, [r7, #24]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d005      	beq.n	8010dd4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010dc8:	69b8      	ldr	r0, [r7, #24]
 8010dca:	f7fe fc15 	bl	800f5f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010dce:	69bb      	ldr	r3, [r7, #24]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d002      	beq.n	8010de0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010de0:	68fa      	ldr	r2, [r7, #12]
 8010de2:	490d      	ldr	r1, [pc, #52]	; (8010e18 <f_mount+0x88>)
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d002      	beq.n	8010df6 <f_mount+0x66>
 8010df0:	79fb      	ldrb	r3, [r7, #7]
 8010df2:	2b01      	cmp	r3, #1
 8010df4:	d001      	beq.n	8010dfa <f_mount+0x6a>
 8010df6:	2300      	movs	r3, #0
 8010df8:	e00a      	b.n	8010e10 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010dfa:	f107 010c 	add.w	r1, r7, #12
 8010dfe:	f107 0308 	add.w	r3, r7, #8
 8010e02:	2200      	movs	r2, #0
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7ff fd0d 	bl	8010824 <find_volume>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3720      	adds	r7, #32
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	20005d60 	.word	0x20005d60

08010e1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b098      	sub	sp, #96	; 0x60
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	4613      	mov	r3, r2
 8010e28:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d101      	bne.n	8010e34 <f_open+0x18>
 8010e30:	2309      	movs	r3, #9
 8010e32:	e1bb      	b.n	80111ac <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010e34:	79fb      	ldrb	r3, [r7, #7]
 8010e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e3a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010e3c:	79fa      	ldrb	r2, [r7, #7]
 8010e3e:	f107 0110 	add.w	r1, r7, #16
 8010e42:	f107 0308 	add.w	r3, r7, #8
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7ff fcec 	bl	8010824 <find_volume>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010e52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	f040 819f 	bne.w	801119a <f_open+0x37e>
		dj.obj.fs = fs;
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010e60:	68ba      	ldr	r2, [r7, #8]
 8010e62:	f107 0314 	add.w	r3, r7, #20
 8010e66:	4611      	mov	r1, r2
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7ff fbcb 	bl	8010604 <follow_path>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010e74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d11a      	bne.n	8010eb2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010e7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e80:	b25b      	sxtb	r3, r3
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	da03      	bge.n	8010e8e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010e86:	2306      	movs	r3, #6
 8010e88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010e8c:	e011      	b.n	8010eb2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e8e:	79fb      	ldrb	r3, [r7, #7]
 8010e90:	f023 0301 	bic.w	r3, r3, #1
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	bf14      	ite	ne
 8010e98:	2301      	movne	r3, #1
 8010e9a:	2300      	moveq	r3, #0
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	f107 0314 	add.w	r3, r7, #20
 8010ea4:	4611      	mov	r1, r2
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7fe fa5e 	bl	800f368 <chk_lock>
 8010eac:	4603      	mov	r3, r0
 8010eae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010eb2:	79fb      	ldrb	r3, [r7, #7]
 8010eb4:	f003 031c 	and.w	r3, r3, #28
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d07f      	beq.n	8010fbc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010ebc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d017      	beq.n	8010ef4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ec8:	2b04      	cmp	r3, #4
 8010eca:	d10e      	bne.n	8010eea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010ecc:	f7fe faa8 	bl	800f420 <enq_lock>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d006      	beq.n	8010ee4 <f_open+0xc8>
 8010ed6:	f107 0314 	add.w	r3, r7, #20
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7ff fa6d 	bl	80103ba <dir_register>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	e000      	b.n	8010ee6 <f_open+0xca>
 8010ee4:	2312      	movs	r3, #18
 8010ee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010eea:	79fb      	ldrb	r3, [r7, #7]
 8010eec:	f043 0308 	orr.w	r3, r3, #8
 8010ef0:	71fb      	strb	r3, [r7, #7]
 8010ef2:	e010      	b.n	8010f16 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010ef4:	7ebb      	ldrb	r3, [r7, #26]
 8010ef6:	f003 0311 	and.w	r3, r3, #17
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d003      	beq.n	8010f06 <f_open+0xea>
					res = FR_DENIED;
 8010efe:	2307      	movs	r3, #7
 8010f00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010f04:	e007      	b.n	8010f16 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010f06:	79fb      	ldrb	r3, [r7, #7]
 8010f08:	f003 0304 	and.w	r3, r3, #4
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d002      	beq.n	8010f16 <f_open+0xfa>
 8010f10:	2308      	movs	r3, #8
 8010f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010f16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d168      	bne.n	8010ff0 <f_open+0x1d4>
 8010f1e:	79fb      	ldrb	r3, [r7, #7]
 8010f20:	f003 0308 	and.w	r3, r3, #8
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d063      	beq.n	8010ff0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010f28:	f7fd ff14 	bl	800ed54 <get_fattime>
 8010f2c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f30:	330e      	adds	r3, #14
 8010f32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7fe f96d 	bl	800f214 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f3c:	3316      	adds	r3, #22
 8010f3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fe f967 	bl	800f214 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f48:	330b      	adds	r3, #11
 8010f4a:	2220      	movs	r2, #32
 8010f4c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f52:	4611      	mov	r1, r2
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7ff f93f 	bl	80101d8 <ld_clust>
 8010f5a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010f60:	2200      	movs	r2, #0
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7ff f957 	bl	8010216 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f6a:	331c      	adds	r3, #28
 8010f6c:	2100      	movs	r1, #0
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7fe f950 	bl	800f214 <st_dword>
					fs->wflag = 1;
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	2201      	movs	r2, #1
 8010f78:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d037      	beq.n	8010ff0 <f_open+0x1d4>
						dw = fs->winsect;
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f84:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010f86:	f107 0314 	add.w	r3, r7, #20
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7fe fe47 	bl	800fc22 <remove_chain>
 8010f94:	4603      	mov	r3, r0
 8010f96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d126      	bne.n	8010ff0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fe fb8e 	bl	800f6c8 <move_window>
 8010fac:	4603      	mov	r3, r0
 8010fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010fb6:	3a01      	subs	r2, #1
 8010fb8:	611a      	str	r2, [r3, #16]
 8010fba:	e019      	b.n	8010ff0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d115      	bne.n	8010ff0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010fc4:	7ebb      	ldrb	r3, [r7, #26]
 8010fc6:	f003 0310 	and.w	r3, r3, #16
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d003      	beq.n	8010fd6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8010fce:	2304      	movs	r3, #4
 8010fd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010fd4:	e00c      	b.n	8010ff0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010fd6:	79fb      	ldrb	r3, [r7, #7]
 8010fd8:	f003 0302 	and.w	r3, r3, #2
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d007      	beq.n	8010ff0 <f_open+0x1d4>
 8010fe0:	7ebb      	ldrb	r3, [r7, #26]
 8010fe2:	f003 0301 	and.w	r3, r3, #1
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d002      	beq.n	8010ff0 <f_open+0x1d4>
						res = FR_DENIED;
 8010fea:	2307      	movs	r3, #7
 8010fec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d128      	bne.n	801104a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010ff8:	79fb      	ldrb	r3, [r7, #7]
 8010ffa:	f003 0308 	and.w	r3, r3, #8
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d003      	beq.n	801100a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8011002:	79fb      	ldrb	r3, [r7, #7]
 8011004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011008:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011018:	79fb      	ldrb	r3, [r7, #7]
 801101a:	f023 0301 	bic.w	r3, r3, #1
 801101e:	2b00      	cmp	r3, #0
 8011020:	bf14      	ite	ne
 8011022:	2301      	movne	r3, #1
 8011024:	2300      	moveq	r3, #0
 8011026:	b2db      	uxtb	r3, r3
 8011028:	461a      	mov	r2, r3
 801102a:	f107 0314 	add.w	r3, r7, #20
 801102e:	4611      	mov	r1, r2
 8011030:	4618      	mov	r0, r3
 8011032:	f7fe fa17 	bl	800f464 <inc_lock>
 8011036:	4602      	mov	r2, r0
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	691b      	ldr	r3, [r3, #16]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d102      	bne.n	801104a <f_open+0x22e>
 8011044:	2302      	movs	r3, #2
 8011046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801104a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801104e:	2b00      	cmp	r3, #0
 8011050:	f040 80a3 	bne.w	801119a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011058:	4611      	mov	r1, r2
 801105a:	4618      	mov	r0, r3
 801105c:	f7ff f8bc 	bl	80101d8 <ld_clust>
 8011060:	4602      	mov	r2, r0
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011068:	331c      	adds	r3, #28
 801106a:	4618      	mov	r0, r3
 801106c:	f7fe f894 	bl	800f198 <ld_dword>
 8011070:	4602      	mov	r2, r0
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	2200      	movs	r2, #0
 801107a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801107c:	693a      	ldr	r2, [r7, #16]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	88da      	ldrh	r2, [r3, #6]
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	79fa      	ldrb	r2, [r7, #7]
 801108e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2200      	movs	r2, #0
 8011094:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2200      	movs	r2, #0
 801109a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2200      	movs	r2, #0
 80110a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	3330      	adds	r3, #48	; 0x30
 80110a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80110aa:	2100      	movs	r1, #0
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7fe f8fe 	bl	800f2ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80110b2:	79fb      	ldrb	r3, [r7, #7]
 80110b4:	f003 0320 	and.w	r3, r3, #32
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d06e      	beq.n	801119a <f_open+0x37e>
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d06a      	beq.n	801119a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	68da      	ldr	r2, [r3, #12]
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	895b      	ldrh	r3, [r3, #10]
 80110d0:	461a      	mov	r2, r3
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	899b      	ldrh	r3, [r3, #12]
 80110d6:	fb02 f303 	mul.w	r3, r2, r3
 80110da:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	689b      	ldr	r3, [r3, #8]
 80110e0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	657b      	str	r3, [r7, #84]	; 0x54
 80110e8:	e016      	b.n	8011118 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7fe fba7 	bl	800f842 <get_fat>
 80110f4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80110f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80110f8:	2b01      	cmp	r3, #1
 80110fa:	d802      	bhi.n	8011102 <f_open+0x2e6>
 80110fc:	2302      	movs	r3, #2
 80110fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011108:	d102      	bne.n	8011110 <f_open+0x2f4>
 801110a:	2301      	movs	r3, #1
 801110c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011110:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011114:	1ad3      	subs	r3, r2, r3
 8011116:	657b      	str	r3, [r7, #84]	; 0x54
 8011118:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801111c:	2b00      	cmp	r3, #0
 801111e:	d103      	bne.n	8011128 <f_open+0x30c>
 8011120:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011124:	429a      	cmp	r2, r3
 8011126:	d8e0      	bhi.n	80110ea <f_open+0x2ce>
				}
				fp->clust = clst;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801112c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801112e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011132:	2b00      	cmp	r3, #0
 8011134:	d131      	bne.n	801119a <f_open+0x37e>
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	899b      	ldrh	r3, [r3, #12]
 801113a:	461a      	mov	r2, r3
 801113c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801113e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011142:	fb01 f202 	mul.w	r2, r1, r2
 8011146:	1a9b      	subs	r3, r3, r2
 8011148:	2b00      	cmp	r3, #0
 801114a:	d026      	beq.n	801119a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801114c:	693b      	ldr	r3, [r7, #16]
 801114e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011150:	4618      	mov	r0, r3
 8011152:	f7fe fb57 	bl	800f804 <clust2sect>
 8011156:	6478      	str	r0, [r7, #68]	; 0x44
 8011158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801115a:	2b00      	cmp	r3, #0
 801115c:	d103      	bne.n	8011166 <f_open+0x34a>
						res = FR_INT_ERR;
 801115e:	2302      	movs	r3, #2
 8011160:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011164:	e019      	b.n	801119a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011166:	693b      	ldr	r3, [r7, #16]
 8011168:	899b      	ldrh	r3, [r3, #12]
 801116a:	461a      	mov	r2, r3
 801116c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801116e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011174:	441a      	add	r2, r3
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	7858      	ldrb	r0, [r3, #1]
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	6a1a      	ldr	r2, [r3, #32]
 8011188:	2301      	movs	r3, #1
 801118a:	f7fd ff8f 	bl	800f0ac <disk_read>
 801118e:	4603      	mov	r3, r0
 8011190:	2b00      	cmp	r3, #0
 8011192:	d002      	beq.n	801119a <f_open+0x37e>
 8011194:	2301      	movs	r3, #1
 8011196:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801119a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d002      	beq.n	80111a8 <f_open+0x38c>
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2200      	movs	r2, #0
 80111a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80111a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3760      	adds	r7, #96	; 0x60
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b08e      	sub	sp, #56	; 0x38
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	607a      	str	r2, [r7, #4]
 80111c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	2200      	movs	r2, #0
 80111ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	f107 0214 	add.w	r2, r7, #20
 80111d2:	4611      	mov	r1, r2
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7ff fda5 	bl	8010d24 <validate>
 80111da:	4603      	mov	r3, r0
 80111dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80111e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d107      	bne.n	80111f8 <f_read+0x44>
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	7d5b      	ldrb	r3, [r3, #21]
 80111ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80111f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d002      	beq.n	80111fe <f_read+0x4a>
 80111f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80111fc:	e135      	b.n	801146a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	7d1b      	ldrb	r3, [r3, #20]
 8011202:	f003 0301 	and.w	r3, r3, #1
 8011206:	2b00      	cmp	r3, #0
 8011208:	d101      	bne.n	801120e <f_read+0x5a>
 801120a:	2307      	movs	r3, #7
 801120c:	e12d      	b.n	801146a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	68da      	ldr	r2, [r3, #12]
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	699b      	ldr	r3, [r3, #24]
 8011216:	1ad3      	subs	r3, r2, r3
 8011218:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801121a:	687a      	ldr	r2, [r7, #4]
 801121c:	6a3b      	ldr	r3, [r7, #32]
 801121e:	429a      	cmp	r2, r3
 8011220:	f240 811e 	bls.w	8011460 <f_read+0x2ac>
 8011224:	6a3b      	ldr	r3, [r7, #32]
 8011226:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011228:	e11a      	b.n	8011460 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	699b      	ldr	r3, [r3, #24]
 801122e:	697a      	ldr	r2, [r7, #20]
 8011230:	8992      	ldrh	r2, [r2, #12]
 8011232:	fbb3 f1f2 	udiv	r1, r3, r2
 8011236:	fb01 f202 	mul.w	r2, r1, r2
 801123a:	1a9b      	subs	r3, r3, r2
 801123c:	2b00      	cmp	r3, #0
 801123e:	f040 80d5 	bne.w	80113ec <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	699b      	ldr	r3, [r3, #24]
 8011246:	697a      	ldr	r2, [r7, #20]
 8011248:	8992      	ldrh	r2, [r2, #12]
 801124a:	fbb3 f3f2 	udiv	r3, r3, r2
 801124e:	697a      	ldr	r2, [r7, #20]
 8011250:	8952      	ldrh	r2, [r2, #10]
 8011252:	3a01      	subs	r2, #1
 8011254:	4013      	ands	r3, r2
 8011256:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011258:	69fb      	ldr	r3, [r7, #28]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d12f      	bne.n	80112be <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	699b      	ldr	r3, [r3, #24]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d103      	bne.n	801126e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	689b      	ldr	r3, [r3, #8]
 801126a:	633b      	str	r3, [r7, #48]	; 0x30
 801126c:	e013      	b.n	8011296 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011272:	2b00      	cmp	r3, #0
 8011274:	d007      	beq.n	8011286 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	699b      	ldr	r3, [r3, #24]
 801127a:	4619      	mov	r1, r3
 801127c:	68f8      	ldr	r0, [r7, #12]
 801127e:	f7fe fdcd 	bl	800fe1c <clmt_clust>
 8011282:	6338      	str	r0, [r7, #48]	; 0x30
 8011284:	e007      	b.n	8011296 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011286:	68fa      	ldr	r2, [r7, #12]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	69db      	ldr	r3, [r3, #28]
 801128c:	4619      	mov	r1, r3
 801128e:	4610      	mov	r0, r2
 8011290:	f7fe fad7 	bl	800f842 <get_fat>
 8011294:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011298:	2b01      	cmp	r3, #1
 801129a:	d804      	bhi.n	80112a6 <f_read+0xf2>
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	2202      	movs	r2, #2
 80112a0:	755a      	strb	r2, [r3, #21]
 80112a2:	2302      	movs	r3, #2
 80112a4:	e0e1      	b.n	801146a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80112a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ac:	d104      	bne.n	80112b8 <f_read+0x104>
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2201      	movs	r2, #1
 80112b2:	755a      	strb	r2, [r3, #21]
 80112b4:	2301      	movs	r3, #1
 80112b6:	e0d8      	b.n	801146a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80112be:	697a      	ldr	r2, [r7, #20]
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	69db      	ldr	r3, [r3, #28]
 80112c4:	4619      	mov	r1, r3
 80112c6:	4610      	mov	r0, r2
 80112c8:	f7fe fa9c 	bl	800f804 <clust2sect>
 80112cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80112ce:	69bb      	ldr	r3, [r7, #24]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d104      	bne.n	80112de <f_read+0x12a>
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2202      	movs	r2, #2
 80112d8:	755a      	strb	r2, [r3, #21]
 80112da:	2302      	movs	r3, #2
 80112dc:	e0c5      	b.n	801146a <f_read+0x2b6>
			sect += csect;
 80112de:	69ba      	ldr	r2, [r7, #24]
 80112e0:	69fb      	ldr	r3, [r7, #28]
 80112e2:	4413      	add	r3, r2
 80112e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	899b      	ldrh	r3, [r3, #12]
 80112ea:	461a      	mov	r2, r3
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80112f2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80112f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d041      	beq.n	801137e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80112fa:	69fa      	ldr	r2, [r7, #28]
 80112fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fe:	4413      	add	r3, r2
 8011300:	697a      	ldr	r2, [r7, #20]
 8011302:	8952      	ldrh	r2, [r2, #10]
 8011304:	4293      	cmp	r3, r2
 8011306:	d905      	bls.n	8011314 <f_read+0x160>
					cc = fs->csize - csect;
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	895b      	ldrh	r3, [r3, #10]
 801130c:	461a      	mov	r2, r3
 801130e:	69fb      	ldr	r3, [r7, #28]
 8011310:	1ad3      	subs	r3, r2, r3
 8011312:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	7858      	ldrb	r0, [r3, #1]
 8011318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801131a:	69ba      	ldr	r2, [r7, #24]
 801131c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801131e:	f7fd fec5 	bl	800f0ac <disk_read>
 8011322:	4603      	mov	r3, r0
 8011324:	2b00      	cmp	r3, #0
 8011326:	d004      	beq.n	8011332 <f_read+0x17e>
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	2201      	movs	r2, #1
 801132c:	755a      	strb	r2, [r3, #21]
 801132e:	2301      	movs	r3, #1
 8011330:	e09b      	b.n	801146a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	7d1b      	ldrb	r3, [r3, #20]
 8011336:	b25b      	sxtb	r3, r3
 8011338:	2b00      	cmp	r3, #0
 801133a:	da18      	bge.n	801136e <f_read+0x1ba>
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	6a1a      	ldr	r2, [r3, #32]
 8011340:	69bb      	ldr	r3, [r7, #24]
 8011342:	1ad3      	subs	r3, r2, r3
 8011344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011346:	429a      	cmp	r2, r3
 8011348:	d911      	bls.n	801136e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	6a1a      	ldr	r2, [r3, #32]
 801134e:	69bb      	ldr	r3, [r7, #24]
 8011350:	1ad3      	subs	r3, r2, r3
 8011352:	697a      	ldr	r2, [r7, #20]
 8011354:	8992      	ldrh	r2, [r2, #12]
 8011356:	fb02 f303 	mul.w	r3, r2, r3
 801135a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801135c:	18d0      	adds	r0, r2, r3
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	899b      	ldrh	r3, [r3, #12]
 8011368:	461a      	mov	r2, r3
 801136a:	f7fd ff7f 	bl	800f26c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	899b      	ldrh	r3, [r3, #12]
 8011372:	461a      	mov	r2, r3
 8011374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011376:	fb02 f303 	mul.w	r3, r2, r3
 801137a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801137c:	e05c      	b.n	8011438 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	6a1b      	ldr	r3, [r3, #32]
 8011382:	69ba      	ldr	r2, [r7, #24]
 8011384:	429a      	cmp	r2, r3
 8011386:	d02e      	beq.n	80113e6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	7d1b      	ldrb	r3, [r3, #20]
 801138c:	b25b      	sxtb	r3, r3
 801138e:	2b00      	cmp	r3, #0
 8011390:	da18      	bge.n	80113c4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	7858      	ldrb	r0, [r3, #1]
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	6a1a      	ldr	r2, [r3, #32]
 80113a0:	2301      	movs	r3, #1
 80113a2:	f7fd fea3 	bl	800f0ec <disk_write>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d004      	beq.n	80113b6 <f_read+0x202>
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2201      	movs	r2, #1
 80113b0:	755a      	strb	r2, [r3, #21]
 80113b2:	2301      	movs	r3, #1
 80113b4:	e059      	b.n	801146a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	7d1b      	ldrb	r3, [r3, #20]
 80113ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113be:	b2da      	uxtb	r2, r3
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	7858      	ldrb	r0, [r3, #1]
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80113ce:	2301      	movs	r3, #1
 80113d0:	69ba      	ldr	r2, [r7, #24]
 80113d2:	f7fd fe6b 	bl	800f0ac <disk_read>
 80113d6:	4603      	mov	r3, r0
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d004      	beq.n	80113e6 <f_read+0x232>
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2201      	movs	r2, #1
 80113e0:	755a      	strb	r2, [r3, #21]
 80113e2:	2301      	movs	r3, #1
 80113e4:	e041      	b.n	801146a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	69ba      	ldr	r2, [r7, #24]
 80113ea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	899b      	ldrh	r3, [r3, #12]
 80113f0:	4618      	mov	r0, r3
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	699b      	ldr	r3, [r3, #24]
 80113f6:	697a      	ldr	r2, [r7, #20]
 80113f8:	8992      	ldrh	r2, [r2, #12]
 80113fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80113fe:	fb01 f202 	mul.w	r2, r1, r2
 8011402:	1a9b      	subs	r3, r3, r2
 8011404:	1ac3      	subs	r3, r0, r3
 8011406:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	429a      	cmp	r2, r3
 801140e:	d901      	bls.n	8011414 <f_read+0x260>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	699b      	ldr	r3, [r3, #24]
 801141e:	697a      	ldr	r2, [r7, #20]
 8011420:	8992      	ldrh	r2, [r2, #12]
 8011422:	fbb3 f0f2 	udiv	r0, r3, r2
 8011426:	fb00 f202 	mul.w	r2, r0, r2
 801142a:	1a9b      	subs	r3, r3, r2
 801142c:	440b      	add	r3, r1
 801142e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011430:	4619      	mov	r1, r3
 8011432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011434:	f7fd ff1a 	bl	800f26c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801143a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143c:	4413      	add	r3, r2
 801143e:	627b      	str	r3, [r7, #36]	; 0x24
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	699a      	ldr	r2, [r3, #24]
 8011444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011446:	441a      	add	r2, r3
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	619a      	str	r2, [r3, #24]
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011452:	441a      	add	r2, r3
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	601a      	str	r2, [r3, #0]
 8011458:	687a      	ldr	r2, [r7, #4]
 801145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145c:	1ad3      	subs	r3, r2, r3
 801145e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	f47f aee1 	bne.w	801122a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011468:	2300      	movs	r3, #0
}
 801146a:	4618      	mov	r0, r3
 801146c:	3738      	adds	r7, #56	; 0x38
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}

08011472 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011472:	b580      	push	{r7, lr}
 8011474:	b08c      	sub	sp, #48	; 0x30
 8011476:	af00      	add	r7, sp, #0
 8011478:	60f8      	str	r0, [r7, #12]
 801147a:	60b9      	str	r1, [r7, #8]
 801147c:	607a      	str	r2, [r7, #4]
 801147e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	2200      	movs	r2, #0
 8011488:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f107 0210 	add.w	r2, r7, #16
 8011490:	4611      	mov	r1, r2
 8011492:	4618      	mov	r0, r3
 8011494:	f7ff fc46 	bl	8010d24 <validate>
 8011498:	4603      	mov	r3, r0
 801149a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801149e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d107      	bne.n	80114b6 <f_write+0x44>
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	7d5b      	ldrb	r3, [r3, #21]
 80114aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80114ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d002      	beq.n	80114bc <f_write+0x4a>
 80114b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114ba:	e16a      	b.n	8011792 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	7d1b      	ldrb	r3, [r3, #20]
 80114c0:	f003 0302 	and.w	r3, r3, #2
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d101      	bne.n	80114cc <f_write+0x5a>
 80114c8:	2307      	movs	r3, #7
 80114ca:	e162      	b.n	8011792 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	699a      	ldr	r2, [r3, #24]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	441a      	add	r2, r3
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	699b      	ldr	r3, [r3, #24]
 80114d8:	429a      	cmp	r2, r3
 80114da:	f080 814c 	bcs.w	8011776 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	699b      	ldr	r3, [r3, #24]
 80114e2:	43db      	mvns	r3, r3
 80114e4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80114e6:	e146      	b.n	8011776 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	699b      	ldr	r3, [r3, #24]
 80114ec:	693a      	ldr	r2, [r7, #16]
 80114ee:	8992      	ldrh	r2, [r2, #12]
 80114f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80114f4:	fb01 f202 	mul.w	r2, r1, r2
 80114f8:	1a9b      	subs	r3, r3, r2
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	f040 80f1 	bne.w	80116e2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	699b      	ldr	r3, [r3, #24]
 8011504:	693a      	ldr	r2, [r7, #16]
 8011506:	8992      	ldrh	r2, [r2, #12]
 8011508:	fbb3 f3f2 	udiv	r3, r3, r2
 801150c:	693a      	ldr	r2, [r7, #16]
 801150e:	8952      	ldrh	r2, [r2, #10]
 8011510:	3a01      	subs	r2, #1
 8011512:	4013      	ands	r3, r2
 8011514:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d143      	bne.n	80115a4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	699b      	ldr	r3, [r3, #24]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d10c      	bne.n	801153e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	689b      	ldr	r3, [r3, #8]
 8011528:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152c:	2b00      	cmp	r3, #0
 801152e:	d11a      	bne.n	8011566 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	2100      	movs	r1, #0
 8011534:	4618      	mov	r0, r3
 8011536:	f7fe fbd9 	bl	800fcec <create_chain>
 801153a:	62b8      	str	r0, [r7, #40]	; 0x28
 801153c:	e013      	b.n	8011566 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011542:	2b00      	cmp	r3, #0
 8011544:	d007      	beq.n	8011556 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	699b      	ldr	r3, [r3, #24]
 801154a:	4619      	mov	r1, r3
 801154c:	68f8      	ldr	r0, [r7, #12]
 801154e:	f7fe fc65 	bl	800fe1c <clmt_clust>
 8011552:	62b8      	str	r0, [r7, #40]	; 0x28
 8011554:	e007      	b.n	8011566 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011556:	68fa      	ldr	r2, [r7, #12]
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	69db      	ldr	r3, [r3, #28]
 801155c:	4619      	mov	r1, r3
 801155e:	4610      	mov	r0, r2
 8011560:	f7fe fbc4 	bl	800fcec <create_chain>
 8011564:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011568:	2b00      	cmp	r3, #0
 801156a:	f000 8109 	beq.w	8011780 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011570:	2b01      	cmp	r3, #1
 8011572:	d104      	bne.n	801157e <f_write+0x10c>
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	2202      	movs	r2, #2
 8011578:	755a      	strb	r2, [r3, #21]
 801157a:	2302      	movs	r3, #2
 801157c:	e109      	b.n	8011792 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011584:	d104      	bne.n	8011590 <f_write+0x11e>
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2201      	movs	r2, #1
 801158a:	755a      	strb	r2, [r3, #21]
 801158c:	2301      	movs	r3, #1
 801158e:	e100      	b.n	8011792 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011594:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	689b      	ldr	r3, [r3, #8]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d102      	bne.n	80115a4 <f_write+0x132>
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115a2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	7d1b      	ldrb	r3, [r3, #20]
 80115a8:	b25b      	sxtb	r3, r3
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	da18      	bge.n	80115e0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	7858      	ldrb	r0, [r3, #1]
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	6a1a      	ldr	r2, [r3, #32]
 80115bc:	2301      	movs	r3, #1
 80115be:	f7fd fd95 	bl	800f0ec <disk_write>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d004      	beq.n	80115d2 <f_write+0x160>
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2201      	movs	r2, #1
 80115cc:	755a      	strb	r2, [r3, #21]
 80115ce:	2301      	movs	r3, #1
 80115d0:	e0df      	b.n	8011792 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	7d1b      	ldrb	r3, [r3, #20]
 80115d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115da:	b2da      	uxtb	r2, r3
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80115e0:	693a      	ldr	r2, [r7, #16]
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	69db      	ldr	r3, [r3, #28]
 80115e6:	4619      	mov	r1, r3
 80115e8:	4610      	mov	r0, r2
 80115ea:	f7fe f90b 	bl	800f804 <clust2sect>
 80115ee:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d104      	bne.n	8011600 <f_write+0x18e>
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2202      	movs	r2, #2
 80115fa:	755a      	strb	r2, [r3, #21]
 80115fc:	2302      	movs	r3, #2
 80115fe:	e0c8      	b.n	8011792 <f_write+0x320>
			sect += csect;
 8011600:	697a      	ldr	r2, [r7, #20]
 8011602:	69bb      	ldr	r3, [r7, #24]
 8011604:	4413      	add	r3, r2
 8011606:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	899b      	ldrh	r3, [r3, #12]
 801160c:	461a      	mov	r2, r3
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	fbb3 f3f2 	udiv	r3, r3, r2
 8011614:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011616:	6a3b      	ldr	r3, [r7, #32]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d043      	beq.n	80116a4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801161c:	69ba      	ldr	r2, [r7, #24]
 801161e:	6a3b      	ldr	r3, [r7, #32]
 8011620:	4413      	add	r3, r2
 8011622:	693a      	ldr	r2, [r7, #16]
 8011624:	8952      	ldrh	r2, [r2, #10]
 8011626:	4293      	cmp	r3, r2
 8011628:	d905      	bls.n	8011636 <f_write+0x1c4>
					cc = fs->csize - csect;
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	895b      	ldrh	r3, [r3, #10]
 801162e:	461a      	mov	r2, r3
 8011630:	69bb      	ldr	r3, [r7, #24]
 8011632:	1ad3      	subs	r3, r2, r3
 8011634:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011636:	693b      	ldr	r3, [r7, #16]
 8011638:	7858      	ldrb	r0, [r3, #1]
 801163a:	6a3b      	ldr	r3, [r7, #32]
 801163c:	697a      	ldr	r2, [r7, #20]
 801163e:	69f9      	ldr	r1, [r7, #28]
 8011640:	f7fd fd54 	bl	800f0ec <disk_write>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d004      	beq.n	8011654 <f_write+0x1e2>
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	2201      	movs	r2, #1
 801164e:	755a      	strb	r2, [r3, #21]
 8011650:	2301      	movs	r3, #1
 8011652:	e09e      	b.n	8011792 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	6a1a      	ldr	r2, [r3, #32]
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	1ad3      	subs	r3, r2, r3
 801165c:	6a3a      	ldr	r2, [r7, #32]
 801165e:	429a      	cmp	r2, r3
 8011660:	d918      	bls.n	8011694 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	6a1a      	ldr	r2, [r3, #32]
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	693a      	ldr	r2, [r7, #16]
 8011672:	8992      	ldrh	r2, [r2, #12]
 8011674:	fb02 f303 	mul.w	r3, r2, r3
 8011678:	69fa      	ldr	r2, [r7, #28]
 801167a:	18d1      	adds	r1, r2, r3
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	899b      	ldrh	r3, [r3, #12]
 8011680:	461a      	mov	r2, r3
 8011682:	f7fd fdf3 	bl	800f26c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	7d1b      	ldrb	r3, [r3, #20]
 801168a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801168e:	b2da      	uxtb	r2, r3
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	899b      	ldrh	r3, [r3, #12]
 8011698:	461a      	mov	r2, r3
 801169a:	6a3b      	ldr	r3, [r7, #32]
 801169c:	fb02 f303 	mul.w	r3, r2, r3
 80116a0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80116a2:	e04b      	b.n	801173c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	6a1b      	ldr	r3, [r3, #32]
 80116a8:	697a      	ldr	r2, [r7, #20]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d016      	beq.n	80116dc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	699a      	ldr	r2, [r3, #24]
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d210      	bcs.n	80116dc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	7858      	ldrb	r0, [r3, #1]
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80116c4:	2301      	movs	r3, #1
 80116c6:	697a      	ldr	r2, [r7, #20]
 80116c8:	f7fd fcf0 	bl	800f0ac <disk_read>
 80116cc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d004      	beq.n	80116dc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2201      	movs	r2, #1
 80116d6:	755a      	strb	r2, [r3, #21]
 80116d8:	2301      	movs	r3, #1
 80116da:	e05a      	b.n	8011792 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	697a      	ldr	r2, [r7, #20]
 80116e0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80116e2:	693b      	ldr	r3, [r7, #16]
 80116e4:	899b      	ldrh	r3, [r3, #12]
 80116e6:	4618      	mov	r0, r3
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	699b      	ldr	r3, [r3, #24]
 80116ec:	693a      	ldr	r2, [r7, #16]
 80116ee:	8992      	ldrh	r2, [r2, #12]
 80116f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80116f4:	fb01 f202 	mul.w	r2, r1, r2
 80116f8:	1a9b      	subs	r3, r3, r2
 80116fa:	1ac3      	subs	r3, r0, r3
 80116fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80116fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	429a      	cmp	r2, r3
 8011704:	d901      	bls.n	801170a <f_write+0x298>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	699b      	ldr	r3, [r3, #24]
 8011714:	693a      	ldr	r2, [r7, #16]
 8011716:	8992      	ldrh	r2, [r2, #12]
 8011718:	fbb3 f0f2 	udiv	r0, r3, r2
 801171c:	fb00 f202 	mul.w	r2, r0, r2
 8011720:	1a9b      	subs	r3, r3, r2
 8011722:	440b      	add	r3, r1
 8011724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011726:	69f9      	ldr	r1, [r7, #28]
 8011728:	4618      	mov	r0, r3
 801172a:	f7fd fd9f 	bl	800f26c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	7d1b      	ldrb	r3, [r3, #20]
 8011732:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011736:	b2da      	uxtb	r2, r3
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801173c:	69fa      	ldr	r2, [r7, #28]
 801173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011740:	4413      	add	r3, r2
 8011742:	61fb      	str	r3, [r7, #28]
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	699a      	ldr	r2, [r3, #24]
 8011748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174a:	441a      	add	r2, r3
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	619a      	str	r2, [r3, #24]
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	68da      	ldr	r2, [r3, #12]
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	699b      	ldr	r3, [r3, #24]
 8011758:	429a      	cmp	r2, r3
 801175a:	bf38      	it	cc
 801175c:	461a      	movcc	r2, r3
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	60da      	str	r2, [r3, #12]
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	681a      	ldr	r2, [r3, #0]
 8011766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011768:	441a      	add	r2, r3
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	601a      	str	r2, [r3, #0]
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011772:	1ad3      	subs	r3, r2, r3
 8011774:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2b00      	cmp	r3, #0
 801177a:	f47f aeb5 	bne.w	80114e8 <f_write+0x76>
 801177e:	e000      	b.n	8011782 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011780:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	7d1b      	ldrb	r3, [r3, #20]
 8011786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801178a:	b2da      	uxtb	r2, r3
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011790:	2300      	movs	r3, #0
}
 8011792:	4618      	mov	r0, r3
 8011794:	3730      	adds	r7, #48	; 0x30
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}

0801179a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801179a:	b580      	push	{r7, lr}
 801179c:	b086      	sub	sp, #24
 801179e:	af00      	add	r7, sp, #0
 80117a0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f107 0208 	add.w	r2, r7, #8
 80117a8:	4611      	mov	r1, r2
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7ff faba 	bl	8010d24 <validate>
 80117b0:	4603      	mov	r3, r0
 80117b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80117b4:	7dfb      	ldrb	r3, [r7, #23]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d168      	bne.n	801188c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	7d1b      	ldrb	r3, [r3, #20]
 80117be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d062      	beq.n	801188c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	7d1b      	ldrb	r3, [r3, #20]
 80117ca:	b25b      	sxtb	r3, r3
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	da15      	bge.n	80117fc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	7858      	ldrb	r0, [r3, #1]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6a1a      	ldr	r2, [r3, #32]
 80117de:	2301      	movs	r3, #1
 80117e0:	f7fd fc84 	bl	800f0ec <disk_write>
 80117e4:	4603      	mov	r3, r0
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d001      	beq.n	80117ee <f_sync+0x54>
 80117ea:	2301      	movs	r3, #1
 80117ec:	e04f      	b.n	801188e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	7d1b      	ldrb	r3, [r3, #20]
 80117f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117f6:	b2da      	uxtb	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80117fc:	f7fd faaa 	bl	800ed54 <get_fattime>
 8011800:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011802:	68ba      	ldr	r2, [r7, #8]
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011808:	4619      	mov	r1, r3
 801180a:	4610      	mov	r0, r2
 801180c:	f7fd ff5c 	bl	800f6c8 <move_window>
 8011810:	4603      	mov	r3, r0
 8011812:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011814:	7dfb      	ldrb	r3, [r7, #23]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d138      	bne.n	801188c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801181e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	330b      	adds	r3, #11
 8011824:	781a      	ldrb	r2, [r3, #0]
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	330b      	adds	r3, #11
 801182a:	f042 0220 	orr.w	r2, r2, #32
 801182e:	b2d2      	uxtb	r2, r2
 8011830:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6818      	ldr	r0, [r3, #0]
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	689b      	ldr	r3, [r3, #8]
 801183a:	461a      	mov	r2, r3
 801183c:	68f9      	ldr	r1, [r7, #12]
 801183e:	f7fe fcea 	bl	8010216 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	f103 021c 	add.w	r2, r3, #28
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	68db      	ldr	r3, [r3, #12]
 801184c:	4619      	mov	r1, r3
 801184e:	4610      	mov	r0, r2
 8011850:	f7fd fce0 	bl	800f214 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	3316      	adds	r3, #22
 8011858:	6939      	ldr	r1, [r7, #16]
 801185a:	4618      	mov	r0, r3
 801185c:	f7fd fcda 	bl	800f214 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	3312      	adds	r3, #18
 8011864:	2100      	movs	r1, #0
 8011866:	4618      	mov	r0, r3
 8011868:	f7fd fcb9 	bl	800f1de <st_word>
					fs->wflag = 1;
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	2201      	movs	r2, #1
 8011870:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	4618      	mov	r0, r3
 8011876:	f7fd ff55 	bl	800f724 <sync_fs>
 801187a:	4603      	mov	r3, r0
 801187c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	7d1b      	ldrb	r3, [r3, #20]
 8011882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011886:	b2da      	uxtb	r2, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801188c:	7dfb      	ldrb	r3, [r7, #23]
}
 801188e:	4618      	mov	r0, r3
 8011890:	3718      	adds	r7, #24
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}

08011896 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011896:	b580      	push	{r7, lr}
 8011898:	b084      	sub	sp, #16
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f7ff ff7b 	bl	801179a <f_sync>
 80118a4:	4603      	mov	r3, r0
 80118a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80118a8:	7bfb      	ldrb	r3, [r7, #15]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d118      	bne.n	80118e0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f107 0208 	add.w	r2, r7, #8
 80118b4:	4611      	mov	r1, r2
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7ff fa34 	bl	8010d24 <validate>
 80118bc:	4603      	mov	r3, r0
 80118be:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80118c0:	7bfb      	ldrb	r3, [r7, #15]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d10c      	bne.n	80118e0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	691b      	ldr	r3, [r3, #16]
 80118ca:	4618      	mov	r0, r3
 80118cc:	f7fd fe58 	bl	800f580 <dec_lock>
 80118d0:	4603      	mov	r3, r0
 80118d2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80118d4:	7bfb      	ldrb	r3, [r7, #15]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d102      	bne.n	80118e0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2200      	movs	r2, #0
 80118de:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80118e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	3710      	adds	r7, #16
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}

080118ea <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80118ea:	b580      	push	{r7, lr}
 80118ec:	b086      	sub	sp, #24
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
 80118f2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d101      	bne.n	80118fe <f_opendir+0x14>
 80118fa:	2309      	movs	r3, #9
 80118fc:	e064      	b.n	80119c8 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011902:	f107 010c 	add.w	r1, r7, #12
 8011906:	463b      	mov	r3, r7
 8011908:	2200      	movs	r2, #0
 801190a:	4618      	mov	r0, r3
 801190c:	f7fe ff8a 	bl	8010824 <find_volume>
 8011910:	4603      	mov	r3, r0
 8011912:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011914:	7dfb      	ldrb	r3, [r7, #23]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d14f      	bne.n	80119ba <f_opendir+0xd0>
		obj->fs = fs;
 801191a:	68fa      	ldr	r2, [r7, #12]
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	4619      	mov	r1, r3
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f7fe fe6d 	bl	8010604 <follow_path>
 801192a:	4603      	mov	r3, r0
 801192c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801192e:	7dfb      	ldrb	r3, [r7, #23]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d13d      	bne.n	80119b0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801193a:	b25b      	sxtb	r3, r3
 801193c:	2b00      	cmp	r3, #0
 801193e:	db12      	blt.n	8011966 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011940:	693b      	ldr	r3, [r7, #16]
 8011942:	799b      	ldrb	r3, [r3, #6]
 8011944:	f003 0310 	and.w	r3, r3, #16
 8011948:	2b00      	cmp	r3, #0
 801194a:	d00a      	beq.n	8011962 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801194c:	68fa      	ldr	r2, [r7, #12]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6a1b      	ldr	r3, [r3, #32]
 8011952:	4619      	mov	r1, r3
 8011954:	4610      	mov	r0, r2
 8011956:	f7fe fc3f 	bl	80101d8 <ld_clust>
 801195a:	4602      	mov	r2, r0
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	609a      	str	r2, [r3, #8]
 8011960:	e001      	b.n	8011966 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011962:	2305      	movs	r3, #5
 8011964:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8011966:	7dfb      	ldrb	r3, [r7, #23]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d121      	bne.n	80119b0 <f_opendir+0xc6>
				obj->id = fs->id;
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	88da      	ldrh	r2, [r3, #6]
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011974:	2100      	movs	r1, #0
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	f7fe fa88 	bl	800fe8c <dir_sdi>
 801197c:	4603      	mov	r3, r0
 801197e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011980:	7dfb      	ldrb	r3, [r7, #23]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d114      	bne.n	80119b0 <f_opendir+0xc6>
					if (obj->sclust) {
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	689b      	ldr	r3, [r3, #8]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d00d      	beq.n	80119aa <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801198e:	2100      	movs	r1, #0
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f7fd fd67 	bl	800f464 <inc_lock>
 8011996:	4602      	mov	r2, r0
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	691b      	ldr	r3, [r3, #16]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d105      	bne.n	80119b0 <f_opendir+0xc6>
 80119a4:	2312      	movs	r3, #18
 80119a6:	75fb      	strb	r3, [r7, #23]
 80119a8:	e002      	b.n	80119b0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	2200      	movs	r2, #0
 80119ae:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80119b0:	7dfb      	ldrb	r3, [r7, #23]
 80119b2:	2b04      	cmp	r3, #4
 80119b4:	d101      	bne.n	80119ba <f_opendir+0xd0>
 80119b6:	2305      	movs	r3, #5
 80119b8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80119ba:	7dfb      	ldrb	r3, [r7, #23]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d002      	beq.n	80119c6 <f_opendir+0xdc>
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	2200      	movs	r2, #0
 80119c4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80119c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3718      	adds	r7, #24
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}

080119d0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b084      	sub	sp, #16
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f107 0208 	add.w	r2, r7, #8
 80119de:	4611      	mov	r1, r2
 80119e0:	4618      	mov	r0, r3
 80119e2:	f7ff f99f 	bl	8010d24 <validate>
 80119e6:	4603      	mov	r3, r0
 80119e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80119ea:	7bfb      	ldrb	r3, [r7, #15]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d110      	bne.n	8011a12 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	691b      	ldr	r3, [r3, #16]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d006      	beq.n	8011a06 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	691b      	ldr	r3, [r3, #16]
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7fd fdbf 	bl	800f580 <dec_lock>
 8011a02:	4603      	mov	r3, r0
 8011a04:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8011a06:	7bfb      	ldrb	r3, [r7, #15]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d102      	bne.n	8011a12 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8011a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3710      	adds	r7, #16
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f107 0208 	add.w	r2, r7, #8
 8011a2c:	4611      	mov	r1, r2
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7ff f978 	bl	8010d24 <validate>
 8011a34:	4603      	mov	r3, r0
 8011a36:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011a38:	7bfb      	ldrb	r3, [r7, #15]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d126      	bne.n	8011a8c <f_readdir+0x70>
		if (!fno) {
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d106      	bne.n	8011a52 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011a44:	2100      	movs	r1, #0
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f7fe fa20 	bl	800fe8c <dir_sdi>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	73fb      	strb	r3, [r7, #15]
 8011a50:	e01c      	b.n	8011a8c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011a52:	2100      	movs	r1, #0
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f7fe fbfe 	bl	8010256 <dir_read>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011a5e:	7bfb      	ldrb	r3, [r7, #15]
 8011a60:	2b04      	cmp	r3, #4
 8011a62:	d101      	bne.n	8011a68 <f_readdir+0x4c>
 8011a64:	2300      	movs	r3, #0
 8011a66:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8011a68:	7bfb      	ldrb	r3, [r7, #15]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d10e      	bne.n	8011a8c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011a6e:	6839      	ldr	r1, [r7, #0]
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f7fe fcd4 	bl	801041e <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011a76:	2100      	movs	r1, #0
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f7fe fa90 	bl	800ff9e <dir_next>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011a82:	7bfb      	ldrb	r3, [r7, #15]
 8011a84:	2b04      	cmp	r3, #4
 8011a86:	d101      	bne.n	8011a8c <f_readdir+0x70>
 8011a88:	2300      	movs	r3, #0
 8011a8a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8011a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3710      	adds	r7, #16
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}

08011a96 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011a96:	b580      	push	{r7, lr}
 8011a98:	b090      	sub	sp, #64	; 0x40
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
 8011a9e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8011aa0:	f107 010c 	add.w	r1, r7, #12
 8011aa4:	1d3b      	adds	r3, r7, #4
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7fe febb 	bl	8010824 <find_volume>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d11f      	bne.n	8011afc <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011abc:	687a      	ldr	r2, [r7, #4]
 8011abe:	f107 030c 	add.w	r3, r7, #12
 8011ac2:	4611      	mov	r1, r2
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7fe fd9d 	bl	8010604 <follow_path>
 8011aca:	4603      	mov	r3, r0
 8011acc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8011ad0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d111      	bne.n	8011afc <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8011ad8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011adc:	b25b      	sxtb	r3, r3
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	da03      	bge.n	8011aea <f_stat+0x54>
				res = FR_INVALID_NAME;
 8011ae2:	2306      	movs	r3, #6
 8011ae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011ae8:	e008      	b.n	8011afc <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d005      	beq.n	8011afc <f_stat+0x66>
 8011af0:	f107 030c 	add.w	r3, r7, #12
 8011af4:	6839      	ldr	r1, [r7, #0]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fe fc91 	bl	801041e <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8011afc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3740      	adds	r7, #64	; 0x40
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}

08011b08 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b092      	sub	sp, #72	; 0x48
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	60f8      	str	r0, [r7, #12]
 8011b10:	60b9      	str	r1, [r7, #8]
 8011b12:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011b14:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011b18:	f107 030c 	add.w	r3, r7, #12
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7fe fe80 	bl	8010824 <find_volume>
 8011b24:	4603      	mov	r3, r0
 8011b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8011b2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	f040 8099 	bne.w	8011c66 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8011b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8011b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b3c:	695a      	ldr	r2, [r3, #20]
 8011b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b40:	699b      	ldr	r3, [r3, #24]
 8011b42:	3b02      	subs	r3, #2
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d804      	bhi.n	8011b52 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8011b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b4a:	695a      	ldr	r2, [r3, #20]
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	601a      	str	r2, [r3, #0]
 8011b50:	e089      	b.n	8011c66 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8011b52:	2300      	movs	r3, #0
 8011b54:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8011b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	2b01      	cmp	r3, #1
 8011b5c:	d128      	bne.n	8011bb0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8011b5e:	2302      	movs	r3, #2
 8011b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b64:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8011b66:	f107 0314 	add.w	r3, r7, #20
 8011b6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7fd fe68 	bl	800f842 <get_fat>
 8011b72:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8011b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b7a:	d103      	bne.n	8011b84 <f_getfree+0x7c>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8011b82:	e063      	b.n	8011c4c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8011b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b86:	2b01      	cmp	r3, #1
 8011b88:	d103      	bne.n	8011b92 <f_getfree+0x8a>
 8011b8a:	2302      	movs	r3, #2
 8011b8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8011b90:	e05c      	b.n	8011c4c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8011b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d102      	bne.n	8011b9e <f_getfree+0x96>
 8011b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8011b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba6:	699b      	ldr	r3, [r3, #24]
 8011ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d3db      	bcc.n	8011b66 <f_getfree+0x5e>
 8011bae:	e04d      	b.n	8011c4c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8011bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb2:	699b      	ldr	r3, [r3, #24]
 8011bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bba:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8011bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d113      	bne.n	8011bf2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8011bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bce:	1c5a      	adds	r2, r3, #1
 8011bd0:	63ba      	str	r2, [r7, #56]	; 0x38
 8011bd2:	4619      	mov	r1, r3
 8011bd4:	f7fd fd78 	bl	800f6c8 <move_window>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8011bde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d131      	bne.n	8011c4a <f_getfree+0x142>
							p = fs->win;
 8011be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be8:	3334      	adds	r3, #52	; 0x34
 8011bea:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8011bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bee:	899b      	ldrh	r3, [r3, #12]
 8011bf0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8011bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	2b02      	cmp	r3, #2
 8011bf8:	d10f      	bne.n	8011c1a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8011bfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bfc:	f7fd fab4 	bl	800f168 <ld_word>
 8011c00:	4603      	mov	r3, r0
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d102      	bne.n	8011c0c <f_getfree+0x104>
 8011c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c08:	3301      	adds	r3, #1
 8011c0a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8011c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c0e:	3302      	adds	r3, #2
 8011c10:	633b      	str	r3, [r7, #48]	; 0x30
 8011c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c14:	3b02      	subs	r3, #2
 8011c16:	637b      	str	r3, [r7, #52]	; 0x34
 8011c18:	e010      	b.n	8011c3c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8011c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c1c:	f7fd fabc 	bl	800f198 <ld_dword>
 8011c20:	4603      	mov	r3, r0
 8011c22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d102      	bne.n	8011c30 <f_getfree+0x128>
 8011c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8011c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c32:	3304      	adds	r3, #4
 8011c34:	633b      	str	r3, [r7, #48]	; 0x30
 8011c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c38:	3b04      	subs	r3, #4
 8011c3a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8011c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c3e:	3b01      	subs	r3, #1
 8011c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d1bd      	bne.n	8011bc4 <f_getfree+0xbc>
 8011c48:	e000      	b.n	8011c4c <f_getfree+0x144>
							if (res != FR_OK) break;
 8011c4a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c50:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8011c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c56:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8011c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c5a:	791a      	ldrb	r2, [r3, #4]
 8011c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c5e:	f042 0201 	orr.w	r2, r2, #1
 8011c62:	b2d2      	uxtb	r2, r2
 8011c64:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8011c66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3748      	adds	r7, #72	; 0x48
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}

08011c72 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011c72:	b580      	push	{r7, lr}
 8011c74:	b096      	sub	sp, #88	; 0x58
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011c7a:	f107 0108 	add.w	r1, r7, #8
 8011c7e:	1d3b      	adds	r3, r7, #4
 8011c80:	2202      	movs	r2, #2
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7fe fdce 	bl	8010824 <find_volume>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011c92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	f040 80f2 	bne.w	8011e80 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8011c9c:	687a      	ldr	r2, [r7, #4]
 8011c9e:	f107 030c 	add.w	r3, r7, #12
 8011ca2:	4611      	mov	r1, r2
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7fe fcad 	bl	8010604 <follow_path>
 8011caa:	4603      	mov	r3, r0
 8011cac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8011cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d102      	bne.n	8011cbe <f_mkdir+0x4c>
 8011cb8:	2308      	movs	r3, #8
 8011cba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011cbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011cc2:	2b04      	cmp	r3, #4
 8011cc4:	f040 80dc 	bne.w	8011e80 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011cc8:	f107 030c 	add.w	r3, r7, #12
 8011ccc:	2100      	movs	r1, #0
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fe f80c 	bl	800fcec <create_chain>
 8011cd4:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	895b      	ldrh	r3, [r3, #10]
 8011cda:	461a      	mov	r2, r3
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	899b      	ldrh	r3, [r3, #12]
 8011ce0:	fb02 f303 	mul.w	r3, r2, r3
 8011ce4:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d102      	bne.n	8011cf8 <f_mkdir+0x86>
 8011cf2:	2307      	movs	r3, #7
 8011cf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8011cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cfa:	2b01      	cmp	r3, #1
 8011cfc:	d102      	bne.n	8011d04 <f_mkdir+0x92>
 8011cfe:	2302      	movs	r3, #2
 8011d00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d0a:	d102      	bne.n	8011d12 <f_mkdir+0xa0>
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d106      	bne.n	8011d28 <f_mkdir+0xb6>
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7fd fc8f 	bl	800f640 <sync_window>
 8011d22:	4603      	mov	r3, r0
 8011d24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011d28:	f7fd f814 	bl	800ed54 <get_fattime>
 8011d2c:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011d2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d16c      	bne.n	8011e10 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7fd fd62 	bl	800f804 <clust2sect>
 8011d40:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	3334      	adds	r3, #52	; 0x34
 8011d46:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	899b      	ldrh	r3, [r3, #12]
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	2100      	movs	r1, #0
 8011d50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011d52:	f7fd faac 	bl	800f2ae <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011d56:	220b      	movs	r2, #11
 8011d58:	2120      	movs	r1, #32
 8011d5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011d5c:	f7fd faa7 	bl	800f2ae <mem_set>
					dir[DIR_Name] = '.';
 8011d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d62:	222e      	movs	r2, #46	; 0x2e
 8011d64:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d68:	330b      	adds	r3, #11
 8011d6a:	2210      	movs	r2, #16
 8011d6c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d70:	3316      	adds	r3, #22
 8011d72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7fd fa4d 	bl	800f214 <st_dword>
					st_clust(fs, dir, dcl);
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7fe fa48 	bl	8010216 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d88:	3320      	adds	r3, #32
 8011d8a:	2220      	movs	r2, #32
 8011d8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7fd fa6c 	bl	800f26c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d96:	3321      	adds	r3, #33	; 0x21
 8011d98:	222e      	movs	r2, #46	; 0x2e
 8011d9a:	701a      	strb	r2, [r3, #0]
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	2b03      	cmp	r3, #3
 8011da6:	d106      	bne.n	8011db6 <f_mkdir+0x144>
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d101      	bne.n	8011db6 <f_mkdir+0x144>
 8011db2:	2300      	movs	r3, #0
 8011db4:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011db6:	68b8      	ldr	r0, [r7, #8]
 8011db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dba:	3320      	adds	r3, #32
 8011dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011dbe:	4619      	mov	r1, r3
 8011dc0:	f7fe fa29 	bl	8010216 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	895b      	ldrh	r3, [r3, #10]
 8011dc8:	653b      	str	r3, [r7, #80]	; 0x50
 8011dca:	e01c      	b.n	8011e06 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8011dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dce:	1c5a      	adds	r2, r3, #1
 8011dd0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011dd2:	68ba      	ldr	r2, [r7, #8]
 8011dd4:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	2201      	movs	r2, #1
 8011dda:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7fd fc2e 	bl	800f640 <sync_window>
 8011de4:	4603      	mov	r3, r0
 8011de6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8011dea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d10d      	bne.n	8011e0e <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	899b      	ldrh	r3, [r3, #12]
 8011df6:	461a      	mov	r2, r3
 8011df8:	2100      	movs	r1, #0
 8011dfa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011dfc:	f7fd fa57 	bl	800f2ae <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e02:	3b01      	subs	r3, #1
 8011e04:	653b      	str	r3, [r7, #80]	; 0x50
 8011e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d1df      	bne.n	8011dcc <f_mkdir+0x15a>
 8011e0c:	e000      	b.n	8011e10 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8011e0e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011e10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d107      	bne.n	8011e28 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011e18:	f107 030c 	add.w	r3, r7, #12
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fe facc 	bl	80103ba <dir_register>
 8011e22:	4603      	mov	r3, r0
 8011e24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8011e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d120      	bne.n	8011e72 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e32:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e36:	3316      	adds	r3, #22
 8011e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7fd f9ea 	bl	800f214 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fe f9e5 	bl	8010216 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e4e:	330b      	adds	r3, #11
 8011e50:	2210      	movs	r2, #16
 8011e52:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	2201      	movs	r2, #1
 8011e58:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011e5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d10e      	bne.n	8011e80 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7fd fc5d 	bl	800f724 <sync_fs>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8011e70:	e006      	b.n	8011e80 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011e72:	f107 030c 	add.w	r3, r7, #12
 8011e76:	2200      	movs	r2, #0
 8011e78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fd fed1 	bl	800fc22 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3758      	adds	r7, #88	; 0x58
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b087      	sub	sp, #28
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	4613      	mov	r3, r2
 8011e98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011ea2:	4b1f      	ldr	r3, [pc, #124]	; (8011f20 <FATFS_LinkDriverEx+0x94>)
 8011ea4:	7a5b      	ldrb	r3, [r3, #9]
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d131      	bne.n	8011f10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011eac:	4b1c      	ldr	r3, [pc, #112]	; (8011f20 <FATFS_LinkDriverEx+0x94>)
 8011eae:	7a5b      	ldrb	r3, [r3, #9]
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	4b1a      	ldr	r3, [pc, #104]	; (8011f20 <FATFS_LinkDriverEx+0x94>)
 8011eb6:	2100      	movs	r1, #0
 8011eb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011eba:	4b19      	ldr	r3, [pc, #100]	; (8011f20 <FATFS_LinkDriverEx+0x94>)
 8011ebc:	7a5b      	ldrb	r3, [r3, #9]
 8011ebe:	b2db      	uxtb	r3, r3
 8011ec0:	4a17      	ldr	r2, [pc, #92]	; (8011f20 <FATFS_LinkDriverEx+0x94>)
 8011ec2:	009b      	lsls	r3, r3, #2
 8011ec4:	4413      	add	r3, r2
 8011ec6:	68fa      	ldr	r2, [r7, #12]
 8011ec8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011eca:	4b15      	ldr	r3, [pc, #84]	; (8011f20 <FATFS_LinkDriverEx+0x94>)
 8011ecc:	7a5b      	ldrb	r3, [r3, #9]
 8011ece:	b2db      	uxtb	r3, r3
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	4b13      	ldr	r3, [pc, #76]	; (8011f20 <FATFS_LinkDriverEx+0x94>)
 8011ed4:	4413      	add	r3, r2
 8011ed6:	79fa      	ldrb	r2, [r7, #7]
 8011ed8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011eda:	4b11      	ldr	r3, [pc, #68]	; (8011f20 <FATFS_LinkDriverEx+0x94>)
 8011edc:	7a5b      	ldrb	r3, [r3, #9]
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	1c5a      	adds	r2, r3, #1
 8011ee2:	b2d1      	uxtb	r1, r2
 8011ee4:	4a0e      	ldr	r2, [pc, #56]	; (8011f20 <FATFS_LinkDriverEx+0x94>)
 8011ee6:	7251      	strb	r1, [r2, #9]
 8011ee8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011eea:	7dbb      	ldrb	r3, [r7, #22]
 8011eec:	3330      	adds	r3, #48	; 0x30
 8011eee:	b2da      	uxtb	r2, r3
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	223a      	movs	r2, #58	; 0x3a
 8011efa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	3302      	adds	r3, #2
 8011f00:	222f      	movs	r2, #47	; 0x2f
 8011f02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	3303      	adds	r3, #3
 8011f08:	2200      	movs	r2, #0
 8011f0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	371c      	adds	r7, #28
 8011f16:	46bd      	mov	sp, r7
 8011f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1c:	4770      	bx	lr
 8011f1e:	bf00      	nop
 8011f20:	20005d88 	.word	0x20005d88

08011f24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b082      	sub	sp, #8
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011f2e:	2200      	movs	r2, #0
 8011f30:	6839      	ldr	r1, [r7, #0]
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f7ff ffaa 	bl	8011e8c <FATFS_LinkDriverEx>
 8011f38:	4603      	mov	r3, r0
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3708      	adds	r7, #8
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
	...

08011f44 <asctime>:
 8011f44:	4b0d      	ldr	r3, [pc, #52]	; (8011f7c <asctime+0x38>)
 8011f46:	b570      	push	{r4, r5, r6, lr}
 8011f48:	681d      	ldr	r5, [r3, #0]
 8011f4a:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8011f4c:	4604      	mov	r4, r0
 8011f4e:	b976      	cbnz	r6, 8011f6e <asctime+0x2a>
 8011f50:	201a      	movs	r0, #26
 8011f52:	f000 f8a1 	bl	8012098 <malloc>
 8011f56:	4602      	mov	r2, r0
 8011f58:	6428      	str	r0, [r5, #64]	; 0x40
 8011f5a:	b920      	cbnz	r0, 8011f66 <asctime+0x22>
 8011f5c:	4b08      	ldr	r3, [pc, #32]	; (8011f80 <asctime+0x3c>)
 8011f5e:	4809      	ldr	r0, [pc, #36]	; (8011f84 <asctime+0x40>)
 8011f60:	2137      	movs	r1, #55	; 0x37
 8011f62:	f000 f837 	bl	8011fd4 <__assert_func>
 8011f66:	221a      	movs	r2, #26
 8011f68:	4631      	mov	r1, r6
 8011f6a:	f000 f8b3 	bl	80120d4 <memset>
 8011f6e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8011f70:	4620      	mov	r0, r4
 8011f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f76:	f000 b807 	b.w	8011f88 <asctime_r>
 8011f7a:	bf00      	nop
 8011f7c:	200002f4 	.word	0x200002f4
 8011f80:	08049400 	.word	0x08049400
 8011f84:	08049417 	.word	0x08049417

08011f88 <asctime_r>:
 8011f88:	b510      	push	{r4, lr}
 8011f8a:	460c      	mov	r4, r1
 8011f8c:	6941      	ldr	r1, [r0, #20]
 8011f8e:	6903      	ldr	r3, [r0, #16]
 8011f90:	6982      	ldr	r2, [r0, #24]
 8011f92:	b086      	sub	sp, #24
 8011f94:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8011f98:	9104      	str	r1, [sp, #16]
 8011f9a:	6801      	ldr	r1, [r0, #0]
 8011f9c:	9103      	str	r1, [sp, #12]
 8011f9e:	6841      	ldr	r1, [r0, #4]
 8011fa0:	9102      	str	r1, [sp, #8]
 8011fa2:	6881      	ldr	r1, [r0, #8]
 8011fa4:	9101      	str	r1, [sp, #4]
 8011fa6:	68c1      	ldr	r1, [r0, #12]
 8011fa8:	9100      	str	r1, [sp, #0]
 8011faa:	4907      	ldr	r1, [pc, #28]	; (8011fc8 <asctime_r+0x40>)
 8011fac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011fb0:	440b      	add	r3, r1
 8011fb2:	4906      	ldr	r1, [pc, #24]	; (8011fcc <asctime_r+0x44>)
 8011fb4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011fb8:	440a      	add	r2, r1
 8011fba:	4620      	mov	r0, r4
 8011fbc:	4904      	ldr	r1, [pc, #16]	; (8011fd0 <asctime_r+0x48>)
 8011fbe:	f001 f9b7 	bl	8013330 <siprintf>
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	b006      	add	sp, #24
 8011fc6:	bd10      	pop	{r4, pc}
 8011fc8:	080494a8 	.word	0x080494a8
 8011fcc:	08049493 	.word	0x08049493
 8011fd0:	08049473 	.word	0x08049473

08011fd4 <__assert_func>:
 8011fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fd6:	4614      	mov	r4, r2
 8011fd8:	461a      	mov	r2, r3
 8011fda:	4b09      	ldr	r3, [pc, #36]	; (8012000 <__assert_func+0x2c>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	4605      	mov	r5, r0
 8011fe0:	68d8      	ldr	r0, [r3, #12]
 8011fe2:	b14c      	cbz	r4, 8011ff8 <__assert_func+0x24>
 8011fe4:	4b07      	ldr	r3, [pc, #28]	; (8012004 <__assert_func+0x30>)
 8011fe6:	9100      	str	r1, [sp, #0]
 8011fe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fec:	4906      	ldr	r1, [pc, #24]	; (8012008 <__assert_func+0x34>)
 8011fee:	462b      	mov	r3, r5
 8011ff0:	f000 f81c 	bl	801202c <fiprintf>
 8011ff4:	f003 fa58 	bl	80154a8 <abort>
 8011ff8:	4b04      	ldr	r3, [pc, #16]	; (801200c <__assert_func+0x38>)
 8011ffa:	461c      	mov	r4, r3
 8011ffc:	e7f3      	b.n	8011fe6 <__assert_func+0x12>
 8011ffe:	bf00      	nop
 8012000:	200002f4 	.word	0x200002f4
 8012004:	080494cc 	.word	0x080494cc
 8012008:	080494d9 	.word	0x080494d9
 801200c:	08049492 	.word	0x08049492

08012010 <atof>:
 8012010:	2100      	movs	r1, #0
 8012012:	f002 bdc7 	b.w	8014ba4 <strtod>

08012016 <atoi>:
 8012016:	220a      	movs	r2, #10
 8012018:	2100      	movs	r1, #0
 801201a:	f002 beaf 	b.w	8014d7c <strtol>
	...

08012020 <__errno>:
 8012020:	4b01      	ldr	r3, [pc, #4]	; (8012028 <__errno+0x8>)
 8012022:	6818      	ldr	r0, [r3, #0]
 8012024:	4770      	bx	lr
 8012026:	bf00      	nop
 8012028:	200002f4 	.word	0x200002f4

0801202c <fiprintf>:
 801202c:	b40e      	push	{r1, r2, r3}
 801202e:	b503      	push	{r0, r1, lr}
 8012030:	4601      	mov	r1, r0
 8012032:	ab03      	add	r3, sp, #12
 8012034:	4805      	ldr	r0, [pc, #20]	; (801204c <fiprintf+0x20>)
 8012036:	f853 2b04 	ldr.w	r2, [r3], #4
 801203a:	6800      	ldr	r0, [r0, #0]
 801203c:	9301      	str	r3, [sp, #4]
 801203e:	f000 fbcd 	bl	80127dc <_vfiprintf_r>
 8012042:	b002      	add	sp, #8
 8012044:	f85d eb04 	ldr.w	lr, [sp], #4
 8012048:	b003      	add	sp, #12
 801204a:	4770      	bx	lr
 801204c:	200002f4 	.word	0x200002f4

08012050 <__libc_init_array>:
 8012050:	b570      	push	{r4, r5, r6, lr}
 8012052:	4d0d      	ldr	r5, [pc, #52]	; (8012088 <__libc_init_array+0x38>)
 8012054:	4c0d      	ldr	r4, [pc, #52]	; (801208c <__libc_init_array+0x3c>)
 8012056:	1b64      	subs	r4, r4, r5
 8012058:	10a4      	asrs	r4, r4, #2
 801205a:	2600      	movs	r6, #0
 801205c:	42a6      	cmp	r6, r4
 801205e:	d109      	bne.n	8012074 <__libc_init_array+0x24>
 8012060:	4d0b      	ldr	r5, [pc, #44]	; (8012090 <__libc_init_array+0x40>)
 8012062:	4c0c      	ldr	r4, [pc, #48]	; (8012094 <__libc_init_array+0x44>)
 8012064:	f008 fe0a 	bl	801ac7c <_init>
 8012068:	1b64      	subs	r4, r4, r5
 801206a:	10a4      	asrs	r4, r4, #2
 801206c:	2600      	movs	r6, #0
 801206e:	42a6      	cmp	r6, r4
 8012070:	d105      	bne.n	801207e <__libc_init_array+0x2e>
 8012072:	bd70      	pop	{r4, r5, r6, pc}
 8012074:	f855 3b04 	ldr.w	r3, [r5], #4
 8012078:	4798      	blx	r3
 801207a:	3601      	adds	r6, #1
 801207c:	e7ee      	b.n	801205c <__libc_init_array+0xc>
 801207e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012082:	4798      	blx	r3
 8012084:	3601      	adds	r6, #1
 8012086:	e7f2      	b.n	801206e <__libc_init_array+0x1e>
 8012088:	08049f58 	.word	0x08049f58
 801208c:	08049f58 	.word	0x08049f58
 8012090:	08049f58 	.word	0x08049f58
 8012094:	08049f5c 	.word	0x08049f5c

08012098 <malloc>:
 8012098:	4b02      	ldr	r3, [pc, #8]	; (80120a4 <malloc+0xc>)
 801209a:	4601      	mov	r1, r0
 801209c:	6818      	ldr	r0, [r3, #0]
 801209e:	f000 baff 	b.w	80126a0 <_malloc_r>
 80120a2:	bf00      	nop
 80120a4:	200002f4 	.word	0x200002f4

080120a8 <free>:
 80120a8:	4b02      	ldr	r3, [pc, #8]	; (80120b4 <free+0xc>)
 80120aa:	4601      	mov	r1, r0
 80120ac:	6818      	ldr	r0, [r3, #0]
 80120ae:	f000 ba8b 	b.w	80125c8 <_free_r>
 80120b2:	bf00      	nop
 80120b4:	200002f4 	.word	0x200002f4

080120b8 <memcpy>:
 80120b8:	440a      	add	r2, r1
 80120ba:	4291      	cmp	r1, r2
 80120bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80120c0:	d100      	bne.n	80120c4 <memcpy+0xc>
 80120c2:	4770      	bx	lr
 80120c4:	b510      	push	{r4, lr}
 80120c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120ce:	4291      	cmp	r1, r2
 80120d0:	d1f9      	bne.n	80120c6 <memcpy+0xe>
 80120d2:	bd10      	pop	{r4, pc}

080120d4 <memset>:
 80120d4:	4402      	add	r2, r0
 80120d6:	4603      	mov	r3, r0
 80120d8:	4293      	cmp	r3, r2
 80120da:	d100      	bne.n	80120de <memset+0xa>
 80120dc:	4770      	bx	lr
 80120de:	f803 1b01 	strb.w	r1, [r3], #1
 80120e2:	e7f9      	b.n	80120d8 <memset+0x4>

080120e4 <validate_structure>:
 80120e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120e6:	6801      	ldr	r1, [r0, #0]
 80120e8:	293b      	cmp	r1, #59	; 0x3b
 80120ea:	4604      	mov	r4, r0
 80120ec:	d911      	bls.n	8012112 <validate_structure+0x2e>
 80120ee:	223c      	movs	r2, #60	; 0x3c
 80120f0:	4668      	mov	r0, sp
 80120f2:	f003 f9f5 	bl	80154e0 <div>
 80120f6:	9a01      	ldr	r2, [sp, #4]
 80120f8:	6863      	ldr	r3, [r4, #4]
 80120fa:	9900      	ldr	r1, [sp, #0]
 80120fc:	2a00      	cmp	r2, #0
 80120fe:	440b      	add	r3, r1
 8012100:	6063      	str	r3, [r4, #4]
 8012102:	bfbb      	ittet	lt
 8012104:	323c      	addlt	r2, #60	; 0x3c
 8012106:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801210a:	6022      	strge	r2, [r4, #0]
 801210c:	6022      	strlt	r2, [r4, #0]
 801210e:	bfb8      	it	lt
 8012110:	6063      	strlt	r3, [r4, #4]
 8012112:	6861      	ldr	r1, [r4, #4]
 8012114:	293b      	cmp	r1, #59	; 0x3b
 8012116:	d911      	bls.n	801213c <validate_structure+0x58>
 8012118:	223c      	movs	r2, #60	; 0x3c
 801211a:	4668      	mov	r0, sp
 801211c:	f003 f9e0 	bl	80154e0 <div>
 8012120:	9a01      	ldr	r2, [sp, #4]
 8012122:	68a3      	ldr	r3, [r4, #8]
 8012124:	9900      	ldr	r1, [sp, #0]
 8012126:	2a00      	cmp	r2, #0
 8012128:	440b      	add	r3, r1
 801212a:	60a3      	str	r3, [r4, #8]
 801212c:	bfbb      	ittet	lt
 801212e:	323c      	addlt	r2, #60	; 0x3c
 8012130:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012134:	6062      	strge	r2, [r4, #4]
 8012136:	6062      	strlt	r2, [r4, #4]
 8012138:	bfb8      	it	lt
 801213a:	60a3      	strlt	r3, [r4, #8]
 801213c:	68a1      	ldr	r1, [r4, #8]
 801213e:	2917      	cmp	r1, #23
 8012140:	d911      	bls.n	8012166 <validate_structure+0x82>
 8012142:	2218      	movs	r2, #24
 8012144:	4668      	mov	r0, sp
 8012146:	f003 f9cb 	bl	80154e0 <div>
 801214a:	9a01      	ldr	r2, [sp, #4]
 801214c:	68e3      	ldr	r3, [r4, #12]
 801214e:	9900      	ldr	r1, [sp, #0]
 8012150:	2a00      	cmp	r2, #0
 8012152:	440b      	add	r3, r1
 8012154:	60e3      	str	r3, [r4, #12]
 8012156:	bfbb      	ittet	lt
 8012158:	3218      	addlt	r2, #24
 801215a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801215e:	60a2      	strge	r2, [r4, #8]
 8012160:	60a2      	strlt	r2, [r4, #8]
 8012162:	bfb8      	it	lt
 8012164:	60e3      	strlt	r3, [r4, #12]
 8012166:	6921      	ldr	r1, [r4, #16]
 8012168:	290b      	cmp	r1, #11
 801216a:	d911      	bls.n	8012190 <validate_structure+0xac>
 801216c:	220c      	movs	r2, #12
 801216e:	4668      	mov	r0, sp
 8012170:	f003 f9b6 	bl	80154e0 <div>
 8012174:	9a01      	ldr	r2, [sp, #4]
 8012176:	6963      	ldr	r3, [r4, #20]
 8012178:	9900      	ldr	r1, [sp, #0]
 801217a:	2a00      	cmp	r2, #0
 801217c:	440b      	add	r3, r1
 801217e:	6163      	str	r3, [r4, #20]
 8012180:	bfbb      	ittet	lt
 8012182:	320c      	addlt	r2, #12
 8012184:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012188:	6122      	strge	r2, [r4, #16]
 801218a:	6122      	strlt	r2, [r4, #16]
 801218c:	bfb8      	it	lt
 801218e:	6163      	strlt	r3, [r4, #20]
 8012190:	6963      	ldr	r3, [r4, #20]
 8012192:	0798      	lsls	r0, r3, #30
 8012194:	d120      	bne.n	80121d8 <validate_structure+0xf4>
 8012196:	2164      	movs	r1, #100	; 0x64
 8012198:	fb93 f2f1 	sdiv	r2, r3, r1
 801219c:	fb01 3212 	mls	r2, r1, r2, r3
 80121a0:	b9e2      	cbnz	r2, 80121dc <validate_structure+0xf8>
 80121a2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80121a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80121aa:	fb93 f1f2 	sdiv	r1, r3, r2
 80121ae:	fb02 3311 	mls	r3, r2, r1, r3
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	bf14      	ite	ne
 80121b6:	231c      	movne	r3, #28
 80121b8:	231d      	moveq	r3, #29
 80121ba:	68e2      	ldr	r2, [r4, #12]
 80121bc:	2a00      	cmp	r2, #0
 80121be:	dc0f      	bgt.n	80121e0 <validate_structure+0xfc>
 80121c0:	4f33      	ldr	r7, [pc, #204]	; (8012290 <validate_structure+0x1ac>)
 80121c2:	260b      	movs	r6, #11
 80121c4:	2064      	movs	r0, #100	; 0x64
 80121c6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80121ca:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80121ce:	f1bc 0f00 	cmp.w	ip, #0
 80121d2:	dd31      	ble.n	8012238 <validate_structure+0x154>
 80121d4:	b003      	add	sp, #12
 80121d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121d8:	231c      	movs	r3, #28
 80121da:	e7ee      	b.n	80121ba <validate_structure+0xd6>
 80121dc:	231d      	movs	r3, #29
 80121de:	e7ec      	b.n	80121ba <validate_structure+0xd6>
 80121e0:	4e2b      	ldr	r6, [pc, #172]	; (8012290 <validate_structure+0x1ac>)
 80121e2:	2700      	movs	r7, #0
 80121e4:	2064      	movs	r0, #100	; 0x64
 80121e6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80121ea:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80121ee:	2a01      	cmp	r2, #1
 80121f0:	bf14      	ite	ne
 80121f2:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 80121f6:	469c      	moveq	ip, r3
 80121f8:	4561      	cmp	r1, ip
 80121fa:	ddeb      	ble.n	80121d4 <validate_structure+0xf0>
 80121fc:	3201      	adds	r2, #1
 80121fe:	eba1 010c 	sub.w	r1, r1, ip
 8012202:	2a0c      	cmp	r2, #12
 8012204:	60e1      	str	r1, [r4, #12]
 8012206:	6122      	str	r2, [r4, #16]
 8012208:	d1ef      	bne.n	80121ea <validate_structure+0x106>
 801220a:	6963      	ldr	r3, [r4, #20]
 801220c:	1c5a      	adds	r2, r3, #1
 801220e:	0791      	lsls	r1, r2, #30
 8012210:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8012214:	d137      	bne.n	8012286 <validate_structure+0x1a2>
 8012216:	fb92 f1f0 	sdiv	r1, r2, r0
 801221a:	fb00 2211 	mls	r2, r0, r1, r2
 801221e:	2a00      	cmp	r2, #0
 8012220:	d133      	bne.n	801228a <validate_structure+0x1a6>
 8012222:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8012226:	fb93 f2f5 	sdiv	r2, r3, r5
 801222a:	fb05 3312 	mls	r3, r5, r2, r3
 801222e:	2b00      	cmp	r3, #0
 8012230:	bf14      	ite	ne
 8012232:	231c      	movne	r3, #28
 8012234:	231d      	moveq	r3, #29
 8012236:	e7d8      	b.n	80121ea <validate_structure+0x106>
 8012238:	6921      	ldr	r1, [r4, #16]
 801223a:	3901      	subs	r1, #1
 801223c:	6121      	str	r1, [r4, #16]
 801223e:	3101      	adds	r1, #1
 8012240:	d114      	bne.n	801226c <validate_structure+0x188>
 8012242:	6963      	ldr	r3, [r4, #20]
 8012244:	1e5a      	subs	r2, r3, #1
 8012246:	0791      	lsls	r1, r2, #30
 8012248:	e9c4 6204 	strd	r6, r2, [r4, #16]
 801224c:	d117      	bne.n	801227e <validate_structure+0x19a>
 801224e:	fb92 f1f0 	sdiv	r1, r2, r0
 8012252:	fb00 2211 	mls	r2, r0, r1, r2
 8012256:	b9a2      	cbnz	r2, 8012282 <validate_structure+0x19e>
 8012258:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801225c:	fb93 f2f5 	sdiv	r2, r3, r5
 8012260:	fb05 3312 	mls	r3, r5, r2, r3
 8012264:	2b00      	cmp	r3, #0
 8012266:	bf14      	ite	ne
 8012268:	231c      	movne	r3, #28
 801226a:	231d      	moveq	r3, #29
 801226c:	6922      	ldr	r2, [r4, #16]
 801226e:	2a01      	cmp	r2, #1
 8012270:	bf14      	ite	ne
 8012272:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8012276:	461a      	moveq	r2, r3
 8012278:	4462      	add	r2, ip
 801227a:	60e2      	str	r2, [r4, #12]
 801227c:	e7a5      	b.n	80121ca <validate_structure+0xe6>
 801227e:	231c      	movs	r3, #28
 8012280:	e7f4      	b.n	801226c <validate_structure+0x188>
 8012282:	231d      	movs	r3, #29
 8012284:	e7f2      	b.n	801226c <validate_structure+0x188>
 8012286:	231c      	movs	r3, #28
 8012288:	e7af      	b.n	80121ea <validate_structure+0x106>
 801228a:	231d      	movs	r3, #29
 801228c:	e7ad      	b.n	80121ea <validate_structure+0x106>
 801228e:	bf00      	nop
 8012290:	0804950c 	.word	0x0804950c

08012294 <mktime>:
 8012294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012298:	b085      	sub	sp, #20
 801229a:	4607      	mov	r7, r0
 801229c:	f004 fd18 	bl	8016cd0 <__gettzinfo>
 80122a0:	4681      	mov	r9, r0
 80122a2:	4638      	mov	r0, r7
 80122a4:	f7ff ff1e 	bl	80120e4 <validate_structure>
 80122a8:	e9d7 4000 	ldrd	r4, r0, [r7]
 80122ac:	233c      	movs	r3, #60	; 0x3c
 80122ae:	fb03 4400 	mla	r4, r3, r0, r4
 80122b2:	68b8      	ldr	r0, [r7, #8]
 80122b4:	4abc      	ldr	r2, [pc, #752]	; (80125a8 <mktime+0x314>)
 80122b6:	697e      	ldr	r6, [r7, #20]
 80122b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80122bc:	fb03 4400 	mla	r4, r3, r0, r4
 80122c0:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 80122c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80122c8:	3d01      	subs	r5, #1
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	4415      	add	r5, r2
 80122ce:	dd11      	ble.n	80122f4 <mktime+0x60>
 80122d0:	07b1      	lsls	r1, r6, #30
 80122d2:	d10f      	bne.n	80122f4 <mktime+0x60>
 80122d4:	2264      	movs	r2, #100	; 0x64
 80122d6:	fb96 f3f2 	sdiv	r3, r6, r2
 80122da:	fb02 6313 	mls	r3, r2, r3, r6
 80122de:	b943      	cbnz	r3, 80122f2 <mktime+0x5e>
 80122e0:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80122e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80122e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80122ec:	fb02 3311 	mls	r3, r2, r1, r3
 80122f0:	b903      	cbnz	r3, 80122f4 <mktime+0x60>
 80122f2:	3501      	adds	r5, #1
 80122f4:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80122f8:	3310      	adds	r3, #16
 80122fa:	f644 6220 	movw	r2, #20000	; 0x4e20
 80122fe:	4293      	cmp	r3, r2
 8012300:	61fd      	str	r5, [r7, #28]
 8012302:	f200 815d 	bhi.w	80125c0 <mktime+0x32c>
 8012306:	2e46      	cmp	r6, #70	; 0x46
 8012308:	dd71      	ble.n	80123ee <mktime+0x15a>
 801230a:	2346      	movs	r3, #70	; 0x46
 801230c:	f240 1c6d 	movw	ip, #365	; 0x16d
 8012310:	2164      	movs	r1, #100	; 0x64
 8012312:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012316:	079a      	lsls	r2, r3, #30
 8012318:	d163      	bne.n	80123e2 <mktime+0x14e>
 801231a:	fb93 f2f1 	sdiv	r2, r3, r1
 801231e:	fb01 3212 	mls	r2, r1, r2, r3
 8012322:	2a00      	cmp	r2, #0
 8012324:	d160      	bne.n	80123e8 <mktime+0x154>
 8012326:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 801232a:	fb92 fef0 	sdiv	lr, r2, r0
 801232e:	fb00 221e 	mls	r2, r0, lr, r2
 8012332:	2a00      	cmp	r2, #0
 8012334:	bf14      	ite	ne
 8012336:	4662      	movne	r2, ip
 8012338:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801233c:	3301      	adds	r3, #1
 801233e:	429e      	cmp	r6, r3
 8012340:	4415      	add	r5, r2
 8012342:	d1e8      	bne.n	8012316 <mktime+0x82>
 8012344:	4b99      	ldr	r3, [pc, #612]	; (80125ac <mktime+0x318>)
 8012346:	ea4f 78e4 	mov.w	r8, r4, asr #31
 801234a:	fbc5 4803 	smlal	r4, r8, r5, r3
 801234e:	f002 fe47 	bl	8014fe0 <__tz_lock>
 8012352:	f002 fe51 	bl	8014ff8 <_tzset_unlocked>
 8012356:	4b96      	ldr	r3, [pc, #600]	; (80125b0 <mktime+0x31c>)
 8012358:	f8d3 b000 	ldr.w	fp, [r3]
 801235c:	f1bb 0f00 	cmp.w	fp, #0
 8012360:	d039      	beq.n	80123d6 <mktime+0x142>
 8012362:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8012366:	6978      	ldr	r0, [r7, #20]
 8012368:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801236c:	f1bb 0f01 	cmp.w	fp, #1
 8012370:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012374:	46da      	mov	sl, fp
 8012376:	bfa8      	it	ge
 8012378:	f04f 0a01 	movge.w	sl, #1
 801237c:	4283      	cmp	r3, r0
 801237e:	d178      	bne.n	8012472 <mktime+0x1de>
 8012380:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8012384:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8012388:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 801238c:	1a5b      	subs	r3, r3, r1
 801238e:	9302      	str	r3, [sp, #8]
 8012390:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8012394:	9303      	str	r3, [sp, #12]
 8012396:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 801239a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 801239e:	9301      	str	r3, [sp, #4]
 80123a0:	ebb3 0c02 	subs.w	ip, r3, r2
 80123a4:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80123a8:	4564      	cmp	r4, ip
 80123aa:	eb78 0300 	sbcs.w	r3, r8, r0
 80123ae:	da66      	bge.n	801247e <mktime+0x1ea>
 80123b0:	f8d9 3000 	ldr.w	r3, [r9]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d06f      	beq.n	8012498 <mktime+0x204>
 80123b8:	9b02      	ldr	r3, [sp, #8]
 80123ba:	429c      	cmp	r4, r3
 80123bc:	9b03      	ldr	r3, [sp, #12]
 80123be:	eb78 0303 	sbcs.w	r3, r8, r3
 80123c2:	db03      	blt.n	80123cc <mktime+0x138>
 80123c4:	4564      	cmp	r4, ip
 80123c6:	eb78 0300 	sbcs.w	r3, r8, r0
 80123ca:	db6b      	blt.n	80124a4 <mktime+0x210>
 80123cc:	f1bb 0f00 	cmp.w	fp, #0
 80123d0:	f04f 0b00 	mov.w	fp, #0
 80123d4:	da6b      	bge.n	80124ae <mktime+0x21a>
 80123d6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 80123da:	190c      	adds	r4, r1, r4
 80123dc:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80123e0:	e0a9      	b.n	8012536 <mktime+0x2a2>
 80123e2:	f240 126d 	movw	r2, #365	; 0x16d
 80123e6:	e7a9      	b.n	801233c <mktime+0xa8>
 80123e8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80123ec:	e7a6      	b.n	801233c <mktime+0xa8>
 80123ee:	d0a9      	beq.n	8012344 <mktime+0xb0>
 80123f0:	2345      	movs	r3, #69	; 0x45
 80123f2:	f240 1c6d 	movw	ip, #365	; 0x16d
 80123f6:	2164      	movs	r1, #100	; 0x64
 80123f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80123fc:	e012      	b.n	8012424 <mktime+0x190>
 80123fe:	bb62      	cbnz	r2, 801245a <mktime+0x1c6>
 8012400:	fb93 f2f1 	sdiv	r2, r3, r1
 8012404:	fb01 3212 	mls	r2, r1, r2, r3
 8012408:	bb52      	cbnz	r2, 8012460 <mktime+0x1cc>
 801240a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 801240e:	fb92 fef0 	sdiv	lr, r2, r0
 8012412:	fb00 221e 	mls	r2, r0, lr, r2
 8012416:	2a00      	cmp	r2, #0
 8012418:	bf14      	ite	ne
 801241a:	4662      	movne	r2, ip
 801241c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012420:	1aad      	subs	r5, r5, r2
 8012422:	3b01      	subs	r3, #1
 8012424:	429e      	cmp	r6, r3
 8012426:	f003 0203 	and.w	r2, r3, #3
 801242a:	dbe8      	blt.n	80123fe <mktime+0x16a>
 801242c:	b9da      	cbnz	r2, 8012466 <mktime+0x1d2>
 801242e:	2264      	movs	r2, #100	; 0x64
 8012430:	fb96 f3f2 	sdiv	r3, r6, r2
 8012434:	fb02 6313 	mls	r3, r2, r3, r6
 8012438:	b9c3      	cbnz	r3, 801246c <mktime+0x1d8>
 801243a:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 801243e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012442:	fb93 f1f2 	sdiv	r1, r3, r2
 8012446:	fb02 3311 	mls	r3, r2, r1, r3
 801244a:	2b00      	cmp	r3, #0
 801244c:	f240 136d 	movw	r3, #365	; 0x16d
 8012450:	bf08      	it	eq
 8012452:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8012456:	1aed      	subs	r5, r5, r3
 8012458:	e774      	b.n	8012344 <mktime+0xb0>
 801245a:	f240 126d 	movw	r2, #365	; 0x16d
 801245e:	e7df      	b.n	8012420 <mktime+0x18c>
 8012460:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012464:	e7dc      	b.n	8012420 <mktime+0x18c>
 8012466:	f240 136d 	movw	r3, #365	; 0x16d
 801246a:	e7f4      	b.n	8012456 <mktime+0x1c2>
 801246c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8012470:	e7f1      	b.n	8012456 <mktime+0x1c2>
 8012472:	f002 fd0b 	bl	8014e8c <__tzcalc_limits>
 8012476:	2800      	cmp	r0, #0
 8012478:	d182      	bne.n	8012380 <mktime+0xec>
 801247a:	46d3      	mov	fp, sl
 801247c:	e050      	b.n	8012520 <mktime+0x28c>
 801247e:	9b01      	ldr	r3, [sp, #4]
 8012480:	1a5b      	subs	r3, r3, r1
 8012482:	9301      	str	r3, [sp, #4]
 8012484:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8012488:	eb6e 0e03 	sbc.w	lr, lr, r3
 801248c:	9b01      	ldr	r3, [sp, #4]
 801248e:	429c      	cmp	r4, r3
 8012490:	eb78 030e 	sbcs.w	r3, r8, lr
 8012494:	dbf1      	blt.n	801247a <mktime+0x1e6>
 8012496:	e78b      	b.n	80123b0 <mktime+0x11c>
 8012498:	9b02      	ldr	r3, [sp, #8]
 801249a:	429c      	cmp	r4, r3
 801249c:	9b03      	ldr	r3, [sp, #12]
 801249e:	eb78 0303 	sbcs.w	r3, r8, r3
 80124a2:	db8f      	blt.n	80123c4 <mktime+0x130>
 80124a4:	f1bb 0f00 	cmp.w	fp, #0
 80124a8:	db3e      	blt.n	8012528 <mktime+0x294>
 80124aa:	f04f 0b01 	mov.w	fp, #1
 80124ae:	ea8a 0a0b 	eor.w	sl, sl, fp
 80124b2:	f1ba 0f01 	cmp.w	sl, #1
 80124b6:	d133      	bne.n	8012520 <mktime+0x28c>
 80124b8:	f1bb 0f00 	cmp.w	fp, #0
 80124bc:	d04e      	beq.n	801255c <mktime+0x2c8>
 80124be:	1a52      	subs	r2, r2, r1
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80124c6:	4413      	add	r3, r2
 80124c8:	1914      	adds	r4, r2, r4
 80124ca:	603b      	str	r3, [r7, #0]
 80124cc:	4638      	mov	r0, r7
 80124ce:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 80124d2:	f7ff fe07 	bl	80120e4 <validate_structure>
 80124d6:	68fa      	ldr	r2, [r7, #12]
 80124d8:	ebb2 020a 	subs.w	r2, r2, sl
 80124dc:	d020      	beq.n	8012520 <mktime+0x28c>
 80124de:	2a01      	cmp	r2, #1
 80124e0:	dc3e      	bgt.n	8012560 <mktime+0x2cc>
 80124e2:	1c90      	adds	r0, r2, #2
 80124e4:	bfd8      	it	le
 80124e6:	2201      	movle	r2, #1
 80124e8:	69fb      	ldr	r3, [r7, #28]
 80124ea:	18d3      	adds	r3, r2, r3
 80124ec:	4415      	add	r5, r2
 80124ee:	d540      	bpl.n	8012572 <mktime+0x2de>
 80124f0:	1e73      	subs	r3, r6, #1
 80124f2:	0799      	lsls	r1, r3, #30
 80124f4:	d137      	bne.n	8012566 <mktime+0x2d2>
 80124f6:	2264      	movs	r2, #100	; 0x64
 80124f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80124fc:	fb02 3311 	mls	r3, r2, r1, r3
 8012500:	bba3      	cbnz	r3, 801256c <mktime+0x2d8>
 8012502:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012506:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801250a:	fb96 f2f3 	sdiv	r2, r6, r3
 801250e:	fb03 6612 	mls	r6, r3, r2, r6
 8012512:	2e00      	cmp	r6, #0
 8012514:	f240 136d 	movw	r3, #365	; 0x16d
 8012518:	bf18      	it	ne
 801251a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801251e:	61fb      	str	r3, [r7, #28]
 8012520:	f1bb 0f01 	cmp.w	fp, #1
 8012524:	f47f af57 	bne.w	80123d6 <mktime+0x142>
 8012528:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 801252c:	190c      	adds	r4, r1, r4
 801252e:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8012532:	f04f 0b01 	mov.w	fp, #1
 8012536:	f002 fd59 	bl	8014fec <__tz_unlock>
 801253a:	3504      	adds	r5, #4
 801253c:	2307      	movs	r3, #7
 801253e:	fb95 f3f3 	sdiv	r3, r5, r3
 8012542:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8012546:	1aed      	subs	r5, r5, r3
 8012548:	bf48      	it	mi
 801254a:	3507      	addmi	r5, #7
 801254c:	f8c7 b020 	str.w	fp, [r7, #32]
 8012550:	61bd      	str	r5, [r7, #24]
 8012552:	4620      	mov	r0, r4
 8012554:	4641      	mov	r1, r8
 8012556:	b005      	add	sp, #20
 8012558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801255c:	1a8a      	subs	r2, r1, r2
 801255e:	e7af      	b.n	80124c0 <mktime+0x22c>
 8012560:	f04f 32ff 	mov.w	r2, #4294967295
 8012564:	e7c0      	b.n	80124e8 <mktime+0x254>
 8012566:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801256a:	e7d8      	b.n	801251e <mktime+0x28a>
 801256c:	f240 136d 	movw	r3, #365	; 0x16d
 8012570:	e7d5      	b.n	801251e <mktime+0x28a>
 8012572:	07b2      	lsls	r2, r6, #30
 8012574:	d11e      	bne.n	80125b4 <mktime+0x320>
 8012576:	2164      	movs	r1, #100	; 0x64
 8012578:	fb96 f2f1 	sdiv	r2, r6, r1
 801257c:	fb01 6212 	mls	r2, r1, r2, r6
 8012580:	b9da      	cbnz	r2, 80125ba <mktime+0x326>
 8012582:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8012586:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801258a:	fb96 f1f2 	sdiv	r1, r6, r2
 801258e:	fb02 6611 	mls	r6, r2, r1, r6
 8012592:	2e00      	cmp	r6, #0
 8012594:	f240 126d 	movw	r2, #365	; 0x16d
 8012598:	bf08      	it	eq
 801259a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801259e:	4293      	cmp	r3, r2
 80125a0:	bfa8      	it	ge
 80125a2:	1a9b      	subge	r3, r3, r2
 80125a4:	e7bb      	b.n	801251e <mktime+0x28a>
 80125a6:	bf00      	nop
 80125a8:	0804953c 	.word	0x0804953c
 80125ac:	00015180 	.word	0x00015180
 80125b0:	20005db8 	.word	0x20005db8
 80125b4:	f240 126d 	movw	r2, #365	; 0x16d
 80125b8:	e7f1      	b.n	801259e <mktime+0x30a>
 80125ba:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80125be:	e7ee      	b.n	801259e <mktime+0x30a>
 80125c0:	f04f 34ff 	mov.w	r4, #4294967295
 80125c4:	46a0      	mov	r8, r4
 80125c6:	e7c4      	b.n	8012552 <mktime+0x2be>

080125c8 <_free_r>:
 80125c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80125ca:	2900      	cmp	r1, #0
 80125cc:	d044      	beq.n	8012658 <_free_r+0x90>
 80125ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125d2:	9001      	str	r0, [sp, #4]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	f1a1 0404 	sub.w	r4, r1, #4
 80125da:	bfb8      	it	lt
 80125dc:	18e4      	addlt	r4, r4, r3
 80125de:	f004 fc2d 	bl	8016e3c <__malloc_lock>
 80125e2:	4a1e      	ldr	r2, [pc, #120]	; (801265c <_free_r+0x94>)
 80125e4:	9801      	ldr	r0, [sp, #4]
 80125e6:	6813      	ldr	r3, [r2, #0]
 80125e8:	b933      	cbnz	r3, 80125f8 <_free_r+0x30>
 80125ea:	6063      	str	r3, [r4, #4]
 80125ec:	6014      	str	r4, [r2, #0]
 80125ee:	b003      	add	sp, #12
 80125f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125f4:	f004 bc28 	b.w	8016e48 <__malloc_unlock>
 80125f8:	42a3      	cmp	r3, r4
 80125fa:	d908      	bls.n	801260e <_free_r+0x46>
 80125fc:	6825      	ldr	r5, [r4, #0]
 80125fe:	1961      	adds	r1, r4, r5
 8012600:	428b      	cmp	r3, r1
 8012602:	bf01      	itttt	eq
 8012604:	6819      	ldreq	r1, [r3, #0]
 8012606:	685b      	ldreq	r3, [r3, #4]
 8012608:	1949      	addeq	r1, r1, r5
 801260a:	6021      	streq	r1, [r4, #0]
 801260c:	e7ed      	b.n	80125ea <_free_r+0x22>
 801260e:	461a      	mov	r2, r3
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	b10b      	cbz	r3, 8012618 <_free_r+0x50>
 8012614:	42a3      	cmp	r3, r4
 8012616:	d9fa      	bls.n	801260e <_free_r+0x46>
 8012618:	6811      	ldr	r1, [r2, #0]
 801261a:	1855      	adds	r5, r2, r1
 801261c:	42a5      	cmp	r5, r4
 801261e:	d10b      	bne.n	8012638 <_free_r+0x70>
 8012620:	6824      	ldr	r4, [r4, #0]
 8012622:	4421      	add	r1, r4
 8012624:	1854      	adds	r4, r2, r1
 8012626:	42a3      	cmp	r3, r4
 8012628:	6011      	str	r1, [r2, #0]
 801262a:	d1e0      	bne.n	80125ee <_free_r+0x26>
 801262c:	681c      	ldr	r4, [r3, #0]
 801262e:	685b      	ldr	r3, [r3, #4]
 8012630:	6053      	str	r3, [r2, #4]
 8012632:	4421      	add	r1, r4
 8012634:	6011      	str	r1, [r2, #0]
 8012636:	e7da      	b.n	80125ee <_free_r+0x26>
 8012638:	d902      	bls.n	8012640 <_free_r+0x78>
 801263a:	230c      	movs	r3, #12
 801263c:	6003      	str	r3, [r0, #0]
 801263e:	e7d6      	b.n	80125ee <_free_r+0x26>
 8012640:	6825      	ldr	r5, [r4, #0]
 8012642:	1961      	adds	r1, r4, r5
 8012644:	428b      	cmp	r3, r1
 8012646:	bf04      	itt	eq
 8012648:	6819      	ldreq	r1, [r3, #0]
 801264a:	685b      	ldreq	r3, [r3, #4]
 801264c:	6063      	str	r3, [r4, #4]
 801264e:	bf04      	itt	eq
 8012650:	1949      	addeq	r1, r1, r5
 8012652:	6021      	streq	r1, [r4, #0]
 8012654:	6054      	str	r4, [r2, #4]
 8012656:	e7ca      	b.n	80125ee <_free_r+0x26>
 8012658:	b003      	add	sp, #12
 801265a:	bd30      	pop	{r4, r5, pc}
 801265c:	20005d94 	.word	0x20005d94

08012660 <sbrk_aligned>:
 8012660:	b570      	push	{r4, r5, r6, lr}
 8012662:	4e0e      	ldr	r6, [pc, #56]	; (801269c <sbrk_aligned+0x3c>)
 8012664:	460c      	mov	r4, r1
 8012666:	6831      	ldr	r1, [r6, #0]
 8012668:	4605      	mov	r5, r0
 801266a:	b911      	cbnz	r1, 8012672 <sbrk_aligned+0x12>
 801266c:	f000 fe50 	bl	8013310 <_sbrk_r>
 8012670:	6030      	str	r0, [r6, #0]
 8012672:	4621      	mov	r1, r4
 8012674:	4628      	mov	r0, r5
 8012676:	f000 fe4b 	bl	8013310 <_sbrk_r>
 801267a:	1c43      	adds	r3, r0, #1
 801267c:	d00a      	beq.n	8012694 <sbrk_aligned+0x34>
 801267e:	1cc4      	adds	r4, r0, #3
 8012680:	f024 0403 	bic.w	r4, r4, #3
 8012684:	42a0      	cmp	r0, r4
 8012686:	d007      	beq.n	8012698 <sbrk_aligned+0x38>
 8012688:	1a21      	subs	r1, r4, r0
 801268a:	4628      	mov	r0, r5
 801268c:	f000 fe40 	bl	8013310 <_sbrk_r>
 8012690:	3001      	adds	r0, #1
 8012692:	d101      	bne.n	8012698 <sbrk_aligned+0x38>
 8012694:	f04f 34ff 	mov.w	r4, #4294967295
 8012698:	4620      	mov	r0, r4
 801269a:	bd70      	pop	{r4, r5, r6, pc}
 801269c:	20005d98 	.word	0x20005d98

080126a0 <_malloc_r>:
 80126a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a4:	1ccd      	adds	r5, r1, #3
 80126a6:	f025 0503 	bic.w	r5, r5, #3
 80126aa:	3508      	adds	r5, #8
 80126ac:	2d0c      	cmp	r5, #12
 80126ae:	bf38      	it	cc
 80126b0:	250c      	movcc	r5, #12
 80126b2:	2d00      	cmp	r5, #0
 80126b4:	4607      	mov	r7, r0
 80126b6:	db01      	blt.n	80126bc <_malloc_r+0x1c>
 80126b8:	42a9      	cmp	r1, r5
 80126ba:	d905      	bls.n	80126c8 <_malloc_r+0x28>
 80126bc:	230c      	movs	r3, #12
 80126be:	603b      	str	r3, [r7, #0]
 80126c0:	2600      	movs	r6, #0
 80126c2:	4630      	mov	r0, r6
 80126c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126c8:	4e2e      	ldr	r6, [pc, #184]	; (8012784 <_malloc_r+0xe4>)
 80126ca:	f004 fbb7 	bl	8016e3c <__malloc_lock>
 80126ce:	6833      	ldr	r3, [r6, #0]
 80126d0:	461c      	mov	r4, r3
 80126d2:	bb34      	cbnz	r4, 8012722 <_malloc_r+0x82>
 80126d4:	4629      	mov	r1, r5
 80126d6:	4638      	mov	r0, r7
 80126d8:	f7ff ffc2 	bl	8012660 <sbrk_aligned>
 80126dc:	1c43      	adds	r3, r0, #1
 80126de:	4604      	mov	r4, r0
 80126e0:	d14d      	bne.n	801277e <_malloc_r+0xde>
 80126e2:	6834      	ldr	r4, [r6, #0]
 80126e4:	4626      	mov	r6, r4
 80126e6:	2e00      	cmp	r6, #0
 80126e8:	d140      	bne.n	801276c <_malloc_r+0xcc>
 80126ea:	6823      	ldr	r3, [r4, #0]
 80126ec:	4631      	mov	r1, r6
 80126ee:	4638      	mov	r0, r7
 80126f0:	eb04 0803 	add.w	r8, r4, r3
 80126f4:	f000 fe0c 	bl	8013310 <_sbrk_r>
 80126f8:	4580      	cmp	r8, r0
 80126fa:	d13a      	bne.n	8012772 <_malloc_r+0xd2>
 80126fc:	6821      	ldr	r1, [r4, #0]
 80126fe:	3503      	adds	r5, #3
 8012700:	1a6d      	subs	r5, r5, r1
 8012702:	f025 0503 	bic.w	r5, r5, #3
 8012706:	3508      	adds	r5, #8
 8012708:	2d0c      	cmp	r5, #12
 801270a:	bf38      	it	cc
 801270c:	250c      	movcc	r5, #12
 801270e:	4629      	mov	r1, r5
 8012710:	4638      	mov	r0, r7
 8012712:	f7ff ffa5 	bl	8012660 <sbrk_aligned>
 8012716:	3001      	adds	r0, #1
 8012718:	d02b      	beq.n	8012772 <_malloc_r+0xd2>
 801271a:	6823      	ldr	r3, [r4, #0]
 801271c:	442b      	add	r3, r5
 801271e:	6023      	str	r3, [r4, #0]
 8012720:	e00e      	b.n	8012740 <_malloc_r+0xa0>
 8012722:	6822      	ldr	r2, [r4, #0]
 8012724:	1b52      	subs	r2, r2, r5
 8012726:	d41e      	bmi.n	8012766 <_malloc_r+0xc6>
 8012728:	2a0b      	cmp	r2, #11
 801272a:	d916      	bls.n	801275a <_malloc_r+0xba>
 801272c:	1961      	adds	r1, r4, r5
 801272e:	42a3      	cmp	r3, r4
 8012730:	6025      	str	r5, [r4, #0]
 8012732:	bf18      	it	ne
 8012734:	6059      	strne	r1, [r3, #4]
 8012736:	6863      	ldr	r3, [r4, #4]
 8012738:	bf08      	it	eq
 801273a:	6031      	streq	r1, [r6, #0]
 801273c:	5162      	str	r2, [r4, r5]
 801273e:	604b      	str	r3, [r1, #4]
 8012740:	4638      	mov	r0, r7
 8012742:	f104 060b 	add.w	r6, r4, #11
 8012746:	f004 fb7f 	bl	8016e48 <__malloc_unlock>
 801274a:	f026 0607 	bic.w	r6, r6, #7
 801274e:	1d23      	adds	r3, r4, #4
 8012750:	1af2      	subs	r2, r6, r3
 8012752:	d0b6      	beq.n	80126c2 <_malloc_r+0x22>
 8012754:	1b9b      	subs	r3, r3, r6
 8012756:	50a3      	str	r3, [r4, r2]
 8012758:	e7b3      	b.n	80126c2 <_malloc_r+0x22>
 801275a:	6862      	ldr	r2, [r4, #4]
 801275c:	42a3      	cmp	r3, r4
 801275e:	bf0c      	ite	eq
 8012760:	6032      	streq	r2, [r6, #0]
 8012762:	605a      	strne	r2, [r3, #4]
 8012764:	e7ec      	b.n	8012740 <_malloc_r+0xa0>
 8012766:	4623      	mov	r3, r4
 8012768:	6864      	ldr	r4, [r4, #4]
 801276a:	e7b2      	b.n	80126d2 <_malloc_r+0x32>
 801276c:	4634      	mov	r4, r6
 801276e:	6876      	ldr	r6, [r6, #4]
 8012770:	e7b9      	b.n	80126e6 <_malloc_r+0x46>
 8012772:	230c      	movs	r3, #12
 8012774:	603b      	str	r3, [r7, #0]
 8012776:	4638      	mov	r0, r7
 8012778:	f004 fb66 	bl	8016e48 <__malloc_unlock>
 801277c:	e7a1      	b.n	80126c2 <_malloc_r+0x22>
 801277e:	6025      	str	r5, [r4, #0]
 8012780:	e7de      	b.n	8012740 <_malloc_r+0xa0>
 8012782:	bf00      	nop
 8012784:	20005d94 	.word	0x20005d94

08012788 <__sfputc_r>:
 8012788:	6893      	ldr	r3, [r2, #8]
 801278a:	3b01      	subs	r3, #1
 801278c:	2b00      	cmp	r3, #0
 801278e:	b410      	push	{r4}
 8012790:	6093      	str	r3, [r2, #8]
 8012792:	da08      	bge.n	80127a6 <__sfputc_r+0x1e>
 8012794:	6994      	ldr	r4, [r2, #24]
 8012796:	42a3      	cmp	r3, r4
 8012798:	db01      	blt.n	801279e <__sfputc_r+0x16>
 801279a:	290a      	cmp	r1, #10
 801279c:	d103      	bne.n	80127a6 <__sfputc_r+0x1e>
 801279e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127a2:	f002 bdaf 	b.w	8015304 <__swbuf_r>
 80127a6:	6813      	ldr	r3, [r2, #0]
 80127a8:	1c58      	adds	r0, r3, #1
 80127aa:	6010      	str	r0, [r2, #0]
 80127ac:	7019      	strb	r1, [r3, #0]
 80127ae:	4608      	mov	r0, r1
 80127b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127b4:	4770      	bx	lr

080127b6 <__sfputs_r>:
 80127b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127b8:	4606      	mov	r6, r0
 80127ba:	460f      	mov	r7, r1
 80127bc:	4614      	mov	r4, r2
 80127be:	18d5      	adds	r5, r2, r3
 80127c0:	42ac      	cmp	r4, r5
 80127c2:	d101      	bne.n	80127c8 <__sfputs_r+0x12>
 80127c4:	2000      	movs	r0, #0
 80127c6:	e007      	b.n	80127d8 <__sfputs_r+0x22>
 80127c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127cc:	463a      	mov	r2, r7
 80127ce:	4630      	mov	r0, r6
 80127d0:	f7ff ffda 	bl	8012788 <__sfputc_r>
 80127d4:	1c43      	adds	r3, r0, #1
 80127d6:	d1f3      	bne.n	80127c0 <__sfputs_r+0xa>
 80127d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080127dc <_vfiprintf_r>:
 80127dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e0:	460d      	mov	r5, r1
 80127e2:	b09d      	sub	sp, #116	; 0x74
 80127e4:	4614      	mov	r4, r2
 80127e6:	4698      	mov	r8, r3
 80127e8:	4606      	mov	r6, r0
 80127ea:	b118      	cbz	r0, 80127f4 <_vfiprintf_r+0x18>
 80127ec:	6983      	ldr	r3, [r0, #24]
 80127ee:	b90b      	cbnz	r3, 80127f4 <_vfiprintf_r+0x18>
 80127f0:	f003 fe1e 	bl	8016430 <__sinit>
 80127f4:	4b89      	ldr	r3, [pc, #548]	; (8012a1c <_vfiprintf_r+0x240>)
 80127f6:	429d      	cmp	r5, r3
 80127f8:	d11b      	bne.n	8012832 <_vfiprintf_r+0x56>
 80127fa:	6875      	ldr	r5, [r6, #4]
 80127fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127fe:	07d9      	lsls	r1, r3, #31
 8012800:	d405      	bmi.n	801280e <_vfiprintf_r+0x32>
 8012802:	89ab      	ldrh	r3, [r5, #12]
 8012804:	059a      	lsls	r2, r3, #22
 8012806:	d402      	bmi.n	801280e <_vfiprintf_r+0x32>
 8012808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801280a:	f004 fa6f 	bl	8016cec <__retarget_lock_acquire_recursive>
 801280e:	89ab      	ldrh	r3, [r5, #12]
 8012810:	071b      	lsls	r3, r3, #28
 8012812:	d501      	bpl.n	8012818 <_vfiprintf_r+0x3c>
 8012814:	692b      	ldr	r3, [r5, #16]
 8012816:	b9eb      	cbnz	r3, 8012854 <_vfiprintf_r+0x78>
 8012818:	4629      	mov	r1, r5
 801281a:	4630      	mov	r0, r6
 801281c:	f002 fdd6 	bl	80153cc <__swsetup_r>
 8012820:	b1c0      	cbz	r0, 8012854 <_vfiprintf_r+0x78>
 8012822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012824:	07dc      	lsls	r4, r3, #31
 8012826:	d50e      	bpl.n	8012846 <_vfiprintf_r+0x6a>
 8012828:	f04f 30ff 	mov.w	r0, #4294967295
 801282c:	b01d      	add	sp, #116	; 0x74
 801282e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012832:	4b7b      	ldr	r3, [pc, #492]	; (8012a20 <_vfiprintf_r+0x244>)
 8012834:	429d      	cmp	r5, r3
 8012836:	d101      	bne.n	801283c <_vfiprintf_r+0x60>
 8012838:	68b5      	ldr	r5, [r6, #8]
 801283a:	e7df      	b.n	80127fc <_vfiprintf_r+0x20>
 801283c:	4b79      	ldr	r3, [pc, #484]	; (8012a24 <_vfiprintf_r+0x248>)
 801283e:	429d      	cmp	r5, r3
 8012840:	bf08      	it	eq
 8012842:	68f5      	ldreq	r5, [r6, #12]
 8012844:	e7da      	b.n	80127fc <_vfiprintf_r+0x20>
 8012846:	89ab      	ldrh	r3, [r5, #12]
 8012848:	0598      	lsls	r0, r3, #22
 801284a:	d4ed      	bmi.n	8012828 <_vfiprintf_r+0x4c>
 801284c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801284e:	f004 fa4f 	bl	8016cf0 <__retarget_lock_release_recursive>
 8012852:	e7e9      	b.n	8012828 <_vfiprintf_r+0x4c>
 8012854:	2300      	movs	r3, #0
 8012856:	9309      	str	r3, [sp, #36]	; 0x24
 8012858:	2320      	movs	r3, #32
 801285a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801285e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012862:	2330      	movs	r3, #48	; 0x30
 8012864:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012a28 <_vfiprintf_r+0x24c>
 8012868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801286c:	f04f 0901 	mov.w	r9, #1
 8012870:	4623      	mov	r3, r4
 8012872:	469a      	mov	sl, r3
 8012874:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012878:	b10a      	cbz	r2, 801287e <_vfiprintf_r+0xa2>
 801287a:	2a25      	cmp	r2, #37	; 0x25
 801287c:	d1f9      	bne.n	8012872 <_vfiprintf_r+0x96>
 801287e:	ebba 0b04 	subs.w	fp, sl, r4
 8012882:	d00b      	beq.n	801289c <_vfiprintf_r+0xc0>
 8012884:	465b      	mov	r3, fp
 8012886:	4622      	mov	r2, r4
 8012888:	4629      	mov	r1, r5
 801288a:	4630      	mov	r0, r6
 801288c:	f7ff ff93 	bl	80127b6 <__sfputs_r>
 8012890:	3001      	adds	r0, #1
 8012892:	f000 80aa 	beq.w	80129ea <_vfiprintf_r+0x20e>
 8012896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012898:	445a      	add	r2, fp
 801289a:	9209      	str	r2, [sp, #36]	; 0x24
 801289c:	f89a 3000 	ldrb.w	r3, [sl]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f000 80a2 	beq.w	80129ea <_vfiprintf_r+0x20e>
 80128a6:	2300      	movs	r3, #0
 80128a8:	f04f 32ff 	mov.w	r2, #4294967295
 80128ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128b0:	f10a 0a01 	add.w	sl, sl, #1
 80128b4:	9304      	str	r3, [sp, #16]
 80128b6:	9307      	str	r3, [sp, #28]
 80128b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128bc:	931a      	str	r3, [sp, #104]	; 0x68
 80128be:	4654      	mov	r4, sl
 80128c0:	2205      	movs	r2, #5
 80128c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128c6:	4858      	ldr	r0, [pc, #352]	; (8012a28 <_vfiprintf_r+0x24c>)
 80128c8:	f7ed fcaa 	bl	8000220 <memchr>
 80128cc:	9a04      	ldr	r2, [sp, #16]
 80128ce:	b9d8      	cbnz	r0, 8012908 <_vfiprintf_r+0x12c>
 80128d0:	06d1      	lsls	r1, r2, #27
 80128d2:	bf44      	itt	mi
 80128d4:	2320      	movmi	r3, #32
 80128d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128da:	0713      	lsls	r3, r2, #28
 80128dc:	bf44      	itt	mi
 80128de:	232b      	movmi	r3, #43	; 0x2b
 80128e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128e4:	f89a 3000 	ldrb.w	r3, [sl]
 80128e8:	2b2a      	cmp	r3, #42	; 0x2a
 80128ea:	d015      	beq.n	8012918 <_vfiprintf_r+0x13c>
 80128ec:	9a07      	ldr	r2, [sp, #28]
 80128ee:	4654      	mov	r4, sl
 80128f0:	2000      	movs	r0, #0
 80128f2:	f04f 0c0a 	mov.w	ip, #10
 80128f6:	4621      	mov	r1, r4
 80128f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128fc:	3b30      	subs	r3, #48	; 0x30
 80128fe:	2b09      	cmp	r3, #9
 8012900:	d94e      	bls.n	80129a0 <_vfiprintf_r+0x1c4>
 8012902:	b1b0      	cbz	r0, 8012932 <_vfiprintf_r+0x156>
 8012904:	9207      	str	r2, [sp, #28]
 8012906:	e014      	b.n	8012932 <_vfiprintf_r+0x156>
 8012908:	eba0 0308 	sub.w	r3, r0, r8
 801290c:	fa09 f303 	lsl.w	r3, r9, r3
 8012910:	4313      	orrs	r3, r2
 8012912:	9304      	str	r3, [sp, #16]
 8012914:	46a2      	mov	sl, r4
 8012916:	e7d2      	b.n	80128be <_vfiprintf_r+0xe2>
 8012918:	9b03      	ldr	r3, [sp, #12]
 801291a:	1d19      	adds	r1, r3, #4
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	9103      	str	r1, [sp, #12]
 8012920:	2b00      	cmp	r3, #0
 8012922:	bfbb      	ittet	lt
 8012924:	425b      	neglt	r3, r3
 8012926:	f042 0202 	orrlt.w	r2, r2, #2
 801292a:	9307      	strge	r3, [sp, #28]
 801292c:	9307      	strlt	r3, [sp, #28]
 801292e:	bfb8      	it	lt
 8012930:	9204      	strlt	r2, [sp, #16]
 8012932:	7823      	ldrb	r3, [r4, #0]
 8012934:	2b2e      	cmp	r3, #46	; 0x2e
 8012936:	d10c      	bne.n	8012952 <_vfiprintf_r+0x176>
 8012938:	7863      	ldrb	r3, [r4, #1]
 801293a:	2b2a      	cmp	r3, #42	; 0x2a
 801293c:	d135      	bne.n	80129aa <_vfiprintf_r+0x1ce>
 801293e:	9b03      	ldr	r3, [sp, #12]
 8012940:	1d1a      	adds	r2, r3, #4
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	9203      	str	r2, [sp, #12]
 8012946:	2b00      	cmp	r3, #0
 8012948:	bfb8      	it	lt
 801294a:	f04f 33ff 	movlt.w	r3, #4294967295
 801294e:	3402      	adds	r4, #2
 8012950:	9305      	str	r3, [sp, #20]
 8012952:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012a38 <_vfiprintf_r+0x25c>
 8012956:	7821      	ldrb	r1, [r4, #0]
 8012958:	2203      	movs	r2, #3
 801295a:	4650      	mov	r0, sl
 801295c:	f7ed fc60 	bl	8000220 <memchr>
 8012960:	b140      	cbz	r0, 8012974 <_vfiprintf_r+0x198>
 8012962:	2340      	movs	r3, #64	; 0x40
 8012964:	eba0 000a 	sub.w	r0, r0, sl
 8012968:	fa03 f000 	lsl.w	r0, r3, r0
 801296c:	9b04      	ldr	r3, [sp, #16]
 801296e:	4303      	orrs	r3, r0
 8012970:	3401      	adds	r4, #1
 8012972:	9304      	str	r3, [sp, #16]
 8012974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012978:	482c      	ldr	r0, [pc, #176]	; (8012a2c <_vfiprintf_r+0x250>)
 801297a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801297e:	2206      	movs	r2, #6
 8012980:	f7ed fc4e 	bl	8000220 <memchr>
 8012984:	2800      	cmp	r0, #0
 8012986:	d03f      	beq.n	8012a08 <_vfiprintf_r+0x22c>
 8012988:	4b29      	ldr	r3, [pc, #164]	; (8012a30 <_vfiprintf_r+0x254>)
 801298a:	bb1b      	cbnz	r3, 80129d4 <_vfiprintf_r+0x1f8>
 801298c:	9b03      	ldr	r3, [sp, #12]
 801298e:	3307      	adds	r3, #7
 8012990:	f023 0307 	bic.w	r3, r3, #7
 8012994:	3308      	adds	r3, #8
 8012996:	9303      	str	r3, [sp, #12]
 8012998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801299a:	443b      	add	r3, r7
 801299c:	9309      	str	r3, [sp, #36]	; 0x24
 801299e:	e767      	b.n	8012870 <_vfiprintf_r+0x94>
 80129a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80129a4:	460c      	mov	r4, r1
 80129a6:	2001      	movs	r0, #1
 80129a8:	e7a5      	b.n	80128f6 <_vfiprintf_r+0x11a>
 80129aa:	2300      	movs	r3, #0
 80129ac:	3401      	adds	r4, #1
 80129ae:	9305      	str	r3, [sp, #20]
 80129b0:	4619      	mov	r1, r3
 80129b2:	f04f 0c0a 	mov.w	ip, #10
 80129b6:	4620      	mov	r0, r4
 80129b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129bc:	3a30      	subs	r2, #48	; 0x30
 80129be:	2a09      	cmp	r2, #9
 80129c0:	d903      	bls.n	80129ca <_vfiprintf_r+0x1ee>
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d0c5      	beq.n	8012952 <_vfiprintf_r+0x176>
 80129c6:	9105      	str	r1, [sp, #20]
 80129c8:	e7c3      	b.n	8012952 <_vfiprintf_r+0x176>
 80129ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80129ce:	4604      	mov	r4, r0
 80129d0:	2301      	movs	r3, #1
 80129d2:	e7f0      	b.n	80129b6 <_vfiprintf_r+0x1da>
 80129d4:	ab03      	add	r3, sp, #12
 80129d6:	9300      	str	r3, [sp, #0]
 80129d8:	462a      	mov	r2, r5
 80129da:	4b16      	ldr	r3, [pc, #88]	; (8012a34 <_vfiprintf_r+0x258>)
 80129dc:	a904      	add	r1, sp, #16
 80129de:	4630      	mov	r0, r6
 80129e0:	f000 f8cc 	bl	8012b7c <_printf_float>
 80129e4:	4607      	mov	r7, r0
 80129e6:	1c78      	adds	r0, r7, #1
 80129e8:	d1d6      	bne.n	8012998 <_vfiprintf_r+0x1bc>
 80129ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129ec:	07d9      	lsls	r1, r3, #31
 80129ee:	d405      	bmi.n	80129fc <_vfiprintf_r+0x220>
 80129f0:	89ab      	ldrh	r3, [r5, #12]
 80129f2:	059a      	lsls	r2, r3, #22
 80129f4:	d402      	bmi.n	80129fc <_vfiprintf_r+0x220>
 80129f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80129f8:	f004 f97a 	bl	8016cf0 <__retarget_lock_release_recursive>
 80129fc:	89ab      	ldrh	r3, [r5, #12]
 80129fe:	065b      	lsls	r3, r3, #25
 8012a00:	f53f af12 	bmi.w	8012828 <_vfiprintf_r+0x4c>
 8012a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a06:	e711      	b.n	801282c <_vfiprintf_r+0x50>
 8012a08:	ab03      	add	r3, sp, #12
 8012a0a:	9300      	str	r3, [sp, #0]
 8012a0c:	462a      	mov	r2, r5
 8012a0e:	4b09      	ldr	r3, [pc, #36]	; (8012a34 <_vfiprintf_r+0x258>)
 8012a10:	a904      	add	r1, sp, #16
 8012a12:	4630      	mov	r0, r6
 8012a14:	f000 fb56 	bl	80130c4 <_printf_i>
 8012a18:	e7e4      	b.n	80129e4 <_vfiprintf_r+0x208>
 8012a1a:	bf00      	nop
 8012a1c:	08049ab4 	.word	0x08049ab4
 8012a20:	08049ad4 	.word	0x08049ad4
 8012a24:	08049a94 	.word	0x08049a94
 8012a28:	0804956c 	.word	0x0804956c
 8012a2c:	08049576 	.word	0x08049576
 8012a30:	08012b7d 	.word	0x08012b7d
 8012a34:	080127b7 	.word	0x080127b7
 8012a38:	08049572 	.word	0x08049572

08012a3c <__cvt>:
 8012a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a40:	ec55 4b10 	vmov	r4, r5, d0
 8012a44:	2d00      	cmp	r5, #0
 8012a46:	460e      	mov	r6, r1
 8012a48:	4619      	mov	r1, r3
 8012a4a:	462b      	mov	r3, r5
 8012a4c:	bfbb      	ittet	lt
 8012a4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012a52:	461d      	movlt	r5, r3
 8012a54:	2300      	movge	r3, #0
 8012a56:	232d      	movlt	r3, #45	; 0x2d
 8012a58:	700b      	strb	r3, [r1, #0]
 8012a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012a60:	4691      	mov	r9, r2
 8012a62:	f023 0820 	bic.w	r8, r3, #32
 8012a66:	bfbc      	itt	lt
 8012a68:	4622      	movlt	r2, r4
 8012a6a:	4614      	movlt	r4, r2
 8012a6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012a70:	d005      	beq.n	8012a7e <__cvt+0x42>
 8012a72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012a76:	d100      	bne.n	8012a7a <__cvt+0x3e>
 8012a78:	3601      	adds	r6, #1
 8012a7a:	2102      	movs	r1, #2
 8012a7c:	e000      	b.n	8012a80 <__cvt+0x44>
 8012a7e:	2103      	movs	r1, #3
 8012a80:	ab03      	add	r3, sp, #12
 8012a82:	9301      	str	r3, [sp, #4]
 8012a84:	ab02      	add	r3, sp, #8
 8012a86:	9300      	str	r3, [sp, #0]
 8012a88:	ec45 4b10 	vmov	d0, r4, r5
 8012a8c:	4653      	mov	r3, sl
 8012a8e:	4632      	mov	r2, r6
 8012a90:	f002 fdc6 	bl	8015620 <_dtoa_r>
 8012a94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012a98:	4607      	mov	r7, r0
 8012a9a:	d102      	bne.n	8012aa2 <__cvt+0x66>
 8012a9c:	f019 0f01 	tst.w	r9, #1
 8012aa0:	d022      	beq.n	8012ae8 <__cvt+0xac>
 8012aa2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012aa6:	eb07 0906 	add.w	r9, r7, r6
 8012aaa:	d110      	bne.n	8012ace <__cvt+0x92>
 8012aac:	783b      	ldrb	r3, [r7, #0]
 8012aae:	2b30      	cmp	r3, #48	; 0x30
 8012ab0:	d10a      	bne.n	8012ac8 <__cvt+0x8c>
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	4629      	mov	r1, r5
 8012aba:	f7ee f825 	bl	8000b08 <__aeabi_dcmpeq>
 8012abe:	b918      	cbnz	r0, 8012ac8 <__cvt+0x8c>
 8012ac0:	f1c6 0601 	rsb	r6, r6, #1
 8012ac4:	f8ca 6000 	str.w	r6, [sl]
 8012ac8:	f8da 3000 	ldr.w	r3, [sl]
 8012acc:	4499      	add	r9, r3
 8012ace:	2200      	movs	r2, #0
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	4629      	mov	r1, r5
 8012ad6:	f7ee f817 	bl	8000b08 <__aeabi_dcmpeq>
 8012ada:	b108      	cbz	r0, 8012ae0 <__cvt+0xa4>
 8012adc:	f8cd 900c 	str.w	r9, [sp, #12]
 8012ae0:	2230      	movs	r2, #48	; 0x30
 8012ae2:	9b03      	ldr	r3, [sp, #12]
 8012ae4:	454b      	cmp	r3, r9
 8012ae6:	d307      	bcc.n	8012af8 <__cvt+0xbc>
 8012ae8:	9b03      	ldr	r3, [sp, #12]
 8012aea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012aec:	1bdb      	subs	r3, r3, r7
 8012aee:	4638      	mov	r0, r7
 8012af0:	6013      	str	r3, [r2, #0]
 8012af2:	b004      	add	sp, #16
 8012af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012af8:	1c59      	adds	r1, r3, #1
 8012afa:	9103      	str	r1, [sp, #12]
 8012afc:	701a      	strb	r2, [r3, #0]
 8012afe:	e7f0      	b.n	8012ae2 <__cvt+0xa6>

08012b00 <__exponent>:
 8012b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b02:	4603      	mov	r3, r0
 8012b04:	2900      	cmp	r1, #0
 8012b06:	bfb8      	it	lt
 8012b08:	4249      	neglt	r1, r1
 8012b0a:	f803 2b02 	strb.w	r2, [r3], #2
 8012b0e:	bfb4      	ite	lt
 8012b10:	222d      	movlt	r2, #45	; 0x2d
 8012b12:	222b      	movge	r2, #43	; 0x2b
 8012b14:	2909      	cmp	r1, #9
 8012b16:	7042      	strb	r2, [r0, #1]
 8012b18:	dd2a      	ble.n	8012b70 <__exponent+0x70>
 8012b1a:	f10d 0407 	add.w	r4, sp, #7
 8012b1e:	46a4      	mov	ip, r4
 8012b20:	270a      	movs	r7, #10
 8012b22:	46a6      	mov	lr, r4
 8012b24:	460a      	mov	r2, r1
 8012b26:	fb91 f6f7 	sdiv	r6, r1, r7
 8012b2a:	fb07 1516 	mls	r5, r7, r6, r1
 8012b2e:	3530      	adds	r5, #48	; 0x30
 8012b30:	2a63      	cmp	r2, #99	; 0x63
 8012b32:	f104 34ff 	add.w	r4, r4, #4294967295
 8012b36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012b3a:	4631      	mov	r1, r6
 8012b3c:	dcf1      	bgt.n	8012b22 <__exponent+0x22>
 8012b3e:	3130      	adds	r1, #48	; 0x30
 8012b40:	f1ae 0502 	sub.w	r5, lr, #2
 8012b44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012b48:	1c44      	adds	r4, r0, #1
 8012b4a:	4629      	mov	r1, r5
 8012b4c:	4561      	cmp	r1, ip
 8012b4e:	d30a      	bcc.n	8012b66 <__exponent+0x66>
 8012b50:	f10d 0209 	add.w	r2, sp, #9
 8012b54:	eba2 020e 	sub.w	r2, r2, lr
 8012b58:	4565      	cmp	r5, ip
 8012b5a:	bf88      	it	hi
 8012b5c:	2200      	movhi	r2, #0
 8012b5e:	4413      	add	r3, r2
 8012b60:	1a18      	subs	r0, r3, r0
 8012b62:	b003      	add	sp, #12
 8012b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012b6e:	e7ed      	b.n	8012b4c <__exponent+0x4c>
 8012b70:	2330      	movs	r3, #48	; 0x30
 8012b72:	3130      	adds	r1, #48	; 0x30
 8012b74:	7083      	strb	r3, [r0, #2]
 8012b76:	70c1      	strb	r1, [r0, #3]
 8012b78:	1d03      	adds	r3, r0, #4
 8012b7a:	e7f1      	b.n	8012b60 <__exponent+0x60>

08012b7c <_printf_float>:
 8012b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b80:	ed2d 8b02 	vpush	{d8}
 8012b84:	b08d      	sub	sp, #52	; 0x34
 8012b86:	460c      	mov	r4, r1
 8012b88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012b8c:	4616      	mov	r6, r2
 8012b8e:	461f      	mov	r7, r3
 8012b90:	4605      	mov	r5, r0
 8012b92:	f004 f8a5 	bl	8016ce0 <_localeconv_r>
 8012b96:	f8d0 a000 	ldr.w	sl, [r0]
 8012b9a:	4650      	mov	r0, sl
 8012b9c:	f7ed fb32 	bl	8000204 <strlen>
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8012ba4:	6823      	ldr	r3, [r4, #0]
 8012ba6:	9305      	str	r3, [sp, #20]
 8012ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8012bac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012bb0:	3307      	adds	r3, #7
 8012bb2:	f023 0307 	bic.w	r3, r3, #7
 8012bb6:	f103 0208 	add.w	r2, r3, #8
 8012bba:	f8c8 2000 	str.w	r2, [r8]
 8012bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012bc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012bca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012bce:	9307      	str	r3, [sp, #28]
 8012bd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8012bd4:	ee08 0a10 	vmov	s16, r0
 8012bd8:	4b9f      	ldr	r3, [pc, #636]	; (8012e58 <_printf_float+0x2dc>)
 8012bda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012bde:	f04f 32ff 	mov.w	r2, #4294967295
 8012be2:	f7ed ffc3 	bl	8000b6c <__aeabi_dcmpun>
 8012be6:	bb88      	cbnz	r0, 8012c4c <_printf_float+0xd0>
 8012be8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012bec:	4b9a      	ldr	r3, [pc, #616]	; (8012e58 <_printf_float+0x2dc>)
 8012bee:	f04f 32ff 	mov.w	r2, #4294967295
 8012bf2:	f7ed ff9d 	bl	8000b30 <__aeabi_dcmple>
 8012bf6:	bb48      	cbnz	r0, 8012c4c <_printf_float+0xd0>
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	4640      	mov	r0, r8
 8012bfe:	4649      	mov	r1, r9
 8012c00:	f7ed ff8c 	bl	8000b1c <__aeabi_dcmplt>
 8012c04:	b110      	cbz	r0, 8012c0c <_printf_float+0x90>
 8012c06:	232d      	movs	r3, #45	; 0x2d
 8012c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c0c:	4b93      	ldr	r3, [pc, #588]	; (8012e5c <_printf_float+0x2e0>)
 8012c0e:	4894      	ldr	r0, [pc, #592]	; (8012e60 <_printf_float+0x2e4>)
 8012c10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012c14:	bf94      	ite	ls
 8012c16:	4698      	movls	r8, r3
 8012c18:	4680      	movhi	r8, r0
 8012c1a:	2303      	movs	r3, #3
 8012c1c:	6123      	str	r3, [r4, #16]
 8012c1e:	9b05      	ldr	r3, [sp, #20]
 8012c20:	f023 0204 	bic.w	r2, r3, #4
 8012c24:	6022      	str	r2, [r4, #0]
 8012c26:	f04f 0900 	mov.w	r9, #0
 8012c2a:	9700      	str	r7, [sp, #0]
 8012c2c:	4633      	mov	r3, r6
 8012c2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8012c30:	4621      	mov	r1, r4
 8012c32:	4628      	mov	r0, r5
 8012c34:	f000 f9d8 	bl	8012fe8 <_printf_common>
 8012c38:	3001      	adds	r0, #1
 8012c3a:	f040 8090 	bne.w	8012d5e <_printf_float+0x1e2>
 8012c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c42:	b00d      	add	sp, #52	; 0x34
 8012c44:	ecbd 8b02 	vpop	{d8}
 8012c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c4c:	4642      	mov	r2, r8
 8012c4e:	464b      	mov	r3, r9
 8012c50:	4640      	mov	r0, r8
 8012c52:	4649      	mov	r1, r9
 8012c54:	f7ed ff8a 	bl	8000b6c <__aeabi_dcmpun>
 8012c58:	b140      	cbz	r0, 8012c6c <_printf_float+0xf0>
 8012c5a:	464b      	mov	r3, r9
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	bfbc      	itt	lt
 8012c60:	232d      	movlt	r3, #45	; 0x2d
 8012c62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012c66:	487f      	ldr	r0, [pc, #508]	; (8012e64 <_printf_float+0x2e8>)
 8012c68:	4b7f      	ldr	r3, [pc, #508]	; (8012e68 <_printf_float+0x2ec>)
 8012c6a:	e7d1      	b.n	8012c10 <_printf_float+0x94>
 8012c6c:	6863      	ldr	r3, [r4, #4]
 8012c6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012c72:	9206      	str	r2, [sp, #24]
 8012c74:	1c5a      	adds	r2, r3, #1
 8012c76:	d13f      	bne.n	8012cf8 <_printf_float+0x17c>
 8012c78:	2306      	movs	r3, #6
 8012c7a:	6063      	str	r3, [r4, #4]
 8012c7c:	9b05      	ldr	r3, [sp, #20]
 8012c7e:	6861      	ldr	r1, [r4, #4]
 8012c80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012c84:	2300      	movs	r3, #0
 8012c86:	9303      	str	r3, [sp, #12]
 8012c88:	ab0a      	add	r3, sp, #40	; 0x28
 8012c8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012c8e:	ab09      	add	r3, sp, #36	; 0x24
 8012c90:	ec49 8b10 	vmov	d0, r8, r9
 8012c94:	9300      	str	r3, [sp, #0]
 8012c96:	6022      	str	r2, [r4, #0]
 8012c98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012c9c:	4628      	mov	r0, r5
 8012c9e:	f7ff fecd 	bl	8012a3c <__cvt>
 8012ca2:	9b06      	ldr	r3, [sp, #24]
 8012ca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ca6:	2b47      	cmp	r3, #71	; 0x47
 8012ca8:	4680      	mov	r8, r0
 8012caa:	d108      	bne.n	8012cbe <_printf_float+0x142>
 8012cac:	1cc8      	adds	r0, r1, #3
 8012cae:	db02      	blt.n	8012cb6 <_printf_float+0x13a>
 8012cb0:	6863      	ldr	r3, [r4, #4]
 8012cb2:	4299      	cmp	r1, r3
 8012cb4:	dd41      	ble.n	8012d3a <_printf_float+0x1be>
 8012cb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8012cba:	fa5f fb8b 	uxtb.w	fp, fp
 8012cbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012cc2:	d820      	bhi.n	8012d06 <_printf_float+0x18a>
 8012cc4:	3901      	subs	r1, #1
 8012cc6:	465a      	mov	r2, fp
 8012cc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012ccc:	9109      	str	r1, [sp, #36]	; 0x24
 8012cce:	f7ff ff17 	bl	8012b00 <__exponent>
 8012cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cd4:	1813      	adds	r3, r2, r0
 8012cd6:	2a01      	cmp	r2, #1
 8012cd8:	4681      	mov	r9, r0
 8012cda:	6123      	str	r3, [r4, #16]
 8012cdc:	dc02      	bgt.n	8012ce4 <_printf_float+0x168>
 8012cde:	6822      	ldr	r2, [r4, #0]
 8012ce0:	07d2      	lsls	r2, r2, #31
 8012ce2:	d501      	bpl.n	8012ce8 <_printf_float+0x16c>
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	6123      	str	r3, [r4, #16]
 8012ce8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d09c      	beq.n	8012c2a <_printf_float+0xae>
 8012cf0:	232d      	movs	r3, #45	; 0x2d
 8012cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cf6:	e798      	b.n	8012c2a <_printf_float+0xae>
 8012cf8:	9a06      	ldr	r2, [sp, #24]
 8012cfa:	2a47      	cmp	r2, #71	; 0x47
 8012cfc:	d1be      	bne.n	8012c7c <_printf_float+0x100>
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d1bc      	bne.n	8012c7c <_printf_float+0x100>
 8012d02:	2301      	movs	r3, #1
 8012d04:	e7b9      	b.n	8012c7a <_printf_float+0xfe>
 8012d06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012d0a:	d118      	bne.n	8012d3e <_printf_float+0x1c2>
 8012d0c:	2900      	cmp	r1, #0
 8012d0e:	6863      	ldr	r3, [r4, #4]
 8012d10:	dd0b      	ble.n	8012d2a <_printf_float+0x1ae>
 8012d12:	6121      	str	r1, [r4, #16]
 8012d14:	b913      	cbnz	r3, 8012d1c <_printf_float+0x1a0>
 8012d16:	6822      	ldr	r2, [r4, #0]
 8012d18:	07d0      	lsls	r0, r2, #31
 8012d1a:	d502      	bpl.n	8012d22 <_printf_float+0x1a6>
 8012d1c:	3301      	adds	r3, #1
 8012d1e:	440b      	add	r3, r1
 8012d20:	6123      	str	r3, [r4, #16]
 8012d22:	65a1      	str	r1, [r4, #88]	; 0x58
 8012d24:	f04f 0900 	mov.w	r9, #0
 8012d28:	e7de      	b.n	8012ce8 <_printf_float+0x16c>
 8012d2a:	b913      	cbnz	r3, 8012d32 <_printf_float+0x1b6>
 8012d2c:	6822      	ldr	r2, [r4, #0]
 8012d2e:	07d2      	lsls	r2, r2, #31
 8012d30:	d501      	bpl.n	8012d36 <_printf_float+0x1ba>
 8012d32:	3302      	adds	r3, #2
 8012d34:	e7f4      	b.n	8012d20 <_printf_float+0x1a4>
 8012d36:	2301      	movs	r3, #1
 8012d38:	e7f2      	b.n	8012d20 <_printf_float+0x1a4>
 8012d3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d40:	4299      	cmp	r1, r3
 8012d42:	db05      	blt.n	8012d50 <_printf_float+0x1d4>
 8012d44:	6823      	ldr	r3, [r4, #0]
 8012d46:	6121      	str	r1, [r4, #16]
 8012d48:	07d8      	lsls	r0, r3, #31
 8012d4a:	d5ea      	bpl.n	8012d22 <_printf_float+0x1a6>
 8012d4c:	1c4b      	adds	r3, r1, #1
 8012d4e:	e7e7      	b.n	8012d20 <_printf_float+0x1a4>
 8012d50:	2900      	cmp	r1, #0
 8012d52:	bfd4      	ite	le
 8012d54:	f1c1 0202 	rsble	r2, r1, #2
 8012d58:	2201      	movgt	r2, #1
 8012d5a:	4413      	add	r3, r2
 8012d5c:	e7e0      	b.n	8012d20 <_printf_float+0x1a4>
 8012d5e:	6823      	ldr	r3, [r4, #0]
 8012d60:	055a      	lsls	r2, r3, #21
 8012d62:	d407      	bmi.n	8012d74 <_printf_float+0x1f8>
 8012d64:	6923      	ldr	r3, [r4, #16]
 8012d66:	4642      	mov	r2, r8
 8012d68:	4631      	mov	r1, r6
 8012d6a:	4628      	mov	r0, r5
 8012d6c:	47b8      	blx	r7
 8012d6e:	3001      	adds	r0, #1
 8012d70:	d12c      	bne.n	8012dcc <_printf_float+0x250>
 8012d72:	e764      	b.n	8012c3e <_printf_float+0xc2>
 8012d74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012d78:	f240 80e0 	bls.w	8012f3c <_printf_float+0x3c0>
 8012d7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012d80:	2200      	movs	r2, #0
 8012d82:	2300      	movs	r3, #0
 8012d84:	f7ed fec0 	bl	8000b08 <__aeabi_dcmpeq>
 8012d88:	2800      	cmp	r0, #0
 8012d8a:	d034      	beq.n	8012df6 <_printf_float+0x27a>
 8012d8c:	4a37      	ldr	r2, [pc, #220]	; (8012e6c <_printf_float+0x2f0>)
 8012d8e:	2301      	movs	r3, #1
 8012d90:	4631      	mov	r1, r6
 8012d92:	4628      	mov	r0, r5
 8012d94:	47b8      	blx	r7
 8012d96:	3001      	adds	r0, #1
 8012d98:	f43f af51 	beq.w	8012c3e <_printf_float+0xc2>
 8012d9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012da0:	429a      	cmp	r2, r3
 8012da2:	db02      	blt.n	8012daa <_printf_float+0x22e>
 8012da4:	6823      	ldr	r3, [r4, #0]
 8012da6:	07d8      	lsls	r0, r3, #31
 8012da8:	d510      	bpl.n	8012dcc <_printf_float+0x250>
 8012daa:	ee18 3a10 	vmov	r3, s16
 8012dae:	4652      	mov	r2, sl
 8012db0:	4631      	mov	r1, r6
 8012db2:	4628      	mov	r0, r5
 8012db4:	47b8      	blx	r7
 8012db6:	3001      	adds	r0, #1
 8012db8:	f43f af41 	beq.w	8012c3e <_printf_float+0xc2>
 8012dbc:	f04f 0800 	mov.w	r8, #0
 8012dc0:	f104 091a 	add.w	r9, r4, #26
 8012dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dc6:	3b01      	subs	r3, #1
 8012dc8:	4543      	cmp	r3, r8
 8012dca:	dc09      	bgt.n	8012de0 <_printf_float+0x264>
 8012dcc:	6823      	ldr	r3, [r4, #0]
 8012dce:	079b      	lsls	r3, r3, #30
 8012dd0:	f100 8105 	bmi.w	8012fde <_printf_float+0x462>
 8012dd4:	68e0      	ldr	r0, [r4, #12]
 8012dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012dd8:	4298      	cmp	r0, r3
 8012dda:	bfb8      	it	lt
 8012ddc:	4618      	movlt	r0, r3
 8012dde:	e730      	b.n	8012c42 <_printf_float+0xc6>
 8012de0:	2301      	movs	r3, #1
 8012de2:	464a      	mov	r2, r9
 8012de4:	4631      	mov	r1, r6
 8012de6:	4628      	mov	r0, r5
 8012de8:	47b8      	blx	r7
 8012dea:	3001      	adds	r0, #1
 8012dec:	f43f af27 	beq.w	8012c3e <_printf_float+0xc2>
 8012df0:	f108 0801 	add.w	r8, r8, #1
 8012df4:	e7e6      	b.n	8012dc4 <_printf_float+0x248>
 8012df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	dc39      	bgt.n	8012e70 <_printf_float+0x2f4>
 8012dfc:	4a1b      	ldr	r2, [pc, #108]	; (8012e6c <_printf_float+0x2f0>)
 8012dfe:	2301      	movs	r3, #1
 8012e00:	4631      	mov	r1, r6
 8012e02:	4628      	mov	r0, r5
 8012e04:	47b8      	blx	r7
 8012e06:	3001      	adds	r0, #1
 8012e08:	f43f af19 	beq.w	8012c3e <_printf_float+0xc2>
 8012e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012e10:	4313      	orrs	r3, r2
 8012e12:	d102      	bne.n	8012e1a <_printf_float+0x29e>
 8012e14:	6823      	ldr	r3, [r4, #0]
 8012e16:	07d9      	lsls	r1, r3, #31
 8012e18:	d5d8      	bpl.n	8012dcc <_printf_float+0x250>
 8012e1a:	ee18 3a10 	vmov	r3, s16
 8012e1e:	4652      	mov	r2, sl
 8012e20:	4631      	mov	r1, r6
 8012e22:	4628      	mov	r0, r5
 8012e24:	47b8      	blx	r7
 8012e26:	3001      	adds	r0, #1
 8012e28:	f43f af09 	beq.w	8012c3e <_printf_float+0xc2>
 8012e2c:	f04f 0900 	mov.w	r9, #0
 8012e30:	f104 0a1a 	add.w	sl, r4, #26
 8012e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e36:	425b      	negs	r3, r3
 8012e38:	454b      	cmp	r3, r9
 8012e3a:	dc01      	bgt.n	8012e40 <_printf_float+0x2c4>
 8012e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e3e:	e792      	b.n	8012d66 <_printf_float+0x1ea>
 8012e40:	2301      	movs	r3, #1
 8012e42:	4652      	mov	r2, sl
 8012e44:	4631      	mov	r1, r6
 8012e46:	4628      	mov	r0, r5
 8012e48:	47b8      	blx	r7
 8012e4a:	3001      	adds	r0, #1
 8012e4c:	f43f aef7 	beq.w	8012c3e <_printf_float+0xc2>
 8012e50:	f109 0901 	add.w	r9, r9, #1
 8012e54:	e7ee      	b.n	8012e34 <_printf_float+0x2b8>
 8012e56:	bf00      	nop
 8012e58:	7fefffff 	.word	0x7fefffff
 8012e5c:	0804957d 	.word	0x0804957d
 8012e60:	08049581 	.word	0x08049581
 8012e64:	08049589 	.word	0x08049589
 8012e68:	08049585 	.word	0x08049585
 8012e6c:	08049d30 	.word	0x08049d30
 8012e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012e74:	429a      	cmp	r2, r3
 8012e76:	bfa8      	it	ge
 8012e78:	461a      	movge	r2, r3
 8012e7a:	2a00      	cmp	r2, #0
 8012e7c:	4691      	mov	r9, r2
 8012e7e:	dc37      	bgt.n	8012ef0 <_printf_float+0x374>
 8012e80:	f04f 0b00 	mov.w	fp, #0
 8012e84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012e88:	f104 021a 	add.w	r2, r4, #26
 8012e8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012e8e:	9305      	str	r3, [sp, #20]
 8012e90:	eba3 0309 	sub.w	r3, r3, r9
 8012e94:	455b      	cmp	r3, fp
 8012e96:	dc33      	bgt.n	8012f00 <_printf_float+0x384>
 8012e98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	db3b      	blt.n	8012f18 <_printf_float+0x39c>
 8012ea0:	6823      	ldr	r3, [r4, #0]
 8012ea2:	07da      	lsls	r2, r3, #31
 8012ea4:	d438      	bmi.n	8012f18 <_printf_float+0x39c>
 8012ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ea8:	9a05      	ldr	r2, [sp, #20]
 8012eaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012eac:	1a9a      	subs	r2, r3, r2
 8012eae:	eba3 0901 	sub.w	r9, r3, r1
 8012eb2:	4591      	cmp	r9, r2
 8012eb4:	bfa8      	it	ge
 8012eb6:	4691      	movge	r9, r2
 8012eb8:	f1b9 0f00 	cmp.w	r9, #0
 8012ebc:	dc35      	bgt.n	8012f2a <_printf_float+0x3ae>
 8012ebe:	f04f 0800 	mov.w	r8, #0
 8012ec2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ec6:	f104 0a1a 	add.w	sl, r4, #26
 8012eca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012ece:	1a9b      	subs	r3, r3, r2
 8012ed0:	eba3 0309 	sub.w	r3, r3, r9
 8012ed4:	4543      	cmp	r3, r8
 8012ed6:	f77f af79 	ble.w	8012dcc <_printf_float+0x250>
 8012eda:	2301      	movs	r3, #1
 8012edc:	4652      	mov	r2, sl
 8012ede:	4631      	mov	r1, r6
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	47b8      	blx	r7
 8012ee4:	3001      	adds	r0, #1
 8012ee6:	f43f aeaa 	beq.w	8012c3e <_printf_float+0xc2>
 8012eea:	f108 0801 	add.w	r8, r8, #1
 8012eee:	e7ec      	b.n	8012eca <_printf_float+0x34e>
 8012ef0:	4613      	mov	r3, r2
 8012ef2:	4631      	mov	r1, r6
 8012ef4:	4642      	mov	r2, r8
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	47b8      	blx	r7
 8012efa:	3001      	adds	r0, #1
 8012efc:	d1c0      	bne.n	8012e80 <_printf_float+0x304>
 8012efe:	e69e      	b.n	8012c3e <_printf_float+0xc2>
 8012f00:	2301      	movs	r3, #1
 8012f02:	4631      	mov	r1, r6
 8012f04:	4628      	mov	r0, r5
 8012f06:	9205      	str	r2, [sp, #20]
 8012f08:	47b8      	blx	r7
 8012f0a:	3001      	adds	r0, #1
 8012f0c:	f43f ae97 	beq.w	8012c3e <_printf_float+0xc2>
 8012f10:	9a05      	ldr	r2, [sp, #20]
 8012f12:	f10b 0b01 	add.w	fp, fp, #1
 8012f16:	e7b9      	b.n	8012e8c <_printf_float+0x310>
 8012f18:	ee18 3a10 	vmov	r3, s16
 8012f1c:	4652      	mov	r2, sl
 8012f1e:	4631      	mov	r1, r6
 8012f20:	4628      	mov	r0, r5
 8012f22:	47b8      	blx	r7
 8012f24:	3001      	adds	r0, #1
 8012f26:	d1be      	bne.n	8012ea6 <_printf_float+0x32a>
 8012f28:	e689      	b.n	8012c3e <_printf_float+0xc2>
 8012f2a:	9a05      	ldr	r2, [sp, #20]
 8012f2c:	464b      	mov	r3, r9
 8012f2e:	4442      	add	r2, r8
 8012f30:	4631      	mov	r1, r6
 8012f32:	4628      	mov	r0, r5
 8012f34:	47b8      	blx	r7
 8012f36:	3001      	adds	r0, #1
 8012f38:	d1c1      	bne.n	8012ebe <_printf_float+0x342>
 8012f3a:	e680      	b.n	8012c3e <_printf_float+0xc2>
 8012f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f3e:	2a01      	cmp	r2, #1
 8012f40:	dc01      	bgt.n	8012f46 <_printf_float+0x3ca>
 8012f42:	07db      	lsls	r3, r3, #31
 8012f44:	d538      	bpl.n	8012fb8 <_printf_float+0x43c>
 8012f46:	2301      	movs	r3, #1
 8012f48:	4642      	mov	r2, r8
 8012f4a:	4631      	mov	r1, r6
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	47b8      	blx	r7
 8012f50:	3001      	adds	r0, #1
 8012f52:	f43f ae74 	beq.w	8012c3e <_printf_float+0xc2>
 8012f56:	ee18 3a10 	vmov	r3, s16
 8012f5a:	4652      	mov	r2, sl
 8012f5c:	4631      	mov	r1, r6
 8012f5e:	4628      	mov	r0, r5
 8012f60:	47b8      	blx	r7
 8012f62:	3001      	adds	r0, #1
 8012f64:	f43f ae6b 	beq.w	8012c3e <_printf_float+0xc2>
 8012f68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	2300      	movs	r3, #0
 8012f70:	f7ed fdca 	bl	8000b08 <__aeabi_dcmpeq>
 8012f74:	b9d8      	cbnz	r0, 8012fae <_printf_float+0x432>
 8012f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f78:	f108 0201 	add.w	r2, r8, #1
 8012f7c:	3b01      	subs	r3, #1
 8012f7e:	4631      	mov	r1, r6
 8012f80:	4628      	mov	r0, r5
 8012f82:	47b8      	blx	r7
 8012f84:	3001      	adds	r0, #1
 8012f86:	d10e      	bne.n	8012fa6 <_printf_float+0x42a>
 8012f88:	e659      	b.n	8012c3e <_printf_float+0xc2>
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	4652      	mov	r2, sl
 8012f8e:	4631      	mov	r1, r6
 8012f90:	4628      	mov	r0, r5
 8012f92:	47b8      	blx	r7
 8012f94:	3001      	adds	r0, #1
 8012f96:	f43f ae52 	beq.w	8012c3e <_printf_float+0xc2>
 8012f9a:	f108 0801 	add.w	r8, r8, #1
 8012f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fa0:	3b01      	subs	r3, #1
 8012fa2:	4543      	cmp	r3, r8
 8012fa4:	dcf1      	bgt.n	8012f8a <_printf_float+0x40e>
 8012fa6:	464b      	mov	r3, r9
 8012fa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012fac:	e6dc      	b.n	8012d68 <_printf_float+0x1ec>
 8012fae:	f04f 0800 	mov.w	r8, #0
 8012fb2:	f104 0a1a 	add.w	sl, r4, #26
 8012fb6:	e7f2      	b.n	8012f9e <_printf_float+0x422>
 8012fb8:	2301      	movs	r3, #1
 8012fba:	4642      	mov	r2, r8
 8012fbc:	e7df      	b.n	8012f7e <_printf_float+0x402>
 8012fbe:	2301      	movs	r3, #1
 8012fc0:	464a      	mov	r2, r9
 8012fc2:	4631      	mov	r1, r6
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	47b8      	blx	r7
 8012fc8:	3001      	adds	r0, #1
 8012fca:	f43f ae38 	beq.w	8012c3e <_printf_float+0xc2>
 8012fce:	f108 0801 	add.w	r8, r8, #1
 8012fd2:	68e3      	ldr	r3, [r4, #12]
 8012fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012fd6:	1a5b      	subs	r3, r3, r1
 8012fd8:	4543      	cmp	r3, r8
 8012fda:	dcf0      	bgt.n	8012fbe <_printf_float+0x442>
 8012fdc:	e6fa      	b.n	8012dd4 <_printf_float+0x258>
 8012fde:	f04f 0800 	mov.w	r8, #0
 8012fe2:	f104 0919 	add.w	r9, r4, #25
 8012fe6:	e7f4      	b.n	8012fd2 <_printf_float+0x456>

08012fe8 <_printf_common>:
 8012fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fec:	4616      	mov	r6, r2
 8012fee:	4699      	mov	r9, r3
 8012ff0:	688a      	ldr	r2, [r1, #8]
 8012ff2:	690b      	ldr	r3, [r1, #16]
 8012ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ff8:	4293      	cmp	r3, r2
 8012ffa:	bfb8      	it	lt
 8012ffc:	4613      	movlt	r3, r2
 8012ffe:	6033      	str	r3, [r6, #0]
 8013000:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013004:	4607      	mov	r7, r0
 8013006:	460c      	mov	r4, r1
 8013008:	b10a      	cbz	r2, 801300e <_printf_common+0x26>
 801300a:	3301      	adds	r3, #1
 801300c:	6033      	str	r3, [r6, #0]
 801300e:	6823      	ldr	r3, [r4, #0]
 8013010:	0699      	lsls	r1, r3, #26
 8013012:	bf42      	ittt	mi
 8013014:	6833      	ldrmi	r3, [r6, #0]
 8013016:	3302      	addmi	r3, #2
 8013018:	6033      	strmi	r3, [r6, #0]
 801301a:	6825      	ldr	r5, [r4, #0]
 801301c:	f015 0506 	ands.w	r5, r5, #6
 8013020:	d106      	bne.n	8013030 <_printf_common+0x48>
 8013022:	f104 0a19 	add.w	sl, r4, #25
 8013026:	68e3      	ldr	r3, [r4, #12]
 8013028:	6832      	ldr	r2, [r6, #0]
 801302a:	1a9b      	subs	r3, r3, r2
 801302c:	42ab      	cmp	r3, r5
 801302e:	dc26      	bgt.n	801307e <_printf_common+0x96>
 8013030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013034:	1e13      	subs	r3, r2, #0
 8013036:	6822      	ldr	r2, [r4, #0]
 8013038:	bf18      	it	ne
 801303a:	2301      	movne	r3, #1
 801303c:	0692      	lsls	r2, r2, #26
 801303e:	d42b      	bmi.n	8013098 <_printf_common+0xb0>
 8013040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013044:	4649      	mov	r1, r9
 8013046:	4638      	mov	r0, r7
 8013048:	47c0      	blx	r8
 801304a:	3001      	adds	r0, #1
 801304c:	d01e      	beq.n	801308c <_printf_common+0xa4>
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	68e5      	ldr	r5, [r4, #12]
 8013052:	6832      	ldr	r2, [r6, #0]
 8013054:	f003 0306 	and.w	r3, r3, #6
 8013058:	2b04      	cmp	r3, #4
 801305a:	bf08      	it	eq
 801305c:	1aad      	subeq	r5, r5, r2
 801305e:	68a3      	ldr	r3, [r4, #8]
 8013060:	6922      	ldr	r2, [r4, #16]
 8013062:	bf0c      	ite	eq
 8013064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013068:	2500      	movne	r5, #0
 801306a:	4293      	cmp	r3, r2
 801306c:	bfc4      	itt	gt
 801306e:	1a9b      	subgt	r3, r3, r2
 8013070:	18ed      	addgt	r5, r5, r3
 8013072:	2600      	movs	r6, #0
 8013074:	341a      	adds	r4, #26
 8013076:	42b5      	cmp	r5, r6
 8013078:	d11a      	bne.n	80130b0 <_printf_common+0xc8>
 801307a:	2000      	movs	r0, #0
 801307c:	e008      	b.n	8013090 <_printf_common+0xa8>
 801307e:	2301      	movs	r3, #1
 8013080:	4652      	mov	r2, sl
 8013082:	4649      	mov	r1, r9
 8013084:	4638      	mov	r0, r7
 8013086:	47c0      	blx	r8
 8013088:	3001      	adds	r0, #1
 801308a:	d103      	bne.n	8013094 <_printf_common+0xac>
 801308c:	f04f 30ff 	mov.w	r0, #4294967295
 8013090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013094:	3501      	adds	r5, #1
 8013096:	e7c6      	b.n	8013026 <_printf_common+0x3e>
 8013098:	18e1      	adds	r1, r4, r3
 801309a:	1c5a      	adds	r2, r3, #1
 801309c:	2030      	movs	r0, #48	; 0x30
 801309e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80130a2:	4422      	add	r2, r4
 80130a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80130a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80130ac:	3302      	adds	r3, #2
 80130ae:	e7c7      	b.n	8013040 <_printf_common+0x58>
 80130b0:	2301      	movs	r3, #1
 80130b2:	4622      	mov	r2, r4
 80130b4:	4649      	mov	r1, r9
 80130b6:	4638      	mov	r0, r7
 80130b8:	47c0      	blx	r8
 80130ba:	3001      	adds	r0, #1
 80130bc:	d0e6      	beq.n	801308c <_printf_common+0xa4>
 80130be:	3601      	adds	r6, #1
 80130c0:	e7d9      	b.n	8013076 <_printf_common+0x8e>
	...

080130c4 <_printf_i>:
 80130c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80130c8:	7e0f      	ldrb	r7, [r1, #24]
 80130ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80130cc:	2f78      	cmp	r7, #120	; 0x78
 80130ce:	4691      	mov	r9, r2
 80130d0:	4680      	mov	r8, r0
 80130d2:	460c      	mov	r4, r1
 80130d4:	469a      	mov	sl, r3
 80130d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80130da:	d807      	bhi.n	80130ec <_printf_i+0x28>
 80130dc:	2f62      	cmp	r7, #98	; 0x62
 80130de:	d80a      	bhi.n	80130f6 <_printf_i+0x32>
 80130e0:	2f00      	cmp	r7, #0
 80130e2:	f000 80d8 	beq.w	8013296 <_printf_i+0x1d2>
 80130e6:	2f58      	cmp	r7, #88	; 0x58
 80130e8:	f000 80a3 	beq.w	8013232 <_printf_i+0x16e>
 80130ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80130f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80130f4:	e03a      	b.n	801316c <_printf_i+0xa8>
 80130f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80130fa:	2b15      	cmp	r3, #21
 80130fc:	d8f6      	bhi.n	80130ec <_printf_i+0x28>
 80130fe:	a101      	add	r1, pc, #4	; (adr r1, 8013104 <_printf_i+0x40>)
 8013100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013104:	0801315d 	.word	0x0801315d
 8013108:	08013171 	.word	0x08013171
 801310c:	080130ed 	.word	0x080130ed
 8013110:	080130ed 	.word	0x080130ed
 8013114:	080130ed 	.word	0x080130ed
 8013118:	080130ed 	.word	0x080130ed
 801311c:	08013171 	.word	0x08013171
 8013120:	080130ed 	.word	0x080130ed
 8013124:	080130ed 	.word	0x080130ed
 8013128:	080130ed 	.word	0x080130ed
 801312c:	080130ed 	.word	0x080130ed
 8013130:	0801327d 	.word	0x0801327d
 8013134:	080131a1 	.word	0x080131a1
 8013138:	0801325f 	.word	0x0801325f
 801313c:	080130ed 	.word	0x080130ed
 8013140:	080130ed 	.word	0x080130ed
 8013144:	0801329f 	.word	0x0801329f
 8013148:	080130ed 	.word	0x080130ed
 801314c:	080131a1 	.word	0x080131a1
 8013150:	080130ed 	.word	0x080130ed
 8013154:	080130ed 	.word	0x080130ed
 8013158:	08013267 	.word	0x08013267
 801315c:	682b      	ldr	r3, [r5, #0]
 801315e:	1d1a      	adds	r2, r3, #4
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	602a      	str	r2, [r5, #0]
 8013164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801316c:	2301      	movs	r3, #1
 801316e:	e0a3      	b.n	80132b8 <_printf_i+0x1f4>
 8013170:	6820      	ldr	r0, [r4, #0]
 8013172:	6829      	ldr	r1, [r5, #0]
 8013174:	0606      	lsls	r6, r0, #24
 8013176:	f101 0304 	add.w	r3, r1, #4
 801317a:	d50a      	bpl.n	8013192 <_printf_i+0xce>
 801317c:	680e      	ldr	r6, [r1, #0]
 801317e:	602b      	str	r3, [r5, #0]
 8013180:	2e00      	cmp	r6, #0
 8013182:	da03      	bge.n	801318c <_printf_i+0xc8>
 8013184:	232d      	movs	r3, #45	; 0x2d
 8013186:	4276      	negs	r6, r6
 8013188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801318c:	485e      	ldr	r0, [pc, #376]	; (8013308 <_printf_i+0x244>)
 801318e:	230a      	movs	r3, #10
 8013190:	e019      	b.n	80131c6 <_printf_i+0x102>
 8013192:	680e      	ldr	r6, [r1, #0]
 8013194:	602b      	str	r3, [r5, #0]
 8013196:	f010 0f40 	tst.w	r0, #64	; 0x40
 801319a:	bf18      	it	ne
 801319c:	b236      	sxthne	r6, r6
 801319e:	e7ef      	b.n	8013180 <_printf_i+0xbc>
 80131a0:	682b      	ldr	r3, [r5, #0]
 80131a2:	6820      	ldr	r0, [r4, #0]
 80131a4:	1d19      	adds	r1, r3, #4
 80131a6:	6029      	str	r1, [r5, #0]
 80131a8:	0601      	lsls	r1, r0, #24
 80131aa:	d501      	bpl.n	80131b0 <_printf_i+0xec>
 80131ac:	681e      	ldr	r6, [r3, #0]
 80131ae:	e002      	b.n	80131b6 <_printf_i+0xf2>
 80131b0:	0646      	lsls	r6, r0, #25
 80131b2:	d5fb      	bpl.n	80131ac <_printf_i+0xe8>
 80131b4:	881e      	ldrh	r6, [r3, #0]
 80131b6:	4854      	ldr	r0, [pc, #336]	; (8013308 <_printf_i+0x244>)
 80131b8:	2f6f      	cmp	r7, #111	; 0x6f
 80131ba:	bf0c      	ite	eq
 80131bc:	2308      	moveq	r3, #8
 80131be:	230a      	movne	r3, #10
 80131c0:	2100      	movs	r1, #0
 80131c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80131c6:	6865      	ldr	r5, [r4, #4]
 80131c8:	60a5      	str	r5, [r4, #8]
 80131ca:	2d00      	cmp	r5, #0
 80131cc:	bfa2      	ittt	ge
 80131ce:	6821      	ldrge	r1, [r4, #0]
 80131d0:	f021 0104 	bicge.w	r1, r1, #4
 80131d4:	6021      	strge	r1, [r4, #0]
 80131d6:	b90e      	cbnz	r6, 80131dc <_printf_i+0x118>
 80131d8:	2d00      	cmp	r5, #0
 80131da:	d04d      	beq.n	8013278 <_printf_i+0x1b4>
 80131dc:	4615      	mov	r5, r2
 80131de:	fbb6 f1f3 	udiv	r1, r6, r3
 80131e2:	fb03 6711 	mls	r7, r3, r1, r6
 80131e6:	5dc7      	ldrb	r7, [r0, r7]
 80131e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80131ec:	4637      	mov	r7, r6
 80131ee:	42bb      	cmp	r3, r7
 80131f0:	460e      	mov	r6, r1
 80131f2:	d9f4      	bls.n	80131de <_printf_i+0x11a>
 80131f4:	2b08      	cmp	r3, #8
 80131f6:	d10b      	bne.n	8013210 <_printf_i+0x14c>
 80131f8:	6823      	ldr	r3, [r4, #0]
 80131fa:	07de      	lsls	r6, r3, #31
 80131fc:	d508      	bpl.n	8013210 <_printf_i+0x14c>
 80131fe:	6923      	ldr	r3, [r4, #16]
 8013200:	6861      	ldr	r1, [r4, #4]
 8013202:	4299      	cmp	r1, r3
 8013204:	bfde      	ittt	le
 8013206:	2330      	movle	r3, #48	; 0x30
 8013208:	f805 3c01 	strble.w	r3, [r5, #-1]
 801320c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013210:	1b52      	subs	r2, r2, r5
 8013212:	6122      	str	r2, [r4, #16]
 8013214:	f8cd a000 	str.w	sl, [sp]
 8013218:	464b      	mov	r3, r9
 801321a:	aa03      	add	r2, sp, #12
 801321c:	4621      	mov	r1, r4
 801321e:	4640      	mov	r0, r8
 8013220:	f7ff fee2 	bl	8012fe8 <_printf_common>
 8013224:	3001      	adds	r0, #1
 8013226:	d14c      	bne.n	80132c2 <_printf_i+0x1fe>
 8013228:	f04f 30ff 	mov.w	r0, #4294967295
 801322c:	b004      	add	sp, #16
 801322e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013232:	4835      	ldr	r0, [pc, #212]	; (8013308 <_printf_i+0x244>)
 8013234:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013238:	6829      	ldr	r1, [r5, #0]
 801323a:	6823      	ldr	r3, [r4, #0]
 801323c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013240:	6029      	str	r1, [r5, #0]
 8013242:	061d      	lsls	r5, r3, #24
 8013244:	d514      	bpl.n	8013270 <_printf_i+0x1ac>
 8013246:	07df      	lsls	r7, r3, #31
 8013248:	bf44      	itt	mi
 801324a:	f043 0320 	orrmi.w	r3, r3, #32
 801324e:	6023      	strmi	r3, [r4, #0]
 8013250:	b91e      	cbnz	r6, 801325a <_printf_i+0x196>
 8013252:	6823      	ldr	r3, [r4, #0]
 8013254:	f023 0320 	bic.w	r3, r3, #32
 8013258:	6023      	str	r3, [r4, #0]
 801325a:	2310      	movs	r3, #16
 801325c:	e7b0      	b.n	80131c0 <_printf_i+0xfc>
 801325e:	6823      	ldr	r3, [r4, #0]
 8013260:	f043 0320 	orr.w	r3, r3, #32
 8013264:	6023      	str	r3, [r4, #0]
 8013266:	2378      	movs	r3, #120	; 0x78
 8013268:	4828      	ldr	r0, [pc, #160]	; (801330c <_printf_i+0x248>)
 801326a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801326e:	e7e3      	b.n	8013238 <_printf_i+0x174>
 8013270:	0659      	lsls	r1, r3, #25
 8013272:	bf48      	it	mi
 8013274:	b2b6      	uxthmi	r6, r6
 8013276:	e7e6      	b.n	8013246 <_printf_i+0x182>
 8013278:	4615      	mov	r5, r2
 801327a:	e7bb      	b.n	80131f4 <_printf_i+0x130>
 801327c:	682b      	ldr	r3, [r5, #0]
 801327e:	6826      	ldr	r6, [r4, #0]
 8013280:	6961      	ldr	r1, [r4, #20]
 8013282:	1d18      	adds	r0, r3, #4
 8013284:	6028      	str	r0, [r5, #0]
 8013286:	0635      	lsls	r5, r6, #24
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	d501      	bpl.n	8013290 <_printf_i+0x1cc>
 801328c:	6019      	str	r1, [r3, #0]
 801328e:	e002      	b.n	8013296 <_printf_i+0x1d2>
 8013290:	0670      	lsls	r0, r6, #25
 8013292:	d5fb      	bpl.n	801328c <_printf_i+0x1c8>
 8013294:	8019      	strh	r1, [r3, #0]
 8013296:	2300      	movs	r3, #0
 8013298:	6123      	str	r3, [r4, #16]
 801329a:	4615      	mov	r5, r2
 801329c:	e7ba      	b.n	8013214 <_printf_i+0x150>
 801329e:	682b      	ldr	r3, [r5, #0]
 80132a0:	1d1a      	adds	r2, r3, #4
 80132a2:	602a      	str	r2, [r5, #0]
 80132a4:	681d      	ldr	r5, [r3, #0]
 80132a6:	6862      	ldr	r2, [r4, #4]
 80132a8:	2100      	movs	r1, #0
 80132aa:	4628      	mov	r0, r5
 80132ac:	f7ec ffb8 	bl	8000220 <memchr>
 80132b0:	b108      	cbz	r0, 80132b6 <_printf_i+0x1f2>
 80132b2:	1b40      	subs	r0, r0, r5
 80132b4:	6060      	str	r0, [r4, #4]
 80132b6:	6863      	ldr	r3, [r4, #4]
 80132b8:	6123      	str	r3, [r4, #16]
 80132ba:	2300      	movs	r3, #0
 80132bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132c0:	e7a8      	b.n	8013214 <_printf_i+0x150>
 80132c2:	6923      	ldr	r3, [r4, #16]
 80132c4:	462a      	mov	r2, r5
 80132c6:	4649      	mov	r1, r9
 80132c8:	4640      	mov	r0, r8
 80132ca:	47d0      	blx	sl
 80132cc:	3001      	adds	r0, #1
 80132ce:	d0ab      	beq.n	8013228 <_printf_i+0x164>
 80132d0:	6823      	ldr	r3, [r4, #0]
 80132d2:	079b      	lsls	r3, r3, #30
 80132d4:	d413      	bmi.n	80132fe <_printf_i+0x23a>
 80132d6:	68e0      	ldr	r0, [r4, #12]
 80132d8:	9b03      	ldr	r3, [sp, #12]
 80132da:	4298      	cmp	r0, r3
 80132dc:	bfb8      	it	lt
 80132de:	4618      	movlt	r0, r3
 80132e0:	e7a4      	b.n	801322c <_printf_i+0x168>
 80132e2:	2301      	movs	r3, #1
 80132e4:	4632      	mov	r2, r6
 80132e6:	4649      	mov	r1, r9
 80132e8:	4640      	mov	r0, r8
 80132ea:	47d0      	blx	sl
 80132ec:	3001      	adds	r0, #1
 80132ee:	d09b      	beq.n	8013228 <_printf_i+0x164>
 80132f0:	3501      	adds	r5, #1
 80132f2:	68e3      	ldr	r3, [r4, #12]
 80132f4:	9903      	ldr	r1, [sp, #12]
 80132f6:	1a5b      	subs	r3, r3, r1
 80132f8:	42ab      	cmp	r3, r5
 80132fa:	dcf2      	bgt.n	80132e2 <_printf_i+0x21e>
 80132fc:	e7eb      	b.n	80132d6 <_printf_i+0x212>
 80132fe:	2500      	movs	r5, #0
 8013300:	f104 0619 	add.w	r6, r4, #25
 8013304:	e7f5      	b.n	80132f2 <_printf_i+0x22e>
 8013306:	bf00      	nop
 8013308:	0804958d 	.word	0x0804958d
 801330c:	0804959e 	.word	0x0804959e

08013310 <_sbrk_r>:
 8013310:	b538      	push	{r3, r4, r5, lr}
 8013312:	4d06      	ldr	r5, [pc, #24]	; (801332c <_sbrk_r+0x1c>)
 8013314:	2300      	movs	r3, #0
 8013316:	4604      	mov	r4, r0
 8013318:	4608      	mov	r0, r1
 801331a:	602b      	str	r3, [r5, #0]
 801331c:	f7f1 f9b8 	bl	8004690 <_sbrk>
 8013320:	1c43      	adds	r3, r0, #1
 8013322:	d102      	bne.n	801332a <_sbrk_r+0x1a>
 8013324:	682b      	ldr	r3, [r5, #0]
 8013326:	b103      	cbz	r3, 801332a <_sbrk_r+0x1a>
 8013328:	6023      	str	r3, [r4, #0]
 801332a:	bd38      	pop	{r3, r4, r5, pc}
 801332c:	20005dc8 	.word	0x20005dc8

08013330 <siprintf>:
 8013330:	b40e      	push	{r1, r2, r3}
 8013332:	b500      	push	{lr}
 8013334:	b09c      	sub	sp, #112	; 0x70
 8013336:	ab1d      	add	r3, sp, #116	; 0x74
 8013338:	9002      	str	r0, [sp, #8]
 801333a:	9006      	str	r0, [sp, #24]
 801333c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013340:	4809      	ldr	r0, [pc, #36]	; (8013368 <siprintf+0x38>)
 8013342:	9107      	str	r1, [sp, #28]
 8013344:	9104      	str	r1, [sp, #16]
 8013346:	4909      	ldr	r1, [pc, #36]	; (801336c <siprintf+0x3c>)
 8013348:	f853 2b04 	ldr.w	r2, [r3], #4
 801334c:	9105      	str	r1, [sp, #20]
 801334e:	6800      	ldr	r0, [r0, #0]
 8013350:	9301      	str	r3, [sp, #4]
 8013352:	a902      	add	r1, sp, #8
 8013354:	f004 fae0 	bl	8017918 <_svfiprintf_r>
 8013358:	9b02      	ldr	r3, [sp, #8]
 801335a:	2200      	movs	r2, #0
 801335c:	701a      	strb	r2, [r3, #0]
 801335e:	b01c      	add	sp, #112	; 0x70
 8013360:	f85d eb04 	ldr.w	lr, [sp], #4
 8013364:	b003      	add	sp, #12
 8013366:	4770      	bx	lr
 8013368:	200002f4 	.word	0x200002f4
 801336c:	ffff0208 	.word	0xffff0208

08013370 <siscanf>:
 8013370:	b40e      	push	{r1, r2, r3}
 8013372:	b510      	push	{r4, lr}
 8013374:	b09f      	sub	sp, #124	; 0x7c
 8013376:	ac21      	add	r4, sp, #132	; 0x84
 8013378:	f44f 7101 	mov.w	r1, #516	; 0x204
 801337c:	f854 2b04 	ldr.w	r2, [r4], #4
 8013380:	9201      	str	r2, [sp, #4]
 8013382:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013386:	9004      	str	r0, [sp, #16]
 8013388:	9008      	str	r0, [sp, #32]
 801338a:	f7ec ff3b 	bl	8000204 <strlen>
 801338e:	4b0c      	ldr	r3, [pc, #48]	; (80133c0 <siscanf+0x50>)
 8013390:	9005      	str	r0, [sp, #20]
 8013392:	9009      	str	r0, [sp, #36]	; 0x24
 8013394:	930d      	str	r3, [sp, #52]	; 0x34
 8013396:	480b      	ldr	r0, [pc, #44]	; (80133c4 <siscanf+0x54>)
 8013398:	9a01      	ldr	r2, [sp, #4]
 801339a:	6800      	ldr	r0, [r0, #0]
 801339c:	9403      	str	r4, [sp, #12]
 801339e:	2300      	movs	r3, #0
 80133a0:	9311      	str	r3, [sp, #68]	; 0x44
 80133a2:	9316      	str	r3, [sp, #88]	; 0x58
 80133a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80133a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80133ac:	a904      	add	r1, sp, #16
 80133ae:	4623      	mov	r3, r4
 80133b0:	f004 fc0c 	bl	8017bcc <__ssvfiscanf_r>
 80133b4:	b01f      	add	sp, #124	; 0x7c
 80133b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133ba:	b003      	add	sp, #12
 80133bc:	4770      	bx	lr
 80133be:	bf00      	nop
 80133c0:	080133eb 	.word	0x080133eb
 80133c4:	200002f4 	.word	0x200002f4

080133c8 <__sread>:
 80133c8:	b510      	push	{r4, lr}
 80133ca:	460c      	mov	r4, r1
 80133cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133d0:	f004 fec6 	bl	8018160 <_read_r>
 80133d4:	2800      	cmp	r0, #0
 80133d6:	bfab      	itete	ge
 80133d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80133da:	89a3      	ldrhlt	r3, [r4, #12]
 80133dc:	181b      	addge	r3, r3, r0
 80133de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80133e2:	bfac      	ite	ge
 80133e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80133e6:	81a3      	strhlt	r3, [r4, #12]
 80133e8:	bd10      	pop	{r4, pc}

080133ea <__seofread>:
 80133ea:	2000      	movs	r0, #0
 80133ec:	4770      	bx	lr

080133ee <__swrite>:
 80133ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133f2:	461f      	mov	r7, r3
 80133f4:	898b      	ldrh	r3, [r1, #12]
 80133f6:	05db      	lsls	r3, r3, #23
 80133f8:	4605      	mov	r5, r0
 80133fa:	460c      	mov	r4, r1
 80133fc:	4616      	mov	r6, r2
 80133fe:	d505      	bpl.n	801340c <__swrite+0x1e>
 8013400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013404:	2302      	movs	r3, #2
 8013406:	2200      	movs	r2, #0
 8013408:	f003 fc74 	bl	8016cf4 <_lseek_r>
 801340c:	89a3      	ldrh	r3, [r4, #12]
 801340e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013416:	81a3      	strh	r3, [r4, #12]
 8013418:	4632      	mov	r2, r6
 801341a:	463b      	mov	r3, r7
 801341c:	4628      	mov	r0, r5
 801341e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013422:	f001 bfc1 	b.w	80153a8 <_write_r>

08013426 <__sseek>:
 8013426:	b510      	push	{r4, lr}
 8013428:	460c      	mov	r4, r1
 801342a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801342e:	f003 fc61 	bl	8016cf4 <_lseek_r>
 8013432:	1c43      	adds	r3, r0, #1
 8013434:	89a3      	ldrh	r3, [r4, #12]
 8013436:	bf15      	itete	ne
 8013438:	6560      	strne	r0, [r4, #84]	; 0x54
 801343a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801343e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013442:	81a3      	strheq	r3, [r4, #12]
 8013444:	bf18      	it	ne
 8013446:	81a3      	strhne	r3, [r4, #12]
 8013448:	bd10      	pop	{r4, pc}

0801344a <__sclose>:
 801344a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801344e:	f002 b837 	b.w	80154c0 <_close_r>

08013452 <strcpy>:
 8013452:	4603      	mov	r3, r0
 8013454:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013458:	f803 2b01 	strb.w	r2, [r3], #1
 801345c:	2a00      	cmp	r2, #0
 801345e:	d1f9      	bne.n	8013454 <strcpy+0x2>
 8013460:	4770      	bx	lr
	...

08013464 <iso_year_adjust>:
 8013464:	6942      	ldr	r2, [r0, #20]
 8013466:	2a00      	cmp	r2, #0
 8013468:	f240 736c 	movw	r3, #1900	; 0x76c
 801346c:	bfa8      	it	ge
 801346e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8013472:	4413      	add	r3, r2
 8013474:	0792      	lsls	r2, r2, #30
 8013476:	d105      	bne.n	8013484 <iso_year_adjust+0x20>
 8013478:	2164      	movs	r1, #100	; 0x64
 801347a:	fb93 f2f1 	sdiv	r2, r3, r1
 801347e:	fb01 3212 	mls	r2, r1, r2, r3
 8013482:	b9da      	cbnz	r2, 80134bc <iso_year_adjust+0x58>
 8013484:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013488:	fb93 f1f2 	sdiv	r1, r3, r2
 801348c:	fb02 3311 	mls	r3, r2, r1, r3
 8013490:	fab3 f383 	clz	r3, r3
 8013494:	095b      	lsrs	r3, r3, #5
 8013496:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801349a:	0040      	lsls	r0, r0, #1
 801349c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80134a0:	4418      	add	r0, r3
 80134a2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80134a6:	4298      	cmp	r0, r3
 80134a8:	d03a      	beq.n	8013520 <iso_year_adjust+0xbc>
 80134aa:	dc21      	bgt.n	80134f0 <iso_year_adjust+0x8c>
 80134ac:	2801      	cmp	r0, #1
 80134ae:	dc1a      	bgt.n	80134e6 <iso_year_adjust+0x82>
 80134b0:	2800      	cmp	r0, #0
 80134b2:	bfb4      	ite	lt
 80134b4:	2000      	movlt	r0, #0
 80134b6:	f04f 30ff 	movge.w	r0, #4294967295
 80134ba:	4770      	bx	lr
 80134bc:	2301      	movs	r3, #1
 80134be:	e7ea      	b.n	8013496 <iso_year_adjust+0x32>
 80134c0:	2817      	cmp	r0, #23
 80134c2:	d813      	bhi.n	80134ec <iso_year_adjust+0x88>
 80134c4:	e8df f000 	tbb	[pc, r0]
 80134c8:	0c0c0c0c 	.word	0x0c0c0c0c
 80134cc:	0c0c1212 	.word	0x0c0c1212
 80134d0:	12121212 	.word	0x12121212
 80134d4:	12121212 	.word	0x12121212
 80134d8:	0c0c1212 	.word	0x0c0c1212
 80134dc:	0c0c1212 	.word	0x0c0c1212
 80134e0:	f04f 30ff 	mov.w	r0, #4294967295
 80134e4:	4770      	bx	lr
 80134e6:	380a      	subs	r0, #10
 80134e8:	2817      	cmp	r0, #23
 80134ea:	d9e9      	bls.n	80134c0 <iso_year_adjust+0x5c>
 80134ec:	2000      	movs	r0, #0
 80134ee:	4770      	bx	lr
 80134f0:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80134f4:	4298      	cmp	r0, r3
 80134f6:	dc06      	bgt.n	8013506 <iso_year_adjust+0xa2>
 80134f8:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80134fc:	4298      	cmp	r0, r3
 80134fe:	bfd4      	ite	le
 8013500:	2000      	movle	r0, #0
 8013502:	2001      	movgt	r0, #1
 8013504:	4770      	bx	lr
 8013506:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801350a:	3802      	subs	r0, #2
 801350c:	2815      	cmp	r0, #21
 801350e:	d8ed      	bhi.n	80134ec <iso_year_adjust+0x88>
 8013510:	2301      	movs	r3, #1
 8013512:	4083      	lsls	r3, r0
 8013514:	4803      	ldr	r0, [pc, #12]	; (8013524 <iso_year_adjust+0xc0>)
 8013516:	4018      	ands	r0, r3
 8013518:	3800      	subs	r0, #0
 801351a:	bf18      	it	ne
 801351c:	2001      	movne	r0, #1
 801351e:	4770      	bx	lr
 8013520:	2001      	movs	r0, #1
 8013522:	4770      	bx	lr
 8013524:	002a001f 	.word	0x002a001f

08013528 <__strftime.isra.0>:
 8013528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801352c:	b08f      	sub	sp, #60	; 0x3c
 801352e:	461e      	mov	r6, r3
 8013530:	2300      	movs	r3, #0
 8013532:	4607      	mov	r7, r0
 8013534:	460d      	mov	r5, r1
 8013536:	9302      	str	r3, [sp, #8]
 8013538:	461c      	mov	r4, r3
 801353a:	7813      	ldrb	r3, [r2, #0]
 801353c:	2b00      	cmp	r3, #0
 801353e:	f000 84ba 	beq.w	8013eb6 <__strftime.isra.0+0x98e>
 8013542:	2b25      	cmp	r3, #37	; 0x25
 8013544:	d11f      	bne.n	8013586 <__strftime.isra.0+0x5e>
 8013546:	f892 b001 	ldrb.w	fp, [r2, #1]
 801354a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 801354e:	d024      	beq.n	801359a <__strftime.isra.0+0x72>
 8013550:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8013554:	d021      	beq.n	801359a <__strftime.isra.0+0x72>
 8013556:	f102 0801 	add.w	r8, r2, #1
 801355a:	f04f 0b00 	mov.w	fp, #0
 801355e:	f898 2000 	ldrb.w	r2, [r8]
 8013562:	3a31      	subs	r2, #49	; 0x31
 8013564:	2a08      	cmp	r2, #8
 8013566:	d81b      	bhi.n	80135a0 <__strftime.isra.0+0x78>
 8013568:	4640      	mov	r0, r8
 801356a:	220a      	movs	r2, #10
 801356c:	a906      	add	r1, sp, #24
 801356e:	f001 fc83 	bl	8014e78 <strtoul>
 8013572:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013576:	4681      	mov	r9, r0
 8013578:	f898 2000 	ldrb.w	r2, [r8]
 801357c:	2a45      	cmp	r2, #69	; 0x45
 801357e:	d112      	bne.n	80135a6 <__strftime.isra.0+0x7e>
 8013580:	f108 0801 	add.w	r8, r8, #1
 8013584:	e011      	b.n	80135aa <__strftime.isra.0+0x82>
 8013586:	1e69      	subs	r1, r5, #1
 8013588:	42a1      	cmp	r1, r4
 801358a:	d802      	bhi.n	8013592 <__strftime.isra.0+0x6a>
 801358c:	2400      	movs	r4, #0
 801358e:	f000 bc95 	b.w	8013ebc <__strftime.isra.0+0x994>
 8013592:	553b      	strb	r3, [r7, r4]
 8013594:	3201      	adds	r2, #1
 8013596:	3401      	adds	r4, #1
 8013598:	e7cf      	b.n	801353a <__strftime.isra.0+0x12>
 801359a:	f102 0802 	add.w	r8, r2, #2
 801359e:	e7de      	b.n	801355e <__strftime.isra.0+0x36>
 80135a0:	f04f 0900 	mov.w	r9, #0
 80135a4:	e7e8      	b.n	8013578 <__strftime.isra.0+0x50>
 80135a6:	2a4f      	cmp	r2, #79	; 0x4f
 80135a8:	d0ea      	beq.n	8013580 <__strftime.isra.0+0x58>
 80135aa:	f898 0000 	ldrb.w	r0, [r8]
 80135ae:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 80135b2:	2a55      	cmp	r2, #85	; 0x55
 80135b4:	d8ea      	bhi.n	801358c <__strftime.isra.0+0x64>
 80135b6:	a301      	add	r3, pc, #4	; (adr r3, 80135bc <__strftime.isra.0+0x94>)
 80135b8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80135bc:	08013eab 	.word	0x08013eab
 80135c0:	0801358d 	.word	0x0801358d
 80135c4:	0801358d 	.word	0x0801358d
 80135c8:	0801358d 	.word	0x0801358d
 80135cc:	0801358d 	.word	0x0801358d
 80135d0:	0801358d 	.word	0x0801358d
 80135d4:	0801358d 	.word	0x0801358d
 80135d8:	0801358d 	.word	0x0801358d
 80135dc:	0801358d 	.word	0x0801358d
 80135e0:	0801358d 	.word	0x0801358d
 80135e4:	0801358d 	.word	0x0801358d
 80135e8:	0801358d 	.word	0x0801358d
 80135ec:	0801358d 	.word	0x0801358d
 80135f0:	0801358d 	.word	0x0801358d
 80135f4:	0801358d 	.word	0x0801358d
 80135f8:	0801358d 	.word	0x0801358d
 80135fc:	0801358d 	.word	0x0801358d
 8013600:	0801358d 	.word	0x0801358d
 8013604:	0801358d 	.word	0x0801358d
 8013608:	0801358d 	.word	0x0801358d
 801360c:	0801358d 	.word	0x0801358d
 8013610:	0801358d 	.word	0x0801358d
 8013614:	0801358d 	.word	0x0801358d
 8013618:	0801358d 	.word	0x0801358d
 801361c:	0801358d 	.word	0x0801358d
 8013620:	0801358d 	.word	0x0801358d
 8013624:	0801358d 	.word	0x0801358d
 8013628:	0801358d 	.word	0x0801358d
 801362c:	08013751 	.word	0x08013751
 8013630:	080137a9 	.word	0x080137a9
 8013634:	08013817 	.word	0x08013817
 8013638:	080138b5 	.word	0x080138b5
 801363c:	0801358d 	.word	0x0801358d
 8013640:	08013901 	.word	0x08013901
 8013644:	080139ed 	.word	0x080139ed
 8013648:	08013ac7 	.word	0x08013ac7
 801364c:	08013ad5 	.word	0x08013ad5
 8013650:	0801358d 	.word	0x0801358d
 8013654:	0801358d 	.word	0x0801358d
 8013658:	0801358d 	.word	0x0801358d
 801365c:	08013b05 	.word	0x08013b05
 8013660:	0801358d 	.word	0x0801358d
 8013664:	0801358d 	.word	0x0801358d
 8013668:	08013b19 	.word	0x08013b19
 801366c:	0801358d 	.word	0x0801358d
 8013670:	08013b6b 	.word	0x08013b6b
 8013674:	08013c7f 	.word	0x08013c7f
 8013678:	08013c8f 	.word	0x08013c8f
 801367c:	08013cb7 	.word	0x08013cb7
 8013680:	08013cf1 	.word	0x08013cf1
 8013684:	08013d65 	.word	0x08013d65
 8013688:	0801380f 	.word	0x0801380f
 801368c:	08013d91 	.word	0x08013d91
 8013690:	08013e59 	.word	0x08013e59
 8013694:	0801358d 	.word	0x0801358d
 8013698:	0801358d 	.word	0x0801358d
 801369c:	0801358d 	.word	0x0801358d
 80136a0:	0801358d 	.word	0x0801358d
 80136a4:	0801358d 	.word	0x0801358d
 80136a8:	0801358d 	.word	0x0801358d
 80136ac:	08013715 	.word	0x08013715
 80136b0:	0801377f 	.word	0x0801377f
 80136b4:	080137d5 	.word	0x080137d5
 80136b8:	08013891 	.word	0x08013891
 80136bc:	08013891 	.word	0x08013891
 80136c0:	0801358d 	.word	0x0801358d
 80136c4:	08013953 	.word	0x08013953
 80136c8:	0801377f 	.word	0x0801377f
 80136cc:	0801358d 	.word	0x0801358d
 80136d0:	08013af7 	.word	0x08013af7
 80136d4:	08013ac7 	.word	0x08013ac7
 80136d8:	08013ad5 	.word	0x08013ad5
 80136dc:	08013aff 	.word	0x08013aff
 80136e0:	08013b09 	.word	0x08013b09
 80136e4:	0801358d 	.word	0x0801358d
 80136e8:	08013b19 	.word	0x08013b19
 80136ec:	0801358d 	.word	0x0801358d
 80136f0:	080137ff 	.word	0x080137ff
 80136f4:	08013b7d 	.word	0x08013b7d
 80136f8:	08013c83 	.word	0x08013c83
 80136fc:	08013c9d 	.word	0x08013c9d
 8013700:	0801358d 	.word	0x0801358d
 8013704:	08013d57 	.word	0x08013d57
 8013708:	08013807 	.word	0x08013807
 801370c:	08013d75 	.word	0x08013d75
 8013710:	08013de3 	.word	0x08013de3
 8013714:	69b3      	ldr	r3, [r6, #24]
 8013716:	4aa9      	ldr	r2, [pc, #676]	; (80139bc <__strftime.isra.0+0x494>)
 8013718:	3318      	adds	r3, #24
 801371a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 801371e:	4648      	mov	r0, r9
 8013720:	f7ec fd70 	bl	8000204 <strlen>
 8013724:	f109 39ff 	add.w	r9, r9, #4294967295
 8013728:	4420      	add	r0, r4
 801372a:	1e6b      	subs	r3, r5, #1
 801372c:	42a0      	cmp	r0, r4
 801372e:	d107      	bne.n	8013740 <__strftime.isra.0+0x218>
 8013730:	f898 3000 	ldrb.w	r3, [r8]
 8013734:	2b00      	cmp	r3, #0
 8013736:	f000 83be 	beq.w	8013eb6 <__strftime.isra.0+0x98e>
 801373a:	f108 0201 	add.w	r2, r8, #1
 801373e:	e6fc      	b.n	801353a <__strftime.isra.0+0x12>
 8013740:	42a3      	cmp	r3, r4
 8013742:	f67f af23 	bls.w	801358c <__strftime.isra.0+0x64>
 8013746:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 801374a:	553a      	strb	r2, [r7, r4]
 801374c:	3401      	adds	r4, #1
 801374e:	e7ed      	b.n	801372c <__strftime.isra.0+0x204>
 8013750:	69b2      	ldr	r2, [r6, #24]
 8013752:	4b9a      	ldr	r3, [pc, #616]	; (80139bc <__strftime.isra.0+0x494>)
 8013754:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013758:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 801375c:	4648      	mov	r0, r9
 801375e:	f7ec fd51 	bl	8000204 <strlen>
 8013762:	f109 39ff 	add.w	r9, r9, #4294967295
 8013766:	4420      	add	r0, r4
 8013768:	1e6b      	subs	r3, r5, #1
 801376a:	42a0      	cmp	r0, r4
 801376c:	d0e0      	beq.n	8013730 <__strftime.isra.0+0x208>
 801376e:	42a3      	cmp	r3, r4
 8013770:	f67f af0c 	bls.w	801358c <__strftime.isra.0+0x64>
 8013774:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8013778:	553a      	strb	r2, [r7, r4]
 801377a:	3401      	adds	r4, #1
 801377c:	e7f5      	b.n	801376a <__strftime.isra.0+0x242>
 801377e:	4b8f      	ldr	r3, [pc, #572]	; (80139bc <__strftime.isra.0+0x494>)
 8013780:	6932      	ldr	r2, [r6, #16]
 8013782:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8013786:	4648      	mov	r0, r9
 8013788:	f7ec fd3c 	bl	8000204 <strlen>
 801378c:	f109 39ff 	add.w	r9, r9, #4294967295
 8013790:	4420      	add	r0, r4
 8013792:	1e6b      	subs	r3, r5, #1
 8013794:	42a0      	cmp	r0, r4
 8013796:	d0cb      	beq.n	8013730 <__strftime.isra.0+0x208>
 8013798:	42a3      	cmp	r3, r4
 801379a:	f67f aef7 	bls.w	801358c <__strftime.isra.0+0x64>
 801379e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80137a2:	553a      	strb	r2, [r7, r4]
 80137a4:	3401      	adds	r4, #1
 80137a6:	e7f5      	b.n	8013794 <__strftime.isra.0+0x26c>
 80137a8:	6933      	ldr	r3, [r6, #16]
 80137aa:	4a84      	ldr	r2, [pc, #528]	; (80139bc <__strftime.isra.0+0x494>)
 80137ac:	330c      	adds	r3, #12
 80137ae:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80137b2:	4648      	mov	r0, r9
 80137b4:	f7ec fd26 	bl	8000204 <strlen>
 80137b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80137bc:	4420      	add	r0, r4
 80137be:	1e6b      	subs	r3, r5, #1
 80137c0:	42a0      	cmp	r0, r4
 80137c2:	d0b5      	beq.n	8013730 <__strftime.isra.0+0x208>
 80137c4:	42a3      	cmp	r3, r4
 80137c6:	f67f aee1 	bls.w	801358c <__strftime.isra.0+0x64>
 80137ca:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80137ce:	553a      	strb	r2, [r7, r4]
 80137d0:	3401      	adds	r4, #1
 80137d2:	e7f5      	b.n	80137c0 <__strftime.isra.0+0x298>
 80137d4:	4b79      	ldr	r3, [pc, #484]	; (80139bc <__strftime.isra.0+0x494>)
 80137d6:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 80137da:	4648      	mov	r0, r9
 80137dc:	f7ec fd12 	bl	8000204 <strlen>
 80137e0:	f899 3000 	ldrb.w	r3, [r9]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d0a3      	beq.n	8013730 <__strftime.isra.0+0x208>
 80137e8:	4633      	mov	r3, r6
 80137ea:	464a      	mov	r2, r9
 80137ec:	1b29      	subs	r1, r5, r4
 80137ee:	1938      	adds	r0, r7, r4
 80137f0:	f7ff fe9a 	bl	8013528 <__strftime.isra.0>
 80137f4:	2800      	cmp	r0, #0
 80137f6:	f77f aec9 	ble.w	801358c <__strftime.isra.0+0x64>
 80137fa:	4404      	add	r4, r0
 80137fc:	e798      	b.n	8013730 <__strftime.isra.0+0x208>
 80137fe:	4b6f      	ldr	r3, [pc, #444]	; (80139bc <__strftime.isra.0+0x494>)
 8013800:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8013804:	e7e9      	b.n	80137da <__strftime.isra.0+0x2b2>
 8013806:	4b6d      	ldr	r3, [pc, #436]	; (80139bc <__strftime.isra.0+0x494>)
 8013808:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 801380c:	e7e5      	b.n	80137da <__strftime.isra.0+0x2b2>
 801380e:	4b6b      	ldr	r3, [pc, #428]	; (80139bc <__strftime.isra.0+0x494>)
 8013810:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8013814:	e7e1      	b.n	80137da <__strftime.isra.0+0x2b2>
 8013816:	496a      	ldr	r1, [pc, #424]	; (80139c0 <__strftime.isra.0+0x498>)
 8013818:	f8d6 a014 	ldr.w	sl, [r6, #20]
 801381c:	458a      	cmp	sl, r1
 801381e:	bfac      	ite	ge
 8013820:	2100      	movge	r1, #0
 8013822:	2101      	movlt	r1, #1
 8013824:	f1ba 0f00 	cmp.w	sl, #0
 8013828:	db11      	blt.n	801384e <__strftime.isra.0+0x326>
 801382a:	2064      	movs	r0, #100	; 0x64
 801382c:	fb9a f0f0 	sdiv	r0, sl, r0
 8013830:	3013      	adds	r0, #19
 8013832:	f1bb 0f00 	cmp.w	fp, #0
 8013836:	d014      	beq.n	8013862 <__strftime.isra.0+0x33a>
 8013838:	2863      	cmp	r0, #99	; 0x63
 801383a:	dd27      	ble.n	801388c <__strftime.isra.0+0x364>
 801383c:	4b61      	ldr	r3, [pc, #388]	; (80139c4 <__strftime.isra.0+0x49c>)
 801383e:	4a62      	ldr	r2, [pc, #392]	; (80139c8 <__strftime.isra.0+0x4a0>)
 8013840:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8013844:	bf18      	it	ne
 8013846:	461a      	movne	r2, r3
 8013848:	f8df c198 	ldr.w	ip, [pc, #408]	; 80139e4 <__strftime.isra.0+0x4bc>
 801384c:	e00c      	b.n	8013868 <__strftime.isra.0+0x340>
 801384e:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8013852:	9103      	str	r1, [sp, #12]
 8013854:	f001 fe2f 	bl	80154b6 <abs>
 8013858:	2264      	movs	r2, #100	; 0x64
 801385a:	9903      	ldr	r1, [sp, #12]
 801385c:	fb90 f0f2 	sdiv	r0, r0, r2
 8013860:	e7e7      	b.n	8013832 <__strftime.isra.0+0x30a>
 8013862:	4a58      	ldr	r2, [pc, #352]	; (80139c4 <__strftime.isra.0+0x49c>)
 8013864:	f8df c180 	ldr.w	ip, [pc, #384]	; 80139e8 <__strftime.isra.0+0x4c0>
 8013868:	4b58      	ldr	r3, [pc, #352]	; (80139cc <__strftime.isra.0+0x4a4>)
 801386a:	9001      	str	r0, [sp, #4]
 801386c:	f1b9 0f02 	cmp.w	r9, #2
 8013870:	bf2c      	ite	cs
 8013872:	ebc1 0109 	rsbcs	r1, r1, r9
 8013876:	f1c1 0102 	rsbcc	r1, r1, #2
 801387a:	9100      	str	r1, [sp, #0]
 801387c:	4950      	ldr	r1, [pc, #320]	; (80139c0 <__strftime.isra.0+0x498>)
 801387e:	458a      	cmp	sl, r1
 8013880:	bfa8      	it	ge
 8013882:	4613      	movge	r3, r2
 8013884:	4662      	mov	r2, ip
 8013886:	1b29      	subs	r1, r5, r4
 8013888:	1938      	adds	r0, r7, r4
 801388a:	e028      	b.n	80138de <__strftime.isra.0+0x3b6>
 801388c:	4a4d      	ldr	r2, [pc, #308]	; (80139c4 <__strftime.isra.0+0x49c>)
 801388e:	e7db      	b.n	8013848 <__strftime.isra.0+0x320>
 8013890:	494f      	ldr	r1, [pc, #316]	; (80139d0 <__strftime.isra.0+0x4a8>)
 8013892:	4a50      	ldr	r2, [pc, #320]	; (80139d4 <__strftime.isra.0+0x4ac>)
 8013894:	68f3      	ldr	r3, [r6, #12]
 8013896:	2864      	cmp	r0, #100	; 0x64
 8013898:	bf08      	it	eq
 801389a:	460a      	moveq	r2, r1
 801389c:	1b29      	subs	r1, r5, r4
 801389e:	1938      	adds	r0, r7, r4
 80138a0:	f004 fcf6 	bl	8018290 <sniprintf>
 80138a4:	2800      	cmp	r0, #0
 80138a6:	f6ff ae71 	blt.w	801358c <__strftime.isra.0+0x64>
 80138aa:	4404      	add	r4, r0
 80138ac:	42a5      	cmp	r5, r4
 80138ae:	f63f af3f 	bhi.w	8013730 <__strftime.isra.0+0x208>
 80138b2:	e66b      	b.n	801358c <__strftime.isra.0+0x64>
 80138b4:	6970      	ldr	r0, [r6, #20]
 80138b6:	6933      	ldr	r3, [r6, #16]
 80138b8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80138bc:	2800      	cmp	r0, #0
 80138be:	eb07 0904 	add.w	r9, r7, r4
 80138c2:	eba5 0104 	sub.w	r1, r5, r4
 80138c6:	f103 0301 	add.w	r3, r3, #1
 80138ca:	db0b      	blt.n	80138e4 <__strftime.isra.0+0x3bc>
 80138cc:	2264      	movs	r2, #100	; 0x64
 80138ce:	fb90 fcf2 	sdiv	ip, r0, r2
 80138d2:	fb02 001c 	mls	r0, r2, ip, r0
 80138d6:	4a40      	ldr	r2, [pc, #256]	; (80139d8 <__strftime.isra.0+0x4b0>)
 80138d8:	e9cd a000 	strd	sl, r0, [sp]
 80138dc:	4648      	mov	r0, r9
 80138de:	f004 fcd7 	bl	8018290 <sniprintf>
 80138e2:	e7df      	b.n	80138a4 <__strftime.isra.0+0x37c>
 80138e4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80138e8:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80138ec:	f001 fde3 	bl	80154b6 <abs>
 80138f0:	2264      	movs	r2, #100	; 0x64
 80138f2:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 80138f6:	fb90 fcf2 	sdiv	ip, r0, r2
 80138fa:	fb0c 0012 	mls	r0, ip, r2, r0
 80138fe:	e7ea      	b.n	80138d6 <__strftime.isra.0+0x3ae>
 8013900:	2225      	movs	r2, #37	; 0x25
 8013902:	f88d 2018 	strb.w	r2, [sp, #24]
 8013906:	f1bb 0f00 	cmp.w	fp, #0
 801390a:	d011      	beq.n	8013930 <__strftime.isra.0+0x408>
 801390c:	f1b9 0f06 	cmp.w	r9, #6
 8013910:	bf38      	it	cc
 8013912:	f04f 0906 	movcc.w	r9, #6
 8013916:	f1b9 0306 	subs.w	r3, r9, #6
 801391a:	f88d b019 	strb.w	fp, [sp, #25]
 801391e:	d10c      	bne.n	801393a <__strftime.isra.0+0x412>
 8013920:	f10d 001a 	add.w	r0, sp, #26
 8013924:	492d      	ldr	r1, [pc, #180]	; (80139dc <__strftime.isra.0+0x4b4>)
 8013926:	f7ff fd94 	bl	8013452 <strcpy>
 801392a:	4633      	mov	r3, r6
 801392c:	aa06      	add	r2, sp, #24
 801392e:	e75d      	b.n	80137ec <__strftime.isra.0+0x2c4>
 8013930:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8013934:	f04f 090a 	mov.w	r9, #10
 8013938:	e7ed      	b.n	8013916 <__strftime.isra.0+0x3ee>
 801393a:	4a29      	ldr	r2, [pc, #164]	; (80139e0 <__strftime.isra.0+0x4b8>)
 801393c:	211e      	movs	r1, #30
 801393e:	f10d 001a 	add.w	r0, sp, #26
 8013942:	f004 fca5 	bl	8018290 <sniprintf>
 8013946:	2800      	cmp	r0, #0
 8013948:	ddea      	ble.n	8013920 <__strftime.isra.0+0x3f8>
 801394a:	f10d 031a 	add.w	r3, sp, #26
 801394e:	4418      	add	r0, r3
 8013950:	e7e8      	b.n	8013924 <__strftime.isra.0+0x3fc>
 8013952:	4630      	mov	r0, r6
 8013954:	f7ff fd86 	bl	8013464 <iso_year_adjust>
 8013958:	4681      	mov	r9, r0
 801395a:	6970      	ldr	r0, [r6, #20]
 801395c:	2800      	cmp	r0, #0
 801395e:	db11      	blt.n	8013984 <__strftime.isra.0+0x45c>
 8013960:	2364      	movs	r3, #100	; 0x64
 8013962:	fb90 f2f3 	sdiv	r2, r0, r3
 8013966:	fb03 0012 	mls	r0, r3, r2, r0
 801396a:	2264      	movs	r2, #100	; 0x64
 801396c:	4481      	add	r9, r0
 801396e:	fb99 f3f2 	sdiv	r3, r9, r2
 8013972:	fb02 9913 	mls	r9, r2, r3, r9
 8013976:	4491      	add	r9, r2
 8013978:	fbb9 f3f2 	udiv	r3, r9, r2
 801397c:	fb02 9313 	mls	r3, r2, r3, r9
 8013980:	4a13      	ldr	r2, [pc, #76]	; (80139d0 <__strftime.isra.0+0x4a8>)
 8013982:	e78b      	b.n	801389c <__strftime.isra.0+0x374>
 8013984:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013988:	f001 fd95 	bl	80154b6 <abs>
 801398c:	2364      	movs	r3, #100	; 0x64
 801398e:	f1b9 0f00 	cmp.w	r9, #0
 8013992:	fb90 f2f3 	sdiv	r2, r0, r3
 8013996:	fb02 0013 	mls	r0, r2, r3, r0
 801399a:	da07      	bge.n	80139ac <__strftime.isra.0+0x484>
 801399c:	6972      	ldr	r2, [r6, #20]
 801399e:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 80139a2:	429a      	cmp	r2, r3
 80139a4:	bfb8      	it	lt
 80139a6:	f04f 0901 	movlt.w	r9, #1
 80139aa:	e7de      	b.n	801396a <__strftime.isra.0+0x442>
 80139ac:	d0dd      	beq.n	801396a <__strftime.isra.0+0x442>
 80139ae:	6972      	ldr	r2, [r6, #20]
 80139b0:	4b03      	ldr	r3, [pc, #12]	; (80139c0 <__strftime.isra.0+0x498>)
 80139b2:	429a      	cmp	r2, r3
 80139b4:	bfb8      	it	lt
 80139b6:	f04f 39ff 	movlt.w	r9, #4294967295
 80139ba:	e7d6      	b.n	801396a <__strftime.isra.0+0x442>
 80139bc:	080497e0 	.word	0x080497e0
 80139c0:	fffff894 	.word	0xfffff894
 80139c4:	08049492 	.word	0x08049492
 80139c8:	080495be 	.word	0x080495be
 80139cc:	08049d2d 	.word	0x08049d2d
 80139d0:	080495ce 	.word	0x080495ce
 80139d4:	080495c0 	.word	0x080495c0
 80139d8:	080495c4 	.word	0x080495c4
 80139dc:	080495d7 	.word	0x080495d7
 80139e0:	080495d3 	.word	0x080495d3
 80139e4:	080495b6 	.word	0x080495b6
 80139e8:	080495af 	.word	0x080495af
 80139ec:	6971      	ldr	r1, [r6, #20]
 80139ee:	4ab6      	ldr	r2, [pc, #728]	; (8013cc8 <__strftime.isra.0+0x7a0>)
 80139f0:	4291      	cmp	r1, r2
 80139f2:	bfac      	ite	ge
 80139f4:	2300      	movge	r3, #0
 80139f6:	2301      	movlt	r3, #1
 80139f8:	4630      	mov	r0, r6
 80139fa:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80139fe:	f7ff fd31 	bl	8013464 <iso_year_adjust>
 8013a02:	9904      	ldr	r1, [sp, #16]
 8013a04:	2900      	cmp	r1, #0
 8013a06:	4682      	mov	sl, r0
 8013a08:	db2c      	blt.n	8013a64 <__strftime.isra.0+0x53c>
 8013a0a:	2264      	movs	r2, #100	; 0x64
 8013a0c:	fb91 f2f2 	sdiv	r2, r1, r2
 8013a10:	3213      	adds	r2, #19
 8013a12:	6970      	ldr	r0, [r6, #20]
 8013a14:	2800      	cmp	r0, #0
 8013a16:	db30      	blt.n	8013a7a <__strftime.isra.0+0x552>
 8013a18:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8013a1c:	fb90 fefc 	sdiv	lr, r0, ip
 8013a20:	fb0c 001e 	mls	r0, ip, lr, r0
 8013a24:	f1ba 0f00 	cmp.w	sl, #0
 8013a28:	da36      	bge.n	8013a98 <__strftime.isra.0+0x570>
 8013a2a:	6971      	ldr	r1, [r6, #20]
 8013a2c:	4ba7      	ldr	r3, [pc, #668]	; (8013ccc <__strftime.isra.0+0x7a4>)
 8013a2e:	4299      	cmp	r1, r3
 8013a30:	db3d      	blt.n	8013aae <__strftime.isra.0+0x586>
 8013a32:	4482      	add	sl, r0
 8013a34:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013a38:	d13e      	bne.n	8013ab8 <__strftime.isra.0+0x590>
 8013a3a:	3a01      	subs	r2, #1
 8013a3c:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8013a40:	9b03      	ldr	r3, [sp, #12]
 8013a42:	2064      	movs	r0, #100	; 0x64
 8013a44:	fb00 aa02 	mla	sl, r0, r2, sl
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	f000 81ad 	beq.w	8013da8 <__strftime.isra.0+0x880>
 8013a4e:	222d      	movs	r2, #45	; 0x2d
 8013a50:	f88d 2018 	strb.w	r2, [sp, #24]
 8013a54:	f1b9 0f00 	cmp.w	r9, #0
 8013a58:	d001      	beq.n	8013a5e <__strftime.isra.0+0x536>
 8013a5a:	f109 39ff 	add.w	r9, r9, #4294967295
 8013a5e:	f10d 0219 	add.w	r2, sp, #25
 8013a62:	e1ac      	b.n	8013dbe <__strftime.isra.0+0x896>
 8013a64:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8013a68:	9104      	str	r1, [sp, #16]
 8013a6a:	f001 fd24 	bl	80154b6 <abs>
 8013a6e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8013a72:	9904      	ldr	r1, [sp, #16]
 8013a74:	fb90 f2fc 	sdiv	r2, r0, ip
 8013a78:	e7cb      	b.n	8013a12 <__strftime.isra.0+0x4ea>
 8013a7a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013a7e:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8013a82:	f001 fd18 	bl	80154b6 <abs>
 8013a86:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8013a8a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8013a8e:	fb90 fefc 	sdiv	lr, r0, ip
 8013a92:	fb0e 001c 	mls	r0, lr, ip, r0
 8013a96:	e7c5      	b.n	8013a24 <__strftime.isra.0+0x4fc>
 8013a98:	d0cb      	beq.n	8013a32 <__strftime.isra.0+0x50a>
 8013a9a:	4b8b      	ldr	r3, [pc, #556]	; (8013cc8 <__strftime.isra.0+0x7a0>)
 8013a9c:	4299      	cmp	r1, r3
 8013a9e:	bfb4      	ite	lt
 8013aa0:	2301      	movlt	r3, #1
 8013aa2:	2300      	movge	r3, #0
 8013aa4:	9303      	str	r3, [sp, #12]
 8013aa6:	bfb8      	it	lt
 8013aa8:	f04f 3aff 	movlt.w	sl, #4294967295
 8013aac:	e7c1      	b.n	8013a32 <__strftime.isra.0+0x50a>
 8013aae:	f04f 0a01 	mov.w	sl, #1
 8013ab2:	f8cd a00c 	str.w	sl, [sp, #12]
 8013ab6:	e7bc      	b.n	8013a32 <__strftime.isra.0+0x50a>
 8013ab8:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8013abc:	bf04      	itt	eq
 8013abe:	3201      	addeq	r2, #1
 8013ac0:	f04f 0a00 	moveq.w	sl, #0
 8013ac4:	e7bc      	b.n	8013a40 <__strftime.isra.0+0x518>
 8013ac6:	4982      	ldr	r1, [pc, #520]	; (8013cd0 <__strftime.isra.0+0x7a8>)
 8013ac8:	4a82      	ldr	r2, [pc, #520]	; (8013cd4 <__strftime.isra.0+0x7ac>)
 8013aca:	68b3      	ldr	r3, [r6, #8]
 8013acc:	286b      	cmp	r0, #107	; 0x6b
 8013ace:	bf08      	it	eq
 8013ad0:	460a      	moveq	r2, r1
 8013ad2:	e6e3      	b.n	801389c <__strftime.isra.0+0x374>
 8013ad4:	68b3      	ldr	r3, [r6, #8]
 8013ad6:	b163      	cbz	r3, 8013af2 <__strftime.isra.0+0x5ca>
 8013ad8:	2b0c      	cmp	r3, #12
 8013ada:	d004      	beq.n	8013ae6 <__strftime.isra.0+0x5be>
 8013adc:	210c      	movs	r1, #12
 8013ade:	fb93 f2f1 	sdiv	r2, r3, r1
 8013ae2:	fb01 3312 	mls	r3, r1, r2, r3
 8013ae6:	497b      	ldr	r1, [pc, #492]	; (8013cd4 <__strftime.isra.0+0x7ac>)
 8013ae8:	4a79      	ldr	r2, [pc, #484]	; (8013cd0 <__strftime.isra.0+0x7a8>)
 8013aea:	2849      	cmp	r0, #73	; 0x49
 8013aec:	bf08      	it	eq
 8013aee:	460a      	moveq	r2, r1
 8013af0:	e6d4      	b.n	801389c <__strftime.isra.0+0x374>
 8013af2:	230c      	movs	r3, #12
 8013af4:	e7f7      	b.n	8013ae6 <__strftime.isra.0+0x5be>
 8013af6:	69f3      	ldr	r3, [r6, #28]
 8013af8:	4a77      	ldr	r2, [pc, #476]	; (8013cd8 <__strftime.isra.0+0x7b0>)
 8013afa:	3301      	adds	r3, #1
 8013afc:	e6ce      	b.n	801389c <__strftime.isra.0+0x374>
 8013afe:	6933      	ldr	r3, [r6, #16]
 8013b00:	3301      	adds	r3, #1
 8013b02:	e73d      	b.n	8013980 <__strftime.isra.0+0x458>
 8013b04:	6873      	ldr	r3, [r6, #4]
 8013b06:	e73b      	b.n	8013980 <__strftime.isra.0+0x458>
 8013b08:	1e6b      	subs	r3, r5, #1
 8013b0a:	429c      	cmp	r4, r3
 8013b0c:	f4bf ad3e 	bcs.w	801358c <__strftime.isra.0+0x64>
 8013b10:	230a      	movs	r3, #10
 8013b12:	553b      	strb	r3, [r7, r4]
 8013b14:	3401      	adds	r4, #1
 8013b16:	e60b      	b.n	8013730 <__strftime.isra.0+0x208>
 8013b18:	68b3      	ldr	r3, [r6, #8]
 8013b1a:	2b0b      	cmp	r3, #11
 8013b1c:	4b6f      	ldr	r3, [pc, #444]	; (8013cdc <__strftime.isra.0+0x7b4>)
 8013b1e:	bfd4      	ite	le
 8013b20:	2200      	movle	r2, #0
 8013b22:	2201      	movgt	r2, #1
 8013b24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013b28:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8013b2c:	4648      	mov	r0, r9
 8013b2e:	f7ec fb69 	bl	8000204 <strlen>
 8013b32:	f109 32ff 	add.w	r2, r9, #4294967295
 8013b36:	4420      	add	r0, r4
 8013b38:	f105 3cff 	add.w	ip, r5, #4294967295
 8013b3c:	42a0      	cmp	r0, r4
 8013b3e:	f43f adf7 	beq.w	8013730 <__strftime.isra.0+0x208>
 8013b42:	45a4      	cmp	ip, r4
 8013b44:	f67f ad22 	bls.w	801358c <__strftime.isra.0+0x64>
 8013b48:	f898 1000 	ldrb.w	r1, [r8]
 8013b4c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013b50:	2950      	cmp	r1, #80	; 0x50
 8013b52:	d107      	bne.n	8013b64 <__strftime.isra.0+0x63c>
 8013b54:	4962      	ldr	r1, [pc, #392]	; (8013ce0 <__strftime.isra.0+0x7b8>)
 8013b56:	5cc9      	ldrb	r1, [r1, r3]
 8013b58:	f001 0103 	and.w	r1, r1, #3
 8013b5c:	2901      	cmp	r1, #1
 8013b5e:	bf08      	it	eq
 8013b60:	3320      	addeq	r3, #32
 8013b62:	b2db      	uxtb	r3, r3
 8013b64:	553b      	strb	r3, [r7, r4]
 8013b66:	3401      	adds	r4, #1
 8013b68:	e7e8      	b.n	8013b3c <__strftime.isra.0+0x614>
 8013b6a:	6873      	ldr	r3, [r6, #4]
 8013b6c:	9300      	str	r3, [sp, #0]
 8013b6e:	4a5d      	ldr	r2, [pc, #372]	; (8013ce4 <__strftime.isra.0+0x7bc>)
 8013b70:	68b3      	ldr	r3, [r6, #8]
 8013b72:	1b29      	subs	r1, r5, r4
 8013b74:	1938      	adds	r0, r7, r4
 8013b76:	f004 fb8b 	bl	8018290 <sniprintf>
 8013b7a:	e693      	b.n	80138a4 <__strftime.isra.0+0x37c>
 8013b7c:	6a33      	ldr	r3, [r6, #32]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	db7a      	blt.n	8013c78 <__strftime.isra.0+0x750>
 8013b82:	f001 fa2d 	bl	8014fe0 <__tz_lock>
 8013b86:	9b02      	ldr	r3, [sp, #8]
 8013b88:	b90b      	cbnz	r3, 8013b8e <__strftime.isra.0+0x666>
 8013b8a:	f001 fa35 	bl	8014ff8 <_tzset_unlocked>
 8013b8e:	f003 f89f 	bl	8016cd0 <__gettzinfo>
 8013b92:	6a33      	ldr	r3, [r6, #32]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	bfd4      	ite	le
 8013b98:	2200      	movle	r2, #0
 8013b9a:	2201      	movgt	r2, #1
 8013b9c:	2328      	movs	r3, #40	; 0x28
 8013b9e:	fb02 3303 	mla	r3, r2, r3, r3
 8013ba2:	58c3      	ldr	r3, [r0, r3]
 8013ba4:	f1c3 0900 	rsb	r9, r3, #0
 8013ba8:	f001 fa20 	bl	8014fec <__tz_unlock>
 8013bac:	2301      	movs	r3, #1
 8013bae:	9302      	str	r3, [sp, #8]
 8013bb0:	6972      	ldr	r2, [r6, #20]
 8013bb2:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8013bb6:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8013bba:	f16c 0c00 	sbc.w	ip, ip, #0
 8013bbe:	f1bc 0f00 	cmp.w	ip, #0
 8013bc2:	eba5 0104 	sub.w	r1, r5, r4
 8013bc6:	eb07 0004 	add.w	r0, r7, r4
 8013bca:	da02      	bge.n	8013bd2 <__strftime.isra.0+0x6aa>
 8013bcc:	3303      	adds	r3, #3
 8013bce:	f14c 0c00 	adc.w	ip, ip, #0
 8013bd2:	089b      	lsrs	r3, r3, #2
 8013bd4:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8013bd8:	f102 3aff 	add.w	sl, r2, #4294967295
 8013bdc:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8013be0:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8013be4:	fb9a fefe 	sdiv	lr, sl, lr
 8013be8:	ebb3 030e 	subs.w	r3, r3, lr
 8013bec:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8013bf0:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8013bf4:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8013bf8:	fb9a fefe 	sdiv	lr, sl, lr
 8013bfc:	eb13 030e 	adds.w	r3, r3, lr
 8013c00:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8013c04:	3a46      	subs	r2, #70	; 0x46
 8013c06:	f240 1c6d 	movw	ip, #365	; 0x16d
 8013c0a:	fb0c f202 	mul.w	r2, ip, r2
 8013c0e:	189b      	adds	r3, r3, r2
 8013c10:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8013c14:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 8013c18:	f04f 0c18 	mov.w	ip, #24
 8013c1c:	eb13 030e 	adds.w	r3, r3, lr
 8013c20:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8013c24:	fba3 3e0c 	umull	r3, lr, r3, ip
 8013c28:	fb0c e202 	mla	r2, ip, r2, lr
 8013c2c:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8013c30:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8013c34:	eb13 030e 	adds.w	r3, r3, lr
 8013c38:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8013c3c:	fba3 320c 	umull	r3, r2, r3, ip
 8013c40:	fb0c 220e 	mla	r2, ip, lr, r2
 8013c44:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8013c48:	eb13 030e 	adds.w	r3, r3, lr
 8013c4c:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8013c50:	fba3 3e0c 	umull	r3, lr, r3, ip
 8013c54:	fb0c e202 	mla	r2, ip, r2, lr
 8013c58:	f8d6 e000 	ldr.w	lr, [r6]
 8013c5c:	eb13 030e 	adds.w	r3, r3, lr
 8013c60:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8013c64:	ebb3 0309 	subs.w	r3, r3, r9
 8013c68:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8013c6c:	e9cd 3200 	strd	r3, r2, [sp]
 8013c70:	4a1d      	ldr	r2, [pc, #116]	; (8013ce8 <__strftime.isra.0+0x7c0>)
 8013c72:	f004 fb0d 	bl	8018290 <sniprintf>
 8013c76:	e615      	b.n	80138a4 <__strftime.isra.0+0x37c>
 8013c78:	f04f 0900 	mov.w	r9, #0
 8013c7c:	e798      	b.n	8013bb0 <__strftime.isra.0+0x688>
 8013c7e:	6833      	ldr	r3, [r6, #0]
 8013c80:	e67e      	b.n	8013980 <__strftime.isra.0+0x458>
 8013c82:	1e6b      	subs	r3, r5, #1
 8013c84:	429c      	cmp	r4, r3
 8013c86:	f4bf ac81 	bcs.w	801358c <__strftime.isra.0+0x64>
 8013c8a:	2309      	movs	r3, #9
 8013c8c:	e741      	b.n	8013b12 <__strftime.isra.0+0x5ea>
 8013c8e:	6833      	ldr	r3, [r6, #0]
 8013c90:	9301      	str	r3, [sp, #4]
 8013c92:	6873      	ldr	r3, [r6, #4]
 8013c94:	9300      	str	r3, [sp, #0]
 8013c96:	4a15      	ldr	r2, [pc, #84]	; (8013cec <__strftime.isra.0+0x7c4>)
 8013c98:	68b3      	ldr	r3, [r6, #8]
 8013c9a:	e5f4      	b.n	8013886 <__strftime.isra.0+0x35e>
 8013c9c:	1e6b      	subs	r3, r5, #1
 8013c9e:	429c      	cmp	r4, r3
 8013ca0:	f4bf ac74 	bcs.w	801358c <__strftime.isra.0+0x64>
 8013ca4:	69b3      	ldr	r3, [r6, #24]
 8013ca6:	1c62      	adds	r2, r4, #1
 8013ca8:	b91b      	cbnz	r3, 8013cb2 <__strftime.isra.0+0x78a>
 8013caa:	2337      	movs	r3, #55	; 0x37
 8013cac:	553b      	strb	r3, [r7, r4]
 8013cae:	4614      	mov	r4, r2
 8013cb0:	e53e      	b.n	8013730 <__strftime.isra.0+0x208>
 8013cb2:	3330      	adds	r3, #48	; 0x30
 8013cb4:	e7fa      	b.n	8013cac <__strftime.isra.0+0x784>
 8013cb6:	69f3      	ldr	r3, [r6, #28]
 8013cb8:	69b2      	ldr	r2, [r6, #24]
 8013cba:	3307      	adds	r3, #7
 8013cbc:	1a9b      	subs	r3, r3, r2
 8013cbe:	2207      	movs	r2, #7
 8013cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8013cc4:	e65c      	b.n	8013980 <__strftime.isra.0+0x458>
 8013cc6:	bf00      	nop
 8013cc8:	fffff894 	.word	0xfffff894
 8013ccc:	fffff895 	.word	0xfffff895
 8013cd0:	080495c0 	.word	0x080495c0
 8013cd4:	080495ce 	.word	0x080495ce
 8013cd8:	080495e3 	.word	0x080495e3
 8013cdc:	080497e0 	.word	0x080497e0
 8013ce0:	08049919 	.word	0x08049919
 8013ce4:	080495f2 	.word	0x080495f2
 8013ce8:	080495e8 	.word	0x080495e8
 8013cec:	080495ed 	.word	0x080495ed
 8013cf0:	4630      	mov	r0, r6
 8013cf2:	f7ff fbb7 	bl	8013464 <iso_year_adjust>
 8013cf6:	69b2      	ldr	r2, [r6, #24]
 8013cf8:	b132      	cbz	r2, 8013d08 <__strftime.isra.0+0x7e0>
 8013cfa:	3a01      	subs	r2, #1
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	dc28      	bgt.n	8013d52 <__strftime.isra.0+0x82a>
 8013d00:	69f3      	ldr	r3, [r6, #28]
 8013d02:	d103      	bne.n	8013d0c <__strftime.isra.0+0x7e4>
 8013d04:	330a      	adds	r3, #10
 8013d06:	e7d9      	b.n	8013cbc <__strftime.isra.0+0x794>
 8013d08:	2206      	movs	r2, #6
 8013d0a:	e7f7      	b.n	8013cfc <__strftime.isra.0+0x7d4>
 8013d0c:	6971      	ldr	r1, [r6, #20]
 8013d0e:	2900      	cmp	r1, #0
 8013d10:	eba2 0203 	sub.w	r2, r2, r3
 8013d14:	f240 736b 	movw	r3, #1899	; 0x76b
 8013d18:	bfa8      	it	ge
 8013d1a:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 8013d1e:	440b      	add	r3, r1
 8013d20:	0799      	lsls	r1, r3, #30
 8013d22:	d105      	bne.n	8013d30 <__strftime.isra.0+0x808>
 8013d24:	2064      	movs	r0, #100	; 0x64
 8013d26:	fb93 f1f0 	sdiv	r1, r3, r0
 8013d2a:	fb00 3111 	mls	r1, r0, r1, r3
 8013d2e:	b971      	cbnz	r1, 8013d4e <__strftime.isra.0+0x826>
 8013d30:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8013d34:	fb93 f0f1 	sdiv	r0, r3, r1
 8013d38:	fb01 3310 	mls	r3, r1, r0, r3
 8013d3c:	fab3 f383 	clz	r3, r3
 8013d40:	095b      	lsrs	r3, r3, #5
 8013d42:	1ad3      	subs	r3, r2, r3
 8013d44:	2b05      	cmp	r3, #5
 8013d46:	bfb4      	ite	lt
 8013d48:	2335      	movlt	r3, #53	; 0x35
 8013d4a:	2334      	movge	r3, #52	; 0x34
 8013d4c:	e618      	b.n	8013980 <__strftime.isra.0+0x458>
 8013d4e:	2301      	movs	r3, #1
 8013d50:	e7f7      	b.n	8013d42 <__strftime.isra.0+0x81a>
 8013d52:	2301      	movs	r3, #1
 8013d54:	e614      	b.n	8013980 <__strftime.isra.0+0x458>
 8013d56:	1e6b      	subs	r3, r5, #1
 8013d58:	429c      	cmp	r4, r3
 8013d5a:	f4bf ac17 	bcs.w	801358c <__strftime.isra.0+0x64>
 8013d5e:	69b3      	ldr	r3, [r6, #24]
 8013d60:	3330      	adds	r3, #48	; 0x30
 8013d62:	e6d6      	b.n	8013b12 <__strftime.isra.0+0x5ea>
 8013d64:	69b2      	ldr	r2, [r6, #24]
 8013d66:	b11a      	cbz	r2, 8013d70 <__strftime.isra.0+0x848>
 8013d68:	3a01      	subs	r2, #1
 8013d6a:	69f3      	ldr	r3, [r6, #28]
 8013d6c:	3307      	adds	r3, #7
 8013d6e:	e7a5      	b.n	8013cbc <__strftime.isra.0+0x794>
 8013d70:	2206      	movs	r2, #6
 8013d72:	e7fa      	b.n	8013d6a <__strftime.isra.0+0x842>
 8013d74:	6970      	ldr	r0, [r6, #20]
 8013d76:	2800      	cmp	r0, #0
 8013d78:	db05      	blt.n	8013d86 <__strftime.isra.0+0x85e>
 8013d7a:	2364      	movs	r3, #100	; 0x64
 8013d7c:	fb90 f2f3 	sdiv	r2, r0, r3
 8013d80:	fb02 0313 	mls	r3, r2, r3, r0
 8013d84:	e5fc      	b.n	8013980 <__strftime.isra.0+0x458>
 8013d86:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013d8a:	f001 fb94 	bl	80154b6 <abs>
 8013d8e:	e7f4      	b.n	8013d7a <__strftime.isra.0+0x852>
 8013d90:	6972      	ldr	r2, [r6, #20]
 8013d92:	494c      	ldr	r1, [pc, #304]	; (8013ec4 <__strftime.isra.0+0x99c>)
 8013d94:	428a      	cmp	r2, r1
 8013d96:	da05      	bge.n	8013da4 <__strftime.isra.0+0x87c>
 8013d98:	202d      	movs	r0, #45	; 0x2d
 8013d9a:	f88d 0018 	strb.w	r0, [sp, #24]
 8013d9e:	eba1 0a02 	sub.w	sl, r1, r2
 8013da2:	e657      	b.n	8013a54 <__strftime.isra.0+0x52c>
 8013da4:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8013da8:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8013dac:	d106      	bne.n	8013dbc <__strftime.isra.0+0x894>
 8013dae:	f242 720f 	movw	r2, #9999	; 0x270f
 8013db2:	4592      	cmp	sl, r2
 8013db4:	d902      	bls.n	8013dbc <__strftime.isra.0+0x894>
 8013db6:	f88d b018 	strb.w	fp, [sp, #24]
 8013dba:	e64b      	b.n	8013a54 <__strftime.isra.0+0x52c>
 8013dbc:	aa06      	add	r2, sp, #24
 8013dbe:	2125      	movs	r1, #37	; 0x25
 8013dc0:	7011      	strb	r1, [r2, #0]
 8013dc2:	f1bb 0f00 	cmp.w	fp, #0
 8013dc6:	d108      	bne.n	8013dda <__strftime.isra.0+0x8b2>
 8013dc8:	1c50      	adds	r0, r2, #1
 8013dca:	493f      	ldr	r1, [pc, #252]	; (8013ec8 <__strftime.isra.0+0x9a0>)
 8013dcc:	f7ff fb41 	bl	8013452 <strcpy>
 8013dd0:	f8cd a000 	str.w	sl, [sp]
 8013dd4:	464b      	mov	r3, r9
 8013dd6:	aa06      	add	r2, sp, #24
 8013dd8:	e6cb      	b.n	8013b72 <__strftime.isra.0+0x64a>
 8013dda:	2330      	movs	r3, #48	; 0x30
 8013ddc:	1c90      	adds	r0, r2, #2
 8013dde:	7053      	strb	r3, [r2, #1]
 8013de0:	e7f3      	b.n	8013dca <__strftime.isra.0+0x8a2>
 8013de2:	6a33      	ldr	r3, [r6, #32]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	f6ff aca3 	blt.w	8013730 <__strftime.isra.0+0x208>
 8013dea:	f001 f8f9 	bl	8014fe0 <__tz_lock>
 8013dee:	9b02      	ldr	r3, [sp, #8]
 8013df0:	b90b      	cbnz	r3, 8013df6 <__strftime.isra.0+0x8ce>
 8013df2:	f001 f901 	bl	8014ff8 <_tzset_unlocked>
 8013df6:	f002 ff6b 	bl	8016cd0 <__gettzinfo>
 8013dfa:	6a33      	ldr	r3, [r6, #32]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	bfd4      	ite	le
 8013e00:	2200      	movle	r2, #0
 8013e02:	2201      	movgt	r2, #1
 8013e04:	2328      	movs	r3, #40	; 0x28
 8013e06:	fb02 3303 	mla	r3, r2, r3, r3
 8013e0a:	eb07 0a04 	add.w	sl, r7, r4
 8013e0e:	58c3      	ldr	r3, [r0, r3]
 8013e10:	f1c3 0900 	rsb	r9, r3, #0
 8013e14:	f001 f8ea 	bl	8014fec <__tz_unlock>
 8013e18:	233c      	movs	r3, #60	; 0x3c
 8013e1a:	fb99 f0f3 	sdiv	r0, r9, r3
 8013e1e:	f002 ff5b 	bl	8016cd8 <labs>
 8013e22:	233c      	movs	r3, #60	; 0x3c
 8013e24:	eba5 0b04 	sub.w	fp, r5, r4
 8013e28:	fb90 f2f3 	sdiv	r2, r0, r3
 8013e2c:	fb02 0013 	mls	r0, r2, r3, r0
 8013e30:	9000      	str	r0, [sp, #0]
 8013e32:	4a26      	ldr	r2, [pc, #152]	; (8013ecc <__strftime.isra.0+0x9a4>)
 8013e34:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8013e38:	4659      	mov	r1, fp
 8013e3a:	4650      	mov	r0, sl
 8013e3c:	fb99 f3f3 	sdiv	r3, r9, r3
 8013e40:	f004 fa26 	bl	8018290 <sniprintf>
 8013e44:	2800      	cmp	r0, #0
 8013e46:	f6ff aba1 	blt.w	801358c <__strftime.isra.0+0x64>
 8013e4a:	4404      	add	r4, r0
 8013e4c:	42a5      	cmp	r5, r4
 8013e4e:	f67f ab9d 	bls.w	801358c <__strftime.isra.0+0x64>
 8013e52:	2301      	movs	r3, #1
 8013e54:	9302      	str	r3, [sp, #8]
 8013e56:	e46b      	b.n	8013730 <__strftime.isra.0+0x208>
 8013e58:	6a33      	ldr	r3, [r6, #32]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	f6ff ac68 	blt.w	8013730 <__strftime.isra.0+0x208>
 8013e60:	f001 f8be 	bl	8014fe0 <__tz_lock>
 8013e64:	9b02      	ldr	r3, [sp, #8]
 8013e66:	b90b      	cbnz	r3, 8013e6c <__strftime.isra.0+0x944>
 8013e68:	f001 f8c6 	bl	8014ff8 <_tzset_unlocked>
 8013e6c:	6a33      	ldr	r3, [r6, #32]
 8013e6e:	4a18      	ldr	r2, [pc, #96]	; (8013ed0 <__strftime.isra.0+0x9a8>)
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	bfd4      	ite	le
 8013e74:	2300      	movle	r3, #0
 8013e76:	2301      	movgt	r3, #1
 8013e78:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8013e7c:	4648      	mov	r0, r9
 8013e7e:	f7ec f9c1 	bl	8000204 <strlen>
 8013e82:	f109 39ff 	add.w	r9, r9, #4294967295
 8013e86:	4420      	add	r0, r4
 8013e88:	1e6b      	subs	r3, r5, #1
 8013e8a:	42a0      	cmp	r0, r4
 8013e8c:	d102      	bne.n	8013e94 <__strftime.isra.0+0x96c>
 8013e8e:	f001 f8ad 	bl	8014fec <__tz_unlock>
 8013e92:	e7de      	b.n	8013e52 <__strftime.isra.0+0x92a>
 8013e94:	42a3      	cmp	r3, r4
 8013e96:	d904      	bls.n	8013ea2 <__strftime.isra.0+0x97a>
 8013e98:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8013e9c:	553a      	strb	r2, [r7, r4]
 8013e9e:	3401      	adds	r4, #1
 8013ea0:	e7f3      	b.n	8013e8a <__strftime.isra.0+0x962>
 8013ea2:	f001 f8a3 	bl	8014fec <__tz_unlock>
 8013ea6:	f7ff bb71 	b.w	801358c <__strftime.isra.0+0x64>
 8013eaa:	1e6b      	subs	r3, r5, #1
 8013eac:	429c      	cmp	r4, r3
 8013eae:	f4bf ab6d 	bcs.w	801358c <__strftime.isra.0+0x64>
 8013eb2:	2325      	movs	r3, #37	; 0x25
 8013eb4:	e62d      	b.n	8013b12 <__strftime.isra.0+0x5ea>
 8013eb6:	b10d      	cbz	r5, 8013ebc <__strftime.isra.0+0x994>
 8013eb8:	2300      	movs	r3, #0
 8013eba:	553b      	strb	r3, [r7, r4]
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	b00f      	add	sp, #60	; 0x3c
 8013ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ec4:	fffff894 	.word	0xfffff894
 8013ec8:	080495df 	.word	0x080495df
 8013ecc:	080495fc 	.word	0x080495fc
 8013ed0:	20000358 	.word	0x20000358

08013ed4 <strftime>:
 8013ed4:	f7ff bb28 	b.w	8013528 <__strftime.isra.0>

08013ed8 <strncpy>:
 8013ed8:	b510      	push	{r4, lr}
 8013eda:	3901      	subs	r1, #1
 8013edc:	4603      	mov	r3, r0
 8013ede:	b132      	cbz	r2, 8013eee <strncpy+0x16>
 8013ee0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013ee4:	f803 4b01 	strb.w	r4, [r3], #1
 8013ee8:	3a01      	subs	r2, #1
 8013eea:	2c00      	cmp	r4, #0
 8013eec:	d1f7      	bne.n	8013ede <strncpy+0x6>
 8013eee:	441a      	add	r2, r3
 8013ef0:	2100      	movs	r1, #0
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d100      	bne.n	8013ef8 <strncpy+0x20>
 8013ef6:	bd10      	pop	{r4, pc}
 8013ef8:	f803 1b01 	strb.w	r1, [r3], #1
 8013efc:	e7f9      	b.n	8013ef2 <strncpy+0x1a>

08013efe <strpbrk>:
 8013efe:	b570      	push	{r4, r5, r6, lr}
 8013f00:	7803      	ldrb	r3, [r0, #0]
 8013f02:	b1a3      	cbz	r3, 8013f2e <strpbrk+0x30>
 8013f04:	4603      	mov	r3, r0
 8013f06:	460c      	mov	r4, r1
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f813 5b01 	ldrb.w	r5, [r3], #1
 8013f0e:	b14d      	cbz	r5, 8013f24 <strpbrk+0x26>
 8013f10:	460a      	mov	r2, r1
 8013f12:	e001      	b.n	8013f18 <strpbrk+0x1a>
 8013f14:	42ae      	cmp	r6, r5
 8013f16:	d009      	beq.n	8013f2c <strpbrk+0x2e>
 8013f18:	4614      	mov	r4, r2
 8013f1a:	f812 6b01 	ldrb.w	r6, [r2], #1
 8013f1e:	2e00      	cmp	r6, #0
 8013f20:	d1f8      	bne.n	8013f14 <strpbrk+0x16>
 8013f22:	e7f1      	b.n	8013f08 <strpbrk+0xa>
 8013f24:	7823      	ldrb	r3, [r4, #0]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	bf08      	it	eq
 8013f2a:	2000      	moveq	r0, #0
 8013f2c:	bd70      	pop	{r4, r5, r6, pc}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	e7fc      	b.n	8013f2c <strpbrk+0x2e>

08013f32 <strstr>:
 8013f32:	780a      	ldrb	r2, [r1, #0]
 8013f34:	b570      	push	{r4, r5, r6, lr}
 8013f36:	b96a      	cbnz	r2, 8013f54 <strstr+0x22>
 8013f38:	bd70      	pop	{r4, r5, r6, pc}
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d109      	bne.n	8013f52 <strstr+0x20>
 8013f3e:	460c      	mov	r4, r1
 8013f40:	4605      	mov	r5, r0
 8013f42:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d0f6      	beq.n	8013f38 <strstr+0x6>
 8013f4a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013f4e:	429e      	cmp	r6, r3
 8013f50:	d0f7      	beq.n	8013f42 <strstr+0x10>
 8013f52:	3001      	adds	r0, #1
 8013f54:	7803      	ldrb	r3, [r0, #0]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d1ef      	bne.n	8013f3a <strstr+0x8>
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	e7ec      	b.n	8013f38 <strstr+0x6>

08013f5e <sulp>:
 8013f5e:	b570      	push	{r4, r5, r6, lr}
 8013f60:	4604      	mov	r4, r0
 8013f62:	460d      	mov	r5, r1
 8013f64:	ec45 4b10 	vmov	d0, r4, r5
 8013f68:	4616      	mov	r6, r2
 8013f6a:	f003 fae5 	bl	8017538 <__ulp>
 8013f6e:	ec51 0b10 	vmov	r0, r1, d0
 8013f72:	b17e      	cbz	r6, 8013f94 <sulp+0x36>
 8013f74:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013f78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	dd09      	ble.n	8013f94 <sulp+0x36>
 8013f80:	051b      	lsls	r3, r3, #20
 8013f82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013f86:	2400      	movs	r4, #0
 8013f88:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013f8c:	4622      	mov	r2, r4
 8013f8e:	462b      	mov	r3, r5
 8013f90:	f7ec fb52 	bl	8000638 <__aeabi_dmul>
 8013f94:	bd70      	pop	{r4, r5, r6, pc}
	...

08013f98 <_strtod_l>:
 8013f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9c:	ed2d 8b02 	vpush	{d8}
 8013fa0:	b09d      	sub	sp, #116	; 0x74
 8013fa2:	461f      	mov	r7, r3
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	9318      	str	r3, [sp, #96]	; 0x60
 8013fa8:	4ba2      	ldr	r3, [pc, #648]	; (8014234 <_strtod_l+0x29c>)
 8013faa:	9213      	str	r2, [sp, #76]	; 0x4c
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	9305      	str	r3, [sp, #20]
 8013fb0:	4604      	mov	r4, r0
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	4688      	mov	r8, r1
 8013fb6:	f7ec f925 	bl	8000204 <strlen>
 8013fba:	f04f 0a00 	mov.w	sl, #0
 8013fbe:	4605      	mov	r5, r0
 8013fc0:	f04f 0b00 	mov.w	fp, #0
 8013fc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013fca:	781a      	ldrb	r2, [r3, #0]
 8013fcc:	2a2b      	cmp	r2, #43	; 0x2b
 8013fce:	d04e      	beq.n	801406e <_strtod_l+0xd6>
 8013fd0:	d83b      	bhi.n	801404a <_strtod_l+0xb2>
 8013fd2:	2a0d      	cmp	r2, #13
 8013fd4:	d834      	bhi.n	8014040 <_strtod_l+0xa8>
 8013fd6:	2a08      	cmp	r2, #8
 8013fd8:	d834      	bhi.n	8014044 <_strtod_l+0xac>
 8013fda:	2a00      	cmp	r2, #0
 8013fdc:	d03e      	beq.n	801405c <_strtod_l+0xc4>
 8013fde:	2300      	movs	r3, #0
 8013fe0:	930a      	str	r3, [sp, #40]	; 0x28
 8013fe2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013fe4:	7833      	ldrb	r3, [r6, #0]
 8013fe6:	2b30      	cmp	r3, #48	; 0x30
 8013fe8:	f040 80b0 	bne.w	801414c <_strtod_l+0x1b4>
 8013fec:	7873      	ldrb	r3, [r6, #1]
 8013fee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013ff2:	2b58      	cmp	r3, #88	; 0x58
 8013ff4:	d168      	bne.n	80140c8 <_strtod_l+0x130>
 8013ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ff8:	9301      	str	r3, [sp, #4]
 8013ffa:	ab18      	add	r3, sp, #96	; 0x60
 8013ffc:	9702      	str	r7, [sp, #8]
 8013ffe:	9300      	str	r3, [sp, #0]
 8014000:	4a8d      	ldr	r2, [pc, #564]	; (8014238 <_strtod_l+0x2a0>)
 8014002:	ab19      	add	r3, sp, #100	; 0x64
 8014004:	a917      	add	r1, sp, #92	; 0x5c
 8014006:	4620      	mov	r0, r4
 8014008:	f002 fb16 	bl	8016638 <__gethex>
 801400c:	f010 0707 	ands.w	r7, r0, #7
 8014010:	4605      	mov	r5, r0
 8014012:	d005      	beq.n	8014020 <_strtod_l+0x88>
 8014014:	2f06      	cmp	r7, #6
 8014016:	d12c      	bne.n	8014072 <_strtod_l+0xda>
 8014018:	3601      	adds	r6, #1
 801401a:	2300      	movs	r3, #0
 801401c:	9617      	str	r6, [sp, #92]	; 0x5c
 801401e:	930a      	str	r3, [sp, #40]	; 0x28
 8014020:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014022:	2b00      	cmp	r3, #0
 8014024:	f040 8590 	bne.w	8014b48 <_strtod_l+0xbb0>
 8014028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801402a:	b1eb      	cbz	r3, 8014068 <_strtod_l+0xd0>
 801402c:	4652      	mov	r2, sl
 801402e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014032:	ec43 2b10 	vmov	d0, r2, r3
 8014036:	b01d      	add	sp, #116	; 0x74
 8014038:	ecbd 8b02 	vpop	{d8}
 801403c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014040:	2a20      	cmp	r2, #32
 8014042:	d1cc      	bne.n	8013fde <_strtod_l+0x46>
 8014044:	3301      	adds	r3, #1
 8014046:	9317      	str	r3, [sp, #92]	; 0x5c
 8014048:	e7be      	b.n	8013fc8 <_strtod_l+0x30>
 801404a:	2a2d      	cmp	r2, #45	; 0x2d
 801404c:	d1c7      	bne.n	8013fde <_strtod_l+0x46>
 801404e:	2201      	movs	r2, #1
 8014050:	920a      	str	r2, [sp, #40]	; 0x28
 8014052:	1c5a      	adds	r2, r3, #1
 8014054:	9217      	str	r2, [sp, #92]	; 0x5c
 8014056:	785b      	ldrb	r3, [r3, #1]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d1c2      	bne.n	8013fe2 <_strtod_l+0x4a>
 801405c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801405e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014062:	2b00      	cmp	r3, #0
 8014064:	f040 856e 	bne.w	8014b44 <_strtod_l+0xbac>
 8014068:	4652      	mov	r2, sl
 801406a:	465b      	mov	r3, fp
 801406c:	e7e1      	b.n	8014032 <_strtod_l+0x9a>
 801406e:	2200      	movs	r2, #0
 8014070:	e7ee      	b.n	8014050 <_strtod_l+0xb8>
 8014072:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014074:	b13a      	cbz	r2, 8014086 <_strtod_l+0xee>
 8014076:	2135      	movs	r1, #53	; 0x35
 8014078:	a81a      	add	r0, sp, #104	; 0x68
 801407a:	f003 fb68 	bl	801774e <__copybits>
 801407e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014080:	4620      	mov	r0, r4
 8014082:	f002 ff27 	bl	8016ed4 <_Bfree>
 8014086:	3f01      	subs	r7, #1
 8014088:	2f04      	cmp	r7, #4
 801408a:	d806      	bhi.n	801409a <_strtod_l+0x102>
 801408c:	e8df f007 	tbb	[pc, r7]
 8014090:	1714030a 	.word	0x1714030a
 8014094:	0a          	.byte	0x0a
 8014095:	00          	.byte	0x00
 8014096:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801409a:	0728      	lsls	r0, r5, #28
 801409c:	d5c0      	bpl.n	8014020 <_strtod_l+0x88>
 801409e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80140a2:	e7bd      	b.n	8014020 <_strtod_l+0x88>
 80140a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80140a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80140aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80140ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80140b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80140b6:	e7f0      	b.n	801409a <_strtod_l+0x102>
 80140b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801423c <_strtod_l+0x2a4>
 80140bc:	e7ed      	b.n	801409a <_strtod_l+0x102>
 80140be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80140c2:	f04f 3aff 	mov.w	sl, #4294967295
 80140c6:	e7e8      	b.n	801409a <_strtod_l+0x102>
 80140c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80140ca:	1c5a      	adds	r2, r3, #1
 80140cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80140ce:	785b      	ldrb	r3, [r3, #1]
 80140d0:	2b30      	cmp	r3, #48	; 0x30
 80140d2:	d0f9      	beq.n	80140c8 <_strtod_l+0x130>
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d0a3      	beq.n	8014020 <_strtod_l+0x88>
 80140d8:	2301      	movs	r3, #1
 80140da:	f04f 0900 	mov.w	r9, #0
 80140de:	9304      	str	r3, [sp, #16]
 80140e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80140e2:	9308      	str	r3, [sp, #32]
 80140e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80140e8:	464f      	mov	r7, r9
 80140ea:	220a      	movs	r2, #10
 80140ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80140ee:	7806      	ldrb	r6, [r0, #0]
 80140f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80140f4:	b2d9      	uxtb	r1, r3
 80140f6:	2909      	cmp	r1, #9
 80140f8:	d92a      	bls.n	8014150 <_strtod_l+0x1b8>
 80140fa:	9905      	ldr	r1, [sp, #20]
 80140fc:	462a      	mov	r2, r5
 80140fe:	f004 f8fb 	bl	80182f8 <strncmp>
 8014102:	b398      	cbz	r0, 801416c <_strtod_l+0x1d4>
 8014104:	2000      	movs	r0, #0
 8014106:	4632      	mov	r2, r6
 8014108:	463d      	mov	r5, r7
 801410a:	9005      	str	r0, [sp, #20]
 801410c:	4603      	mov	r3, r0
 801410e:	2a65      	cmp	r2, #101	; 0x65
 8014110:	d001      	beq.n	8014116 <_strtod_l+0x17e>
 8014112:	2a45      	cmp	r2, #69	; 0x45
 8014114:	d118      	bne.n	8014148 <_strtod_l+0x1b0>
 8014116:	b91d      	cbnz	r5, 8014120 <_strtod_l+0x188>
 8014118:	9a04      	ldr	r2, [sp, #16]
 801411a:	4302      	orrs	r2, r0
 801411c:	d09e      	beq.n	801405c <_strtod_l+0xc4>
 801411e:	2500      	movs	r5, #0
 8014120:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8014124:	f108 0201 	add.w	r2, r8, #1
 8014128:	9217      	str	r2, [sp, #92]	; 0x5c
 801412a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801412e:	2a2b      	cmp	r2, #43	; 0x2b
 8014130:	d075      	beq.n	801421e <_strtod_l+0x286>
 8014132:	2a2d      	cmp	r2, #45	; 0x2d
 8014134:	d07b      	beq.n	801422e <_strtod_l+0x296>
 8014136:	f04f 0c00 	mov.w	ip, #0
 801413a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801413e:	2909      	cmp	r1, #9
 8014140:	f240 8082 	bls.w	8014248 <_strtod_l+0x2b0>
 8014144:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8014148:	2600      	movs	r6, #0
 801414a:	e09d      	b.n	8014288 <_strtod_l+0x2f0>
 801414c:	2300      	movs	r3, #0
 801414e:	e7c4      	b.n	80140da <_strtod_l+0x142>
 8014150:	2f08      	cmp	r7, #8
 8014152:	bfd8      	it	le
 8014154:	9907      	ldrle	r1, [sp, #28]
 8014156:	f100 0001 	add.w	r0, r0, #1
 801415a:	bfda      	itte	le
 801415c:	fb02 3301 	mlale	r3, r2, r1, r3
 8014160:	9307      	strle	r3, [sp, #28]
 8014162:	fb02 3909 	mlagt	r9, r2, r9, r3
 8014166:	3701      	adds	r7, #1
 8014168:	9017      	str	r0, [sp, #92]	; 0x5c
 801416a:	e7bf      	b.n	80140ec <_strtod_l+0x154>
 801416c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801416e:	195a      	adds	r2, r3, r5
 8014170:	9217      	str	r2, [sp, #92]	; 0x5c
 8014172:	5d5a      	ldrb	r2, [r3, r5]
 8014174:	2f00      	cmp	r7, #0
 8014176:	d037      	beq.n	80141e8 <_strtod_l+0x250>
 8014178:	9005      	str	r0, [sp, #20]
 801417a:	463d      	mov	r5, r7
 801417c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014180:	2b09      	cmp	r3, #9
 8014182:	d912      	bls.n	80141aa <_strtod_l+0x212>
 8014184:	2301      	movs	r3, #1
 8014186:	e7c2      	b.n	801410e <_strtod_l+0x176>
 8014188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801418a:	1c5a      	adds	r2, r3, #1
 801418c:	9217      	str	r2, [sp, #92]	; 0x5c
 801418e:	785a      	ldrb	r2, [r3, #1]
 8014190:	3001      	adds	r0, #1
 8014192:	2a30      	cmp	r2, #48	; 0x30
 8014194:	d0f8      	beq.n	8014188 <_strtod_l+0x1f0>
 8014196:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801419a:	2b08      	cmp	r3, #8
 801419c:	f200 84d9 	bhi.w	8014b52 <_strtod_l+0xbba>
 80141a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80141a2:	9005      	str	r0, [sp, #20]
 80141a4:	2000      	movs	r0, #0
 80141a6:	9308      	str	r3, [sp, #32]
 80141a8:	4605      	mov	r5, r0
 80141aa:	3a30      	subs	r2, #48	; 0x30
 80141ac:	f100 0301 	add.w	r3, r0, #1
 80141b0:	d014      	beq.n	80141dc <_strtod_l+0x244>
 80141b2:	9905      	ldr	r1, [sp, #20]
 80141b4:	4419      	add	r1, r3
 80141b6:	9105      	str	r1, [sp, #20]
 80141b8:	462b      	mov	r3, r5
 80141ba:	eb00 0e05 	add.w	lr, r0, r5
 80141be:	210a      	movs	r1, #10
 80141c0:	4573      	cmp	r3, lr
 80141c2:	d113      	bne.n	80141ec <_strtod_l+0x254>
 80141c4:	182b      	adds	r3, r5, r0
 80141c6:	2b08      	cmp	r3, #8
 80141c8:	f105 0501 	add.w	r5, r5, #1
 80141cc:	4405      	add	r5, r0
 80141ce:	dc1c      	bgt.n	801420a <_strtod_l+0x272>
 80141d0:	9907      	ldr	r1, [sp, #28]
 80141d2:	230a      	movs	r3, #10
 80141d4:	fb03 2301 	mla	r3, r3, r1, r2
 80141d8:	9307      	str	r3, [sp, #28]
 80141da:	2300      	movs	r3, #0
 80141dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80141de:	1c51      	adds	r1, r2, #1
 80141e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80141e2:	7852      	ldrb	r2, [r2, #1]
 80141e4:	4618      	mov	r0, r3
 80141e6:	e7c9      	b.n	801417c <_strtod_l+0x1e4>
 80141e8:	4638      	mov	r0, r7
 80141ea:	e7d2      	b.n	8014192 <_strtod_l+0x1fa>
 80141ec:	2b08      	cmp	r3, #8
 80141ee:	dc04      	bgt.n	80141fa <_strtod_l+0x262>
 80141f0:	9e07      	ldr	r6, [sp, #28]
 80141f2:	434e      	muls	r6, r1
 80141f4:	9607      	str	r6, [sp, #28]
 80141f6:	3301      	adds	r3, #1
 80141f8:	e7e2      	b.n	80141c0 <_strtod_l+0x228>
 80141fa:	f103 0c01 	add.w	ip, r3, #1
 80141fe:	f1bc 0f10 	cmp.w	ip, #16
 8014202:	bfd8      	it	le
 8014204:	fb01 f909 	mulle.w	r9, r1, r9
 8014208:	e7f5      	b.n	80141f6 <_strtod_l+0x25e>
 801420a:	2d10      	cmp	r5, #16
 801420c:	bfdc      	itt	le
 801420e:	230a      	movle	r3, #10
 8014210:	fb03 2909 	mlale	r9, r3, r9, r2
 8014214:	e7e1      	b.n	80141da <_strtod_l+0x242>
 8014216:	2300      	movs	r3, #0
 8014218:	9305      	str	r3, [sp, #20]
 801421a:	2301      	movs	r3, #1
 801421c:	e77c      	b.n	8014118 <_strtod_l+0x180>
 801421e:	f04f 0c00 	mov.w	ip, #0
 8014222:	f108 0202 	add.w	r2, r8, #2
 8014226:	9217      	str	r2, [sp, #92]	; 0x5c
 8014228:	f898 2002 	ldrb.w	r2, [r8, #2]
 801422c:	e785      	b.n	801413a <_strtod_l+0x1a2>
 801422e:	f04f 0c01 	mov.w	ip, #1
 8014232:	e7f6      	b.n	8014222 <_strtod_l+0x28a>
 8014234:	08049b5c 	.word	0x08049b5c
 8014238:	08049608 	.word	0x08049608
 801423c:	7ff00000 	.word	0x7ff00000
 8014240:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014242:	1c51      	adds	r1, r2, #1
 8014244:	9117      	str	r1, [sp, #92]	; 0x5c
 8014246:	7852      	ldrb	r2, [r2, #1]
 8014248:	2a30      	cmp	r2, #48	; 0x30
 801424a:	d0f9      	beq.n	8014240 <_strtod_l+0x2a8>
 801424c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014250:	2908      	cmp	r1, #8
 8014252:	f63f af79 	bhi.w	8014148 <_strtod_l+0x1b0>
 8014256:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801425a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801425c:	9206      	str	r2, [sp, #24]
 801425e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014260:	1c51      	adds	r1, r2, #1
 8014262:	9117      	str	r1, [sp, #92]	; 0x5c
 8014264:	7852      	ldrb	r2, [r2, #1]
 8014266:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801426a:	2e09      	cmp	r6, #9
 801426c:	d937      	bls.n	80142de <_strtod_l+0x346>
 801426e:	9e06      	ldr	r6, [sp, #24]
 8014270:	1b89      	subs	r1, r1, r6
 8014272:	2908      	cmp	r1, #8
 8014274:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8014278:	dc02      	bgt.n	8014280 <_strtod_l+0x2e8>
 801427a:	4576      	cmp	r6, lr
 801427c:	bfa8      	it	ge
 801427e:	4676      	movge	r6, lr
 8014280:	f1bc 0f00 	cmp.w	ip, #0
 8014284:	d000      	beq.n	8014288 <_strtod_l+0x2f0>
 8014286:	4276      	negs	r6, r6
 8014288:	2d00      	cmp	r5, #0
 801428a:	d14d      	bne.n	8014328 <_strtod_l+0x390>
 801428c:	9904      	ldr	r1, [sp, #16]
 801428e:	4301      	orrs	r1, r0
 8014290:	f47f aec6 	bne.w	8014020 <_strtod_l+0x88>
 8014294:	2b00      	cmp	r3, #0
 8014296:	f47f aee1 	bne.w	801405c <_strtod_l+0xc4>
 801429a:	2a69      	cmp	r2, #105	; 0x69
 801429c:	d027      	beq.n	80142ee <_strtod_l+0x356>
 801429e:	dc24      	bgt.n	80142ea <_strtod_l+0x352>
 80142a0:	2a49      	cmp	r2, #73	; 0x49
 80142a2:	d024      	beq.n	80142ee <_strtod_l+0x356>
 80142a4:	2a4e      	cmp	r2, #78	; 0x4e
 80142a6:	f47f aed9 	bne.w	801405c <_strtod_l+0xc4>
 80142aa:	499f      	ldr	r1, [pc, #636]	; (8014528 <_strtod_l+0x590>)
 80142ac:	a817      	add	r0, sp, #92	; 0x5c
 80142ae:	f002 fc1b 	bl	8016ae8 <__match>
 80142b2:	2800      	cmp	r0, #0
 80142b4:	f43f aed2 	beq.w	801405c <_strtod_l+0xc4>
 80142b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80142ba:	781b      	ldrb	r3, [r3, #0]
 80142bc:	2b28      	cmp	r3, #40	; 0x28
 80142be:	d12d      	bne.n	801431c <_strtod_l+0x384>
 80142c0:	499a      	ldr	r1, [pc, #616]	; (801452c <_strtod_l+0x594>)
 80142c2:	aa1a      	add	r2, sp, #104	; 0x68
 80142c4:	a817      	add	r0, sp, #92	; 0x5c
 80142c6:	f002 fc23 	bl	8016b10 <__hexnan>
 80142ca:	2805      	cmp	r0, #5
 80142cc:	d126      	bne.n	801431c <_strtod_l+0x384>
 80142ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80142d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80142d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80142d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80142dc:	e6a0      	b.n	8014020 <_strtod_l+0x88>
 80142de:	210a      	movs	r1, #10
 80142e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80142e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80142e8:	e7b9      	b.n	801425e <_strtod_l+0x2c6>
 80142ea:	2a6e      	cmp	r2, #110	; 0x6e
 80142ec:	e7db      	b.n	80142a6 <_strtod_l+0x30e>
 80142ee:	4990      	ldr	r1, [pc, #576]	; (8014530 <_strtod_l+0x598>)
 80142f0:	a817      	add	r0, sp, #92	; 0x5c
 80142f2:	f002 fbf9 	bl	8016ae8 <__match>
 80142f6:	2800      	cmp	r0, #0
 80142f8:	f43f aeb0 	beq.w	801405c <_strtod_l+0xc4>
 80142fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80142fe:	498d      	ldr	r1, [pc, #564]	; (8014534 <_strtod_l+0x59c>)
 8014300:	3b01      	subs	r3, #1
 8014302:	a817      	add	r0, sp, #92	; 0x5c
 8014304:	9317      	str	r3, [sp, #92]	; 0x5c
 8014306:	f002 fbef 	bl	8016ae8 <__match>
 801430a:	b910      	cbnz	r0, 8014312 <_strtod_l+0x37a>
 801430c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801430e:	3301      	adds	r3, #1
 8014310:	9317      	str	r3, [sp, #92]	; 0x5c
 8014312:	f8df b230 	ldr.w	fp, [pc, #560]	; 8014544 <_strtod_l+0x5ac>
 8014316:	f04f 0a00 	mov.w	sl, #0
 801431a:	e681      	b.n	8014020 <_strtod_l+0x88>
 801431c:	4886      	ldr	r0, [pc, #536]	; (8014538 <_strtod_l+0x5a0>)
 801431e:	f003 ff33 	bl	8018188 <nan>
 8014322:	ec5b ab10 	vmov	sl, fp, d0
 8014326:	e67b      	b.n	8014020 <_strtod_l+0x88>
 8014328:	9b05      	ldr	r3, [sp, #20]
 801432a:	9807      	ldr	r0, [sp, #28]
 801432c:	1af3      	subs	r3, r6, r3
 801432e:	2f00      	cmp	r7, #0
 8014330:	bf08      	it	eq
 8014332:	462f      	moveq	r7, r5
 8014334:	2d10      	cmp	r5, #16
 8014336:	9306      	str	r3, [sp, #24]
 8014338:	46a8      	mov	r8, r5
 801433a:	bfa8      	it	ge
 801433c:	f04f 0810 	movge.w	r8, #16
 8014340:	f7ec f900 	bl	8000544 <__aeabi_ui2d>
 8014344:	2d09      	cmp	r5, #9
 8014346:	4682      	mov	sl, r0
 8014348:	468b      	mov	fp, r1
 801434a:	dd13      	ble.n	8014374 <_strtod_l+0x3dc>
 801434c:	4b7b      	ldr	r3, [pc, #492]	; (801453c <_strtod_l+0x5a4>)
 801434e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014352:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014356:	f7ec f96f 	bl	8000638 <__aeabi_dmul>
 801435a:	4682      	mov	sl, r0
 801435c:	4648      	mov	r0, r9
 801435e:	468b      	mov	fp, r1
 8014360:	f7ec f8f0 	bl	8000544 <__aeabi_ui2d>
 8014364:	4602      	mov	r2, r0
 8014366:	460b      	mov	r3, r1
 8014368:	4650      	mov	r0, sl
 801436a:	4659      	mov	r1, fp
 801436c:	f7eb ffae 	bl	80002cc <__adddf3>
 8014370:	4682      	mov	sl, r0
 8014372:	468b      	mov	fp, r1
 8014374:	2d0f      	cmp	r5, #15
 8014376:	dc38      	bgt.n	80143ea <_strtod_l+0x452>
 8014378:	9b06      	ldr	r3, [sp, #24]
 801437a:	2b00      	cmp	r3, #0
 801437c:	f43f ae50 	beq.w	8014020 <_strtod_l+0x88>
 8014380:	dd24      	ble.n	80143cc <_strtod_l+0x434>
 8014382:	2b16      	cmp	r3, #22
 8014384:	dc0b      	bgt.n	801439e <_strtod_l+0x406>
 8014386:	496d      	ldr	r1, [pc, #436]	; (801453c <_strtod_l+0x5a4>)
 8014388:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801438c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014390:	4652      	mov	r2, sl
 8014392:	465b      	mov	r3, fp
 8014394:	f7ec f950 	bl	8000638 <__aeabi_dmul>
 8014398:	4682      	mov	sl, r0
 801439a:	468b      	mov	fp, r1
 801439c:	e640      	b.n	8014020 <_strtod_l+0x88>
 801439e:	9a06      	ldr	r2, [sp, #24]
 80143a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80143a4:	4293      	cmp	r3, r2
 80143a6:	db20      	blt.n	80143ea <_strtod_l+0x452>
 80143a8:	4c64      	ldr	r4, [pc, #400]	; (801453c <_strtod_l+0x5a4>)
 80143aa:	f1c5 050f 	rsb	r5, r5, #15
 80143ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80143b2:	4652      	mov	r2, sl
 80143b4:	465b      	mov	r3, fp
 80143b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143ba:	f7ec f93d 	bl	8000638 <__aeabi_dmul>
 80143be:	9b06      	ldr	r3, [sp, #24]
 80143c0:	1b5d      	subs	r5, r3, r5
 80143c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80143c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80143ca:	e7e3      	b.n	8014394 <_strtod_l+0x3fc>
 80143cc:	9b06      	ldr	r3, [sp, #24]
 80143ce:	3316      	adds	r3, #22
 80143d0:	db0b      	blt.n	80143ea <_strtod_l+0x452>
 80143d2:	9b05      	ldr	r3, [sp, #20]
 80143d4:	1b9e      	subs	r6, r3, r6
 80143d6:	4b59      	ldr	r3, [pc, #356]	; (801453c <_strtod_l+0x5a4>)
 80143d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80143dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80143e0:	4650      	mov	r0, sl
 80143e2:	4659      	mov	r1, fp
 80143e4:	f7ec fa52 	bl	800088c <__aeabi_ddiv>
 80143e8:	e7d6      	b.n	8014398 <_strtod_l+0x400>
 80143ea:	9b06      	ldr	r3, [sp, #24]
 80143ec:	eba5 0808 	sub.w	r8, r5, r8
 80143f0:	4498      	add	r8, r3
 80143f2:	f1b8 0f00 	cmp.w	r8, #0
 80143f6:	dd74      	ble.n	80144e2 <_strtod_l+0x54a>
 80143f8:	f018 030f 	ands.w	r3, r8, #15
 80143fc:	d00a      	beq.n	8014414 <_strtod_l+0x47c>
 80143fe:	494f      	ldr	r1, [pc, #316]	; (801453c <_strtod_l+0x5a4>)
 8014400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014404:	4652      	mov	r2, sl
 8014406:	465b      	mov	r3, fp
 8014408:	e9d1 0100 	ldrd	r0, r1, [r1]
 801440c:	f7ec f914 	bl	8000638 <__aeabi_dmul>
 8014410:	4682      	mov	sl, r0
 8014412:	468b      	mov	fp, r1
 8014414:	f038 080f 	bics.w	r8, r8, #15
 8014418:	d04f      	beq.n	80144ba <_strtod_l+0x522>
 801441a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801441e:	dd22      	ble.n	8014466 <_strtod_l+0x4ce>
 8014420:	2500      	movs	r5, #0
 8014422:	462e      	mov	r6, r5
 8014424:	9507      	str	r5, [sp, #28]
 8014426:	9505      	str	r5, [sp, #20]
 8014428:	2322      	movs	r3, #34	; 0x22
 801442a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8014544 <_strtod_l+0x5ac>
 801442e:	6023      	str	r3, [r4, #0]
 8014430:	f04f 0a00 	mov.w	sl, #0
 8014434:	9b07      	ldr	r3, [sp, #28]
 8014436:	2b00      	cmp	r3, #0
 8014438:	f43f adf2 	beq.w	8014020 <_strtod_l+0x88>
 801443c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801443e:	4620      	mov	r0, r4
 8014440:	f002 fd48 	bl	8016ed4 <_Bfree>
 8014444:	9905      	ldr	r1, [sp, #20]
 8014446:	4620      	mov	r0, r4
 8014448:	f002 fd44 	bl	8016ed4 <_Bfree>
 801444c:	4631      	mov	r1, r6
 801444e:	4620      	mov	r0, r4
 8014450:	f002 fd40 	bl	8016ed4 <_Bfree>
 8014454:	9907      	ldr	r1, [sp, #28]
 8014456:	4620      	mov	r0, r4
 8014458:	f002 fd3c 	bl	8016ed4 <_Bfree>
 801445c:	4629      	mov	r1, r5
 801445e:	4620      	mov	r0, r4
 8014460:	f002 fd38 	bl	8016ed4 <_Bfree>
 8014464:	e5dc      	b.n	8014020 <_strtod_l+0x88>
 8014466:	4b36      	ldr	r3, [pc, #216]	; (8014540 <_strtod_l+0x5a8>)
 8014468:	9304      	str	r3, [sp, #16]
 801446a:	2300      	movs	r3, #0
 801446c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014470:	4650      	mov	r0, sl
 8014472:	4659      	mov	r1, fp
 8014474:	4699      	mov	r9, r3
 8014476:	f1b8 0f01 	cmp.w	r8, #1
 801447a:	dc21      	bgt.n	80144c0 <_strtod_l+0x528>
 801447c:	b10b      	cbz	r3, 8014482 <_strtod_l+0x4ea>
 801447e:	4682      	mov	sl, r0
 8014480:	468b      	mov	fp, r1
 8014482:	4b2f      	ldr	r3, [pc, #188]	; (8014540 <_strtod_l+0x5a8>)
 8014484:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014488:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801448c:	4652      	mov	r2, sl
 801448e:	465b      	mov	r3, fp
 8014490:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014494:	f7ec f8d0 	bl	8000638 <__aeabi_dmul>
 8014498:	4b2a      	ldr	r3, [pc, #168]	; (8014544 <_strtod_l+0x5ac>)
 801449a:	460a      	mov	r2, r1
 801449c:	400b      	ands	r3, r1
 801449e:	492a      	ldr	r1, [pc, #168]	; (8014548 <_strtod_l+0x5b0>)
 80144a0:	428b      	cmp	r3, r1
 80144a2:	4682      	mov	sl, r0
 80144a4:	d8bc      	bhi.n	8014420 <_strtod_l+0x488>
 80144a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80144aa:	428b      	cmp	r3, r1
 80144ac:	bf86      	itte	hi
 80144ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801454c <_strtod_l+0x5b4>
 80144b2:	f04f 3aff 	movhi.w	sl, #4294967295
 80144b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80144ba:	2300      	movs	r3, #0
 80144bc:	9304      	str	r3, [sp, #16]
 80144be:	e084      	b.n	80145ca <_strtod_l+0x632>
 80144c0:	f018 0f01 	tst.w	r8, #1
 80144c4:	d005      	beq.n	80144d2 <_strtod_l+0x53a>
 80144c6:	9b04      	ldr	r3, [sp, #16]
 80144c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144cc:	f7ec f8b4 	bl	8000638 <__aeabi_dmul>
 80144d0:	2301      	movs	r3, #1
 80144d2:	9a04      	ldr	r2, [sp, #16]
 80144d4:	3208      	adds	r2, #8
 80144d6:	f109 0901 	add.w	r9, r9, #1
 80144da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80144de:	9204      	str	r2, [sp, #16]
 80144e0:	e7c9      	b.n	8014476 <_strtod_l+0x4de>
 80144e2:	d0ea      	beq.n	80144ba <_strtod_l+0x522>
 80144e4:	f1c8 0800 	rsb	r8, r8, #0
 80144e8:	f018 020f 	ands.w	r2, r8, #15
 80144ec:	d00a      	beq.n	8014504 <_strtod_l+0x56c>
 80144ee:	4b13      	ldr	r3, [pc, #76]	; (801453c <_strtod_l+0x5a4>)
 80144f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80144f4:	4650      	mov	r0, sl
 80144f6:	4659      	mov	r1, fp
 80144f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144fc:	f7ec f9c6 	bl	800088c <__aeabi_ddiv>
 8014500:	4682      	mov	sl, r0
 8014502:	468b      	mov	fp, r1
 8014504:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014508:	d0d7      	beq.n	80144ba <_strtod_l+0x522>
 801450a:	f1b8 0f1f 	cmp.w	r8, #31
 801450e:	dd1f      	ble.n	8014550 <_strtod_l+0x5b8>
 8014510:	2500      	movs	r5, #0
 8014512:	462e      	mov	r6, r5
 8014514:	9507      	str	r5, [sp, #28]
 8014516:	9505      	str	r5, [sp, #20]
 8014518:	2322      	movs	r3, #34	; 0x22
 801451a:	f04f 0a00 	mov.w	sl, #0
 801451e:	f04f 0b00 	mov.w	fp, #0
 8014522:	6023      	str	r3, [r4, #0]
 8014524:	e786      	b.n	8014434 <_strtod_l+0x49c>
 8014526:	bf00      	nop
 8014528:	080496b6 	.word	0x080496b6
 801452c:	0804961c 	.word	0x0804961c
 8014530:	08049582 	.word	0x08049582
 8014534:	08049a1c 	.word	0x08049a1c
 8014538:	08049492 	.word	0x08049492
 801453c:	08049c58 	.word	0x08049c58
 8014540:	08049c30 	.word	0x08049c30
 8014544:	7ff00000 	.word	0x7ff00000
 8014548:	7ca00000 	.word	0x7ca00000
 801454c:	7fefffff 	.word	0x7fefffff
 8014550:	f018 0310 	ands.w	r3, r8, #16
 8014554:	bf18      	it	ne
 8014556:	236a      	movne	r3, #106	; 0x6a
 8014558:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8014908 <_strtod_l+0x970>
 801455c:	9304      	str	r3, [sp, #16]
 801455e:	4650      	mov	r0, sl
 8014560:	4659      	mov	r1, fp
 8014562:	2300      	movs	r3, #0
 8014564:	f018 0f01 	tst.w	r8, #1
 8014568:	d004      	beq.n	8014574 <_strtod_l+0x5dc>
 801456a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801456e:	f7ec f863 	bl	8000638 <__aeabi_dmul>
 8014572:	2301      	movs	r3, #1
 8014574:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014578:	f109 0908 	add.w	r9, r9, #8
 801457c:	d1f2      	bne.n	8014564 <_strtod_l+0x5cc>
 801457e:	b10b      	cbz	r3, 8014584 <_strtod_l+0x5ec>
 8014580:	4682      	mov	sl, r0
 8014582:	468b      	mov	fp, r1
 8014584:	9b04      	ldr	r3, [sp, #16]
 8014586:	b1c3      	cbz	r3, 80145ba <_strtod_l+0x622>
 8014588:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801458c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014590:	2b00      	cmp	r3, #0
 8014592:	4659      	mov	r1, fp
 8014594:	dd11      	ble.n	80145ba <_strtod_l+0x622>
 8014596:	2b1f      	cmp	r3, #31
 8014598:	f340 8124 	ble.w	80147e4 <_strtod_l+0x84c>
 801459c:	2b34      	cmp	r3, #52	; 0x34
 801459e:	bfde      	ittt	le
 80145a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80145a4:	f04f 33ff 	movle.w	r3, #4294967295
 80145a8:	fa03 f202 	lslle.w	r2, r3, r2
 80145ac:	f04f 0a00 	mov.w	sl, #0
 80145b0:	bfcc      	ite	gt
 80145b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80145b6:	ea02 0b01 	andle.w	fp, r2, r1
 80145ba:	2200      	movs	r2, #0
 80145bc:	2300      	movs	r3, #0
 80145be:	4650      	mov	r0, sl
 80145c0:	4659      	mov	r1, fp
 80145c2:	f7ec faa1 	bl	8000b08 <__aeabi_dcmpeq>
 80145c6:	2800      	cmp	r0, #0
 80145c8:	d1a2      	bne.n	8014510 <_strtod_l+0x578>
 80145ca:	9b07      	ldr	r3, [sp, #28]
 80145cc:	9300      	str	r3, [sp, #0]
 80145ce:	9908      	ldr	r1, [sp, #32]
 80145d0:	462b      	mov	r3, r5
 80145d2:	463a      	mov	r2, r7
 80145d4:	4620      	mov	r0, r4
 80145d6:	f002 fce5 	bl	8016fa4 <__s2b>
 80145da:	9007      	str	r0, [sp, #28]
 80145dc:	2800      	cmp	r0, #0
 80145de:	f43f af1f 	beq.w	8014420 <_strtod_l+0x488>
 80145e2:	9b05      	ldr	r3, [sp, #20]
 80145e4:	1b9e      	subs	r6, r3, r6
 80145e6:	9b06      	ldr	r3, [sp, #24]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	bfb4      	ite	lt
 80145ec:	4633      	movlt	r3, r6
 80145ee:	2300      	movge	r3, #0
 80145f0:	930c      	str	r3, [sp, #48]	; 0x30
 80145f2:	9b06      	ldr	r3, [sp, #24]
 80145f4:	2500      	movs	r5, #0
 80145f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80145fa:	9312      	str	r3, [sp, #72]	; 0x48
 80145fc:	462e      	mov	r6, r5
 80145fe:	9b07      	ldr	r3, [sp, #28]
 8014600:	4620      	mov	r0, r4
 8014602:	6859      	ldr	r1, [r3, #4]
 8014604:	f002 fc26 	bl	8016e54 <_Balloc>
 8014608:	9005      	str	r0, [sp, #20]
 801460a:	2800      	cmp	r0, #0
 801460c:	f43f af0c 	beq.w	8014428 <_strtod_l+0x490>
 8014610:	9b07      	ldr	r3, [sp, #28]
 8014612:	691a      	ldr	r2, [r3, #16]
 8014614:	3202      	adds	r2, #2
 8014616:	f103 010c 	add.w	r1, r3, #12
 801461a:	0092      	lsls	r2, r2, #2
 801461c:	300c      	adds	r0, #12
 801461e:	f7fd fd4b 	bl	80120b8 <memcpy>
 8014622:	ec4b ab10 	vmov	d0, sl, fp
 8014626:	aa1a      	add	r2, sp, #104	; 0x68
 8014628:	a919      	add	r1, sp, #100	; 0x64
 801462a:	4620      	mov	r0, r4
 801462c:	f003 f800 	bl	8017630 <__d2b>
 8014630:	ec4b ab18 	vmov	d8, sl, fp
 8014634:	9018      	str	r0, [sp, #96]	; 0x60
 8014636:	2800      	cmp	r0, #0
 8014638:	f43f aef6 	beq.w	8014428 <_strtod_l+0x490>
 801463c:	2101      	movs	r1, #1
 801463e:	4620      	mov	r0, r4
 8014640:	f002 fd4a 	bl	80170d8 <__i2b>
 8014644:	4606      	mov	r6, r0
 8014646:	2800      	cmp	r0, #0
 8014648:	f43f aeee 	beq.w	8014428 <_strtod_l+0x490>
 801464c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801464e:	9904      	ldr	r1, [sp, #16]
 8014650:	2b00      	cmp	r3, #0
 8014652:	bfab      	itete	ge
 8014654:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8014656:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8014658:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801465a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801465e:	bfac      	ite	ge
 8014660:	eb03 0902 	addge.w	r9, r3, r2
 8014664:	1ad7      	sublt	r7, r2, r3
 8014666:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014668:	eba3 0801 	sub.w	r8, r3, r1
 801466c:	4490      	add	r8, r2
 801466e:	4ba1      	ldr	r3, [pc, #644]	; (80148f4 <_strtod_l+0x95c>)
 8014670:	f108 38ff 	add.w	r8, r8, #4294967295
 8014674:	4598      	cmp	r8, r3
 8014676:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801467a:	f280 80c7 	bge.w	801480c <_strtod_l+0x874>
 801467e:	eba3 0308 	sub.w	r3, r3, r8
 8014682:	2b1f      	cmp	r3, #31
 8014684:	eba2 0203 	sub.w	r2, r2, r3
 8014688:	f04f 0101 	mov.w	r1, #1
 801468c:	f300 80b1 	bgt.w	80147f2 <_strtod_l+0x85a>
 8014690:	fa01 f303 	lsl.w	r3, r1, r3
 8014694:	930d      	str	r3, [sp, #52]	; 0x34
 8014696:	2300      	movs	r3, #0
 8014698:	9308      	str	r3, [sp, #32]
 801469a:	eb09 0802 	add.w	r8, r9, r2
 801469e:	9b04      	ldr	r3, [sp, #16]
 80146a0:	45c1      	cmp	r9, r8
 80146a2:	4417      	add	r7, r2
 80146a4:	441f      	add	r7, r3
 80146a6:	464b      	mov	r3, r9
 80146a8:	bfa8      	it	ge
 80146aa:	4643      	movge	r3, r8
 80146ac:	42bb      	cmp	r3, r7
 80146ae:	bfa8      	it	ge
 80146b0:	463b      	movge	r3, r7
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	bfc2      	ittt	gt
 80146b6:	eba8 0803 	subgt.w	r8, r8, r3
 80146ba:	1aff      	subgt	r7, r7, r3
 80146bc:	eba9 0903 	subgt.w	r9, r9, r3
 80146c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	dd17      	ble.n	80146f6 <_strtod_l+0x75e>
 80146c6:	4631      	mov	r1, r6
 80146c8:	461a      	mov	r2, r3
 80146ca:	4620      	mov	r0, r4
 80146cc:	f002 fdc4 	bl	8017258 <__pow5mult>
 80146d0:	4606      	mov	r6, r0
 80146d2:	2800      	cmp	r0, #0
 80146d4:	f43f aea8 	beq.w	8014428 <_strtod_l+0x490>
 80146d8:	4601      	mov	r1, r0
 80146da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80146dc:	4620      	mov	r0, r4
 80146de:	f002 fd11 	bl	8017104 <__multiply>
 80146e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80146e4:	2800      	cmp	r0, #0
 80146e6:	f43f ae9f 	beq.w	8014428 <_strtod_l+0x490>
 80146ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80146ec:	4620      	mov	r0, r4
 80146ee:	f002 fbf1 	bl	8016ed4 <_Bfree>
 80146f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146f4:	9318      	str	r3, [sp, #96]	; 0x60
 80146f6:	f1b8 0f00 	cmp.w	r8, #0
 80146fa:	f300 808c 	bgt.w	8014816 <_strtod_l+0x87e>
 80146fe:	9b06      	ldr	r3, [sp, #24]
 8014700:	2b00      	cmp	r3, #0
 8014702:	dd08      	ble.n	8014716 <_strtod_l+0x77e>
 8014704:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014706:	9905      	ldr	r1, [sp, #20]
 8014708:	4620      	mov	r0, r4
 801470a:	f002 fda5 	bl	8017258 <__pow5mult>
 801470e:	9005      	str	r0, [sp, #20]
 8014710:	2800      	cmp	r0, #0
 8014712:	f43f ae89 	beq.w	8014428 <_strtod_l+0x490>
 8014716:	2f00      	cmp	r7, #0
 8014718:	dd08      	ble.n	801472c <_strtod_l+0x794>
 801471a:	9905      	ldr	r1, [sp, #20]
 801471c:	463a      	mov	r2, r7
 801471e:	4620      	mov	r0, r4
 8014720:	f002 fdf4 	bl	801730c <__lshift>
 8014724:	9005      	str	r0, [sp, #20]
 8014726:	2800      	cmp	r0, #0
 8014728:	f43f ae7e 	beq.w	8014428 <_strtod_l+0x490>
 801472c:	f1b9 0f00 	cmp.w	r9, #0
 8014730:	dd08      	ble.n	8014744 <_strtod_l+0x7ac>
 8014732:	4631      	mov	r1, r6
 8014734:	464a      	mov	r2, r9
 8014736:	4620      	mov	r0, r4
 8014738:	f002 fde8 	bl	801730c <__lshift>
 801473c:	4606      	mov	r6, r0
 801473e:	2800      	cmp	r0, #0
 8014740:	f43f ae72 	beq.w	8014428 <_strtod_l+0x490>
 8014744:	9a05      	ldr	r2, [sp, #20]
 8014746:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014748:	4620      	mov	r0, r4
 801474a:	f002 fe6b 	bl	8017424 <__mdiff>
 801474e:	4605      	mov	r5, r0
 8014750:	2800      	cmp	r0, #0
 8014752:	f43f ae69 	beq.w	8014428 <_strtod_l+0x490>
 8014756:	68c3      	ldr	r3, [r0, #12]
 8014758:	930b      	str	r3, [sp, #44]	; 0x2c
 801475a:	2300      	movs	r3, #0
 801475c:	60c3      	str	r3, [r0, #12]
 801475e:	4631      	mov	r1, r6
 8014760:	f002 fe44 	bl	80173ec <__mcmp>
 8014764:	2800      	cmp	r0, #0
 8014766:	da60      	bge.n	801482a <_strtod_l+0x892>
 8014768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801476a:	ea53 030a 	orrs.w	r3, r3, sl
 801476e:	f040 8082 	bne.w	8014876 <_strtod_l+0x8de>
 8014772:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014776:	2b00      	cmp	r3, #0
 8014778:	d17d      	bne.n	8014876 <_strtod_l+0x8de>
 801477a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801477e:	0d1b      	lsrs	r3, r3, #20
 8014780:	051b      	lsls	r3, r3, #20
 8014782:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014786:	d976      	bls.n	8014876 <_strtod_l+0x8de>
 8014788:	696b      	ldr	r3, [r5, #20]
 801478a:	b913      	cbnz	r3, 8014792 <_strtod_l+0x7fa>
 801478c:	692b      	ldr	r3, [r5, #16]
 801478e:	2b01      	cmp	r3, #1
 8014790:	dd71      	ble.n	8014876 <_strtod_l+0x8de>
 8014792:	4629      	mov	r1, r5
 8014794:	2201      	movs	r2, #1
 8014796:	4620      	mov	r0, r4
 8014798:	f002 fdb8 	bl	801730c <__lshift>
 801479c:	4631      	mov	r1, r6
 801479e:	4605      	mov	r5, r0
 80147a0:	f002 fe24 	bl	80173ec <__mcmp>
 80147a4:	2800      	cmp	r0, #0
 80147a6:	dd66      	ble.n	8014876 <_strtod_l+0x8de>
 80147a8:	9904      	ldr	r1, [sp, #16]
 80147aa:	4a53      	ldr	r2, [pc, #332]	; (80148f8 <_strtod_l+0x960>)
 80147ac:	465b      	mov	r3, fp
 80147ae:	2900      	cmp	r1, #0
 80147b0:	f000 8081 	beq.w	80148b6 <_strtod_l+0x91e>
 80147b4:	ea02 010b 	and.w	r1, r2, fp
 80147b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80147bc:	dc7b      	bgt.n	80148b6 <_strtod_l+0x91e>
 80147be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80147c2:	f77f aea9 	ble.w	8014518 <_strtod_l+0x580>
 80147c6:	4b4d      	ldr	r3, [pc, #308]	; (80148fc <_strtod_l+0x964>)
 80147c8:	4650      	mov	r0, sl
 80147ca:	4659      	mov	r1, fp
 80147cc:	2200      	movs	r2, #0
 80147ce:	f7eb ff33 	bl	8000638 <__aeabi_dmul>
 80147d2:	460b      	mov	r3, r1
 80147d4:	4303      	orrs	r3, r0
 80147d6:	bf08      	it	eq
 80147d8:	2322      	moveq	r3, #34	; 0x22
 80147da:	4682      	mov	sl, r0
 80147dc:	468b      	mov	fp, r1
 80147de:	bf08      	it	eq
 80147e0:	6023      	streq	r3, [r4, #0]
 80147e2:	e62b      	b.n	801443c <_strtod_l+0x4a4>
 80147e4:	f04f 32ff 	mov.w	r2, #4294967295
 80147e8:	fa02 f303 	lsl.w	r3, r2, r3
 80147ec:	ea03 0a0a 	and.w	sl, r3, sl
 80147f0:	e6e3      	b.n	80145ba <_strtod_l+0x622>
 80147f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80147f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80147fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80147fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014802:	fa01 f308 	lsl.w	r3, r1, r8
 8014806:	9308      	str	r3, [sp, #32]
 8014808:	910d      	str	r1, [sp, #52]	; 0x34
 801480a:	e746      	b.n	801469a <_strtod_l+0x702>
 801480c:	2300      	movs	r3, #0
 801480e:	9308      	str	r3, [sp, #32]
 8014810:	2301      	movs	r3, #1
 8014812:	930d      	str	r3, [sp, #52]	; 0x34
 8014814:	e741      	b.n	801469a <_strtod_l+0x702>
 8014816:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014818:	4642      	mov	r2, r8
 801481a:	4620      	mov	r0, r4
 801481c:	f002 fd76 	bl	801730c <__lshift>
 8014820:	9018      	str	r0, [sp, #96]	; 0x60
 8014822:	2800      	cmp	r0, #0
 8014824:	f47f af6b 	bne.w	80146fe <_strtod_l+0x766>
 8014828:	e5fe      	b.n	8014428 <_strtod_l+0x490>
 801482a:	465f      	mov	r7, fp
 801482c:	d16e      	bne.n	801490c <_strtod_l+0x974>
 801482e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014830:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014834:	b342      	cbz	r2, 8014888 <_strtod_l+0x8f0>
 8014836:	4a32      	ldr	r2, [pc, #200]	; (8014900 <_strtod_l+0x968>)
 8014838:	4293      	cmp	r3, r2
 801483a:	d128      	bne.n	801488e <_strtod_l+0x8f6>
 801483c:	9b04      	ldr	r3, [sp, #16]
 801483e:	4651      	mov	r1, sl
 8014840:	b1eb      	cbz	r3, 801487e <_strtod_l+0x8e6>
 8014842:	4b2d      	ldr	r3, [pc, #180]	; (80148f8 <_strtod_l+0x960>)
 8014844:	403b      	ands	r3, r7
 8014846:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801484a:	f04f 32ff 	mov.w	r2, #4294967295
 801484e:	d819      	bhi.n	8014884 <_strtod_l+0x8ec>
 8014850:	0d1b      	lsrs	r3, r3, #20
 8014852:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014856:	fa02 f303 	lsl.w	r3, r2, r3
 801485a:	4299      	cmp	r1, r3
 801485c:	d117      	bne.n	801488e <_strtod_l+0x8f6>
 801485e:	4b29      	ldr	r3, [pc, #164]	; (8014904 <_strtod_l+0x96c>)
 8014860:	429f      	cmp	r7, r3
 8014862:	d102      	bne.n	801486a <_strtod_l+0x8d2>
 8014864:	3101      	adds	r1, #1
 8014866:	f43f addf 	beq.w	8014428 <_strtod_l+0x490>
 801486a:	4b23      	ldr	r3, [pc, #140]	; (80148f8 <_strtod_l+0x960>)
 801486c:	403b      	ands	r3, r7
 801486e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014872:	f04f 0a00 	mov.w	sl, #0
 8014876:	9b04      	ldr	r3, [sp, #16]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d1a4      	bne.n	80147c6 <_strtod_l+0x82e>
 801487c:	e5de      	b.n	801443c <_strtod_l+0x4a4>
 801487e:	f04f 33ff 	mov.w	r3, #4294967295
 8014882:	e7ea      	b.n	801485a <_strtod_l+0x8c2>
 8014884:	4613      	mov	r3, r2
 8014886:	e7e8      	b.n	801485a <_strtod_l+0x8c2>
 8014888:	ea53 030a 	orrs.w	r3, r3, sl
 801488c:	d08c      	beq.n	80147a8 <_strtod_l+0x810>
 801488e:	9b08      	ldr	r3, [sp, #32]
 8014890:	b1db      	cbz	r3, 80148ca <_strtod_l+0x932>
 8014892:	423b      	tst	r3, r7
 8014894:	d0ef      	beq.n	8014876 <_strtod_l+0x8de>
 8014896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014898:	9a04      	ldr	r2, [sp, #16]
 801489a:	4650      	mov	r0, sl
 801489c:	4659      	mov	r1, fp
 801489e:	b1c3      	cbz	r3, 80148d2 <_strtod_l+0x93a>
 80148a0:	f7ff fb5d 	bl	8013f5e <sulp>
 80148a4:	4602      	mov	r2, r0
 80148a6:	460b      	mov	r3, r1
 80148a8:	ec51 0b18 	vmov	r0, r1, d8
 80148ac:	f7eb fd0e 	bl	80002cc <__adddf3>
 80148b0:	4682      	mov	sl, r0
 80148b2:	468b      	mov	fp, r1
 80148b4:	e7df      	b.n	8014876 <_strtod_l+0x8de>
 80148b6:	4013      	ands	r3, r2
 80148b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80148bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80148c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80148c4:	f04f 3aff 	mov.w	sl, #4294967295
 80148c8:	e7d5      	b.n	8014876 <_strtod_l+0x8de>
 80148ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148cc:	ea13 0f0a 	tst.w	r3, sl
 80148d0:	e7e0      	b.n	8014894 <_strtod_l+0x8fc>
 80148d2:	f7ff fb44 	bl	8013f5e <sulp>
 80148d6:	4602      	mov	r2, r0
 80148d8:	460b      	mov	r3, r1
 80148da:	ec51 0b18 	vmov	r0, r1, d8
 80148de:	f7eb fcf3 	bl	80002c8 <__aeabi_dsub>
 80148e2:	2200      	movs	r2, #0
 80148e4:	2300      	movs	r3, #0
 80148e6:	4682      	mov	sl, r0
 80148e8:	468b      	mov	fp, r1
 80148ea:	f7ec f90d 	bl	8000b08 <__aeabi_dcmpeq>
 80148ee:	2800      	cmp	r0, #0
 80148f0:	d0c1      	beq.n	8014876 <_strtod_l+0x8de>
 80148f2:	e611      	b.n	8014518 <_strtod_l+0x580>
 80148f4:	fffffc02 	.word	0xfffffc02
 80148f8:	7ff00000 	.word	0x7ff00000
 80148fc:	39500000 	.word	0x39500000
 8014900:	000fffff 	.word	0x000fffff
 8014904:	7fefffff 	.word	0x7fefffff
 8014908:	08049630 	.word	0x08049630
 801490c:	4631      	mov	r1, r6
 801490e:	4628      	mov	r0, r5
 8014910:	f002 feea 	bl	80176e8 <__ratio>
 8014914:	ec59 8b10 	vmov	r8, r9, d0
 8014918:	ee10 0a10 	vmov	r0, s0
 801491c:	2200      	movs	r2, #0
 801491e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014922:	4649      	mov	r1, r9
 8014924:	f7ec f904 	bl	8000b30 <__aeabi_dcmple>
 8014928:	2800      	cmp	r0, #0
 801492a:	d07a      	beq.n	8014a22 <_strtod_l+0xa8a>
 801492c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801492e:	2b00      	cmp	r3, #0
 8014930:	d04a      	beq.n	80149c8 <_strtod_l+0xa30>
 8014932:	4b95      	ldr	r3, [pc, #596]	; (8014b88 <_strtod_l+0xbf0>)
 8014934:	2200      	movs	r2, #0
 8014936:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801493a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014b88 <_strtod_l+0xbf0>
 801493e:	f04f 0800 	mov.w	r8, #0
 8014942:	4b92      	ldr	r3, [pc, #584]	; (8014b8c <_strtod_l+0xbf4>)
 8014944:	403b      	ands	r3, r7
 8014946:	930d      	str	r3, [sp, #52]	; 0x34
 8014948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801494a:	4b91      	ldr	r3, [pc, #580]	; (8014b90 <_strtod_l+0xbf8>)
 801494c:	429a      	cmp	r2, r3
 801494e:	f040 80b0 	bne.w	8014ab2 <_strtod_l+0xb1a>
 8014952:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014956:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801495a:	ec4b ab10 	vmov	d0, sl, fp
 801495e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014962:	f002 fde9 	bl	8017538 <__ulp>
 8014966:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801496a:	ec53 2b10 	vmov	r2, r3, d0
 801496e:	f7eb fe63 	bl	8000638 <__aeabi_dmul>
 8014972:	4652      	mov	r2, sl
 8014974:	465b      	mov	r3, fp
 8014976:	f7eb fca9 	bl	80002cc <__adddf3>
 801497a:	460b      	mov	r3, r1
 801497c:	4983      	ldr	r1, [pc, #524]	; (8014b8c <_strtod_l+0xbf4>)
 801497e:	4a85      	ldr	r2, [pc, #532]	; (8014b94 <_strtod_l+0xbfc>)
 8014980:	4019      	ands	r1, r3
 8014982:	4291      	cmp	r1, r2
 8014984:	4682      	mov	sl, r0
 8014986:	d960      	bls.n	8014a4a <_strtod_l+0xab2>
 8014988:	ee18 3a90 	vmov	r3, s17
 801498c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014990:	4293      	cmp	r3, r2
 8014992:	d104      	bne.n	801499e <_strtod_l+0xa06>
 8014994:	ee18 3a10 	vmov	r3, s16
 8014998:	3301      	adds	r3, #1
 801499a:	f43f ad45 	beq.w	8014428 <_strtod_l+0x490>
 801499e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014ba0 <_strtod_l+0xc08>
 80149a2:	f04f 3aff 	mov.w	sl, #4294967295
 80149a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80149a8:	4620      	mov	r0, r4
 80149aa:	f002 fa93 	bl	8016ed4 <_Bfree>
 80149ae:	9905      	ldr	r1, [sp, #20]
 80149b0:	4620      	mov	r0, r4
 80149b2:	f002 fa8f 	bl	8016ed4 <_Bfree>
 80149b6:	4631      	mov	r1, r6
 80149b8:	4620      	mov	r0, r4
 80149ba:	f002 fa8b 	bl	8016ed4 <_Bfree>
 80149be:	4629      	mov	r1, r5
 80149c0:	4620      	mov	r0, r4
 80149c2:	f002 fa87 	bl	8016ed4 <_Bfree>
 80149c6:	e61a      	b.n	80145fe <_strtod_l+0x666>
 80149c8:	f1ba 0f00 	cmp.w	sl, #0
 80149cc:	d11b      	bne.n	8014a06 <_strtod_l+0xa6e>
 80149ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80149d2:	b9f3      	cbnz	r3, 8014a12 <_strtod_l+0xa7a>
 80149d4:	4b6c      	ldr	r3, [pc, #432]	; (8014b88 <_strtod_l+0xbf0>)
 80149d6:	2200      	movs	r2, #0
 80149d8:	4640      	mov	r0, r8
 80149da:	4649      	mov	r1, r9
 80149dc:	f7ec f89e 	bl	8000b1c <__aeabi_dcmplt>
 80149e0:	b9d0      	cbnz	r0, 8014a18 <_strtod_l+0xa80>
 80149e2:	4640      	mov	r0, r8
 80149e4:	4649      	mov	r1, r9
 80149e6:	4b6c      	ldr	r3, [pc, #432]	; (8014b98 <_strtod_l+0xc00>)
 80149e8:	2200      	movs	r2, #0
 80149ea:	f7eb fe25 	bl	8000638 <__aeabi_dmul>
 80149ee:	4680      	mov	r8, r0
 80149f0:	4689      	mov	r9, r1
 80149f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80149f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80149fa:	9315      	str	r3, [sp, #84]	; 0x54
 80149fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014a00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014a04:	e79d      	b.n	8014942 <_strtod_l+0x9aa>
 8014a06:	f1ba 0f01 	cmp.w	sl, #1
 8014a0a:	d102      	bne.n	8014a12 <_strtod_l+0xa7a>
 8014a0c:	2f00      	cmp	r7, #0
 8014a0e:	f43f ad83 	beq.w	8014518 <_strtod_l+0x580>
 8014a12:	4b62      	ldr	r3, [pc, #392]	; (8014b9c <_strtod_l+0xc04>)
 8014a14:	2200      	movs	r2, #0
 8014a16:	e78e      	b.n	8014936 <_strtod_l+0x99e>
 8014a18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014b98 <_strtod_l+0xc00>
 8014a1c:	f04f 0800 	mov.w	r8, #0
 8014a20:	e7e7      	b.n	80149f2 <_strtod_l+0xa5a>
 8014a22:	4b5d      	ldr	r3, [pc, #372]	; (8014b98 <_strtod_l+0xc00>)
 8014a24:	4640      	mov	r0, r8
 8014a26:	4649      	mov	r1, r9
 8014a28:	2200      	movs	r2, #0
 8014a2a:	f7eb fe05 	bl	8000638 <__aeabi_dmul>
 8014a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a30:	4680      	mov	r8, r0
 8014a32:	4689      	mov	r9, r1
 8014a34:	b933      	cbnz	r3, 8014a44 <_strtod_l+0xaac>
 8014a36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014a3a:	900e      	str	r0, [sp, #56]	; 0x38
 8014a3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014a42:	e7dd      	b.n	8014a00 <_strtod_l+0xa68>
 8014a44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8014a48:	e7f9      	b.n	8014a3e <_strtod_l+0xaa6>
 8014a4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014a4e:	9b04      	ldr	r3, [sp, #16]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d1a8      	bne.n	80149a6 <_strtod_l+0xa0e>
 8014a54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014a58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014a5a:	0d1b      	lsrs	r3, r3, #20
 8014a5c:	051b      	lsls	r3, r3, #20
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	d1a1      	bne.n	80149a6 <_strtod_l+0xa0e>
 8014a62:	4640      	mov	r0, r8
 8014a64:	4649      	mov	r1, r9
 8014a66:	f7ec f947 	bl	8000cf8 <__aeabi_d2lz>
 8014a6a:	f7eb fdb7 	bl	80005dc <__aeabi_l2d>
 8014a6e:	4602      	mov	r2, r0
 8014a70:	460b      	mov	r3, r1
 8014a72:	4640      	mov	r0, r8
 8014a74:	4649      	mov	r1, r9
 8014a76:	f7eb fc27 	bl	80002c8 <__aeabi_dsub>
 8014a7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014a80:	ea43 030a 	orr.w	r3, r3, sl
 8014a84:	4313      	orrs	r3, r2
 8014a86:	4680      	mov	r8, r0
 8014a88:	4689      	mov	r9, r1
 8014a8a:	d055      	beq.n	8014b38 <_strtod_l+0xba0>
 8014a8c:	a336      	add	r3, pc, #216	; (adr r3, 8014b68 <_strtod_l+0xbd0>)
 8014a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a92:	f7ec f843 	bl	8000b1c <__aeabi_dcmplt>
 8014a96:	2800      	cmp	r0, #0
 8014a98:	f47f acd0 	bne.w	801443c <_strtod_l+0x4a4>
 8014a9c:	a334      	add	r3, pc, #208	; (adr r3, 8014b70 <_strtod_l+0xbd8>)
 8014a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa2:	4640      	mov	r0, r8
 8014aa4:	4649      	mov	r1, r9
 8014aa6:	f7ec f857 	bl	8000b58 <__aeabi_dcmpgt>
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	f43f af7b 	beq.w	80149a6 <_strtod_l+0xa0e>
 8014ab0:	e4c4      	b.n	801443c <_strtod_l+0x4a4>
 8014ab2:	9b04      	ldr	r3, [sp, #16]
 8014ab4:	b333      	cbz	r3, 8014b04 <_strtod_l+0xb6c>
 8014ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ab8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014abc:	d822      	bhi.n	8014b04 <_strtod_l+0xb6c>
 8014abe:	a32e      	add	r3, pc, #184	; (adr r3, 8014b78 <_strtod_l+0xbe0>)
 8014ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac4:	4640      	mov	r0, r8
 8014ac6:	4649      	mov	r1, r9
 8014ac8:	f7ec f832 	bl	8000b30 <__aeabi_dcmple>
 8014acc:	b1a0      	cbz	r0, 8014af8 <_strtod_l+0xb60>
 8014ace:	4649      	mov	r1, r9
 8014ad0:	4640      	mov	r0, r8
 8014ad2:	f7ec f889 	bl	8000be8 <__aeabi_d2uiz>
 8014ad6:	2801      	cmp	r0, #1
 8014ad8:	bf38      	it	cc
 8014ada:	2001      	movcc	r0, #1
 8014adc:	f7eb fd32 	bl	8000544 <__aeabi_ui2d>
 8014ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ae2:	4680      	mov	r8, r0
 8014ae4:	4689      	mov	r9, r1
 8014ae6:	bb23      	cbnz	r3, 8014b32 <_strtod_l+0xb9a>
 8014ae8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014aec:	9010      	str	r0, [sp, #64]	; 0x40
 8014aee:	9311      	str	r3, [sp, #68]	; 0x44
 8014af0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014af4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014afa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014afc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014b00:	1a9b      	subs	r3, r3, r2
 8014b02:	9309      	str	r3, [sp, #36]	; 0x24
 8014b04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014b08:	eeb0 0a48 	vmov.f32	s0, s16
 8014b0c:	eef0 0a68 	vmov.f32	s1, s17
 8014b10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014b14:	f002 fd10 	bl	8017538 <__ulp>
 8014b18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014b1c:	ec53 2b10 	vmov	r2, r3, d0
 8014b20:	f7eb fd8a 	bl	8000638 <__aeabi_dmul>
 8014b24:	ec53 2b18 	vmov	r2, r3, d8
 8014b28:	f7eb fbd0 	bl	80002cc <__adddf3>
 8014b2c:	4682      	mov	sl, r0
 8014b2e:	468b      	mov	fp, r1
 8014b30:	e78d      	b.n	8014a4e <_strtod_l+0xab6>
 8014b32:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8014b36:	e7db      	b.n	8014af0 <_strtod_l+0xb58>
 8014b38:	a311      	add	r3, pc, #68	; (adr r3, 8014b80 <_strtod_l+0xbe8>)
 8014b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b3e:	f7eb ffed 	bl	8000b1c <__aeabi_dcmplt>
 8014b42:	e7b2      	b.n	8014aaa <_strtod_l+0xb12>
 8014b44:	2300      	movs	r3, #0
 8014b46:	930a      	str	r3, [sp, #40]	; 0x28
 8014b48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014b4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014b4c:	6013      	str	r3, [r2, #0]
 8014b4e:	f7ff ba6b 	b.w	8014028 <_strtod_l+0x90>
 8014b52:	2a65      	cmp	r2, #101	; 0x65
 8014b54:	f43f ab5f 	beq.w	8014216 <_strtod_l+0x27e>
 8014b58:	2a45      	cmp	r2, #69	; 0x45
 8014b5a:	f43f ab5c 	beq.w	8014216 <_strtod_l+0x27e>
 8014b5e:	2301      	movs	r3, #1
 8014b60:	f7ff bb94 	b.w	801428c <_strtod_l+0x2f4>
 8014b64:	f3af 8000 	nop.w
 8014b68:	94a03595 	.word	0x94a03595
 8014b6c:	3fdfffff 	.word	0x3fdfffff
 8014b70:	35afe535 	.word	0x35afe535
 8014b74:	3fe00000 	.word	0x3fe00000
 8014b78:	ffc00000 	.word	0xffc00000
 8014b7c:	41dfffff 	.word	0x41dfffff
 8014b80:	94a03595 	.word	0x94a03595
 8014b84:	3fcfffff 	.word	0x3fcfffff
 8014b88:	3ff00000 	.word	0x3ff00000
 8014b8c:	7ff00000 	.word	0x7ff00000
 8014b90:	7fe00000 	.word	0x7fe00000
 8014b94:	7c9fffff 	.word	0x7c9fffff
 8014b98:	3fe00000 	.word	0x3fe00000
 8014b9c:	bff00000 	.word	0xbff00000
 8014ba0:	7fefffff 	.word	0x7fefffff

08014ba4 <strtod>:
 8014ba4:	460a      	mov	r2, r1
 8014ba6:	4601      	mov	r1, r0
 8014ba8:	4802      	ldr	r0, [pc, #8]	; (8014bb4 <strtod+0x10>)
 8014baa:	4b03      	ldr	r3, [pc, #12]	; (8014bb8 <strtod+0x14>)
 8014bac:	6800      	ldr	r0, [r0, #0]
 8014bae:	f7ff b9f3 	b.w	8013f98 <_strtod_l>
 8014bb2:	bf00      	nop
 8014bb4:	200002f4 	.word	0x200002f4
 8014bb8:	200003bc 	.word	0x200003bc

08014bbc <strtok>:
 8014bbc:	4b16      	ldr	r3, [pc, #88]	; (8014c18 <strtok+0x5c>)
 8014bbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014bc0:	681e      	ldr	r6, [r3, #0]
 8014bc2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8014bc4:	4605      	mov	r5, r0
 8014bc6:	b9fc      	cbnz	r4, 8014c08 <strtok+0x4c>
 8014bc8:	2050      	movs	r0, #80	; 0x50
 8014bca:	9101      	str	r1, [sp, #4]
 8014bcc:	f7fd fa64 	bl	8012098 <malloc>
 8014bd0:	9901      	ldr	r1, [sp, #4]
 8014bd2:	65b0      	str	r0, [r6, #88]	; 0x58
 8014bd4:	4602      	mov	r2, r0
 8014bd6:	b920      	cbnz	r0, 8014be2 <strtok+0x26>
 8014bd8:	4b10      	ldr	r3, [pc, #64]	; (8014c1c <strtok+0x60>)
 8014bda:	4811      	ldr	r0, [pc, #68]	; (8014c20 <strtok+0x64>)
 8014bdc:	2157      	movs	r1, #87	; 0x57
 8014bde:	f7fd f9f9 	bl	8011fd4 <__assert_func>
 8014be2:	e9c0 4400 	strd	r4, r4, [r0]
 8014be6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014bea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014bee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8014bf2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8014bf6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8014bfa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8014bfe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8014c02:	6184      	str	r4, [r0, #24]
 8014c04:	7704      	strb	r4, [r0, #28]
 8014c06:	6244      	str	r4, [r0, #36]	; 0x24
 8014c08:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	4628      	mov	r0, r5
 8014c0e:	b002      	add	sp, #8
 8014c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c14:	f000 b806 	b.w	8014c24 <__strtok_r>
 8014c18:	200002f4 	.word	0x200002f4
 8014c1c:	08049400 	.word	0x08049400
 8014c20:	08049658 	.word	0x08049658

08014c24 <__strtok_r>:
 8014c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c26:	b908      	cbnz	r0, 8014c2c <__strtok_r+0x8>
 8014c28:	6810      	ldr	r0, [r2, #0]
 8014c2a:	b188      	cbz	r0, 8014c50 <__strtok_r+0x2c>
 8014c2c:	4604      	mov	r4, r0
 8014c2e:	4620      	mov	r0, r4
 8014c30:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014c34:	460f      	mov	r7, r1
 8014c36:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014c3a:	b91e      	cbnz	r6, 8014c44 <__strtok_r+0x20>
 8014c3c:	b965      	cbnz	r5, 8014c58 <__strtok_r+0x34>
 8014c3e:	6015      	str	r5, [r2, #0]
 8014c40:	4628      	mov	r0, r5
 8014c42:	e005      	b.n	8014c50 <__strtok_r+0x2c>
 8014c44:	42b5      	cmp	r5, r6
 8014c46:	d1f6      	bne.n	8014c36 <__strtok_r+0x12>
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d1f0      	bne.n	8014c2e <__strtok_r+0xa>
 8014c4c:	6014      	str	r4, [r2, #0]
 8014c4e:	7003      	strb	r3, [r0, #0]
 8014c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c52:	461c      	mov	r4, r3
 8014c54:	e00c      	b.n	8014c70 <__strtok_r+0x4c>
 8014c56:	b915      	cbnz	r5, 8014c5e <__strtok_r+0x3a>
 8014c58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014c5c:	460e      	mov	r6, r1
 8014c5e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014c62:	42ab      	cmp	r3, r5
 8014c64:	d1f7      	bne.n	8014c56 <__strtok_r+0x32>
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d0f3      	beq.n	8014c52 <__strtok_r+0x2e>
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014c70:	6014      	str	r4, [r2, #0]
 8014c72:	e7ed      	b.n	8014c50 <__strtok_r+0x2c>

08014c74 <_strtol_l.constprop.0>:
 8014c74:	2b01      	cmp	r3, #1
 8014c76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c7a:	d001      	beq.n	8014c80 <_strtol_l.constprop.0+0xc>
 8014c7c:	2b24      	cmp	r3, #36	; 0x24
 8014c7e:	d906      	bls.n	8014c8e <_strtol_l.constprop.0+0x1a>
 8014c80:	f7fd f9ce 	bl	8012020 <__errno>
 8014c84:	2316      	movs	r3, #22
 8014c86:	6003      	str	r3, [r0, #0]
 8014c88:	2000      	movs	r0, #0
 8014c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014d74 <_strtol_l.constprop.0+0x100>
 8014c92:	460d      	mov	r5, r1
 8014c94:	462e      	mov	r6, r5
 8014c96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014c9a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014c9e:	f017 0708 	ands.w	r7, r7, #8
 8014ca2:	d1f7      	bne.n	8014c94 <_strtol_l.constprop.0+0x20>
 8014ca4:	2c2d      	cmp	r4, #45	; 0x2d
 8014ca6:	d132      	bne.n	8014d0e <_strtol_l.constprop.0+0x9a>
 8014ca8:	782c      	ldrb	r4, [r5, #0]
 8014caa:	2701      	movs	r7, #1
 8014cac:	1cb5      	adds	r5, r6, #2
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d05b      	beq.n	8014d6a <_strtol_l.constprop.0+0xf6>
 8014cb2:	2b10      	cmp	r3, #16
 8014cb4:	d109      	bne.n	8014cca <_strtol_l.constprop.0+0x56>
 8014cb6:	2c30      	cmp	r4, #48	; 0x30
 8014cb8:	d107      	bne.n	8014cca <_strtol_l.constprop.0+0x56>
 8014cba:	782c      	ldrb	r4, [r5, #0]
 8014cbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014cc0:	2c58      	cmp	r4, #88	; 0x58
 8014cc2:	d14d      	bne.n	8014d60 <_strtol_l.constprop.0+0xec>
 8014cc4:	786c      	ldrb	r4, [r5, #1]
 8014cc6:	2310      	movs	r3, #16
 8014cc8:	3502      	adds	r5, #2
 8014cca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014cce:	f108 38ff 	add.w	r8, r8, #4294967295
 8014cd2:	f04f 0c00 	mov.w	ip, #0
 8014cd6:	fbb8 f9f3 	udiv	r9, r8, r3
 8014cda:	4666      	mov	r6, ip
 8014cdc:	fb03 8a19 	mls	sl, r3, r9, r8
 8014ce0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014ce4:	f1be 0f09 	cmp.w	lr, #9
 8014ce8:	d816      	bhi.n	8014d18 <_strtol_l.constprop.0+0xa4>
 8014cea:	4674      	mov	r4, lr
 8014cec:	42a3      	cmp	r3, r4
 8014cee:	dd24      	ble.n	8014d3a <_strtol_l.constprop.0+0xc6>
 8014cf0:	f1bc 0f00 	cmp.w	ip, #0
 8014cf4:	db1e      	blt.n	8014d34 <_strtol_l.constprop.0+0xc0>
 8014cf6:	45b1      	cmp	r9, r6
 8014cf8:	d31c      	bcc.n	8014d34 <_strtol_l.constprop.0+0xc0>
 8014cfa:	d101      	bne.n	8014d00 <_strtol_l.constprop.0+0x8c>
 8014cfc:	45a2      	cmp	sl, r4
 8014cfe:	db19      	blt.n	8014d34 <_strtol_l.constprop.0+0xc0>
 8014d00:	fb06 4603 	mla	r6, r6, r3, r4
 8014d04:	f04f 0c01 	mov.w	ip, #1
 8014d08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d0c:	e7e8      	b.n	8014ce0 <_strtol_l.constprop.0+0x6c>
 8014d0e:	2c2b      	cmp	r4, #43	; 0x2b
 8014d10:	bf04      	itt	eq
 8014d12:	782c      	ldrbeq	r4, [r5, #0]
 8014d14:	1cb5      	addeq	r5, r6, #2
 8014d16:	e7ca      	b.n	8014cae <_strtol_l.constprop.0+0x3a>
 8014d18:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014d1c:	f1be 0f19 	cmp.w	lr, #25
 8014d20:	d801      	bhi.n	8014d26 <_strtol_l.constprop.0+0xb2>
 8014d22:	3c37      	subs	r4, #55	; 0x37
 8014d24:	e7e2      	b.n	8014cec <_strtol_l.constprop.0+0x78>
 8014d26:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014d2a:	f1be 0f19 	cmp.w	lr, #25
 8014d2e:	d804      	bhi.n	8014d3a <_strtol_l.constprop.0+0xc6>
 8014d30:	3c57      	subs	r4, #87	; 0x57
 8014d32:	e7db      	b.n	8014cec <_strtol_l.constprop.0+0x78>
 8014d34:	f04f 3cff 	mov.w	ip, #4294967295
 8014d38:	e7e6      	b.n	8014d08 <_strtol_l.constprop.0+0x94>
 8014d3a:	f1bc 0f00 	cmp.w	ip, #0
 8014d3e:	da05      	bge.n	8014d4c <_strtol_l.constprop.0+0xd8>
 8014d40:	2322      	movs	r3, #34	; 0x22
 8014d42:	6003      	str	r3, [r0, #0]
 8014d44:	4646      	mov	r6, r8
 8014d46:	b942      	cbnz	r2, 8014d5a <_strtol_l.constprop.0+0xe6>
 8014d48:	4630      	mov	r0, r6
 8014d4a:	e79e      	b.n	8014c8a <_strtol_l.constprop.0+0x16>
 8014d4c:	b107      	cbz	r7, 8014d50 <_strtol_l.constprop.0+0xdc>
 8014d4e:	4276      	negs	r6, r6
 8014d50:	2a00      	cmp	r2, #0
 8014d52:	d0f9      	beq.n	8014d48 <_strtol_l.constprop.0+0xd4>
 8014d54:	f1bc 0f00 	cmp.w	ip, #0
 8014d58:	d000      	beq.n	8014d5c <_strtol_l.constprop.0+0xe8>
 8014d5a:	1e69      	subs	r1, r5, #1
 8014d5c:	6011      	str	r1, [r2, #0]
 8014d5e:	e7f3      	b.n	8014d48 <_strtol_l.constprop.0+0xd4>
 8014d60:	2430      	movs	r4, #48	; 0x30
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d1b1      	bne.n	8014cca <_strtol_l.constprop.0+0x56>
 8014d66:	2308      	movs	r3, #8
 8014d68:	e7af      	b.n	8014cca <_strtol_l.constprop.0+0x56>
 8014d6a:	2c30      	cmp	r4, #48	; 0x30
 8014d6c:	d0a5      	beq.n	8014cba <_strtol_l.constprop.0+0x46>
 8014d6e:	230a      	movs	r3, #10
 8014d70:	e7ab      	b.n	8014cca <_strtol_l.constprop.0+0x56>
 8014d72:	bf00      	nop
 8014d74:	08049919 	.word	0x08049919

08014d78 <_strtol_r>:
 8014d78:	f7ff bf7c 	b.w	8014c74 <_strtol_l.constprop.0>

08014d7c <strtol>:
 8014d7c:	4613      	mov	r3, r2
 8014d7e:	460a      	mov	r2, r1
 8014d80:	4601      	mov	r1, r0
 8014d82:	4802      	ldr	r0, [pc, #8]	; (8014d8c <strtol+0x10>)
 8014d84:	6800      	ldr	r0, [r0, #0]
 8014d86:	f7ff bf75 	b.w	8014c74 <_strtol_l.constprop.0>
 8014d8a:	bf00      	nop
 8014d8c:	200002f4 	.word	0x200002f4

08014d90 <_strtoul_l.constprop.0>:
 8014d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d94:	4f36      	ldr	r7, [pc, #216]	; (8014e70 <_strtoul_l.constprop.0+0xe0>)
 8014d96:	4686      	mov	lr, r0
 8014d98:	460d      	mov	r5, r1
 8014d9a:	4628      	mov	r0, r5
 8014d9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014da0:	5de6      	ldrb	r6, [r4, r7]
 8014da2:	f016 0608 	ands.w	r6, r6, #8
 8014da6:	d1f8      	bne.n	8014d9a <_strtoul_l.constprop.0+0xa>
 8014da8:	2c2d      	cmp	r4, #45	; 0x2d
 8014daa:	d12f      	bne.n	8014e0c <_strtoul_l.constprop.0+0x7c>
 8014dac:	782c      	ldrb	r4, [r5, #0]
 8014dae:	2601      	movs	r6, #1
 8014db0:	1c85      	adds	r5, r0, #2
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d057      	beq.n	8014e66 <_strtoul_l.constprop.0+0xd6>
 8014db6:	2b10      	cmp	r3, #16
 8014db8:	d109      	bne.n	8014dce <_strtoul_l.constprop.0+0x3e>
 8014dba:	2c30      	cmp	r4, #48	; 0x30
 8014dbc:	d107      	bne.n	8014dce <_strtoul_l.constprop.0+0x3e>
 8014dbe:	7828      	ldrb	r0, [r5, #0]
 8014dc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014dc4:	2858      	cmp	r0, #88	; 0x58
 8014dc6:	d149      	bne.n	8014e5c <_strtoul_l.constprop.0+0xcc>
 8014dc8:	786c      	ldrb	r4, [r5, #1]
 8014dca:	2310      	movs	r3, #16
 8014dcc:	3502      	adds	r5, #2
 8014dce:	f04f 38ff 	mov.w	r8, #4294967295
 8014dd2:	2700      	movs	r7, #0
 8014dd4:	fbb8 f8f3 	udiv	r8, r8, r3
 8014dd8:	fb03 f908 	mul.w	r9, r3, r8
 8014ddc:	ea6f 0909 	mvn.w	r9, r9
 8014de0:	4638      	mov	r0, r7
 8014de2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014de6:	f1bc 0f09 	cmp.w	ip, #9
 8014dea:	d814      	bhi.n	8014e16 <_strtoul_l.constprop.0+0x86>
 8014dec:	4664      	mov	r4, ip
 8014dee:	42a3      	cmp	r3, r4
 8014df0:	dd22      	ble.n	8014e38 <_strtoul_l.constprop.0+0xa8>
 8014df2:	2f00      	cmp	r7, #0
 8014df4:	db1d      	blt.n	8014e32 <_strtoul_l.constprop.0+0xa2>
 8014df6:	4580      	cmp	r8, r0
 8014df8:	d31b      	bcc.n	8014e32 <_strtoul_l.constprop.0+0xa2>
 8014dfa:	d101      	bne.n	8014e00 <_strtoul_l.constprop.0+0x70>
 8014dfc:	45a1      	cmp	r9, r4
 8014dfe:	db18      	blt.n	8014e32 <_strtoul_l.constprop.0+0xa2>
 8014e00:	fb00 4003 	mla	r0, r0, r3, r4
 8014e04:	2701      	movs	r7, #1
 8014e06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e0a:	e7ea      	b.n	8014de2 <_strtoul_l.constprop.0+0x52>
 8014e0c:	2c2b      	cmp	r4, #43	; 0x2b
 8014e0e:	bf04      	itt	eq
 8014e10:	782c      	ldrbeq	r4, [r5, #0]
 8014e12:	1c85      	addeq	r5, r0, #2
 8014e14:	e7cd      	b.n	8014db2 <_strtoul_l.constprop.0+0x22>
 8014e16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014e1a:	f1bc 0f19 	cmp.w	ip, #25
 8014e1e:	d801      	bhi.n	8014e24 <_strtoul_l.constprop.0+0x94>
 8014e20:	3c37      	subs	r4, #55	; 0x37
 8014e22:	e7e4      	b.n	8014dee <_strtoul_l.constprop.0+0x5e>
 8014e24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014e28:	f1bc 0f19 	cmp.w	ip, #25
 8014e2c:	d804      	bhi.n	8014e38 <_strtoul_l.constprop.0+0xa8>
 8014e2e:	3c57      	subs	r4, #87	; 0x57
 8014e30:	e7dd      	b.n	8014dee <_strtoul_l.constprop.0+0x5e>
 8014e32:	f04f 37ff 	mov.w	r7, #4294967295
 8014e36:	e7e6      	b.n	8014e06 <_strtoul_l.constprop.0+0x76>
 8014e38:	2f00      	cmp	r7, #0
 8014e3a:	da07      	bge.n	8014e4c <_strtoul_l.constprop.0+0xbc>
 8014e3c:	2322      	movs	r3, #34	; 0x22
 8014e3e:	f8ce 3000 	str.w	r3, [lr]
 8014e42:	f04f 30ff 	mov.w	r0, #4294967295
 8014e46:	b932      	cbnz	r2, 8014e56 <_strtoul_l.constprop.0+0xc6>
 8014e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e4c:	b106      	cbz	r6, 8014e50 <_strtoul_l.constprop.0+0xc0>
 8014e4e:	4240      	negs	r0, r0
 8014e50:	2a00      	cmp	r2, #0
 8014e52:	d0f9      	beq.n	8014e48 <_strtoul_l.constprop.0+0xb8>
 8014e54:	b107      	cbz	r7, 8014e58 <_strtoul_l.constprop.0+0xc8>
 8014e56:	1e69      	subs	r1, r5, #1
 8014e58:	6011      	str	r1, [r2, #0]
 8014e5a:	e7f5      	b.n	8014e48 <_strtoul_l.constprop.0+0xb8>
 8014e5c:	2430      	movs	r4, #48	; 0x30
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d1b5      	bne.n	8014dce <_strtoul_l.constprop.0+0x3e>
 8014e62:	2308      	movs	r3, #8
 8014e64:	e7b3      	b.n	8014dce <_strtoul_l.constprop.0+0x3e>
 8014e66:	2c30      	cmp	r4, #48	; 0x30
 8014e68:	d0a9      	beq.n	8014dbe <_strtoul_l.constprop.0+0x2e>
 8014e6a:	230a      	movs	r3, #10
 8014e6c:	e7af      	b.n	8014dce <_strtoul_l.constprop.0+0x3e>
 8014e6e:	bf00      	nop
 8014e70:	08049919 	.word	0x08049919

08014e74 <_strtoul_r>:
 8014e74:	f7ff bf8c 	b.w	8014d90 <_strtoul_l.constprop.0>

08014e78 <strtoul>:
 8014e78:	4613      	mov	r3, r2
 8014e7a:	460a      	mov	r2, r1
 8014e7c:	4601      	mov	r1, r0
 8014e7e:	4802      	ldr	r0, [pc, #8]	; (8014e88 <strtoul+0x10>)
 8014e80:	6800      	ldr	r0, [r0, #0]
 8014e82:	f7ff bf85 	b.w	8014d90 <_strtoul_l.constprop.0>
 8014e86:	bf00      	nop
 8014e88:	200002f4 	.word	0x200002f4

08014e8c <__tzcalc_limits>:
 8014e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e90:	4605      	mov	r5, r0
 8014e92:	f001 ff1d 	bl	8016cd0 <__gettzinfo>
 8014e96:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8014e9a:	429d      	cmp	r5, r3
 8014e9c:	f340 8099 	ble.w	8014fd2 <__tzcalc_limits+0x146>
 8014ea0:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8014ea4:	18ac      	adds	r4, r5, r2
 8014ea6:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8014eaa:	f240 126d 	movw	r2, #365	; 0x16d
 8014eae:	10a4      	asrs	r4, r4, #2
 8014eb0:	fb02 4403 	mla	r4, r2, r3, r4
 8014eb4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8014eb8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8014ebc:	fb93 f3f2 	sdiv	r3, r3, r2
 8014ec0:	441c      	add	r4, r3
 8014ec2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014ec6:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8014eca:	fb95 fcf3 	sdiv	ip, r5, r3
 8014ece:	fb03 5c1c 	mls	ip, r3, ip, r5
 8014ed2:	186a      	adds	r2, r5, r1
 8014ed4:	fabc f68c 	clz	r6, ip
 8014ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8014edc:	f005 0303 	and.w	r3, r5, #3
 8014ee0:	4414      	add	r4, r2
 8014ee2:	2264      	movs	r2, #100	; 0x64
 8014ee4:	6045      	str	r5, [r0, #4]
 8014ee6:	fb95 f7f2 	sdiv	r7, r5, r2
 8014eea:	0976      	lsrs	r6, r6, #5
 8014eec:	fb02 5717 	mls	r7, r2, r7, r5
 8014ef0:	4601      	mov	r1, r0
 8014ef2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8014ef6:	9300      	str	r3, [sp, #0]
 8014ef8:	f04f 0a07 	mov.w	sl, #7
 8014efc:	7a0d      	ldrb	r5, [r1, #8]
 8014efe:	694b      	ldr	r3, [r1, #20]
 8014f00:	2d4a      	cmp	r5, #74	; 0x4a
 8014f02:	d12d      	bne.n	8014f60 <__tzcalc_limits+0xd4>
 8014f04:	9a00      	ldr	r2, [sp, #0]
 8014f06:	eb04 0e03 	add.w	lr, r4, r3
 8014f0a:	b902      	cbnz	r2, 8014f0e <__tzcalc_limits+0x82>
 8014f0c:	b917      	cbnz	r7, 8014f14 <__tzcalc_limits+0x88>
 8014f0e:	f1bc 0f00 	cmp.w	ip, #0
 8014f12:	d123      	bne.n	8014f5c <__tzcalc_limits+0xd0>
 8014f14:	2b3b      	cmp	r3, #59	; 0x3b
 8014f16:	bfd4      	ite	le
 8014f18:	2300      	movle	r3, #0
 8014f1a:	2301      	movgt	r3, #1
 8014f1c:	4473      	add	r3, lr
 8014f1e:	3b01      	subs	r3, #1
 8014f20:	698d      	ldr	r5, [r1, #24]
 8014f22:	4a2d      	ldr	r2, [pc, #180]	; (8014fd8 <__tzcalc_limits+0x14c>)
 8014f24:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8014f28:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8014f2c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8014f2e:	18ed      	adds	r5, r5, r3
 8014f30:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8014f34:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8014f38:	3128      	adds	r1, #40	; 0x28
 8014f3a:	458b      	cmp	fp, r1
 8014f3c:	d1de      	bne.n	8014efc <__tzcalc_limits+0x70>
 8014f3e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8014f42:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8014f46:	428c      	cmp	r4, r1
 8014f48:	eb72 0303 	sbcs.w	r3, r2, r3
 8014f4c:	bfb4      	ite	lt
 8014f4e:	2301      	movlt	r3, #1
 8014f50:	2300      	movge	r3, #0
 8014f52:	6003      	str	r3, [r0, #0]
 8014f54:	2001      	movs	r0, #1
 8014f56:	b003      	add	sp, #12
 8014f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	e7dd      	b.n	8014f1c <__tzcalc_limits+0x90>
 8014f60:	2d44      	cmp	r5, #68	; 0x44
 8014f62:	d101      	bne.n	8014f68 <__tzcalc_limits+0xdc>
 8014f64:	4423      	add	r3, r4
 8014f66:	e7db      	b.n	8014f20 <__tzcalc_limits+0x94>
 8014f68:	9a00      	ldr	r2, [sp, #0]
 8014f6a:	bb62      	cbnz	r2, 8014fc6 <__tzcalc_limits+0x13a>
 8014f6c:	2f00      	cmp	r7, #0
 8014f6e:	bf0c      	ite	eq
 8014f70:	4635      	moveq	r5, r6
 8014f72:	2501      	movne	r5, #1
 8014f74:	68ca      	ldr	r2, [r1, #12]
 8014f76:	9201      	str	r2, [sp, #4]
 8014f78:	4a18      	ldr	r2, [pc, #96]	; (8014fdc <__tzcalc_limits+0x150>)
 8014f7a:	f04f 0930 	mov.w	r9, #48	; 0x30
 8014f7e:	fb09 2505 	mla	r5, r9, r5, r2
 8014f82:	46a6      	mov	lr, r4
 8014f84:	f04f 0800 	mov.w	r8, #0
 8014f88:	3d04      	subs	r5, #4
 8014f8a:	9a01      	ldr	r2, [sp, #4]
 8014f8c:	f108 0801 	add.w	r8, r8, #1
 8014f90:	4542      	cmp	r2, r8
 8014f92:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8014f96:	dc18      	bgt.n	8014fca <__tzcalc_limits+0x13e>
 8014f98:	f10e 0504 	add.w	r5, lr, #4
 8014f9c:	fb95 f8fa 	sdiv	r8, r5, sl
 8014fa0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8014fa4:	eba5 0808 	sub.w	r8, r5, r8
 8014fa8:	ebb3 0808 	subs.w	r8, r3, r8
 8014fac:	690b      	ldr	r3, [r1, #16]
 8014fae:	f103 33ff 	add.w	r3, r3, #4294967295
 8014fb2:	bf48      	it	mi
 8014fb4:	f108 0807 	addmi.w	r8, r8, #7
 8014fb8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014fbc:	4443      	add	r3, r8
 8014fbe:	454b      	cmp	r3, r9
 8014fc0:	da05      	bge.n	8014fce <__tzcalc_limits+0x142>
 8014fc2:	4473      	add	r3, lr
 8014fc4:	e7ac      	b.n	8014f20 <__tzcalc_limits+0x94>
 8014fc6:	4635      	mov	r5, r6
 8014fc8:	e7d4      	b.n	8014f74 <__tzcalc_limits+0xe8>
 8014fca:	44ce      	add	lr, r9
 8014fcc:	e7dd      	b.n	8014f8a <__tzcalc_limits+0xfe>
 8014fce:	3b07      	subs	r3, #7
 8014fd0:	e7f5      	b.n	8014fbe <__tzcalc_limits+0x132>
 8014fd2:	2000      	movs	r0, #0
 8014fd4:	e7bf      	b.n	8014f56 <__tzcalc_limits+0xca>
 8014fd6:	bf00      	nop
 8014fd8:	00015180 	.word	0x00015180
 8014fdc:	08049b70 	.word	0x08049b70

08014fe0 <__tz_lock>:
 8014fe0:	4801      	ldr	r0, [pc, #4]	; (8014fe8 <__tz_lock+0x8>)
 8014fe2:	f001 be82 	b.w	8016cea <__retarget_lock_acquire>
 8014fe6:	bf00      	nop
 8014fe8:	20005dc4 	.word	0x20005dc4

08014fec <__tz_unlock>:
 8014fec:	4801      	ldr	r0, [pc, #4]	; (8014ff4 <__tz_unlock+0x8>)
 8014fee:	f001 be7e 	b.w	8016cee <__retarget_lock_release>
 8014ff2:	bf00      	nop
 8014ff4:	20005dc4 	.word	0x20005dc4

08014ff8 <_tzset_unlocked>:
 8014ff8:	4b01      	ldr	r3, [pc, #4]	; (8015000 <_tzset_unlocked+0x8>)
 8014ffa:	6818      	ldr	r0, [r3, #0]
 8014ffc:	f000 b802 	b.w	8015004 <_tzset_unlocked_r>
 8015000:	200002f4 	.word	0x200002f4

08015004 <_tzset_unlocked_r>:
 8015004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015008:	b08d      	sub	sp, #52	; 0x34
 801500a:	4607      	mov	r7, r0
 801500c:	f001 fe60 	bl	8016cd0 <__gettzinfo>
 8015010:	49b0      	ldr	r1, [pc, #704]	; (80152d4 <_tzset_unlocked_r+0x2d0>)
 8015012:	4eb1      	ldr	r6, [pc, #708]	; (80152d8 <_tzset_unlocked_r+0x2d4>)
 8015014:	4605      	mov	r5, r0
 8015016:	4638      	mov	r0, r7
 8015018:	f001 fe52 	bl	8016cc0 <_getenv_r>
 801501c:	4604      	mov	r4, r0
 801501e:	b970      	cbnz	r0, 801503e <_tzset_unlocked_r+0x3a>
 8015020:	4bae      	ldr	r3, [pc, #696]	; (80152dc <_tzset_unlocked_r+0x2d8>)
 8015022:	4aaf      	ldr	r2, [pc, #700]	; (80152e0 <_tzset_unlocked_r+0x2dc>)
 8015024:	6018      	str	r0, [r3, #0]
 8015026:	4baf      	ldr	r3, [pc, #700]	; (80152e4 <_tzset_unlocked_r+0x2e0>)
 8015028:	6018      	str	r0, [r3, #0]
 801502a:	4baf      	ldr	r3, [pc, #700]	; (80152e8 <_tzset_unlocked_r+0x2e4>)
 801502c:	6830      	ldr	r0, [r6, #0]
 801502e:	e9c3 2200 	strd	r2, r2, [r3]
 8015032:	f7fd f839 	bl	80120a8 <free>
 8015036:	6034      	str	r4, [r6, #0]
 8015038:	b00d      	add	sp, #52	; 0x34
 801503a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801503e:	6831      	ldr	r1, [r6, #0]
 8015040:	2900      	cmp	r1, #0
 8015042:	d162      	bne.n	801510a <_tzset_unlocked_r+0x106>
 8015044:	6830      	ldr	r0, [r6, #0]
 8015046:	f7fd f82f 	bl	80120a8 <free>
 801504a:	4620      	mov	r0, r4
 801504c:	f7eb f8da 	bl	8000204 <strlen>
 8015050:	1c41      	adds	r1, r0, #1
 8015052:	4638      	mov	r0, r7
 8015054:	f7fd fb24 	bl	80126a0 <_malloc_r>
 8015058:	6030      	str	r0, [r6, #0]
 801505a:	2800      	cmp	r0, #0
 801505c:	d15a      	bne.n	8015114 <_tzset_unlocked_r+0x110>
 801505e:	7823      	ldrb	r3, [r4, #0]
 8015060:	4aa2      	ldr	r2, [pc, #648]	; (80152ec <_tzset_unlocked_r+0x2e8>)
 8015062:	49a3      	ldr	r1, [pc, #652]	; (80152f0 <_tzset_unlocked_r+0x2ec>)
 8015064:	2b3a      	cmp	r3, #58	; 0x3a
 8015066:	bf08      	it	eq
 8015068:	3401      	addeq	r4, #1
 801506a:	ae0a      	add	r6, sp, #40	; 0x28
 801506c:	4633      	mov	r3, r6
 801506e:	4620      	mov	r0, r4
 8015070:	f7fe f97e 	bl	8013370 <siscanf>
 8015074:	2800      	cmp	r0, #0
 8015076:	dddf      	ble.n	8015038 <_tzset_unlocked_r+0x34>
 8015078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801507a:	18e7      	adds	r7, r4, r3
 801507c:	5ce3      	ldrb	r3, [r4, r3]
 801507e:	2b2d      	cmp	r3, #45	; 0x2d
 8015080:	d14c      	bne.n	801511c <_tzset_unlocked_r+0x118>
 8015082:	3701      	adds	r7, #1
 8015084:	f04f 38ff 	mov.w	r8, #4294967295
 8015088:	f10d 0a20 	add.w	sl, sp, #32
 801508c:	f10d 0b1e 	add.w	fp, sp, #30
 8015090:	2400      	movs	r4, #0
 8015092:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8015096:	4997      	ldr	r1, [pc, #604]	; (80152f4 <_tzset_unlocked_r+0x2f0>)
 8015098:	9603      	str	r6, [sp, #12]
 801509a:	f8cd b000 	str.w	fp, [sp]
 801509e:	4633      	mov	r3, r6
 80150a0:	aa07      	add	r2, sp, #28
 80150a2:	4638      	mov	r0, r7
 80150a4:	f8ad 401e 	strh.w	r4, [sp, #30]
 80150a8:	f8ad 4020 	strh.w	r4, [sp, #32]
 80150ac:	f7fe f960 	bl	8013370 <siscanf>
 80150b0:	42a0      	cmp	r0, r4
 80150b2:	ddc1      	ble.n	8015038 <_tzset_unlocked_r+0x34>
 80150b4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80150b8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80150bc:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8015300 <_tzset_unlocked_r+0x2fc>
 80150c0:	213c      	movs	r1, #60	; 0x3c
 80150c2:	fb01 3302 	mla	r3, r1, r2, r3
 80150c6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80150ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80150ce:	fb01 3302 	mla	r3, r1, r2, r3
 80150d2:	fb08 f303 	mul.w	r3, r8, r3
 80150d6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80152e8 <_tzset_unlocked_r+0x2e4>
 80150da:	62ab      	str	r3, [r5, #40]	; 0x28
 80150dc:	4b83      	ldr	r3, [pc, #524]	; (80152ec <_tzset_unlocked_r+0x2e8>)
 80150de:	f8c8 3000 	str.w	r3, [r8]
 80150e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150e4:	4982      	ldr	r1, [pc, #520]	; (80152f0 <_tzset_unlocked_r+0x2ec>)
 80150e6:	441f      	add	r7, r3
 80150e8:	464a      	mov	r2, r9
 80150ea:	4633      	mov	r3, r6
 80150ec:	4638      	mov	r0, r7
 80150ee:	f7fe f93f 	bl	8013370 <siscanf>
 80150f2:	42a0      	cmp	r0, r4
 80150f4:	dc18      	bgt.n	8015128 <_tzset_unlocked_r+0x124>
 80150f6:	f8d8 3000 	ldr.w	r3, [r8]
 80150fa:	f8c8 3004 	str.w	r3, [r8, #4]
 80150fe:	4b77      	ldr	r3, [pc, #476]	; (80152dc <_tzset_unlocked_r+0x2d8>)
 8015100:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015102:	601a      	str	r2, [r3, #0]
 8015104:	4b77      	ldr	r3, [pc, #476]	; (80152e4 <_tzset_unlocked_r+0x2e0>)
 8015106:	601c      	str	r4, [r3, #0]
 8015108:	e796      	b.n	8015038 <_tzset_unlocked_r+0x34>
 801510a:	f7eb f871 	bl	80001f0 <strcmp>
 801510e:	2800      	cmp	r0, #0
 8015110:	d198      	bne.n	8015044 <_tzset_unlocked_r+0x40>
 8015112:	e791      	b.n	8015038 <_tzset_unlocked_r+0x34>
 8015114:	4621      	mov	r1, r4
 8015116:	f7fe f99c 	bl	8013452 <strcpy>
 801511a:	e7a0      	b.n	801505e <_tzset_unlocked_r+0x5a>
 801511c:	2b2b      	cmp	r3, #43	; 0x2b
 801511e:	bf08      	it	eq
 8015120:	3701      	addeq	r7, #1
 8015122:	f04f 0801 	mov.w	r8, #1
 8015126:	e7af      	b.n	8015088 <_tzset_unlocked_r+0x84>
 8015128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801512a:	f8c8 9004 	str.w	r9, [r8, #4]
 801512e:	18fc      	adds	r4, r7, r3
 8015130:	5cfb      	ldrb	r3, [r7, r3]
 8015132:	2b2d      	cmp	r3, #45	; 0x2d
 8015134:	f040 808b 	bne.w	801524e <_tzset_unlocked_r+0x24a>
 8015138:	3401      	adds	r4, #1
 801513a:	f04f 37ff 	mov.w	r7, #4294967295
 801513e:	2300      	movs	r3, #0
 8015140:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015144:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015148:	f8ad 3020 	strh.w	r3, [sp, #32]
 801514c:	930a      	str	r3, [sp, #40]	; 0x28
 801514e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8015152:	e9cd b600 	strd	fp, r6, [sp]
 8015156:	4967      	ldr	r1, [pc, #412]	; (80152f4 <_tzset_unlocked_r+0x2f0>)
 8015158:	4633      	mov	r3, r6
 801515a:	aa07      	add	r2, sp, #28
 801515c:	4620      	mov	r0, r4
 801515e:	f7fe f907 	bl	8013370 <siscanf>
 8015162:	2800      	cmp	r0, #0
 8015164:	dc78      	bgt.n	8015258 <_tzset_unlocked_r+0x254>
 8015166:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015168:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801516c:	652b      	str	r3, [r5, #80]	; 0x50
 801516e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015170:	462f      	mov	r7, r5
 8015172:	441c      	add	r4, r3
 8015174:	f04f 0900 	mov.w	r9, #0
 8015178:	7823      	ldrb	r3, [r4, #0]
 801517a:	2b2c      	cmp	r3, #44	; 0x2c
 801517c:	bf08      	it	eq
 801517e:	3401      	addeq	r4, #1
 8015180:	f894 8000 	ldrb.w	r8, [r4]
 8015184:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8015188:	d178      	bne.n	801527c <_tzset_unlocked_r+0x278>
 801518a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801518e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8015192:	ab09      	add	r3, sp, #36	; 0x24
 8015194:	9300      	str	r3, [sp, #0]
 8015196:	4958      	ldr	r1, [pc, #352]	; (80152f8 <_tzset_unlocked_r+0x2f4>)
 8015198:	9603      	str	r6, [sp, #12]
 801519a:	4633      	mov	r3, r6
 801519c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80151a0:	4620      	mov	r0, r4
 80151a2:	f7fe f8e5 	bl	8013370 <siscanf>
 80151a6:	2803      	cmp	r0, #3
 80151a8:	f47f af46 	bne.w	8015038 <_tzset_unlocked_r+0x34>
 80151ac:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80151b0:	1e4b      	subs	r3, r1, #1
 80151b2:	2b0b      	cmp	r3, #11
 80151b4:	f63f af40 	bhi.w	8015038 <_tzset_unlocked_r+0x34>
 80151b8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80151bc:	1e53      	subs	r3, r2, #1
 80151be:	2b04      	cmp	r3, #4
 80151c0:	f63f af3a 	bhi.w	8015038 <_tzset_unlocked_r+0x34>
 80151c4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80151c8:	2b06      	cmp	r3, #6
 80151ca:	f63f af35 	bhi.w	8015038 <_tzset_unlocked_r+0x34>
 80151ce:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80151d2:	f887 8008 	strb.w	r8, [r7, #8]
 80151d6:	617b      	str	r3, [r7, #20]
 80151d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151da:	eb04 0803 	add.w	r8, r4, r3
 80151de:	2302      	movs	r3, #2
 80151e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80151e4:	2300      	movs	r3, #0
 80151e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80151ea:	f8ad 3020 	strh.w	r3, [sp, #32]
 80151ee:	930a      	str	r3, [sp, #40]	; 0x28
 80151f0:	f898 3000 	ldrb.w	r3, [r8]
 80151f4:	2b2f      	cmp	r3, #47	; 0x2f
 80151f6:	d109      	bne.n	801520c <_tzset_unlocked_r+0x208>
 80151f8:	e9cd a602 	strd	sl, r6, [sp, #8]
 80151fc:	e9cd b600 	strd	fp, r6, [sp]
 8015200:	493e      	ldr	r1, [pc, #248]	; (80152fc <_tzset_unlocked_r+0x2f8>)
 8015202:	4633      	mov	r3, r6
 8015204:	aa07      	add	r2, sp, #28
 8015206:	4640      	mov	r0, r8
 8015208:	f7fe f8b2 	bl	8013370 <siscanf>
 801520c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015210:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015214:	213c      	movs	r1, #60	; 0x3c
 8015216:	fb01 3302 	mla	r3, r1, r2, r3
 801521a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801521e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015222:	fb01 3302 	mla	r3, r1, r2, r3
 8015226:	61bb      	str	r3, [r7, #24]
 8015228:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801522a:	3728      	adds	r7, #40	; 0x28
 801522c:	4444      	add	r4, r8
 801522e:	f1b9 0f00 	cmp.w	r9, #0
 8015232:	d020      	beq.n	8015276 <_tzset_unlocked_r+0x272>
 8015234:	6868      	ldr	r0, [r5, #4]
 8015236:	f7ff fe29 	bl	8014e8c <__tzcalc_limits>
 801523a:	4b28      	ldr	r3, [pc, #160]	; (80152dc <_tzset_unlocked_r+0x2d8>)
 801523c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801523e:	601a      	str	r2, [r3, #0]
 8015240:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8015242:	1a9b      	subs	r3, r3, r2
 8015244:	4a27      	ldr	r2, [pc, #156]	; (80152e4 <_tzset_unlocked_r+0x2e0>)
 8015246:	bf18      	it	ne
 8015248:	2301      	movne	r3, #1
 801524a:	6013      	str	r3, [r2, #0]
 801524c:	e6f4      	b.n	8015038 <_tzset_unlocked_r+0x34>
 801524e:	2b2b      	cmp	r3, #43	; 0x2b
 8015250:	bf08      	it	eq
 8015252:	3401      	addeq	r4, #1
 8015254:	2701      	movs	r7, #1
 8015256:	e772      	b.n	801513e <_tzset_unlocked_r+0x13a>
 8015258:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801525c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015260:	213c      	movs	r1, #60	; 0x3c
 8015262:	fb01 3302 	mla	r3, r1, r2, r3
 8015266:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801526a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801526e:	fb01 3302 	mla	r3, r1, r2, r3
 8015272:	437b      	muls	r3, r7
 8015274:	e77a      	b.n	801516c <_tzset_unlocked_r+0x168>
 8015276:	f04f 0901 	mov.w	r9, #1
 801527a:	e77d      	b.n	8015178 <_tzset_unlocked_r+0x174>
 801527c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8015280:	bf06      	itte	eq
 8015282:	3401      	addeq	r4, #1
 8015284:	4643      	moveq	r3, r8
 8015286:	2344      	movne	r3, #68	; 0x44
 8015288:	220a      	movs	r2, #10
 801528a:	a90b      	add	r1, sp, #44	; 0x2c
 801528c:	4620      	mov	r0, r4
 801528e:	9305      	str	r3, [sp, #20]
 8015290:	f7ff fdf2 	bl	8014e78 <strtoul>
 8015294:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8015298:	9b05      	ldr	r3, [sp, #20]
 801529a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801529e:	45a0      	cmp	r8, r4
 80152a0:	d114      	bne.n	80152cc <_tzset_unlocked_r+0x2c8>
 80152a2:	234d      	movs	r3, #77	; 0x4d
 80152a4:	f1b9 0f00 	cmp.w	r9, #0
 80152a8:	d107      	bne.n	80152ba <_tzset_unlocked_r+0x2b6>
 80152aa:	722b      	strb	r3, [r5, #8]
 80152ac:	2103      	movs	r1, #3
 80152ae:	2302      	movs	r3, #2
 80152b0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80152b4:	f8c5 9014 	str.w	r9, [r5, #20]
 80152b8:	e791      	b.n	80151de <_tzset_unlocked_r+0x1da>
 80152ba:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80152be:	220b      	movs	r2, #11
 80152c0:	2301      	movs	r3, #1
 80152c2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80152c6:	2300      	movs	r3, #0
 80152c8:	63eb      	str	r3, [r5, #60]	; 0x3c
 80152ca:	e788      	b.n	80151de <_tzset_unlocked_r+0x1da>
 80152cc:	b280      	uxth	r0, r0
 80152ce:	723b      	strb	r3, [r7, #8]
 80152d0:	6178      	str	r0, [r7, #20]
 80152d2:	e784      	b.n	80151de <_tzset_unlocked_r+0x1da>
 80152d4:	080498dc 	.word	0x080498dc
 80152d8:	20005db4 	.word	0x20005db4
 80152dc:	20005dbc 	.word	0x20005dbc
 80152e0:	080498df 	.word	0x080498df
 80152e4:	20005db8 	.word	0x20005db8
 80152e8:	20000358 	.word	0x20000358
 80152ec:	20005da7 	.word	0x20005da7
 80152f0:	080498e3 	.word	0x080498e3
 80152f4:	08049906 	.word	0x08049906
 80152f8:	080498f2 	.word	0x080498f2
 80152fc:	08049905 	.word	0x08049905
 8015300:	20005d9c 	.word	0x20005d9c

08015304 <__swbuf_r>:
 8015304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015306:	460e      	mov	r6, r1
 8015308:	4614      	mov	r4, r2
 801530a:	4605      	mov	r5, r0
 801530c:	b118      	cbz	r0, 8015316 <__swbuf_r+0x12>
 801530e:	6983      	ldr	r3, [r0, #24]
 8015310:	b90b      	cbnz	r3, 8015316 <__swbuf_r+0x12>
 8015312:	f001 f88d 	bl	8016430 <__sinit>
 8015316:	4b21      	ldr	r3, [pc, #132]	; (801539c <__swbuf_r+0x98>)
 8015318:	429c      	cmp	r4, r3
 801531a:	d12b      	bne.n	8015374 <__swbuf_r+0x70>
 801531c:	686c      	ldr	r4, [r5, #4]
 801531e:	69a3      	ldr	r3, [r4, #24]
 8015320:	60a3      	str	r3, [r4, #8]
 8015322:	89a3      	ldrh	r3, [r4, #12]
 8015324:	071a      	lsls	r2, r3, #28
 8015326:	d52f      	bpl.n	8015388 <__swbuf_r+0x84>
 8015328:	6923      	ldr	r3, [r4, #16]
 801532a:	b36b      	cbz	r3, 8015388 <__swbuf_r+0x84>
 801532c:	6923      	ldr	r3, [r4, #16]
 801532e:	6820      	ldr	r0, [r4, #0]
 8015330:	1ac0      	subs	r0, r0, r3
 8015332:	6963      	ldr	r3, [r4, #20]
 8015334:	b2f6      	uxtb	r6, r6
 8015336:	4283      	cmp	r3, r0
 8015338:	4637      	mov	r7, r6
 801533a:	dc04      	bgt.n	8015346 <__swbuf_r+0x42>
 801533c:	4621      	mov	r1, r4
 801533e:	4628      	mov	r0, r5
 8015340:	f000 ffe2 	bl	8016308 <_fflush_r>
 8015344:	bb30      	cbnz	r0, 8015394 <__swbuf_r+0x90>
 8015346:	68a3      	ldr	r3, [r4, #8]
 8015348:	3b01      	subs	r3, #1
 801534a:	60a3      	str	r3, [r4, #8]
 801534c:	6823      	ldr	r3, [r4, #0]
 801534e:	1c5a      	adds	r2, r3, #1
 8015350:	6022      	str	r2, [r4, #0]
 8015352:	701e      	strb	r6, [r3, #0]
 8015354:	6963      	ldr	r3, [r4, #20]
 8015356:	3001      	adds	r0, #1
 8015358:	4283      	cmp	r3, r0
 801535a:	d004      	beq.n	8015366 <__swbuf_r+0x62>
 801535c:	89a3      	ldrh	r3, [r4, #12]
 801535e:	07db      	lsls	r3, r3, #31
 8015360:	d506      	bpl.n	8015370 <__swbuf_r+0x6c>
 8015362:	2e0a      	cmp	r6, #10
 8015364:	d104      	bne.n	8015370 <__swbuf_r+0x6c>
 8015366:	4621      	mov	r1, r4
 8015368:	4628      	mov	r0, r5
 801536a:	f000 ffcd 	bl	8016308 <_fflush_r>
 801536e:	b988      	cbnz	r0, 8015394 <__swbuf_r+0x90>
 8015370:	4638      	mov	r0, r7
 8015372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015374:	4b0a      	ldr	r3, [pc, #40]	; (80153a0 <__swbuf_r+0x9c>)
 8015376:	429c      	cmp	r4, r3
 8015378:	d101      	bne.n	801537e <__swbuf_r+0x7a>
 801537a:	68ac      	ldr	r4, [r5, #8]
 801537c:	e7cf      	b.n	801531e <__swbuf_r+0x1a>
 801537e:	4b09      	ldr	r3, [pc, #36]	; (80153a4 <__swbuf_r+0xa0>)
 8015380:	429c      	cmp	r4, r3
 8015382:	bf08      	it	eq
 8015384:	68ec      	ldreq	r4, [r5, #12]
 8015386:	e7ca      	b.n	801531e <__swbuf_r+0x1a>
 8015388:	4621      	mov	r1, r4
 801538a:	4628      	mov	r0, r5
 801538c:	f000 f81e 	bl	80153cc <__swsetup_r>
 8015390:	2800      	cmp	r0, #0
 8015392:	d0cb      	beq.n	801532c <__swbuf_r+0x28>
 8015394:	f04f 37ff 	mov.w	r7, #4294967295
 8015398:	e7ea      	b.n	8015370 <__swbuf_r+0x6c>
 801539a:	bf00      	nop
 801539c:	08049ab4 	.word	0x08049ab4
 80153a0:	08049ad4 	.word	0x08049ad4
 80153a4:	08049a94 	.word	0x08049a94

080153a8 <_write_r>:
 80153a8:	b538      	push	{r3, r4, r5, lr}
 80153aa:	4d07      	ldr	r5, [pc, #28]	; (80153c8 <_write_r+0x20>)
 80153ac:	4604      	mov	r4, r0
 80153ae:	4608      	mov	r0, r1
 80153b0:	4611      	mov	r1, r2
 80153b2:	2200      	movs	r2, #0
 80153b4:	602a      	str	r2, [r5, #0]
 80153b6:	461a      	mov	r2, r3
 80153b8:	f7ef f919 	bl	80045ee <_write>
 80153bc:	1c43      	adds	r3, r0, #1
 80153be:	d102      	bne.n	80153c6 <_write_r+0x1e>
 80153c0:	682b      	ldr	r3, [r5, #0]
 80153c2:	b103      	cbz	r3, 80153c6 <_write_r+0x1e>
 80153c4:	6023      	str	r3, [r4, #0]
 80153c6:	bd38      	pop	{r3, r4, r5, pc}
 80153c8:	20005dc8 	.word	0x20005dc8

080153cc <__swsetup_r>:
 80153cc:	4b32      	ldr	r3, [pc, #200]	; (8015498 <__swsetup_r+0xcc>)
 80153ce:	b570      	push	{r4, r5, r6, lr}
 80153d0:	681d      	ldr	r5, [r3, #0]
 80153d2:	4606      	mov	r6, r0
 80153d4:	460c      	mov	r4, r1
 80153d6:	b125      	cbz	r5, 80153e2 <__swsetup_r+0x16>
 80153d8:	69ab      	ldr	r3, [r5, #24]
 80153da:	b913      	cbnz	r3, 80153e2 <__swsetup_r+0x16>
 80153dc:	4628      	mov	r0, r5
 80153de:	f001 f827 	bl	8016430 <__sinit>
 80153e2:	4b2e      	ldr	r3, [pc, #184]	; (801549c <__swsetup_r+0xd0>)
 80153e4:	429c      	cmp	r4, r3
 80153e6:	d10f      	bne.n	8015408 <__swsetup_r+0x3c>
 80153e8:	686c      	ldr	r4, [r5, #4]
 80153ea:	89a3      	ldrh	r3, [r4, #12]
 80153ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80153f0:	0719      	lsls	r1, r3, #28
 80153f2:	d42c      	bmi.n	801544e <__swsetup_r+0x82>
 80153f4:	06dd      	lsls	r5, r3, #27
 80153f6:	d411      	bmi.n	801541c <__swsetup_r+0x50>
 80153f8:	2309      	movs	r3, #9
 80153fa:	6033      	str	r3, [r6, #0]
 80153fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015400:	81a3      	strh	r3, [r4, #12]
 8015402:	f04f 30ff 	mov.w	r0, #4294967295
 8015406:	e03e      	b.n	8015486 <__swsetup_r+0xba>
 8015408:	4b25      	ldr	r3, [pc, #148]	; (80154a0 <__swsetup_r+0xd4>)
 801540a:	429c      	cmp	r4, r3
 801540c:	d101      	bne.n	8015412 <__swsetup_r+0x46>
 801540e:	68ac      	ldr	r4, [r5, #8]
 8015410:	e7eb      	b.n	80153ea <__swsetup_r+0x1e>
 8015412:	4b24      	ldr	r3, [pc, #144]	; (80154a4 <__swsetup_r+0xd8>)
 8015414:	429c      	cmp	r4, r3
 8015416:	bf08      	it	eq
 8015418:	68ec      	ldreq	r4, [r5, #12]
 801541a:	e7e6      	b.n	80153ea <__swsetup_r+0x1e>
 801541c:	0758      	lsls	r0, r3, #29
 801541e:	d512      	bpl.n	8015446 <__swsetup_r+0x7a>
 8015420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015422:	b141      	cbz	r1, 8015436 <__swsetup_r+0x6a>
 8015424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015428:	4299      	cmp	r1, r3
 801542a:	d002      	beq.n	8015432 <__swsetup_r+0x66>
 801542c:	4630      	mov	r0, r6
 801542e:	f7fd f8cb 	bl	80125c8 <_free_r>
 8015432:	2300      	movs	r3, #0
 8015434:	6363      	str	r3, [r4, #52]	; 0x34
 8015436:	89a3      	ldrh	r3, [r4, #12]
 8015438:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801543c:	81a3      	strh	r3, [r4, #12]
 801543e:	2300      	movs	r3, #0
 8015440:	6063      	str	r3, [r4, #4]
 8015442:	6923      	ldr	r3, [r4, #16]
 8015444:	6023      	str	r3, [r4, #0]
 8015446:	89a3      	ldrh	r3, [r4, #12]
 8015448:	f043 0308 	orr.w	r3, r3, #8
 801544c:	81a3      	strh	r3, [r4, #12]
 801544e:	6923      	ldr	r3, [r4, #16]
 8015450:	b94b      	cbnz	r3, 8015466 <__swsetup_r+0x9a>
 8015452:	89a3      	ldrh	r3, [r4, #12]
 8015454:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801545c:	d003      	beq.n	8015466 <__swsetup_r+0x9a>
 801545e:	4621      	mov	r1, r4
 8015460:	4630      	mov	r0, r6
 8015462:	f001 fc7f 	bl	8016d64 <__smakebuf_r>
 8015466:	89a0      	ldrh	r0, [r4, #12]
 8015468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801546c:	f010 0301 	ands.w	r3, r0, #1
 8015470:	d00a      	beq.n	8015488 <__swsetup_r+0xbc>
 8015472:	2300      	movs	r3, #0
 8015474:	60a3      	str	r3, [r4, #8]
 8015476:	6963      	ldr	r3, [r4, #20]
 8015478:	425b      	negs	r3, r3
 801547a:	61a3      	str	r3, [r4, #24]
 801547c:	6923      	ldr	r3, [r4, #16]
 801547e:	b943      	cbnz	r3, 8015492 <__swsetup_r+0xc6>
 8015480:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015484:	d1ba      	bne.n	80153fc <__swsetup_r+0x30>
 8015486:	bd70      	pop	{r4, r5, r6, pc}
 8015488:	0781      	lsls	r1, r0, #30
 801548a:	bf58      	it	pl
 801548c:	6963      	ldrpl	r3, [r4, #20]
 801548e:	60a3      	str	r3, [r4, #8]
 8015490:	e7f4      	b.n	801547c <__swsetup_r+0xb0>
 8015492:	2000      	movs	r0, #0
 8015494:	e7f7      	b.n	8015486 <__swsetup_r+0xba>
 8015496:	bf00      	nop
 8015498:	200002f4 	.word	0x200002f4
 801549c:	08049ab4 	.word	0x08049ab4
 80154a0:	08049ad4 	.word	0x08049ad4
 80154a4:	08049a94 	.word	0x08049a94

080154a8 <abort>:
 80154a8:	b508      	push	{r3, lr}
 80154aa:	2006      	movs	r0, #6
 80154ac:	f002 fed4 	bl	8018258 <raise>
 80154b0:	2001      	movs	r0, #1
 80154b2:	f7ef f875 	bl	80045a0 <_exit>

080154b6 <abs>:
 80154b6:	2800      	cmp	r0, #0
 80154b8:	bfb8      	it	lt
 80154ba:	4240      	neglt	r0, r0
 80154bc:	4770      	bx	lr
	...

080154c0 <_close_r>:
 80154c0:	b538      	push	{r3, r4, r5, lr}
 80154c2:	4d06      	ldr	r5, [pc, #24]	; (80154dc <_close_r+0x1c>)
 80154c4:	2300      	movs	r3, #0
 80154c6:	4604      	mov	r4, r0
 80154c8:	4608      	mov	r0, r1
 80154ca:	602b      	str	r3, [r5, #0]
 80154cc:	f7ef f8ab 	bl	8004626 <_close>
 80154d0:	1c43      	adds	r3, r0, #1
 80154d2:	d102      	bne.n	80154da <_close_r+0x1a>
 80154d4:	682b      	ldr	r3, [r5, #0]
 80154d6:	b103      	cbz	r3, 80154da <_close_r+0x1a>
 80154d8:	6023      	str	r3, [r4, #0]
 80154da:	bd38      	pop	{r3, r4, r5, pc}
 80154dc:	20005dc8 	.word	0x20005dc8

080154e0 <div>:
 80154e0:	2900      	cmp	r1, #0
 80154e2:	b510      	push	{r4, lr}
 80154e4:	fb91 f4f2 	sdiv	r4, r1, r2
 80154e8:	fb02 1314 	mls	r3, r2, r4, r1
 80154ec:	db06      	blt.n	80154fc <div+0x1c>
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	da01      	bge.n	80154f6 <div+0x16>
 80154f2:	3401      	adds	r4, #1
 80154f4:	1a9b      	subs	r3, r3, r2
 80154f6:	e9c0 4300 	strd	r4, r3, [r0]
 80154fa:	bd10      	pop	{r4, pc}
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	bfc4      	itt	gt
 8015500:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8015504:	189b      	addgt	r3, r3, r2
 8015506:	e7f6      	b.n	80154f6 <div+0x16>

08015508 <quorem>:
 8015508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801550c:	6903      	ldr	r3, [r0, #16]
 801550e:	690c      	ldr	r4, [r1, #16]
 8015510:	42a3      	cmp	r3, r4
 8015512:	4607      	mov	r7, r0
 8015514:	f2c0 8081 	blt.w	801561a <quorem+0x112>
 8015518:	3c01      	subs	r4, #1
 801551a:	f101 0814 	add.w	r8, r1, #20
 801551e:	f100 0514 	add.w	r5, r0, #20
 8015522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015526:	9301      	str	r3, [sp, #4]
 8015528:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801552c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015530:	3301      	adds	r3, #1
 8015532:	429a      	cmp	r2, r3
 8015534:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015538:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801553c:	fbb2 f6f3 	udiv	r6, r2, r3
 8015540:	d331      	bcc.n	80155a6 <quorem+0x9e>
 8015542:	f04f 0e00 	mov.w	lr, #0
 8015546:	4640      	mov	r0, r8
 8015548:	46ac      	mov	ip, r5
 801554a:	46f2      	mov	sl, lr
 801554c:	f850 2b04 	ldr.w	r2, [r0], #4
 8015550:	b293      	uxth	r3, r2
 8015552:	fb06 e303 	mla	r3, r6, r3, lr
 8015556:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801555a:	b29b      	uxth	r3, r3
 801555c:	ebaa 0303 	sub.w	r3, sl, r3
 8015560:	f8dc a000 	ldr.w	sl, [ip]
 8015564:	0c12      	lsrs	r2, r2, #16
 8015566:	fa13 f38a 	uxtah	r3, r3, sl
 801556a:	fb06 e202 	mla	r2, r6, r2, lr
 801556e:	9300      	str	r3, [sp, #0]
 8015570:	9b00      	ldr	r3, [sp, #0]
 8015572:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015576:	b292      	uxth	r2, r2
 8015578:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801557c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015580:	f8bd 3000 	ldrh.w	r3, [sp]
 8015584:	4581      	cmp	r9, r0
 8015586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801558a:	f84c 3b04 	str.w	r3, [ip], #4
 801558e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015592:	d2db      	bcs.n	801554c <quorem+0x44>
 8015594:	f855 300b 	ldr.w	r3, [r5, fp]
 8015598:	b92b      	cbnz	r3, 80155a6 <quorem+0x9e>
 801559a:	9b01      	ldr	r3, [sp, #4]
 801559c:	3b04      	subs	r3, #4
 801559e:	429d      	cmp	r5, r3
 80155a0:	461a      	mov	r2, r3
 80155a2:	d32e      	bcc.n	8015602 <quorem+0xfa>
 80155a4:	613c      	str	r4, [r7, #16]
 80155a6:	4638      	mov	r0, r7
 80155a8:	f001 ff20 	bl	80173ec <__mcmp>
 80155ac:	2800      	cmp	r0, #0
 80155ae:	db24      	blt.n	80155fa <quorem+0xf2>
 80155b0:	3601      	adds	r6, #1
 80155b2:	4628      	mov	r0, r5
 80155b4:	f04f 0c00 	mov.w	ip, #0
 80155b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80155bc:	f8d0 e000 	ldr.w	lr, [r0]
 80155c0:	b293      	uxth	r3, r2
 80155c2:	ebac 0303 	sub.w	r3, ip, r3
 80155c6:	0c12      	lsrs	r2, r2, #16
 80155c8:	fa13 f38e 	uxtah	r3, r3, lr
 80155cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80155d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80155d4:	b29b      	uxth	r3, r3
 80155d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80155da:	45c1      	cmp	r9, r8
 80155dc:	f840 3b04 	str.w	r3, [r0], #4
 80155e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80155e4:	d2e8      	bcs.n	80155b8 <quorem+0xb0>
 80155e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80155ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80155ee:	b922      	cbnz	r2, 80155fa <quorem+0xf2>
 80155f0:	3b04      	subs	r3, #4
 80155f2:	429d      	cmp	r5, r3
 80155f4:	461a      	mov	r2, r3
 80155f6:	d30a      	bcc.n	801560e <quorem+0x106>
 80155f8:	613c      	str	r4, [r7, #16]
 80155fa:	4630      	mov	r0, r6
 80155fc:	b003      	add	sp, #12
 80155fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015602:	6812      	ldr	r2, [r2, #0]
 8015604:	3b04      	subs	r3, #4
 8015606:	2a00      	cmp	r2, #0
 8015608:	d1cc      	bne.n	80155a4 <quorem+0x9c>
 801560a:	3c01      	subs	r4, #1
 801560c:	e7c7      	b.n	801559e <quorem+0x96>
 801560e:	6812      	ldr	r2, [r2, #0]
 8015610:	3b04      	subs	r3, #4
 8015612:	2a00      	cmp	r2, #0
 8015614:	d1f0      	bne.n	80155f8 <quorem+0xf0>
 8015616:	3c01      	subs	r4, #1
 8015618:	e7eb      	b.n	80155f2 <quorem+0xea>
 801561a:	2000      	movs	r0, #0
 801561c:	e7ee      	b.n	80155fc <quorem+0xf4>
	...

08015620 <_dtoa_r>:
 8015620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015624:	ed2d 8b04 	vpush	{d8-d9}
 8015628:	ec57 6b10 	vmov	r6, r7, d0
 801562c:	b093      	sub	sp, #76	; 0x4c
 801562e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015630:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015634:	9106      	str	r1, [sp, #24]
 8015636:	ee10 aa10 	vmov	sl, s0
 801563a:	4604      	mov	r4, r0
 801563c:	9209      	str	r2, [sp, #36]	; 0x24
 801563e:	930c      	str	r3, [sp, #48]	; 0x30
 8015640:	46bb      	mov	fp, r7
 8015642:	b975      	cbnz	r5, 8015662 <_dtoa_r+0x42>
 8015644:	2010      	movs	r0, #16
 8015646:	f7fc fd27 	bl	8012098 <malloc>
 801564a:	4602      	mov	r2, r0
 801564c:	6260      	str	r0, [r4, #36]	; 0x24
 801564e:	b920      	cbnz	r0, 801565a <_dtoa_r+0x3a>
 8015650:	4ba7      	ldr	r3, [pc, #668]	; (80158f0 <_dtoa_r+0x2d0>)
 8015652:	21ea      	movs	r1, #234	; 0xea
 8015654:	48a7      	ldr	r0, [pc, #668]	; (80158f4 <_dtoa_r+0x2d4>)
 8015656:	f7fc fcbd 	bl	8011fd4 <__assert_func>
 801565a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801565e:	6005      	str	r5, [r0, #0]
 8015660:	60c5      	str	r5, [r0, #12]
 8015662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015664:	6819      	ldr	r1, [r3, #0]
 8015666:	b151      	cbz	r1, 801567e <_dtoa_r+0x5e>
 8015668:	685a      	ldr	r2, [r3, #4]
 801566a:	604a      	str	r2, [r1, #4]
 801566c:	2301      	movs	r3, #1
 801566e:	4093      	lsls	r3, r2
 8015670:	608b      	str	r3, [r1, #8]
 8015672:	4620      	mov	r0, r4
 8015674:	f001 fc2e 	bl	8016ed4 <_Bfree>
 8015678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801567a:	2200      	movs	r2, #0
 801567c:	601a      	str	r2, [r3, #0]
 801567e:	1e3b      	subs	r3, r7, #0
 8015680:	bfaa      	itet	ge
 8015682:	2300      	movge	r3, #0
 8015684:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015688:	f8c8 3000 	strge.w	r3, [r8]
 801568c:	4b9a      	ldr	r3, [pc, #616]	; (80158f8 <_dtoa_r+0x2d8>)
 801568e:	bfbc      	itt	lt
 8015690:	2201      	movlt	r2, #1
 8015692:	f8c8 2000 	strlt.w	r2, [r8]
 8015696:	ea33 030b 	bics.w	r3, r3, fp
 801569a:	d11b      	bne.n	80156d4 <_dtoa_r+0xb4>
 801569c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801569e:	f242 730f 	movw	r3, #9999	; 0x270f
 80156a2:	6013      	str	r3, [r2, #0]
 80156a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80156a8:	4333      	orrs	r3, r6
 80156aa:	f000 8592 	beq.w	80161d2 <_dtoa_r+0xbb2>
 80156ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156b0:	b963      	cbnz	r3, 80156cc <_dtoa_r+0xac>
 80156b2:	4b92      	ldr	r3, [pc, #584]	; (80158fc <_dtoa_r+0x2dc>)
 80156b4:	e022      	b.n	80156fc <_dtoa_r+0xdc>
 80156b6:	4b92      	ldr	r3, [pc, #584]	; (8015900 <_dtoa_r+0x2e0>)
 80156b8:	9301      	str	r3, [sp, #4]
 80156ba:	3308      	adds	r3, #8
 80156bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80156be:	6013      	str	r3, [r2, #0]
 80156c0:	9801      	ldr	r0, [sp, #4]
 80156c2:	b013      	add	sp, #76	; 0x4c
 80156c4:	ecbd 8b04 	vpop	{d8-d9}
 80156c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156cc:	4b8b      	ldr	r3, [pc, #556]	; (80158fc <_dtoa_r+0x2dc>)
 80156ce:	9301      	str	r3, [sp, #4]
 80156d0:	3303      	adds	r3, #3
 80156d2:	e7f3      	b.n	80156bc <_dtoa_r+0x9c>
 80156d4:	2200      	movs	r2, #0
 80156d6:	2300      	movs	r3, #0
 80156d8:	4650      	mov	r0, sl
 80156da:	4659      	mov	r1, fp
 80156dc:	f7eb fa14 	bl	8000b08 <__aeabi_dcmpeq>
 80156e0:	ec4b ab19 	vmov	d9, sl, fp
 80156e4:	4680      	mov	r8, r0
 80156e6:	b158      	cbz	r0, 8015700 <_dtoa_r+0xe0>
 80156e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80156ea:	2301      	movs	r3, #1
 80156ec:	6013      	str	r3, [r2, #0]
 80156ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	f000 856b 	beq.w	80161cc <_dtoa_r+0xbac>
 80156f6:	4883      	ldr	r0, [pc, #524]	; (8015904 <_dtoa_r+0x2e4>)
 80156f8:	6018      	str	r0, [r3, #0]
 80156fa:	1e43      	subs	r3, r0, #1
 80156fc:	9301      	str	r3, [sp, #4]
 80156fe:	e7df      	b.n	80156c0 <_dtoa_r+0xa0>
 8015700:	ec4b ab10 	vmov	d0, sl, fp
 8015704:	aa10      	add	r2, sp, #64	; 0x40
 8015706:	a911      	add	r1, sp, #68	; 0x44
 8015708:	4620      	mov	r0, r4
 801570a:	f001 ff91 	bl	8017630 <__d2b>
 801570e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8015712:	ee08 0a10 	vmov	s16, r0
 8015716:	2d00      	cmp	r5, #0
 8015718:	f000 8084 	beq.w	8015824 <_dtoa_r+0x204>
 801571c:	ee19 3a90 	vmov	r3, s19
 8015720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015724:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015728:	4656      	mov	r6, sl
 801572a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801572e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015732:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8015736:	4b74      	ldr	r3, [pc, #464]	; (8015908 <_dtoa_r+0x2e8>)
 8015738:	2200      	movs	r2, #0
 801573a:	4630      	mov	r0, r6
 801573c:	4639      	mov	r1, r7
 801573e:	f7ea fdc3 	bl	80002c8 <__aeabi_dsub>
 8015742:	a365      	add	r3, pc, #404	; (adr r3, 80158d8 <_dtoa_r+0x2b8>)
 8015744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015748:	f7ea ff76 	bl	8000638 <__aeabi_dmul>
 801574c:	a364      	add	r3, pc, #400	; (adr r3, 80158e0 <_dtoa_r+0x2c0>)
 801574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015752:	f7ea fdbb 	bl	80002cc <__adddf3>
 8015756:	4606      	mov	r6, r0
 8015758:	4628      	mov	r0, r5
 801575a:	460f      	mov	r7, r1
 801575c:	f7ea ff02 	bl	8000564 <__aeabi_i2d>
 8015760:	a361      	add	r3, pc, #388	; (adr r3, 80158e8 <_dtoa_r+0x2c8>)
 8015762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015766:	f7ea ff67 	bl	8000638 <__aeabi_dmul>
 801576a:	4602      	mov	r2, r0
 801576c:	460b      	mov	r3, r1
 801576e:	4630      	mov	r0, r6
 8015770:	4639      	mov	r1, r7
 8015772:	f7ea fdab 	bl	80002cc <__adddf3>
 8015776:	4606      	mov	r6, r0
 8015778:	460f      	mov	r7, r1
 801577a:	f7eb fa0d 	bl	8000b98 <__aeabi_d2iz>
 801577e:	2200      	movs	r2, #0
 8015780:	9000      	str	r0, [sp, #0]
 8015782:	2300      	movs	r3, #0
 8015784:	4630      	mov	r0, r6
 8015786:	4639      	mov	r1, r7
 8015788:	f7eb f9c8 	bl	8000b1c <__aeabi_dcmplt>
 801578c:	b150      	cbz	r0, 80157a4 <_dtoa_r+0x184>
 801578e:	9800      	ldr	r0, [sp, #0]
 8015790:	f7ea fee8 	bl	8000564 <__aeabi_i2d>
 8015794:	4632      	mov	r2, r6
 8015796:	463b      	mov	r3, r7
 8015798:	f7eb f9b6 	bl	8000b08 <__aeabi_dcmpeq>
 801579c:	b910      	cbnz	r0, 80157a4 <_dtoa_r+0x184>
 801579e:	9b00      	ldr	r3, [sp, #0]
 80157a0:	3b01      	subs	r3, #1
 80157a2:	9300      	str	r3, [sp, #0]
 80157a4:	9b00      	ldr	r3, [sp, #0]
 80157a6:	2b16      	cmp	r3, #22
 80157a8:	d85a      	bhi.n	8015860 <_dtoa_r+0x240>
 80157aa:	9a00      	ldr	r2, [sp, #0]
 80157ac:	4b57      	ldr	r3, [pc, #348]	; (801590c <_dtoa_r+0x2ec>)
 80157ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80157b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b6:	ec51 0b19 	vmov	r0, r1, d9
 80157ba:	f7eb f9af 	bl	8000b1c <__aeabi_dcmplt>
 80157be:	2800      	cmp	r0, #0
 80157c0:	d050      	beq.n	8015864 <_dtoa_r+0x244>
 80157c2:	9b00      	ldr	r3, [sp, #0]
 80157c4:	3b01      	subs	r3, #1
 80157c6:	9300      	str	r3, [sp, #0]
 80157c8:	2300      	movs	r3, #0
 80157ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80157cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80157ce:	1b5d      	subs	r5, r3, r5
 80157d0:	1e6b      	subs	r3, r5, #1
 80157d2:	9305      	str	r3, [sp, #20]
 80157d4:	bf45      	ittet	mi
 80157d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80157da:	9304      	strmi	r3, [sp, #16]
 80157dc:	2300      	movpl	r3, #0
 80157de:	2300      	movmi	r3, #0
 80157e0:	bf4c      	ite	mi
 80157e2:	9305      	strmi	r3, [sp, #20]
 80157e4:	9304      	strpl	r3, [sp, #16]
 80157e6:	9b00      	ldr	r3, [sp, #0]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	db3d      	blt.n	8015868 <_dtoa_r+0x248>
 80157ec:	9b05      	ldr	r3, [sp, #20]
 80157ee:	9a00      	ldr	r2, [sp, #0]
 80157f0:	920a      	str	r2, [sp, #40]	; 0x28
 80157f2:	4413      	add	r3, r2
 80157f4:	9305      	str	r3, [sp, #20]
 80157f6:	2300      	movs	r3, #0
 80157f8:	9307      	str	r3, [sp, #28]
 80157fa:	9b06      	ldr	r3, [sp, #24]
 80157fc:	2b09      	cmp	r3, #9
 80157fe:	f200 8089 	bhi.w	8015914 <_dtoa_r+0x2f4>
 8015802:	2b05      	cmp	r3, #5
 8015804:	bfc4      	itt	gt
 8015806:	3b04      	subgt	r3, #4
 8015808:	9306      	strgt	r3, [sp, #24]
 801580a:	9b06      	ldr	r3, [sp, #24]
 801580c:	f1a3 0302 	sub.w	r3, r3, #2
 8015810:	bfcc      	ite	gt
 8015812:	2500      	movgt	r5, #0
 8015814:	2501      	movle	r5, #1
 8015816:	2b03      	cmp	r3, #3
 8015818:	f200 8087 	bhi.w	801592a <_dtoa_r+0x30a>
 801581c:	e8df f003 	tbb	[pc, r3]
 8015820:	59383a2d 	.word	0x59383a2d
 8015824:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015828:	441d      	add	r5, r3
 801582a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801582e:	2b20      	cmp	r3, #32
 8015830:	bfc1      	itttt	gt
 8015832:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015836:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801583a:	fa0b f303 	lslgt.w	r3, fp, r3
 801583e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015842:	bfda      	itte	le
 8015844:	f1c3 0320 	rsble	r3, r3, #32
 8015848:	fa06 f003 	lslle.w	r0, r6, r3
 801584c:	4318      	orrgt	r0, r3
 801584e:	f7ea fe79 	bl	8000544 <__aeabi_ui2d>
 8015852:	2301      	movs	r3, #1
 8015854:	4606      	mov	r6, r0
 8015856:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801585a:	3d01      	subs	r5, #1
 801585c:	930e      	str	r3, [sp, #56]	; 0x38
 801585e:	e76a      	b.n	8015736 <_dtoa_r+0x116>
 8015860:	2301      	movs	r3, #1
 8015862:	e7b2      	b.n	80157ca <_dtoa_r+0x1aa>
 8015864:	900b      	str	r0, [sp, #44]	; 0x2c
 8015866:	e7b1      	b.n	80157cc <_dtoa_r+0x1ac>
 8015868:	9b04      	ldr	r3, [sp, #16]
 801586a:	9a00      	ldr	r2, [sp, #0]
 801586c:	1a9b      	subs	r3, r3, r2
 801586e:	9304      	str	r3, [sp, #16]
 8015870:	4253      	negs	r3, r2
 8015872:	9307      	str	r3, [sp, #28]
 8015874:	2300      	movs	r3, #0
 8015876:	930a      	str	r3, [sp, #40]	; 0x28
 8015878:	e7bf      	b.n	80157fa <_dtoa_r+0x1da>
 801587a:	2300      	movs	r3, #0
 801587c:	9308      	str	r3, [sp, #32]
 801587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015880:	2b00      	cmp	r3, #0
 8015882:	dc55      	bgt.n	8015930 <_dtoa_r+0x310>
 8015884:	2301      	movs	r3, #1
 8015886:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801588a:	461a      	mov	r2, r3
 801588c:	9209      	str	r2, [sp, #36]	; 0x24
 801588e:	e00c      	b.n	80158aa <_dtoa_r+0x28a>
 8015890:	2301      	movs	r3, #1
 8015892:	e7f3      	b.n	801587c <_dtoa_r+0x25c>
 8015894:	2300      	movs	r3, #0
 8015896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015898:	9308      	str	r3, [sp, #32]
 801589a:	9b00      	ldr	r3, [sp, #0]
 801589c:	4413      	add	r3, r2
 801589e:	9302      	str	r3, [sp, #8]
 80158a0:	3301      	adds	r3, #1
 80158a2:	2b01      	cmp	r3, #1
 80158a4:	9303      	str	r3, [sp, #12]
 80158a6:	bfb8      	it	lt
 80158a8:	2301      	movlt	r3, #1
 80158aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80158ac:	2200      	movs	r2, #0
 80158ae:	6042      	str	r2, [r0, #4]
 80158b0:	2204      	movs	r2, #4
 80158b2:	f102 0614 	add.w	r6, r2, #20
 80158b6:	429e      	cmp	r6, r3
 80158b8:	6841      	ldr	r1, [r0, #4]
 80158ba:	d93d      	bls.n	8015938 <_dtoa_r+0x318>
 80158bc:	4620      	mov	r0, r4
 80158be:	f001 fac9 	bl	8016e54 <_Balloc>
 80158c2:	9001      	str	r0, [sp, #4]
 80158c4:	2800      	cmp	r0, #0
 80158c6:	d13b      	bne.n	8015940 <_dtoa_r+0x320>
 80158c8:	4b11      	ldr	r3, [pc, #68]	; (8015910 <_dtoa_r+0x2f0>)
 80158ca:	4602      	mov	r2, r0
 80158cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80158d0:	e6c0      	b.n	8015654 <_dtoa_r+0x34>
 80158d2:	2301      	movs	r3, #1
 80158d4:	e7df      	b.n	8015896 <_dtoa_r+0x276>
 80158d6:	bf00      	nop
 80158d8:	636f4361 	.word	0x636f4361
 80158dc:	3fd287a7 	.word	0x3fd287a7
 80158e0:	8b60c8b3 	.word	0x8b60c8b3
 80158e4:	3fc68a28 	.word	0x3fc68a28
 80158e8:	509f79fb 	.word	0x509f79fb
 80158ec:	3fd34413 	.word	0x3fd34413
 80158f0:	08049400 	.word	0x08049400
 80158f4:	08049a26 	.word	0x08049a26
 80158f8:	7ff00000 	.word	0x7ff00000
 80158fc:	08049a22 	.word	0x08049a22
 8015900:	08049a19 	.word	0x08049a19
 8015904:	08049d31 	.word	0x08049d31
 8015908:	3ff80000 	.word	0x3ff80000
 801590c:	08049c58 	.word	0x08049c58
 8015910:	08049a81 	.word	0x08049a81
 8015914:	2501      	movs	r5, #1
 8015916:	2300      	movs	r3, #0
 8015918:	9306      	str	r3, [sp, #24]
 801591a:	9508      	str	r5, [sp, #32]
 801591c:	f04f 33ff 	mov.w	r3, #4294967295
 8015920:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015924:	2200      	movs	r2, #0
 8015926:	2312      	movs	r3, #18
 8015928:	e7b0      	b.n	801588c <_dtoa_r+0x26c>
 801592a:	2301      	movs	r3, #1
 801592c:	9308      	str	r3, [sp, #32]
 801592e:	e7f5      	b.n	801591c <_dtoa_r+0x2fc>
 8015930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015932:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015936:	e7b8      	b.n	80158aa <_dtoa_r+0x28a>
 8015938:	3101      	adds	r1, #1
 801593a:	6041      	str	r1, [r0, #4]
 801593c:	0052      	lsls	r2, r2, #1
 801593e:	e7b8      	b.n	80158b2 <_dtoa_r+0x292>
 8015940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015942:	9a01      	ldr	r2, [sp, #4]
 8015944:	601a      	str	r2, [r3, #0]
 8015946:	9b03      	ldr	r3, [sp, #12]
 8015948:	2b0e      	cmp	r3, #14
 801594a:	f200 809d 	bhi.w	8015a88 <_dtoa_r+0x468>
 801594e:	2d00      	cmp	r5, #0
 8015950:	f000 809a 	beq.w	8015a88 <_dtoa_r+0x468>
 8015954:	9b00      	ldr	r3, [sp, #0]
 8015956:	2b00      	cmp	r3, #0
 8015958:	dd32      	ble.n	80159c0 <_dtoa_r+0x3a0>
 801595a:	4ab7      	ldr	r2, [pc, #732]	; (8015c38 <_dtoa_r+0x618>)
 801595c:	f003 030f 	and.w	r3, r3, #15
 8015960:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015968:	9b00      	ldr	r3, [sp, #0]
 801596a:	05d8      	lsls	r0, r3, #23
 801596c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015970:	d516      	bpl.n	80159a0 <_dtoa_r+0x380>
 8015972:	4bb2      	ldr	r3, [pc, #712]	; (8015c3c <_dtoa_r+0x61c>)
 8015974:	ec51 0b19 	vmov	r0, r1, d9
 8015978:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801597c:	f7ea ff86 	bl	800088c <__aeabi_ddiv>
 8015980:	f007 070f 	and.w	r7, r7, #15
 8015984:	4682      	mov	sl, r0
 8015986:	468b      	mov	fp, r1
 8015988:	2503      	movs	r5, #3
 801598a:	4eac      	ldr	r6, [pc, #688]	; (8015c3c <_dtoa_r+0x61c>)
 801598c:	b957      	cbnz	r7, 80159a4 <_dtoa_r+0x384>
 801598e:	4642      	mov	r2, r8
 8015990:	464b      	mov	r3, r9
 8015992:	4650      	mov	r0, sl
 8015994:	4659      	mov	r1, fp
 8015996:	f7ea ff79 	bl	800088c <__aeabi_ddiv>
 801599a:	4682      	mov	sl, r0
 801599c:	468b      	mov	fp, r1
 801599e:	e028      	b.n	80159f2 <_dtoa_r+0x3d2>
 80159a0:	2502      	movs	r5, #2
 80159a2:	e7f2      	b.n	801598a <_dtoa_r+0x36a>
 80159a4:	07f9      	lsls	r1, r7, #31
 80159a6:	d508      	bpl.n	80159ba <_dtoa_r+0x39a>
 80159a8:	4640      	mov	r0, r8
 80159aa:	4649      	mov	r1, r9
 80159ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80159b0:	f7ea fe42 	bl	8000638 <__aeabi_dmul>
 80159b4:	3501      	adds	r5, #1
 80159b6:	4680      	mov	r8, r0
 80159b8:	4689      	mov	r9, r1
 80159ba:	107f      	asrs	r7, r7, #1
 80159bc:	3608      	adds	r6, #8
 80159be:	e7e5      	b.n	801598c <_dtoa_r+0x36c>
 80159c0:	f000 809b 	beq.w	8015afa <_dtoa_r+0x4da>
 80159c4:	9b00      	ldr	r3, [sp, #0]
 80159c6:	4f9d      	ldr	r7, [pc, #628]	; (8015c3c <_dtoa_r+0x61c>)
 80159c8:	425e      	negs	r6, r3
 80159ca:	4b9b      	ldr	r3, [pc, #620]	; (8015c38 <_dtoa_r+0x618>)
 80159cc:	f006 020f 	and.w	r2, r6, #15
 80159d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80159d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d8:	ec51 0b19 	vmov	r0, r1, d9
 80159dc:	f7ea fe2c 	bl	8000638 <__aeabi_dmul>
 80159e0:	1136      	asrs	r6, r6, #4
 80159e2:	4682      	mov	sl, r0
 80159e4:	468b      	mov	fp, r1
 80159e6:	2300      	movs	r3, #0
 80159e8:	2502      	movs	r5, #2
 80159ea:	2e00      	cmp	r6, #0
 80159ec:	d17a      	bne.n	8015ae4 <_dtoa_r+0x4c4>
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d1d3      	bne.n	801599a <_dtoa_r+0x37a>
 80159f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	f000 8082 	beq.w	8015afe <_dtoa_r+0x4de>
 80159fa:	4b91      	ldr	r3, [pc, #580]	; (8015c40 <_dtoa_r+0x620>)
 80159fc:	2200      	movs	r2, #0
 80159fe:	4650      	mov	r0, sl
 8015a00:	4659      	mov	r1, fp
 8015a02:	f7eb f88b 	bl	8000b1c <__aeabi_dcmplt>
 8015a06:	2800      	cmp	r0, #0
 8015a08:	d079      	beq.n	8015afe <_dtoa_r+0x4de>
 8015a0a:	9b03      	ldr	r3, [sp, #12]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d076      	beq.n	8015afe <_dtoa_r+0x4de>
 8015a10:	9b02      	ldr	r3, [sp, #8]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	dd36      	ble.n	8015a84 <_dtoa_r+0x464>
 8015a16:	9b00      	ldr	r3, [sp, #0]
 8015a18:	4650      	mov	r0, sl
 8015a1a:	4659      	mov	r1, fp
 8015a1c:	1e5f      	subs	r7, r3, #1
 8015a1e:	2200      	movs	r2, #0
 8015a20:	4b88      	ldr	r3, [pc, #544]	; (8015c44 <_dtoa_r+0x624>)
 8015a22:	f7ea fe09 	bl	8000638 <__aeabi_dmul>
 8015a26:	9e02      	ldr	r6, [sp, #8]
 8015a28:	4682      	mov	sl, r0
 8015a2a:	468b      	mov	fp, r1
 8015a2c:	3501      	adds	r5, #1
 8015a2e:	4628      	mov	r0, r5
 8015a30:	f7ea fd98 	bl	8000564 <__aeabi_i2d>
 8015a34:	4652      	mov	r2, sl
 8015a36:	465b      	mov	r3, fp
 8015a38:	f7ea fdfe 	bl	8000638 <__aeabi_dmul>
 8015a3c:	4b82      	ldr	r3, [pc, #520]	; (8015c48 <_dtoa_r+0x628>)
 8015a3e:	2200      	movs	r2, #0
 8015a40:	f7ea fc44 	bl	80002cc <__adddf3>
 8015a44:	46d0      	mov	r8, sl
 8015a46:	46d9      	mov	r9, fp
 8015a48:	4682      	mov	sl, r0
 8015a4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015a4e:	2e00      	cmp	r6, #0
 8015a50:	d158      	bne.n	8015b04 <_dtoa_r+0x4e4>
 8015a52:	4b7e      	ldr	r3, [pc, #504]	; (8015c4c <_dtoa_r+0x62c>)
 8015a54:	2200      	movs	r2, #0
 8015a56:	4640      	mov	r0, r8
 8015a58:	4649      	mov	r1, r9
 8015a5a:	f7ea fc35 	bl	80002c8 <__aeabi_dsub>
 8015a5e:	4652      	mov	r2, sl
 8015a60:	465b      	mov	r3, fp
 8015a62:	4680      	mov	r8, r0
 8015a64:	4689      	mov	r9, r1
 8015a66:	f7eb f877 	bl	8000b58 <__aeabi_dcmpgt>
 8015a6a:	2800      	cmp	r0, #0
 8015a6c:	f040 8295 	bne.w	8015f9a <_dtoa_r+0x97a>
 8015a70:	4652      	mov	r2, sl
 8015a72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015a76:	4640      	mov	r0, r8
 8015a78:	4649      	mov	r1, r9
 8015a7a:	f7eb f84f 	bl	8000b1c <__aeabi_dcmplt>
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	f040 8289 	bne.w	8015f96 <_dtoa_r+0x976>
 8015a84:	ec5b ab19 	vmov	sl, fp, d9
 8015a88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	f2c0 8148 	blt.w	8015d20 <_dtoa_r+0x700>
 8015a90:	9a00      	ldr	r2, [sp, #0]
 8015a92:	2a0e      	cmp	r2, #14
 8015a94:	f300 8144 	bgt.w	8015d20 <_dtoa_r+0x700>
 8015a98:	4b67      	ldr	r3, [pc, #412]	; (8015c38 <_dtoa_r+0x618>)
 8015a9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	f280 80d5 	bge.w	8015c54 <_dtoa_r+0x634>
 8015aaa:	9b03      	ldr	r3, [sp, #12]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	f300 80d1 	bgt.w	8015c54 <_dtoa_r+0x634>
 8015ab2:	f040 826f 	bne.w	8015f94 <_dtoa_r+0x974>
 8015ab6:	4b65      	ldr	r3, [pc, #404]	; (8015c4c <_dtoa_r+0x62c>)
 8015ab8:	2200      	movs	r2, #0
 8015aba:	4640      	mov	r0, r8
 8015abc:	4649      	mov	r1, r9
 8015abe:	f7ea fdbb 	bl	8000638 <__aeabi_dmul>
 8015ac2:	4652      	mov	r2, sl
 8015ac4:	465b      	mov	r3, fp
 8015ac6:	f7eb f83d 	bl	8000b44 <__aeabi_dcmpge>
 8015aca:	9e03      	ldr	r6, [sp, #12]
 8015acc:	4637      	mov	r7, r6
 8015ace:	2800      	cmp	r0, #0
 8015ad0:	f040 8245 	bne.w	8015f5e <_dtoa_r+0x93e>
 8015ad4:	9d01      	ldr	r5, [sp, #4]
 8015ad6:	2331      	movs	r3, #49	; 0x31
 8015ad8:	f805 3b01 	strb.w	r3, [r5], #1
 8015adc:	9b00      	ldr	r3, [sp, #0]
 8015ade:	3301      	adds	r3, #1
 8015ae0:	9300      	str	r3, [sp, #0]
 8015ae2:	e240      	b.n	8015f66 <_dtoa_r+0x946>
 8015ae4:	07f2      	lsls	r2, r6, #31
 8015ae6:	d505      	bpl.n	8015af4 <_dtoa_r+0x4d4>
 8015ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015aec:	f7ea fda4 	bl	8000638 <__aeabi_dmul>
 8015af0:	3501      	adds	r5, #1
 8015af2:	2301      	movs	r3, #1
 8015af4:	1076      	asrs	r6, r6, #1
 8015af6:	3708      	adds	r7, #8
 8015af8:	e777      	b.n	80159ea <_dtoa_r+0x3ca>
 8015afa:	2502      	movs	r5, #2
 8015afc:	e779      	b.n	80159f2 <_dtoa_r+0x3d2>
 8015afe:	9f00      	ldr	r7, [sp, #0]
 8015b00:	9e03      	ldr	r6, [sp, #12]
 8015b02:	e794      	b.n	8015a2e <_dtoa_r+0x40e>
 8015b04:	9901      	ldr	r1, [sp, #4]
 8015b06:	4b4c      	ldr	r3, [pc, #304]	; (8015c38 <_dtoa_r+0x618>)
 8015b08:	4431      	add	r1, r6
 8015b0a:	910d      	str	r1, [sp, #52]	; 0x34
 8015b0c:	9908      	ldr	r1, [sp, #32]
 8015b0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015b12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015b16:	2900      	cmp	r1, #0
 8015b18:	d043      	beq.n	8015ba2 <_dtoa_r+0x582>
 8015b1a:	494d      	ldr	r1, [pc, #308]	; (8015c50 <_dtoa_r+0x630>)
 8015b1c:	2000      	movs	r0, #0
 8015b1e:	f7ea feb5 	bl	800088c <__aeabi_ddiv>
 8015b22:	4652      	mov	r2, sl
 8015b24:	465b      	mov	r3, fp
 8015b26:	f7ea fbcf 	bl	80002c8 <__aeabi_dsub>
 8015b2a:	9d01      	ldr	r5, [sp, #4]
 8015b2c:	4682      	mov	sl, r0
 8015b2e:	468b      	mov	fp, r1
 8015b30:	4649      	mov	r1, r9
 8015b32:	4640      	mov	r0, r8
 8015b34:	f7eb f830 	bl	8000b98 <__aeabi_d2iz>
 8015b38:	4606      	mov	r6, r0
 8015b3a:	f7ea fd13 	bl	8000564 <__aeabi_i2d>
 8015b3e:	4602      	mov	r2, r0
 8015b40:	460b      	mov	r3, r1
 8015b42:	4640      	mov	r0, r8
 8015b44:	4649      	mov	r1, r9
 8015b46:	f7ea fbbf 	bl	80002c8 <__aeabi_dsub>
 8015b4a:	3630      	adds	r6, #48	; 0x30
 8015b4c:	f805 6b01 	strb.w	r6, [r5], #1
 8015b50:	4652      	mov	r2, sl
 8015b52:	465b      	mov	r3, fp
 8015b54:	4680      	mov	r8, r0
 8015b56:	4689      	mov	r9, r1
 8015b58:	f7ea ffe0 	bl	8000b1c <__aeabi_dcmplt>
 8015b5c:	2800      	cmp	r0, #0
 8015b5e:	d163      	bne.n	8015c28 <_dtoa_r+0x608>
 8015b60:	4642      	mov	r2, r8
 8015b62:	464b      	mov	r3, r9
 8015b64:	4936      	ldr	r1, [pc, #216]	; (8015c40 <_dtoa_r+0x620>)
 8015b66:	2000      	movs	r0, #0
 8015b68:	f7ea fbae 	bl	80002c8 <__aeabi_dsub>
 8015b6c:	4652      	mov	r2, sl
 8015b6e:	465b      	mov	r3, fp
 8015b70:	f7ea ffd4 	bl	8000b1c <__aeabi_dcmplt>
 8015b74:	2800      	cmp	r0, #0
 8015b76:	f040 80b5 	bne.w	8015ce4 <_dtoa_r+0x6c4>
 8015b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b7c:	429d      	cmp	r5, r3
 8015b7e:	d081      	beq.n	8015a84 <_dtoa_r+0x464>
 8015b80:	4b30      	ldr	r3, [pc, #192]	; (8015c44 <_dtoa_r+0x624>)
 8015b82:	2200      	movs	r2, #0
 8015b84:	4650      	mov	r0, sl
 8015b86:	4659      	mov	r1, fp
 8015b88:	f7ea fd56 	bl	8000638 <__aeabi_dmul>
 8015b8c:	4b2d      	ldr	r3, [pc, #180]	; (8015c44 <_dtoa_r+0x624>)
 8015b8e:	4682      	mov	sl, r0
 8015b90:	468b      	mov	fp, r1
 8015b92:	4640      	mov	r0, r8
 8015b94:	4649      	mov	r1, r9
 8015b96:	2200      	movs	r2, #0
 8015b98:	f7ea fd4e 	bl	8000638 <__aeabi_dmul>
 8015b9c:	4680      	mov	r8, r0
 8015b9e:	4689      	mov	r9, r1
 8015ba0:	e7c6      	b.n	8015b30 <_dtoa_r+0x510>
 8015ba2:	4650      	mov	r0, sl
 8015ba4:	4659      	mov	r1, fp
 8015ba6:	f7ea fd47 	bl	8000638 <__aeabi_dmul>
 8015baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015bac:	9d01      	ldr	r5, [sp, #4]
 8015bae:	930f      	str	r3, [sp, #60]	; 0x3c
 8015bb0:	4682      	mov	sl, r0
 8015bb2:	468b      	mov	fp, r1
 8015bb4:	4649      	mov	r1, r9
 8015bb6:	4640      	mov	r0, r8
 8015bb8:	f7ea ffee 	bl	8000b98 <__aeabi_d2iz>
 8015bbc:	4606      	mov	r6, r0
 8015bbe:	f7ea fcd1 	bl	8000564 <__aeabi_i2d>
 8015bc2:	3630      	adds	r6, #48	; 0x30
 8015bc4:	4602      	mov	r2, r0
 8015bc6:	460b      	mov	r3, r1
 8015bc8:	4640      	mov	r0, r8
 8015bca:	4649      	mov	r1, r9
 8015bcc:	f7ea fb7c 	bl	80002c8 <__aeabi_dsub>
 8015bd0:	f805 6b01 	strb.w	r6, [r5], #1
 8015bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015bd6:	429d      	cmp	r5, r3
 8015bd8:	4680      	mov	r8, r0
 8015bda:	4689      	mov	r9, r1
 8015bdc:	f04f 0200 	mov.w	r2, #0
 8015be0:	d124      	bne.n	8015c2c <_dtoa_r+0x60c>
 8015be2:	4b1b      	ldr	r3, [pc, #108]	; (8015c50 <_dtoa_r+0x630>)
 8015be4:	4650      	mov	r0, sl
 8015be6:	4659      	mov	r1, fp
 8015be8:	f7ea fb70 	bl	80002cc <__adddf3>
 8015bec:	4602      	mov	r2, r0
 8015bee:	460b      	mov	r3, r1
 8015bf0:	4640      	mov	r0, r8
 8015bf2:	4649      	mov	r1, r9
 8015bf4:	f7ea ffb0 	bl	8000b58 <__aeabi_dcmpgt>
 8015bf8:	2800      	cmp	r0, #0
 8015bfa:	d173      	bne.n	8015ce4 <_dtoa_r+0x6c4>
 8015bfc:	4652      	mov	r2, sl
 8015bfe:	465b      	mov	r3, fp
 8015c00:	4913      	ldr	r1, [pc, #76]	; (8015c50 <_dtoa_r+0x630>)
 8015c02:	2000      	movs	r0, #0
 8015c04:	f7ea fb60 	bl	80002c8 <__aeabi_dsub>
 8015c08:	4602      	mov	r2, r0
 8015c0a:	460b      	mov	r3, r1
 8015c0c:	4640      	mov	r0, r8
 8015c0e:	4649      	mov	r1, r9
 8015c10:	f7ea ff84 	bl	8000b1c <__aeabi_dcmplt>
 8015c14:	2800      	cmp	r0, #0
 8015c16:	f43f af35 	beq.w	8015a84 <_dtoa_r+0x464>
 8015c1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015c1c:	1e6b      	subs	r3, r5, #1
 8015c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015c24:	2b30      	cmp	r3, #48	; 0x30
 8015c26:	d0f8      	beq.n	8015c1a <_dtoa_r+0x5fa>
 8015c28:	9700      	str	r7, [sp, #0]
 8015c2a:	e049      	b.n	8015cc0 <_dtoa_r+0x6a0>
 8015c2c:	4b05      	ldr	r3, [pc, #20]	; (8015c44 <_dtoa_r+0x624>)
 8015c2e:	f7ea fd03 	bl	8000638 <__aeabi_dmul>
 8015c32:	4680      	mov	r8, r0
 8015c34:	4689      	mov	r9, r1
 8015c36:	e7bd      	b.n	8015bb4 <_dtoa_r+0x594>
 8015c38:	08049c58 	.word	0x08049c58
 8015c3c:	08049c30 	.word	0x08049c30
 8015c40:	3ff00000 	.word	0x3ff00000
 8015c44:	40240000 	.word	0x40240000
 8015c48:	401c0000 	.word	0x401c0000
 8015c4c:	40140000 	.word	0x40140000
 8015c50:	3fe00000 	.word	0x3fe00000
 8015c54:	9d01      	ldr	r5, [sp, #4]
 8015c56:	4656      	mov	r6, sl
 8015c58:	465f      	mov	r7, fp
 8015c5a:	4642      	mov	r2, r8
 8015c5c:	464b      	mov	r3, r9
 8015c5e:	4630      	mov	r0, r6
 8015c60:	4639      	mov	r1, r7
 8015c62:	f7ea fe13 	bl	800088c <__aeabi_ddiv>
 8015c66:	f7ea ff97 	bl	8000b98 <__aeabi_d2iz>
 8015c6a:	4682      	mov	sl, r0
 8015c6c:	f7ea fc7a 	bl	8000564 <__aeabi_i2d>
 8015c70:	4642      	mov	r2, r8
 8015c72:	464b      	mov	r3, r9
 8015c74:	f7ea fce0 	bl	8000638 <__aeabi_dmul>
 8015c78:	4602      	mov	r2, r0
 8015c7a:	460b      	mov	r3, r1
 8015c7c:	4630      	mov	r0, r6
 8015c7e:	4639      	mov	r1, r7
 8015c80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015c84:	f7ea fb20 	bl	80002c8 <__aeabi_dsub>
 8015c88:	f805 6b01 	strb.w	r6, [r5], #1
 8015c8c:	9e01      	ldr	r6, [sp, #4]
 8015c8e:	9f03      	ldr	r7, [sp, #12]
 8015c90:	1bae      	subs	r6, r5, r6
 8015c92:	42b7      	cmp	r7, r6
 8015c94:	4602      	mov	r2, r0
 8015c96:	460b      	mov	r3, r1
 8015c98:	d135      	bne.n	8015d06 <_dtoa_r+0x6e6>
 8015c9a:	f7ea fb17 	bl	80002cc <__adddf3>
 8015c9e:	4642      	mov	r2, r8
 8015ca0:	464b      	mov	r3, r9
 8015ca2:	4606      	mov	r6, r0
 8015ca4:	460f      	mov	r7, r1
 8015ca6:	f7ea ff57 	bl	8000b58 <__aeabi_dcmpgt>
 8015caa:	b9d0      	cbnz	r0, 8015ce2 <_dtoa_r+0x6c2>
 8015cac:	4642      	mov	r2, r8
 8015cae:	464b      	mov	r3, r9
 8015cb0:	4630      	mov	r0, r6
 8015cb2:	4639      	mov	r1, r7
 8015cb4:	f7ea ff28 	bl	8000b08 <__aeabi_dcmpeq>
 8015cb8:	b110      	cbz	r0, 8015cc0 <_dtoa_r+0x6a0>
 8015cba:	f01a 0f01 	tst.w	sl, #1
 8015cbe:	d110      	bne.n	8015ce2 <_dtoa_r+0x6c2>
 8015cc0:	4620      	mov	r0, r4
 8015cc2:	ee18 1a10 	vmov	r1, s16
 8015cc6:	f001 f905 	bl	8016ed4 <_Bfree>
 8015cca:	2300      	movs	r3, #0
 8015ccc:	9800      	ldr	r0, [sp, #0]
 8015cce:	702b      	strb	r3, [r5, #0]
 8015cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cd2:	3001      	adds	r0, #1
 8015cd4:	6018      	str	r0, [r3, #0]
 8015cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	f43f acf1 	beq.w	80156c0 <_dtoa_r+0xa0>
 8015cde:	601d      	str	r5, [r3, #0]
 8015ce0:	e4ee      	b.n	80156c0 <_dtoa_r+0xa0>
 8015ce2:	9f00      	ldr	r7, [sp, #0]
 8015ce4:	462b      	mov	r3, r5
 8015ce6:	461d      	mov	r5, r3
 8015ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015cec:	2a39      	cmp	r2, #57	; 0x39
 8015cee:	d106      	bne.n	8015cfe <_dtoa_r+0x6de>
 8015cf0:	9a01      	ldr	r2, [sp, #4]
 8015cf2:	429a      	cmp	r2, r3
 8015cf4:	d1f7      	bne.n	8015ce6 <_dtoa_r+0x6c6>
 8015cf6:	9901      	ldr	r1, [sp, #4]
 8015cf8:	2230      	movs	r2, #48	; 0x30
 8015cfa:	3701      	adds	r7, #1
 8015cfc:	700a      	strb	r2, [r1, #0]
 8015cfe:	781a      	ldrb	r2, [r3, #0]
 8015d00:	3201      	adds	r2, #1
 8015d02:	701a      	strb	r2, [r3, #0]
 8015d04:	e790      	b.n	8015c28 <_dtoa_r+0x608>
 8015d06:	4ba6      	ldr	r3, [pc, #664]	; (8015fa0 <_dtoa_r+0x980>)
 8015d08:	2200      	movs	r2, #0
 8015d0a:	f7ea fc95 	bl	8000638 <__aeabi_dmul>
 8015d0e:	2200      	movs	r2, #0
 8015d10:	2300      	movs	r3, #0
 8015d12:	4606      	mov	r6, r0
 8015d14:	460f      	mov	r7, r1
 8015d16:	f7ea fef7 	bl	8000b08 <__aeabi_dcmpeq>
 8015d1a:	2800      	cmp	r0, #0
 8015d1c:	d09d      	beq.n	8015c5a <_dtoa_r+0x63a>
 8015d1e:	e7cf      	b.n	8015cc0 <_dtoa_r+0x6a0>
 8015d20:	9a08      	ldr	r2, [sp, #32]
 8015d22:	2a00      	cmp	r2, #0
 8015d24:	f000 80d7 	beq.w	8015ed6 <_dtoa_r+0x8b6>
 8015d28:	9a06      	ldr	r2, [sp, #24]
 8015d2a:	2a01      	cmp	r2, #1
 8015d2c:	f300 80ba 	bgt.w	8015ea4 <_dtoa_r+0x884>
 8015d30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015d32:	2a00      	cmp	r2, #0
 8015d34:	f000 80b2 	beq.w	8015e9c <_dtoa_r+0x87c>
 8015d38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015d3c:	9e07      	ldr	r6, [sp, #28]
 8015d3e:	9d04      	ldr	r5, [sp, #16]
 8015d40:	9a04      	ldr	r2, [sp, #16]
 8015d42:	441a      	add	r2, r3
 8015d44:	9204      	str	r2, [sp, #16]
 8015d46:	9a05      	ldr	r2, [sp, #20]
 8015d48:	2101      	movs	r1, #1
 8015d4a:	441a      	add	r2, r3
 8015d4c:	4620      	mov	r0, r4
 8015d4e:	9205      	str	r2, [sp, #20]
 8015d50:	f001 f9c2 	bl	80170d8 <__i2b>
 8015d54:	4607      	mov	r7, r0
 8015d56:	2d00      	cmp	r5, #0
 8015d58:	dd0c      	ble.n	8015d74 <_dtoa_r+0x754>
 8015d5a:	9b05      	ldr	r3, [sp, #20]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	dd09      	ble.n	8015d74 <_dtoa_r+0x754>
 8015d60:	42ab      	cmp	r3, r5
 8015d62:	9a04      	ldr	r2, [sp, #16]
 8015d64:	bfa8      	it	ge
 8015d66:	462b      	movge	r3, r5
 8015d68:	1ad2      	subs	r2, r2, r3
 8015d6a:	9204      	str	r2, [sp, #16]
 8015d6c:	9a05      	ldr	r2, [sp, #20]
 8015d6e:	1aed      	subs	r5, r5, r3
 8015d70:	1ad3      	subs	r3, r2, r3
 8015d72:	9305      	str	r3, [sp, #20]
 8015d74:	9b07      	ldr	r3, [sp, #28]
 8015d76:	b31b      	cbz	r3, 8015dc0 <_dtoa_r+0x7a0>
 8015d78:	9b08      	ldr	r3, [sp, #32]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	f000 80af 	beq.w	8015ede <_dtoa_r+0x8be>
 8015d80:	2e00      	cmp	r6, #0
 8015d82:	dd13      	ble.n	8015dac <_dtoa_r+0x78c>
 8015d84:	4639      	mov	r1, r7
 8015d86:	4632      	mov	r2, r6
 8015d88:	4620      	mov	r0, r4
 8015d8a:	f001 fa65 	bl	8017258 <__pow5mult>
 8015d8e:	ee18 2a10 	vmov	r2, s16
 8015d92:	4601      	mov	r1, r0
 8015d94:	4607      	mov	r7, r0
 8015d96:	4620      	mov	r0, r4
 8015d98:	f001 f9b4 	bl	8017104 <__multiply>
 8015d9c:	ee18 1a10 	vmov	r1, s16
 8015da0:	4680      	mov	r8, r0
 8015da2:	4620      	mov	r0, r4
 8015da4:	f001 f896 	bl	8016ed4 <_Bfree>
 8015da8:	ee08 8a10 	vmov	s16, r8
 8015dac:	9b07      	ldr	r3, [sp, #28]
 8015dae:	1b9a      	subs	r2, r3, r6
 8015db0:	d006      	beq.n	8015dc0 <_dtoa_r+0x7a0>
 8015db2:	ee18 1a10 	vmov	r1, s16
 8015db6:	4620      	mov	r0, r4
 8015db8:	f001 fa4e 	bl	8017258 <__pow5mult>
 8015dbc:	ee08 0a10 	vmov	s16, r0
 8015dc0:	2101      	movs	r1, #1
 8015dc2:	4620      	mov	r0, r4
 8015dc4:	f001 f988 	bl	80170d8 <__i2b>
 8015dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	4606      	mov	r6, r0
 8015dce:	f340 8088 	ble.w	8015ee2 <_dtoa_r+0x8c2>
 8015dd2:	461a      	mov	r2, r3
 8015dd4:	4601      	mov	r1, r0
 8015dd6:	4620      	mov	r0, r4
 8015dd8:	f001 fa3e 	bl	8017258 <__pow5mult>
 8015ddc:	9b06      	ldr	r3, [sp, #24]
 8015dde:	2b01      	cmp	r3, #1
 8015de0:	4606      	mov	r6, r0
 8015de2:	f340 8081 	ble.w	8015ee8 <_dtoa_r+0x8c8>
 8015de6:	f04f 0800 	mov.w	r8, #0
 8015dea:	6933      	ldr	r3, [r6, #16]
 8015dec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015df0:	6918      	ldr	r0, [r3, #16]
 8015df2:	f001 f921 	bl	8017038 <__hi0bits>
 8015df6:	f1c0 0020 	rsb	r0, r0, #32
 8015dfa:	9b05      	ldr	r3, [sp, #20]
 8015dfc:	4418      	add	r0, r3
 8015dfe:	f010 001f 	ands.w	r0, r0, #31
 8015e02:	f000 8092 	beq.w	8015f2a <_dtoa_r+0x90a>
 8015e06:	f1c0 0320 	rsb	r3, r0, #32
 8015e0a:	2b04      	cmp	r3, #4
 8015e0c:	f340 808a 	ble.w	8015f24 <_dtoa_r+0x904>
 8015e10:	f1c0 001c 	rsb	r0, r0, #28
 8015e14:	9b04      	ldr	r3, [sp, #16]
 8015e16:	4403      	add	r3, r0
 8015e18:	9304      	str	r3, [sp, #16]
 8015e1a:	9b05      	ldr	r3, [sp, #20]
 8015e1c:	4403      	add	r3, r0
 8015e1e:	4405      	add	r5, r0
 8015e20:	9305      	str	r3, [sp, #20]
 8015e22:	9b04      	ldr	r3, [sp, #16]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	dd07      	ble.n	8015e38 <_dtoa_r+0x818>
 8015e28:	ee18 1a10 	vmov	r1, s16
 8015e2c:	461a      	mov	r2, r3
 8015e2e:	4620      	mov	r0, r4
 8015e30:	f001 fa6c 	bl	801730c <__lshift>
 8015e34:	ee08 0a10 	vmov	s16, r0
 8015e38:	9b05      	ldr	r3, [sp, #20]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	dd05      	ble.n	8015e4a <_dtoa_r+0x82a>
 8015e3e:	4631      	mov	r1, r6
 8015e40:	461a      	mov	r2, r3
 8015e42:	4620      	mov	r0, r4
 8015e44:	f001 fa62 	bl	801730c <__lshift>
 8015e48:	4606      	mov	r6, r0
 8015e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d06e      	beq.n	8015f2e <_dtoa_r+0x90e>
 8015e50:	ee18 0a10 	vmov	r0, s16
 8015e54:	4631      	mov	r1, r6
 8015e56:	f001 fac9 	bl	80173ec <__mcmp>
 8015e5a:	2800      	cmp	r0, #0
 8015e5c:	da67      	bge.n	8015f2e <_dtoa_r+0x90e>
 8015e5e:	9b00      	ldr	r3, [sp, #0]
 8015e60:	3b01      	subs	r3, #1
 8015e62:	ee18 1a10 	vmov	r1, s16
 8015e66:	9300      	str	r3, [sp, #0]
 8015e68:	220a      	movs	r2, #10
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	f001 f853 	bl	8016f18 <__multadd>
 8015e72:	9b08      	ldr	r3, [sp, #32]
 8015e74:	ee08 0a10 	vmov	s16, r0
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	f000 81b1 	beq.w	80161e0 <_dtoa_r+0xbc0>
 8015e7e:	2300      	movs	r3, #0
 8015e80:	4639      	mov	r1, r7
 8015e82:	220a      	movs	r2, #10
 8015e84:	4620      	mov	r0, r4
 8015e86:	f001 f847 	bl	8016f18 <__multadd>
 8015e8a:	9b02      	ldr	r3, [sp, #8]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	4607      	mov	r7, r0
 8015e90:	f300 808e 	bgt.w	8015fb0 <_dtoa_r+0x990>
 8015e94:	9b06      	ldr	r3, [sp, #24]
 8015e96:	2b02      	cmp	r3, #2
 8015e98:	dc51      	bgt.n	8015f3e <_dtoa_r+0x91e>
 8015e9a:	e089      	b.n	8015fb0 <_dtoa_r+0x990>
 8015e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015ea2:	e74b      	b.n	8015d3c <_dtoa_r+0x71c>
 8015ea4:	9b03      	ldr	r3, [sp, #12]
 8015ea6:	1e5e      	subs	r6, r3, #1
 8015ea8:	9b07      	ldr	r3, [sp, #28]
 8015eaa:	42b3      	cmp	r3, r6
 8015eac:	bfbf      	itttt	lt
 8015eae:	9b07      	ldrlt	r3, [sp, #28]
 8015eb0:	9607      	strlt	r6, [sp, #28]
 8015eb2:	1af2      	sublt	r2, r6, r3
 8015eb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015eb6:	bfb6      	itet	lt
 8015eb8:	189b      	addlt	r3, r3, r2
 8015eba:	1b9e      	subge	r6, r3, r6
 8015ebc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015ebe:	9b03      	ldr	r3, [sp, #12]
 8015ec0:	bfb8      	it	lt
 8015ec2:	2600      	movlt	r6, #0
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	bfb7      	itett	lt
 8015ec8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015ecc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015ed0:	1a9d      	sublt	r5, r3, r2
 8015ed2:	2300      	movlt	r3, #0
 8015ed4:	e734      	b.n	8015d40 <_dtoa_r+0x720>
 8015ed6:	9e07      	ldr	r6, [sp, #28]
 8015ed8:	9d04      	ldr	r5, [sp, #16]
 8015eda:	9f08      	ldr	r7, [sp, #32]
 8015edc:	e73b      	b.n	8015d56 <_dtoa_r+0x736>
 8015ede:	9a07      	ldr	r2, [sp, #28]
 8015ee0:	e767      	b.n	8015db2 <_dtoa_r+0x792>
 8015ee2:	9b06      	ldr	r3, [sp, #24]
 8015ee4:	2b01      	cmp	r3, #1
 8015ee6:	dc18      	bgt.n	8015f1a <_dtoa_r+0x8fa>
 8015ee8:	f1ba 0f00 	cmp.w	sl, #0
 8015eec:	d115      	bne.n	8015f1a <_dtoa_r+0x8fa>
 8015eee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015ef2:	b993      	cbnz	r3, 8015f1a <_dtoa_r+0x8fa>
 8015ef4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015ef8:	0d1b      	lsrs	r3, r3, #20
 8015efa:	051b      	lsls	r3, r3, #20
 8015efc:	b183      	cbz	r3, 8015f20 <_dtoa_r+0x900>
 8015efe:	9b04      	ldr	r3, [sp, #16]
 8015f00:	3301      	adds	r3, #1
 8015f02:	9304      	str	r3, [sp, #16]
 8015f04:	9b05      	ldr	r3, [sp, #20]
 8015f06:	3301      	adds	r3, #1
 8015f08:	9305      	str	r3, [sp, #20]
 8015f0a:	f04f 0801 	mov.w	r8, #1
 8015f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	f47f af6a 	bne.w	8015dea <_dtoa_r+0x7ca>
 8015f16:	2001      	movs	r0, #1
 8015f18:	e76f      	b.n	8015dfa <_dtoa_r+0x7da>
 8015f1a:	f04f 0800 	mov.w	r8, #0
 8015f1e:	e7f6      	b.n	8015f0e <_dtoa_r+0x8ee>
 8015f20:	4698      	mov	r8, r3
 8015f22:	e7f4      	b.n	8015f0e <_dtoa_r+0x8ee>
 8015f24:	f43f af7d 	beq.w	8015e22 <_dtoa_r+0x802>
 8015f28:	4618      	mov	r0, r3
 8015f2a:	301c      	adds	r0, #28
 8015f2c:	e772      	b.n	8015e14 <_dtoa_r+0x7f4>
 8015f2e:	9b03      	ldr	r3, [sp, #12]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	dc37      	bgt.n	8015fa4 <_dtoa_r+0x984>
 8015f34:	9b06      	ldr	r3, [sp, #24]
 8015f36:	2b02      	cmp	r3, #2
 8015f38:	dd34      	ble.n	8015fa4 <_dtoa_r+0x984>
 8015f3a:	9b03      	ldr	r3, [sp, #12]
 8015f3c:	9302      	str	r3, [sp, #8]
 8015f3e:	9b02      	ldr	r3, [sp, #8]
 8015f40:	b96b      	cbnz	r3, 8015f5e <_dtoa_r+0x93e>
 8015f42:	4631      	mov	r1, r6
 8015f44:	2205      	movs	r2, #5
 8015f46:	4620      	mov	r0, r4
 8015f48:	f000 ffe6 	bl	8016f18 <__multadd>
 8015f4c:	4601      	mov	r1, r0
 8015f4e:	4606      	mov	r6, r0
 8015f50:	ee18 0a10 	vmov	r0, s16
 8015f54:	f001 fa4a 	bl	80173ec <__mcmp>
 8015f58:	2800      	cmp	r0, #0
 8015f5a:	f73f adbb 	bgt.w	8015ad4 <_dtoa_r+0x4b4>
 8015f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f60:	9d01      	ldr	r5, [sp, #4]
 8015f62:	43db      	mvns	r3, r3
 8015f64:	9300      	str	r3, [sp, #0]
 8015f66:	f04f 0800 	mov.w	r8, #0
 8015f6a:	4631      	mov	r1, r6
 8015f6c:	4620      	mov	r0, r4
 8015f6e:	f000 ffb1 	bl	8016ed4 <_Bfree>
 8015f72:	2f00      	cmp	r7, #0
 8015f74:	f43f aea4 	beq.w	8015cc0 <_dtoa_r+0x6a0>
 8015f78:	f1b8 0f00 	cmp.w	r8, #0
 8015f7c:	d005      	beq.n	8015f8a <_dtoa_r+0x96a>
 8015f7e:	45b8      	cmp	r8, r7
 8015f80:	d003      	beq.n	8015f8a <_dtoa_r+0x96a>
 8015f82:	4641      	mov	r1, r8
 8015f84:	4620      	mov	r0, r4
 8015f86:	f000 ffa5 	bl	8016ed4 <_Bfree>
 8015f8a:	4639      	mov	r1, r7
 8015f8c:	4620      	mov	r0, r4
 8015f8e:	f000 ffa1 	bl	8016ed4 <_Bfree>
 8015f92:	e695      	b.n	8015cc0 <_dtoa_r+0x6a0>
 8015f94:	2600      	movs	r6, #0
 8015f96:	4637      	mov	r7, r6
 8015f98:	e7e1      	b.n	8015f5e <_dtoa_r+0x93e>
 8015f9a:	9700      	str	r7, [sp, #0]
 8015f9c:	4637      	mov	r7, r6
 8015f9e:	e599      	b.n	8015ad4 <_dtoa_r+0x4b4>
 8015fa0:	40240000 	.word	0x40240000
 8015fa4:	9b08      	ldr	r3, [sp, #32]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	f000 80ca 	beq.w	8016140 <_dtoa_r+0xb20>
 8015fac:	9b03      	ldr	r3, [sp, #12]
 8015fae:	9302      	str	r3, [sp, #8]
 8015fb0:	2d00      	cmp	r5, #0
 8015fb2:	dd05      	ble.n	8015fc0 <_dtoa_r+0x9a0>
 8015fb4:	4639      	mov	r1, r7
 8015fb6:	462a      	mov	r2, r5
 8015fb8:	4620      	mov	r0, r4
 8015fba:	f001 f9a7 	bl	801730c <__lshift>
 8015fbe:	4607      	mov	r7, r0
 8015fc0:	f1b8 0f00 	cmp.w	r8, #0
 8015fc4:	d05b      	beq.n	801607e <_dtoa_r+0xa5e>
 8015fc6:	6879      	ldr	r1, [r7, #4]
 8015fc8:	4620      	mov	r0, r4
 8015fca:	f000 ff43 	bl	8016e54 <_Balloc>
 8015fce:	4605      	mov	r5, r0
 8015fd0:	b928      	cbnz	r0, 8015fde <_dtoa_r+0x9be>
 8015fd2:	4b87      	ldr	r3, [pc, #540]	; (80161f0 <_dtoa_r+0xbd0>)
 8015fd4:	4602      	mov	r2, r0
 8015fd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015fda:	f7ff bb3b 	b.w	8015654 <_dtoa_r+0x34>
 8015fde:	693a      	ldr	r2, [r7, #16]
 8015fe0:	3202      	adds	r2, #2
 8015fe2:	0092      	lsls	r2, r2, #2
 8015fe4:	f107 010c 	add.w	r1, r7, #12
 8015fe8:	300c      	adds	r0, #12
 8015fea:	f7fc f865 	bl	80120b8 <memcpy>
 8015fee:	2201      	movs	r2, #1
 8015ff0:	4629      	mov	r1, r5
 8015ff2:	4620      	mov	r0, r4
 8015ff4:	f001 f98a 	bl	801730c <__lshift>
 8015ff8:	9b01      	ldr	r3, [sp, #4]
 8015ffa:	f103 0901 	add.w	r9, r3, #1
 8015ffe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016002:	4413      	add	r3, r2
 8016004:	9305      	str	r3, [sp, #20]
 8016006:	f00a 0301 	and.w	r3, sl, #1
 801600a:	46b8      	mov	r8, r7
 801600c:	9304      	str	r3, [sp, #16]
 801600e:	4607      	mov	r7, r0
 8016010:	4631      	mov	r1, r6
 8016012:	ee18 0a10 	vmov	r0, s16
 8016016:	f7ff fa77 	bl	8015508 <quorem>
 801601a:	4641      	mov	r1, r8
 801601c:	9002      	str	r0, [sp, #8]
 801601e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016022:	ee18 0a10 	vmov	r0, s16
 8016026:	f001 f9e1 	bl	80173ec <__mcmp>
 801602a:	463a      	mov	r2, r7
 801602c:	9003      	str	r0, [sp, #12]
 801602e:	4631      	mov	r1, r6
 8016030:	4620      	mov	r0, r4
 8016032:	f001 f9f7 	bl	8017424 <__mdiff>
 8016036:	68c2      	ldr	r2, [r0, #12]
 8016038:	f109 3bff 	add.w	fp, r9, #4294967295
 801603c:	4605      	mov	r5, r0
 801603e:	bb02      	cbnz	r2, 8016082 <_dtoa_r+0xa62>
 8016040:	4601      	mov	r1, r0
 8016042:	ee18 0a10 	vmov	r0, s16
 8016046:	f001 f9d1 	bl	80173ec <__mcmp>
 801604a:	4602      	mov	r2, r0
 801604c:	4629      	mov	r1, r5
 801604e:	4620      	mov	r0, r4
 8016050:	9207      	str	r2, [sp, #28]
 8016052:	f000 ff3f 	bl	8016ed4 <_Bfree>
 8016056:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801605a:	ea43 0102 	orr.w	r1, r3, r2
 801605e:	9b04      	ldr	r3, [sp, #16]
 8016060:	430b      	orrs	r3, r1
 8016062:	464d      	mov	r5, r9
 8016064:	d10f      	bne.n	8016086 <_dtoa_r+0xa66>
 8016066:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801606a:	d02a      	beq.n	80160c2 <_dtoa_r+0xaa2>
 801606c:	9b03      	ldr	r3, [sp, #12]
 801606e:	2b00      	cmp	r3, #0
 8016070:	dd02      	ble.n	8016078 <_dtoa_r+0xa58>
 8016072:	9b02      	ldr	r3, [sp, #8]
 8016074:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8016078:	f88b a000 	strb.w	sl, [fp]
 801607c:	e775      	b.n	8015f6a <_dtoa_r+0x94a>
 801607e:	4638      	mov	r0, r7
 8016080:	e7ba      	b.n	8015ff8 <_dtoa_r+0x9d8>
 8016082:	2201      	movs	r2, #1
 8016084:	e7e2      	b.n	801604c <_dtoa_r+0xa2c>
 8016086:	9b03      	ldr	r3, [sp, #12]
 8016088:	2b00      	cmp	r3, #0
 801608a:	db04      	blt.n	8016096 <_dtoa_r+0xa76>
 801608c:	9906      	ldr	r1, [sp, #24]
 801608e:	430b      	orrs	r3, r1
 8016090:	9904      	ldr	r1, [sp, #16]
 8016092:	430b      	orrs	r3, r1
 8016094:	d122      	bne.n	80160dc <_dtoa_r+0xabc>
 8016096:	2a00      	cmp	r2, #0
 8016098:	ddee      	ble.n	8016078 <_dtoa_r+0xa58>
 801609a:	ee18 1a10 	vmov	r1, s16
 801609e:	2201      	movs	r2, #1
 80160a0:	4620      	mov	r0, r4
 80160a2:	f001 f933 	bl	801730c <__lshift>
 80160a6:	4631      	mov	r1, r6
 80160a8:	ee08 0a10 	vmov	s16, r0
 80160ac:	f001 f99e 	bl	80173ec <__mcmp>
 80160b0:	2800      	cmp	r0, #0
 80160b2:	dc03      	bgt.n	80160bc <_dtoa_r+0xa9c>
 80160b4:	d1e0      	bne.n	8016078 <_dtoa_r+0xa58>
 80160b6:	f01a 0f01 	tst.w	sl, #1
 80160ba:	d0dd      	beq.n	8016078 <_dtoa_r+0xa58>
 80160bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80160c0:	d1d7      	bne.n	8016072 <_dtoa_r+0xa52>
 80160c2:	2339      	movs	r3, #57	; 0x39
 80160c4:	f88b 3000 	strb.w	r3, [fp]
 80160c8:	462b      	mov	r3, r5
 80160ca:	461d      	mov	r5, r3
 80160cc:	3b01      	subs	r3, #1
 80160ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80160d2:	2a39      	cmp	r2, #57	; 0x39
 80160d4:	d071      	beq.n	80161ba <_dtoa_r+0xb9a>
 80160d6:	3201      	adds	r2, #1
 80160d8:	701a      	strb	r2, [r3, #0]
 80160da:	e746      	b.n	8015f6a <_dtoa_r+0x94a>
 80160dc:	2a00      	cmp	r2, #0
 80160de:	dd07      	ble.n	80160f0 <_dtoa_r+0xad0>
 80160e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80160e4:	d0ed      	beq.n	80160c2 <_dtoa_r+0xaa2>
 80160e6:	f10a 0301 	add.w	r3, sl, #1
 80160ea:	f88b 3000 	strb.w	r3, [fp]
 80160ee:	e73c      	b.n	8015f6a <_dtoa_r+0x94a>
 80160f0:	9b05      	ldr	r3, [sp, #20]
 80160f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80160f6:	4599      	cmp	r9, r3
 80160f8:	d047      	beq.n	801618a <_dtoa_r+0xb6a>
 80160fa:	ee18 1a10 	vmov	r1, s16
 80160fe:	2300      	movs	r3, #0
 8016100:	220a      	movs	r2, #10
 8016102:	4620      	mov	r0, r4
 8016104:	f000 ff08 	bl	8016f18 <__multadd>
 8016108:	45b8      	cmp	r8, r7
 801610a:	ee08 0a10 	vmov	s16, r0
 801610e:	f04f 0300 	mov.w	r3, #0
 8016112:	f04f 020a 	mov.w	r2, #10
 8016116:	4641      	mov	r1, r8
 8016118:	4620      	mov	r0, r4
 801611a:	d106      	bne.n	801612a <_dtoa_r+0xb0a>
 801611c:	f000 fefc 	bl	8016f18 <__multadd>
 8016120:	4680      	mov	r8, r0
 8016122:	4607      	mov	r7, r0
 8016124:	f109 0901 	add.w	r9, r9, #1
 8016128:	e772      	b.n	8016010 <_dtoa_r+0x9f0>
 801612a:	f000 fef5 	bl	8016f18 <__multadd>
 801612e:	4639      	mov	r1, r7
 8016130:	4680      	mov	r8, r0
 8016132:	2300      	movs	r3, #0
 8016134:	220a      	movs	r2, #10
 8016136:	4620      	mov	r0, r4
 8016138:	f000 feee 	bl	8016f18 <__multadd>
 801613c:	4607      	mov	r7, r0
 801613e:	e7f1      	b.n	8016124 <_dtoa_r+0xb04>
 8016140:	9b03      	ldr	r3, [sp, #12]
 8016142:	9302      	str	r3, [sp, #8]
 8016144:	9d01      	ldr	r5, [sp, #4]
 8016146:	ee18 0a10 	vmov	r0, s16
 801614a:	4631      	mov	r1, r6
 801614c:	f7ff f9dc 	bl	8015508 <quorem>
 8016150:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016154:	9b01      	ldr	r3, [sp, #4]
 8016156:	f805 ab01 	strb.w	sl, [r5], #1
 801615a:	1aea      	subs	r2, r5, r3
 801615c:	9b02      	ldr	r3, [sp, #8]
 801615e:	4293      	cmp	r3, r2
 8016160:	dd09      	ble.n	8016176 <_dtoa_r+0xb56>
 8016162:	ee18 1a10 	vmov	r1, s16
 8016166:	2300      	movs	r3, #0
 8016168:	220a      	movs	r2, #10
 801616a:	4620      	mov	r0, r4
 801616c:	f000 fed4 	bl	8016f18 <__multadd>
 8016170:	ee08 0a10 	vmov	s16, r0
 8016174:	e7e7      	b.n	8016146 <_dtoa_r+0xb26>
 8016176:	9b02      	ldr	r3, [sp, #8]
 8016178:	2b00      	cmp	r3, #0
 801617a:	bfc8      	it	gt
 801617c:	461d      	movgt	r5, r3
 801617e:	9b01      	ldr	r3, [sp, #4]
 8016180:	bfd8      	it	le
 8016182:	2501      	movle	r5, #1
 8016184:	441d      	add	r5, r3
 8016186:	f04f 0800 	mov.w	r8, #0
 801618a:	ee18 1a10 	vmov	r1, s16
 801618e:	2201      	movs	r2, #1
 8016190:	4620      	mov	r0, r4
 8016192:	f001 f8bb 	bl	801730c <__lshift>
 8016196:	4631      	mov	r1, r6
 8016198:	ee08 0a10 	vmov	s16, r0
 801619c:	f001 f926 	bl	80173ec <__mcmp>
 80161a0:	2800      	cmp	r0, #0
 80161a2:	dc91      	bgt.n	80160c8 <_dtoa_r+0xaa8>
 80161a4:	d102      	bne.n	80161ac <_dtoa_r+0xb8c>
 80161a6:	f01a 0f01 	tst.w	sl, #1
 80161aa:	d18d      	bne.n	80160c8 <_dtoa_r+0xaa8>
 80161ac:	462b      	mov	r3, r5
 80161ae:	461d      	mov	r5, r3
 80161b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80161b4:	2a30      	cmp	r2, #48	; 0x30
 80161b6:	d0fa      	beq.n	80161ae <_dtoa_r+0xb8e>
 80161b8:	e6d7      	b.n	8015f6a <_dtoa_r+0x94a>
 80161ba:	9a01      	ldr	r2, [sp, #4]
 80161bc:	429a      	cmp	r2, r3
 80161be:	d184      	bne.n	80160ca <_dtoa_r+0xaaa>
 80161c0:	9b00      	ldr	r3, [sp, #0]
 80161c2:	3301      	adds	r3, #1
 80161c4:	9300      	str	r3, [sp, #0]
 80161c6:	2331      	movs	r3, #49	; 0x31
 80161c8:	7013      	strb	r3, [r2, #0]
 80161ca:	e6ce      	b.n	8015f6a <_dtoa_r+0x94a>
 80161cc:	4b09      	ldr	r3, [pc, #36]	; (80161f4 <_dtoa_r+0xbd4>)
 80161ce:	f7ff ba95 	b.w	80156fc <_dtoa_r+0xdc>
 80161d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	f47f aa6e 	bne.w	80156b6 <_dtoa_r+0x96>
 80161da:	4b07      	ldr	r3, [pc, #28]	; (80161f8 <_dtoa_r+0xbd8>)
 80161dc:	f7ff ba8e 	b.w	80156fc <_dtoa_r+0xdc>
 80161e0:	9b02      	ldr	r3, [sp, #8]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	dcae      	bgt.n	8016144 <_dtoa_r+0xb24>
 80161e6:	9b06      	ldr	r3, [sp, #24]
 80161e8:	2b02      	cmp	r3, #2
 80161ea:	f73f aea8 	bgt.w	8015f3e <_dtoa_r+0x91e>
 80161ee:	e7a9      	b.n	8016144 <_dtoa_r+0xb24>
 80161f0:	08049a81 	.word	0x08049a81
 80161f4:	08049d30 	.word	0x08049d30
 80161f8:	08049a19 	.word	0x08049a19

080161fc <__sflush_r>:
 80161fc:	898a      	ldrh	r2, [r1, #12]
 80161fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016202:	4605      	mov	r5, r0
 8016204:	0710      	lsls	r0, r2, #28
 8016206:	460c      	mov	r4, r1
 8016208:	d458      	bmi.n	80162bc <__sflush_r+0xc0>
 801620a:	684b      	ldr	r3, [r1, #4]
 801620c:	2b00      	cmp	r3, #0
 801620e:	dc05      	bgt.n	801621c <__sflush_r+0x20>
 8016210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016212:	2b00      	cmp	r3, #0
 8016214:	dc02      	bgt.n	801621c <__sflush_r+0x20>
 8016216:	2000      	movs	r0, #0
 8016218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801621c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801621e:	2e00      	cmp	r6, #0
 8016220:	d0f9      	beq.n	8016216 <__sflush_r+0x1a>
 8016222:	2300      	movs	r3, #0
 8016224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016228:	682f      	ldr	r7, [r5, #0]
 801622a:	602b      	str	r3, [r5, #0]
 801622c:	d032      	beq.n	8016294 <__sflush_r+0x98>
 801622e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016230:	89a3      	ldrh	r3, [r4, #12]
 8016232:	075a      	lsls	r2, r3, #29
 8016234:	d505      	bpl.n	8016242 <__sflush_r+0x46>
 8016236:	6863      	ldr	r3, [r4, #4]
 8016238:	1ac0      	subs	r0, r0, r3
 801623a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801623c:	b10b      	cbz	r3, 8016242 <__sflush_r+0x46>
 801623e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016240:	1ac0      	subs	r0, r0, r3
 8016242:	2300      	movs	r3, #0
 8016244:	4602      	mov	r2, r0
 8016246:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016248:	6a21      	ldr	r1, [r4, #32]
 801624a:	4628      	mov	r0, r5
 801624c:	47b0      	blx	r6
 801624e:	1c43      	adds	r3, r0, #1
 8016250:	89a3      	ldrh	r3, [r4, #12]
 8016252:	d106      	bne.n	8016262 <__sflush_r+0x66>
 8016254:	6829      	ldr	r1, [r5, #0]
 8016256:	291d      	cmp	r1, #29
 8016258:	d82c      	bhi.n	80162b4 <__sflush_r+0xb8>
 801625a:	4a2a      	ldr	r2, [pc, #168]	; (8016304 <__sflush_r+0x108>)
 801625c:	40ca      	lsrs	r2, r1
 801625e:	07d6      	lsls	r6, r2, #31
 8016260:	d528      	bpl.n	80162b4 <__sflush_r+0xb8>
 8016262:	2200      	movs	r2, #0
 8016264:	6062      	str	r2, [r4, #4]
 8016266:	04d9      	lsls	r1, r3, #19
 8016268:	6922      	ldr	r2, [r4, #16]
 801626a:	6022      	str	r2, [r4, #0]
 801626c:	d504      	bpl.n	8016278 <__sflush_r+0x7c>
 801626e:	1c42      	adds	r2, r0, #1
 8016270:	d101      	bne.n	8016276 <__sflush_r+0x7a>
 8016272:	682b      	ldr	r3, [r5, #0]
 8016274:	b903      	cbnz	r3, 8016278 <__sflush_r+0x7c>
 8016276:	6560      	str	r0, [r4, #84]	; 0x54
 8016278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801627a:	602f      	str	r7, [r5, #0]
 801627c:	2900      	cmp	r1, #0
 801627e:	d0ca      	beq.n	8016216 <__sflush_r+0x1a>
 8016280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016284:	4299      	cmp	r1, r3
 8016286:	d002      	beq.n	801628e <__sflush_r+0x92>
 8016288:	4628      	mov	r0, r5
 801628a:	f7fc f99d 	bl	80125c8 <_free_r>
 801628e:	2000      	movs	r0, #0
 8016290:	6360      	str	r0, [r4, #52]	; 0x34
 8016292:	e7c1      	b.n	8016218 <__sflush_r+0x1c>
 8016294:	6a21      	ldr	r1, [r4, #32]
 8016296:	2301      	movs	r3, #1
 8016298:	4628      	mov	r0, r5
 801629a:	47b0      	blx	r6
 801629c:	1c41      	adds	r1, r0, #1
 801629e:	d1c7      	bne.n	8016230 <__sflush_r+0x34>
 80162a0:	682b      	ldr	r3, [r5, #0]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d0c4      	beq.n	8016230 <__sflush_r+0x34>
 80162a6:	2b1d      	cmp	r3, #29
 80162a8:	d001      	beq.n	80162ae <__sflush_r+0xb2>
 80162aa:	2b16      	cmp	r3, #22
 80162ac:	d101      	bne.n	80162b2 <__sflush_r+0xb6>
 80162ae:	602f      	str	r7, [r5, #0]
 80162b0:	e7b1      	b.n	8016216 <__sflush_r+0x1a>
 80162b2:	89a3      	ldrh	r3, [r4, #12]
 80162b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162b8:	81a3      	strh	r3, [r4, #12]
 80162ba:	e7ad      	b.n	8016218 <__sflush_r+0x1c>
 80162bc:	690f      	ldr	r7, [r1, #16]
 80162be:	2f00      	cmp	r7, #0
 80162c0:	d0a9      	beq.n	8016216 <__sflush_r+0x1a>
 80162c2:	0793      	lsls	r3, r2, #30
 80162c4:	680e      	ldr	r6, [r1, #0]
 80162c6:	bf08      	it	eq
 80162c8:	694b      	ldreq	r3, [r1, #20]
 80162ca:	600f      	str	r7, [r1, #0]
 80162cc:	bf18      	it	ne
 80162ce:	2300      	movne	r3, #0
 80162d0:	eba6 0807 	sub.w	r8, r6, r7
 80162d4:	608b      	str	r3, [r1, #8]
 80162d6:	f1b8 0f00 	cmp.w	r8, #0
 80162da:	dd9c      	ble.n	8016216 <__sflush_r+0x1a>
 80162dc:	6a21      	ldr	r1, [r4, #32]
 80162de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80162e0:	4643      	mov	r3, r8
 80162e2:	463a      	mov	r2, r7
 80162e4:	4628      	mov	r0, r5
 80162e6:	47b0      	blx	r6
 80162e8:	2800      	cmp	r0, #0
 80162ea:	dc06      	bgt.n	80162fa <__sflush_r+0xfe>
 80162ec:	89a3      	ldrh	r3, [r4, #12]
 80162ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162f2:	81a3      	strh	r3, [r4, #12]
 80162f4:	f04f 30ff 	mov.w	r0, #4294967295
 80162f8:	e78e      	b.n	8016218 <__sflush_r+0x1c>
 80162fa:	4407      	add	r7, r0
 80162fc:	eba8 0800 	sub.w	r8, r8, r0
 8016300:	e7e9      	b.n	80162d6 <__sflush_r+0xda>
 8016302:	bf00      	nop
 8016304:	20400001 	.word	0x20400001

08016308 <_fflush_r>:
 8016308:	b538      	push	{r3, r4, r5, lr}
 801630a:	690b      	ldr	r3, [r1, #16]
 801630c:	4605      	mov	r5, r0
 801630e:	460c      	mov	r4, r1
 8016310:	b913      	cbnz	r3, 8016318 <_fflush_r+0x10>
 8016312:	2500      	movs	r5, #0
 8016314:	4628      	mov	r0, r5
 8016316:	bd38      	pop	{r3, r4, r5, pc}
 8016318:	b118      	cbz	r0, 8016322 <_fflush_r+0x1a>
 801631a:	6983      	ldr	r3, [r0, #24]
 801631c:	b90b      	cbnz	r3, 8016322 <_fflush_r+0x1a>
 801631e:	f000 f887 	bl	8016430 <__sinit>
 8016322:	4b14      	ldr	r3, [pc, #80]	; (8016374 <_fflush_r+0x6c>)
 8016324:	429c      	cmp	r4, r3
 8016326:	d11b      	bne.n	8016360 <_fflush_r+0x58>
 8016328:	686c      	ldr	r4, [r5, #4]
 801632a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d0ef      	beq.n	8016312 <_fflush_r+0xa>
 8016332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016334:	07d0      	lsls	r0, r2, #31
 8016336:	d404      	bmi.n	8016342 <_fflush_r+0x3a>
 8016338:	0599      	lsls	r1, r3, #22
 801633a:	d402      	bmi.n	8016342 <_fflush_r+0x3a>
 801633c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801633e:	f000 fcd5 	bl	8016cec <__retarget_lock_acquire_recursive>
 8016342:	4628      	mov	r0, r5
 8016344:	4621      	mov	r1, r4
 8016346:	f7ff ff59 	bl	80161fc <__sflush_r>
 801634a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801634c:	07da      	lsls	r2, r3, #31
 801634e:	4605      	mov	r5, r0
 8016350:	d4e0      	bmi.n	8016314 <_fflush_r+0xc>
 8016352:	89a3      	ldrh	r3, [r4, #12]
 8016354:	059b      	lsls	r3, r3, #22
 8016356:	d4dd      	bmi.n	8016314 <_fflush_r+0xc>
 8016358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801635a:	f000 fcc9 	bl	8016cf0 <__retarget_lock_release_recursive>
 801635e:	e7d9      	b.n	8016314 <_fflush_r+0xc>
 8016360:	4b05      	ldr	r3, [pc, #20]	; (8016378 <_fflush_r+0x70>)
 8016362:	429c      	cmp	r4, r3
 8016364:	d101      	bne.n	801636a <_fflush_r+0x62>
 8016366:	68ac      	ldr	r4, [r5, #8]
 8016368:	e7df      	b.n	801632a <_fflush_r+0x22>
 801636a:	4b04      	ldr	r3, [pc, #16]	; (801637c <_fflush_r+0x74>)
 801636c:	429c      	cmp	r4, r3
 801636e:	bf08      	it	eq
 8016370:	68ec      	ldreq	r4, [r5, #12]
 8016372:	e7da      	b.n	801632a <_fflush_r+0x22>
 8016374:	08049ab4 	.word	0x08049ab4
 8016378:	08049ad4 	.word	0x08049ad4
 801637c:	08049a94 	.word	0x08049a94

08016380 <std>:
 8016380:	2300      	movs	r3, #0
 8016382:	b510      	push	{r4, lr}
 8016384:	4604      	mov	r4, r0
 8016386:	e9c0 3300 	strd	r3, r3, [r0]
 801638a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801638e:	6083      	str	r3, [r0, #8]
 8016390:	8181      	strh	r1, [r0, #12]
 8016392:	6643      	str	r3, [r0, #100]	; 0x64
 8016394:	81c2      	strh	r2, [r0, #14]
 8016396:	6183      	str	r3, [r0, #24]
 8016398:	4619      	mov	r1, r3
 801639a:	2208      	movs	r2, #8
 801639c:	305c      	adds	r0, #92	; 0x5c
 801639e:	f7fb fe99 	bl	80120d4 <memset>
 80163a2:	4b05      	ldr	r3, [pc, #20]	; (80163b8 <std+0x38>)
 80163a4:	6263      	str	r3, [r4, #36]	; 0x24
 80163a6:	4b05      	ldr	r3, [pc, #20]	; (80163bc <std+0x3c>)
 80163a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80163aa:	4b05      	ldr	r3, [pc, #20]	; (80163c0 <std+0x40>)
 80163ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80163ae:	4b05      	ldr	r3, [pc, #20]	; (80163c4 <std+0x44>)
 80163b0:	6224      	str	r4, [r4, #32]
 80163b2:	6323      	str	r3, [r4, #48]	; 0x30
 80163b4:	bd10      	pop	{r4, pc}
 80163b6:	bf00      	nop
 80163b8:	080133c9 	.word	0x080133c9
 80163bc:	080133ef 	.word	0x080133ef
 80163c0:	08013427 	.word	0x08013427
 80163c4:	0801344b 	.word	0x0801344b

080163c8 <_cleanup_r>:
 80163c8:	4901      	ldr	r1, [pc, #4]	; (80163d0 <_cleanup_r+0x8>)
 80163ca:	f000 b8af 	b.w	801652c <_fwalk_reent>
 80163ce:	bf00      	nop
 80163d0:	08016309 	.word	0x08016309

080163d4 <__sfmoreglue>:
 80163d4:	b570      	push	{r4, r5, r6, lr}
 80163d6:	2268      	movs	r2, #104	; 0x68
 80163d8:	1e4d      	subs	r5, r1, #1
 80163da:	4355      	muls	r5, r2
 80163dc:	460e      	mov	r6, r1
 80163de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80163e2:	f7fc f95d 	bl	80126a0 <_malloc_r>
 80163e6:	4604      	mov	r4, r0
 80163e8:	b140      	cbz	r0, 80163fc <__sfmoreglue+0x28>
 80163ea:	2100      	movs	r1, #0
 80163ec:	e9c0 1600 	strd	r1, r6, [r0]
 80163f0:	300c      	adds	r0, #12
 80163f2:	60a0      	str	r0, [r4, #8]
 80163f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80163f8:	f7fb fe6c 	bl	80120d4 <memset>
 80163fc:	4620      	mov	r0, r4
 80163fe:	bd70      	pop	{r4, r5, r6, pc}

08016400 <__sfp_lock_acquire>:
 8016400:	4801      	ldr	r0, [pc, #4]	; (8016408 <__sfp_lock_acquire+0x8>)
 8016402:	f000 bc73 	b.w	8016cec <__retarget_lock_acquire_recursive>
 8016406:	bf00      	nop
 8016408:	20005dc2 	.word	0x20005dc2

0801640c <__sfp_lock_release>:
 801640c:	4801      	ldr	r0, [pc, #4]	; (8016414 <__sfp_lock_release+0x8>)
 801640e:	f000 bc6f 	b.w	8016cf0 <__retarget_lock_release_recursive>
 8016412:	bf00      	nop
 8016414:	20005dc2 	.word	0x20005dc2

08016418 <__sinit_lock_acquire>:
 8016418:	4801      	ldr	r0, [pc, #4]	; (8016420 <__sinit_lock_acquire+0x8>)
 801641a:	f000 bc67 	b.w	8016cec <__retarget_lock_acquire_recursive>
 801641e:	bf00      	nop
 8016420:	20005dc3 	.word	0x20005dc3

08016424 <__sinit_lock_release>:
 8016424:	4801      	ldr	r0, [pc, #4]	; (801642c <__sinit_lock_release+0x8>)
 8016426:	f000 bc63 	b.w	8016cf0 <__retarget_lock_release_recursive>
 801642a:	bf00      	nop
 801642c:	20005dc3 	.word	0x20005dc3

08016430 <__sinit>:
 8016430:	b510      	push	{r4, lr}
 8016432:	4604      	mov	r4, r0
 8016434:	f7ff fff0 	bl	8016418 <__sinit_lock_acquire>
 8016438:	69a3      	ldr	r3, [r4, #24]
 801643a:	b11b      	cbz	r3, 8016444 <__sinit+0x14>
 801643c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016440:	f7ff bff0 	b.w	8016424 <__sinit_lock_release>
 8016444:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016448:	6523      	str	r3, [r4, #80]	; 0x50
 801644a:	4b13      	ldr	r3, [pc, #76]	; (8016498 <__sinit+0x68>)
 801644c:	4a13      	ldr	r2, [pc, #76]	; (801649c <__sinit+0x6c>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	62a2      	str	r2, [r4, #40]	; 0x28
 8016452:	42a3      	cmp	r3, r4
 8016454:	bf04      	itt	eq
 8016456:	2301      	moveq	r3, #1
 8016458:	61a3      	streq	r3, [r4, #24]
 801645a:	4620      	mov	r0, r4
 801645c:	f000 f820 	bl	80164a0 <__sfp>
 8016460:	6060      	str	r0, [r4, #4]
 8016462:	4620      	mov	r0, r4
 8016464:	f000 f81c 	bl	80164a0 <__sfp>
 8016468:	60a0      	str	r0, [r4, #8]
 801646a:	4620      	mov	r0, r4
 801646c:	f000 f818 	bl	80164a0 <__sfp>
 8016470:	2200      	movs	r2, #0
 8016472:	60e0      	str	r0, [r4, #12]
 8016474:	2104      	movs	r1, #4
 8016476:	6860      	ldr	r0, [r4, #4]
 8016478:	f7ff ff82 	bl	8016380 <std>
 801647c:	68a0      	ldr	r0, [r4, #8]
 801647e:	2201      	movs	r2, #1
 8016480:	2109      	movs	r1, #9
 8016482:	f7ff ff7d 	bl	8016380 <std>
 8016486:	68e0      	ldr	r0, [r4, #12]
 8016488:	2202      	movs	r2, #2
 801648a:	2112      	movs	r1, #18
 801648c:	f7ff ff78 	bl	8016380 <std>
 8016490:	2301      	movs	r3, #1
 8016492:	61a3      	str	r3, [r4, #24]
 8016494:	e7d2      	b.n	801643c <__sinit+0xc>
 8016496:	bf00      	nop
 8016498:	08049508 	.word	0x08049508
 801649c:	080163c9 	.word	0x080163c9

080164a0 <__sfp>:
 80164a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164a2:	4607      	mov	r7, r0
 80164a4:	f7ff ffac 	bl	8016400 <__sfp_lock_acquire>
 80164a8:	4b1e      	ldr	r3, [pc, #120]	; (8016524 <__sfp+0x84>)
 80164aa:	681e      	ldr	r6, [r3, #0]
 80164ac:	69b3      	ldr	r3, [r6, #24]
 80164ae:	b913      	cbnz	r3, 80164b6 <__sfp+0x16>
 80164b0:	4630      	mov	r0, r6
 80164b2:	f7ff ffbd 	bl	8016430 <__sinit>
 80164b6:	3648      	adds	r6, #72	; 0x48
 80164b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80164bc:	3b01      	subs	r3, #1
 80164be:	d503      	bpl.n	80164c8 <__sfp+0x28>
 80164c0:	6833      	ldr	r3, [r6, #0]
 80164c2:	b30b      	cbz	r3, 8016508 <__sfp+0x68>
 80164c4:	6836      	ldr	r6, [r6, #0]
 80164c6:	e7f7      	b.n	80164b8 <__sfp+0x18>
 80164c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80164cc:	b9d5      	cbnz	r5, 8016504 <__sfp+0x64>
 80164ce:	4b16      	ldr	r3, [pc, #88]	; (8016528 <__sfp+0x88>)
 80164d0:	60e3      	str	r3, [r4, #12]
 80164d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80164d6:	6665      	str	r5, [r4, #100]	; 0x64
 80164d8:	f000 fc06 	bl	8016ce8 <__retarget_lock_init_recursive>
 80164dc:	f7ff ff96 	bl	801640c <__sfp_lock_release>
 80164e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80164e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80164e8:	6025      	str	r5, [r4, #0]
 80164ea:	61a5      	str	r5, [r4, #24]
 80164ec:	2208      	movs	r2, #8
 80164ee:	4629      	mov	r1, r5
 80164f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80164f4:	f7fb fdee 	bl	80120d4 <memset>
 80164f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80164fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016500:	4620      	mov	r0, r4
 8016502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016504:	3468      	adds	r4, #104	; 0x68
 8016506:	e7d9      	b.n	80164bc <__sfp+0x1c>
 8016508:	2104      	movs	r1, #4
 801650a:	4638      	mov	r0, r7
 801650c:	f7ff ff62 	bl	80163d4 <__sfmoreglue>
 8016510:	4604      	mov	r4, r0
 8016512:	6030      	str	r0, [r6, #0]
 8016514:	2800      	cmp	r0, #0
 8016516:	d1d5      	bne.n	80164c4 <__sfp+0x24>
 8016518:	f7ff ff78 	bl	801640c <__sfp_lock_release>
 801651c:	230c      	movs	r3, #12
 801651e:	603b      	str	r3, [r7, #0]
 8016520:	e7ee      	b.n	8016500 <__sfp+0x60>
 8016522:	bf00      	nop
 8016524:	08049508 	.word	0x08049508
 8016528:	ffff0001 	.word	0xffff0001

0801652c <_fwalk_reent>:
 801652c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016530:	4606      	mov	r6, r0
 8016532:	4688      	mov	r8, r1
 8016534:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016538:	2700      	movs	r7, #0
 801653a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801653e:	f1b9 0901 	subs.w	r9, r9, #1
 8016542:	d505      	bpl.n	8016550 <_fwalk_reent+0x24>
 8016544:	6824      	ldr	r4, [r4, #0]
 8016546:	2c00      	cmp	r4, #0
 8016548:	d1f7      	bne.n	801653a <_fwalk_reent+0xe>
 801654a:	4638      	mov	r0, r7
 801654c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016550:	89ab      	ldrh	r3, [r5, #12]
 8016552:	2b01      	cmp	r3, #1
 8016554:	d907      	bls.n	8016566 <_fwalk_reent+0x3a>
 8016556:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801655a:	3301      	adds	r3, #1
 801655c:	d003      	beq.n	8016566 <_fwalk_reent+0x3a>
 801655e:	4629      	mov	r1, r5
 8016560:	4630      	mov	r0, r6
 8016562:	47c0      	blx	r8
 8016564:	4307      	orrs	r7, r0
 8016566:	3568      	adds	r5, #104	; 0x68
 8016568:	e7e9      	b.n	801653e <_fwalk_reent+0x12>

0801656a <rshift>:
 801656a:	6903      	ldr	r3, [r0, #16]
 801656c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016574:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016578:	f100 0414 	add.w	r4, r0, #20
 801657c:	dd45      	ble.n	801660a <rshift+0xa0>
 801657e:	f011 011f 	ands.w	r1, r1, #31
 8016582:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016586:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801658a:	d10c      	bne.n	80165a6 <rshift+0x3c>
 801658c:	f100 0710 	add.w	r7, r0, #16
 8016590:	4629      	mov	r1, r5
 8016592:	42b1      	cmp	r1, r6
 8016594:	d334      	bcc.n	8016600 <rshift+0x96>
 8016596:	1a9b      	subs	r3, r3, r2
 8016598:	009b      	lsls	r3, r3, #2
 801659a:	1eea      	subs	r2, r5, #3
 801659c:	4296      	cmp	r6, r2
 801659e:	bf38      	it	cc
 80165a0:	2300      	movcc	r3, #0
 80165a2:	4423      	add	r3, r4
 80165a4:	e015      	b.n	80165d2 <rshift+0x68>
 80165a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80165aa:	f1c1 0820 	rsb	r8, r1, #32
 80165ae:	40cf      	lsrs	r7, r1
 80165b0:	f105 0e04 	add.w	lr, r5, #4
 80165b4:	46a1      	mov	r9, r4
 80165b6:	4576      	cmp	r6, lr
 80165b8:	46f4      	mov	ip, lr
 80165ba:	d815      	bhi.n	80165e8 <rshift+0x7e>
 80165bc:	1a9a      	subs	r2, r3, r2
 80165be:	0092      	lsls	r2, r2, #2
 80165c0:	3a04      	subs	r2, #4
 80165c2:	3501      	adds	r5, #1
 80165c4:	42ae      	cmp	r6, r5
 80165c6:	bf38      	it	cc
 80165c8:	2200      	movcc	r2, #0
 80165ca:	18a3      	adds	r3, r4, r2
 80165cc:	50a7      	str	r7, [r4, r2]
 80165ce:	b107      	cbz	r7, 80165d2 <rshift+0x68>
 80165d0:	3304      	adds	r3, #4
 80165d2:	1b1a      	subs	r2, r3, r4
 80165d4:	42a3      	cmp	r3, r4
 80165d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80165da:	bf08      	it	eq
 80165dc:	2300      	moveq	r3, #0
 80165de:	6102      	str	r2, [r0, #16]
 80165e0:	bf08      	it	eq
 80165e2:	6143      	streq	r3, [r0, #20]
 80165e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165e8:	f8dc c000 	ldr.w	ip, [ip]
 80165ec:	fa0c fc08 	lsl.w	ip, ip, r8
 80165f0:	ea4c 0707 	orr.w	r7, ip, r7
 80165f4:	f849 7b04 	str.w	r7, [r9], #4
 80165f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80165fc:	40cf      	lsrs	r7, r1
 80165fe:	e7da      	b.n	80165b6 <rshift+0x4c>
 8016600:	f851 cb04 	ldr.w	ip, [r1], #4
 8016604:	f847 cf04 	str.w	ip, [r7, #4]!
 8016608:	e7c3      	b.n	8016592 <rshift+0x28>
 801660a:	4623      	mov	r3, r4
 801660c:	e7e1      	b.n	80165d2 <rshift+0x68>

0801660e <__hexdig_fun>:
 801660e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016612:	2b09      	cmp	r3, #9
 8016614:	d802      	bhi.n	801661c <__hexdig_fun+0xe>
 8016616:	3820      	subs	r0, #32
 8016618:	b2c0      	uxtb	r0, r0
 801661a:	4770      	bx	lr
 801661c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016620:	2b05      	cmp	r3, #5
 8016622:	d801      	bhi.n	8016628 <__hexdig_fun+0x1a>
 8016624:	3847      	subs	r0, #71	; 0x47
 8016626:	e7f7      	b.n	8016618 <__hexdig_fun+0xa>
 8016628:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801662c:	2b05      	cmp	r3, #5
 801662e:	d801      	bhi.n	8016634 <__hexdig_fun+0x26>
 8016630:	3827      	subs	r0, #39	; 0x27
 8016632:	e7f1      	b.n	8016618 <__hexdig_fun+0xa>
 8016634:	2000      	movs	r0, #0
 8016636:	4770      	bx	lr

08016638 <__gethex>:
 8016638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801663c:	ed2d 8b02 	vpush	{d8}
 8016640:	b089      	sub	sp, #36	; 0x24
 8016642:	ee08 0a10 	vmov	s16, r0
 8016646:	9304      	str	r3, [sp, #16]
 8016648:	4bb4      	ldr	r3, [pc, #720]	; (801691c <__gethex+0x2e4>)
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	9301      	str	r3, [sp, #4]
 801664e:	4618      	mov	r0, r3
 8016650:	468b      	mov	fp, r1
 8016652:	4690      	mov	r8, r2
 8016654:	f7e9 fdd6 	bl	8000204 <strlen>
 8016658:	9b01      	ldr	r3, [sp, #4]
 801665a:	f8db 2000 	ldr.w	r2, [fp]
 801665e:	4403      	add	r3, r0
 8016660:	4682      	mov	sl, r0
 8016662:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016666:	9305      	str	r3, [sp, #20]
 8016668:	1c93      	adds	r3, r2, #2
 801666a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801666e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016672:	32fe      	adds	r2, #254	; 0xfe
 8016674:	18d1      	adds	r1, r2, r3
 8016676:	461f      	mov	r7, r3
 8016678:	f813 0b01 	ldrb.w	r0, [r3], #1
 801667c:	9100      	str	r1, [sp, #0]
 801667e:	2830      	cmp	r0, #48	; 0x30
 8016680:	d0f8      	beq.n	8016674 <__gethex+0x3c>
 8016682:	f7ff ffc4 	bl	801660e <__hexdig_fun>
 8016686:	4604      	mov	r4, r0
 8016688:	2800      	cmp	r0, #0
 801668a:	d13a      	bne.n	8016702 <__gethex+0xca>
 801668c:	9901      	ldr	r1, [sp, #4]
 801668e:	4652      	mov	r2, sl
 8016690:	4638      	mov	r0, r7
 8016692:	f001 fe31 	bl	80182f8 <strncmp>
 8016696:	4605      	mov	r5, r0
 8016698:	2800      	cmp	r0, #0
 801669a:	d168      	bne.n	801676e <__gethex+0x136>
 801669c:	f817 000a 	ldrb.w	r0, [r7, sl]
 80166a0:	eb07 060a 	add.w	r6, r7, sl
 80166a4:	f7ff ffb3 	bl	801660e <__hexdig_fun>
 80166a8:	2800      	cmp	r0, #0
 80166aa:	d062      	beq.n	8016772 <__gethex+0x13a>
 80166ac:	4633      	mov	r3, r6
 80166ae:	7818      	ldrb	r0, [r3, #0]
 80166b0:	2830      	cmp	r0, #48	; 0x30
 80166b2:	461f      	mov	r7, r3
 80166b4:	f103 0301 	add.w	r3, r3, #1
 80166b8:	d0f9      	beq.n	80166ae <__gethex+0x76>
 80166ba:	f7ff ffa8 	bl	801660e <__hexdig_fun>
 80166be:	2301      	movs	r3, #1
 80166c0:	fab0 f480 	clz	r4, r0
 80166c4:	0964      	lsrs	r4, r4, #5
 80166c6:	4635      	mov	r5, r6
 80166c8:	9300      	str	r3, [sp, #0]
 80166ca:	463a      	mov	r2, r7
 80166cc:	4616      	mov	r6, r2
 80166ce:	3201      	adds	r2, #1
 80166d0:	7830      	ldrb	r0, [r6, #0]
 80166d2:	f7ff ff9c 	bl	801660e <__hexdig_fun>
 80166d6:	2800      	cmp	r0, #0
 80166d8:	d1f8      	bne.n	80166cc <__gethex+0x94>
 80166da:	9901      	ldr	r1, [sp, #4]
 80166dc:	4652      	mov	r2, sl
 80166de:	4630      	mov	r0, r6
 80166e0:	f001 fe0a 	bl	80182f8 <strncmp>
 80166e4:	b980      	cbnz	r0, 8016708 <__gethex+0xd0>
 80166e6:	b94d      	cbnz	r5, 80166fc <__gethex+0xc4>
 80166e8:	eb06 050a 	add.w	r5, r6, sl
 80166ec:	462a      	mov	r2, r5
 80166ee:	4616      	mov	r6, r2
 80166f0:	3201      	adds	r2, #1
 80166f2:	7830      	ldrb	r0, [r6, #0]
 80166f4:	f7ff ff8b 	bl	801660e <__hexdig_fun>
 80166f8:	2800      	cmp	r0, #0
 80166fa:	d1f8      	bne.n	80166ee <__gethex+0xb6>
 80166fc:	1bad      	subs	r5, r5, r6
 80166fe:	00ad      	lsls	r5, r5, #2
 8016700:	e004      	b.n	801670c <__gethex+0xd4>
 8016702:	2400      	movs	r4, #0
 8016704:	4625      	mov	r5, r4
 8016706:	e7e0      	b.n	80166ca <__gethex+0x92>
 8016708:	2d00      	cmp	r5, #0
 801670a:	d1f7      	bne.n	80166fc <__gethex+0xc4>
 801670c:	7833      	ldrb	r3, [r6, #0]
 801670e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016712:	2b50      	cmp	r3, #80	; 0x50
 8016714:	d13b      	bne.n	801678e <__gethex+0x156>
 8016716:	7873      	ldrb	r3, [r6, #1]
 8016718:	2b2b      	cmp	r3, #43	; 0x2b
 801671a:	d02c      	beq.n	8016776 <__gethex+0x13e>
 801671c:	2b2d      	cmp	r3, #45	; 0x2d
 801671e:	d02e      	beq.n	801677e <__gethex+0x146>
 8016720:	1c71      	adds	r1, r6, #1
 8016722:	f04f 0900 	mov.w	r9, #0
 8016726:	7808      	ldrb	r0, [r1, #0]
 8016728:	f7ff ff71 	bl	801660e <__hexdig_fun>
 801672c:	1e43      	subs	r3, r0, #1
 801672e:	b2db      	uxtb	r3, r3
 8016730:	2b18      	cmp	r3, #24
 8016732:	d82c      	bhi.n	801678e <__gethex+0x156>
 8016734:	f1a0 0210 	sub.w	r2, r0, #16
 8016738:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801673c:	f7ff ff67 	bl	801660e <__hexdig_fun>
 8016740:	1e43      	subs	r3, r0, #1
 8016742:	b2db      	uxtb	r3, r3
 8016744:	2b18      	cmp	r3, #24
 8016746:	d91d      	bls.n	8016784 <__gethex+0x14c>
 8016748:	f1b9 0f00 	cmp.w	r9, #0
 801674c:	d000      	beq.n	8016750 <__gethex+0x118>
 801674e:	4252      	negs	r2, r2
 8016750:	4415      	add	r5, r2
 8016752:	f8cb 1000 	str.w	r1, [fp]
 8016756:	b1e4      	cbz	r4, 8016792 <__gethex+0x15a>
 8016758:	9b00      	ldr	r3, [sp, #0]
 801675a:	2b00      	cmp	r3, #0
 801675c:	bf14      	ite	ne
 801675e:	2700      	movne	r7, #0
 8016760:	2706      	moveq	r7, #6
 8016762:	4638      	mov	r0, r7
 8016764:	b009      	add	sp, #36	; 0x24
 8016766:	ecbd 8b02 	vpop	{d8}
 801676a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801676e:	463e      	mov	r6, r7
 8016770:	4625      	mov	r5, r4
 8016772:	2401      	movs	r4, #1
 8016774:	e7ca      	b.n	801670c <__gethex+0xd4>
 8016776:	f04f 0900 	mov.w	r9, #0
 801677a:	1cb1      	adds	r1, r6, #2
 801677c:	e7d3      	b.n	8016726 <__gethex+0xee>
 801677e:	f04f 0901 	mov.w	r9, #1
 8016782:	e7fa      	b.n	801677a <__gethex+0x142>
 8016784:	230a      	movs	r3, #10
 8016786:	fb03 0202 	mla	r2, r3, r2, r0
 801678a:	3a10      	subs	r2, #16
 801678c:	e7d4      	b.n	8016738 <__gethex+0x100>
 801678e:	4631      	mov	r1, r6
 8016790:	e7df      	b.n	8016752 <__gethex+0x11a>
 8016792:	1bf3      	subs	r3, r6, r7
 8016794:	3b01      	subs	r3, #1
 8016796:	4621      	mov	r1, r4
 8016798:	2b07      	cmp	r3, #7
 801679a:	dc0b      	bgt.n	80167b4 <__gethex+0x17c>
 801679c:	ee18 0a10 	vmov	r0, s16
 80167a0:	f000 fb58 	bl	8016e54 <_Balloc>
 80167a4:	4604      	mov	r4, r0
 80167a6:	b940      	cbnz	r0, 80167ba <__gethex+0x182>
 80167a8:	4b5d      	ldr	r3, [pc, #372]	; (8016920 <__gethex+0x2e8>)
 80167aa:	4602      	mov	r2, r0
 80167ac:	21de      	movs	r1, #222	; 0xde
 80167ae:	485d      	ldr	r0, [pc, #372]	; (8016924 <__gethex+0x2ec>)
 80167b0:	f7fb fc10 	bl	8011fd4 <__assert_func>
 80167b4:	3101      	adds	r1, #1
 80167b6:	105b      	asrs	r3, r3, #1
 80167b8:	e7ee      	b.n	8016798 <__gethex+0x160>
 80167ba:	f100 0914 	add.w	r9, r0, #20
 80167be:	f04f 0b00 	mov.w	fp, #0
 80167c2:	f1ca 0301 	rsb	r3, sl, #1
 80167c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80167ca:	f8cd b000 	str.w	fp, [sp]
 80167ce:	9306      	str	r3, [sp, #24]
 80167d0:	42b7      	cmp	r7, r6
 80167d2:	d340      	bcc.n	8016856 <__gethex+0x21e>
 80167d4:	9802      	ldr	r0, [sp, #8]
 80167d6:	9b00      	ldr	r3, [sp, #0]
 80167d8:	f840 3b04 	str.w	r3, [r0], #4
 80167dc:	eba0 0009 	sub.w	r0, r0, r9
 80167e0:	1080      	asrs	r0, r0, #2
 80167e2:	0146      	lsls	r6, r0, #5
 80167e4:	6120      	str	r0, [r4, #16]
 80167e6:	4618      	mov	r0, r3
 80167e8:	f000 fc26 	bl	8017038 <__hi0bits>
 80167ec:	1a30      	subs	r0, r6, r0
 80167ee:	f8d8 6000 	ldr.w	r6, [r8]
 80167f2:	42b0      	cmp	r0, r6
 80167f4:	dd63      	ble.n	80168be <__gethex+0x286>
 80167f6:	1b87      	subs	r7, r0, r6
 80167f8:	4639      	mov	r1, r7
 80167fa:	4620      	mov	r0, r4
 80167fc:	f000 ffca 	bl	8017794 <__any_on>
 8016800:	4682      	mov	sl, r0
 8016802:	b1a8      	cbz	r0, 8016830 <__gethex+0x1f8>
 8016804:	1e7b      	subs	r3, r7, #1
 8016806:	1159      	asrs	r1, r3, #5
 8016808:	f003 021f 	and.w	r2, r3, #31
 801680c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016810:	f04f 0a01 	mov.w	sl, #1
 8016814:	fa0a f202 	lsl.w	r2, sl, r2
 8016818:	420a      	tst	r2, r1
 801681a:	d009      	beq.n	8016830 <__gethex+0x1f8>
 801681c:	4553      	cmp	r3, sl
 801681e:	dd05      	ble.n	801682c <__gethex+0x1f4>
 8016820:	1eb9      	subs	r1, r7, #2
 8016822:	4620      	mov	r0, r4
 8016824:	f000 ffb6 	bl	8017794 <__any_on>
 8016828:	2800      	cmp	r0, #0
 801682a:	d145      	bne.n	80168b8 <__gethex+0x280>
 801682c:	f04f 0a02 	mov.w	sl, #2
 8016830:	4639      	mov	r1, r7
 8016832:	4620      	mov	r0, r4
 8016834:	f7ff fe99 	bl	801656a <rshift>
 8016838:	443d      	add	r5, r7
 801683a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801683e:	42ab      	cmp	r3, r5
 8016840:	da4c      	bge.n	80168dc <__gethex+0x2a4>
 8016842:	ee18 0a10 	vmov	r0, s16
 8016846:	4621      	mov	r1, r4
 8016848:	f000 fb44 	bl	8016ed4 <_Bfree>
 801684c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801684e:	2300      	movs	r3, #0
 8016850:	6013      	str	r3, [r2, #0]
 8016852:	27a3      	movs	r7, #163	; 0xa3
 8016854:	e785      	b.n	8016762 <__gethex+0x12a>
 8016856:	1e73      	subs	r3, r6, #1
 8016858:	9a05      	ldr	r2, [sp, #20]
 801685a:	9303      	str	r3, [sp, #12]
 801685c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016860:	4293      	cmp	r3, r2
 8016862:	d019      	beq.n	8016898 <__gethex+0x260>
 8016864:	f1bb 0f20 	cmp.w	fp, #32
 8016868:	d107      	bne.n	801687a <__gethex+0x242>
 801686a:	9b02      	ldr	r3, [sp, #8]
 801686c:	9a00      	ldr	r2, [sp, #0]
 801686e:	f843 2b04 	str.w	r2, [r3], #4
 8016872:	9302      	str	r3, [sp, #8]
 8016874:	2300      	movs	r3, #0
 8016876:	9300      	str	r3, [sp, #0]
 8016878:	469b      	mov	fp, r3
 801687a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801687e:	f7ff fec6 	bl	801660e <__hexdig_fun>
 8016882:	9b00      	ldr	r3, [sp, #0]
 8016884:	f000 000f 	and.w	r0, r0, #15
 8016888:	fa00 f00b 	lsl.w	r0, r0, fp
 801688c:	4303      	orrs	r3, r0
 801688e:	9300      	str	r3, [sp, #0]
 8016890:	f10b 0b04 	add.w	fp, fp, #4
 8016894:	9b03      	ldr	r3, [sp, #12]
 8016896:	e00d      	b.n	80168b4 <__gethex+0x27c>
 8016898:	9b03      	ldr	r3, [sp, #12]
 801689a:	9a06      	ldr	r2, [sp, #24]
 801689c:	4413      	add	r3, r2
 801689e:	42bb      	cmp	r3, r7
 80168a0:	d3e0      	bcc.n	8016864 <__gethex+0x22c>
 80168a2:	4618      	mov	r0, r3
 80168a4:	9901      	ldr	r1, [sp, #4]
 80168a6:	9307      	str	r3, [sp, #28]
 80168a8:	4652      	mov	r2, sl
 80168aa:	f001 fd25 	bl	80182f8 <strncmp>
 80168ae:	9b07      	ldr	r3, [sp, #28]
 80168b0:	2800      	cmp	r0, #0
 80168b2:	d1d7      	bne.n	8016864 <__gethex+0x22c>
 80168b4:	461e      	mov	r6, r3
 80168b6:	e78b      	b.n	80167d0 <__gethex+0x198>
 80168b8:	f04f 0a03 	mov.w	sl, #3
 80168bc:	e7b8      	b.n	8016830 <__gethex+0x1f8>
 80168be:	da0a      	bge.n	80168d6 <__gethex+0x29e>
 80168c0:	1a37      	subs	r7, r6, r0
 80168c2:	4621      	mov	r1, r4
 80168c4:	ee18 0a10 	vmov	r0, s16
 80168c8:	463a      	mov	r2, r7
 80168ca:	f000 fd1f 	bl	801730c <__lshift>
 80168ce:	1bed      	subs	r5, r5, r7
 80168d0:	4604      	mov	r4, r0
 80168d2:	f100 0914 	add.w	r9, r0, #20
 80168d6:	f04f 0a00 	mov.w	sl, #0
 80168da:	e7ae      	b.n	801683a <__gethex+0x202>
 80168dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80168e0:	42a8      	cmp	r0, r5
 80168e2:	dd72      	ble.n	80169ca <__gethex+0x392>
 80168e4:	1b45      	subs	r5, r0, r5
 80168e6:	42ae      	cmp	r6, r5
 80168e8:	dc36      	bgt.n	8016958 <__gethex+0x320>
 80168ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80168ee:	2b02      	cmp	r3, #2
 80168f0:	d02a      	beq.n	8016948 <__gethex+0x310>
 80168f2:	2b03      	cmp	r3, #3
 80168f4:	d02c      	beq.n	8016950 <__gethex+0x318>
 80168f6:	2b01      	cmp	r3, #1
 80168f8:	d11c      	bne.n	8016934 <__gethex+0x2fc>
 80168fa:	42ae      	cmp	r6, r5
 80168fc:	d11a      	bne.n	8016934 <__gethex+0x2fc>
 80168fe:	2e01      	cmp	r6, #1
 8016900:	d112      	bne.n	8016928 <__gethex+0x2f0>
 8016902:	9a04      	ldr	r2, [sp, #16]
 8016904:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016908:	6013      	str	r3, [r2, #0]
 801690a:	2301      	movs	r3, #1
 801690c:	6123      	str	r3, [r4, #16]
 801690e:	f8c9 3000 	str.w	r3, [r9]
 8016912:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016914:	2762      	movs	r7, #98	; 0x62
 8016916:	601c      	str	r4, [r3, #0]
 8016918:	e723      	b.n	8016762 <__gethex+0x12a>
 801691a:	bf00      	nop
 801691c:	08049b5c 	.word	0x08049b5c
 8016920:	08049a81 	.word	0x08049a81
 8016924:	08049af4 	.word	0x08049af4
 8016928:	1e71      	subs	r1, r6, #1
 801692a:	4620      	mov	r0, r4
 801692c:	f000 ff32 	bl	8017794 <__any_on>
 8016930:	2800      	cmp	r0, #0
 8016932:	d1e6      	bne.n	8016902 <__gethex+0x2ca>
 8016934:	ee18 0a10 	vmov	r0, s16
 8016938:	4621      	mov	r1, r4
 801693a:	f000 facb 	bl	8016ed4 <_Bfree>
 801693e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016940:	2300      	movs	r3, #0
 8016942:	6013      	str	r3, [r2, #0]
 8016944:	2750      	movs	r7, #80	; 0x50
 8016946:	e70c      	b.n	8016762 <__gethex+0x12a>
 8016948:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801694a:	2b00      	cmp	r3, #0
 801694c:	d1f2      	bne.n	8016934 <__gethex+0x2fc>
 801694e:	e7d8      	b.n	8016902 <__gethex+0x2ca>
 8016950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016952:	2b00      	cmp	r3, #0
 8016954:	d1d5      	bne.n	8016902 <__gethex+0x2ca>
 8016956:	e7ed      	b.n	8016934 <__gethex+0x2fc>
 8016958:	1e6f      	subs	r7, r5, #1
 801695a:	f1ba 0f00 	cmp.w	sl, #0
 801695e:	d131      	bne.n	80169c4 <__gethex+0x38c>
 8016960:	b127      	cbz	r7, 801696c <__gethex+0x334>
 8016962:	4639      	mov	r1, r7
 8016964:	4620      	mov	r0, r4
 8016966:	f000 ff15 	bl	8017794 <__any_on>
 801696a:	4682      	mov	sl, r0
 801696c:	117b      	asrs	r3, r7, #5
 801696e:	2101      	movs	r1, #1
 8016970:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016974:	f007 071f 	and.w	r7, r7, #31
 8016978:	fa01 f707 	lsl.w	r7, r1, r7
 801697c:	421f      	tst	r7, r3
 801697e:	4629      	mov	r1, r5
 8016980:	4620      	mov	r0, r4
 8016982:	bf18      	it	ne
 8016984:	f04a 0a02 	orrne.w	sl, sl, #2
 8016988:	1b76      	subs	r6, r6, r5
 801698a:	f7ff fdee 	bl	801656a <rshift>
 801698e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016992:	2702      	movs	r7, #2
 8016994:	f1ba 0f00 	cmp.w	sl, #0
 8016998:	d048      	beq.n	8016a2c <__gethex+0x3f4>
 801699a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801699e:	2b02      	cmp	r3, #2
 80169a0:	d015      	beq.n	80169ce <__gethex+0x396>
 80169a2:	2b03      	cmp	r3, #3
 80169a4:	d017      	beq.n	80169d6 <__gethex+0x39e>
 80169a6:	2b01      	cmp	r3, #1
 80169a8:	d109      	bne.n	80169be <__gethex+0x386>
 80169aa:	f01a 0f02 	tst.w	sl, #2
 80169ae:	d006      	beq.n	80169be <__gethex+0x386>
 80169b0:	f8d9 0000 	ldr.w	r0, [r9]
 80169b4:	ea4a 0a00 	orr.w	sl, sl, r0
 80169b8:	f01a 0f01 	tst.w	sl, #1
 80169bc:	d10e      	bne.n	80169dc <__gethex+0x3a4>
 80169be:	f047 0710 	orr.w	r7, r7, #16
 80169c2:	e033      	b.n	8016a2c <__gethex+0x3f4>
 80169c4:	f04f 0a01 	mov.w	sl, #1
 80169c8:	e7d0      	b.n	801696c <__gethex+0x334>
 80169ca:	2701      	movs	r7, #1
 80169cc:	e7e2      	b.n	8016994 <__gethex+0x35c>
 80169ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169d0:	f1c3 0301 	rsb	r3, r3, #1
 80169d4:	9315      	str	r3, [sp, #84]	; 0x54
 80169d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d0f0      	beq.n	80169be <__gethex+0x386>
 80169dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80169e0:	f104 0314 	add.w	r3, r4, #20
 80169e4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80169e8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80169ec:	f04f 0c00 	mov.w	ip, #0
 80169f0:	4618      	mov	r0, r3
 80169f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80169f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80169fa:	d01c      	beq.n	8016a36 <__gethex+0x3fe>
 80169fc:	3201      	adds	r2, #1
 80169fe:	6002      	str	r2, [r0, #0]
 8016a00:	2f02      	cmp	r7, #2
 8016a02:	f104 0314 	add.w	r3, r4, #20
 8016a06:	d13f      	bne.n	8016a88 <__gethex+0x450>
 8016a08:	f8d8 2000 	ldr.w	r2, [r8]
 8016a0c:	3a01      	subs	r2, #1
 8016a0e:	42b2      	cmp	r2, r6
 8016a10:	d10a      	bne.n	8016a28 <__gethex+0x3f0>
 8016a12:	1171      	asrs	r1, r6, #5
 8016a14:	2201      	movs	r2, #1
 8016a16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016a1a:	f006 061f 	and.w	r6, r6, #31
 8016a1e:	fa02 f606 	lsl.w	r6, r2, r6
 8016a22:	421e      	tst	r6, r3
 8016a24:	bf18      	it	ne
 8016a26:	4617      	movne	r7, r2
 8016a28:	f047 0720 	orr.w	r7, r7, #32
 8016a2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016a2e:	601c      	str	r4, [r3, #0]
 8016a30:	9b04      	ldr	r3, [sp, #16]
 8016a32:	601d      	str	r5, [r3, #0]
 8016a34:	e695      	b.n	8016762 <__gethex+0x12a>
 8016a36:	4299      	cmp	r1, r3
 8016a38:	f843 cc04 	str.w	ip, [r3, #-4]
 8016a3c:	d8d8      	bhi.n	80169f0 <__gethex+0x3b8>
 8016a3e:	68a3      	ldr	r3, [r4, #8]
 8016a40:	459b      	cmp	fp, r3
 8016a42:	db19      	blt.n	8016a78 <__gethex+0x440>
 8016a44:	6861      	ldr	r1, [r4, #4]
 8016a46:	ee18 0a10 	vmov	r0, s16
 8016a4a:	3101      	adds	r1, #1
 8016a4c:	f000 fa02 	bl	8016e54 <_Balloc>
 8016a50:	4681      	mov	r9, r0
 8016a52:	b918      	cbnz	r0, 8016a5c <__gethex+0x424>
 8016a54:	4b1a      	ldr	r3, [pc, #104]	; (8016ac0 <__gethex+0x488>)
 8016a56:	4602      	mov	r2, r0
 8016a58:	2184      	movs	r1, #132	; 0x84
 8016a5a:	e6a8      	b.n	80167ae <__gethex+0x176>
 8016a5c:	6922      	ldr	r2, [r4, #16]
 8016a5e:	3202      	adds	r2, #2
 8016a60:	f104 010c 	add.w	r1, r4, #12
 8016a64:	0092      	lsls	r2, r2, #2
 8016a66:	300c      	adds	r0, #12
 8016a68:	f7fb fb26 	bl	80120b8 <memcpy>
 8016a6c:	4621      	mov	r1, r4
 8016a6e:	ee18 0a10 	vmov	r0, s16
 8016a72:	f000 fa2f 	bl	8016ed4 <_Bfree>
 8016a76:	464c      	mov	r4, r9
 8016a78:	6923      	ldr	r3, [r4, #16]
 8016a7a:	1c5a      	adds	r2, r3, #1
 8016a7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016a80:	6122      	str	r2, [r4, #16]
 8016a82:	2201      	movs	r2, #1
 8016a84:	615a      	str	r2, [r3, #20]
 8016a86:	e7bb      	b.n	8016a00 <__gethex+0x3c8>
 8016a88:	6922      	ldr	r2, [r4, #16]
 8016a8a:	455a      	cmp	r2, fp
 8016a8c:	dd0b      	ble.n	8016aa6 <__gethex+0x46e>
 8016a8e:	2101      	movs	r1, #1
 8016a90:	4620      	mov	r0, r4
 8016a92:	f7ff fd6a 	bl	801656a <rshift>
 8016a96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016a9a:	3501      	adds	r5, #1
 8016a9c:	42ab      	cmp	r3, r5
 8016a9e:	f6ff aed0 	blt.w	8016842 <__gethex+0x20a>
 8016aa2:	2701      	movs	r7, #1
 8016aa4:	e7c0      	b.n	8016a28 <__gethex+0x3f0>
 8016aa6:	f016 061f 	ands.w	r6, r6, #31
 8016aaa:	d0fa      	beq.n	8016aa2 <__gethex+0x46a>
 8016aac:	4453      	add	r3, sl
 8016aae:	f1c6 0620 	rsb	r6, r6, #32
 8016ab2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016ab6:	f000 fabf 	bl	8017038 <__hi0bits>
 8016aba:	42b0      	cmp	r0, r6
 8016abc:	dbe7      	blt.n	8016a8e <__gethex+0x456>
 8016abe:	e7f0      	b.n	8016aa2 <__gethex+0x46a>
 8016ac0:	08049a81 	.word	0x08049a81

08016ac4 <L_shift>:
 8016ac4:	f1c2 0208 	rsb	r2, r2, #8
 8016ac8:	0092      	lsls	r2, r2, #2
 8016aca:	b570      	push	{r4, r5, r6, lr}
 8016acc:	f1c2 0620 	rsb	r6, r2, #32
 8016ad0:	6843      	ldr	r3, [r0, #4]
 8016ad2:	6804      	ldr	r4, [r0, #0]
 8016ad4:	fa03 f506 	lsl.w	r5, r3, r6
 8016ad8:	432c      	orrs	r4, r5
 8016ada:	40d3      	lsrs	r3, r2
 8016adc:	6004      	str	r4, [r0, #0]
 8016ade:	f840 3f04 	str.w	r3, [r0, #4]!
 8016ae2:	4288      	cmp	r0, r1
 8016ae4:	d3f4      	bcc.n	8016ad0 <L_shift+0xc>
 8016ae6:	bd70      	pop	{r4, r5, r6, pc}

08016ae8 <__match>:
 8016ae8:	b530      	push	{r4, r5, lr}
 8016aea:	6803      	ldr	r3, [r0, #0]
 8016aec:	3301      	adds	r3, #1
 8016aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016af2:	b914      	cbnz	r4, 8016afa <__match+0x12>
 8016af4:	6003      	str	r3, [r0, #0]
 8016af6:	2001      	movs	r0, #1
 8016af8:	bd30      	pop	{r4, r5, pc}
 8016afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016afe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016b02:	2d19      	cmp	r5, #25
 8016b04:	bf98      	it	ls
 8016b06:	3220      	addls	r2, #32
 8016b08:	42a2      	cmp	r2, r4
 8016b0a:	d0f0      	beq.n	8016aee <__match+0x6>
 8016b0c:	2000      	movs	r0, #0
 8016b0e:	e7f3      	b.n	8016af8 <__match+0x10>

08016b10 <__hexnan>:
 8016b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b14:	680b      	ldr	r3, [r1, #0]
 8016b16:	115e      	asrs	r6, r3, #5
 8016b18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016b1c:	f013 031f 	ands.w	r3, r3, #31
 8016b20:	b087      	sub	sp, #28
 8016b22:	bf18      	it	ne
 8016b24:	3604      	addne	r6, #4
 8016b26:	2500      	movs	r5, #0
 8016b28:	1f37      	subs	r7, r6, #4
 8016b2a:	4690      	mov	r8, r2
 8016b2c:	6802      	ldr	r2, [r0, #0]
 8016b2e:	9301      	str	r3, [sp, #4]
 8016b30:	4682      	mov	sl, r0
 8016b32:	f846 5c04 	str.w	r5, [r6, #-4]
 8016b36:	46b9      	mov	r9, r7
 8016b38:	463c      	mov	r4, r7
 8016b3a:	9502      	str	r5, [sp, #8]
 8016b3c:	46ab      	mov	fp, r5
 8016b3e:	7851      	ldrb	r1, [r2, #1]
 8016b40:	1c53      	adds	r3, r2, #1
 8016b42:	9303      	str	r3, [sp, #12]
 8016b44:	b341      	cbz	r1, 8016b98 <__hexnan+0x88>
 8016b46:	4608      	mov	r0, r1
 8016b48:	9205      	str	r2, [sp, #20]
 8016b4a:	9104      	str	r1, [sp, #16]
 8016b4c:	f7ff fd5f 	bl	801660e <__hexdig_fun>
 8016b50:	2800      	cmp	r0, #0
 8016b52:	d14f      	bne.n	8016bf4 <__hexnan+0xe4>
 8016b54:	9904      	ldr	r1, [sp, #16]
 8016b56:	9a05      	ldr	r2, [sp, #20]
 8016b58:	2920      	cmp	r1, #32
 8016b5a:	d818      	bhi.n	8016b8e <__hexnan+0x7e>
 8016b5c:	9b02      	ldr	r3, [sp, #8]
 8016b5e:	459b      	cmp	fp, r3
 8016b60:	dd13      	ble.n	8016b8a <__hexnan+0x7a>
 8016b62:	454c      	cmp	r4, r9
 8016b64:	d206      	bcs.n	8016b74 <__hexnan+0x64>
 8016b66:	2d07      	cmp	r5, #7
 8016b68:	dc04      	bgt.n	8016b74 <__hexnan+0x64>
 8016b6a:	462a      	mov	r2, r5
 8016b6c:	4649      	mov	r1, r9
 8016b6e:	4620      	mov	r0, r4
 8016b70:	f7ff ffa8 	bl	8016ac4 <L_shift>
 8016b74:	4544      	cmp	r4, r8
 8016b76:	d950      	bls.n	8016c1a <__hexnan+0x10a>
 8016b78:	2300      	movs	r3, #0
 8016b7a:	f1a4 0904 	sub.w	r9, r4, #4
 8016b7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016b82:	f8cd b008 	str.w	fp, [sp, #8]
 8016b86:	464c      	mov	r4, r9
 8016b88:	461d      	mov	r5, r3
 8016b8a:	9a03      	ldr	r2, [sp, #12]
 8016b8c:	e7d7      	b.n	8016b3e <__hexnan+0x2e>
 8016b8e:	2929      	cmp	r1, #41	; 0x29
 8016b90:	d156      	bne.n	8016c40 <__hexnan+0x130>
 8016b92:	3202      	adds	r2, #2
 8016b94:	f8ca 2000 	str.w	r2, [sl]
 8016b98:	f1bb 0f00 	cmp.w	fp, #0
 8016b9c:	d050      	beq.n	8016c40 <__hexnan+0x130>
 8016b9e:	454c      	cmp	r4, r9
 8016ba0:	d206      	bcs.n	8016bb0 <__hexnan+0xa0>
 8016ba2:	2d07      	cmp	r5, #7
 8016ba4:	dc04      	bgt.n	8016bb0 <__hexnan+0xa0>
 8016ba6:	462a      	mov	r2, r5
 8016ba8:	4649      	mov	r1, r9
 8016baa:	4620      	mov	r0, r4
 8016bac:	f7ff ff8a 	bl	8016ac4 <L_shift>
 8016bb0:	4544      	cmp	r4, r8
 8016bb2:	d934      	bls.n	8016c1e <__hexnan+0x10e>
 8016bb4:	f1a8 0204 	sub.w	r2, r8, #4
 8016bb8:	4623      	mov	r3, r4
 8016bba:	f853 1b04 	ldr.w	r1, [r3], #4
 8016bbe:	f842 1f04 	str.w	r1, [r2, #4]!
 8016bc2:	429f      	cmp	r7, r3
 8016bc4:	d2f9      	bcs.n	8016bba <__hexnan+0xaa>
 8016bc6:	1b3b      	subs	r3, r7, r4
 8016bc8:	f023 0303 	bic.w	r3, r3, #3
 8016bcc:	3304      	adds	r3, #4
 8016bce:	3401      	adds	r4, #1
 8016bd0:	3e03      	subs	r6, #3
 8016bd2:	42b4      	cmp	r4, r6
 8016bd4:	bf88      	it	hi
 8016bd6:	2304      	movhi	r3, #4
 8016bd8:	4443      	add	r3, r8
 8016bda:	2200      	movs	r2, #0
 8016bdc:	f843 2b04 	str.w	r2, [r3], #4
 8016be0:	429f      	cmp	r7, r3
 8016be2:	d2fb      	bcs.n	8016bdc <__hexnan+0xcc>
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	b91b      	cbnz	r3, 8016bf0 <__hexnan+0xe0>
 8016be8:	4547      	cmp	r7, r8
 8016bea:	d127      	bne.n	8016c3c <__hexnan+0x12c>
 8016bec:	2301      	movs	r3, #1
 8016bee:	603b      	str	r3, [r7, #0]
 8016bf0:	2005      	movs	r0, #5
 8016bf2:	e026      	b.n	8016c42 <__hexnan+0x132>
 8016bf4:	3501      	adds	r5, #1
 8016bf6:	2d08      	cmp	r5, #8
 8016bf8:	f10b 0b01 	add.w	fp, fp, #1
 8016bfc:	dd06      	ble.n	8016c0c <__hexnan+0xfc>
 8016bfe:	4544      	cmp	r4, r8
 8016c00:	d9c3      	bls.n	8016b8a <__hexnan+0x7a>
 8016c02:	2300      	movs	r3, #0
 8016c04:	f844 3c04 	str.w	r3, [r4, #-4]
 8016c08:	2501      	movs	r5, #1
 8016c0a:	3c04      	subs	r4, #4
 8016c0c:	6822      	ldr	r2, [r4, #0]
 8016c0e:	f000 000f 	and.w	r0, r0, #15
 8016c12:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016c16:	6022      	str	r2, [r4, #0]
 8016c18:	e7b7      	b.n	8016b8a <__hexnan+0x7a>
 8016c1a:	2508      	movs	r5, #8
 8016c1c:	e7b5      	b.n	8016b8a <__hexnan+0x7a>
 8016c1e:	9b01      	ldr	r3, [sp, #4]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d0df      	beq.n	8016be4 <__hexnan+0xd4>
 8016c24:	f04f 32ff 	mov.w	r2, #4294967295
 8016c28:	f1c3 0320 	rsb	r3, r3, #32
 8016c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8016c30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016c34:	401a      	ands	r2, r3
 8016c36:	f846 2c04 	str.w	r2, [r6, #-4]
 8016c3a:	e7d3      	b.n	8016be4 <__hexnan+0xd4>
 8016c3c:	3f04      	subs	r7, #4
 8016c3e:	e7d1      	b.n	8016be4 <__hexnan+0xd4>
 8016c40:	2004      	movs	r0, #4
 8016c42:	b007      	add	sp, #28
 8016c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c48 <_findenv_r>:
 8016c48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c4c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8016cbc <_findenv_r+0x74>
 8016c50:	4607      	mov	r7, r0
 8016c52:	4689      	mov	r9, r1
 8016c54:	4616      	mov	r6, r2
 8016c56:	f001 fbab 	bl	80183b0 <__env_lock>
 8016c5a:	f8da 4000 	ldr.w	r4, [sl]
 8016c5e:	b134      	cbz	r4, 8016c6e <_findenv_r+0x26>
 8016c60:	464b      	mov	r3, r9
 8016c62:	4698      	mov	r8, r3
 8016c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c68:	b13a      	cbz	r2, 8016c7a <_findenv_r+0x32>
 8016c6a:	2a3d      	cmp	r2, #61	; 0x3d
 8016c6c:	d1f9      	bne.n	8016c62 <_findenv_r+0x1a>
 8016c6e:	4638      	mov	r0, r7
 8016c70:	f001 fba4 	bl	80183bc <__env_unlock>
 8016c74:	2000      	movs	r0, #0
 8016c76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c7a:	eba8 0809 	sub.w	r8, r8, r9
 8016c7e:	46a3      	mov	fp, r4
 8016c80:	f854 0b04 	ldr.w	r0, [r4], #4
 8016c84:	2800      	cmp	r0, #0
 8016c86:	d0f2      	beq.n	8016c6e <_findenv_r+0x26>
 8016c88:	4642      	mov	r2, r8
 8016c8a:	4649      	mov	r1, r9
 8016c8c:	f001 fb34 	bl	80182f8 <strncmp>
 8016c90:	2800      	cmp	r0, #0
 8016c92:	d1f4      	bne.n	8016c7e <_findenv_r+0x36>
 8016c94:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016c98:	eb03 0508 	add.w	r5, r3, r8
 8016c9c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016ca0:	2b3d      	cmp	r3, #61	; 0x3d
 8016ca2:	d1ec      	bne.n	8016c7e <_findenv_r+0x36>
 8016ca4:	f8da 3000 	ldr.w	r3, [sl]
 8016ca8:	ebab 0303 	sub.w	r3, fp, r3
 8016cac:	109b      	asrs	r3, r3, #2
 8016cae:	4638      	mov	r0, r7
 8016cb0:	6033      	str	r3, [r6, #0]
 8016cb2:	f001 fb83 	bl	80183bc <__env_unlock>
 8016cb6:	1c68      	adds	r0, r5, #1
 8016cb8:	e7dd      	b.n	8016c76 <_findenv_r+0x2e>
 8016cba:	bf00      	nop
 8016cbc:	200001b0 	.word	0x200001b0

08016cc0 <_getenv_r>:
 8016cc0:	b507      	push	{r0, r1, r2, lr}
 8016cc2:	aa01      	add	r2, sp, #4
 8016cc4:	f7ff ffc0 	bl	8016c48 <_findenv_r>
 8016cc8:	b003      	add	sp, #12
 8016cca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016cd0 <__gettzinfo>:
 8016cd0:	4800      	ldr	r0, [pc, #0]	; (8016cd4 <__gettzinfo+0x4>)
 8016cd2:	4770      	bx	lr
 8016cd4:	20000360 	.word	0x20000360

08016cd8 <labs>:
 8016cd8:	2800      	cmp	r0, #0
 8016cda:	bfb8      	it	lt
 8016cdc:	4240      	neglt	r0, r0
 8016cde:	4770      	bx	lr

08016ce0 <_localeconv_r>:
 8016ce0:	4800      	ldr	r0, [pc, #0]	; (8016ce4 <_localeconv_r+0x4>)
 8016ce2:	4770      	bx	lr
 8016ce4:	200004ac 	.word	0x200004ac

08016ce8 <__retarget_lock_init_recursive>:
 8016ce8:	4770      	bx	lr

08016cea <__retarget_lock_acquire>:
 8016cea:	4770      	bx	lr

08016cec <__retarget_lock_acquire_recursive>:
 8016cec:	4770      	bx	lr

08016cee <__retarget_lock_release>:
 8016cee:	4770      	bx	lr

08016cf0 <__retarget_lock_release_recursive>:
 8016cf0:	4770      	bx	lr
	...

08016cf4 <_lseek_r>:
 8016cf4:	b538      	push	{r3, r4, r5, lr}
 8016cf6:	4d07      	ldr	r5, [pc, #28]	; (8016d14 <_lseek_r+0x20>)
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	4608      	mov	r0, r1
 8016cfc:	4611      	mov	r1, r2
 8016cfe:	2200      	movs	r2, #0
 8016d00:	602a      	str	r2, [r5, #0]
 8016d02:	461a      	mov	r2, r3
 8016d04:	f7ed fcb6 	bl	8004674 <_lseek>
 8016d08:	1c43      	adds	r3, r0, #1
 8016d0a:	d102      	bne.n	8016d12 <_lseek_r+0x1e>
 8016d0c:	682b      	ldr	r3, [r5, #0]
 8016d0e:	b103      	cbz	r3, 8016d12 <_lseek_r+0x1e>
 8016d10:	6023      	str	r3, [r4, #0]
 8016d12:	bd38      	pop	{r3, r4, r5, pc}
 8016d14:	20005dc8 	.word	0x20005dc8

08016d18 <__swhatbuf_r>:
 8016d18:	b570      	push	{r4, r5, r6, lr}
 8016d1a:	460e      	mov	r6, r1
 8016d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d20:	2900      	cmp	r1, #0
 8016d22:	b096      	sub	sp, #88	; 0x58
 8016d24:	4614      	mov	r4, r2
 8016d26:	461d      	mov	r5, r3
 8016d28:	da08      	bge.n	8016d3c <__swhatbuf_r+0x24>
 8016d2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016d2e:	2200      	movs	r2, #0
 8016d30:	602a      	str	r2, [r5, #0]
 8016d32:	061a      	lsls	r2, r3, #24
 8016d34:	d410      	bmi.n	8016d58 <__swhatbuf_r+0x40>
 8016d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d3a:	e00e      	b.n	8016d5a <__swhatbuf_r+0x42>
 8016d3c:	466a      	mov	r2, sp
 8016d3e:	f001 fb43 	bl	80183c8 <_fstat_r>
 8016d42:	2800      	cmp	r0, #0
 8016d44:	dbf1      	blt.n	8016d2a <__swhatbuf_r+0x12>
 8016d46:	9a01      	ldr	r2, [sp, #4]
 8016d48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016d4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016d50:	425a      	negs	r2, r3
 8016d52:	415a      	adcs	r2, r3
 8016d54:	602a      	str	r2, [r5, #0]
 8016d56:	e7ee      	b.n	8016d36 <__swhatbuf_r+0x1e>
 8016d58:	2340      	movs	r3, #64	; 0x40
 8016d5a:	2000      	movs	r0, #0
 8016d5c:	6023      	str	r3, [r4, #0]
 8016d5e:	b016      	add	sp, #88	; 0x58
 8016d60:	bd70      	pop	{r4, r5, r6, pc}
	...

08016d64 <__smakebuf_r>:
 8016d64:	898b      	ldrh	r3, [r1, #12]
 8016d66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d68:	079d      	lsls	r5, r3, #30
 8016d6a:	4606      	mov	r6, r0
 8016d6c:	460c      	mov	r4, r1
 8016d6e:	d507      	bpl.n	8016d80 <__smakebuf_r+0x1c>
 8016d70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016d74:	6023      	str	r3, [r4, #0]
 8016d76:	6123      	str	r3, [r4, #16]
 8016d78:	2301      	movs	r3, #1
 8016d7a:	6163      	str	r3, [r4, #20]
 8016d7c:	b002      	add	sp, #8
 8016d7e:	bd70      	pop	{r4, r5, r6, pc}
 8016d80:	ab01      	add	r3, sp, #4
 8016d82:	466a      	mov	r2, sp
 8016d84:	f7ff ffc8 	bl	8016d18 <__swhatbuf_r>
 8016d88:	9900      	ldr	r1, [sp, #0]
 8016d8a:	4605      	mov	r5, r0
 8016d8c:	4630      	mov	r0, r6
 8016d8e:	f7fb fc87 	bl	80126a0 <_malloc_r>
 8016d92:	b948      	cbnz	r0, 8016da8 <__smakebuf_r+0x44>
 8016d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d98:	059a      	lsls	r2, r3, #22
 8016d9a:	d4ef      	bmi.n	8016d7c <__smakebuf_r+0x18>
 8016d9c:	f023 0303 	bic.w	r3, r3, #3
 8016da0:	f043 0302 	orr.w	r3, r3, #2
 8016da4:	81a3      	strh	r3, [r4, #12]
 8016da6:	e7e3      	b.n	8016d70 <__smakebuf_r+0xc>
 8016da8:	4b0d      	ldr	r3, [pc, #52]	; (8016de0 <__smakebuf_r+0x7c>)
 8016daa:	62b3      	str	r3, [r6, #40]	; 0x28
 8016dac:	89a3      	ldrh	r3, [r4, #12]
 8016dae:	6020      	str	r0, [r4, #0]
 8016db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016db4:	81a3      	strh	r3, [r4, #12]
 8016db6:	9b00      	ldr	r3, [sp, #0]
 8016db8:	6163      	str	r3, [r4, #20]
 8016dba:	9b01      	ldr	r3, [sp, #4]
 8016dbc:	6120      	str	r0, [r4, #16]
 8016dbe:	b15b      	cbz	r3, 8016dd8 <__smakebuf_r+0x74>
 8016dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	f001 fb11 	bl	80183ec <_isatty_r>
 8016dca:	b128      	cbz	r0, 8016dd8 <__smakebuf_r+0x74>
 8016dcc:	89a3      	ldrh	r3, [r4, #12]
 8016dce:	f023 0303 	bic.w	r3, r3, #3
 8016dd2:	f043 0301 	orr.w	r3, r3, #1
 8016dd6:	81a3      	strh	r3, [r4, #12]
 8016dd8:	89a0      	ldrh	r0, [r4, #12]
 8016dda:	4305      	orrs	r5, r0
 8016ddc:	81a5      	strh	r5, [r4, #12]
 8016dde:	e7cd      	b.n	8016d7c <__smakebuf_r+0x18>
 8016de0:	080163c9 	.word	0x080163c9

08016de4 <__ascii_mbtowc>:
 8016de4:	b082      	sub	sp, #8
 8016de6:	b901      	cbnz	r1, 8016dea <__ascii_mbtowc+0x6>
 8016de8:	a901      	add	r1, sp, #4
 8016dea:	b142      	cbz	r2, 8016dfe <__ascii_mbtowc+0x1a>
 8016dec:	b14b      	cbz	r3, 8016e02 <__ascii_mbtowc+0x1e>
 8016dee:	7813      	ldrb	r3, [r2, #0]
 8016df0:	600b      	str	r3, [r1, #0]
 8016df2:	7812      	ldrb	r2, [r2, #0]
 8016df4:	1e10      	subs	r0, r2, #0
 8016df6:	bf18      	it	ne
 8016df8:	2001      	movne	r0, #1
 8016dfa:	b002      	add	sp, #8
 8016dfc:	4770      	bx	lr
 8016dfe:	4610      	mov	r0, r2
 8016e00:	e7fb      	b.n	8016dfa <__ascii_mbtowc+0x16>
 8016e02:	f06f 0001 	mvn.w	r0, #1
 8016e06:	e7f8      	b.n	8016dfa <__ascii_mbtowc+0x16>

08016e08 <memmove>:
 8016e08:	4288      	cmp	r0, r1
 8016e0a:	b510      	push	{r4, lr}
 8016e0c:	eb01 0402 	add.w	r4, r1, r2
 8016e10:	d902      	bls.n	8016e18 <memmove+0x10>
 8016e12:	4284      	cmp	r4, r0
 8016e14:	4623      	mov	r3, r4
 8016e16:	d807      	bhi.n	8016e28 <memmove+0x20>
 8016e18:	1e43      	subs	r3, r0, #1
 8016e1a:	42a1      	cmp	r1, r4
 8016e1c:	d008      	beq.n	8016e30 <memmove+0x28>
 8016e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016e26:	e7f8      	b.n	8016e1a <memmove+0x12>
 8016e28:	4402      	add	r2, r0
 8016e2a:	4601      	mov	r1, r0
 8016e2c:	428a      	cmp	r2, r1
 8016e2e:	d100      	bne.n	8016e32 <memmove+0x2a>
 8016e30:	bd10      	pop	{r4, pc}
 8016e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016e3a:	e7f7      	b.n	8016e2c <memmove+0x24>

08016e3c <__malloc_lock>:
 8016e3c:	4801      	ldr	r0, [pc, #4]	; (8016e44 <__malloc_lock+0x8>)
 8016e3e:	f7ff bf55 	b.w	8016cec <__retarget_lock_acquire_recursive>
 8016e42:	bf00      	nop
 8016e44:	20005dc1 	.word	0x20005dc1

08016e48 <__malloc_unlock>:
 8016e48:	4801      	ldr	r0, [pc, #4]	; (8016e50 <__malloc_unlock+0x8>)
 8016e4a:	f7ff bf51 	b.w	8016cf0 <__retarget_lock_release_recursive>
 8016e4e:	bf00      	nop
 8016e50:	20005dc1 	.word	0x20005dc1

08016e54 <_Balloc>:
 8016e54:	b570      	push	{r4, r5, r6, lr}
 8016e56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016e58:	4604      	mov	r4, r0
 8016e5a:	460d      	mov	r5, r1
 8016e5c:	b976      	cbnz	r6, 8016e7c <_Balloc+0x28>
 8016e5e:	2010      	movs	r0, #16
 8016e60:	f7fb f91a 	bl	8012098 <malloc>
 8016e64:	4602      	mov	r2, r0
 8016e66:	6260      	str	r0, [r4, #36]	; 0x24
 8016e68:	b920      	cbnz	r0, 8016e74 <_Balloc+0x20>
 8016e6a:	4b18      	ldr	r3, [pc, #96]	; (8016ecc <_Balloc+0x78>)
 8016e6c:	4818      	ldr	r0, [pc, #96]	; (8016ed0 <_Balloc+0x7c>)
 8016e6e:	2166      	movs	r1, #102	; 0x66
 8016e70:	f7fb f8b0 	bl	8011fd4 <__assert_func>
 8016e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016e78:	6006      	str	r6, [r0, #0]
 8016e7a:	60c6      	str	r6, [r0, #12]
 8016e7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016e7e:	68f3      	ldr	r3, [r6, #12]
 8016e80:	b183      	cbz	r3, 8016ea4 <_Balloc+0x50>
 8016e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e84:	68db      	ldr	r3, [r3, #12]
 8016e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016e8a:	b9b8      	cbnz	r0, 8016ebc <_Balloc+0x68>
 8016e8c:	2101      	movs	r1, #1
 8016e8e:	fa01 f605 	lsl.w	r6, r1, r5
 8016e92:	1d72      	adds	r2, r6, #5
 8016e94:	0092      	lsls	r2, r2, #2
 8016e96:	4620      	mov	r0, r4
 8016e98:	f000 fc9d 	bl	80177d6 <_calloc_r>
 8016e9c:	b160      	cbz	r0, 8016eb8 <_Balloc+0x64>
 8016e9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016ea2:	e00e      	b.n	8016ec2 <_Balloc+0x6e>
 8016ea4:	2221      	movs	r2, #33	; 0x21
 8016ea6:	2104      	movs	r1, #4
 8016ea8:	4620      	mov	r0, r4
 8016eaa:	f000 fc94 	bl	80177d6 <_calloc_r>
 8016eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016eb0:	60f0      	str	r0, [r6, #12]
 8016eb2:	68db      	ldr	r3, [r3, #12]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d1e4      	bne.n	8016e82 <_Balloc+0x2e>
 8016eb8:	2000      	movs	r0, #0
 8016eba:	bd70      	pop	{r4, r5, r6, pc}
 8016ebc:	6802      	ldr	r2, [r0, #0]
 8016ebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016ec8:	e7f7      	b.n	8016eba <_Balloc+0x66>
 8016eca:	bf00      	nop
 8016ecc:	08049400 	.word	0x08049400
 8016ed0:	08049bd0 	.word	0x08049bd0

08016ed4 <_Bfree>:
 8016ed4:	b570      	push	{r4, r5, r6, lr}
 8016ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016ed8:	4605      	mov	r5, r0
 8016eda:	460c      	mov	r4, r1
 8016edc:	b976      	cbnz	r6, 8016efc <_Bfree+0x28>
 8016ede:	2010      	movs	r0, #16
 8016ee0:	f7fb f8da 	bl	8012098 <malloc>
 8016ee4:	4602      	mov	r2, r0
 8016ee6:	6268      	str	r0, [r5, #36]	; 0x24
 8016ee8:	b920      	cbnz	r0, 8016ef4 <_Bfree+0x20>
 8016eea:	4b09      	ldr	r3, [pc, #36]	; (8016f10 <_Bfree+0x3c>)
 8016eec:	4809      	ldr	r0, [pc, #36]	; (8016f14 <_Bfree+0x40>)
 8016eee:	218a      	movs	r1, #138	; 0x8a
 8016ef0:	f7fb f870 	bl	8011fd4 <__assert_func>
 8016ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016ef8:	6006      	str	r6, [r0, #0]
 8016efa:	60c6      	str	r6, [r0, #12]
 8016efc:	b13c      	cbz	r4, 8016f0e <_Bfree+0x3a>
 8016efe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016f00:	6862      	ldr	r2, [r4, #4]
 8016f02:	68db      	ldr	r3, [r3, #12]
 8016f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016f08:	6021      	str	r1, [r4, #0]
 8016f0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016f0e:	bd70      	pop	{r4, r5, r6, pc}
 8016f10:	08049400 	.word	0x08049400
 8016f14:	08049bd0 	.word	0x08049bd0

08016f18 <__multadd>:
 8016f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f1c:	690d      	ldr	r5, [r1, #16]
 8016f1e:	4607      	mov	r7, r0
 8016f20:	460c      	mov	r4, r1
 8016f22:	461e      	mov	r6, r3
 8016f24:	f101 0c14 	add.w	ip, r1, #20
 8016f28:	2000      	movs	r0, #0
 8016f2a:	f8dc 3000 	ldr.w	r3, [ip]
 8016f2e:	b299      	uxth	r1, r3
 8016f30:	fb02 6101 	mla	r1, r2, r1, r6
 8016f34:	0c1e      	lsrs	r6, r3, #16
 8016f36:	0c0b      	lsrs	r3, r1, #16
 8016f38:	fb02 3306 	mla	r3, r2, r6, r3
 8016f3c:	b289      	uxth	r1, r1
 8016f3e:	3001      	adds	r0, #1
 8016f40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016f44:	4285      	cmp	r5, r0
 8016f46:	f84c 1b04 	str.w	r1, [ip], #4
 8016f4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016f4e:	dcec      	bgt.n	8016f2a <__multadd+0x12>
 8016f50:	b30e      	cbz	r6, 8016f96 <__multadd+0x7e>
 8016f52:	68a3      	ldr	r3, [r4, #8]
 8016f54:	42ab      	cmp	r3, r5
 8016f56:	dc19      	bgt.n	8016f8c <__multadd+0x74>
 8016f58:	6861      	ldr	r1, [r4, #4]
 8016f5a:	4638      	mov	r0, r7
 8016f5c:	3101      	adds	r1, #1
 8016f5e:	f7ff ff79 	bl	8016e54 <_Balloc>
 8016f62:	4680      	mov	r8, r0
 8016f64:	b928      	cbnz	r0, 8016f72 <__multadd+0x5a>
 8016f66:	4602      	mov	r2, r0
 8016f68:	4b0c      	ldr	r3, [pc, #48]	; (8016f9c <__multadd+0x84>)
 8016f6a:	480d      	ldr	r0, [pc, #52]	; (8016fa0 <__multadd+0x88>)
 8016f6c:	21b5      	movs	r1, #181	; 0xb5
 8016f6e:	f7fb f831 	bl	8011fd4 <__assert_func>
 8016f72:	6922      	ldr	r2, [r4, #16]
 8016f74:	3202      	adds	r2, #2
 8016f76:	f104 010c 	add.w	r1, r4, #12
 8016f7a:	0092      	lsls	r2, r2, #2
 8016f7c:	300c      	adds	r0, #12
 8016f7e:	f7fb f89b 	bl	80120b8 <memcpy>
 8016f82:	4621      	mov	r1, r4
 8016f84:	4638      	mov	r0, r7
 8016f86:	f7ff ffa5 	bl	8016ed4 <_Bfree>
 8016f8a:	4644      	mov	r4, r8
 8016f8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016f90:	3501      	adds	r5, #1
 8016f92:	615e      	str	r6, [r3, #20]
 8016f94:	6125      	str	r5, [r4, #16]
 8016f96:	4620      	mov	r0, r4
 8016f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f9c:	08049a81 	.word	0x08049a81
 8016fa0:	08049bd0 	.word	0x08049bd0

08016fa4 <__s2b>:
 8016fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fa8:	460c      	mov	r4, r1
 8016faa:	4615      	mov	r5, r2
 8016fac:	461f      	mov	r7, r3
 8016fae:	2209      	movs	r2, #9
 8016fb0:	3308      	adds	r3, #8
 8016fb2:	4606      	mov	r6, r0
 8016fb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8016fb8:	2100      	movs	r1, #0
 8016fba:	2201      	movs	r2, #1
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	db09      	blt.n	8016fd4 <__s2b+0x30>
 8016fc0:	4630      	mov	r0, r6
 8016fc2:	f7ff ff47 	bl	8016e54 <_Balloc>
 8016fc6:	b940      	cbnz	r0, 8016fda <__s2b+0x36>
 8016fc8:	4602      	mov	r2, r0
 8016fca:	4b19      	ldr	r3, [pc, #100]	; (8017030 <__s2b+0x8c>)
 8016fcc:	4819      	ldr	r0, [pc, #100]	; (8017034 <__s2b+0x90>)
 8016fce:	21ce      	movs	r1, #206	; 0xce
 8016fd0:	f7fb f800 	bl	8011fd4 <__assert_func>
 8016fd4:	0052      	lsls	r2, r2, #1
 8016fd6:	3101      	adds	r1, #1
 8016fd8:	e7f0      	b.n	8016fbc <__s2b+0x18>
 8016fda:	9b08      	ldr	r3, [sp, #32]
 8016fdc:	6143      	str	r3, [r0, #20]
 8016fde:	2d09      	cmp	r5, #9
 8016fe0:	f04f 0301 	mov.w	r3, #1
 8016fe4:	6103      	str	r3, [r0, #16]
 8016fe6:	dd16      	ble.n	8017016 <__s2b+0x72>
 8016fe8:	f104 0909 	add.w	r9, r4, #9
 8016fec:	46c8      	mov	r8, r9
 8016fee:	442c      	add	r4, r5
 8016ff0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016ff4:	4601      	mov	r1, r0
 8016ff6:	3b30      	subs	r3, #48	; 0x30
 8016ff8:	220a      	movs	r2, #10
 8016ffa:	4630      	mov	r0, r6
 8016ffc:	f7ff ff8c 	bl	8016f18 <__multadd>
 8017000:	45a0      	cmp	r8, r4
 8017002:	d1f5      	bne.n	8016ff0 <__s2b+0x4c>
 8017004:	f1a5 0408 	sub.w	r4, r5, #8
 8017008:	444c      	add	r4, r9
 801700a:	1b2d      	subs	r5, r5, r4
 801700c:	1963      	adds	r3, r4, r5
 801700e:	42bb      	cmp	r3, r7
 8017010:	db04      	blt.n	801701c <__s2b+0x78>
 8017012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017016:	340a      	adds	r4, #10
 8017018:	2509      	movs	r5, #9
 801701a:	e7f6      	b.n	801700a <__s2b+0x66>
 801701c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017020:	4601      	mov	r1, r0
 8017022:	3b30      	subs	r3, #48	; 0x30
 8017024:	220a      	movs	r2, #10
 8017026:	4630      	mov	r0, r6
 8017028:	f7ff ff76 	bl	8016f18 <__multadd>
 801702c:	e7ee      	b.n	801700c <__s2b+0x68>
 801702e:	bf00      	nop
 8017030:	08049a81 	.word	0x08049a81
 8017034:	08049bd0 	.word	0x08049bd0

08017038 <__hi0bits>:
 8017038:	0c03      	lsrs	r3, r0, #16
 801703a:	041b      	lsls	r3, r3, #16
 801703c:	b9d3      	cbnz	r3, 8017074 <__hi0bits+0x3c>
 801703e:	0400      	lsls	r0, r0, #16
 8017040:	2310      	movs	r3, #16
 8017042:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017046:	bf04      	itt	eq
 8017048:	0200      	lsleq	r0, r0, #8
 801704a:	3308      	addeq	r3, #8
 801704c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017050:	bf04      	itt	eq
 8017052:	0100      	lsleq	r0, r0, #4
 8017054:	3304      	addeq	r3, #4
 8017056:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801705a:	bf04      	itt	eq
 801705c:	0080      	lsleq	r0, r0, #2
 801705e:	3302      	addeq	r3, #2
 8017060:	2800      	cmp	r0, #0
 8017062:	db05      	blt.n	8017070 <__hi0bits+0x38>
 8017064:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017068:	f103 0301 	add.w	r3, r3, #1
 801706c:	bf08      	it	eq
 801706e:	2320      	moveq	r3, #32
 8017070:	4618      	mov	r0, r3
 8017072:	4770      	bx	lr
 8017074:	2300      	movs	r3, #0
 8017076:	e7e4      	b.n	8017042 <__hi0bits+0xa>

08017078 <__lo0bits>:
 8017078:	6803      	ldr	r3, [r0, #0]
 801707a:	f013 0207 	ands.w	r2, r3, #7
 801707e:	4601      	mov	r1, r0
 8017080:	d00b      	beq.n	801709a <__lo0bits+0x22>
 8017082:	07da      	lsls	r2, r3, #31
 8017084:	d423      	bmi.n	80170ce <__lo0bits+0x56>
 8017086:	0798      	lsls	r0, r3, #30
 8017088:	bf49      	itett	mi
 801708a:	085b      	lsrmi	r3, r3, #1
 801708c:	089b      	lsrpl	r3, r3, #2
 801708e:	2001      	movmi	r0, #1
 8017090:	600b      	strmi	r3, [r1, #0]
 8017092:	bf5c      	itt	pl
 8017094:	600b      	strpl	r3, [r1, #0]
 8017096:	2002      	movpl	r0, #2
 8017098:	4770      	bx	lr
 801709a:	b298      	uxth	r0, r3
 801709c:	b9a8      	cbnz	r0, 80170ca <__lo0bits+0x52>
 801709e:	0c1b      	lsrs	r3, r3, #16
 80170a0:	2010      	movs	r0, #16
 80170a2:	b2da      	uxtb	r2, r3
 80170a4:	b90a      	cbnz	r2, 80170aa <__lo0bits+0x32>
 80170a6:	3008      	adds	r0, #8
 80170a8:	0a1b      	lsrs	r3, r3, #8
 80170aa:	071a      	lsls	r2, r3, #28
 80170ac:	bf04      	itt	eq
 80170ae:	091b      	lsreq	r3, r3, #4
 80170b0:	3004      	addeq	r0, #4
 80170b2:	079a      	lsls	r2, r3, #30
 80170b4:	bf04      	itt	eq
 80170b6:	089b      	lsreq	r3, r3, #2
 80170b8:	3002      	addeq	r0, #2
 80170ba:	07da      	lsls	r2, r3, #31
 80170bc:	d403      	bmi.n	80170c6 <__lo0bits+0x4e>
 80170be:	085b      	lsrs	r3, r3, #1
 80170c0:	f100 0001 	add.w	r0, r0, #1
 80170c4:	d005      	beq.n	80170d2 <__lo0bits+0x5a>
 80170c6:	600b      	str	r3, [r1, #0]
 80170c8:	4770      	bx	lr
 80170ca:	4610      	mov	r0, r2
 80170cc:	e7e9      	b.n	80170a2 <__lo0bits+0x2a>
 80170ce:	2000      	movs	r0, #0
 80170d0:	4770      	bx	lr
 80170d2:	2020      	movs	r0, #32
 80170d4:	4770      	bx	lr
	...

080170d8 <__i2b>:
 80170d8:	b510      	push	{r4, lr}
 80170da:	460c      	mov	r4, r1
 80170dc:	2101      	movs	r1, #1
 80170de:	f7ff feb9 	bl	8016e54 <_Balloc>
 80170e2:	4602      	mov	r2, r0
 80170e4:	b928      	cbnz	r0, 80170f2 <__i2b+0x1a>
 80170e6:	4b05      	ldr	r3, [pc, #20]	; (80170fc <__i2b+0x24>)
 80170e8:	4805      	ldr	r0, [pc, #20]	; (8017100 <__i2b+0x28>)
 80170ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80170ee:	f7fa ff71 	bl	8011fd4 <__assert_func>
 80170f2:	2301      	movs	r3, #1
 80170f4:	6144      	str	r4, [r0, #20]
 80170f6:	6103      	str	r3, [r0, #16]
 80170f8:	bd10      	pop	{r4, pc}
 80170fa:	bf00      	nop
 80170fc:	08049a81 	.word	0x08049a81
 8017100:	08049bd0 	.word	0x08049bd0

08017104 <__multiply>:
 8017104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017108:	4691      	mov	r9, r2
 801710a:	690a      	ldr	r2, [r1, #16]
 801710c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017110:	429a      	cmp	r2, r3
 8017112:	bfb8      	it	lt
 8017114:	460b      	movlt	r3, r1
 8017116:	460c      	mov	r4, r1
 8017118:	bfbc      	itt	lt
 801711a:	464c      	movlt	r4, r9
 801711c:	4699      	movlt	r9, r3
 801711e:	6927      	ldr	r7, [r4, #16]
 8017120:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017124:	68a3      	ldr	r3, [r4, #8]
 8017126:	6861      	ldr	r1, [r4, #4]
 8017128:	eb07 060a 	add.w	r6, r7, sl
 801712c:	42b3      	cmp	r3, r6
 801712e:	b085      	sub	sp, #20
 8017130:	bfb8      	it	lt
 8017132:	3101      	addlt	r1, #1
 8017134:	f7ff fe8e 	bl	8016e54 <_Balloc>
 8017138:	b930      	cbnz	r0, 8017148 <__multiply+0x44>
 801713a:	4602      	mov	r2, r0
 801713c:	4b44      	ldr	r3, [pc, #272]	; (8017250 <__multiply+0x14c>)
 801713e:	4845      	ldr	r0, [pc, #276]	; (8017254 <__multiply+0x150>)
 8017140:	f240 115d 	movw	r1, #349	; 0x15d
 8017144:	f7fa ff46 	bl	8011fd4 <__assert_func>
 8017148:	f100 0514 	add.w	r5, r0, #20
 801714c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017150:	462b      	mov	r3, r5
 8017152:	2200      	movs	r2, #0
 8017154:	4543      	cmp	r3, r8
 8017156:	d321      	bcc.n	801719c <__multiply+0x98>
 8017158:	f104 0314 	add.w	r3, r4, #20
 801715c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017160:	f109 0314 	add.w	r3, r9, #20
 8017164:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017168:	9202      	str	r2, [sp, #8]
 801716a:	1b3a      	subs	r2, r7, r4
 801716c:	3a15      	subs	r2, #21
 801716e:	f022 0203 	bic.w	r2, r2, #3
 8017172:	3204      	adds	r2, #4
 8017174:	f104 0115 	add.w	r1, r4, #21
 8017178:	428f      	cmp	r7, r1
 801717a:	bf38      	it	cc
 801717c:	2204      	movcc	r2, #4
 801717e:	9201      	str	r2, [sp, #4]
 8017180:	9a02      	ldr	r2, [sp, #8]
 8017182:	9303      	str	r3, [sp, #12]
 8017184:	429a      	cmp	r2, r3
 8017186:	d80c      	bhi.n	80171a2 <__multiply+0x9e>
 8017188:	2e00      	cmp	r6, #0
 801718a:	dd03      	ble.n	8017194 <__multiply+0x90>
 801718c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017190:	2b00      	cmp	r3, #0
 8017192:	d05a      	beq.n	801724a <__multiply+0x146>
 8017194:	6106      	str	r6, [r0, #16]
 8017196:	b005      	add	sp, #20
 8017198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801719c:	f843 2b04 	str.w	r2, [r3], #4
 80171a0:	e7d8      	b.n	8017154 <__multiply+0x50>
 80171a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80171a6:	f1ba 0f00 	cmp.w	sl, #0
 80171aa:	d024      	beq.n	80171f6 <__multiply+0xf2>
 80171ac:	f104 0e14 	add.w	lr, r4, #20
 80171b0:	46a9      	mov	r9, r5
 80171b2:	f04f 0c00 	mov.w	ip, #0
 80171b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80171ba:	f8d9 1000 	ldr.w	r1, [r9]
 80171be:	fa1f fb82 	uxth.w	fp, r2
 80171c2:	b289      	uxth	r1, r1
 80171c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80171c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80171cc:	f8d9 2000 	ldr.w	r2, [r9]
 80171d0:	4461      	add	r1, ip
 80171d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80171d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80171da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80171de:	b289      	uxth	r1, r1
 80171e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80171e4:	4577      	cmp	r7, lr
 80171e6:	f849 1b04 	str.w	r1, [r9], #4
 80171ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80171ee:	d8e2      	bhi.n	80171b6 <__multiply+0xb2>
 80171f0:	9a01      	ldr	r2, [sp, #4]
 80171f2:	f845 c002 	str.w	ip, [r5, r2]
 80171f6:	9a03      	ldr	r2, [sp, #12]
 80171f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80171fc:	3304      	adds	r3, #4
 80171fe:	f1b9 0f00 	cmp.w	r9, #0
 8017202:	d020      	beq.n	8017246 <__multiply+0x142>
 8017204:	6829      	ldr	r1, [r5, #0]
 8017206:	f104 0c14 	add.w	ip, r4, #20
 801720a:	46ae      	mov	lr, r5
 801720c:	f04f 0a00 	mov.w	sl, #0
 8017210:	f8bc b000 	ldrh.w	fp, [ip]
 8017214:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017218:	fb09 220b 	mla	r2, r9, fp, r2
 801721c:	4492      	add	sl, r2
 801721e:	b289      	uxth	r1, r1
 8017220:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017224:	f84e 1b04 	str.w	r1, [lr], #4
 8017228:	f85c 2b04 	ldr.w	r2, [ip], #4
 801722c:	f8be 1000 	ldrh.w	r1, [lr]
 8017230:	0c12      	lsrs	r2, r2, #16
 8017232:	fb09 1102 	mla	r1, r9, r2, r1
 8017236:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801723a:	4567      	cmp	r7, ip
 801723c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017240:	d8e6      	bhi.n	8017210 <__multiply+0x10c>
 8017242:	9a01      	ldr	r2, [sp, #4]
 8017244:	50a9      	str	r1, [r5, r2]
 8017246:	3504      	adds	r5, #4
 8017248:	e79a      	b.n	8017180 <__multiply+0x7c>
 801724a:	3e01      	subs	r6, #1
 801724c:	e79c      	b.n	8017188 <__multiply+0x84>
 801724e:	bf00      	nop
 8017250:	08049a81 	.word	0x08049a81
 8017254:	08049bd0 	.word	0x08049bd0

08017258 <__pow5mult>:
 8017258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801725c:	4615      	mov	r5, r2
 801725e:	f012 0203 	ands.w	r2, r2, #3
 8017262:	4606      	mov	r6, r0
 8017264:	460f      	mov	r7, r1
 8017266:	d007      	beq.n	8017278 <__pow5mult+0x20>
 8017268:	4c25      	ldr	r4, [pc, #148]	; (8017300 <__pow5mult+0xa8>)
 801726a:	3a01      	subs	r2, #1
 801726c:	2300      	movs	r3, #0
 801726e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017272:	f7ff fe51 	bl	8016f18 <__multadd>
 8017276:	4607      	mov	r7, r0
 8017278:	10ad      	asrs	r5, r5, #2
 801727a:	d03d      	beq.n	80172f8 <__pow5mult+0xa0>
 801727c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801727e:	b97c      	cbnz	r4, 80172a0 <__pow5mult+0x48>
 8017280:	2010      	movs	r0, #16
 8017282:	f7fa ff09 	bl	8012098 <malloc>
 8017286:	4602      	mov	r2, r0
 8017288:	6270      	str	r0, [r6, #36]	; 0x24
 801728a:	b928      	cbnz	r0, 8017298 <__pow5mult+0x40>
 801728c:	4b1d      	ldr	r3, [pc, #116]	; (8017304 <__pow5mult+0xac>)
 801728e:	481e      	ldr	r0, [pc, #120]	; (8017308 <__pow5mult+0xb0>)
 8017290:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017294:	f7fa fe9e 	bl	8011fd4 <__assert_func>
 8017298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801729c:	6004      	str	r4, [r0, #0]
 801729e:	60c4      	str	r4, [r0, #12]
 80172a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80172a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80172a8:	b94c      	cbnz	r4, 80172be <__pow5mult+0x66>
 80172aa:	f240 2171 	movw	r1, #625	; 0x271
 80172ae:	4630      	mov	r0, r6
 80172b0:	f7ff ff12 	bl	80170d8 <__i2b>
 80172b4:	2300      	movs	r3, #0
 80172b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80172ba:	4604      	mov	r4, r0
 80172bc:	6003      	str	r3, [r0, #0]
 80172be:	f04f 0900 	mov.w	r9, #0
 80172c2:	07eb      	lsls	r3, r5, #31
 80172c4:	d50a      	bpl.n	80172dc <__pow5mult+0x84>
 80172c6:	4639      	mov	r1, r7
 80172c8:	4622      	mov	r2, r4
 80172ca:	4630      	mov	r0, r6
 80172cc:	f7ff ff1a 	bl	8017104 <__multiply>
 80172d0:	4639      	mov	r1, r7
 80172d2:	4680      	mov	r8, r0
 80172d4:	4630      	mov	r0, r6
 80172d6:	f7ff fdfd 	bl	8016ed4 <_Bfree>
 80172da:	4647      	mov	r7, r8
 80172dc:	106d      	asrs	r5, r5, #1
 80172de:	d00b      	beq.n	80172f8 <__pow5mult+0xa0>
 80172e0:	6820      	ldr	r0, [r4, #0]
 80172e2:	b938      	cbnz	r0, 80172f4 <__pow5mult+0x9c>
 80172e4:	4622      	mov	r2, r4
 80172e6:	4621      	mov	r1, r4
 80172e8:	4630      	mov	r0, r6
 80172ea:	f7ff ff0b 	bl	8017104 <__multiply>
 80172ee:	6020      	str	r0, [r4, #0]
 80172f0:	f8c0 9000 	str.w	r9, [r0]
 80172f4:	4604      	mov	r4, r0
 80172f6:	e7e4      	b.n	80172c2 <__pow5mult+0x6a>
 80172f8:	4638      	mov	r0, r7
 80172fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172fe:	bf00      	nop
 8017300:	08049d20 	.word	0x08049d20
 8017304:	08049400 	.word	0x08049400
 8017308:	08049bd0 	.word	0x08049bd0

0801730c <__lshift>:
 801730c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017310:	460c      	mov	r4, r1
 8017312:	6849      	ldr	r1, [r1, #4]
 8017314:	6923      	ldr	r3, [r4, #16]
 8017316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801731a:	68a3      	ldr	r3, [r4, #8]
 801731c:	4607      	mov	r7, r0
 801731e:	4691      	mov	r9, r2
 8017320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017324:	f108 0601 	add.w	r6, r8, #1
 8017328:	42b3      	cmp	r3, r6
 801732a:	db0b      	blt.n	8017344 <__lshift+0x38>
 801732c:	4638      	mov	r0, r7
 801732e:	f7ff fd91 	bl	8016e54 <_Balloc>
 8017332:	4605      	mov	r5, r0
 8017334:	b948      	cbnz	r0, 801734a <__lshift+0x3e>
 8017336:	4602      	mov	r2, r0
 8017338:	4b2a      	ldr	r3, [pc, #168]	; (80173e4 <__lshift+0xd8>)
 801733a:	482b      	ldr	r0, [pc, #172]	; (80173e8 <__lshift+0xdc>)
 801733c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017340:	f7fa fe48 	bl	8011fd4 <__assert_func>
 8017344:	3101      	adds	r1, #1
 8017346:	005b      	lsls	r3, r3, #1
 8017348:	e7ee      	b.n	8017328 <__lshift+0x1c>
 801734a:	2300      	movs	r3, #0
 801734c:	f100 0114 	add.w	r1, r0, #20
 8017350:	f100 0210 	add.w	r2, r0, #16
 8017354:	4618      	mov	r0, r3
 8017356:	4553      	cmp	r3, sl
 8017358:	db37      	blt.n	80173ca <__lshift+0xbe>
 801735a:	6920      	ldr	r0, [r4, #16]
 801735c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017360:	f104 0314 	add.w	r3, r4, #20
 8017364:	f019 091f 	ands.w	r9, r9, #31
 8017368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801736c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017370:	d02f      	beq.n	80173d2 <__lshift+0xc6>
 8017372:	f1c9 0e20 	rsb	lr, r9, #32
 8017376:	468a      	mov	sl, r1
 8017378:	f04f 0c00 	mov.w	ip, #0
 801737c:	681a      	ldr	r2, [r3, #0]
 801737e:	fa02 f209 	lsl.w	r2, r2, r9
 8017382:	ea42 020c 	orr.w	r2, r2, ip
 8017386:	f84a 2b04 	str.w	r2, [sl], #4
 801738a:	f853 2b04 	ldr.w	r2, [r3], #4
 801738e:	4298      	cmp	r0, r3
 8017390:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017394:	d8f2      	bhi.n	801737c <__lshift+0x70>
 8017396:	1b03      	subs	r3, r0, r4
 8017398:	3b15      	subs	r3, #21
 801739a:	f023 0303 	bic.w	r3, r3, #3
 801739e:	3304      	adds	r3, #4
 80173a0:	f104 0215 	add.w	r2, r4, #21
 80173a4:	4290      	cmp	r0, r2
 80173a6:	bf38      	it	cc
 80173a8:	2304      	movcc	r3, #4
 80173aa:	f841 c003 	str.w	ip, [r1, r3]
 80173ae:	f1bc 0f00 	cmp.w	ip, #0
 80173b2:	d001      	beq.n	80173b8 <__lshift+0xac>
 80173b4:	f108 0602 	add.w	r6, r8, #2
 80173b8:	3e01      	subs	r6, #1
 80173ba:	4638      	mov	r0, r7
 80173bc:	612e      	str	r6, [r5, #16]
 80173be:	4621      	mov	r1, r4
 80173c0:	f7ff fd88 	bl	8016ed4 <_Bfree>
 80173c4:	4628      	mov	r0, r5
 80173c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80173ce:	3301      	adds	r3, #1
 80173d0:	e7c1      	b.n	8017356 <__lshift+0x4a>
 80173d2:	3904      	subs	r1, #4
 80173d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80173d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80173dc:	4298      	cmp	r0, r3
 80173de:	d8f9      	bhi.n	80173d4 <__lshift+0xc8>
 80173e0:	e7ea      	b.n	80173b8 <__lshift+0xac>
 80173e2:	bf00      	nop
 80173e4:	08049a81 	.word	0x08049a81
 80173e8:	08049bd0 	.word	0x08049bd0

080173ec <__mcmp>:
 80173ec:	b530      	push	{r4, r5, lr}
 80173ee:	6902      	ldr	r2, [r0, #16]
 80173f0:	690c      	ldr	r4, [r1, #16]
 80173f2:	1b12      	subs	r2, r2, r4
 80173f4:	d10e      	bne.n	8017414 <__mcmp+0x28>
 80173f6:	f100 0314 	add.w	r3, r0, #20
 80173fa:	3114      	adds	r1, #20
 80173fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017400:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017404:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017408:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801740c:	42a5      	cmp	r5, r4
 801740e:	d003      	beq.n	8017418 <__mcmp+0x2c>
 8017410:	d305      	bcc.n	801741e <__mcmp+0x32>
 8017412:	2201      	movs	r2, #1
 8017414:	4610      	mov	r0, r2
 8017416:	bd30      	pop	{r4, r5, pc}
 8017418:	4283      	cmp	r3, r0
 801741a:	d3f3      	bcc.n	8017404 <__mcmp+0x18>
 801741c:	e7fa      	b.n	8017414 <__mcmp+0x28>
 801741e:	f04f 32ff 	mov.w	r2, #4294967295
 8017422:	e7f7      	b.n	8017414 <__mcmp+0x28>

08017424 <__mdiff>:
 8017424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017428:	460c      	mov	r4, r1
 801742a:	4606      	mov	r6, r0
 801742c:	4611      	mov	r1, r2
 801742e:	4620      	mov	r0, r4
 8017430:	4690      	mov	r8, r2
 8017432:	f7ff ffdb 	bl	80173ec <__mcmp>
 8017436:	1e05      	subs	r5, r0, #0
 8017438:	d110      	bne.n	801745c <__mdiff+0x38>
 801743a:	4629      	mov	r1, r5
 801743c:	4630      	mov	r0, r6
 801743e:	f7ff fd09 	bl	8016e54 <_Balloc>
 8017442:	b930      	cbnz	r0, 8017452 <__mdiff+0x2e>
 8017444:	4b3a      	ldr	r3, [pc, #232]	; (8017530 <__mdiff+0x10c>)
 8017446:	4602      	mov	r2, r0
 8017448:	f240 2132 	movw	r1, #562	; 0x232
 801744c:	4839      	ldr	r0, [pc, #228]	; (8017534 <__mdiff+0x110>)
 801744e:	f7fa fdc1 	bl	8011fd4 <__assert_func>
 8017452:	2301      	movs	r3, #1
 8017454:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801745c:	bfa4      	itt	ge
 801745e:	4643      	movge	r3, r8
 8017460:	46a0      	movge	r8, r4
 8017462:	4630      	mov	r0, r6
 8017464:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017468:	bfa6      	itte	ge
 801746a:	461c      	movge	r4, r3
 801746c:	2500      	movge	r5, #0
 801746e:	2501      	movlt	r5, #1
 8017470:	f7ff fcf0 	bl	8016e54 <_Balloc>
 8017474:	b920      	cbnz	r0, 8017480 <__mdiff+0x5c>
 8017476:	4b2e      	ldr	r3, [pc, #184]	; (8017530 <__mdiff+0x10c>)
 8017478:	4602      	mov	r2, r0
 801747a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801747e:	e7e5      	b.n	801744c <__mdiff+0x28>
 8017480:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017484:	6926      	ldr	r6, [r4, #16]
 8017486:	60c5      	str	r5, [r0, #12]
 8017488:	f104 0914 	add.w	r9, r4, #20
 801748c:	f108 0514 	add.w	r5, r8, #20
 8017490:	f100 0e14 	add.w	lr, r0, #20
 8017494:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801749c:	f108 0210 	add.w	r2, r8, #16
 80174a0:	46f2      	mov	sl, lr
 80174a2:	2100      	movs	r1, #0
 80174a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80174a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80174ac:	fa1f f883 	uxth.w	r8, r3
 80174b0:	fa11 f18b 	uxtah	r1, r1, fp
 80174b4:	0c1b      	lsrs	r3, r3, #16
 80174b6:	eba1 0808 	sub.w	r8, r1, r8
 80174ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80174be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80174c2:	fa1f f888 	uxth.w	r8, r8
 80174c6:	1419      	asrs	r1, r3, #16
 80174c8:	454e      	cmp	r6, r9
 80174ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80174ce:	f84a 3b04 	str.w	r3, [sl], #4
 80174d2:	d8e7      	bhi.n	80174a4 <__mdiff+0x80>
 80174d4:	1b33      	subs	r3, r6, r4
 80174d6:	3b15      	subs	r3, #21
 80174d8:	f023 0303 	bic.w	r3, r3, #3
 80174dc:	3304      	adds	r3, #4
 80174de:	3415      	adds	r4, #21
 80174e0:	42a6      	cmp	r6, r4
 80174e2:	bf38      	it	cc
 80174e4:	2304      	movcc	r3, #4
 80174e6:	441d      	add	r5, r3
 80174e8:	4473      	add	r3, lr
 80174ea:	469e      	mov	lr, r3
 80174ec:	462e      	mov	r6, r5
 80174ee:	4566      	cmp	r6, ip
 80174f0:	d30e      	bcc.n	8017510 <__mdiff+0xec>
 80174f2:	f10c 0203 	add.w	r2, ip, #3
 80174f6:	1b52      	subs	r2, r2, r5
 80174f8:	f022 0203 	bic.w	r2, r2, #3
 80174fc:	3d03      	subs	r5, #3
 80174fe:	45ac      	cmp	ip, r5
 8017500:	bf38      	it	cc
 8017502:	2200      	movcc	r2, #0
 8017504:	441a      	add	r2, r3
 8017506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801750a:	b17b      	cbz	r3, 801752c <__mdiff+0x108>
 801750c:	6107      	str	r7, [r0, #16]
 801750e:	e7a3      	b.n	8017458 <__mdiff+0x34>
 8017510:	f856 8b04 	ldr.w	r8, [r6], #4
 8017514:	fa11 f288 	uxtah	r2, r1, r8
 8017518:	1414      	asrs	r4, r2, #16
 801751a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801751e:	b292      	uxth	r2, r2
 8017520:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017524:	f84e 2b04 	str.w	r2, [lr], #4
 8017528:	1421      	asrs	r1, r4, #16
 801752a:	e7e0      	b.n	80174ee <__mdiff+0xca>
 801752c:	3f01      	subs	r7, #1
 801752e:	e7ea      	b.n	8017506 <__mdiff+0xe2>
 8017530:	08049a81 	.word	0x08049a81
 8017534:	08049bd0 	.word	0x08049bd0

08017538 <__ulp>:
 8017538:	b082      	sub	sp, #8
 801753a:	ed8d 0b00 	vstr	d0, [sp]
 801753e:	9b01      	ldr	r3, [sp, #4]
 8017540:	4912      	ldr	r1, [pc, #72]	; (801758c <__ulp+0x54>)
 8017542:	4019      	ands	r1, r3
 8017544:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8017548:	2900      	cmp	r1, #0
 801754a:	dd05      	ble.n	8017558 <__ulp+0x20>
 801754c:	2200      	movs	r2, #0
 801754e:	460b      	mov	r3, r1
 8017550:	ec43 2b10 	vmov	d0, r2, r3
 8017554:	b002      	add	sp, #8
 8017556:	4770      	bx	lr
 8017558:	4249      	negs	r1, r1
 801755a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801755e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8017562:	f04f 0200 	mov.w	r2, #0
 8017566:	f04f 0300 	mov.w	r3, #0
 801756a:	da04      	bge.n	8017576 <__ulp+0x3e>
 801756c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8017570:	fa41 f300 	asr.w	r3, r1, r0
 8017574:	e7ec      	b.n	8017550 <__ulp+0x18>
 8017576:	f1a0 0114 	sub.w	r1, r0, #20
 801757a:	291e      	cmp	r1, #30
 801757c:	bfda      	itte	le
 801757e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8017582:	fa20 f101 	lsrle.w	r1, r0, r1
 8017586:	2101      	movgt	r1, #1
 8017588:	460a      	mov	r2, r1
 801758a:	e7e1      	b.n	8017550 <__ulp+0x18>
 801758c:	7ff00000 	.word	0x7ff00000

08017590 <__b2d>:
 8017590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017592:	6905      	ldr	r5, [r0, #16]
 8017594:	f100 0714 	add.w	r7, r0, #20
 8017598:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801759c:	1f2e      	subs	r6, r5, #4
 801759e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80175a2:	4620      	mov	r0, r4
 80175a4:	f7ff fd48 	bl	8017038 <__hi0bits>
 80175a8:	f1c0 0320 	rsb	r3, r0, #32
 80175ac:	280a      	cmp	r0, #10
 80175ae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801762c <__b2d+0x9c>
 80175b2:	600b      	str	r3, [r1, #0]
 80175b4:	dc14      	bgt.n	80175e0 <__b2d+0x50>
 80175b6:	f1c0 0e0b 	rsb	lr, r0, #11
 80175ba:	fa24 f10e 	lsr.w	r1, r4, lr
 80175be:	42b7      	cmp	r7, r6
 80175c0:	ea41 030c 	orr.w	r3, r1, ip
 80175c4:	bf34      	ite	cc
 80175c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80175ca:	2100      	movcs	r1, #0
 80175cc:	3015      	adds	r0, #21
 80175ce:	fa04 f000 	lsl.w	r0, r4, r0
 80175d2:	fa21 f10e 	lsr.w	r1, r1, lr
 80175d6:	ea40 0201 	orr.w	r2, r0, r1
 80175da:	ec43 2b10 	vmov	d0, r2, r3
 80175de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175e0:	42b7      	cmp	r7, r6
 80175e2:	bf3a      	itte	cc
 80175e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80175e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80175ec:	2100      	movcs	r1, #0
 80175ee:	380b      	subs	r0, #11
 80175f0:	d017      	beq.n	8017622 <__b2d+0x92>
 80175f2:	f1c0 0c20 	rsb	ip, r0, #32
 80175f6:	fa04 f500 	lsl.w	r5, r4, r0
 80175fa:	42be      	cmp	r6, r7
 80175fc:	fa21 f40c 	lsr.w	r4, r1, ip
 8017600:	ea45 0504 	orr.w	r5, r5, r4
 8017604:	bf8c      	ite	hi
 8017606:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801760a:	2400      	movls	r4, #0
 801760c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017610:	fa01 f000 	lsl.w	r0, r1, r0
 8017614:	fa24 f40c 	lsr.w	r4, r4, ip
 8017618:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801761c:	ea40 0204 	orr.w	r2, r0, r4
 8017620:	e7db      	b.n	80175da <__b2d+0x4a>
 8017622:	ea44 030c 	orr.w	r3, r4, ip
 8017626:	460a      	mov	r2, r1
 8017628:	e7d7      	b.n	80175da <__b2d+0x4a>
 801762a:	bf00      	nop
 801762c:	3ff00000 	.word	0x3ff00000

08017630 <__d2b>:
 8017630:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017634:	4689      	mov	r9, r1
 8017636:	2101      	movs	r1, #1
 8017638:	ec57 6b10 	vmov	r6, r7, d0
 801763c:	4690      	mov	r8, r2
 801763e:	f7ff fc09 	bl	8016e54 <_Balloc>
 8017642:	4604      	mov	r4, r0
 8017644:	b930      	cbnz	r0, 8017654 <__d2b+0x24>
 8017646:	4602      	mov	r2, r0
 8017648:	4b25      	ldr	r3, [pc, #148]	; (80176e0 <__d2b+0xb0>)
 801764a:	4826      	ldr	r0, [pc, #152]	; (80176e4 <__d2b+0xb4>)
 801764c:	f240 310a 	movw	r1, #778	; 0x30a
 8017650:	f7fa fcc0 	bl	8011fd4 <__assert_func>
 8017654:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017658:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801765c:	bb35      	cbnz	r5, 80176ac <__d2b+0x7c>
 801765e:	2e00      	cmp	r6, #0
 8017660:	9301      	str	r3, [sp, #4]
 8017662:	d028      	beq.n	80176b6 <__d2b+0x86>
 8017664:	4668      	mov	r0, sp
 8017666:	9600      	str	r6, [sp, #0]
 8017668:	f7ff fd06 	bl	8017078 <__lo0bits>
 801766c:	9900      	ldr	r1, [sp, #0]
 801766e:	b300      	cbz	r0, 80176b2 <__d2b+0x82>
 8017670:	9a01      	ldr	r2, [sp, #4]
 8017672:	f1c0 0320 	rsb	r3, r0, #32
 8017676:	fa02 f303 	lsl.w	r3, r2, r3
 801767a:	430b      	orrs	r3, r1
 801767c:	40c2      	lsrs	r2, r0
 801767e:	6163      	str	r3, [r4, #20]
 8017680:	9201      	str	r2, [sp, #4]
 8017682:	9b01      	ldr	r3, [sp, #4]
 8017684:	61a3      	str	r3, [r4, #24]
 8017686:	2b00      	cmp	r3, #0
 8017688:	bf14      	ite	ne
 801768a:	2202      	movne	r2, #2
 801768c:	2201      	moveq	r2, #1
 801768e:	6122      	str	r2, [r4, #16]
 8017690:	b1d5      	cbz	r5, 80176c8 <__d2b+0x98>
 8017692:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017696:	4405      	add	r5, r0
 8017698:	f8c9 5000 	str.w	r5, [r9]
 801769c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80176a0:	f8c8 0000 	str.w	r0, [r8]
 80176a4:	4620      	mov	r0, r4
 80176a6:	b003      	add	sp, #12
 80176a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80176b0:	e7d5      	b.n	801765e <__d2b+0x2e>
 80176b2:	6161      	str	r1, [r4, #20]
 80176b4:	e7e5      	b.n	8017682 <__d2b+0x52>
 80176b6:	a801      	add	r0, sp, #4
 80176b8:	f7ff fcde 	bl	8017078 <__lo0bits>
 80176bc:	9b01      	ldr	r3, [sp, #4]
 80176be:	6163      	str	r3, [r4, #20]
 80176c0:	2201      	movs	r2, #1
 80176c2:	6122      	str	r2, [r4, #16]
 80176c4:	3020      	adds	r0, #32
 80176c6:	e7e3      	b.n	8017690 <__d2b+0x60>
 80176c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80176cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80176d0:	f8c9 0000 	str.w	r0, [r9]
 80176d4:	6918      	ldr	r0, [r3, #16]
 80176d6:	f7ff fcaf 	bl	8017038 <__hi0bits>
 80176da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80176de:	e7df      	b.n	80176a0 <__d2b+0x70>
 80176e0:	08049a81 	.word	0x08049a81
 80176e4:	08049bd0 	.word	0x08049bd0

080176e8 <__ratio>:
 80176e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ec:	4688      	mov	r8, r1
 80176ee:	4669      	mov	r1, sp
 80176f0:	4681      	mov	r9, r0
 80176f2:	f7ff ff4d 	bl	8017590 <__b2d>
 80176f6:	a901      	add	r1, sp, #4
 80176f8:	4640      	mov	r0, r8
 80176fa:	ec55 4b10 	vmov	r4, r5, d0
 80176fe:	f7ff ff47 	bl	8017590 <__b2d>
 8017702:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017706:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801770a:	eba3 0c02 	sub.w	ip, r3, r2
 801770e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017712:	1a9b      	subs	r3, r3, r2
 8017714:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017718:	ec51 0b10 	vmov	r0, r1, d0
 801771c:	2b00      	cmp	r3, #0
 801771e:	bfd6      	itet	le
 8017720:	460a      	movle	r2, r1
 8017722:	462a      	movgt	r2, r5
 8017724:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017728:	468b      	mov	fp, r1
 801772a:	462f      	mov	r7, r5
 801772c:	bfd4      	ite	le
 801772e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017732:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017736:	4620      	mov	r0, r4
 8017738:	ee10 2a10 	vmov	r2, s0
 801773c:	465b      	mov	r3, fp
 801773e:	4639      	mov	r1, r7
 8017740:	f7e9 f8a4 	bl	800088c <__aeabi_ddiv>
 8017744:	ec41 0b10 	vmov	d0, r0, r1
 8017748:	b003      	add	sp, #12
 801774a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801774e <__copybits>:
 801774e:	3901      	subs	r1, #1
 8017750:	b570      	push	{r4, r5, r6, lr}
 8017752:	1149      	asrs	r1, r1, #5
 8017754:	6914      	ldr	r4, [r2, #16]
 8017756:	3101      	adds	r1, #1
 8017758:	f102 0314 	add.w	r3, r2, #20
 801775c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017760:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017764:	1f05      	subs	r5, r0, #4
 8017766:	42a3      	cmp	r3, r4
 8017768:	d30c      	bcc.n	8017784 <__copybits+0x36>
 801776a:	1aa3      	subs	r3, r4, r2
 801776c:	3b11      	subs	r3, #17
 801776e:	f023 0303 	bic.w	r3, r3, #3
 8017772:	3211      	adds	r2, #17
 8017774:	42a2      	cmp	r2, r4
 8017776:	bf88      	it	hi
 8017778:	2300      	movhi	r3, #0
 801777a:	4418      	add	r0, r3
 801777c:	2300      	movs	r3, #0
 801777e:	4288      	cmp	r0, r1
 8017780:	d305      	bcc.n	801778e <__copybits+0x40>
 8017782:	bd70      	pop	{r4, r5, r6, pc}
 8017784:	f853 6b04 	ldr.w	r6, [r3], #4
 8017788:	f845 6f04 	str.w	r6, [r5, #4]!
 801778c:	e7eb      	b.n	8017766 <__copybits+0x18>
 801778e:	f840 3b04 	str.w	r3, [r0], #4
 8017792:	e7f4      	b.n	801777e <__copybits+0x30>

08017794 <__any_on>:
 8017794:	f100 0214 	add.w	r2, r0, #20
 8017798:	6900      	ldr	r0, [r0, #16]
 801779a:	114b      	asrs	r3, r1, #5
 801779c:	4298      	cmp	r0, r3
 801779e:	b510      	push	{r4, lr}
 80177a0:	db11      	blt.n	80177c6 <__any_on+0x32>
 80177a2:	dd0a      	ble.n	80177ba <__any_on+0x26>
 80177a4:	f011 011f 	ands.w	r1, r1, #31
 80177a8:	d007      	beq.n	80177ba <__any_on+0x26>
 80177aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80177ae:	fa24 f001 	lsr.w	r0, r4, r1
 80177b2:	fa00 f101 	lsl.w	r1, r0, r1
 80177b6:	428c      	cmp	r4, r1
 80177b8:	d10b      	bne.n	80177d2 <__any_on+0x3e>
 80177ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80177be:	4293      	cmp	r3, r2
 80177c0:	d803      	bhi.n	80177ca <__any_on+0x36>
 80177c2:	2000      	movs	r0, #0
 80177c4:	bd10      	pop	{r4, pc}
 80177c6:	4603      	mov	r3, r0
 80177c8:	e7f7      	b.n	80177ba <__any_on+0x26>
 80177ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80177ce:	2900      	cmp	r1, #0
 80177d0:	d0f5      	beq.n	80177be <__any_on+0x2a>
 80177d2:	2001      	movs	r0, #1
 80177d4:	e7f6      	b.n	80177c4 <__any_on+0x30>

080177d6 <_calloc_r>:
 80177d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80177d8:	fba1 2402 	umull	r2, r4, r1, r2
 80177dc:	b94c      	cbnz	r4, 80177f2 <_calloc_r+0x1c>
 80177de:	4611      	mov	r1, r2
 80177e0:	9201      	str	r2, [sp, #4]
 80177e2:	f7fa ff5d 	bl	80126a0 <_malloc_r>
 80177e6:	9a01      	ldr	r2, [sp, #4]
 80177e8:	4605      	mov	r5, r0
 80177ea:	b930      	cbnz	r0, 80177fa <_calloc_r+0x24>
 80177ec:	4628      	mov	r0, r5
 80177ee:	b003      	add	sp, #12
 80177f0:	bd30      	pop	{r4, r5, pc}
 80177f2:	220c      	movs	r2, #12
 80177f4:	6002      	str	r2, [r0, #0]
 80177f6:	2500      	movs	r5, #0
 80177f8:	e7f8      	b.n	80177ec <_calloc_r+0x16>
 80177fa:	4621      	mov	r1, r4
 80177fc:	f7fa fc6a 	bl	80120d4 <memset>
 8017800:	e7f4      	b.n	80177ec <_calloc_r+0x16>

08017802 <_realloc_r>:
 8017802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017806:	4680      	mov	r8, r0
 8017808:	4614      	mov	r4, r2
 801780a:	460e      	mov	r6, r1
 801780c:	b921      	cbnz	r1, 8017818 <_realloc_r+0x16>
 801780e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017812:	4611      	mov	r1, r2
 8017814:	f7fa bf44 	b.w	80126a0 <_malloc_r>
 8017818:	b92a      	cbnz	r2, 8017826 <_realloc_r+0x24>
 801781a:	f7fa fed5 	bl	80125c8 <_free_r>
 801781e:	4625      	mov	r5, r4
 8017820:	4628      	mov	r0, r5
 8017822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017826:	f000 fdf1 	bl	801840c <_malloc_usable_size_r>
 801782a:	4284      	cmp	r4, r0
 801782c:	4607      	mov	r7, r0
 801782e:	d802      	bhi.n	8017836 <_realloc_r+0x34>
 8017830:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017834:	d812      	bhi.n	801785c <_realloc_r+0x5a>
 8017836:	4621      	mov	r1, r4
 8017838:	4640      	mov	r0, r8
 801783a:	f7fa ff31 	bl	80126a0 <_malloc_r>
 801783e:	4605      	mov	r5, r0
 8017840:	2800      	cmp	r0, #0
 8017842:	d0ed      	beq.n	8017820 <_realloc_r+0x1e>
 8017844:	42bc      	cmp	r4, r7
 8017846:	4622      	mov	r2, r4
 8017848:	4631      	mov	r1, r6
 801784a:	bf28      	it	cs
 801784c:	463a      	movcs	r2, r7
 801784e:	f7fa fc33 	bl	80120b8 <memcpy>
 8017852:	4631      	mov	r1, r6
 8017854:	4640      	mov	r0, r8
 8017856:	f7fa feb7 	bl	80125c8 <_free_r>
 801785a:	e7e1      	b.n	8017820 <_realloc_r+0x1e>
 801785c:	4635      	mov	r5, r6
 801785e:	e7df      	b.n	8017820 <_realloc_r+0x1e>

08017860 <__ssputs_r>:
 8017860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017864:	688e      	ldr	r6, [r1, #8]
 8017866:	429e      	cmp	r6, r3
 8017868:	4682      	mov	sl, r0
 801786a:	460c      	mov	r4, r1
 801786c:	4690      	mov	r8, r2
 801786e:	461f      	mov	r7, r3
 8017870:	d838      	bhi.n	80178e4 <__ssputs_r+0x84>
 8017872:	898a      	ldrh	r2, [r1, #12]
 8017874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017878:	d032      	beq.n	80178e0 <__ssputs_r+0x80>
 801787a:	6825      	ldr	r5, [r4, #0]
 801787c:	6909      	ldr	r1, [r1, #16]
 801787e:	eba5 0901 	sub.w	r9, r5, r1
 8017882:	6965      	ldr	r5, [r4, #20]
 8017884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801788c:	3301      	adds	r3, #1
 801788e:	444b      	add	r3, r9
 8017890:	106d      	asrs	r5, r5, #1
 8017892:	429d      	cmp	r5, r3
 8017894:	bf38      	it	cc
 8017896:	461d      	movcc	r5, r3
 8017898:	0553      	lsls	r3, r2, #21
 801789a:	d531      	bpl.n	8017900 <__ssputs_r+0xa0>
 801789c:	4629      	mov	r1, r5
 801789e:	f7fa feff 	bl	80126a0 <_malloc_r>
 80178a2:	4606      	mov	r6, r0
 80178a4:	b950      	cbnz	r0, 80178bc <__ssputs_r+0x5c>
 80178a6:	230c      	movs	r3, #12
 80178a8:	f8ca 3000 	str.w	r3, [sl]
 80178ac:	89a3      	ldrh	r3, [r4, #12]
 80178ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178b2:	81a3      	strh	r3, [r4, #12]
 80178b4:	f04f 30ff 	mov.w	r0, #4294967295
 80178b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178bc:	6921      	ldr	r1, [r4, #16]
 80178be:	464a      	mov	r2, r9
 80178c0:	f7fa fbfa 	bl	80120b8 <memcpy>
 80178c4:	89a3      	ldrh	r3, [r4, #12]
 80178c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80178ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178ce:	81a3      	strh	r3, [r4, #12]
 80178d0:	6126      	str	r6, [r4, #16]
 80178d2:	6165      	str	r5, [r4, #20]
 80178d4:	444e      	add	r6, r9
 80178d6:	eba5 0509 	sub.w	r5, r5, r9
 80178da:	6026      	str	r6, [r4, #0]
 80178dc:	60a5      	str	r5, [r4, #8]
 80178de:	463e      	mov	r6, r7
 80178e0:	42be      	cmp	r6, r7
 80178e2:	d900      	bls.n	80178e6 <__ssputs_r+0x86>
 80178e4:	463e      	mov	r6, r7
 80178e6:	6820      	ldr	r0, [r4, #0]
 80178e8:	4632      	mov	r2, r6
 80178ea:	4641      	mov	r1, r8
 80178ec:	f7ff fa8c 	bl	8016e08 <memmove>
 80178f0:	68a3      	ldr	r3, [r4, #8]
 80178f2:	1b9b      	subs	r3, r3, r6
 80178f4:	60a3      	str	r3, [r4, #8]
 80178f6:	6823      	ldr	r3, [r4, #0]
 80178f8:	4433      	add	r3, r6
 80178fa:	6023      	str	r3, [r4, #0]
 80178fc:	2000      	movs	r0, #0
 80178fe:	e7db      	b.n	80178b8 <__ssputs_r+0x58>
 8017900:	462a      	mov	r2, r5
 8017902:	f7ff ff7e 	bl	8017802 <_realloc_r>
 8017906:	4606      	mov	r6, r0
 8017908:	2800      	cmp	r0, #0
 801790a:	d1e1      	bne.n	80178d0 <__ssputs_r+0x70>
 801790c:	6921      	ldr	r1, [r4, #16]
 801790e:	4650      	mov	r0, sl
 8017910:	f7fa fe5a 	bl	80125c8 <_free_r>
 8017914:	e7c7      	b.n	80178a6 <__ssputs_r+0x46>
	...

08017918 <_svfiprintf_r>:
 8017918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801791c:	4698      	mov	r8, r3
 801791e:	898b      	ldrh	r3, [r1, #12]
 8017920:	061b      	lsls	r3, r3, #24
 8017922:	b09d      	sub	sp, #116	; 0x74
 8017924:	4607      	mov	r7, r0
 8017926:	460d      	mov	r5, r1
 8017928:	4614      	mov	r4, r2
 801792a:	d50e      	bpl.n	801794a <_svfiprintf_r+0x32>
 801792c:	690b      	ldr	r3, [r1, #16]
 801792e:	b963      	cbnz	r3, 801794a <_svfiprintf_r+0x32>
 8017930:	2140      	movs	r1, #64	; 0x40
 8017932:	f7fa feb5 	bl	80126a0 <_malloc_r>
 8017936:	6028      	str	r0, [r5, #0]
 8017938:	6128      	str	r0, [r5, #16]
 801793a:	b920      	cbnz	r0, 8017946 <_svfiprintf_r+0x2e>
 801793c:	230c      	movs	r3, #12
 801793e:	603b      	str	r3, [r7, #0]
 8017940:	f04f 30ff 	mov.w	r0, #4294967295
 8017944:	e0d1      	b.n	8017aea <_svfiprintf_r+0x1d2>
 8017946:	2340      	movs	r3, #64	; 0x40
 8017948:	616b      	str	r3, [r5, #20]
 801794a:	2300      	movs	r3, #0
 801794c:	9309      	str	r3, [sp, #36]	; 0x24
 801794e:	2320      	movs	r3, #32
 8017950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017954:	f8cd 800c 	str.w	r8, [sp, #12]
 8017958:	2330      	movs	r3, #48	; 0x30
 801795a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017b04 <_svfiprintf_r+0x1ec>
 801795e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017962:	f04f 0901 	mov.w	r9, #1
 8017966:	4623      	mov	r3, r4
 8017968:	469a      	mov	sl, r3
 801796a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801796e:	b10a      	cbz	r2, 8017974 <_svfiprintf_r+0x5c>
 8017970:	2a25      	cmp	r2, #37	; 0x25
 8017972:	d1f9      	bne.n	8017968 <_svfiprintf_r+0x50>
 8017974:	ebba 0b04 	subs.w	fp, sl, r4
 8017978:	d00b      	beq.n	8017992 <_svfiprintf_r+0x7a>
 801797a:	465b      	mov	r3, fp
 801797c:	4622      	mov	r2, r4
 801797e:	4629      	mov	r1, r5
 8017980:	4638      	mov	r0, r7
 8017982:	f7ff ff6d 	bl	8017860 <__ssputs_r>
 8017986:	3001      	adds	r0, #1
 8017988:	f000 80aa 	beq.w	8017ae0 <_svfiprintf_r+0x1c8>
 801798c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801798e:	445a      	add	r2, fp
 8017990:	9209      	str	r2, [sp, #36]	; 0x24
 8017992:	f89a 3000 	ldrb.w	r3, [sl]
 8017996:	2b00      	cmp	r3, #0
 8017998:	f000 80a2 	beq.w	8017ae0 <_svfiprintf_r+0x1c8>
 801799c:	2300      	movs	r3, #0
 801799e:	f04f 32ff 	mov.w	r2, #4294967295
 80179a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80179a6:	f10a 0a01 	add.w	sl, sl, #1
 80179aa:	9304      	str	r3, [sp, #16]
 80179ac:	9307      	str	r3, [sp, #28]
 80179ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80179b2:	931a      	str	r3, [sp, #104]	; 0x68
 80179b4:	4654      	mov	r4, sl
 80179b6:	2205      	movs	r2, #5
 80179b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179bc:	4851      	ldr	r0, [pc, #324]	; (8017b04 <_svfiprintf_r+0x1ec>)
 80179be:	f7e8 fc2f 	bl	8000220 <memchr>
 80179c2:	9a04      	ldr	r2, [sp, #16]
 80179c4:	b9d8      	cbnz	r0, 80179fe <_svfiprintf_r+0xe6>
 80179c6:	06d0      	lsls	r0, r2, #27
 80179c8:	bf44      	itt	mi
 80179ca:	2320      	movmi	r3, #32
 80179cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179d0:	0711      	lsls	r1, r2, #28
 80179d2:	bf44      	itt	mi
 80179d4:	232b      	movmi	r3, #43	; 0x2b
 80179d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80179da:	f89a 3000 	ldrb.w	r3, [sl]
 80179de:	2b2a      	cmp	r3, #42	; 0x2a
 80179e0:	d015      	beq.n	8017a0e <_svfiprintf_r+0xf6>
 80179e2:	9a07      	ldr	r2, [sp, #28]
 80179e4:	4654      	mov	r4, sl
 80179e6:	2000      	movs	r0, #0
 80179e8:	f04f 0c0a 	mov.w	ip, #10
 80179ec:	4621      	mov	r1, r4
 80179ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179f2:	3b30      	subs	r3, #48	; 0x30
 80179f4:	2b09      	cmp	r3, #9
 80179f6:	d94e      	bls.n	8017a96 <_svfiprintf_r+0x17e>
 80179f8:	b1b0      	cbz	r0, 8017a28 <_svfiprintf_r+0x110>
 80179fa:	9207      	str	r2, [sp, #28]
 80179fc:	e014      	b.n	8017a28 <_svfiprintf_r+0x110>
 80179fe:	eba0 0308 	sub.w	r3, r0, r8
 8017a02:	fa09 f303 	lsl.w	r3, r9, r3
 8017a06:	4313      	orrs	r3, r2
 8017a08:	9304      	str	r3, [sp, #16]
 8017a0a:	46a2      	mov	sl, r4
 8017a0c:	e7d2      	b.n	80179b4 <_svfiprintf_r+0x9c>
 8017a0e:	9b03      	ldr	r3, [sp, #12]
 8017a10:	1d19      	adds	r1, r3, #4
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	9103      	str	r1, [sp, #12]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	bfbb      	ittet	lt
 8017a1a:	425b      	neglt	r3, r3
 8017a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8017a20:	9307      	strge	r3, [sp, #28]
 8017a22:	9307      	strlt	r3, [sp, #28]
 8017a24:	bfb8      	it	lt
 8017a26:	9204      	strlt	r2, [sp, #16]
 8017a28:	7823      	ldrb	r3, [r4, #0]
 8017a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8017a2c:	d10c      	bne.n	8017a48 <_svfiprintf_r+0x130>
 8017a2e:	7863      	ldrb	r3, [r4, #1]
 8017a30:	2b2a      	cmp	r3, #42	; 0x2a
 8017a32:	d135      	bne.n	8017aa0 <_svfiprintf_r+0x188>
 8017a34:	9b03      	ldr	r3, [sp, #12]
 8017a36:	1d1a      	adds	r2, r3, #4
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	9203      	str	r2, [sp, #12]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	bfb8      	it	lt
 8017a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8017a44:	3402      	adds	r4, #2
 8017a46:	9305      	str	r3, [sp, #20]
 8017a48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017b14 <_svfiprintf_r+0x1fc>
 8017a4c:	7821      	ldrb	r1, [r4, #0]
 8017a4e:	2203      	movs	r2, #3
 8017a50:	4650      	mov	r0, sl
 8017a52:	f7e8 fbe5 	bl	8000220 <memchr>
 8017a56:	b140      	cbz	r0, 8017a6a <_svfiprintf_r+0x152>
 8017a58:	2340      	movs	r3, #64	; 0x40
 8017a5a:	eba0 000a 	sub.w	r0, r0, sl
 8017a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8017a62:	9b04      	ldr	r3, [sp, #16]
 8017a64:	4303      	orrs	r3, r0
 8017a66:	3401      	adds	r4, #1
 8017a68:	9304      	str	r3, [sp, #16]
 8017a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a6e:	4826      	ldr	r0, [pc, #152]	; (8017b08 <_svfiprintf_r+0x1f0>)
 8017a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a74:	2206      	movs	r2, #6
 8017a76:	f7e8 fbd3 	bl	8000220 <memchr>
 8017a7a:	2800      	cmp	r0, #0
 8017a7c:	d038      	beq.n	8017af0 <_svfiprintf_r+0x1d8>
 8017a7e:	4b23      	ldr	r3, [pc, #140]	; (8017b0c <_svfiprintf_r+0x1f4>)
 8017a80:	bb1b      	cbnz	r3, 8017aca <_svfiprintf_r+0x1b2>
 8017a82:	9b03      	ldr	r3, [sp, #12]
 8017a84:	3307      	adds	r3, #7
 8017a86:	f023 0307 	bic.w	r3, r3, #7
 8017a8a:	3308      	adds	r3, #8
 8017a8c:	9303      	str	r3, [sp, #12]
 8017a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a90:	4433      	add	r3, r6
 8017a92:	9309      	str	r3, [sp, #36]	; 0x24
 8017a94:	e767      	b.n	8017966 <_svfiprintf_r+0x4e>
 8017a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a9a:	460c      	mov	r4, r1
 8017a9c:	2001      	movs	r0, #1
 8017a9e:	e7a5      	b.n	80179ec <_svfiprintf_r+0xd4>
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	3401      	adds	r4, #1
 8017aa4:	9305      	str	r3, [sp, #20]
 8017aa6:	4619      	mov	r1, r3
 8017aa8:	f04f 0c0a 	mov.w	ip, #10
 8017aac:	4620      	mov	r0, r4
 8017aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ab2:	3a30      	subs	r2, #48	; 0x30
 8017ab4:	2a09      	cmp	r2, #9
 8017ab6:	d903      	bls.n	8017ac0 <_svfiprintf_r+0x1a8>
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d0c5      	beq.n	8017a48 <_svfiprintf_r+0x130>
 8017abc:	9105      	str	r1, [sp, #20]
 8017abe:	e7c3      	b.n	8017a48 <_svfiprintf_r+0x130>
 8017ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ac4:	4604      	mov	r4, r0
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	e7f0      	b.n	8017aac <_svfiprintf_r+0x194>
 8017aca:	ab03      	add	r3, sp, #12
 8017acc:	9300      	str	r3, [sp, #0]
 8017ace:	462a      	mov	r2, r5
 8017ad0:	4b0f      	ldr	r3, [pc, #60]	; (8017b10 <_svfiprintf_r+0x1f8>)
 8017ad2:	a904      	add	r1, sp, #16
 8017ad4:	4638      	mov	r0, r7
 8017ad6:	f7fb f851 	bl	8012b7c <_printf_float>
 8017ada:	1c42      	adds	r2, r0, #1
 8017adc:	4606      	mov	r6, r0
 8017ade:	d1d6      	bne.n	8017a8e <_svfiprintf_r+0x176>
 8017ae0:	89ab      	ldrh	r3, [r5, #12]
 8017ae2:	065b      	lsls	r3, r3, #25
 8017ae4:	f53f af2c 	bmi.w	8017940 <_svfiprintf_r+0x28>
 8017ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017aea:	b01d      	add	sp, #116	; 0x74
 8017aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017af0:	ab03      	add	r3, sp, #12
 8017af2:	9300      	str	r3, [sp, #0]
 8017af4:	462a      	mov	r2, r5
 8017af6:	4b06      	ldr	r3, [pc, #24]	; (8017b10 <_svfiprintf_r+0x1f8>)
 8017af8:	a904      	add	r1, sp, #16
 8017afa:	4638      	mov	r0, r7
 8017afc:	f7fb fae2 	bl	80130c4 <_printf_i>
 8017b00:	e7eb      	b.n	8017ada <_svfiprintf_r+0x1c2>
 8017b02:	bf00      	nop
 8017b04:	0804956c 	.word	0x0804956c
 8017b08:	08049576 	.word	0x08049576
 8017b0c:	08012b7d 	.word	0x08012b7d
 8017b10:	08017861 	.word	0x08017861
 8017b14:	08049572 	.word	0x08049572

08017b18 <_sungetc_r>:
 8017b18:	b538      	push	{r3, r4, r5, lr}
 8017b1a:	1c4b      	adds	r3, r1, #1
 8017b1c:	4614      	mov	r4, r2
 8017b1e:	d103      	bne.n	8017b28 <_sungetc_r+0x10>
 8017b20:	f04f 35ff 	mov.w	r5, #4294967295
 8017b24:	4628      	mov	r0, r5
 8017b26:	bd38      	pop	{r3, r4, r5, pc}
 8017b28:	8993      	ldrh	r3, [r2, #12]
 8017b2a:	f023 0320 	bic.w	r3, r3, #32
 8017b2e:	8193      	strh	r3, [r2, #12]
 8017b30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b32:	6852      	ldr	r2, [r2, #4]
 8017b34:	b2cd      	uxtb	r5, r1
 8017b36:	b18b      	cbz	r3, 8017b5c <_sungetc_r+0x44>
 8017b38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017b3a:	4293      	cmp	r3, r2
 8017b3c:	dd08      	ble.n	8017b50 <_sungetc_r+0x38>
 8017b3e:	6823      	ldr	r3, [r4, #0]
 8017b40:	1e5a      	subs	r2, r3, #1
 8017b42:	6022      	str	r2, [r4, #0]
 8017b44:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017b48:	6863      	ldr	r3, [r4, #4]
 8017b4a:	3301      	adds	r3, #1
 8017b4c:	6063      	str	r3, [r4, #4]
 8017b4e:	e7e9      	b.n	8017b24 <_sungetc_r+0xc>
 8017b50:	4621      	mov	r1, r4
 8017b52:	f000 fbe5 	bl	8018320 <__submore>
 8017b56:	2800      	cmp	r0, #0
 8017b58:	d0f1      	beq.n	8017b3e <_sungetc_r+0x26>
 8017b5a:	e7e1      	b.n	8017b20 <_sungetc_r+0x8>
 8017b5c:	6921      	ldr	r1, [r4, #16]
 8017b5e:	6823      	ldr	r3, [r4, #0]
 8017b60:	b151      	cbz	r1, 8017b78 <_sungetc_r+0x60>
 8017b62:	4299      	cmp	r1, r3
 8017b64:	d208      	bcs.n	8017b78 <_sungetc_r+0x60>
 8017b66:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017b6a:	42a9      	cmp	r1, r5
 8017b6c:	d104      	bne.n	8017b78 <_sungetc_r+0x60>
 8017b6e:	3b01      	subs	r3, #1
 8017b70:	3201      	adds	r2, #1
 8017b72:	6023      	str	r3, [r4, #0]
 8017b74:	6062      	str	r2, [r4, #4]
 8017b76:	e7d5      	b.n	8017b24 <_sungetc_r+0xc>
 8017b78:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b80:	6363      	str	r3, [r4, #52]	; 0x34
 8017b82:	2303      	movs	r3, #3
 8017b84:	63a3      	str	r3, [r4, #56]	; 0x38
 8017b86:	4623      	mov	r3, r4
 8017b88:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017b8c:	6023      	str	r3, [r4, #0]
 8017b8e:	2301      	movs	r3, #1
 8017b90:	e7dc      	b.n	8017b4c <_sungetc_r+0x34>

08017b92 <__ssrefill_r>:
 8017b92:	b510      	push	{r4, lr}
 8017b94:	460c      	mov	r4, r1
 8017b96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017b98:	b169      	cbz	r1, 8017bb6 <__ssrefill_r+0x24>
 8017b9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b9e:	4299      	cmp	r1, r3
 8017ba0:	d001      	beq.n	8017ba6 <__ssrefill_r+0x14>
 8017ba2:	f7fa fd11 	bl	80125c8 <_free_r>
 8017ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017ba8:	6063      	str	r3, [r4, #4]
 8017baa:	2000      	movs	r0, #0
 8017bac:	6360      	str	r0, [r4, #52]	; 0x34
 8017bae:	b113      	cbz	r3, 8017bb6 <__ssrefill_r+0x24>
 8017bb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017bb2:	6023      	str	r3, [r4, #0]
 8017bb4:	bd10      	pop	{r4, pc}
 8017bb6:	6923      	ldr	r3, [r4, #16]
 8017bb8:	6023      	str	r3, [r4, #0]
 8017bba:	2300      	movs	r3, #0
 8017bbc:	6063      	str	r3, [r4, #4]
 8017bbe:	89a3      	ldrh	r3, [r4, #12]
 8017bc0:	f043 0320 	orr.w	r3, r3, #32
 8017bc4:	81a3      	strh	r3, [r4, #12]
 8017bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8017bca:	e7f3      	b.n	8017bb4 <__ssrefill_r+0x22>

08017bcc <__ssvfiscanf_r>:
 8017bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bd0:	460c      	mov	r4, r1
 8017bd2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017bd6:	2100      	movs	r1, #0
 8017bd8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017bdc:	49a6      	ldr	r1, [pc, #664]	; (8017e78 <__ssvfiscanf_r+0x2ac>)
 8017bde:	91a0      	str	r1, [sp, #640]	; 0x280
 8017be0:	f10d 0804 	add.w	r8, sp, #4
 8017be4:	49a5      	ldr	r1, [pc, #660]	; (8017e7c <__ssvfiscanf_r+0x2b0>)
 8017be6:	4fa6      	ldr	r7, [pc, #664]	; (8017e80 <__ssvfiscanf_r+0x2b4>)
 8017be8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017e84 <__ssvfiscanf_r+0x2b8>
 8017bec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017bf0:	4606      	mov	r6, r0
 8017bf2:	91a1      	str	r1, [sp, #644]	; 0x284
 8017bf4:	9300      	str	r3, [sp, #0]
 8017bf6:	7813      	ldrb	r3, [r2, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	f000 815a 	beq.w	8017eb2 <__ssvfiscanf_r+0x2e6>
 8017bfe:	5dd9      	ldrb	r1, [r3, r7]
 8017c00:	f011 0108 	ands.w	r1, r1, #8
 8017c04:	f102 0501 	add.w	r5, r2, #1
 8017c08:	d019      	beq.n	8017c3e <__ssvfiscanf_r+0x72>
 8017c0a:	6863      	ldr	r3, [r4, #4]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	dd0f      	ble.n	8017c30 <__ssvfiscanf_r+0x64>
 8017c10:	6823      	ldr	r3, [r4, #0]
 8017c12:	781a      	ldrb	r2, [r3, #0]
 8017c14:	5cba      	ldrb	r2, [r7, r2]
 8017c16:	0712      	lsls	r2, r2, #28
 8017c18:	d401      	bmi.n	8017c1e <__ssvfiscanf_r+0x52>
 8017c1a:	462a      	mov	r2, r5
 8017c1c:	e7eb      	b.n	8017bf6 <__ssvfiscanf_r+0x2a>
 8017c1e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017c20:	3201      	adds	r2, #1
 8017c22:	9245      	str	r2, [sp, #276]	; 0x114
 8017c24:	6862      	ldr	r2, [r4, #4]
 8017c26:	3301      	adds	r3, #1
 8017c28:	3a01      	subs	r2, #1
 8017c2a:	6062      	str	r2, [r4, #4]
 8017c2c:	6023      	str	r3, [r4, #0]
 8017c2e:	e7ec      	b.n	8017c0a <__ssvfiscanf_r+0x3e>
 8017c30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017c32:	4621      	mov	r1, r4
 8017c34:	4630      	mov	r0, r6
 8017c36:	4798      	blx	r3
 8017c38:	2800      	cmp	r0, #0
 8017c3a:	d0e9      	beq.n	8017c10 <__ssvfiscanf_r+0x44>
 8017c3c:	e7ed      	b.n	8017c1a <__ssvfiscanf_r+0x4e>
 8017c3e:	2b25      	cmp	r3, #37	; 0x25
 8017c40:	d012      	beq.n	8017c68 <__ssvfiscanf_r+0x9c>
 8017c42:	469a      	mov	sl, r3
 8017c44:	6863      	ldr	r3, [r4, #4]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	f340 8091 	ble.w	8017d6e <__ssvfiscanf_r+0x1a2>
 8017c4c:	6822      	ldr	r2, [r4, #0]
 8017c4e:	7813      	ldrb	r3, [r2, #0]
 8017c50:	4553      	cmp	r3, sl
 8017c52:	f040 812e 	bne.w	8017eb2 <__ssvfiscanf_r+0x2e6>
 8017c56:	6863      	ldr	r3, [r4, #4]
 8017c58:	3b01      	subs	r3, #1
 8017c5a:	6063      	str	r3, [r4, #4]
 8017c5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017c5e:	3201      	adds	r2, #1
 8017c60:	3301      	adds	r3, #1
 8017c62:	6022      	str	r2, [r4, #0]
 8017c64:	9345      	str	r3, [sp, #276]	; 0x114
 8017c66:	e7d8      	b.n	8017c1a <__ssvfiscanf_r+0x4e>
 8017c68:	9141      	str	r1, [sp, #260]	; 0x104
 8017c6a:	9143      	str	r1, [sp, #268]	; 0x10c
 8017c6c:	7853      	ldrb	r3, [r2, #1]
 8017c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8017c70:	bf02      	ittt	eq
 8017c72:	2310      	moveq	r3, #16
 8017c74:	1c95      	addeq	r5, r2, #2
 8017c76:	9341      	streq	r3, [sp, #260]	; 0x104
 8017c78:	220a      	movs	r2, #10
 8017c7a:	46aa      	mov	sl, r5
 8017c7c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017c80:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017c84:	2b09      	cmp	r3, #9
 8017c86:	d91d      	bls.n	8017cc4 <__ssvfiscanf_r+0xf8>
 8017c88:	487e      	ldr	r0, [pc, #504]	; (8017e84 <__ssvfiscanf_r+0x2b8>)
 8017c8a:	2203      	movs	r2, #3
 8017c8c:	f7e8 fac8 	bl	8000220 <memchr>
 8017c90:	b140      	cbz	r0, 8017ca4 <__ssvfiscanf_r+0xd8>
 8017c92:	2301      	movs	r3, #1
 8017c94:	eba0 0009 	sub.w	r0, r0, r9
 8017c98:	fa03 f000 	lsl.w	r0, r3, r0
 8017c9c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017c9e:	4318      	orrs	r0, r3
 8017ca0:	9041      	str	r0, [sp, #260]	; 0x104
 8017ca2:	4655      	mov	r5, sl
 8017ca4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017ca8:	2b78      	cmp	r3, #120	; 0x78
 8017caa:	d806      	bhi.n	8017cba <__ssvfiscanf_r+0xee>
 8017cac:	2b57      	cmp	r3, #87	; 0x57
 8017cae:	d810      	bhi.n	8017cd2 <__ssvfiscanf_r+0x106>
 8017cb0:	2b25      	cmp	r3, #37	; 0x25
 8017cb2:	d0c6      	beq.n	8017c42 <__ssvfiscanf_r+0x76>
 8017cb4:	d856      	bhi.n	8017d64 <__ssvfiscanf_r+0x198>
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d064      	beq.n	8017d84 <__ssvfiscanf_r+0x1b8>
 8017cba:	2303      	movs	r3, #3
 8017cbc:	9347      	str	r3, [sp, #284]	; 0x11c
 8017cbe:	230a      	movs	r3, #10
 8017cc0:	9342      	str	r3, [sp, #264]	; 0x108
 8017cc2:	e071      	b.n	8017da8 <__ssvfiscanf_r+0x1dc>
 8017cc4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017cc6:	fb02 1103 	mla	r1, r2, r3, r1
 8017cca:	3930      	subs	r1, #48	; 0x30
 8017ccc:	9143      	str	r1, [sp, #268]	; 0x10c
 8017cce:	4655      	mov	r5, sl
 8017cd0:	e7d3      	b.n	8017c7a <__ssvfiscanf_r+0xae>
 8017cd2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017cd6:	2a20      	cmp	r2, #32
 8017cd8:	d8ef      	bhi.n	8017cba <__ssvfiscanf_r+0xee>
 8017cda:	a101      	add	r1, pc, #4	; (adr r1, 8017ce0 <__ssvfiscanf_r+0x114>)
 8017cdc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017ce0:	08017d93 	.word	0x08017d93
 8017ce4:	08017cbb 	.word	0x08017cbb
 8017ce8:	08017cbb 	.word	0x08017cbb
 8017cec:	08017df1 	.word	0x08017df1
 8017cf0:	08017cbb 	.word	0x08017cbb
 8017cf4:	08017cbb 	.word	0x08017cbb
 8017cf8:	08017cbb 	.word	0x08017cbb
 8017cfc:	08017cbb 	.word	0x08017cbb
 8017d00:	08017cbb 	.word	0x08017cbb
 8017d04:	08017cbb 	.word	0x08017cbb
 8017d08:	08017cbb 	.word	0x08017cbb
 8017d0c:	08017e07 	.word	0x08017e07
 8017d10:	08017ddd 	.word	0x08017ddd
 8017d14:	08017d6b 	.word	0x08017d6b
 8017d18:	08017d6b 	.word	0x08017d6b
 8017d1c:	08017d6b 	.word	0x08017d6b
 8017d20:	08017cbb 	.word	0x08017cbb
 8017d24:	08017de1 	.word	0x08017de1
 8017d28:	08017cbb 	.word	0x08017cbb
 8017d2c:	08017cbb 	.word	0x08017cbb
 8017d30:	08017cbb 	.word	0x08017cbb
 8017d34:	08017cbb 	.word	0x08017cbb
 8017d38:	08017e17 	.word	0x08017e17
 8017d3c:	08017de9 	.word	0x08017de9
 8017d40:	08017d8b 	.word	0x08017d8b
 8017d44:	08017cbb 	.word	0x08017cbb
 8017d48:	08017cbb 	.word	0x08017cbb
 8017d4c:	08017e13 	.word	0x08017e13
 8017d50:	08017cbb 	.word	0x08017cbb
 8017d54:	08017ddd 	.word	0x08017ddd
 8017d58:	08017cbb 	.word	0x08017cbb
 8017d5c:	08017cbb 	.word	0x08017cbb
 8017d60:	08017d93 	.word	0x08017d93
 8017d64:	3b45      	subs	r3, #69	; 0x45
 8017d66:	2b02      	cmp	r3, #2
 8017d68:	d8a7      	bhi.n	8017cba <__ssvfiscanf_r+0xee>
 8017d6a:	2305      	movs	r3, #5
 8017d6c:	e01b      	b.n	8017da6 <__ssvfiscanf_r+0x1da>
 8017d6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017d70:	4621      	mov	r1, r4
 8017d72:	4630      	mov	r0, r6
 8017d74:	4798      	blx	r3
 8017d76:	2800      	cmp	r0, #0
 8017d78:	f43f af68 	beq.w	8017c4c <__ssvfiscanf_r+0x80>
 8017d7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017d7e:	2800      	cmp	r0, #0
 8017d80:	f040 808d 	bne.w	8017e9e <__ssvfiscanf_r+0x2d2>
 8017d84:	f04f 30ff 	mov.w	r0, #4294967295
 8017d88:	e08f      	b.n	8017eaa <__ssvfiscanf_r+0x2de>
 8017d8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017d8c:	f042 0220 	orr.w	r2, r2, #32
 8017d90:	9241      	str	r2, [sp, #260]	; 0x104
 8017d92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017d98:	9241      	str	r2, [sp, #260]	; 0x104
 8017d9a:	2210      	movs	r2, #16
 8017d9c:	2b6f      	cmp	r3, #111	; 0x6f
 8017d9e:	9242      	str	r2, [sp, #264]	; 0x108
 8017da0:	bf34      	ite	cc
 8017da2:	2303      	movcc	r3, #3
 8017da4:	2304      	movcs	r3, #4
 8017da6:	9347      	str	r3, [sp, #284]	; 0x11c
 8017da8:	6863      	ldr	r3, [r4, #4]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	dd42      	ble.n	8017e34 <__ssvfiscanf_r+0x268>
 8017dae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017db0:	0659      	lsls	r1, r3, #25
 8017db2:	d404      	bmi.n	8017dbe <__ssvfiscanf_r+0x1f2>
 8017db4:	6823      	ldr	r3, [r4, #0]
 8017db6:	781a      	ldrb	r2, [r3, #0]
 8017db8:	5cba      	ldrb	r2, [r7, r2]
 8017dba:	0712      	lsls	r2, r2, #28
 8017dbc:	d441      	bmi.n	8017e42 <__ssvfiscanf_r+0x276>
 8017dbe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017dc0:	2b02      	cmp	r3, #2
 8017dc2:	dc50      	bgt.n	8017e66 <__ssvfiscanf_r+0x29a>
 8017dc4:	466b      	mov	r3, sp
 8017dc6:	4622      	mov	r2, r4
 8017dc8:	a941      	add	r1, sp, #260	; 0x104
 8017dca:	4630      	mov	r0, r6
 8017dcc:	f000 f876 	bl	8017ebc <_scanf_chars>
 8017dd0:	2801      	cmp	r0, #1
 8017dd2:	d06e      	beq.n	8017eb2 <__ssvfiscanf_r+0x2e6>
 8017dd4:	2802      	cmp	r0, #2
 8017dd6:	f47f af20 	bne.w	8017c1a <__ssvfiscanf_r+0x4e>
 8017dda:	e7cf      	b.n	8017d7c <__ssvfiscanf_r+0x1b0>
 8017ddc:	220a      	movs	r2, #10
 8017dde:	e7dd      	b.n	8017d9c <__ssvfiscanf_r+0x1d0>
 8017de0:	2300      	movs	r3, #0
 8017de2:	9342      	str	r3, [sp, #264]	; 0x108
 8017de4:	2303      	movs	r3, #3
 8017de6:	e7de      	b.n	8017da6 <__ssvfiscanf_r+0x1da>
 8017de8:	2308      	movs	r3, #8
 8017dea:	9342      	str	r3, [sp, #264]	; 0x108
 8017dec:	2304      	movs	r3, #4
 8017dee:	e7da      	b.n	8017da6 <__ssvfiscanf_r+0x1da>
 8017df0:	4629      	mov	r1, r5
 8017df2:	4640      	mov	r0, r8
 8017df4:	f000 f9d0 	bl	8018198 <__sccl>
 8017df8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017dfe:	9341      	str	r3, [sp, #260]	; 0x104
 8017e00:	4605      	mov	r5, r0
 8017e02:	2301      	movs	r3, #1
 8017e04:	e7cf      	b.n	8017da6 <__ssvfiscanf_r+0x1da>
 8017e06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e0c:	9341      	str	r3, [sp, #260]	; 0x104
 8017e0e:	2300      	movs	r3, #0
 8017e10:	e7c9      	b.n	8017da6 <__ssvfiscanf_r+0x1da>
 8017e12:	2302      	movs	r3, #2
 8017e14:	e7c7      	b.n	8017da6 <__ssvfiscanf_r+0x1da>
 8017e16:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017e18:	06c3      	lsls	r3, r0, #27
 8017e1a:	f53f aefe 	bmi.w	8017c1a <__ssvfiscanf_r+0x4e>
 8017e1e:	9b00      	ldr	r3, [sp, #0]
 8017e20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017e22:	1d19      	adds	r1, r3, #4
 8017e24:	9100      	str	r1, [sp, #0]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	f010 0f01 	tst.w	r0, #1
 8017e2c:	bf14      	ite	ne
 8017e2e:	801a      	strhne	r2, [r3, #0]
 8017e30:	601a      	streq	r2, [r3, #0]
 8017e32:	e6f2      	b.n	8017c1a <__ssvfiscanf_r+0x4e>
 8017e34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017e36:	4621      	mov	r1, r4
 8017e38:	4630      	mov	r0, r6
 8017e3a:	4798      	blx	r3
 8017e3c:	2800      	cmp	r0, #0
 8017e3e:	d0b6      	beq.n	8017dae <__ssvfiscanf_r+0x1e2>
 8017e40:	e79c      	b.n	8017d7c <__ssvfiscanf_r+0x1b0>
 8017e42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017e44:	3201      	adds	r2, #1
 8017e46:	9245      	str	r2, [sp, #276]	; 0x114
 8017e48:	6862      	ldr	r2, [r4, #4]
 8017e4a:	3a01      	subs	r2, #1
 8017e4c:	2a00      	cmp	r2, #0
 8017e4e:	6062      	str	r2, [r4, #4]
 8017e50:	dd02      	ble.n	8017e58 <__ssvfiscanf_r+0x28c>
 8017e52:	3301      	adds	r3, #1
 8017e54:	6023      	str	r3, [r4, #0]
 8017e56:	e7ad      	b.n	8017db4 <__ssvfiscanf_r+0x1e8>
 8017e58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017e5a:	4621      	mov	r1, r4
 8017e5c:	4630      	mov	r0, r6
 8017e5e:	4798      	blx	r3
 8017e60:	2800      	cmp	r0, #0
 8017e62:	d0a7      	beq.n	8017db4 <__ssvfiscanf_r+0x1e8>
 8017e64:	e78a      	b.n	8017d7c <__ssvfiscanf_r+0x1b0>
 8017e66:	2b04      	cmp	r3, #4
 8017e68:	dc0e      	bgt.n	8017e88 <__ssvfiscanf_r+0x2bc>
 8017e6a:	466b      	mov	r3, sp
 8017e6c:	4622      	mov	r2, r4
 8017e6e:	a941      	add	r1, sp, #260	; 0x104
 8017e70:	4630      	mov	r0, r6
 8017e72:	f000 f87d 	bl	8017f70 <_scanf_i>
 8017e76:	e7ab      	b.n	8017dd0 <__ssvfiscanf_r+0x204>
 8017e78:	08017b19 	.word	0x08017b19
 8017e7c:	08017b93 	.word	0x08017b93
 8017e80:	08049919 	.word	0x08049919
 8017e84:	08049572 	.word	0x08049572
 8017e88:	4b0b      	ldr	r3, [pc, #44]	; (8017eb8 <__ssvfiscanf_r+0x2ec>)
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	f43f aec5 	beq.w	8017c1a <__ssvfiscanf_r+0x4e>
 8017e90:	466b      	mov	r3, sp
 8017e92:	4622      	mov	r2, r4
 8017e94:	a941      	add	r1, sp, #260	; 0x104
 8017e96:	4630      	mov	r0, r6
 8017e98:	f3af 8000 	nop.w
 8017e9c:	e798      	b.n	8017dd0 <__ssvfiscanf_r+0x204>
 8017e9e:	89a3      	ldrh	r3, [r4, #12]
 8017ea0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017ea4:	bf18      	it	ne
 8017ea6:	f04f 30ff 	movne.w	r0, #4294967295
 8017eaa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eb2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017eb4:	e7f9      	b.n	8017eaa <__ssvfiscanf_r+0x2de>
 8017eb6:	bf00      	nop
 8017eb8:	00000000 	.word	0x00000000

08017ebc <_scanf_chars>:
 8017ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ec0:	4615      	mov	r5, r2
 8017ec2:	688a      	ldr	r2, [r1, #8]
 8017ec4:	4680      	mov	r8, r0
 8017ec6:	460c      	mov	r4, r1
 8017ec8:	b932      	cbnz	r2, 8017ed8 <_scanf_chars+0x1c>
 8017eca:	698a      	ldr	r2, [r1, #24]
 8017ecc:	2a00      	cmp	r2, #0
 8017ece:	bf0c      	ite	eq
 8017ed0:	2201      	moveq	r2, #1
 8017ed2:	f04f 32ff 	movne.w	r2, #4294967295
 8017ed6:	608a      	str	r2, [r1, #8]
 8017ed8:	6822      	ldr	r2, [r4, #0]
 8017eda:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017f6c <_scanf_chars+0xb0>
 8017ede:	06d1      	lsls	r1, r2, #27
 8017ee0:	bf5f      	itttt	pl
 8017ee2:	681a      	ldrpl	r2, [r3, #0]
 8017ee4:	1d11      	addpl	r1, r2, #4
 8017ee6:	6019      	strpl	r1, [r3, #0]
 8017ee8:	6816      	ldrpl	r6, [r2, #0]
 8017eea:	2700      	movs	r7, #0
 8017eec:	69a0      	ldr	r0, [r4, #24]
 8017eee:	b188      	cbz	r0, 8017f14 <_scanf_chars+0x58>
 8017ef0:	2801      	cmp	r0, #1
 8017ef2:	d107      	bne.n	8017f04 <_scanf_chars+0x48>
 8017ef4:	682a      	ldr	r2, [r5, #0]
 8017ef6:	7811      	ldrb	r1, [r2, #0]
 8017ef8:	6962      	ldr	r2, [r4, #20]
 8017efa:	5c52      	ldrb	r2, [r2, r1]
 8017efc:	b952      	cbnz	r2, 8017f14 <_scanf_chars+0x58>
 8017efe:	2f00      	cmp	r7, #0
 8017f00:	d031      	beq.n	8017f66 <_scanf_chars+0xaa>
 8017f02:	e022      	b.n	8017f4a <_scanf_chars+0x8e>
 8017f04:	2802      	cmp	r0, #2
 8017f06:	d120      	bne.n	8017f4a <_scanf_chars+0x8e>
 8017f08:	682b      	ldr	r3, [r5, #0]
 8017f0a:	781b      	ldrb	r3, [r3, #0]
 8017f0c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8017f10:	071b      	lsls	r3, r3, #28
 8017f12:	d41a      	bmi.n	8017f4a <_scanf_chars+0x8e>
 8017f14:	6823      	ldr	r3, [r4, #0]
 8017f16:	06da      	lsls	r2, r3, #27
 8017f18:	bf5e      	ittt	pl
 8017f1a:	682b      	ldrpl	r3, [r5, #0]
 8017f1c:	781b      	ldrbpl	r3, [r3, #0]
 8017f1e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017f22:	682a      	ldr	r2, [r5, #0]
 8017f24:	686b      	ldr	r3, [r5, #4]
 8017f26:	3201      	adds	r2, #1
 8017f28:	602a      	str	r2, [r5, #0]
 8017f2a:	68a2      	ldr	r2, [r4, #8]
 8017f2c:	3b01      	subs	r3, #1
 8017f2e:	3a01      	subs	r2, #1
 8017f30:	606b      	str	r3, [r5, #4]
 8017f32:	3701      	adds	r7, #1
 8017f34:	60a2      	str	r2, [r4, #8]
 8017f36:	b142      	cbz	r2, 8017f4a <_scanf_chars+0x8e>
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	dcd7      	bgt.n	8017eec <_scanf_chars+0x30>
 8017f3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017f40:	4629      	mov	r1, r5
 8017f42:	4640      	mov	r0, r8
 8017f44:	4798      	blx	r3
 8017f46:	2800      	cmp	r0, #0
 8017f48:	d0d0      	beq.n	8017eec <_scanf_chars+0x30>
 8017f4a:	6823      	ldr	r3, [r4, #0]
 8017f4c:	f013 0310 	ands.w	r3, r3, #16
 8017f50:	d105      	bne.n	8017f5e <_scanf_chars+0xa2>
 8017f52:	68e2      	ldr	r2, [r4, #12]
 8017f54:	3201      	adds	r2, #1
 8017f56:	60e2      	str	r2, [r4, #12]
 8017f58:	69a2      	ldr	r2, [r4, #24]
 8017f5a:	b102      	cbz	r2, 8017f5e <_scanf_chars+0xa2>
 8017f5c:	7033      	strb	r3, [r6, #0]
 8017f5e:	6923      	ldr	r3, [r4, #16]
 8017f60:	443b      	add	r3, r7
 8017f62:	6123      	str	r3, [r4, #16]
 8017f64:	2000      	movs	r0, #0
 8017f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f6a:	bf00      	nop
 8017f6c:	08049919 	.word	0x08049919

08017f70 <_scanf_i>:
 8017f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f74:	4698      	mov	r8, r3
 8017f76:	4b76      	ldr	r3, [pc, #472]	; (8018150 <_scanf_i+0x1e0>)
 8017f78:	460c      	mov	r4, r1
 8017f7a:	4682      	mov	sl, r0
 8017f7c:	4616      	mov	r6, r2
 8017f7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017f82:	b087      	sub	sp, #28
 8017f84:	ab03      	add	r3, sp, #12
 8017f86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017f8a:	4b72      	ldr	r3, [pc, #456]	; (8018154 <_scanf_i+0x1e4>)
 8017f8c:	69a1      	ldr	r1, [r4, #24]
 8017f8e:	4a72      	ldr	r2, [pc, #456]	; (8018158 <_scanf_i+0x1e8>)
 8017f90:	2903      	cmp	r1, #3
 8017f92:	bf18      	it	ne
 8017f94:	461a      	movne	r2, r3
 8017f96:	68a3      	ldr	r3, [r4, #8]
 8017f98:	9201      	str	r2, [sp, #4]
 8017f9a:	1e5a      	subs	r2, r3, #1
 8017f9c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017fa0:	bf88      	it	hi
 8017fa2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017fa6:	4627      	mov	r7, r4
 8017fa8:	bf82      	ittt	hi
 8017faa:	eb03 0905 	addhi.w	r9, r3, r5
 8017fae:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017fb2:	60a3      	strhi	r3, [r4, #8]
 8017fb4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017fb8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017fbc:	bf98      	it	ls
 8017fbe:	f04f 0900 	movls.w	r9, #0
 8017fc2:	6023      	str	r3, [r4, #0]
 8017fc4:	463d      	mov	r5, r7
 8017fc6:	f04f 0b00 	mov.w	fp, #0
 8017fca:	6831      	ldr	r1, [r6, #0]
 8017fcc:	ab03      	add	r3, sp, #12
 8017fce:	7809      	ldrb	r1, [r1, #0]
 8017fd0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017fd4:	2202      	movs	r2, #2
 8017fd6:	f7e8 f923 	bl	8000220 <memchr>
 8017fda:	b328      	cbz	r0, 8018028 <_scanf_i+0xb8>
 8017fdc:	f1bb 0f01 	cmp.w	fp, #1
 8017fe0:	d159      	bne.n	8018096 <_scanf_i+0x126>
 8017fe2:	6862      	ldr	r2, [r4, #4]
 8017fe4:	b92a      	cbnz	r2, 8017ff2 <_scanf_i+0x82>
 8017fe6:	6822      	ldr	r2, [r4, #0]
 8017fe8:	2308      	movs	r3, #8
 8017fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017fee:	6063      	str	r3, [r4, #4]
 8017ff0:	6022      	str	r2, [r4, #0]
 8017ff2:	6822      	ldr	r2, [r4, #0]
 8017ff4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017ff8:	6022      	str	r2, [r4, #0]
 8017ffa:	68a2      	ldr	r2, [r4, #8]
 8017ffc:	1e51      	subs	r1, r2, #1
 8017ffe:	60a1      	str	r1, [r4, #8]
 8018000:	b192      	cbz	r2, 8018028 <_scanf_i+0xb8>
 8018002:	6832      	ldr	r2, [r6, #0]
 8018004:	1c51      	adds	r1, r2, #1
 8018006:	6031      	str	r1, [r6, #0]
 8018008:	7812      	ldrb	r2, [r2, #0]
 801800a:	f805 2b01 	strb.w	r2, [r5], #1
 801800e:	6872      	ldr	r2, [r6, #4]
 8018010:	3a01      	subs	r2, #1
 8018012:	2a00      	cmp	r2, #0
 8018014:	6072      	str	r2, [r6, #4]
 8018016:	dc07      	bgt.n	8018028 <_scanf_i+0xb8>
 8018018:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801801c:	4631      	mov	r1, r6
 801801e:	4650      	mov	r0, sl
 8018020:	4790      	blx	r2
 8018022:	2800      	cmp	r0, #0
 8018024:	f040 8085 	bne.w	8018132 <_scanf_i+0x1c2>
 8018028:	f10b 0b01 	add.w	fp, fp, #1
 801802c:	f1bb 0f03 	cmp.w	fp, #3
 8018030:	d1cb      	bne.n	8017fca <_scanf_i+0x5a>
 8018032:	6863      	ldr	r3, [r4, #4]
 8018034:	b90b      	cbnz	r3, 801803a <_scanf_i+0xca>
 8018036:	230a      	movs	r3, #10
 8018038:	6063      	str	r3, [r4, #4]
 801803a:	6863      	ldr	r3, [r4, #4]
 801803c:	4947      	ldr	r1, [pc, #284]	; (801815c <_scanf_i+0x1ec>)
 801803e:	6960      	ldr	r0, [r4, #20]
 8018040:	1ac9      	subs	r1, r1, r3
 8018042:	f000 f8a9 	bl	8018198 <__sccl>
 8018046:	f04f 0b00 	mov.w	fp, #0
 801804a:	68a3      	ldr	r3, [r4, #8]
 801804c:	6822      	ldr	r2, [r4, #0]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d03d      	beq.n	80180ce <_scanf_i+0x15e>
 8018052:	6831      	ldr	r1, [r6, #0]
 8018054:	6960      	ldr	r0, [r4, #20]
 8018056:	f891 c000 	ldrb.w	ip, [r1]
 801805a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801805e:	2800      	cmp	r0, #0
 8018060:	d035      	beq.n	80180ce <_scanf_i+0x15e>
 8018062:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018066:	d124      	bne.n	80180b2 <_scanf_i+0x142>
 8018068:	0510      	lsls	r0, r2, #20
 801806a:	d522      	bpl.n	80180b2 <_scanf_i+0x142>
 801806c:	f10b 0b01 	add.w	fp, fp, #1
 8018070:	f1b9 0f00 	cmp.w	r9, #0
 8018074:	d003      	beq.n	801807e <_scanf_i+0x10e>
 8018076:	3301      	adds	r3, #1
 8018078:	f109 39ff 	add.w	r9, r9, #4294967295
 801807c:	60a3      	str	r3, [r4, #8]
 801807e:	6873      	ldr	r3, [r6, #4]
 8018080:	3b01      	subs	r3, #1
 8018082:	2b00      	cmp	r3, #0
 8018084:	6073      	str	r3, [r6, #4]
 8018086:	dd1b      	ble.n	80180c0 <_scanf_i+0x150>
 8018088:	6833      	ldr	r3, [r6, #0]
 801808a:	3301      	adds	r3, #1
 801808c:	6033      	str	r3, [r6, #0]
 801808e:	68a3      	ldr	r3, [r4, #8]
 8018090:	3b01      	subs	r3, #1
 8018092:	60a3      	str	r3, [r4, #8]
 8018094:	e7d9      	b.n	801804a <_scanf_i+0xda>
 8018096:	f1bb 0f02 	cmp.w	fp, #2
 801809a:	d1ae      	bne.n	8017ffa <_scanf_i+0x8a>
 801809c:	6822      	ldr	r2, [r4, #0]
 801809e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80180a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80180a6:	d1bf      	bne.n	8018028 <_scanf_i+0xb8>
 80180a8:	2310      	movs	r3, #16
 80180aa:	6063      	str	r3, [r4, #4]
 80180ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80180b0:	e7a2      	b.n	8017ff8 <_scanf_i+0x88>
 80180b2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80180b6:	6022      	str	r2, [r4, #0]
 80180b8:	780b      	ldrb	r3, [r1, #0]
 80180ba:	f805 3b01 	strb.w	r3, [r5], #1
 80180be:	e7de      	b.n	801807e <_scanf_i+0x10e>
 80180c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80180c4:	4631      	mov	r1, r6
 80180c6:	4650      	mov	r0, sl
 80180c8:	4798      	blx	r3
 80180ca:	2800      	cmp	r0, #0
 80180cc:	d0df      	beq.n	801808e <_scanf_i+0x11e>
 80180ce:	6823      	ldr	r3, [r4, #0]
 80180d0:	05db      	lsls	r3, r3, #23
 80180d2:	d50d      	bpl.n	80180f0 <_scanf_i+0x180>
 80180d4:	42bd      	cmp	r5, r7
 80180d6:	d909      	bls.n	80180ec <_scanf_i+0x17c>
 80180d8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80180dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80180e0:	4632      	mov	r2, r6
 80180e2:	4650      	mov	r0, sl
 80180e4:	4798      	blx	r3
 80180e6:	f105 39ff 	add.w	r9, r5, #4294967295
 80180ea:	464d      	mov	r5, r9
 80180ec:	42bd      	cmp	r5, r7
 80180ee:	d02d      	beq.n	801814c <_scanf_i+0x1dc>
 80180f0:	6822      	ldr	r2, [r4, #0]
 80180f2:	f012 0210 	ands.w	r2, r2, #16
 80180f6:	d113      	bne.n	8018120 <_scanf_i+0x1b0>
 80180f8:	702a      	strb	r2, [r5, #0]
 80180fa:	6863      	ldr	r3, [r4, #4]
 80180fc:	9e01      	ldr	r6, [sp, #4]
 80180fe:	4639      	mov	r1, r7
 8018100:	4650      	mov	r0, sl
 8018102:	47b0      	blx	r6
 8018104:	6821      	ldr	r1, [r4, #0]
 8018106:	f8d8 3000 	ldr.w	r3, [r8]
 801810a:	f011 0f20 	tst.w	r1, #32
 801810e:	d013      	beq.n	8018138 <_scanf_i+0x1c8>
 8018110:	1d1a      	adds	r2, r3, #4
 8018112:	f8c8 2000 	str.w	r2, [r8]
 8018116:	681b      	ldr	r3, [r3, #0]
 8018118:	6018      	str	r0, [r3, #0]
 801811a:	68e3      	ldr	r3, [r4, #12]
 801811c:	3301      	adds	r3, #1
 801811e:	60e3      	str	r3, [r4, #12]
 8018120:	1bed      	subs	r5, r5, r7
 8018122:	44ab      	add	fp, r5
 8018124:	6925      	ldr	r5, [r4, #16]
 8018126:	445d      	add	r5, fp
 8018128:	6125      	str	r5, [r4, #16]
 801812a:	2000      	movs	r0, #0
 801812c:	b007      	add	sp, #28
 801812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018132:	f04f 0b00 	mov.w	fp, #0
 8018136:	e7ca      	b.n	80180ce <_scanf_i+0x15e>
 8018138:	1d1a      	adds	r2, r3, #4
 801813a:	f8c8 2000 	str.w	r2, [r8]
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	f011 0f01 	tst.w	r1, #1
 8018144:	bf14      	ite	ne
 8018146:	8018      	strhne	r0, [r3, #0]
 8018148:	6018      	streq	r0, [r3, #0]
 801814a:	e7e6      	b.n	801811a <_scanf_i+0x1aa>
 801814c:	2001      	movs	r0, #1
 801814e:	e7ed      	b.n	801812c <_scanf_i+0x1bc>
 8018150:	0801bc10 	.word	0x0801bc10
 8018154:	08014e75 	.word	0x08014e75
 8018158:	08014d79 	.word	0x08014d79
 801815c:	08049d45 	.word	0x08049d45

08018160 <_read_r>:
 8018160:	b538      	push	{r3, r4, r5, lr}
 8018162:	4d07      	ldr	r5, [pc, #28]	; (8018180 <_read_r+0x20>)
 8018164:	4604      	mov	r4, r0
 8018166:	4608      	mov	r0, r1
 8018168:	4611      	mov	r1, r2
 801816a:	2200      	movs	r2, #0
 801816c:	602a      	str	r2, [r5, #0]
 801816e:	461a      	mov	r2, r3
 8018170:	f7ec fa20 	bl	80045b4 <_read>
 8018174:	1c43      	adds	r3, r0, #1
 8018176:	d102      	bne.n	801817e <_read_r+0x1e>
 8018178:	682b      	ldr	r3, [r5, #0]
 801817a:	b103      	cbz	r3, 801817e <_read_r+0x1e>
 801817c:	6023      	str	r3, [r4, #0]
 801817e:	bd38      	pop	{r3, r4, r5, pc}
 8018180:	20005dc8 	.word	0x20005dc8
 8018184:	00000000 	.word	0x00000000

08018188 <nan>:
 8018188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018190 <nan+0x8>
 801818c:	4770      	bx	lr
 801818e:	bf00      	nop
 8018190:	00000000 	.word	0x00000000
 8018194:	7ff80000 	.word	0x7ff80000

08018198 <__sccl>:
 8018198:	b570      	push	{r4, r5, r6, lr}
 801819a:	780b      	ldrb	r3, [r1, #0]
 801819c:	4604      	mov	r4, r0
 801819e:	2b5e      	cmp	r3, #94	; 0x5e
 80181a0:	bf0b      	itete	eq
 80181a2:	784b      	ldrbeq	r3, [r1, #1]
 80181a4:	1c48      	addne	r0, r1, #1
 80181a6:	1c88      	addeq	r0, r1, #2
 80181a8:	2200      	movne	r2, #0
 80181aa:	bf08      	it	eq
 80181ac:	2201      	moveq	r2, #1
 80181ae:	1e61      	subs	r1, r4, #1
 80181b0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80181b4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80181b8:	42a9      	cmp	r1, r5
 80181ba:	d1fb      	bne.n	80181b4 <__sccl+0x1c>
 80181bc:	b90b      	cbnz	r3, 80181c2 <__sccl+0x2a>
 80181be:	3801      	subs	r0, #1
 80181c0:	bd70      	pop	{r4, r5, r6, pc}
 80181c2:	f082 0201 	eor.w	r2, r2, #1
 80181c6:	54e2      	strb	r2, [r4, r3]
 80181c8:	4605      	mov	r5, r0
 80181ca:	4628      	mov	r0, r5
 80181cc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80181d0:	292d      	cmp	r1, #45	; 0x2d
 80181d2:	d006      	beq.n	80181e2 <__sccl+0x4a>
 80181d4:	295d      	cmp	r1, #93	; 0x5d
 80181d6:	d0f3      	beq.n	80181c0 <__sccl+0x28>
 80181d8:	b909      	cbnz	r1, 80181de <__sccl+0x46>
 80181da:	4628      	mov	r0, r5
 80181dc:	e7f0      	b.n	80181c0 <__sccl+0x28>
 80181de:	460b      	mov	r3, r1
 80181e0:	e7f1      	b.n	80181c6 <__sccl+0x2e>
 80181e2:	786e      	ldrb	r6, [r5, #1]
 80181e4:	2e5d      	cmp	r6, #93	; 0x5d
 80181e6:	d0fa      	beq.n	80181de <__sccl+0x46>
 80181e8:	42b3      	cmp	r3, r6
 80181ea:	dcf8      	bgt.n	80181de <__sccl+0x46>
 80181ec:	3502      	adds	r5, #2
 80181ee:	4619      	mov	r1, r3
 80181f0:	3101      	adds	r1, #1
 80181f2:	428e      	cmp	r6, r1
 80181f4:	5462      	strb	r2, [r4, r1]
 80181f6:	dcfb      	bgt.n	80181f0 <__sccl+0x58>
 80181f8:	1af1      	subs	r1, r6, r3
 80181fa:	3901      	subs	r1, #1
 80181fc:	1c58      	adds	r0, r3, #1
 80181fe:	42b3      	cmp	r3, r6
 8018200:	bfa8      	it	ge
 8018202:	2100      	movge	r1, #0
 8018204:	1843      	adds	r3, r0, r1
 8018206:	e7e0      	b.n	80181ca <__sccl+0x32>

08018208 <_raise_r>:
 8018208:	291f      	cmp	r1, #31
 801820a:	b538      	push	{r3, r4, r5, lr}
 801820c:	4604      	mov	r4, r0
 801820e:	460d      	mov	r5, r1
 8018210:	d904      	bls.n	801821c <_raise_r+0x14>
 8018212:	2316      	movs	r3, #22
 8018214:	6003      	str	r3, [r0, #0]
 8018216:	f04f 30ff 	mov.w	r0, #4294967295
 801821a:	bd38      	pop	{r3, r4, r5, pc}
 801821c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801821e:	b112      	cbz	r2, 8018226 <_raise_r+0x1e>
 8018220:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018224:	b94b      	cbnz	r3, 801823a <_raise_r+0x32>
 8018226:	4620      	mov	r0, r4
 8018228:	f000 f830 	bl	801828c <_getpid_r>
 801822c:	462a      	mov	r2, r5
 801822e:	4601      	mov	r1, r0
 8018230:	4620      	mov	r0, r4
 8018232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018236:	f000 b817 	b.w	8018268 <_kill_r>
 801823a:	2b01      	cmp	r3, #1
 801823c:	d00a      	beq.n	8018254 <_raise_r+0x4c>
 801823e:	1c59      	adds	r1, r3, #1
 8018240:	d103      	bne.n	801824a <_raise_r+0x42>
 8018242:	2316      	movs	r3, #22
 8018244:	6003      	str	r3, [r0, #0]
 8018246:	2001      	movs	r0, #1
 8018248:	e7e7      	b.n	801821a <_raise_r+0x12>
 801824a:	2400      	movs	r4, #0
 801824c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018250:	4628      	mov	r0, r5
 8018252:	4798      	blx	r3
 8018254:	2000      	movs	r0, #0
 8018256:	e7e0      	b.n	801821a <_raise_r+0x12>

08018258 <raise>:
 8018258:	4b02      	ldr	r3, [pc, #8]	; (8018264 <raise+0xc>)
 801825a:	4601      	mov	r1, r0
 801825c:	6818      	ldr	r0, [r3, #0]
 801825e:	f7ff bfd3 	b.w	8018208 <_raise_r>
 8018262:	bf00      	nop
 8018264:	200002f4 	.word	0x200002f4

08018268 <_kill_r>:
 8018268:	b538      	push	{r3, r4, r5, lr}
 801826a:	4d07      	ldr	r5, [pc, #28]	; (8018288 <_kill_r+0x20>)
 801826c:	2300      	movs	r3, #0
 801826e:	4604      	mov	r4, r0
 8018270:	4608      	mov	r0, r1
 8018272:	4611      	mov	r1, r2
 8018274:	602b      	str	r3, [r5, #0]
 8018276:	f7ec f983 	bl	8004580 <_kill>
 801827a:	1c43      	adds	r3, r0, #1
 801827c:	d102      	bne.n	8018284 <_kill_r+0x1c>
 801827e:	682b      	ldr	r3, [r5, #0]
 8018280:	b103      	cbz	r3, 8018284 <_kill_r+0x1c>
 8018282:	6023      	str	r3, [r4, #0]
 8018284:	bd38      	pop	{r3, r4, r5, pc}
 8018286:	bf00      	nop
 8018288:	20005dc8 	.word	0x20005dc8

0801828c <_getpid_r>:
 801828c:	f7ec b970 	b.w	8004570 <_getpid>

08018290 <sniprintf>:
 8018290:	b40c      	push	{r2, r3}
 8018292:	b530      	push	{r4, r5, lr}
 8018294:	4b17      	ldr	r3, [pc, #92]	; (80182f4 <sniprintf+0x64>)
 8018296:	1e0c      	subs	r4, r1, #0
 8018298:	681d      	ldr	r5, [r3, #0]
 801829a:	b09d      	sub	sp, #116	; 0x74
 801829c:	da08      	bge.n	80182b0 <sniprintf+0x20>
 801829e:	238b      	movs	r3, #139	; 0x8b
 80182a0:	602b      	str	r3, [r5, #0]
 80182a2:	f04f 30ff 	mov.w	r0, #4294967295
 80182a6:	b01d      	add	sp, #116	; 0x74
 80182a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80182ac:	b002      	add	sp, #8
 80182ae:	4770      	bx	lr
 80182b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80182b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80182b8:	bf14      	ite	ne
 80182ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80182be:	4623      	moveq	r3, r4
 80182c0:	9304      	str	r3, [sp, #16]
 80182c2:	9307      	str	r3, [sp, #28]
 80182c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182c8:	9002      	str	r0, [sp, #8]
 80182ca:	9006      	str	r0, [sp, #24]
 80182cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80182d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80182d2:	ab21      	add	r3, sp, #132	; 0x84
 80182d4:	a902      	add	r1, sp, #8
 80182d6:	4628      	mov	r0, r5
 80182d8:	9301      	str	r3, [sp, #4]
 80182da:	f7ff fb1d 	bl	8017918 <_svfiprintf_r>
 80182de:	1c43      	adds	r3, r0, #1
 80182e0:	bfbc      	itt	lt
 80182e2:	238b      	movlt	r3, #139	; 0x8b
 80182e4:	602b      	strlt	r3, [r5, #0]
 80182e6:	2c00      	cmp	r4, #0
 80182e8:	d0dd      	beq.n	80182a6 <sniprintf+0x16>
 80182ea:	9b02      	ldr	r3, [sp, #8]
 80182ec:	2200      	movs	r2, #0
 80182ee:	701a      	strb	r2, [r3, #0]
 80182f0:	e7d9      	b.n	80182a6 <sniprintf+0x16>
 80182f2:	bf00      	nop
 80182f4:	200002f4 	.word	0x200002f4

080182f8 <strncmp>:
 80182f8:	b510      	push	{r4, lr}
 80182fa:	b17a      	cbz	r2, 801831c <strncmp+0x24>
 80182fc:	4603      	mov	r3, r0
 80182fe:	3901      	subs	r1, #1
 8018300:	1884      	adds	r4, r0, r2
 8018302:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018306:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801830a:	4290      	cmp	r0, r2
 801830c:	d101      	bne.n	8018312 <strncmp+0x1a>
 801830e:	42a3      	cmp	r3, r4
 8018310:	d101      	bne.n	8018316 <strncmp+0x1e>
 8018312:	1a80      	subs	r0, r0, r2
 8018314:	bd10      	pop	{r4, pc}
 8018316:	2800      	cmp	r0, #0
 8018318:	d1f3      	bne.n	8018302 <strncmp+0xa>
 801831a:	e7fa      	b.n	8018312 <strncmp+0x1a>
 801831c:	4610      	mov	r0, r2
 801831e:	e7f9      	b.n	8018314 <strncmp+0x1c>

08018320 <__submore>:
 8018320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018324:	460c      	mov	r4, r1
 8018326:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801832c:	4299      	cmp	r1, r3
 801832e:	d11d      	bne.n	801836c <__submore+0x4c>
 8018330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018334:	f7fa f9b4 	bl	80126a0 <_malloc_r>
 8018338:	b918      	cbnz	r0, 8018342 <__submore+0x22>
 801833a:	f04f 30ff 	mov.w	r0, #4294967295
 801833e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018346:	63a3      	str	r3, [r4, #56]	; 0x38
 8018348:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801834c:	6360      	str	r0, [r4, #52]	; 0x34
 801834e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018352:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018356:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801835a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801835e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018362:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018366:	6020      	str	r0, [r4, #0]
 8018368:	2000      	movs	r0, #0
 801836a:	e7e8      	b.n	801833e <__submore+0x1e>
 801836c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801836e:	0077      	lsls	r7, r6, #1
 8018370:	463a      	mov	r2, r7
 8018372:	f7ff fa46 	bl	8017802 <_realloc_r>
 8018376:	4605      	mov	r5, r0
 8018378:	2800      	cmp	r0, #0
 801837a:	d0de      	beq.n	801833a <__submore+0x1a>
 801837c:	eb00 0806 	add.w	r8, r0, r6
 8018380:	4601      	mov	r1, r0
 8018382:	4632      	mov	r2, r6
 8018384:	4640      	mov	r0, r8
 8018386:	f7f9 fe97 	bl	80120b8 <memcpy>
 801838a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801838e:	f8c4 8000 	str.w	r8, [r4]
 8018392:	e7e9      	b.n	8018368 <__submore+0x48>

08018394 <__ascii_wctomb>:
 8018394:	b149      	cbz	r1, 80183aa <__ascii_wctomb+0x16>
 8018396:	2aff      	cmp	r2, #255	; 0xff
 8018398:	bf85      	ittet	hi
 801839a:	238a      	movhi	r3, #138	; 0x8a
 801839c:	6003      	strhi	r3, [r0, #0]
 801839e:	700a      	strbls	r2, [r1, #0]
 80183a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80183a4:	bf98      	it	ls
 80183a6:	2001      	movls	r0, #1
 80183a8:	4770      	bx	lr
 80183aa:	4608      	mov	r0, r1
 80183ac:	4770      	bx	lr
	...

080183b0 <__env_lock>:
 80183b0:	4801      	ldr	r0, [pc, #4]	; (80183b8 <__env_lock+0x8>)
 80183b2:	f7fe bc9b 	b.w	8016cec <__retarget_lock_acquire_recursive>
 80183b6:	bf00      	nop
 80183b8:	20005dc0 	.word	0x20005dc0

080183bc <__env_unlock>:
 80183bc:	4801      	ldr	r0, [pc, #4]	; (80183c4 <__env_unlock+0x8>)
 80183be:	f7fe bc97 	b.w	8016cf0 <__retarget_lock_release_recursive>
 80183c2:	bf00      	nop
 80183c4:	20005dc0 	.word	0x20005dc0

080183c8 <_fstat_r>:
 80183c8:	b538      	push	{r3, r4, r5, lr}
 80183ca:	4d07      	ldr	r5, [pc, #28]	; (80183e8 <_fstat_r+0x20>)
 80183cc:	2300      	movs	r3, #0
 80183ce:	4604      	mov	r4, r0
 80183d0:	4608      	mov	r0, r1
 80183d2:	4611      	mov	r1, r2
 80183d4:	602b      	str	r3, [r5, #0]
 80183d6:	f7ec f932 	bl	800463e <_fstat>
 80183da:	1c43      	adds	r3, r0, #1
 80183dc:	d102      	bne.n	80183e4 <_fstat_r+0x1c>
 80183de:	682b      	ldr	r3, [r5, #0]
 80183e0:	b103      	cbz	r3, 80183e4 <_fstat_r+0x1c>
 80183e2:	6023      	str	r3, [r4, #0]
 80183e4:	bd38      	pop	{r3, r4, r5, pc}
 80183e6:	bf00      	nop
 80183e8:	20005dc8 	.word	0x20005dc8

080183ec <_isatty_r>:
 80183ec:	b538      	push	{r3, r4, r5, lr}
 80183ee:	4d06      	ldr	r5, [pc, #24]	; (8018408 <_isatty_r+0x1c>)
 80183f0:	2300      	movs	r3, #0
 80183f2:	4604      	mov	r4, r0
 80183f4:	4608      	mov	r0, r1
 80183f6:	602b      	str	r3, [r5, #0]
 80183f8:	f7ec f931 	bl	800465e <_isatty>
 80183fc:	1c43      	adds	r3, r0, #1
 80183fe:	d102      	bne.n	8018406 <_isatty_r+0x1a>
 8018400:	682b      	ldr	r3, [r5, #0]
 8018402:	b103      	cbz	r3, 8018406 <_isatty_r+0x1a>
 8018404:	6023      	str	r3, [r4, #0]
 8018406:	bd38      	pop	{r3, r4, r5, pc}
 8018408:	20005dc8 	.word	0x20005dc8

0801840c <_malloc_usable_size_r>:
 801840c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018410:	1f18      	subs	r0, r3, #4
 8018412:	2b00      	cmp	r3, #0
 8018414:	bfbc      	itt	lt
 8018416:	580b      	ldrlt	r3, [r1, r0]
 8018418:	18c0      	addlt	r0, r0, r3
 801841a:	4770      	bx	lr
 801841c:	0000      	movs	r0, r0
	...

08018420 <cos>:
 8018420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018422:	ec53 2b10 	vmov	r2, r3, d0
 8018426:	4826      	ldr	r0, [pc, #152]	; (80184c0 <cos+0xa0>)
 8018428:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801842c:	4281      	cmp	r1, r0
 801842e:	dc06      	bgt.n	801843e <cos+0x1e>
 8018430:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80184b8 <cos+0x98>
 8018434:	b005      	add	sp, #20
 8018436:	f85d eb04 	ldr.w	lr, [sp], #4
 801843a:	f001 bbf1 	b.w	8019c20 <__kernel_cos>
 801843e:	4821      	ldr	r0, [pc, #132]	; (80184c4 <cos+0xa4>)
 8018440:	4281      	cmp	r1, r0
 8018442:	dd09      	ble.n	8018458 <cos+0x38>
 8018444:	ee10 0a10 	vmov	r0, s0
 8018448:	4619      	mov	r1, r3
 801844a:	f7e7 ff3d 	bl	80002c8 <__aeabi_dsub>
 801844e:	ec41 0b10 	vmov	d0, r0, r1
 8018452:	b005      	add	sp, #20
 8018454:	f85d fb04 	ldr.w	pc, [sp], #4
 8018458:	4668      	mov	r0, sp
 801845a:	f001 f921 	bl	80196a0 <__ieee754_rem_pio2>
 801845e:	f000 0003 	and.w	r0, r0, #3
 8018462:	2801      	cmp	r0, #1
 8018464:	d00b      	beq.n	801847e <cos+0x5e>
 8018466:	2802      	cmp	r0, #2
 8018468:	d016      	beq.n	8018498 <cos+0x78>
 801846a:	b9e0      	cbnz	r0, 80184a6 <cos+0x86>
 801846c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018470:	ed9d 0b00 	vldr	d0, [sp]
 8018474:	f001 fbd4 	bl	8019c20 <__kernel_cos>
 8018478:	ec51 0b10 	vmov	r0, r1, d0
 801847c:	e7e7      	b.n	801844e <cos+0x2e>
 801847e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018482:	ed9d 0b00 	vldr	d0, [sp]
 8018486:	f001 ffe3 	bl	801a450 <__kernel_sin>
 801848a:	ec53 2b10 	vmov	r2, r3, d0
 801848e:	ee10 0a10 	vmov	r0, s0
 8018492:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018496:	e7da      	b.n	801844e <cos+0x2e>
 8018498:	ed9d 1b02 	vldr	d1, [sp, #8]
 801849c:	ed9d 0b00 	vldr	d0, [sp]
 80184a0:	f001 fbbe 	bl	8019c20 <__kernel_cos>
 80184a4:	e7f1      	b.n	801848a <cos+0x6a>
 80184a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80184aa:	ed9d 0b00 	vldr	d0, [sp]
 80184ae:	2001      	movs	r0, #1
 80184b0:	f001 ffce 	bl	801a450 <__kernel_sin>
 80184b4:	e7e0      	b.n	8018478 <cos+0x58>
 80184b6:	bf00      	nop
	...
 80184c0:	3fe921fb 	.word	0x3fe921fb
 80184c4:	7fefffff 	.word	0x7fefffff

080184c8 <sin>:
 80184c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80184ca:	ec53 2b10 	vmov	r2, r3, d0
 80184ce:	4828      	ldr	r0, [pc, #160]	; (8018570 <sin+0xa8>)
 80184d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80184d4:	4281      	cmp	r1, r0
 80184d6:	dc07      	bgt.n	80184e8 <sin+0x20>
 80184d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8018568 <sin+0xa0>
 80184dc:	2000      	movs	r0, #0
 80184de:	b005      	add	sp, #20
 80184e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80184e4:	f001 bfb4 	b.w	801a450 <__kernel_sin>
 80184e8:	4822      	ldr	r0, [pc, #136]	; (8018574 <sin+0xac>)
 80184ea:	4281      	cmp	r1, r0
 80184ec:	dd09      	ble.n	8018502 <sin+0x3a>
 80184ee:	ee10 0a10 	vmov	r0, s0
 80184f2:	4619      	mov	r1, r3
 80184f4:	f7e7 fee8 	bl	80002c8 <__aeabi_dsub>
 80184f8:	ec41 0b10 	vmov	d0, r0, r1
 80184fc:	b005      	add	sp, #20
 80184fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8018502:	4668      	mov	r0, sp
 8018504:	f001 f8cc 	bl	80196a0 <__ieee754_rem_pio2>
 8018508:	f000 0003 	and.w	r0, r0, #3
 801850c:	2801      	cmp	r0, #1
 801850e:	d00c      	beq.n	801852a <sin+0x62>
 8018510:	2802      	cmp	r0, #2
 8018512:	d011      	beq.n	8018538 <sin+0x70>
 8018514:	b9f0      	cbnz	r0, 8018554 <sin+0x8c>
 8018516:	ed9d 1b02 	vldr	d1, [sp, #8]
 801851a:	ed9d 0b00 	vldr	d0, [sp]
 801851e:	2001      	movs	r0, #1
 8018520:	f001 ff96 	bl	801a450 <__kernel_sin>
 8018524:	ec51 0b10 	vmov	r0, r1, d0
 8018528:	e7e6      	b.n	80184f8 <sin+0x30>
 801852a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801852e:	ed9d 0b00 	vldr	d0, [sp]
 8018532:	f001 fb75 	bl	8019c20 <__kernel_cos>
 8018536:	e7f5      	b.n	8018524 <sin+0x5c>
 8018538:	ed9d 1b02 	vldr	d1, [sp, #8]
 801853c:	ed9d 0b00 	vldr	d0, [sp]
 8018540:	2001      	movs	r0, #1
 8018542:	f001 ff85 	bl	801a450 <__kernel_sin>
 8018546:	ec53 2b10 	vmov	r2, r3, d0
 801854a:	ee10 0a10 	vmov	r0, s0
 801854e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018552:	e7d1      	b.n	80184f8 <sin+0x30>
 8018554:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018558:	ed9d 0b00 	vldr	d0, [sp]
 801855c:	f001 fb60 	bl	8019c20 <__kernel_cos>
 8018560:	e7f1      	b.n	8018546 <sin+0x7e>
 8018562:	bf00      	nop
 8018564:	f3af 8000 	nop.w
	...
 8018570:	3fe921fb 	.word	0x3fe921fb
 8018574:	7fefffff 	.word	0x7fefffff

08018578 <tan>:
 8018578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801857a:	ec53 2b10 	vmov	r2, r3, d0
 801857e:	4816      	ldr	r0, [pc, #88]	; (80185d8 <tan+0x60>)
 8018580:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018584:	4281      	cmp	r1, r0
 8018586:	dc07      	bgt.n	8018598 <tan+0x20>
 8018588:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80185d0 <tan+0x58>
 801858c:	2001      	movs	r0, #1
 801858e:	b005      	add	sp, #20
 8018590:	f85d eb04 	ldr.w	lr, [sp], #4
 8018594:	f002 b81c 	b.w	801a5d0 <__kernel_tan>
 8018598:	4810      	ldr	r0, [pc, #64]	; (80185dc <tan+0x64>)
 801859a:	4281      	cmp	r1, r0
 801859c:	dd09      	ble.n	80185b2 <tan+0x3a>
 801859e:	ee10 0a10 	vmov	r0, s0
 80185a2:	4619      	mov	r1, r3
 80185a4:	f7e7 fe90 	bl	80002c8 <__aeabi_dsub>
 80185a8:	ec41 0b10 	vmov	d0, r0, r1
 80185ac:	b005      	add	sp, #20
 80185ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80185b2:	4668      	mov	r0, sp
 80185b4:	f001 f874 	bl	80196a0 <__ieee754_rem_pio2>
 80185b8:	0040      	lsls	r0, r0, #1
 80185ba:	f000 0002 	and.w	r0, r0, #2
 80185be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80185c2:	ed9d 0b00 	vldr	d0, [sp]
 80185c6:	f1c0 0001 	rsb	r0, r0, #1
 80185ca:	f002 f801 	bl	801a5d0 <__kernel_tan>
 80185ce:	e7ed      	b.n	80185ac <tan+0x34>
	...
 80185d8:	3fe921fb 	.word	0x3fe921fb
 80185dc:	7fefffff 	.word	0x7fefffff

080185e0 <acos>:
 80185e0:	b538      	push	{r3, r4, r5, lr}
 80185e2:	ed2d 8b02 	vpush	{d8}
 80185e6:	ec55 4b10 	vmov	r4, r5, d0
 80185ea:	f000 f8c9 	bl	8018780 <__ieee754_acos>
 80185ee:	4622      	mov	r2, r4
 80185f0:	462b      	mov	r3, r5
 80185f2:	4620      	mov	r0, r4
 80185f4:	4629      	mov	r1, r5
 80185f6:	eeb0 8a40 	vmov.f32	s16, s0
 80185fa:	eef0 8a60 	vmov.f32	s17, s1
 80185fe:	f7e8 fab5 	bl	8000b6c <__aeabi_dcmpun>
 8018602:	b9a8      	cbnz	r0, 8018630 <acos+0x50>
 8018604:	ec45 4b10 	vmov	d0, r4, r5
 8018608:	f002 fa1c 	bl	801aa44 <fabs>
 801860c:	4b0c      	ldr	r3, [pc, #48]	; (8018640 <acos+0x60>)
 801860e:	ec51 0b10 	vmov	r0, r1, d0
 8018612:	2200      	movs	r2, #0
 8018614:	f7e8 faa0 	bl	8000b58 <__aeabi_dcmpgt>
 8018618:	b150      	cbz	r0, 8018630 <acos+0x50>
 801861a:	f7f9 fd01 	bl	8012020 <__errno>
 801861e:	ecbd 8b02 	vpop	{d8}
 8018622:	2321      	movs	r3, #33	; 0x21
 8018624:	6003      	str	r3, [r0, #0]
 8018626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801862a:	4806      	ldr	r0, [pc, #24]	; (8018644 <acos+0x64>)
 801862c:	f7ff bdac 	b.w	8018188 <nan>
 8018630:	eeb0 0a48 	vmov.f32	s0, s16
 8018634:	eef0 0a68 	vmov.f32	s1, s17
 8018638:	ecbd 8b02 	vpop	{d8}
 801863c:	bd38      	pop	{r3, r4, r5, pc}
 801863e:	bf00      	nop
 8018640:	3ff00000 	.word	0x3ff00000
 8018644:	08049492 	.word	0x08049492

08018648 <pow>:
 8018648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801864a:	ed2d 8b02 	vpush	{d8}
 801864e:	eeb0 8a40 	vmov.f32	s16, s0
 8018652:	eef0 8a60 	vmov.f32	s17, s1
 8018656:	ec55 4b11 	vmov	r4, r5, d1
 801865a:	f000 faf1 	bl	8018c40 <__ieee754_pow>
 801865e:	4622      	mov	r2, r4
 8018660:	462b      	mov	r3, r5
 8018662:	4620      	mov	r0, r4
 8018664:	4629      	mov	r1, r5
 8018666:	ec57 6b10 	vmov	r6, r7, d0
 801866a:	f7e8 fa7f 	bl	8000b6c <__aeabi_dcmpun>
 801866e:	2800      	cmp	r0, #0
 8018670:	d13b      	bne.n	80186ea <pow+0xa2>
 8018672:	ec51 0b18 	vmov	r0, r1, d8
 8018676:	2200      	movs	r2, #0
 8018678:	2300      	movs	r3, #0
 801867a:	f7e8 fa45 	bl	8000b08 <__aeabi_dcmpeq>
 801867e:	b1b8      	cbz	r0, 80186b0 <pow+0x68>
 8018680:	2200      	movs	r2, #0
 8018682:	2300      	movs	r3, #0
 8018684:	4620      	mov	r0, r4
 8018686:	4629      	mov	r1, r5
 8018688:	f7e8 fa3e 	bl	8000b08 <__aeabi_dcmpeq>
 801868c:	2800      	cmp	r0, #0
 801868e:	d146      	bne.n	801871e <pow+0xd6>
 8018690:	ec45 4b10 	vmov	d0, r4, r5
 8018694:	f002 f9df 	bl	801aa56 <finite>
 8018698:	b338      	cbz	r0, 80186ea <pow+0xa2>
 801869a:	2200      	movs	r2, #0
 801869c:	2300      	movs	r3, #0
 801869e:	4620      	mov	r0, r4
 80186a0:	4629      	mov	r1, r5
 80186a2:	f7e8 fa3b 	bl	8000b1c <__aeabi_dcmplt>
 80186a6:	b300      	cbz	r0, 80186ea <pow+0xa2>
 80186a8:	f7f9 fcba 	bl	8012020 <__errno>
 80186ac:	2322      	movs	r3, #34	; 0x22
 80186ae:	e01b      	b.n	80186e8 <pow+0xa0>
 80186b0:	ec47 6b10 	vmov	d0, r6, r7
 80186b4:	f002 f9cf 	bl	801aa56 <finite>
 80186b8:	b9e0      	cbnz	r0, 80186f4 <pow+0xac>
 80186ba:	eeb0 0a48 	vmov.f32	s0, s16
 80186be:	eef0 0a68 	vmov.f32	s1, s17
 80186c2:	f002 f9c8 	bl	801aa56 <finite>
 80186c6:	b1a8      	cbz	r0, 80186f4 <pow+0xac>
 80186c8:	ec45 4b10 	vmov	d0, r4, r5
 80186cc:	f002 f9c3 	bl	801aa56 <finite>
 80186d0:	b180      	cbz	r0, 80186f4 <pow+0xac>
 80186d2:	4632      	mov	r2, r6
 80186d4:	463b      	mov	r3, r7
 80186d6:	4630      	mov	r0, r6
 80186d8:	4639      	mov	r1, r7
 80186da:	f7e8 fa47 	bl	8000b6c <__aeabi_dcmpun>
 80186de:	2800      	cmp	r0, #0
 80186e0:	d0e2      	beq.n	80186a8 <pow+0x60>
 80186e2:	f7f9 fc9d 	bl	8012020 <__errno>
 80186e6:	2321      	movs	r3, #33	; 0x21
 80186e8:	6003      	str	r3, [r0, #0]
 80186ea:	ecbd 8b02 	vpop	{d8}
 80186ee:	ec47 6b10 	vmov	d0, r6, r7
 80186f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186f4:	2200      	movs	r2, #0
 80186f6:	2300      	movs	r3, #0
 80186f8:	4630      	mov	r0, r6
 80186fa:	4639      	mov	r1, r7
 80186fc:	f7e8 fa04 	bl	8000b08 <__aeabi_dcmpeq>
 8018700:	2800      	cmp	r0, #0
 8018702:	d0f2      	beq.n	80186ea <pow+0xa2>
 8018704:	eeb0 0a48 	vmov.f32	s0, s16
 8018708:	eef0 0a68 	vmov.f32	s1, s17
 801870c:	f002 f9a3 	bl	801aa56 <finite>
 8018710:	2800      	cmp	r0, #0
 8018712:	d0ea      	beq.n	80186ea <pow+0xa2>
 8018714:	ec45 4b10 	vmov	d0, r4, r5
 8018718:	f002 f99d 	bl	801aa56 <finite>
 801871c:	e7c3      	b.n	80186a6 <pow+0x5e>
 801871e:	4f01      	ldr	r7, [pc, #4]	; (8018724 <pow+0xdc>)
 8018720:	2600      	movs	r6, #0
 8018722:	e7e2      	b.n	80186ea <pow+0xa2>
 8018724:	3ff00000 	.word	0x3ff00000

08018728 <sqrt>:
 8018728:	b538      	push	{r3, r4, r5, lr}
 801872a:	ed2d 8b02 	vpush	{d8}
 801872e:	ec55 4b10 	vmov	r4, r5, d0
 8018732:	f001 f9c1 	bl	8019ab8 <__ieee754_sqrt>
 8018736:	4622      	mov	r2, r4
 8018738:	462b      	mov	r3, r5
 801873a:	4620      	mov	r0, r4
 801873c:	4629      	mov	r1, r5
 801873e:	eeb0 8a40 	vmov.f32	s16, s0
 8018742:	eef0 8a60 	vmov.f32	s17, s1
 8018746:	f7e8 fa11 	bl	8000b6c <__aeabi_dcmpun>
 801874a:	b990      	cbnz	r0, 8018772 <sqrt+0x4a>
 801874c:	2200      	movs	r2, #0
 801874e:	2300      	movs	r3, #0
 8018750:	4620      	mov	r0, r4
 8018752:	4629      	mov	r1, r5
 8018754:	f7e8 f9e2 	bl	8000b1c <__aeabi_dcmplt>
 8018758:	b158      	cbz	r0, 8018772 <sqrt+0x4a>
 801875a:	f7f9 fc61 	bl	8012020 <__errno>
 801875e:	2321      	movs	r3, #33	; 0x21
 8018760:	6003      	str	r3, [r0, #0]
 8018762:	2200      	movs	r2, #0
 8018764:	2300      	movs	r3, #0
 8018766:	4610      	mov	r0, r2
 8018768:	4619      	mov	r1, r3
 801876a:	f7e8 f88f 	bl	800088c <__aeabi_ddiv>
 801876e:	ec41 0b18 	vmov	d8, r0, r1
 8018772:	eeb0 0a48 	vmov.f32	s0, s16
 8018776:	eef0 0a68 	vmov.f32	s1, s17
 801877a:	ecbd 8b02 	vpop	{d8}
 801877e:	bd38      	pop	{r3, r4, r5, pc}

08018780 <__ieee754_acos>:
 8018780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018784:	ec55 4b10 	vmov	r4, r5, d0
 8018788:	49b7      	ldr	r1, [pc, #732]	; (8018a68 <__ieee754_acos+0x2e8>)
 801878a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801878e:	428b      	cmp	r3, r1
 8018790:	dd1b      	ble.n	80187ca <__ieee754_acos+0x4a>
 8018792:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8018796:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801879a:	4323      	orrs	r3, r4
 801879c:	d106      	bne.n	80187ac <__ieee754_acos+0x2c>
 801879e:	2d00      	cmp	r5, #0
 80187a0:	f300 8211 	bgt.w	8018bc6 <__ieee754_acos+0x446>
 80187a4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8018a00 <__ieee754_acos+0x280>
 80187a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187ac:	ee10 2a10 	vmov	r2, s0
 80187b0:	462b      	mov	r3, r5
 80187b2:	ee10 0a10 	vmov	r0, s0
 80187b6:	4629      	mov	r1, r5
 80187b8:	f7e7 fd86 	bl	80002c8 <__aeabi_dsub>
 80187bc:	4602      	mov	r2, r0
 80187be:	460b      	mov	r3, r1
 80187c0:	f7e8 f864 	bl	800088c <__aeabi_ddiv>
 80187c4:	ec41 0b10 	vmov	d0, r0, r1
 80187c8:	e7ee      	b.n	80187a8 <__ieee754_acos+0x28>
 80187ca:	49a8      	ldr	r1, [pc, #672]	; (8018a6c <__ieee754_acos+0x2ec>)
 80187cc:	428b      	cmp	r3, r1
 80187ce:	f300 8087 	bgt.w	80188e0 <__ieee754_acos+0x160>
 80187d2:	4aa7      	ldr	r2, [pc, #668]	; (8018a70 <__ieee754_acos+0x2f0>)
 80187d4:	4293      	cmp	r3, r2
 80187d6:	f340 81f9 	ble.w	8018bcc <__ieee754_acos+0x44c>
 80187da:	ee10 2a10 	vmov	r2, s0
 80187de:	ee10 0a10 	vmov	r0, s0
 80187e2:	462b      	mov	r3, r5
 80187e4:	4629      	mov	r1, r5
 80187e6:	f7e7 ff27 	bl	8000638 <__aeabi_dmul>
 80187ea:	a387      	add	r3, pc, #540	; (adr r3, 8018a08 <__ieee754_acos+0x288>)
 80187ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187f0:	4606      	mov	r6, r0
 80187f2:	460f      	mov	r7, r1
 80187f4:	f7e7 ff20 	bl	8000638 <__aeabi_dmul>
 80187f8:	a385      	add	r3, pc, #532	; (adr r3, 8018a10 <__ieee754_acos+0x290>)
 80187fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187fe:	f7e7 fd65 	bl	80002cc <__adddf3>
 8018802:	4632      	mov	r2, r6
 8018804:	463b      	mov	r3, r7
 8018806:	f7e7 ff17 	bl	8000638 <__aeabi_dmul>
 801880a:	a383      	add	r3, pc, #524	; (adr r3, 8018a18 <__ieee754_acos+0x298>)
 801880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018810:	f7e7 fd5a 	bl	80002c8 <__aeabi_dsub>
 8018814:	4632      	mov	r2, r6
 8018816:	463b      	mov	r3, r7
 8018818:	f7e7 ff0e 	bl	8000638 <__aeabi_dmul>
 801881c:	a380      	add	r3, pc, #512	; (adr r3, 8018a20 <__ieee754_acos+0x2a0>)
 801881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018822:	f7e7 fd53 	bl	80002cc <__adddf3>
 8018826:	4632      	mov	r2, r6
 8018828:	463b      	mov	r3, r7
 801882a:	f7e7 ff05 	bl	8000638 <__aeabi_dmul>
 801882e:	a37e      	add	r3, pc, #504	; (adr r3, 8018a28 <__ieee754_acos+0x2a8>)
 8018830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018834:	f7e7 fd48 	bl	80002c8 <__aeabi_dsub>
 8018838:	4632      	mov	r2, r6
 801883a:	463b      	mov	r3, r7
 801883c:	f7e7 fefc 	bl	8000638 <__aeabi_dmul>
 8018840:	a37b      	add	r3, pc, #492	; (adr r3, 8018a30 <__ieee754_acos+0x2b0>)
 8018842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018846:	f7e7 fd41 	bl	80002cc <__adddf3>
 801884a:	4632      	mov	r2, r6
 801884c:	463b      	mov	r3, r7
 801884e:	f7e7 fef3 	bl	8000638 <__aeabi_dmul>
 8018852:	a379      	add	r3, pc, #484	; (adr r3, 8018a38 <__ieee754_acos+0x2b8>)
 8018854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018858:	4680      	mov	r8, r0
 801885a:	4689      	mov	r9, r1
 801885c:	4630      	mov	r0, r6
 801885e:	4639      	mov	r1, r7
 8018860:	f7e7 feea 	bl	8000638 <__aeabi_dmul>
 8018864:	a376      	add	r3, pc, #472	; (adr r3, 8018a40 <__ieee754_acos+0x2c0>)
 8018866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801886a:	f7e7 fd2d 	bl	80002c8 <__aeabi_dsub>
 801886e:	4632      	mov	r2, r6
 8018870:	463b      	mov	r3, r7
 8018872:	f7e7 fee1 	bl	8000638 <__aeabi_dmul>
 8018876:	a374      	add	r3, pc, #464	; (adr r3, 8018a48 <__ieee754_acos+0x2c8>)
 8018878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801887c:	f7e7 fd26 	bl	80002cc <__adddf3>
 8018880:	4632      	mov	r2, r6
 8018882:	463b      	mov	r3, r7
 8018884:	f7e7 fed8 	bl	8000638 <__aeabi_dmul>
 8018888:	a371      	add	r3, pc, #452	; (adr r3, 8018a50 <__ieee754_acos+0x2d0>)
 801888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801888e:	f7e7 fd1b 	bl	80002c8 <__aeabi_dsub>
 8018892:	4632      	mov	r2, r6
 8018894:	463b      	mov	r3, r7
 8018896:	f7e7 fecf 	bl	8000638 <__aeabi_dmul>
 801889a:	4b76      	ldr	r3, [pc, #472]	; (8018a74 <__ieee754_acos+0x2f4>)
 801889c:	2200      	movs	r2, #0
 801889e:	f7e7 fd15 	bl	80002cc <__adddf3>
 80188a2:	4602      	mov	r2, r0
 80188a4:	460b      	mov	r3, r1
 80188a6:	4640      	mov	r0, r8
 80188a8:	4649      	mov	r1, r9
 80188aa:	f7e7 ffef 	bl	800088c <__aeabi_ddiv>
 80188ae:	4622      	mov	r2, r4
 80188b0:	462b      	mov	r3, r5
 80188b2:	f7e7 fec1 	bl	8000638 <__aeabi_dmul>
 80188b6:	4602      	mov	r2, r0
 80188b8:	460b      	mov	r3, r1
 80188ba:	a167      	add	r1, pc, #412	; (adr r1, 8018a58 <__ieee754_acos+0x2d8>)
 80188bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80188c0:	f7e7 fd02 	bl	80002c8 <__aeabi_dsub>
 80188c4:	4602      	mov	r2, r0
 80188c6:	460b      	mov	r3, r1
 80188c8:	4620      	mov	r0, r4
 80188ca:	4629      	mov	r1, r5
 80188cc:	f7e7 fcfc 	bl	80002c8 <__aeabi_dsub>
 80188d0:	4602      	mov	r2, r0
 80188d2:	460b      	mov	r3, r1
 80188d4:	a162      	add	r1, pc, #392	; (adr r1, 8018a60 <__ieee754_acos+0x2e0>)
 80188d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80188da:	f7e7 fcf5 	bl	80002c8 <__aeabi_dsub>
 80188de:	e771      	b.n	80187c4 <__ieee754_acos+0x44>
 80188e0:	2d00      	cmp	r5, #0
 80188e2:	f280 80cb 	bge.w	8018a7c <__ieee754_acos+0x2fc>
 80188e6:	ee10 0a10 	vmov	r0, s0
 80188ea:	4b62      	ldr	r3, [pc, #392]	; (8018a74 <__ieee754_acos+0x2f4>)
 80188ec:	2200      	movs	r2, #0
 80188ee:	4629      	mov	r1, r5
 80188f0:	f7e7 fcec 	bl	80002cc <__adddf3>
 80188f4:	4b60      	ldr	r3, [pc, #384]	; (8018a78 <__ieee754_acos+0x2f8>)
 80188f6:	2200      	movs	r2, #0
 80188f8:	f7e7 fe9e 	bl	8000638 <__aeabi_dmul>
 80188fc:	a342      	add	r3, pc, #264	; (adr r3, 8018a08 <__ieee754_acos+0x288>)
 80188fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018902:	4604      	mov	r4, r0
 8018904:	460d      	mov	r5, r1
 8018906:	f7e7 fe97 	bl	8000638 <__aeabi_dmul>
 801890a:	a341      	add	r3, pc, #260	; (adr r3, 8018a10 <__ieee754_acos+0x290>)
 801890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018910:	f7e7 fcdc 	bl	80002cc <__adddf3>
 8018914:	4622      	mov	r2, r4
 8018916:	462b      	mov	r3, r5
 8018918:	f7e7 fe8e 	bl	8000638 <__aeabi_dmul>
 801891c:	a33e      	add	r3, pc, #248	; (adr r3, 8018a18 <__ieee754_acos+0x298>)
 801891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018922:	f7e7 fcd1 	bl	80002c8 <__aeabi_dsub>
 8018926:	4622      	mov	r2, r4
 8018928:	462b      	mov	r3, r5
 801892a:	f7e7 fe85 	bl	8000638 <__aeabi_dmul>
 801892e:	a33c      	add	r3, pc, #240	; (adr r3, 8018a20 <__ieee754_acos+0x2a0>)
 8018930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018934:	f7e7 fcca 	bl	80002cc <__adddf3>
 8018938:	4622      	mov	r2, r4
 801893a:	462b      	mov	r3, r5
 801893c:	f7e7 fe7c 	bl	8000638 <__aeabi_dmul>
 8018940:	a339      	add	r3, pc, #228	; (adr r3, 8018a28 <__ieee754_acos+0x2a8>)
 8018942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018946:	f7e7 fcbf 	bl	80002c8 <__aeabi_dsub>
 801894a:	4622      	mov	r2, r4
 801894c:	462b      	mov	r3, r5
 801894e:	f7e7 fe73 	bl	8000638 <__aeabi_dmul>
 8018952:	a337      	add	r3, pc, #220	; (adr r3, 8018a30 <__ieee754_acos+0x2b0>)
 8018954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018958:	f7e7 fcb8 	bl	80002cc <__adddf3>
 801895c:	4622      	mov	r2, r4
 801895e:	462b      	mov	r3, r5
 8018960:	f7e7 fe6a 	bl	8000638 <__aeabi_dmul>
 8018964:	ec45 4b10 	vmov	d0, r4, r5
 8018968:	4680      	mov	r8, r0
 801896a:	4689      	mov	r9, r1
 801896c:	f001 f8a4 	bl	8019ab8 <__ieee754_sqrt>
 8018970:	a331      	add	r3, pc, #196	; (adr r3, 8018a38 <__ieee754_acos+0x2b8>)
 8018972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018976:	4620      	mov	r0, r4
 8018978:	4629      	mov	r1, r5
 801897a:	ec57 6b10 	vmov	r6, r7, d0
 801897e:	f7e7 fe5b 	bl	8000638 <__aeabi_dmul>
 8018982:	a32f      	add	r3, pc, #188	; (adr r3, 8018a40 <__ieee754_acos+0x2c0>)
 8018984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018988:	f7e7 fc9e 	bl	80002c8 <__aeabi_dsub>
 801898c:	4622      	mov	r2, r4
 801898e:	462b      	mov	r3, r5
 8018990:	f7e7 fe52 	bl	8000638 <__aeabi_dmul>
 8018994:	a32c      	add	r3, pc, #176	; (adr r3, 8018a48 <__ieee754_acos+0x2c8>)
 8018996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801899a:	f7e7 fc97 	bl	80002cc <__adddf3>
 801899e:	4622      	mov	r2, r4
 80189a0:	462b      	mov	r3, r5
 80189a2:	f7e7 fe49 	bl	8000638 <__aeabi_dmul>
 80189a6:	a32a      	add	r3, pc, #168	; (adr r3, 8018a50 <__ieee754_acos+0x2d0>)
 80189a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ac:	f7e7 fc8c 	bl	80002c8 <__aeabi_dsub>
 80189b0:	4622      	mov	r2, r4
 80189b2:	462b      	mov	r3, r5
 80189b4:	f7e7 fe40 	bl	8000638 <__aeabi_dmul>
 80189b8:	4b2e      	ldr	r3, [pc, #184]	; (8018a74 <__ieee754_acos+0x2f4>)
 80189ba:	2200      	movs	r2, #0
 80189bc:	f7e7 fc86 	bl	80002cc <__adddf3>
 80189c0:	4602      	mov	r2, r0
 80189c2:	460b      	mov	r3, r1
 80189c4:	4640      	mov	r0, r8
 80189c6:	4649      	mov	r1, r9
 80189c8:	f7e7 ff60 	bl	800088c <__aeabi_ddiv>
 80189cc:	4632      	mov	r2, r6
 80189ce:	463b      	mov	r3, r7
 80189d0:	f7e7 fe32 	bl	8000638 <__aeabi_dmul>
 80189d4:	a320      	add	r3, pc, #128	; (adr r3, 8018a58 <__ieee754_acos+0x2d8>)
 80189d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189da:	f7e7 fc75 	bl	80002c8 <__aeabi_dsub>
 80189de:	4632      	mov	r2, r6
 80189e0:	463b      	mov	r3, r7
 80189e2:	f7e7 fc73 	bl	80002cc <__adddf3>
 80189e6:	4602      	mov	r2, r0
 80189e8:	460b      	mov	r3, r1
 80189ea:	f7e7 fc6f 	bl	80002cc <__adddf3>
 80189ee:	4602      	mov	r2, r0
 80189f0:	460b      	mov	r3, r1
 80189f2:	a103      	add	r1, pc, #12	; (adr r1, 8018a00 <__ieee754_acos+0x280>)
 80189f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80189f8:	e76f      	b.n	80188da <__ieee754_acos+0x15a>
 80189fa:	bf00      	nop
 80189fc:	f3af 8000 	nop.w
 8018a00:	54442d18 	.word	0x54442d18
 8018a04:	400921fb 	.word	0x400921fb
 8018a08:	0dfdf709 	.word	0x0dfdf709
 8018a0c:	3f023de1 	.word	0x3f023de1
 8018a10:	7501b288 	.word	0x7501b288
 8018a14:	3f49efe0 	.word	0x3f49efe0
 8018a18:	b5688f3b 	.word	0xb5688f3b
 8018a1c:	3fa48228 	.word	0x3fa48228
 8018a20:	0e884455 	.word	0x0e884455
 8018a24:	3fc9c155 	.word	0x3fc9c155
 8018a28:	03eb6f7d 	.word	0x03eb6f7d
 8018a2c:	3fd4d612 	.word	0x3fd4d612
 8018a30:	55555555 	.word	0x55555555
 8018a34:	3fc55555 	.word	0x3fc55555
 8018a38:	b12e9282 	.word	0xb12e9282
 8018a3c:	3fb3b8c5 	.word	0x3fb3b8c5
 8018a40:	1b8d0159 	.word	0x1b8d0159
 8018a44:	3fe6066c 	.word	0x3fe6066c
 8018a48:	9c598ac8 	.word	0x9c598ac8
 8018a4c:	40002ae5 	.word	0x40002ae5
 8018a50:	1c8a2d4b 	.word	0x1c8a2d4b
 8018a54:	40033a27 	.word	0x40033a27
 8018a58:	33145c07 	.word	0x33145c07
 8018a5c:	3c91a626 	.word	0x3c91a626
 8018a60:	54442d18 	.word	0x54442d18
 8018a64:	3ff921fb 	.word	0x3ff921fb
 8018a68:	3fefffff 	.word	0x3fefffff
 8018a6c:	3fdfffff 	.word	0x3fdfffff
 8018a70:	3c600000 	.word	0x3c600000
 8018a74:	3ff00000 	.word	0x3ff00000
 8018a78:	3fe00000 	.word	0x3fe00000
 8018a7c:	ee10 2a10 	vmov	r2, s0
 8018a80:	462b      	mov	r3, r5
 8018a82:	496d      	ldr	r1, [pc, #436]	; (8018c38 <__ieee754_acos+0x4b8>)
 8018a84:	2000      	movs	r0, #0
 8018a86:	f7e7 fc1f 	bl	80002c8 <__aeabi_dsub>
 8018a8a:	4b6c      	ldr	r3, [pc, #432]	; (8018c3c <__ieee754_acos+0x4bc>)
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	f7e7 fdd3 	bl	8000638 <__aeabi_dmul>
 8018a92:	4604      	mov	r4, r0
 8018a94:	460d      	mov	r5, r1
 8018a96:	ec45 4b10 	vmov	d0, r4, r5
 8018a9a:	f001 f80d 	bl	8019ab8 <__ieee754_sqrt>
 8018a9e:	a34e      	add	r3, pc, #312	; (adr r3, 8018bd8 <__ieee754_acos+0x458>)
 8018aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aa4:	4620      	mov	r0, r4
 8018aa6:	4629      	mov	r1, r5
 8018aa8:	ec59 8b10 	vmov	r8, r9, d0
 8018aac:	f7e7 fdc4 	bl	8000638 <__aeabi_dmul>
 8018ab0:	a34b      	add	r3, pc, #300	; (adr r3, 8018be0 <__ieee754_acos+0x460>)
 8018ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ab6:	f7e7 fc09 	bl	80002cc <__adddf3>
 8018aba:	4622      	mov	r2, r4
 8018abc:	462b      	mov	r3, r5
 8018abe:	f7e7 fdbb 	bl	8000638 <__aeabi_dmul>
 8018ac2:	a349      	add	r3, pc, #292	; (adr r3, 8018be8 <__ieee754_acos+0x468>)
 8018ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ac8:	f7e7 fbfe 	bl	80002c8 <__aeabi_dsub>
 8018acc:	4622      	mov	r2, r4
 8018ace:	462b      	mov	r3, r5
 8018ad0:	f7e7 fdb2 	bl	8000638 <__aeabi_dmul>
 8018ad4:	a346      	add	r3, pc, #280	; (adr r3, 8018bf0 <__ieee754_acos+0x470>)
 8018ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ada:	f7e7 fbf7 	bl	80002cc <__adddf3>
 8018ade:	4622      	mov	r2, r4
 8018ae0:	462b      	mov	r3, r5
 8018ae2:	f7e7 fda9 	bl	8000638 <__aeabi_dmul>
 8018ae6:	a344      	add	r3, pc, #272	; (adr r3, 8018bf8 <__ieee754_acos+0x478>)
 8018ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aec:	f7e7 fbec 	bl	80002c8 <__aeabi_dsub>
 8018af0:	4622      	mov	r2, r4
 8018af2:	462b      	mov	r3, r5
 8018af4:	f7e7 fda0 	bl	8000638 <__aeabi_dmul>
 8018af8:	a341      	add	r3, pc, #260	; (adr r3, 8018c00 <__ieee754_acos+0x480>)
 8018afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018afe:	f7e7 fbe5 	bl	80002cc <__adddf3>
 8018b02:	4622      	mov	r2, r4
 8018b04:	462b      	mov	r3, r5
 8018b06:	f7e7 fd97 	bl	8000638 <__aeabi_dmul>
 8018b0a:	a33f      	add	r3, pc, #252	; (adr r3, 8018c08 <__ieee754_acos+0x488>)
 8018b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b10:	4682      	mov	sl, r0
 8018b12:	468b      	mov	fp, r1
 8018b14:	4620      	mov	r0, r4
 8018b16:	4629      	mov	r1, r5
 8018b18:	f7e7 fd8e 	bl	8000638 <__aeabi_dmul>
 8018b1c:	a33c      	add	r3, pc, #240	; (adr r3, 8018c10 <__ieee754_acos+0x490>)
 8018b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b22:	f7e7 fbd1 	bl	80002c8 <__aeabi_dsub>
 8018b26:	4622      	mov	r2, r4
 8018b28:	462b      	mov	r3, r5
 8018b2a:	f7e7 fd85 	bl	8000638 <__aeabi_dmul>
 8018b2e:	a33a      	add	r3, pc, #232	; (adr r3, 8018c18 <__ieee754_acos+0x498>)
 8018b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b34:	f7e7 fbca 	bl	80002cc <__adddf3>
 8018b38:	4622      	mov	r2, r4
 8018b3a:	462b      	mov	r3, r5
 8018b3c:	f7e7 fd7c 	bl	8000638 <__aeabi_dmul>
 8018b40:	a337      	add	r3, pc, #220	; (adr r3, 8018c20 <__ieee754_acos+0x4a0>)
 8018b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b46:	f7e7 fbbf 	bl	80002c8 <__aeabi_dsub>
 8018b4a:	4622      	mov	r2, r4
 8018b4c:	462b      	mov	r3, r5
 8018b4e:	f7e7 fd73 	bl	8000638 <__aeabi_dmul>
 8018b52:	4b39      	ldr	r3, [pc, #228]	; (8018c38 <__ieee754_acos+0x4b8>)
 8018b54:	2200      	movs	r2, #0
 8018b56:	f7e7 fbb9 	bl	80002cc <__adddf3>
 8018b5a:	4602      	mov	r2, r0
 8018b5c:	460b      	mov	r3, r1
 8018b5e:	4650      	mov	r0, sl
 8018b60:	4659      	mov	r1, fp
 8018b62:	f7e7 fe93 	bl	800088c <__aeabi_ddiv>
 8018b66:	4642      	mov	r2, r8
 8018b68:	464b      	mov	r3, r9
 8018b6a:	f7e7 fd65 	bl	8000638 <__aeabi_dmul>
 8018b6e:	2600      	movs	r6, #0
 8018b70:	4682      	mov	sl, r0
 8018b72:	468b      	mov	fp, r1
 8018b74:	4632      	mov	r2, r6
 8018b76:	464b      	mov	r3, r9
 8018b78:	4630      	mov	r0, r6
 8018b7a:	4649      	mov	r1, r9
 8018b7c:	f7e7 fd5c 	bl	8000638 <__aeabi_dmul>
 8018b80:	4602      	mov	r2, r0
 8018b82:	460b      	mov	r3, r1
 8018b84:	4620      	mov	r0, r4
 8018b86:	4629      	mov	r1, r5
 8018b88:	f7e7 fb9e 	bl	80002c8 <__aeabi_dsub>
 8018b8c:	4632      	mov	r2, r6
 8018b8e:	4604      	mov	r4, r0
 8018b90:	460d      	mov	r5, r1
 8018b92:	464b      	mov	r3, r9
 8018b94:	4640      	mov	r0, r8
 8018b96:	4649      	mov	r1, r9
 8018b98:	f7e7 fb98 	bl	80002cc <__adddf3>
 8018b9c:	4602      	mov	r2, r0
 8018b9e:	460b      	mov	r3, r1
 8018ba0:	4620      	mov	r0, r4
 8018ba2:	4629      	mov	r1, r5
 8018ba4:	f7e7 fe72 	bl	800088c <__aeabi_ddiv>
 8018ba8:	4602      	mov	r2, r0
 8018baa:	460b      	mov	r3, r1
 8018bac:	4650      	mov	r0, sl
 8018bae:	4659      	mov	r1, fp
 8018bb0:	f7e7 fb8c 	bl	80002cc <__adddf3>
 8018bb4:	4632      	mov	r2, r6
 8018bb6:	464b      	mov	r3, r9
 8018bb8:	f7e7 fb88 	bl	80002cc <__adddf3>
 8018bbc:	4602      	mov	r2, r0
 8018bbe:	460b      	mov	r3, r1
 8018bc0:	f7e7 fb84 	bl	80002cc <__adddf3>
 8018bc4:	e5fe      	b.n	80187c4 <__ieee754_acos+0x44>
 8018bc6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8018c28 <__ieee754_acos+0x4a8>
 8018bca:	e5ed      	b.n	80187a8 <__ieee754_acos+0x28>
 8018bcc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8018c30 <__ieee754_acos+0x4b0>
 8018bd0:	e5ea      	b.n	80187a8 <__ieee754_acos+0x28>
 8018bd2:	bf00      	nop
 8018bd4:	f3af 8000 	nop.w
 8018bd8:	0dfdf709 	.word	0x0dfdf709
 8018bdc:	3f023de1 	.word	0x3f023de1
 8018be0:	7501b288 	.word	0x7501b288
 8018be4:	3f49efe0 	.word	0x3f49efe0
 8018be8:	b5688f3b 	.word	0xb5688f3b
 8018bec:	3fa48228 	.word	0x3fa48228
 8018bf0:	0e884455 	.word	0x0e884455
 8018bf4:	3fc9c155 	.word	0x3fc9c155
 8018bf8:	03eb6f7d 	.word	0x03eb6f7d
 8018bfc:	3fd4d612 	.word	0x3fd4d612
 8018c00:	55555555 	.word	0x55555555
 8018c04:	3fc55555 	.word	0x3fc55555
 8018c08:	b12e9282 	.word	0xb12e9282
 8018c0c:	3fb3b8c5 	.word	0x3fb3b8c5
 8018c10:	1b8d0159 	.word	0x1b8d0159
 8018c14:	3fe6066c 	.word	0x3fe6066c
 8018c18:	9c598ac8 	.word	0x9c598ac8
 8018c1c:	40002ae5 	.word	0x40002ae5
 8018c20:	1c8a2d4b 	.word	0x1c8a2d4b
 8018c24:	40033a27 	.word	0x40033a27
	...
 8018c30:	54442d18 	.word	0x54442d18
 8018c34:	3ff921fb 	.word	0x3ff921fb
 8018c38:	3ff00000 	.word	0x3ff00000
 8018c3c:	3fe00000 	.word	0x3fe00000

08018c40 <__ieee754_pow>:
 8018c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c44:	ed2d 8b06 	vpush	{d8-d10}
 8018c48:	b089      	sub	sp, #36	; 0x24
 8018c4a:	ed8d 1b00 	vstr	d1, [sp]
 8018c4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8018c52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8018c56:	ea58 0102 	orrs.w	r1, r8, r2
 8018c5a:	ec57 6b10 	vmov	r6, r7, d0
 8018c5e:	d115      	bne.n	8018c8c <__ieee754_pow+0x4c>
 8018c60:	19b3      	adds	r3, r6, r6
 8018c62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8018c66:	4152      	adcs	r2, r2
 8018c68:	4299      	cmp	r1, r3
 8018c6a:	4b89      	ldr	r3, [pc, #548]	; (8018e90 <__ieee754_pow+0x250>)
 8018c6c:	4193      	sbcs	r3, r2
 8018c6e:	f080 84d2 	bcs.w	8019616 <__ieee754_pow+0x9d6>
 8018c72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018c76:	4630      	mov	r0, r6
 8018c78:	4639      	mov	r1, r7
 8018c7a:	f7e7 fb27 	bl	80002cc <__adddf3>
 8018c7e:	ec41 0b10 	vmov	d0, r0, r1
 8018c82:	b009      	add	sp, #36	; 0x24
 8018c84:	ecbd 8b06 	vpop	{d8-d10}
 8018c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c8c:	4b81      	ldr	r3, [pc, #516]	; (8018e94 <__ieee754_pow+0x254>)
 8018c8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8018c92:	429c      	cmp	r4, r3
 8018c94:	ee10 aa10 	vmov	sl, s0
 8018c98:	463d      	mov	r5, r7
 8018c9a:	dc06      	bgt.n	8018caa <__ieee754_pow+0x6a>
 8018c9c:	d101      	bne.n	8018ca2 <__ieee754_pow+0x62>
 8018c9e:	2e00      	cmp	r6, #0
 8018ca0:	d1e7      	bne.n	8018c72 <__ieee754_pow+0x32>
 8018ca2:	4598      	cmp	r8, r3
 8018ca4:	dc01      	bgt.n	8018caa <__ieee754_pow+0x6a>
 8018ca6:	d10f      	bne.n	8018cc8 <__ieee754_pow+0x88>
 8018ca8:	b172      	cbz	r2, 8018cc8 <__ieee754_pow+0x88>
 8018caa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8018cae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8018cb2:	ea55 050a 	orrs.w	r5, r5, sl
 8018cb6:	d1dc      	bne.n	8018c72 <__ieee754_pow+0x32>
 8018cb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018cbc:	18db      	adds	r3, r3, r3
 8018cbe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8018cc2:	4152      	adcs	r2, r2
 8018cc4:	429d      	cmp	r5, r3
 8018cc6:	e7d0      	b.n	8018c6a <__ieee754_pow+0x2a>
 8018cc8:	2d00      	cmp	r5, #0
 8018cca:	da3b      	bge.n	8018d44 <__ieee754_pow+0x104>
 8018ccc:	4b72      	ldr	r3, [pc, #456]	; (8018e98 <__ieee754_pow+0x258>)
 8018cce:	4598      	cmp	r8, r3
 8018cd0:	dc51      	bgt.n	8018d76 <__ieee754_pow+0x136>
 8018cd2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8018cd6:	4598      	cmp	r8, r3
 8018cd8:	f340 84ac 	ble.w	8019634 <__ieee754_pow+0x9f4>
 8018cdc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018ce0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018ce4:	2b14      	cmp	r3, #20
 8018ce6:	dd0f      	ble.n	8018d08 <__ieee754_pow+0xc8>
 8018ce8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018cec:	fa22 f103 	lsr.w	r1, r2, r3
 8018cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8018cf4:	4293      	cmp	r3, r2
 8018cf6:	f040 849d 	bne.w	8019634 <__ieee754_pow+0x9f4>
 8018cfa:	f001 0101 	and.w	r1, r1, #1
 8018cfe:	f1c1 0302 	rsb	r3, r1, #2
 8018d02:	9304      	str	r3, [sp, #16]
 8018d04:	b182      	cbz	r2, 8018d28 <__ieee754_pow+0xe8>
 8018d06:	e05f      	b.n	8018dc8 <__ieee754_pow+0x188>
 8018d08:	2a00      	cmp	r2, #0
 8018d0a:	d15b      	bne.n	8018dc4 <__ieee754_pow+0x184>
 8018d0c:	f1c3 0314 	rsb	r3, r3, #20
 8018d10:	fa48 f103 	asr.w	r1, r8, r3
 8018d14:	fa01 f303 	lsl.w	r3, r1, r3
 8018d18:	4543      	cmp	r3, r8
 8018d1a:	f040 8488 	bne.w	801962e <__ieee754_pow+0x9ee>
 8018d1e:	f001 0101 	and.w	r1, r1, #1
 8018d22:	f1c1 0302 	rsb	r3, r1, #2
 8018d26:	9304      	str	r3, [sp, #16]
 8018d28:	4b5c      	ldr	r3, [pc, #368]	; (8018e9c <__ieee754_pow+0x25c>)
 8018d2a:	4598      	cmp	r8, r3
 8018d2c:	d132      	bne.n	8018d94 <__ieee754_pow+0x154>
 8018d2e:	f1b9 0f00 	cmp.w	r9, #0
 8018d32:	f280 8478 	bge.w	8019626 <__ieee754_pow+0x9e6>
 8018d36:	4959      	ldr	r1, [pc, #356]	; (8018e9c <__ieee754_pow+0x25c>)
 8018d38:	4632      	mov	r2, r6
 8018d3a:	463b      	mov	r3, r7
 8018d3c:	2000      	movs	r0, #0
 8018d3e:	f7e7 fda5 	bl	800088c <__aeabi_ddiv>
 8018d42:	e79c      	b.n	8018c7e <__ieee754_pow+0x3e>
 8018d44:	2300      	movs	r3, #0
 8018d46:	9304      	str	r3, [sp, #16]
 8018d48:	2a00      	cmp	r2, #0
 8018d4a:	d13d      	bne.n	8018dc8 <__ieee754_pow+0x188>
 8018d4c:	4b51      	ldr	r3, [pc, #324]	; (8018e94 <__ieee754_pow+0x254>)
 8018d4e:	4598      	cmp	r8, r3
 8018d50:	d1ea      	bne.n	8018d28 <__ieee754_pow+0xe8>
 8018d52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018d56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018d5a:	ea53 030a 	orrs.w	r3, r3, sl
 8018d5e:	f000 845a 	beq.w	8019616 <__ieee754_pow+0x9d6>
 8018d62:	4b4f      	ldr	r3, [pc, #316]	; (8018ea0 <__ieee754_pow+0x260>)
 8018d64:	429c      	cmp	r4, r3
 8018d66:	dd08      	ble.n	8018d7a <__ieee754_pow+0x13a>
 8018d68:	f1b9 0f00 	cmp.w	r9, #0
 8018d6c:	f2c0 8457 	blt.w	801961e <__ieee754_pow+0x9de>
 8018d70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018d74:	e783      	b.n	8018c7e <__ieee754_pow+0x3e>
 8018d76:	2302      	movs	r3, #2
 8018d78:	e7e5      	b.n	8018d46 <__ieee754_pow+0x106>
 8018d7a:	f1b9 0f00 	cmp.w	r9, #0
 8018d7e:	f04f 0000 	mov.w	r0, #0
 8018d82:	f04f 0100 	mov.w	r1, #0
 8018d86:	f6bf af7a 	bge.w	8018c7e <__ieee754_pow+0x3e>
 8018d8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8018d8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018d92:	e774      	b.n	8018c7e <__ieee754_pow+0x3e>
 8018d94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8018d98:	d106      	bne.n	8018da8 <__ieee754_pow+0x168>
 8018d9a:	4632      	mov	r2, r6
 8018d9c:	463b      	mov	r3, r7
 8018d9e:	4630      	mov	r0, r6
 8018da0:	4639      	mov	r1, r7
 8018da2:	f7e7 fc49 	bl	8000638 <__aeabi_dmul>
 8018da6:	e76a      	b.n	8018c7e <__ieee754_pow+0x3e>
 8018da8:	4b3e      	ldr	r3, [pc, #248]	; (8018ea4 <__ieee754_pow+0x264>)
 8018daa:	4599      	cmp	r9, r3
 8018dac:	d10c      	bne.n	8018dc8 <__ieee754_pow+0x188>
 8018dae:	2d00      	cmp	r5, #0
 8018db0:	db0a      	blt.n	8018dc8 <__ieee754_pow+0x188>
 8018db2:	ec47 6b10 	vmov	d0, r6, r7
 8018db6:	b009      	add	sp, #36	; 0x24
 8018db8:	ecbd 8b06 	vpop	{d8-d10}
 8018dbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dc0:	f000 be7a 	b.w	8019ab8 <__ieee754_sqrt>
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	9304      	str	r3, [sp, #16]
 8018dc8:	ec47 6b10 	vmov	d0, r6, r7
 8018dcc:	f001 fe3a 	bl	801aa44 <fabs>
 8018dd0:	ec51 0b10 	vmov	r0, r1, d0
 8018dd4:	f1ba 0f00 	cmp.w	sl, #0
 8018dd8:	d129      	bne.n	8018e2e <__ieee754_pow+0x1ee>
 8018dda:	b124      	cbz	r4, 8018de6 <__ieee754_pow+0x1a6>
 8018ddc:	4b2f      	ldr	r3, [pc, #188]	; (8018e9c <__ieee754_pow+0x25c>)
 8018dde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8018de2:	429a      	cmp	r2, r3
 8018de4:	d123      	bne.n	8018e2e <__ieee754_pow+0x1ee>
 8018de6:	f1b9 0f00 	cmp.w	r9, #0
 8018dea:	da05      	bge.n	8018df8 <__ieee754_pow+0x1b8>
 8018dec:	4602      	mov	r2, r0
 8018dee:	460b      	mov	r3, r1
 8018df0:	2000      	movs	r0, #0
 8018df2:	492a      	ldr	r1, [pc, #168]	; (8018e9c <__ieee754_pow+0x25c>)
 8018df4:	f7e7 fd4a 	bl	800088c <__aeabi_ddiv>
 8018df8:	2d00      	cmp	r5, #0
 8018dfa:	f6bf af40 	bge.w	8018c7e <__ieee754_pow+0x3e>
 8018dfe:	9b04      	ldr	r3, [sp, #16]
 8018e00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018e04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018e08:	4323      	orrs	r3, r4
 8018e0a:	d108      	bne.n	8018e1e <__ieee754_pow+0x1de>
 8018e0c:	4602      	mov	r2, r0
 8018e0e:	460b      	mov	r3, r1
 8018e10:	4610      	mov	r0, r2
 8018e12:	4619      	mov	r1, r3
 8018e14:	f7e7 fa58 	bl	80002c8 <__aeabi_dsub>
 8018e18:	4602      	mov	r2, r0
 8018e1a:	460b      	mov	r3, r1
 8018e1c:	e78f      	b.n	8018d3e <__ieee754_pow+0xfe>
 8018e1e:	9b04      	ldr	r3, [sp, #16]
 8018e20:	2b01      	cmp	r3, #1
 8018e22:	f47f af2c 	bne.w	8018c7e <__ieee754_pow+0x3e>
 8018e26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018e2a:	4619      	mov	r1, r3
 8018e2c:	e727      	b.n	8018c7e <__ieee754_pow+0x3e>
 8018e2e:	0feb      	lsrs	r3, r5, #31
 8018e30:	3b01      	subs	r3, #1
 8018e32:	9306      	str	r3, [sp, #24]
 8018e34:	9a06      	ldr	r2, [sp, #24]
 8018e36:	9b04      	ldr	r3, [sp, #16]
 8018e38:	4313      	orrs	r3, r2
 8018e3a:	d102      	bne.n	8018e42 <__ieee754_pow+0x202>
 8018e3c:	4632      	mov	r2, r6
 8018e3e:	463b      	mov	r3, r7
 8018e40:	e7e6      	b.n	8018e10 <__ieee754_pow+0x1d0>
 8018e42:	4b19      	ldr	r3, [pc, #100]	; (8018ea8 <__ieee754_pow+0x268>)
 8018e44:	4598      	cmp	r8, r3
 8018e46:	f340 80fb 	ble.w	8019040 <__ieee754_pow+0x400>
 8018e4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018e4e:	4598      	cmp	r8, r3
 8018e50:	4b13      	ldr	r3, [pc, #76]	; (8018ea0 <__ieee754_pow+0x260>)
 8018e52:	dd0c      	ble.n	8018e6e <__ieee754_pow+0x22e>
 8018e54:	429c      	cmp	r4, r3
 8018e56:	dc0f      	bgt.n	8018e78 <__ieee754_pow+0x238>
 8018e58:	f1b9 0f00 	cmp.w	r9, #0
 8018e5c:	da0f      	bge.n	8018e7e <__ieee754_pow+0x23e>
 8018e5e:	2000      	movs	r0, #0
 8018e60:	b009      	add	sp, #36	; 0x24
 8018e62:	ecbd 8b06 	vpop	{d8-d10}
 8018e66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e6a:	f001 bde2 	b.w	801aa32 <__math_oflow>
 8018e6e:	429c      	cmp	r4, r3
 8018e70:	dbf2      	blt.n	8018e58 <__ieee754_pow+0x218>
 8018e72:	4b0a      	ldr	r3, [pc, #40]	; (8018e9c <__ieee754_pow+0x25c>)
 8018e74:	429c      	cmp	r4, r3
 8018e76:	dd19      	ble.n	8018eac <__ieee754_pow+0x26c>
 8018e78:	f1b9 0f00 	cmp.w	r9, #0
 8018e7c:	dcef      	bgt.n	8018e5e <__ieee754_pow+0x21e>
 8018e7e:	2000      	movs	r0, #0
 8018e80:	b009      	add	sp, #36	; 0x24
 8018e82:	ecbd 8b06 	vpop	{d8-d10}
 8018e86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e8a:	f001 bdc9 	b.w	801aa20 <__math_uflow>
 8018e8e:	bf00      	nop
 8018e90:	fff00000 	.word	0xfff00000
 8018e94:	7ff00000 	.word	0x7ff00000
 8018e98:	433fffff 	.word	0x433fffff
 8018e9c:	3ff00000 	.word	0x3ff00000
 8018ea0:	3fefffff 	.word	0x3fefffff
 8018ea4:	3fe00000 	.word	0x3fe00000
 8018ea8:	41e00000 	.word	0x41e00000
 8018eac:	4b60      	ldr	r3, [pc, #384]	; (8019030 <__ieee754_pow+0x3f0>)
 8018eae:	2200      	movs	r2, #0
 8018eb0:	f7e7 fa0a 	bl	80002c8 <__aeabi_dsub>
 8018eb4:	a354      	add	r3, pc, #336	; (adr r3, 8019008 <__ieee754_pow+0x3c8>)
 8018eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eba:	4604      	mov	r4, r0
 8018ebc:	460d      	mov	r5, r1
 8018ebe:	f7e7 fbbb 	bl	8000638 <__aeabi_dmul>
 8018ec2:	a353      	add	r3, pc, #332	; (adr r3, 8019010 <__ieee754_pow+0x3d0>)
 8018ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ec8:	4606      	mov	r6, r0
 8018eca:	460f      	mov	r7, r1
 8018ecc:	4620      	mov	r0, r4
 8018ece:	4629      	mov	r1, r5
 8018ed0:	f7e7 fbb2 	bl	8000638 <__aeabi_dmul>
 8018ed4:	4b57      	ldr	r3, [pc, #348]	; (8019034 <__ieee754_pow+0x3f4>)
 8018ed6:	4682      	mov	sl, r0
 8018ed8:	468b      	mov	fp, r1
 8018eda:	2200      	movs	r2, #0
 8018edc:	4620      	mov	r0, r4
 8018ede:	4629      	mov	r1, r5
 8018ee0:	f7e7 fbaa 	bl	8000638 <__aeabi_dmul>
 8018ee4:	4602      	mov	r2, r0
 8018ee6:	460b      	mov	r3, r1
 8018ee8:	a14b      	add	r1, pc, #300	; (adr r1, 8019018 <__ieee754_pow+0x3d8>)
 8018eea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018eee:	f7e7 f9eb 	bl	80002c8 <__aeabi_dsub>
 8018ef2:	4622      	mov	r2, r4
 8018ef4:	462b      	mov	r3, r5
 8018ef6:	f7e7 fb9f 	bl	8000638 <__aeabi_dmul>
 8018efa:	4602      	mov	r2, r0
 8018efc:	460b      	mov	r3, r1
 8018efe:	2000      	movs	r0, #0
 8018f00:	494d      	ldr	r1, [pc, #308]	; (8019038 <__ieee754_pow+0x3f8>)
 8018f02:	f7e7 f9e1 	bl	80002c8 <__aeabi_dsub>
 8018f06:	4622      	mov	r2, r4
 8018f08:	4680      	mov	r8, r0
 8018f0a:	4689      	mov	r9, r1
 8018f0c:	462b      	mov	r3, r5
 8018f0e:	4620      	mov	r0, r4
 8018f10:	4629      	mov	r1, r5
 8018f12:	f7e7 fb91 	bl	8000638 <__aeabi_dmul>
 8018f16:	4602      	mov	r2, r0
 8018f18:	460b      	mov	r3, r1
 8018f1a:	4640      	mov	r0, r8
 8018f1c:	4649      	mov	r1, r9
 8018f1e:	f7e7 fb8b 	bl	8000638 <__aeabi_dmul>
 8018f22:	a33f      	add	r3, pc, #252	; (adr r3, 8019020 <__ieee754_pow+0x3e0>)
 8018f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f28:	f7e7 fb86 	bl	8000638 <__aeabi_dmul>
 8018f2c:	4602      	mov	r2, r0
 8018f2e:	460b      	mov	r3, r1
 8018f30:	4650      	mov	r0, sl
 8018f32:	4659      	mov	r1, fp
 8018f34:	f7e7 f9c8 	bl	80002c8 <__aeabi_dsub>
 8018f38:	4602      	mov	r2, r0
 8018f3a:	460b      	mov	r3, r1
 8018f3c:	4680      	mov	r8, r0
 8018f3e:	4689      	mov	r9, r1
 8018f40:	4630      	mov	r0, r6
 8018f42:	4639      	mov	r1, r7
 8018f44:	f7e7 f9c2 	bl	80002cc <__adddf3>
 8018f48:	2000      	movs	r0, #0
 8018f4a:	4632      	mov	r2, r6
 8018f4c:	463b      	mov	r3, r7
 8018f4e:	4604      	mov	r4, r0
 8018f50:	460d      	mov	r5, r1
 8018f52:	f7e7 f9b9 	bl	80002c8 <__aeabi_dsub>
 8018f56:	4602      	mov	r2, r0
 8018f58:	460b      	mov	r3, r1
 8018f5a:	4640      	mov	r0, r8
 8018f5c:	4649      	mov	r1, r9
 8018f5e:	f7e7 f9b3 	bl	80002c8 <__aeabi_dsub>
 8018f62:	9b04      	ldr	r3, [sp, #16]
 8018f64:	9a06      	ldr	r2, [sp, #24]
 8018f66:	3b01      	subs	r3, #1
 8018f68:	4313      	orrs	r3, r2
 8018f6a:	4682      	mov	sl, r0
 8018f6c:	468b      	mov	fp, r1
 8018f6e:	f040 81e7 	bne.w	8019340 <__ieee754_pow+0x700>
 8018f72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8019028 <__ieee754_pow+0x3e8>
 8018f76:	eeb0 8a47 	vmov.f32	s16, s14
 8018f7a:	eef0 8a67 	vmov.f32	s17, s15
 8018f7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018f82:	2600      	movs	r6, #0
 8018f84:	4632      	mov	r2, r6
 8018f86:	463b      	mov	r3, r7
 8018f88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018f8c:	f7e7 f99c 	bl	80002c8 <__aeabi_dsub>
 8018f90:	4622      	mov	r2, r4
 8018f92:	462b      	mov	r3, r5
 8018f94:	f7e7 fb50 	bl	8000638 <__aeabi_dmul>
 8018f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018f9c:	4680      	mov	r8, r0
 8018f9e:	4689      	mov	r9, r1
 8018fa0:	4650      	mov	r0, sl
 8018fa2:	4659      	mov	r1, fp
 8018fa4:	f7e7 fb48 	bl	8000638 <__aeabi_dmul>
 8018fa8:	4602      	mov	r2, r0
 8018faa:	460b      	mov	r3, r1
 8018fac:	4640      	mov	r0, r8
 8018fae:	4649      	mov	r1, r9
 8018fb0:	f7e7 f98c 	bl	80002cc <__adddf3>
 8018fb4:	4632      	mov	r2, r6
 8018fb6:	463b      	mov	r3, r7
 8018fb8:	4680      	mov	r8, r0
 8018fba:	4689      	mov	r9, r1
 8018fbc:	4620      	mov	r0, r4
 8018fbe:	4629      	mov	r1, r5
 8018fc0:	f7e7 fb3a 	bl	8000638 <__aeabi_dmul>
 8018fc4:	460b      	mov	r3, r1
 8018fc6:	4604      	mov	r4, r0
 8018fc8:	460d      	mov	r5, r1
 8018fca:	4602      	mov	r2, r0
 8018fcc:	4649      	mov	r1, r9
 8018fce:	4640      	mov	r0, r8
 8018fd0:	f7e7 f97c 	bl	80002cc <__adddf3>
 8018fd4:	4b19      	ldr	r3, [pc, #100]	; (801903c <__ieee754_pow+0x3fc>)
 8018fd6:	4299      	cmp	r1, r3
 8018fd8:	ec45 4b19 	vmov	d9, r4, r5
 8018fdc:	4606      	mov	r6, r0
 8018fde:	460f      	mov	r7, r1
 8018fe0:	468b      	mov	fp, r1
 8018fe2:	f340 82f1 	ble.w	80195c8 <__ieee754_pow+0x988>
 8018fe6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018fea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018fee:	4303      	orrs	r3, r0
 8018ff0:	f000 81e4 	beq.w	80193bc <__ieee754_pow+0x77c>
 8018ff4:	ec51 0b18 	vmov	r0, r1, d8
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	2300      	movs	r3, #0
 8018ffc:	f7e7 fd8e 	bl	8000b1c <__aeabi_dcmplt>
 8019000:	3800      	subs	r0, #0
 8019002:	bf18      	it	ne
 8019004:	2001      	movne	r0, #1
 8019006:	e72b      	b.n	8018e60 <__ieee754_pow+0x220>
 8019008:	60000000 	.word	0x60000000
 801900c:	3ff71547 	.word	0x3ff71547
 8019010:	f85ddf44 	.word	0xf85ddf44
 8019014:	3e54ae0b 	.word	0x3e54ae0b
 8019018:	55555555 	.word	0x55555555
 801901c:	3fd55555 	.word	0x3fd55555
 8019020:	652b82fe 	.word	0x652b82fe
 8019024:	3ff71547 	.word	0x3ff71547
 8019028:	00000000 	.word	0x00000000
 801902c:	bff00000 	.word	0xbff00000
 8019030:	3ff00000 	.word	0x3ff00000
 8019034:	3fd00000 	.word	0x3fd00000
 8019038:	3fe00000 	.word	0x3fe00000
 801903c:	408fffff 	.word	0x408fffff
 8019040:	4bd5      	ldr	r3, [pc, #852]	; (8019398 <__ieee754_pow+0x758>)
 8019042:	402b      	ands	r3, r5
 8019044:	2200      	movs	r2, #0
 8019046:	b92b      	cbnz	r3, 8019054 <__ieee754_pow+0x414>
 8019048:	4bd4      	ldr	r3, [pc, #848]	; (801939c <__ieee754_pow+0x75c>)
 801904a:	f7e7 faf5 	bl	8000638 <__aeabi_dmul>
 801904e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019052:	460c      	mov	r4, r1
 8019054:	1523      	asrs	r3, r4, #20
 8019056:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801905a:	4413      	add	r3, r2
 801905c:	9305      	str	r3, [sp, #20]
 801905e:	4bd0      	ldr	r3, [pc, #832]	; (80193a0 <__ieee754_pow+0x760>)
 8019060:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019064:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019068:	429c      	cmp	r4, r3
 801906a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801906e:	dd08      	ble.n	8019082 <__ieee754_pow+0x442>
 8019070:	4bcc      	ldr	r3, [pc, #816]	; (80193a4 <__ieee754_pow+0x764>)
 8019072:	429c      	cmp	r4, r3
 8019074:	f340 8162 	ble.w	801933c <__ieee754_pow+0x6fc>
 8019078:	9b05      	ldr	r3, [sp, #20]
 801907a:	3301      	adds	r3, #1
 801907c:	9305      	str	r3, [sp, #20]
 801907e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019082:	2400      	movs	r4, #0
 8019084:	00e3      	lsls	r3, r4, #3
 8019086:	9307      	str	r3, [sp, #28]
 8019088:	4bc7      	ldr	r3, [pc, #796]	; (80193a8 <__ieee754_pow+0x768>)
 801908a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801908e:	ed93 7b00 	vldr	d7, [r3]
 8019092:	4629      	mov	r1, r5
 8019094:	ec53 2b17 	vmov	r2, r3, d7
 8019098:	eeb0 9a47 	vmov.f32	s18, s14
 801909c:	eef0 9a67 	vmov.f32	s19, s15
 80190a0:	4682      	mov	sl, r0
 80190a2:	f7e7 f911 	bl	80002c8 <__aeabi_dsub>
 80190a6:	4652      	mov	r2, sl
 80190a8:	4606      	mov	r6, r0
 80190aa:	460f      	mov	r7, r1
 80190ac:	462b      	mov	r3, r5
 80190ae:	ec51 0b19 	vmov	r0, r1, d9
 80190b2:	f7e7 f90b 	bl	80002cc <__adddf3>
 80190b6:	4602      	mov	r2, r0
 80190b8:	460b      	mov	r3, r1
 80190ba:	2000      	movs	r0, #0
 80190bc:	49bb      	ldr	r1, [pc, #748]	; (80193ac <__ieee754_pow+0x76c>)
 80190be:	f7e7 fbe5 	bl	800088c <__aeabi_ddiv>
 80190c2:	ec41 0b1a 	vmov	d10, r0, r1
 80190c6:	4602      	mov	r2, r0
 80190c8:	460b      	mov	r3, r1
 80190ca:	4630      	mov	r0, r6
 80190cc:	4639      	mov	r1, r7
 80190ce:	f7e7 fab3 	bl	8000638 <__aeabi_dmul>
 80190d2:	2300      	movs	r3, #0
 80190d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80190d8:	9302      	str	r3, [sp, #8]
 80190da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80190de:	46ab      	mov	fp, r5
 80190e0:	106d      	asrs	r5, r5, #1
 80190e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80190e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80190ea:	ec41 0b18 	vmov	d8, r0, r1
 80190ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80190f2:	2200      	movs	r2, #0
 80190f4:	4640      	mov	r0, r8
 80190f6:	4649      	mov	r1, r9
 80190f8:	4614      	mov	r4, r2
 80190fa:	461d      	mov	r5, r3
 80190fc:	f7e7 fa9c 	bl	8000638 <__aeabi_dmul>
 8019100:	4602      	mov	r2, r0
 8019102:	460b      	mov	r3, r1
 8019104:	4630      	mov	r0, r6
 8019106:	4639      	mov	r1, r7
 8019108:	f7e7 f8de 	bl	80002c8 <__aeabi_dsub>
 801910c:	ec53 2b19 	vmov	r2, r3, d9
 8019110:	4606      	mov	r6, r0
 8019112:	460f      	mov	r7, r1
 8019114:	4620      	mov	r0, r4
 8019116:	4629      	mov	r1, r5
 8019118:	f7e7 f8d6 	bl	80002c8 <__aeabi_dsub>
 801911c:	4602      	mov	r2, r0
 801911e:	460b      	mov	r3, r1
 8019120:	4650      	mov	r0, sl
 8019122:	4659      	mov	r1, fp
 8019124:	f7e7 f8d0 	bl	80002c8 <__aeabi_dsub>
 8019128:	4642      	mov	r2, r8
 801912a:	464b      	mov	r3, r9
 801912c:	f7e7 fa84 	bl	8000638 <__aeabi_dmul>
 8019130:	4602      	mov	r2, r0
 8019132:	460b      	mov	r3, r1
 8019134:	4630      	mov	r0, r6
 8019136:	4639      	mov	r1, r7
 8019138:	f7e7 f8c6 	bl	80002c8 <__aeabi_dsub>
 801913c:	ec53 2b1a 	vmov	r2, r3, d10
 8019140:	f7e7 fa7a 	bl	8000638 <__aeabi_dmul>
 8019144:	ec53 2b18 	vmov	r2, r3, d8
 8019148:	ec41 0b19 	vmov	d9, r0, r1
 801914c:	ec51 0b18 	vmov	r0, r1, d8
 8019150:	f7e7 fa72 	bl	8000638 <__aeabi_dmul>
 8019154:	a37c      	add	r3, pc, #496	; (adr r3, 8019348 <__ieee754_pow+0x708>)
 8019156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801915a:	4604      	mov	r4, r0
 801915c:	460d      	mov	r5, r1
 801915e:	f7e7 fa6b 	bl	8000638 <__aeabi_dmul>
 8019162:	a37b      	add	r3, pc, #492	; (adr r3, 8019350 <__ieee754_pow+0x710>)
 8019164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019168:	f7e7 f8b0 	bl	80002cc <__adddf3>
 801916c:	4622      	mov	r2, r4
 801916e:	462b      	mov	r3, r5
 8019170:	f7e7 fa62 	bl	8000638 <__aeabi_dmul>
 8019174:	a378      	add	r3, pc, #480	; (adr r3, 8019358 <__ieee754_pow+0x718>)
 8019176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801917a:	f7e7 f8a7 	bl	80002cc <__adddf3>
 801917e:	4622      	mov	r2, r4
 8019180:	462b      	mov	r3, r5
 8019182:	f7e7 fa59 	bl	8000638 <__aeabi_dmul>
 8019186:	a376      	add	r3, pc, #472	; (adr r3, 8019360 <__ieee754_pow+0x720>)
 8019188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801918c:	f7e7 f89e 	bl	80002cc <__adddf3>
 8019190:	4622      	mov	r2, r4
 8019192:	462b      	mov	r3, r5
 8019194:	f7e7 fa50 	bl	8000638 <__aeabi_dmul>
 8019198:	a373      	add	r3, pc, #460	; (adr r3, 8019368 <__ieee754_pow+0x728>)
 801919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801919e:	f7e7 f895 	bl	80002cc <__adddf3>
 80191a2:	4622      	mov	r2, r4
 80191a4:	462b      	mov	r3, r5
 80191a6:	f7e7 fa47 	bl	8000638 <__aeabi_dmul>
 80191aa:	a371      	add	r3, pc, #452	; (adr r3, 8019370 <__ieee754_pow+0x730>)
 80191ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191b0:	f7e7 f88c 	bl	80002cc <__adddf3>
 80191b4:	4622      	mov	r2, r4
 80191b6:	4606      	mov	r6, r0
 80191b8:	460f      	mov	r7, r1
 80191ba:	462b      	mov	r3, r5
 80191bc:	4620      	mov	r0, r4
 80191be:	4629      	mov	r1, r5
 80191c0:	f7e7 fa3a 	bl	8000638 <__aeabi_dmul>
 80191c4:	4602      	mov	r2, r0
 80191c6:	460b      	mov	r3, r1
 80191c8:	4630      	mov	r0, r6
 80191ca:	4639      	mov	r1, r7
 80191cc:	f7e7 fa34 	bl	8000638 <__aeabi_dmul>
 80191d0:	4642      	mov	r2, r8
 80191d2:	4604      	mov	r4, r0
 80191d4:	460d      	mov	r5, r1
 80191d6:	464b      	mov	r3, r9
 80191d8:	ec51 0b18 	vmov	r0, r1, d8
 80191dc:	f7e7 f876 	bl	80002cc <__adddf3>
 80191e0:	ec53 2b19 	vmov	r2, r3, d9
 80191e4:	f7e7 fa28 	bl	8000638 <__aeabi_dmul>
 80191e8:	4622      	mov	r2, r4
 80191ea:	462b      	mov	r3, r5
 80191ec:	f7e7 f86e 	bl	80002cc <__adddf3>
 80191f0:	4642      	mov	r2, r8
 80191f2:	4682      	mov	sl, r0
 80191f4:	468b      	mov	fp, r1
 80191f6:	464b      	mov	r3, r9
 80191f8:	4640      	mov	r0, r8
 80191fa:	4649      	mov	r1, r9
 80191fc:	f7e7 fa1c 	bl	8000638 <__aeabi_dmul>
 8019200:	4b6b      	ldr	r3, [pc, #428]	; (80193b0 <__ieee754_pow+0x770>)
 8019202:	2200      	movs	r2, #0
 8019204:	4606      	mov	r6, r0
 8019206:	460f      	mov	r7, r1
 8019208:	f7e7 f860 	bl	80002cc <__adddf3>
 801920c:	4652      	mov	r2, sl
 801920e:	465b      	mov	r3, fp
 8019210:	f7e7 f85c 	bl	80002cc <__adddf3>
 8019214:	2000      	movs	r0, #0
 8019216:	4604      	mov	r4, r0
 8019218:	460d      	mov	r5, r1
 801921a:	4602      	mov	r2, r0
 801921c:	460b      	mov	r3, r1
 801921e:	4640      	mov	r0, r8
 8019220:	4649      	mov	r1, r9
 8019222:	f7e7 fa09 	bl	8000638 <__aeabi_dmul>
 8019226:	4b62      	ldr	r3, [pc, #392]	; (80193b0 <__ieee754_pow+0x770>)
 8019228:	4680      	mov	r8, r0
 801922a:	4689      	mov	r9, r1
 801922c:	2200      	movs	r2, #0
 801922e:	4620      	mov	r0, r4
 8019230:	4629      	mov	r1, r5
 8019232:	f7e7 f849 	bl	80002c8 <__aeabi_dsub>
 8019236:	4632      	mov	r2, r6
 8019238:	463b      	mov	r3, r7
 801923a:	f7e7 f845 	bl	80002c8 <__aeabi_dsub>
 801923e:	4602      	mov	r2, r0
 8019240:	460b      	mov	r3, r1
 8019242:	4650      	mov	r0, sl
 8019244:	4659      	mov	r1, fp
 8019246:	f7e7 f83f 	bl	80002c8 <__aeabi_dsub>
 801924a:	ec53 2b18 	vmov	r2, r3, d8
 801924e:	f7e7 f9f3 	bl	8000638 <__aeabi_dmul>
 8019252:	4622      	mov	r2, r4
 8019254:	4606      	mov	r6, r0
 8019256:	460f      	mov	r7, r1
 8019258:	462b      	mov	r3, r5
 801925a:	ec51 0b19 	vmov	r0, r1, d9
 801925e:	f7e7 f9eb 	bl	8000638 <__aeabi_dmul>
 8019262:	4602      	mov	r2, r0
 8019264:	460b      	mov	r3, r1
 8019266:	4630      	mov	r0, r6
 8019268:	4639      	mov	r1, r7
 801926a:	f7e7 f82f 	bl	80002cc <__adddf3>
 801926e:	4606      	mov	r6, r0
 8019270:	460f      	mov	r7, r1
 8019272:	4602      	mov	r2, r0
 8019274:	460b      	mov	r3, r1
 8019276:	4640      	mov	r0, r8
 8019278:	4649      	mov	r1, r9
 801927a:	f7e7 f827 	bl	80002cc <__adddf3>
 801927e:	a33e      	add	r3, pc, #248	; (adr r3, 8019378 <__ieee754_pow+0x738>)
 8019280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019284:	2000      	movs	r0, #0
 8019286:	4604      	mov	r4, r0
 8019288:	460d      	mov	r5, r1
 801928a:	f7e7 f9d5 	bl	8000638 <__aeabi_dmul>
 801928e:	4642      	mov	r2, r8
 8019290:	ec41 0b18 	vmov	d8, r0, r1
 8019294:	464b      	mov	r3, r9
 8019296:	4620      	mov	r0, r4
 8019298:	4629      	mov	r1, r5
 801929a:	f7e7 f815 	bl	80002c8 <__aeabi_dsub>
 801929e:	4602      	mov	r2, r0
 80192a0:	460b      	mov	r3, r1
 80192a2:	4630      	mov	r0, r6
 80192a4:	4639      	mov	r1, r7
 80192a6:	f7e7 f80f 	bl	80002c8 <__aeabi_dsub>
 80192aa:	a335      	add	r3, pc, #212	; (adr r3, 8019380 <__ieee754_pow+0x740>)
 80192ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192b0:	f7e7 f9c2 	bl	8000638 <__aeabi_dmul>
 80192b4:	a334      	add	r3, pc, #208	; (adr r3, 8019388 <__ieee754_pow+0x748>)
 80192b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ba:	4606      	mov	r6, r0
 80192bc:	460f      	mov	r7, r1
 80192be:	4620      	mov	r0, r4
 80192c0:	4629      	mov	r1, r5
 80192c2:	f7e7 f9b9 	bl	8000638 <__aeabi_dmul>
 80192c6:	4602      	mov	r2, r0
 80192c8:	460b      	mov	r3, r1
 80192ca:	4630      	mov	r0, r6
 80192cc:	4639      	mov	r1, r7
 80192ce:	f7e6 fffd 	bl	80002cc <__adddf3>
 80192d2:	9a07      	ldr	r2, [sp, #28]
 80192d4:	4b37      	ldr	r3, [pc, #220]	; (80193b4 <__ieee754_pow+0x774>)
 80192d6:	4413      	add	r3, r2
 80192d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192dc:	f7e6 fff6 	bl	80002cc <__adddf3>
 80192e0:	4682      	mov	sl, r0
 80192e2:	9805      	ldr	r0, [sp, #20]
 80192e4:	468b      	mov	fp, r1
 80192e6:	f7e7 f93d 	bl	8000564 <__aeabi_i2d>
 80192ea:	9a07      	ldr	r2, [sp, #28]
 80192ec:	4b32      	ldr	r3, [pc, #200]	; (80193b8 <__ieee754_pow+0x778>)
 80192ee:	4413      	add	r3, r2
 80192f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80192f4:	4606      	mov	r6, r0
 80192f6:	460f      	mov	r7, r1
 80192f8:	4652      	mov	r2, sl
 80192fa:	465b      	mov	r3, fp
 80192fc:	ec51 0b18 	vmov	r0, r1, d8
 8019300:	f7e6 ffe4 	bl	80002cc <__adddf3>
 8019304:	4642      	mov	r2, r8
 8019306:	464b      	mov	r3, r9
 8019308:	f7e6 ffe0 	bl	80002cc <__adddf3>
 801930c:	4632      	mov	r2, r6
 801930e:	463b      	mov	r3, r7
 8019310:	f7e6 ffdc 	bl	80002cc <__adddf3>
 8019314:	2000      	movs	r0, #0
 8019316:	4632      	mov	r2, r6
 8019318:	463b      	mov	r3, r7
 801931a:	4604      	mov	r4, r0
 801931c:	460d      	mov	r5, r1
 801931e:	f7e6 ffd3 	bl	80002c8 <__aeabi_dsub>
 8019322:	4642      	mov	r2, r8
 8019324:	464b      	mov	r3, r9
 8019326:	f7e6 ffcf 	bl	80002c8 <__aeabi_dsub>
 801932a:	ec53 2b18 	vmov	r2, r3, d8
 801932e:	f7e6 ffcb 	bl	80002c8 <__aeabi_dsub>
 8019332:	4602      	mov	r2, r0
 8019334:	460b      	mov	r3, r1
 8019336:	4650      	mov	r0, sl
 8019338:	4659      	mov	r1, fp
 801933a:	e610      	b.n	8018f5e <__ieee754_pow+0x31e>
 801933c:	2401      	movs	r4, #1
 801933e:	e6a1      	b.n	8019084 <__ieee754_pow+0x444>
 8019340:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8019390 <__ieee754_pow+0x750>
 8019344:	e617      	b.n	8018f76 <__ieee754_pow+0x336>
 8019346:	bf00      	nop
 8019348:	4a454eef 	.word	0x4a454eef
 801934c:	3fca7e28 	.word	0x3fca7e28
 8019350:	93c9db65 	.word	0x93c9db65
 8019354:	3fcd864a 	.word	0x3fcd864a
 8019358:	a91d4101 	.word	0xa91d4101
 801935c:	3fd17460 	.word	0x3fd17460
 8019360:	518f264d 	.word	0x518f264d
 8019364:	3fd55555 	.word	0x3fd55555
 8019368:	db6fabff 	.word	0xdb6fabff
 801936c:	3fdb6db6 	.word	0x3fdb6db6
 8019370:	33333303 	.word	0x33333303
 8019374:	3fe33333 	.word	0x3fe33333
 8019378:	e0000000 	.word	0xe0000000
 801937c:	3feec709 	.word	0x3feec709
 8019380:	dc3a03fd 	.word	0xdc3a03fd
 8019384:	3feec709 	.word	0x3feec709
 8019388:	145b01f5 	.word	0x145b01f5
 801938c:	be3e2fe0 	.word	0xbe3e2fe0
 8019390:	00000000 	.word	0x00000000
 8019394:	3ff00000 	.word	0x3ff00000
 8019398:	7ff00000 	.word	0x7ff00000
 801939c:	43400000 	.word	0x43400000
 80193a0:	0003988e 	.word	0x0003988e
 80193a4:	000bb679 	.word	0x000bb679
 80193a8:	08049d48 	.word	0x08049d48
 80193ac:	3ff00000 	.word	0x3ff00000
 80193b0:	40080000 	.word	0x40080000
 80193b4:	08049d68 	.word	0x08049d68
 80193b8:	08049d58 	.word	0x08049d58
 80193bc:	a3b5      	add	r3, pc, #724	; (adr r3, 8019694 <__ieee754_pow+0xa54>)
 80193be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193c2:	4640      	mov	r0, r8
 80193c4:	4649      	mov	r1, r9
 80193c6:	f7e6 ff81 	bl	80002cc <__adddf3>
 80193ca:	4622      	mov	r2, r4
 80193cc:	ec41 0b1a 	vmov	d10, r0, r1
 80193d0:	462b      	mov	r3, r5
 80193d2:	4630      	mov	r0, r6
 80193d4:	4639      	mov	r1, r7
 80193d6:	f7e6 ff77 	bl	80002c8 <__aeabi_dsub>
 80193da:	4602      	mov	r2, r0
 80193dc:	460b      	mov	r3, r1
 80193de:	ec51 0b1a 	vmov	r0, r1, d10
 80193e2:	f7e7 fbb9 	bl	8000b58 <__aeabi_dcmpgt>
 80193e6:	2800      	cmp	r0, #0
 80193e8:	f47f ae04 	bne.w	8018ff4 <__ieee754_pow+0x3b4>
 80193ec:	4aa4      	ldr	r2, [pc, #656]	; (8019680 <__ieee754_pow+0xa40>)
 80193ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80193f2:	4293      	cmp	r3, r2
 80193f4:	f340 8108 	ble.w	8019608 <__ieee754_pow+0x9c8>
 80193f8:	151b      	asrs	r3, r3, #20
 80193fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80193fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019402:	fa4a f303 	asr.w	r3, sl, r3
 8019406:	445b      	add	r3, fp
 8019408:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801940c:	4e9d      	ldr	r6, [pc, #628]	; (8019684 <__ieee754_pow+0xa44>)
 801940e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019412:	4116      	asrs	r6, r2
 8019414:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019418:	2000      	movs	r0, #0
 801941a:	ea23 0106 	bic.w	r1, r3, r6
 801941e:	f1c2 0214 	rsb	r2, r2, #20
 8019422:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019426:	fa4a fa02 	asr.w	sl, sl, r2
 801942a:	f1bb 0f00 	cmp.w	fp, #0
 801942e:	4602      	mov	r2, r0
 8019430:	460b      	mov	r3, r1
 8019432:	4620      	mov	r0, r4
 8019434:	4629      	mov	r1, r5
 8019436:	bfb8      	it	lt
 8019438:	f1ca 0a00 	rsblt	sl, sl, #0
 801943c:	f7e6 ff44 	bl	80002c8 <__aeabi_dsub>
 8019440:	ec41 0b19 	vmov	d9, r0, r1
 8019444:	4642      	mov	r2, r8
 8019446:	464b      	mov	r3, r9
 8019448:	ec51 0b19 	vmov	r0, r1, d9
 801944c:	f7e6 ff3e 	bl	80002cc <__adddf3>
 8019450:	a37b      	add	r3, pc, #492	; (adr r3, 8019640 <__ieee754_pow+0xa00>)
 8019452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019456:	2000      	movs	r0, #0
 8019458:	4604      	mov	r4, r0
 801945a:	460d      	mov	r5, r1
 801945c:	f7e7 f8ec 	bl	8000638 <__aeabi_dmul>
 8019460:	ec53 2b19 	vmov	r2, r3, d9
 8019464:	4606      	mov	r6, r0
 8019466:	460f      	mov	r7, r1
 8019468:	4620      	mov	r0, r4
 801946a:	4629      	mov	r1, r5
 801946c:	f7e6 ff2c 	bl	80002c8 <__aeabi_dsub>
 8019470:	4602      	mov	r2, r0
 8019472:	460b      	mov	r3, r1
 8019474:	4640      	mov	r0, r8
 8019476:	4649      	mov	r1, r9
 8019478:	f7e6 ff26 	bl	80002c8 <__aeabi_dsub>
 801947c:	a372      	add	r3, pc, #456	; (adr r3, 8019648 <__ieee754_pow+0xa08>)
 801947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019482:	f7e7 f8d9 	bl	8000638 <__aeabi_dmul>
 8019486:	a372      	add	r3, pc, #456	; (adr r3, 8019650 <__ieee754_pow+0xa10>)
 8019488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801948c:	4680      	mov	r8, r0
 801948e:	4689      	mov	r9, r1
 8019490:	4620      	mov	r0, r4
 8019492:	4629      	mov	r1, r5
 8019494:	f7e7 f8d0 	bl	8000638 <__aeabi_dmul>
 8019498:	4602      	mov	r2, r0
 801949a:	460b      	mov	r3, r1
 801949c:	4640      	mov	r0, r8
 801949e:	4649      	mov	r1, r9
 80194a0:	f7e6 ff14 	bl	80002cc <__adddf3>
 80194a4:	4604      	mov	r4, r0
 80194a6:	460d      	mov	r5, r1
 80194a8:	4602      	mov	r2, r0
 80194aa:	460b      	mov	r3, r1
 80194ac:	4630      	mov	r0, r6
 80194ae:	4639      	mov	r1, r7
 80194b0:	f7e6 ff0c 	bl	80002cc <__adddf3>
 80194b4:	4632      	mov	r2, r6
 80194b6:	463b      	mov	r3, r7
 80194b8:	4680      	mov	r8, r0
 80194ba:	4689      	mov	r9, r1
 80194bc:	f7e6 ff04 	bl	80002c8 <__aeabi_dsub>
 80194c0:	4602      	mov	r2, r0
 80194c2:	460b      	mov	r3, r1
 80194c4:	4620      	mov	r0, r4
 80194c6:	4629      	mov	r1, r5
 80194c8:	f7e6 fefe 	bl	80002c8 <__aeabi_dsub>
 80194cc:	4642      	mov	r2, r8
 80194ce:	4606      	mov	r6, r0
 80194d0:	460f      	mov	r7, r1
 80194d2:	464b      	mov	r3, r9
 80194d4:	4640      	mov	r0, r8
 80194d6:	4649      	mov	r1, r9
 80194d8:	f7e7 f8ae 	bl	8000638 <__aeabi_dmul>
 80194dc:	a35e      	add	r3, pc, #376	; (adr r3, 8019658 <__ieee754_pow+0xa18>)
 80194de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194e2:	4604      	mov	r4, r0
 80194e4:	460d      	mov	r5, r1
 80194e6:	f7e7 f8a7 	bl	8000638 <__aeabi_dmul>
 80194ea:	a35d      	add	r3, pc, #372	; (adr r3, 8019660 <__ieee754_pow+0xa20>)
 80194ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194f0:	f7e6 feea 	bl	80002c8 <__aeabi_dsub>
 80194f4:	4622      	mov	r2, r4
 80194f6:	462b      	mov	r3, r5
 80194f8:	f7e7 f89e 	bl	8000638 <__aeabi_dmul>
 80194fc:	a35a      	add	r3, pc, #360	; (adr r3, 8019668 <__ieee754_pow+0xa28>)
 80194fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019502:	f7e6 fee3 	bl	80002cc <__adddf3>
 8019506:	4622      	mov	r2, r4
 8019508:	462b      	mov	r3, r5
 801950a:	f7e7 f895 	bl	8000638 <__aeabi_dmul>
 801950e:	a358      	add	r3, pc, #352	; (adr r3, 8019670 <__ieee754_pow+0xa30>)
 8019510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019514:	f7e6 fed8 	bl	80002c8 <__aeabi_dsub>
 8019518:	4622      	mov	r2, r4
 801951a:	462b      	mov	r3, r5
 801951c:	f7e7 f88c 	bl	8000638 <__aeabi_dmul>
 8019520:	a355      	add	r3, pc, #340	; (adr r3, 8019678 <__ieee754_pow+0xa38>)
 8019522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019526:	f7e6 fed1 	bl	80002cc <__adddf3>
 801952a:	4622      	mov	r2, r4
 801952c:	462b      	mov	r3, r5
 801952e:	f7e7 f883 	bl	8000638 <__aeabi_dmul>
 8019532:	4602      	mov	r2, r0
 8019534:	460b      	mov	r3, r1
 8019536:	4640      	mov	r0, r8
 8019538:	4649      	mov	r1, r9
 801953a:	f7e6 fec5 	bl	80002c8 <__aeabi_dsub>
 801953e:	4604      	mov	r4, r0
 8019540:	460d      	mov	r5, r1
 8019542:	4602      	mov	r2, r0
 8019544:	460b      	mov	r3, r1
 8019546:	4640      	mov	r0, r8
 8019548:	4649      	mov	r1, r9
 801954a:	f7e7 f875 	bl	8000638 <__aeabi_dmul>
 801954e:	2200      	movs	r2, #0
 8019550:	ec41 0b19 	vmov	d9, r0, r1
 8019554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019558:	4620      	mov	r0, r4
 801955a:	4629      	mov	r1, r5
 801955c:	f7e6 feb4 	bl	80002c8 <__aeabi_dsub>
 8019560:	4602      	mov	r2, r0
 8019562:	460b      	mov	r3, r1
 8019564:	ec51 0b19 	vmov	r0, r1, d9
 8019568:	f7e7 f990 	bl	800088c <__aeabi_ddiv>
 801956c:	4632      	mov	r2, r6
 801956e:	4604      	mov	r4, r0
 8019570:	460d      	mov	r5, r1
 8019572:	463b      	mov	r3, r7
 8019574:	4640      	mov	r0, r8
 8019576:	4649      	mov	r1, r9
 8019578:	f7e7 f85e 	bl	8000638 <__aeabi_dmul>
 801957c:	4632      	mov	r2, r6
 801957e:	463b      	mov	r3, r7
 8019580:	f7e6 fea4 	bl	80002cc <__adddf3>
 8019584:	4602      	mov	r2, r0
 8019586:	460b      	mov	r3, r1
 8019588:	4620      	mov	r0, r4
 801958a:	4629      	mov	r1, r5
 801958c:	f7e6 fe9c 	bl	80002c8 <__aeabi_dsub>
 8019590:	4642      	mov	r2, r8
 8019592:	464b      	mov	r3, r9
 8019594:	f7e6 fe98 	bl	80002c8 <__aeabi_dsub>
 8019598:	460b      	mov	r3, r1
 801959a:	4602      	mov	r2, r0
 801959c:	493a      	ldr	r1, [pc, #232]	; (8019688 <__ieee754_pow+0xa48>)
 801959e:	2000      	movs	r0, #0
 80195a0:	f7e6 fe92 	bl	80002c8 <__aeabi_dsub>
 80195a4:	ec41 0b10 	vmov	d0, r0, r1
 80195a8:	ee10 3a90 	vmov	r3, s1
 80195ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80195b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80195b4:	da2b      	bge.n	801960e <__ieee754_pow+0x9ce>
 80195b6:	4650      	mov	r0, sl
 80195b8:	f001 fada 	bl	801ab70 <scalbn>
 80195bc:	ec51 0b10 	vmov	r0, r1, d0
 80195c0:	ec53 2b18 	vmov	r2, r3, d8
 80195c4:	f7ff bbed 	b.w	8018da2 <__ieee754_pow+0x162>
 80195c8:	4b30      	ldr	r3, [pc, #192]	; (801968c <__ieee754_pow+0xa4c>)
 80195ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80195ce:	429e      	cmp	r6, r3
 80195d0:	f77f af0c 	ble.w	80193ec <__ieee754_pow+0x7ac>
 80195d4:	4b2e      	ldr	r3, [pc, #184]	; (8019690 <__ieee754_pow+0xa50>)
 80195d6:	440b      	add	r3, r1
 80195d8:	4303      	orrs	r3, r0
 80195da:	d009      	beq.n	80195f0 <__ieee754_pow+0x9b0>
 80195dc:	ec51 0b18 	vmov	r0, r1, d8
 80195e0:	2200      	movs	r2, #0
 80195e2:	2300      	movs	r3, #0
 80195e4:	f7e7 fa9a 	bl	8000b1c <__aeabi_dcmplt>
 80195e8:	3800      	subs	r0, #0
 80195ea:	bf18      	it	ne
 80195ec:	2001      	movne	r0, #1
 80195ee:	e447      	b.n	8018e80 <__ieee754_pow+0x240>
 80195f0:	4622      	mov	r2, r4
 80195f2:	462b      	mov	r3, r5
 80195f4:	f7e6 fe68 	bl	80002c8 <__aeabi_dsub>
 80195f8:	4642      	mov	r2, r8
 80195fa:	464b      	mov	r3, r9
 80195fc:	f7e7 faa2 	bl	8000b44 <__aeabi_dcmpge>
 8019600:	2800      	cmp	r0, #0
 8019602:	f43f aef3 	beq.w	80193ec <__ieee754_pow+0x7ac>
 8019606:	e7e9      	b.n	80195dc <__ieee754_pow+0x99c>
 8019608:	f04f 0a00 	mov.w	sl, #0
 801960c:	e71a      	b.n	8019444 <__ieee754_pow+0x804>
 801960e:	ec51 0b10 	vmov	r0, r1, d0
 8019612:	4619      	mov	r1, r3
 8019614:	e7d4      	b.n	80195c0 <__ieee754_pow+0x980>
 8019616:	491c      	ldr	r1, [pc, #112]	; (8019688 <__ieee754_pow+0xa48>)
 8019618:	2000      	movs	r0, #0
 801961a:	f7ff bb30 	b.w	8018c7e <__ieee754_pow+0x3e>
 801961e:	2000      	movs	r0, #0
 8019620:	2100      	movs	r1, #0
 8019622:	f7ff bb2c 	b.w	8018c7e <__ieee754_pow+0x3e>
 8019626:	4630      	mov	r0, r6
 8019628:	4639      	mov	r1, r7
 801962a:	f7ff bb28 	b.w	8018c7e <__ieee754_pow+0x3e>
 801962e:	9204      	str	r2, [sp, #16]
 8019630:	f7ff bb7a 	b.w	8018d28 <__ieee754_pow+0xe8>
 8019634:	2300      	movs	r3, #0
 8019636:	f7ff bb64 	b.w	8018d02 <__ieee754_pow+0xc2>
 801963a:	bf00      	nop
 801963c:	f3af 8000 	nop.w
 8019640:	00000000 	.word	0x00000000
 8019644:	3fe62e43 	.word	0x3fe62e43
 8019648:	fefa39ef 	.word	0xfefa39ef
 801964c:	3fe62e42 	.word	0x3fe62e42
 8019650:	0ca86c39 	.word	0x0ca86c39
 8019654:	be205c61 	.word	0xbe205c61
 8019658:	72bea4d0 	.word	0x72bea4d0
 801965c:	3e663769 	.word	0x3e663769
 8019660:	c5d26bf1 	.word	0xc5d26bf1
 8019664:	3ebbbd41 	.word	0x3ebbbd41
 8019668:	af25de2c 	.word	0xaf25de2c
 801966c:	3f11566a 	.word	0x3f11566a
 8019670:	16bebd93 	.word	0x16bebd93
 8019674:	3f66c16c 	.word	0x3f66c16c
 8019678:	5555553e 	.word	0x5555553e
 801967c:	3fc55555 	.word	0x3fc55555
 8019680:	3fe00000 	.word	0x3fe00000
 8019684:	000fffff 	.word	0x000fffff
 8019688:	3ff00000 	.word	0x3ff00000
 801968c:	4090cbff 	.word	0x4090cbff
 8019690:	3f6f3400 	.word	0x3f6f3400
 8019694:	652b82fe 	.word	0x652b82fe
 8019698:	3c971547 	.word	0x3c971547
 801969c:	00000000 	.word	0x00000000

080196a0 <__ieee754_rem_pio2>:
 80196a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196a4:	ed2d 8b02 	vpush	{d8}
 80196a8:	ec55 4b10 	vmov	r4, r5, d0
 80196ac:	4bca      	ldr	r3, [pc, #808]	; (80199d8 <__ieee754_rem_pio2+0x338>)
 80196ae:	b08b      	sub	sp, #44	; 0x2c
 80196b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80196b4:	4598      	cmp	r8, r3
 80196b6:	4682      	mov	sl, r0
 80196b8:	9502      	str	r5, [sp, #8]
 80196ba:	dc08      	bgt.n	80196ce <__ieee754_rem_pio2+0x2e>
 80196bc:	2200      	movs	r2, #0
 80196be:	2300      	movs	r3, #0
 80196c0:	ed80 0b00 	vstr	d0, [r0]
 80196c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80196c8:	f04f 0b00 	mov.w	fp, #0
 80196cc:	e028      	b.n	8019720 <__ieee754_rem_pio2+0x80>
 80196ce:	4bc3      	ldr	r3, [pc, #780]	; (80199dc <__ieee754_rem_pio2+0x33c>)
 80196d0:	4598      	cmp	r8, r3
 80196d2:	dc78      	bgt.n	80197c6 <__ieee754_rem_pio2+0x126>
 80196d4:	9b02      	ldr	r3, [sp, #8]
 80196d6:	4ec2      	ldr	r6, [pc, #776]	; (80199e0 <__ieee754_rem_pio2+0x340>)
 80196d8:	2b00      	cmp	r3, #0
 80196da:	ee10 0a10 	vmov	r0, s0
 80196de:	a3b0      	add	r3, pc, #704	; (adr r3, 80199a0 <__ieee754_rem_pio2+0x300>)
 80196e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196e4:	4629      	mov	r1, r5
 80196e6:	dd39      	ble.n	801975c <__ieee754_rem_pio2+0xbc>
 80196e8:	f7e6 fdee 	bl	80002c8 <__aeabi_dsub>
 80196ec:	45b0      	cmp	r8, r6
 80196ee:	4604      	mov	r4, r0
 80196f0:	460d      	mov	r5, r1
 80196f2:	d01b      	beq.n	801972c <__ieee754_rem_pio2+0x8c>
 80196f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80199a8 <__ieee754_rem_pio2+0x308>)
 80196f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196fa:	f7e6 fde5 	bl	80002c8 <__aeabi_dsub>
 80196fe:	4602      	mov	r2, r0
 8019700:	460b      	mov	r3, r1
 8019702:	e9ca 2300 	strd	r2, r3, [sl]
 8019706:	4620      	mov	r0, r4
 8019708:	4629      	mov	r1, r5
 801970a:	f7e6 fddd 	bl	80002c8 <__aeabi_dsub>
 801970e:	a3a6      	add	r3, pc, #664	; (adr r3, 80199a8 <__ieee754_rem_pio2+0x308>)
 8019710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019714:	f7e6 fdd8 	bl	80002c8 <__aeabi_dsub>
 8019718:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801971c:	f04f 0b01 	mov.w	fp, #1
 8019720:	4658      	mov	r0, fp
 8019722:	b00b      	add	sp, #44	; 0x2c
 8019724:	ecbd 8b02 	vpop	{d8}
 8019728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801972c:	a3a0      	add	r3, pc, #640	; (adr r3, 80199b0 <__ieee754_rem_pio2+0x310>)
 801972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019732:	f7e6 fdc9 	bl	80002c8 <__aeabi_dsub>
 8019736:	a3a0      	add	r3, pc, #640	; (adr r3, 80199b8 <__ieee754_rem_pio2+0x318>)
 8019738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801973c:	4604      	mov	r4, r0
 801973e:	460d      	mov	r5, r1
 8019740:	f7e6 fdc2 	bl	80002c8 <__aeabi_dsub>
 8019744:	4602      	mov	r2, r0
 8019746:	460b      	mov	r3, r1
 8019748:	e9ca 2300 	strd	r2, r3, [sl]
 801974c:	4620      	mov	r0, r4
 801974e:	4629      	mov	r1, r5
 8019750:	f7e6 fdba 	bl	80002c8 <__aeabi_dsub>
 8019754:	a398      	add	r3, pc, #608	; (adr r3, 80199b8 <__ieee754_rem_pio2+0x318>)
 8019756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801975a:	e7db      	b.n	8019714 <__ieee754_rem_pio2+0x74>
 801975c:	f7e6 fdb6 	bl	80002cc <__adddf3>
 8019760:	45b0      	cmp	r8, r6
 8019762:	4604      	mov	r4, r0
 8019764:	460d      	mov	r5, r1
 8019766:	d016      	beq.n	8019796 <__ieee754_rem_pio2+0xf6>
 8019768:	a38f      	add	r3, pc, #572	; (adr r3, 80199a8 <__ieee754_rem_pio2+0x308>)
 801976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801976e:	f7e6 fdad 	bl	80002cc <__adddf3>
 8019772:	4602      	mov	r2, r0
 8019774:	460b      	mov	r3, r1
 8019776:	e9ca 2300 	strd	r2, r3, [sl]
 801977a:	4620      	mov	r0, r4
 801977c:	4629      	mov	r1, r5
 801977e:	f7e6 fda3 	bl	80002c8 <__aeabi_dsub>
 8019782:	a389      	add	r3, pc, #548	; (adr r3, 80199a8 <__ieee754_rem_pio2+0x308>)
 8019784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019788:	f7e6 fda0 	bl	80002cc <__adddf3>
 801978c:	f04f 3bff 	mov.w	fp, #4294967295
 8019790:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019794:	e7c4      	b.n	8019720 <__ieee754_rem_pio2+0x80>
 8019796:	a386      	add	r3, pc, #536	; (adr r3, 80199b0 <__ieee754_rem_pio2+0x310>)
 8019798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801979c:	f7e6 fd96 	bl	80002cc <__adddf3>
 80197a0:	a385      	add	r3, pc, #532	; (adr r3, 80199b8 <__ieee754_rem_pio2+0x318>)
 80197a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197a6:	4604      	mov	r4, r0
 80197a8:	460d      	mov	r5, r1
 80197aa:	f7e6 fd8f 	bl	80002cc <__adddf3>
 80197ae:	4602      	mov	r2, r0
 80197b0:	460b      	mov	r3, r1
 80197b2:	e9ca 2300 	strd	r2, r3, [sl]
 80197b6:	4620      	mov	r0, r4
 80197b8:	4629      	mov	r1, r5
 80197ba:	f7e6 fd85 	bl	80002c8 <__aeabi_dsub>
 80197be:	a37e      	add	r3, pc, #504	; (adr r3, 80199b8 <__ieee754_rem_pio2+0x318>)
 80197c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197c4:	e7e0      	b.n	8019788 <__ieee754_rem_pio2+0xe8>
 80197c6:	4b87      	ldr	r3, [pc, #540]	; (80199e4 <__ieee754_rem_pio2+0x344>)
 80197c8:	4598      	cmp	r8, r3
 80197ca:	f300 80d9 	bgt.w	8019980 <__ieee754_rem_pio2+0x2e0>
 80197ce:	f001 f939 	bl	801aa44 <fabs>
 80197d2:	ec55 4b10 	vmov	r4, r5, d0
 80197d6:	ee10 0a10 	vmov	r0, s0
 80197da:	a379      	add	r3, pc, #484	; (adr r3, 80199c0 <__ieee754_rem_pio2+0x320>)
 80197dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197e0:	4629      	mov	r1, r5
 80197e2:	f7e6 ff29 	bl	8000638 <__aeabi_dmul>
 80197e6:	4b80      	ldr	r3, [pc, #512]	; (80199e8 <__ieee754_rem_pio2+0x348>)
 80197e8:	2200      	movs	r2, #0
 80197ea:	f7e6 fd6f 	bl	80002cc <__adddf3>
 80197ee:	f7e7 f9d3 	bl	8000b98 <__aeabi_d2iz>
 80197f2:	4683      	mov	fp, r0
 80197f4:	f7e6 feb6 	bl	8000564 <__aeabi_i2d>
 80197f8:	4602      	mov	r2, r0
 80197fa:	460b      	mov	r3, r1
 80197fc:	ec43 2b18 	vmov	d8, r2, r3
 8019800:	a367      	add	r3, pc, #412	; (adr r3, 80199a0 <__ieee754_rem_pio2+0x300>)
 8019802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019806:	f7e6 ff17 	bl	8000638 <__aeabi_dmul>
 801980a:	4602      	mov	r2, r0
 801980c:	460b      	mov	r3, r1
 801980e:	4620      	mov	r0, r4
 8019810:	4629      	mov	r1, r5
 8019812:	f7e6 fd59 	bl	80002c8 <__aeabi_dsub>
 8019816:	a364      	add	r3, pc, #400	; (adr r3, 80199a8 <__ieee754_rem_pio2+0x308>)
 8019818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801981c:	4606      	mov	r6, r0
 801981e:	460f      	mov	r7, r1
 8019820:	ec51 0b18 	vmov	r0, r1, d8
 8019824:	f7e6 ff08 	bl	8000638 <__aeabi_dmul>
 8019828:	f1bb 0f1f 	cmp.w	fp, #31
 801982c:	4604      	mov	r4, r0
 801982e:	460d      	mov	r5, r1
 8019830:	dc0d      	bgt.n	801984e <__ieee754_rem_pio2+0x1ae>
 8019832:	4b6e      	ldr	r3, [pc, #440]	; (80199ec <__ieee754_rem_pio2+0x34c>)
 8019834:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801983c:	4543      	cmp	r3, r8
 801983e:	d006      	beq.n	801984e <__ieee754_rem_pio2+0x1ae>
 8019840:	4622      	mov	r2, r4
 8019842:	462b      	mov	r3, r5
 8019844:	4630      	mov	r0, r6
 8019846:	4639      	mov	r1, r7
 8019848:	f7e6 fd3e 	bl	80002c8 <__aeabi_dsub>
 801984c:	e00f      	b.n	801986e <__ieee754_rem_pio2+0x1ce>
 801984e:	462b      	mov	r3, r5
 8019850:	4622      	mov	r2, r4
 8019852:	4630      	mov	r0, r6
 8019854:	4639      	mov	r1, r7
 8019856:	f7e6 fd37 	bl	80002c8 <__aeabi_dsub>
 801985a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801985e:	9303      	str	r3, [sp, #12]
 8019860:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019864:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8019868:	f1b8 0f10 	cmp.w	r8, #16
 801986c:	dc02      	bgt.n	8019874 <__ieee754_rem_pio2+0x1d4>
 801986e:	e9ca 0100 	strd	r0, r1, [sl]
 8019872:	e039      	b.n	80198e8 <__ieee754_rem_pio2+0x248>
 8019874:	a34e      	add	r3, pc, #312	; (adr r3, 80199b0 <__ieee754_rem_pio2+0x310>)
 8019876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801987a:	ec51 0b18 	vmov	r0, r1, d8
 801987e:	f7e6 fedb 	bl	8000638 <__aeabi_dmul>
 8019882:	4604      	mov	r4, r0
 8019884:	460d      	mov	r5, r1
 8019886:	4602      	mov	r2, r0
 8019888:	460b      	mov	r3, r1
 801988a:	4630      	mov	r0, r6
 801988c:	4639      	mov	r1, r7
 801988e:	f7e6 fd1b 	bl	80002c8 <__aeabi_dsub>
 8019892:	4602      	mov	r2, r0
 8019894:	460b      	mov	r3, r1
 8019896:	4680      	mov	r8, r0
 8019898:	4689      	mov	r9, r1
 801989a:	4630      	mov	r0, r6
 801989c:	4639      	mov	r1, r7
 801989e:	f7e6 fd13 	bl	80002c8 <__aeabi_dsub>
 80198a2:	4622      	mov	r2, r4
 80198a4:	462b      	mov	r3, r5
 80198a6:	f7e6 fd0f 	bl	80002c8 <__aeabi_dsub>
 80198aa:	a343      	add	r3, pc, #268	; (adr r3, 80199b8 <__ieee754_rem_pio2+0x318>)
 80198ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b0:	4604      	mov	r4, r0
 80198b2:	460d      	mov	r5, r1
 80198b4:	ec51 0b18 	vmov	r0, r1, d8
 80198b8:	f7e6 febe 	bl	8000638 <__aeabi_dmul>
 80198bc:	4622      	mov	r2, r4
 80198be:	462b      	mov	r3, r5
 80198c0:	f7e6 fd02 	bl	80002c8 <__aeabi_dsub>
 80198c4:	4602      	mov	r2, r0
 80198c6:	460b      	mov	r3, r1
 80198c8:	4604      	mov	r4, r0
 80198ca:	460d      	mov	r5, r1
 80198cc:	4640      	mov	r0, r8
 80198ce:	4649      	mov	r1, r9
 80198d0:	f7e6 fcfa 	bl	80002c8 <__aeabi_dsub>
 80198d4:	9a03      	ldr	r2, [sp, #12]
 80198d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80198da:	1ad3      	subs	r3, r2, r3
 80198dc:	2b31      	cmp	r3, #49	; 0x31
 80198de:	dc24      	bgt.n	801992a <__ieee754_rem_pio2+0x28a>
 80198e0:	e9ca 0100 	strd	r0, r1, [sl]
 80198e4:	4646      	mov	r6, r8
 80198e6:	464f      	mov	r7, r9
 80198e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80198ec:	4630      	mov	r0, r6
 80198ee:	4642      	mov	r2, r8
 80198f0:	464b      	mov	r3, r9
 80198f2:	4639      	mov	r1, r7
 80198f4:	f7e6 fce8 	bl	80002c8 <__aeabi_dsub>
 80198f8:	462b      	mov	r3, r5
 80198fa:	4622      	mov	r2, r4
 80198fc:	f7e6 fce4 	bl	80002c8 <__aeabi_dsub>
 8019900:	9b02      	ldr	r3, [sp, #8]
 8019902:	2b00      	cmp	r3, #0
 8019904:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019908:	f6bf af0a 	bge.w	8019720 <__ieee754_rem_pio2+0x80>
 801990c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019910:	f8ca 3004 	str.w	r3, [sl, #4]
 8019914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019918:	f8ca 8000 	str.w	r8, [sl]
 801991c:	f8ca 0008 	str.w	r0, [sl, #8]
 8019920:	f8ca 300c 	str.w	r3, [sl, #12]
 8019924:	f1cb 0b00 	rsb	fp, fp, #0
 8019928:	e6fa      	b.n	8019720 <__ieee754_rem_pio2+0x80>
 801992a:	a327      	add	r3, pc, #156	; (adr r3, 80199c8 <__ieee754_rem_pio2+0x328>)
 801992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019930:	ec51 0b18 	vmov	r0, r1, d8
 8019934:	f7e6 fe80 	bl	8000638 <__aeabi_dmul>
 8019938:	4604      	mov	r4, r0
 801993a:	460d      	mov	r5, r1
 801993c:	4602      	mov	r2, r0
 801993e:	460b      	mov	r3, r1
 8019940:	4640      	mov	r0, r8
 8019942:	4649      	mov	r1, r9
 8019944:	f7e6 fcc0 	bl	80002c8 <__aeabi_dsub>
 8019948:	4602      	mov	r2, r0
 801994a:	460b      	mov	r3, r1
 801994c:	4606      	mov	r6, r0
 801994e:	460f      	mov	r7, r1
 8019950:	4640      	mov	r0, r8
 8019952:	4649      	mov	r1, r9
 8019954:	f7e6 fcb8 	bl	80002c8 <__aeabi_dsub>
 8019958:	4622      	mov	r2, r4
 801995a:	462b      	mov	r3, r5
 801995c:	f7e6 fcb4 	bl	80002c8 <__aeabi_dsub>
 8019960:	a31b      	add	r3, pc, #108	; (adr r3, 80199d0 <__ieee754_rem_pio2+0x330>)
 8019962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019966:	4604      	mov	r4, r0
 8019968:	460d      	mov	r5, r1
 801996a:	ec51 0b18 	vmov	r0, r1, d8
 801996e:	f7e6 fe63 	bl	8000638 <__aeabi_dmul>
 8019972:	4622      	mov	r2, r4
 8019974:	462b      	mov	r3, r5
 8019976:	f7e6 fca7 	bl	80002c8 <__aeabi_dsub>
 801997a:	4604      	mov	r4, r0
 801997c:	460d      	mov	r5, r1
 801997e:	e75f      	b.n	8019840 <__ieee754_rem_pio2+0x1a0>
 8019980:	4b1b      	ldr	r3, [pc, #108]	; (80199f0 <__ieee754_rem_pio2+0x350>)
 8019982:	4598      	cmp	r8, r3
 8019984:	dd36      	ble.n	80199f4 <__ieee754_rem_pio2+0x354>
 8019986:	ee10 2a10 	vmov	r2, s0
 801998a:	462b      	mov	r3, r5
 801998c:	4620      	mov	r0, r4
 801998e:	4629      	mov	r1, r5
 8019990:	f7e6 fc9a 	bl	80002c8 <__aeabi_dsub>
 8019994:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019998:	e9ca 0100 	strd	r0, r1, [sl]
 801999c:	e694      	b.n	80196c8 <__ieee754_rem_pio2+0x28>
 801999e:	bf00      	nop
 80199a0:	54400000 	.word	0x54400000
 80199a4:	3ff921fb 	.word	0x3ff921fb
 80199a8:	1a626331 	.word	0x1a626331
 80199ac:	3dd0b461 	.word	0x3dd0b461
 80199b0:	1a600000 	.word	0x1a600000
 80199b4:	3dd0b461 	.word	0x3dd0b461
 80199b8:	2e037073 	.word	0x2e037073
 80199bc:	3ba3198a 	.word	0x3ba3198a
 80199c0:	6dc9c883 	.word	0x6dc9c883
 80199c4:	3fe45f30 	.word	0x3fe45f30
 80199c8:	2e000000 	.word	0x2e000000
 80199cc:	3ba3198a 	.word	0x3ba3198a
 80199d0:	252049c1 	.word	0x252049c1
 80199d4:	397b839a 	.word	0x397b839a
 80199d8:	3fe921fb 	.word	0x3fe921fb
 80199dc:	4002d97b 	.word	0x4002d97b
 80199e0:	3ff921fb 	.word	0x3ff921fb
 80199e4:	413921fb 	.word	0x413921fb
 80199e8:	3fe00000 	.word	0x3fe00000
 80199ec:	08049d78 	.word	0x08049d78
 80199f0:	7fefffff 	.word	0x7fefffff
 80199f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80199f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80199fc:	ee10 0a10 	vmov	r0, s0
 8019a00:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8019a04:	ee10 6a10 	vmov	r6, s0
 8019a08:	460f      	mov	r7, r1
 8019a0a:	f7e7 f8c5 	bl	8000b98 <__aeabi_d2iz>
 8019a0e:	f7e6 fda9 	bl	8000564 <__aeabi_i2d>
 8019a12:	4602      	mov	r2, r0
 8019a14:	460b      	mov	r3, r1
 8019a16:	4630      	mov	r0, r6
 8019a18:	4639      	mov	r1, r7
 8019a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019a1e:	f7e6 fc53 	bl	80002c8 <__aeabi_dsub>
 8019a22:	4b23      	ldr	r3, [pc, #140]	; (8019ab0 <__ieee754_rem_pio2+0x410>)
 8019a24:	2200      	movs	r2, #0
 8019a26:	f7e6 fe07 	bl	8000638 <__aeabi_dmul>
 8019a2a:	460f      	mov	r7, r1
 8019a2c:	4606      	mov	r6, r0
 8019a2e:	f7e7 f8b3 	bl	8000b98 <__aeabi_d2iz>
 8019a32:	f7e6 fd97 	bl	8000564 <__aeabi_i2d>
 8019a36:	4602      	mov	r2, r0
 8019a38:	460b      	mov	r3, r1
 8019a3a:	4630      	mov	r0, r6
 8019a3c:	4639      	mov	r1, r7
 8019a3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019a42:	f7e6 fc41 	bl	80002c8 <__aeabi_dsub>
 8019a46:	4b1a      	ldr	r3, [pc, #104]	; (8019ab0 <__ieee754_rem_pio2+0x410>)
 8019a48:	2200      	movs	r2, #0
 8019a4a:	f7e6 fdf5 	bl	8000638 <__aeabi_dmul>
 8019a4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019a52:	ad04      	add	r5, sp, #16
 8019a54:	f04f 0803 	mov.w	r8, #3
 8019a58:	46a9      	mov	r9, r5
 8019a5a:	2600      	movs	r6, #0
 8019a5c:	2700      	movs	r7, #0
 8019a5e:	4632      	mov	r2, r6
 8019a60:	463b      	mov	r3, r7
 8019a62:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8019a66:	46c3      	mov	fp, r8
 8019a68:	3d08      	subs	r5, #8
 8019a6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8019a6e:	f7e7 f84b 	bl	8000b08 <__aeabi_dcmpeq>
 8019a72:	2800      	cmp	r0, #0
 8019a74:	d1f3      	bne.n	8019a5e <__ieee754_rem_pio2+0x3be>
 8019a76:	4b0f      	ldr	r3, [pc, #60]	; (8019ab4 <__ieee754_rem_pio2+0x414>)
 8019a78:	9301      	str	r3, [sp, #4]
 8019a7a:	2302      	movs	r3, #2
 8019a7c:	9300      	str	r3, [sp, #0]
 8019a7e:	4622      	mov	r2, r4
 8019a80:	465b      	mov	r3, fp
 8019a82:	4651      	mov	r1, sl
 8019a84:	4648      	mov	r0, r9
 8019a86:	f000 f993 	bl	8019db0 <__kernel_rem_pio2>
 8019a8a:	9b02      	ldr	r3, [sp, #8]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	4683      	mov	fp, r0
 8019a90:	f6bf ae46 	bge.w	8019720 <__ieee754_rem_pio2+0x80>
 8019a94:	e9da 2100 	ldrd	r2, r1, [sl]
 8019a98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019a9c:	e9ca 2300 	strd	r2, r3, [sl]
 8019aa0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8019aa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019aa8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8019aac:	e73a      	b.n	8019924 <__ieee754_rem_pio2+0x284>
 8019aae:	bf00      	nop
 8019ab0:	41700000 	.word	0x41700000
 8019ab4:	08049df8 	.word	0x08049df8

08019ab8 <__ieee754_sqrt>:
 8019ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019abc:	ec55 4b10 	vmov	r4, r5, d0
 8019ac0:	4e55      	ldr	r6, [pc, #340]	; (8019c18 <__ieee754_sqrt+0x160>)
 8019ac2:	43ae      	bics	r6, r5
 8019ac4:	ee10 0a10 	vmov	r0, s0
 8019ac8:	ee10 3a10 	vmov	r3, s0
 8019acc:	462a      	mov	r2, r5
 8019ace:	4629      	mov	r1, r5
 8019ad0:	d110      	bne.n	8019af4 <__ieee754_sqrt+0x3c>
 8019ad2:	ee10 2a10 	vmov	r2, s0
 8019ad6:	462b      	mov	r3, r5
 8019ad8:	f7e6 fdae 	bl	8000638 <__aeabi_dmul>
 8019adc:	4602      	mov	r2, r0
 8019ade:	460b      	mov	r3, r1
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	4629      	mov	r1, r5
 8019ae4:	f7e6 fbf2 	bl	80002cc <__adddf3>
 8019ae8:	4604      	mov	r4, r0
 8019aea:	460d      	mov	r5, r1
 8019aec:	ec45 4b10 	vmov	d0, r4, r5
 8019af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019af4:	2d00      	cmp	r5, #0
 8019af6:	dc10      	bgt.n	8019b1a <__ieee754_sqrt+0x62>
 8019af8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019afc:	4330      	orrs	r0, r6
 8019afe:	d0f5      	beq.n	8019aec <__ieee754_sqrt+0x34>
 8019b00:	b15d      	cbz	r5, 8019b1a <__ieee754_sqrt+0x62>
 8019b02:	ee10 2a10 	vmov	r2, s0
 8019b06:	462b      	mov	r3, r5
 8019b08:	ee10 0a10 	vmov	r0, s0
 8019b0c:	f7e6 fbdc 	bl	80002c8 <__aeabi_dsub>
 8019b10:	4602      	mov	r2, r0
 8019b12:	460b      	mov	r3, r1
 8019b14:	f7e6 feba 	bl	800088c <__aeabi_ddiv>
 8019b18:	e7e6      	b.n	8019ae8 <__ieee754_sqrt+0x30>
 8019b1a:	1512      	asrs	r2, r2, #20
 8019b1c:	d074      	beq.n	8019c08 <__ieee754_sqrt+0x150>
 8019b1e:	07d4      	lsls	r4, r2, #31
 8019b20:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019b24:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8019b28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019b2c:	bf5e      	ittt	pl
 8019b2e:	0fda      	lsrpl	r2, r3, #31
 8019b30:	005b      	lslpl	r3, r3, #1
 8019b32:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8019b36:	2400      	movs	r4, #0
 8019b38:	0fda      	lsrs	r2, r3, #31
 8019b3a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8019b3e:	107f      	asrs	r7, r7, #1
 8019b40:	005b      	lsls	r3, r3, #1
 8019b42:	2516      	movs	r5, #22
 8019b44:	4620      	mov	r0, r4
 8019b46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8019b4a:	1886      	adds	r6, r0, r2
 8019b4c:	428e      	cmp	r6, r1
 8019b4e:	bfde      	ittt	le
 8019b50:	1b89      	suble	r1, r1, r6
 8019b52:	18b0      	addle	r0, r6, r2
 8019b54:	18a4      	addle	r4, r4, r2
 8019b56:	0049      	lsls	r1, r1, #1
 8019b58:	3d01      	subs	r5, #1
 8019b5a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8019b5e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8019b62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019b66:	d1f0      	bne.n	8019b4a <__ieee754_sqrt+0x92>
 8019b68:	462a      	mov	r2, r5
 8019b6a:	f04f 0e20 	mov.w	lr, #32
 8019b6e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019b72:	4281      	cmp	r1, r0
 8019b74:	eb06 0c05 	add.w	ip, r6, r5
 8019b78:	dc02      	bgt.n	8019b80 <__ieee754_sqrt+0xc8>
 8019b7a:	d113      	bne.n	8019ba4 <__ieee754_sqrt+0xec>
 8019b7c:	459c      	cmp	ip, r3
 8019b7e:	d811      	bhi.n	8019ba4 <__ieee754_sqrt+0xec>
 8019b80:	f1bc 0f00 	cmp.w	ip, #0
 8019b84:	eb0c 0506 	add.w	r5, ip, r6
 8019b88:	da43      	bge.n	8019c12 <__ieee754_sqrt+0x15a>
 8019b8a:	2d00      	cmp	r5, #0
 8019b8c:	db41      	blt.n	8019c12 <__ieee754_sqrt+0x15a>
 8019b8e:	f100 0801 	add.w	r8, r0, #1
 8019b92:	1a09      	subs	r1, r1, r0
 8019b94:	459c      	cmp	ip, r3
 8019b96:	bf88      	it	hi
 8019b98:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8019b9c:	eba3 030c 	sub.w	r3, r3, ip
 8019ba0:	4432      	add	r2, r6
 8019ba2:	4640      	mov	r0, r8
 8019ba4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8019ba8:	f1be 0e01 	subs.w	lr, lr, #1
 8019bac:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8019bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019bb4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019bb8:	d1db      	bne.n	8019b72 <__ieee754_sqrt+0xba>
 8019bba:	430b      	orrs	r3, r1
 8019bbc:	d006      	beq.n	8019bcc <__ieee754_sqrt+0x114>
 8019bbe:	1c50      	adds	r0, r2, #1
 8019bc0:	bf13      	iteet	ne
 8019bc2:	3201      	addne	r2, #1
 8019bc4:	3401      	addeq	r4, #1
 8019bc6:	4672      	moveq	r2, lr
 8019bc8:	f022 0201 	bicne.w	r2, r2, #1
 8019bcc:	1063      	asrs	r3, r4, #1
 8019bce:	0852      	lsrs	r2, r2, #1
 8019bd0:	07e1      	lsls	r1, r4, #31
 8019bd2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019bd6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019bda:	bf48      	it	mi
 8019bdc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8019be0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8019be4:	4614      	mov	r4, r2
 8019be6:	e781      	b.n	8019aec <__ieee754_sqrt+0x34>
 8019be8:	0ad9      	lsrs	r1, r3, #11
 8019bea:	3815      	subs	r0, #21
 8019bec:	055b      	lsls	r3, r3, #21
 8019bee:	2900      	cmp	r1, #0
 8019bf0:	d0fa      	beq.n	8019be8 <__ieee754_sqrt+0x130>
 8019bf2:	02cd      	lsls	r5, r1, #11
 8019bf4:	d50a      	bpl.n	8019c0c <__ieee754_sqrt+0x154>
 8019bf6:	f1c2 0420 	rsb	r4, r2, #32
 8019bfa:	fa23 f404 	lsr.w	r4, r3, r4
 8019bfe:	1e55      	subs	r5, r2, #1
 8019c00:	4093      	lsls	r3, r2
 8019c02:	4321      	orrs	r1, r4
 8019c04:	1b42      	subs	r2, r0, r5
 8019c06:	e78a      	b.n	8019b1e <__ieee754_sqrt+0x66>
 8019c08:	4610      	mov	r0, r2
 8019c0a:	e7f0      	b.n	8019bee <__ieee754_sqrt+0x136>
 8019c0c:	0049      	lsls	r1, r1, #1
 8019c0e:	3201      	adds	r2, #1
 8019c10:	e7ef      	b.n	8019bf2 <__ieee754_sqrt+0x13a>
 8019c12:	4680      	mov	r8, r0
 8019c14:	e7bd      	b.n	8019b92 <__ieee754_sqrt+0xda>
 8019c16:	bf00      	nop
 8019c18:	7ff00000 	.word	0x7ff00000
 8019c1c:	00000000 	.word	0x00000000

08019c20 <__kernel_cos>:
 8019c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c24:	ec57 6b10 	vmov	r6, r7, d0
 8019c28:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019c2c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019c30:	ed8d 1b00 	vstr	d1, [sp]
 8019c34:	da07      	bge.n	8019c46 <__kernel_cos+0x26>
 8019c36:	ee10 0a10 	vmov	r0, s0
 8019c3a:	4639      	mov	r1, r7
 8019c3c:	f7e6 ffac 	bl	8000b98 <__aeabi_d2iz>
 8019c40:	2800      	cmp	r0, #0
 8019c42:	f000 8088 	beq.w	8019d56 <__kernel_cos+0x136>
 8019c46:	4632      	mov	r2, r6
 8019c48:	463b      	mov	r3, r7
 8019c4a:	4630      	mov	r0, r6
 8019c4c:	4639      	mov	r1, r7
 8019c4e:	f7e6 fcf3 	bl	8000638 <__aeabi_dmul>
 8019c52:	4b51      	ldr	r3, [pc, #324]	; (8019d98 <__kernel_cos+0x178>)
 8019c54:	2200      	movs	r2, #0
 8019c56:	4604      	mov	r4, r0
 8019c58:	460d      	mov	r5, r1
 8019c5a:	f7e6 fced 	bl	8000638 <__aeabi_dmul>
 8019c5e:	a340      	add	r3, pc, #256	; (adr r3, 8019d60 <__kernel_cos+0x140>)
 8019c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c64:	4682      	mov	sl, r0
 8019c66:	468b      	mov	fp, r1
 8019c68:	4620      	mov	r0, r4
 8019c6a:	4629      	mov	r1, r5
 8019c6c:	f7e6 fce4 	bl	8000638 <__aeabi_dmul>
 8019c70:	a33d      	add	r3, pc, #244	; (adr r3, 8019d68 <__kernel_cos+0x148>)
 8019c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c76:	f7e6 fb29 	bl	80002cc <__adddf3>
 8019c7a:	4622      	mov	r2, r4
 8019c7c:	462b      	mov	r3, r5
 8019c7e:	f7e6 fcdb 	bl	8000638 <__aeabi_dmul>
 8019c82:	a33b      	add	r3, pc, #236	; (adr r3, 8019d70 <__kernel_cos+0x150>)
 8019c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c88:	f7e6 fb1e 	bl	80002c8 <__aeabi_dsub>
 8019c8c:	4622      	mov	r2, r4
 8019c8e:	462b      	mov	r3, r5
 8019c90:	f7e6 fcd2 	bl	8000638 <__aeabi_dmul>
 8019c94:	a338      	add	r3, pc, #224	; (adr r3, 8019d78 <__kernel_cos+0x158>)
 8019c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c9a:	f7e6 fb17 	bl	80002cc <__adddf3>
 8019c9e:	4622      	mov	r2, r4
 8019ca0:	462b      	mov	r3, r5
 8019ca2:	f7e6 fcc9 	bl	8000638 <__aeabi_dmul>
 8019ca6:	a336      	add	r3, pc, #216	; (adr r3, 8019d80 <__kernel_cos+0x160>)
 8019ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cac:	f7e6 fb0c 	bl	80002c8 <__aeabi_dsub>
 8019cb0:	4622      	mov	r2, r4
 8019cb2:	462b      	mov	r3, r5
 8019cb4:	f7e6 fcc0 	bl	8000638 <__aeabi_dmul>
 8019cb8:	a333      	add	r3, pc, #204	; (adr r3, 8019d88 <__kernel_cos+0x168>)
 8019cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cbe:	f7e6 fb05 	bl	80002cc <__adddf3>
 8019cc2:	4622      	mov	r2, r4
 8019cc4:	462b      	mov	r3, r5
 8019cc6:	f7e6 fcb7 	bl	8000638 <__aeabi_dmul>
 8019cca:	4622      	mov	r2, r4
 8019ccc:	462b      	mov	r3, r5
 8019cce:	f7e6 fcb3 	bl	8000638 <__aeabi_dmul>
 8019cd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019cd6:	4604      	mov	r4, r0
 8019cd8:	460d      	mov	r5, r1
 8019cda:	4630      	mov	r0, r6
 8019cdc:	4639      	mov	r1, r7
 8019cde:	f7e6 fcab 	bl	8000638 <__aeabi_dmul>
 8019ce2:	460b      	mov	r3, r1
 8019ce4:	4602      	mov	r2, r0
 8019ce6:	4629      	mov	r1, r5
 8019ce8:	4620      	mov	r0, r4
 8019cea:	f7e6 faed 	bl	80002c8 <__aeabi_dsub>
 8019cee:	4b2b      	ldr	r3, [pc, #172]	; (8019d9c <__kernel_cos+0x17c>)
 8019cf0:	4598      	cmp	r8, r3
 8019cf2:	4606      	mov	r6, r0
 8019cf4:	460f      	mov	r7, r1
 8019cf6:	dc10      	bgt.n	8019d1a <__kernel_cos+0xfa>
 8019cf8:	4602      	mov	r2, r0
 8019cfa:	460b      	mov	r3, r1
 8019cfc:	4650      	mov	r0, sl
 8019cfe:	4659      	mov	r1, fp
 8019d00:	f7e6 fae2 	bl	80002c8 <__aeabi_dsub>
 8019d04:	460b      	mov	r3, r1
 8019d06:	4926      	ldr	r1, [pc, #152]	; (8019da0 <__kernel_cos+0x180>)
 8019d08:	4602      	mov	r2, r0
 8019d0a:	2000      	movs	r0, #0
 8019d0c:	f7e6 fadc 	bl	80002c8 <__aeabi_dsub>
 8019d10:	ec41 0b10 	vmov	d0, r0, r1
 8019d14:	b003      	add	sp, #12
 8019d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d1a:	4b22      	ldr	r3, [pc, #136]	; (8019da4 <__kernel_cos+0x184>)
 8019d1c:	4920      	ldr	r1, [pc, #128]	; (8019da0 <__kernel_cos+0x180>)
 8019d1e:	4598      	cmp	r8, r3
 8019d20:	bfcc      	ite	gt
 8019d22:	4d21      	ldrgt	r5, [pc, #132]	; (8019da8 <__kernel_cos+0x188>)
 8019d24:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8019d28:	2400      	movs	r4, #0
 8019d2a:	4622      	mov	r2, r4
 8019d2c:	462b      	mov	r3, r5
 8019d2e:	2000      	movs	r0, #0
 8019d30:	f7e6 faca 	bl	80002c8 <__aeabi_dsub>
 8019d34:	4622      	mov	r2, r4
 8019d36:	4680      	mov	r8, r0
 8019d38:	4689      	mov	r9, r1
 8019d3a:	462b      	mov	r3, r5
 8019d3c:	4650      	mov	r0, sl
 8019d3e:	4659      	mov	r1, fp
 8019d40:	f7e6 fac2 	bl	80002c8 <__aeabi_dsub>
 8019d44:	4632      	mov	r2, r6
 8019d46:	463b      	mov	r3, r7
 8019d48:	f7e6 fabe 	bl	80002c8 <__aeabi_dsub>
 8019d4c:	4602      	mov	r2, r0
 8019d4e:	460b      	mov	r3, r1
 8019d50:	4640      	mov	r0, r8
 8019d52:	4649      	mov	r1, r9
 8019d54:	e7da      	b.n	8019d0c <__kernel_cos+0xec>
 8019d56:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8019d90 <__kernel_cos+0x170>
 8019d5a:	e7db      	b.n	8019d14 <__kernel_cos+0xf4>
 8019d5c:	f3af 8000 	nop.w
 8019d60:	be8838d4 	.word	0xbe8838d4
 8019d64:	bda8fae9 	.word	0xbda8fae9
 8019d68:	bdb4b1c4 	.word	0xbdb4b1c4
 8019d6c:	3e21ee9e 	.word	0x3e21ee9e
 8019d70:	809c52ad 	.word	0x809c52ad
 8019d74:	3e927e4f 	.word	0x3e927e4f
 8019d78:	19cb1590 	.word	0x19cb1590
 8019d7c:	3efa01a0 	.word	0x3efa01a0
 8019d80:	16c15177 	.word	0x16c15177
 8019d84:	3f56c16c 	.word	0x3f56c16c
 8019d88:	5555554c 	.word	0x5555554c
 8019d8c:	3fa55555 	.word	0x3fa55555
 8019d90:	00000000 	.word	0x00000000
 8019d94:	3ff00000 	.word	0x3ff00000
 8019d98:	3fe00000 	.word	0x3fe00000
 8019d9c:	3fd33332 	.word	0x3fd33332
 8019da0:	3ff00000 	.word	0x3ff00000
 8019da4:	3fe90000 	.word	0x3fe90000
 8019da8:	3fd20000 	.word	0x3fd20000
 8019dac:	00000000 	.word	0x00000000

08019db0 <__kernel_rem_pio2>:
 8019db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019db4:	ed2d 8b02 	vpush	{d8}
 8019db8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8019dbc:	f112 0f14 	cmn.w	r2, #20
 8019dc0:	9308      	str	r3, [sp, #32]
 8019dc2:	9101      	str	r1, [sp, #4]
 8019dc4:	4bc4      	ldr	r3, [pc, #784]	; (801a0d8 <__kernel_rem_pio2+0x328>)
 8019dc6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8019dc8:	900b      	str	r0, [sp, #44]	; 0x2c
 8019dca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019dce:	9302      	str	r3, [sp, #8]
 8019dd0:	9b08      	ldr	r3, [sp, #32]
 8019dd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8019dd6:	bfa8      	it	ge
 8019dd8:	1ed4      	subge	r4, r2, #3
 8019dda:	9306      	str	r3, [sp, #24]
 8019ddc:	bfb2      	itee	lt
 8019dde:	2400      	movlt	r4, #0
 8019de0:	2318      	movge	r3, #24
 8019de2:	fb94 f4f3 	sdivge	r4, r4, r3
 8019de6:	f06f 0317 	mvn.w	r3, #23
 8019dea:	fb04 3303 	mla	r3, r4, r3, r3
 8019dee:	eb03 0a02 	add.w	sl, r3, r2
 8019df2:	9b02      	ldr	r3, [sp, #8]
 8019df4:	9a06      	ldr	r2, [sp, #24]
 8019df6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801a0c8 <__kernel_rem_pio2+0x318>
 8019dfa:	eb03 0802 	add.w	r8, r3, r2
 8019dfe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8019e00:	1aa7      	subs	r7, r4, r2
 8019e02:	ae22      	add	r6, sp, #136	; 0x88
 8019e04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8019e08:	2500      	movs	r5, #0
 8019e0a:	4545      	cmp	r5, r8
 8019e0c:	dd13      	ble.n	8019e36 <__kernel_rem_pio2+0x86>
 8019e0e:	9b08      	ldr	r3, [sp, #32]
 8019e10:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801a0c8 <__kernel_rem_pio2+0x318>
 8019e14:	aa22      	add	r2, sp, #136	; 0x88
 8019e16:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8019e1a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8019e1e:	f04f 0800 	mov.w	r8, #0
 8019e22:	9b02      	ldr	r3, [sp, #8]
 8019e24:	4598      	cmp	r8, r3
 8019e26:	dc2f      	bgt.n	8019e88 <__kernel_rem_pio2+0xd8>
 8019e28:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019e2c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8019e30:	462f      	mov	r7, r5
 8019e32:	2600      	movs	r6, #0
 8019e34:	e01b      	b.n	8019e6e <__kernel_rem_pio2+0xbe>
 8019e36:	42ef      	cmn	r7, r5
 8019e38:	d407      	bmi.n	8019e4a <__kernel_rem_pio2+0x9a>
 8019e3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8019e3e:	f7e6 fb91 	bl	8000564 <__aeabi_i2d>
 8019e42:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019e46:	3501      	adds	r5, #1
 8019e48:	e7df      	b.n	8019e0a <__kernel_rem_pio2+0x5a>
 8019e4a:	ec51 0b18 	vmov	r0, r1, d8
 8019e4e:	e7f8      	b.n	8019e42 <__kernel_rem_pio2+0x92>
 8019e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019e54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8019e58:	f7e6 fbee 	bl	8000638 <__aeabi_dmul>
 8019e5c:	4602      	mov	r2, r0
 8019e5e:	460b      	mov	r3, r1
 8019e60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019e64:	f7e6 fa32 	bl	80002cc <__adddf3>
 8019e68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019e6c:	3601      	adds	r6, #1
 8019e6e:	9b06      	ldr	r3, [sp, #24]
 8019e70:	429e      	cmp	r6, r3
 8019e72:	f1a7 0708 	sub.w	r7, r7, #8
 8019e76:	ddeb      	ble.n	8019e50 <__kernel_rem_pio2+0xa0>
 8019e78:	ed9d 7b04 	vldr	d7, [sp, #16]
 8019e7c:	f108 0801 	add.w	r8, r8, #1
 8019e80:	ecab 7b02 	vstmia	fp!, {d7}
 8019e84:	3508      	adds	r5, #8
 8019e86:	e7cc      	b.n	8019e22 <__kernel_rem_pio2+0x72>
 8019e88:	9b02      	ldr	r3, [sp, #8]
 8019e8a:	aa0e      	add	r2, sp, #56	; 0x38
 8019e8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019e90:	930d      	str	r3, [sp, #52]	; 0x34
 8019e92:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8019e94:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019e98:	9c02      	ldr	r4, [sp, #8]
 8019e9a:	930c      	str	r3, [sp, #48]	; 0x30
 8019e9c:	00e3      	lsls	r3, r4, #3
 8019e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8019ea0:	ab9a      	add	r3, sp, #616	; 0x268
 8019ea2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019ea6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8019eaa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8019eae:	ab72      	add	r3, sp, #456	; 0x1c8
 8019eb0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8019eb4:	46c3      	mov	fp, r8
 8019eb6:	46a1      	mov	r9, r4
 8019eb8:	f1b9 0f00 	cmp.w	r9, #0
 8019ebc:	f1a5 0508 	sub.w	r5, r5, #8
 8019ec0:	dc77      	bgt.n	8019fb2 <__kernel_rem_pio2+0x202>
 8019ec2:	ec47 6b10 	vmov	d0, r6, r7
 8019ec6:	4650      	mov	r0, sl
 8019ec8:	f000 fe52 	bl	801ab70 <scalbn>
 8019ecc:	ec57 6b10 	vmov	r6, r7, d0
 8019ed0:	2200      	movs	r2, #0
 8019ed2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019ed6:	ee10 0a10 	vmov	r0, s0
 8019eda:	4639      	mov	r1, r7
 8019edc:	f7e6 fbac 	bl	8000638 <__aeabi_dmul>
 8019ee0:	ec41 0b10 	vmov	d0, r0, r1
 8019ee4:	f000 fdc4 	bl	801aa70 <floor>
 8019ee8:	4b7c      	ldr	r3, [pc, #496]	; (801a0dc <__kernel_rem_pio2+0x32c>)
 8019eea:	ec51 0b10 	vmov	r0, r1, d0
 8019eee:	2200      	movs	r2, #0
 8019ef0:	f7e6 fba2 	bl	8000638 <__aeabi_dmul>
 8019ef4:	4602      	mov	r2, r0
 8019ef6:	460b      	mov	r3, r1
 8019ef8:	4630      	mov	r0, r6
 8019efa:	4639      	mov	r1, r7
 8019efc:	f7e6 f9e4 	bl	80002c8 <__aeabi_dsub>
 8019f00:	460f      	mov	r7, r1
 8019f02:	4606      	mov	r6, r0
 8019f04:	f7e6 fe48 	bl	8000b98 <__aeabi_d2iz>
 8019f08:	9004      	str	r0, [sp, #16]
 8019f0a:	f7e6 fb2b 	bl	8000564 <__aeabi_i2d>
 8019f0e:	4602      	mov	r2, r0
 8019f10:	460b      	mov	r3, r1
 8019f12:	4630      	mov	r0, r6
 8019f14:	4639      	mov	r1, r7
 8019f16:	f7e6 f9d7 	bl	80002c8 <__aeabi_dsub>
 8019f1a:	f1ba 0f00 	cmp.w	sl, #0
 8019f1e:	4606      	mov	r6, r0
 8019f20:	460f      	mov	r7, r1
 8019f22:	dd6d      	ble.n	801a000 <__kernel_rem_pio2+0x250>
 8019f24:	1e62      	subs	r2, r4, #1
 8019f26:	ab0e      	add	r3, sp, #56	; 0x38
 8019f28:	9d04      	ldr	r5, [sp, #16]
 8019f2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019f2e:	f1ca 0118 	rsb	r1, sl, #24
 8019f32:	fa40 f301 	asr.w	r3, r0, r1
 8019f36:	441d      	add	r5, r3
 8019f38:	408b      	lsls	r3, r1
 8019f3a:	1ac0      	subs	r0, r0, r3
 8019f3c:	ab0e      	add	r3, sp, #56	; 0x38
 8019f3e:	9504      	str	r5, [sp, #16]
 8019f40:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8019f44:	f1ca 0317 	rsb	r3, sl, #23
 8019f48:	fa40 fb03 	asr.w	fp, r0, r3
 8019f4c:	f1bb 0f00 	cmp.w	fp, #0
 8019f50:	dd65      	ble.n	801a01e <__kernel_rem_pio2+0x26e>
 8019f52:	9b04      	ldr	r3, [sp, #16]
 8019f54:	2200      	movs	r2, #0
 8019f56:	3301      	adds	r3, #1
 8019f58:	9304      	str	r3, [sp, #16]
 8019f5a:	4615      	mov	r5, r2
 8019f5c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8019f60:	4294      	cmp	r4, r2
 8019f62:	f300 809c 	bgt.w	801a09e <__kernel_rem_pio2+0x2ee>
 8019f66:	f1ba 0f00 	cmp.w	sl, #0
 8019f6a:	dd07      	ble.n	8019f7c <__kernel_rem_pio2+0x1cc>
 8019f6c:	f1ba 0f01 	cmp.w	sl, #1
 8019f70:	f000 80c0 	beq.w	801a0f4 <__kernel_rem_pio2+0x344>
 8019f74:	f1ba 0f02 	cmp.w	sl, #2
 8019f78:	f000 80c6 	beq.w	801a108 <__kernel_rem_pio2+0x358>
 8019f7c:	f1bb 0f02 	cmp.w	fp, #2
 8019f80:	d14d      	bne.n	801a01e <__kernel_rem_pio2+0x26e>
 8019f82:	4632      	mov	r2, r6
 8019f84:	463b      	mov	r3, r7
 8019f86:	4956      	ldr	r1, [pc, #344]	; (801a0e0 <__kernel_rem_pio2+0x330>)
 8019f88:	2000      	movs	r0, #0
 8019f8a:	f7e6 f99d 	bl	80002c8 <__aeabi_dsub>
 8019f8e:	4606      	mov	r6, r0
 8019f90:	460f      	mov	r7, r1
 8019f92:	2d00      	cmp	r5, #0
 8019f94:	d043      	beq.n	801a01e <__kernel_rem_pio2+0x26e>
 8019f96:	4650      	mov	r0, sl
 8019f98:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801a0d0 <__kernel_rem_pio2+0x320>
 8019f9c:	f000 fde8 	bl	801ab70 <scalbn>
 8019fa0:	4630      	mov	r0, r6
 8019fa2:	4639      	mov	r1, r7
 8019fa4:	ec53 2b10 	vmov	r2, r3, d0
 8019fa8:	f7e6 f98e 	bl	80002c8 <__aeabi_dsub>
 8019fac:	4606      	mov	r6, r0
 8019fae:	460f      	mov	r7, r1
 8019fb0:	e035      	b.n	801a01e <__kernel_rem_pio2+0x26e>
 8019fb2:	4b4c      	ldr	r3, [pc, #304]	; (801a0e4 <__kernel_rem_pio2+0x334>)
 8019fb4:	2200      	movs	r2, #0
 8019fb6:	4630      	mov	r0, r6
 8019fb8:	4639      	mov	r1, r7
 8019fba:	f7e6 fb3d 	bl	8000638 <__aeabi_dmul>
 8019fbe:	f7e6 fdeb 	bl	8000b98 <__aeabi_d2iz>
 8019fc2:	f7e6 facf 	bl	8000564 <__aeabi_i2d>
 8019fc6:	4602      	mov	r2, r0
 8019fc8:	460b      	mov	r3, r1
 8019fca:	ec43 2b18 	vmov	d8, r2, r3
 8019fce:	4b46      	ldr	r3, [pc, #280]	; (801a0e8 <__kernel_rem_pio2+0x338>)
 8019fd0:	2200      	movs	r2, #0
 8019fd2:	f7e6 fb31 	bl	8000638 <__aeabi_dmul>
 8019fd6:	4602      	mov	r2, r0
 8019fd8:	460b      	mov	r3, r1
 8019fda:	4630      	mov	r0, r6
 8019fdc:	4639      	mov	r1, r7
 8019fde:	f7e6 f973 	bl	80002c8 <__aeabi_dsub>
 8019fe2:	f7e6 fdd9 	bl	8000b98 <__aeabi_d2iz>
 8019fe6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019fea:	f84b 0b04 	str.w	r0, [fp], #4
 8019fee:	ec51 0b18 	vmov	r0, r1, d8
 8019ff2:	f7e6 f96b 	bl	80002cc <__adddf3>
 8019ff6:	f109 39ff 	add.w	r9, r9, #4294967295
 8019ffa:	4606      	mov	r6, r0
 8019ffc:	460f      	mov	r7, r1
 8019ffe:	e75b      	b.n	8019eb8 <__kernel_rem_pio2+0x108>
 801a000:	d106      	bne.n	801a010 <__kernel_rem_pio2+0x260>
 801a002:	1e63      	subs	r3, r4, #1
 801a004:	aa0e      	add	r2, sp, #56	; 0x38
 801a006:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a00a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801a00e:	e79d      	b.n	8019f4c <__kernel_rem_pio2+0x19c>
 801a010:	4b36      	ldr	r3, [pc, #216]	; (801a0ec <__kernel_rem_pio2+0x33c>)
 801a012:	2200      	movs	r2, #0
 801a014:	f7e6 fd96 	bl	8000b44 <__aeabi_dcmpge>
 801a018:	2800      	cmp	r0, #0
 801a01a:	d13d      	bne.n	801a098 <__kernel_rem_pio2+0x2e8>
 801a01c:	4683      	mov	fp, r0
 801a01e:	2200      	movs	r2, #0
 801a020:	2300      	movs	r3, #0
 801a022:	4630      	mov	r0, r6
 801a024:	4639      	mov	r1, r7
 801a026:	f7e6 fd6f 	bl	8000b08 <__aeabi_dcmpeq>
 801a02a:	2800      	cmp	r0, #0
 801a02c:	f000 80c0 	beq.w	801a1b0 <__kernel_rem_pio2+0x400>
 801a030:	1e65      	subs	r5, r4, #1
 801a032:	462b      	mov	r3, r5
 801a034:	2200      	movs	r2, #0
 801a036:	9902      	ldr	r1, [sp, #8]
 801a038:	428b      	cmp	r3, r1
 801a03a:	da6c      	bge.n	801a116 <__kernel_rem_pio2+0x366>
 801a03c:	2a00      	cmp	r2, #0
 801a03e:	f000 8089 	beq.w	801a154 <__kernel_rem_pio2+0x3a4>
 801a042:	ab0e      	add	r3, sp, #56	; 0x38
 801a044:	f1aa 0a18 	sub.w	sl, sl, #24
 801a048:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	f000 80ad 	beq.w	801a1ac <__kernel_rem_pio2+0x3fc>
 801a052:	4650      	mov	r0, sl
 801a054:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801a0d0 <__kernel_rem_pio2+0x320>
 801a058:	f000 fd8a 	bl	801ab70 <scalbn>
 801a05c:	ab9a      	add	r3, sp, #616	; 0x268
 801a05e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a062:	ec57 6b10 	vmov	r6, r7, d0
 801a066:	00ec      	lsls	r4, r5, #3
 801a068:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801a06c:	46aa      	mov	sl, r5
 801a06e:	f1ba 0f00 	cmp.w	sl, #0
 801a072:	f280 80d6 	bge.w	801a222 <__kernel_rem_pio2+0x472>
 801a076:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801a0c8 <__kernel_rem_pio2+0x318>
 801a07a:	462e      	mov	r6, r5
 801a07c:	2e00      	cmp	r6, #0
 801a07e:	f2c0 8104 	blt.w	801a28a <__kernel_rem_pio2+0x4da>
 801a082:	ab72      	add	r3, sp, #456	; 0x1c8
 801a084:	ed8d 8b06 	vstr	d8, [sp, #24]
 801a088:	f8df a064 	ldr.w	sl, [pc, #100]	; 801a0f0 <__kernel_rem_pio2+0x340>
 801a08c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801a090:	f04f 0800 	mov.w	r8, #0
 801a094:	1baf      	subs	r7, r5, r6
 801a096:	e0ea      	b.n	801a26e <__kernel_rem_pio2+0x4be>
 801a098:	f04f 0b02 	mov.w	fp, #2
 801a09c:	e759      	b.n	8019f52 <__kernel_rem_pio2+0x1a2>
 801a09e:	f8d8 3000 	ldr.w	r3, [r8]
 801a0a2:	b955      	cbnz	r5, 801a0ba <__kernel_rem_pio2+0x30a>
 801a0a4:	b123      	cbz	r3, 801a0b0 <__kernel_rem_pio2+0x300>
 801a0a6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a0aa:	f8c8 3000 	str.w	r3, [r8]
 801a0ae:	2301      	movs	r3, #1
 801a0b0:	3201      	adds	r2, #1
 801a0b2:	f108 0804 	add.w	r8, r8, #4
 801a0b6:	461d      	mov	r5, r3
 801a0b8:	e752      	b.n	8019f60 <__kernel_rem_pio2+0x1b0>
 801a0ba:	1acb      	subs	r3, r1, r3
 801a0bc:	f8c8 3000 	str.w	r3, [r8]
 801a0c0:	462b      	mov	r3, r5
 801a0c2:	e7f5      	b.n	801a0b0 <__kernel_rem_pio2+0x300>
 801a0c4:	f3af 8000 	nop.w
	...
 801a0d4:	3ff00000 	.word	0x3ff00000
 801a0d8:	08049f40 	.word	0x08049f40
 801a0dc:	40200000 	.word	0x40200000
 801a0e0:	3ff00000 	.word	0x3ff00000
 801a0e4:	3e700000 	.word	0x3e700000
 801a0e8:	41700000 	.word	0x41700000
 801a0ec:	3fe00000 	.word	0x3fe00000
 801a0f0:	08049f00 	.word	0x08049f00
 801a0f4:	1e62      	subs	r2, r4, #1
 801a0f6:	ab0e      	add	r3, sp, #56	; 0x38
 801a0f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a0fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a100:	a90e      	add	r1, sp, #56	; 0x38
 801a102:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a106:	e739      	b.n	8019f7c <__kernel_rem_pio2+0x1cc>
 801a108:	1e62      	subs	r2, r4, #1
 801a10a:	ab0e      	add	r3, sp, #56	; 0x38
 801a10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a110:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a114:	e7f4      	b.n	801a100 <__kernel_rem_pio2+0x350>
 801a116:	a90e      	add	r1, sp, #56	; 0x38
 801a118:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a11c:	3b01      	subs	r3, #1
 801a11e:	430a      	orrs	r2, r1
 801a120:	e789      	b.n	801a036 <__kernel_rem_pio2+0x286>
 801a122:	3301      	adds	r3, #1
 801a124:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a128:	2900      	cmp	r1, #0
 801a12a:	d0fa      	beq.n	801a122 <__kernel_rem_pio2+0x372>
 801a12c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a12e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801a132:	446a      	add	r2, sp
 801a134:	3a98      	subs	r2, #152	; 0x98
 801a136:	920a      	str	r2, [sp, #40]	; 0x28
 801a138:	9a08      	ldr	r2, [sp, #32]
 801a13a:	18e3      	adds	r3, r4, r3
 801a13c:	18a5      	adds	r5, r4, r2
 801a13e:	aa22      	add	r2, sp, #136	; 0x88
 801a140:	f104 0801 	add.w	r8, r4, #1
 801a144:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801a148:	9304      	str	r3, [sp, #16]
 801a14a:	9b04      	ldr	r3, [sp, #16]
 801a14c:	4543      	cmp	r3, r8
 801a14e:	da04      	bge.n	801a15a <__kernel_rem_pio2+0x3aa>
 801a150:	461c      	mov	r4, r3
 801a152:	e6a3      	b.n	8019e9c <__kernel_rem_pio2+0xec>
 801a154:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a156:	2301      	movs	r3, #1
 801a158:	e7e4      	b.n	801a124 <__kernel_rem_pio2+0x374>
 801a15a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a15c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801a160:	f7e6 fa00 	bl	8000564 <__aeabi_i2d>
 801a164:	e8e5 0102 	strd	r0, r1, [r5], #8
 801a168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a16a:	46ab      	mov	fp, r5
 801a16c:	461c      	mov	r4, r3
 801a16e:	f04f 0900 	mov.w	r9, #0
 801a172:	2600      	movs	r6, #0
 801a174:	2700      	movs	r7, #0
 801a176:	9b06      	ldr	r3, [sp, #24]
 801a178:	4599      	cmp	r9, r3
 801a17a:	dd06      	ble.n	801a18a <__kernel_rem_pio2+0x3da>
 801a17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a17e:	e8e3 6702 	strd	r6, r7, [r3], #8
 801a182:	f108 0801 	add.w	r8, r8, #1
 801a186:	930a      	str	r3, [sp, #40]	; 0x28
 801a188:	e7df      	b.n	801a14a <__kernel_rem_pio2+0x39a>
 801a18a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a18e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a192:	f7e6 fa51 	bl	8000638 <__aeabi_dmul>
 801a196:	4602      	mov	r2, r0
 801a198:	460b      	mov	r3, r1
 801a19a:	4630      	mov	r0, r6
 801a19c:	4639      	mov	r1, r7
 801a19e:	f7e6 f895 	bl	80002cc <__adddf3>
 801a1a2:	f109 0901 	add.w	r9, r9, #1
 801a1a6:	4606      	mov	r6, r0
 801a1a8:	460f      	mov	r7, r1
 801a1aa:	e7e4      	b.n	801a176 <__kernel_rem_pio2+0x3c6>
 801a1ac:	3d01      	subs	r5, #1
 801a1ae:	e748      	b.n	801a042 <__kernel_rem_pio2+0x292>
 801a1b0:	ec47 6b10 	vmov	d0, r6, r7
 801a1b4:	f1ca 0000 	rsb	r0, sl, #0
 801a1b8:	f000 fcda 	bl	801ab70 <scalbn>
 801a1bc:	ec57 6b10 	vmov	r6, r7, d0
 801a1c0:	4ba0      	ldr	r3, [pc, #640]	; (801a444 <__kernel_rem_pio2+0x694>)
 801a1c2:	ee10 0a10 	vmov	r0, s0
 801a1c6:	2200      	movs	r2, #0
 801a1c8:	4639      	mov	r1, r7
 801a1ca:	f7e6 fcbb 	bl	8000b44 <__aeabi_dcmpge>
 801a1ce:	b1f8      	cbz	r0, 801a210 <__kernel_rem_pio2+0x460>
 801a1d0:	4b9d      	ldr	r3, [pc, #628]	; (801a448 <__kernel_rem_pio2+0x698>)
 801a1d2:	2200      	movs	r2, #0
 801a1d4:	4630      	mov	r0, r6
 801a1d6:	4639      	mov	r1, r7
 801a1d8:	f7e6 fa2e 	bl	8000638 <__aeabi_dmul>
 801a1dc:	f7e6 fcdc 	bl	8000b98 <__aeabi_d2iz>
 801a1e0:	4680      	mov	r8, r0
 801a1e2:	f7e6 f9bf 	bl	8000564 <__aeabi_i2d>
 801a1e6:	4b97      	ldr	r3, [pc, #604]	; (801a444 <__kernel_rem_pio2+0x694>)
 801a1e8:	2200      	movs	r2, #0
 801a1ea:	f7e6 fa25 	bl	8000638 <__aeabi_dmul>
 801a1ee:	460b      	mov	r3, r1
 801a1f0:	4602      	mov	r2, r0
 801a1f2:	4639      	mov	r1, r7
 801a1f4:	4630      	mov	r0, r6
 801a1f6:	f7e6 f867 	bl	80002c8 <__aeabi_dsub>
 801a1fa:	f7e6 fccd 	bl	8000b98 <__aeabi_d2iz>
 801a1fe:	1c65      	adds	r5, r4, #1
 801a200:	ab0e      	add	r3, sp, #56	; 0x38
 801a202:	f10a 0a18 	add.w	sl, sl, #24
 801a206:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a20a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a20e:	e720      	b.n	801a052 <__kernel_rem_pio2+0x2a2>
 801a210:	4630      	mov	r0, r6
 801a212:	4639      	mov	r1, r7
 801a214:	f7e6 fcc0 	bl	8000b98 <__aeabi_d2iz>
 801a218:	ab0e      	add	r3, sp, #56	; 0x38
 801a21a:	4625      	mov	r5, r4
 801a21c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a220:	e717      	b.n	801a052 <__kernel_rem_pio2+0x2a2>
 801a222:	ab0e      	add	r3, sp, #56	; 0x38
 801a224:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801a228:	f7e6 f99c 	bl	8000564 <__aeabi_i2d>
 801a22c:	4632      	mov	r2, r6
 801a22e:	463b      	mov	r3, r7
 801a230:	f7e6 fa02 	bl	8000638 <__aeabi_dmul>
 801a234:	4b84      	ldr	r3, [pc, #528]	; (801a448 <__kernel_rem_pio2+0x698>)
 801a236:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801a23a:	2200      	movs	r2, #0
 801a23c:	4630      	mov	r0, r6
 801a23e:	4639      	mov	r1, r7
 801a240:	f7e6 f9fa 	bl	8000638 <__aeabi_dmul>
 801a244:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a248:	4606      	mov	r6, r0
 801a24a:	460f      	mov	r7, r1
 801a24c:	e70f      	b.n	801a06e <__kernel_rem_pio2+0x2be>
 801a24e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801a252:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801a256:	f7e6 f9ef 	bl	8000638 <__aeabi_dmul>
 801a25a:	4602      	mov	r2, r0
 801a25c:	460b      	mov	r3, r1
 801a25e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a262:	f7e6 f833 	bl	80002cc <__adddf3>
 801a266:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a26a:	f108 0801 	add.w	r8, r8, #1
 801a26e:	9b02      	ldr	r3, [sp, #8]
 801a270:	4598      	cmp	r8, r3
 801a272:	dc01      	bgt.n	801a278 <__kernel_rem_pio2+0x4c8>
 801a274:	45b8      	cmp	r8, r7
 801a276:	ddea      	ble.n	801a24e <__kernel_rem_pio2+0x49e>
 801a278:	ed9d 7b06 	vldr	d7, [sp, #24]
 801a27c:	ab4a      	add	r3, sp, #296	; 0x128
 801a27e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801a282:	ed87 7b00 	vstr	d7, [r7]
 801a286:	3e01      	subs	r6, #1
 801a288:	e6f8      	b.n	801a07c <__kernel_rem_pio2+0x2cc>
 801a28a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a28c:	2b02      	cmp	r3, #2
 801a28e:	dc0b      	bgt.n	801a2a8 <__kernel_rem_pio2+0x4f8>
 801a290:	2b00      	cmp	r3, #0
 801a292:	dc35      	bgt.n	801a300 <__kernel_rem_pio2+0x550>
 801a294:	d059      	beq.n	801a34a <__kernel_rem_pio2+0x59a>
 801a296:	9b04      	ldr	r3, [sp, #16]
 801a298:	f003 0007 	and.w	r0, r3, #7
 801a29c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801a2a0:	ecbd 8b02 	vpop	{d8}
 801a2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2a8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a2aa:	2b03      	cmp	r3, #3
 801a2ac:	d1f3      	bne.n	801a296 <__kernel_rem_pio2+0x4e6>
 801a2ae:	ab4a      	add	r3, sp, #296	; 0x128
 801a2b0:	4423      	add	r3, r4
 801a2b2:	9306      	str	r3, [sp, #24]
 801a2b4:	461c      	mov	r4, r3
 801a2b6:	469a      	mov	sl, r3
 801a2b8:	9502      	str	r5, [sp, #8]
 801a2ba:	9b02      	ldr	r3, [sp, #8]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	f1aa 0a08 	sub.w	sl, sl, #8
 801a2c2:	dc6b      	bgt.n	801a39c <__kernel_rem_pio2+0x5ec>
 801a2c4:	46aa      	mov	sl, r5
 801a2c6:	f1ba 0f01 	cmp.w	sl, #1
 801a2ca:	f1a4 0408 	sub.w	r4, r4, #8
 801a2ce:	f300 8085 	bgt.w	801a3dc <__kernel_rem_pio2+0x62c>
 801a2d2:	9c06      	ldr	r4, [sp, #24]
 801a2d4:	2000      	movs	r0, #0
 801a2d6:	3408      	adds	r4, #8
 801a2d8:	2100      	movs	r1, #0
 801a2da:	2d01      	cmp	r5, #1
 801a2dc:	f300 809d 	bgt.w	801a41a <__kernel_rem_pio2+0x66a>
 801a2e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801a2e4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801a2e8:	f1bb 0f00 	cmp.w	fp, #0
 801a2ec:	f040 809b 	bne.w	801a426 <__kernel_rem_pio2+0x676>
 801a2f0:	9b01      	ldr	r3, [sp, #4]
 801a2f2:	e9c3 5600 	strd	r5, r6, [r3]
 801a2f6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801a2fa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a2fe:	e7ca      	b.n	801a296 <__kernel_rem_pio2+0x4e6>
 801a300:	3408      	adds	r4, #8
 801a302:	ab4a      	add	r3, sp, #296	; 0x128
 801a304:	441c      	add	r4, r3
 801a306:	462e      	mov	r6, r5
 801a308:	2000      	movs	r0, #0
 801a30a:	2100      	movs	r1, #0
 801a30c:	2e00      	cmp	r6, #0
 801a30e:	da36      	bge.n	801a37e <__kernel_rem_pio2+0x5ce>
 801a310:	f1bb 0f00 	cmp.w	fp, #0
 801a314:	d039      	beq.n	801a38a <__kernel_rem_pio2+0x5da>
 801a316:	4602      	mov	r2, r0
 801a318:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a31c:	9c01      	ldr	r4, [sp, #4]
 801a31e:	e9c4 2300 	strd	r2, r3, [r4]
 801a322:	4602      	mov	r2, r0
 801a324:	460b      	mov	r3, r1
 801a326:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801a32a:	f7e5 ffcd 	bl	80002c8 <__aeabi_dsub>
 801a32e:	ae4c      	add	r6, sp, #304	; 0x130
 801a330:	2401      	movs	r4, #1
 801a332:	42a5      	cmp	r5, r4
 801a334:	da2c      	bge.n	801a390 <__kernel_rem_pio2+0x5e0>
 801a336:	f1bb 0f00 	cmp.w	fp, #0
 801a33a:	d002      	beq.n	801a342 <__kernel_rem_pio2+0x592>
 801a33c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a340:	4619      	mov	r1, r3
 801a342:	9b01      	ldr	r3, [sp, #4]
 801a344:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a348:	e7a5      	b.n	801a296 <__kernel_rem_pio2+0x4e6>
 801a34a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801a34e:	eb0d 0403 	add.w	r4, sp, r3
 801a352:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a356:	2000      	movs	r0, #0
 801a358:	2100      	movs	r1, #0
 801a35a:	2d00      	cmp	r5, #0
 801a35c:	da09      	bge.n	801a372 <__kernel_rem_pio2+0x5c2>
 801a35e:	f1bb 0f00 	cmp.w	fp, #0
 801a362:	d002      	beq.n	801a36a <__kernel_rem_pio2+0x5ba>
 801a364:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a368:	4619      	mov	r1, r3
 801a36a:	9b01      	ldr	r3, [sp, #4]
 801a36c:	e9c3 0100 	strd	r0, r1, [r3]
 801a370:	e791      	b.n	801a296 <__kernel_rem_pio2+0x4e6>
 801a372:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a376:	f7e5 ffa9 	bl	80002cc <__adddf3>
 801a37a:	3d01      	subs	r5, #1
 801a37c:	e7ed      	b.n	801a35a <__kernel_rem_pio2+0x5aa>
 801a37e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a382:	f7e5 ffa3 	bl	80002cc <__adddf3>
 801a386:	3e01      	subs	r6, #1
 801a388:	e7c0      	b.n	801a30c <__kernel_rem_pio2+0x55c>
 801a38a:	4602      	mov	r2, r0
 801a38c:	460b      	mov	r3, r1
 801a38e:	e7c5      	b.n	801a31c <__kernel_rem_pio2+0x56c>
 801a390:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a394:	f7e5 ff9a 	bl	80002cc <__adddf3>
 801a398:	3401      	adds	r4, #1
 801a39a:	e7ca      	b.n	801a332 <__kernel_rem_pio2+0x582>
 801a39c:	e9da 8900 	ldrd	r8, r9, [sl]
 801a3a0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801a3a4:	9b02      	ldr	r3, [sp, #8]
 801a3a6:	3b01      	subs	r3, #1
 801a3a8:	9302      	str	r3, [sp, #8]
 801a3aa:	4632      	mov	r2, r6
 801a3ac:	463b      	mov	r3, r7
 801a3ae:	4640      	mov	r0, r8
 801a3b0:	4649      	mov	r1, r9
 801a3b2:	f7e5 ff8b 	bl	80002cc <__adddf3>
 801a3b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a3ba:	4602      	mov	r2, r0
 801a3bc:	460b      	mov	r3, r1
 801a3be:	4640      	mov	r0, r8
 801a3c0:	4649      	mov	r1, r9
 801a3c2:	f7e5 ff81 	bl	80002c8 <__aeabi_dsub>
 801a3c6:	4632      	mov	r2, r6
 801a3c8:	463b      	mov	r3, r7
 801a3ca:	f7e5 ff7f 	bl	80002cc <__adddf3>
 801a3ce:	ed9d 7b08 	vldr	d7, [sp, #32]
 801a3d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a3d6:	ed8a 7b00 	vstr	d7, [sl]
 801a3da:	e76e      	b.n	801a2ba <__kernel_rem_pio2+0x50a>
 801a3dc:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a3e0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801a3e4:	4640      	mov	r0, r8
 801a3e6:	4632      	mov	r2, r6
 801a3e8:	463b      	mov	r3, r7
 801a3ea:	4649      	mov	r1, r9
 801a3ec:	f7e5 ff6e 	bl	80002cc <__adddf3>
 801a3f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a3f4:	4602      	mov	r2, r0
 801a3f6:	460b      	mov	r3, r1
 801a3f8:	4640      	mov	r0, r8
 801a3fa:	4649      	mov	r1, r9
 801a3fc:	f7e5 ff64 	bl	80002c8 <__aeabi_dsub>
 801a400:	4632      	mov	r2, r6
 801a402:	463b      	mov	r3, r7
 801a404:	f7e5 ff62 	bl	80002cc <__adddf3>
 801a408:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a40c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a410:	ed84 7b00 	vstr	d7, [r4]
 801a414:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a418:	e755      	b.n	801a2c6 <__kernel_rem_pio2+0x516>
 801a41a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a41e:	f7e5 ff55 	bl	80002cc <__adddf3>
 801a422:	3d01      	subs	r5, #1
 801a424:	e759      	b.n	801a2da <__kernel_rem_pio2+0x52a>
 801a426:	9b01      	ldr	r3, [sp, #4]
 801a428:	9a01      	ldr	r2, [sp, #4]
 801a42a:	601d      	str	r5, [r3, #0]
 801a42c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801a430:	605c      	str	r4, [r3, #4]
 801a432:	609f      	str	r7, [r3, #8]
 801a434:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801a438:	60d3      	str	r3, [r2, #12]
 801a43a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a43e:	6110      	str	r0, [r2, #16]
 801a440:	6153      	str	r3, [r2, #20]
 801a442:	e728      	b.n	801a296 <__kernel_rem_pio2+0x4e6>
 801a444:	41700000 	.word	0x41700000
 801a448:	3e700000 	.word	0x3e700000
 801a44c:	00000000 	.word	0x00000000

0801a450 <__kernel_sin>:
 801a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a454:	ed2d 8b04 	vpush	{d8-d9}
 801a458:	eeb0 8a41 	vmov.f32	s16, s2
 801a45c:	eef0 8a61 	vmov.f32	s17, s3
 801a460:	ec55 4b10 	vmov	r4, r5, d0
 801a464:	b083      	sub	sp, #12
 801a466:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a46a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a46e:	9001      	str	r0, [sp, #4]
 801a470:	da06      	bge.n	801a480 <__kernel_sin+0x30>
 801a472:	ee10 0a10 	vmov	r0, s0
 801a476:	4629      	mov	r1, r5
 801a478:	f7e6 fb8e 	bl	8000b98 <__aeabi_d2iz>
 801a47c:	2800      	cmp	r0, #0
 801a47e:	d051      	beq.n	801a524 <__kernel_sin+0xd4>
 801a480:	4622      	mov	r2, r4
 801a482:	462b      	mov	r3, r5
 801a484:	4620      	mov	r0, r4
 801a486:	4629      	mov	r1, r5
 801a488:	f7e6 f8d6 	bl	8000638 <__aeabi_dmul>
 801a48c:	4682      	mov	sl, r0
 801a48e:	468b      	mov	fp, r1
 801a490:	4602      	mov	r2, r0
 801a492:	460b      	mov	r3, r1
 801a494:	4620      	mov	r0, r4
 801a496:	4629      	mov	r1, r5
 801a498:	f7e6 f8ce 	bl	8000638 <__aeabi_dmul>
 801a49c:	a341      	add	r3, pc, #260	; (adr r3, 801a5a4 <__kernel_sin+0x154>)
 801a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4a2:	4680      	mov	r8, r0
 801a4a4:	4689      	mov	r9, r1
 801a4a6:	4650      	mov	r0, sl
 801a4a8:	4659      	mov	r1, fp
 801a4aa:	f7e6 f8c5 	bl	8000638 <__aeabi_dmul>
 801a4ae:	a33f      	add	r3, pc, #252	; (adr r3, 801a5ac <__kernel_sin+0x15c>)
 801a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4b4:	f7e5 ff08 	bl	80002c8 <__aeabi_dsub>
 801a4b8:	4652      	mov	r2, sl
 801a4ba:	465b      	mov	r3, fp
 801a4bc:	f7e6 f8bc 	bl	8000638 <__aeabi_dmul>
 801a4c0:	a33c      	add	r3, pc, #240	; (adr r3, 801a5b4 <__kernel_sin+0x164>)
 801a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4c6:	f7e5 ff01 	bl	80002cc <__adddf3>
 801a4ca:	4652      	mov	r2, sl
 801a4cc:	465b      	mov	r3, fp
 801a4ce:	f7e6 f8b3 	bl	8000638 <__aeabi_dmul>
 801a4d2:	a33a      	add	r3, pc, #232	; (adr r3, 801a5bc <__kernel_sin+0x16c>)
 801a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4d8:	f7e5 fef6 	bl	80002c8 <__aeabi_dsub>
 801a4dc:	4652      	mov	r2, sl
 801a4de:	465b      	mov	r3, fp
 801a4e0:	f7e6 f8aa 	bl	8000638 <__aeabi_dmul>
 801a4e4:	a337      	add	r3, pc, #220	; (adr r3, 801a5c4 <__kernel_sin+0x174>)
 801a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ea:	f7e5 feef 	bl	80002cc <__adddf3>
 801a4ee:	9b01      	ldr	r3, [sp, #4]
 801a4f0:	4606      	mov	r6, r0
 801a4f2:	460f      	mov	r7, r1
 801a4f4:	b9eb      	cbnz	r3, 801a532 <__kernel_sin+0xe2>
 801a4f6:	4602      	mov	r2, r0
 801a4f8:	460b      	mov	r3, r1
 801a4fa:	4650      	mov	r0, sl
 801a4fc:	4659      	mov	r1, fp
 801a4fe:	f7e6 f89b 	bl	8000638 <__aeabi_dmul>
 801a502:	a325      	add	r3, pc, #148	; (adr r3, 801a598 <__kernel_sin+0x148>)
 801a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a508:	f7e5 fede 	bl	80002c8 <__aeabi_dsub>
 801a50c:	4642      	mov	r2, r8
 801a50e:	464b      	mov	r3, r9
 801a510:	f7e6 f892 	bl	8000638 <__aeabi_dmul>
 801a514:	4602      	mov	r2, r0
 801a516:	460b      	mov	r3, r1
 801a518:	4620      	mov	r0, r4
 801a51a:	4629      	mov	r1, r5
 801a51c:	f7e5 fed6 	bl	80002cc <__adddf3>
 801a520:	4604      	mov	r4, r0
 801a522:	460d      	mov	r5, r1
 801a524:	ec45 4b10 	vmov	d0, r4, r5
 801a528:	b003      	add	sp, #12
 801a52a:	ecbd 8b04 	vpop	{d8-d9}
 801a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a532:	4b1b      	ldr	r3, [pc, #108]	; (801a5a0 <__kernel_sin+0x150>)
 801a534:	ec51 0b18 	vmov	r0, r1, d8
 801a538:	2200      	movs	r2, #0
 801a53a:	f7e6 f87d 	bl	8000638 <__aeabi_dmul>
 801a53e:	4632      	mov	r2, r6
 801a540:	ec41 0b19 	vmov	d9, r0, r1
 801a544:	463b      	mov	r3, r7
 801a546:	4640      	mov	r0, r8
 801a548:	4649      	mov	r1, r9
 801a54a:	f7e6 f875 	bl	8000638 <__aeabi_dmul>
 801a54e:	4602      	mov	r2, r0
 801a550:	460b      	mov	r3, r1
 801a552:	ec51 0b19 	vmov	r0, r1, d9
 801a556:	f7e5 feb7 	bl	80002c8 <__aeabi_dsub>
 801a55a:	4652      	mov	r2, sl
 801a55c:	465b      	mov	r3, fp
 801a55e:	f7e6 f86b 	bl	8000638 <__aeabi_dmul>
 801a562:	ec53 2b18 	vmov	r2, r3, d8
 801a566:	f7e5 feaf 	bl	80002c8 <__aeabi_dsub>
 801a56a:	a30b      	add	r3, pc, #44	; (adr r3, 801a598 <__kernel_sin+0x148>)
 801a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a570:	4606      	mov	r6, r0
 801a572:	460f      	mov	r7, r1
 801a574:	4640      	mov	r0, r8
 801a576:	4649      	mov	r1, r9
 801a578:	f7e6 f85e 	bl	8000638 <__aeabi_dmul>
 801a57c:	4602      	mov	r2, r0
 801a57e:	460b      	mov	r3, r1
 801a580:	4630      	mov	r0, r6
 801a582:	4639      	mov	r1, r7
 801a584:	f7e5 fea2 	bl	80002cc <__adddf3>
 801a588:	4602      	mov	r2, r0
 801a58a:	460b      	mov	r3, r1
 801a58c:	4620      	mov	r0, r4
 801a58e:	4629      	mov	r1, r5
 801a590:	f7e5 fe9a 	bl	80002c8 <__aeabi_dsub>
 801a594:	e7c4      	b.n	801a520 <__kernel_sin+0xd0>
 801a596:	bf00      	nop
 801a598:	55555549 	.word	0x55555549
 801a59c:	3fc55555 	.word	0x3fc55555
 801a5a0:	3fe00000 	.word	0x3fe00000
 801a5a4:	5acfd57c 	.word	0x5acfd57c
 801a5a8:	3de5d93a 	.word	0x3de5d93a
 801a5ac:	8a2b9ceb 	.word	0x8a2b9ceb
 801a5b0:	3e5ae5e6 	.word	0x3e5ae5e6
 801a5b4:	57b1fe7d 	.word	0x57b1fe7d
 801a5b8:	3ec71de3 	.word	0x3ec71de3
 801a5bc:	19c161d5 	.word	0x19c161d5
 801a5c0:	3f2a01a0 	.word	0x3f2a01a0
 801a5c4:	1110f8a6 	.word	0x1110f8a6
 801a5c8:	3f811111 	.word	0x3f811111
 801a5cc:	00000000 	.word	0x00000000

0801a5d0 <__kernel_tan>:
 801a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5d4:	ed2d 8b06 	vpush	{d8-d10}
 801a5d8:	ec5b ab10 	vmov	sl, fp, d0
 801a5dc:	4be0      	ldr	r3, [pc, #896]	; (801a960 <__kernel_tan+0x390>)
 801a5de:	b083      	sub	sp, #12
 801a5e0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801a5e4:	429f      	cmp	r7, r3
 801a5e6:	ec59 8b11 	vmov	r8, r9, d1
 801a5ea:	4606      	mov	r6, r0
 801a5ec:	f8cd b000 	str.w	fp, [sp]
 801a5f0:	dc61      	bgt.n	801a6b6 <__kernel_tan+0xe6>
 801a5f2:	ee10 0a10 	vmov	r0, s0
 801a5f6:	4659      	mov	r1, fp
 801a5f8:	f7e6 face 	bl	8000b98 <__aeabi_d2iz>
 801a5fc:	4605      	mov	r5, r0
 801a5fe:	2800      	cmp	r0, #0
 801a600:	f040 8083 	bne.w	801a70a <__kernel_tan+0x13a>
 801a604:	1c73      	adds	r3, r6, #1
 801a606:	4652      	mov	r2, sl
 801a608:	4313      	orrs	r3, r2
 801a60a:	433b      	orrs	r3, r7
 801a60c:	d112      	bne.n	801a634 <__kernel_tan+0x64>
 801a60e:	ec4b ab10 	vmov	d0, sl, fp
 801a612:	f000 fa17 	bl	801aa44 <fabs>
 801a616:	49d3      	ldr	r1, [pc, #844]	; (801a964 <__kernel_tan+0x394>)
 801a618:	ec53 2b10 	vmov	r2, r3, d0
 801a61c:	2000      	movs	r0, #0
 801a61e:	f7e6 f935 	bl	800088c <__aeabi_ddiv>
 801a622:	4682      	mov	sl, r0
 801a624:	468b      	mov	fp, r1
 801a626:	ec4b ab10 	vmov	d0, sl, fp
 801a62a:	b003      	add	sp, #12
 801a62c:	ecbd 8b06 	vpop	{d8-d10}
 801a630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a634:	2e01      	cmp	r6, #1
 801a636:	d0f6      	beq.n	801a626 <__kernel_tan+0x56>
 801a638:	4642      	mov	r2, r8
 801a63a:	464b      	mov	r3, r9
 801a63c:	4650      	mov	r0, sl
 801a63e:	4659      	mov	r1, fp
 801a640:	f7e5 fe44 	bl	80002cc <__adddf3>
 801a644:	4602      	mov	r2, r0
 801a646:	460b      	mov	r3, r1
 801a648:	460f      	mov	r7, r1
 801a64a:	2000      	movs	r0, #0
 801a64c:	49c6      	ldr	r1, [pc, #792]	; (801a968 <__kernel_tan+0x398>)
 801a64e:	f7e6 f91d 	bl	800088c <__aeabi_ddiv>
 801a652:	e9cd 0100 	strd	r0, r1, [sp]
 801a656:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a65a:	462e      	mov	r6, r5
 801a65c:	4652      	mov	r2, sl
 801a65e:	462c      	mov	r4, r5
 801a660:	4630      	mov	r0, r6
 801a662:	461d      	mov	r5, r3
 801a664:	4639      	mov	r1, r7
 801a666:	465b      	mov	r3, fp
 801a668:	f7e5 fe2e 	bl	80002c8 <__aeabi_dsub>
 801a66c:	4602      	mov	r2, r0
 801a66e:	460b      	mov	r3, r1
 801a670:	4640      	mov	r0, r8
 801a672:	4649      	mov	r1, r9
 801a674:	f7e5 fe28 	bl	80002c8 <__aeabi_dsub>
 801a678:	4632      	mov	r2, r6
 801a67a:	462b      	mov	r3, r5
 801a67c:	f7e5 ffdc 	bl	8000638 <__aeabi_dmul>
 801a680:	4632      	mov	r2, r6
 801a682:	4680      	mov	r8, r0
 801a684:	4689      	mov	r9, r1
 801a686:	462b      	mov	r3, r5
 801a688:	4630      	mov	r0, r6
 801a68a:	4639      	mov	r1, r7
 801a68c:	f7e5 ffd4 	bl	8000638 <__aeabi_dmul>
 801a690:	4bb4      	ldr	r3, [pc, #720]	; (801a964 <__kernel_tan+0x394>)
 801a692:	2200      	movs	r2, #0
 801a694:	f7e5 fe1a 	bl	80002cc <__adddf3>
 801a698:	4602      	mov	r2, r0
 801a69a:	460b      	mov	r3, r1
 801a69c:	4640      	mov	r0, r8
 801a69e:	4649      	mov	r1, r9
 801a6a0:	f7e5 fe14 	bl	80002cc <__adddf3>
 801a6a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a6a8:	f7e5 ffc6 	bl	8000638 <__aeabi_dmul>
 801a6ac:	4622      	mov	r2, r4
 801a6ae:	462b      	mov	r3, r5
 801a6b0:	f7e5 fe0c 	bl	80002cc <__adddf3>
 801a6b4:	e7b5      	b.n	801a622 <__kernel_tan+0x52>
 801a6b6:	4bad      	ldr	r3, [pc, #692]	; (801a96c <__kernel_tan+0x39c>)
 801a6b8:	429f      	cmp	r7, r3
 801a6ba:	dd26      	ble.n	801a70a <__kernel_tan+0x13a>
 801a6bc:	9b00      	ldr	r3, [sp, #0]
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	da09      	bge.n	801a6d6 <__kernel_tan+0x106>
 801a6c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a6c6:	469b      	mov	fp, r3
 801a6c8:	ee10 aa10 	vmov	sl, s0
 801a6cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a6d0:	ee11 8a10 	vmov	r8, s2
 801a6d4:	4699      	mov	r9, r3
 801a6d6:	4652      	mov	r2, sl
 801a6d8:	465b      	mov	r3, fp
 801a6da:	a183      	add	r1, pc, #524	; (adr r1, 801a8e8 <__kernel_tan+0x318>)
 801a6dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6e0:	f7e5 fdf2 	bl	80002c8 <__aeabi_dsub>
 801a6e4:	4642      	mov	r2, r8
 801a6e6:	464b      	mov	r3, r9
 801a6e8:	4604      	mov	r4, r0
 801a6ea:	460d      	mov	r5, r1
 801a6ec:	a180      	add	r1, pc, #512	; (adr r1, 801a8f0 <__kernel_tan+0x320>)
 801a6ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6f2:	f7e5 fde9 	bl	80002c8 <__aeabi_dsub>
 801a6f6:	4622      	mov	r2, r4
 801a6f8:	462b      	mov	r3, r5
 801a6fa:	f7e5 fde7 	bl	80002cc <__adddf3>
 801a6fe:	f04f 0800 	mov.w	r8, #0
 801a702:	4682      	mov	sl, r0
 801a704:	468b      	mov	fp, r1
 801a706:	f04f 0900 	mov.w	r9, #0
 801a70a:	4652      	mov	r2, sl
 801a70c:	465b      	mov	r3, fp
 801a70e:	4650      	mov	r0, sl
 801a710:	4659      	mov	r1, fp
 801a712:	f7e5 ff91 	bl	8000638 <__aeabi_dmul>
 801a716:	4602      	mov	r2, r0
 801a718:	460b      	mov	r3, r1
 801a71a:	ec43 2b18 	vmov	d8, r2, r3
 801a71e:	f7e5 ff8b 	bl	8000638 <__aeabi_dmul>
 801a722:	ec53 2b18 	vmov	r2, r3, d8
 801a726:	4604      	mov	r4, r0
 801a728:	460d      	mov	r5, r1
 801a72a:	4650      	mov	r0, sl
 801a72c:	4659      	mov	r1, fp
 801a72e:	f7e5 ff83 	bl	8000638 <__aeabi_dmul>
 801a732:	a371      	add	r3, pc, #452	; (adr r3, 801a8f8 <__kernel_tan+0x328>)
 801a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a738:	ec41 0b19 	vmov	d9, r0, r1
 801a73c:	4620      	mov	r0, r4
 801a73e:	4629      	mov	r1, r5
 801a740:	f7e5 ff7a 	bl	8000638 <__aeabi_dmul>
 801a744:	a36e      	add	r3, pc, #440	; (adr r3, 801a900 <__kernel_tan+0x330>)
 801a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a74a:	f7e5 fdbf 	bl	80002cc <__adddf3>
 801a74e:	4622      	mov	r2, r4
 801a750:	462b      	mov	r3, r5
 801a752:	f7e5 ff71 	bl	8000638 <__aeabi_dmul>
 801a756:	a36c      	add	r3, pc, #432	; (adr r3, 801a908 <__kernel_tan+0x338>)
 801a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a75c:	f7e5 fdb6 	bl	80002cc <__adddf3>
 801a760:	4622      	mov	r2, r4
 801a762:	462b      	mov	r3, r5
 801a764:	f7e5 ff68 	bl	8000638 <__aeabi_dmul>
 801a768:	a369      	add	r3, pc, #420	; (adr r3, 801a910 <__kernel_tan+0x340>)
 801a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a76e:	f7e5 fdad 	bl	80002cc <__adddf3>
 801a772:	4622      	mov	r2, r4
 801a774:	462b      	mov	r3, r5
 801a776:	f7e5 ff5f 	bl	8000638 <__aeabi_dmul>
 801a77a:	a367      	add	r3, pc, #412	; (adr r3, 801a918 <__kernel_tan+0x348>)
 801a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a780:	f7e5 fda4 	bl	80002cc <__adddf3>
 801a784:	4622      	mov	r2, r4
 801a786:	462b      	mov	r3, r5
 801a788:	f7e5 ff56 	bl	8000638 <__aeabi_dmul>
 801a78c:	a364      	add	r3, pc, #400	; (adr r3, 801a920 <__kernel_tan+0x350>)
 801a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a792:	f7e5 fd9b 	bl	80002cc <__adddf3>
 801a796:	ec53 2b18 	vmov	r2, r3, d8
 801a79a:	f7e5 ff4d 	bl	8000638 <__aeabi_dmul>
 801a79e:	a362      	add	r3, pc, #392	; (adr r3, 801a928 <__kernel_tan+0x358>)
 801a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7a4:	ec41 0b1a 	vmov	d10, r0, r1
 801a7a8:	4620      	mov	r0, r4
 801a7aa:	4629      	mov	r1, r5
 801a7ac:	f7e5 ff44 	bl	8000638 <__aeabi_dmul>
 801a7b0:	a35f      	add	r3, pc, #380	; (adr r3, 801a930 <__kernel_tan+0x360>)
 801a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7b6:	f7e5 fd89 	bl	80002cc <__adddf3>
 801a7ba:	4622      	mov	r2, r4
 801a7bc:	462b      	mov	r3, r5
 801a7be:	f7e5 ff3b 	bl	8000638 <__aeabi_dmul>
 801a7c2:	a35d      	add	r3, pc, #372	; (adr r3, 801a938 <__kernel_tan+0x368>)
 801a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7c8:	f7e5 fd80 	bl	80002cc <__adddf3>
 801a7cc:	4622      	mov	r2, r4
 801a7ce:	462b      	mov	r3, r5
 801a7d0:	f7e5 ff32 	bl	8000638 <__aeabi_dmul>
 801a7d4:	a35a      	add	r3, pc, #360	; (adr r3, 801a940 <__kernel_tan+0x370>)
 801a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7da:	f7e5 fd77 	bl	80002cc <__adddf3>
 801a7de:	4622      	mov	r2, r4
 801a7e0:	462b      	mov	r3, r5
 801a7e2:	f7e5 ff29 	bl	8000638 <__aeabi_dmul>
 801a7e6:	a358      	add	r3, pc, #352	; (adr r3, 801a948 <__kernel_tan+0x378>)
 801a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ec:	f7e5 fd6e 	bl	80002cc <__adddf3>
 801a7f0:	4622      	mov	r2, r4
 801a7f2:	462b      	mov	r3, r5
 801a7f4:	f7e5 ff20 	bl	8000638 <__aeabi_dmul>
 801a7f8:	a355      	add	r3, pc, #340	; (adr r3, 801a950 <__kernel_tan+0x380>)
 801a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7fe:	f7e5 fd65 	bl	80002cc <__adddf3>
 801a802:	4602      	mov	r2, r0
 801a804:	460b      	mov	r3, r1
 801a806:	ec51 0b1a 	vmov	r0, r1, d10
 801a80a:	f7e5 fd5f 	bl	80002cc <__adddf3>
 801a80e:	ec53 2b19 	vmov	r2, r3, d9
 801a812:	f7e5 ff11 	bl	8000638 <__aeabi_dmul>
 801a816:	4642      	mov	r2, r8
 801a818:	464b      	mov	r3, r9
 801a81a:	f7e5 fd57 	bl	80002cc <__adddf3>
 801a81e:	ec53 2b18 	vmov	r2, r3, d8
 801a822:	f7e5 ff09 	bl	8000638 <__aeabi_dmul>
 801a826:	4642      	mov	r2, r8
 801a828:	464b      	mov	r3, r9
 801a82a:	f7e5 fd4f 	bl	80002cc <__adddf3>
 801a82e:	a34a      	add	r3, pc, #296	; (adr r3, 801a958 <__kernel_tan+0x388>)
 801a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a834:	4604      	mov	r4, r0
 801a836:	460d      	mov	r5, r1
 801a838:	ec51 0b19 	vmov	r0, r1, d9
 801a83c:	f7e5 fefc 	bl	8000638 <__aeabi_dmul>
 801a840:	4622      	mov	r2, r4
 801a842:	462b      	mov	r3, r5
 801a844:	f7e5 fd42 	bl	80002cc <__adddf3>
 801a848:	460b      	mov	r3, r1
 801a84a:	ec41 0b18 	vmov	d8, r0, r1
 801a84e:	4602      	mov	r2, r0
 801a850:	4659      	mov	r1, fp
 801a852:	4650      	mov	r0, sl
 801a854:	f7e5 fd3a 	bl	80002cc <__adddf3>
 801a858:	4b44      	ldr	r3, [pc, #272]	; (801a96c <__kernel_tan+0x39c>)
 801a85a:	429f      	cmp	r7, r3
 801a85c:	4604      	mov	r4, r0
 801a85e:	460d      	mov	r5, r1
 801a860:	f340 8086 	ble.w	801a970 <__kernel_tan+0x3a0>
 801a864:	4630      	mov	r0, r6
 801a866:	f7e5 fe7d 	bl	8000564 <__aeabi_i2d>
 801a86a:	4622      	mov	r2, r4
 801a86c:	4680      	mov	r8, r0
 801a86e:	4689      	mov	r9, r1
 801a870:	462b      	mov	r3, r5
 801a872:	4620      	mov	r0, r4
 801a874:	4629      	mov	r1, r5
 801a876:	f7e5 fedf 	bl	8000638 <__aeabi_dmul>
 801a87a:	4642      	mov	r2, r8
 801a87c:	4606      	mov	r6, r0
 801a87e:	460f      	mov	r7, r1
 801a880:	464b      	mov	r3, r9
 801a882:	4620      	mov	r0, r4
 801a884:	4629      	mov	r1, r5
 801a886:	f7e5 fd21 	bl	80002cc <__adddf3>
 801a88a:	4602      	mov	r2, r0
 801a88c:	460b      	mov	r3, r1
 801a88e:	4630      	mov	r0, r6
 801a890:	4639      	mov	r1, r7
 801a892:	f7e5 fffb 	bl	800088c <__aeabi_ddiv>
 801a896:	ec53 2b18 	vmov	r2, r3, d8
 801a89a:	f7e5 fd15 	bl	80002c8 <__aeabi_dsub>
 801a89e:	4602      	mov	r2, r0
 801a8a0:	460b      	mov	r3, r1
 801a8a2:	4650      	mov	r0, sl
 801a8a4:	4659      	mov	r1, fp
 801a8a6:	f7e5 fd0f 	bl	80002c8 <__aeabi_dsub>
 801a8aa:	4602      	mov	r2, r0
 801a8ac:	460b      	mov	r3, r1
 801a8ae:	f7e5 fd0d 	bl	80002cc <__adddf3>
 801a8b2:	4602      	mov	r2, r0
 801a8b4:	460b      	mov	r3, r1
 801a8b6:	4640      	mov	r0, r8
 801a8b8:	4649      	mov	r1, r9
 801a8ba:	f7e5 fd05 	bl	80002c8 <__aeabi_dsub>
 801a8be:	9b00      	ldr	r3, [sp, #0]
 801a8c0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801a8c4:	f00a 0a02 	and.w	sl, sl, #2
 801a8c8:	4604      	mov	r4, r0
 801a8ca:	f1ca 0001 	rsb	r0, sl, #1
 801a8ce:	460d      	mov	r5, r1
 801a8d0:	f7e5 fe48 	bl	8000564 <__aeabi_i2d>
 801a8d4:	4602      	mov	r2, r0
 801a8d6:	460b      	mov	r3, r1
 801a8d8:	4620      	mov	r0, r4
 801a8da:	4629      	mov	r1, r5
 801a8dc:	f7e5 feac 	bl	8000638 <__aeabi_dmul>
 801a8e0:	e69f      	b.n	801a622 <__kernel_tan+0x52>
 801a8e2:	bf00      	nop
 801a8e4:	f3af 8000 	nop.w
 801a8e8:	54442d18 	.word	0x54442d18
 801a8ec:	3fe921fb 	.word	0x3fe921fb
 801a8f0:	33145c07 	.word	0x33145c07
 801a8f4:	3c81a626 	.word	0x3c81a626
 801a8f8:	74bf7ad4 	.word	0x74bf7ad4
 801a8fc:	3efb2a70 	.word	0x3efb2a70
 801a900:	32f0a7e9 	.word	0x32f0a7e9
 801a904:	3f12b80f 	.word	0x3f12b80f
 801a908:	1a8d1068 	.word	0x1a8d1068
 801a90c:	3f3026f7 	.word	0x3f3026f7
 801a910:	fee08315 	.word	0xfee08315
 801a914:	3f57dbc8 	.word	0x3f57dbc8
 801a918:	e96e8493 	.word	0xe96e8493
 801a91c:	3f8226e3 	.word	0x3f8226e3
 801a920:	1bb341fe 	.word	0x1bb341fe
 801a924:	3faba1ba 	.word	0x3faba1ba
 801a928:	db605373 	.word	0xdb605373
 801a92c:	bef375cb 	.word	0xbef375cb
 801a930:	a03792a6 	.word	0xa03792a6
 801a934:	3f147e88 	.word	0x3f147e88
 801a938:	f2f26501 	.word	0xf2f26501
 801a93c:	3f4344d8 	.word	0x3f4344d8
 801a940:	c9560328 	.word	0xc9560328
 801a944:	3f6d6d22 	.word	0x3f6d6d22
 801a948:	8406d637 	.word	0x8406d637
 801a94c:	3f9664f4 	.word	0x3f9664f4
 801a950:	1110fe7a 	.word	0x1110fe7a
 801a954:	3fc11111 	.word	0x3fc11111
 801a958:	55555563 	.word	0x55555563
 801a95c:	3fd55555 	.word	0x3fd55555
 801a960:	3e2fffff 	.word	0x3e2fffff
 801a964:	3ff00000 	.word	0x3ff00000
 801a968:	bff00000 	.word	0xbff00000
 801a96c:	3fe59427 	.word	0x3fe59427
 801a970:	2e01      	cmp	r6, #1
 801a972:	d02f      	beq.n	801a9d4 <__kernel_tan+0x404>
 801a974:	460f      	mov	r7, r1
 801a976:	4602      	mov	r2, r0
 801a978:	460b      	mov	r3, r1
 801a97a:	4689      	mov	r9, r1
 801a97c:	2000      	movs	r0, #0
 801a97e:	4917      	ldr	r1, [pc, #92]	; (801a9dc <__kernel_tan+0x40c>)
 801a980:	f7e5 ff84 	bl	800088c <__aeabi_ddiv>
 801a984:	2600      	movs	r6, #0
 801a986:	e9cd 0100 	strd	r0, r1, [sp]
 801a98a:	4652      	mov	r2, sl
 801a98c:	465b      	mov	r3, fp
 801a98e:	4630      	mov	r0, r6
 801a990:	4639      	mov	r1, r7
 801a992:	f7e5 fc99 	bl	80002c8 <__aeabi_dsub>
 801a996:	e9dd 4500 	ldrd	r4, r5, [sp]
 801a99a:	4602      	mov	r2, r0
 801a99c:	460b      	mov	r3, r1
 801a99e:	ec51 0b18 	vmov	r0, r1, d8
 801a9a2:	f7e5 fc91 	bl	80002c8 <__aeabi_dsub>
 801a9a6:	4632      	mov	r2, r6
 801a9a8:	462b      	mov	r3, r5
 801a9aa:	f7e5 fe45 	bl	8000638 <__aeabi_dmul>
 801a9ae:	46b0      	mov	r8, r6
 801a9b0:	460f      	mov	r7, r1
 801a9b2:	4642      	mov	r2, r8
 801a9b4:	462b      	mov	r3, r5
 801a9b6:	4634      	mov	r4, r6
 801a9b8:	4649      	mov	r1, r9
 801a9ba:	4606      	mov	r6, r0
 801a9bc:	4640      	mov	r0, r8
 801a9be:	f7e5 fe3b 	bl	8000638 <__aeabi_dmul>
 801a9c2:	4b07      	ldr	r3, [pc, #28]	; (801a9e0 <__kernel_tan+0x410>)
 801a9c4:	2200      	movs	r2, #0
 801a9c6:	f7e5 fc81 	bl	80002cc <__adddf3>
 801a9ca:	4602      	mov	r2, r0
 801a9cc:	460b      	mov	r3, r1
 801a9ce:	4630      	mov	r0, r6
 801a9d0:	4639      	mov	r1, r7
 801a9d2:	e665      	b.n	801a6a0 <__kernel_tan+0xd0>
 801a9d4:	4682      	mov	sl, r0
 801a9d6:	468b      	mov	fp, r1
 801a9d8:	e625      	b.n	801a626 <__kernel_tan+0x56>
 801a9da:	bf00      	nop
 801a9dc:	bff00000 	.word	0xbff00000
 801a9e0:	3ff00000 	.word	0x3ff00000

0801a9e4 <with_errno>:
 801a9e4:	b570      	push	{r4, r5, r6, lr}
 801a9e6:	4604      	mov	r4, r0
 801a9e8:	460d      	mov	r5, r1
 801a9ea:	4616      	mov	r6, r2
 801a9ec:	f7f7 fb18 	bl	8012020 <__errno>
 801a9f0:	4629      	mov	r1, r5
 801a9f2:	6006      	str	r6, [r0, #0]
 801a9f4:	4620      	mov	r0, r4
 801a9f6:	bd70      	pop	{r4, r5, r6, pc}

0801a9f8 <xflow>:
 801a9f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a9fa:	4614      	mov	r4, r2
 801a9fc:	461d      	mov	r5, r3
 801a9fe:	b108      	cbz	r0, 801aa04 <xflow+0xc>
 801aa00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801aa04:	e9cd 2300 	strd	r2, r3, [sp]
 801aa08:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aa0c:	4620      	mov	r0, r4
 801aa0e:	4629      	mov	r1, r5
 801aa10:	f7e5 fe12 	bl	8000638 <__aeabi_dmul>
 801aa14:	2222      	movs	r2, #34	; 0x22
 801aa16:	b003      	add	sp, #12
 801aa18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa1c:	f7ff bfe2 	b.w	801a9e4 <with_errno>

0801aa20 <__math_uflow>:
 801aa20:	b508      	push	{r3, lr}
 801aa22:	2200      	movs	r2, #0
 801aa24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801aa28:	f7ff ffe6 	bl	801a9f8 <xflow>
 801aa2c:	ec41 0b10 	vmov	d0, r0, r1
 801aa30:	bd08      	pop	{r3, pc}

0801aa32 <__math_oflow>:
 801aa32:	b508      	push	{r3, lr}
 801aa34:	2200      	movs	r2, #0
 801aa36:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801aa3a:	f7ff ffdd 	bl	801a9f8 <xflow>
 801aa3e:	ec41 0b10 	vmov	d0, r0, r1
 801aa42:	bd08      	pop	{r3, pc}

0801aa44 <fabs>:
 801aa44:	ec51 0b10 	vmov	r0, r1, d0
 801aa48:	ee10 2a10 	vmov	r2, s0
 801aa4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aa50:	ec43 2b10 	vmov	d0, r2, r3
 801aa54:	4770      	bx	lr

0801aa56 <finite>:
 801aa56:	b082      	sub	sp, #8
 801aa58:	ed8d 0b00 	vstr	d0, [sp]
 801aa5c:	9801      	ldr	r0, [sp, #4]
 801aa5e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801aa62:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801aa66:	0fc0      	lsrs	r0, r0, #31
 801aa68:	b002      	add	sp, #8
 801aa6a:	4770      	bx	lr
 801aa6c:	0000      	movs	r0, r0
	...

0801aa70 <floor>:
 801aa70:	ec51 0b10 	vmov	r0, r1, d0
 801aa74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801aa7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801aa80:	2e13      	cmp	r6, #19
 801aa82:	ee10 5a10 	vmov	r5, s0
 801aa86:	ee10 8a10 	vmov	r8, s0
 801aa8a:	460c      	mov	r4, r1
 801aa8c:	dc32      	bgt.n	801aaf4 <floor+0x84>
 801aa8e:	2e00      	cmp	r6, #0
 801aa90:	da14      	bge.n	801aabc <floor+0x4c>
 801aa92:	a333      	add	r3, pc, #204	; (adr r3, 801ab60 <floor+0xf0>)
 801aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa98:	f7e5 fc18 	bl	80002cc <__adddf3>
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	2300      	movs	r3, #0
 801aaa0:	f7e6 f85a 	bl	8000b58 <__aeabi_dcmpgt>
 801aaa4:	b138      	cbz	r0, 801aab6 <floor+0x46>
 801aaa6:	2c00      	cmp	r4, #0
 801aaa8:	da57      	bge.n	801ab5a <floor+0xea>
 801aaaa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801aaae:	431d      	orrs	r5, r3
 801aab0:	d001      	beq.n	801aab6 <floor+0x46>
 801aab2:	4c2d      	ldr	r4, [pc, #180]	; (801ab68 <floor+0xf8>)
 801aab4:	2500      	movs	r5, #0
 801aab6:	4621      	mov	r1, r4
 801aab8:	4628      	mov	r0, r5
 801aaba:	e025      	b.n	801ab08 <floor+0x98>
 801aabc:	4f2b      	ldr	r7, [pc, #172]	; (801ab6c <floor+0xfc>)
 801aabe:	4137      	asrs	r7, r6
 801aac0:	ea01 0307 	and.w	r3, r1, r7
 801aac4:	4303      	orrs	r3, r0
 801aac6:	d01f      	beq.n	801ab08 <floor+0x98>
 801aac8:	a325      	add	r3, pc, #148	; (adr r3, 801ab60 <floor+0xf0>)
 801aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aace:	f7e5 fbfd 	bl	80002cc <__adddf3>
 801aad2:	2200      	movs	r2, #0
 801aad4:	2300      	movs	r3, #0
 801aad6:	f7e6 f83f 	bl	8000b58 <__aeabi_dcmpgt>
 801aada:	2800      	cmp	r0, #0
 801aadc:	d0eb      	beq.n	801aab6 <floor+0x46>
 801aade:	2c00      	cmp	r4, #0
 801aae0:	bfbe      	ittt	lt
 801aae2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801aae6:	fa43 f606 	asrlt.w	r6, r3, r6
 801aaea:	19a4      	addlt	r4, r4, r6
 801aaec:	ea24 0407 	bic.w	r4, r4, r7
 801aaf0:	2500      	movs	r5, #0
 801aaf2:	e7e0      	b.n	801aab6 <floor+0x46>
 801aaf4:	2e33      	cmp	r6, #51	; 0x33
 801aaf6:	dd0b      	ble.n	801ab10 <floor+0xa0>
 801aaf8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801aafc:	d104      	bne.n	801ab08 <floor+0x98>
 801aafe:	ee10 2a10 	vmov	r2, s0
 801ab02:	460b      	mov	r3, r1
 801ab04:	f7e5 fbe2 	bl	80002cc <__adddf3>
 801ab08:	ec41 0b10 	vmov	d0, r0, r1
 801ab0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab10:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801ab14:	f04f 33ff 	mov.w	r3, #4294967295
 801ab18:	fa23 f707 	lsr.w	r7, r3, r7
 801ab1c:	4207      	tst	r7, r0
 801ab1e:	d0f3      	beq.n	801ab08 <floor+0x98>
 801ab20:	a30f      	add	r3, pc, #60	; (adr r3, 801ab60 <floor+0xf0>)
 801ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab26:	f7e5 fbd1 	bl	80002cc <__adddf3>
 801ab2a:	2200      	movs	r2, #0
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	f7e6 f813 	bl	8000b58 <__aeabi_dcmpgt>
 801ab32:	2800      	cmp	r0, #0
 801ab34:	d0bf      	beq.n	801aab6 <floor+0x46>
 801ab36:	2c00      	cmp	r4, #0
 801ab38:	da02      	bge.n	801ab40 <floor+0xd0>
 801ab3a:	2e14      	cmp	r6, #20
 801ab3c:	d103      	bne.n	801ab46 <floor+0xd6>
 801ab3e:	3401      	adds	r4, #1
 801ab40:	ea25 0507 	bic.w	r5, r5, r7
 801ab44:	e7b7      	b.n	801aab6 <floor+0x46>
 801ab46:	2301      	movs	r3, #1
 801ab48:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ab4c:	fa03 f606 	lsl.w	r6, r3, r6
 801ab50:	4435      	add	r5, r6
 801ab52:	4545      	cmp	r5, r8
 801ab54:	bf38      	it	cc
 801ab56:	18e4      	addcc	r4, r4, r3
 801ab58:	e7f2      	b.n	801ab40 <floor+0xd0>
 801ab5a:	2500      	movs	r5, #0
 801ab5c:	462c      	mov	r4, r5
 801ab5e:	e7aa      	b.n	801aab6 <floor+0x46>
 801ab60:	8800759c 	.word	0x8800759c
 801ab64:	7e37e43c 	.word	0x7e37e43c
 801ab68:	bff00000 	.word	0xbff00000
 801ab6c:	000fffff 	.word	0x000fffff

0801ab70 <scalbn>:
 801ab70:	b570      	push	{r4, r5, r6, lr}
 801ab72:	ec55 4b10 	vmov	r4, r5, d0
 801ab76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ab7a:	4606      	mov	r6, r0
 801ab7c:	462b      	mov	r3, r5
 801ab7e:	b99a      	cbnz	r2, 801aba8 <scalbn+0x38>
 801ab80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ab84:	4323      	orrs	r3, r4
 801ab86:	d036      	beq.n	801abf6 <scalbn+0x86>
 801ab88:	4b39      	ldr	r3, [pc, #228]	; (801ac70 <scalbn+0x100>)
 801ab8a:	4629      	mov	r1, r5
 801ab8c:	ee10 0a10 	vmov	r0, s0
 801ab90:	2200      	movs	r2, #0
 801ab92:	f7e5 fd51 	bl	8000638 <__aeabi_dmul>
 801ab96:	4b37      	ldr	r3, [pc, #220]	; (801ac74 <scalbn+0x104>)
 801ab98:	429e      	cmp	r6, r3
 801ab9a:	4604      	mov	r4, r0
 801ab9c:	460d      	mov	r5, r1
 801ab9e:	da10      	bge.n	801abc2 <scalbn+0x52>
 801aba0:	a32b      	add	r3, pc, #172	; (adr r3, 801ac50 <scalbn+0xe0>)
 801aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aba6:	e03a      	b.n	801ac1e <scalbn+0xae>
 801aba8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801abac:	428a      	cmp	r2, r1
 801abae:	d10c      	bne.n	801abca <scalbn+0x5a>
 801abb0:	ee10 2a10 	vmov	r2, s0
 801abb4:	4620      	mov	r0, r4
 801abb6:	4629      	mov	r1, r5
 801abb8:	f7e5 fb88 	bl	80002cc <__adddf3>
 801abbc:	4604      	mov	r4, r0
 801abbe:	460d      	mov	r5, r1
 801abc0:	e019      	b.n	801abf6 <scalbn+0x86>
 801abc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801abc6:	460b      	mov	r3, r1
 801abc8:	3a36      	subs	r2, #54	; 0x36
 801abca:	4432      	add	r2, r6
 801abcc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801abd0:	428a      	cmp	r2, r1
 801abd2:	dd08      	ble.n	801abe6 <scalbn+0x76>
 801abd4:	2d00      	cmp	r5, #0
 801abd6:	a120      	add	r1, pc, #128	; (adr r1, 801ac58 <scalbn+0xe8>)
 801abd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abdc:	da1c      	bge.n	801ac18 <scalbn+0xa8>
 801abde:	a120      	add	r1, pc, #128	; (adr r1, 801ac60 <scalbn+0xf0>)
 801abe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abe4:	e018      	b.n	801ac18 <scalbn+0xa8>
 801abe6:	2a00      	cmp	r2, #0
 801abe8:	dd08      	ble.n	801abfc <scalbn+0x8c>
 801abea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801abee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801abf2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801abf6:	ec45 4b10 	vmov	d0, r4, r5
 801abfa:	bd70      	pop	{r4, r5, r6, pc}
 801abfc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ac00:	da19      	bge.n	801ac36 <scalbn+0xc6>
 801ac02:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ac06:	429e      	cmp	r6, r3
 801ac08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801ac0c:	dd0a      	ble.n	801ac24 <scalbn+0xb4>
 801ac0e:	a112      	add	r1, pc, #72	; (adr r1, 801ac58 <scalbn+0xe8>)
 801ac10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d1e2      	bne.n	801abde <scalbn+0x6e>
 801ac18:	a30f      	add	r3, pc, #60	; (adr r3, 801ac58 <scalbn+0xe8>)
 801ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac1e:	f7e5 fd0b 	bl	8000638 <__aeabi_dmul>
 801ac22:	e7cb      	b.n	801abbc <scalbn+0x4c>
 801ac24:	a10a      	add	r1, pc, #40	; (adr r1, 801ac50 <scalbn+0xe0>)
 801ac26:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d0b8      	beq.n	801aba0 <scalbn+0x30>
 801ac2e:	a10e      	add	r1, pc, #56	; (adr r1, 801ac68 <scalbn+0xf8>)
 801ac30:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac34:	e7b4      	b.n	801aba0 <scalbn+0x30>
 801ac36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ac3a:	3236      	adds	r2, #54	; 0x36
 801ac3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ac40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801ac44:	4620      	mov	r0, r4
 801ac46:	4b0c      	ldr	r3, [pc, #48]	; (801ac78 <scalbn+0x108>)
 801ac48:	2200      	movs	r2, #0
 801ac4a:	e7e8      	b.n	801ac1e <scalbn+0xae>
 801ac4c:	f3af 8000 	nop.w
 801ac50:	c2f8f359 	.word	0xc2f8f359
 801ac54:	01a56e1f 	.word	0x01a56e1f
 801ac58:	8800759c 	.word	0x8800759c
 801ac5c:	7e37e43c 	.word	0x7e37e43c
 801ac60:	8800759c 	.word	0x8800759c
 801ac64:	fe37e43c 	.word	0xfe37e43c
 801ac68:	c2f8f359 	.word	0xc2f8f359
 801ac6c:	81a56e1f 	.word	0x81a56e1f
 801ac70:	43500000 	.word	0x43500000
 801ac74:	ffff3cb0 	.word	0xffff3cb0
 801ac78:	3c900000 	.word	0x3c900000

0801ac7c <_init>:
 801ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac7e:	bf00      	nop
 801ac80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac82:	bc08      	pop	{r3}
 801ac84:	469e      	mov	lr, r3
 801ac86:	4770      	bx	lr

0801ac88 <_fini>:
 801ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac8a:	bf00      	nop
 801ac8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac8e:	bc08      	pop	{r3}
 801ac90:	469e      	mov	lr, r3
 801ac92:	4770      	bx	lr
